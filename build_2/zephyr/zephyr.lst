
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
LOG_MODULE_REGISTER(bt_data);

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   0:	00 8d 00 20 c5 5a 01 00 97 79 02 00 99 5a 01 00     ... .Z...y...Z..
	while (ad->len > 1) {
  10:	99 5a 01 00 99 5a 01 00 99 5a 01 00 00 00 00 00     .Z...Z...Z......
	...
			/* Early termination */
			return;
		}

		if (len > ad->len) {
			LOG_WRN("malformed advertising data %u / %u",
  2c:	39 52 01 00 99 5a 01 00 00 00 00 00 a9 51 01 00     9R...Z.......Q..
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
  3c:	99 5a 01 00                                         .Z..

00000040 <_irq_vector_table>:
  40:	a9 53 01 00 3b 96 02 00 a9 53 01 00 a9 53 01 00     .S..;....S...S..
				len, ad->len);
			return;
		}

		data.type = net_buf_simple_pull_u8(ad);
  50:	a9 53 01 00 a9 53 01 00 a9 53 01 00 a9 53 01 00     .S...S...S...S..
		data.data_len = len - 1;
		data.data = ad->data;
  60:	03 96 02 00 a9 53 01 00 a9 53 01 00 21 96 02 00     .....S...S..!...

		if (!func(&data, user_data)) {
			return;
		}

		net_buf_simple_pull(ad, len - 1);
  70:	a9 53 01 00 a9 53 01 00 a9 53 01 00 a9 53 01 00     .S...S...S...S..

NRF_STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
  80:	a9 53 01 00 a9 53 01 00 a9 53 01 00 a9 53 01 00     .S...S...S...S..
    reg->PIN_CNF[pin_number] = cnf;
  90:	a9 53 01 00 a9 53 01 00 a9 53 01 00 a9 53 01 00     .S...S...S...S..
        if (p_config->pseltxd != NRF_UARTE_PSEL_DISCONNECTED)
        {
            nrf_gpio_pin_set(p_config->pseltxd);
            nrf_gpio_cfg_output(p_config->pseltxd);
        }
        if (p_config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED)
  a0:	a9 53 01 00 a9 53 01 00 a9 53 01 00 a9 53 01 00     .S...S...S...S..
  b0:	a9 53 01 00 a9 53 01 00 a9 53 01 00 a9 53 01 00     .S...S...S...S..

NRF_STATIC_INLINE void nrf_uarte_txrx_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pseltxd,
                                               uint32_t         pselrxd)
{
    p_reg->PSEL.TXD = pseltxd;
  c0:	a9 53 01 00 a9 53 01 00 a9 53 01 00 a9 53 01 00     .S...S...S...S..
    {
        nrf_uarte_txrx_pins_set(p_instance->p_reg,
                                p_config->pseltxd, p_config->pselrxd);
    }

    if (p_config->hal_cfg.hwfc == NRF_UARTE_HWFC_ENABLED)
  d0:	a9 53 01 00 a9 53 01 00 a9 53 01 00 a9 53 01 00     .S...S...S...S..
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
  e0:	a9 53 01 00 a9 53 01 00 a9 53 01 00 a9 53 01 00     .S...S...S...S..
    nrf_gpio_cfg(
  f0:	a9 53 01 00 a9 53 01 00 a9 53 01 00 a9 53 01 00     .S...S...S...S..

Disassembly of section text:

00000100 <__aeabi_drsub>:
    reg->PIN_CNF[pin_number] = cnf;
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
            if (p_config->pselrts != NRF_UARTE_PSEL_DISCONNECTED)
            {
                nrf_gpio_pin_set(p_config->pselrts);
                nrf_gpio_cfg_output(p_config->pselrts);
            }
            if (p_config->pselcts != NRF_UARTE_PSEL_DISCONNECTED)
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
            {
                nrf_gpio_cfg_input(p_config->pselcts, NRF_GPIO_PIN_NOPULL);
            }
        }
        if (!p_config->skip_psel_cfg)
     120:	bf1f      	itttt	ne
        {
            nrf_uarte_hwfc_pins_set(p_instance->p_reg,
                                    p_config->pselrts, p_config->pselcts);
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
            nrf_uarte_hwfc_pins_set(p_instance->p_reg,
     126:	ea55 0c02 	orrsne.w	ip, r5, r2

NRF_STATIC_INLINE void nrf_uarte_hwfc_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pselrts,
                                               uint32_t         pselcts)
{
    p_reg->PSEL.RTS = pselrts;
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    p_reg->PSEL.CTS = pselcts;
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21

    apply_config(p_instance, p_config);

    apply_workaround_for_enable_anomaly(p_instance);

    p_cb->handler   = event_handler;
     132:	f000 80e2 	beq.w	2fa <CONFIG_BT_PERIPHERAL_PREF_TIMEOUT+0x16a>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
    p_cb->p_context = p_config->p_context;
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21

    if (p_cb->handler)
     13e:	bfb8      	it	lt
    nrf_uarte_event_clear(p_instance->p_reg, NRF_UARTE_EVENT_ENDRX);
     140:	426d      	neglt	r5, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
    nrf_uarte_event_clear(p_instance->p_reg, NRF_UARTE_EVENT_ERROR);
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
    nrf_uarte_event_clear(p_instance->p_reg, NRF_UARTE_EVENT_RXTO);
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    nrf_uarte_int_enable(p_instance->p_reg, NRF_UARTE_INT_ENDRX_MASK |
     174:	d002      	beq.n	17c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xf>
    p_reg->INTENSET = mask;
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    NRFX_IRQ_ENABLE(nrfx_get_irq_number((void *)p_instance->p_reg));
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    p_cb->tx_buffer_length           = 0;
    p_cb->state                      = NRFX_DRV_STATE_INITIALIZED;
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
     188:	d002      	beq.n	190 <CONFIG_BT_PERIPHERAL_PREF_TIMEOUT>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    p_cb->rx_buffer_length           = 0;
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <CONFIG_BT_PERIPHERAL_PREF_TIMEOUT+0x156>
    p_cb->rx_secondary_buffer_length = 0;
     198:	f1a4 0401 	sub.w	r4, r4, #1
    p_cb->tx_buffer_length           = 0;
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
    p_cb->state                      = NRFX_DRV_STATE_INITIALIZED;
     1a0:	db0d      	blt.n	1be <CONFIG_BT_PERIPHERAL_PREF_TIMEOUT+0x2e>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
}
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
        return err_code;
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_BT_PERIPHERAL_PREF_TIMEOUT+0x4c>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <CONFIG_BT_PERIPHERAL_PREF_TIMEOUT+0x62>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <CONFIG_BT_PERIPHERAL_PREF_TIMEOUT+0xa0>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <CONFIG_BT_PERIPHERAL_PREF_TIMEOUT+0x88>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <CONFIG_BT_DEVICE_APPEARANCE+0xb>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_BT_PERIPHERAL_PREF_TIMEOUT+0x88>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <CONFIG_BT_PERIPHERAL_PREF_TIMEOUT+0xea>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <CONFIG_BT_PERIPHERAL_PREF_TIMEOUT+0xe6>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <CONFIG_BT_PERIPHERAL_PREF_TIMEOUT+0x100>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <CONFIG_BT_PERIPHERAL_PREF_TIMEOUT+0x14e>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <CONFIG_BT_PERIPHERAL_PREF_TIMEOUT+0x136>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_BT_PERIPHERAL_PREF_TIMEOUT+0x8>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <CONFIG_BT_DEVICE_APPEARANCE+0x19>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <CONFIG_BT_PERIPHERAL_PREF_TIMEOUT+0x18e>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <CONFIG_BT_PERIPHERAL_PREF_MAX_INT+0x1c>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <CONFIG_BT_PERIPHERAL_PREF_TIMEOUT+0xb4>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <CONFIG_BT_PERIPHERAL_PREF_TIMEOUT+0xb4>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <CONFIG_BT_PERIPHERAL_PREF_TIMEOUT+0xb4>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_BT_PERIPHERAL_PREF_TIMEOUT+0x62>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_BT_PERIPHERAL_PREF_TIMEOUT+0x62>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_BT_HCI_TX_STACK_SIZE+0x54>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <CONFIG_BT_LONG_WQ_STACK_SIZE+0x18>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x42>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_BT_HCI_TX_STACK_SIZE+0xb0>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_BT_LONG_WQ_STACK_SIZE+0xc8>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <CONFIG_BT_LONG_WQ_STACK_SIZE+0x98>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_BT_HCI_TX_STACK_SIZE+0x3a>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_BT_HCI_TX_STACK_SIZE+0x3e>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_BT_HCI_TX_STACK_SIZE+0x7e>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_BT_HCI_TX_STACK_SIZE+0x9a>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_BT_RX_STACK_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_BT_RX_STACK_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x42>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x42>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x42>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_BT_RX_STACK_SIZE+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_BT_RX_STACK_SIZE+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_BT_HCI_TX_STACK_SIZE+0x70>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_BT_HCI_TX_STACK_SIZE+0xac>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_BT_HCI_TX_STACK_SIZE+0x70>
     89a:	e712      	b.n	6c2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc2>

0000089c <__aeabi_uldivmod>:
     89c:	b953      	cbnz	r3, 8b4 <__aeabi_uldivmod+0x18>
     89e:	b94a      	cbnz	r2, 8b4 <__aeabi_uldivmod+0x18>
     8a0:	2900      	cmp	r1, #0
     8a2:	bf08      	it	eq
     8a4:	2800      	cmpeq	r0, #0
     8a6:	bf1c      	itt	ne
     8a8:	f04f 31ff 	movne.w	r1, #4294967295
     8ac:	f04f 30ff 	movne.w	r0, #4294967295
     8b0:	f000 b80c 	b.w	8cc <__aeabi_idiv0>
     8b4:	f1ad 0c08 	sub.w	ip, sp, #8
     8b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     8bc:	f00c f8ba 	bl	ca34 <__udivmoddi4>
     8c0:	f8dd e004 	ldr.w	lr, [sp, #4]
     8c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     8c8:	b004      	add	sp, #16
     8ca:	4770      	bx	lr

000008cc <__aeabi_idiv0>:
     8cc:	4770      	bx	lr
     8ce:	bf00      	nop

000008d0 <ocrypto_bigint_add256>:
     8d0:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     8d4:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     8d8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     8dc:	185b      	adds	r3, r3, r1
     8de:	eb54 040c 	adcs.w	r4, r4, ip
     8e2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     8e6:	414d      	adcs	r5, r1
     8e8:	eb56 060c 	adcs.w	r6, r6, ip
     8ec:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     8f0:	414f      	adcs	r7, r1
     8f2:	eb58 080c 	adcs.w	r8, r8, ip
     8f6:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     8fa:	eb59 0901 	adcs.w	r9, r9, r1
     8fe:	eb5a 0a0c 	adcs.w	sl, sl, ip
     902:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     906:	4180      	sbcs	r0, r0
     908:	3001      	adds	r0, #1
     90a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     90e:	4770      	bx	lr

00000910 <ocrypto_bigint_sub256>:
     910:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     914:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     918:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     91c:	1a5b      	subs	r3, r3, r1
     91e:	eb74 040c 	sbcs.w	r4, r4, ip
     922:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     926:	418d      	sbcs	r5, r1
     928:	eb76 060c 	sbcs.w	r6, r6, ip
     92c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     930:	418f      	sbcs	r7, r1
     932:	eb78 080c 	sbcs.w	r8, r8, ip
     936:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     93a:	eb79 0901 	sbcs.w	r9, r9, r1
     93e:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     942:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     946:	4180      	sbcs	r0, r0
     948:	4240      	negs	r0, r0
     94a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     94e:	4770      	bx	lr

00000950 <ocrypto_bigint_cadd256>:
     950:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     954:	4252      	negs	r2, r2
     956:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     95a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     95e:	4017      	ands	r7, r2
     960:	19db      	adds	r3, r3, r7
     962:	ea18 0802 	ands.w	r8, r8, r2
     966:	eb54 0408 	adcs.w	r4, r4, r8
     96a:	ea19 0902 	ands.w	r9, r9, r2
     96e:	eb55 0509 	adcs.w	r5, r5, r9
     972:	ea1a 0a02 	ands.w	sl, sl, r2
     976:	eb56 060a 	adcs.w	r6, r6, sl
     97a:	c078      	stmia	r0!, {r3, r4, r5, r6}
     97c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     980:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     984:	4017      	ands	r7, r2
     986:	417b      	adcs	r3, r7
     988:	ea18 0802 	ands.w	r8, r8, r2
     98c:	eb54 0408 	adcs.w	r4, r4, r8
     990:	ea19 0902 	ands.w	r9, r9, r2
     994:	eb55 0509 	adcs.w	r5, r5, r9
     998:	ea1a 0a02 	ands.w	sl, sl, r2
     99c:	eb56 060a 	adcs.w	r6, r6, sl
     9a0:	c078      	stmia	r0!, {r3, r4, r5, r6}
     9a2:	4180      	sbcs	r0, r0
     9a4:	3001      	adds	r0, #1
     9a6:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     9aa:	4770      	bx	lr

000009ac <ocrypto_bigint_csub256>:
     9ac:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     9b0:	4252      	negs	r2, r2
     9b2:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     9b6:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     9ba:	4017      	ands	r7, r2
     9bc:	1bdb      	subs	r3, r3, r7
     9be:	ea18 0802 	ands.w	r8, r8, r2
     9c2:	eb74 0408 	sbcs.w	r4, r4, r8
     9c6:	ea19 0902 	ands.w	r9, r9, r2
     9ca:	eb75 0509 	sbcs.w	r5, r5, r9
     9ce:	ea1a 0a02 	ands.w	sl, sl, r2
     9d2:	eb76 060a 	sbcs.w	r6, r6, sl
     9d6:	c078      	stmia	r0!, {r3, r4, r5, r6}
     9d8:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     9dc:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     9e0:	4017      	ands	r7, r2
     9e2:	41bb      	sbcs	r3, r7
     9e4:	ea18 0802 	ands.w	r8, r8, r2
     9e8:	eb74 0408 	sbcs.w	r4, r4, r8
     9ec:	ea19 0902 	ands.w	r9, r9, r2
     9f0:	eb75 0509 	sbcs.w	r5, r5, r9
     9f4:	ea1a 0a02 	ands.w	sl, sl, r2
     9f8:	eb76 060a 	sbcs.w	r6, r6, sl
     9fc:	c078      	stmia	r0!, {r3, r4, r5, r6}
     9fe:	4180      	sbcs	r0, r0
     a00:	4240      	negs	r0, r0
     a02:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     a06:	4770      	bx	lr

00000a08 <ocrypto_bigint_cswap256>:
     a08:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
     a0c:	4252      	negs	r2, r2
     a0e:	f04f 0804 	mov.w	r8, #4

00000a12 <cswap256_loop>:
     a12:	e890 0030 	ldmia.w	r0, {r4, r5}
     a16:	e891 00c0 	ldmia.w	r1, {r6, r7}
     a1a:	1ba3      	subs	r3, r4, r6
     a1c:	4013      	ands	r3, r2
     a1e:	1ae4      	subs	r4, r4, r3
     a20:	18f6      	adds	r6, r6, r3
     a22:	1beb      	subs	r3, r5, r7
     a24:	4013      	ands	r3, r2
     a26:	1aed      	subs	r5, r5, r3
     a28:	18ff      	adds	r7, r7, r3
     a2a:	c030      	stmia	r0!, {r4, r5}
     a2c:	c1c0      	stmia	r1!, {r6, r7}
     a2e:	f1b8 0801 	subs.w	r8, r8, #1
     a32:	d1ee      	bne.n	a12 <cswap256_loop>
     a34:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
     a38:	4770      	bx	lr
     a3a:	bf00      	nop

00000a3c <ocrypto_mul256_noframe>:
     a3c:	b500      	push	{lr}
     a3e:	ec92 0a08 	vldmia	r2, {s0-s7}
     a42:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
     a46:	ee07 1a10 	vmov	s14, r1
     a4a:	ec53 2a10 	vmov	r2, r3, s0, s1
     a4e:	ec56 4a11 	vmov	r4, r6, s2, s3
     a52:	fba7 5102 	umull	r5, r1, r7, r2
     a56:	fba8 0b02 	umull	r0, fp, r8, r2
     a5a:	fbe7 1063 	umaal	r1, r0, r7, r3
     a5e:	fbe9 b062 	umaal	fp, r0, r9, r2
     a62:	ec41 5a14 	vmov	s8, s9, r5, r1
     a66:	fba8 5103 	umull	r5, r1, r8, r3
     a6a:	fbea 0162 	umaal	r0, r1, sl, r2
     a6e:	fbe7 b564 	umaal	fp, r5, r7, r4
     a72:	fbe7 0566 	umaal	r0, r5, r7, r6
     a76:	fbe8 1566 	umaal	r1, r5, r8, r6
     a7a:	ee05 ba10 	vmov	s10, fp
     a7e:	fba9 b603 	umull	fp, r6, r9, r3
     a82:	fbea 1663 	umaal	r1, r6, sl, r3
     a86:	fbec 5663 	umaal	r5, r6, ip, r3
     a8a:	fbe8 0b64 	umaal	r0, fp, r8, r4
     a8e:	fbe9 1b64 	umaal	r1, fp, r9, r4
     a92:	fbea 5b64 	umaal	r5, fp, sl, r4
     a96:	fbec 6b64 	umaal	r6, fp, ip, r4
     a9a:	ee05 0a90 	vmov	s11, r0
     a9e:	fbac 3002 	umull	r3, r0, ip, r2
     aa2:	ee12 4a10 	vmov	r4, s4
     aa6:	fbee 5062 	umaal	r5, r0, lr, r2
     aaa:	fbe9 6064 	umaal	r6, r0, r9, r4
     aae:	fbea b064 	umaal	fp, r0, sl, r4
     ab2:	fbe7 3164 	umaal	r3, r1, r7, r4
     ab6:	fbe8 5164 	umaal	r5, r1, r8, r4
     aba:	ee12 4a90 	vmov	r4, s5
     abe:	fbe8 6164 	umaal	r6, r1, r8, r4
     ac2:	fbe9 b164 	umaal	fp, r1, r9, r4
     ac6:	fbea 0164 	umaal	r0, r1, sl, r4
     aca:	ee06 3a10 	vmov	s12, r3
     ace:	fba7 3204 	umull	r3, r2, r7, r4
     ad2:	ee13 4a10 	vmov	r4, s6
     ad6:	fbe7 6264 	umaal	r6, r2, r7, r4
     ada:	fbe8 b264 	umaal	fp, r2, r8, r4
     ade:	fbe9 0264 	umaal	r0, r2, r9, r4
     ae2:	fbea 1264 	umaal	r1, r2, sl, r4
     ae6:	ee11 4a90 	vmov	r4, s3
     aea:	fbe9 5364 	umaal	r5, r3, r9, r4
     aee:	fbea 6364 	umaal	r6, r3, sl, r4
     af2:	ee13 4a90 	vmov	r4, s7
     af6:	fbe7 b364 	umaal	fp, r3, r7, r4
     afa:	fbe8 0364 	umaal	r0, r3, r8, r4
     afe:	fbe9 1364 	umaal	r1, r3, r9, r4
     b02:	fbea 2364 	umaal	r2, r3, sl, r4
     b06:	ee06 5a90 	vmov	s13, r5
     b0a:	ee17 9a10 	vmov	r9, s14
     b0e:	e899 0600 	ldmia.w	r9, {r9, sl}
     b12:	ee10 8a10 	vmov	r8, s0
     b16:	fba9 5408 	umull	r5, r4, r9, r8
     b1a:	fbea b468 	umaal	fp, r4, sl, r8
     b1e:	ee12 8a10 	vmov	r8, s4
     b22:	fbec 0468 	umaal	r0, r4, ip, r8
     b26:	fbee 1468 	umaal	r1, r4, lr, r8
     b2a:	fbe9 2468 	umaal	r2, r4, r9, r8
     b2e:	fbea 3468 	umaal	r3, r4, sl, r8
     b32:	ee10 8a90 	vmov	r8, s1
     b36:	fbee 6568 	umaal	r6, r5, lr, r8
     b3a:	fbe9 b568 	umaal	fp, r5, r9, r8
     b3e:	fbea 0568 	umaal	r0, r5, sl, r8
     b42:	ee12 8a90 	vmov	r8, s5
     b46:	fbec 1568 	umaal	r1, r5, ip, r8
     b4a:	fbee 2568 	umaal	r2, r5, lr, r8
     b4e:	fbe9 3568 	umaal	r3, r5, r9, r8
     b52:	fbea 4568 	umaal	r4, r5, sl, r8
     b56:	ee07 6a10 	vmov	s14, r6
     b5a:	ee11 8a10 	vmov	r8, s2
     b5e:	fbae 7608 	umull	r7, r6, lr, r8
     b62:	fbe9 0668 	umaal	r0, r6, r9, r8
     b66:	fbea 1668 	umaal	r1, r6, sl, r8
     b6a:	ee13 8a10 	vmov	r8, s6
     b6e:	fbec 2668 	umaal	r2, r6, ip, r8
     b72:	fbee 3668 	umaal	r3, r6, lr, r8
     b76:	fbe9 4668 	umaal	r4, r6, r9, r8
     b7a:	fbea 5668 	umaal	r5, r6, sl, r8
     b7e:	ee11 8a90 	vmov	r8, s3
     b82:	fbec b768 	umaal	fp, r7, ip, r8
     b86:	fbee 0768 	umaal	r0, r7, lr, r8
     b8a:	fbe9 1768 	umaal	r1, r7, r9, r8
     b8e:	fbea 2768 	umaal	r2, r7, sl, r8
     b92:	ee13 8a90 	vmov	r8, s7
     b96:	fbec 3768 	umaal	r3, r7, ip, r8
     b9a:	fbee 4768 	umaal	r4, r7, lr, r8
     b9e:	fbe9 5768 	umaal	r5, r7, r9, r8
     ba2:	fbea 6768 	umaal	r6, r7, sl, r8
     ba6:	bd00      	pop	{pc}

00000ba8 <ocrypto_bigint_mul256>:
     ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     bac:	ee07 0a90 	vmov	s15, r0
     bb0:	f7ff ff44 	bl	a3c <ocrypto_mul256_noframe>
     bb4:	ee17 8a90 	vmov	r8, s15
     bb8:	ee07 ba90 	vmov	s15, fp
     bbc:	eca8 4a08 	vstmia	r8!, {s8-s15}
     bc0:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000bc8 <ocrypto_sqr256_noframe>:
     bc8:	b500      	push	{lr}
     bca:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
     bce:	fba3 5203 	umull	r5, r2, r3, r3
     bd2:	fba3 0104 	umull	r0, r1, r3, r4
     bd6:	fbe3 2064 	umaal	r2, r0, r3, r4
     bda:	fbe3 1067 	umaal	r1, r0, r3, r7
     bde:	ec42 5a14 	vmov	s8, s9, r5, r2
     be2:	fba3 5207 	umull	r5, r2, r3, r7
     be6:	fbe3 0268 	umaal	r0, r2, r3, r8
     bea:	fbe4 1564 	umaal	r1, r5, r4, r4
     bee:	fbe3 0568 	umaal	r0, r5, r3, r8
     bf2:	fbe3 2569 	umaal	r2, r5, r3, r9
     bf6:	fba4 b607 	umull	fp, r6, r4, r7
     bfa:	fbe3 2669 	umaal	r2, r6, r3, r9
     bfe:	fbe3 566a 	umaal	r5, r6, r3, sl
     c02:	fbe4 0b67 	umaal	r0, fp, r4, r7
     c06:	fbe4 2b68 	umaal	r2, fp, r4, r8
     c0a:	fbe3 5b6a 	umaal	r5, fp, r3, sl
     c0e:	fbe3 6b6c 	umaal	r6, fp, r3, ip
     c12:	ec40 1a15 	vmov	s10, s11, r1, r0
     c16:	fba4 1008 	umull	r1, r0, r4, r8
     c1a:	fbe4 5069 	umaal	r5, r0, r4, r9
     c1e:	fbe3 606c 	umaal	r6, r0, r3, ip
     c22:	fbe3 b06e 	umaal	fp, r0, r3, lr
     c26:	fbe7 2167 	umaal	r2, r1, r7, r7
     c2a:	fbe4 5169 	umaal	r5, r1, r4, r9
     c2e:	fbe4 616a 	umaal	r6, r1, r4, sl
     c32:	fbe3 b16e 	umaal	fp, r1, r3, lr
     c36:	fbe4 016e 	umaal	r0, r1, r4, lr
     c3a:	ee06 2a10 	vmov	s12, r2
     c3e:	fba7 3208 	umull	r3, r2, r7, r8
     c42:	fbe4 626a 	umaal	r6, r2, r4, sl
     c46:	fbe4 b26c 	umaal	fp, r2, r4, ip
     c4a:	fbe4 026e 	umaal	r0, r2, r4, lr
     c4e:	fbe7 126e 	umaal	r1, r2, r7, lr
     c52:	fbe7 5368 	umaal	r5, r3, r7, r8
     c56:	fbe7 6369 	umaal	r6, r3, r7, r9
     c5a:	fbe4 b36c 	umaal	fp, r3, r4, ip
     c5e:	fbe7 036c 	umaal	r0, r3, r7, ip
     c62:	fbe7 136e 	umaal	r1, r3, r7, lr
     c66:	fbe8 236e 	umaal	r2, r3, r8, lr
     c6a:	ee06 5a90 	vmov	s13, r5
     c6e:	fba7 5409 	umull	r5, r4, r7, r9
     c72:	fbe7 b46a 	umaal	fp, r4, r7, sl
     c76:	fbe7 046c 	umaal	r0, r4, r7, ip
     c7a:	fbe8 146c 	umaal	r1, r4, r8, ip
     c7e:	fbe8 246e 	umaal	r2, r4, r8, lr
     c82:	fbe9 346e 	umaal	r3, r4, r9, lr
     c86:	fbe8 6568 	umaal	r6, r5, r8, r8
     c8a:	fbe7 b56a 	umaal	fp, r5, r7, sl
     c8e:	fbe8 056a 	umaal	r0, r5, r8, sl
     c92:	fbe8 156c 	umaal	r1, r5, r8, ip
     c96:	fbe9 256c 	umaal	r2, r5, r9, ip
     c9a:	fbe9 356e 	umaal	r3, r5, r9, lr
     c9e:	fbea 456e 	umaal	r4, r5, sl, lr
     ca2:	ee07 6a10 	vmov	s14, r6
     ca6:	fba8 7609 	umull	r7, r6, r8, r9
     caa:	fbe8 066a 	umaal	r0, r6, r8, sl
     cae:	fbe9 166a 	umaal	r1, r6, r9, sl
     cb2:	fbe9 266c 	umaal	r2, r6, r9, ip
     cb6:	fbea 366c 	umaal	r3, r6, sl, ip
     cba:	fbea 466e 	umaal	r4, r6, sl, lr
     cbe:	fbec 566e 	umaal	r5, r6, ip, lr
     cc2:	fbe8 b769 	umaal	fp, r7, r8, r9
     cc6:	fbe9 0769 	umaal	r0, r7, r9, r9
     cca:	fbe9 176a 	umaal	r1, r7, r9, sl
     cce:	fbea 276a 	umaal	r2, r7, sl, sl
     cd2:	fbea 376c 	umaal	r3, r7, sl, ip
     cd6:	fbec 476c 	umaal	r4, r7, ip, ip
     cda:	fbec 576e 	umaal	r5, r7, ip, lr
     cde:	fbee 676e 	umaal	r6, r7, lr, lr
     ce2:	bd00      	pop	{pc}

00000ce4 <ocrypto_bigint_sqr256>:
     ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ce8:	ee07 0a90 	vmov	s15, r0
     cec:	f7ff ff6c 	bl	bc8 <ocrypto_sqr256_noframe>
     cf0:	ee17 8a90 	vmov	r8, s15
     cf4:	ee07 ba90 	vmov	s15, fp
     cf8:	eca8 4a08 	vstmia	r8!, {s8-s15}
     cfc:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000d04 <ocrypto_constant_time_equal>:
     d04:	b430      	push	{r4, r5}
     d06:	f04f 0300 	mov.w	r3, #0

00000d0a <constant_time_equal_loop>:
     d0a:	f810 4b01 	ldrb.w	r4, [r0], #1
     d0e:	f811 5b01 	ldrb.w	r5, [r1], #1
     d12:	3a01      	subs	r2, #1
     d14:	ea84 0405 	eor.w	r4, r4, r5
     d18:	ea43 0304 	orr.w	r3, r3, r4
     d1c:	d1f5      	bne.n	d0a <constant_time_equal_loop>
     d1e:	f1a3 0301 	sub.w	r3, r3, #1
     d22:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     d26:	bc30      	pop	{r4, r5}
     d28:	4770      	bx	lr
     d2a:	bf00      	nop

00000d2c <ocrypto_constant_time_is_zero>:
     d2c:	f04f 0300 	mov.w	r3, #0

00000d30 <constant_time_is_zero_loop>:
     d30:	f810 2b01 	ldrb.w	r2, [r0], #1
     d34:	3901      	subs	r1, #1
     d36:	ea43 0302 	orr.w	r3, r3, r2
     d3a:	d1f9      	bne.n	d30 <constant_time_is_zero_loop>
     d3c:	f1a3 0301 	sub.w	r3, r3, #1
     d40:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     d44:	4770      	bx	lr
     d46:	bf00      	nop

00000d48 <ocrypto_constant_time_xor>:
     d48:	b430      	push	{r4, r5}

00000d4a <constant_time_xor_loop>:
     d4a:	f811 4b01 	ldrb.w	r4, [r1], #1
     d4e:	f812 5b01 	ldrb.w	r5, [r2], #1
     d52:	406c      	eors	r4, r5
     d54:	f800 4b01 	strb.w	r4, [r0], #1
     d58:	3b01      	subs	r3, #1
     d5a:	d1f6      	bne.n	d4a <constant_time_xor_loop>
     d5c:	bc30      	pop	{r4, r5}
     d5e:	4770      	bx	lr

00000d60 <ocrypto_mod_p256_add>:
     d60:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     d64:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     d68:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     d6c:	185b      	adds	r3, r3, r1
     d6e:	eb54 040c 	adcs.w	r4, r4, ip
     d72:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     d76:	414d      	adcs	r5, r1
     d78:	eb56 060c 	adcs.w	r6, r6, ip
     d7c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     d80:	414f      	adcs	r7, r1
     d82:	eb58 080c 	adcs.w	r8, r8, ip
     d86:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     d8a:	eb59 0901 	adcs.w	r9, r9, r1
     d8e:	eb5a 0a0c 	adcs.w	sl, sl, ip
     d92:	4189      	sbcs	r1, r1
     d94:	f1b3 33ff 	subs.w	r3, r3, #4294967295
     d98:	f174 34ff 	sbcs.w	r4, r4, #4294967295
     d9c:	f175 35ff 	sbcs.w	r5, r5, #4294967295
     da0:	f176 0600 	sbcs.w	r6, r6, #0
     da4:	f177 0700 	sbcs.w	r7, r7, #0
     da8:	f178 0800 	sbcs.w	r8, r8, #0
     dac:	f179 0901 	sbcs.w	r9, r9, #1
     db0:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
     db4:	f151 0100 	adcs.w	r1, r1, #0
     db8:	185b      	adds	r3, r3, r1
     dba:	414c      	adcs	r4, r1
     dbc:	414d      	adcs	r5, r1
     dbe:	f156 0600 	adcs.w	r6, r6, #0
     dc2:	f157 0700 	adcs.w	r7, r7, #0
     dc6:	f158 0800 	adcs.w	r8, r8, #0
     dca:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     dce:	eb5a 0a01 	adcs.w	sl, sl, r1
     dd2:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     dd6:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     dda:	4770      	bx	lr

00000ddc <ocrypto_mod_p256_sub>:
     ddc:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     de0:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     de4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     de8:	1a5b      	subs	r3, r3, r1
     dea:	eb74 040c 	sbcs.w	r4, r4, ip
     dee:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     df2:	418d      	sbcs	r5, r1
     df4:	eb76 060c 	sbcs.w	r6, r6, ip
     df8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     dfc:	418f      	sbcs	r7, r1
     dfe:	eb78 080c 	sbcs.w	r8, r8, ip
     e02:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     e06:	eb79 0901 	sbcs.w	r9, r9, r1
     e0a:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     e0e:	4189      	sbcs	r1, r1
     e10:	185b      	adds	r3, r3, r1
     e12:	414c      	adcs	r4, r1
     e14:	414d      	adcs	r5, r1
     e16:	f156 0600 	adcs.w	r6, r6, #0
     e1a:	f157 0700 	adcs.w	r7, r7, #0
     e1e:	f158 0800 	adcs.w	r8, r8, #0
     e22:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     e26:	eb5a 0a01 	adcs.w	sl, sl, r1
     e2a:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     e2e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     e32:	4770      	bx	lr

00000e34 <mul_reduce>:
     e34:	eb18 0804 	adds.w	r8, r8, r4
     e38:	eb59 0905 	adcs.w	r9, r9, r5
     e3c:	eb5a 0a06 	adcs.w	sl, sl, r6
     e40:	eb5b 0b07 	adcs.w	fp, fp, r7
     e44:	f05f 0c00 	movs.w	ip, #0
     e48:	f14c 0c00 	adc.w	ip, ip, #0
     e4c:	eb18 0805 	adds.w	r8, r8, r5
     e50:	eb59 0906 	adcs.w	r9, r9, r6
     e54:	eb5a 0a07 	adcs.w	sl, sl, r7
     e58:	eb5b 0b07 	adcs.w	fp, fp, r7
     e5c:	eb50 000c 	adcs.w	r0, r0, ip
     e60:	f05f 0c00 	movs.w	ip, #0
     e64:	eb51 010c 	adcs.w	r1, r1, ip
     e68:	eb52 020c 	adcs.w	r2, r2, ip
     e6c:	4163      	adcs	r3, r4
     e6e:	f14c 0c00 	adc.w	ip, ip, #0
     e72:	ebb8 0807 	subs.w	r8, r8, r7
     e76:	f179 0900 	sbcs.w	r9, r9, #0
     e7a:	f17a 0a00 	sbcs.w	sl, sl, #0
     e7e:	eb7b 0b04 	sbcs.w	fp, fp, r4
     e82:	41a8      	sbcs	r0, r5
     e84:	41b1      	sbcs	r1, r6
     e86:	41a2      	sbcs	r2, r4
     e88:	41b3      	sbcs	r3, r6
     e8a:	f16c 0c00 	sbc.w	ip, ip, #0
     e8e:	ebbb 0b05 	subs.w	fp, fp, r5
     e92:	41b0      	sbcs	r0, r6
     e94:	41b9      	sbcs	r1, r7
     e96:	41aa      	sbcs	r2, r5
     e98:	41bb      	sbcs	r3, r7
     e9a:	f16c 0c00 	sbc.w	ip, ip, #0
     e9e:	f04c 0601 	orr.w	r6, ip, #1
     ea2:	f08c 0702 	eor.w	r7, ip, #2
     ea6:	eb18 0806 	adds.w	r8, r8, r6
     eaa:	eb59 096c 	adcs.w	r9, r9, ip, asr #1
     eae:	eb5a 0a6c 	adcs.w	sl, sl, ip, asr #1
     eb2:	eb7b 0b6c 	sbcs.w	fp, fp, ip, asr #1
     eb6:	eb70 046c 	sbcs.w	r4, r0, ip, asr #1
     eba:	eb71 056c 	sbcs.w	r5, r1, ip, asr #1
     ebe:	eb72 0667 	sbcs.w	r6, r2, r7, asr #1
     ec2:	eb53 076c 	adcs.w	r7, r3, ip, asr #1
     ec6:	eb6c 0c6c 	sbc.w	ip, ip, ip, asr #1
     eca:	eb18 000c 	adds.w	r0, r8, ip
     ece:	eb59 010c 	adcs.w	r1, r9, ip
     ed2:	eb5a 020c 	adcs.w	r2, sl, ip
     ed6:	f15b 0300 	adcs.w	r3, fp, #0
     eda:	f154 0400 	adcs.w	r4, r4, #0
     ede:	f155 0500 	adcs.w	r5, r5, #0
     ee2:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
     ee6:	eb57 070c 	adcs.w	r7, r7, ip
     eea:	4770      	bx	lr

00000eec <ocrypto_mod_p256_mul>:
     eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ef0:	ee07 0a90 	vmov	s15, r0
     ef4:	f7ff fda2 	bl	a3c <ocrypto_mul256_noframe>
     ef8:	ec59 8a16 	vmov	r8, r9, s12, s13
     efc:	ee17 aa10 	vmov	sl, s14
     f00:	f7ff ff98 	bl	e34 <mul_reduce>
     f04:	ec59 8a14 	vmov	r8, r9, s8, s9
     f08:	ec5b aa15 	vmov	sl, fp, s10, s11
     f0c:	f7ff ff92 	bl	e34 <mul_reduce>
     f10:	ee17 8a90 	vmov	r8, s15
     f14:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000f1c <ocrypto_mod_p256_sqr>:
     f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f20:	ee07 0a90 	vmov	s15, r0
     f24:	f7ff fe50 	bl	bc8 <ocrypto_sqr256_noframe>
     f28:	ec59 8a16 	vmov	r8, r9, s12, s13
     f2c:	ee17 aa10 	vmov	sl, s14
     f30:	f7ff ff80 	bl	e34 <mul_reduce>
     f34:	ec59 8a14 	vmov	r8, r9, s8, s9
     f38:	ec5b aa15 	vmov	sl, fp, s10, s11
     f3c:	f7ff ff7a 	bl	e34 <mul_reduce>
     f40:	ee17 8a90 	vmov	r8, s15
     f44:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     f4e:	4c14      	ldr	r4, [pc, #80]	; (fa0 <ocrypto_mod_p256_sqr+0x84>)
     f50:	7a20      	ldrb	r0, [r4, #8]
     f52:	f88d 0001 	strb.w	r0, [sp, #1]
     f56:	79e0      	ldrb	r0, [r4, #7]
     f58:	f88d 0000 	strb.w	r0, [sp]
     f5c:	79a0      	ldrb	r0, [r4, #6]
     f5e:	f8ad 0004 	strh.w	r0, [sp, #4]
     f62:	7960      	ldrb	r0, [r4, #5]
     f64:	f8ad 0002 	strh.w	r0, [sp, #2]
     f68:	4668      	mov	r0, sp
     f6a:	f006 f9d5 	bl	7318 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
     f6e:	b108      	cbz	r0, f74 <ocrypto_mod_p256_sqr+0x58>
     f70:	21ad      	movs	r1, #173	; 0xad
     f72:	e010      	b.n	f96 <ocrypto_mod_p256_sqr+0x7a>
     f74:	68e0      	ldr	r0, [r4, #12]
     f76:	9002      	str	r0, [sp, #8]
     f78:	a802      	add	r0, sp, #8
     f7a:	f006 f9e3 	bl	7344 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
     f7e:	b108      	cbz	r0, f84 <ocrypto_mod_p256_sqr+0x68>
     f80:	21b1      	movs	r1, #177	; 0xb1
     f82:	e008      	b.n	f96 <ocrypto_mod_p256_sqr+0x7a>
     f84:	4807      	ldr	r0, [pc, #28]	; (fa4 <ocrypto_mod_p256_sqr+0x88>)
     f86:	6800      	ldr	r0, [r0, #0]
     f88:	9003      	str	r0, [sp, #12]
     f8a:	a803      	add	r0, sp, #12
     f8c:	f00f f857 	bl	1003e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
     f90:	2800      	cmp	r0, #0
     f92:	d003      	beq.n	f9c <ocrypto_mod_p256_sqr+0x80>
     f94:	21b5      	movs	r1, #181	; 0xb5
     f96:	2003      	movs	r0, #3
     f98:	f000 f8e4 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     f9c:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
     f9e:	0000      	.short	0x0000
     fa0:	20001150 	.word	0x20001150
     fa4:	0000126c 	.word	0x0000126c

00000fa8 <sdc_build_revision_get>:
     fa8:	b510      	push	{r4, lr}
     faa:	b128      	cbz	r0, fb8 <sdc_build_revision_get+0x10>
     fac:	2214      	movs	r2, #20
     fae:	4904      	ldr	r1, [pc, #16]	; (fc0 <sdc_build_revision_get+0x18>)
     fb0:	f00f fe85 	bl	10cbe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     fb4:	2000      	movs	r0, #0
     fb6:	bd10      	pop	{r4, pc}
     fb8:	f06f 0015 	mvn.w	r0, #21
     fbc:	bd10      	pop	{r4, pc}
     fbe:	0000      	.short	0x0000
     fc0:	00001294 	.word	0x00001294

00000fc4 <sdc_cfg_set>:
     fc4:	b570      	push	{r4, r5, r6, lr}
     fc6:	f06f 052c 	mvn.w	r5, #44	; 0x2c
     fca:	bb78      	cbnz	r0, 102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>
     fcc:	4c22      	ldr	r4, [pc, #136]	; (1058 <CONFIG_FPROTECT_BLOCK_SIZE+0x58>)
     fce:	7860      	ldrb	r0, [r4, #1]
     fd0:	b108      	cbz	r0, fd6 <sdc_cfg_set+0x12>
     fd2:	11a8      	asrs	r0, r5, #6
     fd4:	bd70      	pop	{r4, r5, r6, pc}
     fd6:	b1f9      	cbz	r1, 1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
     fd8:	f06f 0015 	mvn.w	r0, #21
     fdc:	2a00      	cmp	r2, #0
     fde:	d0f9      	beq.n	fd4 <sdc_cfg_set+0x10>
     fe0:	4b1e      	ldr	r3, [pc, #120]	; (105c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>)
     fe2:	1e89      	subs	r1, r1, #2
     fe4:	2907      	cmp	r1, #7
     fe6:	d231      	bcs.n	104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>
     fe8:	e8df f001 	tbb	[pc, r1]
     fec:	1a170704 	.word	0x1a170704
     ff0:	00211d30 	.word	0x00211d30
     ff4:	7810      	ldrb	r0, [r2, #0]
     ff6:	7058      	strb	r0, [r3, #1]
     ff8:	e01d      	b.n	1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
     ffa:	7891      	ldrb	r1, [r2, #2]
     ffc:	2900      	cmp	r1, #0
     ffe:	d0e9      	beq.n	fd4 <sdc_cfg_set+0x10>
    1000:	78d1      	ldrb	r1, [r2, #3]
    1002:	2900      	cmp	r1, #0
    1004:	d0e6      	beq.n	fd4 <sdc_cfg_set+0x10>
    1006:	7811      	ldrb	r1, [r2, #0]
    1008:	291b      	cmp	r1, #27
    100a:	d3e3      	bcc.n	fd4 <sdc_cfg_set+0x10>
    100c:	7851      	ldrb	r1, [r2, #1]
    100e:	291b      	cmp	r1, #27
    1010:	d3e0      	bcc.n	fd4 <sdc_cfg_set+0x10>
    1012:	6810      	ldr	r0, [r2, #0]
    1014:	f8c3 0005 	str.w	r0, [r3, #5]
    1018:	e00d      	b.n	1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
    101a:	6810      	ldr	r0, [r2, #0]
    101c:	60d8      	str	r0, [r3, #12]
    101e:	e00a      	b.n	1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
    1020:	7810      	ldrb	r0, [r2, #0]
    1022:	7098      	strb	r0, [r3, #2]
    1024:	e007      	b.n	1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
    1026:	8810      	ldrh	r0, [r2, #0]
    1028:	8258      	strh	r0, [r3, #18]
    102a:	e004      	b.n	1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
    102c:	e00e      	b.n	104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>
    102e:	8811      	ldrh	r1, [r2, #0]
    1030:	29ff      	cmp	r1, #255	; 0xff
    1032:	d8cf      	bhi.n	fd4 <sdc_cfg_set+0x10>
    1034:	7519      	strb	r1, [r3, #20]
    1036:	2201      	movs	r2, #1
    1038:	4908      	ldr	r1, [pc, #32]	; (105c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>)
    103a:	2000      	movs	r0, #0
    103c:	f00b fe4a 	bl	ccd4 <__udivmoddi4+0x2a0>
    1040:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    1044:	db04      	blt.n	1050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>
    1046:	f06f 000b 	mvn.w	r0, #11
    104a:	bd70      	pop	{r4, r5, r6, pc}
    104c:	4628      	mov	r0, r5
    104e:	bd70      	pop	{r4, r5, r6, pc}
    1050:	2101      	movs	r1, #1
    1052:	70a1      	strb	r1, [r4, #2]
    1054:	bd70      	pop	{r4, r5, r6, pc}
    1056:	0000      	.short	0x0000
    1058:	20000040 	.word	0x20000040
    105c:	20001150 	.word	0x20001150

00001060 <sdc_disable>:
    1060:	b510      	push	{r4, lr}
    1062:	4c07      	ldr	r4, [pc, #28]	; (1080 <sdc_disable+0x20>)
    1064:	7860      	ldrb	r0, [r4, #1]
    1066:	b120      	cbz	r0, 1072 <sdc_disable+0x12>
    1068:	f006 fc52 	bl	7910 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    106c:	7820      	ldrb	r0, [r4, #0]
    106e:	f00b fc01 	bl	c874 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    1072:	f000 fe4d 	bl	1d10 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
    1076:	f000 ff25 	bl	1ec4 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
    107a:	2000      	movs	r0, #0
    107c:	7060      	strb	r0, [r4, #1]
    107e:	bd10      	pop	{r4, pc}
    1080:	20000040 	.word	0x20000040

00001084 <sdc_enable>:
    1084:	b570      	push	{r4, r5, r6, lr}
    1086:	460c      	mov	r4, r1
    1088:	0005      	movs	r5, r0
    108a:	d002      	beq.n	1092 <sdc_enable+0xe>
    108c:	b10c      	cbz	r4, 1092 <sdc_enable+0xe>
    108e:	0760      	lsls	r0, r4, #29
    1090:	d002      	beq.n	1098 <sdc_enable+0x14>
    1092:	f06f 0015 	mvn.w	r0, #21
    1096:	bd70      	pop	{r4, r5, r6, pc}
    1098:	f000 f922 	bl	12e0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    109c:	b1a8      	cbz	r0, 10ca <sdc_enable+0x46>
    109e:	4628      	mov	r0, r5
    10a0:	f00b fbae 	bl	c800 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    10a4:	4d0a      	ldr	r5, [pc, #40]	; (10d0 <sdc_enable+0x4c>)
    10a6:	2200      	movs	r2, #0
    10a8:	490a      	ldr	r1, [pc, #40]	; (10d4 <sdc_enable+0x50>)
    10aa:	7028      	strb	r0, [r5, #0]
    10ac:	4620      	mov	r0, r4
    10ae:	f00b fe11 	bl	ccd4 <__udivmoddi4+0x2a0>
    10b2:	f00f fbcc 	bl	1084e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    10b6:	2100      	movs	r1, #0
    10b8:	7828      	ldrb	r0, [r5, #0]
    10ba:	f006 fc13 	bl	78e4 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    10be:	f7ff ff45 	bl	f4c <ocrypto_mod_p256_sqr+0x30>
    10c2:	2001      	movs	r0, #1
    10c4:	7068      	strb	r0, [r5, #1]
    10c6:	2000      	movs	r0, #0
    10c8:	bd70      	pop	{r4, r5, r6, pc}
    10ca:	f04f 30ff 	mov.w	r0, #4294967295
    10ce:	bd70      	pop	{r4, r5, r6, pc}
    10d0:	20000040 	.word	0x20000040
    10d4:	20001150 	.word	0x20001150

000010d8 <sdc_init>:
    10d8:	b530      	push	{r4, r5, lr}
    10da:	b089      	sub	sp, #36	; 0x24
    10dc:	0004      	movs	r4, r0
    10de:	d00c      	beq.n	10fa <sdc_init+0x22>
    10e0:	f00b fb36 	bl	c750 <mpsl_is_initialized>
    10e4:	f04f 35ff 	mov.w	r5, #4294967295
    10e8:	b120      	cbz	r0, 10f4 <sdc_init+0x1c>
    10ea:	f00b f9c9 	bl	c480 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    10ee:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    10f2:	d905      	bls.n	1100 <sdc_init+0x28>
    10f4:	4628      	mov	r0, r5
    10f6:	b009      	add	sp, #36	; 0x24
    10f8:	bd30      	pop	{r4, r5, pc}
    10fa:	f06f 0015 	mvn.w	r0, #21
    10fe:	e7fa      	b.n	10f6 <sdc_init+0x1e>
    1100:	4d13      	ldr	r5, [pc, #76]	; (1150 <sdc_init+0x78>)
    1102:	4814      	ldr	r0, [pc, #80]	; (1154 <sdc_init+0x7c>)
    1104:	606c      	str	r4, [r5, #4]
    1106:	f000 fa07 	bl	1518 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    110a:	2000      	movs	r0, #0
    110c:	7068      	strb	r0, [r5, #1]
    110e:	70a8      	strb	r0, [r5, #2]
    1110:	4601      	mov	r1, r0
    1112:	2224      	movs	r2, #36	; 0x24
    1114:	4668      	mov	r0, sp
    1116:	f00f fe4c 	bl	10db2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    111a:	2224      	movs	r2, #36	; 0x24
    111c:	490e      	ldr	r1, [pc, #56]	; (1158 <sdc_init+0x80>)
    111e:	4668      	mov	r0, sp
    1120:	f00f fdcd 	bl	10cbe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1124:	2224      	movs	r2, #36	; 0x24
    1126:	4669      	mov	r1, sp
    1128:	480c      	ldr	r0, [pc, #48]	; (115c <sdc_init+0x84>)
    112a:	f00f fdc8 	bl	10cbe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    112e:	f3ef 8410 	mrs	r4, PRIMASK
    1132:	b672      	cpsid	i
    1134:	f000 fdfa 	bl	1d2c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    1138:	4809      	ldr	r0, [pc, #36]	; (1160 <sdc_init+0x88>)
    113a:	f000 fecf 	bl	1edc <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    113e:	b118      	cbz	r0, 1148 <sdc_init+0x70>
    1140:	21cb      	movs	r1, #203	; 0xcb
    1142:	2003      	movs	r0, #3
    1144:	f000 f80e 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1148:	b904      	cbnz	r4, 114c <sdc_init+0x74>
    114a:	b662      	cpsie	i
    114c:	2000      	movs	r0, #0
    114e:	e7d2      	b.n	10f6 <sdc_init+0x1e>
    1150:	20000040 	.word	0x20000040
    1154:	00000f4d 	.word	0x00000f4d
    1158:	00001270 	.word	0x00001270
    115c:	20001150 	.word	0x20001150
    1160:	0000130d 	.word	0x0000130d

00001164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    1164:	b50e      	push	{r1, r2, r3, lr}
    1166:	b672      	cpsid	i
    1168:	4a15      	ldr	r2, [pc, #84]	; (11c0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    116a:	6855      	ldr	r5, [r2, #4]
    116c:	b1dd      	cbz	r5, 11a6 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
    116e:	2200      	movs	r2, #0
    1170:	4603      	mov	r3, r0
    1172:	466e      	mov	r6, sp
    1174:	240a      	movs	r4, #10
    1176:	e003      	b.n	1180 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    1178:	fbb0 f0f4 	udiv	r0, r0, r4
    117c:	1c52      	adds	r2, r2, #1
    117e:	b2d2      	uxtb	r2, r2
    1180:	2800      	cmp	r0, #0
    1182:	d1f9      	bne.n	1178 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    1184:	54b0      	strb	r0, [r6, r2]
    1186:	e00a      	b.n	119e <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
    1188:	b2d8      	uxtb	r0, r3
    118a:	fbb0 f7f4 	udiv	r7, r0, r4
    118e:	fbb3 f3f4 	udiv	r3, r3, r4
    1192:	fb04 0017 	mls	r0, r4, r7, r0
    1196:	1e52      	subs	r2, r2, #1
    1198:	b2d2      	uxtb	r2, r2
    119a:	3030      	adds	r0, #48	; 0x30
    119c:	54b0      	strb	r0, [r6, r2]
    119e:	2a00      	cmp	r2, #0
    11a0:	d1f2      	bne.n	1188 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    11a2:	4630      	mov	r0, r6
    11a4:	47a8      	blx	r5
    11a6:	f3bf 8f4f 	dsb	sy
    11aa:	4806      	ldr	r0, [pc, #24]	; (11c4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    11ac:	6801      	ldr	r1, [r0, #0]
    11ae:	4a06      	ldr	r2, [pc, #24]	; (11c8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    11b0:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    11b4:	4311      	orrs	r1, r2
    11b6:	6001      	str	r1, [r0, #0]
    11b8:	f3bf 8f4f 	dsb	sy
    11bc:	bf00      	nop
    11be:	e7fd      	b.n	11bc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
    11c0:	20000040 	.word	0x20000040
    11c4:	e000ed0c 	.word	0xe000ed0c
    11c8:	05fa0004 	.word	0x05fa0004

000011cc <sdc_support_adv>:
    11cc:	4806      	ldr	r0, [pc, #24]	; (11e8 <sdc_support_adv+0x1c>)
    11ce:	b510      	push	{r4, lr}
    11d0:	7881      	ldrb	r1, [r0, #2]
    11d2:	7840      	ldrb	r0, [r0, #1]
    11d4:	4301      	orrs	r1, r0
    11d6:	d002      	beq.n	11de <sdc_support_adv+0x12>
    11d8:	f04f 30ff 	mov.w	r0, #4294967295
    11dc:	bd10      	pop	{r4, pc}
    11de:	f006 fba7 	bl	7930 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    11e2:	2000      	movs	r0, #0
    11e4:	bd10      	pop	{r4, pc}
    11e6:	0000      	.short	0x0000
    11e8:	20000040 	.word	0x20000040

000011ec <sdc_support_dle_peripheral>:
    11ec:	4806      	ldr	r0, [pc, #24]	; (1208 <sdc_support_dle_peripheral+0x1c>)
    11ee:	b510      	push	{r4, lr}
    11f0:	7881      	ldrb	r1, [r0, #2]
    11f2:	7840      	ldrb	r0, [r0, #1]
    11f4:	4301      	orrs	r1, r0
    11f6:	d002      	beq.n	11fe <sdc_support_dle_peripheral+0x12>
    11f8:	f04f 30ff 	mov.w	r0, #4294967295
    11fc:	bd10      	pop	{r4, pc}
    11fe:	f006 f9bf 	bl	7580 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>
    1202:	2000      	movs	r0, #0
    1204:	bd10      	pop	{r4, pc}
    1206:	0000      	.short	0x0000
    1208:	20000040 	.word	0x20000040

0000120c <sdc_support_le_2m_phy>:
    120c:	4806      	ldr	r0, [pc, #24]	; (1228 <sdc_support_le_2m_phy+0x1c>)
    120e:	b510      	push	{r4, lr}
    1210:	7881      	ldrb	r1, [r0, #2]
    1212:	7840      	ldrb	r0, [r0, #1]
    1214:	4301      	orrs	r1, r0
    1216:	d002      	beq.n	121e <sdc_support_le_2m_phy+0x12>
    1218:	f04f 30ff 	mov.w	r0, #4294967295
    121c:	bd10      	pop	{r4, pc}
    121e:	f00f f8b2 	bl	10386 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    1222:	2000      	movs	r0, #0
    1224:	bd10      	pop	{r4, pc}
    1226:	0000      	.short	0x0000
    1228:	20000040 	.word	0x20000040

0000122c <sdc_support_peripheral>:
    122c:	4806      	ldr	r0, [pc, #24]	; (1248 <sdc_support_peripheral+0x1c>)
    122e:	b510      	push	{r4, lr}
    1230:	7881      	ldrb	r1, [r0, #2]
    1232:	7840      	ldrb	r0, [r0, #1]
    1234:	4301      	orrs	r1, r0
    1236:	d002      	beq.n	123e <sdc_support_peripheral+0x12>
    1238:	f04f 30ff 	mov.w	r0, #4294967295
    123c:	bd10      	pop	{r4, pc}
    123e:	f006 fb89 	bl	7954 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    1242:	2000      	movs	r0, #0
    1244:	bd10      	pop	{r4, pc}
    1246:	0000      	.short	0x0000
    1248:	20000040 	.word	0x20000040

0000124c <sdc_support_phy_update_peripheral>:
    124c:	4806      	ldr	r0, [pc, #24]	; (1268 <sdc_support_phy_update_peripheral+0x1c>)
    124e:	b510      	push	{r4, lr}
    1250:	7881      	ldrb	r1, [r0, #2]
    1252:	7840      	ldrb	r0, [r0, #1]
    1254:	4301      	orrs	r1, r0
    1256:	d002      	beq.n	125e <sdc_support_phy_update_peripheral+0x12>
    1258:	f04f 30ff 	mov.w	r0, #4294967295
    125c:	bd10      	pop	{r4, pc}
    125e:	f00f f8a6 	bl	103ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
    1262:	2000      	movs	r0, #0
    1264:	bd10      	pop	{r4, pc}
    1266:	0000      	.short	0x0000
    1268:	20000040 	.word	0x20000040
    126c:	00000001 	.word	0x00000001
    1270:	00010100 	.word	0x00010100
    1274:	031b1b00 	.word	0x031b1b00
    1278:	00000002 	.word	0x00000002
    127c:	00001d4c 	.word	0x00001d4c
    1280:	001f0000 	.word	0x001f0000
    1284:	00000008 	.word	0x00000008
	...
    1294:	c12e7ee0 	.word	0xc12e7ee0
    1298:	2385055e 	.word	0x2385055e
    129c:	fadc1546 	.word	0xfadc1546
    12a0:	707d298e 	.word	0x707d298e
    12a4:	fca59310 	.word	0xfca59310

000012a8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    12a8:	4a05      	ldr	r2, [pc, #20]	; (12c0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    12aa:	b510      	push	{r4, lr}
    12ac:	6852      	ldr	r2, [r2, #4]
    12ae:	b112      	cbz	r2, 12b6 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    12b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    12b4:	4710      	bx	r2
    12b6:	2192      	movs	r1, #146	; 0x92
    12b8:	2004      	movs	r0, #4
    12ba:	f7ff ff53 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    12be:	0000      	.short	0x0000
    12c0:	20001174 	.word	0x20001174

000012c4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    12c4:	4a05      	ldr	r2, [pc, #20]	; (12dc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    12c6:	b510      	push	{r4, lr}
    12c8:	6892      	ldr	r2, [r2, #8]
    12ca:	b112      	cbz	r2, 12d2 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    12cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    12d0:	4710      	bx	r2
    12d2:	2198      	movs	r1, #152	; 0x98
    12d4:	2004      	movs	r0, #4
    12d6:	f7ff ff45 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    12da:	0000      	.short	0x0000
    12dc:	20001174 	.word	0x20001174

000012e0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    12e0:	4805      	ldr	r0, [pc, #20]	; (12f8 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    12e2:	6801      	ldr	r1, [r0, #0]
    12e4:	b129      	cbz	r1, 12f2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    12e6:	6841      	ldr	r1, [r0, #4]
    12e8:	b119      	cbz	r1, 12f2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    12ea:	6880      	ldr	r0, [r0, #8]
    12ec:	b108      	cbz	r0, 12f2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    12ee:	2001      	movs	r0, #1
    12f0:	4770      	bx	lr
    12f2:	2000      	movs	r0, #0
    12f4:	4770      	bx	lr
    12f6:	0000      	.short	0x0000
    12f8:	20001174 	.word	0x20001174

000012fc <sdc_rand_source_register>:
    12fc:	4902      	ldr	r1, [pc, #8]	; (1308 <sdc_rand_source_register+0xc>)
    12fe:	c80d      	ldmia	r0, {r0, r2, r3}
    1300:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    1304:	2000      	movs	r0, #0
    1306:	4770      	bx	lr
    1308:	20001174 	.word	0x20001174

0000130c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    130c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    130e:	4c12      	ldr	r4, [pc, #72]	; (1358 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    1310:	2600      	movs	r6, #0
    1312:	6825      	ldr	r5, [r4, #0]
    1314:	e011      	b.n	133a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    1316:	9800      	ldr	r0, [sp, #0]
    1318:	2802      	cmp	r0, #2
    131a:	d002      	beq.n	1322 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    131c:	2803      	cmp	r0, #3
    131e:	d10c      	bne.n	133a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    1320:	e006      	b.n	1330 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    1322:	6820      	ldr	r0, [r4, #0]
    1324:	b110      	cbz	r0, 132c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    1326:	2000      	movs	r0, #0
    1328:	6026      	str	r6, [r4, #0]
    132a:	e005      	b.n	1338 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    132c:	2128      	movs	r1, #40	; 0x28
    132e:	e00c      	b.n	134a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    1330:	6820      	ldr	r0, [r4, #0]
    1332:	b168      	cbz	r0, 1350 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    1334:	2001      	movs	r0, #1
    1336:	6026      	str	r6, [r4, #0]
    1338:	47a8      	blx	r5
    133a:	4668      	mov	r0, sp
    133c:	f000 fd94 	bl	1e68 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    1340:	2800      	cmp	r0, #0
    1342:	d0e8      	beq.n	1316 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    1344:	2805      	cmp	r0, #5
    1346:	d005      	beq.n	1354 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    1348:	2135      	movs	r1, #53	; 0x35
    134a:	2004      	movs	r0, #4
    134c:	f7ff ff0a 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1350:	212d      	movs	r1, #45	; 0x2d
    1352:	e7fa      	b.n	134a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    1354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1356:	0000      	.short	0x0000
    1358:	20000048 	.word	0x20000048

0000135c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
    135c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    1360:	4e28      	ldr	r6, [pc, #160]	; (1404 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x7c>)
    1362:	4605      	mov	r5, r0
    1364:	1d00      	adds	r0, r0, #4
    1366:	f106 0744 	add.w	r7, r6, #68	; 0x44
    136a:	6030      	str	r0, [r6, #0]
    136c:	7838      	ldrb	r0, [r7, #0]
    136e:	b158      	cbz	r0, 1388 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT>
    1370:	78ba      	ldrb	r2, [r7, #2]
    1372:	463c      	mov	r4, r7
    1374:	1c79      	adds	r1, r7, #1
    1376:	4628      	mov	r0, r5
    1378:	1c92      	adds	r2, r2, #2
    137a:	f00f fca0 	bl	10cbe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    137e:	2000      	movs	r0, #0
    1380:	7020      	strb	r0, [r4, #0]
    1382:	2004      	movs	r0, #4
    1384:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    1388:	481e      	ldr	r0, [pc, #120]	; (1404 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x7c>)
    138a:	f001 fe5f 	bl	304c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    138e:	4604      	mov	r4, r0
    1390:	2802      	cmp	r0, #2
    1392:	d004      	beq.n	139e <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x16>
    1394:	2c04      	cmp	r4, #4
    1396:	d007      	beq.n	13a8 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x20>
    1398:	2c08      	cmp	r4, #8
    139a:	d02c      	beq.n	13f6 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x6e>
    139c:	e02f      	b.n	13fe <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x76>
    139e:	4919      	ldr	r1, [pc, #100]	; (1404 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x7c>)
    13a0:	4628      	mov	r0, r5
    13a2:	f00b fd3f 	bl	ce24 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    13a6:	e02a      	b.n	13fe <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x76>
    13a8:	7830      	ldrb	r0, [r6, #0]
    13aa:	2808      	cmp	r0, #8
    13ac:	d104      	bne.n	13b8 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x30>
    13ae:	2105      	movs	r1, #5
    13b0:	203e      	movs	r0, #62	; 0x3e
    13b2:	f00b fd09 	bl	cdc8 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
    13b6:	b150      	cbz	r0, 13ce <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x46>
    13b8:	4912      	ldr	r1, [pc, #72]	; (1404 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x7c>)
    13ba:	4628      	mov	r0, r5
    13bc:	f00b fd97 	bl	ceee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    13c0:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
    13c4:	d30e      	bcc.n	13e4 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x5c>
    13c6:	21c7      	movs	r1, #199	; 0xc7
    13c8:	2008      	movs	r0, #8
    13ca:	f7ff fecb 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    13ce:	88b0      	ldrh	r0, [r6, #4]
    13d0:	f8ad 0000 	strh.w	r0, [sp]
    13d4:	a901      	add	r1, sp, #4
    13d6:	4668      	mov	r0, sp
    13d8:	f00b fff5 	bl	d3c6 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    13dc:	2800      	cmp	r0, #0
    13de:	d0c5      	beq.n	136c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    13e0:	21a8      	movs	r1, #168	; 0xa8
    13e2:	e7f1      	b.n	13c8 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x40>
    13e4:	2800      	cmp	r0, #0
    13e6:	d0c1      	beq.n	136c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    13e8:	78a9      	ldrb	r1, [r5, #2]
    13ea:	7828      	ldrb	r0, [r5, #0]
    13ec:	f00b fcec 	bl	cdc8 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
    13f0:	2800      	cmp	r0, #0
    13f2:	d0bb      	beq.n	136c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x10>
    13f4:	e003      	b.n	13fe <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x76>
    13f6:	4903      	ldr	r1, [pc, #12]	; (1404 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x7c>)
    13f8:	4628      	mov	r0, r5
    13fa:	f00b fd41 	bl	ce80 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>
    13fe:	4620      	mov	r0, r4
    1400:	e7c0      	b.n	1384 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
    1402:	0000      	.short	0x0000
    1404:	20001180 	.word	0x20001180
    1408:	b570      	push	{r4, r5, r6, lr}
    140a:	780a      	ldrb	r2, [r1, #0]
    140c:	7082      	strb	r2, [r0, #2]
    140e:	b33a      	cbz	r2, 1460 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xd8>
    1410:	2a01      	cmp	r2, #1
    1412:	d825      	bhi.n	1460 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xd8>
    1414:	2313      	movs	r3, #19
    1416:	7003      	strb	r3, [r0, #0]
    1418:	2300      	movs	r3, #0
    141a:	e00a      	b.n	1432 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xaa>
    141c:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    1420:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    1424:	78a6      	ldrb	r6, [r4, #2]
    1426:	70ee      	strb	r6, [r5, #3]
    1428:	8864      	ldrh	r4, [r4, #2]
    142a:	0a24      	lsrs	r4, r4, #8
    142c:	1c5b      	adds	r3, r3, #1
    142e:	712c      	strb	r4, [r5, #4]
    1430:	b2db      	uxtb	r3, r3
    1432:	4293      	cmp	r3, r2
    1434:	d3f2      	bcc.n	141c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x94>
    1436:	2300      	movs	r3, #0
    1438:	e00b      	b.n	1452 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xca>
    143a:	bf00      	nop
    143c:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    1440:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    1444:	792e      	ldrb	r6, [r5, #4]
    1446:	7166      	strb	r6, [r4, #5]
    1448:	88ad      	ldrh	r5, [r5, #4]
    144a:	0a2d      	lsrs	r5, r5, #8
    144c:	1c5b      	adds	r3, r3, #1
    144e:	71a5      	strb	r5, [r4, #6]
    1450:	b2db      	uxtb	r3, r3
    1452:	4293      	cmp	r3, r2
    1454:	d3f2      	bcc.n	143c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xb4>
    1456:	2101      	movs	r1, #1
    1458:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    145c:	b2c0      	uxtb	r0, r0
    145e:	bd70      	pop	{r4, r5, r6, pc}
    1460:	2000      	movs	r0, #0
    1462:	bd70      	pop	{r4, r5, r6, pc}

00001464 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    1464:	2840      	cmp	r0, #64	; 0x40
    1466:	d203      	bcs.n	1470 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
    1468:	1e40      	subs	r0, r0, #1
    146a:	b2c1      	uxtb	r1, r0
    146c:	4805      	ldr	r0, [pc, #20]	; (1484 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    146e:	e005      	b.n	147c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
    1470:	28ff      	cmp	r0, #255	; 0xff
    1472:	d005      	beq.n	1480 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
    1474:	3840      	subs	r0, #64	; 0x40
    1476:	b2c1      	uxtb	r1, r0
    1478:	4802      	ldr	r0, [pc, #8]	; (1484 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    147a:	3008      	adds	r0, #8
    147c:	f00b bf36 	b.w	d2ec <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
    1480:	2001      	movs	r0, #1
    1482:	4770      	bx	lr
    1484:	2000004c 	.word	0x2000004c

00001488 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    1488:	1e40      	subs	r0, r0, #1
    148a:	b2c1      	uxtb	r1, r0
    148c:	4801      	ldr	r0, [pc, #4]	; (1494 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
    148e:	f00b bf2d 	b.w	d2ec <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
    1492:	0000      	.short	0x0000
    1494:	2000005c 	.word	0x2000005c

00001498 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    1498:	4902      	ldr	r1, [pc, #8]	; (14a4 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
    149a:	6802      	ldr	r2, [r0, #0]
    149c:	610a      	str	r2, [r1, #16]
    149e:	6840      	ldr	r0, [r0, #4]
    14a0:	6148      	str	r0, [r1, #20]
    14a2:	4770      	bx	lr
    14a4:	2000004c 	.word	0x2000004c

000014a8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    14a8:	4905      	ldr	r1, [pc, #20]	; (14c0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    14aa:	6802      	ldr	r2, [r0, #0]
    14ac:	600a      	str	r2, [r1, #0]
    14ae:	6840      	ldr	r0, [r0, #4]
    14b0:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    14b4:	600a      	str	r2, [r1, #0]
    14b6:	4a03      	ldr	r2, [pc, #12]	; (14c4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
    14b8:	4310      	orrs	r0, r2
    14ba:	6048      	str	r0, [r1, #4]
    14bc:	4770      	bx	lr
    14be:	0000      	.short	0x0000
    14c0:	2000004c 	.word	0x2000004c
    14c4:	024007f8 	.word	0x024007f8

000014c8 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    14c8:	4902      	ldr	r1, [pc, #8]	; (14d4 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
    14ca:	6802      	ldr	r2, [r0, #0]
    14cc:	608a      	str	r2, [r1, #8]
    14ce:	6840      	ldr	r0, [r0, #4]
    14d0:	60c8      	str	r0, [r1, #12]
    14d2:	4770      	bx	lr
    14d4:	2000004c 	.word	0x2000004c

000014d8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    14d8:	4807      	ldr	r0, [pc, #28]	; (14f8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
    14da:	f04f 31ff 	mov.w	r1, #4294967295
    14de:	2200      	movs	r2, #0
    14e0:	6001      	str	r1, [r0, #0]
    14e2:	0cc9      	lsrs	r1, r1, #19
    14e4:	6041      	str	r1, [r0, #4]
    14e6:	f100 0108 	add.w	r1, r0, #8
    14ea:	201f      	movs	r0, #31
    14ec:	600a      	str	r2, [r1, #0]
    14ee:	604a      	str	r2, [r1, #4]
    14f0:	3108      	adds	r1, #8
    14f2:	e9c1 0200 	strd	r0, r2, [r1]
    14f6:	4770      	bx	lr
    14f8:	2000004c 	.word	0x2000004c

000014fc <sdc_hci_cmd_cb_reset>:
    14fc:	b510      	push	{r4, lr}
    14fe:	f7ff ffeb 	bl	14d8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    1502:	f00e feb4 	bl	1026e <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    1506:	4604      	mov	r4, r0
    1508:	4802      	ldr	r0, [pc, #8]	; (1514 <sdc_hci_cmd_cb_reset+0x18>)
    150a:	6800      	ldr	r0, [r0, #0]
    150c:	b100      	cbz	r0, 1510 <sdc_hci_cmd_cb_reset+0x14>
    150e:	4780      	blx	r0
    1510:	4620      	mov	r0, r4
    1512:	bd10      	pop	{r4, pc}
    1514:	20000064 	.word	0x20000064

00001518 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    1518:	4901      	ldr	r1, [pc, #4]	; (1520 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    151a:	6008      	str	r0, [r1, #0]
    151c:	4770      	bx	lr
    151e:	0000      	.short	0x0000
    1520:	20000064 	.word	0x20000064

00001524 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    1524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1528:	4604      	mov	r4, r0
    152a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    152e:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
    1532:	4d1f      	ldr	r5, [pc, #124]	; (15b0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
    1534:	4e1e      	ldr	r6, [pc, #120]	; (15b0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
    1536:	3d10      	subs	r5, #16
    1538:	2210      	movs	r2, #16
    153a:	2100      	movs	r1, #0
    153c:	4620      	mov	r0, r4
    153e:	f00f fc38 	bl	10db2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1542:	2210      	movs	r2, #16
    1544:	2100      	movs	r1, #0
    1546:	f104 0010 	add.w	r0, r4, #16
    154a:	f00f fc32 	bl	10db2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    154e:	6828      	ldr	r0, [r5, #0]
    1550:	1c40      	adds	r0, r0, #1
    1552:	d108      	bne.n	1566 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
    1554:	6868      	ldr	r0, [r5, #4]
    1556:	1c40      	adds	r0, r0, #1
    1558:	d105      	bne.n	1566 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
    155a:	68a8      	ldr	r0, [r5, #8]
    155c:	1c40      	adds	r0, r0, #1
    155e:	d102      	bne.n	1566 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
    1560:	68e8      	ldr	r0, [r5, #12]
    1562:	1c40      	adds	r0, r0, #1
    1564:	d007      	beq.n	1576 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x52>
    1566:	6828      	ldr	r0, [r5, #0]
    1568:	686a      	ldr	r2, [r5, #4]
    156a:	68a9      	ldr	r1, [r5, #8]
    156c:	68eb      	ldr	r3, [r5, #12]
    156e:	6120      	str	r0, [r4, #16]
    1570:	6162      	str	r2, [r4, #20]
    1572:	61a1      	str	r1, [r4, #24]
    1574:	61e3      	str	r3, [r4, #28]
    1576:	2000      	movs	r0, #0
    1578:	f000 fd84 	bl	2084 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    157c:	4387      	bics	r7, r0
    157e:	07f8      	lsls	r0, r7, #31
    1580:	d113      	bne.n	15aa <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
    1582:	6830      	ldr	r0, [r6, #0]
    1584:	1c40      	adds	r0, r0, #1
    1586:	d108      	bne.n	159a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
    1588:	6870      	ldr	r0, [r6, #4]
    158a:	1c40      	adds	r0, r0, #1
    158c:	d105      	bne.n	159a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
    158e:	68b0      	ldr	r0, [r6, #8]
    1590:	1c40      	adds	r0, r0, #1
    1592:	d102      	bne.n	159a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
    1594:	68f0      	ldr	r0, [r6, #12]
    1596:	1c40      	adds	r0, r0, #1
    1598:	d007      	beq.n	15aa <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
    159a:	6832      	ldr	r2, [r6, #0]
    159c:	6870      	ldr	r0, [r6, #4]
    159e:	68b1      	ldr	r1, [r6, #8]
    15a0:	68f3      	ldr	r3, [r6, #12]
    15a2:	6022      	str	r2, [r4, #0]
    15a4:	6060      	str	r0, [r4, #4]
    15a6:	60a1      	str	r1, [r4, #8]
    15a8:	60e3      	str	r3, [r4, #12]
    15aa:	2000      	movs	r0, #0
    15ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    15b0:	10000090 	.word	0x10000090

000015b4 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    15b4:	b538      	push	{r3, r4, r5, lr}
    15b6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    15ba:	4604      	mov	r4, r0
    15bc:	4822      	ldr	r0, [pc, #136]	; (1648 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
    15be:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
    15c2:	4d21      	ldr	r5, [pc, #132]	; (1648 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
    15c4:	6802      	ldr	r2, [r0, #0]
    15c6:	3d14      	subs	r5, #20
    15c8:	1c52      	adds	r2, r2, #1
    15ca:	d104      	bne.n	15d6 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x22>
    15cc:	6842      	ldr	r2, [r0, #4]
    15ce:	43d2      	mvns	r2, r2
    15d0:	0412      	lsls	r2, r2, #16
    15d2:	0c12      	lsrs	r2, r2, #16
    15d4:	d035      	beq.n	1642 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
    15d6:	07c9      	lsls	r1, r1, #31
    15d8:	d033      	beq.n	1642 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
    15da:	6801      	ldr	r1, [r0, #0]
    15dc:	6840      	ldr	r0, [r0, #4]
    15de:	f8ad 0000 	strh.w	r0, [sp]
    15e2:	f8c4 1001 	str.w	r1, [r4, #1]
    15e6:	f8bd 0000 	ldrh.w	r0, [sp]
    15ea:	f8a4 0005 	strh.w	r0, [r4, #5]
    15ee:	79a0      	ldrb	r0, [r4, #6]
    15f0:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    15f4:	71a0      	strb	r0, [r4, #6]
    15f6:	6828      	ldr	r0, [r5, #0]
    15f8:	1c40      	adds	r0, r0, #1
    15fa:	d00c      	beq.n	1616 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
    15fc:	6868      	ldr	r0, [r5, #4]
    15fe:	1c40      	adds	r0, r0, #1
    1600:	d009      	beq.n	1616 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
    1602:	68a8      	ldr	r0, [r5, #8]
    1604:	1c40      	adds	r0, r0, #1
    1606:	d006      	beq.n	1616 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
    1608:	68e8      	ldr	r0, [r5, #12]
    160a:	1c40      	adds	r0, r0, #1
    160c:	d003      	beq.n	1616 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
    160e:	2000      	movs	r0, #0
    1610:	f000 fd38 	bl	2084 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    1614:	b140      	cbz	r0, 1628 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x74>
    1616:	2210      	movs	r2, #16
    1618:	2100      	movs	r1, #0
    161a:	1de0      	adds	r0, r4, #7
    161c:	f00f fbc9 	bl	10db2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1620:	2001      	movs	r0, #1
    1622:	7020      	strb	r0, [r4, #0]
    1624:	2000      	movs	r0, #0
    1626:	bd38      	pop	{r3, r4, r5, pc}
    1628:	682a      	ldr	r2, [r5, #0]
    162a:	6869      	ldr	r1, [r5, #4]
    162c:	68a8      	ldr	r0, [r5, #8]
    162e:	68eb      	ldr	r3, [r5, #12]
    1630:	f8c4 2007 	str.w	r2, [r4, #7]
    1634:	f8c4 100b 	str.w	r1, [r4, #11]
    1638:	f8c4 000f 	str.w	r0, [r4, #15]
    163c:	f8c4 3013 	str.w	r3, [r4, #19]
    1640:	e7ee      	b.n	1620 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    1642:	2000      	movs	r0, #0
    1644:	e7ed      	b.n	1622 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
    1646:	0000      	.short	0x0000
    1648:	100000a4 	.word	0x100000a4

0000164c <sdc_hci_cmd_vs_zephyr_read_version_info>:
    164c:	2102      	movs	r1, #2
    164e:	8001      	strh	r1, [r0, #0]
    1650:	8041      	strh	r1, [r0, #2]
    1652:	2100      	movs	r1, #0
    1654:	7101      	strb	r1, [r0, #4]
    1656:	21e0      	movs	r1, #224	; 0xe0
    1658:	7141      	strb	r1, [r0, #5]
    165a:	f642 617e 	movw	r1, #11902	; 0x2e7e
    165e:	80c1      	strh	r1, [r0, #6]
    1660:	4901      	ldr	r1, [pc, #4]	; (1668 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    1662:	6081      	str	r1, [r0, #8]
    1664:	2000      	movs	r0, #0
    1666:	4770      	bx	lr
    1668:	85055ec1 	.word	0x85055ec1
    166c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1670:	798c      	ldrb	r4, [r1, #6]
    1672:	f8dd e018 	ldr.w	lr, [sp, #24]
    1676:	2c08      	cmp	r4, #8
    1678:	d901      	bls.n	167e <sdc_hci_cmd_vs_zephyr_read_version_info+0x32>
    167a:	21db      	movs	r1, #219	; 0xdb
    167c:	e02c      	b.n	16d8 <sdc_hci_cmd_vs_zephyr_read_version_info+0x8c>
    167e:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 1724 <sdc_hci_cmd_vs_zephyr_read_version_info+0xd8>
    1682:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
    1686:	b10d      	cbz	r5, 168c <sdc_hci_cmd_vs_zephyr_read_version_info+0x40>
    1688:	21dc      	movs	r1, #220	; 0xdc
    168a:	e025      	b.n	16d8 <sdc_hci_cmd_vs_zephyr_read_version_info+0x8c>
    168c:	79cd      	ldrb	r5, [r1, #7]
    168e:	2d00      	cmp	r5, #0
    1690:	d045      	beq.n	171e <sdc_hci_cmd_vs_zephyr_read_version_info+0xd2>
    1692:	006f      	lsls	r7, r5, #1
    1694:	370a      	adds	r7, #10
    1696:	681d      	ldr	r5, [r3, #0]
    1698:	2c02      	cmp	r4, #2
    169a:	443d      	add	r5, r7
    169c:	d901      	bls.n	16a2 <sdc_hci_cmd_vs_zephyr_read_version_info+0x56>
    169e:	4626      	mov	r6, r4
    16a0:	e001      	b.n	16a6 <sdc_hci_cmd_vs_zephyr_read_version_info+0x5a>
    16a2:	f04f 0602 	mov.w	r6, #2
    16a6:	442e      	add	r6, r5
    16a8:	f1a6 0601 	sub.w	r6, r6, #1
    16ac:	d901      	bls.n	16b2 <sdc_hci_cmd_vs_zephyr_read_version_info+0x66>
    16ae:	4625      	mov	r5, r4
    16b0:	e001      	b.n	16b6 <sdc_hci_cmd_vs_zephyr_read_version_info+0x6a>
    16b2:	f04f 0502 	mov.w	r5, #2
    16b6:	f1a5 0501 	sub.w	r5, r5, #1
    16ba:	ea26 0605 	bic.w	r6, r6, r5
    16be:	888d      	ldrh	r5, [r1, #4]
    16c0:	4425      	add	r5, r4
    16c2:	f1a4 0401 	sub.w	r4, r4, #1
    16c6:	f1a5 0501 	sub.w	r5, r5, #1
    16ca:	ea25 0504 	bic.w	r5, r5, r4
    16ce:	f64f 74ff 	movw	r4, #65535	; 0xffff
    16d2:	42a5      	cmp	r5, r4
    16d4:	d303      	bcc.n	16de <sdc_hci_cmd_vs_zephyr_read_version_info+0x92>
    16d6:	21e7      	movs	r1, #231	; 0xe7
    16d8:	2017      	movs	r0, #23
    16da:	f7ff fd43 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    16de:	f1be 0f00 	cmp.w	lr, #0
    16e2:	d118      	bne.n	1716 <sdc_hci_cmd_vs_zephyr_read_version_info+0xca>
    16e4:	1bf4      	subs	r4, r6, r7
    16e6:	f84c 4020 	str.w	r4, [ip, r0, lsl #2]
    16ea:	8025      	strh	r5, [r4, #0]
    16ec:	79c8      	ldrb	r0, [r1, #7]
    16ee:	70a0      	strb	r0, [r4, #2]
    16f0:	2001      	movs	r0, #1
    16f2:	70e0      	strb	r0, [r4, #3]
    16f4:	7122      	strb	r2, [r4, #4]
    16f6:	6808      	ldr	r0, [r1, #0]
    16f8:	f64f 72f0 	movw	r2, #65520	; 0xfff0
    16fc:	0c00      	lsrs	r0, r0, #16
    16fe:	80e0      	strh	r0, [r4, #6]
    1700:	8808      	ldrh	r0, [r1, #0]
    1702:	8120      	strh	r0, [r4, #8]
    1704:	2000      	movs	r0, #0
    1706:	e003      	b.n	1710 <sdc_hci_cmd_vs_zephyr_read_version_info+0xc4>
    1708:	eb04 0740 	add.w	r7, r4, r0, lsl #1
    170c:	1c40      	adds	r0, r0, #1
    170e:	817a      	strh	r2, [r7, #10]
    1710:	79cf      	ldrb	r7, [r1, #7]
    1712:	4287      	cmp	r7, r0
    1714:	d8f8      	bhi.n	1708 <sdc_hci_cmd_vs_zephyr_read_version_info+0xbc>
    1716:	79c8      	ldrb	r0, [r1, #7]
    1718:	fb00 6005 	mla	r0, r0, r5, r6
    171c:	6018      	str	r0, [r3, #0]
    171e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1722:	0000      	.short	0x0000
    1724:	20000068 	.word	0x20000068
    1728:	b530      	push	{r4, r5, lr}
    172a:	4603      	mov	r3, r0
    172c:	ea4f 0002 	mov.w	r0, r2
    1730:	eb03 0440 	add.w	r4, r3, r0, lsl #1
    1734:	8964      	ldrh	r4, [r4, #10]
    1736:	428c      	cmp	r4, r1
    1738:	d009      	beq.n	174e <sdc_hci_cmd_vs_zephyr_read_version_info+0x102>
    173a:	789c      	ldrb	r4, [r3, #2]
    173c:	1c40      	adds	r0, r0, #1
    173e:	fbb0 f5f4 	udiv	r5, r0, r4
    1742:	fb04 0015 	mls	r0, r4, r5, r0
    1746:	b2c0      	uxtb	r0, r0
    1748:	4290      	cmp	r0, r2
    174a:	d1f1      	bne.n	1730 <sdc_hci_cmd_vs_zephyr_read_version_info+0xe4>
    174c:	20ff      	movs	r0, #255	; 0xff
    174e:	bd30      	pop	{r4, r5, pc}

00001750 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    1750:	b570      	push	{r4, r5, r6, lr}
    1752:	4605      	mov	r5, r0
    1754:	4819      	ldr	r0, [pc, #100]	; (17bc <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x6c>)
    1756:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    175a:	b364      	cbz	r4, 17b6 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x66>
    175c:	f5b5 6f70 	cmp.w	r5, #3840	; 0xf00
    1760:	d304      	bcc.n	176c <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x1c>
    1762:	f240 2125 	movw	r1, #549	; 0x225
    1766:	2017      	movs	r0, #23
    1768:	f7ff fcfc 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    176c:	4629      	mov	r1, r5
    176e:	4620      	mov	r0, r4
    1770:	f00c f8ca 	bl	d908 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
    1774:	4601      	mov	r1, r0
    1776:	28ff      	cmp	r0, #255	; 0xff
    1778:	d004      	beq.n	1784 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x34>
    177a:	4620      	mov	r0, r4
    177c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1780:	f00c b8d6 	b.w	d930 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    1784:	78a0      	ldrb	r0, [r4, #2]
    1786:	fbb5 f1f0 	udiv	r1, r5, r0
    178a:	fb00 5011 	mls	r0, r0, r1, r5
    178e:	b2c6      	uxtb	r6, r0
    1790:	4632      	mov	r2, r6
    1792:	f64f 71f0 	movw	r1, #65520	; 0xfff0
    1796:	4620      	mov	r0, r4
    1798:	f7ff ffc6 	bl	1728 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
    179c:	4602      	mov	r2, r0
    179e:	28ff      	cmp	r0, #255	; 0xff
    17a0:	d009      	beq.n	17b6 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x66>
    17a2:	42b2      	cmp	r2, r6
    17a4:	d001      	beq.n	17aa <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x5a>
    17a6:	2000      	movs	r0, #0
    17a8:	70e0      	strb	r0, [r4, #3]
    17aa:	4629      	mov	r1, r5
    17ac:	4620      	mov	r0, r4
    17ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    17b2:	f00c b8a3 	b.w	d8fc <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
    17b6:	2000      	movs	r0, #0
    17b8:	bd70      	pop	{r4, r5, r6, pc}
    17ba:	0000      	.short	0x0000
    17bc:	20000068 	.word	0x20000068

000017c0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    17c0:	4a08      	ldr	r2, [pc, #32]	; (17e4 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x24>)
    17c2:	b510      	push	{r4, lr}
    17c4:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
    17c8:	4601      	mov	r1, r0
    17ca:	4620      	mov	r0, r4
    17cc:	f00c f89c 	bl	d908 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
    17d0:	4601      	mov	r1, r0
    17d2:	28ff      	cmp	r0, #255	; 0xff
    17d4:	d004      	beq.n	17e0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x20>
    17d6:	4620      	mov	r0, r4
    17d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    17dc:	f00c b8a8 	b.w	d930 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    17e0:	2000      	movs	r0, #0
    17e2:	bd10      	pop	{r4, pc}
    17e4:	20000068 	.word	0x20000068

000017e8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    17e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    17ea:	b089      	sub	sp, #36	; 0x24
    17ec:	0004      	movs	r4, r0
    17ee:	460e      	mov	r6, r1
    17f0:	9406      	str	r4, [sp, #24]
    17f2:	d007      	beq.n	1804 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x1c>
    17f4:	2500      	movs	r5, #0
    17f6:	0760      	lsls	r0, r4, #29
    17f8:	d006      	beq.n	1808 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x20>
    17fa:	f240 1119 	movw	r1, #281	; 0x119
    17fe:	2017      	movs	r0, #23
    1800:	f7ff fcb0 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1804:	2501      	movs	r5, #1
    1806:	e7f6      	b.n	17f6 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xe>
    1808:	4814      	ldr	r0, [pc, #80]	; (185c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x74>)
    180a:	2200      	movs	r2, #0
    180c:	4f14      	ldr	r7, [pc, #80]	; (1860 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x78>)
    180e:	6002      	str	r2, [r0, #0]
    1810:	6042      	str	r2, [r0, #4]
    1812:	e9d7 1000 	ldrd	r1, r0, [r7]
    1816:	f896 c000 	ldrb.w	ip, [r6]
    181a:	68bb      	ldr	r3, [r7, #8]
    181c:	f36c 601f 	bfi	r0, ip, #24, #8
    1820:	e9cd 0302 	strd	r0, r3, [sp, #8]
    1824:	e9cd 5100 	strd	r5, r1, [sp]
    1828:	ab06      	add	r3, sp, #24
    182a:	a901      	add	r1, sp, #4
    182c:	4610      	mov	r0, r2
    182e:	f7ff ff1d 	bl	166c <sdc_hci_cmd_vs_zephyr_read_version_info+0x20>
    1832:	e9d7 1003 	ldrd	r1, r0, [r7, #12]
    1836:	7873      	ldrb	r3, [r6, #1]
    1838:	697a      	ldr	r2, [r7, #20]
    183a:	f363 601f 	bfi	r0, r3, #24, #8
    183e:	e9cd 0202 	strd	r0, r2, [sp, #8]
    1842:	e9cd 5100 	strd	r5, r1, [sp]
    1846:	ab06      	add	r3, sp, #24
    1848:	2200      	movs	r2, #0
    184a:	a901      	add	r1, sp, #4
    184c:	2001      	movs	r0, #1
    184e:	f7ff ff0d 	bl	166c <sdc_hci_cmd_vs_zephyr_read_version_info+0x20>
    1852:	9806      	ldr	r0, [sp, #24]
    1854:	b009      	add	sp, #36	; 0x24
    1856:	1b00      	subs	r0, r0, r4
    1858:	bdf0      	pop	{r4, r5, r6, r7, pc}
    185a:	0000      	.short	0x0000
    185c:	20000068 	.word	0x20000068
    1860:	00001950 	.word	0x00001950

00001864 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    1864:	b510      	push	{r4, lr}
    1866:	4604      	mov	r4, r0
    1868:	7980      	ldrb	r0, [r0, #6]
    186a:	490e      	ldr	r1, [pc, #56]	; (18a4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x40>)
    186c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    1870:	b1a8      	cbz	r0, 189e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    1872:	f64f 73f0 	movw	r3, #65520	; 0xfff0
    1876:	79e1      	ldrb	r1, [r4, #7]
    1878:	7882      	ldrb	r2, [r0, #2]
    187a:	4291      	cmp	r1, r2
    187c:	d20f      	bcs.n	189e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    187e:	1c4a      	adds	r2, r1, #1
    1880:	71e2      	strb	r2, [r4, #7]
    1882:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    1886:	8952      	ldrh	r2, [r2, #10]
    1888:	429a      	cmp	r2, r3
    188a:	d0f4      	beq.n	1876 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x12>
    188c:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    1890:	8952      	ldrh	r2, [r2, #10]
    1892:	80a2      	strh	r2, [r4, #4]
    1894:	f00c f84c 	bl	d930 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    1898:	6020      	str	r0, [r4, #0]
    189a:	2000      	movs	r0, #0
    189c:	bd10      	pop	{r4, pc}
    189e:	2005      	movs	r0, #5
    18a0:	bd10      	pop	{r4, pc}
    18a2:	0000      	.short	0x0000
    18a4:	20000068 	.word	0x20000068

000018a8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    18a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    18ac:	4607      	mov	r7, r0
    18ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
    18b2:	8038      	strh	r0, [r7, #0]
    18b4:	4812      	ldr	r0, [pc, #72]	; (1900 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x58>)
    18b6:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    18ba:	b1ec      	cbz	r4, 18f8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
    18bc:	78a5      	ldrb	r5, [r4, #2]
    18be:	7920      	ldrb	r0, [r4, #4]
    18c0:	fbb0 f1f5 	udiv	r1, r0, r5
    18c4:	fb05 0611 	mls	r6, r5, r1, r0
    18c8:	4632      	mov	r2, r6
    18ca:	f64f 71f0 	movw	r1, #65520	; 0xfff0
    18ce:	4620      	mov	r0, r4
    18d0:	f7ff ff2a 	bl	1728 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
    18d4:	4602      	mov	r2, r0
    18d6:	28ff      	cmp	r0, #255	; 0xff
    18d8:	d00e      	beq.n	18f8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
    18da:	1ba8      	subs	r0, r5, r6
    18dc:	4410      	add	r0, r2
    18de:	fbb0 f1f5 	udiv	r1, r0, r5
    18e2:	fb05 0011 	mls	r0, r5, r1, r0
    18e6:	7921      	ldrb	r1, [r4, #4]
    18e8:	4408      	add	r0, r1
    18ea:	b281      	uxth	r1, r0
    18ec:	8039      	strh	r1, [r7, #0]
    18ee:	4620      	mov	r0, r4
    18f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    18f4:	f00c b802 	b.w	d8fc <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
    18f8:	2000      	movs	r0, #0
    18fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    18fe:	0000      	.short	0x0000
    1900:	20000068 	.word	0x20000068

00001904 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    1904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1908:	4606      	mov	r6, r0
    190a:	4810      	ldr	r0, [pc, #64]	; (194c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x48>)
    190c:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
    1910:	4631      	mov	r1, r6
    1912:	4628      	mov	r0, r5
    1914:	f00b fff8 	bl	d908 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
    1918:	4604      	mov	r4, r0
    191a:	28ff      	cmp	r0, #255	; 0xff
    191c:	d012      	beq.n	1944 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x40>
    191e:	f8d5 0006 	ldr.w	r0, [r5, #6]
    1922:	4621      	mov	r1, r4
    1924:	ea4f 4730 	mov.w	r7, r0, ror #16
    1928:	4628      	mov	r0, r5
    192a:	f00c f801 	bl	d930 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    192e:	4601      	mov	r1, r0
    1930:	4630      	mov	r0, r6
    1932:	47b8      	blx	r7
    1934:	eb05 0144 	add.w	r1, r5, r4, lsl #1
    1938:	f64f 70f0 	movw	r0, #65520	; 0xfff0
    193c:	8148      	strh	r0, [r1, #10]
    193e:	2000      	movs	r0, #0
    1940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1944:	f243 0002 	movw	r0, #12290	; 0x3002
    1948:	e7fa      	b.n	1940 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x3c>
    194a:	0000      	.short	0x0000
    194c:	20000068 	.word	0x20000068
    1950:	0000f723 	.word	0x0000f723
    1954:	000802f8 	.word	0x000802f8
    1958:	00000000 	.word	0x00000000
    195c:	0000ecf9 	.word	0x0000ecf9
    1960:	00080118 	.word	0x00080118
    1964:	00000000 	.word	0x00000000

00001968 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    1968:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    196c:	4c24      	ldr	r4, [pc, #144]	; (1a00 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
    196e:	4606      	mov	r6, r0
    1970:	b081      	sub	sp, #4
    1972:	6820      	ldr	r0, [r4, #0]
    1974:	469a      	mov	sl, r3
    1976:	4693      	mov	fp, r2
    1978:	b158      	cbz	r0, 1992 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    197a:	7a01      	ldrb	r1, [r0, #8]
    197c:	42b1      	cmp	r1, r6
    197e:	d903      	bls.n	1988 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    1980:	6840      	ldr	r0, [r0, #4]
    1982:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    1986:	b140      	cbz	r0, 199a <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    1988:	f243 0002 	movw	r0, #12290	; 0x3002
    198c:	b005      	add	sp, #20
    198e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1992:	21a5      	movs	r1, #165	; 0xa5
    1994:	2018      	movs	r0, #24
    1996:	f7ff fbe5 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    199a:	4619      	mov	r1, r3
    199c:	9802      	ldr	r0, [sp, #8]
    199e:	f00c f802 	bl	d9a6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    19a2:	4680      	mov	r8, r0
    19a4:	4658      	mov	r0, fp
    19a6:	990e      	ldr	r1, [sp, #56]	; 0x38
    19a8:	f00b fff3 	bl	d992 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    19ac:	4605      	mov	r5, r0
    19ae:	eb08 0005 	add.w	r0, r8, r5
    19b2:	1d00      	adds	r0, r0, #4
    19b4:	b287      	uxth	r7, r0
    19b6:	6820      	ldr	r0, [r4, #0]
    19b8:	46a1      	mov	r9, r4
    19ba:	4639      	mov	r1, r7
    19bc:	6800      	ldr	r0, [r0, #0]
    19be:	f00b ff38 	bl	d832 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    19c2:	0004      	movs	r4, r0
    19c4:	d01a      	beq.n	19fc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
    19c6:	8067      	strh	r7, [r4, #2]
    19c8:	8025      	strh	r5, [r4, #0]
    19ca:	4629      	mov	r1, r5
    19cc:	1d20      	adds	r0, r4, #4
    19ce:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    19d0:	4607      	mov	r7, r0
    19d2:	465a      	mov	r2, fp
    19d4:	2309      	movs	r3, #9
    19d6:	9500      	str	r5, [sp, #0]
    19d8:	f00b fea5 	bl	d726 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    19dc:	8820      	ldrh	r0, [r4, #0]
    19de:	4641      	mov	r1, r8
    19e0:	4438      	add	r0, r7
    19e2:	230a      	movs	r3, #10
    19e4:	9a02      	ldr	r2, [sp, #8]
    19e6:	f8cd a000 	str.w	sl, [sp]
    19ea:	f00b fe9c 	bl	d726 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    19ee:	f8d9 0000 	ldr.w	r0, [r9]
    19f2:	6840      	ldr	r0, [r0, #4]
    19f4:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    19f8:	2000      	movs	r0, #0
    19fa:	e7c7      	b.n	198c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    19fc:	2004      	movs	r0, #4
    19fe:	e7c5      	b.n	198c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    1a00:	20000070 	.word	0x20000070

00001a04 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    1a04:	b570      	push	{r4, r5, r6, lr}
    1a06:	4c14      	ldr	r4, [pc, #80]	; (1a58 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    1a08:	6823      	ldr	r3, [r4, #0]
    1a0a:	b18b      	cbz	r3, 1a30 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    1a0c:	7a19      	ldrb	r1, [r3, #8]
    1a0e:	4281      	cmp	r1, r0
    1a10:	d912      	bls.n	1a38 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    1a12:	685a      	ldr	r2, [r3, #4]
    1a14:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    1a18:	b171      	cbz	r1, 1a38 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    1a1a:	2500      	movs	r5, #0
    1a1c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    1a20:	884a      	ldrh	r2, [r1, #2]
    1a22:	6818      	ldr	r0, [r3, #0]
    1a24:	f00b ff5d 	bl	d8e2 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    1a28:	6821      	ldr	r1, [r4, #0]
    1a2a:	2000      	movs	r0, #0
    1a2c:	7a0a      	ldrb	r2, [r1, #8]
    1a2e:	e00c      	b.n	1a4a <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    1a30:	21c6      	movs	r1, #198	; 0xc6
    1a32:	2018      	movs	r0, #24
    1a34:	f7ff fb96 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1a38:	f243 0002 	movw	r0, #12290	; 0x3002
    1a3c:	bd70      	pop	{r4, r5, r6, pc}
    1a3e:	684b      	ldr	r3, [r1, #4]
    1a40:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1a44:	b933      	cbnz	r3, 1a54 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    1a46:	1c40      	adds	r0, r0, #1
    1a48:	b2c0      	uxtb	r0, r0
    1a4a:	4282      	cmp	r2, r0
    1a4c:	d8f7      	bhi.n	1a3e <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    1a4e:	6808      	ldr	r0, [r1, #0]
    1a50:	f00b ff3c 	bl	d8cc <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    1a54:	2000      	movs	r0, #0
    1a56:	bd70      	pop	{r4, r5, r6, pc}
    1a58:	20000070 	.word	0x20000070

00001a5c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    1a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1a60:	460d      	mov	r5, r1
    1a62:	0004      	movs	r4, r0
    1a64:	4690      	mov	r8, r2
    1a66:	f04f 0600 	mov.w	r6, #0
    1a6a:	d006      	beq.n	1a7a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
    1a6c:	2700      	movs	r7, #0
    1a6e:	07a0      	lsls	r0, r4, #30
    1a70:	d005      	beq.n	1a7e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
    1a72:	2186      	movs	r1, #134	; 0x86
    1a74:	2018      	movs	r0, #24
    1a76:	f7ff fb75 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1a7a:	2701      	movs	r7, #1
    1a7c:	e7f7      	b.n	1a6e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    1a7e:	b1cd      	cbz	r5, 1ab4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    1a80:	4611      	mov	r1, r2
    1a82:	2000      	movs	r0, #0
    1a84:	f00b ff06 	bl	d894 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    1a88:	300c      	adds	r0, #12
    1a8a:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    1a8e:	b98f      	cbnz	r7, 1ab4 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    1a90:	4f0a      	ldr	r7, [pc, #40]	; (1abc <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
    1a92:	f104 000c 	add.w	r0, r4, #12
    1a96:	00aa      	lsls	r2, r5, #2
    1a98:	603c      	str	r4, [r7, #0]
    1a9a:	7225      	strb	r5, [r4, #8]
    1a9c:	6060      	str	r0, [r4, #4]
    1a9e:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    1aa2:	6020      	str	r0, [r4, #0]
    1aa4:	2100      	movs	r1, #0
    1aa6:	6860      	ldr	r0, [r4, #4]
    1aa8:	f00f f983 	bl	10db2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1aac:	4641      	mov	r1, r8
    1aae:	6838      	ldr	r0, [r7, #0]
    1ab0:	f00b fef0 	bl	d894 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    1ab4:	4630      	mov	r0, r6
    1ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1aba:	0000      	.short	0x0000
    1abc:	20000070 	.word	0x20000070

00001ac0 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    1ac0:	b570      	push	{r4, r5, r6, lr}
    1ac2:	4d08      	ldr	r5, [pc, #32]	; (1ae4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    1ac4:	6828      	ldr	r0, [r5, #0]
    1ac6:	2800      	cmp	r0, #0
    1ac8:	d00a      	beq.n	1ae0 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    1aca:	2400      	movs	r4, #0
    1acc:	e004      	b.n	1ad8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    1ace:	4620      	mov	r0, r4
    1ad0:	f7ff ff98 	bl	1a04 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    1ad4:	1c64      	adds	r4, r4, #1
    1ad6:	b2e4      	uxtb	r4, r4
    1ad8:	6828      	ldr	r0, [r5, #0]
    1ada:	7a00      	ldrb	r0, [r0, #8]
    1adc:	42a0      	cmp	r0, r4
    1ade:	d8f6      	bhi.n	1ace <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    1ae0:	bd70      	pop	{r4, r5, r6, pc}
    1ae2:	0000      	.short	0x0000
    1ae4:	20000070 	.word	0x20000070

00001ae8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    1ae8:	4909      	ldr	r1, [pc, #36]	; (1b10 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    1aea:	b510      	push	{r4, lr}
    1aec:	4602      	mov	r2, r0
    1aee:	6809      	ldr	r1, [r1, #0]
    1af0:	2000      	movs	r0, #0
    1af2:	b149      	cbz	r1, 1b08 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    1af4:	7a0b      	ldrb	r3, [r1, #8]
    1af6:	4293      	cmp	r3, r2
    1af8:	d905      	bls.n	1b06 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    1afa:	6849      	ldr	r1, [r1, #4]
    1afc:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1b00:	2900      	cmp	r1, #0
    1b02:	d000      	beq.n	1b06 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    1b04:	1d08      	adds	r0, r1, #4
    1b06:	bd10      	pop	{r4, pc}
    1b08:	21ec      	movs	r1, #236	; 0xec
    1b0a:	2018      	movs	r0, #24
    1b0c:	f7ff fb2a 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1b10:	20000070 	.word	0x20000070

00001b14 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    1b14:	490a      	ldr	r1, [pc, #40]	; (1b40 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    1b16:	b510      	push	{r4, lr}
    1b18:	4602      	mov	r2, r0
    1b1a:	6809      	ldr	r1, [r1, #0]
    1b1c:	2000      	movs	r0, #0
    1b1e:	b159      	cbz	r1, 1b38 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    1b20:	7a0b      	ldrb	r3, [r1, #8]
    1b22:	4293      	cmp	r3, r2
    1b24:	d907      	bls.n	1b36 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    1b26:	6849      	ldr	r1, [r1, #4]
    1b28:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1b2c:	2900      	cmp	r1, #0
    1b2e:	d002      	beq.n	1b36 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    1b30:	f831 0b04 	ldrh.w	r0, [r1], #4
    1b34:	4408      	add	r0, r1
    1b36:	bd10      	pop	{r4, pc}
    1b38:	21fa      	movs	r1, #250	; 0xfa
    1b3a:	2018      	movs	r0, #24
    1b3c:	f7ff fb12 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1b40:	20000070 	.word	0x20000070
    1b44:	b570      	push	{r4, r5, r6, lr}
    1b46:	4b1e      	ldr	r3, [pc, #120]	; (1bc0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    1b48:	6845      	ldr	r5, [r0, #4]
    1b4a:	4604      	mov	r4, r0
    1b4c:	2200      	movs	r2, #0
    1b4e:	b1a1      	cbz	r1, 1b7a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    1b50:	2001      	movs	r0, #1
    1b52:	7060      	strb	r0, [r4, #1]
    1b54:	8858      	ldrh	r0, [r3, #2]
    1b56:	0881      	lsrs	r1, r0, #2
    1b58:	f05f 0000 	movs.w	r0, #0
    1b5c:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    1b60:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    1b64:	831a      	strh	r2, [r3, #24]
    1b66:	8419      	strh	r1, [r3, #32]
    1b68:	fb00 5301 	mla	r3, r0, r1, r5
    1b6c:	6073      	str	r3, [r6, #4]
    1b6e:	1823      	adds	r3, r4, r0
    1b70:	1c40      	adds	r0, r0, #1
    1b72:	751a      	strb	r2, [r3, #20]
    1b74:	2804      	cmp	r0, #4
    1b76:	d3f1      	bcc.n	1b5c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    1b78:	bd70      	pop	{r4, r5, r6, pc}
    1b7a:	7062      	strb	r2, [r4, #1]
    1b7c:	f05f 0000 	movs.w	r0, #0
    1b80:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    1b84:	830a      	strh	r2, [r1, #24]
    1b86:	840a      	strh	r2, [r1, #32]
    1b88:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    1b8c:	604a      	str	r2, [r1, #4]
    1b8e:	1821      	adds	r1, r4, r0
    1b90:	1c40      	adds	r0, r0, #1
    1b92:	750a      	strb	r2, [r1, #20]
    1b94:	2804      	cmp	r0, #4
    1b96:	d3f3      	bcc.n	1b80 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    1b98:	8858      	ldrh	r0, [r3, #2]
    1b9a:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    1b9e:	d201      	bcs.n	1ba4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    1ba0:	0846      	lsrs	r6, r0, #1
    1ba2:	e000      	b.n	1ba6 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    1ba4:	26ff      	movs	r6, #255	; 0xff
    1ba6:	f00b ff72 	bl	da8e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    1baa:	6065      	str	r5, [r4, #4]
    1bac:	8420      	strh	r0, [r4, #32]
    1bae:	1829      	adds	r1, r5, r0
    1bb0:	60a1      	str	r1, [r4, #8]
    1bb2:	8466      	strh	r6, [r4, #34]	; 0x22
    1bb4:	60e5      	str	r5, [r4, #12]
    1bb6:	84a0      	strh	r0, [r4, #36]	; 0x24
    1bb8:	6121      	str	r1, [r4, #16]
    1bba:	84e6      	strh	r6, [r4, #38]	; 0x26
    1bbc:	bd70      	pop	{r4, r5, r6, pc}
    1bbe:	0000      	.short	0x0000
    1bc0:	20000074 	.word	0x20000074

00001bc4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    1bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1bc8:	b158      	cbz	r0, 1be2 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x1e>
    1bca:	2500      	movs	r5, #0
    1bcc:	4411      	add	r1, r2
    1bce:	4e24      	ldr	r6, [pc, #144]	; (1c60 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9c>)
    1bd0:	b2cc      	uxtb	r4, r1
    1bd2:	2700      	movs	r7, #0
    1bd4:	7034      	strb	r4, [r6, #0]
    1bd6:	0781      	lsls	r1, r0, #30
    1bd8:	d005      	beq.n	1be6 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x22>
    1bda:	214e      	movs	r1, #78	; 0x4e
    1bdc:	2009      	movs	r0, #9
    1bde:	f7ff fac1 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1be2:	2501      	movs	r5, #1
    1be4:	e7f2      	b.n	1bcc <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    1be6:	2b1f      	cmp	r3, #31
    1be8:	d804      	bhi.n	1bf4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x30>
    1bea:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1bee:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    1bf2:	e009      	b.n	1c08 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x44>
    1bf4:	0059      	lsls	r1, r3, #1
    1bf6:	2bff      	cmp	r3, #255	; 0xff
    1bf8:	d90c      	bls.n	1c14 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x50>
    1bfa:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    1bfe:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    1c02:	d200      	bcs.n	1c06 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    1c04:	4611      	mov	r1, r2
    1c06:	b289      	uxth	r1, r1
    1c08:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    1c0c:	1cc9      	adds	r1, r1, #3
    1c0e:	4011      	ands	r1, r2
    1c10:	b135      	cbz	r5, 1c20 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5c>
    1c12:	e007      	b.n	1c24 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    1c14:	227c      	movs	r2, #124	; 0x7c
    1c16:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    1c1a:	d3f4      	bcc.n	1c06 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    1c1c:	217c      	movs	r1, #124	; 0x7c
    1c1e:	e7f2      	b.n	1c06 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    1c20:	6070      	str	r0, [r6, #4]
    1c22:	8071      	strh	r1, [r6, #2]
    1c24:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    1c28:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
    1c2c:	2200      	movs	r2, #0
    1c2e:	6876      	ldr	r6, [r6, #4]
    1c30:	f04f 0c01 	mov.w	ip, #1
    1c34:	e00d      	b.n	1c52 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8e>
    1c36:	b94d      	cbnz	r5, 1c4c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x88>
    1c38:	eb02 0782 	add.w	r7, r2, r2, lsl #2
    1c3c:	eb00 0e03 	add.w	lr, r0, r3
    1c40:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    1c44:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    1c48:	f8c7 e004 	str.w	lr, [r7, #4]
    1c4c:	1c52      	adds	r2, r2, #1
    1c4e:	440b      	add	r3, r1
    1c50:	b2d2      	uxtb	r2, r2
    1c52:	42a2      	cmp	r2, r4
    1c54:	d3ef      	bcc.n	1c36 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x72>
    1c56:	1ddb      	adds	r3, r3, #7
    1c58:	f023 0007 	bic.w	r0, r3, #7
    1c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1c60:	20000074 	.word	0x20000074

00001c64 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    1c64:	b570      	push	{r4, r5, r6, lr}
    1c66:	4a10      	ldr	r2, [pc, #64]	; (1ca8 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    1c68:	2000      	movs	r0, #0
    1c6a:	6851      	ldr	r1, [r2, #4]
    1c6c:	7812      	ldrb	r2, [r2, #0]
    1c6e:	e014      	b.n	1c9a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    1c70:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    1c74:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    1c78:	b16b      	cbz	r3, 1c96 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    1c7a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1c7e:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    1c82:	d00c      	beq.n	1c9e <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    1c84:	2500      	movs	r5, #0
    1c86:	70a5      	strb	r5, [r4, #2]
    1c88:	2101      	movs	r1, #1
    1c8a:	4620      	mov	r0, r4
    1c8c:	f7ff ff5a 	bl	1b44 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    1c90:	7025      	strb	r5, [r4, #0]
    1c92:	4620      	mov	r0, r4
    1c94:	bd70      	pop	{r4, r5, r6, pc}
    1c96:	1c40      	adds	r0, r0, #1
    1c98:	b2c0      	uxtb	r0, r0
    1c9a:	4290      	cmp	r0, r2
    1c9c:	d3e8      	bcc.n	1c70 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    1c9e:	21a9      	movs	r1, #169	; 0xa9
    1ca0:	2009      	movs	r0, #9
    1ca2:	f7ff fa5f 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1ca6:	0000      	.short	0x0000
    1ca8:	20000074 	.word	0x20000074

00001cac <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    1cac:	4804      	ldr	r0, [pc, #16]	; (1cc0 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    1cae:	b510      	push	{r4, lr}
    1cb0:	8840      	ldrh	r0, [r0, #2]
    1cb2:	0884      	lsrs	r4, r0, #2
    1cb4:	f00b feeb 	bl	da8e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    1cb8:	4284      	cmp	r4, r0
    1cba:	d300      	bcc.n	1cbe <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    1cbc:	4620      	mov	r0, r4
    1cbe:	bd10      	pop	{r4, pc}
    1cc0:	20000074 	.word	0x20000074
    1cc4:	b530      	push	{r4, r5, lr}
    1cc6:	490d      	ldr	r1, [pc, #52]	; (1cfc <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
    1cc8:	2001      	movs	r0, #1
    1cca:	6048      	str	r0, [r1, #4]
    1ccc:	1e82      	subs	r2, r0, #2
    1cce:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    1cd2:	490b      	ldr	r1, [pc, #44]	; (1d00 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
    1cd4:	6088      	str	r0, [r1, #8]
    1cd6:	2300      	movs	r3, #0
    1cd8:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    1cdc:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    1ce0:	4c08      	ldr	r4, [pc, #32]	; (1d04 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
    1ce2:	6023      	str	r3, [r4, #0]
    1ce4:	1d25      	adds	r5, r4, #4
    1ce6:	6028      	str	r0, [r5, #0]
    1ce8:	6088      	str	r0, [r1, #8]
    1cea:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    1cee:	6023      	str	r3, [r4, #0]
    1cf0:	6028      	str	r0, [r5, #0]
    1cf2:	4906      	ldr	r1, [pc, #24]	; (1d0c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
    1cf4:	4804      	ldr	r0, [pc, #16]	; (1d08 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
    1cf6:	6008      	str	r0, [r1, #0]
    1cf8:	bd30      	pop	{r4, r5, pc}
    1cfa:	0000      	.short	0x0000
    1cfc:	4000e000 	.word	0x4000e000
    1d00:	4000f000 	.word	0x4000f000
    1d04:	4000f500 	.word	0x4000f500
    1d08:	3ff60000 	.word	0x3ff60000
    1d0c:	4001f508 	.word	0x4001f508

00001d10 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    1d10:	b510      	push	{r4, lr}
    1d12:	f7ff ffd7 	bl	1cc4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    1d16:	f00b ff91 	bl	dc3c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    1d1a:	4903      	ldr	r1, [pc, #12]	; (1d28 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    1d1c:	4801      	ldr	r0, [pc, #4]	; (1d24 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    1d1e:	6008      	str	r0, [r1, #0]
    1d20:	bd10      	pop	{r4, pc}
    1d22:	0000      	.short	0x0000
    1d24:	3ff60000 	.word	0x3ff60000
    1d28:	4001f508 	.word	0x4001f508

00001d2c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    1d2c:	b510      	push	{r4, lr}
    1d2e:	f7ff ffc9 	bl	1cc4 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    1d32:	f00b ff83 	bl	dc3c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    1d36:	f000 f887 	bl	1e48 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    1d3a:	4905      	ldr	r1, [pc, #20]	; (1d50 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4>)
    1d3c:	4803      	ldr	r0, [pc, #12]	; (1d4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT>)
    1d3e:	6008      	str	r0, [r1, #0]
    1d40:	f000 f8b8 	bl	1eb4 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    1d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1d48:	f000 b8dc 	b.w	1f04 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    1d4c:	3ff60000 	.word	0x3ff60000
    1d50:	4001f508 	.word	0x4001f508
    1d54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d58:	4682      	mov	sl, r0
    1d5a:	4838      	ldr	r0, [pc, #224]	; (1e3c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf0>)
    1d5c:	f00e febe 	bl	10adc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    1d60:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 1e3c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf0>
    1d64:	b128      	cbz	r0, 1d72 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26>
    1d66:	2601      	movs	r6, #1
    1d68:	f10b 0001 	add.w	r0, fp, #1
    1d6c:	21ff      	movs	r1, #255	; 0xff
    1d6e:	7001      	strb	r1, [r0, #0]
    1d70:	e000      	b.n	1d74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28>
    1d72:	2600      	movs	r6, #0
    1d74:	f44f 7580 	mov.w	r5, #256	; 0x100
    1d78:	4c31      	ldr	r4, [pc, #196]	; (1e40 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf4>)
    1d7a:	f04f 0800 	mov.w	r8, #0
    1d7e:	1d2f      	adds	r7, r5, #4
    1d80:	2101      	movs	r1, #1
    1d82:	6061      	str	r1, [r4, #4]
    1d84:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    1d88:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1d8c:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    1d90:	6021      	str	r1, [r4, #0]
    1d92:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 1e44 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf8>
    1d96:	e01c      	b.n	1dd2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x86>
    1d98:	f8d9 0000 	ldr.w	r0, [r9]
    1d9c:	06c0      	lsls	r0, r0, #27
    1d9e:	d518      	bpl.n	1dd2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x86>
    1da0:	200e      	movs	r0, #14
    1da2:	f00b ff5a 	bl	dc5a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    1da6:	f3ef 8010 	mrs	r0, PRIMASK
    1daa:	9000      	str	r0, [sp, #0]
    1dac:	b672      	cpsid	i
    1dae:	2103      	movs	r1, #3
    1db0:	4620      	mov	r0, r4
    1db2:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    1db6:	4629      	mov	r1, r5
    1db8:	f00b ff5c 	bl	dc74 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1dbc:	b930      	cbnz	r0, 1dcc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x80>
    1dbe:	4639      	mov	r1, r7
    1dc0:	4620      	mov	r0, r4
    1dc2:	f00b ff57 	bl	dc74 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1dc6:	b908      	cbnz	r0, 1dcc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x80>
    1dc8:	f00e ff1f 	bl	10c0a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    1dcc:	9800      	ldr	r0, [sp, #0]
    1dce:	b900      	cbnz	r0, 1dd2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x86>
    1dd0:	b662      	cpsie	i
    1dd2:	4629      	mov	r1, r5
    1dd4:	4620      	mov	r0, r4
    1dd6:	f00b ff4d 	bl	dc74 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1dda:	b928      	cbnz	r0, 1de8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x9c>
    1ddc:	4639      	mov	r1, r7
    1dde:	4620      	mov	r0, r4
    1de0:	f00b ff48 	bl	dc74 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1de4:	2800      	cmp	r0, #0
    1de6:	d0d7      	beq.n	1d98 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4c>
    1de8:	4639      	mov	r1, r7
    1dea:	4620      	mov	r0, r4
    1dec:	f00b ff42 	bl	dc74 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1df0:	2800      	cmp	r0, #0
    1df2:	d1c5      	bne.n	1d80 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x34>
    1df4:	bb06      	cbnz	r6, 1e38 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xec>
    1df6:	f89b 1001 	ldrb.w	r1, [fp, #1]
    1dfa:	f88d 1000 	strb.w	r1, [sp]
    1dfe:	9900      	ldr	r1, [sp, #0]
    1e00:	9100      	str	r1, [sp, #0]
    1e02:	f89d 1000 	ldrb.w	r1, [sp]
    1e06:	b109      	cbz	r1, 1e0c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc0>
    1e08:	2501      	movs	r5, #1
    1e0a:	e000      	b.n	1e0e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc2>
    1e0c:	2500      	movs	r5, #0
    1e0e:	f10b 0001 	add.w	r0, fp, #1
    1e12:	f880 8000 	strb.w	r8, [r0]
    1e16:	2003      	movs	r0, #3
    1e18:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    1e1c:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1e20:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    1e24:	200e      	movs	r0, #14
    1e26:	f00b ff18 	bl	dc5a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    1e2a:	4804      	ldr	r0, [pc, #16]	; (1e3c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf0>)
    1e2c:	f00e fe6d 	bl	10b0a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    1e30:	b115      	cbz	r5, 1e38 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xec>
    1e32:	2011      	movs	r0, #17
    1e34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1e38:	2000      	movs	r0, #0
    1e3a:	e7fb      	b.n	1e34 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe8>
    1e3c:	20000360 	.word	0x20000360
    1e40:	4000e000 	.word	0x4000e000
    1e44:	e000ed10 	.word	0xe000ed10

00001e48 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    1e48:	b510      	push	{r4, lr}
    1e4a:	4806      	ldr	r0, [pc, #24]	; (1e64 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1e4c:	f00e fe59 	bl	10b02 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    1e50:	b118      	cbz	r0, 1e5a <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    1e52:	2130      	movs	r1, #48	; 0x30
    1e54:	201d      	movs	r0, #29
    1e56:	f7ff f985 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1e5a:	4802      	ldr	r0, [pc, #8]	; (1e64 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1e5c:	2100      	movs	r1, #0
    1e5e:	7041      	strb	r1, [r0, #1]
    1e60:	bd10      	pop	{r4, pc}
    1e62:	0000      	.short	0x0000
    1e64:	20000360 	.word	0x20000360

00001e68 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    1e68:	b570      	push	{r4, r5, r6, lr}
    1e6a:	4911      	ldr	r1, [pc, #68]	; (1eb0 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    1e6c:	680a      	ldr	r2, [r1, #0]
    1e6e:	b1ea      	cbz	r2, 1eac <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    1e70:	2300      	movs	r3, #0
    1e72:	461d      	mov	r5, r3
    1e74:	2401      	movs	r4, #1
    1e76:	684a      	ldr	r2, [r1, #4]
    1e78:	1c52      	adds	r2, r2, #1
    1e7a:	604a      	str	r2, [r1, #4]
    1e7c:	2a09      	cmp	r2, #9
    1e7e:	d300      	bcc.n	1e82 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    1e80:	604d      	str	r5, [r1, #4]
    1e82:	790e      	ldrb	r6, [r1, #4]
    1e84:	fa04 f206 	lsl.w	r2, r4, r6
    1e88:	680e      	ldr	r6, [r1, #0]
    1e8a:	4216      	tst	r6, r2
    1e8c:	d00b      	beq.n	1ea6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    1e8e:	f3ef 8310 	mrs	r3, PRIMASK
    1e92:	b672      	cpsid	i
    1e94:	680c      	ldr	r4, [r1, #0]
    1e96:	4394      	bics	r4, r2
    1e98:	600c      	str	r4, [r1, #0]
    1e9a:	b903      	cbnz	r3, 1e9e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    1e9c:	b662      	cpsie	i
    1e9e:	6849      	ldr	r1, [r1, #4]
    1ea0:	6001      	str	r1, [r0, #0]
    1ea2:	2000      	movs	r0, #0
    1ea4:	bd70      	pop	{r4, r5, r6, pc}
    1ea6:	1c5b      	adds	r3, r3, #1
    1ea8:	2b09      	cmp	r3, #9
    1eaa:	d3e4      	bcc.n	1e76 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    1eac:	2005      	movs	r0, #5
    1eae:	bd70      	pop	{r4, r5, r6, pc}
    1eb0:	2000007c 	.word	0x2000007c

00001eb4 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    1eb4:	4802      	ldr	r0, [pc, #8]	; (1ec0 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    1eb6:	2100      	movs	r1, #0
    1eb8:	6001      	str	r1, [r0, #0]
    1eba:	6041      	str	r1, [r0, #4]
    1ebc:	4770      	bx	lr
    1ebe:	0000      	.short	0x0000
    1ec0:	2000007c 	.word	0x2000007c

00001ec4 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    1ec4:	b510      	push	{r4, lr}
    1ec6:	4c04      	ldr	r4, [pc, #16]	; (1ed8 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    1ec8:	7820      	ldrb	r0, [r4, #0]
    1eca:	28ff      	cmp	r0, #255	; 0xff
    1ecc:	d003      	beq.n	1ed6 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    1ece:	f00a fcd1 	bl	c874 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    1ed2:	20ff      	movs	r0, #255	; 0xff
    1ed4:	7020      	strb	r0, [r4, #0]
    1ed6:	bd10      	pop	{r4, pc}
    1ed8:	20000000 	.word	0x20000000

00001edc <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    1edc:	b510      	push	{r4, lr}
    1ede:	4c08      	ldr	r4, [pc, #32]	; (1f00 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    1ee0:	7861      	ldrb	r1, [r4, #1]
    1ee2:	b109      	cbz	r1, 1ee8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    1ee4:	200f      	movs	r0, #15
    1ee6:	bd10      	pop	{r4, pc}
    1ee8:	f00a fc8a 	bl	c800 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    1eec:	7020      	strb	r0, [r4, #0]
    1eee:	28ff      	cmp	r0, #255	; 0xff
    1ef0:	d001      	beq.n	1ef6 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    1ef2:	2000      	movs	r0, #0
    1ef4:	bd10      	pop	{r4, pc}
    1ef6:	2173      	movs	r1, #115	; 0x73
    1ef8:	201f      	movs	r0, #31
    1efa:	f7ff f933 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1efe:	0000      	.short	0x0000
    1f00:	20000000 	.word	0x20000000

00001f04 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    1f04:	4901      	ldr	r1, [pc, #4]	; (1f0c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    1f06:	2000      	movs	r0, #0
    1f08:	7048      	strb	r0, [r1, #1]
    1f0a:	4770      	bx	lr
    1f0c:	20000000 	.word	0x20000000

00001f10 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    1f10:	4806      	ldr	r0, [pc, #24]	; (1f2c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    1f12:	4a07      	ldr	r2, [pc, #28]	; (1f30 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    1f14:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    1f16:	8852      	ldrh	r2, [r2, #2]
    1f18:	4291      	cmp	r1, r2
    1f1a:	d104      	bne.n	1f26 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    1f1c:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    1f20:	b108      	cbz	r0, 1f26 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    1f22:	2000      	movs	r0, #0
    1f24:	4770      	bx	lr
    1f26:	2001      	movs	r0, #1
    1f28:	4770      	bx	lr
    1f2a:	0000      	.short	0x0000
    1f2c:	200013a0 	.word	0x200013a0
    1f30:	20000354 	.word	0x20000354

00001f34 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    1f34:	4901      	ldr	r1, [pc, #4]	; (1f3c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    1f36:	8048      	strh	r0, [r1, #2]
    1f38:	4770      	bx	lr
    1f3a:	0000      	.short	0x0000
    1f3c:	20000354 	.word	0x20000354

00001f40 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    1f40:	4808      	ldr	r0, [pc, #32]	; (1f64 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    1f42:	4a09      	ldr	r2, [pc, #36]	; (1f68 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    1f44:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    1f46:	8852      	ldrh	r2, [r2, #2]
    1f48:	4291      	cmp	r1, r2
    1f4a:	d109      	bne.n	1f60 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    1f4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1f50:	8481      	strh	r1, [r0, #36]	; 0x24
    1f52:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    1f56:	b119      	cbz	r1, 1f60 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    1f58:	2100      	movs	r1, #0
    1f5a:	7001      	strb	r1, [r0, #0]
    1f5c:	2001      	movs	r0, #1
    1f5e:	4770      	bx	lr
    1f60:	2000      	movs	r0, #0
    1f62:	4770      	bx	lr
    1f64:	200013a0 	.word	0x200013a0
    1f68:	20000354 	.word	0x20000354

00001f6c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    1f6c:	4807      	ldr	r0, [pc, #28]	; (1f8c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    1f6e:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    1f72:	2901      	cmp	r1, #1
    1f74:	d007      	beq.n	1f86 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    1f76:	2101      	movs	r1, #1
    1f78:	7001      	strb	r1, [r0, #0]
    1f7a:	4805      	ldr	r0, [pc, #20]	; (1f90 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    1f7c:	4903      	ldr	r1, [pc, #12]	; (1f8c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    1f7e:	8800      	ldrh	r0, [r0, #0]
    1f80:	8488      	strh	r0, [r1, #36]	; 0x24
    1f82:	2001      	movs	r0, #1
    1f84:	4770      	bx	lr
    1f86:	2000      	movs	r0, #0
    1f88:	4770      	bx	lr
    1f8a:	0000      	.short	0x0000
    1f8c:	200013a0 	.word	0x200013a0
    1f90:	20000354 	.word	0x20000354

00001f94 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    1f94:	4906      	ldr	r1, [pc, #24]	; (1fb0 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    1f96:	4b07      	ldr	r3, [pc, #28]	; (1fb4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    1f98:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    1f9a:	885b      	ldrh	r3, [r3, #2]
    1f9c:	429a      	cmp	r2, r3
    1f9e:	d105      	bne.n	1fac <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    1fa0:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    1fa4:	b112      	cbz	r2, 1fac <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    1fa6:	6001      	str	r1, [r0, #0]
    1fa8:	2001      	movs	r0, #1
    1faa:	4770      	bx	lr
    1fac:	2000      	movs	r0, #0
    1fae:	4770      	bx	lr
    1fb0:	200013a0 	.word	0x200013a0
    1fb4:	20000354 	.word	0x20000354

00001fb8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    1fb8:	4909      	ldr	r1, [pc, #36]	; (1fe0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    1fba:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    1fbc:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    1fc0:	3bff      	subs	r3, #255	; 0xff
    1fc2:	d002      	beq.n	1fca <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    1fc4:	2100      	movs	r1, #0
    1fc6:	6001      	str	r1, [r0, #0]
    1fc8:	e007      	b.n	1fda <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    1fca:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    1fce:	4904      	ldr	r1, [pc, #16]	; (1fe0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    1fd0:	2a01      	cmp	r2, #1
    1fd2:	d002      	beq.n	1fda <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    1fd4:	6001      	str	r1, [r0, #0]
    1fd6:	2001      	movs	r0, #1
    1fd8:	4770      	bx	lr
    1fda:	2000      	movs	r0, #0
    1fdc:	4770      	bx	lr
    1fde:	0000      	.short	0x0000
    1fe0:	200013a0 	.word	0x200013a0

00001fe4 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    1fe4:	4901      	ldr	r1, [pc, #4]	; (1fec <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    1fe6:	8008      	strh	r0, [r1, #0]
    1fe8:	4770      	bx	lr
    1fea:	0000      	.short	0x0000
    1fec:	20000354 	.word	0x20000354

00001ff0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    1ff0:	4905      	ldr	r1, [pc, #20]	; (2008 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    1ff2:	2000      	movs	r0, #0
    1ff4:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    1ff8:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1ffc:	8488      	strh	r0, [r1, #36]	; 0x24
    1ffe:	4903      	ldr	r1, [pc, #12]	; (200c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    2000:	8008      	strh	r0, [r1, #0]
    2002:	8048      	strh	r0, [r1, #2]
    2004:	4770      	bx	lr
    2006:	0000      	.short	0x0000
    2008:	200013a0 	.word	0x200013a0
    200c:	20000354 	.word	0x20000354
    2010:	4905      	ldr	r1, [pc, #20]	; (2028 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    2012:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    2014:	4282      	cmp	r2, r0
    2016:	d105      	bne.n	2024 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    2018:	2000      	movs	r0, #0
    201a:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    201e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    2022:	8488      	strh	r0, [r1, #36]	; 0x24
    2024:	4770      	bx	lr
    2026:	0000      	.short	0x0000
    2028:	200013a0 	.word	0x200013a0

0000202c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    202c:	4a0a      	ldr	r2, [pc, #40]	; (2058 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    202e:	b110      	cbz	r0, 2036 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    2030:	2801      	cmp	r0, #1
    2032:	d007      	beq.n	2044 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    2034:	e00e      	b.n	2054 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    2036:	7850      	ldrb	r0, [r2, #1]
    2038:	b160      	cbz	r0, 2054 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    203a:	f8d2 0002 	ldr.w	r0, [r2, #2]
    203e:	6008      	str	r0, [r1, #0]
    2040:	88d0      	ldrh	r0, [r2, #6]
    2042:	e004      	b.n	204e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    2044:	7810      	ldrb	r0, [r2, #0]
    2046:	b128      	cbz	r0, 2054 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    2048:	6890      	ldr	r0, [r2, #8]
    204a:	6008      	str	r0, [r1, #0]
    204c:	8990      	ldrh	r0, [r2, #12]
    204e:	8088      	strh	r0, [r1, #4]
    2050:	2001      	movs	r0, #1
    2052:	4770      	bx	lr
    2054:	2000      	movs	r0, #0
    2056:	4770      	bx	lr
    2058:	20000362 	.word	0x20000362

0000205c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    205c:	4a08      	ldr	r2, [pc, #32]	; (2080 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    205e:	2301      	movs	r3, #1
    2060:	b138      	cbz	r0, 2072 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    2062:	2801      	cmp	r0, #1
    2064:	d104      	bne.n	2070 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    2066:	7013      	strb	r3, [r2, #0]
    2068:	6808      	ldr	r0, [r1, #0]
    206a:	6090      	str	r0, [r2, #8]
    206c:	8888      	ldrh	r0, [r1, #4]
    206e:	8190      	strh	r0, [r2, #12]
    2070:	4770      	bx	lr
    2072:	7053      	strb	r3, [r2, #1]
    2074:	6808      	ldr	r0, [r1, #0]
    2076:	f8c2 0002 	str.w	r0, [r2, #2]
    207a:	8888      	ldrh	r0, [r1, #4]
    207c:	80d0      	strh	r0, [r2, #6]
    207e:	4770      	bx	lr
    2080:	20000362 	.word	0x20000362

00002084 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    2084:	4906      	ldr	r1, [pc, #24]	; (20a0 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    2086:	b110      	cbz	r0, 208e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    2088:	2801      	cmp	r0, #1
    208a:	d002      	beq.n	2092 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    208c:	e005      	b.n	209a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    208e:	7848      	ldrb	r0, [r1, #1]
    2090:	e000      	b.n	2094 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    2092:	7808      	ldrb	r0, [r1, #0]
    2094:	b108      	cbz	r0, 209a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    2096:	2001      	movs	r0, #1
    2098:	4770      	bx	lr
    209a:	2000      	movs	r0, #0
    209c:	4770      	bx	lr
    209e:	0000      	.short	0x0000
    20a0:	20000362 	.word	0x20000362

000020a4 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>:
    20a4:	4901      	ldr	r1, [pc, #4]	; (20ac <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY+0x8>)
    20a6:	7708      	strb	r0, [r1, #28]
    20a8:	4770      	bx	lr
    20aa:	0000      	.short	0x0000
    20ac:	20000c62 	.word	0x20000c62

000020b0 <sym_57CDLB7NR4I66F4XUEVXWWEJBBBXGSJ37LGPUXA>:
    20b0:	4801      	ldr	r0, [pc, #4]	; (20b8 <sym_57CDLB7NR4I66F4XUEVXWWEJBBBXGSJ37LGPUXA+0x8>)
    20b2:	7880      	ldrb	r0, [r0, #2]
    20b4:	4770      	bx	lr
    20b6:	0000      	.short	0x0000
    20b8:	20000084 	.word	0x20000084

000020bc <sym_R2K72KVDRFDRB7INCDL2G5SJCI6KNYCIUBETXWY>:
    20bc:	4801      	ldr	r0, [pc, #4]	; (20c4 <sym_R2K72KVDRFDRB7INCDL2G5SJCI6KNYCIUBETXWY+0x8>)
    20be:	78c0      	ldrb	r0, [r0, #3]
    20c0:	4770      	bx	lr
    20c2:	0000      	.short	0x0000
    20c4:	20000084 	.word	0x20000084

000020c8 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY>:
    20c8:	b570      	push	{r4, r5, r6, lr}
    20ca:	460c      	mov	r4, r1
    20cc:	4605      	mov	r5, r0
    20ce:	f000 f91f 	bl	2310 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>
    20d2:	b118      	cbz	r0, 20dc <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x14>
    20d4:	21d0      	movs	r1, #208	; 0xd0
    20d6:	2027      	movs	r0, #39	; 0x27
    20d8:	f7ff f844 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    20dc:	4803      	ldr	r0, [pc, #12]	; (20ec <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x24>)
    20de:	2101      	movs	r1, #1
    20e0:	f00c f9db 	bl	e49a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    20e4:	4802      	ldr	r0, [pc, #8]	; (20f0 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x28>)
    20e6:	e9c0 540b 	strd	r5, r4, [r0, #44]	; 0x2c
    20ea:	bd70      	pop	{r4, r5, r6, pc}
    20ec:	20000c40 	.word	0x20000c40
    20f0:	20000084 	.word	0x20000084

000020f4 <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q>:
    20f4:	4901      	ldr	r1, [pc, #4]	; (20fc <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q+0x8>)
    20f6:	2001      	movs	r0, #1
    20f8:	7148      	strb	r0, [r1, #5]
    20fa:	4770      	bx	lr
    20fc:	20000084 	.word	0x20000084

00002100 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA>:
    2100:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2104:	4d5b      	ldr	r5, [pc, #364]	; (2274 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x174>)
    2106:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    2108:	782e      	ldrb	r6, [r5, #0]
    210a:	2e00      	cmp	r6, #0
    210c:	d16b      	bne.n	21e6 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
    210e:	2a00      	cmp	r2, #0
    2110:	d069      	beq.n	21e6 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
    2112:	2b00      	cmp	r3, #0
    2114:	d067      	beq.n	21e6 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
    2116:	2c00      	cmp	r4, #0
    2118:	d065      	beq.n	21e6 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xe6>
    211a:	f105 0614 	add.w	r6, r5, #20
    211e:	e9c5 010f 	strd	r0, r1, [r5, #60]	; 0x3c
    2122:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    2126:	2700      	movs	r7, #0
    2128:	716f      	strb	r7, [r5, #5]
    212a:	712f      	strb	r7, [r5, #4]
    212c:	70af      	strb	r7, [r5, #2]
    212e:	706f      	strb	r7, [r5, #1]
    2130:	70ef      	strb	r7, [r5, #3]
    2132:	81af      	strh	r7, [r5, #12]
    2134:	81ef      	strh	r7, [r5, #14]
    2136:	f000 f92f 	bl	2398 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    213a:	4606      	mov	r6, r0
    213c:	f000 f926 	bl	238c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    2140:	4604      	mov	r4, r0
    2142:	f006 f8c3 	bl	82cc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    2146:	f005 fe1b 	bl	7d80 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    214a:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    214e:	f006 f941 	bl	83d4 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    2152:	69e0      	ldr	r0, [r4, #28]
    2154:	f006 fa24 	bl	85a0 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    2158:	6960      	ldr	r0, [r4, #20]
    215a:	f006 fa17 	bl	858c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    215e:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
    2162:	f006 fa4d 	bl	8600 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    2166:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    216a:	6840      	ldr	r0, [r0, #4]
    216c:	f890 021a 	ldrb.w	r0, [r0, #538]	; 0x21a
    2170:	b108      	cbz	r0, 2176 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x76>
    2172:	f006 f825 	bl	81c0 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    2176:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    217a:	2001      	movs	r0, #1
    217c:	f005 ff64 	bl	8048 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    2180:	2800      	cmp	r0, #0
    2182:	d070      	beq.n	2266 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x166>
    2184:	483c      	ldr	r0, [pc, #240]	; (2278 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x178>)
    2186:	f005 ffcb 	bl	8120 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    218a:	8820      	ldrh	r0, [r4, #0]
    218c:	f7ff fcc2 	bl	1b14 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    2190:	6368      	str	r0, [r5, #52]	; 0x34
    2192:	8820      	ldrh	r0, [r4, #0]
    2194:	f7ff fca8 	bl	1ae8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    2198:	f106 0288 	add.w	r2, r6, #136	; 0x88
    219c:	63a8      	str	r0, [r5, #56]	; 0x38
    219e:	e892 110c 	ldmia.w	r2, {r2, r3, r8, ip}
    21a2:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 227c <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>
    21a6:	e889 110c 	stmia.w	r9, {r2, r3, r8, ip}
    21aa:	f8d6 2098 	ldr.w	r2, [r6, #152]	; 0x98
    21ae:	f8c9 2019 	str.w	r2, [r9, #25]
    21b2:	f8d6 109c 	ldr.w	r1, [r6, #156]	; 0x9c
    21b6:	f8c9 101d 	str.w	r1, [r9, #29]
    21ba:	f000 f925 	bl	2408 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xdc>
    21be:	4601      	mov	r1, r0
    21c0:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    21c2:	f00b febf 	bl	df44 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    21c6:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    21c8:	4281      	cmp	r1, r0
    21ca:	d200      	bcs.n	21ce <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xce>
    21cc:	4608      	mov	r0, r1
    21ce:	71a8      	strb	r0, [r5, #6]
    21d0:	46a8      	mov	r8, r5
    21d2:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    21d6:	46ba      	mov	sl, r7
    21d8:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    21da:	f896 7023 	ldrb.w	r7, [r6, #35]	; 0x23
    21de:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    21e0:	2908      	cmp	r1, #8
    21e2:	d104      	bne.n	21ee <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xee>
    21e4:	e002      	b.n	21ec <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xec>
    21e6:	f240 1145 	movw	r1, #325	; 0x145
    21ea:	e040      	b.n	226e <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x16e>
    21ec:	2104      	movs	r1, #4
    21ee:	f00b fea9 	bl	df44 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    21f2:	b90f      	cbnz	r7, 21f8 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xf8>
    21f4:	1d00      	adds	r0, r0, #4
    21f6:	b280      	uxth	r0, r0
    21f8:	4285      	cmp	r5, r0
    21fa:	d200      	bcs.n	21fe <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xfe>
    21fc:	4628      	mov	r0, r5
    21fe:	b2c5      	uxtb	r5, r0
    2200:	f888 5007 	strb.w	r5, [r8, #7]
    2204:	f888 5008 	strb.w	r5, [r8, #8]
    2208:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    220c:	46d0      	mov	r8, sl
    220e:	b190      	cbz	r0, 2236 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x136>
    2210:	2701      	movs	r7, #1
    2212:	f889 7018 	strb.w	r7, [r9, #24]
    2216:	e9d6 1220 	ldrd	r1, r2, [r6, #128]	; 0x80
    221a:	e9c9 1204 	strd	r1, r2, [r9, #16]
    221e:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    2222:	f00b fdb3 	bl	dd8c <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x18>
    2226:	4603      	mov	r3, r0
    2228:	462a      	mov	r2, r5
    222a:	4914      	ldr	r1, [pc, #80]	; (227c <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>)
    222c:	4638      	mov	r0, r7
    222e:	f8cd 8000 	str.w	r8, [sp]
    2232:	f005 fd11 	bl	7c58 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    2236:	2001      	movs	r0, #1
    2238:	f000 fb46 	bl	28c8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x59c>
    223c:	4810      	ldr	r0, [pc, #64]	; (2280 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x180>)
    223e:	6800      	ldr	r0, [r0, #0]
    2240:	2803      	cmp	r0, #3
    2242:	d012      	beq.n	226a <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x16a>
    2244:	280b      	cmp	r0, #11
    2246:	d010      	beq.n	226a <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x16a>
    2248:	480c      	ldr	r0, [pc, #48]	; (227c <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>)
    224a:	220e      	movs	r2, #14
    224c:	2100      	movs	r1, #0
    224e:	304a      	adds	r0, #74	; 0x4a
    2250:	f00e fdaf 	bl	10db2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2254:	4809      	ldr	r0, [pc, #36]	; (227c <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>)
    2256:	8ab1      	ldrh	r1, [r6, #20]
    2258:	304a      	adds	r0, #74	; 0x4a
    225a:	8041      	strh	r1, [r0, #2]
    225c:	8821      	ldrh	r1, [r4, #0]
    225e:	8001      	strh	r1, [r0, #0]
    2260:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
    2264:	7101      	strb	r1, [r0, #4]
    2266:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    226a:	f240 2102 	movw	r1, #514	; 0x202
    226e:	2027      	movs	r0, #39	; 0x27
    2270:	f7fe ff78 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2274:	20000084 	.word	0x20000084
    2278:	00002acc 	.word	0x00002acc
    227c:	20000c18 	.word	0x20000c18
    2280:	40001550 	.word	0x40001550

00002284 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>:
    2284:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    2288:	4688      	mov	r8, r1
    228a:	4607      	mov	r7, r0
    228c:	f000 f884 	bl	2398 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    2290:	4c1a      	ldr	r4, [pc, #104]	; (22fc <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x78>)
    2292:	4605      	mov	r5, r0
    2294:	07b8      	lsls	r0, r7, #30
    2296:	6a61      	ldr	r1, [r4, #36]	; 0x24
    2298:	784e      	ldrb	r6, [r1, #1]
    229a:	d516      	bpl.n	22ca <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x46>
    229c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    229e:	b330      	cbz	r0, 22ee <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x6a>
    22a0:	8962      	ldrh	r2, [r4, #10]
    22a2:	1cd2      	adds	r2, r2, #3
    22a4:	f00e fd0b 	bl	10cbe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    22a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    22aa:	6260      	str	r0, [r4, #36]	; 0x24
    22ac:	4669      	mov	r1, sp
    22ae:	aa01      	add	r2, sp, #4
    22b0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    22b2:	f00b f9b5 	bl	d620 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    22b6:	9800      	ldr	r0, [sp, #0]
    22b8:	f00b f968 	bl	d58c <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    22bc:	f8c8 0000 	str.w	r0, [r8]
    22c0:	4631      	mov	r1, r6
    22c2:	2201      	movs	r2, #1
    22c4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    22c6:	f00b f918 	bl	d4fa <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    22ca:	07f8      	lsls	r0, r7, #31
    22cc:	d00d      	beq.n	22ea <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x66>
    22ce:	e9d5 0120 	ldrd	r0, r1, [r5, #128]	; 0x80
    22d2:	3518      	adds	r5, #24
    22d4:	1c40      	adds	r0, r0, #1
    22d6:	f141 0100 	adc.w	r1, r1, #0
    22da:	e9c5 011a 	strd	r0, r1, [r5, #104]	; 0x68
    22de:	f815 0918 	ldrb.w	r0, [r5], #-24
    22e2:	2801      	cmp	r0, #1
    22e4:	d008      	beq.n	22f8 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x74>
    22e6:	2001      	movs	r0, #1
    22e8:	7628      	strb	r0, [r5, #24]
    22ea:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    22ee:	f240 415c 	movw	r1, #1116	; 0x45c
    22f2:	2027      	movs	r0, #39	; 0x27
    22f4:	f7fe ff36 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    22f8:	2000      	movs	r0, #0
    22fa:	e7f5      	b.n	22e8 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x64>
    22fc:	20000084 	.word	0x20000084

00002300 <sym_HMWMSCLS2E7KO3CEVZ6FUZGM6YUJ4GDX4JETJTI>:
    2300:	4802      	ldr	r0, [pc, #8]	; (230c <sym_HMWMSCLS2E7KO3CEVZ6FUZGM6YUJ4GDX4JETJTI+0xc>)
    2302:	89c0      	ldrh	r0, [r0, #14]
    2304:	f3c0 2080 	ubfx	r0, r0, #10, #1
    2308:	4770      	bx	lr
    230a:	0000      	.short	0x0000
    230c:	20000084 	.word	0x20000084

00002310 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>:
    2310:	4804      	ldr	r0, [pc, #16]	; (2324 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0x14>)
    2312:	7800      	ldrb	r0, [r0, #0]
    2314:	b108      	cbz	r0, 231a <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0xa>
    2316:	200c      	movs	r0, #12
    2318:	4770      	bx	lr
    231a:	4903      	ldr	r1, [pc, #12]	; (2328 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0x18>)
    231c:	2000      	movs	r0, #0
    231e:	7708      	strb	r0, [r1, #28]
    2320:	4770      	bx	lr
    2322:	0000      	.short	0x0000
    2324:	20000084 	.word	0x20000084
    2328:	20000c62 	.word	0x20000c62

0000232c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA>:
    232c:	480c      	ldr	r0, [pc, #48]	; (2360 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x34>)
    232e:	b510      	push	{r4, lr}
    2330:	7801      	ldrb	r1, [r0, #0]
    2332:	b149      	cbz	r1, 2348 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1c>
    2334:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    2338:	7800      	ldrb	r0, [r0, #0]
    233a:	2802      	cmp	r0, #2
    233c:	d008      	beq.n	2350 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x24>
    233e:	f240 211e 	movw	r1, #542	; 0x21e
    2342:	2027      	movs	r0, #39	; 0x27
    2344:	f7fe ff0e 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    234c:	f000 b9ca 	b.w	26e4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b8>
    2350:	6848      	ldr	r0, [r1, #4]
    2352:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    2356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    235a:	f005 bee9 	b.w	8130 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    235e:	0000      	.short	0x0000
    2360:	20000084 	.word	0x20000084
    2364:	4608      	mov	r0, r1
    2366:	2100      	movs	r1, #0
    2368:	7041      	strb	r1, [r0, #1]
    236a:	211d      	movs	r1, #29
    236c:	f800 1b04 	strb.w	r1, [r0], #4
    2370:	220e      	movs	r2, #14
    2372:	4901      	ldr	r1, [pc, #4]	; (2378 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4c>)
    2374:	f00e bca3 	b.w	10cbe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2378:	20000c70 	.word	0x20000c70
    237c:	4a02      	ldr	r2, [pc, #8]	; (2388 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x5c>)
    237e:	8993      	ldrh	r3, [r2, #12]
    2380:	4303      	orrs	r3, r0
    2382:	8193      	strh	r3, [r2, #12]
    2384:	6952      	ldr	r2, [r2, #20]
    2386:	4710      	bx	r2
    2388:	20000084 	.word	0x20000084
    238c:	4801      	ldr	r0, [pc, #4]	; (2394 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x68>)
    238e:	6840      	ldr	r0, [r0, #4]
    2390:	4770      	bx	lr
    2392:	0000      	.short	0x0000
    2394:	200000c0 	.word	0x200000c0
    2398:	4801      	ldr	r0, [pc, #4]	; (23a0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x74>)
    239a:	6840      	ldr	r0, [r0, #4]
    239c:	3080      	adds	r0, #128	; 0x80
    239e:	4770      	bx	lr
    23a0:	200000c0 	.word	0x200000c0
    23a4:	4a01      	ldr	r2, [pc, #4]	; (23ac <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x80>)
    23a6:	2100      	movs	r1, #0
    23a8:	6952      	ldr	r2, [r2, #20]
    23aa:	4710      	bx	r2
    23ac:	20000084 	.word	0x20000084
    23b0:	b570      	push	{r4, r5, r6, lr}
    23b2:	4605      	mov	r5, r0
    23b4:	2901      	cmp	r1, #1
    23b6:	d818      	bhi.n	23ea <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
    23b8:	4c12      	ldr	r4, [pc, #72]	; (2404 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd8>)
    23ba:	69a1      	ldr	r1, [r4, #24]
    23bc:	4788      	blx	r1
    23be:	b1a0      	cbz	r0, 23ea <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
    23c0:	7920      	ldrb	r0, [r4, #4]
    23c2:	b990      	cbnz	r0, 23ea <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
    23c4:	b9e5      	cbnz	r5, 2400 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd4>
    23c6:	f104 0010 	add.w	r0, r4, #16
    23ca:	7801      	ldrb	r1, [r0, #0]
    23cc:	06c8      	lsls	r0, r1, #27
    23ce:	d405      	bmi.n	23dc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xb0>
    23d0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    23d2:	7800      	ldrb	r0, [r0, #0]
    23d4:	06c0      	lsls	r0, r0, #27
    23d6:	d401      	bmi.n	23dc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xb0>
    23d8:	2001      	movs	r0, #1
    23da:	e000      	b.n	23de <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xb2>
    23dc:	2000      	movs	r0, #0
    23de:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    23e0:	b92a      	cbnz	r2, 23ee <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xc2>
    23e2:	8962      	ldrh	r2, [r4, #10]
    23e4:	b11a      	cbz	r2, 23ee <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xc2>
    23e6:	06c9      	lsls	r1, r1, #27
    23e8:	d401      	bmi.n	23ee <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xc2>
    23ea:	2001      	movs	r0, #1
    23ec:	bd70      	pop	{r4, r5, r6, pc}
    23ee:	89a1      	ldrh	r1, [r4, #12]
    23f0:	078a      	lsls	r2, r1, #30
    23f2:	d503      	bpl.n	23fc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd0>
    23f4:	6a22      	ldr	r2, [r4, #32]
    23f6:	78d2      	ldrb	r2, [r2, #3]
    23f8:	2a02      	cmp	r2, #2
    23fa:	d001      	beq.n	2400 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd4>
    23fc:	4308      	orrs	r0, r1
    23fe:	d1f4      	bne.n	23ea <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xbe>
    2400:	2000      	movs	r0, #0
    2402:	bd70      	pop	{r4, r5, r6, pc}
    2404:	20000084 	.word	0x20000084
    2408:	b510      	push	{r4, lr}
    240a:	f7ff ffbf 	bl	238c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    240e:	4604      	mov	r4, r0
    2410:	f7ff ffc2 	bl	2398 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    2414:	4602      	mov	r2, r0
    2416:	7f41      	ldrb	r1, [r0, #29]
    2418:	4816      	ldr	r0, [pc, #88]	; (2474 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x148>)
    241a:	2925      	cmp	r1, #37	; 0x25
    241c:	d010      	beq.n	2440 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x114>
    241e:	2926      	cmp	r1, #38	; 0x26
    2420:	d00e      	beq.n	2440 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x114>
    2422:	7f92      	ldrb	r2, [r2, #30]
    2424:	2a25      	cmp	r2, #37	; 0x25
    2426:	d00b      	beq.n	2440 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x114>
    2428:	2920      	cmp	r1, #32
    242a:	d00d      	beq.n	2448 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x11c>
    242c:	2921      	cmp	r1, #33	; 0x21
    242e:	d00b      	beq.n	2448 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x11c>
    2430:	2a23      	cmp	r2, #35	; 0x23
    2432:	d00f      	beq.n	2454 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x128>
    2434:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    2438:	2804      	cmp	r0, #4
    243a:	d100      	bne.n	243e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x112>
    243c:	2008      	movs	r0, #8
    243e:	bd10      	pop	{r4, pc}
    2440:	6840      	ldr	r0, [r0, #4]
    2442:	f890 12ce 	ldrb.w	r1, [r0, #718]	; 0x2ce
    2446:	e00e      	b.n	2466 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x13a>
    2448:	2a23      	cmp	r2, #35	; 0x23
    244a:	d003      	beq.n	2454 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x128>
    244c:	6840      	ldr	r0, [r0, #4]
    244e:	f890 013e 	ldrb.w	r0, [r0, #318]	; 0x13e
    2452:	e005      	b.n	2460 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x134>
    2454:	6841      	ldr	r1, [r0, #4]
    2456:	f891 013e 	ldrb.w	r0, [r1, #318]	; 0x13e
    245a:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    245e:	4008      	ands	r0, r1
    2460:	f00b fc8a 	bl	dd78 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x4>
    2464:	4601      	mov	r1, r0
    2466:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    246a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    246e:	f00b bc9b 	b.w	dda8 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x34>
    2472:	0000      	.short	0x0000
    2474:	200000c0 	.word	0x200000c0
    2478:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    247c:	468b      	mov	fp, r1
    247e:	4681      	mov	r9, r0
    2480:	f7ff ff8a 	bl	2398 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    2484:	2600      	movs	r6, #0
    2486:	4c66      	ldr	r4, [pc, #408]	; (2620 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2f4>)
    2488:	4607      	mov	r7, r0
    248a:	f88d 6008 	strb.w	r6, [sp, #8]
    248e:	9603      	str	r6, [sp, #12]
    2490:	9601      	str	r6, [sp, #4]
    2492:	7820      	ldrb	r0, [r4, #0]
    2494:	4635      	mov	r5, r6
    2496:	2802      	cmp	r0, #2
    2498:	d004      	beq.n	24a4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x178>
    249a:	f240 41df 	movw	r1, #1247	; 0x4df
    249e:	2027      	movs	r0, #39	; 0x27
    24a0:	f7fe fe60 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    24a4:	7ba0      	ldrb	r0, [r4, #14]
    24a6:	0640      	lsls	r0, r0, #25
    24a8:	d406      	bmi.n	24b8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x18c>
    24aa:	2040      	movs	r0, #64	; 0x40
    24ac:	f7ff ff7a 	bl	23a4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    24b0:	89e0      	ldrh	r0, [r4, #14]
    24b2:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    24b6:	81e0      	strh	r0, [r4, #14]
    24b8:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
    24bc:	f1b9 0f00 	cmp.w	r9, #0
    24c0:	d03a      	beq.n	2538 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x20c>
    24c2:	b180      	cbz	r0, 24e6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    24c4:	f005 fc96 	bl	7df4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    24c8:	f005 fc70 	bl	7dac <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    24cc:	b958      	cbnz	r0, 24e6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    24ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
    24d0:	7841      	ldrb	r1, [r0, #1]
    24d2:	b141      	cbz	r1, 24e6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    24d4:	7800      	ldrb	r0, [r0, #0]
    24d6:	7e39      	ldrb	r1, [r7, #24]
    24d8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    24dc:	4288      	cmp	r0, r1
    24de:	d102      	bne.n	24e6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    24e0:	2001      	movs	r0, #1
    24e2:	7060      	strb	r0, [r4, #1]
    24e4:	e097      	b.n	2616 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2ea>
    24e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    24e8:	7841      	ldrb	r1, [r0, #1]
    24ea:	8161      	strh	r1, [r4, #10]
    24ec:	b121      	cbz	r1, 24f8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1cc>
    24ee:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    24f0:	f00b f96c 	bl	d7cc <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    24f4:	62a0      	str	r0, [r4, #40]	; 0x28
    24f6:	e000      	b.n	24fa <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ce>
    24f8:	62a5      	str	r5, [r4, #40]	; 0x28
    24fa:	89e0      	ldrh	r0, [r4, #14]
    24fc:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    2500:	81e0      	strh	r0, [r4, #14]
    2502:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2504:	7df9      	ldrb	r1, [r7, #23]
    2506:	7800      	ldrb	r0, [r0, #0]
    2508:	f3c0 0080 	ubfx	r0, r0, #2, #1
    250c:	4288      	cmp	r0, r1
    250e:	d007      	beq.n	2520 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1f4>
    2510:	a803      	add	r0, sp, #12
    2512:	f000 f98b 	bl	282c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x500>
    2516:	89e0      	ldrh	r0, [r4, #14]
    2518:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    251c:	81e0      	strh	r0, [r4, #14]
    251e:	e000      	b.n	2522 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1f6>
    2520:	2601      	movs	r6, #1
    2522:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2524:	7e39      	ldrb	r1, [r7, #24]
    2526:	7800      	ldrb	r0, [r0, #0]
    2528:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    252c:	4288      	cmp	r0, r1
    252e:	d10d      	bne.n	254c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x220>
    2530:	a802      	add	r0, sp, #8
    2532:	f000 f931 	bl	2798 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x46c>
    2536:	e009      	b.n	254c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x220>
    2538:	b108      	cbz	r0, 253e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x212>
    253a:	f005 fc55 	bl	7de8 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    253e:	78a0      	ldrb	r0, [r4, #2]
    2540:	1c40      	adds	r0, r0, #1
    2542:	70a0      	strb	r0, [r4, #2]
    2544:	89e0      	ldrh	r0, [r4, #14]
    2546:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    254a:	81e0      	strh	r0, [r4, #14]
    254c:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 2620 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2f4>
    2550:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
    2554:	f10a 0a3c 	add.w	sl, sl, #60	; 0x3c
    2558:	b190      	cbz	r0, 2580 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x254>
    255a:	f7ff ff17 	bl	238c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    255e:	4931      	ldr	r1, [pc, #196]	; (2624 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2f8>)
    2560:	760d      	strb	r5, [r1, #24]
    2562:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
    2566:	e9c1 2304 	strd	r2, r3, [r1, #16]
    256a:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    256e:	f00b fc0d 	bl	dd8c <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x18>
    2572:	4603      	mov	r3, r0
    2574:	22fb      	movs	r2, #251	; 0xfb
    2576:	492b      	ldr	r1, [pc, #172]	; (2624 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2f8>)
    2578:	4628      	mov	r0, r5
    257a:	9500      	str	r5, [sp, #0]
    257c:	f005 fb6c 	bl	7c58 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    2580:	f04f 0800 	mov.w	r8, #0
    2584:	f1bb 0f00 	cmp.w	fp, #0
    2588:	d104      	bne.n	2594 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x268>
    258a:	78a1      	ldrb	r1, [r4, #2]
    258c:	2001      	movs	r0, #1
    258e:	f7ff ff0f 	bl	23b0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
    2592:	b120      	cbz	r0, 259e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x272>
    2594:	f005 ffe6 	bl	8564 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    2598:	f04f 0801 	mov.w	r8, #1
    259c:	e002      	b.n	25a4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x278>
    259e:	2000      	movs	r0, #0
    25a0:	f000 f9d0 	bl	2944 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x618>
    25a4:	f89d 0008 	ldrb.w	r0, [sp, #8]
    25a8:	b118      	cbz	r0, 25b2 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x286>
    25aa:	a901      	add	r1, sp, #4
    25ac:	2002      	movs	r0, #2
    25ae:	f7ff fe69 	bl	2284 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>
    25b2:	481c      	ldr	r0, [pc, #112]	; (2624 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2f8>)
    25b4:	8aba      	ldrh	r2, [r7, #20]
    25b6:	304a      	adds	r0, #74	; 0x4a
    25b8:	b13e      	cbz	r6, 25ca <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x29e>
    25ba:	b91a      	cbnz	r2, 25c4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x298>
    25bc:	88c2      	ldrh	r2, [r0, #6]
    25be:	b90a      	cbnz	r2, 25c4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x298>
    25c0:	8902      	ldrh	r2, [r0, #8]
    25c2:	b112      	cbz	r2, 25ca <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x29e>
    25c4:	8942      	ldrh	r2, [r0, #10]
    25c6:	1c52      	adds	r2, r2, #1
    25c8:	8142      	strh	r2, [r0, #10]
    25ca:	f1b9 0f00 	cmp.w	r9, #0
    25ce:	d004      	beq.n	25da <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2ae>
    25d0:	88c1      	ldrh	r1, [r0, #6]
    25d2:	1c49      	adds	r1, r1, #1
    25d4:	80c1      	strh	r1, [r0, #6]
    25d6:	70a5      	strb	r5, [r4, #2]
    25d8:	e002      	b.n	25e0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2b4>
    25da:	8901      	ldrh	r1, [r0, #8]
    25dc:	1c49      	adds	r1, r1, #1
    25de:	8101      	strh	r1, [r0, #8]
    25e0:	480f      	ldr	r0, [pc, #60]	; (2620 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2f4>)
    25e2:	303c      	adds	r0, #60	; 0x3c
    25e4:	f001 f8e4 	bl	37b0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
    25e8:	9803      	ldr	r0, [sp, #12]
    25ea:	b140      	cbz	r0, 25fe <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2d2>
    25ec:	f00a ffce 	bl	d58c <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    25f0:	f8da 1004 	ldr.w	r1, [sl, #4]
    25f4:	1c40      	adds	r0, r0, #1
    25f6:	7205      	strb	r5, [r0, #8]
    25f8:	2208      	movs	r2, #8
    25fa:	f00b ffd5 	bl	e5a8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    25fe:	9801      	ldr	r0, [sp, #4]
    2600:	b130      	cbz	r0, 2610 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2e4>
    2602:	f8da 1004 	ldr.w	r1, [sl, #4]
    2606:	7205      	strb	r5, [r0, #8]
    2608:	2210      	movs	r2, #16
    260a:	9801      	ldr	r0, [sp, #4]
    260c:	f00b ffcc 	bl	e5a8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2610:	f1b8 0f00 	cmp.w	r8, #0
    2614:	d001      	beq.n	261a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2ee>
    2616:	f000 f865 	bl	26e4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b8>
    261a:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    261e:	0000      	.short	0x0000
    2620:	20000084 	.word	0x20000084
    2624:	20000c18 	.word	0x20000c18
    2628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    262c:	4688      	mov	r8, r1
    262e:	4681      	mov	r9, r0
    2630:	f7ff feb2 	bl	2398 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    2634:	4d29      	ldr	r5, [pc, #164]	; (26dc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b0>)
    2636:	4604      	mov	r4, r0
    2638:	7828      	ldrb	r0, [r5, #0]
    263a:	2801      	cmp	r0, #1
    263c:	d004      	beq.n	2648 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x31c>
    263e:	f240 416b 	movw	r1, #1131	; 0x46b
    2642:	2027      	movs	r0, #39	; 0x27
    2644:	f7fe fd8e 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2648:	7c20      	ldrb	r0, [r4, #16]
    264a:	2700      	movs	r7, #0
    264c:	2601      	movs	r6, #1
    264e:	b128      	cbz	r0, 265c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x330>
    2650:	7427      	strb	r7, [r4, #16]
    2652:	2100      	movs	r1, #0
    2654:	2004      	movs	r0, #4
    2656:	f7ff fe91 	bl	237c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    265a:	74a6      	strb	r6, [r4, #18]
    265c:	6a29      	ldr	r1, [r5, #32]
    265e:	7808      	ldrb	r0, [r1, #0]
    2660:	43c0      	mvns	r0, r0
    2662:	0780      	lsls	r0, r0, #30
    2664:	d109      	bne.n	267a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x34e>
    2666:	7da0      	ldrb	r0, [r4, #22]
    2668:	bb88      	cbnz	r0, 26ce <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3a2>
    266a:	2002      	movs	r0, #2
    266c:	f7ff fe86 	bl	237c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    2670:	6a28      	ldr	r0, [r5, #32]
    2672:	7800      	ldrb	r0, [r0, #0]
    2674:	43c0      	mvns	r0, r0
    2676:	0780      	lsls	r0, r0, #30
    2678:	d029      	beq.n	26ce <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3a2>
    267a:	6a28      	ldr	r0, [r5, #32]
    267c:	7840      	ldrb	r0, [r0, #1]
    267e:	b110      	cbz	r0, 2686 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x35a>
    2680:	2002      	movs	r0, #2
    2682:	75a0      	strb	r0, [r4, #22]
    2684:	e000      	b.n	2688 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x35c>
    2686:	75a6      	strb	r6, [r4, #22]
    2688:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
    268c:	b198      	cbz	r0, 26b6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x38a>
    268e:	f7ff fe7d 	bl	238c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    2692:	4913      	ldr	r1, [pc, #76]	; (26e0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b4>)
    2694:	7a2d      	ldrb	r5, [r5, #8]
    2696:	760e      	strb	r6, [r1, #24]
    2698:	e9d4 2320 	ldrd	r2, r3, [r4, #128]	; 0x80
    269c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    26a0:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    26a4:	f00b fb72 	bl	dd8c <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x18>
    26a8:	4603      	mov	r3, r0
    26aa:	462a      	mov	r2, r5
    26ac:	490c      	ldr	r1, [pc, #48]	; (26e0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b4>)
    26ae:	4630      	mov	r0, r6
    26b0:	9700      	str	r7, [sp, #0]
    26b2:	f005 fad1 	bl	7c58 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    26b6:	ea38 0009 	bics.w	r0, r8, r9
    26ba:	d004      	beq.n	26c6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x39a>
    26bc:	2100      	movs	r1, #0
    26be:	4608      	mov	r0, r1
    26c0:	f7ff fe76 	bl	23b0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x84>
    26c4:	b128      	cbz	r0, 26d2 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3a6>
    26c6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    26ca:	f000 b80b 	b.w	26e4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b8>
    26ce:	2003      	movs	r0, #3
    26d0:	e7d7      	b.n	2682 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x356>
    26d2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    26d6:	2000      	movs	r0, #0
    26d8:	f000 b8f6 	b.w	28c8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x59c>
    26dc:	20000084 	.word	0x20000084
    26e0:	20000c18 	.word	0x20000c18
    26e4:	b510      	push	{r4, lr}
    26e6:	f005 fc25 	bl	7f34 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    26ea:	f005 fb49 	bl	7d80 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    26ee:	4c0d      	ldr	r4, [pc, #52]	; (2724 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3f8>)
    26f0:	89e0      	ldrh	r0, [r4, #14]
    26f2:	f7ff fe57 	bl	23a4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    26f6:	480c      	ldr	r0, [pc, #48]	; (2728 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3fc>)
    26f8:	7f00      	ldrb	r0, [r0, #28]
    26fa:	b158      	cbz	r0, 2714 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3e8>
    26fc:	490a      	ldr	r1, [pc, #40]	; (2728 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3fc>)
    26fe:	220e      	movs	r2, #14
    2700:	f101 000e 	add.w	r0, r1, #14
    2704:	f00e fadb 	bl	10cbe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2708:	4807      	ldr	r0, [pc, #28]	; (2728 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3fc>)
    270a:	2202      	movs	r2, #2
    270c:	4907      	ldr	r1, [pc, #28]	; (272c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x400>)
    270e:	301d      	adds	r0, #29
    2710:	f00b ff5e 	bl	e5d0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    2714:	69e2      	ldr	r2, [r4, #28]
    2716:	7921      	ldrb	r1, [r4, #4]
    2718:	7860      	ldrb	r0, [r4, #1]
    271a:	4790      	blx	r2
    271c:	2000      	movs	r0, #0
    271e:	7020      	strb	r0, [r4, #0]
    2720:	bd10      	pop	{r4, pc}
    2722:	0000      	.short	0x0000
    2724:	20000084 	.word	0x20000084
    2728:	20000c62 	.word	0x20000c62
    272c:	00002365 	.word	0x00002365
    2730:	4808      	ldr	r0, [pc, #32]	; (2754 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x428>)
    2732:	b510      	push	{r4, lr}
    2734:	7800      	ldrb	r0, [r0, #0]
    2736:	2802      	cmp	r0, #2
    2738:	d004      	beq.n	2744 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x418>
    273a:	f240 2149 	movw	r1, #585	; 0x249
    273e:	2027      	movs	r0, #39	; 0x27
    2740:	f7fe fd10 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2744:	4904      	ldr	r1, [pc, #16]	; (2758 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x42c>)
    2746:	2001      	movs	r0, #1
    2748:	7308      	strb	r0, [r1, #12]
    274a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    274e:	f7ff bfc9 	b.w	26e4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b8>
    2752:	0000      	.short	0x0000
    2754:	20000084 	.word	0x20000084
    2758:	20000c62 	.word	0x20000c62
    275c:	b430      	push	{r4, r5}
    275e:	4604      	mov	r4, r0
    2760:	480c      	ldr	r0, [pc, #48]	; (2794 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x468>)
    2762:	7a00      	ldrb	r0, [r0, #8]
    2764:	b10b      	cbz	r3, 276a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x43e>
    2766:	1d00      	adds	r0, r0, #4
    2768:	b2c0      	uxtb	r0, r0
    276a:	b93a      	cbnz	r2, 277c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x450>
    276c:	28ff      	cmp	r0, #255	; 0xff
    276e:	d105      	bne.n	277c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x450>
    2770:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
    2774:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    2778:	429a      	cmp	r2, r3
    277a:	d009      	beq.n	2790 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x464>
    277c:	b121      	cbz	r1, 2788 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x45c>
    277e:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    2782:	bc30      	pop	{r4, r5}
    2784:	f005 bf12 	b.w	85ac <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    2788:	20ff      	movs	r0, #255	; 0xff
    278a:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    278e:	e7f8      	b.n	2782 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x456>
    2790:	bc30      	pop	{r4, r5}
    2792:	4770      	bx	lr
    2794:	20000084 	.word	0x20000084
    2798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    279c:	4607      	mov	r7, r0
    279e:	f7ff fdfb 	bl	2398 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    27a2:	4c21      	ldr	r4, [pc, #132]	; (2828 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4fc>)
    27a4:	4605      	mov	r5, r0
    27a6:	2601      	movs	r6, #1
    27a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    27aa:	7808      	ldrb	r0, [r1, #0]
    27ac:	f000 0003 	and.w	r0, r0, #3
    27b0:	2801      	cmp	r0, #1
    27b2:	d00c      	beq.n	27ce <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4a2>
    27b4:	2802      	cmp	r0, #2
    27b6:	d00a      	beq.n	27ce <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4a2>
    27b8:	2803      	cmp	r0, #3
    27ba:	d11b      	bne.n	27f4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4c8>
    27bc:	742e      	strb	r6, [r5, #16]
    27be:	89e0      	ldrh	r0, [r4, #14]
    27c0:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    27c4:	81e0      	strh	r0, [r4, #14]
    27c6:	2001      	movs	r0, #1
    27c8:	f7ff fdd8 	bl	237c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    27cc:	e012      	b.n	27f4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4c8>
    27ce:	7848      	ldrb	r0, [r1, #1]
    27d0:	b180      	cbz	r0, 27f4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4c8>
    27d2:	89e1      	ldrh	r1, [r4, #14]
    27d4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    27d8:	81e1      	strh	r1, [r4, #14]
    27da:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    27dc:	2900      	cmp	r1, #0
    27de:	d018      	beq.n	2812 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4e6>
    27e0:	28fb      	cmp	r0, #251	; 0xfb
    27e2:	d818      	bhi.n	2816 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4ea>
    27e4:	7960      	ldrb	r0, [r4, #5]
    27e6:	b120      	cbz	r0, 27f2 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4c6>
    27e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    27ec:	2020      	movs	r0, #32
    27ee:	f7ff bdd9 	b.w	23a4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    27f2:	703e      	strb	r6, [r7, #0]
    27f4:	7e28      	ldrb	r0, [r5, #24]
    27f6:	2801      	cmp	r0, #1
    27f8:	d012      	beq.n	2820 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4f4>
    27fa:	762e      	strb	r6, [r5, #24]
    27fc:	6a60      	ldr	r0, [r4, #36]	; 0x24
    27fe:	7840      	ldrb	r0, [r0, #1]
    2800:	2800      	cmp	r0, #0
    2802:	d006      	beq.n	2812 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4e6>
    2804:	e9f5 0120 	ldrd	r0, r1, [r5, #128]!	; 0x80
    2808:	1c40      	adds	r0, r0, #1
    280a:	f141 0100 	adc.w	r1, r1, #0
    280e:	e9c5 0100 	strd	r0, r1, [r5]
    2812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2816:	7920      	ldrb	r0, [r4, #4]
    2818:	f040 0010 	orr.w	r0, r0, #16
    281c:	7120      	strb	r0, [r4, #4]
    281e:	e7f8      	b.n	2812 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4e6>
    2820:	2000      	movs	r0, #0
    2822:	7628      	strb	r0, [r5, #24]
    2824:	e7ea      	b.n	27fc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4d0>
    2826:	0000      	.short	0x0000
    2828:	20000084 	.word	0x20000084
    282c:	b570      	push	{r4, r5, r6, lr}
    282e:	4605      	mov	r5, r0
    2830:	f7ff fdb2 	bl	2398 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    2834:	4604      	mov	r4, r0
    2836:	7d80      	ldrb	r0, [r0, #22]
    2838:	2800      	cmp	r0, #0
    283a:	d02d      	beq.n	2898 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x56c>
    283c:	2802      	cmp	r0, #2
    283e:	d10c      	bne.n	285a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x52e>
    2840:	481b      	ldr	r0, [pc, #108]	; (28b0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x584>)
    2842:	4629      	mov	r1, r5
    2844:	6b40      	ldr	r0, [r0, #52]	; 0x34
    2846:	f00a fe30 	bl	d4aa <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    284a:	b330      	cbz	r0, 289a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x56e>
    284c:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    2850:	1c40      	adds	r0, r0, #1
    2852:	f141 0100 	adc.w	r1, r1, #0
    2856:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    285a:	2500      	movs	r5, #0
    285c:	75a5      	strb	r5, [r4, #22]
    285e:	7ca0      	ldrb	r0, [r4, #18]
    2860:	b120      	cbz	r0, 286c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x540>
    2862:	74a5      	strb	r5, [r4, #18]
    2864:	2100      	movs	r1, #0
    2866:	2010      	movs	r0, #16
    2868:	f7ff fd88 	bl	237c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    286c:	7c60      	ldrb	r0, [r4, #17]
    286e:	b170      	cbz	r0, 288e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x562>
    2870:	7465      	strb	r5, [r4, #17]
    2872:	f7ff fb65 	bl	1f40 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    2876:	b198      	cbz	r0, 28a0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x574>
    2878:	2100      	movs	r1, #0
    287a:	2008      	movs	r0, #8
    287c:	f7ff fd7e 	bl	237c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    2880:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    2884:	1c40      	adds	r0, r0, #1
    2886:	f141 0100 	adc.w	r1, r1, #0
    288a:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    288e:	7de0      	ldrb	r0, [r4, #23]
    2890:	2801      	cmp	r0, #1
    2892:	d00a      	beq.n	28aa <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x57e>
    2894:	2001      	movs	r0, #1
    2896:	75e0      	strb	r0, [r4, #23]
    2898:	bd70      	pop	{r4, r5, r6, pc}
    289a:	f240 31da 	movw	r1, #986	; 0x3da
    289e:	e001      	b.n	28a4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x578>
    28a0:	f240 31f1 	movw	r1, #1009	; 0x3f1
    28a4:	2027      	movs	r0, #39	; 0x27
    28a6:	f7fe fc5d 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    28aa:	75e5      	strb	r5, [r4, #23]
    28ac:	bd70      	pop	{r4, r5, r6, pc}
    28ae:	0000      	.short	0x0000
    28b0:	20000084 	.word	0x20000084
    28b4:	4803      	ldr	r0, [pc, #12]	; (28c4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x598>)
    28b6:	7800      	ldrb	r0, [r0, #0]
    28b8:	2800      	cmp	r0, #0
    28ba:	d001      	beq.n	28c0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x594>
    28bc:	f7ff bf12 	b.w	26e4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b8>
    28c0:	4770      	bx	lr
    28c2:	0000      	.short	0x0000
    28c4:	20000084 	.word	0x20000084
    28c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    28cc:	4606      	mov	r6, r0
    28ce:	f7ff fd5d 	bl	238c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    28d2:	4680      	mov	r8, r0
    28d4:	f7ff fd60 	bl	2398 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    28d8:	4c18      	ldr	r4, [pc, #96]	; (293c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x610>)
    28da:	4605      	mov	r5, r0
    28dc:	4632      	mov	r2, r6
    28de:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    28e0:	6260      	str	r0, [r4, #36]	; 0x24
    28e2:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    28e6:	2101      	movs	r1, #1
    28e8:	4640      	mov	r0, r8
    28ea:	f7ff ff37 	bl	275c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x430>
    28ee:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
    28f2:	2700      	movs	r7, #0
    28f4:	b170      	cbz	r0, 2914 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x5e8>
    28f6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    28f8:	f005 fd8e 	bl	8418 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    28fc:	4810      	ldr	r0, [pc, #64]	; (2940 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x614>)
    28fe:	2101      	movs	r1, #1
    2900:	7601      	strb	r1, [r0, #24]
    2902:	e9d5 1220 	ldrd	r1, r2, [r5, #128]	; 0x80
    2906:	e9c0 1204 	strd	r1, r2, [r0, #16]
    290a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    290c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    290e:	f005 f9f5 	bl	7cfc <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    2912:	e004      	b.n	291e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x5f2>
    2914:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2916:	f005 fd7f 	bl	8418 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    291a:	f005 fa31 	bl	7d80 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    291e:	b916      	cbnz	r6, 2926 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x5fa>
    2920:	4638      	mov	r0, r7
    2922:	f005 fc29 	bl	8178 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    2926:	2100      	movs	r1, #0
    2928:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    292c:	4608      	mov	r0, r1
    292e:	f005 fdfb 	bl	8528 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    2932:	2002      	movs	r0, #2
    2934:	7020      	strb	r0, [r4, #0]
    2936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    293a:	0000      	.short	0x0000
    293c:	20000084 	.word	0x20000084
    2940:	20000c18 	.word	0x20000c18
    2944:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    2948:	4604      	mov	r4, r0
    294a:	f7ff fd25 	bl	2398 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    294e:	4605      	mov	r5, r0
    2950:	f7ff fd1c 	bl	238c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    2954:	2700      	movs	r7, #0
    2956:	f88d 7000 	strb.w	r7, [sp]
    295a:	4606      	mov	r6, r0
    295c:	f8df 9164 	ldr.w	r9, [pc, #356]	; 2ac4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x798>
    2960:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    2964:	4622      	mov	r2, r4
    2966:	4639      	mov	r1, r7
    2968:	f7ff fef8 	bl	275c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x430>
    296c:	7da8      	ldrb	r0, [r5, #22]
    296e:	f04f 0801 	mov.w	r8, #1
    2972:	f1a9 0420 	sub.w	r4, r9, #32
    2976:	b140      	cbz	r0, 298a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x65e>
    2978:	2801      	cmp	r0, #1
    297a:	d020      	beq.n	29be <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x692>
    297c:	2802      	cmp	r0, #2
    297e:	d02f      	beq.n	29e0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6b4>
    2980:	2803      	cmp	r0, #3
    2982:	d03b      	beq.n	29fc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6d0>
    2984:	f240 21fb 	movw	r1, #763	; 0x2fb
    2988:	e057      	b.n	2a3a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x70e>
    298a:	79a0      	ldrb	r0, [r4, #6]
    298c:	2150      	movs	r1, #80	; 0x50
    298e:	f8ad 0004 	strh.w	r0, [sp, #4]
    2992:	5388      	strh	r0, [r1, r6]
    2994:	4648      	mov	r0, r9
    2996:	f7ff fafd 	bl	1f94 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    299a:	b130      	cbz	r0, 29aa <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x67e>
    299c:	2080      	movs	r0, #128	; 0x80
    299e:	6a21      	ldr	r1, [r4, #32]
    29a0:	f7ff fcec 	bl	237c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    29a4:	f885 8011 	strb.w	r8, [r5, #17]
    29a8:	e02c      	b.n	2a04 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6d8>
    29aa:	466a      	mov	r2, sp
    29ac:	a901      	add	r1, sp, #4
    29ae:	6b60      	ldr	r0, [r4, #52]	; 0x34
    29b0:	f00b fa04 	bl	ddbc <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x48>
    29b4:	6220      	str	r0, [r4, #32]
    29b6:	b110      	cbz	r0, 29be <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x692>
    29b8:	f895 105b 	ldrb.w	r1, [r5, #91]	; 0x5b
    29bc:	b111      	cbz	r1, 29c4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x698>
    29be:	4842      	ldr	r0, [pc, #264]	; (2ac8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x79c>)
    29c0:	6220      	str	r0, [r4, #32]
    29c2:	e01f      	b.n	2a04 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6d8>
    29c4:	f89d 1000 	ldrb.w	r1, [sp]
    29c8:	b921      	cbnz	r1, 29d4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6a8>
    29ca:	8007      	strh	r7, [r0, #0]
    29cc:	7087      	strb	r7, [r0, #2]
    29ce:	2101      	movs	r1, #1
    29d0:	f00b fd63 	bl	e49a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    29d4:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    29d8:	6a20      	ldr	r0, [r4, #32]
    29da:	f00b fce6 	bl	e3aa <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>
    29de:	e011      	b.n	2a04 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6d8>
    29e0:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    29e4:	f8ad 0004 	strh.w	r0, [sp, #4]
    29e8:	466a      	mov	r2, sp
    29ea:	a901      	add	r1, sp, #4
    29ec:	6b60      	ldr	r0, [r4, #52]	; 0x34
    29ee:	f00b f9e5 	bl	ddbc <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x48>
    29f2:	6220      	str	r0, [r4, #32]
    29f4:	b930      	cbnz	r0, 2a04 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6d8>
    29f6:	f240 21e5 	movw	r1, #741	; 0x2e5
    29fa:	e01e      	b.n	2a3a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x70e>
    29fc:	4648      	mov	r0, r9
    29fe:	f7ff fac9 	bl	1f94 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    2a02:	b1c0      	cbz	r0, 2a36 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x70a>
    2a04:	6a20      	ldr	r0, [r4, #32]
    2a06:	2308      	movs	r3, #8
    2a08:	7801      	ldrb	r1, [r0, #0]
    2a0a:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    2a0e:	7001      	strb	r1, [r0, #0]
    2a10:	7dea      	ldrb	r2, [r5, #23]
    2a12:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    2a16:	4311      	orrs	r1, r2
    2a18:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    2a1c:	7001      	strb	r1, [r0, #0]
    2a1e:	7e2a      	ldrb	r2, [r5, #24]
    2a20:	2304      	movs	r3, #4
    2a22:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    2a26:	4311      	orrs	r1, r2
    2a28:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    2a2c:	7001      	strb	r1, [r0, #0]
    2a2e:	43c9      	mvns	r1, r1
    2a30:	0789      	lsls	r1, r1, #30
    2a32:	d005      	beq.n	2a40 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x714>
    2a34:	e007      	b.n	2a46 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x71a>
    2a36:	f240 21ee 	movw	r1, #750	; 0x2ee
    2a3a:	2027      	movs	r0, #39	; 0x27
    2a3c:	f7fe fb92 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2a40:	78c0      	ldrb	r0, [r0, #3]
    2a42:	2802      	cmp	r0, #2
    2a44:	d00f      	beq.n	2a66 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x73a>
    2a46:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2a48:	f00a fe2d 	bl	d6a6 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    2a4c:	b108      	cbz	r0, 2a52 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x726>
    2a4e:	2101      	movs	r1, #1
    2a50:	e00a      	b.n	2a68 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x73c>
    2a52:	6a20      	ldr	r0, [r4, #32]
    2a54:	7800      	ldrb	r0, [r0, #0]
    2a56:	43c0      	mvns	r0, r0
    2a58:	0780      	lsls	r0, r0, #30
    2a5a:	d004      	beq.n	2a66 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x73a>
    2a5c:	f7ff fa58 	bl	1f10 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    2a60:	f080 0101 	eor.w	r1, r0, #1
    2a64:	e000      	b.n	2a68 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x73c>
    2a66:	2100      	movs	r1, #0
    2a68:	6a20      	ldr	r0, [r4, #32]
    2a6a:	7802      	ldrb	r2, [r0, #0]
    2a6c:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    2a70:	7001      	strb	r1, [r0, #0]
    2a72:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
    2a76:	b181      	cbz	r1, 2a9a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x76e>
    2a78:	7841      	ldrb	r1, [r0, #1]
    2a7a:	b171      	cbz	r1, 2a9a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x76e>
    2a7c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2a7e:	f005 fccb 	bl	8418 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2a82:	4811      	ldr	r0, [pc, #68]	; (2ac8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x79c>)
    2a84:	3828      	subs	r0, #40	; 0x28
    2a86:	7607      	strb	r7, [r0, #24]
    2a88:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    2a8c:	e9c0 1204 	strd	r1, r2, [r0, #16]
    2a90:	6a21      	ldr	r1, [r4, #32]
    2a92:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2a94:	f005 f932 	bl	7cfc <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    2a98:	e003      	b.n	2aa2 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x776>
    2a9a:	f005 fcbd 	bl	8418 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2a9e:	f005 f96f 	bl	7d80 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    2aa2:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    2aa6:	2101      	movs	r1, #1
    2aa8:	2000      	movs	r0, #0
    2aaa:	f005 fd3d 	bl	8528 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    2aae:	f884 8003 	strb.w	r8, [r4, #3]
    2ab2:	6a21      	ldr	r1, [r4, #32]
    2ab4:	880a      	ldrh	r2, [r1, #0]
    2ab6:	8222      	strh	r2, [r4, #16]
    2ab8:	7889      	ldrb	r1, [r1, #2]
    2aba:	74a1      	strb	r1, [r4, #18]
    2abc:	f884 8000 	strb.w	r8, [r4]
    2ac0:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    2ac4:	200000a4 	.word	0x200000a4
    2ac8:	20000c40 	.word	0x20000c40
    2acc:	00002731 	.word	0x00002731
    2ad0:	00002479 	.word	0x00002479
    2ad4:	00002629 	.word	0x00002629
    2ad8:	000028b5 	.word	0x000028b5

00002adc <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    2adc:	4800      	ldr	r0, [pc, #0]	; (2ae0 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    2ade:	4770      	bx	lr
    2ae0:	20001550 	.word	0x20001550

00002ae4 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    2ae4:	4904      	ldr	r1, [pc, #16]	; (2af8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    2ae6:	784a      	ldrb	r2, [r1, #1]
    2ae8:	4282      	cmp	r2, r0
    2aea:	d903      	bls.n	2af4 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    2aec:	4408      	add	r0, r1
    2aee:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
    2af2:	4770      	bx	lr
    2af4:	2000      	movs	r0, #0
    2af6:	4770      	bx	lr
    2af8:	200013c6 	.word	0x200013c6

00002afc <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    2afc:	4904      	ldr	r1, [pc, #16]	; (2b10 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    2afe:	784a      	ldrb	r2, [r1, #1]
    2b00:	4282      	cmp	r2, r0
    2b02:	d903      	bls.n	2b0c <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    2b04:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    2b08:	3082      	adds	r0, #130	; 0x82
    2b0a:	4770      	bx	lr
    2b0c:	2000      	movs	r0, #0
    2b0e:	4770      	bx	lr
    2b10:	200013c6 	.word	0x200013c6

00002b14 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    2b14:	4a05      	ldr	r2, [pc, #20]	; (2b2c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    2b16:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2b1a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    2b1e:	6802      	ldr	r2, [r0, #0]
    2b20:	f8c1 210a 	str.w	r2, [r1, #266]	; 0x10a
    2b24:	8880      	ldrh	r0, [r0, #4]
    2b26:	f8a1 010e 	strh.w	r0, [r1, #270]	; 0x10e
    2b2a:	4770      	bx	lr
    2b2c:	200013c6 	.word	0x200013c6

00002b30 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    2b30:	4904      	ldr	r1, [pc, #16]	; (2b44 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    2b32:	784a      	ldrb	r2, [r1, #1]
    2b34:	4282      	cmp	r2, r0
    2b36:	d903      	bls.n	2b40 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    2b38:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    2b3c:	1c80      	adds	r0, r0, #2
    2b3e:	4770      	bx	lr
    2b40:	2000      	movs	r0, #0
    2b42:	4770      	bx	lr
    2b44:	200013c6 	.word	0x200013c6

00002b48 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    2b48:	b510      	push	{r4, lr}
    2b4a:	f44f 72c5 	mov.w	r2, #394	; 0x18a
    2b4e:	2100      	movs	r1, #0
    2b50:	4805      	ldr	r0, [pc, #20]	; (2b68 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x20>)
    2b52:	f00e f92e 	bl	10db2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2b56:	4805      	ldr	r0, [pc, #20]	; (2b6c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x24>)
    2b58:	2100      	movs	r1, #0
    2b5a:	7001      	strb	r1, [r0, #0]
    2b5c:	7041      	strb	r1, [r0, #1]
    2b5e:	f44f 7161 	mov.w	r1, #900	; 0x384
    2b62:	8041      	strh	r1, [r0, #2]
    2b64:	bd10      	pop	{r4, pc}
    2b66:	0000      	.short	0x0000
    2b68:	200013c6 	.word	0x200013c6
    2b6c:	20000358 	.word	0x20000358

00002b70 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    2b70:	4b0b      	ldr	r3, [pc, #44]	; (2ba0 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    2b72:	b510      	push	{r4, lr}
    2b74:	785c      	ldrb	r4, [r3, #1]
    2b76:	4284      	cmp	r4, r0
    2b78:	d910      	bls.n	2b9c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2c>
    2b7a:	4418      	add	r0, r3
    2b7c:	f890 0102 	ldrb.w	r0, [r0, #258]	; 0x102
    2b80:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2b84:	4418      	add	r0, r3
    2b86:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
    2b8a:	700b      	strb	r3, [r1, #0]
    2b8c:	f8d0 1153 	ldr.w	r1, [r0, #339]	; 0x153
    2b90:	6011      	str	r1, [r2, #0]
    2b92:	f8b0 0157 	ldrh.w	r0, [r0, #343]	; 0x157
    2b96:	8090      	strh	r0, [r2, #4]
    2b98:	2001      	movs	r0, #1
    2b9a:	bd10      	pop	{r4, pc}
    2b9c:	2000      	movs	r0, #0
    2b9e:	bd10      	pop	{r4, pc}
    2ba0:	200013c6 	.word	0x200013c6

00002ba4 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    2ba4:	4801      	ldr	r0, [pc, #4]	; (2bac <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    2ba6:	8840      	ldrh	r0, [r0, #2]
    2ba8:	4770      	bx	lr
    2baa:	0000      	.short	0x0000
    2bac:	20000358 	.word	0x20000358

00002bb0 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    2bb0:	4905      	ldr	r1, [pc, #20]	; (2bc8 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    2bb2:	784a      	ldrb	r2, [r1, #1]
    2bb4:	4282      	cmp	r2, r0
    2bb6:	d903      	bls.n	2bc0 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    2bb8:	4408      	add	r0, r1
    2bba:	f890 013a 	ldrb.w	r0, [r0, #314]	; 0x13a
    2bbe:	b108      	cbz	r0, 2bc4 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    2bc0:	2000      	movs	r0, #0
    2bc2:	4770      	bx	lr
    2bc4:	2001      	movs	r0, #1
    2bc6:	4770      	bx	lr
    2bc8:	200013c6 	.word	0x200013c6

00002bcc <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>:
    2bcc:	4901      	ldr	r1, [pc, #4]	; (2bd4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x8>)
    2bce:	7048      	strb	r0, [r1, #1]
    2bd0:	4770      	bx	lr
    2bd2:	0000      	.short	0x0000
    2bd4:	20000358 	.word	0x20000358
    2bd8:	4602      	mov	r2, r0
    2bda:	4809      	ldr	r0, [pc, #36]	; (2c00 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x34>)
    2bdc:	b510      	push	{r4, lr}
    2bde:	7800      	ldrb	r0, [r0, #0]
    2be0:	460b      	mov	r3, r1
    2be2:	b158      	cbz	r0, 2bfc <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
    2be4:	4807      	ldr	r0, [pc, #28]	; (2c04 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
    2be6:	7841      	ldrb	r1, [r0, #1]
    2be8:	b141      	cbz	r1, 2bfc <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
    2bea:	b10b      	cbz	r3, 2bf0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x24>
    2bec:	1c80      	adds	r0, r0, #2
    2bee:	e001      	b.n	2bf4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x28>
    2bf0:	4804      	ldr	r0, [pc, #16]	; (2c04 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
    2bf2:	3082      	adds	r0, #130	; 0x82
    2bf4:	f004 ff8a 	bl	7b0c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    2bf8:	2001      	movs	r0, #1
    2bfa:	bd10      	pop	{r4, pc}
    2bfc:	2000      	movs	r0, #0
    2bfe:	bd10      	pop	{r4, pc}
    2c00:	20000358 	.word	0x20000358
    2c04:	200013c6 	.word	0x200013c6
    2c08:	4908      	ldr	r1, [pc, #32]	; (2c2c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x60>)
    2c0a:	b510      	push	{r4, lr}
    2c0c:	4603      	mov	r3, r0
    2c0e:	2000      	movs	r0, #0
    2c10:	784a      	ldrb	r2, [r1, #1]
    2c12:	e006      	b.n	2c22 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x56>
    2c14:	180c      	adds	r4, r1, r0
    2c16:	f894 4102 	ldrb.w	r4, [r4, #258]	; 0x102
    2c1a:	429c      	cmp	r4, r3
    2c1c:	d004      	beq.n	2c28 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x5c>
    2c1e:	1c40      	adds	r0, r0, #1
    2c20:	b2c0      	uxtb	r0, r0
    2c22:	4282      	cmp	r2, r0
    2c24:	d8f6      	bhi.n	2c14 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x48>
    2c26:	2008      	movs	r0, #8
    2c28:	bd10      	pop	{r4, pc}
    2c2a:	0000      	.short	0x0000
    2c2c:	200013c6 	.word	0x200013c6
    2c30:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c32:	4c1a      	ldr	r4, [pc, #104]	; (2c9c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xd0>)
    2c34:	4603      	mov	r3, r0
    2c36:	2000      	movs	r0, #0
    2c38:	7825      	ldrb	r5, [r4, #0]
    2c3a:	e02b      	b.n	2c94 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc8>
    2c3c:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
    2c40:	4422      	add	r2, r4
    2c42:	780f      	ldrb	r7, [r1, #0]
    2c44:	f892 c153 	ldrb.w	ip, [r2, #339]	; 0x153
    2c48:	f892 6152 	ldrb.w	r6, [r2, #338]	; 0x152
    2c4c:	ea87 070c 	eor.w	r7, r7, ip
    2c50:	405e      	eors	r6, r3
    2c52:	443e      	add	r6, r7
    2c54:	784f      	ldrb	r7, [r1, #1]
    2c56:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    2c5a:	ea87 070c 	eor.w	r7, r7, ip
    2c5e:	443e      	add	r6, r7
    2c60:	788f      	ldrb	r7, [r1, #2]
    2c62:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    2c66:	ea87 070c 	eor.w	r7, r7, ip
    2c6a:	443e      	add	r6, r7
    2c6c:	78cf      	ldrb	r7, [r1, #3]
    2c6e:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    2c72:	ea87 070c 	eor.w	r7, r7, ip
    2c76:	443e      	add	r6, r7
    2c78:	790f      	ldrb	r7, [r1, #4]
    2c7a:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    2c7e:	f892 2158 	ldrb.w	r2, [r2, #344]	; 0x158
    2c82:	ea87 070c 	eor.w	r7, r7, ip
    2c86:	443e      	add	r6, r7
    2c88:	794f      	ldrb	r7, [r1, #5]
    2c8a:	4057      	eors	r7, r2
    2c8c:	42f7      	cmn	r7, r6
    2c8e:	d004      	beq.n	2c9a <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xce>
    2c90:	1c40      	adds	r0, r0, #1
    2c92:	b2c0      	uxtb	r0, r0
    2c94:	4285      	cmp	r5, r0
    2c96:	d8d1      	bhi.n	2c3c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x70>
    2c98:	2008      	movs	r0, #8
    2c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c9c:	200013c6 	.word	0x200013c6

00002ca0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    2ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2ca4:	4604      	mov	r4, r0
    2ca6:	f100 0580 	add.w	r5, r0, #128	; 0x80
    2caa:	f04f 0901 	mov.w	r9, #1
    2cae:	b171      	cbz	r1, 2cce <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    2cb0:	f104 07a6 	add.w	r7, r4, #166	; 0xa6
    2cb4:	1e7e      	subs	r6, r7, #1
    2cb6:	2901      	cmp	r1, #1
    2cb8:	d029      	beq.n	2d0e <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6e>
    2cba:	2902      	cmp	r1, #2
    2cbc:	d04e      	beq.n	2d5c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xbc>
    2cbe:	2903      	cmp	r1, #3
    2cc0:	d123      	bne.n	2d0a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    2cc2:	4639      	mov	r1, r7
    2cc4:	4630      	mov	r0, r6
    2cc6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2cca:	f00b ba93 	b.w	e1f4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    2cce:	f44f 723e 	mov.w	r2, #760	; 0x2f8
    2cd2:	2100      	movs	r1, #0
    2cd4:	f00e f86d 	bl	10db2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2cd8:	f885 9025 	strb.w	r9, [r5, #37]	; 0x25
    2cdc:	4924      	ldr	r1, [pc, #144]	; (2d70 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd0>)
    2cde:	66e9      	str	r1, [r5, #108]	; 0x6c
    2ce0:	4620      	mov	r0, r4
    2ce2:	2107      	movs	r1, #7
    2ce4:	6729      	str	r1, [r5, #112]	; 0x70
    2ce6:	f810 1fec 	ldrb.w	r1, [r0, #236]!
    2cea:	f021 0104 	bic.w	r1, r1, #4
    2cee:	7001      	strb	r1, [r0, #0]
    2cf0:	20fe      	movs	r0, #254	; 0xfe
    2cf2:	f885 00a6 	strb.w	r0, [r5, #166]	; 0xa6
    2cf6:	207f      	movs	r0, #127	; 0x7f
    2cf8:	7668      	strb	r0, [r5, #25]
    2cfa:	481e      	ldr	r0, [pc, #120]	; (2d74 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd4>)
    2cfc:	60a8      	str	r0, [r5, #8]
    2cfe:	2000      	movs	r0, #0
    2d00:	e9c5 0000 	strd	r0, r0, [r5]
    2d04:	2020      	movs	r0, #32
    2d06:	f884 02a4 	strb.w	r0, [r4, #676]	; 0x2a4
    2d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2d0e:	f04f 0800 	mov.w	r8, #0
    2d12:	f8a4 8236 	strh.w	r8, [r4, #566]	; 0x236
    2d16:	f884 822b 	strb.w	r8, [r4, #555]	; 0x22b
    2d1a:	6921      	ldr	r1, [r4, #16]
    2d1c:	4816      	ldr	r0, [pc, #88]	; (2d78 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd8>)
    2d1e:	460a      	mov	r2, r1
    2d20:	4408      	add	r0, r1
    2d22:	fbb0 f0f1 	udiv	r0, r0, r1
    2d26:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    2d2a:	f640 30b8 	movw	r0, #3000	; 0xbb8
    2d2e:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
    2d32:	8b63      	ldrh	r3, [r4, #26]
    2d34:	4628      	mov	r0, r5
    2d36:	f000 f821 	bl	2d7c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xdc>
    2d3a:	4639      	mov	r1, r7
    2d3c:	4630      	mov	r0, r6
    2d3e:	f00b fa59 	bl	e1f4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    2d42:	f00d ff3e 	bl	10bc2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    2d46:	b118      	cbz	r0, 2d50 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb0>
    2d48:	6960      	ldr	r0, [r4, #20]
    2d4a:	f000 fbbd 	bl	34c8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    2d4e:	b110      	cbz	r0, 2d56 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb6>
    2d50:	f884 821a 	strb.w	r8, [r4, #538]	; 0x21a
    2d54:	e7d9      	b.n	2d0a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    2d56:	f884 921a 	strb.w	r9, [r4, #538]	; 0x21a
    2d5a:	e7d6      	b.n	2d0a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    2d5c:	6901      	ldr	r1, [r0, #16]
    2d5e:	f8b4 32da 	ldrh.w	r3, [r4, #730]	; 0x2da
    2d62:	f8d4 22d4 	ldr.w	r2, [r4, #724]	; 0x2d4
    2d66:	4628      	mov	r0, r5
    2d68:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2d6c:	f000 b806 	b.w	2d7c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xdc>
    2d70:	c404492f 	.word	0xc404492f
    2d74:	fffce000 	.word	0xfffce000
    2d78:	01c9c37f 	.word	0x01c9c37f
    2d7c:	b510      	push	{r4, lr}
    2d7e:	2400      	movs	r4, #0
    2d80:	f8a0 404c 	strh.w	r4, [r0, #76]	; 0x4c
    2d84:	f830 4f50 	ldrh.w	r4, [r0, #80]!
    2d88:	434c      	muls	r4, r1
    2d8a:	fbb4 f4f2 	udiv	r4, r4, r2
    2d8e:	f820 4910 	strh.w	r4, [r0], #-16
    2d92:	f240 2471 	movw	r4, #625	; 0x271
    2d96:	4363      	muls	r3, r4
    2d98:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    2d9c:	1e5b      	subs	r3, r3, #1
    2d9e:	fbb3 f3f2 	udiv	r3, r3, r2
    2da2:	81c3      	strh	r3, [r0, #14]
    2da4:	4b09      	ldr	r3, [pc, #36]	; (2dcc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x12c>)
    2da6:	fbb3 f3f2 	udiv	r3, r3, r2
    2daa:	1c5b      	adds	r3, r3, #1
    2dac:	8283      	strh	r3, [r0, #20]
    2dae:	8903      	ldrh	r3, [r0, #8]
    2db0:	4363      	muls	r3, r4
    2db2:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    2db6:	1e5b      	subs	r3, r3, #1
    2db8:	fbb3 f3f2 	udiv	r3, r3, r2
    2dbc:	6043      	str	r3, [r0, #4]
    2dbe:	6803      	ldr	r3, [r0, #0]
    2dc0:	434b      	muls	r3, r1
    2dc2:	fbb3 f1f2 	udiv	r1, r3, r2
    2dc6:	6001      	str	r1, [r0, #0]
    2dc8:	bd10      	pop	{r4, pc}
    2dca:	0000      	.short	0x0000
    2dcc:	02625a00 	.word	0x02625a00

00002dd0 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>:
    2dd0:	4902      	ldr	r1, [pc, #8]	; (2ddc <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ+0xc>)
    2dd2:	f991 1000 	ldrsb.w	r1, [r1]
    2dd6:	f00b b9be 	b.w	e156 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    2dda:	0000      	.short	0x0000
    2ddc:	20000370 	.word	0x20000370

00002de0 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>:
    2de0:	b508      	push	{r3, lr}
    2de2:	207f      	movs	r0, #127	; 0x7f
    2de4:	f88d 0000 	strb.w	r0, [sp]
    2de8:	4668      	mov	r0, sp
    2dea:	f005 fbc3 	bl	8574 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    2dee:	b140      	cbz	r0, 2e02 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x22>
    2df0:	4805      	ldr	r0, [pc, #20]	; (2e08 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x28>)
    2df2:	7840      	ldrb	r0, [r0, #1]
    2df4:	4240      	negs	r0, r0
    2df6:	b241      	sxtb	r1, r0
    2df8:	f99d 0000 	ldrsb.w	r0, [sp]
    2dfc:	f00b f9ab 	bl	e156 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    2e00:	bd08      	pop	{r3, pc}
    2e02:	f99d 0000 	ldrsb.w	r0, [sp]
    2e06:	bd08      	pop	{r3, pc}
    2e08:	20000370 	.word	0x20000370

00002e0c <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>:
    2e0c:	4a01      	ldr	r2, [pc, #4]	; (2e14 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8>)
    2e0e:	7010      	strb	r0, [r2, #0]
    2e10:	7051      	strb	r1, [r2, #1]
    2e12:	4770      	bx	lr
    2e14:	20000370 	.word	0x20000370
    2e18:	b570      	push	{r4, r5, r6, lr}
    2e1a:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
    2e1e:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    2e22:	2401      	movs	r4, #1
    2e24:	fb03 2101 	mla	r1, r3, r1, r2
    2e28:	2225      	movs	r2, #37	; 0x25
    2e2a:	fbb1 f3f2 	udiv	r3, r1, r2
    2e2e:	fb02 1113 	mls	r1, r2, r3, r1
    2e32:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    2e36:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
    2e3a:	f001 0307 	and.w	r3, r1, #7
    2e3e:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
    2e42:	fa04 f303 	lsl.w	r3, r4, r3
    2e46:	421a      	tst	r2, r3
    2e48:	d004      	beq.n	2e54 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x48>
    2e4a:	bf00      	nop
    2e4c:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33
    2e50:	2000      	movs	r0, #0
    2e52:	bd70      	pop	{r4, r5, r6, pc}
    2e54:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    2e58:	fbb1 f3f2 	udiv	r3, r1, r2
    2e5c:	fb02 1113 	mls	r1, r2, r3, r1
    2e60:	1c49      	adds	r1, r1, #1
    2e62:	b2c9      	uxtb	r1, r1
    2e64:	2300      	movs	r3, #0
    2e66:	18c5      	adds	r5, r0, r3
    2e68:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
    2e6c:	428a      	cmp	r2, r1
    2e6e:	d312      	bcc.n	2e96 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8a>
    2e70:	f895 5026 	ldrb.w	r5, [r5, #38]	; 0x26
    2e74:	2200      	movs	r2, #0
    2e76:	bf00      	nop
    2e78:	fa04 f602 	lsl.w	r6, r4, r2
    2e7c:	4235      	tst	r5, r6
    2e7e:	d001      	beq.n	2e84 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x78>
    2e80:	1e49      	subs	r1, r1, #1
    2e82:	b2c9      	uxtb	r1, r1
    2e84:	b121      	cbz	r1, 2e90 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x84>
    2e86:	1c52      	adds	r2, r2, #1
    2e88:	b2d2      	uxtb	r2, r2
    2e8a:	2a08      	cmp	r2, #8
    2e8c:	d3f4      	bcc.n	2e78 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x6c>
    2e8e:	e004      	b.n	2e9a <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8e>
    2e90:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    2e94:	e7da      	b.n	2e4c <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x40>
    2e96:	1a89      	subs	r1, r1, r2
    2e98:	b2c9      	uxtb	r1, r1
    2e9a:	1c5b      	adds	r3, r3, #1
    2e9c:	b2db      	uxtb	r3, r3
    2e9e:	2b05      	cmp	r3, #5
    2ea0:	d3e1      	bcc.n	2e66 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x5a>
    2ea2:	201f      	movs	r0, #31
    2ea4:	bd70      	pop	{r4, r5, r6, pc}
    2ea6:	0000      	movs	r0, r0
    2ea8:	b570      	push	{r4, r5, r6, lr}
    2eaa:	1c49      	adds	r1, r1, #1
    2eac:	2300      	movs	r3, #0
    2eae:	b2c9      	uxtb	r1, r1
    2eb0:	2401      	movs	r4, #1
    2eb2:	18c5      	adds	r5, r0, r3
    2eb4:	79aa      	ldrb	r2, [r5, #6]
    2eb6:	428a      	cmp	r2, r1
    2eb8:	d312      	bcc.n	2ee0 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xd4>
    2eba:	f895 5001 	ldrb.w	r5, [r5, #1]
    2ebe:	2200      	movs	r2, #0
    2ec0:	fa04 f602 	lsl.w	r6, r4, r2
    2ec4:	4235      	tst	r5, r6
    2ec6:	d001      	beq.n	2ecc <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xc0>
    2ec8:	1e49      	subs	r1, r1, #1
    2eca:	b2c9      	uxtb	r1, r1
    2ecc:	b121      	cbz	r1, 2ed8 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xcc>
    2ece:	1c52      	adds	r2, r2, #1
    2ed0:	b2d2      	uxtb	r2, r2
    2ed2:	2a08      	cmp	r2, #8
    2ed4:	d3f4      	bcc.n	2ec0 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xb4>
    2ed6:	e005      	b.n	2ee4 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xd8>
    2ed8:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    2edc:	b2c0      	uxtb	r0, r0
    2ede:	bd70      	pop	{r4, r5, r6, pc}
    2ee0:	1a89      	subs	r1, r1, r2
    2ee2:	b2c9      	uxtb	r1, r1
    2ee4:	1c5b      	adds	r3, r3, #1
    2ee6:	b2db      	uxtb	r3, r3
    2ee8:	2b05      	cmp	r3, #5
    2eea:	d3e2      	bcc.n	2eb2 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xa6>
    2eec:	219d      	movs	r1, #157	; 0x9d
    2eee:	2046      	movs	r0, #70	; 0x46
    2ef0:	f7fe f938 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00002ef4 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>:
    2ef4:	7841      	ldrb	r1, [r0, #1]
    2ef6:	b141      	cbz	r1, 2f0a <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    2ef8:	78c0      	ldrb	r0, [r0, #3]
    2efa:	282b      	cmp	r0, #43	; 0x2b
    2efc:	d203      	bcs.n	2f06 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x12>
    2efe:	4a04      	ldr	r2, [pc, #16]	; (2f10 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x1c>)
    2f00:	5c10      	ldrb	r0, [r2, r0]
    2f02:	4288      	cmp	r0, r1
    2f04:	d101      	bne.n	2f0a <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    2f06:	2001      	movs	r0, #1
    2f08:	4770      	bx	lr
    2f0a:	2000      	movs	r0, #0
    2f0c:	4770      	bx	lr
    2f0e:	0000      	.short	0x0000
    2f10:	00010efc 	.word	0x00010efc

00002f14 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>:
    2f14:	b510      	push	{r4, lr}
    2f16:	2201      	movs	r2, #1
    2f18:	70c1      	strb	r1, [r0, #3]
    2f1a:	292b      	cmp	r1, #43	; 0x2b
    2f1c:	d202      	bcs.n	2f24 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x10>
    2f1e:	4a06      	ldr	r2, [pc, #24]	; (2f38 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x24>)
    2f20:	5c52      	ldrb	r2, [r2, r1]
    2f22:	e006      	b.n	2f32 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    2f24:	29ff      	cmp	r1, #255	; 0xff
    2f26:	d004      	beq.n	2f32 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    2f28:	f240 4174 	movw	r1, #1140	; 0x474
    2f2c:	202a      	movs	r0, #42	; 0x2a
    2f2e:	f7fe f919 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2f32:	7042      	strb	r2, [r0, #1]
    2f34:	bd10      	pop	{r4, pc}
    2f36:	0000      	.short	0x0000
    2f38:	00010efc 	.word	0x00010efc

00002f3c <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    2f3c:	4904      	ldr	r1, [pc, #16]	; (2f50 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    2f3e:	7c89      	ldrb	r1, [r1, #18]
    2f40:	0749      	lsls	r1, r1, #29
    2f42:	d400      	bmi.n	2f46 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    2f44:	b108      	cbz	r0, 2f4a <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    2f46:	2000      	movs	r0, #0
    2f48:	4770      	bx	lr
    2f4a:	2001      	movs	r0, #1
    2f4c:	4770      	bx	lr
    2f4e:	0000      	.short	0x0000
    2f50:	200012c8 	.word	0x200012c8

00002f54 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    2f54:	4803      	ldr	r0, [pc, #12]	; (2f64 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    2f56:	7c80      	ldrb	r0, [r0, #18]
    2f58:	0780      	lsls	r0, r0, #30
    2f5a:	d401      	bmi.n	2f60 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    2f5c:	2001      	movs	r0, #1
    2f5e:	4770      	bx	lr
    2f60:	2000      	movs	r0, #0
    2f62:	4770      	bx	lr
    2f64:	200012c8 	.word	0x200012c8

00002f68 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    2f68:	4803      	ldr	r0, [pc, #12]	; (2f78 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    2f6a:	7c80      	ldrb	r0, [r0, #18]
    2f6c:	07c0      	lsls	r0, r0, #31
    2f6e:	d001      	beq.n	2f74 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    2f70:	2000      	movs	r0, #0
    2f72:	4770      	bx	lr
    2f74:	2001      	movs	r0, #1
    2f76:	4770      	bx	lr
    2f78:	200012c8 	.word	0x200012c8
    2f7c:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    2f80:	4688      	mov	r8, r1
    2f82:	4699      	mov	r9, r3
    2f84:	4615      	mov	r5, r2
    2f86:	4604      	mov	r4, r0
    2f88:	4669      	mov	r1, sp
    2f8a:	f00a ff4e 	bl	de2a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    2f8e:	bbe0      	cbnz	r0, 300a <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa2>
    2f90:	9e01      	ldr	r6, [sp, #4]
    2f92:	2700      	movs	r7, #0
    2f94:	3680      	adds	r6, #128	; 0x80
    2f96:	b17d      	cbz	r5, 2fb8 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x50>
    2f98:	4620      	mov	r0, r4
    2f9a:	f7fe fdbb 	bl	1b14 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    2f9e:	0004      	movs	r4, r0
    2fa0:	d00e      	beq.n	2fc0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x58>
    2fa2:	4629      	mov	r1, r5
    2fa4:	f00a fb51 	bl	d64a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    2fa8:	b118      	cbz	r0, 2fb2 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4a>
    2faa:	491b      	ldr	r1, [pc, #108]	; (3018 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xb0>)
    2fac:	8849      	ldrh	r1, [r1, #2]
    2fae:	42a9      	cmp	r1, r5
    2fb0:	d208      	bcs.n	2fc4 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x5c>
    2fb2:	2000      	movs	r0, #0
    2fb4:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    2fb8:	2001      	movs	r0, #1
    2fba:	f886 0024 	strb.w	r0, [r6, #36]	; 0x24
    2fbe:	e024      	b.n	300a <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa2>
    2fc0:	2167      	movs	r1, #103	; 0x67
    2fc2:	e025      	b.n	3010 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa8>
    2fc4:	4601      	mov	r1, r0
    2fc6:	aa02      	add	r2, sp, #8
    2fc8:	4620      	mov	r0, r4
    2fca:	f00a fb37 	bl	d63c <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    2fce:	9802      	ldr	r0, [sp, #8]
    2fd0:	8007      	strh	r7, [r0, #0]
    2fd2:	7087      	strb	r7, [r0, #2]
    2fd4:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
    2fd8:	b109      	cbz	r1, 2fde <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x76>
    2fda:	f04f 0802 	mov.w	r8, #2
    2fde:	4641      	mov	r1, r8
    2fe0:	f00b fa5b 	bl	e49a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    2fe4:	9802      	ldr	r0, [sp, #8]
    2fe6:	462a      	mov	r2, r5
    2fe8:	4649      	mov	r1, r9
    2fea:	1cc0      	adds	r0, r0, #3
    2fec:	f00d fe67 	bl	10cbe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2ff0:	4620      	mov	r0, r4
    2ff2:	4629      	mov	r1, r5
    2ff4:	f00a fae0 	bl	d5b8 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    2ff8:	b148      	cbz	r0, 300e <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa6>
    2ffa:	4668      	mov	r0, sp
    2ffc:	f00b faa8 	bl	e550 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    3000:	9801      	ldr	r0, [sp, #4]
    3002:	f8a0 7222 	strh.w	r7, [r0, #546]	; 0x222
    3006:	f886 7024 	strb.w	r7, [r6, #36]	; 0x24
    300a:	2001      	movs	r0, #1
    300c:	e7d2      	b.n	2fb4 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4c>
    300e:	217c      	movs	r1, #124	; 0x7c
    3010:	202b      	movs	r0, #43	; 0x2b
    3012:	f7fe f8a7 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3016:	0000      	.short	0x0000
    3018:	200012c8 	.word	0x200012c8

0000301c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    301c:	4809      	ldr	r0, [pc, #36]	; (3044 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    301e:	b082      	sub	sp, #8
    3020:	7a00      	ldrb	r0, [r0, #8]
    3022:	f88d 0000 	strb.w	r0, [sp]
    3026:	9800      	ldr	r0, [sp, #0]
    3028:	9000      	str	r0, [sp, #0]
    302a:	f89d 0000 	ldrb.w	r0, [sp]
    302e:	2800      	cmp	r0, #0
    3030:	d105      	bne.n	303e <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x22>
    3032:	2202      	movs	r2, #2
    3034:	4904      	ldr	r1, [pc, #16]	; (3048 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x2c>)
    3036:	4803      	ldr	r0, [pc, #12]	; (3044 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    3038:	b002      	add	sp, #8
    303a:	f00b bab5 	b.w	e5a8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    303e:	b002      	add	sp, #8
    3040:	4770      	bx	lr
    3042:	0000      	.short	0x0000
    3044:	200012e0 	.word	0x200012e0
    3048:	0000e5ef 	.word	0x0000e5ef

0000304c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    304c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3050:	f8df 9178 	ldr.w	r9, [pc, #376]	; 31cc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x180>
    3054:	4f5e      	ldr	r7, [pc, #376]	; (31d0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x184>)
    3056:	4683      	mov	fp, r0
    3058:	f04f 0a01 	mov.w	sl, #1
    305c:	2600      	movs	r6, #0
    305e:	6878      	ldr	r0, [r7, #4]
    3060:	4635      	mov	r5, r6
    3062:	7a00      	ldrb	r0, [r0, #8]
    3064:	f88d 0000 	strb.w	r0, [sp]
    3068:	9800      	ldr	r0, [sp, #0]
    306a:	9000      	str	r0, [sp, #0]
    306c:	f89d 1000 	ldrb.w	r1, [sp]
    3070:	2910      	cmp	r1, #16
    3072:	d106      	bne.n	3082 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    3074:	f899 1013 	ldrb.w	r1, [r9, #19]
    3078:	b119      	cbz	r1, 3082 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    307a:	f8b9 0014 	ldrh.w	r0, [r9, #20]
    307e:	2800      	cmp	r0, #0
    3080:	d073      	beq.n	316a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    3082:	f88d 6000 	strb.w	r6, [sp]
    3086:	4668      	mov	r0, sp
    3088:	f000 f906 	bl	3298 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb4>
    308c:	f89d 1000 	ldrb.w	r1, [sp]
    3090:	2900      	cmp	r1, #0
    3092:	d1f8      	bne.n	3086 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3a>
    3094:	2800      	cmp	r0, #0
    3096:	d068      	beq.n	316a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    3098:	4604      	mov	r4, r0
    309a:	7a00      	ldrb	r0, [r0, #8]
    309c:	f88d 0000 	strb.w	r0, [sp]
    30a0:	9800      	ldr	r0, [sp, #0]
    30a2:	9000      	str	r0, [sp, #0]
    30a4:	f89d 8000 	ldrb.w	r8, [sp]
    30a8:	f104 0008 	add.w	r0, r4, #8
    30ac:	2105      	movs	r1, #5
    30ae:	9000      	str	r0, [sp, #0]
    30b0:	7001      	strb	r1, [r0, #0]
    30b2:	4640      	mov	r0, r8
    30b4:	f1b8 0f08 	cmp.w	r8, #8
    30b8:	d042      	beq.n	3140 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf4>
    30ba:	dc07      	bgt.n	30cc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x80>
    30bc:	2802      	cmp	r0, #2
    30be:	d00d      	beq.n	30dc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    30c0:	2803      	cmp	r0, #3
    30c2:	d017      	beq.n	30f4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>
    30c4:	f1b8 0f04 	cmp.w	r8, #4
    30c8:	d105      	bne.n	30d6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8a>
    30ca:	e01d      	b.n	3108 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xbc>
    30cc:	280f      	cmp	r0, #15
    30ce:	d052      	beq.n	3176 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12a>
    30d0:	f1b8 0f10 	cmp.w	r8, #16
    30d4:	d059      	beq.n	318a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13e>
    30d6:	f240 214a 	movw	r1, #586	; 0x24a
    30da:	e065      	b.n	31a8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    30dc:	6862      	ldr	r2, [r4, #4]
    30de:	b132      	cbz	r2, 30ee <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa2>
    30e0:	4659      	mov	r1, fp
    30e2:	4620      	mov	r0, r4
    30e4:	4790      	blx	r2
    30e6:	2004      	movs	r0, #4
    30e8:	f360 0507 	bfi	r5, r0, #0, #8
    30ec:	e010      	b.n	3110 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc4>
    30ee:	f240 11c3 	movw	r1, #451	; 0x1c3
    30f2:	e059      	b.n	31a8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    30f4:	6862      	ldr	r2, [r4, #4]
    30f6:	b122      	cbz	r2, 3102 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb6>
    30f8:	4659      	mov	r1, fp
    30fa:	4620      	mov	r0, r4
    30fc:	4790      	blx	r2
    30fe:	4605      	mov	r5, r0
    3100:	e006      	b.n	3110 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc4>
    3102:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
    3106:	e04f      	b.n	31a8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    3108:	6861      	ldr	r1, [r4, #4]
    310a:	b1b1      	cbz	r1, 313a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xee>
    310c:	4620      	mov	r0, r4
    310e:	4788      	blx	r1
    3110:	f3c5 2007 	ubfx	r0, r5, #8, #8
    3114:	2801      	cmp	r0, #1
    3116:	d04a      	beq.n	31ae <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x162>
    3118:	f3ef 8110 	mrs	r1, PRIMASK
    311c:	b672      	cpsid	i
    311e:	7a20      	ldrb	r0, [r4, #8]
    3120:	f88d 0000 	strb.w	r0, [sp]
    3124:	9800      	ldr	r0, [sp, #0]
    3126:	9000      	str	r0, [sp, #0]
    3128:	f89d 0000 	ldrb.w	r0, [sp]
    312c:	2805      	cmp	r0, #5
    312e:	d042      	beq.n	31b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16a>
    3130:	b3b0      	cbz	r0, 31a0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x154>
    3132:	f366 0507 	bfi	r5, r6, #0, #8
    3136:	b3a1      	cbz	r1, 31a2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x156>
    3138:	e041      	b.n	31be <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x172>
    313a:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
    313e:	e033      	b.n	31a8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    3140:	6860      	ldr	r0, [r4, #4]
    3142:	465d      	mov	r5, fp
    3144:	b198      	cbz	r0, 316e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x122>
    3146:	8804      	ldrh	r4, [r0, #0]
    3148:	4620      	mov	r0, r4
    314a:	f7fe fce3 	bl	1b14 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    314e:	b180      	cbz	r0, 3172 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    3150:	706e      	strb	r6, [r5, #1]
    3152:	210d      	movs	r1, #13
    3154:	7029      	strb	r1, [r5, #0]
    3156:	80ec      	strh	r4, [r5, #6]
    3158:	f8a5 a008 	strh.w	sl, [r5, #8]
    315c:	f885 a004 	strb.w	sl, [r5, #4]
    3160:	4631      	mov	r1, r6
    3162:	f00a fb09 	bl	d778 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    3166:	2004      	movs	r0, #4
    3168:	613e      	str	r6, [r7, #16]
    316a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    316e:	21e5      	movs	r1, #229	; 0xe5
    3170:	e01a      	b.n	31a8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    3172:	21c5      	movs	r1, #197	; 0xc5
    3174:	e018      	b.n	31a8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    3176:	f88b 6001 	strb.w	r6, [fp, #1]
    317a:	2116      	movs	r1, #22
    317c:	f88b 1000 	strb.w	r1, [fp]
    3180:	f8d4 1009 	ldr.w	r1, [r4, #9]
    3184:	f8cb 1004 	str.w	r1, [fp, #4]
    3188:	e7ad      	b.n	30e6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    318a:	4812      	ldr	r0, [pc, #72]	; (31d4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>)
    318c:	6802      	ldr	r2, [r0, #0]
    318e:	b122      	cbz	r2, 319a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14e>
    3190:	6860      	ldr	r0, [r4, #4]
    3192:	b138      	cbz	r0, 31a4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x158>
    3194:	8800      	ldrh	r0, [r0, #0]
    3196:	4659      	mov	r1, fp
    3198:	4790      	blx	r2
    319a:	2002      	movs	r0, #2
    319c:	613e      	str	r6, [r7, #16]
    319e:	e7e4      	b.n	316a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    31a0:	e009      	b.n	31b6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16a>
    31a2:	e00b      	b.n	31bc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x170>
    31a4:	f44f 7110 	mov.w	r1, #576	; 0x240
    31a8:	2010      	movs	r0, #16
    31aa:	f7fd ffdb 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    31ae:	9800      	ldr	r0, [sp, #0]
    31b0:	4641      	mov	r1, r8
    31b2:	7001      	strb	r1, [r0, #0]
    31b4:	e003      	b.n	31be <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x172>
    31b6:	7226      	strb	r6, [r4, #8]
    31b8:	613e      	str	r6, [r7, #16]
    31ba:	e7bc      	b.n	3136 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    31bc:	b662      	cpsie	i
    31be:	f015 0fff 	tst.w	r5, #255	; 0xff
    31c2:	f43f af4c 	beq.w	305e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12>
    31c6:	b2e8      	uxtb	r0, r5
    31c8:	e7cf      	b.n	316a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    31ca:	0000      	.short	0x0000
    31cc:	200012c8 	.word	0x200012c8
    31d0:	200012f4 	.word	0x200012f4
    31d4:	200000c8 	.word	0x200000c8

000031d8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    31d8:	4901      	ldr	r1, [pc, #4]	; (31e0 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    31da:	7008      	strb	r0, [r1, #0]
    31dc:	f000 b8be 	b.w	335c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x178>
    31e0:	20000372 	.word	0x20000372

000031e4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    31e4:	4902      	ldr	r1, [pc, #8]	; (31f0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc>)
    31e6:	4801      	ldr	r0, [pc, #4]	; (31ec <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8>)
    31e8:	6008      	str	r0, [r1, #0]
    31ea:	4770      	bx	lr
    31ec:	000031f5 	.word	0x000031f5
    31f0:	200000c8 	.word	0x200000c8
    31f4:	b538      	push	{r3, r4, r5, lr}
    31f6:	000d      	movs	r5, r1
    31f8:	d014      	beq.n	3224 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x40>
    31fa:	80a8      	strh	r0, [r5, #4]
    31fc:	2100      	movs	r1, #0
    31fe:	7269      	strb	r1, [r5, #9]
    3200:	f7fe fc72 	bl	1ae8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    3204:	4604      	mov	r4, r0
    3206:	f00a f9fb 	bl	d600 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    320a:	b170      	cbz	r0, 322a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x46>
    320c:	4601      	mov	r1, r0
    320e:	466a      	mov	r2, sp
    3210:	4620      	mov	r0, r4
    3212:	f00a fa13 	bl	d63c <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    3216:	80e8      	strh	r0, [r5, #6]
    3218:	b150      	cbz	r0, 3230 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x4c>
    321a:	28fb      	cmp	r0, #251	; 0xfb
    321c:	d90b      	bls.n	3236 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x52>
    321e:	f240 1123 	movw	r1, #291	; 0x123
    3222:	e033      	b.n	328c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    3224:	f240 1113 	movw	r1, #275	; 0x113
    3228:	e030      	b.n	328c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    322a:	f44f 718e 	mov.w	r1, #284	; 0x11c
    322e:	e02d      	b.n	328c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    3230:	f240 1121 	movw	r1, #289	; 0x121
    3234:	e02a      	b.n	328c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    3236:	9800      	ldr	r0, [sp, #0]
    3238:	f00b f8db 	bl	e3f2 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>
    323c:	2801      	cmp	r0, #1
    323e:	d004      	beq.n	324a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x66>
    3240:	2802      	cmp	r0, #2
    3242:	d002      	beq.n	324a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x66>
    3244:	f240 1133 	movw	r1, #307	; 0x133
    3248:	e020      	b.n	328c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    324a:	7228      	strb	r0, [r5, #8]
    324c:	6828      	ldr	r0, [r5, #0]
    324e:	b1a8      	cbz	r0, 327c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x98>
    3250:	9900      	ldr	r1, [sp, #0]
    3252:	88ea      	ldrh	r2, [r5, #6]
    3254:	1cc9      	adds	r1, r1, #3
    3256:	f00d fd32 	bl	10cbe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    325a:	4620      	mov	r0, r4
    325c:	f00a f998 	bl	d590 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    3260:	b178      	cbz	r0, 3282 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x9e>
    3262:	4620      	mov	r0, r4
    3264:	2100      	movs	r1, #0
    3266:	f00a fa87 	bl	d778 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    326a:	b168      	cbz	r0, 3288 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa4>
    326c:	4809      	ldr	r0, [pc, #36]	; (3294 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb0>)
    326e:	7cc1      	ldrb	r1, [r0, #19]
    3270:	2900      	cmp	r1, #0
    3272:	d002      	beq.n	327a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x96>
    3274:	8a81      	ldrh	r1, [r0, #20]
    3276:	1e49      	subs	r1, r1, #1
    3278:	8281      	strh	r1, [r0, #20]
    327a:	bd38      	pop	{r3, r4, r5, pc}
    327c:	f44f 719d 	mov.w	r1, #314	; 0x13a
    3280:	e004      	b.n	328c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    3282:	f240 113f 	movw	r1, #319	; 0x13f
    3286:	e001      	b.n	328c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    3288:	f44f 71a2 	mov.w	r1, #324	; 0x144
    328c:	2010      	movs	r0, #16
    328e:	f7fd ff69 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3292:	0000      	.short	0x0000
    3294:	200012c8 	.word	0x200012c8
    3298:	b538      	push	{r3, r4, r5, lr}
    329a:	4603      	mov	r3, r0
    329c:	4917      	ldr	r1, [pc, #92]	; (32fc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x118>)
    329e:	2000      	movs	r0, #0
    32a0:	7018      	strb	r0, [r3, #0]
    32a2:	6908      	ldr	r0, [r1, #16]
    32a4:	2401      	movs	r4, #1
    32a6:	b140      	cbz	r0, 32ba <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xd6>
    32a8:	7a02      	ldrb	r2, [r0, #8]
    32aa:	f88d 2000 	strb.w	r2, [sp]
    32ae:	9a00      	ldr	r2, [sp, #0]
    32b0:	9200      	str	r2, [sp, #0]
    32b2:	f89d 5000 	ldrb.w	r5, [sp]
    32b6:	2d00      	cmp	r5, #0
    32b8:	d111      	bne.n	32de <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfa>
    32ba:	6848      	ldr	r0, [r1, #4]
    32bc:	7a02      	ldrb	r2, [r0, #8]
    32be:	f88d 2000 	strb.w	r2, [sp]
    32c2:	9a00      	ldr	r2, [sp, #0]
    32c4:	9200      	str	r2, [sp, #0]
    32c6:	f89d 5000 	ldrb.w	r5, [sp]
    32ca:	2d01      	cmp	r5, #1
    32cc:	d006      	beq.n	32dc <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf8>
    32ce:	f3ef 8210 	mrs	r2, PRIMASK
    32d2:	b672      	cpsid	i
    32d4:	6805      	ldr	r5, [r0, #0]
    32d6:	604d      	str	r5, [r1, #4]
    32d8:	b112      	cbz	r2, 32e0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfc>
    32da:	e002      	b.n	32e2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfe>
    32dc:	2000      	movs	r0, #0
    32de:	bd38      	pop	{r3, r4, r5, pc}
    32e0:	b662      	cpsie	i
    32e2:	7a02      	ldrb	r2, [r0, #8]
    32e4:	f88d 2000 	strb.w	r2, [sp]
    32e8:	9a00      	ldr	r2, [sp, #0]
    32ea:	9200      	str	r2, [sp, #0]
    32ec:	f89d 5000 	ldrb.w	r5, [sp]
    32f0:	b10d      	cbz	r5, 32f6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x112>
    32f2:	6108      	str	r0, [r1, #16]
    32f4:	bd38      	pop	{r3, r4, r5, pc}
    32f6:	701c      	strb	r4, [r3, #0]
    32f8:	bd38      	pop	{r3, r4, r5, pc}
    32fa:	0000      	.short	0x0000
    32fc:	200012f4 	.word	0x200012f4
    3300:	b538      	push	{r3, r4, r5, lr}
    3302:	b1d0      	cbz	r0, 333a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x156>
    3304:	6041      	str	r1, [r0, #4]
    3306:	f100 0108 	add.w	r1, r0, #8
    330a:	700a      	strb	r2, [r1, #0]
    330c:	f3ef 8310 	mrs	r3, PRIMASK
    3310:	b672      	cpsid	i
    3312:	4c10      	ldr	r4, [pc, #64]	; (3354 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x170>)
    3314:	6004      	str	r4, [r0, #0]
    3316:	1f21      	subs	r1, r4, #4
    3318:	684a      	ldr	r2, [r1, #4]
    331a:	b14a      	cbz	r2, 3330 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14c>
    331c:	7a12      	ldrb	r2, [r2, #8]
    331e:	f88d 2000 	strb.w	r2, [sp]
    3322:	9a00      	ldr	r2, [sp, #0]
    3324:	9200      	str	r2, [sp, #0]
    3326:	f89d 5000 	ldrb.w	r5, [sp]
    332a:	2d01      	cmp	r5, #1
    332c:	d100      	bne.n	3330 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14c>
    332e:	600c      	str	r4, [r1, #0]
    3330:	680a      	ldr	r2, [r1, #0]
    3332:	6010      	str	r0, [r2, #0]
    3334:	6008      	str	r0, [r1, #0]
    3336:	b12b      	cbz	r3, 3344 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x160>
    3338:	e005      	b.n	3346 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x162>
    333a:	f240 2175 	movw	r1, #629	; 0x275
    333e:	2010      	movs	r0, #16
    3340:	f7fd ff10 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3344:	b662      	cpsie	i
    3346:	4804      	ldr	r0, [pc, #16]	; (3358 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x174>)
    3348:	7800      	ldrb	r0, [r0, #0]
    334a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    334e:	f009 ba75 	b.w	c83c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    3352:	0000      	.short	0x0000
    3354:	200012f8 	.word	0x200012f8
    3358:	20000372 	.word	0x20000372
    335c:	b510      	push	{r4, lr}
    335e:	2214      	movs	r2, #20
    3360:	2100      	movs	r1, #0
    3362:	4808      	ldr	r0, [pc, #32]	; (3384 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a0>)
    3364:	f00d fd25 	bl	10db2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3368:	4806      	ldr	r0, [pc, #24]	; (3384 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a0>)
    336a:	2212      	movs	r2, #18
    336c:	2100      	movs	r1, #0
    336e:	3814      	subs	r0, #20
    3370:	f00d fd1f 	bl	10db2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3374:	4803      	ldr	r0, [pc, #12]	; (3384 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a0>)
    3376:	2101      	movs	r1, #1
    3378:	7301      	strb	r1, [r0, #12]
    337a:	1d01      	adds	r1, r0, #4
    337c:	6041      	str	r1, [r0, #4]
    337e:	6001      	str	r1, [r0, #0]
    3380:	bd10      	pop	{r4, pc}
    3382:	0000      	.short	0x0000
    3384:	200012f4 	.word	0x200012f4

00003388 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    3388:	b4f0      	push	{r4, r5, r6, r7}
    338a:	8150      	strh	r0, [r2, #10]
    338c:	890c      	ldrh	r4, [r1, #8]
    338e:	8194      	strh	r4, [r2, #12]
    3390:	898b      	ldrh	r3, [r1, #12]
    3392:	81d3      	strh	r3, [r2, #14]
    3394:	8948      	ldrh	r0, [r1, #10]
    3396:	8210      	strh	r0, [r2, #16]
    3398:	89cd      	ldrh	r5, [r1, #14]
    339a:	8255      	strh	r5, [r2, #18]
    339c:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    339e:	42ae      	cmp	r6, r5
    33a0:	d108      	bne.n	33b4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    33a2:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    33a4:	4285      	cmp	r5, r0
    33a6:	d105      	bne.n	33b4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    33a8:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    33aa:	429d      	cmp	r5, r3
    33ac:	d102      	bne.n	33b4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    33ae:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    33b0:	42a3      	cmp	r3, r4
    33b2:	d001      	beq.n	33b8 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    33b4:	2301      	movs	r3, #1
    33b6:	e000      	b.n	33ba <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    33b8:	2300      	movs	r3, #0
    33ba:	7513      	strb	r3, [r2, #20]
    33bc:	8548      	strh	r0, [r1, #42]	; 0x2a
    33be:	8a50      	ldrh	r0, [r2, #18]
    33c0:	85c8      	strh	r0, [r1, #46]	; 0x2e
    33c2:	8990      	ldrh	r0, [r2, #12]
    33c4:	8588      	strh	r0, [r1, #44]	; 0x2c
    33c6:	89d0      	ldrh	r0, [r2, #14]
    33c8:	8608      	strh	r0, [r1, #48]	; 0x30
    33ca:	bcf0      	pop	{r4, r5, r6, r7}
    33cc:	4901      	ldr	r1, [pc, #4]	; (33d4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x4c>)
    33ce:	4610      	mov	r0, r2
    33d0:	f00b b8e4 	b.w	e59c <sym_43BYC3K4M44JBPOX4EUJM44GYCCY2C3C4SYEF6I>
    33d4:	000033f9 	.word	0x000033f9

000033d8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    33d8:	8150      	strh	r0, [r2, #10]
    33da:	8a88      	ldrh	r0, [r1, #20]
    33dc:	8190      	strh	r0, [r2, #12]
    33de:	8ac8      	ldrh	r0, [r1, #22]
    33e0:	81d0      	strh	r0, [r2, #14]
    33e2:	8b08      	ldrh	r0, [r1, #24]
    33e4:	8210      	strh	r0, [r2, #16]
    33e6:	8b48      	ldrh	r0, [r1, #26]
    33e8:	8250      	strh	r0, [r2, #18]
    33ea:	4902      	ldr	r1, [pc, #8]	; (33f4 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x1c>)
    33ec:	4610      	mov	r0, r2
    33ee:	f00b b8d2 	b.w	e596 <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>
    33f2:	0000      	.short	0x0000
    33f4:	00003439 	.word	0x00003439
    33f8:	b538      	push	{r3, r4, r5, lr}
    33fa:	f1a0 0418 	sub.w	r4, r0, #24
    33fe:	7d00      	ldrb	r0, [r0, #20]
    3400:	460d      	mov	r5, r1
    3402:	f000 0001 	and.w	r0, r0, #1
    3406:	f7ff fd99 	bl	2f3c <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    340a:	2100      	movs	r1, #0
    340c:	b108      	cbz	r0, 3412 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3a>
    340e:	9100      	str	r1, [sp, #0]
    3410:	e00c      	b.n	342c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    3412:	7069      	strb	r1, [r5, #1]
    3414:	2013      	movs	r0, #19
    3416:	7028      	strb	r0, [r5, #0]
    3418:	f854 0f22 	ldr.w	r0, [r4, #34]!
    341c:	6068      	str	r0, [r5, #4]
    341e:	6860      	ldr	r0, [r4, #4]
    3420:	60a8      	str	r0, [r5, #8]
    3422:	68a0      	ldr	r0, [r4, #8]
    3424:	60e8      	str	r0, [r5, #12]
    3426:	4803      	ldr	r0, [pc, #12]	; (3434 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5c>)
    3428:	6840      	ldr	r0, [r0, #4]
    342a:	9000      	str	r0, [sp, #0]
    342c:	f8bd 0000 	ldrh.w	r0, [sp]
    3430:	bd38      	pop	{r3, r4, r5, pc}
    3432:	0000      	.short	0x0000
    3434:	000034c0 	.word	0x000034c0
    3438:	b570      	push	{r4, r5, r6, lr}
    343a:	b086      	sub	sp, #24
    343c:	460e      	mov	r6, r1
    343e:	4604      	mov	r4, r0
    3440:	f7ff fd88 	bl	2f54 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    3444:	2500      	movs	r5, #0
    3446:	b358      	cbz	r0, 34a0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc8>
    3448:	f5a4 70bc 	sub.w	r0, r4, #376	; 0x178
    344c:	7225      	strb	r5, [r4, #8]
    344e:	8804      	ldrh	r4, [r0, #0]
    3450:	a903      	add	r1, sp, #12
    3452:	4620      	mov	r0, r4
    3454:	f00c fdbf 	bl	ffd6 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    3458:	b108      	cbz	r0, 345e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    345a:	21fe      	movs	r1, #254	; 0xfe
    345c:	e017      	b.n	348e <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    345e:	f8ad 4000 	strh.w	r4, [sp]
    3462:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    3466:	f8ad 0002 	strh.w	r0, [sp, #2]
    346a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    346e:	f8ad 0004 	strh.w	r0, [sp, #4]
    3472:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    3476:	f8ad 0006 	strh.w	r0, [sp, #6]
    347a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    347e:	f8ad 0008 	strh.w	r0, [sp, #8]
    3482:	4668      	mov	r0, sp
    3484:	f00c fde3 	bl	1004e <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    3488:	b120      	cbz	r0, 3494 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xbc>
    348a:	f240 1107 	movw	r1, #263	; 0x107
    348e:	202c      	movs	r0, #44	; 0x2c
    3490:	f7fd fe68 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3494:	f8cd 5000 	str.w	r5, [sp]
    3498:	f8bd 0000 	ldrh.w	r0, [sp]
    349c:	b006      	add	sp, #24
    349e:	bd70      	pop	{r4, r5, r6, pc}
    34a0:	201b      	movs	r0, #27
    34a2:	7030      	strb	r0, [r6, #0]
    34a4:	7075      	strb	r5, [r6, #1]
    34a6:	f854 0f0a 	ldr.w	r0, [r4, #10]!
    34aa:	6070      	str	r0, [r6, #4]
    34ac:	6860      	ldr	r0, [r4, #4]
    34ae:	60b0      	str	r0, [r6, #8]
    34b0:	8920      	ldrh	r0, [r4, #8]
    34b2:	81b0      	strh	r0, [r6, #12]
    34b4:	4801      	ldr	r0, [pc, #4]	; (34bc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe4>)
    34b6:	6800      	ldr	r0, [r0, #0]
    34b8:	9000      	str	r0, [sp, #0]
    34ba:	e7ed      	b.n	3498 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc0>
    34bc:	000034c0 	.word	0x000034c0
    34c0:	00000004 	.word	0x00000004
    34c4:	00000004 	.word	0x00000004

000034c8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    34c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    34ca:	f06f 021f 	mvn.w	r2, #31
    34ce:	0c01      	lsrs	r1, r0, #16
    34d0:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    34d4:	251f      	movs	r5, #31
    34d6:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    34da:	3854      	subs	r0, #84	; 0x54
    34dc:	d00d      	beq.n	34fa <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    34de:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    34e2:	3855      	subs	r0, #85	; 0x55
    34e4:	d009      	beq.n	34fa <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    34e6:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    34ea:	38aa      	subs	r0, #170	; 0xaa
    34ec:	d005      	beq.n	34fa <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    34ee:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    34f2:	38aa      	subs	r0, #170	; 0xaa
    34f4:	d001      	beq.n	34fa <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    34f6:	2001      	movs	r0, #1
    34f8:	e000      	b.n	34fc <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    34fa:	2000      	movs	r0, #0
    34fc:	2200      	movs	r2, #0
    34fe:	4613      	mov	r3, r2
    3500:	ea4f 0402 	mov.w	r4, r2
    3504:	ea82 0701 	eor.w	r7, r2, r1
    3508:	43ff      	mvns	r7, r7
    350a:	431f      	orrs	r7, r3
    350c:	1c7f      	adds	r7, r7, #1
    350e:	d00f      	beq.n	3530 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    3510:	f006 0701 	and.w	r7, r6, #1
    3514:	0852      	lsrs	r2, r2, #1
    3516:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    351a:	f005 0701 	and.w	r7, r5, #1
    351e:	085b      	lsrs	r3, r3, #1
    3520:	0876      	lsrs	r6, r6, #1
    3522:	086d      	lsrs	r5, r5, #1
    3524:	1c64      	adds	r4, r4, #1
    3526:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    352a:	2c16      	cmp	r4, #22
    352c:	d3ea      	bcc.n	3504 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    352e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3530:	2000      	movs	r0, #0
    3532:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003534 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    3534:	b510      	push	{r4, lr}
    3536:	4804      	ldr	r0, [pc, #16]	; (3548 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    3538:	f00b f951 	bl	e7de <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf4>
    353c:	4802      	ldr	r0, [pc, #8]	; (3548 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    353e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3542:	3008      	adds	r0, #8
    3544:	f00b b94b 	b.w	e7de <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf4>
    3548:	200000cc 	.word	0x200000cc

0000354c <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    354c:	4801      	ldr	r0, [pc, #4]	; (3554 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x8>)
    354e:	f000 b809 	b.w	3564 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    3552:	0000      	.short	0x0000
    3554:	200000cc 	.word	0x200000cc

00003558 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    3558:	4801      	ldr	r0, [pc, #4]	; (3560 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    355a:	f000 b803 	b.w	3564 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    355e:	0000      	.short	0x0000
    3560:	200000d4 	.word	0x200000d4
    3564:	b510      	push	{r4, lr}
    3566:	e9d0 2100 	ldrd	r2, r1, [r0]
    356a:	4b09      	ldr	r3, [pc, #36]	; (3590 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    356c:	4c09      	ldr	r4, [pc, #36]	; (3594 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    356e:	4353      	muls	r3, r2
    3570:	4354      	muls	r4, r2
    3572:	4051      	eors	r1, r2
    3574:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    3578:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    357c:	ea4f 41f1 	mov.w	r1, r1, ror #19
    3580:	e9c0 2100 	strd	r2, r1, [r0]
    3584:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    3588:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    358c:	4618      	mov	r0, r3
    358e:	bd10      	pop	{r4, pc}
    3590:	c6ef3760 	.word	0xc6ef3760
    3594:	9e3779bb 	.word	0x9e3779bb

00003598 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>:
    3598:	b570      	push	{r4, r5, r6, lr}
    359a:	6844      	ldr	r4, [r0, #4]
    359c:	1d09      	adds	r1, r1, #4
    359e:	2500      	movs	r5, #0
    35a0:	f894 008c 	ldrb.w	r0, [r4, #140]	; 0x8c
    35a4:	3480      	adds	r4, #128	; 0x80
    35a6:	07c0      	lsls	r0, r0, #31
    35a8:	d001      	beq.n	35ae <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x16>
    35aa:	2001      	movs	r0, #1
    35ac:	bd70      	pop	{r4, r5, r6, pc}
    35ae:	6848      	ldr	r0, [r1, #4]
    35b0:	6809      	ldr	r1, [r1, #0]
    35b2:	4b0c      	ldr	r3, [pc, #48]	; (35e4 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x4c>)
    35b4:	f641 0207 	movw	r2, #6151	; 0x1807
    35b8:	4019      	ands	r1, r3
    35ba:	66e1      	str	r1, [r4, #108]	; 0x6c
    35bc:	4010      	ands	r0, r2
    35be:	6720      	str	r0, [r4, #112]	; 0x70
    35c0:	211b      	movs	r1, #27
    35c2:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    35c6:	f00b fa30 	bl	ea2a <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY+0x22>
    35ca:	f8a4 5058 	strh.w	r5, [r4, #88]	; 0x58
    35ce:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    35d2:	1c40      	adds	r0, r0, #1
    35d4:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    35d8:	68e0      	ldr	r0, [r4, #12]
    35da:	f040 0001 	orr.w	r0, r0, #1
    35de:	60e0      	str	r0, [r4, #12]
    35e0:	2000      	movs	r0, #0
    35e2:	bd70      	pop	{r4, r5, r6, pc}
    35e4:	f704492f 	.word	0xf704492f

000035e8 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>:
    35e8:	b510      	push	{r4, lr}
    35ea:	1d04      	adds	r4, r0, #4
    35ec:	f004 fa04 	bl	79f8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    35f0:	4b03      	ldr	r3, [pc, #12]	; (3600 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY+0x18>)
    35f2:	f641 0207 	movw	r2, #6151	; 0x1807
    35f6:	4018      	ands	r0, r3
    35f8:	4011      	ands	r1, r2
    35fa:	6020      	str	r0, [r4, #0]
    35fc:	6061      	str	r1, [r4, #4]
    35fe:	bd10      	pop	{r4, pc}
    3600:	f704492f 	.word	0xf704492f

00003604 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>:
    3604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3608:	7803      	ldrb	r3, [r0, #0]
    360a:	6840      	ldr	r0, [r0, #4]
    360c:	1d0f      	adds	r7, r1, #4
    360e:	f100 0580 	add.w	r5, r0, #128	; 0x80
    3612:	f500 74a5 	add.w	r4, r0, #330	; 0x14a
    3616:	4606      	mov	r6, r0
    3618:	f04f 0800 	mov.w	r8, #0
    361c:	7f6a      	ldrb	r2, [r5, #29]
    361e:	2107      	movs	r1, #7
    3620:	4628      	mov	r0, r5
    3622:	f00a fc19 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    3626:	b1e0      	cbz	r0, 3662 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x5e>
    3628:	6839      	ldr	r1, [r7, #0]
    362a:	4b18      	ldr	r3, [pc, #96]	; (368c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x88>)
    362c:	6878      	ldr	r0, [r7, #4]
    362e:	4019      	ands	r1, r3
    3630:	f641 0207 	movw	r2, #6151	; 0x1807
    3634:	66e9      	str	r1, [r5, #108]	; 0x6c
    3636:	4010      	ands	r0, r2
    3638:	6728      	str	r0, [r5, #112]	; 0x70
    363a:	211b      	movs	r1, #27
    363c:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    3640:	f00b f9f3 	bl	ea2a <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY+0x22>
    3644:	f885 8056 	strb.w	r8, [r5, #86]	; 0x56
    3648:	f885 801d 	strb.w	r8, [r5, #29]
    364c:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
    3650:	4640      	mov	r0, r8
    3652:	f88d 1000 	strb.w	r1, [sp]
    3656:	9900      	ldr	r1, [sp, #0]
    3658:	9100      	str	r1, [sp, #0]
    365a:	f89d 1000 	ldrb.w	r1, [sp]
    365e:	b991      	cbnz	r1, 3686 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x82>
    3660:	e002      	b.n	3668 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x64>
    3662:	2001      	movs	r0, #1
    3664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3668:	8831      	ldrh	r1, [r6, #0]
    366a:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    366e:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    3672:	6839      	ldr	r1, [r7, #0]
    3674:	66e1      	str	r1, [r4, #108]	; 0x6c
    3676:	6879      	ldr	r1, [r7, #4]
    3678:	6721      	str	r1, [r4, #112]	; 0x70
    367a:	2202      	movs	r2, #2
    367c:	4904      	ldr	r1, [pc, #16]	; (3690 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x8c>)
    367e:	f104 0060 	add.w	r0, r4, #96	; 0x60
    3682:	f00a ff91 	bl	e5a8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3686:	2000      	movs	r0, #0
    3688:	e7ec      	b.n	3664 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x60>
    368a:	0000      	.short	0x0000
    368c:	f704492f 	.word	0xf704492f
    3690:	0000ea97 	.word	0x0000ea97

00003694 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>:
    3694:	b570      	push	{r4, r5, r6, lr}
    3696:	1d0d      	adds	r5, r1, #4
    3698:	6844      	ldr	r4, [r0, #4]
    369a:	f004 f9ad 	bl	79f8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    369e:	f641 0207 	movw	r2, #6151	; 0x1807
    36a2:	4b05      	ldr	r3, [pc, #20]	; (36b8 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ+0x24>)
    36a4:	4011      	ands	r1, r2
    36a6:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
    36aa:	4018      	ands	r0, r3
    36ac:	4002      	ands	r2, r0
    36ae:	f362 0007 	bfi	r0, r2, #0, #8
    36b2:	6028      	str	r0, [r5, #0]
    36b4:	6069      	str	r1, [r5, #4]
    36b6:	bd70      	pop	{r4, r5, r6, pc}
    36b8:	f704492f 	.word	0xf704492f

000036bc <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q>:
    36bc:	6841      	ldr	r1, [r0, #4]
    36be:	b082      	sub	sp, #8
    36c0:	f501 70a5 	add.w	r0, r1, #330	; 0x14a
    36c4:	f891 21b2 	ldrb.w	r2, [r1, #434]	; 0x1b2
    36c8:	f88d 2000 	strb.w	r2, [sp]
    36cc:	9a00      	ldr	r2, [sp, #0]
    36ce:	9200      	str	r2, [sp, #0]
    36d0:	f89d 2000 	ldrb.w	r2, [sp]
    36d4:	2a00      	cmp	r2, #0
    36d6:	d10b      	bne.n	36f0 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q+0x34>
    36d8:	8809      	ldrh	r1, [r1, #0]
    36da:	f8a0 106a 	strh.w	r1, [r0, #106]	; 0x6a
    36de:	211a      	movs	r1, #26
    36e0:	f880 1069 	strb.w	r1, [r0, #105]	; 0x69
    36e4:	2202      	movs	r2, #2
    36e6:	4903      	ldr	r1, [pc, #12]	; (36f4 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q+0x38>)
    36e8:	3060      	adds	r0, #96	; 0x60
    36ea:	b002      	add	sp, #8
    36ec:	f00a bf5c 	b.w	e5a8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    36f0:	b002      	add	sp, #8
    36f2:	4770      	bx	lr
    36f4:	0000ea97 	.word	0x0000ea97

000036f8 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>:
    36f8:	b570      	push	{r4, r5, r6, lr}
    36fa:	6844      	ldr	r4, [r0, #4]
    36fc:	460d      	mov	r5, r1
    36fe:	7803      	ldrb	r3, [r0, #0]
    3700:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    3704:	3480      	adds	r4, #128	; 0x80
    3706:	2600      	movs	r6, #0
    3708:	2108      	movs	r1, #8
    370a:	4620      	mov	r0, r4
    370c:	f00a fba4 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    3710:	b920      	cbnz	r0, 371c <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x24>
    3712:	7b20      	ldrb	r0, [r4, #12]
    3714:	0780      	lsls	r0, r0, #30
    3716:	d501      	bpl.n	371c <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x24>
    3718:	2001      	movs	r0, #1
    371a:	bd70      	pop	{r4, r5, r6, pc}
    371c:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    3720:	0780      	lsls	r0, r0, #30
    3722:	d419      	bmi.n	3758 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x60>
    3724:	4628      	mov	r0, r5
    3726:	f00a fed2 	bl	e4ce <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>
    372a:	f884 0067 	strb.w	r0, [r4, #103]	; 0x67
    372e:	f835 0f05 	ldrh.w	r0, [r5, #5]!
    3732:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    3736:	8868      	ldrh	r0, [r5, #2]
    3738:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    373c:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    3740:	f040 0002 	orr.w	r0, r0, #2
    3744:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    3748:	07c0      	lsls	r0, r0, #31
    374a:	d009      	beq.n	3760 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x68>
    374c:	2202      	movs	r2, #2
    374e:	4911      	ldr	r1, [pc, #68]	; (3794 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x9c>)
    3750:	f104 005e 	add.w	r0, r4, #94	; 0x5e
    3754:	f00a ff3c 	bl	e5d0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    3758:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    375c:	07c0      	lsls	r0, r0, #31
    375e:	d110      	bne.n	3782 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x8a>
    3760:	68e0      	ldr	r0, [r4, #12]
    3762:	0781      	lsls	r1, r0, #30
    3764:	d503      	bpl.n	376e <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x76>
    3766:	214f      	movs	r1, #79	; 0x4f
    3768:	2040      	movs	r0, #64	; 0x40
    376a:	f7fd fcfb 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    376e:	f040 0002 	orr.w	r0, r0, #2
    3772:	60e0      	str	r0, [r4, #12]
    3774:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    3778:	1c40      	adds	r0, r0, #1
    377a:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    377e:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    3782:	7f60      	ldrb	r0, [r4, #29]
    3784:	2801      	cmp	r0, #1
    3786:	d102      	bne.n	378e <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x96>
    3788:	7766      	strb	r6, [r4, #29]
    378a:	f884 6056 	strb.w	r6, [r4, #86]	; 0x56
    378e:	2000      	movs	r0, #0
    3790:	bd70      	pop	{r4, r5, r6, pc}
    3792:	0000      	.short	0x0000
    3794:	0000eb45 	.word	0x0000eb45

00003798 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>:
    3798:	4a04      	ldr	r2, [pc, #16]	; (37ac <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ+0x14>)
    379a:	6892      	ldr	r2, [r2, #8]
    379c:	f5c2 5380 	rsb	r3, r2, #4096	; 0x1000
    37a0:	434b      	muls	r3, r1
    37a2:	4342      	muls	r2, r0
    37a4:	eb03 3022 	add.w	r0, r3, r2, asr #12
    37a8:	4770      	bx	lr
    37aa:	0000      	.short	0x0000
    37ac:	200000dc 	.word	0x200000dc

000037b0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>:
    37b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37b2:	6844      	ldr	r4, [r0, #4]
    37b4:	4606      	mov	r6, r0
    37b6:	f104 0580 	add.w	r5, r4, #128	; 0x80
    37ba:	f000 f87b 	bl	38b4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x104>
    37be:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    37c2:	2901      	cmp	r1, #1
    37c4:	d11a      	bne.n	37fc <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    37c6:	2800      	cmp	r0, #0
    37c8:	d018      	beq.n	37fc <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    37ca:	6870      	ldr	r0, [r6, #4]
    37cc:	f890 1152 	ldrb.w	r1, [r0, #338]	; 0x152
    37d0:	f88d 1000 	strb.w	r1, [sp]
    37d4:	9900      	ldr	r1, [sp, #0]
    37d6:	9100      	str	r1, [sp, #0]
    37d8:	f89d 1000 	ldrb.w	r1, [sp]
    37dc:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
    37e0:	2900      	cmp	r1, #0
    37e2:	d10b      	bne.n	37fc <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    37e4:	8821      	ldrh	r1, [r4, #0]
    37e6:	8141      	strh	r1, [r0, #10]
    37e8:	7e69      	ldrb	r1, [r5, #25]
    37ea:	7301      	strb	r1, [r0, #12]
    37ec:	7ea9      	ldrb	r1, [r5, #26]
    37ee:	7341      	strb	r1, [r0, #13]
    37f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    37f4:	2202      	movs	r2, #2
    37f6:	4902      	ldr	r1, [pc, #8]	; (3800 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>)
    37f8:	f00a bed6 	b.w	e5a8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    37fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    37fe:	0000      	.short	0x0000
    3800:	0000ebcd 	.word	0x0000ebcd
    3804:	f500 6100 	add.w	r1, r0, #2048	; 0x800
    3808:	4a0d      	ldr	r2, [pc, #52]	; (3840 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x90>)
    380a:	b510      	push	{r4, lr}
    380c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    3810:	1309      	asrs	r1, r1, #12
    3812:	1300      	asrs	r0, r0, #12
    3814:	b24b      	sxtb	r3, r1
    3816:	f992 4000 	ldrsb.w	r4, [r2]
    381a:	4240      	negs	r0, r0
    381c:	2100      	movs	r1, #0
    381e:	b240      	sxtb	r0, r0
    3820:	42a3      	cmp	r3, r4
    3822:	da02      	bge.n	382a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x7a>
    3824:	f992 1002 	ldrsb.w	r1, [r2, #2]
    3828:	e005      	b.n	3836 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x86>
    382a:	f992 4001 	ldrsb.w	r4, [r2, #1]
    382e:	42a3      	cmp	r3, r4
    3830:	dd04      	ble.n	383c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x8c>
    3832:	f992 1003 	ldrsb.w	r1, [r2, #3]
    3836:	4408      	add	r0, r1
    3838:	f300 0107 	ssat	r1, #8, r0
    383c:	4608      	mov	r0, r1
    383e:	bd10      	pop	{r4, pc}
    3840:	200000dc 	.word	0x200000dc
    3844:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    3848:	f5a0 75fa 	sub.w	r5, r0, #500	; 0x1f4
    384c:	f5a0 74ba 	sub.w	r4, r0, #372	; 0x174
    3850:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    3854:	f00c f872 	bl	f93c <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    3858:	4606      	mov	r6, r0
    385a:	68a0      	ldr	r0, [r4, #8]
    385c:	f7ff ffd2 	bl	3804 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    3860:	0007      	movs	r7, r0
    3862:	d021      	beq.n	38a8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
    3864:	4620      	mov	r0, r4
    3866:	f00b f9b9 	bl	ebdc <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x70>
    386a:	2800      	cmp	r0, #0
    386c:	d01c      	beq.n	38a8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
    386e:	8828      	ldrh	r0, [r5, #0]
    3870:	4669      	mov	r1, sp
    3872:	f00a fada 	bl	de2a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    3876:	b118      	cbz	r0, 3880 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xd0>
    3878:	2185      	movs	r1, #133	; 0x85
    387a:	207a      	movs	r0, #122	; 0x7a
    387c:	f7fd fc72 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3880:	1c76      	adds	r6, r6, #1
    3882:	b2f1      	uxtb	r1, r6
    3884:	2302      	movs	r3, #2
    3886:	463a      	mov	r2, r7
    3888:	4668      	mov	r0, sp
    388a:	f00c f876 	bl	f97a <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>
    388e:	2800      	cmp	r0, #0
    3890:	d10a      	bne.n	38a8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
    3892:	4806      	ldr	r0, [pc, #24]	; (38ac <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfc>)
    3894:	4906      	ldr	r1, [pc, #24]	; (38b0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x100>)
    3896:	7900      	ldrb	r0, [r0, #4]
    3898:	fba0 6501 	umull	r6, r5, r0, r1
    389c:	f00d f87d 	bl	1099a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    38a0:	1980      	adds	r0, r0, r6
    38a2:	4169      	adcs	r1, r5
    38a4:	e9c4 0100 	strd	r0, r1, [r4]
    38a8:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    38ac:	200000dc 	.word	0x200000dc
    38b0:	000f4240 	.word	0x000f4240
    38b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38b8:	4607      	mov	r7, r0
    38ba:	f7ff fa91 	bl	2de0 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    38be:	687c      	ldr	r4, [r7, #4]
    38c0:	4605      	mov	r5, r0
    38c2:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    38c6:	3480      	adds	r4, #128	; 0x80
    38c8:	287f      	cmp	r0, #127	; 0x7f
    38ca:	d042      	beq.n	3952 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a2>
    38cc:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    38d0:	687e      	ldr	r6, [r7, #4]
    38d2:	76a0      	strb	r0, [r4, #26]
    38d4:	4629      	mov	r1, r5
    38d6:	68a0      	ldr	r0, [r4, #8]
    38d8:	f7ff ff5e 	bl	3798 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>
    38dc:	60a0      	str	r0, [r4, #8]
    38de:	481e      	ldr	r0, [pc, #120]	; (3958 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a8>)
    38e0:	7940      	ldrb	r0, [r0, #5]
    38e2:	b1c0      	cbz	r0, 3916 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
    38e4:	6878      	ldr	r0, [r7, #4]
    38e6:	f100 0880 	add.w	r8, r0, #128	; 0x80
    38ea:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
    38ee:	f7ff ff89 	bl	3804 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    38f2:	b180      	cbz	r0, 3916 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
    38f4:	4640      	mov	r0, r8
    38f6:	f00b f971 	bl	ebdc <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x70>
    38fa:	b160      	cbz	r0, 3916 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
    38fc:	6878      	ldr	r0, [r7, #4]
    38fe:	f500 78a5 	add.w	r8, r0, #330	; 0x14a
    3902:	4607      	mov	r7, r0
    3904:	f004 fca2 	bl	824c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    3908:	f887 006b 	strb.w	r0, [r7, #107]	; 0x6b
    390c:	4913      	ldr	r1, [pc, #76]	; (395c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1ac>)
    390e:	f108 00aa 	add.w	r0, r8, #170	; 0xaa
    3912:	f00a fe46 	bl	e5a2 <sym_OHZGE3PRU72NL3TJSLCEUVROHETUDPWEUAQ7GMA>
    3916:	f994 001b 	ldrsb.w	r0, [r4, #27]
    391a:	2100      	movs	r1, #0
    391c:	1a28      	subs	r0, r5, r0
    391e:	d500      	bpl.n	3922 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x172>
    3920:	4240      	negs	r0, r0
    3922:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
    3926:	4282      	cmp	r2, r0
    3928:	dc10      	bgt.n	394c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
    392a:	2aff      	cmp	r2, #255	; 0xff
    392c:	d00e      	beq.n	394c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
    392e:	7f20      	ldrb	r0, [r4, #28]
    3930:	1c40      	adds	r0, r0, #1
    3932:	b2c0      	uxtb	r0, r0
    3934:	7720      	strb	r0, [r4, #28]
    3936:	f896 202a 	ldrb.w	r2, [r6, #42]	; 0x2a
    393a:	4290      	cmp	r0, r2
    393c:	d802      	bhi.n	3944 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x194>
    393e:	7ee0      	ldrb	r0, [r4, #27]
    3940:	287f      	cmp	r0, #127	; 0x7f
    3942:	d103      	bne.n	394c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
    3944:	2000      	movs	r0, #0
    3946:	76e5      	strb	r5, [r4, #27]
    3948:	7720      	strb	r0, [r4, #28]
    394a:	2101      	movs	r1, #1
    394c:	4608      	mov	r0, r1
    394e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3952:	2000      	movs	r0, #0
    3954:	e7fb      	b.n	394e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19e>
    3956:	0000      	.short	0x0000
    3958:	200000dc 	.word	0x200000dc
    395c:	00003845 	.word	0x00003845

00003960 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>:
    3960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3962:	f00b f957 	bl	ec14 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    3966:	4604      	mov	r4, r0
    3968:	460d      	mov	r5, r1
    396a:	466a      	mov	r2, sp
    396c:	f000 f862 	bl	3a34 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    3970:	b108      	cbz	r0, 3976 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x16>
    3972:	2001      	movs	r0, #1
    3974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3976:	480f      	ldr	r0, [pc, #60]	; (39b4 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x54>)
    3978:	7803      	ldrb	r3, [r0, #0]
    397a:	7841      	ldrb	r1, [r0, #1]
    397c:	428b      	cmp	r3, r1
    397e:	d101      	bne.n	3984 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x24>
    3980:	2000      	movs	r0, #0
    3982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3984:	461a      	mov	r2, r3
    3986:	6841      	ldr	r1, [r0, #4]
    3988:	e008      	b.n	399c <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x3c>
    398a:	bf00      	nop
    398c:	eb01 06c2 	add.w	r6, r1, r2, lsl #3
    3990:	1e52      	subs	r2, r2, #1
    3992:	e956 7c02 	ldrd	r7, ip, [r6, #-8]
    3996:	e9c6 7c00 	strd	r7, ip, [r6]
    399a:	b2d2      	uxtb	r2, r2
    399c:	f89d 6000 	ldrb.w	r6, [sp]
    39a0:	42b2      	cmp	r2, r6
    39a2:	d8f3      	bhi.n	398c <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x2c>
    39a4:	b2f2      	uxtb	r2, r6
    39a6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    39aa:	1c5b      	adds	r3, r3, #1
    39ac:	e9c1 4500 	strd	r4, r5, [r1]
    39b0:	7003      	strb	r3, [r0, #0]
    39b2:	e7de      	b.n	3972 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x12>
    39b4:	200000e8 	.word	0x200000e8

000039b8 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>:
    39b8:	b510      	push	{r4, lr}
    39ba:	0742      	lsls	r2, r0, #29
    39bc:	d003      	beq.n	39c6 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0xe>
    39be:	2163      	movs	r1, #99	; 0x63
    39c0:	2048      	movs	r0, #72	; 0x48
    39c2:	f7fd fbcf 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    39c6:	b120      	cbz	r0, 39d2 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x1a>
    39c8:	4a03      	ldr	r2, [pc, #12]	; (39d8 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x20>)
    39ca:	7051      	strb	r1, [r2, #1]
    39cc:	6050      	str	r0, [r2, #4]
    39ce:	2000      	movs	r0, #0
    39d0:	7010      	strb	r0, [r2, #0]
    39d2:	00c8      	lsls	r0, r1, #3
    39d4:	bd10      	pop	{r4, pc}
    39d6:	0000      	.short	0x0000
    39d8:	200000e8 	.word	0x200000e8

000039dc <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>:
    39dc:	b538      	push	{r3, r4, r5, lr}
    39de:	f00b f919 	bl	ec14 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    39e2:	466a      	mov	r2, sp
    39e4:	f000 f826 	bl	3a34 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    39e8:	2800      	cmp	r0, #0
    39ea:	d014      	beq.n	3a16 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3a>
    39ec:	4a0a      	ldr	r2, [pc, #40]	; (3a18 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3c>)
    39ee:	7810      	ldrb	r0, [r2, #0]
    39f0:	1e40      	subs	r0, r0, #1
    39f2:	b2c1      	uxtb	r1, r0
    39f4:	7011      	strb	r1, [r2, #0]
    39f6:	f89d 0000 	ldrb.w	r0, [sp]
    39fa:	6852      	ldr	r2, [r2, #4]
    39fc:	e008      	b.n	3a10 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x34>
    39fe:	bf00      	nop
    3a00:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
    3a04:	1c40      	adds	r0, r0, #1
    3a06:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
    3a0a:	e9c3 4500 	strd	r4, r5, [r3]
    3a0e:	b2c0      	uxtb	r0, r0
    3a10:	4288      	cmp	r0, r1
    3a12:	d3f5      	bcc.n	3a00 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x24>
    3a14:	2001      	movs	r0, #1
    3a16:	bd38      	pop	{r3, r4, r5, pc}
    3a18:	200000e8 	.word	0x200000e8

00003a1c <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>:
    3a1c:	4901      	ldr	r1, [pc, #4]	; (3a24 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ+0x8>)
    3a1e:	2000      	movs	r0, #0
    3a20:	7008      	strb	r0, [r1, #0]
    3a22:	4770      	bx	lr
    3a24:	200000e8 	.word	0x200000e8

00003a28 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>:
    3a28:	4801      	ldr	r0, [pc, #4]	; (3a30 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8>)
    3a2a:	7840      	ldrb	r0, [r0, #1]
    3a2c:	4770      	bx	lr
    3a2e:	0000      	.short	0x0000
    3a30:	200000e8 	.word	0x200000e8
    3a34:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a36:	4d20      	ldr	r5, [pc, #128]	; (3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>)
    3a38:	2300      	movs	r3, #0
    3a3a:	7013      	strb	r3, [r2, #0]
    3a3c:	782b      	ldrb	r3, [r5, #0]
    3a3e:	b323      	cbz	r3, 3a8a <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x62>
    3a40:	2400      	movs	r4, #0
    3a42:	1e5b      	subs	r3, r3, #1
    3a44:	b2db      	uxtb	r3, r3
    3a46:	f8d5 c004 	ldr.w	ip, [r5, #4]
    3a4a:	e00b      	b.n	3a64 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    3a4c:	18e5      	adds	r5, r4, r3
    3a4e:	086d      	lsrs	r5, r5, #1
    3a50:	eb0c 06c5 	add.w	r6, ip, r5, lsl #3
    3a54:	e9d6 7600 	ldrd	r7, r6, [r6]
    3a58:	1a3f      	subs	r7, r7, r0
    3a5a:	418e      	sbcs	r6, r1
    3a5c:	d201      	bcs.n	3a62 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3a>
    3a5e:	462c      	mov	r4, r5
    3a60:	e000      	b.n	3a64 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    3a62:	462b      	mov	r3, r5
    3a64:	1b1d      	subs	r5, r3, r4
    3a66:	2d01      	cmp	r5, #1
    3a68:	dcf0      	bgt.n	3a4c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x24>
    3a6a:	eb0c 06c4 	add.w	r6, ip, r4, lsl #3
    3a6e:	e9d6 5600 	ldrd	r5, r6, [r6]
    3a72:	ea80 0705 	eor.w	r7, r0, r5
    3a76:	ea81 0e06 	eor.w	lr, r1, r6
    3a7a:	ea57 070e 	orrs.w	r7, r7, lr
    3a7e:	d005      	beq.n	3a8c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x64>
    3a80:	1b45      	subs	r5, r0, r5
    3a82:	eb71 0506 	sbcs.w	r5, r1, r6
    3a86:	d203      	bcs.n	3a90 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x68>
    3a88:	7014      	strb	r4, [r2, #0]
    3a8a:	e010      	b.n	3aae <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x16>
    3a8c:	7014      	strb	r4, [r2, #0]
    3a8e:	e011      	b.n	3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>
    3a90:	eb0c 05c3 	add.w	r5, ip, r3, lsl #3
    3a94:	e9d5 4500 	ldrd	r4, r5, [r5]
    3a98:	ea80 0604 	eor.w	r6, r0, r4
    3a9c:	ea81 0705 	eor.w	r7, r1, r5
    3aa0:	433e      	orrs	r6, r7
    3aa2:	d006      	beq.n	3ab2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1a>
    3aa4:	1b00      	subs	r0, r0, r4
    3aa6:	41a9      	sbcs	r1, r5
    3aa8:	d300      	bcc.n	3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>
    3aaa:	1c5b      	adds	r3, r3, #1
    3aac:	7013      	strb	r3, [r2, #0]
    3aae:	2000      	movs	r0, #0
    3ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ab2:	7013      	strb	r3, [r2, #0]
    3ab4:	2001      	movs	r0, #1
    3ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ab8:	200000e8 	.word	0x200000e8

00003abc <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    3abc:	b570      	push	{r4, r5, r6, lr}
    3abe:	4604      	mov	r4, r0
    3ac0:	7c00      	ldrb	r0, [r0, #16]
    3ac2:	b300      	cbz	r0, 3b06 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    3ac4:	2802      	cmp	r0, #2
    3ac6:	d01e      	beq.n	3b06 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4a>
    3ac8:	f05f 0001 	movs.w	r0, #1
    3acc:	f104 0151 	add.w	r1, r4, #81	; 0x51
    3ad0:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    3ad4:	460d      	mov	r5, r1
    3ad6:	b1c0      	cbz	r0, 3b0a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x4e>
    3ad8:	7de0      	ldrb	r0, [r4, #23]
    3ada:	b1f0      	cbz	r0, 3b1a <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x5e>
    3adc:	f8d4 0011 	ldr.w	r0, [r4, #17]
    3ae0:	f8c4 0051 	str.w	r0, [r4, #81]	; 0x51
    3ae4:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    3ae8:	f8a4 0055 	strh.w	r0, [r4, #85]	; 0x55
    3aec:	7c20      	ldrb	r0, [r4, #16]
    3aee:	f00b f8c1 	bl	ec74 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    3af2:	7620      	strb	r0, [r4, #24]
    3af4:	2008      	movs	r0, #8
    3af6:	7660      	strb	r0, [r4, #25]
    3af8:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    3afc:	4629      	mov	r1, r5
    3afe:	f00b f8a5 	bl	ec4c <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x46>
    3b02:	b9a8      	cbnz	r0, 3b30 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x74>
    3b04:	e00e      	b.n	3b24 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x68>
    3b06:	2000      	movs	r0, #0
    3b08:	e7e0      	b.n	3acc <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    3b0a:	2000      	movs	r0, #0
    3b0c:	f7fe fa8e 	bl	202c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    3b10:	2800      	cmp	r0, #0
    3b12:	d1eb      	bne.n	3aec <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x30>
    3b14:	f240 41ba 	movw	r1, #1210	; 0x4ba
    3b18:	e001      	b.n	3b1e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x62>
    3b1a:	f240 41be 	movw	r1, #1214	; 0x4be
    3b1e:	202d      	movs	r0, #45	; 0x2d
    3b20:	f7fd fb20 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3b24:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    3b28:	4629      	mov	r1, r5
    3b2a:	f00b f898 	bl	ec5e <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    3b2e:	b100      	cbz	r0, 3b32 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x76>
    3b30:	2001      	movs	r0, #1
    3b32:	76a0      	strb	r0, [r4, #26]
    3b34:	7e20      	ldrb	r0, [r4, #24]
    3b36:	b130      	cbz	r0, 3b46 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x8a>
    3b38:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    3b3c:	f104 0158 	add.w	r1, r4, #88	; 0x58
    3b40:	f00a f94b 	bl	ddda <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    3b44:	7660      	strb	r0, [r4, #25]
    3b46:	f7ff f82d 	bl	2ba4 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    3b4a:	490c      	ldr	r1, [pc, #48]	; (3b7c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xc0>)
    3b4c:	fba0 2301 	umull	r2, r3, r0, r1
    3b50:	f104 0048 	add.w	r0, r4, #72	; 0x48
    3b54:	f00b fa00 	bl	ef58 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x12e>
    3b58:	2100      	movs	r1, #0
    3b5a:	4620      	mov	r0, r4
    3b5c:	f00b f9b5 	bl	eeca <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa0>
    3b60:	2000      	movs	r0, #0
    3b62:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    3b66:	78a0      	ldrb	r0, [r4, #2]
    3b68:	0740      	lsls	r0, r0, #29
    3b6a:	d505      	bpl.n	3b78 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xbc>
    3b6c:	4620      	mov	r0, r4
    3b6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3b72:	2100      	movs	r1, #0
    3b74:	f000 bdf0 	b.w	4758 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6ac>
    3b78:	bd70      	pop	{r4, r5, r6, pc}
    3b7a:	0000      	.short	0x0000
    3b7c:	000f4240 	.word	0x000f4240

00003b80 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    3b80:	b530      	push	{r4, r5, lr}
    3b82:	460c      	mov	r4, r1
    3b84:	b08d      	sub	sp, #52	; 0x34
    3b86:	4605      	mov	r5, r0
    3b88:	4601      	mov	r1, r0
    3b8a:	2224      	movs	r2, #36	; 0x24
    3b8c:	a802      	add	r0, sp, #8
    3b8e:	f00d f896 	bl	10cbe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3b92:	a80b      	add	r0, sp, #44	; 0x2c
    3b94:	f00b fa3d 	bl	f012 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    3b98:	7aa0      	ldrb	r0, [r4, #10]
    3b9a:	f88d 0018 	strb.w	r0, [sp, #24]
    3b9e:	7820      	ldrb	r0, [r4, #0]
    3ba0:	f88d 0008 	strb.w	r0, [sp, #8]
    3ba4:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    3ba8:	f8ad 0000 	strh.w	r0, [sp]
    3bac:	f89d 0000 	ldrb.w	r0, [sp]
    3bb0:	f000 0101 	and.w	r1, r0, #1
    3bb4:	f3c0 0240 	ubfx	r2, r0, #1, #1
    3bb8:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    3bbc:	f3c0 0280 	ubfx	r2, r0, #2, #1
    3bc0:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    3bc4:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    3bc8:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    3bcc:	f3c0 1200 	ubfx	r2, r0, #4, #1
    3bd0:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    3bd4:	f3c0 1240 	ubfx	r2, r0, #5, #1
    3bd8:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    3bdc:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3be0:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    3be4:	f8ad 000a 	strh.w	r0, [sp, #10]
    3be8:	7d20      	ldrb	r0, [r4, #20]
    3bea:	2801      	cmp	r0, #1
    3bec:	d006      	beq.n	3bfc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    3bee:	2802      	cmp	r0, #2
    3bf0:	d004      	beq.n	3bfc <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    3bf2:	f240 21e9 	movw	r1, #745	; 0x2e9
    3bf6:	2006      	movs	r0, #6
    3bf8:	f7fd fab4 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3bfc:	f88d 000c 	strb.w	r0, [sp, #12]
    3c00:	7a61      	ldrb	r1, [r4, #9]
    3c02:	a80b      	add	r0, sp, #44	; 0x2c
    3c04:	f00b f9ec 	bl	efe0 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    3c08:	7d20      	ldrb	r0, [r4, #20]
    3c0a:	2101      	movs	r1, #1
    3c0c:	2802      	cmp	r0, #2
    3c0e:	d102      	bne.n	3c16 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    3c10:	7d60      	ldrb	r0, [r4, #21]
    3c12:	1c40      	adds	r0, r0, #1
    3c14:	b2c1      	uxtb	r1, r0
    3c16:	7ea0      	ldrb	r0, [r4, #26]
    3c18:	1c40      	adds	r0, r0, #1
    3c1a:	b2c2      	uxtb	r2, r0
    3c1c:	a80b      	add	r0, sp, #44	; 0x2c
    3c1e:	f00b f9a6 	bl	ef6e <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    3c22:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    3c26:	0700      	lsls	r0, r0, #28
    3c28:	d501      	bpl.n	3c2e <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    3c2a:	2000      	movs	r0, #0
    3c2c:	e020      	b.n	3c70 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    3c2e:	a80b      	add	r0, sp, #44	; 0x2c
    3c30:	f00b f9af 	bl	ef92 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    3c34:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    3c38:	2228      	movs	r2, #40	; 0x28
    3c3a:	f000 fe31 	bl	48a0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    3c3e:	f240 2171 	movw	r1, #625	; 0x271
    3c42:	f200 20db 	addw	r0, r0, #731	; 0x2db
    3c46:	fbb0 f0f1 	udiv	r0, r0, r1
    3c4a:	4348      	muls	r0, r1
    3c4c:	f8d4 1002 	ldr.w	r1, [r4, #2]
    3c50:	f240 2371 	movw	r3, #625	; 0x271
    3c54:	0a0a      	lsrs	r2, r1, #8
    3c56:	f240 2171 	movw	r1, #625	; 0x271
    3c5a:	434a      	muls	r2, r1
    3c5c:	f8d4 1005 	ldr.w	r1, [r4, #5]
    3c60:	0a09      	lsrs	r1, r1, #8
    3c62:	4359      	muls	r1, r3
    3c64:	4290      	cmp	r0, r2
    3c66:	d801      	bhi.n	3c6c <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    3c68:	9204      	str	r2, [sp, #16]
    3c6a:	e004      	b.n	3c76 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    3c6c:	4288      	cmp	r0, r1
    3c6e:	d801      	bhi.n	3c74 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    3c70:	9004      	str	r0, [sp, #16]
    3c72:	e000      	b.n	3c76 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    3c74:	9104      	str	r1, [sp, #16]
    3c76:	7ca0      	ldrb	r0, [r4, #18]
    3c78:	f88d 0017 	strb.w	r0, [sp, #23]
    3c7c:	7e20      	ldrb	r0, [r4, #24]
    3c7e:	2801      	cmp	r0, #1
    3c80:	d000      	beq.n	3c84 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    3c82:	2000      	movs	r0, #0
    3c84:	f88d 0014 	strb.w	r0, [sp, #20]
    3c88:	6b68      	ldr	r0, [r5, #52]	; 0x34
    3c8a:	f009 ff0e 	bl	daaa <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    3c8e:	6b68      	ldr	r0, [r5, #52]	; 0x34
    3c90:	f009 ffb3 	bl	dbfa <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    3c94:	2224      	movs	r2, #36	; 0x24
    3c96:	a902      	add	r1, sp, #8
    3c98:	4628      	mov	r0, r5
    3c9a:	f00d f810 	bl	10cbe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3c9e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3ca0:	62a8      	str	r0, [r5, #40]	; 0x28
    3ca2:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
    3ca6:	85a8      	strh	r0, [r5, #44]	; 0x2c
    3ca8:	7ae0      	ldrb	r0, [r4, #11]
    3caa:	b168      	cbz	r0, 3cc8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    3cac:	2802      	cmp	r0, #2
    3cae:	d00b      	beq.n	3cc8 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    3cb0:	f05f 0001 	movs.w	r0, #1
    3cb4:	f885 0057 	strb.w	r0, [r5, #87]	; 0x57
    3cb8:	68e0      	ldr	r0, [r4, #12]
    3cba:	65a8      	str	r0, [r5, #88]	; 0x58
    3cbc:	8a20      	ldrh	r0, [r4, #16]
    3cbe:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    3cc2:	b00d      	add	sp, #52	; 0x34
    3cc4:	2000      	movs	r0, #0
    3cc6:	bd30      	pop	{r4, r5, pc}
    3cc8:	2000      	movs	r0, #0
    3cca:	e7f3      	b.n	3cb4 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

00003ccc <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    3ccc:	4a0a      	ldr	r2, [pc, #40]	; (3cf8 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    3cce:	b510      	push	{r4, lr}
    3cd0:	2100      	movs	r1, #0
    3cd2:	7011      	strb	r1, [r2, #0]
    3cd4:	4c09      	ldr	r4, [pc, #36]	; (3cfc <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    3cd6:	6060      	str	r0, [r4, #4]
    3cd8:	f000 f822 	bl	3d20 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    3cdc:	b110      	cbz	r0, 3ce4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    3cde:	f240 312e 	movw	r1, #814	; 0x32e
    3ce2:	e004      	b.n	3cee <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    3ce4:	68a0      	ldr	r0, [r4, #8]
    3ce6:	2800      	cmp	r0, #0
    3ce8:	d104      	bne.n	3cf4 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    3cea:	f240 3131 	movw	r1, #817	; 0x331
    3cee:	202d      	movs	r0, #45	; 0x2d
    3cf0:	f7fd fa38 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3cf4:	bd10      	pop	{r4, pc}
    3cf6:	0000      	.short	0x0000
    3cf8:	20001308 	.word	0x20001308
    3cfc:	200000f0 	.word	0x200000f0

00003d00 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    3d00:	4902      	ldr	r1, [pc, #8]	; (3d0c <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    3d02:	4801      	ldr	r0, [pc, #4]	; (3d08 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    3d04:	6088      	str	r0, [r1, #8]
    3d06:	4770      	bx	lr
    3d08:	00004888 	.word	0x00004888
    3d0c:	200000f0 	.word	0x200000f0

00003d10 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    3d10:	4902      	ldr	r1, [pc, #8]	; (3d1c <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    3d12:	6008      	str	r0, [r1, #0]
    3d14:	6889      	ldr	r1, [r1, #8]
    3d16:	6809      	ldr	r1, [r1, #0]
    3d18:	4708      	bx	r1
    3d1a:	0000      	.short	0x0000
    3d1c:	200000f0 	.word	0x200000f0

00003d20 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    3d20:	4808      	ldr	r0, [pc, #32]	; (3d44 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    3d22:	b510      	push	{r4, lr}
    3d24:	7800      	ldrb	r0, [r0, #0]
    3d26:	b110      	cbz	r0, 3d2e <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    3d28:	240c      	movs	r4, #12
    3d2a:	4620      	mov	r0, r4
    3d2c:	bd10      	pop	{r4, pc}
    3d2e:	2400      	movs	r4, #0
    3d30:	2218      	movs	r2, #24
    3d32:	4621      	mov	r1, r4
    3d34:	4803      	ldr	r0, [pc, #12]	; (3d44 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    3d36:	f00d f83c 	bl	10db2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3d3a:	f004 f8d9 	bl	7ef0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3d3e:	f003 fefd 	bl	7b3c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3d42:	e7f2      	b.n	3d2a <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    3d44:	20001308 	.word	0x20001308

00003d48 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    3d48:	4904      	ldr	r1, [pc, #16]	; (3d5c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    3d4a:	b510      	push	{r4, lr}
    3d4c:	7809      	ldrb	r1, [r1, #0]
    3d4e:	2901      	cmp	r1, #1
    3d50:	d101      	bne.n	3d56 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    3d52:	f000 fbd5 	bl	4500 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    3d56:	2000      	movs	r0, #0
    3d58:	bd10      	pop	{r4, pc}
    3d5a:	0000      	.short	0x0000
    3d5c:	20001308 	.word	0x20001308

00003d60 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    3d60:	4902      	ldr	r1, [pc, #8]	; (3d6c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0xc>)
    3d62:	4801      	ldr	r0, [pc, #4]	; (3d68 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x8>)
    3d64:	6008      	str	r0, [r1, #0]
    3d66:	4770      	bx	lr
    3d68:	0000462d 	.word	0x0000462d
    3d6c:	200000fc 	.word	0x200000fc

00003d70 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    3d70:	b510      	push	{r4, lr}
    3d72:	4604      	mov	r4, r0
    3d74:	7880      	ldrb	r0, [r0, #2]
    3d76:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    3d7a:	b158      	cbz	r0, 3d94 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x24>
    3d7c:	233c      	movs	r3, #60	; 0x3c
    3d7e:	22ff      	movs	r2, #255	; 0xff
    3d80:	4620      	mov	r0, r4
    3d82:	69e1      	ldr	r1, [r4, #28]
    3d84:	f000 fbe2 	bl	454c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a0>
    3d88:	2202      	movs	r2, #2
    3d8a:	4904      	ldr	r1, [pc, #16]	; (3d9c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2c>)
    3d8c:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    3d90:	f00a fc0a 	bl	e5a8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3d94:	2001      	movs	r0, #1
    3d96:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    3d9a:	bd10      	pop	{r4, pc}
    3d9c:	0000ee63 	.word	0x0000ee63
    3da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3da4:	000f      	movs	r7, r1
    3da6:	4604      	mov	r4, r0
    3da8:	d023      	beq.n	3df2 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x82>
    3daa:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3dae:	4605      	mov	r5, r0
    3db0:	f00b f918 	bl	efe4 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    3db4:	b9b0      	cbnz	r0, 3de4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x74>
    3db6:	78a0      	ldrb	r0, [r4, #2]
    3db8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    3dbc:	b350      	cbz	r0, 3e14 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa4>
    3dbe:	4628      	mov	r0, r5
    3dc0:	f00b f8e7 	bl	ef92 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    3dc4:	4606      	mov	r6, r0
    3dc6:	4628      	mov	r0, r5
    3dc8:	f00b f90c 	bl	efe4 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    3dcc:	1a30      	subs	r0, r6, r0
    3dce:	b2c0      	uxtb	r0, r0
    3dd0:	f00b f95d 	bl	f08e <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    3dd4:	4601      	mov	r1, r0
    3dd6:	4835      	ldr	r0, [pc, #212]	; (3eac <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x13c>)
    3dd8:	6842      	ldr	r2, [r0, #4]
    3dda:	4411      	add	r1, r2
    3ddc:	6041      	str	r1, [r0, #4]
    3dde:	4628      	mov	r0, r5
    3de0:	f00b f91e 	bl	f020 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    3de4:	4628      	mov	r0, r5
    3de6:	f00b f8e0 	bl	efaa <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    3dea:	4601      	mov	r1, r0
    3dec:	4620      	mov	r0, r4
    3dee:	f00b f8a8 	bl	ef42 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x118>
    3df2:	4d2f      	ldr	r5, [pc, #188]	; (3eb0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x140>)
    3df4:	f894 605e 	ldrb.w	r6, [r4, #94]	; 0x5e
    3df8:	2100      	movs	r1, #0
    3dfa:	6868      	ldr	r0, [r5, #4]
    3dfc:	8001      	strh	r1, [r0, #0]
    3dfe:	f00b f819 	bl	ee34 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    3e02:	8860      	ldrh	r0, [r4, #2]
    3e04:	2813      	cmp	r0, #19
    3e06:	d013      	beq.n	3e30 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xc0>
    3e08:	dc09      	bgt.n	3e1e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xae>
    3e0a:	2810      	cmp	r0, #16
    3e0c:	d036      	beq.n	3e7c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10c>
    3e0e:	2812      	cmp	r0, #18
    3e10:	d109      	bne.n	3e26 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xb6>
    3e12:	e031      	b.n	3e78 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x108>
    3e14:	4620      	mov	r0, r4
    3e16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3e1a:	f000 bb71 	b.w	4500 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    3e1e:	2815      	cmp	r0, #21
    3e20:	d00f      	beq.n	3e42 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
    3e22:	281d      	cmp	r0, #29
    3e24:	d00d      	beq.n	3e42 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
    3e26:	f240 6173 	movw	r1, #1651	; 0x673
    3e2a:	202d      	movs	r0, #45	; 0x2d
    3e2c:	f7fd f99a 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e30:	2100      	movs	r1, #0
    3e32:	6868      	ldr	r0, [r5, #4]
    3e34:	f00a fa36 	bl	e2a4 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3e38:	2101      	movs	r1, #1
    3e3a:	6868      	ldr	r0, [r5, #4]
    3e3c:	f00a fffa 	bl	ee34 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    3e40:	e020      	b.n	3e84 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
    3e42:	2101      	movs	r1, #1
    3e44:	6868      	ldr	r0, [r5, #4]
    3e46:	f00a fa2d 	bl	e2a4 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3e4a:	2101      	movs	r1, #1
    3e4c:	6868      	ldr	r0, [r5, #4]
    3e4e:	f00a fff1 	bl	ee34 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    3e52:	b136      	cbz	r6, 3e62 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xf2>
    3e54:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    3e58:	6868      	ldr	r0, [r5, #4]
    3e5a:	f00a fa3e 	bl	e2da <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    3e5e:	2101      	movs	r1, #1
    3e60:	e006      	b.n	3e70 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x100>
    3e62:	f104 0158 	add.w	r1, r4, #88	; 0x58
    3e66:	6868      	ldr	r0, [r5, #4]
    3e68:	f00a fa37 	bl	e2da <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    3e6c:	f894 1057 	ldrb.w	r1, [r4, #87]	; 0x57
    3e70:	6868      	ldr	r0, [r5, #4]
    3e72:	f00a fa38 	bl	e2e6 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    3e76:	e005      	b.n	3e84 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
    3e78:	2106      	movs	r1, #6
    3e7a:	e000      	b.n	3e7e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10e>
    3e7c:	2102      	movs	r1, #2
    3e7e:	6868      	ldr	r0, [r5, #4]
    3e80:	f00a fa10 	bl	e2a4 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3e84:	4620      	mov	r0, r4
    3e86:	f000 fcdd 	bl	4844 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x798>
    3e8a:	8860      	ldrh	r0, [r4, #2]
    3e8c:	281d      	cmp	r0, #29
    3e8e:	d007      	beq.n	3ea0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
    3e90:	2815      	cmp	r0, #21
    3e92:	d005      	beq.n	3ea0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
    3e94:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    3e98:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    3e9a:	6868      	ldr	r0, [r5, #4]
    3e9c:	f00a f9f2 	bl	e284 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>
    3ea0:	4639      	mov	r1, r7
    3ea2:	4620      	mov	r0, r4
    3ea4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3ea8:	f000 b9f4 	b.w	4294 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e8>
    3eac:	20001308 	.word	0x20001308
    3eb0:	200000f0 	.word	0x200000f0
    3eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3eb8:	4d2f      	ldr	r5, [pc, #188]	; (3f78 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x208>)
    3eba:	4680      	mov	r8, r0
    3ebc:	7828      	ldrb	r0, [r5, #0]
    3ebe:	2802      	cmp	r0, #2
    3ec0:	d005      	beq.n	3ece <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
    3ec2:	7828      	ldrb	r0, [r5, #0]
    3ec4:	2803      	cmp	r0, #3
    3ec6:	d002      	beq.n	3ece <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
    3ec8:	f640 512d 	movw	r1, #3373	; 0xd2d
    3ecc:	e02b      	b.n	3f26 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1b6>
    3ece:	4c2b      	ldr	r4, [pc, #172]	; (3f7c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x20c>)
    3ed0:	6826      	ldr	r6, [r4, #0]
    3ed2:	7b30      	ldrb	r0, [r6, #12]
    3ed4:	b118      	cbz	r0, 3ede <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x16e>
    3ed6:	f7fe ff83 	bl	2de0 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    3eda:	f886 002e 	strb.w	r0, [r6, #46]	; 0x2e
    3ede:	f8d4 c004 	ldr.w	ip, [r4, #4]
    3ee2:	2700      	movs	r7, #0
    3ee4:	f1b8 0f00 	cmp.w	r8, #0
    3ee8:	f89c 0000 	ldrb.w	r0, [ip]
    3eec:	f000 060f 	and.w	r6, r0, #15
    3ef0:	d027      	beq.n	3f42 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    3ef2:	6821      	ldr	r1, [r4, #0]
    3ef4:	09c0      	lsrs	r0, r0, #7
    3ef6:	f101 0351 	add.w	r3, r1, #81	; 0x51
    3efa:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    3efe:	f10c 0109 	add.w	r1, ip, #9
    3f02:	f009 fed2 	bl	dcaa <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    3f06:	b1e0      	cbz	r0, 3f42 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    3f08:	4639      	mov	r1, r7
    3f0a:	6860      	ldr	r0, [r4, #4]
    3f0c:	f00a f9aa 	bl	e264 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>
    3f10:	b1b8      	cbz	r0, 3f42 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    3f12:	782a      	ldrb	r2, [r5, #0]
    3f14:	6820      	ldr	r0, [r4, #0]
    3f16:	4631      	mov	r1, r6
    3f18:	2a02      	cmp	r2, #2
    3f1a:	d007      	beq.n	3f2c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
    3f1c:	782a      	ldrb	r2, [r5, #0]
    3f1e:	2a03      	cmp	r2, #3
    3f20:	d004      	beq.n	3f2c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
    3f22:	f640 5106 	movw	r1, #3334	; 0xd06
    3f26:	202d      	movs	r0, #45	; 0x2d
    3f28:	f7fd f91c 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f2c:	68a2      	ldr	r2, [r4, #8]
    3f2e:	782b      	ldrb	r3, [r5, #0]
    3f30:	6952      	ldr	r2, [r2, #20]
    3f32:	f06f 0607 	mvn.w	r6, #7
    3f36:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    3f3a:	58d2      	ldr	r2, [r2, r3]
    3f3c:	4790      	blx	r2
    3f3e:	4606      	mov	r6, r0
    3f40:	e000      	b.n	3f44 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d4>
    3f42:	2601      	movs	r6, #1
    3f44:	7ba8      	ldrb	r0, [r5, #14]
    3f46:	b118      	cbz	r0, 3f50 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e0>
    3f48:	f003 ffd2 	bl	7ef0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3f4c:	f003 fdf6 	bl	7b3c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3f50:	2e00      	cmp	r6, #0
    3f52:	d00f      	beq.n	3f74 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x204>
    3f54:	6820      	ldr	r0, [r4, #0]
    3f56:	f00b f8b0 	bl	f0ba <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    3f5a:	b130      	cbz	r0, 3f6a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1fa>
    3f5c:	f003 ffea 	bl	7f34 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3f60:	68a0      	ldr	r0, [r4, #8]
    3f62:	6880      	ldr	r0, [r0, #8]
    3f64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3f68:	4700      	bx	r0
    3f6a:	6820      	ldr	r0, [r4, #0]
    3f6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3f70:	f000 bac6 	b.w	4500 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    3f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3f78:	20001308 	.word	0x20001308
    3f7c:	200000f0 	.word	0x200000f0
    3f80:	b510      	push	{r4, lr}
    3f82:	2903      	cmp	r1, #3
    3f84:	d002      	beq.n	3f8c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x21c>
    3f86:	2905      	cmp	r1, #5
    3f88:	d10a      	bne.n	3fa0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x230>
    3f8a:	e002      	b.n	3f92 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x222>
    3f8c:	f000 fbb2 	bl	46f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x648>
    3f90:	e003      	b.n	3f9a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x22a>
    3f92:	4904      	ldr	r1, [pc, #16]	; (3fa4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x234>)
    3f94:	6809      	ldr	r1, [r1, #0]
    3f96:	b109      	cbz	r1, 3f9c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x22c>
    3f98:	4788      	blx	r1
    3f9a:	b108      	cbz	r0, 3fa0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x230>
    3f9c:	2000      	movs	r0, #0
    3f9e:	bd10      	pop	{r4, pc}
    3fa0:	2001      	movs	r0, #1
    3fa2:	bd10      	pop	{r4, pc}
    3fa4:	200000fc 	.word	0x200000fc
    3fa8:	4a09      	ldr	r2, [pc, #36]	; (3fd0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x260>)
    3faa:	0003      	movs	r3, r0
    3fac:	6810      	ldr	r0, [r2, #0]
    3fae:	d001      	beq.n	3fb4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x244>
    3fb0:	f000 baa6 	b.w	4500 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    3fb4:	2900      	cmp	r1, #0
    3fb6:	d009      	beq.n	3fcc <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x25c>
    3fb8:	6891      	ldr	r1, [r2, #8]
    3fba:	4a06      	ldr	r2, [pc, #24]	; (3fd4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x264>)
    3fbc:	6909      	ldr	r1, [r1, #16]
    3fbe:	7812      	ldrb	r2, [r2, #0]
    3fc0:	f06f 030f 	mvn.w	r3, #15
    3fc4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3fc8:	5889      	ldr	r1, [r1, r2]
    3fca:	4708      	bx	r1
    3fcc:	4770      	bx	lr
    3fce:	0000      	.short	0x0000
    3fd0:	200000f0 	.word	0x200000f0
    3fd4:	20001308 	.word	0x20001308
    3fd8:	b570      	push	{r4, r5, r6, lr}
    3fda:	4604      	mov	r4, r0
    3fdc:	8840      	ldrh	r0, [r0, #2]
    3fde:	2810      	cmp	r0, #16
    3fe0:	d019      	beq.n	4016 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x16>
    3fe2:	4d10      	ldr	r5, [pc, #64]	; (4024 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x24>)
    3fe4:	7ba8      	ldrb	r0, [r5, #14]
    3fe6:	b120      	cbz	r0, 3ff2 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x282>
    3fe8:	f003 fdc8 	bl	7b7c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    3fec:	2040      	movs	r0, #64	; 0x40
    3fee:	f003 ff8d 	bl	7f0c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    3ff2:	480d      	ldr	r0, [pc, #52]	; (4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>)
    3ff4:	6840      	ldr	r0, [r0, #4]
    3ff6:	f004 fa0f 	bl	8418 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    3ffa:	78a0      	ldrb	r0, [r4, #2]
    3ffc:	0740      	lsls	r0, r0, #29
    3ffe:	d404      	bmi.n	400a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa>
    4000:	2100      	movs	r1, #0
    4002:	7922      	ldrb	r2, [r4, #4]
    4004:	4608      	mov	r0, r1
    4006:	f004 fa8f 	bl	8528 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    400a:	2000      	movs	r0, #0
    400c:	f004 f8b4 	bl	8178 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    4010:	2002      	movs	r0, #2
    4012:	7028      	strb	r0, [r5, #0]
    4014:	bd70      	pop	{r4, r5, r6, pc}
    4016:	4620      	mov	r0, r4
    4018:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    401c:	2101      	movs	r1, #1
    401e:	f7ff bebf 	b.w	3da0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    4022:	0000      	.short	0x0000
    4024:	20001308 	.word	0x20001308
    4028:	200000f0 	.word	0x200000f0
    402c:	b510      	push	{r4, lr}
    402e:	4c12      	ldr	r4, [pc, #72]	; (4078 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x78>)
    4030:	6820      	ldr	r0, [r4, #0]
    4032:	f000 f825 	bl	4080 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x80>
    4036:	6820      	ldr	r0, [r4, #0]
    4038:	f00b f83f 	bl	f0ba <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    403c:	2800      	cmp	r0, #0
    403e:	6820      	ldr	r0, [r4, #0]
    4040:	d00b      	beq.n	405a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5a>
    4042:	490e      	ldr	r1, [pc, #56]	; (407c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x7c>)
    4044:	780a      	ldrb	r2, [r1, #0]
    4046:	2a02      	cmp	r2, #2
    4048:	d00b      	beq.n	4062 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x62>
    404a:	780a      	ldrb	r2, [r1, #0]
    404c:	2a03      	cmp	r2, #3
    404e:	d008      	beq.n	4062 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x62>
    4050:	f640 4137 	movw	r1, #3127	; 0xc37
    4054:	202d      	movs	r0, #45	; 0x2d
    4056:	f7fd f885 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    405a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    405e:	f000 ba4f 	b.w	4500 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    4062:	68a2      	ldr	r2, [r4, #8]
    4064:	7809      	ldrb	r1, [r1, #0]
    4066:	68d2      	ldr	r2, [r2, #12]
    4068:	f06f 0307 	mvn.w	r3, #7
    406c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    4070:	5851      	ldr	r1, [r2, r1]
    4072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4076:	4708      	bx	r1
    4078:	200000f0 	.word	0x200000f0
    407c:	20001308 	.word	0x20001308
    4080:	b510      	push	{r4, lr}
    4082:	7b01      	ldrb	r1, [r0, #12]
    4084:	b121      	cbz	r1, 4090 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x90>
    4086:	4604      	mov	r4, r0
    4088:	f7fe feaa 	bl	2de0 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    408c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    4090:	4805      	ldr	r0, [pc, #20]	; (40a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa8>)
    4092:	7b80      	ldrb	r0, [r0, #14]
    4094:	2800      	cmp	r0, #0
    4096:	d005      	beq.n	40a4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa4>
    4098:	f003 ff2a 	bl	7ef0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    409c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    40a0:	f003 bd4c 	b.w	7b3c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    40a4:	bd10      	pop	{r4, pc}
    40a6:	0000      	.short	0x0000
    40a8:	20001308 	.word	0x20001308

000040ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    40ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    40b0:	4d5c      	ldr	r5, [pc, #368]	; (4224 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>)
    40b2:	4604      	mov	r4, r0
    40b4:	b086      	sub	sp, #24
    40b6:	7828      	ldrb	r0, [r5, #0]
    40b8:	bbe8      	cbnz	r0, 4136 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8a>
    40ba:	7820      	ldrb	r0, [r4, #0]
    40bc:	28ff      	cmp	r0, #255	; 0xff
    40be:	d04b      	beq.n	4158 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xac>
    40c0:	f04f 0800 	mov.w	r8, #0
    40c4:	f8a5 800c 	strh.w	r8, [r5, #12]
    40c8:	f8c5 8004 	str.w	r8, [r5, #4]
    40cc:	f885 8001 	strb.w	r8, [r5, #1]
    40d0:	f885 8002 	strb.w	r8, [r5, #2]
    40d4:	f884 8069 	strb.w	r8, [r4, #105]	; 0x69
    40d8:	4b53      	ldr	r3, [pc, #332]	; (4228 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17c>)
    40da:	4e54      	ldr	r6, [pc, #336]	; (422c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x180>)
    40dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    40de:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    40e2:	68b0      	ldr	r0, [r6, #8]
    40e4:	6840      	ldr	r0, [r0, #4]
    40e6:	9003      	str	r0, [sp, #12]
    40e8:	4668      	mov	r0, sp
    40ea:	f004 f819 	bl	8120 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    40ee:	f004 f8ed 	bl	82cc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    40f2:	f003 fefd 	bl	7ef0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    40f6:	f003 fd21 	bl	7b3c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    40fa:	484d      	ldr	r0, [pc, #308]	; (4230 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>)
    40fc:	f004 fa46 	bl	858c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    4100:	484c      	ldr	r0, [pc, #304]	; (4234 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x188>)
    4102:	f004 fa4d 	bl	85a0 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    4106:	f104 0028 	add.w	r0, r4, #40	; 0x28
    410a:	4607      	mov	r7, r0
    410c:	f00a ff88 	bl	f020 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    4110:	4638      	mov	r0, r7
    4112:	f00a ff4a 	bl	efaa <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    4116:	4601      	mov	r1, r0
    4118:	4620      	mov	r0, r4
    411a:	f00a ff12 	bl	ef42 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x118>
    411e:	f994 000e 	ldrsb.w	r0, [r4, #14]
    4122:	f004 f957 	bl	83d4 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    4126:	7921      	ldrb	r1, [r4, #4]
    4128:	2000      	movs	r0, #0
    412a:	f003 ff8d 	bl	8048 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    412e:	2101      	movs	r1, #1
    4130:	60a8      	str	r0, [r5, #8]
    4132:	b1a8      	cbz	r0, 4160 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb4>
    4134:	e000      	b.n	4138 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c>
    4136:	e00f      	b.n	4158 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xac>
    4138:	f104 0138 	add.w	r1, r4, #56	; 0x38
    413c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    413e:	f009 fd23 	bl	db88 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    4142:	4607      	mov	r7, r0
    4144:	f104 0140 	add.w	r1, r4, #64	; 0x40
    4148:	6b60      	ldr	r0, [r4, #52]	; 0x34
    414a:	f009 fd20 	bl	db8e <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    414e:	b14f      	cbz	r7, 4164 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb8>
    4150:	f894 1020 	ldrb.w	r1, [r4, #32]
    4154:	b951      	cbnz	r1, 416c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc0>
    4156:	e005      	b.n	4164 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb8>
    4158:	200c      	movs	r0, #12
    415a:	b006      	add	sp, #24
    415c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4160:	7029      	strb	r1, [r5, #0]
    4162:	e05c      	b.n	421e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    4164:	b120      	cbz	r0, 4170 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc4>
    4166:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    416a:	b108      	cbz	r0, 4170 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc4>
    416c:	2701      	movs	r7, #1
    416e:	e000      	b.n	4172 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    4170:	2700      	movs	r7, #0
    4172:	7ea0      	ldrb	r0, [r4, #26]
    4174:	b920      	cbnz	r0, 4180 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd4>
    4176:	7e20      	ldrb	r0, [r4, #24]
    4178:	b910      	cbnz	r0, 4180 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd4>
    417a:	78a0      	ldrb	r0, [r4, #2]
    417c:	0740      	lsls	r0, r0, #29
    417e:	d523      	bpl.n	41c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    4180:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
    4184:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    4188:	4050      	eors	r0, r2
    418a:	ea70 0101 	orns	r1, r0, r1
    418e:	d006      	beq.n	419e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf2>
    4190:	f00c fc03 	bl	1099a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4194:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    4198:	1a80      	subs	r0, r0, r2
    419a:	4199      	sbcs	r1, r3
    419c:	d200      	bcs.n	41a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf4>
    419e:	b19f      	cbz	r7, 41c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    41a0:	f7fe fd00 	bl	2ba4 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    41a4:	4924      	ldr	r1, [pc, #144]	; (4238 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x18c>)
    41a6:	fba0 2301 	umull	r2, r3, r0, r1
    41aa:	f104 0048 	add.w	r0, r4, #72	; 0x48
    41ae:	f00a fed3 	bl	ef58 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x12e>
    41b2:	2101      	movs	r1, #1
    41b4:	4620      	mov	r0, r4
    41b6:	f00a fe88 	bl	eeca <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa0>
    41ba:	78a0      	ldrb	r0, [r4, #2]
    41bc:	0740      	lsls	r0, r0, #29
    41be:	d503      	bpl.n	41c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x11c>
    41c0:	2101      	movs	r1, #1
    41c2:	4620      	mov	r0, r4
    41c4:	f000 fac8 	bl	4758 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6ac>
    41c8:	6870      	ldr	r0, [r6, #4]
    41ca:	1cc0      	adds	r0, r0, #3
    41cc:	f009 fdf8 	bl	ddc0 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    41d0:	73a8      	strb	r0, [r5, #14]
    41d2:	78a0      	ldrb	r0, [r4, #2]
    41d4:	07c0      	lsls	r0, r0, #31
    41d6:	d022      	beq.n	421e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    41d8:	f8cd 8010 	str.w	r8, [sp, #16]
    41dc:	20ff      	movs	r0, #255	; 0xff
    41de:	f8cd 8014 	str.w	r8, [sp, #20]
    41e2:	73e8      	strb	r0, [r5, #15]
    41e4:	69e6      	ldr	r6, [r4, #28]
    41e6:	f106 070a 	add.w	r7, r6, #10
    41ea:	e013      	b.n	4214 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    41ec:	9c04      	ldr	r4, [sp, #16]
    41ee:	42b4      	cmp	r4, r6
    41f0:	d010      	beq.n	4214 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    41f2:	7a72      	ldrb	r2, [r6, #9]
    41f4:	7a60      	ldrb	r0, [r4, #9]
    41f6:	463b      	mov	r3, r7
    41f8:	f104 010a 	add.w	r1, r4, #10
    41fc:	f009 fd55 	bl	dcaa <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    4200:	b140      	cbz	r0, 4214 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x168>
    4202:	78a0      	ldrb	r0, [r4, #2]
    4204:	73e8      	strb	r0, [r5, #15]
    4206:	f8d4 0003 	ldr.w	r0, [r4, #3]
    420a:	6128      	str	r0, [r5, #16]
    420c:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    4210:	82a8      	strh	r0, [r5, #20]
    4212:	e004      	b.n	421e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x172>
    4214:	a804      	add	r0, sp, #16
    4216:	f7fd fb25 	bl	1864 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    421a:	2800      	cmp	r0, #0
    421c:	d0e6      	beq.n	41ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x140>
    421e:	2000      	movs	r0, #0
    4220:	e79b      	b.n	415a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    4222:	0000      	.short	0x0000
    4224:	20001308 	.word	0x20001308
    4228:	00004868 	.word	0x00004868
    422c:	200000f0 	.word	0x200000f0
    4230:	8e89bed6 	.word	0x8e89bed6
    4234:	00555555 	.word	0x00555555
    4238:	000f4240 	.word	0x000f4240
    423c:	b510      	push	{r4, lr}
    423e:	4604      	mov	r4, r0
    4240:	f7ff ff34 	bl	40ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    4244:	2800      	cmp	r0, #0
    4246:	d108      	bne.n	425a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ae>
    4248:	4804      	ldr	r0, [pc, #16]	; (425c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1b0>)
    424a:	7800      	ldrb	r0, [r0, #0]
    424c:	2801      	cmp	r0, #1
    424e:	d003      	beq.n	4258 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ac>
    4250:	2100      	movs	r1, #0
    4252:	4620      	mov	r0, r4
    4254:	f7ff fda4 	bl	3da0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    4258:	2000      	movs	r0, #0
    425a:	bd10      	pop	{r4, pc}
    425c:	20001308 	.word	0x20001308
    4260:	480a      	ldr	r0, [pc, #40]	; (428c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e0>)
    4262:	b510      	push	{r4, lr}
    4264:	490a      	ldr	r1, [pc, #40]	; (4290 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1e4>)
    4266:	6804      	ldr	r4, [r0, #0]
    4268:	7808      	ldrb	r0, [r1, #0]
    426a:	2800      	cmp	r0, #0
    426c:	d00d      	beq.n	428a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1de>
    426e:	7808      	ldrb	r0, [r1, #0]
    4270:	2802      	cmp	r0, #2
    4272:	d002      	beq.n	427a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1ce>
    4274:	7808      	ldrb	r0, [r1, #0]
    4276:	2803      	cmp	r0, #3
    4278:	d102      	bne.n	4280 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1d4>
    427a:	4620      	mov	r0, r4
    427c:	f7ff ff00 	bl	4080 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x80>
    4280:	4620      	mov	r0, r4
    4282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4286:	f000 b93b 	b.w	4500 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>
    428a:	bd10      	pop	{r4, pc}
    428c:	200000f0 	.word	0x200000f0
    4290:	20001308 	.word	0x20001308
    4294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4298:	4604      	mov	r4, r0
    429a:	4829      	ldr	r0, [pc, #164]	; (4340 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x294>)
    429c:	460d      	mov	r5, r1
    429e:	6840      	ldr	r0, [r0, #4]
    42a0:	f004 f8ba 	bl	8418 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    42a4:	4e27      	ldr	r6, [pc, #156]	; (4344 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x298>)
    42a6:	2004      	movs	r0, #4
    42a8:	7030      	strb	r0, [r6, #0]
    42aa:	b355      	cbz	r5, 4302 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x256>
    42ac:	8860      	ldrh	r0, [r4, #2]
    42ae:	2810      	cmp	r0, #16
    42b0:	d023      	beq.n	42fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x24e>
    42b2:	f104 0028 	add.w	r0, r4, #40	; 0x28
    42b6:	4680      	mov	r8, r0
    42b8:	68b5      	ldr	r5, [r6, #8]
    42ba:	f00a fe6a 	bl	ef92 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    42be:	4607      	mov	r7, r0
    42c0:	4640      	mov	r0, r8
    42c2:	f00a fe8f 	bl	efe4 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    42c6:	1a38      	subs	r0, r7, r0
    42c8:	1e40      	subs	r0, r0, #1
    42ca:	b2c0      	uxtb	r0, r0
    42cc:	8861      	ldrh	r1, [r4, #2]
    42ce:	2228      	movs	r2, #40	; 0x28
    42d0:	f000 fb06 	bl	48e0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    42d4:	4405      	add	r5, r0
    42d6:	78a0      	ldrb	r0, [r4, #2]
    42d8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    42dc:	b130      	cbz	r0, 42ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x240>
    42de:	6870      	ldr	r0, [r6, #4]
    42e0:	4405      	add	r5, r0
    42e2:	f00a fed8 	bl	f096 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    42e6:	4428      	add	r0, r5
    42e8:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    42ec:	7922      	ldrb	r2, [r4, #4]
    42ee:	4629      	mov	r1, r5
    42f0:	2000      	movs	r0, #0
    42f2:	f004 f8a7 	bl	8444 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    42f6:	b920      	cbnz	r0, 4302 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x256>
    42f8:	e00c      	b.n	4314 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x268>
    42fa:	7921      	ldrb	r1, [r4, #4]
    42fc:	2000      	movs	r0, #0
    42fe:	f003 fe69 	bl	7fd4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    4302:	8860      	ldrh	r0, [r4, #2]
    4304:	2813      	cmp	r0, #19
    4306:	d011      	beq.n	432c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    4308:	dc07      	bgt.n	431a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x26e>
    430a:	2810      	cmp	r0, #16
    430c:	d015      	beq.n	433a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x28e>
    430e:	2812      	cmp	r0, #18
    4310:	d107      	bne.n	4322 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x276>
    4312:	e00b      	b.n	432c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    4314:	f640 51a8 	movw	r1, #3496	; 0xda8
    4318:	e005      	b.n	4326 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27a>
    431a:	2815      	cmp	r0, #21
    431c:	d006      	beq.n	432c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    431e:	281d      	cmp	r0, #29
    4320:	d004      	beq.n	432c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x280>
    4322:	f640 51bc 	movw	r1, #3516	; 0xdbc
    4326:	202d      	movs	r0, #45	; 0x2d
    4328:	f7fc ff1c 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    432c:	7922      	ldrb	r2, [r4, #4]
    432e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4332:	2101      	movs	r1, #1
    4334:	2000      	movs	r0, #0
    4336:	f004 b8f7 	b.w	8528 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    433a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    433e:	0000      	.short	0x0000
    4340:	200000f0 	.word	0x200000f0
    4344:	20001308 	.word	0x20001308
    4348:	b538      	push	{r3, r4, r5, lr}
    434a:	4604      	mov	r4, r0
    434c:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
    4350:	460b      	mov	r3, r1
    4352:	f88d 0000 	strb.w	r0, [sp]
    4356:	9800      	ldr	r0, [sp, #0]
    4358:	9000      	str	r0, [sp, #0]
    435a:	f89d 0000 	ldrb.w	r0, [sp]
    435e:	2800      	cmp	r0, #0
    4360:	d13a      	bne.n	43d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x32c>
    4362:	7820      	ldrb	r0, [r4, #0]
    4364:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    4368:	2bff      	cmp	r3, #255	; 0xff
    436a:	d010      	beq.n	438e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2e2>
    436c:	f104 02bf 	add.w	r2, r4, #191	; 0xbf
    4370:	1e51      	subs	r1, r2, #1
    4372:	4618      	mov	r0, r3
    4374:	f7fe fbfc 	bl	2b70 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    4378:	b130      	cbz	r0, 4388 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2dc>
    437a:	f894 00be 	ldrb.w	r0, [r4, #190]	; 0xbe
    437e:	f040 0002 	orr.w	r0, r0, #2
    4382:	f884 00be 	strb.w	r0, [r4, #190]	; 0xbe
    4386:	e011      	b.n	43ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x300>
    4388:	f241 0118 	movw	r1, #4120	; 0x1018
    438c:	e021      	b.n	43d2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x326>
    438e:	4813      	ldr	r0, [pc, #76]	; (43dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x330>)
    4390:	6840      	ldr	r0, [r0, #4]
    4392:	7801      	ldrb	r1, [r0, #0]
    4394:	f3c1 1180 	ubfx	r1, r1, #6, #1
    4398:	f884 10be 	strb.w	r1, [r4, #190]	; 0xbe
    439c:	f8d0 1003 	ldr.w	r1, [r0, #3]
    43a0:	f8c4 10bf 	str.w	r1, [r4, #191]	; 0xbf
    43a4:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    43a8:	f8a4 00c3 	strh.w	r0, [r4, #195]	; 0xc3
    43ac:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
    43b0:	287f      	cmp	r0, #127	; 0x7f
    43b2:	d00c      	beq.n	43ce <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x322>
    43b4:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5
    43b8:	207f      	movs	r0, #127	; 0x7f
    43ba:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    43be:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    43c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    43c6:	2202      	movs	r2, #2
    43c8:	4905      	ldr	r1, [pc, #20]	; (43e0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x334>)
    43ca:	f00a b8ed 	b.w	e5a8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    43ce:	f640 616c 	movw	r1, #3692	; 0xe6c
    43d2:	202d      	movs	r0, #45	; 0x2d
    43d4:	f7fc fec6 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    43d8:	bd38      	pop	{r3, r4, r5, pc}
    43da:	0000      	.short	0x0000
    43dc:	200000f0 	.word	0x200000f0
    43e0:	0000eeb3 	.word	0x0000eeb3
    43e4:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    43e8:	4616      	mov	r6, r2
    43ea:	4604      	mov	r4, r0
    43ec:	2903      	cmp	r1, #3
    43ee:	d004      	beq.n	43fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
    43f0:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    43f4:	b108      	cbz	r0, 43fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34e>
    43f6:	2001      	movs	r0, #1
    43f8:	e000      	b.n	43fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x350>
    43fa:	2000      	movs	r0, #0
    43fc:	2500      	movs	r5, #0
    43fe:	2903      	cmp	r1, #3
    4400:	d003      	beq.n	440a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35e>
    4402:	2701      	movs	r7, #1
    4404:	2905      	cmp	r1, #5
    4406:	d005      	beq.n	4414 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x368>
    4408:	e008      	b.n	441c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x370>
    440a:	78a1      	ldrb	r1, [r4, #2]
    440c:	2702      	movs	r7, #2
    440e:	f3c1 0140 	ubfx	r1, r1, #1, #1
    4412:	e001      	b.n	4418 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x36c>
    4414:	78a1      	ldrb	r1, [r4, #2]
    4416:	07c9      	lsls	r1, r1, #31
    4418:	2900      	cmp	r1, #0
    441a:	d06b      	beq.n	44f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    441c:	2800      	cmp	r0, #0
    441e:	d169      	bne.n	44f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    4420:	4835      	ldr	r0, [pc, #212]	; (44f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x44c>)
    4422:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 44fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x450>
    4426:	7b80      	ldrb	r0, [r0, #14]
    4428:	b180      	cbz	r0, 444c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a0>
    442a:	f009 fccc 	bl	ddc6 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    442e:	7030      	strb	r0, [r6, #0]
    4430:	28ff      	cmp	r0, #255	; 0xff
    4432:	d014      	beq.n	445e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    4434:	b2c0      	uxtb	r0, r0
    4436:	466a      	mov	r2, sp
    4438:	a902      	add	r1, sp, #8
    443a:	f7fe fb99 	bl	2b70 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    443e:	b148      	cbz	r0, 4454 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    4440:	4669      	mov	r1, sp
    4442:	f89d 0008 	ldrb.w	r0, [sp, #8]
    4446:	f00a fbde 	bl	ec06 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    444a:	4605      	mov	r5, r0
    444c:	7830      	ldrb	r0, [r6, #0]
    444e:	28ff      	cmp	r0, #255	; 0xff
    4450:	d005      	beq.n	445e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3b2>
    4452:	e00d      	b.n	4470 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3c4>
    4454:	f640 719b 	movw	r1, #3995	; 0xf9b
    4458:	202d      	movs	r0, #45	; 0x2d
    445a:	f7fc fe83 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    445e:	f8d9 1004 	ldr.w	r1, [r9, #4]
    4462:	f811 0b03 	ldrb.w	r0, [r1], #3
    4466:	f3c0 1080 	ubfx	r0, r0, #6, #1
    446a:	f00a fbcc 	bl	ec06 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    446e:	4605      	mov	r5, r0
    4470:	f8d9 1004 	ldr.w	r1, [r9, #4]
    4474:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
    4478:	f104 0358 	add.w	r3, r4, #88	; 0x58
    447c:	f811 0b03 	ldrb.w	r0, [r1], #3
    4480:	f3c0 1080 	ubfx	r0, r0, #6, #1
    4484:	f009 fc11 	bl	dcaa <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    4488:	f8d9 1004 	ldr.w	r1, [r9, #4]
    448c:	4680      	mov	r8, r0
    448e:	f811 0b03 	ldrb.w	r0, [r1], #3
    4492:	f3c0 1080 	ubfx	r0, r0, #6, #1
    4496:	f009 fca0 	bl	ddda <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    449a:	4681      	mov	r9, r0
    449c:	f7fe fb88 	bl	2bb0 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    44a0:	b138      	cbz	r0, 44b2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x406>
    44a2:	4648      	mov	r0, r9
    44a4:	f7fe fb44 	bl	2b30 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    44a8:	b118      	cbz	r0, 44b2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x406>
    44aa:	2110      	movs	r1, #16
    44ac:	f009 fe40 	bl	e130 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    44b0:	b138      	cbz	r0, 44c2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x416>
    44b2:	2100      	movs	r1, #0
    44b4:	7830      	ldrb	r0, [r6, #0]
    44b6:	28ff      	cmp	r0, #255	; 0xff
    44b8:	d00c      	beq.n	44d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x428>
    44ba:	f1b8 0f00 	cmp.w	r8, #0
    44be:	d105      	bne.n	44cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x420>
    44c0:	e001      	b.n	44c6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x41a>
    44c2:	2101      	movs	r1, #1
    44c4:	e7f6      	b.n	44b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x408>
    44c6:	7e62      	ldrb	r2, [r4, #25]
    44c8:	4282      	cmp	r2, r0
    44ca:	d101      	bne.n	44d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x424>
    44cc:	2001      	movs	r0, #1
    44ce:	e003      	b.n	44d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
    44d0:	2000      	movs	r0, #0
    44d2:	e001      	b.n	44d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42c>
    44d4:	ea28 0001 	bic.w	r0, r8, r1
    44d8:	78a2      	ldrb	r2, [r4, #2]
    44da:	0752      	lsls	r2, r2, #29
    44dc:	d501      	bpl.n	44e2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x436>
    44de:	b930      	cbnz	r0, 44ee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x442>
    44e0:	e008      	b.n	44f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    44e2:	b939      	cbnz	r1, 44f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    44e4:	b91d      	cbnz	r5, 44ee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x442>
    44e6:	7be0      	ldrb	r0, [r4, #15]
    44e8:	b108      	cbz	r0, 44ee <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x442>
    44ea:	42b8      	cmp	r0, r7
    44ec:	d102      	bne.n	44f4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x448>
    44ee:	2001      	movs	r0, #1
    44f0:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    44f4:	2000      	movs	r0, #0
    44f6:	e7fb      	b.n	44f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x444>
    44f8:	20001308 	.word	0x20001308
    44fc:	200000f0 	.word	0x200000f0
    4500:	b570      	push	{r4, r5, r6, lr}
    4502:	4604      	mov	r4, r0
    4504:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    4506:	4d10      	ldr	r5, [pc, #64]	; (4548 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x49c>)
    4508:	1c40      	adds	r0, r0, #1
    450a:	8620      	strh	r0, [r4, #48]	; 0x30
    450c:	7ba8      	ldrb	r0, [r5, #14]
    450e:	2600      	movs	r6, #0
    4510:	b120      	cbz	r0, 451c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x470>
    4512:	f003 fced 	bl	7ef0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    4516:	f003 fb11 	bl	7b3c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    451a:	73ae      	strb	r6, [r5, #14]
    451c:	702e      	strb	r6, [r5, #0]
    451e:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
    4522:	b108      	cbz	r0, 4528 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x47c>
    4524:	2101      	movs	r1, #1
    4526:	e00a      	b.n	453e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x492>
    4528:	7b60      	ldrb	r0, [r4, #13]
    452a:	b138      	cbz	r0, 453c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x490>
    452c:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    452e:	4288      	cmp	r0, r1
    4530:	d804      	bhi.n	453c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x490>
    4532:	2101      	movs	r1, #1
    4534:	4620      	mov	r0, r4
    4536:	f00a fdd2 	bl	f0de <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    453a:	bd70      	pop	{r4, r5, r6, pc}
    453c:	2100      	movs	r1, #0
    453e:	4620      	mov	r0, r4
    4540:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4544:	f00a bdcb 	b.w	f0de <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    4548:	20001308 	.word	0x20001308
    454c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4550:	4604      	mov	r4, r0
    4552:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    4556:	8808      	ldrh	r0, [r1, #0]
    4558:	f8a4 0076 	strh.w	r0, [r4, #118]	; 0x76
    455c:	20ff      	movs	r0, #255	; 0xff
    455e:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93
    4562:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4566:	4616      	mov	r6, r2
    4568:	460d      	mov	r5, r1
    456a:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
    456e:	2b00      	cmp	r3, #0
    4570:	d14b      	bne.n	460a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x55e>
    4572:	6928      	ldr	r0, [r5, #16]
    4574:	f009 fc6a 	bl	de4c <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    4578:	f8a4 008c 	strh.w	r0, [r4, #140]	; 0x8c
    457c:	8b28      	ldrh	r0, [r5, #24]
    457e:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
    4582:	8b68      	ldrh	r0, [r5, #26]
    4584:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
    4588:	f895 021b 	ldrb.w	r0, [r5, #539]	; 0x21b
    458c:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
    4590:	7e20      	ldrb	r0, [r4, #24]
    4592:	f104 0151 	add.w	r1, r4, #81	; 0x51
    4596:	460f      	mov	r7, r1
    4598:	2500      	movs	r5, #0
    459a:	b120      	cbz	r0, 45a6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4fa>
    459c:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    45a0:	f00a fb5d 	bl	ec5e <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    45a4:	b940      	cbnz	r0, 45b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x50c>
    45a6:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    45aa:	b170      	cbz	r0, 45ca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51e>
    45ac:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    45b0:	4639      	mov	r1, r7
    45b2:	f00a fb4b 	bl	ec4c <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x46>
    45b6:	b140      	cbz	r0, 45ca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51e>
    45b8:	f8d4 0051 	ldr.w	r0, [r4, #81]	; 0x51
    45bc:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    45c0:	f8b4 0055 	ldrh.w	r0, [r4, #85]	; 0x55
    45c4:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
    45c8:	e003      	b.n	45d2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x526>
    45ca:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    45ce:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
    45d2:	4815      	ldr	r0, [pc, #84]	; (4628 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x57c>)
    45d4:	2eff      	cmp	r6, #255	; 0xff
    45d6:	6840      	ldr	r0, [r0, #4]
    45d8:	7801      	ldrb	r1, [r0, #0]
    45da:	f3c1 1180 	ubfx	r1, r1, #6, #1
    45de:	f884 1079 	strb.w	r1, [r4, #121]	; 0x79
    45e2:	f850 1f03 	ldr.w	r1, [r0, #3]!
    45e6:	d017      	beq.n	4618 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x56c>
    45e8:	f8c4 1086 	str.w	r1, [r4, #134]	; 0x86
    45ec:	8880      	ldrh	r0, [r0, #4]
    45ee:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    45f2:	f104 027a 	add.w	r2, r4, #122	; 0x7a
    45f6:	1e51      	subs	r1, r2, #1
    45f8:	4630      	mov	r0, r6
    45fa:	f7fe fab9 	bl	2b70 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    45fe:	b130      	cbz	r0, 460e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x562>
    4600:	f814 0f79 	ldrb.w	r0, [r4, #121]!
    4604:	f040 0002 	orr.w	r0, r0, #2
    4608:	7020      	strb	r0, [r4, #0]
    460a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    460e:	f640 418b 	movw	r1, #3211	; 0xc8b
    4612:	202d      	movs	r0, #45	; 0x2d
    4614:	f7fc fda6 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4618:	f844 1f7a 	str.w	r1, [r4, #122]!
    461c:	8880      	ldrh	r0, [r0, #4]
    461e:	80a0      	strh	r0, [r4, #4]
    4620:	60e5      	str	r5, [r4, #12]
    4622:	8225      	strh	r5, [r4, #16]
    4624:	e7f1      	b.n	460a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x55e>
    4626:	0000      	.short	0x0000
    4628:	200000f0 	.word	0x200000f0
    462c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    462e:	4604      	mov	r4, r0
    4630:	20ff      	movs	r0, #255	; 0xff
    4632:	f88d 0000 	strb.w	r0, [sp]
    4636:	2601      	movs	r6, #1
    4638:	466a      	mov	r2, sp
    463a:	2105      	movs	r1, #5
    463c:	4620      	mov	r0, r4
    463e:	f7ff fed1 	bl	43e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x338>
    4642:	b160      	cbz	r0, 465e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5b2>
    4644:	4d28      	ldr	r5, [pc, #160]	; (46e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x63c>)
    4646:	4f27      	ldr	r7, [pc, #156]	; (46e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x638>)
    4648:	6869      	ldr	r1, [r5, #4]
    464a:	7bfa      	ldrb	r2, [r7, #15]
    464c:	f107 0310 	add.w	r3, r7, #16
    4650:	f811 0b03 	ldrb.w	r0, [r1], #3
    4654:	f3c0 1080 	ubfx	r0, r0, #6, #1
    4658:	f009 fb27 	bl	dcaa <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    465c:	b110      	cbz	r0, 4664 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5b8>
    465e:	2600      	movs	r6, #0
    4660:	4630      	mov	r0, r6
    4662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4664:	686a      	ldr	r2, [r5, #4]
    4666:	69e0      	ldr	r0, [r4, #28]
    4668:	7812      	ldrb	r2, [r2, #0]
    466a:	f810 1fa5 	ldrb.w	r1, [r0, #165]!
    466e:	f3c2 1240 	ubfx	r2, r2, #5, #1
    4672:	4011      	ands	r1, r2
    4674:	7001      	strb	r1, [r0, #0]
    4676:	2201      	movs	r2, #1
    4678:	4620      	mov	r0, r4
    467a:	69e1      	ldr	r1, [r4, #28]
    467c:	f000 f89a 	bl	47b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x708>
    4680:	2300      	movs	r3, #0
    4682:	f89d 2000 	ldrb.w	r2, [sp]
    4686:	4620      	mov	r0, r4
    4688:	69e1      	ldr	r1, [r4, #28]
    468a:	f7ff ff5f 	bl	454c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4a0>
    468e:	2202      	movs	r2, #2
    4690:	4916      	ldr	r1, [pc, #88]	; (46ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x640>)
    4692:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    4696:	f009 ff87 	bl	e5a8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    469a:	69e0      	ldr	r0, [r4, #28]
    469c:	2202      	movs	r2, #2
    469e:	8801      	ldrh	r1, [r0, #0]
    46a0:	f8a4 10b0 	strh.w	r1, [r4, #176]	; 0xb0
    46a4:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    46a8:	f884 00b2 	strb.w	r0, [r4, #178]	; 0xb2
    46ac:	4910      	ldr	r1, [pc, #64]	; (46f0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x644>)
    46ae:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    46b2:	f009 ff79 	bl	e5a8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    46b6:	2100      	movs	r1, #0
    46b8:	69e0      	ldr	r0, [r4, #28]
    46ba:	7039      	strb	r1, [r7, #0]
    46bc:	460a      	mov	r2, r1
    46be:	4621      	mov	r1, r4
    46c0:	f000 fa7a 	bl	4bb8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>
    46c4:	6868      	ldr	r0, [r5, #4]
    46c6:	69e1      	ldr	r1, [r4, #28]
    46c8:	f8d0 2003 	ldr.w	r2, [r0, #3]
    46cc:	f841 2f03 	str.w	r2, [r1, #3]!
    46d0:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    46d4:	808a      	strh	r2, [r1, #4]
    46d6:	7800      	ldrb	r0, [r0, #0]
    46d8:	69e1      	ldr	r1, [r4, #28]
    46da:	f3c0 1080 	ubfx	r0, r0, #6, #1
    46de:	7088      	strb	r0, [r1, #2]
    46e0:	e7be      	b.n	4660 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5b4>
    46e2:	0000      	.short	0x0000
    46e4:	20001308 	.word	0x20001308
    46e8:	200000f0 	.word	0x200000f0
    46ec:	0000ee63 	.word	0x0000ee63
    46f0:	0000ee53 	.word	0x0000ee53
    46f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46f6:	4604      	mov	r4, r0
    46f8:	20ff      	movs	r0, #255	; 0xff
    46fa:	f88d 0000 	strb.w	r0, [sp]
    46fe:	2501      	movs	r5, #1
    4700:	466a      	mov	r2, sp
    4702:	2103      	movs	r1, #3
    4704:	4620      	mov	r0, r4
    4706:	f7ff fe6d 	bl	43e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x338>
    470a:	b1e8      	cbz	r0, 4748 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x69c>
    470c:	7b20      	ldrb	r0, [r4, #12]
    470e:	b120      	cbz	r0, 471a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x66e>
    4710:	f89d 1000 	ldrb.w	r1, [sp]
    4714:	4620      	mov	r0, r4
    4716:	f7ff fe17 	bl	4348 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x29c>
    471a:	4e0d      	ldr	r6, [pc, #52]	; (4750 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a4>)
    471c:	2100      	movs	r1, #0
    471e:	6870      	ldr	r0, [r6, #4]
    4720:	8001      	strh	r1, [r0, #0]
    4722:	2104      	movs	r1, #4
    4724:	f009 fdbe 	bl	e2a4 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    4728:	4620      	mov	r0, r4
    472a:	f000 f88b 	bl	4844 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x798>
    472e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    4732:	6c21      	ldr	r1, [r4, #64]	; 0x40
    4734:	6870      	ldr	r0, [r6, #4]
    4736:	f009 fdec 	bl	e312 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>
    473a:	4906      	ldr	r1, [pc, #24]	; (4754 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a8>)
    473c:	2005      	movs	r0, #5
    473e:	7008      	strb	r0, [r1, #0]
    4740:	6870      	ldr	r0, [r6, #4]
    4742:	f003 fe69 	bl	8418 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    4746:	e000      	b.n	474a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x69e>
    4748:	2500      	movs	r5, #0
    474a:	4628      	mov	r0, r5
    474c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    474e:	0000      	.short	0x0000
    4750:	200000f0 	.word	0x200000f0
    4754:	20001308 	.word	0x20001308
    4758:	b570      	push	{r4, r5, r6, lr}
    475a:	4604      	mov	r4, r0
    475c:	460e      	mov	r6, r1
    475e:	7e40      	ldrb	r0, [r0, #25]
    4760:	f7fe f9e6 	bl	2b30 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    4764:	0005      	movs	r5, r0
    4766:	d019      	beq.n	479c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6f0>
    4768:	2110      	movs	r1, #16
    476a:	f009 fce1 	bl	e130 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    476e:	2800      	cmp	r0, #0
    4770:	d114      	bne.n	479c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6f0>
    4772:	2001      	movs	r0, #1
    4774:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    4778:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    477c:	4632      	mov	r2, r6
    477e:	460c      	mov	r4, r1
    4780:	4628      	mov	r0, r5
    4782:	f009 fac2 	bl	dd0a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    4786:	4621      	mov	r1, r4
    4788:	4c05      	ldr	r4, [pc, #20]	; (47a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6f4>)
    478a:	6860      	ldr	r0, [r4, #4]
    478c:	f009 fda5 	bl	e2da <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    4790:	6860      	ldr	r0, [r4, #4]
    4792:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4796:	2101      	movs	r1, #1
    4798:	f009 bda5 	b.w	e2e6 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    479c:	bd70      	pop	{r4, r5, r6, pc}
    479e:	0000      	.short	0x0000
    47a0:	200000f0 	.word	0x200000f0
    47a4:	4802      	ldr	r0, [pc, #8]	; (47b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x704>)
    47a6:	2101      	movs	r1, #1
    47a8:	6800      	ldr	r0, [r0, #0]
    47aa:	f7ff baf9 	b.w	3da0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    47ae:	0000      	.short	0x0000
    47b0:	200000f0 	.word	0x200000f0
    47b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    47b8:	4e21      	ldr	r6, [pc, #132]	; (4840 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x794>)
    47ba:	4680      	mov	r8, r0
    47bc:	460c      	mov	r4, r1
    47be:	6870      	ldr	r0, [r6, #4]
    47c0:	4615      	mov	r5, r2
    47c2:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    47c6:	6161      	str	r1, [r4, #20]
    47c8:	6841      	ldr	r1, [r0, #4]
    47ca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    47ce:	61e1      	str	r1, [r4, #28]
    47d0:	8940      	ldrh	r0, [r0, #10]
    47d2:	f009 fb37 	bl	de44 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    47d6:	4607      	mov	r7, r0
    47d8:	6120      	str	r0, [r4, #16]
    47da:	6870      	ldr	r0, [r6, #4]
    47dc:	4639      	mov	r1, r7
    47de:	7d80      	ldrb	r0, [r0, #22]
    47e0:	f009 fc9d 	bl	e11e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    47e4:	84a0      	strh	r0, [r4, #36]	; 0x24
    47e6:	6870      	ldr	r0, [r6, #4]
    47e8:	4639      	mov	r1, r7
    47ea:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    47ee:	f009 fc92 	bl	e116 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    47f2:	6220      	str	r0, [r4, #32]
    47f4:	6870      	ldr	r0, [r6, #4]
    47f6:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    47fa:	8321      	strh	r1, [r4, #24]
    47fc:	8841      	ldrh	r1, [r0, #2]
    47fe:	8361      	strh	r1, [r4, #26]
    4800:	6841      	ldr	r1, [r0, #4]
    4802:	f8c4 10a6 	str.w	r1, [r4, #166]	; 0xa6
    4806:	7a01      	ldrb	r1, [r0, #8]
    4808:	f884 10aa 	strb.w	r1, [r4, #170]	; 0xaa
    480c:	7a41      	ldrb	r1, [r0, #9]
    480e:	f001 011f 	and.w	r1, r1, #31
    4812:	f884 10b1 	strb.w	r1, [r4, #177]	; 0xb1
    4816:	7a40      	ldrb	r0, [r0, #9]
    4818:	0940      	lsrs	r0, r0, #5
    481a:	f884 021b 	strb.w	r0, [r4, #539]	; 0x21b
    481e:	f104 0062 	add.w	r0, r4, #98	; 0x62
    4822:	7205      	strb	r5, [r0, #8]
    4824:	7245      	strb	r5, [r0, #9]
    4826:	21ff      	movs	r1, #255	; 0xff
    4828:	7281      	strb	r1, [r0, #10]
    482a:	2100      	movs	r1, #0
    482c:	3836      	subs	r0, #54	; 0x36
    482e:	f009 ff2e 	bl	e68e <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    4832:	f998 100e 	ldrsb.w	r1, [r8, #14]
    4836:	4620      	mov	r0, r4
    4838:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    483c:	f009 bbd6 	b.w	dfec <sym_AIEQYZJFZQBQ5LEMJNMQV56TMLIGCBAC63QLHGI>
    4840:	200000f0 	.word	0x200000f0
    4844:	b570      	push	{r4, r5, r6, lr}
    4846:	4d07      	ldr	r5, [pc, #28]	; (4864 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7b8>)
    4848:	4604      	mov	r4, r0
    484a:	f100 0151 	add.w	r1, r0, #81	; 0x51
    484e:	6868      	ldr	r0, [r5, #4]
    4850:	f009 fd50 	bl	e2f4 <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    4854:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
    4858:	6868      	ldr	r0, [r5, #4]
    485a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    485e:	f009 bd4f 	b.w	e300 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    4862:	0000      	.short	0x0000
    4864:	200000f0 	.word	0x200000f0
    4868:	0000402d 	.word	0x0000402d
    486c:	00003eb5 	.word	0x00003eb5
    4870:	00003fa9 	.word	0x00003fa9
    4874:	00000000 	.word	0x00000000
    4878:	00003f81 	.word	0x00003f81
    487c:	00003fd9 	.word	0x00003fd9
    4880:	0000ee47 	.word	0x0000ee47
    4884:	0000ee4d 	.word	0x0000ee4d
    4888:	0000423d 	.word	0x0000423d
    488c:	00004261 	.word	0x00004261
    4890:	000047a5 	.word	0x000047a5
    4894:	00004884 	.word	0x00004884
    4898:	0000487c 	.word	0x0000487c
    489c:	00004878 	.word	0x00004878

000048a0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    48a0:	b510      	push	{r4, lr}
    48a2:	1e42      	subs	r2, r0, #1
    48a4:	2a02      	cmp	r2, #2
    48a6:	d901      	bls.n	48ac <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    48a8:	21ca      	movs	r1, #202	; 0xca
    48aa:	e009      	b.n	48c0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    48ac:	1e40      	subs	r0, r0, #1
    48ae:	2910      	cmp	r1, #16
    48b0:	d009      	beq.n	48c6 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    48b2:	2912      	cmp	r1, #18
    48b4:	d00c      	beq.n	48d0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    48b6:	2913      	cmp	r1, #19
    48b8:	d00a      	beq.n	48d0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    48ba:	2915      	cmp	r1, #21
    48bc:	d005      	beq.n	48ca <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    48be:	21d8      	movs	r1, #216	; 0xd8
    48c0:	202f      	movs	r0, #47	; 0x2f
    48c2:	f7fc fc4f 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48c6:	4905      	ldr	r1, [pc, #20]	; (48dc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    48c8:	e004      	b.n	48d4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    48ca:	4904      	ldr	r1, [pc, #16]	; (48dc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    48cc:	1d89      	adds	r1, r1, #6
    48ce:	e001      	b.n	48d4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    48d0:	4902      	ldr	r1, [pc, #8]	; (48dc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    48d2:	1f89      	subs	r1, r1, #6
    48d4:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    48d8:	bd10      	pop	{r4, pc}
    48da:	0000      	.short	0x0000
    48dc:	0000f0ae 	.word	0x0000f0ae

000048e0 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    48e0:	1e42      	subs	r2, r0, #1
    48e2:	b510      	push	{r4, lr}
    48e4:	b2d2      	uxtb	r2, r2
    48e6:	2a01      	cmp	r2, #1
    48e8:	d903      	bls.n	48f2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    48ea:	291d      	cmp	r1, #29
    48ec:	d001      	beq.n	48f2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    48ee:	21ee      	movs	r1, #238	; 0xee
    48f0:	e00d      	b.n	490e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    48f2:	2913      	cmp	r1, #19
    48f4:	d013      	beq.n	491e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    48f6:	dc04      	bgt.n	4902 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    48f8:	2910      	cmp	r1, #16
    48fa:	d00b      	beq.n	4914 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    48fc:	2912      	cmp	r1, #18
    48fe:	d104      	bne.n	490a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    4900:	e00d      	b.n	491e <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    4902:	2915      	cmp	r1, #21
    4904:	d008      	beq.n	4918 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    4906:	291d      	cmp	r1, #29
    4908:	d00e      	beq.n	4928 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    490a:	f44f 7181 	mov.w	r1, #258	; 0x102
    490e:	202f      	movs	r0, #47	; 0x2f
    4910:	f7fc fc28 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4914:	4807      	ldr	r0, [pc, #28]	; (4934 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    4916:	e004      	b.n	4922 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    4918:	4806      	ldr	r0, [pc, #24]	; (4934 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    491a:	3008      	adds	r0, #8
    491c:	e001      	b.n	4922 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    491e:	4805      	ldr	r0, [pc, #20]	; (4934 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    4920:	1d00      	adds	r0, r0, #4
    4922:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    4926:	bd10      	pop	{r4, pc}
    4928:	f240 315a 	movw	r1, #858	; 0x35a
    492c:	fb10 f001 	smulbb	r0, r0, r1
    4930:	bd10      	pop	{r4, pc}
    4932:	0000      	.short	0x0000
    4934:	0000f09c 	.word	0x0000f09c

00004938 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    4938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    493c:	4604      	mov	r4, r0
    493e:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    4942:	4616      	mov	r6, r2
    4944:	460f      	mov	r7, r1
    4946:	2800      	cmp	r0, #0
    4948:	d15e      	bne.n	4a08 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    494a:	4621      	mov	r1, r4
    494c:	484d      	ldr	r0, [pc, #308]	; (4a84 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x14c>)
    494e:	f006 fb7f 	bl	b050 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    4952:	4605      	mov	r5, r0
    4954:	2820      	cmp	r0, #32
    4956:	d057      	beq.n	4a08 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    4958:	2250      	movs	r2, #80	; 0x50
    495a:	2100      	movs	r1, #0
    495c:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    4960:	f00c fa27 	bl	10db2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4964:	f884 50c8 	strb.w	r5, [r4, #200]	; 0xc8
    4968:	2501      	movs	r5, #1
    496a:	f8c4 70cc 	str.w	r7, [r4, #204]	; 0xcc
    496e:	f884 50e0 	strb.w	r5, [r4, #224]	; 0xe0
    4972:	b137      	cbz	r7, 4982 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4a>
    4974:	f7fe fdf0 	bl	3558 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    4978:	f000 0007 	and.w	r0, r0, #7
    497c:	1c40      	adds	r0, r0, #1
    497e:	f887 024c 	strb.w	r0, [r7, #588]	; 0x24c
    4982:	4620      	mov	r0, r4
    4984:	f00a fd58 	bl	f438 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2da>
    4988:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    498c:	2002      	movs	r0, #2
    498e:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    4992:	46a8      	mov	r8, r5
    4994:	f884 50f3 	strb.w	r5, [r4, #243]	; 0xf3
    4998:	2500      	movs	r5, #0
    499a:	f804 5fe8 	strb.w	r5, [r4, #232]!
    499e:	f007 fcbd 	bl	c31c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    49a2:	4607      	mov	r7, r0
    49a4:	f00b fff0 	bl	10988 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    49a8:	8921      	ldrh	r1, [r4, #8]
    49aa:	3ce8      	subs	r4, #232	; 0xe8
    49ac:	4288      	cmp	r0, r1
    49ae:	d800      	bhi.n	49b2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
    49b0:	4608      	mov	r0, r1
    49b2:	4438      	add	r0, r7
    49b4:	30ce      	adds	r0, #206	; 0xce
    49b6:	b287      	uxth	r7, r0
    49b8:	4620      	mov	r0, r4
    49ba:	f00a fa03 	bl	edc4 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    49be:	b330      	cbz	r0, 4a0e <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd6>
    49c0:	f00b ff04 	bl	107cc <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    49c4:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    49c8:	b281      	uxth	r1, r0
    49ca:	4630      	mov	r0, r6
    49cc:	f007 fdc6 	bl	c55c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    49d0:	4430      	add	r0, r6
    49d2:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    49d6:	3490      	adds	r4, #144	; 0x90
    49d8:	f00b ffdf 	bl	1099a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    49dc:	19c0      	adds	r0, r0, r7
    49de:	4169      	adcs	r1, r5
    49e0:	e9c4 011a 	strd	r0, r1, [r4, #104]	; 0x68
    49e4:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
    49e8:	f824 5c6e 	strh.w	r5, [r4, #-110]
    49ec:	2001      	movs	r0, #1
    49ee:	f00a fb4e 	bl	f08e <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    49f2:	f200 1015 	addw	r0, r0, #277	; 0x115
    49f6:	1a30      	subs	r0, r6, r0
    49f8:	6460      	str	r0, [r4, #68]	; 0x44
    49fa:	f04f 30ff 	mov.w	r0, #4294967295
    49fe:	0841      	lsrs	r1, r0, #1
    4a00:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    4a04:	3c90      	subs	r4, #144	; 0x90
    4a06:	e025      	b.n	4a54 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x11c>
    4a08:	200c      	movs	r0, #12
    4a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4a0e:	2100      	movs	r1, #0
    4a10:	4620      	mov	r0, r4
    4a12:	f00a fc65 	bl	f2e0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    4a16:	f8df 8070 	ldr.w	r8, [pc, #112]	; 4a88 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x150>
    4a1a:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
    4a1e:	2000      	movs	r0, #0
    4a20:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    4a24:	b149      	cbz	r1, 4a3a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
    4a26:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    4a28:	b139      	cbz	r1, 4a3a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
    4a2a:	f7fe fd95 	bl	3558 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    4a2e:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    4a32:	fbb0 f2f1 	udiv	r2, r0, r1
    4a36:	fb01 0012 	mls	r0, r1, r2, r0
    4a3a:	4407      	add	r7, r0
    4a3c:	f00b ffad 	bl	1099a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4a40:	19c0      	adds	r0, r0, r7
    4a42:	4169      	adcs	r1, r5
    4a44:	e9c4 013e 	strd	r0, r1, [r4, #248]	; 0xf8
    4a48:	b19e      	cbz	r6, 4a72 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x13a>
    4a4a:	1980      	adds	r0, r0, r6
    4a4c:	eb51 0105 	adcs.w	r1, r1, r5
    4a50:	e9c4 0142 	strd	r0, r1, [r4, #264]	; 0x108
    4a54:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    4a58:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    4a5c:	f00a fcea 	bl	f434 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    4a60:	b158      	cbz	r0, 4a7a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x142>
    4a62:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    4a66:	2100      	movs	r1, #0
    4a68:	4620      	mov	r0, r4
    4a6a:	f00a f9db 	bl	ee24 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    4a6e:	2000      	movs	r0, #0
    4a70:	e7cb      	b.n	4a0a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd2>
    4a72:	f04f 30ff 	mov.w	r0, #4294967295
    4a76:	0841      	lsrs	r1, r0, #1
    4a78:	e7ea      	b.n	4a50 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x118>
    4a7a:	f44f 71f7 	mov.w	r1, #494	; 0x1ee
    4a7e:	2030      	movs	r0, #48	; 0x30
    4a80:	f7fc fb70 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a84:	0000f519 	.word	0x0000f519
    4a88:	20000100 	.word	0x20000100

00004a8c <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>:
    4a8c:	4901      	ldr	r1, [pc, #4]	; (4a94 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ+0x8>)
    4a8e:	8088      	strh	r0, [r1, #4]
    4a90:	4770      	bx	lr
    4a92:	0000      	.short	0x0000
    4a94:	20000100 	.word	0x20000100

00004a98 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    4a98:	4805      	ldr	r0, [pc, #20]	; (4ab0 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x18>)
    4a9a:	2100      	movs	r1, #0
    4a9c:	7001      	strb	r1, [r0, #0]
    4a9e:	2201      	movs	r2, #1
    4aa0:	7082      	strb	r2, [r0, #2]
    4aa2:	7041      	strb	r1, [r0, #1]
    4aa4:	f242 7110 	movw	r1, #10000	; 0x2710
    4aa8:	8081      	strh	r1, [r0, #4]
    4aaa:	f000 b803 	b.w	4ab4 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    4aae:	0000      	.short	0x0000
    4ab0:	20000100 	.word	0x20000100

00004ab4 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    4ab4:	b51c      	push	{r2, r3, r4, lr}
    4ab6:	4909      	ldr	r1, [pc, #36]	; (4adc <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x28>)
    4ab8:	e9d1 0100 	ldrd	r0, r1, [r1]
    4abc:	e9cd 0100 	strd	r0, r1, [sp]
    4ac0:	e002      	b.n	4ac8 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x14>
    4ac2:	9800      	ldr	r0, [sp, #0]
    4ac4:	f00a fb1f 	bl	f106 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    4ac8:	4668      	mov	r0, sp
    4aca:	f7fc fecb 	bl	1864 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4ace:	2800      	cmp	r0, #0
    4ad0:	d0f7      	beq.n	4ac2 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xe>
    4ad2:	f000 f8c7 	bl	4c64 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xac>
    4ad6:	2000      	movs	r0, #0
    4ad8:	bd1c      	pop	{r2, r3, r4, pc}
    4ada:	0000      	.short	0x0000
    4adc:	000053fc 	.word	0x000053fc

00004ae0 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    4ae0:	4901      	ldr	r1, [pc, #4]	; (4ae8 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    4ae2:	7008      	strb	r0, [r1, #0]
    4ae4:	4770      	bx	lr
    4ae6:	0000      	.short	0x0000
    4ae8:	20000100 	.word	0x20000100

00004aec <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    4aec:	4908      	ldr	r1, [pc, #32]	; (4b10 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x24>)
    4aee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4af2:	fbb1 f1f2 	udiv	r1, r1, r2
    4af6:	b510      	push	{r4, lr}
    4af8:	f501 7128 	add.w	r1, r1, #672	; 0x2a0
    4afc:	f009 fde0 	bl	e6c0 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    4b00:	f640 0148 	movw	r1, #2120	; 0x848
    4b04:	4288      	cmp	r0, r1
    4b06:	d300      	bcc.n	4b0a <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x1e>
    4b08:	4608      	mov	r0, r1
    4b0a:	b280      	uxth	r0, r0
    4b0c:	bd10      	pop	{r4, pc}
    4b0e:	0000      	.short	0x0000
    4b10:	0001527d 	.word	0x0001527d

00004b14 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    4b14:	b510      	push	{r4, lr}
    4b16:	f003 fb93 	bl	8240 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    4b1a:	4905      	ldr	r1, [pc, #20]	; (4b30 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x1c>)
    4b1c:	688a      	ldr	r2, [r1, #8]
    4b1e:	4290      	cmp	r0, r2
    4b20:	d801      	bhi.n	4b26 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x12>
    4b22:	7848      	ldrb	r0, [r1, #1]
    4b24:	b108      	cbz	r0, 4b2a <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x16>
    4b26:	2000      	movs	r0, #0
    4b28:	bd10      	pop	{r4, pc}
    4b2a:	2001      	movs	r0, #1
    4b2c:	bd10      	pop	{r4, pc}
    4b2e:	0000      	.short	0x0000
    4b30:	20000100 	.word	0x20000100

00004b34 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    4b34:	b510      	push	{r4, lr}
    4b36:	4604      	mov	r4, r0
    4b38:	2906      	cmp	r1, #6
    4b3a:	d238      	bcs.n	4bae <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7a>
    4b3c:	e8df f001 	tbb	[pc, r1]
    4b40:	14031105 	.word	0x14031105
    4b44:	3215      	.short	0x3215
    4b46:	2100      	movs	r1, #0
    4b48:	e006      	b.n	4b58 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x24>
    4b4a:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
    4b4e:	b110      	cbz	r0, 4b56 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x22>
    4b50:	4620      	mov	r0, r4
    4b52:	f00a fc02 	bl	f35a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1fc>
    4b56:	2101      	movs	r1, #1
    4b58:	4620      	mov	r0, r4
    4b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4b5e:	f000 b97f 	b.w	4e60 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2a8>
    4b62:	2003      	movs	r0, #3
    4b64:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    4b68:	bd10      	pop	{r4, pc}
    4b6a:	f003 fb75 	bl	8258 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    4b6e:	f8c4 02ac 	str.w	r0, [r4, #684]	; 0x2ac
    4b72:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4b76:	f003 fc33 	bl	83e0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    4b7a:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    4b7e:	4288      	cmp	r0, r1
    4b80:	d904      	bls.n	4b8c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x58>
    4b82:	f240 31e3 	movw	r1, #995	; 0x3e3
    4b86:	2030      	movs	r0, #48	; 0x30
    4b88:	f7fc faec 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b8c:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4b90:	f003 fc26 	bl	83e0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    4b94:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    4b98:	1a08      	subs	r0, r1, r0
    4b9a:	4906      	ldr	r1, [pc, #24]	; (4bb4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x80>)
    4b9c:	688a      	ldr	r2, [r1, #8]
    4b9e:	4410      	add	r0, r2
    4ba0:	6088      	str	r0, [r1, #8]
    4ba2:	bd10      	pop	{r4, pc}
    4ba4:	4620      	mov	r0, r4
    4ba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4baa:	f00a bbc3 	b.w	f334 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d6>
    4bae:	f240 7199 	movw	r1, #1945	; 0x799
    4bb2:	e7e8      	b.n	4b86 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x52>
    4bb4:	20000100 	.word	0x20000100

00004bb8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    4bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4bbc:	460c      	mov	r4, r1
    4bbe:	4680      	mov	r8, r0
    4bc0:	b112      	cbz	r2, 4bc8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x10>
    4bc2:	f240 71c3 	movw	r1, #1987	; 0x7c3
    4bc6:	e037      	b.n	4c38 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x80>
    4bc8:	f003 fb3a 	bl	8240 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    4bcc:	4607      	mov	r7, r0
    4bce:	2000      	movs	r0, #0
    4bd0:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
    4bd4:	e9d4 563e 	ldrd	r5, r6, [r4, #248]	; 0xf8
    4bd8:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
    4bdc:	2001      	movs	r0, #1
    4bde:	f884 00e1 	strb.w	r0, [r4, #225]	; 0xe1
    4be2:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    4be6:	2101      	movs	r1, #1
    4be8:	34c8      	adds	r4, #200	; 0xc8
    4bea:	f7fe f859 	bl	2ca0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    4bee:	f854 0f04 	ldr.w	r0, [r4, #4]!
    4bf2:	f8c0 5290 	str.w	r5, [r0, #656]	; 0x290
    4bf6:	f8c0 6294 	str.w	r6, [r0, #660]	; 0x294
    4bfa:	6821      	ldr	r1, [r4, #0]
    4bfc:	f814 0c04 	ldrb.w	r0, [r4, #-4]
    4c00:	f881 02a4 	strb.w	r0, [r1, #676]	; 0x2a4
    4c04:	6820      	ldr	r0, [r4, #0]
    4c06:	f8c0 72a8 	str.w	r7, [r0, #680]	; 0x2a8
    4c0a:	6820      	ldr	r0, [r4, #0]
    4c0c:	e9c0 56a6 	strd	r5, r6, [r0, #664]	; 0x298
    4c10:	f854 09cc 	ldr.w	r0, [r4], #-204
    4c14:	f00a fd29 	bl	f66a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x50c>
    4c18:	b110      	cbz	r0, 4c20 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x68>
    4c1a:	f44f 61ea 	mov.w	r1, #1872	; 0x750
    4c1e:	e00b      	b.n	4c38 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x80>
    4c20:	f00a fb94 	bl	f34c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    4c24:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    4c28:	4642      	mov	r2, r8
    4c2a:	4906      	ldr	r1, [pc, #24]	; (4c44 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c>)
    4c2c:	f006 f8c8 	bl	adc0 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    4c30:	2800      	cmp	r0, #0
    4c32:	d104      	bne.n	4c3e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x86>
    4c34:	f240 71ac 	movw	r1, #1964	; 0x7ac
    4c38:	2030      	movs	r0, #48	; 0x30
    4c3a:	f7fc fa93 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4c42:	0000      	.short	0x0000
    4c44:	0000f585 	.word	0x0000f585
    4c48:	b510      	push	{r4, lr}
    4c4a:	280c      	cmp	r0, #12
    4c4c:	d304      	bcc.n	4c58 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa0>
    4c4e:	f240 318a 	movw	r1, #906	; 0x38a
    4c52:	2006      	movs	r0, #6
    4c54:	f7fc fa86 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c58:	4901      	ldr	r1, [pc, #4]	; (4c60 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa8>)
    4c5a:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4c5e:	bd10      	pop	{r4, pc}
    4c60:	00005418 	.word	0x00005418
    4c64:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    4c68:	4d16      	ldr	r5, [pc, #88]	; (4cc4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x10c>)
    4c6a:	2001      	movs	r0, #1
    4c6c:	7068      	strb	r0, [r5, #1]
    4c6e:	2400      	movs	r4, #0
    4c70:	f64f 76ff 	movw	r6, #65535	; 0xffff
    4c74:	e00b      	b.n	4c8e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xd6>
    4c76:	2100      	movs	r1, #0
    4c78:	f7fc fda2 	bl	17c0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    4c7c:	0007      	movs	r7, r0
    4c7e:	d009      	beq.n	4c94 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xdc>
    4c80:	f897 02a4 	ldrb.w	r0, [r7, #676]	; 0x2a4
    4c84:	f006 f8cc 	bl	ae20 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    4c88:	4638      	mov	r0, r7
    4c8a:	f00a fc38 	bl	f4fe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3a0>
    4c8e:	9400      	str	r4, [sp, #0]
    4c90:	9401      	str	r4, [sp, #4]
    4c92:	e00e      	b.n	4cb2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xfa>
    4c94:	f44f 7191 	mov.w	r1, #290	; 0x122
    4c98:	2030      	movs	r0, #48	; 0x30
    4c9a:	f7fc fa63 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c9e:	9800      	ldr	r0, [sp, #0]
    4ca0:	b138      	cbz	r0, 4cb2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xfa>
    4ca2:	f890 12a4 	ldrb.w	r1, [r0, #676]	; 0x2a4
    4ca6:	2920      	cmp	r1, #32
    4ca8:	d003      	beq.n	4cb2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xfa>
    4caa:	8800      	ldrh	r0, [r0, #0]
    4cac:	42b0      	cmp	r0, r6
    4cae:	d1e2      	bne.n	4c76 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xbe>
    4cb0:	e004      	b.n	4cbc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x104>
    4cb2:	4668      	mov	r0, sp
    4cb4:	f7fc fdd6 	bl	1864 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4cb8:	2800      	cmp	r0, #0
    4cba:	d0f0      	beq.n	4c9e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe6>
    4cbc:	706c      	strb	r4, [r5, #1]
    4cbe:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    4cc2:	0000      	.short	0x0000
    4cc4:	20000100 	.word	0x20000100
    4cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4ccc:	4604      	mov	r4, r0
    4cce:	4839      	ldr	r0, [pc, #228]	; (4db4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1fc>)
    4cd0:	461e      	mov	r6, r3
    4cd2:	4690      	mov	r8, r2
    4cd4:	7880      	ldrb	r0, [r0, #2]
    4cd6:	4689      	mov	r9, r1
    4cd8:	2500      	movs	r5, #0
    4cda:	2800      	cmp	r0, #0
    4cdc:	d063      	beq.n	4da6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
    4cde:	f007 fbf3 	bl	c4c8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    4ce2:	b3e0      	cbz	r0, 4d5e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a6>
    4ce4:	f8b4 0248 	ldrh.w	r0, [r4, #584]	; 0x248
    4ce8:	2802      	cmp	r0, #2
    4cea:	d35c      	bcc.n	4da6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
    4cec:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4cf0:	2802      	cmp	r0, #2
    4cf2:	d058      	beq.n	4da6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
    4cf4:	f894 0272 	ldrb.w	r0, [r4, #626]	; 0x272
    4cf8:	bb88      	cbnz	r0, 4d5e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a6>
    4cfa:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    4cfe:	f7ff ffa3 	bl	4c48 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
    4d02:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    4d06:	b281      	uxth	r1, r0
    4d08:	8031      	strh	r1, [r6, #0]
    4d0a:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4d0e:	2700      	movs	r7, #0
    4d10:	2801      	cmp	r0, #1
    4d12:	d00d      	beq.n	4d30 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x178>
    4d14:	6920      	ldr	r0, [r4, #16]
    4d16:	f007 fc21 	bl	c55c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4d1a:	f8b4 2236 	ldrh.w	r2, [r4, #566]	; 0x236
    4d1e:	4442      	add	r2, r8
    4d20:	eba2 0109 	sub.w	r1, r2, r9
    4d24:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    4d28:	1a82      	subs	r2, r0, r2
    4d2a:	fb01 7502 	mla	r5, r1, r2, r7
    4d2e:	e035      	b.n	4d9c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1e4>
    4d30:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
    4d34:	2803      	cmp	r0, #3
    4d36:	d039      	beq.n	4dac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f4>
    4d38:	2101      	movs	r1, #1
    4d3a:	2000      	movs	r0, #0
    4d3c:	f009 f944 	bl	dfc8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    4d40:	6a21      	ldr	r1, [r4, #32]
    4d42:	1847      	adds	r7, r0, r1
    4d44:	8831      	ldrh	r1, [r6, #0]
    4d46:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4d4a:	f007 fc07 	bl	c55c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4d4e:	f8d4 2250 	ldr.w	r2, [r4, #592]	; 0x250
    4d52:	f8d4 1258 	ldr.w	r1, [r4, #600]	; 0x258
    4d56:	1a82      	subs	r2, r0, r2
    4d58:	fb01 5502 	mla	r5, r1, r2, r5
    4d5c:	e000      	b.n	4d60 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a8>
    4d5e:	e022      	b.n	4da6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ee>
    4d60:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    4d64:	8831      	ldrh	r1, [r6, #0]
    4d66:	4638      	mov	r0, r7
    4d68:	f007 fbf8 	bl	c55c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4d6c:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    4d70:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    4d74:	1a41      	subs	r1, r0, r1
    4d76:	440d      	add	r5, r1
    4d78:	8831      	ldrh	r1, [r6, #0]
    4d7a:	6920      	ldr	r0, [r4, #16]
    4d7c:	f007 fbee 	bl	c55c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4d80:	f8b4 2236 	ldrh.w	r2, [r4, #566]	; 0x236
    4d84:	4442      	add	r2, r8
    4d86:	eba2 0109 	sub.w	r1, r2, r9
    4d8a:	f8d4 2258 	ldr.w	r2, [r4, #600]	; 0x258
    4d8e:	1a89      	subs	r1, r1, r2
    4d90:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    4d94:	1a82      	subs	r2, r0, r2
    4d96:	1e49      	subs	r1, r1, #1
    4d98:	fb01 5502 	mla	r5, r1, r2, r5
    4d9c:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    4da0:	2001      	movs	r0, #1
    4da2:	f884 0272 	strb.w	r0, [r4, #626]	; 0x272
    4da6:	4628      	mov	r0, r5
    4da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4dac:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4db0:	e7c6      	b.n	4d40 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x188>
    4db2:	0000      	.short	0x0000
    4db4:	20000100 	.word	0x20000100
    4db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4dbc:	4605      	mov	r5, r0
    4dbe:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    4dc2:	2128      	movs	r1, #40	; 0x28
    4dc4:	f00a fa32 	bl	f22c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    4dc8:	f500 782c 	add.w	r8, r0, #688	; 0x2b0
    4dcc:	f00b fddc 	bl	10988 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    4dd0:	2869      	cmp	r0, #105	; 0x69
    4dd2:	d800      	bhi.n	4dd6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x21e>
    4dd4:	2069      	movs	r0, #105	; 0x69
    4dd6:	f8d5 1264 	ldr.w	r1, [r5, #612]	; 0x264
    4dda:	f1a0 0369 	sub.w	r3, r0, #105	; 0x69
    4dde:	692a      	ldr	r2, [r5, #16]
    4de0:	440b      	add	r3, r1
    4de2:	429a      	cmp	r2, r3
    4de4:	d903      	bls.n	4dee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x236>
    4de6:	1a51      	subs	r1, r2, r1
    4de8:	1a0c      	subs	r4, r1, r0
    4dea:	3469      	adds	r4, #105	; 0x69
    4dec:	e000      	b.n	4df0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x238>
    4dee:	2400      	movs	r4, #0
    4df0:	4f1a      	ldr	r7, [pc, #104]	; (4e5c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2a4>)
    4df2:	7838      	ldrb	r0, [r7, #0]
    4df4:	b918      	cbnz	r0, 4dfe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x246>
    4df6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    4df8:	42a0      	cmp	r0, r4
    4dfa:	d800      	bhi.n	4dfe <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x246>
    4dfc:	4604      	mov	r4, r0
    4dfe:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    4e02:	f009 fc68 	bl	e6d6 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    4e06:	4606      	mov	r6, r0
    4e08:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    4e0c:	f00a fc20 	bl	f650 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4f2>
    4e10:	f8d5 1230 	ldr.w	r1, [r5, #560]	; 0x230
    4e14:	4430      	add	r0, r6
    4e16:	1846      	adds	r6, r0, r1
    4e18:	1ba4      	subs	r4, r4, r6
    4e1a:	2c00      	cmp	r4, #0
    4e1c:	dc00      	bgt.n	4e20 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x268>
    4e1e:	2400      	movs	r4, #0
    4e20:	2002      	movs	r0, #2
    4e22:	f005 f8f5 	bl	a010 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    4e26:	4284      	cmp	r4, r0
    4e28:	d300      	bcc.n	4e2c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x274>
    4e2a:	4604      	mov	r4, r0
    4e2c:	2102      	movs	r1, #2
    4e2e:	4620      	mov	r0, r4
    4e30:	f004 fffe 	bl	9e30 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    4e34:	b900      	cbnz	r0, 4e38 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x280>
    4e36:	4426      	add	r6, r4
    4e38:	4642      	mov	r2, r8
    4e3a:	4631      	mov	r1, r6
    4e3c:	4628      	mov	r0, r5
    4e3e:	f009 fbeb 	bl	e618 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    4e42:	60b8      	str	r0, [r7, #8]
    4e44:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    4e48:	f00a fc02 	bl	f650 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4f2>
    4e4c:	1a30      	subs	r0, r6, r0
    4e4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4e52:	f5a0 70b7 	sub.w	r0, r0, #366	; 0x16e
    4e56:	f006 b9fb 	b.w	b250 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    4e5a:	0000      	.short	0x0000
    4e5c:	20000100 	.word	0x20000100
    4e60:	b538      	push	{r3, r4, r5, lr}
    4e62:	2500      	movs	r5, #0
    4e64:	4604      	mov	r4, r0
    4e66:	2901      	cmp	r1, #1
    4e68:	d102      	bne.n	4e70 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2b8>
    4e6a:	4810      	ldr	r0, [pc, #64]	; (4eac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f4>)
    4e6c:	7840      	ldrb	r0, [r0, #1]
    4e6e:	b170      	cbz	r0, 4e8e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2d6>
    4e70:	2004      	movs	r0, #4
    4e72:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    4e76:	bf00      	nop
    4e78:	f00a fa68 	bl	f34c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    4e7c:	f8a4 52a2 	strh.w	r5, [r4, #674]	; 0x2a2
    4e80:	f8b4 0094 	ldrh.w	r0, [r4, #148]	; 0x94
    4e84:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    4e88:	f884 5271 	strb.w	r5, [r4, #625]	; 0x271
    4e8c:	bd38      	pop	{r3, r4, r5, pc}
    4e8e:	9500      	str	r5, [sp, #0]
    4e90:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    4e94:	2301      	movs	r3, #1
    4e96:	2200      	movs	r2, #0
    4e98:	4620      	mov	r0, r4
    4e9a:	f000 f809 	bl	4eb0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
    4e9e:	2800      	cmp	r0, #0
    4ea0:	d0ea      	beq.n	4e78 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2c0>
    4ea2:	f240 710e 	movw	r1, #1806	; 0x70e
    4ea6:	2030      	movs	r0, #48	; 0x30
    4ea8:	f7fc f95c 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4eac:	20000100 	.word	0x20000100
    4eb0:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4eb4:	b08b      	sub	sp, #44	; 0x2c
    4eb6:	4604      	mov	r4, r0
    4eb8:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    4ebc:	4699      	mov	r9, r3
    4ebe:	460f      	mov	r7, r1
    4ec0:	9307      	str	r3, [sp, #28]
    4ec2:	9005      	str	r0, [sp, #20]
    4ec4:	f00b fc82 	bl	107cc <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    4ec8:	4605      	mov	r5, r0
    4eca:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    4ece:	f7ff febb 	bl	4c48 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
    4ed2:	4428      	add	r0, r5
    4ed4:	f8ad 0004 	strh.w	r0, [sp, #4]
    4ed8:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    4edc:	280d      	cmp	r0, #13
    4ede:	d004      	beq.n	4eea <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x332>
    4ee0:	2000      	movs	r0, #0
    4ee2:	9008      	str	r0, [sp, #32]
    4ee4:	980d      	ldr	r0, [sp, #52]	; 0x34
    4ee6:	b110      	cbz	r0, 4eee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x336>
    4ee8:	e02e      	b.n	4f48 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
    4eea:	2001      	movs	r0, #1
    4eec:	e7f9      	b.n	4ee2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x32a>
    4eee:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4ef2:	2803      	cmp	r0, #3
    4ef4:	d128      	bne.n	4f48 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
    4ef6:	9808      	ldr	r0, [sp, #32]
    4ef8:	b330      	cbz	r0, 4f48 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
    4efa:	f8b4 02cc 	ldrh.w	r0, [r4, #716]	; 0x2cc
    4efe:	42b8      	cmp	r0, r7
    4f00:	d122      	bne.n	4f48 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x390>
    4f02:	f8d4 0264 	ldr.w	r0, [r4, #612]	; 0x264
    4f06:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    4f0a:	6920      	ldr	r0, [r4, #16]
    4f0c:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    4f10:	f8b4 02a2 	ldrh.w	r0, [r4, #674]	; 0x2a2
    4f14:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    4f18:	4408      	add	r0, r1
    4f1a:	f8c4 0258 	str.w	r0, [r4, #600]	; 0x258
    4f1e:	4620      	mov	r0, r4
    4f20:	f000 fa86 	bl	5430 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    4f24:	f8d4 02d0 	ldr.w	r0, [r4, #720]	; 0x2d0
    4f28:	6220      	str	r0, [r4, #32]
    4f2a:	f8b4 02ce 	ldrh.w	r0, [r4, #718]	; 0x2ce
    4f2e:	84a0      	strh	r0, [r4, #36]	; 0x24
    4f30:	f8d4 02d4 	ldr.w	r0, [r4, #724]	; 0x2d4
    4f34:	6120      	str	r0, [r4, #16]
    4f36:	f8b4 02d8 	ldrh.w	r0, [r4, #728]	; 0x2d8
    4f3a:	8320      	strh	r0, [r4, #24]
    4f3c:	f8b4 02da 	ldrh.w	r0, [r4, #730]	; 0x2da
    4f40:	8360      	strh	r0, [r4, #26]
    4f42:	2002      	movs	r0, #2
    4f44:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    4f48:	f8b4 0094 	ldrh.w	r0, [r4, #148]	; 0x94
    4f4c:	f504 751e 	add.w	r5, r4, #632	; 0x278
    4f50:	1a38      	subs	r0, r7, r0
    4f52:	fa0f fa80 	sxth.w	sl, r0
    4f56:	f8b4 02a0 	ldrh.w	r0, [r4, #672]	; 0x2a0
    4f5a:	1a38      	subs	r0, r7, r0
    4f5c:	fa0f f880 	sxth.w	r8, r0
    4f60:	f1b8 0f00 	cmp.w	r8, #0
    4f64:	da08      	bge.n	4f78 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3c0>
    4f66:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
    4f6a:	f8d4 1294 	ldr.w	r1, [r4, #660]	; 0x294
    4f6e:	46d0      	mov	r8, sl
    4f70:	e9c4 01a6 	strd	r0, r1, [r4, #664]	; 0x298
    4f74:	2001      	movs	r0, #1
    4f76:	9007      	str	r0, [sp, #28]
    4f78:	ab01      	add	r3, sp, #4
    4f7a:	4652      	mov	r2, sl
    4f7c:	4641      	mov	r1, r8
    4f7e:	4620      	mov	r0, r4
    4f80:	f7ff fea2 	bl	4cc8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x110>
    4f84:	9004      	str	r0, [sp, #16]
    4f86:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4f8a:	f8df b334 	ldr.w	fp, [pc, #820]	; 52c0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x708>
    4f8e:	b140      	cbz	r0, 4fa2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3ea>
    4f90:	2801      	cmp	r0, #1
    4f92:	d07d      	beq.n	5090 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4d8>
    4f94:	2802      	cmp	r0, #2
    4f96:	d051      	beq.n	503c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x484>
    4f98:	2803      	cmp	r0, #3
    4f9a:	d07a      	beq.n	5092 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4da>
    4f9c:	f240 518e 	movw	r1, #1422	; 0x58e
    4fa0:	e18a      	b.n	52b8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x700>
    4fa2:	2101      	movs	r1, #1
    4fa4:	2000      	movs	r0, #0
    4fa6:	f009 f80f 	bl	dfc8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    4faa:	4606      	mov	r6, r0
    4fac:	6a20      	ldr	r0, [r4, #32]
    4fae:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4fb2:	4430      	add	r0, r6
    4fb4:	f007 fad2 	bl	c55c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4fb8:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    4fbc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4fc0:	6920      	ldr	r0, [r4, #16]
    4fc2:	f007 facb 	bl	c55c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4fc6:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    4fca:	a907      	add	r1, sp, #28
    4fcc:	a806      	add	r0, sp, #24
    4fce:	f003 f89f 	bl	8110 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    4fd2:	e9d4 01a6 	ldrd	r0, r1, [r4, #664]	; 0x298
    4fd6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    4fda:	f006 fa0b 	bl	b3f4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    4fde:	4682      	mov	sl, r0
    4fe0:	4620      	mov	r0, r4
    4fe2:	f00a f9a7 	bl	f334 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d6>
    4fe6:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4fea:	f8d4 82a8 	ldr.w	r8, [r4, #680]	; 0x2a8
    4fee:	f003 fa23 	bl	8438 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    4ff2:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    4ff6:	4401      	add	r1, r0
    4ff8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4ffc:	fbb1 f0f0 	udiv	r0, r1, r0
    5000:	6a21      	ldr	r1, [r4, #32]
    5002:	f8d4 2260 	ldr.w	r2, [r4, #608]	; 0x260
    5006:	4431      	add	r1, r6
    5008:	1a08      	subs	r0, r1, r0
    500a:	1a81      	subs	r1, r0, r2
    500c:	4441      	add	r1, r8
    500e:	3920      	subs	r1, #32
    5010:	eba1 060a 	sub.w	r6, r1, sl
    5014:	0050      	lsls	r0, r2, #1
    5016:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    5018:	3060      	adds	r0, #96	; 0x60
    501a:	4401      	add	r1, r0
    501c:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    5020:	f00a f9f6 	bl	f410 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b2>
    5024:	3022      	adds	r0, #34	; 0x22
    5026:	f8cb 000c 	str.w	r0, [fp, #12]
    502a:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
    502e:	1a30      	subs	r0, r6, r0
    5030:	f5b0 7fe4 	cmp.w	r0, #456	; 0x1c8
    5034:	d258      	bcs.n	50e8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x530>
    5036:	f240 5127 	movw	r1, #1319	; 0x527
    503a:	e13d      	b.n	52b8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x700>
    503c:	6a21      	ldr	r1, [r4, #32]
    503e:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    5042:	4408      	add	r0, r1
    5044:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5048:	f007 fa88 	bl	c55c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    504c:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    5050:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    5054:	6920      	ldr	r0, [r4, #16]
    5056:	f007 fa81 	bl	c55c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    505a:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    505e:	4620      	mov	r0, r4
    5060:	f00a f968 	bl	f334 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d6>
    5064:	f8b4 0236 	ldrh.w	r0, [r4, #566]	; 0x236
    5068:	bb10      	cbnz	r0, 50b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f8>
    506a:	f1b9 0f00 	cmp.w	r9, #0
    506e:	d01f      	beq.n	50b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f8>
    5070:	f894 806b 	ldrb.w	r8, [r4, #107]	; 0x6b
    5074:	4640      	mov	r0, r8
    5076:	f003 f9df 	bl	8438 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    507a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    507e:	4401      	add	r1, r0
    5080:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    5084:	fbb1 f0f0 	udiv	r0, r1, r0
    5088:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    508c:	4408      	add	r0, r1
    508e:	e001      	b.n	5094 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4dc>
    5090:	e02b      	b.n	50ea <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x532>
    5092:	e047      	b.n	5124 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x56c>
    5094:	6a22      	ldr	r2, [r4, #32]
    5096:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    509a:	4411      	add	r1, r2
    509c:	1a0e      	subs	r6, r1, r0
    509e:	4640      	mov	r0, r8
    50a0:	f003 f99e 	bl	83e0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    50a4:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    50a8:	1a08      	subs	r0, r1, r0
    50aa:	4406      	add	r6, r0
    50ac:	3e20      	subs	r6, #32
    50ae:	e006      	b.n	50be <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x506>
    50b0:	6a21      	ldr	r1, [r4, #32]
    50b2:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    50b6:	4408      	add	r0, r1
    50b8:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    50bc:	1a46      	subs	r6, r0, r1
    50be:	f8d4 2258 	ldr.w	r2, [r4, #600]	; 0x258
    50c2:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
    50c6:	f8d4 0260 	ldr.w	r0, [r4, #608]	; 0x260
    50ca:	fb01 0002 	mla	r0, r1, r2, r0
    50ce:	0040      	lsls	r0, r0, #1
    50d0:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    50d2:	3060      	adds	r0, #96	; 0x60
    50d4:	4401      	add	r1, r0
    50d6:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    50da:	f00a f999 	bl	f410 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b2>
    50de:	f8cb 000c 	str.w	r0, [fp, #12]
    50e2:	2001      	movs	r0, #1
    50e4:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    50e8:	e061      	b.n	51ae <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f6>
    50ea:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    50ee:	6920      	ldr	r0, [r4, #16]
    50f0:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    50f4:	1a86      	subs	r6, r0, r2
    50f6:	eb01 000a 	add.w	r0, r1, sl
    50fa:	f8d4 1258 	ldr.w	r1, [r4, #600]	; 0x258
    50fe:	f8d4 c250 	ldr.w	ip, [r4, #592]	; 0x250
    5102:	1a40      	subs	r0, r0, r1
    5104:	f8d4 3260 	ldr.w	r3, [r4, #608]	; 0x260
    5108:	1e40      	subs	r0, r0, #1
    510a:	fb0c 3101 	mla	r1, ip, r1, r3
    510e:	fb00 1002 	mla	r0, r0, r2, r1
    5112:	0040      	lsls	r0, r0, #1
    5114:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    5116:	3060      	adds	r0, #96	; 0x60
    5118:	4401      	add	r1, r0
    511a:	fb06 f608 	mul.w	r6, r6, r8
    511e:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    5122:	e040      	b.n	51a6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ee>
    5124:	6920      	ldr	r0, [r4, #16]
    5126:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    512a:	fb00 f008 	mul.w	r0, r0, r8
    512e:	fb08 0611 	mls	r6, r8, r1, r0
    5132:	f894 009d 	ldrb.w	r0, [r4, #157]	; 0x9d
    5136:	2825      	cmp	r0, #37	; 0x25
    5138:	d003      	beq.n	5142 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x58a>
    513a:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    513e:	2825      	cmp	r0, #37	; 0x25
    5140:	d109      	bne.n	5156 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    5142:	f8b4 02cc 	ldrh.w	r0, [r4, #716]	; 0x2cc
    5146:	1a38      	subs	r0, r7, r0
    5148:	b200      	sxth	r0, r0
    514a:	2800      	cmp	r0, #0
    514c:	db03      	blt.n	5156 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    514e:	f894 02cf 	ldrb.w	r0, [r4, #719]	; 0x2cf
    5152:	b100      	cbz	r0, 5156 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x59e>
    5154:	9005      	str	r0, [sp, #20]
    5156:	9807      	ldr	r0, [sp, #28]
    5158:	b1d8      	cbz	r0, 5192 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5da>
    515a:	f8b4 0236 	ldrh.w	r0, [r4, #566]	; 0x236
    515e:	b9c0      	cbnz	r0, 5192 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5da>
    5160:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
    5164:	2800      	cmp	r0, #0
    5166:	d07d      	beq.n	5264 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6ac>
    5168:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    516c:	f003 f964 	bl	8438 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    5170:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    5174:	4401      	add	r1, r0
    5176:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    517a:	fbb1 f0f0 	udiv	r0, r1, r0
    517e:	1a36      	subs	r6, r6, r0
    5180:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    5184:	f003 f92c 	bl	83e0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    5188:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    518c:	1a08      	subs	r0, r1, r0
    518e:	4406      	add	r6, r0
    5190:	3e20      	subs	r6, #32
    5192:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    5196:	eb01 000a 	add.w	r0, r1, sl
    519a:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    519e:	4348      	muls	r0, r1
    51a0:	0041      	lsls	r1, r0, #1
    51a2:	3160      	adds	r1, #96	; 0x60
    51a4:	9805      	ldr	r0, [sp, #20]
    51a6:	f00a f933 	bl	f410 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2b2>
    51aa:	f8cb 000c 	str.w	r0, [fp, #12]
    51ae:	9804      	ldr	r0, [sp, #16]
    51b0:	f8db 200c 	ldr.w	r2, [fp, #12]
    51b4:	1a31      	subs	r1, r6, r0
    51b6:	f8d4 6264 	ldr.w	r6, [r4, #612]	; 0x264
    51ba:	6920      	ldr	r0, [r4, #16]
    51bc:	1b80      	subs	r0, r0, r6
    51be:	f2a0 2052 	subw	r0, r0, #594	; 0x252
    51c2:	f8cb 0010 	str.w	r0, [fp, #16]
    51c6:	4282      	cmp	r2, r0
    51c8:	d800      	bhi.n	51cc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x614>
    51ca:	4610      	mov	r0, r2
    51cc:	f8c4 0230 	str.w	r0, [r4, #560]	; 0x230
    51d0:	2600      	movs	r6, #0
    51d2:	702e      	strb	r6, [r5, #0]
    51d4:	2069      	movs	r0, #105	; 0x69
    51d6:	8128      	strh	r0, [r5, #8]
    51d8:	e9d4 20a6 	ldrd	r2, r0, [r4, #664]	; 0x298
    51dc:	1851      	adds	r1, r2, r1
    51de:	4170      	adcs	r0, r6
    51e0:	e9c5 1004 	strd	r1, r0, [r5, #16]
    51e4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    51e8:	f009 fa75 	bl	e6d6 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    51ec:	f8d4 1230 	ldr.w	r1, [r4, #560]	; 0x230
    51f0:	4408      	add	r0, r1
    51f2:	6068      	str	r0, [r5, #4]
    51f4:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
    51f8:	e9c4 01a6 	strd	r0, r1, [r4, #664]	; 0x298
    51fc:	f8a4 72a0 	strh.w	r7, [r4, #672]	; 0x2a0
    5200:	72ae      	strb	r6, [r5, #10]
    5202:	f8b4 0220 	ldrh.w	r0, [r4, #544]	; 0x220
    5206:	1bc0      	subs	r0, r0, r7
    5208:	b200      	sxth	r0, r0
    520a:	2800      	cmp	r0, #0
    520c:	dd01      	ble.n	5212 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x65a>
    520e:	2002      	movs	r0, #2
    5210:	72a8      	strb	r0, [r5, #10]
    5212:	9808      	ldr	r0, [sp, #32]
    5214:	b338      	cbz	r0, 5266 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6ae>
    5216:	f1b9 0f00 	cmp.w	r9, #0
    521a:	d01c      	beq.n	5256 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    521c:	f8b4 1248 	ldrh.w	r1, [r4, #584]	; 0x248
    5220:	b3f1      	cbz	r1, 52a0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6e8>
    5222:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    5226:	bf00      	nop
    5228:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    522c:	f894 224c 	ldrb.w	r2, [r4, #588]	; 0x24c
    5230:	1c40      	adds	r0, r0, #1
    5232:	4342      	muls	r2, r0
    5234:	428a      	cmp	r2, r1
    5236:	d20e      	bcs.n	5256 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    5238:	7aa8      	ldrb	r0, [r5, #10]
    523a:	b160      	cbz	r0, 5256 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    523c:	72ae      	strb	r6, [r5, #10]
    523e:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    5242:	1c40      	adds	r0, r0, #1
    5244:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    5248:	f7fe f980 	bl	354c <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    524c:	f000 0007 	and.w	r0, r0, #7
    5250:	1c40      	adds	r0, r0, #1
    5252:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    5256:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    525a:	4629      	mov	r1, r5
    525c:	f00a f8ea 	bl	f434 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    5260:	b340      	cbz	r0, 52b4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6fc>
    5262:	e001      	b.n	5268 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6b0>
    5264:	e009      	b.n	527a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6c2>
    5266:	e00b      	b.n	5280 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6c8>
    5268:	980d      	ldr	r0, [sp, #52]	; 0x34
    526a:	f080 0001 	eor.w	r0, r0, #1
    526e:	f884 0270 	strb.w	r0, [r4, #624]	; 0x270
    5272:	2000      	movs	r0, #0
    5274:	b00f      	add	sp, #60	; 0x3c
    5276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    527a:	f240 5179 	movw	r1, #1401	; 0x579
    527e:	e01b      	b.n	52b8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x700>
    5280:	f1b9 0f00 	cmp.w	r9, #0
    5284:	d1ca      	bne.n	521c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x664>
    5286:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    528a:	2800      	cmp	r0, #0
    528c:	d0e3      	beq.n	5256 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    528e:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    5292:	6920      	ldr	r0, [r4, #16]
    5294:	1a41      	subs	r1, r0, r1
    5296:	4628      	mov	r0, r5
    5298:	f008 feac 	bl	dff4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    529c:	0400      	lsls	r0, r0, #16
    529e:	e000      	b.n	52a2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6ea>
    52a0:	e006      	b.n	52b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6f8>
    52a2:	0c00      	lsrs	r0, r0, #16
    52a4:	d0d7      	beq.n	5256 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x69e>
    52a6:	9918      	ldr	r1, [sp, #96]	; 0x60
    52a8:	b101      	cbz	r1, 52ac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6f4>
    52aa:	8008      	strh	r0, [r1, #0]
    52ac:	2001      	movs	r0, #1
    52ae:	e7e1      	b.n	5274 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6bc>
    52b0:	2000      	movs	r0, #0
    52b2:	e7b9      	b.n	5228 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x670>
    52b4:	f240 51d7 	movw	r1, #1495	; 0x5d7
    52b8:	2030      	movs	r0, #48	; 0x30
    52ba:	f7fb ff53 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    52be:	0000      	.short	0x0000
    52c0:	20000100 	.word	0x20000100
    52c4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    52c6:	4604      	mov	r4, r0
    52c8:	f00b fb67 	bl	1099a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    52cc:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
    52d0:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
    52d4:	1ac0      	subs	r0, r0, r3
    52d6:	eb61 0102 	sbc.w	r1, r1, r2
    52da:	2200      	movs	r2, #0
    52dc:	4613      	mov	r3, r2
    52de:	1a12      	subs	r2, r2, r0
    52e0:	418b      	sbcs	r3, r1
    52e2:	db02      	blt.n	52ea <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x732>
    52e4:	f240 6154 	movw	r1, #1620	; 0x654
    52e8:	e04d      	b.n	5386 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7ce>
    52ea:	1c42      	adds	r2, r0, #1
    52ec:	f171 0100 	sbcs.w	r1, r1, #0
    52f0:	db02      	blt.n	52f8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x740>
    52f2:	f240 6155 	movw	r1, #1621	; 0x655
    52f6:	e046      	b.n	5386 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7ce>
    52f8:	6922      	ldr	r2, [r4, #16]
    52fa:	2100      	movs	r1, #0
    52fc:	b10a      	cbz	r2, 5302 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x74a>
    52fe:	fbb0 f1f2 	udiv	r1, r0, r2
    5302:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    5306:	280d      	cmp	r0, #13
    5308:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    530c:	d01b      	beq.n	5346 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x78e>
    530e:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
    5312:	1853      	adds	r3, r2, r1
    5314:	1ac3      	subs	r3, r0, r3
    5316:	b21b      	sxth	r3, r3
    5318:	2b00      	cmp	r3, #0
    531a:	db01      	blt.n	5320 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x768>
    531c:	1c40      	adds	r0, r0, #1
    531e:	e001      	b.n	5324 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x76c>
    5320:	1c49      	adds	r1, r1, #1
    5322:	1850      	adds	r0, r2, r1
    5324:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    5328:	f894 0271 	ldrb.w	r0, [r4, #625]	; 0x271
    532c:	f88d 0000 	strb.w	r0, [sp]
    5330:	9800      	ldr	r0, [sp, #0]
    5332:	9000      	str	r0, [sp, #0]
    5334:	f89d 0000 	ldrb.w	r0, [sp]
    5338:	b940      	cbnz	r0, 534c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x794>
    533a:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    533e:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    5342:	4288      	cmp	r0, r1
    5344:	d102      	bne.n	534c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x794>
    5346:	1c40      	adds	r0, r0, #1
    5348:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    534c:	f8b4 02a2 	ldrh.w	r0, [r4, #674]	; 0x2a2
    5350:	1c40      	adds	r0, r0, #1
    5352:	f8a4 02a2 	strh.w	r0, [r4, #674]	; 0x2a2
    5356:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
    535a:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
    535e:	1a40      	subs	r0, r0, r1
    5360:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    5364:	1e40      	subs	r0, r0, #1
    5366:	4408      	add	r0, r1
    5368:	b285      	uxth	r5, r0
    536a:	e026      	b.n	53ba <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x802>
    536c:	a801      	add	r0, sp, #4
    536e:	2300      	movs	r3, #0
    5370:	9000      	str	r0, [sp, #0]
    5372:	461a      	mov	r2, r3
    5374:	4620      	mov	r0, r4
    5376:	f7ff fd9b 	bl	4eb0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
    537a:	2800      	cmp	r0, #0
    537c:	d03a      	beq.n	53f4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x83c>
    537e:	2801      	cmp	r0, #1
    5380:	d004      	beq.n	538c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7d4>
    5382:	f240 6194 	movw	r1, #1684	; 0x694
    5386:	2030      	movs	r0, #48	; 0x30
    5388:	f7fb feec 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    538c:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    5390:	f8b4 1220 	ldrh.w	r1, [r4, #544]	; 0x220
    5394:	1a42      	subs	r2, r0, r1
    5396:	b212      	sxth	r2, r2
    5398:	2a00      	cmp	r2, #0
    539a:	da09      	bge.n	53b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7f8>
    539c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    53a0:	4402      	add	r2, r0
    53a2:	1aaa      	subs	r2, r5, r2
    53a4:	b212      	sxth	r2, r2
    53a6:	2a00      	cmp	r2, #0
    53a8:	da02      	bge.n	53b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7f8>
    53aa:	f8a4 126e 	strh.w	r1, [r4, #622]	; 0x26e
    53ae:	e004      	b.n	53ba <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x802>
    53b0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    53b4:	4408      	add	r0, r1
    53b6:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    53ba:	f8b4 126e 	ldrh.w	r1, [r4, #622]	; 0x26e
    53be:	1a68      	subs	r0, r5, r1
    53c0:	b200      	sxth	r0, r0
    53c2:	2800      	cmp	r0, #0
    53c4:	dad2      	bge.n	536c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7b4>
    53c6:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
    53ca:	b188      	cbz	r0, 53f0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x838>
    53cc:	f05f 0008 	movs.w	r0, #8
    53d0:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    53d4:	2202      	movs	r2, #2
    53d6:	4908      	ldr	r1, [pc, #32]	; (53f8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x840>)
    53d8:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    53dc:	f009 f8e4 	bl	e5a8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    53e0:	4620      	mov	r0, r4
    53e2:	f00a f9b8 	bl	f756 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    53e6:	4620      	mov	r0, r4
    53e8:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    53ec:	f00a b887 	b.w	f4fe <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3a0>
    53f0:	203e      	movs	r0, #62	; 0x3e
    53f2:	e7ed      	b.n	53d0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x818>
    53f4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    53f6:	0000      	.short	0x0000
    53f8:	0000e865 	.word	0x0000e865
    53fc:	00000000 	.word	0x00000000
    5400:	00010000 	.word	0x00010000
    5404:	00000000 	.word	0x00000000
    5408:	00010000 	.word	0x00010000
    540c:	00000000 	.word	0x00000000
    5410:	00001e14 	.word	0x00001e14
    5414:	00001130 	.word	0x00001130
    5418:	00fa01f4 	.word	0x00fa01f4
    541c:	00640096 	.word	0x00640096
    5420:	0032004b 	.word	0x0032004b
    5424:	0014001e 	.word	0x0014001e
    5428:	0005000a 	.word	0x0005000a
    542c:	00010002 	.word	0x00010002

00005430 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    5430:	b510      	push	{r4, lr}
    5432:	4604      	mov	r4, r0
    5434:	f8d0 02d4 	ldr.w	r0, [r0, #724]	; 0x2d4
    5438:	6921      	ldr	r1, [r4, #16]
    543a:	4288      	cmp	r0, r1
    543c:	d109      	bne.n	5452 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    543e:	f8b4 12d8 	ldrh.w	r1, [r4, #728]	; 0x2d8
    5442:	8b22      	ldrh	r2, [r4, #24]
    5444:	4291      	cmp	r1, r2
    5446:	d104      	bne.n	5452 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    5448:	f8b4 12da 	ldrh.w	r1, [r4, #730]	; 0x2da
    544c:	8b62      	ldrh	r2, [r4, #26]
    544e:	4291      	cmp	r1, r2
    5450:	d014      	beq.n	547c <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4c>
    5452:	8821      	ldrh	r1, [r4, #0]
    5454:	f8a4 11ca 	strh.w	r1, [r4, #458]	; 0x1ca
    5458:	f008 fcf8 	bl	de4c <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    545c:	f8a4 01cc 	strh.w	r0, [r4, #460]	; 0x1cc
    5460:	f8b4 02d8 	ldrh.w	r0, [r4, #728]	; 0x2d8
    5464:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    5468:	f8b4 02da 	ldrh.w	r0, [r4, #730]	; 0x2da
    546c:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    5470:	2202      	movs	r2, #2
    5472:	4907      	ldr	r1, [pc, #28]	; (5490 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x60>)
    5474:	f504 70df 	add.w	r0, r4, #446	; 0x1be
    5478:	f009 f8aa 	bl	e5d0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    547c:	2102      	movs	r1, #2
    547e:	4620      	mov	r0, r4
    5480:	f7fd fc0e 	bl	2ca0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    5484:	2000      	movs	r0, #0
    5486:	f804 0f9e 	strb.w	r0, [r4, #158]!
    548a:	2003      	movs	r0, #3
    548c:	70e0      	strb	r0, [r4, #3]
    548e:	bd10      	pop	{r4, pc}
    5490:	0000e8f3 	.word	0x0000e8f3

00005494 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    5494:	4806      	ldr	r0, [pc, #24]	; (54b0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    5496:	4905      	ldr	r1, [pc, #20]	; (54ac <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    5498:	6501      	str	r1, [r0, #80]	; 0x50
    549a:	4906      	ldr	r1, [pc, #24]	; (54b4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    549c:	6541      	str	r1, [r0, #84]	; 0x54
    549e:	4807      	ldr	r0, [pc, #28]	; (54bc <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    54a0:	4905      	ldr	r1, [pc, #20]	; (54b8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    54a2:	6501      	str	r1, [r0, #80]	; 0x50
    54a4:	4906      	ldr	r1, [pc, #24]	; (54c0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    54a6:	6541      	str	r1, [r0, #84]	; 0x54
    54a8:	4770      	bx	lr
    54aa:	0000      	.short	0x0000
    54ac:	0000678d 	.word	0x0000678d
    54b0:	2000012c 	.word	0x2000012c
    54b4:	00006875 	.word	0x00006875
    54b8:	0000e915 	.word	0x0000e915
    54bc:	200001d8 	.word	0x200001d8
    54c0:	00006cc5 	.word	0x00006cc5

000054c4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    54c4:	481e      	ldr	r0, [pc, #120]	; (5540 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    54c6:	491d      	ldr	r1, [pc, #116]	; (553c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    54c8:	6081      	str	r1, [r0, #8]
    54ca:	491e      	ldr	r1, [pc, #120]	; (5544 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    54cc:	6041      	str	r1, [r0, #4]
    54ce:	491e      	ldr	r1, [pc, #120]	; (5548 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    54d0:	6001      	str	r1, [r0, #0]
    54d2:	491e      	ldr	r1, [pc, #120]	; (554c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    54d4:	6281      	str	r1, [r0, #40]	; 0x28
    54d6:	491e      	ldr	r1, [pc, #120]	; (5550 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    54d8:	62c1      	str	r1, [r0, #44]	; 0x2c
    54da:	491e      	ldr	r1, [pc, #120]	; (5554 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    54dc:	60c1      	str	r1, [r0, #12]
    54de:	491e      	ldr	r1, [pc, #120]	; (5558 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    54e0:	6181      	str	r1, [r0, #24]
    54e2:	491e      	ldr	r1, [pc, #120]	; (555c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    54e4:	6301      	str	r1, [r0, #48]	; 0x30
    54e6:	491e      	ldr	r1, [pc, #120]	; (5560 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    54e8:	6201      	str	r1, [r0, #32]
    54ea:	491e      	ldr	r1, [pc, #120]	; (5564 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    54ec:	64c1      	str	r1, [r0, #76]	; 0x4c
    54ee:	491e      	ldr	r1, [pc, #120]	; (5568 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    54f0:	6481      	str	r1, [r0, #72]	; 0x48
    54f2:	491e      	ldr	r1, [pc, #120]	; (556c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    54f4:	6441      	str	r1, [r0, #68]	; 0x44
    54f6:	491e      	ldr	r1, [pc, #120]	; (5570 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    54f8:	6341      	str	r1, [r0, #52]	; 0x34
    54fa:	491e      	ldr	r1, [pc, #120]	; (5574 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    54fc:	61c1      	str	r1, [r0, #28]
    54fe:	491e      	ldr	r1, [pc, #120]	; (5578 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    5500:	6241      	str	r1, [r0, #36]	; 0x24
    5502:	481f      	ldr	r0, [pc, #124]	; (5580 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    5504:	491d      	ldr	r1, [pc, #116]	; (557c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    5506:	6081      	str	r1, [r0, #8]
    5508:	491e      	ldr	r1, [pc, #120]	; (5584 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    550a:	61c1      	str	r1, [r0, #28]
    550c:	491e      	ldr	r1, [pc, #120]	; (5588 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    550e:	6241      	str	r1, [r0, #36]	; 0x24
    5510:	491e      	ldr	r1, [pc, #120]	; (558c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    5512:	62c1      	str	r1, [r0, #44]	; 0x2c
    5514:	491e      	ldr	r1, [pc, #120]	; (5590 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    5516:	6101      	str	r1, [r0, #16]
    5518:	491e      	ldr	r1, [pc, #120]	; (5594 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    551a:	6141      	str	r1, [r0, #20]
    551c:	491e      	ldr	r1, [pc, #120]	; (5598 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    551e:	6441      	str	r1, [r0, #68]	; 0x44
    5520:	491e      	ldr	r1, [pc, #120]	; (559c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    5522:	6341      	str	r1, [r0, #52]	; 0x34
    5524:	491e      	ldr	r1, [pc, #120]	; (55a0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    5526:	6181      	str	r1, [r0, #24]
    5528:	491e      	ldr	r1, [pc, #120]	; (55a4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    552a:	6301      	str	r1, [r0, #48]	; 0x30
    552c:	491e      	ldr	r1, [pc, #120]	; (55a8 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    552e:	6481      	str	r1, [r0, #72]	; 0x48
    5530:	491e      	ldr	r1, [pc, #120]	; (55ac <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe8>)
    5532:	64c1      	str	r1, [r0, #76]	; 0x4c
    5534:	491e      	ldr	r1, [pc, #120]	; (55b0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xec>)
    5536:	6381      	str	r1, [r0, #56]	; 0x38
    5538:	4770      	bx	lr
    553a:	0000      	.short	0x0000
    553c:	00006bd9 	.word	0x00006bd9
    5540:	2000012c 	.word	0x2000012c
    5544:	00006575 	.word	0x00006575
    5548:	000065e1 	.word	0x000065e1
    554c:	00006881 	.word	0x00006881
    5550:	0000f7cf 	.word	0x0000f7cf
    5554:	000066a1 	.word	0x000066a1
    5558:	00006bb1 	.word	0x00006bb1
    555c:	00006c71 	.word	0x00006c71
    5560:	00006741 	.word	0x00006741
    5564:	0000eb0d 	.word	0x0000eb0d
    5568:	0000eac5 	.word	0x0000eac5
    556c:	00006b29 	.word	0x00006b29
    5570:	00006b5d 	.word	0x00006b5d
    5574:	00006be5 	.word	0x00006be5
    5578:	0000674d 	.word	0x0000674d
    557c:	0000e8d5 	.word	0x0000e8d5
    5580:	200001d8 	.word	0x200001d8
    5584:	00006db1 	.word	0x00006db1
    5588:	0000f89d 	.word	0x0000f89d
    558c:	0000f8a1 	.word	0x0000f8a1
    5590:	0000f877 	.word	0x0000f877
    5594:	0000f909 	.word	0x0000f909
    5598:	00006d05 	.word	0x00006d05
    559c:	0000f8e7 	.word	0x0000f8e7
    55a0:	00006d3d 	.word	0x00006d3d
    55a4:	0000f927 	.word	0x0000f927
    55a8:	0000eae9 	.word	0x0000eae9
    55ac:	0000eb33 	.word	0x0000eb33
    55b0:	0000f905 	.word	0x0000f905

000055b4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    55b4:	4806      	ldr	r0, [pc, #24]	; (55d0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    55b6:	4905      	ldr	r1, [pc, #20]	; (55cc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    55b8:	6581      	str	r1, [r0, #88]	; 0x58
    55ba:	4906      	ldr	r1, [pc, #24]	; (55d4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    55bc:	6601      	str	r1, [r0, #96]	; 0x60
    55be:	4807      	ldr	r0, [pc, #28]	; (55dc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    55c0:	4905      	ldr	r1, [pc, #20]	; (55d8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    55c2:	6581      	str	r1, [r0, #88]	; 0x58
    55c4:	4906      	ldr	r1, [pc, #24]	; (55e0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    55c6:	65c1      	str	r1, [r0, #92]	; 0x5c
    55c8:	4770      	bx	lr
    55ca:	0000      	.short	0x0000
    55cc:	000068d1 	.word	0x000068d1
    55d0:	2000012c 	.word	0x2000012c
    55d4:	000069b5 	.word	0x000069b5
    55d8:	00010801 	.word	0x00010801
    55dc:	200001d8 	.word	0x200001d8
    55e0:	0000f8c7 	.word	0x0000f8c7

000055e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    55e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    55e6:	4c7c      	ldr	r4, [pc, #496]	; (57d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4>)
    55e8:	2101      	movs	r1, #1
    55ea:	f1a4 0610 	sub.w	r6, r4, #16
    55ee:	7021      	strb	r1, [r4, #0]
    55f0:	2500      	movs	r5, #0
    55f2:	6060      	str	r0, [r4, #4]
    55f4:	8075      	strh	r5, [r6, #2]
    55f6:	7075      	strb	r5, [r6, #1]
    55f8:	7035      	strb	r5, [r6, #0]
    55fa:	f880 122b 	strb.w	r1, [r0, #555]	; 0x22b
    55fe:	8800      	ldrh	r0, [r0, #0]
    5600:	f7fc fa88 	bl	1b14 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5604:	b180      	cbz	r0, 5628 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44>
    5606:	6860      	ldr	r0, [r4, #4]
    5608:	8800      	ldrh	r0, [r0, #0]
    560a:	f7fc fceb 	bl	1fe4 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    560e:	6860      	ldr	r0, [r4, #4]
    5610:	8800      	ldrh	r0, [r0, #0]
    5612:	f7fc fc8f 	bl	1f34 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    5616:	6860      	ldr	r0, [r4, #4]
    5618:	f8b0 1222 	ldrh.w	r1, [r0, #546]	; 0x222
    561c:	b1c9      	cbz	r1, 5652 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    561e:	3080      	adds	r0, #128	; 0x80
    5620:	f00a f8a8 	bl	f774 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5624:	b118      	cbz	r0, 562e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a>
    5626:	e014      	b.n	5652 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    5628:	f640 419f 	movw	r1, #3231	; 0xc9f
    562c:	e06c      	b.n	5708 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124>
    562e:	6860      	ldr	r0, [r4, #4]
    5630:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    5634:	f88d 1000 	strb.w	r1, [sp]
    5638:	9900      	ldr	r1, [sp, #0]
    563a:	9100      	str	r1, [sp, #0]
    563c:	f89d 1000 	ldrb.w	r1, [sp]
    5640:	b139      	cbz	r1, 5652 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    5642:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    5646:	2301      	movs	r3, #1
    5648:	4619      	mov	r1, r3
    564a:	3080      	adds	r0, #128	; 0x80
    564c:	f008 fc04 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5650:	b180      	cbz	r0, 5674 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90>
    5652:	6860      	ldr	r0, [r4, #4]
    5654:	3080      	adds	r0, #128	; 0x80
    5656:	f00a f88d 	bl	f774 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    565a:	b128      	cbz	r0, 5668 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    565c:	6860      	ldr	r0, [r4, #4]
    565e:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    5662:	bf00      	nop
    5664:	f000 fb84 	bl	5d70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x78c>
    5668:	6860      	ldr	r0, [r4, #4]
    566a:	f890 122d 	ldrb.w	r1, [r0, #557]	; 0x22d
    566e:	b189      	cbz	r1, 5694 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0>
    5670:	80b5      	strh	r5, [r6, #4]
    5672:	e01e      	b.n	56b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    5674:	6860      	ldr	r0, [r4, #4]
    5676:	f8a0 50d0 	strh.w	r5, [r0, #208]	; 0xd0
    567a:	f890 1131 	ldrb.w	r1, [r0, #305]	; 0x131
    567e:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    5682:	2100      	movs	r1, #0
    5684:	2002      	movs	r0, #2
    5686:	f000 fe39 	bl	62fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    568a:	6860      	ldr	r0, [r4, #4]
    568c:	f880 522a 	strb.w	r5, [r0, #554]	; 0x22a
    5690:	2002      	movs	r0, #2
    5692:	e7e7      	b.n	5664 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    5694:	f890 11c6 	ldrb.w	r1, [r0, #454]	; 0x1c6
    5698:	f88d 1000 	strb.w	r1, [sp]
    569c:	9900      	ldr	r1, [sp, #0]
    569e:	9100      	str	r1, [sp, #0]
    56a0:	f89d 1000 	ldrb.w	r1, [sp]
    56a4:	b919      	cbnz	r1, 56ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    56a6:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
    56a8:	8b02      	ldrh	r2, [r0, #24]
    56aa:	4291      	cmp	r1, r2
    56ac:	d800      	bhi.n	56b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc>
    56ae:	8b01      	ldrh	r1, [r0, #24]
    56b0:	80b1      	strh	r1, [r6, #4]
    56b2:	f8b0 1226 	ldrh.w	r1, [r0, #550]	; 0x226
    56b6:	1e49      	subs	r1, r1, #1
    56b8:	b28f      	uxth	r7, r1
    56ba:	f8b0 1228 	ldrh.w	r1, [r0, #552]	; 0x228
    56be:	4439      	add	r1, r7
    56c0:	f8a0 1228 	strh.w	r1, [r0, #552]	; 0x228
    56c4:	f830 1fcc 	ldrh.w	r1, [r0, #204]!
    56c8:	4439      	add	r1, r7
    56ca:	8001      	strh	r1, [r0, #0]
    56cc:	f001 fba0 	bl	6e10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    56d0:	b120      	cbz	r0, 56dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8>
    56d2:	6860      	ldr	r0, [r4, #4]
    56d4:	f850 1fc0 	ldr.w	r1, [r0, #192]!
    56d8:	4439      	add	r1, r7
    56da:	6001      	str	r1, [r0, #0]
    56dc:	6861      	ldr	r1, [r4, #4]
    56de:	f8b1 0222 	ldrh.w	r0, [r1, #546]	; 0x222
    56e2:	2801      	cmp	r0, #1
    56e4:	d802      	bhi.n	56ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    56e6:	1c40      	adds	r0, r0, #1
    56e8:	f8a1 0222 	strh.w	r0, [r1, #546]	; 0x222
    56ec:	b10f      	cbz	r7, 56f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e>
    56ee:	f881 5234 	strb.w	r5, [r1, #564]	; 0x234
    56f2:	f881 522a 	strb.w	r5, [r1, #554]	; 0x22a
    56f6:	f8b1 2226 	ldrh.w	r2, [r1, #550]	; 0x226
    56fa:	f101 0080 	add.w	r0, r1, #128	; 0x80
    56fe:	f008 fd57 	bl	e1b0 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    5702:	b120      	cbz	r0, 570e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a>
    5704:	f640 41e6 	movw	r1, #3302	; 0xce6
    5708:	2031      	movs	r0, #49	; 0x31
    570a:	f7fb fd2b 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    570e:	6860      	ldr	r0, [r4, #4]
    5710:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5714:	290a      	cmp	r1, #10
    5716:	d001      	beq.n	571c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138>
    5718:	290b      	cmp	r1, #11
    571a:	d119      	bne.n	5750 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    571c:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
    5720:	f8b0 32cc 	ldrh.w	r3, [r0, #716]	; 0x2cc
    5724:	1ad2      	subs	r2, r2, r3
    5726:	b212      	sxth	r2, r2
    5728:	2a00      	cmp	r2, #0
    572a:	db11      	blt.n	5750 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    572c:	f8d0 12ce 	ldr.w	r1, [r0, #718]	; 0x2ce
    5730:	f8c0 10a6 	str.w	r1, [r0, #166]	; 0xa6
    5734:	f890 12d2 	ldrb.w	r1, [r0, #722]	; 0x2d2
    5738:	f880 10aa 	strb.w	r1, [r0, #170]	; 0xaa
    573c:	2103      	movs	r1, #3
    573e:	f7fd faaf 	bl	2ca0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    5742:	6860      	ldr	r0, [r4, #4]
    5744:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    5748:	21ff      	movs	r1, #255	; 0xff
    574a:	f880 10f4 	strb.w	r1, [r0, #244]	; 0xf4
    574e:	e026      	b.n	579e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    5750:	2925      	cmp	r1, #37	; 0x25
    5752:	d111      	bne.n	5778 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    5754:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    5758:	f8b0 22cc 	ldrh.w	r2, [r0, #716]	; 0x2cc
    575c:	1a89      	subs	r1, r1, r2
    575e:	b209      	sxth	r1, r1
    5760:	2900      	cmp	r1, #0
    5762:	db09      	blt.n	5778 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    5764:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    5768:	f000 fe82 	bl	6470 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
    576c:	2800      	cmp	r0, #0
    576e:	6860      	ldr	r0, [r4, #4]
    5770:	f880 513c 	strb.w	r5, [r0, #316]	; 0x13c
    5774:	d029      	beq.n	57ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    5776:	e012      	b.n	579e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    5778:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    577c:	2925      	cmp	r1, #37	; 0x25
    577e:	d001      	beq.n	5784 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0>
    5780:	2927      	cmp	r1, #39	; 0x27
    5782:	d10c      	bne.n	579e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    5784:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    5788:	f8b0 22cc 	ldrh.w	r2, [r0, #716]	; 0x2cc
    578c:	1a89      	subs	r1, r1, r2
    578e:	b209      	sxth	r1, r1
    5790:	2900      	cmp	r1, #0
    5792:	db04      	blt.n	579e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    5794:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
    5798:	f000 fe6a 	bl	6470 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
    579c:	b1a8      	cbz	r0, 57ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    579e:	480f      	ldr	r0, [pc, #60]	; (57dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>)
    57a0:	9000      	str	r0, [sp, #0]
    57a2:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    57a6:	4b0e      	ldr	r3, [pc, #56]	; (57e0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
    57a8:	4a0e      	ldr	r2, [pc, #56]	; (57e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
    57aa:	f7fc fca9 	bl	2100 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA>
    57ae:	6860      	ldr	r0, [r4, #4]
    57b0:	2301      	movs	r3, #1
    57b2:	2105      	movs	r1, #5
    57b4:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    57b8:	3080      	adds	r0, #128	; 0x80
    57ba:	f008 fb4d 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    57be:	2800      	cmp	r0, #0
    57c0:	d009      	beq.n	57d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f2>
    57c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    57c6:	f7fc bc95 	b.w	20f4 <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q>
    57ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    57ce:	2100      	movs	r1, #0
    57d0:	4608      	mov	r0, r1
    57d2:	f000 bb9f 	b.w	5f14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x930>
    57d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    57d8:	20000124 	.word	0x20000124
    57dc:	00005f15 	.word	0x00005f15
    57e0:	00005a65 	.word	0x00005a65
    57e4:	000063bd 	.word	0x000063bd
    57e8:	491d      	ldr	r1, [pc, #116]	; (5860 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27c>)
    57ea:	b508      	push	{r3, lr}
    57ec:	6849      	ldr	r1, [r1, #4]
    57ee:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    57f2:	b1c0      	cbz	r0, 5826 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x242>
    57f4:	2a11      	cmp	r2, #17
    57f6:	d006      	beq.n	5806 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x222>
    57f8:	2a15      	cmp	r2, #21
    57fa:	d007      	beq.n	580c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    57fc:	2a16      	cmp	r2, #22
    57fe:	d009      	beq.n	5814 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x230>
    5800:	2a1c      	cmp	r2, #28
    5802:	d128      	bne.n	5856 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    5804:	e009      	b.n	581a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x236>
    5806:	2101      	movs	r1, #1
    5808:	200b      	movs	r0, #11
    580a:	e008      	b.n	581e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    580c:	4814      	ldr	r0, [pc, #80]	; (5860 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27c>)
    580e:	f009 ffea 	bl	f7e6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x90>
    5812:	e006      	b.n	5822 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23e>
    5814:	f000 fd90 	bl	6338 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd54>
    5818:	e003      	b.n	5822 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23e>
    581a:	2101      	movs	r1, #1
    581c:	2006      	movs	r0, #6
    581e:	f000 fd6d 	bl	62fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5822:	2001      	movs	r0, #1
    5824:	bd08      	pop	{r3, pc}
    5826:	2a22      	cmp	r2, #34	; 0x22
    5828:	d004      	beq.n	5834 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    582a:	2a2f      	cmp	r2, #47	; 0x2f
    582c:	d113      	bne.n	5856 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    582e:	2101      	movs	r1, #1
    5830:	2011      	movs	r0, #17
    5832:	e7f4      	b.n	581e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    5834:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    5838:	2802      	cmp	r0, #2
    583a:	d00e      	beq.n	585a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    583c:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    5840:	2801      	cmp	r0, #1
    5842:	d108      	bne.n	5856 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    5844:	f891 013d 	ldrb.w	r0, [r1, #317]	; 0x13d
    5848:	f88d 0000 	strb.w	r0, [sp]
    584c:	9800      	ldr	r0, [sp, #0]
    584e:	9000      	str	r0, [sp, #0]
    5850:	f89d 0000 	ldrb.w	r0, [sp]
    5854:	b108      	cbz	r0, 585a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    5856:	2000      	movs	r0, #0
    5858:	bd08      	pop	{r3, pc}
    585a:	2101      	movs	r1, #1
    585c:	2017      	movs	r0, #23
    585e:	e7de      	b.n	581e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    5860:	20000124 	.word	0x20000124
    5864:	b538      	push	{r3, r4, r5, lr}
    5866:	2800      	cmp	r0, #0
    5868:	d173      	bne.n	5952 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    586a:	4c3b      	ldr	r4, [pc, #236]	; (5958 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x374>)
    586c:	6860      	ldr	r0, [r4, #4]
    586e:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
    5872:	07ca      	lsls	r2, r1, #31
    5874:	d002      	beq.n	587c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x298>
    5876:	2101      	movs	r1, #1
    5878:	2009      	movs	r0, #9
    587a:	e066      	b.n	594a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    587c:	078a      	lsls	r2, r1, #30
    587e:	d50a      	bpl.n	5896 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
    5880:	2101      	movs	r1, #1
    5882:	200c      	movs	r0, #12
    5884:	f000 fd3a 	bl	62fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5888:	6860      	ldr	r0, [r4, #4]
    588a:	f810 1fdd 	ldrb.w	r1, [r0, #221]!
    588e:	f041 0101 	orr.w	r1, r1, #1
    5892:	7001      	strb	r1, [r0, #0]
    5894:	e05b      	b.n	594e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36a>
    5896:	074a      	lsls	r2, r1, #29
    5898:	d502      	bpl.n	58a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    589a:	2101      	movs	r1, #1
    589c:	2013      	movs	r0, #19
    589e:	e054      	b.n	594a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    58a0:	070a      	lsls	r2, r1, #28
    58a2:	d506      	bpl.n	58b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ce>
    58a4:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    58a8:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    58ac:	2101      	movs	r1, #1
    58ae:	2007      	movs	r0, #7
    58b0:	e04b      	b.n	594a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    58b2:	f011 0f30 	tst.w	r1, #48	; 0x30
    58b6:	d044      	beq.n	5942 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35e>
    58b8:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    58bc:	f88d 1000 	strb.w	r1, [sp]
    58c0:	9900      	ldr	r1, [sp, #0]
    58c2:	9100      	str	r1, [sp, #0]
    58c4:	f89d 1000 	ldrb.w	r1, [sp]
    58c8:	bbc1      	cbnz	r1, 593c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x358>
    58ca:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    58ce:	2500      	movs	r5, #0
    58d0:	f88d 1000 	strb.w	r1, [sp]
    58d4:	9900      	ldr	r1, [sp, #0]
    58d6:	9100      	str	r1, [sp, #0]
    58d8:	f89d 1000 	ldrb.w	r1, [sp]
    58dc:	b1c1      	cbz	r1, 5910 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x32c>
    58de:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    58e2:	2925      	cmp	r1, #37	; 0x25
    58e4:	d02b      	beq.n	593e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35a>
    58e6:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    58ea:	2925      	cmp	r1, #37	; 0x25
    58ec:	d027      	beq.n	593e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35a>
    58ee:	2300      	movs	r3, #0
    58f0:	f200 22ce 	addw	r2, r0, #718	; 0x2ce
    58f4:	f500 7199 	add.w	r1, r0, #306	; 0x132
    58f8:	f008 fe80 	bl	e5fc <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    58fc:	6860      	ldr	r0, [r4, #4]
    58fe:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    5902:	f021 0120 	bic.w	r1, r1, #32
    5906:	f041 0110 	orr.w	r1, r1, #16
    590a:	6001      	str	r1, [r0, #0]
    590c:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    5910:	6860      	ldr	r0, [r4, #4]
    5912:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    5916:	06c9      	lsls	r1, r1, #27
    5918:	d51b      	bpl.n	5952 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    591a:	f008 fe8a 	bl	e632 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    591e:	480e      	ldr	r0, [pc, #56]	; (5958 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x374>)
    5920:	f009 f848 	bl	e9b4 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
    5924:	6861      	ldr	r1, [r4, #4]
    5926:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    592a:	8bc2      	ldrh	r2, [r0, #30]
    592c:	f8a1 2128 	strh.w	r2, [r1, #296]	; 0x128
    5930:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    5932:	f8a1 012a 	strh.w	r0, [r1, #298]	; 0x12a
    5936:	2101      	movs	r1, #1
    5938:	2015      	movs	r0, #21
    593a:	e006      	b.n	594a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    593c:	e009      	b.n	5952 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    593e:	2301      	movs	r3, #1
    5940:	e7d6      	b.n	58f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x30c>
    5942:	0648      	lsls	r0, r1, #25
    5944:	d505      	bpl.n	5952 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    5946:	2101      	movs	r1, #1
    5948:	2024      	movs	r0, #36	; 0x24
    594a:	f000 fcd7 	bl	62fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    594e:	2001      	movs	r0, #1
    5950:	bd38      	pop	{r3, r4, r5, pc}
    5952:	2000      	movs	r0, #0
    5954:	bd38      	pop	{r3, r4, r5, pc}
    5956:	0000      	.short	0x0000
    5958:	20000124 	.word	0x20000124
    595c:	b570      	push	{r4, r5, r6, lr}
    595e:	460d      	mov	r5, r1
    5960:	4606      	mov	r6, r0
    5962:	f008 fd80 	bl	e466 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    5966:	4604      	mov	r4, r0
    5968:	4630      	mov	r0, r6
    596a:	f008 fd7e 	bl	e46a <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    596e:	4629      	mov	r1, r5
    5970:	f000 f81e 	bl	59b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3cc>
    5974:	b1b8      	cbz	r0, 59a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c2>
    5976:	4620      	mov	r0, r4
    5978:	f008 fb18 	bl	dfac <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    597c:	0001      	movs	r1, r0
    597e:	d00d      	beq.n	599c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b8>
    5980:	480a      	ldr	r0, [pc, #40]	; (59ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c8>)
    5982:	6840      	ldr	r0, [r0, #4]
    5984:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    5988:	428a      	cmp	r2, r1
    598a:	d007      	beq.n	599c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b8>
    598c:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    5990:	2901      	cmp	r1, #1
    5992:	d005      	beq.n	59a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3bc>
    5994:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    5998:	4220      	tst	r0, r4
    599a:	d004      	beq.n	59a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c2>
    599c:	2001      	movs	r0, #1
    599e:	bd70      	pop	{r4, r5, r6, pc}
    59a0:	f890 013f 	ldrb.w	r0, [r0, #319]	; 0x13f
    59a4:	e7f8      	b.n	5998 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b4>
    59a6:	2000      	movs	r0, #0
    59a8:	bd70      	pop	{r4, r5, r6, pc}
    59aa:	0000      	.short	0x0000
    59ac:	20000124 	.word	0x20000124
    59b0:	b570      	push	{r4, r5, r6, lr}
    59b2:	460d      	mov	r5, r1
    59b4:	4604      	mov	r4, r0
    59b6:	f008 faf9 	bl	dfac <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    59ba:	b350      	cbz	r0, 5a12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    59bc:	4916      	ldr	r1, [pc, #88]	; (5a18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x434>)
    59be:	6849      	ldr	r1, [r1, #4]
    59c0:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
    59c4:	4282      	cmp	r2, r0
    59c6:	d024      	beq.n	5a12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    59c8:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
    59cc:	2b01      	cmp	r3, #1
    59ce:	d005      	beq.n	59dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f8>
    59d0:	f891 3066 	ldrb.w	r3, [r1, #102]	; 0x66
    59d4:	4223      	tst	r3, r4
    59d6:	d013      	beq.n	5a00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x41c>
    59d8:	b11d      	cbz	r5, 59e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3fe>
    59da:	e01a      	b.n	5a12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    59dc:	f891 313e 	ldrb.w	r3, [r1, #318]	; 0x13e
    59e0:	e7f8      	b.n	59d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f0>
    59e2:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    59e6:	4221      	tst	r1, r4
    59e8:	d113      	bne.n	5a12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    59ea:	b15a      	cbz	r2, 5a04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x420>
    59ec:	2a04      	cmp	r2, #4
    59ee:	d00e      	beq.n	5a0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    59f0:	2804      	cmp	r0, #4
    59f2:	d00c      	beq.n	5a0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    59f4:	2a08      	cmp	r2, #8
    59f6:	d00a      	beq.n	5a0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    59f8:	2808      	cmp	r0, #8
    59fa:	d008      	beq.n	5a0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    59fc:	4282      	cmp	r2, r0
    59fe:	d908      	bls.n	5a12 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    5a00:	2000      	movs	r0, #0
    5a02:	bd70      	pop	{r4, r5, r6, pc}
    5a04:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
    5a08:	2006      	movs	r0, #6
    5a0a:	f7fb fbab 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a0e:	4282      	cmp	r2, r0
    5a10:	d3f6      	bcc.n	5a00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x41c>
    5a12:	2001      	movs	r0, #1
    5a14:	bd70      	pop	{r4, r5, r6, pc}
    5a16:	0000      	.short	0x0000
    5a18:	20000124 	.word	0x20000124
    5a1c:	b510      	push	{r4, lr}
    5a1e:	4c10      	ldr	r4, [pc, #64]	; (5a60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x47c>)
    5a20:	2301      	movs	r3, #1
    5a22:	2100      	movs	r1, #0
    5a24:	6860      	ldr	r0, [r4, #4]
    5a26:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    5a2a:	3080      	adds	r0, #128	; 0x80
    5a2c:	f008 fa14 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5a30:	b140      	cbz	r0, 5a44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x460>
    5a32:	6860      	ldr	r0, [r4, #4]
    5a34:	2301      	movs	r3, #1
    5a36:	2104      	movs	r1, #4
    5a38:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5a3c:	3080      	adds	r0, #128	; 0x80
    5a3e:	f008 fa0b 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5a42:	b108      	cbz	r0, 5a48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x464>
    5a44:	2000      	movs	r0, #0
    5a46:	bd10      	pop	{r4, pc}
    5a48:	6860      	ldr	r0, [r4, #4]
    5a4a:	f890 00ca 	ldrb.w	r0, [r0, #202]	; 0xca
    5a4e:	2800      	cmp	r0, #0
    5a50:	d0f9      	beq.n	5a46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x462>
    5a52:	2100      	movs	r1, #0
    5a54:	2012      	movs	r0, #18
    5a56:	f000 fc51 	bl	62fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5a5a:	2001      	movs	r0, #1
    5a5c:	bd10      	pop	{r4, pc}
    5a5e:	0000      	.short	0x0000
    5a60:	20000124 	.word	0x20000124
    5a64:	490d      	ldr	r1, [pc, #52]	; (5a9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b8>)
    5a66:	4602      	mov	r2, r0
    5a68:	7848      	ldrb	r0, [r1, #1]
    5a6a:	b9a0      	cbnz	r0, 5a96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b2>
    5a6c:	f101 0010 	add.w	r0, r1, #16
    5a70:	6840      	ldr	r0, [r0, #4]
    5a72:	b142      	cbz	r2, 5a86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a2>
    5a74:	7889      	ldrb	r1, [r1, #2]
    5a76:	0709      	lsls	r1, r1, #28
    5a78:	d503      	bpl.n	5a82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49e>
    5a7a:	f890 009f 	ldrb.w	r0, [r0, #159]	; 0x9f
    5a7e:	2807      	cmp	r0, #7
    5a80:	d009      	beq.n	5a96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b2>
    5a82:	2001      	movs	r0, #1
    5a84:	4770      	bx	lr
    5a86:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    5a8a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5a8c:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    5a8e:	428a      	cmp	r2, r1
    5a90:	d801      	bhi.n	5a96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b2>
    5a92:	f7ff b83f 	b.w	4b14 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    5a96:	2000      	movs	r0, #0
    5a98:	4770      	bx	lr
    5a9a:	0000      	.short	0x0000
    5a9c:	20000114 	.word	0x20000114
    5aa0:	b538      	push	{r3, r4, r5, lr}
    5aa2:	4c32      	ldr	r4, [pc, #200]	; (5b6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x588>)
    5aa4:	4605      	mov	r5, r0
    5aa6:	6860      	ldr	r0, [r4, #4]
    5aa8:	3080      	adds	r0, #128	; 0x80
    5aaa:	f009 fe63 	bl	f774 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5aae:	2800      	cmp	r0, #0
    5ab0:	d15b      	bne.n	5b6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5ab2:	2d00      	cmp	r5, #0
    5ab4:	d159      	bne.n	5b6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5ab6:	6860      	ldr	r0, [r4, #4]
    5ab8:	2301      	movs	r3, #1
    5aba:	4619      	mov	r1, r3
    5abc:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    5ac0:	3080      	adds	r0, #128	; 0x80
    5ac2:	f008 f9c9 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5ac6:	2800      	cmp	r0, #0
    5ac8:	d14f      	bne.n	5b6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5aca:	6860      	ldr	r0, [r4, #4]
    5acc:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    5ad0:	f88d 1000 	strb.w	r1, [sp]
    5ad4:	9900      	ldr	r1, [sp, #0]
    5ad6:	9100      	str	r1, [sp, #0]
    5ad8:	f89d 2000 	ldrb.w	r2, [sp]
    5adc:	2100      	movs	r1, #0
    5ade:	b142      	cbz	r2, 5af2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x50e>
    5ae0:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
    5ae4:	f890 1131 	ldrb.w	r1, [r0, #305]	; 0x131
    5ae8:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    5aec:	2100      	movs	r1, #0
    5aee:	2002      	movs	r0, #2
    5af0:	e030      	b.n	5b54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x570>
    5af2:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5af6:	2301      	movs	r3, #1
    5af8:	2104      	movs	r1, #4
    5afa:	3080      	adds	r0, #128	; 0x80
    5afc:	f008 f9ac 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5b00:	4605      	mov	r5, r0
    5b02:	f7ff feaf 	bl	5864 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x280>
    5b06:	2800      	cmp	r0, #0
    5b08:	d12f      	bne.n	5b6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5b0a:	4628      	mov	r0, r5
    5b0c:	f7ff fe6c 	bl	57e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    5b10:	2800      	cmp	r0, #0
    5b12:	d12a      	bne.n	5b6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5b14:	f7ff ff82 	bl	5a1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x438>
    5b18:	2800      	cmp	r0, #0
    5b1a:	d126      	bne.n	5b6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5b1c:	6860      	ldr	r0, [r4, #4]
    5b1e:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    5b22:	2909      	cmp	r1, #9
    5b24:	d01a      	beq.n	5b5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x578>
    5b26:	2d00      	cmp	r5, #0
    5b28:	d11f      	bne.n	5b6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5b2a:	f000 fb13 	bl	6154 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb70>
    5b2e:	2800      	cmp	r0, #0
    5b30:	d11b      	bne.n	5b6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5b32:	6860      	ldr	r0, [r4, #4]
    5b34:	2301      	movs	r3, #1
    5b36:	2100      	movs	r1, #0
    5b38:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    5b3c:	3080      	adds	r0, #128	; 0x80
    5b3e:	f008 f98b 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5b42:	2800      	cmp	r0, #0
    5b44:	d011      	beq.n	5b6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5b46:	6860      	ldr	r0, [r4, #4]
    5b48:	f890 02c4 	ldrb.w	r0, [r0, #708]	; 0x2c4
    5b4c:	2800      	cmp	r0, #0
    5b4e:	d00c      	beq.n	5b6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5b50:	2100      	movs	r1, #0
    5b52:	20ff      	movs	r0, #255	; 0xff
    5b54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5b58:	f000 bbd0 	b.w	62fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5b5c:	f890 1121 	ldrb.w	r1, [r0, #289]	; 0x121
    5b60:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    5b64:	2100      	movs	r1, #0
    5b66:	2007      	movs	r0, #7
    5b68:	e7f4      	b.n	5b54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x570>
    5b6a:	bd38      	pop	{r3, r4, r5, pc}
    5b6c:	20000124 	.word	0x20000124
    5b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b72:	4d2b      	ldr	r5, [pc, #172]	; (5c20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>)
    5b74:	0006      	movs	r6, r0
    5b76:	f105 0410 	add.w	r4, r5, #16
    5b7a:	d133      	bne.n	5be4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    5b7c:	f000 f8aa 	bl	5cd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f0>
    5b80:	f000 f852 	bl	5c28 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
    5b84:	0006      	movs	r6, r0
    5b86:	d12d      	bne.n	5be4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    5b88:	8869      	ldrh	r1, [r5, #2]
    5b8a:	0748      	lsls	r0, r1, #29
    5b8c:	d506      	bpl.n	5b9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b8>
    5b8e:	6860      	ldr	r0, [r4, #4]
    5b90:	f890 009f 	ldrb.w	r0, [r0, #159]	; 0x9f
    5b94:	2806      	cmp	r0, #6
    5b96:	d101      	bne.n	5b9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b8>
    5b98:	2001      	movs	r0, #1
    5b9a:	7028      	strb	r0, [r5, #0]
    5b9c:	0788      	lsls	r0, r1, #30
    5b9e:	d516      	bpl.n	5bce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ea>
    5ba0:	68a8      	ldr	r0, [r5, #8]
    5ba2:	78c0      	ldrb	r0, [r0, #3]
    5ba4:	282b      	cmp	r0, #43	; 0x2b
    5ba6:	d207      	bcs.n	5bb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    5ba8:	491e      	ldr	r1, [pc, #120]	; (5c24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x640>)
    5baa:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    5bae:	b119      	cbz	r1, 5bb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    5bb0:	481b      	ldr	r0, [pc, #108]	; (5c20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>)
    5bb2:	3010      	adds	r0, #16
    5bb4:	4788      	blx	r1
    5bb6:	e00a      	b.n	5bce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ea>
    5bb8:	28ff      	cmp	r0, #255	; 0xff
    5bba:	d004      	beq.n	5bc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5e2>
    5bbc:	f640 0148 	movw	r1, #2120	; 0x848
    5bc0:	2031      	movs	r0, #49	; 0x31
    5bc2:	f7fb facf 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5bc6:	4816      	ldr	r0, [pc, #88]	; (5c20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>)
    5bc8:	3010      	adds	r0, #16
    5bca:	f009 fe4b 	bl	f864 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x10e>
    5bce:	78a8      	ldrb	r0, [r5, #2]
    5bd0:	06c0      	lsls	r0, r0, #27
    5bd2:	d507      	bpl.n	5be4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    5bd4:	6860      	ldr	r0, [r4, #4]
    5bd6:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5bda:	290a      	cmp	r1, #10
    5bdc:	d102      	bne.n	5be4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    5bde:	210b      	movs	r1, #11
    5be0:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    5be4:	7868      	ldrb	r0, [r5, #1]
    5be6:	0700      	lsls	r0, r0, #28
    5be8:	d518      	bpl.n	5c1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x638>
    5bea:	6860      	ldr	r0, [r4, #4]
    5bec:	2301      	movs	r3, #1
    5bee:	2105      	movs	r1, #5
    5bf0:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5bf4:	3080      	adds	r0, #128	; 0x80
    5bf6:	f008 f92f 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5bfa:	b108      	cbz	r0, 5c00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x61c>
    5bfc:	2608      	movs	r6, #8
    5bfe:	e00d      	b.n	5c1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x638>
    5c00:	2500      	movs	r5, #0
    5c02:	4669      	mov	r1, sp
    5c04:	2003      	movs	r0, #3
    5c06:	9500      	str	r5, [sp, #0]
    5c08:	f7fc fb3c 	bl	2284 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>
    5c0c:	9800      	ldr	r0, [sp, #0]
    5c0e:	b128      	cbz	r0, 5c1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x638>
    5c10:	7205      	strb	r5, [r0, #8]
    5c12:	2210      	movs	r2, #16
    5c14:	6861      	ldr	r1, [r4, #4]
    5c16:	9800      	ldr	r0, [sp, #0]
    5c18:	f008 fcc6 	bl	e5a8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5c1c:	4630      	mov	r0, r6
    5c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c20:	20000114 	.word	0x20000114
    5c24:	200001d8 	.word	0x200001d8
    5c28:	b570      	push	{r4, r5, r6, lr}
    5c2a:	4d28      	ldr	r5, [pc, #160]	; (5ccc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e8>)
    5c2c:	2000      	movs	r0, #0
    5c2e:	78a9      	ldrb	r1, [r5, #2]
    5c30:	07c9      	lsls	r1, r1, #31
    5c32:	d017      	beq.n	5c64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x680>
    5c34:	68e8      	ldr	r0, [r5, #12]
    5c36:	f105 0410 	add.w	r4, r5, #16
    5c3a:	2301      	movs	r3, #1
    5c3c:	78c6      	ldrb	r6, [r0, #3]
    5c3e:	6860      	ldr	r0, [r4, #4]
    5c40:	2105      	movs	r1, #5
    5c42:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5c46:	3080      	adds	r0, #128	; 0x80
    5c48:	f008 f906 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5c4c:	b158      	cbz	r0, 5c66 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x682>
    5c4e:	1eb6      	subs	r6, r6, #2
    5c50:	2e0a      	cmp	r6, #10
    5c52:	d206      	bcs.n	5c62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x67e>
    5c54:	e8df f006 	tbb	[pc, r6]
    5c58:	05050707 	.word	0x05050707
    5c5c:	05050707 	.word	0x05050707
    5c60:	0707      	.short	0x0707
    5c62:	2008      	movs	r0, #8
    5c64:	bd70      	pop	{r4, r5, r6, pc}
    5c66:	68e8      	ldr	r0, [r5, #12]
    5c68:	f7fd f944 	bl	2ef4 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>
    5c6c:	b338      	cbz	r0, 5cbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    5c6e:	68e8      	ldr	r0, [r5, #12]
    5c70:	78c5      	ldrb	r5, [r0, #3]
    5c72:	b11d      	cbz	r5, 5c7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    5c74:	2d01      	cmp	r5, #1
    5c76:	d001      	beq.n	5c7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    5c78:	2d16      	cmp	r5, #22
    5c7a:	d113      	bne.n	5ca4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c0>
    5c7c:	6860      	ldr	r0, [r4, #4]
    5c7e:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    5c82:	f008 f941 	bl	df08 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    5c86:	b168      	cbz	r0, 5ca4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c0>
    5c88:	6861      	ldr	r1, [r4, #4]
    5c8a:	f891 009d 	ldrb.w	r0, [r1, #157]	; 0x9d
    5c8e:	2820      	cmp	r0, #32
    5c90:	d008      	beq.n	5ca4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c0>
    5c92:	2821      	cmp	r0, #33	; 0x21
    5c94:	d003      	beq.n	5c9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ba>
    5c96:	2d16      	cmp	r5, #22
    5c98:	d00f      	beq.n	5cba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6d6>
    5c9a:	2002      	movs	r0, #2
    5c9c:	bd70      	pop	{r4, r5, r6, pc}
    5c9e:	202e      	movs	r0, #46	; 0x2e
    5ca0:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    5ca4:	2d2b      	cmp	r5, #43	; 0x2b
    5ca6:	d20a      	bcs.n	5cbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    5ca8:	4809      	ldr	r0, [pc, #36]	; (5cd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ec>)
    5caa:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    5cae:	b131      	cbz	r1, 5cbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    5cb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5cb4:	4805      	ldr	r0, [pc, #20]	; (5ccc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e8>)
    5cb6:	3010      	adds	r0, #16
    5cb8:	4708      	bx	r1
    5cba:	2020      	movs	r0, #32
    5cbc:	bd70      	pop	{r4, r5, r6, pc}
    5cbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5cc2:	4802      	ldr	r0, [pc, #8]	; (5ccc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e8>)
    5cc4:	3010      	adds	r0, #16
    5cc6:	f000 bd47 	b.w	6758 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    5cca:	0000      	.short	0x0000
    5ccc:	20000114 	.word	0x20000114
    5cd0:	2000012c 	.word	0x2000012c
    5cd4:	b570      	push	{r4, r5, r6, lr}
    5cd6:	4e25      	ldr	r6, [pc, #148]	; (5d6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x788>)
    5cd8:	78b0      	ldrb	r0, [r6, #2]
    5cda:	0700      	lsls	r0, r0, #28
    5cdc:	d545      	bpl.n	5d6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x786>
    5cde:	f106 0410 	add.w	r4, r6, #16
    5ce2:	6860      	ldr	r0, [r4, #4]
    5ce4:	3080      	adds	r0, #128	; 0x80
    5ce6:	f009 fd45 	bl	f774 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5cea:	b148      	cbz	r0, 5d00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x71c>
    5cec:	6860      	ldr	r0, [r4, #4]
    5cee:	21fe      	movs	r1, #254	; 0xfe
    5cf0:	2500      	movs	r5, #0
    5cf2:	f880 1126 	strb.w	r1, [r0, #294]	; 0x126
    5cf6:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5cfa:	291a      	cmp	r1, #26
    5cfc:	d10e      	bne.n	5d1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x738>
    5cfe:	e004      	b.n	5d0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x726>
    5d00:	f640 0154 	movw	r1, #2132	; 0x854
    5d04:	2031      	movs	r0, #49	; 0x31
    5d06:	f7fb fa2d 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d0a:	f880 50db 	strb.w	r5, [r0, #219]	; 0xdb
    5d0e:	4817      	ldr	r0, [pc, #92]	; (5d6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x788>)
    5d10:	3010      	adds	r0, #16
    5d12:	f008 fd8a 	bl	e82a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    5d16:	6860      	ldr	r0, [r4, #4]
    5d18:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    5d1c:	6860      	ldr	r0, [r4, #4]
    5d1e:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    5d22:	2920      	cmp	r1, #32
    5d24:	d002      	beq.n	5d2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x748>
    5d26:	2931      	cmp	r1, #49	; 0x31
    5d28:	d116      	bne.n	5d58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x774>
    5d2a:	e00e      	b.n	5d4a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x766>
    5d2c:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5d30:	2301      	movs	r3, #1
    5d32:	210b      	movs	r1, #11
    5d34:	3080      	adds	r0, #128	; 0x80
    5d36:	f008 f88f 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5d3a:	b108      	cbz	r0, 5d40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x75c>
    5d3c:	202e      	movs	r0, #46	; 0x2e
    5d3e:	e000      	b.n	5d42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x75e>
    5d40:	2021      	movs	r0, #33	; 0x21
    5d42:	6861      	ldr	r1, [r4, #4]
    5d44:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    5d48:	e006      	b.n	5d58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x774>
    5d4a:	2101      	movs	r1, #1
    5d4c:	f880 12c5 	strb.w	r1, [r0, #709]	; 0x2c5
    5d50:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
    5d54:	f880 50d6 	strb.w	r5, [r0, #214]	; 0xd6
    5d58:	6860      	ldr	r0, [r4, #4]
    5d5a:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    5d5e:	2907      	cmp	r1, #7
    5d60:	d103      	bne.n	5d6a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x786>
    5d62:	2102      	movs	r1, #2
    5d64:	7031      	strb	r1, [r6, #0]
    5d66:	f880 1126 	strb.w	r1, [r0, #294]	; 0x126
    5d6a:	bd70      	pop	{r4, r5, r6, pc}
    5d6c:	20000114 	.word	0x20000114
    5d70:	b538      	push	{r3, r4, r5, lr}
    5d72:	4605      	mov	r5, r0
    5d74:	4668      	mov	r0, sp
    5d76:	f7fc f91f 	bl	1fb8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    5d7a:	b308      	cbz	r0, 5dc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7dc>
    5d7c:	2222      	movs	r2, #34	; 0x22
    5d7e:	2100      	movs	r1, #0
    5d80:	9800      	ldr	r0, [sp, #0]
    5d82:	f00b f816 	bl	10db2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5d86:	2103      	movs	r1, #3
    5d88:	9800      	ldr	r0, [sp, #0]
    5d8a:	f008 fb86 	bl	e49a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    5d8e:	9800      	ldr	r0, [sp, #0]
    5d90:	7801      	ldrb	r1, [r0, #0]
    5d92:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    5d96:	7001      	strb	r1, [r0, #0]
    5d98:	4629      	mov	r1, r5
    5d9a:	f7fd f8bb 	bl	2f14 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>
    5d9e:	4c5b      	ldr	r4, [pc, #364]	; (5f0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>)
    5da0:	2d11      	cmp	r5, #17
    5da2:	d032      	beq.n	5e0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x826>
    5da4:	dc0f      	bgt.n	5dc6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e2>
    5da6:	f1a5 0502 	sub.w	r5, r5, #2
    5daa:	2d0d      	cmp	r5, #13
    5dac:	d21f      	bcs.n	5dee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80a>
    5dae:	e8df f005 	tbb	[pc, r5]
    5db2:	1e21      	.short	0x1e21
    5db4:	26a3a355 	.word	0x26a3a355
    5db8:	a31e621e 	.word	0xa31e621e
    5dbc:	0090393f 	.word	0x0090393f
    5dc0:	f640 21fe 	movw	r1, #2814	; 0xafe
    5dc4:	e09e      	b.n	5f04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x920>
    5dc6:	2d17      	cmp	r5, #23
    5dc8:	d075      	beq.n	5eb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8d2>
    5dca:	dc08      	bgt.n	5dde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7fa>
    5dcc:	f1a5 0512 	sub.w	r5, r5, #18
    5dd0:	2d05      	cmp	r5, #5
    5dd2:	d20c      	bcs.n	5dee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80a>
    5dd4:	e8df f005 	tbb	[pc, r5]
    5dd8:	54549090 	.word	0x54549090
    5ddc:	0038      	.short	0x0038
    5dde:	2d23      	cmp	r5, #35	; 0x23
    5de0:	d07b      	beq.n	5eda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    5de2:	2d24      	cmp	r5, #36	; 0x24
    5de4:	d079      	beq.n	5eda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    5de6:	2d25      	cmp	r5, #37	; 0x25
    5de8:	d077      	beq.n	5eda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    5dea:	2dff      	cmp	r5, #255	; 0xff
    5dec:	d07c      	beq.n	5ee8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x904>
    5dee:	f640 31aa 	movw	r1, #2986	; 0xbaa
    5df2:	e087      	b.n	5f04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x920>
    5df4:	6861      	ldr	r1, [r4, #4]
    5df6:	9800      	ldr	r0, [sp, #0]
    5df8:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
    5dfc:	e016      	b.n	5e2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x848>
    5dfe:	6860      	ldr	r0, [r4, #4]
    5e00:	9900      	ldr	r1, [sp, #0]
    5e02:	f890 0128 	ldrb.w	r0, [r0, #296]	; 0x128
    5e06:	7108      	strb	r0, [r1, #4]
    5e08:	e076      	b.n	5ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5e0a:	6860      	ldr	r0, [r4, #4]
    5e0c:	f890 1123 	ldrb.w	r1, [r0, #291]	; 0x123
    5e10:	9800      	ldr	r0, [sp, #0]
    5e12:	f008 fb2e 	bl	e472 <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    5e16:	6860      	ldr	r0, [r4, #4]
    5e18:	f890 1122 	ldrb.w	r1, [r0, #290]	; 0x122
    5e1c:	9800      	ldr	r0, [sp, #0]
    5e1e:	f008 fb2c 	bl	e47a <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>
    5e22:	e069      	b.n	5ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5e24:	6861      	ldr	r1, [r4, #4]
    5e26:	9800      	ldr	r0, [sp, #0]
    5e28:	f891 1122 	ldrb.w	r1, [r1, #290]	; 0x122
    5e2c:	7101      	strb	r1, [r0, #4]
    5e2e:	e063      	b.n	5ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5e30:	9800      	ldr	r0, [sp, #0]
    5e32:	210d      	movs	r1, #13
    5e34:	7101      	strb	r1, [r0, #4]
    5e36:	2159      	movs	r1, #89	; 0x59
    5e38:	7141      	strb	r1, [r0, #5]
    5e3a:	2100      	movs	r1, #0
    5e3c:	7181      	strb	r1, [r0, #6]
    5e3e:	2177      	movs	r1, #119	; 0x77
    5e40:	71c1      	strb	r1, [r0, #7]
    5e42:	2110      	movs	r1, #16
    5e44:	7201      	strb	r1, [r0, #8]
    5e46:	e057      	b.n	5ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5e48:	9800      	ldr	r0, [sp, #0]
    5e4a:	6861      	ldr	r1, [r4, #4]
    5e4c:	f891 113e 	ldrb.w	r1, [r1, #318]	; 0x13e
    5e50:	7101      	strb	r1, [r0, #4]
    5e52:	6861      	ldr	r1, [r4, #4]
    5e54:	f891 113f 	ldrb.w	r1, [r1, #319]	; 0x13f
    5e58:	7141      	strb	r1, [r0, #5]
    5e5a:	e04d      	b.n	5ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5e5c:	6861      	ldr	r1, [r4, #4]
    5e5e:	9800      	ldr	r0, [sp, #0]
    5e60:	f501 7110 	add.w	r1, r1, #576	; 0x240
    5e64:	f008 fac0 	bl	e3e8 <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>
    5e68:	6861      	ldr	r1, [r4, #4]
    5e6a:	9800      	ldr	r0, [sp, #0]
    5e6c:	f501 718e 	add.w	r1, r1, #284	; 0x11c
    5e70:	f008 fab7 	bl	e3e2 <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>
    5e74:	e040      	b.n	5ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5e76:	4825      	ldr	r0, [pc, #148]	; (5f0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>)
    5e78:	9900      	ldr	r1, [sp, #0]
    5e7a:	f7fd fc0b 	bl	3694 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>
    5e7e:	e03b      	b.n	5ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5e80:	6860      	ldr	r0, [r4, #4]
    5e82:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    5e86:	9800      	ldr	r0, [sp, #0]
    5e88:	f008 fb0f 	bl	e4aa <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>
    5e8c:	6860      	ldr	r0, [r4, #4]
    5e8e:	f8b0 112a 	ldrh.w	r1, [r0, #298]	; 0x12a
    5e92:	9800      	ldr	r0, [sp, #0]
    5e94:	f008 fb0d 	bl	e4b2 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>
    5e98:	6860      	ldr	r0, [r4, #4]
    5e9a:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    5e9e:	9800      	ldr	r0, [sp, #0]
    5ea0:	f008 fb0b 	bl	e4ba <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>
    5ea4:	6860      	ldr	r0, [r4, #4]
    5ea6:	f8b0 1128 	ldrh.w	r1, [r0, #296]	; 0x128
    5eaa:	9800      	ldr	r0, [sp, #0]
    5eac:	f008 fb09 	bl	e4c2 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>
    5eb0:	e022      	b.n	5ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5eb2:	e000      	b.n	5eb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8d2>
    5eb4:	e011      	b.n	5eda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    5eb6:	6861      	ldr	r1, [r4, #4]
    5eb8:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    5ebc:	2801      	cmp	r0, #1
    5ebe:	9800      	ldr	r0, [sp, #0]
    5ec0:	d0c4      	beq.n	5e4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x868>
    5ec2:	f891 1066 	ldrb.w	r1, [r1, #102]	; 0x66
    5ec6:	7101      	strb	r1, [r0, #4]
    5ec8:	6861      	ldr	r1, [r4, #4]
    5eca:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    5ece:	e7c3      	b.n	5e58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x874>
    5ed0:	e00a      	b.n	5ee8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x904>
    5ed2:	9800      	ldr	r0, [sp, #0]
    5ed4:	f7fd fb88 	bl	35e8 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>
    5ed8:	e00e      	b.n	5ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5eda:	4b0d      	ldr	r3, [pc, #52]	; (5f10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x92c>)
    5edc:	4a0b      	ldr	r2, [pc, #44]	; (5f0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>)
    5ede:	4628      	mov	r0, r5
    5ee0:	681b      	ldr	r3, [r3, #0]
    5ee2:	9900      	ldr	r1, [sp, #0]
    5ee4:	4798      	blx	r3
    5ee6:	e007      	b.n	5ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5ee8:	6860      	ldr	r0, [r4, #4]
    5eea:	f890 22c7 	ldrb.w	r2, [r0, #711]	; 0x2c7
    5eee:	f8d0 12c8 	ldr.w	r1, [r0, #712]	; 0x2c8
    5ef2:	9800      	ldr	r0, [sp, #0]
    5ef4:	f008 fac3 	bl	e47e <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>
    5ef8:	f7fc f838 	bl	1f6c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    5efc:	2800      	cmp	r0, #0
    5efe:	d104      	bne.n	5f0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x926>
    5f00:	f640 31ae 	movw	r1, #2990	; 0xbae
    5f04:	2031      	movs	r0, #49	; 0x31
    5f06:	f7fb f92d 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f0a:	bd38      	pop	{r3, r4, r5, pc}
    5f0c:	20000124 	.word	0x20000124
    5f10:	20000284 	.word	0x20000284
    5f14:	e92d 5ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5f18:	4e8c      	ldr	r6, [pc, #560]	; (614c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb68>)
    5f1a:	468a      	mov	sl, r1
    5f1c:	6870      	ldr	r0, [r6, #4]
    5f1e:	8800      	ldrh	r0, [r0, #0]
    5f20:	f7fb fdf8 	bl	1b14 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5f24:	0007      	movs	r7, r0
    5f26:	d00c      	beq.n	5f42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95e>
    5f28:	f1a6 0510 	sub.w	r5, r6, #16
    5f2c:	f04f 0400 	mov.w	r4, #0
    5f30:	8868      	ldrh	r0, [r5, #2]
    5f32:	05c0      	lsls	r0, r0, #23
    5f34:	d50a      	bpl.n	5f4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x968>
    5f36:	6870      	ldr	r0, [r6, #4]
    5f38:	f8a0 40cc 	strh.w	r4, [r0, #204]	; 0xcc
    5f3c:	f880 4234 	strb.w	r4, [r0, #564]	; 0x234
    5f40:	e009      	b.n	5f56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x972>
    5f42:	f640 6189 	movw	r1, #3721	; 0xe89
    5f46:	2031      	movs	r0, #49	; 0x31
    5f48:	f7fb f90c 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f4c:	6871      	ldr	r1, [r6, #4]
    5f4e:	f831 0fcc 	ldrh.w	r0, [r1, #204]!
    5f52:	1c40      	adds	r0, r0, #1
    5f54:	8008      	strh	r0, [r1, #0]
    5f56:	f000 ff5b 	bl	6e10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    5f5a:	f04f 0901 	mov.w	r9, #1
    5f5e:	b340      	cbz	r0, 5fb2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ce>
    5f60:	8868      	ldrh	r0, [r5, #2]
    5f62:	0500      	lsls	r0, r0, #20
    5f64:	d506      	bpl.n	5f74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>
    5f66:	6870      	ldr	r0, [r6, #4]
    5f68:	f890 10a3 	ldrb.w	r1, [r0, #163]	; 0xa3
    5f6c:	b111      	cbz	r1, 5f74 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>
    5f6e:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
    5f72:	e01e      	b.n	5fb2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ce>
    5f74:	6870      	ldr	r0, [r6, #4]
    5f76:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
    5f7a:	1c49      	adds	r1, r1, #1
    5f7c:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
    5f80:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
    5f84:	428a      	cmp	r2, r1
    5f86:	d301      	bcc.n	5f8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9a8>
    5f88:	1a53      	subs	r3, r2, r1
    5f8a:	e000      	b.n	5f8e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9aa>
    5f8c:	2300      	movs	r3, #0
    5f8e:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    5f92:	f10c 0c05 	add.w	ip, ip, #5
    5f96:	4563      	cmp	r3, ip
    5f98:	d801      	bhi.n	5f9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ba>
    5f9a:	f880 90ca 	strb.w	r9, [r0, #202]	; 0xca
    5f9e:	4291      	cmp	r1, r2
    5fa0:	d307      	bcc.n	5fb2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ce>
    5fa2:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
    5fa6:	2202      	movs	r2, #2
    5fa8:	4969      	ldr	r1, [pc, #420]	; (6150 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>)
    5faa:	f500 70ac 	add.w	r0, r0, #344	; 0x158
    5fae:	f008 fb0f 	bl	e5d0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    5fb2:	8868      	ldrh	r0, [r5, #2]
    5fb4:	f04f 0b02 	mov.w	fp, #2
    5fb8:	f410 7f40 	tst.w	r0, #768	; 0x300
    5fbc:	d00e      	beq.n	5fdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    5fbe:	6870      	ldr	r0, [r6, #4]
    5fc0:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    5fc4:	b111      	cbz	r1, 5fcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9e8>
    5fc6:	2903      	cmp	r1, #3
    5fc8:	d108      	bne.n	5fdc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    5fca:	e002      	b.n	5fd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ee>
    5fcc:	f880 90a1 	strb.w	r9, [r0, #161]	; 0xa1
    5fd0:	e001      	b.n	5fd6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f2>
    5fd2:	f880 b0a1 	strb.w	fp, [r0, #161]	; 0xa1
    5fd6:	2101      	movs	r1, #1
    5fd8:	f7fe fdac 	bl	4b34 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    5fdc:	6870      	ldr	r0, [r6, #4]
    5fde:	46b0      	mov	r8, r6
    5fe0:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    5fe4:	2901      	cmp	r1, #1
    5fe6:	d104      	bne.n	5ff2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    5fe8:	8869      	ldrh	r1, [r5, #2]
    5fea:	0549      	lsls	r1, r1, #21
    5fec:	d501      	bpl.n	5ff2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    5fee:	f880 b0a1 	strb.w	fp, [r0, #161]	; 0xa1
    5ff2:	9900      	ldr	r1, [sp, #0]
    5ff4:	2900      	cmp	r1, #0
    5ff6:	d179      	bne.n	60ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb08>
    5ff8:	78a9      	ldrb	r1, [r5, #2]
    5ffa:	0649      	lsls	r1, r1, #25
    5ffc:	d502      	bpl.n	6004 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa20>
    5ffe:	f8a0 4248 	strh.w	r4, [r0, #584]	; 0x248
    6002:	e004      	b.n	600e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2a>
    6004:	f8b0 1248 	ldrh.w	r1, [r0, #584]	; 0x248
    6008:	1c49      	adds	r1, r1, #1
    600a:	f8a0 1248 	strh.w	r1, [r0, #584]	; 0x248
    600e:	4650      	mov	r0, sl
    6010:	f7ff fdae 	bl	5b70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x58c>
    6014:	ea40 000a 	orr.w	r0, r0, sl
    6018:	4682      	mov	sl, r0
    601a:	f7ff fd41 	bl	5aa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4bc>
    601e:	f8d8 6004 	ldr.w	r6, [r8, #4]
    6022:	f8b6 0228 	ldrh.w	r0, [r6, #552]	; 0x228
    6026:	1c40      	adds	r0, r0, #1
    6028:	f8a6 0228 	strh.w	r0, [r6, #552]	; 0x228
    602c:	f896 022c 	ldrb.w	r0, [r6, #556]	; 0x22c
    6030:	b128      	cbz	r0, 603e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5a>
    6032:	f7fc f965 	bl	2300 <sym_HMWMSCLS2E7KO3CEVZ6FUZGM6YUJ4GDX4JETJTI>
    6036:	b1b0      	cbz	r0, 6066 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    6038:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    603c:	e013      	b.n	6066 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    603e:	f7fc f83d 	bl	20bc <sym_R2K72KVDRFDRB7INCDL2G5SJCI6KNYCIUBETXWY>
    6042:	b108      	cbz	r0, 6048 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa64>
    6044:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    6048:	f7fc f832 	bl	20b0 <sym_57CDLB7NR4I66F4XUEVXWWEJBBBXGSJ37LGPUXA>
    604c:	b158      	cbz	r0, 6066 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    604e:	f896 0234 	ldrb.w	r0, [r6, #564]	; 0x234
    6052:	1c40      	adds	r0, r0, #1
    6054:	b2c0      	uxtb	r0, r0
    6056:	f886 0234 	strb.w	r0, [r6, #564]	; 0x234
    605a:	2802      	cmp	r0, #2
    605c:	d903      	bls.n	6066 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    605e:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    6062:	f886 4234 	strb.w	r4, [r6, #564]	; 0x234
    6066:	f8d8 0004 	ldr.w	r0, [r8, #4]
    606a:	4646      	mov	r6, r8
    606c:	2301      	movs	r3, #1
    606e:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6072:	2100      	movs	r1, #0
    6074:	3080      	adds	r0, #128	; 0x80
    6076:	f007 feef 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    607a:	b920      	cbnz	r0, 6086 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaa2>
    607c:	6870      	ldr	r0, [r6, #4]
    607e:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    6082:	280b      	cmp	r0, #11
    6084:	d15f      	bne.n	6146 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    6086:	6870      	ldr	r0, [r6, #4]
    6088:	2301      	movs	r3, #1
    608a:	2100      	movs	r1, #0
    608c:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    6090:	3080      	adds	r0, #128	; 0x80
    6092:	f007 fee1 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6096:	b350      	cbz	r0, 60ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    6098:	6870      	ldr	r0, [r6, #4]
    609a:	2301      	movs	r3, #1
    609c:	2100      	movs	r1, #0
    609e:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    60a2:	3080      	adds	r0, #128	; 0x80
    60a4:	f007 fed8 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    60a8:	b308      	cbz	r0, 60ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    60aa:	6870      	ldr	r0, [r6, #4]
    60ac:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    60b0:	2902      	cmp	r1, #2
    60b2:	d148      	bne.n	6146 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    60b4:	f890 0234 	ldrb.w	r0, [r0, #564]	; 0x234
    60b8:	b9c8      	cbnz	r0, 60ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    60ba:	4638      	mov	r0, r7
    60bc:	f007 f9ed 	bl	d49a <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    60c0:	b1a8      	cbz	r0, 60ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    60c2:	6870      	ldr	r0, [r6, #4]
    60c4:	3080      	adds	r0, #128	; 0x80
    60c6:	f009 fb55 	bl	f774 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    60ca:	b980      	cbnz	r0, 60ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    60cc:	6871      	ldr	r1, [r6, #4]
    60ce:	f8b1 0222 	ldrh.w	r0, [r1, #546]	; 0x222
    60d2:	2801      	cmp	r0, #1
    60d4:	d937      	bls.n	6146 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    60d6:	f881 922a 	strb.w	r9, [r1, #554]	; 0x22a
    60da:	f8b1 20ce 	ldrh.w	r2, [r1, #206]	; 0xce
    60de:	f8b1 00cc 	ldrh.w	r0, [r1, #204]	; 0xcc
    60e2:	1e93      	subs	r3, r2, #2
    60e4:	4298      	cmp	r0, r3
    60e6:	db03      	blt.n	60f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0c>
    60e8:	2001      	movs	r0, #1
    60ea:	e004      	b.n	60f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb12>
    60ec:	e01c      	b.n	6128 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb44>
    60ee:	e02a      	b.n	6146 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    60f0:	1a10      	subs	r0, r2, r0
    60f2:	1e40      	subs	r0, r0, #1
    60f4:	b280      	uxth	r0, r0
    60f6:	f8b1 3228 	ldrh.w	r3, [r1, #552]	; 0x228
    60fa:	88aa      	ldrh	r2, [r5, #4]
    60fc:	4293      	cmp	r3, r2
    60fe:	d301      	bcc.n	6104 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb20>
    6100:	2201      	movs	r2, #1
    6102:	e002      	b.n	610a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb26>
    6104:	1ad2      	subs	r2, r2, r3
    6106:	1c52      	adds	r2, r2, #1
    6108:	b292      	uxth	r2, r2
    610a:	4290      	cmp	r0, r2
    610c:	d900      	bls.n	6110 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb2c>
    610e:	4610      	mov	r0, r2
    6110:	2801      	cmp	r0, #1
    6112:	d101      	bne.n	6118 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb34>
    6114:	f881 422a 	strb.w	r4, [r1, #554]	; 0x22a
    6118:	6871      	ldr	r1, [r6, #4]
    611a:	f8b1 2094 	ldrh.w	r2, [r1, #148]	; 0x94
    611e:	4410      	add	r0, r2
    6120:	f8a1 0224 	strh.w	r0, [r1, #548]	; 0x224
    6124:	f000 ff8e 	bl	7044 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a60>
    6128:	78a8      	ldrb	r0, [r5, #2]
    612a:	4652      	mov	r2, sl
    612c:	f3c0 1180 	ubfx	r1, r0, #6, #1
    6130:	9800      	ldr	r0, [sp, #0]
    6132:	f000 fe81 	bl	6e38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1854>
    6136:	f8d8 0004 	ldr.w	r0, [r8, #4]
    613a:	f880 422b 	strb.w	r4, [r0, #555]	; 0x22b
    613e:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    6142:	f7fb befd 	b.w	1f40 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    6146:	2001      	movs	r0, #1
    6148:	6871      	ldr	r1, [r6, #4]
    614a:	e7e3      	b.n	6114 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb30>
    614c:	20000124 	.word	0x20000124
    6150:	0000eab3 	.word	0x0000eab3
    6154:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    6156:	4c68      	ldr	r4, [pc, #416]	; (62f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd14>)
    6158:	2301      	movs	r3, #1
    615a:	2100      	movs	r1, #0
    615c:	6860      	ldr	r0, [r4, #4]
    615e:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    6162:	3080      	adds	r0, #128	; 0x80
    6164:	f007 fe78 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6168:	2800      	cmp	r0, #0
    616a:	d07a      	beq.n	6262 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc7e>
    616c:	6860      	ldr	r0, [r4, #4]
    616e:	f890 1143 	ldrb.w	r1, [r0, #323]	; 0x143
    6172:	2500      	movs	r5, #0
    6174:	b139      	cbz	r1, 6186 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba2>
    6176:	2100      	movs	r1, #0
    6178:	200e      	movs	r0, #14
    617a:	f000 f8bf 	bl	62fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    617e:	6860      	ldr	r0, [r4, #4]
    6180:	f880 5143 	strb.w	r5, [r0, #323]	; 0x143
    6184:	e0b5      	b.n	62f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    6186:	f890 1142 	ldrb.w	r1, [r0, #322]	; 0x142
    618a:	b119      	cbz	r1, 6194 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb0>
    618c:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
    6190:	0789      	lsls	r1, r1, #30
    6192:	d016      	beq.n	61c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbde>
    6194:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    6198:	f88d 1004 	strb.w	r1, [sp, #4]
    619c:	9901      	ldr	r1, [sp, #4]
    619e:	9101      	str	r1, [sp, #4]
    61a0:	f89d 1004 	ldrb.w	r1, [sp, #4]
    61a4:	b141      	cbz	r1, 61b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbd4>
    61a6:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    61aa:	f88d 1000 	strb.w	r1, [sp]
    61ae:	9900      	ldr	r1, [sp, #0]
    61b0:	9100      	str	r1, [sp, #0]
    61b2:	f89d 1000 	ldrb.w	r1, [sp]
    61b6:	b189      	cbz	r1, 61dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbf8>
    61b8:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    61bc:	2901      	cmp	r1, #1
    61be:	d030      	beq.n	6222 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc3e>
    61c0:	e040      	b.n	6244 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc60>
    61c2:	2100      	movs	r1, #0
    61c4:	200c      	movs	r0, #12
    61c6:	f000 f899 	bl	62fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    61ca:	6860      	ldr	r0, [r4, #4]
    61cc:	f810 1fdd 	ldrb.w	r1, [r0, #221]!
    61d0:	f041 0101 	orr.w	r1, r1, #1
    61d4:	7001      	strb	r1, [r0, #0]
    61d6:	f880 5065 	strb.w	r5, [r0, #101]	; 0x65
    61da:	e08a      	b.n	62f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    61dc:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    61e0:	2925      	cmp	r1, #37	; 0x25
    61e2:	d01c      	beq.n	621e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc3a>
    61e4:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    61e8:	2925      	cmp	r1, #37	; 0x25
    61ea:	d018      	beq.n	621e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc3a>
    61ec:	f05f 0300 	movs.w	r3, #0
    61f0:	f200 22ce 	addw	r2, r0, #718	; 0x2ce
    61f4:	f500 7199 	add.w	r1, r0, #306	; 0x132
    61f8:	f008 fa00 	bl	e5fc <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    61fc:	6860      	ldr	r0, [r4, #4]
    61fe:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    6202:	2100      	movs	r1, #0
    6204:	2014      	movs	r0, #20
    6206:	f000 f879 	bl	62fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    620a:	6861      	ldr	r1, [r4, #4]
    620c:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    6210:	8bc2      	ldrh	r2, [r0, #30]
    6212:	f8a1 2128 	strh.w	r2, [r1, #296]	; 0x128
    6216:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    6218:	f8a1 012a 	strh.w	r0, [r1, #298]	; 0x12a
    621c:	e069      	b.n	62f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    621e:	2301      	movs	r3, #1
    6220:	e7e6      	b.n	61f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc0c>
    6222:	f890 113d 	ldrb.w	r1, [r0, #317]	; 0x13d
    6226:	f88d 1000 	strb.w	r1, [sp]
    622a:	9900      	ldr	r1, [sp, #0]
    622c:	9100      	str	r1, [sp, #0]
    622e:	f89d 1000 	ldrb.w	r1, [sp]
    6232:	b939      	cbnz	r1, 6244 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc60>
    6234:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6238:	2301      	movs	r3, #1
    623a:	210b      	movs	r1, #11
    623c:	3080      	adds	r0, #128	; 0x80
    623e:	f007 fe0b 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6242:	b178      	cbz	r0, 6264 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc80>
    6244:	6860      	ldr	r0, [r4, #4]
    6246:	f890 1149 	ldrb.w	r1, [r0, #329]	; 0x149
    624a:	f88d 1000 	strb.w	r1, [sp]
    624e:	9900      	ldr	r1, [sp, #0]
    6250:	9100      	str	r1, [sp, #0]
    6252:	f89d 1000 	ldrb.w	r1, [sp]
    6256:	b3b9      	cbz	r1, 62c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce4>
    6258:	2100      	movs	r1, #0
    625a:	2023      	movs	r0, #35	; 0x23
    625c:	f000 f84e 	bl	62fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    6260:	e047      	b.n	62f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    6262:	e030      	b.n	62c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce2>
    6264:	6860      	ldr	r0, [r4, #4]
    6266:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    626a:	f009 fa8b 	bl	f784 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    626e:	4605      	mov	r5, r0
    6270:	6860      	ldr	r0, [r4, #4]
    6272:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    6276:	f009 fa85 	bl	f784 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    627a:	4606      	mov	r6, r0
    627c:	6860      	ldr	r0, [r4, #4]
    627e:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    6282:	4628      	mov	r0, r5
    6284:	f009 fa89 	bl	f79a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    6288:	b150      	cbz	r0, 62a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcbc>
    628a:	6860      	ldr	r0, [r4, #4]
    628c:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    6290:	4630      	mov	r0, r6
    6292:	f009 fa82 	bl	f79a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    6296:	b118      	cbz	r0, 62a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcbc>
    6298:	2000      	movs	r0, #0
    629a:	f000 f943 	bl	6524 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    629e:	e011      	b.n	62c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce0>
    62a0:	6860      	ldr	r0, [r4, #4]
    62a2:	2301      	movs	r3, #1
    62a4:	2103      	movs	r1, #3
    62a6:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    62aa:	3080      	adds	r0, #128	; 0x80
    62ac:	f007 fdd4 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    62b0:	b940      	cbnz	r0, 62c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce0>
    62b2:	6860      	ldr	r0, [r4, #4]
    62b4:	2301      	movs	r3, #1
    62b6:	2102      	movs	r1, #2
    62b8:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    62bc:	3080      	adds	r0, #128	; 0x80
    62be:	f007 fdcb 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    62c2:	b110      	cbz	r0, 62ca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce6>
    62c4:	2000      	movs	r0, #0
    62c6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    62c8:	e002      	b.n	62d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcec>
    62ca:	2100      	movs	r1, #0
    62cc:	2016      	movs	r0, #22
    62ce:	e7c5      	b.n	625c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc78>
    62d0:	f890 0146 	ldrb.w	r0, [r0, #326]	; 0x146
    62d4:	f88d 0000 	strb.w	r0, [sp]
    62d8:	9800      	ldr	r0, [sp, #0]
    62da:	9000      	str	r0, [sp, #0]
    62dc:	f89d 0000 	ldrb.w	r0, [sp]
    62e0:	2800      	cmp	r0, #0
    62e2:	d0f0      	beq.n	62c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce2>
    62e4:	2100      	movs	r1, #0
    62e6:	2025      	movs	r0, #37	; 0x25
    62e8:	f000 f808 	bl	62fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    62ec:	6860      	ldr	r0, [r4, #4]
    62ee:	f880 5146 	strb.w	r5, [r0, #326]	; 0x146
    62f2:	2001      	movs	r0, #1
    62f4:	e7e7      	b.n	62c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce2>
    62f6:	0000      	.short	0x0000
    62f8:	20000124 	.word	0x20000124
    62fc:	b570      	push	{r4, r5, r6, lr}
    62fe:	4c0d      	ldr	r4, [pc, #52]	; (6334 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd50>)
    6300:	4606      	mov	r6, r0
    6302:	460d      	mov	r5, r1
    6304:	6860      	ldr	r0, [r4, #4]
    6306:	3080      	adds	r0, #128	; 0x80
    6308:	f009 fa34 	bl	f774 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    630c:	b120      	cbz	r0, 6318 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd34>
    630e:	f640 31b3 	movw	r1, #2995	; 0xbb3
    6312:	2031      	movs	r0, #49	; 0x31
    6314:	f7fa ff26 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6318:	6862      	ldr	r2, [r4, #4]
    631a:	2000      	movs	r0, #0
    631c:	2d01      	cmp	r5, #1
    631e:	f882 6126 	strb.w	r6, [r2, #294]	; 0x126
    6322:	d004      	beq.n	632e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4a>
    6324:	f822 0fd2 	strh.w	r0, [r2, #210]!
    6328:	2001      	movs	r0, #1
    632a:	7110      	strb	r0, [r2, #4]
    632c:	bd70      	pop	{r4, r5, r6, pc}
    632e:	f8a2 00d8 	strh.w	r0, [r2, #216]	; 0xd8
    6332:	bd70      	pop	{r4, r5, r6, pc}
    6334:	20000124 	.word	0x20000124
    6338:	b538      	push	{r3, r4, r5, lr}
    633a:	4c1f      	ldr	r4, [pc, #124]	; (63b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd4>)
    633c:	2500      	movs	r5, #0
    633e:	6860      	ldr	r0, [r4, #4]
    6340:	f890 12b0 	ldrb.w	r1, [r0, #688]	; 0x2b0
    6344:	2901      	cmp	r1, #1
    6346:	d00a      	beq.n	635e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd7a>
    6348:	2902      	cmp	r1, #2
    634a:	d133      	bne.n	63b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    634c:	f890 10dc 	ldrb.w	r1, [r0, #220]	; 0xdc
    6350:	b1d9      	cbz	r1, 638a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xda6>
    6352:	2106      	movs	r1, #6
    6354:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    6358:	2101      	movs	r1, #1
    635a:	2002      	movs	r0, #2
    635c:	e025      	b.n	63aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc6>
    635e:	f890 1212 	ldrb.w	r1, [r0, #530]	; 0x212
    6362:	f88d 1000 	strb.w	r1, [sp]
    6366:	9900      	ldr	r1, [sp, #0]
    6368:	9100      	str	r1, [sp, #0]
    636a:	f89d 1000 	ldrb.w	r1, [sp]
    636e:	2900      	cmp	r1, #0
    6370:	d120      	bne.n	63b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    6372:	f500 7384 	add.w	r3, r0, #264	; 0x108
    6376:	f500 710e 	add.w	r1, r0, #568	; 0x238
    637a:	2200      	movs	r2, #0
    637c:	f200 20b1 	addw	r0, r0, #689	; 0x2b1
    6380:	f007 fd35 	bl	ddee <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    6384:	2101      	movs	r1, #1
    6386:	2005      	movs	r0, #5
    6388:	e00f      	b.n	63aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc6>
    638a:	2103      	movs	r1, #3
    638c:	2206      	movs	r2, #6
    638e:	480a      	ldr	r0, [pc, #40]	; (63b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd4>)
    6390:	f008 fa59 	bl	e846 <sym_2UM6LVQLLMOP7WZDJLNUGNNDXOSOGAIT6WB627Q>
    6394:	6860      	ldr	r0, [r4, #4]
    6396:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
    639a:	0880      	lsrs	r0, r0, #2
    639c:	f010 0f01 	tst.w	r0, #1
    63a0:	d001      	beq.n	63a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc2>
    63a2:	2011      	movs	r0, #17
    63a4:	e000      	b.n	63a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc4>
    63a6:	200d      	movs	r0, #13
    63a8:	2101      	movs	r1, #1
    63aa:	f7ff ffa7 	bl	62fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    63ae:	6860      	ldr	r0, [r4, #4]
    63b0:	f880 52b0 	strb.w	r5, [r0, #688]	; 0x2b0
    63b4:	bd38      	pop	{r3, r4, r5, pc}
    63b6:	0000      	.short	0x0000
    63b8:	20000124 	.word	0x20000124
    63bc:	b570      	push	{r4, r5, r6, lr}
    63be:	4b2b      	ldr	r3, [pc, #172]	; (646c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe88>)
    63c0:	4602      	mov	r2, r0
    63c2:	8858      	ldrh	r0, [r3, #2]
    63c4:	4310      	orrs	r0, r2
    63c6:	8058      	strh	r0, [r3, #2]
    63c8:	f103 0010 	add.w	r0, r3, #16
    63cc:	2a40      	cmp	r2, #64	; 0x40
    63ce:	6840      	ldr	r0, [r0, #4]
    63d0:	d00d      	beq.n	63ee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe0a>
    63d2:	0796      	lsls	r6, r2, #30
    63d4:	f04f 0500 	mov.w	r5, #0
    63d8:	f04f 0401 	mov.w	r4, #1
    63dc:	ea4f 76c2 	mov.w	r6, r2, lsl #31
    63e0:	d50c      	bpl.n	63fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe18>
    63e2:	b14e      	cbz	r6, 63f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe14>
    63e4:	f640 51f6 	movw	r1, #3574	; 0xdf6
    63e8:	2031      	movs	r0, #49	; 0x31
    63ea:	f7fa febb 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    63ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    63f2:	2104      	movs	r1, #4
    63f4:	f7fe bb9e 	b.w	4b34 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    63f8:	6099      	str	r1, [r3, #8]
    63fa:	e01c      	b.n	6436 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe52>
    63fc:	b1c6      	cbz	r6, 6430 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    63fe:	60d9      	str	r1, [r3, #12]
    6400:	78c9      	ldrb	r1, [r1, #3]
    6402:	2906      	cmp	r1, #6
    6404:	d002      	beq.n	640c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe28>
    6406:	290b      	cmp	r1, #11
    6408:	d112      	bne.n	6430 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    640a:	e009      	b.n	6420 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe3c>
    640c:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6410:	2918      	cmp	r1, #24
    6412:	d10d      	bne.n	6430 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    6414:	2100      	movs	r1, #0
    6416:	e9c0 113e 	strd	r1, r1, [r0, #248]	; 0xf8
    641a:	f880 40a2 	strb.w	r4, [r0, #162]	; 0xa2
    641e:	e007      	b.n	6430 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    6420:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6424:	2912      	cmp	r1, #18
    6426:	d103      	bne.n	6430 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    6428:	f880 50a2 	strb.w	r5, [r0, #162]	; 0xa2
    642c:	f880 40dc 	strb.w	r4, [r0, #220]	; 0xdc
    6430:	0791      	lsls	r1, r2, #30
    6432:	d516      	bpl.n	6462 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    6434:	6899      	ldr	r1, [r3, #8]
    6436:	78c9      	ldrb	r1, [r1, #3]
    6438:	2905      	cmp	r1, #5
    643a:	d002      	beq.n	6442 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5e>
    643c:	290b      	cmp	r1, #11
    643e:	d110      	bne.n	6462 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    6440:	e009      	b.n	6456 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe72>
    6442:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6446:	2916      	cmp	r1, #22
    6448:	d10b      	bne.n	6462 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    644a:	2100      	movs	r1, #0
    644c:	e9c0 1140 	strd	r1, r1, [r0, #256]	; 0x100
    6450:	f880 40a3 	strb.w	r4, [r0, #163]	; 0xa3
    6454:	e005      	b.n	6462 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    6456:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    645a:	2911      	cmp	r1, #17
    645c:	d101      	bne.n	6462 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    645e:	f880 50a3 	strb.w	r5, [r0, #163]	; 0xa3
    6462:	0690      	lsls	r0, r2, #26
    6464:	d501      	bpl.n	646a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe86>
    6466:	2008      	movs	r0, #8
    6468:	7058      	strb	r0, [r3, #1]
    646a:	bd70      	pop	{r4, r5, r6, pc}
    646c:	20000114 	.word	0x20000114
    6470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6474:	4c29      	ldr	r4, [pc, #164]	; (651c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>)
    6476:	2501      	movs	r5, #1
    6478:	6862      	ldr	r2, [r4, #4]
    647a:	f892 12ce 	ldrb.w	r1, [r2, #718]	; 0x2ce
    647e:	b109      	cbz	r1, 6484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    6480:	2701      	movs	r7, #1
    6482:	e000      	b.n	6486 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea2>
    6484:	2700      	movs	r7, #0
    6486:	f892 02cf 	ldrb.w	r0, [r2, #719]	; 0x2cf
    648a:	b108      	cbz	r0, 6490 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    648c:	2601      	movs	r6, #1
    648e:	e000      	b.n	6492 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeae>
    6490:	2600      	movs	r6, #0
    6492:	b90f      	cbnz	r7, 6498 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb4>
    6494:	f892 106a 	ldrb.w	r1, [r2, #106]	; 0x6a
    6498:	b90e      	cbnz	r6, 649e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeba>
    649a:	f892 006b 	ldrb.w	r0, [r2, #107]	; 0x6b
    649e:	f102 0362 	add.w	r3, r2, #98	; 0x62
    64a2:	7219      	strb	r1, [r3, #8]
    64a4:	7258      	strb	r0, [r3, #9]
    64a6:	20ff      	movs	r0, #255	; 0xff
    64a8:	7298      	strb	r0, [r3, #10]
    64aa:	481d      	ldr	r0, [pc, #116]	; (6520 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf3c>)
    64ac:	6803      	ldr	r3, [r0, #0]
    64ae:	b10b      	cbz	r3, 64b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed0>
    64b0:	4610      	mov	r0, r2
    64b2:	4798      	blx	r3
    64b4:	6860      	ldr	r0, [r4, #4]
    64b6:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    64ba:	2801      	cmp	r0, #1
    64bc:	d001      	beq.n	64c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    64be:	b907      	cbnz	r7, 64c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    64c0:	b116      	cbz	r6, 64c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee4>
    64c2:	2000      	movs	r0, #0
    64c4:	f000 f82e 	bl	6524 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    64c8:	6860      	ldr	r0, [r4, #4]
    64ca:	302c      	adds	r0, #44	; 0x2c
    64cc:	f008 f903 	bl	e6d6 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    64d0:	4606      	mov	r6, r0
    64d2:	6860      	ldr	r0, [r4, #4]
    64d4:	f008 f8ad 	bl	e632 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    64d8:	b130      	cbz	r0, 64e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf04>
    64da:	6861      	ldr	r1, [r4, #4]
    64dc:	f501 72b1 	add.w	r2, r1, #354	; 0x162
    64e0:	f831 0b2c 	ldrh.w	r0, [r1], #44
    64e4:	f7fc ff50 	bl	3388 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    64e8:	2105      	movs	r1, #5
    64ea:	6860      	ldr	r0, [r4, #4]
    64ec:	f7fe fb22 	bl	4b34 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    64f0:	6860      	ldr	r0, [r4, #4]
    64f2:	302c      	adds	r0, #44	; 0x2c
    64f4:	f008 f8ef 	bl	e6d6 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    64f8:	4604      	mov	r4, r0
    64fa:	42a6      	cmp	r6, r4
    64fc:	d20a      	bcs.n	6514 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf30>
    64fe:	f003 fdd1 	bl	a0a4 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    6502:	4601      	mov	r1, r0
    6504:	1ba0      	subs	r0, r4, r6
    6506:	2867      	cmp	r0, #103	; 0x67
    6508:	d200      	bcs.n	650c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    650a:	2067      	movs	r0, #103	; 0x67
    650c:	f003 fc90 	bl	9e30 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    6510:	b100      	cbz	r0, 6514 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf30>
    6512:	2500      	movs	r5, #0
    6514:	4628      	mov	r0, r5
    6516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    651a:	0000      	.short	0x0000
    651c:	20000124 	.word	0x20000124
    6520:	2000028c 	.word	0x2000028c
    6524:	4601      	mov	r1, r0
    6526:	4801      	ldr	r0, [pc, #4]	; (652c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf48>)
    6528:	f001 ba96 	b.w	7a58 <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA>
    652c:	20000124 	.word	0x20000124
    6530:	b570      	push	{r4, r5, r6, lr}
    6532:	4d0f      	ldr	r5, [pc, #60]	; (6570 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8c>)
    6534:	686c      	ldr	r4, [r5, #4]
    6536:	f894 109d 	ldrb.w	r1, [r4, #157]	; 0x9d
    653a:	2921      	cmp	r1, #33	; 0x21
    653c:	d002      	beq.n	6544 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf60>
    653e:	292e      	cmp	r1, #46	; 0x2e
    6540:	d003      	beq.n	654a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf66>
    6542:	e011      	b.n	6568 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf84>
    6544:	f7ff ffee 	bl	6524 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    6548:	e008      	b.n	655c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf78>
    654a:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
    654e:	f104 0080 	add.w	r0, r4, #128	; 0x80
    6552:	2301      	movs	r3, #1
    6554:	210b      	movs	r1, #11
    6556:	f007 fc7f 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    655a:	b138      	cbz	r0, 656c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf88>
    655c:	6869      	ldr	r1, [r5, #4]
    655e:	2000      	movs	r0, #0
    6560:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    6564:	f881 00d6 	strb.w	r0, [r1, #214]	; 0xd6
    6568:	2000      	movs	r0, #0
    656a:	bd70      	pop	{r4, r5, r6, pc}
    656c:	202a      	movs	r0, #42	; 0x2a
    656e:	e7e9      	b.n	6544 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf60>
    6570:	20000124 	.word	0x20000124
    6574:	b570      	push	{r4, r5, r6, lr}
    6576:	4604      	mov	r4, r0
    6578:	6840      	ldr	r0, [r0, #4]
    657a:	2301      	movs	r3, #1
    657c:	2100      	movs	r1, #0
    657e:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6582:	3080      	adds	r0, #128	; 0x80
    6584:	f007 fc68 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6588:	b1b8      	cbz	r0, 65ba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfd6>
    658a:	4d13      	ldr	r5, [pc, #76]	; (65d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff4>)
    658c:	68e8      	ldr	r0, [r5, #12]
    658e:	f007 fed6 	bl	e33e <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>
    6592:	6861      	ldr	r1, [r4, #4]
    6594:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    6598:	6861      	ldr	r1, [r4, #4]
    659a:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    659e:	f009 f90a 	bl	f7b6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    65a2:	b160      	cbz	r0, 65be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfda>
    65a4:	6861      	ldr	r1, [r4, #4]
    65a6:	2028      	movs	r0, #40	; 0x28
    65a8:	2202      	movs	r2, #2
    65aa:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    65ae:	6860      	ldr	r0, [r4, #4]
    65b0:	490a      	ldr	r1, [pc, #40]	; (65dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff8>)
    65b2:	30b4      	adds	r0, #180	; 0xb4
    65b4:	f007 fff8 	bl	e5a8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    65b8:	e00b      	b.n	65d2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfee>
    65ba:	2001      	movs	r0, #1
    65bc:	bd70      	pop	{r4, r5, r6, pc}
    65be:	6861      	ldr	r1, [r4, #4]
    65c0:	68e8      	ldr	r0, [r5, #12]
    65c2:	f201 21ce 	addw	r1, r1, #718	; 0x2ce
    65c6:	f007 feb5 	bl	e334 <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>
    65ca:	6861      	ldr	r1, [r4, #4]
    65cc:	200a      	movs	r0, #10
    65ce:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    65d2:	2000      	movs	r0, #0
    65d4:	bd70      	pop	{r4, r5, r6, pc}
    65d6:	0000      	.short	0x0000
    65d8:	20000114 	.word	0x20000114
    65dc:	0000e865 	.word	0x0000e865
    65e0:	b570      	push	{r4, r5, r6, lr}
    65e2:	4604      	mov	r4, r0
    65e4:	6840      	ldr	r0, [r0, #4]
    65e6:	2301      	movs	r3, #1
    65e8:	2100      	movs	r1, #0
    65ea:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    65ee:	3080      	adds	r0, #128	; 0x80
    65f0:	f007 fc32 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    65f4:	b1e0      	cbz	r0, 6630 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x104c>
    65f6:	4d28      	ldr	r5, [pc, #160]	; (6698 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b4>)
    65f8:	2100      	movs	r1, #0
    65fa:	68e8      	ldr	r0, [r5, #12]
    65fc:	f007 fea2 	bl	e344 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>
    6600:	b1c0      	cbz	r0, 6634 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1050>
    6602:	68e8      	ldr	r0, [r5, #12]
    6604:	6861      	ldr	r1, [r4, #4]
    6606:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    660a:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    660e:	6861      	ldr	r1, [r4, #4]
    6610:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    6614:	f009 f8cf 	bl	f7b6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    6618:	b188      	cbz	r0, 663e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x105a>
    661a:	6861      	ldr	r1, [r4, #4]
    661c:	2028      	movs	r0, #40	; 0x28
    661e:	2202      	movs	r2, #2
    6620:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    6624:	6860      	ldr	r0, [r4, #4]
    6626:	491d      	ldr	r1, [pc, #116]	; (669c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b8>)
    6628:	30b4      	adds	r0, #180	; 0xb4
    662a:	f007 ffbd 	bl	e5a8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    662e:	e030      	b.n	6692 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ae>
    6630:	2001      	movs	r0, #1
    6632:	bd70      	pop	{r4, r5, r6, pc}
    6634:	4620      	mov	r0, r4
    6636:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    663a:	f000 b88d 	b.w	6758 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    663e:	68e8      	ldr	r0, [r5, #12]
    6640:	f007 feaa 	bl	e398 <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>
    6644:	f007 fbfe 	bl	de44 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    6648:	4606      	mov	r6, r0
    664a:	6860      	ldr	r0, [r4, #4]
    664c:	4631      	mov	r1, r6
    664e:	f8c0 62d4 	str.w	r6, [r0, #724]	; 0x2d4
    6652:	68e8      	ldr	r0, [r5, #12]
    6654:	7900      	ldrb	r0, [r0, #4]
    6656:	f007 fd62 	bl	e11e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    665a:	6861      	ldr	r1, [r4, #4]
    665c:	f8a1 02ce 	strh.w	r0, [r1, #718]	; 0x2ce
    6660:	68e8      	ldr	r0, [r5, #12]
    6662:	4631      	mov	r1, r6
    6664:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    6668:	f007 fd55 	bl	e116 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    666c:	6861      	ldr	r1, [r4, #4]
    666e:	f8c1 02d0 	str.w	r0, [r1, #720]	; 0x2d0
    6672:	68e8      	ldr	r0, [r5, #12]
    6674:	f007 fe93 	bl	e39e <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>
    6678:	6861      	ldr	r1, [r4, #4]
    667a:	f8a1 02d8 	strh.w	r0, [r1, #728]	; 0x2d8
    667e:	68e8      	ldr	r0, [r5, #12]
    6680:	f007 fe90 	bl	e3a4 <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>
    6684:	6861      	ldr	r1, [r4, #4]
    6686:	f8a1 02da 	strh.w	r0, [r1, #730]	; 0x2da
    668a:	6861      	ldr	r1, [r4, #4]
    668c:	200d      	movs	r0, #13
    668e:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    6692:	2000      	movs	r0, #0
    6694:	bd70      	pop	{r4, r5, r6, pc}
    6696:	0000      	.short	0x0000
    6698:	20000114 	.word	0x20000114
    669c:	0000e865 	.word	0x0000e865
    66a0:	b570      	push	{r4, r5, r6, lr}
    66a2:	4604      	mov	r4, r0
    66a4:	6840      	ldr	r0, [r0, #4]
    66a6:	2301      	movs	r3, #1
    66a8:	2100      	movs	r1, #0
    66aa:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    66ae:	3080      	adds	r0, #128	; 0x80
    66b0:	f007 fbd2 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    66b4:	b970      	cbnz	r0, 66d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10f0>
    66b6:	6860      	ldr	r0, [r4, #4]
    66b8:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    66bc:	2a13      	cmp	r2, #19
    66be:	d009      	beq.n	66d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10f0>
    66c0:	2301      	movs	r3, #1
    66c2:	2105      	movs	r1, #5
    66c4:	3080      	adds	r0, #128	; 0x80
    66c6:	f007 fbc7 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    66ca:	b108      	cbz	r0, 66d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ec>
    66cc:	2008      	movs	r0, #8
    66ce:	bd70      	pop	{r4, r5, r6, pc}
    66d0:	2001      	movs	r0, #1
    66d2:	bd70      	pop	{r4, r5, r6, pc}
    66d4:	6860      	ldr	r0, [r4, #4]
    66d6:	f890 00dc 	ldrb.w	r0, [r0, #220]	; 0xdc
    66da:	b910      	cbnz	r0, 66e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10fe>
    66dc:	4816      	ldr	r0, [pc, #88]	; (6738 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1154>)
    66de:	f008 f89c 	bl	e81a <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    66e2:	4d15      	ldr	r5, [pc, #84]	; (6738 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1154>)
    66e4:	6861      	ldr	r1, [r4, #4]
    66e6:	3d10      	subs	r5, #16
    66e8:	f501 710e 	add.w	r1, r1, #568	; 0x238
    66ec:	68e8      	ldr	r0, [r5, #12]
    66ee:	f007 fe72 	bl	e3d6 <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>
    66f2:	6861      	ldr	r1, [r4, #4]
    66f4:	68e8      	ldr	r0, [r5, #12]
    66f6:	f501 718c 	add.w	r1, r1, #280	; 0x118
    66fa:	f007 fe63 	bl	e3c4 <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>
    66fe:	6860      	ldr	r0, [r4, #4]
    6700:	8801      	ldrh	r1, [r0, #0]
    6702:	f8a0 12e6 	strh.w	r1, [r0, #742]	; 0x2e6
    6706:	6861      	ldr	r1, [r4, #4]
    6708:	68e8      	ldr	r0, [r5, #12]
    670a:	f501 713a 	add.w	r1, r1, #744	; 0x2e8
    670e:	f007 fe5d 	bl	e3cc <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>
    6712:	6861      	ldr	r1, [r4, #4]
    6714:	68e8      	ldr	r0, [r5, #12]
    6716:	f501 713c 	add.w	r1, r1, #752	; 0x2f0
    671a:	f007 fe50 	bl	e3be <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>
    671e:	6860      	ldr	r0, [r4, #4]
    6720:	2202      	movs	r2, #2
    6722:	4906      	ldr	r1, [pc, #24]	; (673c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1158>)
    6724:	f500 7037 	add.w	r0, r0, #732	; 0x2dc
    6728:	f007 ff3e 	bl	e5a8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    672c:	6861      	ldr	r1, [r4, #4]
    672e:	2015      	movs	r0, #21
    6730:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    6734:	2000      	movs	r0, #0
    6736:	bd70      	pop	{r4, r5, r6, pc}
    6738:	20000124 	.word	0x20000124
    673c:	0000ea09 	.word	0x0000ea09
    6740:	4901      	ldr	r1, [pc, #4]	; (6748 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1164>)
    6742:	68c9      	ldr	r1, [r1, #12]
    6744:	f7fc bf28 	b.w	3598 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>
    6748:	20000114 	.word	0x20000114
    674c:	4901      	ldr	r1, [pc, #4]	; (6754 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1170>)
    674e:	68c9      	ldr	r1, [r1, #12]
    6750:	f7fc bf58 	b.w	3604 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>
    6754:	20000114 	.word	0x20000114
    6758:	b510      	push	{r4, lr}
    675a:	6842      	ldr	r2, [r0, #4]
    675c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
    6760:	070b      	lsls	r3, r1, #28
    6762:	d501      	bpl.n	6768 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1184>
    6764:	2001      	movs	r0, #1
    6766:	bd10      	pop	{r4, pc}
    6768:	f041 0108 	orr.w	r1, r1, #8
    676c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
    6770:	4905      	ldr	r1, [pc, #20]	; (6788 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11a4>)
    6772:	6840      	ldr	r0, [r0, #4]
    6774:	68c9      	ldr	r1, [r1, #12]
    6776:	78c9      	ldrb	r1, [r1, #3]
    6778:	f880 1120 	strb.w	r1, [r0, #288]	; 0x120
    677c:	4802      	ldr	r0, [pc, #8]	; (6788 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11a4>)
    677e:	3010      	adds	r0, #16
    6780:	f008 f84b 	bl	e81a <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    6784:	2000      	movs	r0, #0
    6786:	bd10      	pop	{r4, pc}
    6788:	20000114 	.word	0x20000114
    678c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    6790:	4605      	mov	r5, r0
    6792:	6840      	ldr	r0, [r0, #4]
    6794:	f890 008c 	ldrb.w	r0, [r0, #140]	; 0x8c
    6798:	f010 0f30 	tst.w	r0, #48	; 0x30
    679c:	d002      	beq.n	67a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11c0>
    679e:	2001      	movs	r0, #1
    67a0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    67a4:	4c32      	ldr	r4, [pc, #200]	; (6870 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128c>)
    67a6:	68e0      	ldr	r0, [r4, #12]
    67a8:	f007 fe2f 	bl	e40a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    67ac:	b330      	cbz	r0, 67fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1218>
    67ae:	68e0      	ldr	r0, [r4, #12]
    67b0:	f007 fe25 	bl	e3fe <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    67b4:	4680      	mov	r8, r0
    67b6:	68e0      	ldr	r0, [r4, #12]
    67b8:	f007 fe25 	bl	e406 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    67bc:	4607      	mov	r7, r0
    67be:	68e0      	ldr	r0, [r4, #12]
    67c0:	f007 fe1b 	bl	e3fa <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    67c4:	4606      	mov	r6, r0
    67c6:	68e0      	ldr	r0, [r4, #12]
    67c8:	f007 fe1b 	bl	e402 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    67cc:	4601      	mov	r1, r0
    67ce:	f8cd 8000 	str.w	r8, [sp]
    67d2:	6868      	ldr	r0, [r5, #4]
    67d4:	463b      	mov	r3, r7
    67d6:	4632      	mov	r2, r6
    67d8:	302c      	adds	r0, #44	; 0x2c
    67da:	f007 ff86 	bl	e6ea <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    67de:	78a0      	ldrb	r0, [r4, #2]
    67e0:	0781      	lsls	r1, r0, #30
    67e2:	f04f 0001 	mov.w	r0, #1
    67e6:	d503      	bpl.n	67f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x120c>
    67e8:	68a1      	ldr	r1, [r4, #8]
    67ea:	78c9      	ldrb	r1, [r1, #3]
    67ec:	2914      	cmp	r1, #20
    67ee:	d00a      	beq.n	6806 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1222>
    67f0:	6869      	ldr	r1, [r5, #4]
    67f2:	f891 109d 	ldrb.w	r1, [r1, #157]	; 0x9d
    67f6:	291d      	cmp	r1, #29
    67f8:	d005      	beq.n	6806 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1222>
    67fa:	e007      	b.n	680c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1228>
    67fc:	4628      	mov	r0, r5
    67fe:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    6802:	f7ff bfa9 	b.w	6758 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    6806:	6869      	ldr	r1, [r5, #4]
    6808:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    680c:	6868      	ldr	r0, [r5, #4]
    680e:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    6812:	2901      	cmp	r1, #1
    6814:	d011      	beq.n	683a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1256>
    6816:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    681a:	f88d 1004 	strb.w	r1, [sp, #4]
    681e:	9901      	ldr	r1, [sp, #4]
    6820:	9101      	str	r1, [sp, #4]
    6822:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6826:	b941      	cbnz	r1, 683a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1256>
    6828:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    682c:	f88d 1000 	strb.w	r1, [sp]
    6830:	9900      	ldr	r1, [sp, #0]
    6832:	9100      	str	r1, [sp, #0]
    6834:	f89d 1000 	ldrb.w	r1, [sp]
    6838:	b151      	cbz	r1, 6850 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x126c>
    683a:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    683e:	f041 0110 	orr.w	r1, r1, #16
    6842:	6001      	str	r1, [r0, #0]
    6844:	480a      	ldr	r0, [pc, #40]	; (6870 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128c>)
    6846:	3010      	adds	r0, #16
    6848:	f007 ffe7 	bl	e81a <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    684c:	2000      	movs	r0, #0
    684e:	e7a7      	b.n	67a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11bc>
    6850:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    6854:	f041 0120 	orr.w	r1, r1, #32
    6858:	6001      	str	r1, [r0, #0]
    685a:	4805      	ldr	r0, [pc, #20]	; (6870 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128c>)
    685c:	3010      	adds	r0, #16
    685e:	6843      	ldr	r3, [r0, #4]
    6860:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    6864:	8818      	ldrh	r0, [r3, #0]
    6866:	f503 72bc 	add.w	r2, r3, #376	; 0x178
    686a:	f7fc fdb5 	bl	33d8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    686e:	e7e9      	b.n	6844 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1260>
    6870:	20000114 	.word	0x20000114
    6874:	4901      	ldr	r1, [pc, #4]	; (687c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1298>)
    6876:	68c9      	ldr	r1, [r1, #12]
    6878:	f008 b85e 	b.w	e938 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA>
    687c:	20000114 	.word	0x20000114
    6880:	b510      	push	{r4, lr}
    6882:	4604      	mov	r4, r0
    6884:	6840      	ldr	r0, [r0, #4]
    6886:	2301      	movs	r3, #1
    6888:	2100      	movs	r1, #0
    688a:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    688e:	3080      	adds	r0, #128	; 0x80
    6890:	f007 fae2 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6894:	2800      	cmp	r0, #0
    6896:	6860      	ldr	r0, [r4, #4]
    6898:	d00c      	beq.n	68b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12d0>
    689a:	f890 00a3 	ldrb.w	r0, [r0, #163]	; 0xa3
    689e:	2800      	cmp	r0, #0
    68a0:	d007      	beq.n	68b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12ce>
    68a2:	480a      	ldr	r0, [pc, #40]	; (68cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e8>)
    68a4:	f007 ffb9 	bl	e81a <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    68a8:	6861      	ldr	r1, [r4, #4]
    68aa:	2011      	movs	r0, #17
    68ac:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    68b0:	2000      	movs	r0, #0
    68b2:	bd10      	pop	{r4, pc}
    68b4:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    68b8:	2301      	movs	r3, #1
    68ba:	2105      	movs	r1, #5
    68bc:	3080      	adds	r0, #128	; 0x80
    68be:	f007 facb 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    68c2:	b108      	cbz	r0, 68c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e4>
    68c4:	2008      	movs	r0, #8
    68c6:	bd10      	pop	{r4, pc}
    68c8:	2001      	movs	r0, #1
    68ca:	bd10      	pop	{r4, pc}
    68cc:	20000124 	.word	0x20000124
    68d0:	b538      	push	{r3, r4, r5, lr}
    68d2:	4604      	mov	r4, r0
    68d4:	6840      	ldr	r0, [r0, #4]
    68d6:	2301      	movs	r3, #1
    68d8:	210b      	movs	r1, #11
    68da:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    68de:	3080      	adds	r0, #128	; 0x80
    68e0:	f007 faba 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    68e4:	bb60      	cbnz	r0, 6940 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x135c>
    68e6:	6860      	ldr	r0, [r4, #4]
    68e8:	2301      	movs	r3, #1
    68ea:	2100      	movs	r1, #0
    68ec:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    68f0:	3080      	adds	r0, #128	; 0x80
    68f2:	f007 fab1 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    68f6:	b308      	cbz	r0, 693c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1358>
    68f8:	6860      	ldr	r0, [r4, #4]
    68fa:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    68fe:	2825      	cmp	r0, #37	; 0x25
    6900:	d01e      	beq.n	6940 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x135c>
    6902:	4d2a      	ldr	r5, [pc, #168]	; (69ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c8>)
    6904:	68e8      	ldr	r0, [r5, #12]
    6906:	f007 fd92 	bl	e42e <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>
    690a:	b1d8      	cbz	r0, 6944 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1360>
    690c:	68e8      	ldr	r0, [r5, #12]
    690e:	6862      	ldr	r2, [r4, #4]
    6910:	7941      	ldrb	r1, [r0, #5]
    6912:	f001 0107 	and.w	r1, r1, #7
    6916:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
    691a:	7900      	ldrb	r0, [r0, #4]
    691c:	f000 0207 	and.w	r2, r0, #7
    6920:	6860      	ldr	r0, [r4, #4]
    6922:	f880 2062 	strb.w	r2, [r0, #98]	; 0x62
    6926:	6860      	ldr	r0, [r4, #4]
    6928:	f890 113d 	ldrb.w	r1, [r0, #317]	; 0x13d
    692c:	f88d 1000 	strb.w	r1, [sp]
    6930:	9900      	ldr	r1, [sp, #0]
    6932:	9100      	str	r1, [sp, #0]
    6934:	f89d 1000 	ldrb.w	r1, [sp]
    6938:	bb71      	cbnz	r1, 6998 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b4>
    693a:	e008      	b.n	694e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x136a>
    693c:	2001      	movs	r0, #1
    693e:	bd38      	pop	{r3, r4, r5, pc}
    6940:	2020      	movs	r0, #32
    6942:	bd38      	pop	{r3, r4, r5, pc}
    6944:	4620      	mov	r0, r4
    6946:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    694a:	f7ff bf05 	b.w	6758 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    694e:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    6952:	2901      	cmp	r1, #1
    6954:	d020      	beq.n	6998 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b4>
    6956:	f100 016a 	add.w	r1, r0, #106	; 0x6a
    695a:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
    695e:	784d      	ldrb	r5, [r1, #1]
    6960:	4295      	cmp	r5, r2
    6962:	d106      	bne.n	6972 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138e>
    6964:	7809      	ldrb	r1, [r1, #0]
    6966:	4299      	cmp	r1, r3
    6968:	d103      	bne.n	6972 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138e>
    696a:	2102      	movs	r1, #2
    696c:	f880 113c 	strb.w	r1, [r0, #316]	; 0x13c
    6970:	e012      	b.n	6998 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b4>
    6972:	480e      	ldr	r0, [pc, #56]	; (69ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c8>)
    6974:	3010      	adds	r0, #16
    6976:	6841      	ldr	r1, [r0, #4]
    6978:	f501 70cb 	add.w	r0, r1, #406	; 0x196
    697c:	880a      	ldrh	r2, [r1, #0]
    697e:	f820 2b02 	strh.w	r2, [r0], #2
    6982:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
    6986:	f800 2b01 	strb.w	r2, [r0], #1
    698a:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    698e:	f800 190d 	strb.w	r1, [r0], #-13
    6992:	4907      	ldr	r1, [pc, #28]	; (69b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13cc>)
    6994:	f007 fdff 	bl	e596 <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>
    6998:	6861      	ldr	r1, [r4, #4]
    699a:	2022      	movs	r0, #34	; 0x22
    699c:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    69a0:	4802      	ldr	r0, [pc, #8]	; (69ac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c8>)
    69a2:	3010      	adds	r0, #16
    69a4:	f007 ff39 	bl	e81a <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    69a8:	2000      	movs	r0, #0
    69aa:	bd38      	pop	{r3, r4, r5, pc}
    69ac:	20000114 	.word	0x20000114
    69b0:	00007a99 	.word	0x00007a99
    69b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    69b8:	6845      	ldr	r5, [r0, #4]
    69ba:	4604      	mov	r4, r0
    69bc:	f895 009d 	ldrb.w	r0, [r5, #157]	; 0x9d
    69c0:	2821      	cmp	r0, #33	; 0x21
    69c2:	d008      	beq.n	69d6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13f2>
    69c4:	f05f 0600 	movs.w	r6, #0
    69c8:	f895 009e 	ldrb.w	r0, [r5, #158]	; 0x9e
    69cc:	2823      	cmp	r0, #35	; 0x23
    69ce:	d004      	beq.n	69da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13f6>
    69d0:	b35e      	cbz	r6, 6a2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1446>
    69d2:	359d      	adds	r5, #157	; 0x9d
    69d4:	e002      	b.n	69dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13f8>
    69d6:	2601      	movs	r6, #1
    69d8:	e7f6      	b.n	69c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13e4>
    69da:	359e      	adds	r5, #158	; 0x9e
    69dc:	f8df 8140 	ldr.w	r8, [pc, #320]	; 6b20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x153c>
    69e0:	f8d8 000c 	ldr.w	r0, [r8, #12]
    69e4:	f007 fd2f 	bl	e446 <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>
    69e8:	2700      	movs	r7, #0
    69ea:	b308      	cbz	r0, 6a30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x144c>
    69ec:	4631      	mov	r1, r6
    69ee:	f8d8 000c 	ldr.w	r0, [r8, #12]
    69f2:	f7fe ffb3 	bl	595c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x378>
    69f6:	b1d8      	cbz	r0, 6a30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x144c>
    69f8:	466a      	mov	r2, sp
    69fa:	4646      	mov	r6, r8
    69fc:	6860      	ldr	r0, [r4, #4]
    69fe:	f8d8 100c 	ldr.w	r1, [r8, #12]
    6a02:	f007 fb42 	bl	e08a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>
    6a06:	b388      	cbz	r0, 6a6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1488>
    6a08:	68f0      	ldr	r0, [r6, #12]
    6a0a:	f007 fd1a 	bl	e442 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    6a0e:	6861      	ldr	r1, [r4, #4]
    6a10:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    6a14:	6861      	ldr	r1, [r4, #4]
    6a16:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    6a1a:	f008 fecc 	bl	f7b6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x60>
    6a1e:	b3e8      	cbz	r0, 6a9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b8>
    6a20:	6861      	ldr	r1, [r4, #4]
    6a22:	2028      	movs	r0, #40	; 0x28
    6a24:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    6a28:	e06e      	b.n	6b08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1524>
    6a2a:	2002      	movs	r0, #2
    6a2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6a30:	6860      	ldr	r0, [r4, #4]
    6a32:	f04f 0900 	mov.w	r9, #0
    6a36:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    6a3a:	2901      	cmp	r1, #1
    6a3c:	d017      	beq.n	6a6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x148a>
    6a3e:	f880 713c 	strb.w	r7, [r0, #316]	; 0x13c
    6a42:	b306      	cbz	r6, 6a86 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a2>
    6a44:	f8d8 000c 	ldr.w	r0, [r8, #12]
    6a48:	6861      	ldr	r1, [r4, #4]
    6a4a:	2201      	movs	r2, #1
    6a4c:	78c0      	ldrb	r0, [r0, #3]
    6a4e:	f881 0121 	strb.w	r0, [r1, #289]	; 0x121
    6a52:	4082      	lsls	r2, r0
    6a54:	6861      	ldr	r1, [r4, #4]
    6a56:	f3c2 6000 	ubfx	r0, r2, #24, #1
    6a5a:	b160      	cbz	r0, 6a76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1492>
    6a5c:	2009      	movs	r0, #9
    6a5e:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    6a62:	6860      	ldr	r0, [r4, #4]
    6a64:	f890 00d6 	ldrb.w	r0, [r0, #214]	; 0xd6
    6a68:	b9b0      	cbnz	r0, 6a98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b4>
    6a6a:	e007      	b.n	6a7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1498>
    6a6c:	e017      	b.n	6a9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14ba>
    6a6e:	201e      	movs	r0, #30
    6a70:	f7ff fd58 	bl	6524 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    6a74:	e7e5      	b.n	6a42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x145e>
    6a76:	f240 414b 	movw	r1, #1099	; 0x44b
    6a7a:	e001      	b.n	6a80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149c>
    6a7c:	f240 4153 	movw	r1, #1107	; 0x453
    6a80:	2031      	movs	r0, #49	; 0x31
    6a82:	f7fa fb6f 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6a86:	4826      	ldr	r0, [pc, #152]	; (6b20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x153c>)
    6a88:	702f      	strb	r7, [r5, #0]
    6a8a:	3010      	adds	r0, #16
    6a8c:	f007 fecd 	bl	e82a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6a90:	4620      	mov	r0, r4
    6a92:	f7ff fe61 	bl	6758 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    6a96:	4681      	mov	r9, r0
    6a98:	4648      	mov	r0, r9
    6a9a:	e7c7      	b.n	6a2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1448>
    6a9c:	e013      	b.n	6ac6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e2>
    6a9e:	6860      	ldr	r0, [r4, #4]
    6aa0:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    6aa4:	2901      	cmp	r1, #1
    6aa6:	d009      	beq.n	6abc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14d8>
    6aa8:	f880 713c 	strb.w	r7, [r0, #316]	; 0x13c
    6aac:	6860      	ldr	r0, [r4, #4]
    6aae:	f100 019e 	add.w	r1, r0, #158	; 0x9e
    6ab2:	42a9      	cmp	r1, r5
    6ab4:	d11b      	bne.n	6aee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
    6ab6:	f880 709e 	strb.w	r7, [r0, #158]	; 0x9e
    6aba:	e018      	b.n	6aee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
    6abc:	2000      	movs	r0, #0
    6abe:	f7ff fd31 	bl	6524 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    6ac2:	702f      	strb	r7, [r5, #0]
    6ac4:	e7f2      	b.n	6aac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c8>
    6ac6:	6860      	ldr	r0, [r4, #4]
    6ac8:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6acc:	290d      	cmp	r1, #13
    6ace:	d018      	beq.n	6b02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x151e>
    6ad0:	290b      	cmp	r1, #11
    6ad2:	d016      	beq.n	6b02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x151e>
    6ad4:	290a      	cmp	r1, #10
    6ad6:	d014      	beq.n	6b02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x151e>
    6ad8:	f89d 1000 	ldrb.w	r1, [sp]
    6adc:	f880 12ce 	strb.w	r1, [r0, #718]	; 0x2ce
    6ae0:	6861      	ldr	r1, [r4, #4]
    6ae2:	f89d 0001 	ldrb.w	r0, [sp, #1]
    6ae6:	f881 02cf 	strb.w	r0, [r1, #719]	; 0x2cf
    6aea:	2025      	movs	r0, #37	; 0x25
    6aec:	7028      	strb	r0, [r5, #0]
    6aee:	6860      	ldr	r0, [r4, #4]
    6af0:	f100 019e 	add.w	r1, r0, #158	; 0x9e
    6af4:	42a9      	cmp	r1, r5
    6af6:	d10e      	bne.n	6b16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1532>
    6af8:	4809      	ldr	r0, [pc, #36]	; (6b20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x153c>)
    6afa:	3010      	adds	r0, #16
    6afc:	f007 fe95 	bl	e82a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6b00:	e00b      	b.n	6b1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1536>
    6b02:	212a      	movs	r1, #42	; 0x2a
    6b04:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    6b08:	6860      	ldr	r0, [r4, #4]
    6b0a:	2202      	movs	r2, #2
    6b0c:	4905      	ldr	r1, [pc, #20]	; (6b24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1540>)
    6b0e:	30b4      	adds	r0, #180	; 0xb4
    6b10:	f007 fd4a 	bl	e5a8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6b14:	e7eb      	b.n	6aee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
    6b16:	f880 70d6 	strb.w	r7, [r0, #214]	; 0xd6
    6b1a:	2000      	movs	r0, #0
    6b1c:	e786      	b.n	6a2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1448>
    6b1e:	0000      	.short	0x0000
    6b20:	20000114 	.word	0x20000114
    6b24:	0000e865 	.word	0x0000e865
    6b28:	b570      	push	{r4, r5, r6, lr}
    6b2a:	4604      	mov	r4, r0
    6b2c:	6840      	ldr	r0, [r0, #4]
    6b2e:	4d0a      	ldr	r5, [pc, #40]	; (6b58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1574>)
    6b30:	f810 1fec 	ldrb.w	r1, [r0, #236]!
    6b34:	f041 0104 	orr.w	r1, r1, #4
    6b38:	7001      	strb	r1, [r0, #0]
    6b3a:	68e8      	ldr	r0, [r5, #12]
    6b3c:	f007 fc97 	bl	e46e <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>
    6b40:	4606      	mov	r6, r0
    6b42:	68e8      	ldr	r0, [r5, #12]
    6b44:	f007 fc97 	bl	e476 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>
    6b48:	4601      	mov	r1, r0
    6b4a:	4622      	mov	r2, r4
    6b4c:	4630      	mov	r0, r6
    6b4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6b52:	f000 b893 	b.w	6c7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1698>
    6b56:	0000      	.short	0x0000
    6b58:	20000114 	.word	0x20000114
    6b5c:	4602      	mov	r2, r0
    6b5e:	4813      	ldr	r0, [pc, #76]	; (6bac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
    6b60:	68c0      	ldr	r0, [r0, #12]
    6b62:	7901      	ldrb	r1, [r0, #4]
    6b64:	4811      	ldr	r0, [pc, #68]	; (6bac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
    6b66:	3010      	adds	r0, #16
    6b68:	6843      	ldr	r3, [r0, #4]
    6b6a:	f893 009d 	ldrb.w	r0, [r3, #157]	; 0x9d
    6b6e:	2821      	cmp	r0, #33	; 0x21
    6b70:	d010      	beq.n	6b94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    6b72:	282e      	cmp	r0, #46	; 0x2e
    6b74:	d00e      	beq.n	6b94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    6b76:	2828      	cmp	r0, #40	; 0x28
    6b78:	d00e      	beq.n	6b98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b4>
    6b7a:	2804      	cmp	r0, #4
    6b7c:	d00e      	beq.n	6b9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b8>
    6b7e:	280f      	cmp	r0, #15
    6b80:	d00e      	beq.n	6ba0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15bc>
    6b82:	281d      	cmp	r0, #29
    6b84:	d00e      	beq.n	6ba4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c0>
    6b86:	f893 009e 	ldrb.w	r0, [r3, #158]	; 0x9e
    6b8a:	2823      	cmp	r0, #35	; 0x23
    6b8c:	d00c      	beq.n	6ba8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c4>
    6b8e:	20fe      	movs	r0, #254	; 0xfe
    6b90:	f000 b874 	b.w	6c7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1698>
    6b94:	2016      	movs	r0, #22
    6b96:	e7fb      	b.n	6b90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6b98:	2023      	movs	r0, #35	; 0x23
    6b9a:	e7f9      	b.n	6b90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6b9c:	200e      	movs	r0, #14
    6b9e:	e7f7      	b.n	6b90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6ba0:	2012      	movs	r0, #18
    6ba2:	e7f5      	b.n	6b90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6ba4:	2014      	movs	r0, #20
    6ba6:	e7f3      	b.n	6b90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6ba8:	2017      	movs	r0, #23
    6baa:	e7f1      	b.n	6b90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6bac:	20000114 	.word	0x20000114
    6bb0:	b510      	push	{r4, lr}
    6bb2:	4604      	mov	r4, r0
    6bb4:	6840      	ldr	r0, [r0, #4]
    6bb6:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    6bba:	2818      	cmp	r0, #24
    6bbc:	d001      	beq.n	6bc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15de>
    6bbe:	2002      	movs	r0, #2
    6bc0:	bd10      	pop	{r4, pc}
    6bc2:	4804      	ldr	r0, [pc, #16]	; (6bd4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f0>)
    6bc4:	f007 fe31 	bl	e82a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6bc8:	6861      	ldr	r1, [r4, #4]
    6bca:	201c      	movs	r0, #28
    6bcc:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    6bd0:	2000      	movs	r0, #0
    6bd2:	bd10      	pop	{r4, pc}
    6bd4:	20000124 	.word	0x20000124
    6bd8:	4901      	ldr	r1, [pc, #4]	; (6be0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15fc>)
    6bda:	68c9      	ldr	r1, [r1, #12]
    6bdc:	f007 be64 	b.w	e8a8 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA>
    6be0:	20000114 	.word	0x20000114
    6be4:	b570      	push	{r4, r5, r6, lr}
    6be6:	4604      	mov	r4, r0
    6be8:	481f      	ldr	r0, [pc, #124]	; (6c68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1684>)
    6bea:	2500      	movs	r5, #0
    6bec:	68c0      	ldr	r0, [r0, #12]
    6bee:	7903      	ldrb	r3, [r0, #4]
    6bf0:	6860      	ldr	r0, [r4, #4]
    6bf2:	2b16      	cmp	r3, #22
    6bf4:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    6bf8:	d013      	beq.n	6c22 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x163e>
    6bfa:	dc06      	bgt.n	6c0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1626>
    6bfc:	2b0e      	cmp	r3, #14
    6bfe:	d009      	beq.n	6c14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    6c00:	2b12      	cmp	r3, #18
    6c02:	d007      	beq.n	6c14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    6c04:	2b14      	cmp	r3, #20
    6c06:	d12c      	bne.n	6c62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6c08:	e004      	b.n	6c14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    6c0a:	2b17      	cmp	r3, #23
    6c0c:	d002      	beq.n	6c14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    6c0e:	2b23      	cmp	r3, #35	; 0x23
    6c10:	d127      	bne.n	6c62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6c12:	e01f      	b.n	6c54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1670>
    6c14:	4622      	mov	r2, r4
    6c16:	2101      	movs	r1, #1
    6c18:	4618      	mov	r0, r3
    6c1a:	f000 f9c5 	bl	6fa8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c4>
    6c1e:	4605      	mov	r5, r0
    6c20:	e01f      	b.n	6c62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6c22:	2821      	cmp	r0, #33	; 0x21
    6c24:	d001      	beq.n	6c2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1646>
    6c26:	282e      	cmp	r0, #46	; 0x2e
    6c28:	d11b      	bne.n	6c62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6c2a:	4620      	mov	r0, r4
    6c2c:	f007 fe11 	bl	e852 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>
    6c30:	6860      	ldr	r0, [r4, #4]
    6c32:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6c36:	2922      	cmp	r1, #34	; 0x22
    6c38:	d013      	beq.n	6c62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6c3a:	2108      	movs	r1, #8
    6c3c:	30ec      	adds	r0, #236	; 0xec
    6c3e:	f008 fd66 	bl	f70e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b0>
    6c42:	6860      	ldr	r0, [r4, #4]
    6c44:	210b      	movs	r1, #11
    6c46:	30ec      	adds	r0, #236	; 0xec
    6c48:	f008 fd61 	bl	f70e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b0>
    6c4c:	201a      	movs	r0, #26
    6c4e:	f7ff fc69 	bl	6524 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    6c52:	e006      	b.n	6c62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6c54:	2828      	cmp	r0, #40	; 0x28
    6c56:	d104      	bne.n	6c62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6c58:	4804      	ldr	r0, [pc, #16]	; (6c6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1688>)
    6c5a:	6801      	ldr	r1, [r0, #0]
    6c5c:	b109      	cbz	r1, 6c62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6c5e:	4620      	mov	r0, r4
    6c60:	4788      	blx	r1
    6c62:	4628      	mov	r0, r5
    6c64:	bd70      	pop	{r4, r5, r6, pc}
    6c66:	0000      	.short	0x0000
    6c68:	20000114 	.word	0x20000114
    6c6c:	20000290 	.word	0x20000290
    6c70:	4901      	ldr	r1, [pc, #4]	; (6c78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1694>)
    6c72:	68c9      	ldr	r1, [r1, #12]
    6c74:	f7fc bd40 	b.w	36f8 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>
    6c78:	20000114 	.word	0x20000114
    6c7c:	4603      	mov	r3, r0
    6c7e:	2000      	movs	r0, #0
    6c80:	2b17      	cmp	r3, #23
    6c82:	d017      	beq.n	6cb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    6c84:	dc0a      	bgt.n	6c9c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16b8>
    6c86:	2b0e      	cmp	r3, #14
    6c88:	d014      	beq.n	6cb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    6c8a:	2b12      	cmp	r3, #18
    6c8c:	d012      	beq.n	6cb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    6c8e:	2b14      	cmp	r3, #20
    6c90:	d010      	beq.n	6cb4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    6c92:	2b16      	cmp	r3, #22
    6c94:	d112      	bne.n	6cbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d8>
    6c96:	4608      	mov	r0, r1
    6c98:	f7ff bc4a 	b.w	6530 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf4c>
    6c9c:	2b23      	cmp	r3, #35	; 0x23
    6c9e:	d003      	beq.n	6ca8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c4>
    6ca0:	2b24      	cmp	r3, #36	; 0x24
    6ca2:	d001      	beq.n	6ca8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c4>
    6ca4:	2b25      	cmp	r3, #37	; 0x25
    6ca6:	d109      	bne.n	6cbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d8>
    6ca8:	4a05      	ldr	r2, [pc, #20]	; (6cc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16dc>)
    6caa:	6812      	ldr	r2, [r2, #0]
    6cac:	2a00      	cmp	r2, #0
    6cae:	d005      	beq.n	6cbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d8>
    6cb0:	4618      	mov	r0, r3
    6cb2:	4710      	bx	r2
    6cb4:	2100      	movs	r1, #0
    6cb6:	4618      	mov	r0, r3
    6cb8:	f000 b976 	b.w	6fa8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c4>
    6cbc:	4770      	bx	lr
    6cbe:	0000      	.short	0x0000
    6cc0:	20000288 	.word	0x20000288
    6cc4:	b510      	push	{r4, lr}
    6cc6:	6841      	ldr	r1, [r0, #4]
    6cc8:	4604      	mov	r4, r0
    6cca:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    6cce:	06c2      	lsls	r2, r0, #27
    6cd0:	d402      	bmi.n	6cd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16f4>
    6cd2:	f240 71db 	movw	r1, #2011	; 0x7db
    6cd6:	e003      	b.n	6ce0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16fc>
    6cd8:	0682      	lsls	r2, r0, #26
    6cda:	d504      	bpl.n	6ce6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1702>
    6cdc:	f240 71dc 	movw	r1, #2012	; 0x7dc
    6ce0:	2031      	movs	r0, #49	; 0x31
    6ce2:	f7fa fa3f 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6ce6:	f020 0010 	bic.w	r0, r0, #16
    6cea:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
    6cee:	4804      	ldr	r0, [pc, #16]	; (6d00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x171c>)
    6cf0:	f007 fd9b 	bl	e82a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6cf4:	6860      	ldr	r0, [r4, #4]
    6cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6cfa:	2105      	movs	r1, #5
    6cfc:	f7fd bf1a 	b.w	4b34 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    6d00:	20000124 	.word	0x20000124
    6d04:	b510      	push	{r4, lr}
    6d06:	6840      	ldr	r0, [r0, #4]
    6d08:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6d0c:	292f      	cmp	r1, #47	; 0x2f
    6d0e:	d006      	beq.n	6d1e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x173a>
    6d10:	2916      	cmp	r1, #22
    6d12:	d00c      	beq.n	6d2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174a>
    6d14:	f240 71a5 	movw	r1, #1957	; 0x7a5
    6d18:	2031      	movs	r0, #49	; 0x31
    6d1a:	f7fa fa23 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d1e:	2100      	movs	r1, #0
    6d20:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    6d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6d28:	4803      	ldr	r0, [pc, #12]	; (6d38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1754>)
    6d2a:	f007 bd7e 	b.w	e82a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6d2e:	211a      	movs	r1, #26
    6d30:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    6d34:	bd10      	pop	{r4, pc}
    6d36:	0000      	.short	0x0000
    6d38:	20000124 	.word	0x20000124
    6d3c:	b570      	push	{r4, r5, r6, lr}
    6d3e:	4604      	mov	r4, r0
    6d40:	6840      	ldr	r0, [r0, #4]
    6d42:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6d46:	291c      	cmp	r1, #28
    6d48:	d004      	beq.n	6d54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1770>
    6d4a:	f240 71b6 	movw	r1, #1974	; 0x7b6
    6d4e:	2031      	movs	r0, #49	; 0x31
    6d50:	f7fa fa08 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d54:	2500      	movs	r5, #0
    6d56:	f880 50db 	strb.w	r5, [r0, #219]	; 0xdb
    6d5a:	6860      	ldr	r0, [r4, #4]
    6d5c:	f890 10dc 	ldrb.w	r1, [r0, #220]	; 0xdc
    6d60:	b161      	cbz	r1, 6d7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1798>
    6d62:	f880 50dc 	strb.w	r5, [r0, #220]	; 0xdc
    6d66:	6860      	ldr	r0, [r4, #4]
    6d68:	2202      	movs	r2, #2
    6d6a:	8801      	ldrh	r1, [r0, #0]
    6d6c:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    6d70:	6860      	ldr	r0, [r4, #4]
    6d72:	490d      	ldr	r1, [pc, #52]	; (6da8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c4>)
    6d74:	f880 5214 	strb.w	r5, [r0, #532]	; 0x214
    6d78:	6860      	ldr	r0, [r4, #4]
    6d7a:	e00c      	b.n	6d96 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b2>
    6d7c:	8801      	ldrh	r1, [r0, #0]
    6d7e:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    6d82:	6860      	ldr	r0, [r4, #4]
    6d84:	f880 5214 	strb.w	r5, [r0, #532]	; 0x214
    6d88:	6861      	ldr	r1, [r4, #4]
    6d8a:	2001      	movs	r0, #1
    6d8c:	2202      	movs	r2, #2
    6d8e:	f881 0218 	strb.w	r0, [r1, #536]	; 0x218
    6d92:	4906      	ldr	r1, [pc, #24]	; (6dac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c8>)
    6d94:	6860      	ldr	r0, [r4, #4]
    6d96:	f200 200a 	addw	r0, r0, #522	; 0x20a
    6d9a:	f007 fc05 	bl	e5a8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6d9e:	6860      	ldr	r0, [r4, #4]
    6da0:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    6da4:	bd70      	pop	{r4, r5, r6, pc}
    6da6:	0000      	.short	0x0000
    6da8:	0000e9f3 	.word	0x0000e9f3
    6dac:	0000e9d5 	.word	0x0000e9d5
    6db0:	4916      	ldr	r1, [pc, #88]	; (6e0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1828>)
    6db2:	b510      	push	{r4, lr}
    6db4:	6889      	ldr	r1, [r1, #8]
    6db6:	790a      	ldrb	r2, [r1, #4]
    6db8:	6841      	ldr	r1, [r0, #4]
    6dba:	f891 309d 	ldrb.w	r3, [r1, #157]	; 0x9d
    6dbe:	2b09      	cmp	r3, #9
    6dc0:	d10a      	bne.n	6dd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f4>
    6dc2:	f891 3121 	ldrb.w	r3, [r1, #289]	; 0x121
    6dc6:	4293      	cmp	r3, r2
    6dc8:	d106      	bne.n	6dd8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f4>
    6dca:	2200      	movs	r2, #0
    6dcc:	f881 209d 	strb.w	r2, [r1, #157]	; 0x9d
    6dd0:	6840      	ldr	r0, [r0, #4]
    6dd2:	f880 20d6 	strb.w	r2, [r0, #214]	; 0xd6
    6dd6:	bd10      	pop	{r4, pc}
    6dd8:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    6ddc:	071c      	lsls	r4, r3, #28
    6dde:	d509      	bpl.n	6df4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1810>
    6de0:	f023 0008 	bic.w	r0, r3, #8
    6de4:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
    6de8:	4808      	ldr	r0, [pc, #32]	; (6e0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1828>)
    6dea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6dee:	3010      	adds	r0, #16
    6df0:	f007 bd1b 	b.w	e82a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6df4:	2aff      	cmp	r2, #255	; 0xff
    6df6:	d004      	beq.n	6e02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x181e>
    6df8:	f240 7151 	movw	r1, #1873	; 0x751
    6dfc:	2031      	movs	r0, #49	; 0x31
    6dfe:	f7fa f9b1 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6e06:	f008 bd2d 	b.w	f864 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x10e>
    6e0a:	0000      	.short	0x0000
    6e0c:	20000114 	.word	0x20000114
    6e10:	4808      	ldr	r0, [pc, #32]	; (6e34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1850>)
    6e12:	b510      	push	{r4, lr}
    6e14:	6840      	ldr	r0, [r0, #4]
    6e16:	f890 10a3 	ldrb.w	r1, [r0, #163]	; 0xa3
    6e1a:	b941      	cbnz	r1, 6e2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184a>
    6e1c:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6e20:	2301      	movs	r3, #1
    6e22:	2106      	movs	r1, #6
    6e24:	3080      	adds	r0, #128	; 0x80
    6e26:	f007 f817 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6e2a:	2800      	cmp	r0, #0
    6e2c:	d000      	beq.n	6e30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184c>
    6e2e:	2001      	movs	r0, #1
    6e30:	bd10      	pop	{r4, pc}
    6e32:	0000      	.short	0x0000
    6e34:	20000124 	.word	0x20000124
    6e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e3a:	4c59      	ldr	r4, [pc, #356]	; (6fa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19bc>)
    6e3c:	4606      	mov	r6, r0
    6e3e:	4615      	mov	r5, r2
    6e40:	6860      	ldr	r0, [r4, #4]
    6e42:	2200      	movs	r2, #0
    6e44:	b111      	cbz	r1, 6e4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1868>
    6e46:	f8a0 2236 	strh.w	r2, [r0, #566]	; 0x236
    6e4a:	e006      	b.n	6e5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1876>
    6e4c:	f8b0 1236 	ldrh.w	r1, [r0, #566]	; 0x236
    6e50:	f8b0 2226 	ldrh.w	r2, [r0, #550]	; 0x226
    6e54:	4411      	add	r1, r2
    6e56:	f8a0 1236 	strh.w	r1, [r0, #566]	; 0x236
    6e5a:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    6e5e:	f88d 1000 	strb.w	r1, [sp]
    6e62:	9900      	ldr	r1, [sp, #0]
    6e64:	9100      	str	r1, [sp, #0]
    6e66:	f89d 1000 	ldrb.w	r1, [sp]
    6e6a:	b939      	cbnz	r1, 6e7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1898>
    6e6c:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    6e70:	2301      	movs	r3, #1
    6e72:	4619      	mov	r1, r3
    6e74:	3080      	adds	r0, #128	; 0x80
    6e76:	f006 ffef 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6e7a:	b130      	cbz	r0, 6e8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a6>
    6e7c:	6860      	ldr	r0, [r4, #4]
    6e7e:	f830 1fd0 	ldrh.w	r1, [r0, #208]!
    6e82:	f8b0 2156 	ldrh.w	r2, [r0, #342]	; 0x156
    6e86:	4411      	add	r1, r2
    6e88:	8001      	strh	r1, [r0, #0]
    6e8a:	6860      	ldr	r0, [r4, #4]
    6e8c:	f890 20d6 	ldrb.w	r2, [r0, #214]	; 0xd6
    6e90:	b132      	cbz	r2, 6ea0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18bc>
    6e92:	f8b0 10d2 	ldrh.w	r1, [r0, #210]	; 0xd2
    6e96:	f8b0 3226 	ldrh.w	r3, [r0, #550]	; 0x226
    6e9a:	4419      	add	r1, r3
    6e9c:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
    6ea0:	f990 30da 	ldrsb.w	r3, [r0, #218]	; 0xda
    6ea4:	2b00      	cmp	r3, #0
    6ea6:	dd06      	ble.n	6eb6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18d2>
    6ea8:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    6eac:	f8b0 7226 	ldrh.w	r7, [r0, #550]	; 0x226
    6eb0:	4439      	add	r1, r7
    6eb2:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
    6eb6:	f890 10bd 	ldrb.w	r1, [r0, #189]	; 0xbd
    6eba:	bb09      	cbnz	r1, 6f00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x191c>
    6ebc:	b9be      	cbnz	r6, 6eee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190a>
    6ebe:	4938      	ldr	r1, [pc, #224]	; (6fa0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19bc>)
    6ec0:	3910      	subs	r1, #16
    6ec2:	7809      	ldrb	r1, [r1, #0]
    6ec4:	2902      	cmp	r1, #2
    6ec6:	d006      	beq.n	6ed6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f2>
    6ec8:	2901      	cmp	r1, #1
    6eca:	d00a      	beq.n	6ee2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18fe>
    6ecc:	b1f5      	cbz	r5, 6f0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1928>
    6ece:	06e9      	lsls	r1, r5, #27
    6ed0:	d50b      	bpl.n	6eea <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1906>
    6ed2:	211e      	movs	r1, #30
    6ed4:	e042      	b.n	6f5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6ed6:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    6eda:	2906      	cmp	r1, #6
    6edc:	d03e      	beq.n	6f5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6ede:	2116      	movs	r1, #22
    6ee0:	e03c      	b.n	6f5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6ee2:	f890 10a0 	ldrb.w	r1, [r0, #160]	; 0xa0
    6ee6:	b959      	cbnz	r1, 6f00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x191c>
    6ee8:	e054      	b.n	6f94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>
    6eea:	0729      	lsls	r1, r5, #28
    6eec:	d501      	bpl.n	6ef2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190e>
    6eee:	213d      	movs	r1, #61	; 0x3d
    6ef0:	e034      	b.n	6f5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6ef2:	06a9      	lsls	r1, r5, #26
    6ef4:	d501      	bpl.n	6efa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1916>
    6ef6:	2123      	movs	r1, #35	; 0x23
    6ef8:	e030      	b.n	6f5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6efa:	07a9      	lsls	r1, r5, #30
    6efc:	d001      	beq.n	6f02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x191e>
    6efe:	212a      	movs	r1, #42	; 0x2a
    6f00:	e02c      	b.n	6f5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6f02:	f640 51a3 	movw	r1, #3491	; 0xda3
    6f06:	2031      	movs	r0, #49	; 0x31
    6f08:	f7fa f92c 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f0c:	b12a      	cbz	r2, 6f1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1936>
    6f0e:	f8b0 10d2 	ldrh.w	r1, [r0, #210]	; 0xd2
    6f12:	f8b0 20d4 	ldrh.w	r2, [r0, #212]	; 0xd4
    6f16:	4291      	cmp	r1, r2
    6f18:	d216      	bcs.n	6f48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1964>
    6f1a:	2b00      	cmp	r3, #0
    6f1c:	dd05      	ble.n	6f2a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1946>
    6f1e:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    6f22:	f8b0 20d4 	ldrh.w	r2, [r0, #212]	; 0xd4
    6f26:	4291      	cmp	r1, r2
    6f28:	d20e      	bcs.n	6f48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1964>
    6f2a:	f8b0 20d0 	ldrh.w	r2, [r0, #208]	; 0xd0
    6f2e:	f8b0 10ce 	ldrh.w	r1, [r0, #206]	; 0xce
    6f32:	428a      	cmp	r2, r1
    6f34:	d30a      	bcc.n	6f4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1968>
    6f36:	f890 2130 	ldrb.w	r2, [r0, #304]	; 0x130
    6f3a:	f88d 2000 	strb.w	r2, [sp]
    6f3e:	9a00      	ldr	r2, [sp, #0]
    6f40:	9200      	str	r2, [sp, #0]
    6f42:	f89d 2000 	ldrb.w	r2, [sp]
    6f46:	b10a      	cbz	r2, 6f4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1968>
    6f48:	2122      	movs	r1, #34	; 0x22
    6f4a:	e007      	b.n	6f5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6f4c:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
    6f50:	b172      	cbz	r2, 6f70 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198c>
    6f52:	f8b0 20cc 	ldrh.w	r2, [r0, #204]	; 0xcc
    6f56:	428a      	cmp	r2, r1
    6f58:	d31c      	bcc.n	6f94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>
    6f5a:	2108      	movs	r1, #8
    6f5c:	f890 20bc 	ldrb.w	r2, [r0, #188]	; 0xbc
    6f60:	f88d 2000 	strb.w	r2, [sp]
    6f64:	9a00      	ldr	r2, [sp, #0]
    6f66:	9200      	str	r2, [sp, #0]
    6f68:	f89d 2000 	ldrb.w	r2, [sp]
    6f6c:	b96a      	cbnz	r2, 6f8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a6>
    6f6e:	e005      	b.n	6f7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1998>
    6f70:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
    6f74:	2906      	cmp	r1, #6
    6f76:	d30d      	bcc.n	6f94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>
    6f78:	213e      	movs	r1, #62	; 0x3e
    6f7a:	e7ef      	b.n	6f5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6f7c:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    6f80:	2202      	movs	r2, #2
    6f82:	4908      	ldr	r1, [pc, #32]	; (6fa4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c0>)
    6f84:	30b4      	adds	r0, #180	; 0xb4
    6f86:	f007 fb0f 	bl	e5a8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6f8a:	6860      	ldr	r0, [r4, #4]
    6f8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6f90:	f008 bbe1 	b.w	f756 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    6f94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6f98:	2100      	movs	r1, #0
    6f9a:	f7fd bdcb 	b.w	4b34 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    6f9e:	0000      	.short	0x0000
    6fa0:	20000124 	.word	0x20000124
    6fa4:	0000e865 	.word	0x0000e865
    6fa8:	b570      	push	{r4, r5, r6, lr}
    6faa:	4614      	mov	r4, r2
    6fac:	460e      	mov	r6, r1
    6fae:	6861      	ldr	r1, [r4, #4]
    6fb0:	4602      	mov	r2, r0
    6fb2:	2500      	movs	r5, #0
    6fb4:	f891 009d 	ldrb.w	r0, [r1, #157]	; 0x9d
    6fb8:	2a0e      	cmp	r2, #14
    6fba:	d00a      	beq.n	6fd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19ee>
    6fbc:	2a12      	cmp	r2, #18
    6fbe:	d011      	beq.n	6fe4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a00>
    6fc0:	2a14      	cmp	r2, #20
    6fc2:	d016      	beq.n	6ff2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0e>
    6fc4:	2a17      	cmp	r2, #23
    6fc6:	d023      	beq.n	7010 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a2c>
    6fc8:	f240 31dd 	movw	r1, #989	; 0x3dd
    6fcc:	2031      	movs	r0, #49	; 0x31
    6fce:	f7fa f8c9 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6fd2:	2804      	cmp	r0, #4
    6fd4:	d131      	bne.n	703a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    6fd6:	4620      	mov	r0, r4
    6fd8:	f007 fc3b 	bl	e852 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>
    6fdc:	4620      	mov	r0, r4
    6fde:	f7fc fb6d 	bl	36bc <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q>
    6fe2:	e02a      	b.n	703a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    6fe4:	280f      	cmp	r0, #15
    6fe6:	d128      	bne.n	703a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    6fe8:	4620      	mov	r0, r4
    6fea:	f007 fd8f 	bl	eb0c <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ>
    6fee:	4605      	mov	r5, r0
    6ff0:	e023      	b.n	703a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    6ff2:	281d      	cmp	r0, #29
    6ff4:	d121      	bne.n	703a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    6ff6:	4620      	mov	r0, r4
    6ff8:	f007 fc2b 	bl	e852 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>
    6ffc:	b126      	cbz	r6, 7008 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a24>
    6ffe:	6860      	ldr	r0, [r4, #4]
    7000:	2105      	movs	r1, #5
    7002:	30ec      	adds	r0, #236	; 0xec
    7004:	f008 fb83 	bl	f70e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5b0>
    7008:	480d      	ldr	r0, [pc, #52]	; (7040 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a5c>)
    700a:	f007 fcd3 	bl	e9b4 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
    700e:	e014      	b.n	703a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    7010:	f891 009e 	ldrb.w	r0, [r1, #158]	; 0x9e
    7014:	2823      	cmp	r0, #35	; 0x23
    7016:	d110      	bne.n	703a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a56>
    7018:	2600      	movs	r6, #0
    701a:	f881 609e 	strb.w	r6, [r1, #158]	; 0x9e
    701e:	4808      	ldr	r0, [pc, #32]	; (7040 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a5c>)
    7020:	f007 fc03 	bl	e82a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    7024:	6860      	ldr	r0, [r4, #4]
    7026:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    702a:	2801      	cmp	r0, #1
    702c:	d102      	bne.n	7034 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a50>
    702e:	2000      	movs	r0, #0
    7030:	f7ff fa78 	bl	6524 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    7034:	6860      	ldr	r0, [r4, #4]
    7036:	f880 613c 	strb.w	r6, [r0, #316]	; 0x13c
    703a:	4628      	mov	r0, r5
    703c:	bd70      	pop	{r4, r5, r6, pc}
    703e:	0000      	.short	0x0000
    7040:	20000124 	.word	0x20000124
    7044:	b570      	push	{r4, r5, r6, lr}
    7046:	4d2e      	ldr	r5, [pc, #184]	; (7100 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b1c>)
    7048:	6868      	ldr	r0, [r5, #4]
    704a:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    704e:	b151      	cbz	r1, 7066 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a82>
    7050:	2901      	cmp	r1, #1
    7052:	d008      	beq.n	7066 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a82>
    7054:	2902      	cmp	r1, #2
    7056:	d009      	beq.n	706c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a88>
    7058:	2903      	cmp	r1, #3
    705a:	d007      	beq.n	706c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a88>
    705c:	f640 4118 	movw	r1, #3096	; 0xc18
    7060:	2031      	movs	r0, #49	; 0x31
    7062:	f7fa f87f 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7066:	f8b0 1224 	ldrh.w	r1, [r0, #548]	; 0x224
    706a:	e037      	b.n	70dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af8>
    706c:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    7070:	2907      	cmp	r1, #7
    7072:	d036      	beq.n	70e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1afe>
    7074:	f8b0 20cc 	ldrh.w	r2, [r0, #204]	; 0xcc
    7078:	f8b0 10ce 	ldrh.w	r1, [r0, #206]	; 0xce
    707c:	2400      	movs	r4, #0
    707e:	1c93      	adds	r3, r2, #2
    7080:	4299      	cmp	r1, r3
    7082:	d306      	bcc.n	7092 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aae>
    7084:	1a89      	subs	r1, r1, r2
    7086:	1e89      	subs	r1, r1, #2
    7088:	040c      	lsls	r4, r1, #16
    708a:	0c24      	lsrs	r4, r4, #16
    708c:	d001      	beq.n	7092 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aae>
    708e:	1e64      	subs	r4, r4, #1
    7090:	b2a4      	uxth	r4, r4
    7092:	f890 10ca 	ldrb.w	r1, [r0, #202]	; 0xca
    7096:	b139      	cbz	r1, 70a8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ac4>
    7098:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    709c:	2301      	movs	r3, #1
    709e:	2109      	movs	r1, #9
    70a0:	3080      	adds	r0, #128	; 0x80
    70a2:	f006 fed9 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    70a6:	b340      	cbz	r0, 70fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1b16>
    70a8:	f7ff feb2 	bl	6e10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    70ac:	b178      	cbz	r0, 70ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aea>
    70ae:	686a      	ldr	r2, [r5, #4]
    70b0:	2000      	movs	r0, #0
    70b2:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
    70b6:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
    70ba:	1c93      	adds	r3, r2, #2
    70bc:	4299      	cmp	r1, r3
    70be:	d303      	bcc.n	70c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ae4>
    70c0:	1a88      	subs	r0, r1, r2
    70c2:	1e80      	subs	r0, r0, #2
    70c4:	d000      	beq.n	70c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ae4>
    70c6:	1e40      	subs	r0, r0, #1
    70c8:	42a0      	cmp	r0, r4
    70ca:	d200      	bcs.n	70ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1aea>
    70cc:	b284      	uxth	r4, r0
    70ce:	b10c      	cbz	r4, 70d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af0>
    70d0:	1e64      	subs	r4, r4, #1
    70d2:	b2a4      	uxth	r4, r4
    70d4:	6868      	ldr	r0, [r5, #4]
    70d6:	f8b0 1224 	ldrh.w	r1, [r0, #548]	; 0x224
    70da:	4421      	add	r1, r4
    70dc:	f8a0 1220 	strh.w	r1, [r0, #544]	; 0x220
    70e0:	bd70      	pop	{r4, r5, r6, pc}
    70e2:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
    70e6:	2903      	cmp	r1, #3
    70e8:	d3bd      	bcc.n	7066 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a82>
    70ea:	f830 1f94 	ldrh.w	r1, [r0, #148]!
    70ee:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
    70f0:	4411      	add	r1, r2
    70f2:	1c49      	adds	r1, r1, #1
    70f4:	f8a0 118c 	strh.w	r1, [r0, #396]	; 0x18c
    70f8:	bd70      	pop	{r4, r5, r6, pc}
    70fa:	2400      	movs	r4, #0
    70fc:	e7ea      	b.n	70d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1af0>
    70fe:	0000      	.short	0x0000
    7100:	20000124 	.word	0x20000124

00007104 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    7104:	b570      	push	{r4, r5, r6, lr}
    7106:	6844      	ldr	r4, [r0, #4]
    7108:	220d      	movs	r2, #13
    710a:	f504 7598 	add.w	r5, r4, #304	; 0x130
    710e:	2100      	movs	r1, #0
    7110:	f104 006f 	add.w	r0, r4, #111	; 0x6f
    7114:	f009 fe4d 	bl	10db2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7118:	f44f 70a3 	mov.w	r0, #326	; 0x146
    711c:	2100      	movs	r1, #0
    711e:	f8a4 1144 	strh.w	r1, [r4, #324]	; 0x144
    7122:	5501      	strb	r1, [r0, r4]
    7124:	f8a5 1017 	strh.w	r1, [r5, #23]
    7128:	7669      	strb	r1, [r5, #25]
    712a:	4608      	mov	r0, r1
    712c:	f05f 017f 	movs.w	r1, #127	; 0x7f
    7130:	eb04 0240 	add.w	r2, r4, r0, lsl #1
    7134:	1c40      	adds	r0, r0, #1
    7136:	b2c0      	uxtb	r0, r0
    7138:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
    713c:	2802      	cmp	r0, #2
    713e:	d3f7      	bcc.n	7130 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x2c>
    7140:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
    7144:	4620      	mov	r0, r4
    7146:	f008 fc4d 	bl	f9e4 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    714a:	2000      	movs	r0, #0
    714c:	21ff      	movs	r1, #255	; 0xff
    714e:	1822      	adds	r2, r4, r0
    7150:	1c40      	adds	r0, r0, #1
    7152:	b2c0      	uxtb	r0, r0
    7154:	f882 1077 	strb.w	r1, [r2, #119]	; 0x77
    7158:	2802      	cmp	r0, #2
    715a:	d3f8      	bcc.n	714e <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x4a>
    715c:	bd70      	pop	{r4, r5, r6, pc}
	...

00007160 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    7160:	4903      	ldr	r1, [pc, #12]	; (7170 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    7162:	884a      	ldrh	r2, [r1, #2]
    7164:	8002      	strh	r2, [r0, #0]
    7166:	7809      	ldrb	r1, [r1, #0]
    7168:	7081      	strb	r1, [r0, #2]
    716a:	2000      	movs	r0, #0
    716c:	4770      	bx	lr
    716e:	0000      	.short	0x0000
    7170:	200012c8 	.word	0x200012c8

00007174 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    7174:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    7176:	460c      	mov	r4, r1
    7178:	4605      	mov	r5, r0
    717a:	8800      	ldrh	r0, [r0, #0]
    717c:	4669      	mov	r1, sp
    717e:	f006 fe54 	bl	de2a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7182:	2200      	movs	r2, #0
    7184:	b128      	cbz	r0, 7192 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    7186:	f8c4 2002 	str.w	r2, [r4, #2]
    718a:	71a2      	strb	r2, [r4, #6]
    718c:	8022      	strh	r2, [r4, #0]
    718e:	2002      	movs	r0, #2
    7190:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    7192:	9901      	ldr	r1, [sp, #4]
    7194:	f111 0180 	adds.w	r1, r1, #128	; 0x80
    7198:	f881 2074 	strb.w	r2, [r1, #116]	; 0x74
    719c:	f8d1 0026 	ldr.w	r0, [r1, #38]	; 0x26
    71a0:	f8c4 0002 	str.w	r0, [r4, #2]
    71a4:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
    71a8:	71a0      	strb	r0, [r4, #6]
    71aa:	8828      	ldrh	r0, [r5, #0]
    71ac:	8020      	strh	r0, [r4, #0]
    71ae:	f891 0074 	ldrb.w	r0, [r1, #116]	; 0x74
    71b2:	f88d 0008 	strb.w	r0, [sp, #8]
    71b6:	9802      	ldr	r0, [sp, #8]
    71b8:	9002      	str	r0, [sp, #8]
    71ba:	f89d 0008 	ldrb.w	r0, [sp, #8]
    71be:	2800      	cmp	r0, #0
    71c0:	d1ea      	bne.n	7198 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    71c2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

000071c4 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    71c4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    71c6:	460d      	mov	r5, r1
    71c8:	4606      	mov	r6, r0
    71ca:	8800      	ldrh	r0, [r0, #0]
    71cc:	4669      	mov	r1, sp
    71ce:	f006 fe2c 	bl	de2a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    71d2:	2800      	cmp	r0, #0
    71d4:	d11a      	bne.n	720c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    71d6:	f8dd 4004 	ldr.w	r4, [sp, #4]
    71da:	2700      	movs	r7, #0
    71dc:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    71e0:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    71e4:	f009 f8fa 	bl	103dc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    71e8:	70a8      	strb	r0, [r5, #2]
    71ea:	7860      	ldrb	r0, [r4, #1]
    71ec:	f009 f8f6 	bl	103dc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    71f0:	70e8      	strb	r0, [r5, #3]
    71f2:	78a0      	ldrb	r0, [r4, #2]
    71f4:	f88d 0008 	strb.w	r0, [sp, #8]
    71f8:	9802      	ldr	r0, [sp, #8]
    71fa:	9002      	str	r0, [sp, #8]
    71fc:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7200:	3c6a      	subs	r4, #106	; 0x6a
    7202:	2800      	cmp	r0, #0
    7204:	d1ea      	bne.n	71dc <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    7206:	8830      	ldrh	r0, [r6, #0]
    7208:	8028      	strh	r0, [r5, #0]
    720a:	2000      	movs	r0, #0
    720c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00007210 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    7210:	4903      	ldr	r1, [pc, #12]	; (7220 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    7212:	888a      	ldrh	r2, [r1, #4]
    7214:	8002      	strh	r2, [r0, #0]
    7216:	88c9      	ldrh	r1, [r1, #6]
    7218:	8041      	strh	r1, [r0, #2]
    721a:	2000      	movs	r0, #0
    721c:	4770      	bx	lr
    721e:	0000      	.short	0x0000
    7220:	2000029c 	.word	0x2000029c

00007224 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    7224:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    7226:	2400      	movs	r4, #0
    7228:	a902      	add	r1, sp, #8
    722a:	f88d 4004 	strb.w	r4, [sp, #4]
    722e:	f88d 4008 	strb.w	r4, [sp, #8]
    7232:	9100      	str	r1, [sp, #0]
    7234:	7882      	ldrb	r2, [r0, #2]
    7236:	7841      	ldrb	r1, [r0, #1]
    7238:	7800      	ldrb	r0, [r0, #0]
    723a:	ab01      	add	r3, sp, #4
    723c:	f009 fa42 	bl	106c4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x316>
    7240:	2800      	cmp	r0, #0
    7242:	d112      	bne.n	726a <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    7244:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7248:	f009 f97c 	bl	10544 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    724c:	b170      	cbz	r0, 726c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    724e:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7252:	f009 f977 	bl	10544 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    7256:	b148      	cbz	r0, 726c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    7258:	4805      	ldr	r0, [pc, #20]	; (7270 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    725a:	f89d 1004 	ldrb.w	r1, [sp, #4]
    725e:	7381      	strb	r1, [r0, #14]
    7260:	f89d 1008 	ldrb.w	r1, [sp, #8]
    7264:	73c1      	strb	r1, [r0, #15]
    7266:	8204      	strh	r4, [r0, #16]
    7268:	2000      	movs	r0, #0
    726a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    726c:	2011      	movs	r0, #17
    726e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    7270:	200012c8 	.word	0x200012c8

00007274 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    7274:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    7278:	460f      	mov	r7, r1
    727a:	4605      	mov	r5, r0
    727c:	7806      	ldrb	r6, [r0, #0]
    727e:	f009 f914 	bl	104aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xfc>
    7282:	2800      	cmp	r0, #0
    7284:	d10e      	bne.n	72a4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    7286:	4628      	mov	r0, r5
    7288:	f009 f8e9 	bl	1045e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xb0>
    728c:	2800      	cmp	r0, #0
    728e:	d109      	bne.n	72a4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    7290:	2101      	movs	r1, #1
    7292:	4630      	mov	r0, r6
    7294:	f7fa fa94 	bl	17c0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7298:	0004      	movs	r4, r0
    729a:	d005      	beq.n	72a8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x34>
    729c:	f007 ff5c 	bl	f158 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    72a0:	b170      	cbz	r0, 72c0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x4c>
    72a2:	200c      	movs	r0, #12
    72a4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    72a8:	2101      	movs	r1, #1
    72aa:	4630      	mov	r0, r6
    72ac:	f7fa fa50 	bl	1750 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    72b0:	0004      	movs	r4, r0
    72b2:	d013      	beq.n	72dc <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x68>
    72b4:	4817      	ldr	r0, [pc, #92]	; (7314 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0xa0>)
    72b6:	f990 1000 	ldrsb.w	r1, [r0]
    72ba:	4620      	mov	r0, r4
    72bc:	f007 fd21 	bl	ed02 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    72c0:	4620      	mov	r0, r4
    72c2:	f007 fd89 	bl	edd8 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    72c6:	7038      	strb	r0, [r7, #0]
    72c8:	74e8      	strb	r0, [r5, #19]
    72ca:	4629      	mov	r1, r5
    72cc:	4620      	mov	r0, r4
    72ce:	f7fc fc57 	bl	3b80 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    72d2:	4606      	mov	r6, r0
    72d4:	7e68      	ldrb	r0, [r5, #25]
    72d6:	b1d0      	cbz	r0, 730e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9a>
    72d8:	b12e      	cbz	r6, 72e6 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x72>
    72da:	e018      	b.n	730e <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x9a>
    72dc:	f241 512e 	movw	r1, #5422	; 0x152e
    72e0:	2039      	movs	r0, #57	; 0x39
    72e2:	f7f9 ff3f 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    72e6:	2200      	movs	r2, #0
    72e8:	4668      	mov	r0, sp
    72ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
    72ec:	f006 fbe0 	bl	dab0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    72f0:	2200      	movs	r2, #0
    72f2:	2101      	movs	r1, #1
    72f4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    72f6:	f006 fc55 	bl	dba4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    72fa:	2204      	movs	r2, #4
    72fc:	4668      	mov	r0, sp
    72fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7300:	f006 fbd6 	bl	dab0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    7304:	2200      	movs	r2, #0
    7306:	4611      	mov	r1, r2
    7308:	6b60      	ldr	r0, [r4, #52]	; 0x34
    730a:	f006 fc4b 	bl	dba4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    730e:	4630      	mov	r0, r6
    7310:	e7c8      	b.n	72a4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    7312:	0000      	.short	0x0000
    7314:	20000294 	.word	0x20000294

00007318 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    7318:	7801      	ldrb	r1, [r0, #0]
    731a:	b171      	cbz	r1, 733a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    731c:	7841      	ldrb	r1, [r0, #1]
    731e:	b161      	cbz	r1, 733a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    7320:	8841      	ldrh	r1, [r0, #2]
    7322:	291b      	cmp	r1, #27
    7324:	d309      	bcc.n	733a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    7326:	8881      	ldrh	r1, [r0, #4]
    7328:	291b      	cmp	r1, #27
    732a:	d306      	bcc.n	733a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    732c:	4904      	ldr	r1, [pc, #16]	; (7340 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    732e:	6802      	ldr	r2, [r0, #0]
    7330:	600a      	str	r2, [r1, #0]
    7332:	8880      	ldrh	r0, [r0, #4]
    7334:	8088      	strh	r0, [r1, #4]
    7336:	2000      	movs	r0, #0
    7338:	4770      	bx	lr
    733a:	2012      	movs	r0, #18
    733c:	4770      	bx	lr
    733e:	0000      	.short	0x0000
    7340:	200012c8 	.word	0x200012c8

00007344 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    7344:	6800      	ldr	r0, [r0, #0]
    7346:	f240 41e2 	movw	r1, #1250	; 0x4e2
    734a:	4288      	cmp	r0, r1
    734c:	d303      	bcc.n	7356 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    734e:	4903      	ldr	r1, [pc, #12]	; (735c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    7350:	6088      	str	r0, [r1, #8]
    7352:	2000      	movs	r0, #0
    7354:	4770      	bx	lr
    7356:	2012      	movs	r0, #18
    7358:	4770      	bx	lr
    735a:	0000      	.short	0x0000
    735c:	200012c8 	.word	0x200012c8

00007360 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    7360:	4a03      	ldr	r2, [pc, #12]	; (7370 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    7362:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
    7366:	6001      	str	r1, [r0, #0]
    7368:	6042      	str	r2, [r0, #4]
    736a:	2000      	movs	r0, #0
    736c:	4770      	bx	lr
    736e:	0000      	.short	0x0000
    7370:	000078bc 	.word	0x000078bc

00007374 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    7374:	b50e      	push	{r1, r2, r3, lr}
    7376:	8800      	ldrh	r0, [r0, #0]
    7378:	4669      	mov	r1, sp
    737a:	f006 fd56 	bl	de2a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    737e:	b960      	cbnz	r0, 739a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
    7380:	9801      	ldr	r0, [sp, #4]
    7382:	f009 f95b 	bl	1063c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
    7386:	b140      	cbz	r0, 739a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
    7388:	9801      	ldr	r0, [sp, #4]
    738a:	4601      	mov	r1, r0
    738c:	f890 2142 	ldrb.w	r2, [r0, #322]	; 0x142
    7390:	3080      	adds	r0, #128	; 0x80
    7392:	f501 71a1 	add.w	r1, r1, #322	; 0x142
    7396:	b962      	cbnz	r2, 73b2 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
    7398:	e001      	b.n	739e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2a>
    739a:	2002      	movs	r0, #2
    739c:	bd0e      	pop	{r1, r2, r3, pc}
    739e:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
    73a2:	f88d 2008 	strb.w	r2, [sp, #8]
    73a6:	9a02      	ldr	r2, [sp, #8]
    73a8:	9202      	str	r2, [sp, #8]
    73aa:	f89d 3008 	ldrb.w	r3, [sp, #8]
    73ae:	2201      	movs	r2, #1
    73b0:	b10b      	cbz	r3, 73b6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
    73b2:	203a      	movs	r0, #58	; 0x3a
    73b4:	bd0e      	pop	{r1, r2, r3, pc}
    73b6:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
    73ba:	079b      	lsls	r3, r3, #30
    73bc:	d006      	beq.n	73cc <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>
    73be:	2202      	movs	r2, #2
    73c0:	4905      	ldr	r1, [pc, #20]	; (73d8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x64>)
    73c2:	305e      	adds	r0, #94	; 0x5e
    73c4:	f007 f904 	bl	e5d0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    73c8:	2000      	movs	r0, #0
    73ca:	bd0e      	pop	{r1, r2, r3, pc}
    73cc:	700a      	strb	r2, [r1, #0]
    73ce:	4668      	mov	r0, sp
    73d0:	f007 f8be 	bl	e550 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    73d4:	e7f8      	b.n	73c8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x54>
    73d6:	0000      	.short	0x0000
    73d8:	0000eb45 	.word	0x0000eb45

000073dc <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ>:
    73dc:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    73e0:	4613      	mov	r3, r2
    73e2:	4a33      	ldr	r2, [pc, #204]	; (74b0 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xd4>)
    73e4:	460f      	mov	r7, r1
    73e6:	f8b0 1054 	ldrh.w	r1, [r0, #84]	; 0x54
    73ea:	8814      	ldrh	r4, [r2, #0]
    73ec:	f8b0 6052 	ldrh.w	r6, [r0, #82]	; 0x52
    73f0:	428c      	cmp	r4, r1
    73f2:	d200      	bcs.n	73f6 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x1a>
    73f4:	4621      	mov	r1, r4
    73f6:	4688      	mov	r8, r1
    73f8:	8891      	ldrh	r1, [r2, #4]
    73fa:	42b1      	cmp	r1, r6
    73fc:	d200      	bcs.n	7400 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x24>
    73fe:	460e      	mov	r6, r1
    7400:	8851      	ldrh	r1, [r2, #2]
    7402:	f640 0448 	movw	r4, #2120	; 0x848
    7406:	42a1      	cmp	r1, r4
    7408:	d300      	bcc.n	740c <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x30>
    740a:	4621      	mov	r1, r4
    740c:	88d5      	ldrh	r5, [r2, #6]
    740e:	42a5      	cmp	r5, r4
    7410:	d300      	bcc.n	7414 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x38>
    7412:	4625      	mov	r5, r4
    7414:	42a1      	cmp	r1, r4
    7416:	d200      	bcs.n	741a <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x3e>
    7418:	460c      	mov	r4, r1
    741a:	f44f 72a4 	mov.w	r2, #328	; 0x148
    741e:	2e1b      	cmp	r6, #27
    7420:	d001      	beq.n	7426 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x4a>
    7422:	4295      	cmp	r5, r2
    7424:	d104      	bne.n	7430 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x54>
    7426:	f1b8 0f1b 	cmp.w	r8, #27
    742a:	d03e      	beq.n	74aa <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xce>
    742c:	4294      	cmp	r4, r2
    742e:	d03c      	beq.n	74aa <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xce>
    7430:	466a      	mov	r2, sp
    7432:	4619      	mov	r1, r3
    7434:	f009 f8a9 	bl	1058a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    7438:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    743c:	4641      	mov	r1, r8
    743e:	4540      	cmp	r0, r8
    7440:	d900      	bls.n	7444 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x68>
    7442:	4608      	mov	r0, r1
    7444:	80f8      	strh	r0, [r7, #6]
    7446:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    744a:	42a1      	cmp	r1, r4
    744c:	d800      	bhi.n	7450 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x74>
    744e:	460c      	mov	r4, r1
    7450:	813c      	strh	r4, [r7, #8]
    7452:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    7456:	42b1      	cmp	r1, r6
    7458:	d800      	bhi.n	745c <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x80>
    745a:	460e      	mov	r6, r1
    745c:	807e      	strh	r6, [r7, #2]
    745e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7462:	42a9      	cmp	r1, r5
    7464:	d800      	bhi.n	7468 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x8c>
    7466:	460d      	mov	r5, r1
    7468:	80bd      	strh	r5, [r7, #4]
    746a:	21ff      	movs	r1, #255	; 0xff
    746c:	7039      	strb	r1, [r7, #0]
    746e:	381b      	subs	r0, #27
    7470:	28e0      	cmp	r0, #224	; 0xe0
    7472:	d902      	bls.n	747a <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x9e>
    7474:	f44f 61b6 	mov.w	r1, #1456	; 0x5b0
    7478:	e014      	b.n	74a4 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xc8>
    747a:	3e1b      	subs	r6, #27
    747c:	2ee0      	cmp	r6, #224	; 0xe0
    747e:	d902      	bls.n	7486 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xaa>
    7480:	f240 51b2 	movw	r1, #1458	; 0x5b2
    7484:	e00e      	b.n	74a4 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xc8>
    7486:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    748a:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    748e:	4284      	cmp	r4, r0
    7490:	d902      	bls.n	7498 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xbc>
    7492:	f240 51b4 	movw	r1, #1460	; 0x5b4
    7496:	e005      	b.n	74a4 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xc8>
    7498:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
    749c:	4285      	cmp	r5, r0
    749e:	d904      	bls.n	74aa <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xce>
    74a0:	f240 51b6 	movw	r1, #1462	; 0x5b6
    74a4:	2039      	movs	r0, #57	; 0x39
    74a6:	f7f9 fe5d 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    74aa:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    74ae:	0000      	.short	0x0000
    74b0:	2000029c 	.word	0x2000029c

000074b4 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A>:
    74b4:	b570      	push	{r4, r5, r6, lr}
    74b6:	b086      	sub	sp, #24
    74b8:	4604      	mov	r4, r0
    74ba:	f000 fa9d 	bl	79f8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    74be:	0940      	lsrs	r0, r0, #5
    74c0:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    74c4:	4e2d      	ldr	r6, [pc, #180]	; (757c <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc8>)
    74c6:	07c0      	lsls	r0, r0, #31
    74c8:	f104 052c 	add.w	r5, r4, #44	; 0x2c
    74cc:	d002      	beq.n	74d4 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x20>
    74ce:	8871      	ldrh	r1, [r6, #2]
    74d0:	88b0      	ldrh	r0, [r6, #4]
    74d2:	e001      	b.n	74d8 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x24>
    74d4:	211b      	movs	r1, #27
    74d6:	4608      	mov	r0, r1
    74d8:	84e9      	strh	r1, [r5, #38]	; 0x26
    74da:	8528      	strh	r0, [r5, #40]	; 0x28
    74dc:	f000 fa8c 	bl	79f8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    74e0:	0788      	lsls	r0, r1, #30
    74e2:	f04f 0501 	mov.w	r5, #1
    74e6:	d505      	bpl.n	74f4 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x40>
    74e8:	f88d 5000 	strb.w	r5, [sp]
    74ec:	4668      	mov	r0, sp
    74ee:	9401      	str	r4, [sp, #4]
    74f0:	f7ff fe08 	bl	7104 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    74f4:	68b0      	ldr	r0, [r6, #8]
    74f6:	62e0      	str	r0, [r4, #44]	; 0x2c
    74f8:	f641 514c 	movw	r1, #7500	; 0x1d4c
    74fc:	6121      	str	r1, [r4, #16]
    74fe:	8821      	ldrh	r1, [r4, #0]
    7500:	f8ad 1004 	strh.w	r1, [sp, #4]
    7504:	7bb1      	ldrb	r1, [r6, #14]
    7506:	f88d 1006 	strb.w	r1, [sp, #6]
    750a:	7bf1      	ldrb	r1, [r6, #15]
    750c:	f88d 1007 	strb.w	r1, [sp, #7]
    7510:	8a31      	ldrh	r1, [r6, #16]
    7512:	f8ad 1008 	strh.w	r1, [sp, #8]
    7516:	a904      	add	r1, sp, #16
    7518:	9100      	str	r1, [sp, #0]
    751a:	4628      	mov	r0, r5
    751c:	ab03      	add	r3, sp, #12
    751e:	aa01      	add	r2, sp, #4
    7520:	4621      	mov	r1, r4
    7522:	f009 f868 	bl	105f6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
    7526:	b138      	cbz	r0, 7538 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x84>
    7528:	8820      	ldrh	r0, [r4, #0]
    752a:	2100      	movs	r1, #0
    752c:	f7fa f9ea 	bl	1904 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    7530:	b308      	cbz	r0, 7576 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc2>
    7532:	f240 517d 	movw	r1, #1405	; 0x57d
    7536:	e01b      	b.n	7570 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xbc>
    7538:	f89d 000c 	ldrb.w	r0, [sp, #12]
    753c:	f88d 0014 	strb.w	r0, [sp, #20]
    7540:	f89d 0010 	ldrb.w	r0, [sp, #16]
    7544:	f88d 0015 	strb.w	r0, [sp, #21]
    7548:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    754c:	f8ad 0016 	strh.w	r0, [sp, #22]
    7550:	a905      	add	r1, sp, #20
    7552:	4620      	mov	r0, r4
    7554:	f006 fd26 	bl	dfa4 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    7558:	7870      	ldrb	r0, [r6, #1]
    755a:	9000      	str	r0, [sp, #0]
    755c:	7833      	ldrb	r3, [r6, #0]
    755e:	88b2      	ldrh	r2, [r6, #4]
    7560:	8871      	ldrh	r1, [r6, #2]
    7562:	8820      	ldrh	r0, [r4, #0]
    7564:	f7fa fa00 	bl	1968 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    7568:	2800      	cmp	r0, #0
    756a:	d005      	beq.n	7578 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc4>
    756c:	f44f 61b1 	mov.w	r1, #1416	; 0x588
    7570:	2039      	movs	r0, #57	; 0x39
    7572:	f7f9 fdf7 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7576:	2009      	movs	r0, #9
    7578:	b006      	add	sp, #24
    757a:	bd70      	pop	{r4, r5, r6, pc}
    757c:	200012c8 	.word	0x200012c8

00007580 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>:
    7580:	b510      	push	{r4, lr}
    7582:	2005      	movs	r0, #5
    7584:	f000 fa2c 	bl	79e0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    7588:	f7fd ff84 	bl	5494 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    758c:	4902      	ldr	r1, [pc, #8]	; (7598 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x18>)
    758e:	4801      	ldr	r0, [pc, #4]	; (7594 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x14>)
    7590:	6048      	str	r0, [r1, #4]
    7592:	bd10      	pop	{r4, pc}
    7594:	000073dd 	.word	0x000073dd
    7598:	20000294 	.word	0x20000294
    759c:	b51c      	push	{r2, r3, r4, lr}
    759e:	4909      	ldr	r1, [pc, #36]	; (75c4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x44>)
    75a0:	e9d1 0100 	ldrd	r0, r1, [r1]
    75a4:	e9cd 0100 	strd	r0, r1, [sp]
    75a8:	e005      	b.n	75b6 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    75aa:	9800      	ldr	r0, [sp, #0]
    75ac:	f007 fdd4 	bl	f158 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    75b0:	b108      	cbz	r0, 75b6 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    75b2:	2001      	movs	r0, #1
    75b4:	bd1c      	pop	{r2, r3, r4, pc}
    75b6:	4668      	mov	r0, sp
    75b8:	f7fa f954 	bl	1864 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    75bc:	2800      	cmp	r0, #0
    75be:	d0f4      	beq.n	75aa <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x2a>
    75c0:	2000      	movs	r0, #0
    75c2:	bd1c      	pop	{r2, r3, r4, pc}
    75c4:	000078bc 	.word	0x000078bc
    75c8:	b510      	push	{r4, lr}
    75ca:	480d      	ldr	r0, [pc, #52]	; (7600 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x80>)
    75cc:	2100      	movs	r1, #0
    75ce:	4b0d      	ldr	r3, [pc, #52]	; (7604 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x84>)
    75d0:	74c1      	strb	r1, [r0, #19]
    75d2:	8281      	strh	r1, [r0, #20]
    75d4:	221b      	movs	r2, #27
    75d6:	801a      	strh	r2, [r3, #0]
    75d8:	f44f 74a4 	mov.w	r4, #328	; 0x148
    75dc:	805c      	strh	r4, [r3, #2]
    75de:	809a      	strh	r2, [r3, #4]
    75e0:	80dc      	strh	r4, [r3, #6]
    75e2:	7381      	strb	r1, [r0, #14]
    75e4:	73c1      	strb	r1, [r0, #15]
    75e6:	2303      	movs	r3, #3
    75e8:	7003      	strb	r3, [r0, #0]
    75ea:	2302      	movs	r3, #2
    75ec:	7043      	strb	r3, [r0, #1]
    75ee:	8042      	strh	r2, [r0, #2]
    75f0:	8082      	strh	r2, [r0, #4]
    75f2:	f640 62a6 	movw	r2, #3750	; 0xea6
    75f6:	6082      	str	r2, [r0, #8]
    75f8:	7481      	strb	r1, [r0, #18]
    75fa:	7301      	strb	r1, [r0, #12]
    75fc:	bd10      	pop	{r4, pc}
    75fe:	0000      	.short	0x0000
    7600:	200012c8 	.word	0x200012c8
    7604:	2000029c 	.word	0x2000029c
    7608:	b510      	push	{r4, lr}
    760a:	2101      	movs	r1, #1
    760c:	2000      	movs	r0, #0
    760e:	f7fa f8d7 	bl	17c0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7612:	0004      	movs	r4, r0
    7614:	d10a      	bne.n	762c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xac>
    7616:	2101      	movs	r1, #1
    7618:	f7fa f89a 	bl	1750 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    761c:	0004      	movs	r4, r0
    761e:	d007      	beq.n	7630 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xb0>
    7620:	4806      	ldr	r0, [pc, #24]	; (763c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0xbc>)
    7622:	f990 1000 	ldrsb.w	r1, [r0]
    7626:	4620      	mov	r0, r4
    7628:	f007 fb6b 	bl	ed02 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    762c:	4620      	mov	r0, r4
    762e:	bd10      	pop	{r4, pc}
    7630:	f240 3113 	movw	r1, #787	; 0x313
    7634:	2039      	movs	r0, #57	; 0x39
    7636:	f7f9 fd95 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    763a:	0000      	.short	0x0000
    763c:	20000294 	.word	0x20000294

00007640 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    7640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7642:	460c      	mov	r4, r1
    7644:	4605      	mov	r5, r0
    7646:	f007 fbca 	bl	edde <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    764a:	b158      	cbz	r0, 7664 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x24>
    764c:	4628      	mov	r0, r5
    764e:	f007 fbb9 	bl	edc4 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    7652:	b148      	cbz	r0, 7668 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    7654:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    7658:	2112      	movs	r1, #18
    765a:	b108      	cbz	r0, 7660 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    765c:	2880      	cmp	r0, #128	; 0x80
    765e:	d903      	bls.n	7668 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    7660:	4608      	mov	r0, r1
    7662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7664:	2142      	movs	r1, #66	; 0x42
    7666:	e7fb      	b.n	7660 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    7668:	4628      	mov	r0, r5
    766a:	f007 fb9c 	bl	eda6 <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>
    766e:	b120      	cbz	r0, 767a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    7670:	4628      	mov	r0, r5
    7672:	f007 fb07 	bl	ec84 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    7676:	b110      	cbz	r0, 767e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3e>
    7678:	e005      	b.n	7686 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x46>
    767a:	210c      	movs	r1, #12
    767c:	e7f0      	b.n	7660 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    767e:	4628      	mov	r0, r5
    7680:	f007 fb9a 	bl	edb8 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    7684:	b120      	cbz	r0, 7690 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x50>
    7686:	4628      	mov	r0, r5
    7688:	f007 fd66 	bl	f158 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    768c:	b930      	cbnz	r0, 769c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x5c>
    768e:	e001      	b.n	7694 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x54>
    7690:	2012      	movs	r0, #18
    7692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7694:	4628      	mov	r0, r5
    7696:	f007 fb10 	bl	ecba <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    769a:	b108      	cbz	r0, 76a0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x60>
    769c:	200c      	movs	r0, #12
    769e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    76a0:	4628      	mov	r0, r5
    76a2:	f7fc fa0b 	bl	3abc <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    76a6:	f8b4 6001 	ldrh.w	r6, [r4, #1]
    76aa:	f242 7010 	movw	r0, #10000	; 0x2710
    76ae:	4346      	muls	r6, r0
    76b0:	78e1      	ldrb	r1, [r4, #3]
    76b2:	4628      	mov	r0, r5
    76b4:	f007 fb6e 	bl	ed94 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    76b8:	4628      	mov	r0, r5
    76ba:	f007 fb7f 	bl	edbc <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    76be:	b1a8      	cbz	r0, 76ec <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xac>
    76c0:	2100      	movs	r1, #0
    76c2:	4668      	mov	r0, sp
    76c4:	f7fa f8f0 	bl	18a8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    76c8:	0004      	movs	r4, r0
    76ca:	d019      	beq.n	7700 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc0>
    76cc:	2100      	movs	r1, #0
    76ce:	f7fb fae7 	bl	2ca0 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    76d2:	f8bd 0000 	ldrh.w	r0, [sp]
    76d6:	8020      	strh	r0, [r4, #0]
    76d8:	4621      	mov	r1, r4
    76da:	4628      	mov	r0, r5
    76dc:	f007 fb96 	bl	ee0c <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    76e0:	4628      	mov	r0, r5
    76e2:	f007 fb73 	bl	edcc <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    76e6:	b168      	cbz	r0, 7704 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc4>
    76e8:	2001      	movs	r0, #1
    76ea:	e00e      	b.n	770a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xca>
    76ec:	4632      	mov	r2, r6
    76ee:	2100      	movs	r1, #0
    76f0:	4628      	mov	r0, r5
    76f2:	f7fd f921 	bl	4938 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    76f6:	2800      	cmp	r0, #0
    76f8:	d0d1      	beq.n	769e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x5e>
    76fa:	f241 7168 	movw	r1, #5992	; 0x1768
    76fe:	e012      	b.n	7726 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe6>
    7700:	200d      	movs	r0, #13
    7702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7704:	4628      	mov	r0, r5
    7706:	f007 fb7f 	bl	ee08 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    770a:	4601      	mov	r1, r0
    770c:	4620      	mov	r0, r4
    770e:	f7ff fed1 	bl	74b4 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A>
    7712:	2800      	cmp	r0, #0
    7714:	d1f5      	bne.n	7702 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    7716:	4632      	mov	r2, r6
    7718:	4621      	mov	r1, r4
    771a:	4628      	mov	r0, r5
    771c:	f7fd f90c 	bl	4938 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    7720:	b120      	cbz	r0, 772c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xec>
    7722:	f241 718b 	movw	r1, #6027	; 0x178b
    7726:	2039      	movs	r0, #57	; 0x39
    7728:	f7f9 fd1c 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    772c:	4804      	ldr	r0, [pc, #16]	; (7740 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x100>)
    772e:	6843      	ldr	r3, [r0, #4]
    7730:	b123      	cbz	r3, 773c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfc>
    7732:	2200      	movs	r2, #0
    7734:	f504 7199 	add.w	r1, r4, #306	; 0x132
    7738:	4620      	mov	r0, r4
    773a:	4798      	blx	r3
    773c:	2000      	movs	r0, #0
    773e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7740:	20000294 	.word	0x20000294
    7744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7748:	b088      	sub	sp, #32
    774a:	4604      	mov	r4, r0
    774c:	8800      	ldrh	r0, [r0, #0]
    774e:	a906      	add	r1, sp, #24
    7750:	f006 fb6b 	bl	de2a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7754:	2800      	cmp	r0, #0
    7756:	d147      	bne.n	77e8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    7758:	9807      	ldr	r0, [sp, #28]
    775a:	f890 1180 	ldrb.w	r1, [r0, #384]	; 0x180
    775e:	f88d 1008 	strb.w	r1, [sp, #8]
    7762:	9902      	ldr	r1, [sp, #8]
    7764:	9102      	str	r1, [sp, #8]
    7766:	f89d 1008 	ldrb.w	r1, [sp, #8]
    776a:	3080      	adds	r0, #128	; 0x80
    776c:	b101      	cbz	r1, 7770 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x130>
    776e:	2101      	movs	r1, #1
    7770:	f88d 100c 	strb.w	r1, [sp, #12]
    7774:	7b01      	ldrb	r1, [r0, #12]
    7776:	f04f 0800 	mov.w	r8, #0
    777a:	0689      	lsls	r1, r1, #26
    777c:	d502      	bpl.n	7784 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x144>
    777e:	f89d 100c 	ldrb.w	r1, [sp, #12]
    7782:	b149      	cbz	r1, 7798 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x158>
    7784:	f05f 0100 	movs.w	r1, #0
    7788:	f88d 1004 	strb.w	r1, [sp, #4]
    778c:	2105      	movs	r1, #5
    778e:	306c      	adds	r0, #108	; 0x6c
    7790:	f008 f979 	bl	fa86 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
    7794:	b110      	cbz	r0, 779c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x15c>
    7796:	e004      	b.n	77a2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x162>
    7798:	2101      	movs	r1, #1
    779a:	e7f5      	b.n	7788 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x148>
    779c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    77a0:	b308      	cbz	r0, 77e6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a6>
    77a2:	8921      	ldrh	r1, [r4, #8]
    77a4:	88e0      	ldrh	r0, [r4, #6]
    77a6:	f008 fee2 	bl	1056e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    77aa:	2800      	cmp	r0, #0
    77ac:	d11c      	bne.n	77e8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    77ae:	88a1      	ldrh	r1, [r4, #4]
    77b0:	8860      	ldrh	r0, [r4, #2]
    77b2:	f008 fedc 	bl	1056e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    77b6:	2800      	cmp	r0, #0
    77b8:	d116      	bne.n	77e8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    77ba:	8921      	ldrh	r1, [r4, #8]
    77bc:	88e0      	ldrh	r0, [r4, #6]
    77be:	f008 fecc 	bl	1055a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    77c2:	2800      	cmp	r0, #0
    77c4:	d110      	bne.n	77e8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    77c6:	88a1      	ldrh	r1, [r4, #4]
    77c8:	8860      	ldrh	r0, [r4, #2]
    77ca:	f008 fec6 	bl	1055a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    77ce:	0006      	movs	r6, r0
    77d0:	d10a      	bne.n	77e8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    77d2:	9807      	ldr	r0, [sp, #28]
    77d4:	f500 7599 	add.w	r5, r0, #306	; 0x132
    77d8:	27ff      	movs	r7, #255	; 0xff
    77da:	706f      	strb	r7, [r5, #1]
    77dc:	f89d 100c 	ldrb.w	r1, [sp, #12]
    77e0:	b129      	cbz	r1, 77ee <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ae>
    77e2:	263a      	movs	r6, #58	; 0x3a
    77e4:	e02e      	b.n	7844 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x204>
    77e6:	201a      	movs	r0, #26
    77e8:	b008      	add	sp, #32
    77ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    77ee:	4641      	mov	r1, r8
    77f0:	aa03      	add	r2, sp, #12
    77f2:	f008 feca 	bl	1058a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    77f6:	8861      	ldrh	r1, [r4, #2]
    77f8:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    77fc:	4281      	cmp	r1, r0
    77fe:	d200      	bcs.n	7802 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c2>
    7800:	4608      	mov	r0, r1
    7802:	80e8      	strh	r0, [r5, #6]
    7804:	88a1      	ldrh	r1, [r4, #4]
    7806:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    780a:	4281      	cmp	r1, r0
    780c:	d200      	bcs.n	7810 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d0>
    780e:	4608      	mov	r0, r1
    7810:	8128      	strh	r0, [r5, #8]
    7812:	88e2      	ldrh	r2, [r4, #6]
    7814:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    7818:	428a      	cmp	r2, r1
    781a:	d200      	bcs.n	781e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1de>
    781c:	4611      	mov	r1, r2
    781e:	8069      	strh	r1, [r5, #2]
    7820:	8922      	ldrh	r2, [r4, #8]
    7822:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    7826:	428a      	cmp	r2, r1
    7828:	d200      	bcs.n	782c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    782a:	4611      	mov	r1, r2
    782c:	f640 0248 	movw	r2, #2120	; 0x848
    7830:	80a9      	strh	r1, [r5, #4]
    7832:	4291      	cmp	r1, r2
    7834:	d300      	bcc.n	7838 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f8>
    7836:	4611      	mov	r1, r2
    7838:	80a9      	strh	r1, [r5, #4]
    783a:	4290      	cmp	r0, r2
    783c:	d200      	bcs.n	7840 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x200>
    783e:	4602      	mov	r2, r0
    7840:	812a      	strh	r2, [r5, #8]
    7842:	702f      	strb	r7, [r5, #0]
    7844:	f885 8001 	strb.w	r8, [r5, #1]
    7848:	4630      	mov	r0, r6
    784a:	e7cd      	b.n	77e8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    784c:	b51c      	push	{r2, r3, r4, lr}
    784e:	490c      	ldr	r1, [pc, #48]	; (7880 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>)
    7850:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    7854:	e9cd 0100 	strd	r0, r1, [sp]
    7858:	e00a      	b.n	7870 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
    785a:	9c00      	ldr	r4, [sp, #0]
    785c:	4620      	mov	r0, r4
    785e:	f007 fc7b 	bl	f158 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    7862:	b128      	cbz	r0, 7870 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
    7864:	4620      	mov	r0, r4
    7866:	f007 fae0 	bl	ee2a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    786a:	b108      	cbz	r0, 7870 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x230>
    786c:	2001      	movs	r0, #1
    786e:	bd1c      	pop	{r2, r3, r4, pc}
    7870:	4668      	mov	r0, sp
    7872:	f7f9 fff7 	bl	1864 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7876:	2800      	cmp	r0, #0
    7878:	d0ef      	beq.n	785a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x21a>
    787a:	2000      	movs	r0, #0
    787c:	bd1c      	pop	{r2, r3, r4, pc}
    787e:	0000      	.short	0x0000
    7880:	000078bc 	.word	0x000078bc
    7884:	b510      	push	{r4, lr}
    7886:	4604      	mov	r4, r0
    7888:	88c1      	ldrh	r1, [r0, #6]
    788a:	8880      	ldrh	r0, [r0, #4]
    788c:	f008 fe6f 	bl	1056e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    7890:	2800      	cmp	r0, #0
    7892:	d10f      	bne.n	78b4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x274>
    7894:	8861      	ldrh	r1, [r4, #2]
    7896:	8820      	ldrh	r0, [r4, #0]
    7898:	f008 fe69 	bl	1056e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    789c:	2800      	cmp	r0, #0
    789e:	d109      	bne.n	78b4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x274>
    78a0:	4805      	ldr	r0, [pc, #20]	; (78b8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x278>)
    78a2:	88a1      	ldrh	r1, [r4, #4]
    78a4:	8081      	strh	r1, [r0, #4]
    78a6:	8821      	ldrh	r1, [r4, #0]
    78a8:	8001      	strh	r1, [r0, #0]
    78aa:	88e1      	ldrh	r1, [r4, #6]
    78ac:	80c1      	strh	r1, [r0, #6]
    78ae:	8861      	ldrh	r1, [r4, #2]
    78b0:	8041      	strh	r1, [r0, #2]
    78b2:	2000      	movs	r0, #0
    78b4:	bd10      	pop	{r4, pc}
    78b6:	0000      	.short	0x0000
    78b8:	2000029c 	.word	0x2000029c
    78bc:	00000000 	.word	0x00000000
    78c0:	00010000 	.word	0x00010000
    78c4:	00000000 	.word	0x00000000
    78c8:	00010000 	.word	0x00010000
    78cc:	0d10770d 	.word	0x0d10770d
    78d0:	10770059 	.word	0x10770059
    78d4:	00000000 	.word	0x00000000
    78d8:	00010000 	.word	0x00010000
    78dc:	00000000 	.word	0x00000000
    78e0:	00010000 	.word	0x00010000

000078e4 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    78e4:	b510      	push	{r4, lr}
    78e6:	f7fb fc77 	bl	31d8 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    78ea:	4c05      	ldr	r4, [pc, #20]	; (7900 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    78ec:	6860      	ldr	r0, [r4, #4]
    78ee:	f008 ff46 	bl	1077e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d0>
    78f2:	f008 fce1 	bl	102b8 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    78f6:	f7fb fe1d 	bl	3534 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    78fa:	2001      	movs	r0, #1
    78fc:	7020      	strb	r0, [r4, #0]
    78fe:	bd10      	pop	{r4, pc}
    7900:	200002a4 	.word	0x200002a4

00007904 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>:
    7904:	4801      	ldr	r0, [pc, #4]	; (790c <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ+0x8>)
    7906:	7800      	ldrb	r0, [r0, #0]
    7908:	4770      	bx	lr
    790a:	0000      	.short	0x0000
    790c:	200002a4 	.word	0x200002a4

00007910 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    7910:	b510      	push	{r4, lr}
    7912:	4c06      	ldr	r4, [pc, #24]	; (792c <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x1c>)
    7914:	68a0      	ldr	r0, [r4, #8]
    7916:	f008 ff32 	bl	1077e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d0>
    791a:	68e0      	ldr	r0, [r4, #12]
    791c:	f008 ff2f 	bl	1077e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d0>
    7920:	f008 fd34 	bl	1038c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    7924:	2000      	movs	r0, #0
    7926:	7020      	strb	r0, [r4, #0]
    7928:	bd10      	pop	{r4, pc}
    792a:	0000      	.short	0x0000
    792c:	200002a4 	.word	0x200002a4

00007930 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    7930:	b510      	push	{r4, lr}
    7932:	4905      	ldr	r1, [pc, #20]	; (7948 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    7934:	4805      	ldr	r0, [pc, #20]	; (794c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    7936:	f008 ff15 	bl	10764 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b6>
    793a:	4804      	ldr	r0, [pc, #16]	; (794c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    793c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7940:	4903      	ldr	r1, [pc, #12]	; (7950 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    7942:	1d00      	adds	r0, r0, #4
    7944:	f008 bf0e 	b.w	10764 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b6>
    7948:	200002b4 	.word	0x200002b4
    794c:	200002a8 	.word	0x200002a8
    7950:	200002bc 	.word	0x200002bc

00007954 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    7954:	b510      	push	{r4, lr}
    7956:	4908      	ldr	r1, [pc, #32]	; (7978 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    7958:	4808      	ldr	r0, [pc, #32]	; (797c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    795a:	f008 ff03 	bl	10764 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b6>
    795e:	4807      	ldr	r0, [pc, #28]	; (797c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    7960:	4907      	ldr	r1, [pc, #28]	; (7980 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    7962:	1d00      	adds	r0, r0, #4
    7964:	f008 fefe 	bl	10764 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b6>
    7968:	4804      	ldr	r0, [pc, #16]	; (797c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    796a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    796e:	4905      	ldr	r1, [pc, #20]	; (7984 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    7970:	3008      	adds	r0, #8
    7972:	f008 bef7 	b.w	10764 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b6>
    7976:	0000      	.short	0x0000
    7978:	200002cc 	.word	0x200002cc
    797c:	200002a8 	.word	0x200002a8
    7980:	200002d4 	.word	0x200002d4
    7984:	200002c4 	.word	0x200002c4

00007988 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    7988:	4801      	ldr	r0, [pc, #4]	; (7990 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    798a:	7840      	ldrb	r0, [r0, #1]
    798c:	4770      	bx	lr
    798e:	0000      	.short	0x0000
    7990:	200002a4 	.word	0x200002a4
    7994:	b510      	push	{r4, lr}
    7996:	f7fc f9b3 	bl	3d00 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    799a:	f7fd f87d 	bl	4a98 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    799e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    79a2:	4801      	ldr	r0, [pc, #4]	; (79a8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x20>)
    79a4:	f7fc b992 	b.w	3ccc <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    79a8:	20001560 	.word	0x20001560
    79ac:	490a      	ldr	r1, [pc, #40]	; (79d8 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    79ae:	b510      	push	{r4, lr}
    79b0:	2001      	movs	r0, #1
    79b2:	7048      	strb	r0, [r1, #1]
    79b4:	f7fc f9d4 	bl	3d60 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    79b8:	f7fd fd84 	bl	54c4 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    79bc:	f006 f973 	bl	dca6 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    79c0:	4906      	ldr	r1, [pc, #24]	; (79dc <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    79c2:	f5a1 7081 	sub.w	r0, r1, #258	; 0x102
    79c6:	f7fa fb7f 	bl	20c8 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY>
    79ca:	2000      	movs	r0, #0
    79cc:	f005 ffb9 	bl	d942 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    79d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    79d4:	f7fb bc06 	b.w	31e4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    79d8:	200002a4 	.word	0x200002a4
    79dc:	20001662 	.word	0x20001662

000079e0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    79e0:	4a04      	ldr	r2, [pc, #16]	; (79f4 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    79e2:	08c1      	lsrs	r1, r0, #3
    79e4:	f000 0307 	and.w	r3, r0, #7
    79e8:	2001      	movs	r0, #1
    79ea:	4098      	lsls	r0, r3
    79ec:	5c53      	ldrb	r3, [r2, r1]
    79ee:	4303      	orrs	r3, r0
    79f0:	5453      	strb	r3, [r2, r1]
    79f2:	4770      	bx	lr
    79f4:	20000020 	.word	0x20000020

000079f8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    79f8:	4901      	ldr	r1, [pc, #4]	; (7a00 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    79fa:	e9d1 0100 	ldrd	r0, r1, [r1]
    79fe:	4770      	bx	lr
    7a00:	20000020 	.word	0x20000020

00007a04 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    7a04:	4806      	ldr	r0, [pc, #24]	; (7a20 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    7a06:	8801      	ldrh	r1, [r0, #0]
    7a08:	7900      	ldrb	r0, [r0, #4]
    7a0a:	0602      	lsls	r2, r0, #24
    7a0c:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    7a10:	f000 0001 	and.w	r0, r0, #1
    7a14:	1800      	adds	r0, r0, r0
    7a16:	b2c0      	uxtb	r0, r0
    7a18:	f040 0001 	orr.w	r0, r0, #1
    7a1c:	4770      	bx	lr
    7a1e:	0000      	.short	0x0000
    7a20:	20000020 	.word	0x20000020

00007a24 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    7a24:	b510      	push	{r4, lr}
    7a26:	f004 fd2b 	bl	c480 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    7a2a:	2200      	movs	r2, #0
    7a2c:	4b08      	ldr	r3, [pc, #32]	; (7a50 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    7a2e:	4611      	mov	r1, r2
    7a30:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    7a34:	4284      	cmp	r4, r0
    7a36:	d303      	bcc.n	7a40 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    7a38:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    7a3c:	7882      	ldrb	r2, [r0, #2]
    7a3e:	e003      	b.n	7a48 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    7a40:	1c49      	adds	r1, r1, #1
    7a42:	b2c9      	uxtb	r1, r1
    7a44:	290c      	cmp	r1, #12
    7a46:	d3f3      	bcc.n	7a30 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    7a48:	4802      	ldr	r0, [pc, #8]	; (7a54 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    7a4a:	7002      	strb	r2, [r0, #0]
    7a4c:	bd10      	pop	{r4, pc}
    7a4e:	0000      	.short	0x0000
    7a50:	000107d0 	.word	0x000107d0
    7a54:	20000373 	.word	0x20000373

00007a58 <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA>:
    7a58:	b570      	push	{r4, r5, r6, lr}
    7a5a:	6845      	ldr	r5, [r0, #4]
    7a5c:	f505 76d3 	add.w	r6, r5, #422	; 0x1a6
    7a60:	8828      	ldrh	r0, [r5, #0]
    7a62:	f826 0902 	strh.w	r0, [r6], #-2
    7a66:	f505 7498 	add.w	r4, r5, #304	; 0x130
    7a6a:	7031      	strb	r1, [r6, #0]
    7a6c:	f895 006a 	ldrb.w	r0, [r5, #106]	; 0x6a
    7a70:	f008 fee2 	bl	10838 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x14>
    7a74:	7130      	strb	r0, [r6, #4]
    7a76:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    7a7a:	f008 fedd 	bl	10838 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x14>
    7a7e:	f806 0f05 	strb.w	r0, [r6, #5]!
    7a82:	2202      	movs	r2, #2
    7a84:	4903      	ldr	r1, [pc, #12]	; (7a94 <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA+0x3c>)
    7a86:	f1a6 000f 	sub.w	r0, r6, #15
    7a8a:	f006 fda1 	bl	e5d0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    7a8e:	2000      	movs	r0, #0
    7a90:	7320      	strb	r0, [r4, #12]
    7a92:	bd70      	pop	{r4, r5, r6, pc}
    7a94:	00010825 	.word	0x00010825

00007a98 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY>:
    7a98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7a9a:	460e      	mov	r6, r1
    7a9c:	4604      	mov	r4, r0
    7a9e:	f7fb fa63 	bl	2f68 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    7aa2:	2500      	movs	r5, #0
    7aa4:	b320      	cbz	r0, 7af0 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x58>
    7aa6:	f5a4 74c6 	sub.w	r4, r4, #396	; 0x18c
    7aaa:	a902      	add	r1, sp, #8
    7aac:	8820      	ldrh	r0, [r4, #0]
    7aae:	f8ad 0000 	strh.w	r0, [sp]
    7ab2:	f006 f9ba 	bl	de2a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7ab6:	b108      	cbz	r0, 7abc <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x24>
    7ab8:	2126      	movs	r1, #38	; 0x26
    7aba:	e010      	b.n	7ade <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x46>
    7abc:	9803      	ldr	r0, [sp, #12]
    7abe:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    7ac2:	f88d 1002 	strb.w	r1, [sp, #2]
    7ac6:	7841      	ldrb	r1, [r0, #1]
    7ac8:	f88d 1003 	strb.w	r1, [sp, #3]
    7acc:	8840      	ldrh	r0, [r0, #2]
    7ace:	f8ad 0004 	strh.w	r0, [sp, #4]
    7ad2:	2102      	movs	r1, #2
    7ad4:	4668      	mov	r0, sp
    7ad6:	f008 fbf1 	bl	102bc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    7ada:	b118      	cbz	r0, 7ae4 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4c>
    7adc:	213c      	movs	r1, #60	; 0x3c
    7ade:	207e      	movs	r0, #126	; 0x7e
    7ae0:	f7f9 fb40 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ae4:	f8cd 5000 	str.w	r5, [sp]
    7ae8:	f8bd 0000 	ldrh.w	r0, [sp]
    7aec:	b004      	add	sp, #16
    7aee:	bd70      	pop	{r4, r5, r6, pc}
    7af0:	201c      	movs	r0, #28
    7af2:	7030      	strb	r0, [r6, #0]
    7af4:	7075      	strb	r5, [r6, #1]
    7af6:	f8d4 000a 	ldr.w	r0, [r4, #10]
    7afa:	6070      	str	r0, [r6, #4]
    7afc:	4801      	ldr	r0, [pc, #4]	; (7b04 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x6c>)
    7afe:	6800      	ldr	r0, [r0, #0]
    7b00:	9000      	str	r0, [sp, #0]
    7b02:	e7f1      	b.n	7ae8 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x50>
    7b04:	00007b08 	.word	0x00007b08
    7b08:	00000004 	.word	0x00000004

00007b0c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    7b0c:	b570      	push	{r4, r5, r6, lr}
    7b0e:	4605      	mov	r5, r0
    7b10:	4616      	mov	r6, r2
    7b12:	460c      	mov	r4, r1
    7b14:	2002      	movs	r0, #2
    7b16:	f000 f9b7 	bl	7e88 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7b1a:	4906      	ldr	r1, [pc, #24]	; (7b34 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    7b1c:	2001      	movs	r0, #1
    7b1e:	1ef6      	subs	r6, r6, #3
    7b20:	7008      	strb	r0, [r1, #0]
    7b22:	4805      	ldr	r0, [pc, #20]	; (7b38 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    7b24:	6006      	str	r6, [r0, #0]
    7b26:	4804      	ldr	r0, [pc, #16]	; (7b38 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    7b28:	3808      	subs	r0, #8
    7b2a:	6005      	str	r5, [r0, #0]
    7b2c:	1f00      	subs	r0, r0, #4
    7b2e:	6004      	str	r4, [r0, #0]
    7b30:	bd70      	pop	{r4, r5, r6, pc}
    7b32:	0000      	.short	0x0000
    7b34:	20000374 	.word	0x20000374
    7b38:	4000f510 	.word	0x4000f510

00007b3c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    7b3c:	b510      	push	{r4, lr}
    7b3e:	4c0c      	ldr	r4, [pc, #48]	; (7b70 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    7b40:	7820      	ldrb	r0, [r4, #0]
    7b42:	b180      	cbz	r0, 7b66 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    7b44:	490b      	ldr	r1, [pc, #44]	; (7b74 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    7b46:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7b4a:	6008      	str	r0, [r1, #0]
    7b4c:	f000 f86a 	bl	7c24 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    7b50:	2100      	movs	r1, #0
    7b52:	b120      	cbz	r0, 7b5e <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    7b54:	2001      	movs	r0, #1
    7b56:	7060      	strb	r0, [r4, #1]
    7b58:	4807      	ldr	r0, [pc, #28]	; (7b78 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    7b5a:	6800      	ldr	r0, [r0, #0]
    7b5c:	e001      	b.n	7b62 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    7b5e:	7061      	strb	r1, [r4, #1]
    7b60:	2010      	movs	r0, #16
    7b62:	70a0      	strb	r0, [r4, #2]
    7b64:	7021      	strb	r1, [r4, #0]
    7b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7b6a:	2000      	movs	r0, #0
    7b6c:	f000 b98c 	b.w	7e88 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7b70:	20000374 	.word	0x20000374
    7b74:	4001f508 	.word	0x4001f508
    7b78:	4000f400 	.word	0x4000f400

00007b7c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    7b7c:	b510      	push	{r4, lr}
    7b7e:	2002      	movs	r0, #2
    7b80:	f000 f982 	bl	7e88 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7b84:	4904      	ldr	r1, [pc, #16]	; (7b98 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    7b86:	2001      	movs	r0, #1
    7b88:	7008      	strb	r0, [r1, #0]
    7b8a:	f000 f859 	bl	7c40 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    7b8e:	4903      	ldr	r1, [pc, #12]	; (7b9c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    7b90:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7b94:	6008      	str	r0, [r1, #0]
    7b96:	bd10      	pop	{r4, pc}
    7b98:	20000374 	.word	0x20000374
    7b9c:	4001f504 	.word	0x4001f504

00007ba0 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    7ba0:	4803      	ldr	r0, [pc, #12]	; (7bb0 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    7ba2:	2100      	movs	r1, #0
    7ba4:	7001      	strb	r1, [r0, #0]
    7ba6:	7041      	strb	r1, [r0, #1]
    7ba8:	2110      	movs	r1, #16
    7baa:	7081      	strb	r1, [r0, #2]
    7bac:	4770      	bx	lr
    7bae:	0000      	.short	0x0000
    7bb0:	20000374 	.word	0x20000374

00007bb4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    7bb4:	4807      	ldr	r0, [pc, #28]	; (7bd4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    7bb6:	b510      	push	{r4, lr}
    7bb8:	7801      	ldrb	r1, [r0, #0]
    7bba:	b141      	cbz	r1, 7bce <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    7bbc:	f000 f832 	bl	7c24 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    7bc0:	b118      	cbz	r0, 7bca <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    7bc2:	4805      	ldr	r0, [pc, #20]	; (7bd8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    7bc4:	6800      	ldr	r0, [r0, #0]
    7bc6:	b2c0      	uxtb	r0, r0
    7bc8:	bd10      	pop	{r4, pc}
    7bca:	2010      	movs	r0, #16
    7bcc:	bd10      	pop	{r4, pc}
    7bce:	7880      	ldrb	r0, [r0, #2]
    7bd0:	bd10      	pop	{r4, pc}
    7bd2:	0000      	.short	0x0000
    7bd4:	20000374 	.word	0x20000374
    7bd8:	4000f400 	.word	0x4000f400

00007bdc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    7bdc:	4808      	ldr	r0, [pc, #32]	; (7c00 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    7bde:	b510      	push	{r4, lr}
    7be0:	7801      	ldrb	r1, [r0, #0]
    7be2:	b159      	cbz	r1, 7bfc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    7be4:	4807      	ldr	r0, [pc, #28]	; (7c04 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    7be6:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7bea:	b128      	cbz	r0, 7bf8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    7bec:	f000 f80c 	bl	7c08 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    7bf0:	2800      	cmp	r0, #0
    7bf2:	d000      	beq.n	7bf6 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    7bf4:	2001      	movs	r0, #1
    7bf6:	bd10      	pop	{r4, pc}
    7bf8:	2002      	movs	r0, #2
    7bfa:	bd10      	pop	{r4, pc}
    7bfc:	7840      	ldrb	r0, [r0, #1]
    7bfe:	bd10      	pop	{r4, pc}
    7c00:	20000374 	.word	0x20000374
    7c04:	4000f000 	.word	0x4000f000
    7c08:	4805      	ldr	r0, [pc, #20]	; (7c20 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    7c0a:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    7c0e:	b111      	cbz	r1, 7c16 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    7c10:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    7c14:	b108      	cbz	r0, 7c1a <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    7c16:	2000      	movs	r0, #0
    7c18:	4770      	bx	lr
    7c1a:	2001      	movs	r0, #1
    7c1c:	4770      	bx	lr
    7c1e:	0000      	.short	0x0000
    7c20:	4000f000 	.word	0x4000f000
    7c24:	4805      	ldr	r0, [pc, #20]	; (7c3c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    7c26:	b510      	push	{r4, lr}
    7c28:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7c2c:	b120      	cbz	r0, 7c38 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    7c2e:	f7ff ffeb 	bl	7c08 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    7c32:	b108      	cbz	r0, 7c38 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    7c34:	2001      	movs	r0, #1
    7c36:	bd10      	pop	{r4, pc}
    7c38:	2000      	movs	r0, #0
    7c3a:	bd10      	pop	{r4, pc}
    7c3c:	4000f000 	.word	0x4000f000
    7c40:	4804      	ldr	r0, [pc, #16]	; (7c54 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    7c42:	2100      	movs	r1, #0
    7c44:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    7c48:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    7c4c:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    7c50:	4770      	bx	lr
    7c52:	0000      	.short	0x0000
    7c54:	4000f000 	.word	0x4000f000

00007c58 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    7c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7c5c:	4604      	mov	r4, r0
    7c5e:	461e      	mov	r6, r3
    7c60:	4690      	mov	r8, r2
    7c62:	460f      	mov	r7, r1
    7c64:	2001      	movs	r0, #1
    7c66:	f000 f90f 	bl	7e88 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7c6a:	4d1e      	ldr	r5, [pc, #120]	; (7ce4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    7c6c:	481e      	ldr	r0, [pc, #120]	; (7ce8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    7c6e:	f004 0103 	and.w	r1, r4, #3
    7c72:	712e      	strb	r6, [r5, #4]
    7c74:	6800      	ldr	r0, [r0, #0]
    7c76:	0432      	lsls	r2, r6, #16
    7c78:	f361 0007 	bfi	r0, r1, #0, #8
    7c7c:	f366 200f 	bfi	r0, r6, #8, #8
    7c80:	0c00      	lsrs	r0, r0, #16
    7c82:	4e1a      	ldr	r6, [pc, #104]	; (7cec <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    7c84:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    7c88:	4308      	orrs	r0, r1
    7c8a:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    7c8e:	4818      	ldr	r0, [pc, #96]	; (7cf0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    7c90:	6007      	str	r7, [r0, #0]
    7c92:	f008 ff7a 	bl	10b8a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7c96:	b938      	cbnz	r0, 7ca8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    7c98:	4815      	ldr	r0, [pc, #84]	; (7cf0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    7c9a:	3010      	adds	r0, #16
    7c9c:	6801      	ldr	r1, [r0, #0]
    7c9e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    7ca2:	ea41 0108 	orr.w	r1, r1, r8
    7ca6:	6001      	str	r1, [r0, #0]
    7ca8:	f000 f8e4 	bl	7e74 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    7cac:	b10c      	cbz	r4, 7cb2 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    7cae:	2c04      	cmp	r4, #4
    7cb0:	d107      	bne.n	7cc2 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    7cb2:	4811      	ldr	r0, [pc, #68]	; (7cf8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    7cb4:	490d      	ldr	r1, [pc, #52]	; (7cec <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    7cb6:	4a0f      	ldr	r2, [pc, #60]	; (7cf4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    7cb8:	1d09      	adds	r1, r1, #4
    7cba:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    7cbe:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    7cc2:	2001      	movs	r0, #1
    7cc4:	7068      	strb	r0, [r5, #1]
    7cc6:	70ec      	strb	r4, [r5, #3]
    7cc8:	b11c      	cbz	r4, 7cd2 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7cca:	2c01      	cmp	r4, #1
    7ccc:	d001      	beq.n	7cd2 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7cce:	2c02      	cmp	r4, #2
    7cd0:	d106      	bne.n	7ce0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    7cd2:	7028      	strb	r0, [r5, #0]
    7cd4:	2100      	movs	r1, #0
    7cd6:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    7cda:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    7cde:	6030      	str	r0, [r6, #0]
    7ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7ce4:	20000377 	.word	0x20000377
    7ce8:	00007e84 	.word	0x00007e84
    7cec:	4000f000 	.word	0x4000f000
    7cf0:	4000f508 	.word	0x4000f508
    7cf4:	4000f100 	.word	0x4000f100
    7cf8:	4001f088 	.word	0x4001f088

00007cfc <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    7cfc:	b570      	push	{r4, r5, r6, lr}
    7cfe:	4a1c      	ldr	r2, [pc, #112]	; (7d70 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    7d00:	7853      	ldrb	r3, [r2, #1]
    7d02:	b1a3      	cbz	r3, 7d2e <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    7d04:	4b1b      	ldr	r3, [pc, #108]	; (7d74 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    7d06:	6019      	str	r1, [r3, #0]
    7d08:	1d19      	adds	r1, r3, #4
    7d0a:	6008      	str	r0, [r1, #0]
    7d0c:	2501      	movs	r5, #1
    7d0e:	7095      	strb	r5, [r2, #2]
    7d10:	4610      	mov	r0, r2
    7d12:	78d6      	ldrb	r6, [r2, #3]
    7d14:	4b18      	ldr	r3, [pc, #96]	; (7d78 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    7d16:	7800      	ldrb	r0, [r0, #0]
    7d18:	4c18      	ldr	r4, [pc, #96]	; (7d7c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    7d1a:	2100      	movs	r1, #0
    7d1c:	b156      	cbz	r6, 7d34 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    7d1e:	2e04      	cmp	r6, #4
    7d20:	d01b      	beq.n	7d5a <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    7d22:	b308      	cbz	r0, 7d68 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    7d24:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7d28:	0668      	lsls	r0, r5, #25
    7d2a:	6018      	str	r0, [r3, #0]
    7d2c:	bd70      	pop	{r4, r5, r6, pc}
    7d2e:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    7d32:	e01a      	b.n	7d6a <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    7d34:	b178      	cbz	r0, 7d56 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    7d36:	4620      	mov	r0, r4
    7d38:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7d3c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    7d40:	601e      	str	r6, [r3, #0]
    7d42:	1271      	asrs	r1, r6, #9
    7d44:	f008 fda0 	bl	10888 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7d48:	2800      	cmp	r0, #0
    7d4a:	d0ef      	beq.n	7d2c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    7d4c:	6065      	str	r5, [r4, #4]
    7d4e:	480a      	ldr	r0, [pc, #40]	; (7d78 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    7d50:	1d00      	adds	r0, r0, #4
    7d52:	6006      	str	r6, [r0, #0]
    7d54:	bd70      	pop	{r4, r5, r6, pc}
    7d56:	21d5      	movs	r1, #213	; 0xd5
    7d58:	e007      	b.n	7d6a <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    7d5a:	7015      	strb	r5, [r2, #0]
    7d5c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7d60:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    7d64:	6025      	str	r5, [r4, #0]
    7d66:	bd70      	pop	{r4, r5, r6, pc}
    7d68:	21e8      	movs	r1, #232	; 0xe8
    7d6a:	203c      	movs	r0, #60	; 0x3c
    7d6c:	f7f9 f9fa 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d70:	20000377 	.word	0x20000377
    7d74:	4000f50c 	.word	0x4000f50c
    7d78:	4001f504 	.word	0x4001f504
    7d7c:	4000f000 	.word	0x4000f000

00007d80 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    7d80:	b570      	push	{r4, r5, r6, lr}
    7d82:	4d05      	ldr	r5, [pc, #20]	; (7d98 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    7d84:	2400      	movs	r4, #0
    7d86:	7828      	ldrb	r0, [r5, #0]
    7d88:	b110      	cbz	r0, 7d90 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    7d8a:	f000 f873 	bl	7e74 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    7d8e:	702c      	strb	r4, [r5, #0]
    7d90:	706c      	strb	r4, [r5, #1]
    7d92:	70ac      	strb	r4, [r5, #2]
    7d94:	bd70      	pop	{r4, r5, r6, pc}
    7d96:	0000      	.short	0x0000
    7d98:	20000377 	.word	0x20000377

00007d9c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    7d9c:	4802      	ldr	r0, [pc, #8]	; (7da8 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    7d9e:	2100      	movs	r1, #0
    7da0:	7001      	strb	r1, [r0, #0]
    7da2:	7041      	strb	r1, [r0, #1]
    7da4:	7081      	strb	r1, [r0, #2]
    7da6:	4770      	bx	lr
    7da8:	20000377 	.word	0x20000377

00007dac <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    7dac:	480b      	ldr	r0, [pc, #44]	; (7ddc <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    7dae:	b510      	push	{r4, lr}
    7db0:	7800      	ldrb	r0, [r0, #0]
    7db2:	b158      	cbz	r0, 7dcc <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    7db4:	f44f 7182 	mov.w	r1, #260	; 0x104
    7db8:	4809      	ldr	r0, [pc, #36]	; (7de0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    7dba:	f008 fd65 	bl	10888 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7dbe:	b140      	cbz	r0, 7dd2 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    7dc0:	4808      	ldr	r0, [pc, #32]	; (7de4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    7dc2:	6800      	ldr	r0, [r0, #0]
    7dc4:	2800      	cmp	r0, #0
    7dc6:	d000      	beq.n	7dca <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    7dc8:	2001      	movs	r0, #1
    7dca:	bd10      	pop	{r4, pc}
    7dcc:	f240 215e 	movw	r1, #606	; 0x25e
    7dd0:	e001      	b.n	7dd6 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    7dd2:	f240 215f 	movw	r1, #607	; 0x25f
    7dd6:	203c      	movs	r0, #60	; 0x3c
    7dd8:	f7f9 f9c4 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ddc:	20000377 	.word	0x20000377
    7de0:	4000f000 	.word	0x4000f000
    7de4:	4000f400 	.word	0x4000f400

00007de8 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    7de8:	4801      	ldr	r0, [pc, #4]	; (7df0 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    7dea:	2101      	movs	r1, #1
    7dec:	6081      	str	r1, [r0, #8]
    7dee:	4770      	bx	lr
    7df0:	4000f000 	.word	0x4000f000

00007df4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    7df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7df8:	481b      	ldr	r0, [pc, #108]	; (7e68 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    7dfa:	7800      	ldrb	r0, [r0, #0]
    7dfc:	b1d8      	cbz	r0, 7e36 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    7dfe:	f8df 806c 	ldr.w	r8, [pc, #108]	; 7e6c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    7e02:	f44f 7682 	mov.w	r6, #260	; 0x104
    7e06:	4631      	mov	r1, r6
    7e08:	4640      	mov	r0, r8
    7e0a:	f008 fd3d 	bl	10888 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7e0e:	2800      	cmp	r0, #0
    7e10:	d128      	bne.n	7e64 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    7e12:	2002      	movs	r0, #2
    7e14:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    7e18:	4c15      	ldr	r4, [pc, #84]	; (7e70 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    7e1a:	6820      	ldr	r0, [r4, #0]
    7e1c:	43c0      	mvns	r0, r0
    7e1e:	f340 1500 	sbfx	r5, r0, #4, #1
    7e22:	6820      	ldr	r0, [r4, #0]
    7e24:	f040 0010 	orr.w	r0, r0, #16
    7e28:	6020      	str	r0, [r4, #0]
    7e2a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    7e2e:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    7e32:	1c6d      	adds	r5, r5, #1
    7e34:	e008      	b.n	7e48 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    7e36:	f240 216a 	movw	r1, #618	; 0x26a
    7e3a:	203c      	movs	r0, #60	; 0x3c
    7e3c:	f7f9 f992 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e40:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    7e44:	f008 fee1 	bl	10c0a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    7e48:	4631      	mov	r1, r6
    7e4a:	4640      	mov	r0, r8
    7e4c:	f008 fd1c 	bl	10888 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7e50:	2800      	cmp	r0, #0
    7e52:	d0f5      	beq.n	7e40 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    7e54:	b91d      	cbnz	r5, 7e5e <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    7e56:	6820      	ldr	r0, [r4, #0]
    7e58:	f020 0010 	bic.w	r0, r0, #16
    7e5c:	6020      	str	r0, [r4, #0]
    7e5e:	2002      	movs	r0, #2
    7e60:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    7e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7e68:	20000377 	.word	0x20000377
    7e6c:	4000f000 	.word	0x4000f000
    7e70:	e000ed10 	.word	0xe000ed10
    7e74:	4902      	ldr	r1, [pc, #8]	; (7e80 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    7e76:	4801      	ldr	r0, [pc, #4]	; (7e7c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    7e78:	6008      	str	r0, [r1, #0]
    7e7a:	4770      	bx	lr
    7e7c:	02020000 	.word	0x02020000
    7e80:	4001f508 	.word	0x4001f508
    7e84:	00010000 	.word	0x00010000

00007e88 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    7e88:	b510      	push	{r4, lr}
    7e8a:	4604      	mov	r4, r0
    7e8c:	f000 f820 	bl	7ed0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    7e90:	2c00      	cmp	r4, #0
    7e92:	d00e      	beq.n	7eb2 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    7e94:	4a0b      	ldr	r2, [pc, #44]	; (7ec4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7e96:	480b      	ldr	r0, [pc, #44]	; (7ec4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7e98:	490b      	ldr	r1, [pc, #44]	; (7ec8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    7e9a:	3214      	adds	r2, #20
    7e9c:	2c01      	cmp	r4, #1
    7e9e:	d005      	beq.n	7eac <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    7ea0:	2c02      	cmp	r4, #2
    7ea2:	d007      	beq.n	7eb4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    7ea4:	2182      	movs	r1, #130	; 0x82
    7ea6:	203d      	movs	r0, #61	; 0x3d
    7ea8:	f7f9 f95c 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7eac:	2302      	movs	r3, #2
    7eae:	6003      	str	r3, [r0, #0]
    7eb0:	6011      	str	r1, [r2, #0]
    7eb2:	bd10      	pop	{r4, pc}
    7eb4:	2303      	movs	r3, #3
    7eb6:	6003      	str	r3, [r0, #0]
    7eb8:	6011      	str	r1, [r2, #0]
    7eba:	4904      	ldr	r1, [pc, #16]	; (7ecc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    7ebc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7ec0:	6008      	str	r0, [r1, #0]
    7ec2:	bd10      	pop	{r4, pc}
    7ec4:	4000f500 	.word	0x4000f500
    7ec8:	20001764 	.word	0x20001764
    7ecc:	4001f504 	.word	0x4001f504
    7ed0:	4805      	ldr	r0, [pc, #20]	; (7ee8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    7ed2:	b510      	push	{r4, lr}
    7ed4:	2100      	movs	r1, #0
    7ed6:	6001      	str	r1, [r0, #0]
    7ed8:	6001      	str	r1, [r0, #0]
    7eda:	f7ff ff51 	bl	7d80 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    7ede:	4903      	ldr	r1, [pc, #12]	; (7eec <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    7ee0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7ee4:	6008      	str	r0, [r1, #0]
    7ee6:	bd10      	pop	{r4, pc}
    7ee8:	4000f500 	.word	0x4000f500
    7eec:	4001f508 	.word	0x4001f508

00007ef0 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    7ef0:	4805      	ldr	r0, [pc, #20]	; (7f08 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    7ef2:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    7ef6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    7efa:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7efe:	2100      	movs	r1, #0
    7f00:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    7f04:	4770      	bx	lr
    7f06:	0000      	.short	0x0000
    7f08:	40001000 	.word	0x40001000

00007f0c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    7f0c:	4904      	ldr	r1, [pc, #16]	; (7f20 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    7f0e:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    7f12:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    7f16:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    7f1a:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    7f1e:	4770      	bx	lr
    7f20:	40001000 	.word	0x40001000

00007f24 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    7f24:	4902      	ldr	r1, [pc, #8]	; (7f30 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    7f26:	5c08      	ldrb	r0, [r1, r0]
    7f28:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    7f2c:	4770      	bx	lr
    7f2e:	0000      	.short	0x0000
    7f30:	00008bc6 	.word	0x00008bc6

00007f34 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    7f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7f36:	4c24      	ldr	r4, [pc, #144]	; (7fc8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    7f38:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    7f3c:	f010 0f10 	tst.w	r0, #16
    7f40:	d001      	beq.n	7f46 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    7f42:	2701      	movs	r7, #1
    7f44:	e000      	b.n	7f48 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    7f46:	2700      	movs	r7, #0
    7f48:	2010      	movs	r0, #16
    7f4a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    7f4e:	2002      	movs	r0, #2
    7f50:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    7f54:	481d      	ldr	r0, [pc, #116]	; (7fcc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    7f56:	2500      	movs	r5, #0
    7f58:	491d      	ldr	r1, [pc, #116]	; (7fd0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    7f5a:	f880 5028 	strb.w	r5, [r0, #40]	; 0x28
    7f5e:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    7f62:	6008      	str	r0, [r1, #0]
    7f64:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    7f68:	f44f 7688 	mov.w	r6, #272	; 0x110
    7f6c:	f010 0fff 	tst.w	r0, #255	; 0xff
    7f70:	d019      	beq.n	7fa6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    7f72:	20ff      	movs	r0, #255	; 0xff
    7f74:	f88d 0000 	strb.w	r0, [sp]
    7f78:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7f7c:	2001      	movs	r0, #1
    7f7e:	6120      	str	r0, [r4, #16]
    7f80:	e005      	b.n	7f8e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    7f82:	bf00      	nop
    7f84:	f89d 0000 	ldrb.w	r0, [sp]
    7f88:	1e40      	subs	r0, r0, #1
    7f8a:	f88d 0000 	strb.w	r0, [sp]
    7f8e:	f89d 0000 	ldrb.w	r0, [sp]
    7f92:	b128      	cbz	r0, 7fa0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    7f94:	4631      	mov	r1, r6
    7f96:	4620      	mov	r0, r4
    7f98:	f008 fca5 	bl	108e6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7f9c:	2800      	cmp	r0, #0
    7f9e:	d0f1      	beq.n	7f84 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    7fa0:	f89d 0000 	ldrb.w	r0, [sp]
    7fa4:	b158      	cbz	r0, 7fbe <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    7fa6:	f000 fc23 	bl	87f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    7faa:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7fae:	f000 fd8b 	bl	8ac8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    7fb2:	2f00      	cmp	r7, #0
    7fb4:	d002      	beq.n	7fbc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    7fb6:	2010      	movs	r0, #16
    7fb8:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    7fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7fbe:	f640 0194 	movw	r1, #2196	; 0x894
    7fc2:	203e      	movs	r0, #62	; 0x3e
    7fc4:	f7f9 f8ce 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7fc8:	40001000 	.word	0x40001000
    7fcc:	20001330 	.word	0x20001330
    7fd0:	4001f508 	.word	0x4001f508

00007fd4 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    7fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7fd8:	4d18      	ldr	r5, [pc, #96]	; (803c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>)
    7fda:	4607      	mov	r7, r0
    7fdc:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
    7fe0:	07c2      	lsls	r2, r0, #31
    7fe2:	d00f      	beq.n	8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
    7fe4:	4c16      	ldr	r4, [pc, #88]	; (8040 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x40>)
    7fe6:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    7fea:	f042 0201 	orr.w	r2, r2, #1
    7fee:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    7ff2:	f040 0002 	orr.w	r0, r0, #2
    7ff6:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    7ffa:	2601      	movs	r6, #1
    7ffc:	b13f      	cbz	r7, 800e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe>
    7ffe:	2f01      	cmp	r7, #1
    8000:	d00b      	beq.n	801a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a>
    8002:	e010      	b.n	8026 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26>
    8004:	f240 716f 	movw	r1, #1903	; 0x76f
    8008:	203e      	movs	r0, #62	; 0x3e
    800a:	f7f9 f8ab 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    800e:	4608      	mov	r0, r1
    8010:	f000 fdb4 	bl	8b7c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>
    8014:	726e      	strb	r6, [r5, #9]
    8016:	6026      	str	r6, [r4, #0]
    8018:	e005      	b.n	8026 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26>
    801a:	4608      	mov	r0, r1
    801c:	f000 fd94 	bl	8b48 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x53c>
    8020:	2002      	movs	r0, #2
    8022:	7268      	strb	r0, [r5, #9]
    8024:	6066      	str	r6, [r4, #4]
    8026:	4807      	ldr	r0, [pc, #28]	; (8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>)
    8028:	64c6      	str	r6, [r0, #76]	; 0x4c
    802a:	4806      	ldr	r0, [pc, #24]	; (8044 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44>)
    802c:	300c      	adds	r0, #12
    802e:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    8032:	4638      	mov	r0, r7
    8034:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    8038:	f000 bd18 	b.w	8a6c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    803c:	20001330 	.word	0x20001330
    8040:	40001000 	.word	0x40001000
    8044:	40008000 	.word	0x40008000

00008048 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    8048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    804c:	4c2c      	ldr	r4, [pc, #176]	; (8100 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    804e:	0006      	movs	r6, r0
    8050:	4d2c      	ldr	r5, [pc, #176]	; (8104 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    8052:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    8056:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8108 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    805a:	f040 0002 	orr.w	r0, r0, #2
    805e:	4689      	mov	r9, r1
    8060:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    8064:	f04f 0700 	mov.w	r7, #0
    8068:	d002      	beq.n	8070 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    806a:	2e01      	cmp	r6, #1
    806c:	d020      	beq.n	80b0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    806e:	e036      	b.n	80de <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    8070:	4608      	mov	r0, r1
    8072:	f000 fd83 	bl	8b7c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>
    8076:	2001      	movs	r0, #1
    8078:	7260      	strb	r0, [r4, #9]
    807a:	79e0      	ldrb	r0, [r4, #7]
    807c:	2801      	cmp	r0, #1
    807e:	d105      	bne.n	808c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    8080:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    8084:	f040 0008 	orr.w	r0, r0, #8
    8088:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    808c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    808e:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    8092:	6260      	str	r0, [r4, #36]	; 0x24
    8094:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    8098:	f8c8 0000 	str.w	r0, [r8]
    809c:	491b      	ldr	r1, [pc, #108]	; (810c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    809e:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    80a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    80a6:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    80aa:	fbb0 f7f1 	udiv	r7, r0, r1
    80ae:	e016      	b.n	80de <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    80b0:	4608      	mov	r0, r1
    80b2:	f000 fd49 	bl	8b48 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x53c>
    80b6:	2002      	movs	r0, #2
    80b8:	7260      	strb	r0, [r4, #9]
    80ba:	79e0      	ldrb	r0, [r4, #7]
    80bc:	2801      	cmp	r0, #1
    80be:	d105      	bne.n	80cc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    80c0:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    80c4:	f040 0004 	orr.w	r0, r0, #4
    80c8:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    80cc:	6a60      	ldr	r0, [r4, #36]	; 0x24
    80ce:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    80d2:	6260      	str	r0, [r4, #36]	; 0x24
    80d4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    80d8:	f8c8 0000 	str.w	r0, [r8]
    80dc:	2729      	movs	r7, #41	; 0x29
    80de:	f000 fbf3 	bl	88c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2bc>
    80e2:	f008 fc48 	bl	10976 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    80e6:	b120      	cbz	r0, 80f2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    80e8:	f7ff ff24 	bl	7f34 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    80ec:	2000      	movs	r0, #0
    80ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    80f2:	2100      	movs	r1, #0
    80f4:	4630      	mov	r0, r6
    80f6:	f000 fcb9 	bl	8a6c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    80fa:	4638      	mov	r0, r7
    80fc:	e7f7      	b.n	80ee <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    80fe:	0000      	.short	0x0000
    8100:	20001330 	.word	0x20001330
    8104:	40001000 	.word	0x40001000
    8108:	4001f504 	.word	0x4001f504
    810c:	00008bc0 	.word	0x00008bc0

00008110 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    8110:	4a02      	ldr	r2, [pc, #8]	; (811c <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    8112:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    8114:	6003      	str	r3, [r0, #0]
    8116:	6b10      	ldr	r0, [r2, #48]	; 0x30
    8118:	6008      	str	r0, [r1, #0]
    811a:	4770      	bx	lr
    811c:	20001330 	.word	0x20001330

00008120 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    8120:	b510      	push	{r4, lr}
    8122:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    8124:	4901      	ldr	r1, [pc, #4]	; (812c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    8126:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    812a:	bd10      	pop	{r4, pc}
    812c:	20001320 	.word	0x20001320

00008130 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    8130:	490f      	ldr	r1, [pc, #60]	; (8170 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    8132:	b510      	push	{r4, lr}
    8134:	69ca      	ldr	r2, [r1, #28]
    8136:	4282      	cmp	r2, r0
    8138:	d302      	bcc.n	8140 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    813a:	f640 1124 	movw	r1, #2340	; 0x924
    813e:	e00b      	b.n	8158 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    8140:	2201      	movs	r2, #1
    8142:	730a      	strb	r2, [r1, #12]
    8144:	6108      	str	r0, [r1, #16]
    8146:	490b      	ldr	r1, [pc, #44]	; (8174 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    8148:	644a      	str	r2, [r1, #68]	; 0x44
    814a:	1d0a      	adds	r2, r1, #4
    814c:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    8150:	4283      	cmp	r3, r0
    8152:	d304      	bcc.n	815e <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    8154:	f640 112d 	movw	r1, #2349	; 0x92d
    8158:	203e      	movs	r0, #62	; 0x3e
    815a:	f7f9 f803 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    815e:	2300      	movs	r3, #0
    8160:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    8164:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    8168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    816c:	f000 bc52 	b.w	8a14 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>
    8170:	20001330 	.word	0x20001330
    8174:	40008000 	.word	0x40008000

00008178 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    8178:	b570      	push	{r4, r5, r6, lr}
    817a:	4c0f      	ldr	r4, [pc, #60]	; (81b8 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    817c:	4603      	mov	r3, r0
    817e:	2002      	movs	r0, #2
    8180:	7320      	strb	r0, [r4, #12]
    8182:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    8186:	2096      	movs	r0, #150	; 0x96
    8188:	f894 1020 	ldrb.w	r1, [r4, #32]
    818c:	7d22      	ldrb	r2, [r4, #20]
    818e:	2d01      	cmp	r5, #1
    8190:	d00e      	beq.n	81b0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    8192:	f000 fd51 	bl	8c38 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    8196:	6120      	str	r0, [r4, #16]
    8198:	4808      	ldr	r0, [pc, #32]	; (81bc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    819a:	2100      	movs	r1, #0
    819c:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    81a0:	6921      	ldr	r1, [r4, #16]
    81a2:	69e0      	ldr	r0, [r4, #28]
    81a4:	4408      	add	r0, r1
    81a6:	4905      	ldr	r1, [pc, #20]	; (81bc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    81a8:	1d09      	adds	r1, r1, #4
    81aa:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    81ae:	bd70      	pop	{r4, r5, r6, pc}
    81b0:	f000 fd60 	bl	8c74 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    81b4:	e7ef      	b.n	8196 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    81b6:	0000      	.short	0x0000
    81b8:	20001330 	.word	0x20001330
    81bc:	40008000 	.word	0x40008000

000081c0 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    81c0:	b510      	push	{r4, lr}
    81c2:	f008 fcfe 	bl	10bc2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    81c6:	2800      	cmp	r0, #0
    81c8:	d006      	beq.n	81d8 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    81ca:	4804      	ldr	r0, [pc, #16]	; (81dc <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    81cc:	6801      	ldr	r1, [r0, #0]
    81ce:	f021 0101 	bic.w	r1, r1, #1
    81d2:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    81d6:	6001      	str	r1, [r0, #0]
    81d8:	bd10      	pop	{r4, pc}
    81da:	0000      	.short	0x0000
    81dc:	40001774 	.word	0x40001774

000081e0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    81e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    81e4:	2234      	movs	r2, #52	; 0x34
    81e6:	2100      	movs	r1, #0
    81e8:	4813      	ldr	r0, [pc, #76]	; (8238 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    81ea:	f008 fde2 	bl	10db2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    81ee:	f000 fc6b 	bl	8ac8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    81f2:	f008 fc9f 	bl	10b34 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    81f6:	4d11      	ldr	r5, [pc, #68]	; (823c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    81f8:	4e10      	ldr	r6, [pc, #64]	; (823c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    81fa:	2400      	movs	r4, #0
    81fc:	4f0f      	ldr	r7, [pc, #60]	; (823c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    81fe:	3508      	adds	r5, #8
    8200:	3610      	adds	r6, #16
    8202:	b928      	cbnz	r0, 8210 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    8204:	f008 fcad 	bl	10b62 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    8208:	b910      	cbnz	r0, 8210 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    820a:	f008 fcb4 	bl	10b76 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    820e:	b108      	cbz	r0, 8214 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    8210:	2224      	movs	r2, #36	; 0x24
    8212:	e006      	b.n	8222 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    8214:	f008 fcef 	bl	10bf6 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    8218:	b910      	cbnz	r0, 8220 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    821a:	f008 fce2 	bl	10be2 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    821e:	b140      	cbz	r0, 8232 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    8220:	2240      	movs	r2, #64	; 0x40
    8222:	21ff      	movs	r1, #255	; 0xff
    8224:	4638      	mov	r0, r7
    8226:	f008 fdc4 	bl	10db2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    822a:	602c      	str	r4, [r5, #0]
    822c:	6034      	str	r4, [r6, #0]
    822e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8232:	2238      	movs	r2, #56	; 0x38
    8234:	e7f5      	b.n	8222 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    8236:	0000      	.short	0x0000
    8238:	20001330 	.word	0x20001330
    823c:	40000e00 	.word	0x40000e00

00008240 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    8240:	4801      	ldr	r0, [pc, #4]	; (8248 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    8242:	69c0      	ldr	r0, [r0, #28]
    8244:	4770      	bx	lr
    8246:	0000      	.short	0x0000
    8248:	20001330 	.word	0x20001330

0000824c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    824c:	4801      	ldr	r0, [pc, #4]	; (8254 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x8>)
    824e:	f890 0020 	ldrb.w	r0, [r0, #32]
    8252:	4770      	bx	lr
    8254:	20001330 	.word	0x20001330

00008258 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    8258:	4801      	ldr	r0, [pc, #4]	; (8260 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    825a:	6980      	ldr	r0, [r0, #24]
    825c:	4770      	bx	lr
    825e:	0000      	.short	0x0000
    8260:	20001330 	.word	0x20001330

00008264 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    8264:	b510      	push	{r4, lr}
    8266:	f000 fbe3 	bl	8a30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>
    826a:	f7ff fe63 	bl	7f34 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    826e:	f004 fba1 	bl	c9b4 <mpsl_fem_disable>
    8272:	b130      	cbz	r0, 8282 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    8274:	1c40      	adds	r0, r0, #1
    8276:	d004      	beq.n	8282 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    8278:	f240 5165 	movw	r1, #1381	; 0x565
    827c:	203e      	movs	r0, #62	; 0x3e
    827e:	f7f8 ff71 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8282:	480f      	ldr	r0, [pc, #60]	; (82c0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    8284:	4a0f      	ldr	r2, [pc, #60]	; (82c4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    8286:	6a41      	ldr	r1, [r0, #36]	; 0x24
    8288:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    828c:	6011      	str	r1, [r2, #0]
    828e:	2400      	movs	r4, #0
    8290:	6244      	str	r4, [r0, #36]	; 0x24
    8292:	7304      	strb	r4, [r0, #12]
    8294:	61c4      	str	r4, [r0, #28]
    8296:	6184      	str	r4, [r0, #24]
    8298:	f000 fbca 	bl	8a30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>
    829c:	480a      	ldr	r0, [pc, #40]	; (82c8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    829e:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    82a2:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    82a6:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    82aa:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    82ae:	2001      	movs	r0, #1
    82b0:	f008 fb08 	bl	108c4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    82b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    82b8:	2001      	movs	r0, #1
    82ba:	f008 baf6 	b.w	108aa <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    82be:	0000      	.short	0x0000
    82c0:	20001330 	.word	0x20001330
    82c4:	4001f508 	.word	0x4001f508
    82c8:	40008000 	.word	0x40008000

000082cc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    82cc:	b570      	push	{r4, r5, r6, lr}
    82ce:	2001      	movs	r0, #1
    82d0:	f008 faf8 	bl	108c4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    82d4:	4c37      	ldr	r4, [pc, #220]	; (83b4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    82d6:	2000      	movs	r0, #0
    82d8:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    82dc:	2001      	movs	r0, #1
    82de:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    82e2:	f008 fc5e 	bl	10ba2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    82e6:	4d34      	ldr	r5, [pc, #208]	; (83b8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    82e8:	b118      	cbz	r0, 82f2 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    82ea:	6828      	ldr	r0, [r5, #0]
    82ec:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    82f0:	6028      	str	r0, [r5, #0]
    82f2:	f008 fc4a 	bl	10b8a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    82f6:	b128      	cbz	r0, 8304 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    82f8:	6828      	ldr	r0, [r5, #0]
    82fa:	4930      	ldr	r1, [pc, #192]	; (83bc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    82fc:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    8300:	4308      	orrs	r0, r1
    8302:	6028      	str	r0, [r5, #0]
    8304:	f008 fc5d 	bl	10bc2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8308:	b138      	cbz	r0, 831a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    830a:	482b      	ldr	r0, [pc, #172]	; (83b8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    830c:	1d00      	adds	r0, r0, #4
    830e:	6801      	ldr	r1, [r0, #0]
    8310:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    8314:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    8318:	6001      	str	r1, [r0, #0]
    831a:	4927      	ldr	r1, [pc, #156]	; (83b8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    831c:	4828      	ldr	r0, [pc, #160]	; (83c0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    831e:	313c      	adds	r1, #60	; 0x3c
    8320:	6008      	str	r0, [r1, #0]
    8322:	f004 fb81 	bl	ca28 <mpsl_fem_device_config_254_apply_get>
    8326:	b140      	cbz	r0, 833a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    8328:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    832c:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    8330:	1c41      	adds	r1, r0, #1
    8332:	d002      	beq.n	833a <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    8334:	4920      	ldr	r1, [pc, #128]	; (83b8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    8336:	3110      	adds	r1, #16
    8338:	6008      	str	r0, [r1, #0]
    833a:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    833e:	6e00      	ldr	r0, [r0, #96]	; 0x60
    8340:	1c41      	adds	r1, r0, #1
    8342:	d004      	beq.n	834e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    8344:	491f      	ldr	r1, [pc, #124]	; (83c4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    8346:	680a      	ldr	r2, [r1, #0]
    8348:	f360 4217 	bfi	r2, r0, #16, #8
    834c:	600a      	str	r2, [r1, #0]
    834e:	f240 1103 	movw	r1, #259	; 0x103
    8352:	f240 605b 	movw	r0, #1627	; 0x65b
    8356:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    835a:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    835e:	2001      	movs	r0, #1
    8360:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    8364:	f000 f842 	bl	83ec <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8368:	f240 2001 	movw	r0, #513	; 0x201
    836c:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    8370:	2002      	movs	r0, #2
    8372:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    8376:	4914      	ldr	r1, [pc, #80]	; (83c8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    8378:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    837c:	6008      	str	r0, [r1, #0]
    837e:	4913      	ldr	r1, [pc, #76]	; (83cc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    8380:	2000      	movs	r0, #0
    8382:	8608      	strh	r0, [r1, #48]	; 0x30
    8384:	3110      	adds	r1, #16
    8386:	61c8      	str	r0, [r1, #28]
    8388:	f881 0028 	strb.w	r0, [r1, #40]	; 0x28
    838c:	2001      	movs	r0, #1
    838e:	f008 fa8c 	bl	108aa <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    8392:	2010      	movs	r0, #16
    8394:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    8398:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    839c:	2002      	movs	r0, #2
    839e:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    83a2:	480b      	ldr	r0, [pc, #44]	; (83d0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    83a4:	6800      	ldr	r0, [r0, #0]
    83a6:	2800      	cmp	r0, #0
    83a8:	d002      	beq.n	83b0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    83aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    83ae:	4700      	bx	r0
    83b0:	bd70      	pop	{r4, r5, r6, pc}
    83b2:	0000      	.short	0x0000
    83b4:	40001000 	.word	0x40001000
    83b8:	4000173c 	.word	0x4000173c
    83bc:	80000096 	.word	0x80000096
    83c0:	8900002c 	.word	0x8900002c
    83c4:	4000158c 	.word	0x4000158c
    83c8:	4001f504 	.word	0x4001f504
    83cc:	20001320 	.word	0x20001320
    83d0:	200002dc 	.word	0x200002dc

000083d4 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    83d4:	4901      	ldr	r1, [pc, #4]	; (83dc <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    83d6:	7548      	strb	r0, [r1, #21]
    83d8:	4770      	bx	lr
    83da:	0000      	.short	0x0000
    83dc:	20001330 	.word	0x20001330

000083e0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    83e0:	4901      	ldr	r1, [pc, #4]	; (83e8 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    83e2:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    83e6:	4770      	bx	lr
    83e8:	00008c14 	.word	0x00008c14

000083ec <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    83ec:	4908      	ldr	r1, [pc, #32]	; (8410 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    83ee:	b510      	push	{r4, lr}
    83f0:	7508      	strb	r0, [r1, #20]
    83f2:	4908      	ldr	r1, [pc, #32]	; (8414 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    83f4:	2801      	cmp	r0, #1
    83f6:	d006      	beq.n	8406 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    83f8:	2802      	cmp	r0, #2
    83fa:	d006      	beq.n	840a <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    83fc:	f640 516c 	movw	r1, #3436	; 0xd6c
    8400:	203e      	movs	r0, #62	; 0x3e
    8402:	f7f8 feaf 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8406:	2003      	movs	r0, #3
    8408:	e000      	b.n	840c <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    840a:	2004      	movs	r0, #4
    840c:	6008      	str	r0, [r1, #0]
    840e:	bd10      	pop	{r4, pc}
    8410:	20001330 	.word	0x20001330
    8414:	40001510 	.word	0x40001510

00008418 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    8418:	4905      	ldr	r1, [pc, #20]	; (8430 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    841a:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    841e:	4805      	ldr	r0, [pc, #20]	; (8434 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    8420:	f810 1f28 	ldrb.w	r1, [r0, #40]!
    8424:	f041 0101 	orr.w	r1, r1, #1
    8428:	7001      	strb	r1, [r0, #0]
    842a:	f000 ba13 	b.w	8854 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x248>
    842e:	0000      	.short	0x0000
    8430:	40001000 	.word	0x40001000
    8434:	20001330 	.word	0x20001330

00008438 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    8438:	4901      	ldr	r1, [pc, #4]	; (8440 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    843a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    843e:	4770      	bx	lr
    8440:	00008c20 	.word	0x00008c20

00008444 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    8444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8448:	4e30      	ldr	r6, [pc, #192]	; (850c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    844a:	4c31      	ldr	r4, [pc, #196]	; (8510 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>)
    844c:	4688      	mov	r8, r1
    844e:	0007      	movs	r7, r0
    8450:	4615      	mov	r5, r2
    8452:	f04f 0901 	mov.w	r9, #1
    8456:	d006      	beq.n	8466 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x22>
    8458:	2f01      	cmp	r7, #1
    845a:	d012      	beq.n	8482 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3e>
    845c:	f640 0117 	movw	r1, #2071	; 0x817
    8460:	203e      	movs	r0, #62	; 0x3e
    8462:	f7f8 fe7f 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8466:	4610      	mov	r0, r2
    8468:	f000 fb88 	bl	8b7c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>
    846c:	4829      	ldr	r0, [pc, #164]	; (8514 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
    846e:	f884 9009 	strb.w	r9, [r4, #9]
    8472:	f830 1015 	ldrh.w	r1, [r0, r5, lsl #1]
    8476:	4640      	mov	r0, r8
    8478:	f000 fb2e 	bl	8ad8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4cc>
    847c:	4605      	mov	r5, r0
    847e:	4630      	mov	r0, r6
    8480:	e00c      	b.n	849c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
    8482:	4610      	mov	r0, r2
    8484:	f000 fb60 	bl	8b48 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x53c>
    8488:	2002      	movs	r0, #2
    848a:	7260      	strb	r0, [r4, #9]
    848c:	f649 71ba 	movw	r1, #40890	; 0x9fba
    8490:	4640      	mov	r0, r8
    8492:	f000 fb21 	bl	8ad8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4cc>
    8496:	4605      	mov	r5, r0
    8498:	481c      	ldr	r0, [pc, #112]	; (850c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    849a:	1d00      	adds	r0, r0, #4
    849c:	f000 fada 	bl	8a54 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x448>
    84a0:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8518 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
    84a4:	f8c8 5540 	str.w	r5, [r8, #1344]	; 0x540
    84a8:	f8df a074 	ldr.w	sl, [pc, #116]	; 8520 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>
    84ac:	481b      	ldr	r0, [pc, #108]	; (851c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
    84ae:	f8ca 0510 	str.w	r0, [sl, #1296]	; 0x510
    84b2:	2010      	movs	r0, #16
    84b4:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
    84b8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    84ba:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    84be:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    84c2:	6260      	str	r0, [r4, #36]	; 0x24
    84c4:	4817      	ldr	r0, [pc, #92]	; (8524 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    84c6:	6006      	str	r6, [r0, #0]
    84c8:	f000 f9fe 	bl	88c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2bc>
    84cc:	4641      	mov	r1, r8
    84ce:	f8c8 904c 	str.w	r9, [r8, #76]	; 0x4c
    84d2:	4811      	ldr	r0, [pc, #68]	; (8518 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
    84d4:	300c      	adds	r0, #12
    84d6:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    84da:	42a8      	cmp	r0, r5
    84dc:	d310      	bcc.n	8500 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
    84de:	2000      	movs	r0, #0
    84e0:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    84e4:	f8ca 0514 	str.w	r0, [sl, #1300]	; 0x514
    84e8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    84ea:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
    84ee:	6260      	str	r0, [r4, #36]	; 0x24
    84f0:	480c      	ldr	r0, [pc, #48]	; (8524 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    84f2:	1d00      	adds	r0, r0, #4
    84f4:	6006      	str	r6, [r0, #0]
    84f6:	f7ff fd1d 	bl	7f34 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    84fa:	2000      	movs	r0, #0
    84fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8500:	4629      	mov	r1, r5
    8502:	4638      	mov	r0, r7
    8504:	f000 fab2 	bl	8a6c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>
    8508:	2001      	movs	r0, #1
    850a:	e7f7      	b.n	84fc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>
    850c:	40001000 	.word	0x40001000
    8510:	20001330 	.word	0x20001330
    8514:	00008bc0 	.word	0x00008bc0
    8518:	40008000 	.word	0x40008000
    851c:	40008140 	.word	0x40008140
    8520:	4001f098 	.word	0x4001f098
    8524:	4001f504 	.word	0x4001f504

00008528 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    8528:	4b0d      	ldr	r3, [pc, #52]	; (8560 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    852a:	b510      	push	{r4, lr}
    852c:	71d8      	strb	r0, [r3, #7]
    852e:	729a      	strb	r2, [r3, #10]
    8530:	b151      	cbz	r1, 8548 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    8532:	2002      	movs	r0, #2
    8534:	7218      	strb	r0, [r3, #8]
    8536:	2801      	cmp	r0, #1
    8538:	d008      	beq.n	854c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    853a:	2802      	cmp	r0, #2
    853c:	d00f      	beq.n	855e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    853e:	f640 2144 	movw	r1, #2628	; 0xa44
    8542:	203e      	movs	r0, #62	; 0x3e
    8544:	f7f8 fe0e 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8548:	2001      	movs	r0, #1
    854a:	e7f3      	b.n	8534 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    854c:	7a58      	ldrb	r0, [r3, #9]
    854e:	2802      	cmp	r0, #2
    8550:	d105      	bne.n	855e <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    8552:	f000 f943 	bl	87dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>
    8556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    855a:	f000 ba51 	b.w	8a00 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f4>
    855e:	bd10      	pop	{r4, pc}
    8560:	20001330 	.word	0x20001330

00008564 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    8564:	4902      	ldr	r1, [pc, #8]	; (8570 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    8566:	2000      	movs	r0, #0
    8568:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    856c:	4770      	bx	lr
    856e:	0000      	.short	0x0000
    8570:	40008000 	.word	0x40008000

00008574 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    8574:	4904      	ldr	r1, [pc, #16]	; (8588 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    8576:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    857a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    857e:	4249      	negs	r1, r1
    8580:	7001      	strb	r1, [r0, #0]
    8582:	2001      	movs	r0, #1
    8584:	4770      	bx	lr
    8586:	0000      	.short	0x0000
    8588:	40001000 	.word	0x40001000

0000858c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    858c:	4903      	ldr	r1, [pc, #12]	; (859c <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    858e:	0e02      	lsrs	r2, r0, #24
    8590:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    8594:	0200      	lsls	r0, r0, #8
    8596:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    859a:	4770      	bx	lr
    859c:	40001000 	.word	0x40001000

000085a0 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    85a0:	4901      	ldr	r1, [pc, #4]	; (85a8 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    85a2:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    85a6:	4770      	bx	lr
    85a8:	40001000 	.word	0x40001000

000085ac <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    85ac:	b510      	push	{r4, lr}
    85ae:	2200      	movs	r2, #0
    85b0:	2901      	cmp	r1, #1
    85b2:	d006      	beq.n	85c2 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    85b4:	2902      	cmp	r1, #2
    85b6:	d002      	beq.n	85be <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    85b8:	f240 21d2 	movw	r1, #722	; 0x2d2
    85bc:	e014      	b.n	85e8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    85be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    85c2:	490b      	ldr	r1, [pc, #44]	; (85f0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    85c4:	430a      	orrs	r2, r1
    85c6:	490b      	ldr	r1, [pc, #44]	; (85f4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    85c8:	600a      	str	r2, [r1, #0]
    85ca:	490b      	ldr	r1, [pc, #44]	; (85f8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    85cc:	4308      	orrs	r0, r1
    85ce:	4909      	ldr	r1, [pc, #36]	; (85f4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    85d0:	1d09      	adds	r1, r1, #4
    85d2:	6008      	str	r0, [r1, #0]
    85d4:	4809      	ldr	r0, [pc, #36]	; (85fc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    85d6:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    85da:	b2c0      	uxtb	r0, r0
    85dc:	2803      	cmp	r0, #3
    85de:	d001      	beq.n	85e4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    85e0:	280b      	cmp	r0, #11
    85e2:	d104      	bne.n	85ee <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    85e4:	f240 21ea 	movw	r1, #746	; 0x2ea
    85e8:	203e      	movs	r0, #62	; 0x3e
    85ea:	f7f8 fdbb 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    85ee:	bd10      	pop	{r4, pc}
    85f0:	00100108 	.word	0x00100108
    85f4:	40001514 	.word	0x40001514
    85f8:	02030000 	.word	0x02030000
    85fc:	40001000 	.word	0x40001000

00008600 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    8600:	4901      	ldr	r1, [pc, #4]	; (8608 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    8602:	7588      	strb	r0, [r1, #22]
    8604:	4770      	bx	lr
    8606:	0000      	.short	0x0000
    8608:	20001330 	.word	0x20001330

0000860c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    860c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8610:	4851      	ldr	r0, [pc, #324]	; (8758 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    8612:	f04f 0a01 	mov.w	sl, #1
    8616:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    861a:	484f      	ldr	r0, [pc, #316]	; (8758 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    861c:	300c      	adds	r0, #12
    861e:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    8622:	f008 f9a6 	bl	10972 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    8626:	4c4d      	ldr	r4, [pc, #308]	; (875c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    8628:	e9c4 070b 	strd	r0, r7, [r4, #44]	; 0x2c
    862c:	f000 f8e0 	bl	87f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>
    8630:	494b      	ldr	r1, [pc, #300]	; (8760 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    8632:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8634:	6008      	str	r0, [r1, #0]
    8636:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8764 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>
    863a:	2000      	movs	r0, #0
    863c:	6260      	str	r0, [r4, #36]	; 0x24
    863e:	f8d8 2200 	ldr.w	r2, [r8, #512]	; 0x200
    8642:	f240 131d 	movw	r3, #285	; 0x11d
    8646:	439a      	bics	r2, r3
    8648:	f8c8 2200 	str.w	r2, [r8, #512]	; 0x200
    864c:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    8650:	f000 f94e 	bl	88f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e4>
    8654:	4605      	mov	r5, r0
    8656:	4840      	ldr	r0, [pc, #256]	; (8758 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    8658:	3008      	adds	r0, #8
    865a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    865e:	4e3e      	ldr	r6, [pc, #248]	; (8758 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>)
    8660:	61e0      	str	r0, [r4, #28]
    8662:	1d36      	adds	r6, r6, #4
    8664:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    8668:	61a0      	str	r0, [r4, #24]
    866a:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    866e:	7d21      	ldrb	r1, [r4, #20]
    8670:	f884 1020 	strb.w	r1, [r4, #32]
    8674:	7a61      	ldrb	r1, [r4, #9]
    8676:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    867a:	46a1      	mov	r9, r4
    867c:	2400      	movs	r4, #0
    867e:	4639      	mov	r1, r7
    8680:	4628      	mov	r0, r5
    8682:	f000 f983 	bl	898c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x380>
    8686:	b910      	cbnz	r0, 868e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    8688:	f8c8 a010 	str.w	sl, [r8, #16]
    868c:	2401      	movs	r4, #1
    868e:	4f33      	ldr	r7, [pc, #204]	; (875c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    8690:	07e8      	lsls	r0, r5, #31
    8692:	f1a7 0710 	sub.w	r7, r7, #16
    8696:	d120      	bne.n	86da <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    8698:	07a8      	lsls	r0, r5, #30
    869a:	d527      	bpl.n	86ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe0>
    869c:	f008 fa91 	bl	10bc2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    86a0:	b9f0      	cbnz	r0, 86e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    86a2:	f008 fa7e 	bl	10ba2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    86a6:	b9d8      	cbnz	r0, 86e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    86a8:	482f      	ldr	r0, [pc, #188]	; (8768 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    86aa:	6800      	ldr	r0, [r0, #0]
    86ac:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    86b0:	f3c0 6300 	ubfx	r3, r0, #24, #1
    86b4:	f000 020f 	and.w	r2, r0, #15
    86b8:	f3c0 1103 	ubfx	r1, r0, #4, #4
    86bc:	f3c0 2803 	ubfx	r8, r0, #8, #4
    86c0:	b173      	cbz	r3, 86e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    86c2:	b11a      	cbz	r2, 86cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    86c4:	b111      	cbz	r1, 86cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc0>
    86c6:	f1b8 0f00 	cmp.w	r8, #0
    86ca:	d109      	bne.n	86e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    86cc:	f3c0 4004 	ubfx	r0, r0, #16, #5
    86d0:	2801      	cmp	r0, #1
    86d2:	d105      	bne.n	86e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    86d4:	f1bc 0f03 	cmp.w	ip, #3
    86d8:	d202      	bcs.n	86e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd4>
    86da:	6838      	ldr	r0, [r7, #0]
    86dc:	4780      	blx	r0
    86de:	e00e      	b.n	86fe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    86e0:	f345 0080 	sbfx	r0, r5, #2, #1
    86e4:	4621      	mov	r1, r4
    86e6:	1c40      	adds	r0, r0, #1
    86e8:	687a      	ldr	r2, [r7, #4]
    86ea:	e007      	b.n	86fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf0>
    86ec:	f015 0f28 	tst.w	r5, #40	; 0x28
    86f0:	d005      	beq.n	86fe <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    86f2:	f345 1140 	sbfx	r1, r5, #5, #1
    86f6:	68ba      	ldr	r2, [r7, #8]
    86f8:	4620      	mov	r0, r4
    86fa:	1c49      	adds	r1, r1, #1
    86fc:	4790      	blx	r2
    86fe:	06e8      	lsls	r0, r5, #27
    8700:	d501      	bpl.n	8706 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfa>
    8702:	68f8      	ldr	r0, [r7, #12]
    8704:	4780      	blx	r0
    8706:	f899 1009 	ldrb.w	r1, [r9, #9]
    870a:	4648      	mov	r0, r9
    870c:	2902      	cmp	r1, #2
    870e:	d120      	bne.n	8752 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    8710:	7b01      	ldrb	r1, [r0, #12]
    8712:	2900      	cmp	r1, #0
    8714:	d01d      	beq.n	8752 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x146>
    8716:	2902      	cmp	r1, #2
    8718:	d004      	beq.n	8724 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x118>
    871a:	2901      	cmp	r1, #1
    871c:	d009      	beq.n	8732 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x126>
    871e:	f640 4156 	movw	r1, #3158	; 0xc56
    8722:	e00d      	b.n	8740 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x134>
    8724:	69c1      	ldr	r1, [r0, #28]
    8726:	f8d9 0010 	ldr.w	r0, [r9, #16]
    872a:	4408      	add	r0, r1
    872c:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    8730:	e00b      	b.n	874a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13e>
    8732:	6901      	ldr	r1, [r0, #16]
    8734:	f8d9 001c 	ldr.w	r0, [r9, #28]
    8738:	4281      	cmp	r1, r0
    873a:	d804      	bhi.n	8746 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
    873c:	f640 4157 	movw	r1, #3159	; 0xc57
    8740:	203e      	movs	r0, #62	; 0x3e
    8742:	f7f8 fd0f 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8746:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    874a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    874e:	f000 b961 	b.w	8a14 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>
    8752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8756:	0000      	.short	0x0000
    8758:	40008000 	.word	0x40008000
    875c:	20001330 	.word	0x20001330
    8760:	4001f508 	.word	0x4001f508
    8764:	40001000 	.word	0x40001000
    8768:	40001450 	.word	0x40001450
    876c:	480b      	ldr	r0, [pc, #44]	; (879c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x190>)
    876e:	7d81      	ldrb	r1, [r0, #22]
    8770:	480b      	ldr	r0, [pc, #44]	; (87a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x194>)
    8772:	5c40      	ldrb	r0, [r0, r1]
    8774:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    8778:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    877c:	d204      	bcs.n	8788 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x17c>
    877e:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    8782:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    8786:	e001      	b.n	878c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x180>
    8788:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    878c:	4a05      	ldr	r2, [pc, #20]	; (87a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x198>)
    878e:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    8792:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    8796:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    879a:	4770      	bx	lr
    879c:	20001330 	.word	0x20001330
    87a0:	00008bc6 	.word	0x00008bc6
    87a4:	40001000 	.word	0x40001000
    87a8:	b508      	push	{r3, lr}
    87aa:	490b      	ldr	r1, [pc, #44]	; (87d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1cc>)
    87ac:	466b      	mov	r3, sp
    87ae:	f991 2015 	ldrsb.w	r2, [r1, #21]
    87b2:	7d89      	ldrb	r1, [r1, #22]
    87b4:	f000 faaa 	bl	8d0c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    87b8:	f99d 0000 	ldrsb.w	r0, [sp]
    87bc:	f000 fa7a 	bl	8cb4 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    87c0:	f10d 0001 	add.w	r0, sp, #1
    87c4:	f004 f91a 	bl	c9fc <mpsl_fem_pa_gain_set>
    87c8:	2800      	cmp	r0, #0
    87ca:	d004      	beq.n	87d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ca>
    87cc:	f240 51e6 	movw	r1, #1510	; 0x5e6
    87d0:	203e      	movs	r0, #62	; 0x3e
    87d2:	f7f8 fcc7 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87d6:	bd08      	pop	{r3, pc}
    87d8:	20001330 	.word	0x20001330
    87dc:	4803      	ldr	r0, [pc, #12]	; (87ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e0>)
    87de:	7a01      	ldrb	r1, [r0, #8]
    87e0:	2901      	cmp	r1, #1
    87e2:	d102      	bne.n	87ea <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1de>
    87e4:	7a80      	ldrb	r0, [r0, #10]
    87e6:	f7ff bfdf 	b.w	87a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    87ea:	4770      	bx	lr
    87ec:	20001330 	.word	0x20001330
    87f0:	480d      	ldr	r0, [pc, #52]	; (8828 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21c>)
    87f2:	b510      	push	{r4, lr}
    87f4:	7a40      	ldrb	r0, [r0, #9]
    87f6:	2801      	cmp	r0, #1
    87f8:	d00c      	beq.n	8814 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x208>
    87fa:	2802      	cmp	r0, #2
    87fc:	d113      	bne.n	8826 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    87fe:	f004 f8df 	bl	c9c0 <mpsl_fem_lna_configuration_clear>
    8802:	2800      	cmp	r0, #0
    8804:	d00f      	beq.n	8826 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    8806:	1c40      	adds	r0, r0, #1
    8808:	d00d      	beq.n	8826 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    880a:	f640 01ab 	movw	r1, #2219	; 0x8ab
    880e:	203e      	movs	r0, #62	; 0x3e
    8810:	f7f8 fca8 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8814:	f004 f8e6 	bl	c9e4 <mpsl_fem_pa_configuration_clear>
    8818:	2800      	cmp	r0, #0
    881a:	d004      	beq.n	8826 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    881c:	1c40      	adds	r0, r0, #1
    881e:	d002      	beq.n	8826 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21a>
    8820:	f640 01a5 	movw	r1, #2213	; 0x8a5
    8824:	e7f3      	b.n	880e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x202>
    8826:	bd10      	pop	{r4, pc}
    8828:	20001330 	.word	0x20001330
    882c:	4808      	ldr	r0, [pc, #32]	; (8850 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x244>)
    882e:	2100      	movs	r1, #0
    8830:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    8834:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    8838:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    883c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    8840:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    8844:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    8848:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    884c:	4770      	bx	lr
    884e:	0000      	.short	0x0000
    8850:	40001000 	.word	0x40001000
    8854:	4818      	ldr	r0, [pc, #96]	; (88b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ac>)
    8856:	b510      	push	{r4, lr}
    8858:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    885c:	07c1      	lsls	r1, r0, #31
    885e:	d029      	beq.n	88b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    8860:	0781      	lsls	r1, r0, #30
    8862:	d514      	bpl.n	888e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x282>
    8864:	4815      	ldr	r0, [pc, #84]	; (88bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b0>)
    8866:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    886a:	f041 0101 	orr.w	r1, r1, #1
    886e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    8872:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    8876:	b2c0      	uxtb	r0, r0
    8878:	280b      	cmp	r0, #11
    887a:	d005      	beq.n	8888 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    887c:	280a      	cmp	r0, #10
    887e:	d003      	beq.n	8888 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    8880:	2803      	cmp	r0, #3
    8882:	d001      	beq.n	8888 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x27c>
    8884:	2802      	cmp	r0, #2
    8886:	d115      	bne.n	88b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    8888:	f240 610f 	movw	r1, #1551	; 0x60f
    888c:	e00f      	b.n	88ae <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a2>
    888e:	0740      	lsls	r0, r0, #29
    8890:	d510      	bpl.n	88b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    8892:	480a      	ldr	r0, [pc, #40]	; (88bc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b0>)
    8894:	490a      	ldr	r1, [pc, #40]	; (88c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b4>)
    8896:	3008      	adds	r0, #8
    8898:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    889c:	f44f 71a0 	mov.w	r1, #320	; 0x140
    88a0:	4808      	ldr	r0, [pc, #32]	; (88c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b8>)
    88a2:	f008 f825 	bl	108f0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    88a6:	2800      	cmp	r0, #0
    88a8:	d004      	beq.n	88b4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a8>
    88aa:	f240 6117 	movw	r1, #1559	; 0x617
    88ae:	203e      	movs	r0, #62	; 0x3e
    88b0:	f7f8 fc58 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    88b4:	bd10      	pop	{r4, pc}
    88b6:	0000      	.short	0x0000
    88b8:	20001330 	.word	0x20001330
    88bc:	40001000 	.word	0x40001000
    88c0:	4001f098 	.word	0x4001f098
    88c4:	40008000 	.word	0x40008000
    88c8:	4808      	ldr	r0, [pc, #32]	; (88ec <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e0>)
    88ca:	4601      	mov	r1, r0
    88cc:	79c2      	ldrb	r2, [r0, #7]
    88ce:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    88d2:	b112      	cbz	r2, 88da <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ce>
    88d4:	2a01      	cmp	r2, #1
    88d6:	d003      	beq.n	88e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d4>
    88d8:	e006      	b.n	88e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2dc>
    88da:	f041 0102 	orr.w	r1, r1, #2
    88de:	e001      	b.n	88e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d8>
    88e0:	f041 0104 	orr.w	r1, r1, #4
    88e4:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    88e8:	f7ff bfb4 	b.w	8854 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x248>
    88ec:	20001330 	.word	0x20001330
    88f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    88f4:	4d22      	ldr	r5, [pc, #136]	; (8980 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x374>)
    88f6:	2400      	movs	r4, #0
    88f8:	7b28      	ldrb	r0, [r5, #12]
    88fa:	b138      	cbz	r0, 890c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x300>
    88fc:	f44f 71a2 	mov.w	r1, #324	; 0x144
    8900:	4820      	ldr	r0, [pc, #128]	; (8984 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x378>)
    8902:	f007 fff5 	bl	108f0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    8906:	b108      	cbz	r0, 890c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x300>
    8908:	2701      	movs	r7, #1
    890a:	e000      	b.n	890e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x302>
    890c:	2700      	movs	r7, #0
    890e:	7a68      	ldrb	r0, [r5, #9]
    8910:	4e1d      	ldr	r6, [pc, #116]	; (8988 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x37c>)
    8912:	f44f 7186 	mov.w	r1, #268	; 0x10c
    8916:	2801      	cmp	r0, #1
    8918:	d002      	beq.n	8920 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x314>
    891a:	2802      	cmp	r0, #2
    891c:	d006      	beq.n	892c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x320>
    891e:	e016      	b.n	894e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    8920:	4630      	mov	r0, r6
    8922:	f007 ffe0 	bl	108e6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    8926:	b190      	cbz	r0, 894e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    8928:	2408      	movs	r4, #8
    892a:	e010      	b.n	894e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    892c:	4630      	mov	r0, r6
    892e:	f007 ffda 	bl	108e6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    8932:	b100      	cbz	r0, 8936 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x32a>
    8934:	2402      	movs	r4, #2
    8936:	f8d6 0400 	ldr.w	r0, [r6, #1024]	; 0x400
    893a:	43c0      	mvns	r0, r0
    893c:	f340 0000 	sbfx	r0, r0, #0, #1
    8940:	1c40      	adds	r0, r0, #1
    8942:	d101      	bne.n	8948 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x33c>
    8944:	f044 0404 	orr.w	r4, r4, #4
    8948:	b10f      	cbz	r7, 894e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x342>
    894a:	f044 0401 	orr.w	r4, r4, #1
    894e:	f014 0f0b 	tst.w	r4, #11
    8952:	d107      	bne.n	8964 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x358>
    8954:	f44f 7188 	mov.w	r1, #272	; 0x110
    8958:	4630      	mov	r0, r6
    895a:	f007 ffc4 	bl	108e6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    895e:	b108      	cbz	r0, 8964 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x358>
    8960:	f044 0410 	orr.w	r4, r4, #16
    8964:	f7ff ff62 	bl	882c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x220>
    8968:	06e0      	lsls	r0, r4, #27
    896a:	d506      	bpl.n	897a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    896c:	0720      	lsls	r0, r4, #28
    896e:	d404      	bmi.n	897a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    8970:	7a68      	ldrb	r0, [r5, #9]
    8972:	2801      	cmp	r0, #1
    8974:	d101      	bne.n	897a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x36e>
    8976:	f044 0420 	orr.w	r4, r4, #32
    897a:	4620      	mov	r0, r4
    897c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8980:	20001330 	.word	0x20001330
    8984:	40008000 	.word	0x40008000
    8988:	40001000 	.word	0x40001000
    898c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8990:	4c1a      	ldr	r4, [pc, #104]	; (89fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f0>)
    8992:	460d      	mov	r5, r1
    8994:	7a21      	ldrb	r1, [r4, #8]
    8996:	b129      	cbz	r1, 89a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x398>
    8998:	f010 0f11 	tst.w	r0, #17
    899c:	d007      	beq.n	89ae <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3a2>
    899e:	f7ff fac9 	bl	7f34 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    89a2:	e024      	b.n	89ee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e2>
    89a4:	f000 f890 	bl	8ac8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    89a8:	2000      	movs	r0, #0
    89aa:	7320      	strb	r0, [r4, #12]
    89ac:	e01f      	b.n	89ee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e2>
    89ae:	2901      	cmp	r1, #1
    89b0:	d001      	beq.n	89b6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3aa>
    89b2:	2601      	movs	r6, #1
    89b4:	e000      	b.n	89b8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ac>
    89b6:	2600      	movs	r6, #0
    89b8:	79e0      	ldrb	r0, [r4, #7]
    89ba:	2801      	cmp	r0, #1
    89bc:	d00e      	beq.n	89dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d0>
    89be:	2700      	movs	r7, #0
    89c0:	f000 f882 	bl	8ac8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>
    89c4:	2196      	movs	r1, #150	; 0x96
    89c6:	4630      	mov	r0, r6
    89c8:	f000 f894 	bl	8af4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e8>
    89cc:	4601      	mov	r1, r0
    89ce:	b14f      	cbz	r7, 89e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d8>
    89d0:	353b      	adds	r5, #59	; 0x3b
    89d2:	428d      	cmp	r5, r1
    89d4:	d904      	bls.n	89e0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d4>
    89d6:	2000      	movs	r0, #0
    89d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    89dc:	2701      	movs	r7, #1
    89de:	e7ef      	b.n	89c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3b4>
    89e0:	2001      	movs	r0, #1
    89e2:	71e0      	strb	r0, [r4, #7]
    89e4:	7aa2      	ldrb	r2, [r4, #10]
    89e6:	4630      	mov	r0, r6
    89e8:	f7ff fd2c 	bl	8444 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    89ec:	b108      	cbz	r0, 89f2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e6>
    89ee:	2001      	movs	r0, #1
    89f0:	e7f2      	b.n	89d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3cc>
    89f2:	f640 21a5 	movw	r1, #2725	; 0xaa5
    89f6:	203e      	movs	r0, #62	; 0x3e
    89f8:	f7f8 fbb4 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    89fc:	20001330 	.word	0x20001330
    8a00:	4803      	ldr	r0, [pc, #12]	; (8a10 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x404>)
    8a02:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    8a06:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    8a0a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    8a0e:	4770      	bx	lr
    8a10:	40001000 	.word	0x40001000
    8a14:	4804      	ldr	r0, [pc, #16]	; (8a28 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x41c>)
    8a16:	6a41      	ldr	r1, [r0, #36]	; 0x24
    8a18:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    8a1c:	6241      	str	r1, [r0, #36]	; 0x24
    8a1e:	4903      	ldr	r1, [pc, #12]	; (8a2c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x420>)
    8a20:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    8a24:	6008      	str	r0, [r1, #0]
    8a26:	4770      	bx	lr
    8a28:	20001330 	.word	0x20001330
    8a2c:	4001f504 	.word	0x4001f504
    8a30:	4a07      	ldr	r2, [pc, #28]	; (8a50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    8a32:	2000      	movs	r0, #0
    8a34:	3208      	adds	r2, #8
    8a36:	4906      	ldr	r1, [pc, #24]	; (8a50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    8a38:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    8a3c:	1d0a      	adds	r2, r1, #4
    8a3e:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    8a42:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    8a46:	4902      	ldr	r1, [pc, #8]	; (8a50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x444>)
    8a48:	310c      	adds	r1, #12
    8a4a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    8a4e:	4770      	bx	lr
    8a50:	40008000 	.word	0x40008000
    8a54:	4903      	ldr	r1, [pc, #12]	; (8a64 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x458>)
    8a56:	79c9      	ldrb	r1, [r1, #7]
    8a58:	2900      	cmp	r1, #0
    8a5a:	d102      	bne.n	8a62 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x456>
    8a5c:	4902      	ldr	r1, [pc, #8]	; (8a68 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x45c>)
    8a5e:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    8a62:	4770      	bx	lr
    8a64:	20001330 	.word	0x20001330
    8a68:	4001f098 	.word	0x4001f098
    8a6c:	b510      	push	{r4, lr}
    8a6e:	4a14      	ldr	r2, [pc, #80]	; (8ac0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    8a70:	b120      	cbz	r0, 8a7c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x470>
    8a72:	2801      	cmp	r0, #1
    8a74:	d011      	beq.n	8a9a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x48e>
    8a76:	f240 7153 	movw	r1, #1875	; 0x753
    8a7a:	e01c      	b.n	8ab6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4aa>
    8a7c:	f101 0028 	add.w	r0, r1, #40	; 0x28
    8a80:	e9c2 1002 	strd	r1, r0, [r2, #8]
    8a84:	490f      	ldr	r1, [pc, #60]	; (8ac4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b8>)
    8a86:	480e      	ldr	r0, [pc, #56]	; (8ac0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    8a88:	f003 ffb2 	bl	c9f0 <mpsl_fem_pa_configuration_set>
    8a8c:	2800      	cmp	r0, #0
    8a8e:	d015      	beq.n	8abc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    8a90:	1c40      	adds	r0, r0, #1
    8a92:	d013      	beq.n	8abc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    8a94:	f240 7142 	movw	r1, #1858	; 0x742
    8a98:	e00d      	b.n	8ab6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4aa>
    8a9a:	f101 0029 	add.w	r0, r1, #41	; 0x29
    8a9e:	e9c2 1002 	strd	r1, r0, [r2, #8]
    8aa2:	4908      	ldr	r1, [pc, #32]	; (8ac4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b8>)
    8aa4:	4806      	ldr	r0, [pc, #24]	; (8ac0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>)
    8aa6:	f003 ff91 	bl	c9cc <mpsl_fem_lna_configuration_set>
    8aaa:	2800      	cmp	r0, #0
    8aac:	d006      	beq.n	8abc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    8aae:	1c40      	adds	r0, r0, #1
    8ab0:	d004      	beq.n	8abc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b0>
    8ab2:	f240 714f 	movw	r1, #1871	; 0x74f
    8ab6:	203e      	movs	r0, #62	; 0x3e
    8ab8:	f7f8 fb54 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8abc:	bd10      	pop	{r4, pc}
    8abe:	0000      	.short	0x0000
    8ac0:	200002e0 	.word	0x200002e0
    8ac4:	00008bf0 	.word	0x00008bf0
    8ac8:	4802      	ldr	r0, [pc, #8]	; (8ad4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4c8>)
    8aca:	2100      	movs	r1, #0
    8acc:	71c1      	strb	r1, [r0, #7]
    8ace:	7201      	strb	r1, [r0, #8]
    8ad0:	7241      	strb	r1, [r0, #9]
    8ad2:	4770      	bx	lr
    8ad4:	20001330 	.word	0x20001330
    8ad8:	4a05      	ldr	r2, [pc, #20]	; (8af0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e4>)
    8ada:	79d2      	ldrb	r2, [r2, #7]
    8adc:	2a01      	cmp	r2, #1
    8ade:	d006      	beq.n	8aee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e2>
    8ae0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8ae4:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    8ae8:	fbb1 f1f2 	udiv	r1, r1, r2
    8aec:	1a40      	subs	r0, r0, r1
    8aee:	4770      	bx	lr
    8af0:	20001330 	.word	0x20001330
    8af4:	b570      	push	{r4, r5, r6, lr}
    8af6:	4c13      	ldr	r4, [pc, #76]	; (8b44 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x538>)
    8af8:	4603      	mov	r3, r0
    8afa:	460d      	mov	r5, r1
    8afc:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    8b00:	2000      	movs	r0, #0
    8b02:	b15a      	cbz	r2, 8b1c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x510>
    8b04:	4621      	mov	r1, r4
    8b06:	f891 1020 	ldrb.w	r1, [r1, #32]
    8b0a:	b163      	cbz	r3, 8b26 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x51a>
    8b0c:	2b01      	cmp	r3, #1
    8b0e:	d111      	bne.n	8b34 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x528>
    8b10:	2a01      	cmp	r2, #1
    8b12:	4628      	mov	r0, r5
    8b14:	d012      	beq.n	8b3c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x530>
    8b16:	f007 fef0 	bl	108fa <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    8b1a:	e009      	b.n	8b30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x524>
    8b1c:	f640 0158 	movw	r1, #2136	; 0x858
    8b20:	203e      	movs	r0, #62	; 0x3e
    8b22:	f7f8 fb1f 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b26:	2a01      	cmp	r2, #1
    8b28:	4628      	mov	r0, r5
    8b2a:	d004      	beq.n	8b36 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x52a>
    8b2c:	f007 fef3 	bl	10916 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    8b30:	69e1      	ldr	r1, [r4, #28]
    8b32:	4408      	add	r0, r1
    8b34:	bd70      	pop	{r4, r5, r6, pc}
    8b36:	f000 f8d1 	bl	8cdc <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    8b3a:	e7f9      	b.n	8b30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x524>
    8b3c:	f000 f8c0 	bl	8cc0 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    8b40:	e7f6      	b.n	8b30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x524>
    8b42:	0000      	.short	0x0000
    8b44:	20001330 	.word	0x20001330
    8b48:	b510      	push	{r4, lr}
    8b4a:	f7ff fc4f 	bl	83ec <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8b4e:	f7ff fe0d 	bl	876c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    8b52:	f7ff fe43 	bl	87dc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>
    8b56:	f7ff ff53 	bl	8a00 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f4>
    8b5a:	f008 f832 	bl	10bc2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8b5e:	2800      	cmp	r0, #0
    8b60:	d108      	bne.n	8b74 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x568>
    8b62:	f008 f81e 	bl	10ba2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    8b66:	2800      	cmp	r0, #0
    8b68:	d104      	bne.n	8b74 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x568>
    8b6a:	4803      	ldr	r0, [pc, #12]	; (8b78 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x56c>)
    8b6c:	6801      	ldr	r1, [r0, #0]
    8b6e:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    8b72:	6001      	str	r1, [r0, #0]
    8b74:	bd10      	pop	{r4, pc}
    8b76:	0000      	.short	0x0000
    8b78:	40001568 	.word	0x40001568
    8b7c:	b510      	push	{r4, lr}
    8b7e:	4604      	mov	r4, r0
    8b80:	f7ff fc34 	bl	83ec <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8b84:	f7ff fdf2 	bl	876c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    8b88:	4620      	mov	r0, r4
    8b8a:	f7ff fe0d 	bl	87a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>
    8b8e:	f008 f818 	bl	10bc2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8b92:	2800      	cmp	r0, #0
    8b94:	d00d      	beq.n	8bb2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a6>
    8b96:	4a09      	ldr	r2, [pc, #36]	; (8bbc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5b0>)
    8b98:	6811      	ldr	r1, [r2, #0]
    8b9a:	0650      	lsls	r0, r2, #25
    8b9c:	2c02      	cmp	r4, #2
    8b9e:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    8ba2:	d007      	beq.n	8bb4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a8>
    8ba4:	f3c0 2006 	ubfx	r0, r0, #8, #7
    8ba8:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    8bac:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    8bb0:	6010      	str	r0, [r2, #0]
    8bb2:	bd10      	pop	{r4, pc}
    8bb4:	f3c0 6006 	ubfx	r0, r0, #24, #7
    8bb8:	e7f6      	b.n	8ba8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x59c>
    8bba:	0000      	.short	0x0000
    8bbc:	40001588 	.word	0x40001588
    8bc0:	a62c0000 	.word	0xa62c0000
    8bc4:	0604a1e0 	.word	0x0604a1e0
    8bc8:	0e0c0a08 	.word	0x0e0c0a08
    8bcc:	16141210 	.word	0x16141210
    8bd0:	201e1c18 	.word	0x201e1c18
    8bd4:	28262422 	.word	0x28262422
    8bd8:	302e2c2a 	.word	0x302e2c2a
    8bdc:	38363432 	.word	0x38363432
    8be0:	403e3c3a 	.word	0x403e3c3a
    8be4:	48464442 	.word	0x48464442
    8be8:	024e4c4a 	.word	0x024e4c4a
    8bec:	0000501a 	.word	0x0000501a
    8bf0:	00000001 	.word	0x00000001
    8bf4:	40001110 	.word	0x40001110
	...
    8c0c:	00001e14 	.word	0x00001e14
    8c10:	00001130 	.word	0x00001130
    8c14:	00000000 	.word	0x00000000
    8c18:	00000028 	.word	0x00000028
    8c1c:	00000018 	.word	0x00000018
    8c20:	00000000 	.word	0x00000000
    8c24:	00001e14 	.word	0x00001e14
    8c28:	00001130 	.word	0x00001130
    8c2c:	00000000 	.word	0x00000000
    8c30:	00001770 	.word	0x00001770
    8c34:	00000fa0 	.word	0x00000fa0

00008c38 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    8c38:	b570      	push	{r4, r5, r6, lr}
    8c3a:	4605      	mov	r5, r0
    8c3c:	4614      	mov	r4, r2
    8c3e:	4608      	mov	r0, r1
    8c40:	f7ff fbfa 	bl	8438 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8c44:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    8c48:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    8c4c:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    8c50:	4807      	ldr	r0, [pc, #28]	; (8c70 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    8c52:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    8c56:	4408      	add	r0, r1
    8c58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8c5c:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    8c60:	fbb0 f5f1 	udiv	r5, r0, r1
    8c64:	4620      	mov	r0, r4
    8c66:	f7ff fbbb 	bl	83e0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8c6a:	4428      	add	r0, r5
    8c6c:	1d40      	adds	r0, r0, #5
    8c6e:	bd70      	pop	{r4, r5, r6, pc}
    8c70:	00008d00 	.word	0x00008d00

00008c74 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    8c74:	b570      	push	{r4, r5, r6, lr}
    8c76:	4d0e      	ldr	r5, [pc, #56]	; (8cb0 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    8c78:	461c      	mov	r4, r3
    8c7a:	3d08      	subs	r5, #8
    8c7c:	4b0c      	ldr	r3, [pc, #48]	; (8cb0 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    8c7e:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    8c82:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    8c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8c8a:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    8c8e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    8c92:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    8c96:	4418      	add	r0, r3
    8c98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8c9c:	fbb0 f5f1 	udiv	r5, r0, r1
    8ca0:	4610      	mov	r0, r2
    8ca2:	f7ff fb9d 	bl	83e0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8ca6:	4428      	add	r0, r5
    8ca8:	4420      	add	r0, r4
    8caa:	1d40      	adds	r0, r0, #5
    8cac:	bd70      	pop	{r4, r5, r6, pc}
    8cae:	0000      	.short	0x0000
    8cb0:	00008d00 	.word	0x00008d00

00008cb4 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    8cb4:	4901      	ldr	r1, [pc, #4]	; (8cbc <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    8cb6:	b2c0      	uxtb	r0, r0
    8cb8:	6008      	str	r0, [r1, #0]
    8cba:	4770      	bx	lr
    8cbc:	4000150c 	.word	0x4000150c

00008cc0 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    8cc0:	4a05      	ldr	r2, [pc, #20]	; (8cd8 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    8cc2:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8cc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8cca:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    8cce:	fbb1 f1f2 	udiv	r1, r1, r2
    8cd2:	4408      	add	r0, r1
    8cd4:	1e80      	subs	r0, r0, #2
    8cd6:	4770      	bx	lr
    8cd8:	00008cf8 	.word	0x00008cf8

00008cdc <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    8cdc:	4a05      	ldr	r2, [pc, #20]	; (8cf4 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    8cde:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8ce2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8ce6:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    8cea:	fbb1 f1f2 	udiv	r1, r1, r2
    8cee:	4408      	add	r0, r1
    8cf0:	4770      	bx	lr
    8cf2:	0000      	.short	0x0000
    8cf4:	00008cf8 	.word	0x00008cf8
    8cf8:	05dc0000 	.word	0x05dc0000
    8cfc:	000003e8 	.word	0x000003e8
    8d00:	00000000 	.word	0x00000000
    8d04:	00001e14 	.word	0x00001e14
    8d08:	00001130 	.word	0x00001130

00008d0c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    8d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8d10:	461e      	mov	r6, r3
    8d12:	4617      	mov	r7, r2
    8d14:	460c      	mov	r4, r1
    8d16:	4605      	mov	r5, r0
    8d18:	f000 f856 	bl	8dc8 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    8d1c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8dc4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    8d20:	4680      	mov	r8, r0
    8d22:	f899 0000 	ldrb.w	r0, [r9]
    8d26:	42a8      	cmp	r0, r5
    8d28:	d110      	bne.n	8d4c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8d2a:	f899 1001 	ldrb.w	r1, [r9, #1]
    8d2e:	4648      	mov	r0, r9
    8d30:	42a1      	cmp	r1, r4
    8d32:	d10b      	bne.n	8d4c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8d34:	f990 1002 	ldrsb.w	r1, [r0, #2]
    8d38:	42b9      	cmp	r1, r7
    8d3a:	d107      	bne.n	8d4c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8d3c:	78c2      	ldrb	r2, [r0, #3]
    8d3e:	4542      	cmp	r2, r8
    8d40:	d104      	bne.n	8d4c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8d42:	8881      	ldrh	r1, [r0, #4]
    8d44:	8031      	strh	r1, [r6, #0]
    8d46:	7980      	ldrb	r0, [r0, #6]
    8d48:	70b0      	strb	r0, [r6, #2]
    8d4a:	e037      	b.n	8dbc <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb0>
    8d4c:	463a      	mov	r2, r7
    8d4e:	4621      	mov	r1, r4
    8d50:	2d01      	cmp	r5, #1
    8d52:	d009      	beq.n	8d68 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    8d54:	2d02      	cmp	r5, #2
    8d56:	d009      	beq.n	8d6c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    8d58:	2d04      	cmp	r5, #4
    8d5a:	d009      	beq.n	8d70 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    8d5c:	2d08      	cmp	r5, #8
    8d5e:	d009      	beq.n	8d74 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    8d60:	f240 4161 	movw	r1, #1121	; 0x461
    8d64:	2006      	movs	r0, #6
    8d66:	e00c      	b.n	8d82 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    8d68:	2000      	movs	r0, #0
    8d6a:	e004      	b.n	8d76 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8d6c:	2001      	movs	r0, #1
    8d6e:	e002      	b.n	8d76 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8d70:	2003      	movs	r0, #3
    8d72:	e000      	b.n	8d76 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8d74:	2002      	movs	r0, #2
    8d76:	466b      	mov	r3, sp
    8d78:	f000 f89e 	bl	8eb8 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    8d7c:	b118      	cbz	r0, 8d86 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    8d7e:	213d      	movs	r1, #61	; 0x3d
    8d80:	2075      	movs	r0, #117	; 0x75
    8d82:	f7f8 f9ef 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8d86:	4620      	mov	r0, r4
    8d88:	f7ff f8cc 	bl	7f24 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    8d8c:	4602      	mov	r2, r0
    8d8e:	2300      	movs	r3, #0
    8d90:	4631      	mov	r1, r6
    8d92:	f99d 0000 	ldrsb.w	r0, [sp]
    8d96:	f003 fe3d 	bl	ca14 <mpsl_fem_tx_power_split>
    8d9a:	4601      	mov	r1, r0
    8d9c:	f889 1007 	strb.w	r1, [r9, #7]
    8da0:	8831      	ldrh	r1, [r6, #0]
    8da2:	f8a9 1004 	strh.w	r1, [r9, #4]
    8da6:	78b1      	ldrb	r1, [r6, #2]
    8da8:	f889 1006 	strb.w	r1, [r9, #6]
    8dac:	f889 5000 	strb.w	r5, [r9]
    8db0:	f889 4001 	strb.w	r4, [r9, #1]
    8db4:	f889 7002 	strb.w	r7, [r9, #2]
    8db8:	f889 8003 	strb.w	r8, [r9, #3]
    8dbc:	f999 0007 	ldrsb.w	r0, [r9, #7]
    8dc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8dc4:	2000037c 	.word	0x2000037c

00008dc8 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    8dc8:	4801      	ldr	r0, [pc, #4]	; (8dd0 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    8dca:	7800      	ldrb	r0, [r0, #0]
    8dcc:	4770      	bx	lr
    8dce:	0000      	.short	0x0000
    8dd0:	200002f8 	.word	0x200002f8

00008dd4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    8dd4:	b570      	push	{r4, r5, r6, lr}
    8dd6:	4c17      	ldr	r4, [pc, #92]	; (8e34 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
    8dd8:	7860      	ldrb	r0, [r4, #1]
    8dda:	2800      	cmp	r0, #0
    8ddc:	d123      	bne.n	8e26 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
    8dde:	2001      	movs	r0, #1
    8de0:	7060      	strb	r0, [r4, #1]
    8de2:	f007 fec8 	bl	10b76 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    8de6:	f06f 0527 	mvn.w	r5, #39	; 0x27
    8dea:	b928      	cbnz	r0, 8df8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8dec:	f007 fef9 	bl	10be2 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    8df0:	b910      	cbnz	r0, 8df8 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8df2:	f007 ff00 	bl	10bf6 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    8df6:	b120      	cbz	r0, 8e02 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
    8df8:	480f      	ldr	r0, [pc, #60]	; (8e38 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8dfa:	6060      	str	r0, [r4, #4]
    8dfc:	70a5      	strb	r5, [r4, #2]
    8dfe:	2008      	movs	r0, #8
    8e00:	e010      	b.n	8e24 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
    8e02:	f007 fe8d 	bl	10b20 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    8e06:	b940      	cbnz	r0, 8e1a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8e08:	f007 fe94 	bl	10b34 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    8e0c:	b928      	cbnz	r0, 8e1a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8e0e:	f007 fea8 	bl	10b62 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    8e12:	b910      	cbnz	r0, 8e1a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8e14:	f007 feb9 	bl	10b8a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    8e18:	b130      	cbz	r0, 8e28 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
    8e1a:	4807      	ldr	r0, [pc, #28]	; (8e38 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8e1c:	3031      	adds	r0, #49	; 0x31
    8e1e:	6060      	str	r0, [r4, #4]
    8e20:	70a5      	strb	r5, [r4, #2]
    8e22:	2004      	movs	r0, #4
    8e24:	70e0      	strb	r0, [r4, #3]
    8e26:	bd70      	pop	{r4, r5, r6, pc}
    8e28:	f240 113f 	movw	r1, #319	; 0x13f
    8e2c:	2074      	movs	r0, #116	; 0x74
    8e2e:	f003 fc33 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8e32:	0000      	.short	0x0000
    8e34:	200002f8 	.word	0x200002f8
    8e38:	00010f35 	.word	0x00010f35

00008e3c <mpsl_tx_power_radio_supported_power_adjust>:
    8e3c:	4a06      	ldr	r2, [pc, #24]	; (8e58 <mpsl_tx_power_radio_supported_power_adjust+0x1c>)
    8e3e:	b500      	push	{lr}
    8e40:	f992 2003 	ldrsb.w	r2, [r2, #3]
    8e44:	4290      	cmp	r0, r2
    8e46:	db01      	blt.n	8e4c <mpsl_tx_power_radio_supported_power_adjust+0x10>
    8e48:	4610      	mov	r0, r2
    8e4a:	bd00      	pop	{pc}
    8e4c:	f000 f808 	bl	8e60 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
    8e50:	4902      	ldr	r1, [pc, #8]	; (8e5c <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    8e52:	5608      	ldrsb	r0, [r1, r0]
    8e54:	bd00      	pop	{pc}
    8e56:	0000      	.short	0x0000
    8e58:	200002f8 	.word	0x200002f8
    8e5c:	00010f27 	.word	0x00010f27

00008e60 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
    8e60:	4602      	mov	r2, r0
    8e62:	4813      	ldr	r0, [pc, #76]	; (8eb0 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x50>)
    8e64:	b510      	push	{r4, lr}
    8e66:	f990 3003 	ldrsb.w	r3, [r0, #3]
    8e6a:	429a      	cmp	r2, r3
    8e6c:	db01      	blt.n	8e72 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
    8e6e:	200d      	movs	r0, #13
    8e70:	bd10      	pop	{r4, pc}
    8e72:	f990 3002 	ldrsb.w	r3, [r0, #2]
    8e76:	429a      	cmp	r2, r3
    8e78:	dc01      	bgt.n	8e7e <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1e>
    8e7a:	2000      	movs	r0, #0
    8e7c:	bd10      	pop	{r4, pc}
    8e7e:	b101      	cbz	r1, 8e82 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
    8e80:	2101      	movs	r1, #1
    8e82:	1ad4      	subs	r4, r2, r3
    8e84:	6843      	ldr	r3, [r0, #4]
    8e86:	5d18      	ldrb	r0, [r3, r4]
    8e88:	4c0a      	ldr	r4, [pc, #40]	; (8eb4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    8e8a:	5624      	ldrsb	r4, [r4, r0]
    8e8c:	4294      	cmp	r4, r2
    8e8e:	d0f5      	beq.n	8e7c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8e90:	4c08      	ldr	r4, [pc, #32]	; (8eb4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    8e92:	4408      	add	r0, r1
    8e94:	343f      	adds	r4, #63	; 0x3f
    8e96:	b2c0      	uxtb	r0, r0
    8e98:	b2d2      	uxtb	r2, r2
    8e9a:	42a3      	cmp	r3, r4
    8e9c:	d1ee      	bne.n	8e7c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8e9e:	2900      	cmp	r1, #0
    8ea0:	d0ec      	beq.n	8e7c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8ea2:	2a01      	cmp	r2, #1
    8ea4:	d001      	beq.n	8eaa <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x4a>
    8ea6:	2a02      	cmp	r2, #2
    8ea8:	d1e8      	bne.n	8e7c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8eaa:	1c40      	adds	r0, r0, #1
    8eac:	b2c0      	uxtb	r0, r0
    8eae:	bd10      	pop	{r4, pc}
    8eb0:	200002f8 	.word	0x200002f8
    8eb4:	00010f27 	.word	0x00010f27

00008eb8 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    8eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8ebc:	461c      	mov	r4, r3
    8ebe:	4690      	mov	r8, r2
    8ec0:	460d      	mov	r5, r1
    8ec2:	4606      	mov	r6, r0
    8ec4:	f06f 0715 	mvn.w	r7, #21
    8ec8:	2804      	cmp	r0, #4
    8eca:	d804      	bhi.n	8ed6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8ecc:	b11c      	cbz	r4, 8ed6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8ece:	f007 fd2d 	bl	1092c <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x16>
    8ed2:	42a8      	cmp	r0, r5
    8ed4:	d802      	bhi.n	8edc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    8ed6:	4638      	mov	r0, r7
    8ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8edc:	4805      	ldr	r0, [pc, #20]	; (8ef4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    8ede:	4642      	mov	r2, r8
    8ee0:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    8ee4:	b118      	cbz	r0, 8eee <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8ee6:	5740      	ldrsb	r0, [r0, r5]
    8ee8:	4282      	cmp	r2, r0
    8eea:	dd00      	ble.n	8eee <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8eec:	4602      	mov	r2, r0
    8eee:	7022      	strb	r2, [r4, #0]
    8ef0:	2000      	movs	r0, #0
    8ef2:	e7f1      	b.n	8ed8 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    8ef4:	20001364 	.word	0x20001364

00008ef8 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    8ef8:	4801      	ldr	r0, [pc, #4]	; (8f00 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    8efa:	7800      	ldrb	r0, [r0, #0]
    8efc:	4770      	bx	lr
    8efe:	0000      	.short	0x0000
    8f00:	20000300 	.word	0x20000300

00008f04 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    8f04:	4905      	ldr	r1, [pc, #20]	; (8f1c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    8f06:	780a      	ldrb	r2, [r1, #0]
    8f08:	4290      	cmp	r0, r2
    8f0a:	d301      	bcc.n	8f10 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    8f0c:	2000      	movs	r0, #0
    8f0e:	4770      	bx	lr
    8f10:	6849      	ldr	r1, [r1, #4]
    8f12:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8f16:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    8f1a:	4770      	bx	lr
    8f1c:	20000300 	.word	0x20000300

00008f20 <MPSL_IRQ_RADIO_Handler>:
    8f20:	490d      	ldr	r1, [pc, #52]	; (8f58 <MPSL_IRQ_RADIO_Handler+0x38>)
    8f22:	b510      	push	{r4, lr}
    8f24:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    8f28:	2820      	cmp	r0, #32
    8f2a:	d00f      	beq.n	8f4c <MPSL_IRQ_RADIO_Handler+0x2c>
    8f2c:	f891 0042 	ldrb.w	r0, [r1, #66]	; 0x42
    8f30:	f5a1 6290 	sub.w	r2, r1, #1152	; 0x480
    8f34:	eb02 1040 	add.w	r0, r2, r0, lsl #5
    8f38:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
    8f3c:	6840      	ldr	r0, [r0, #4]
    8f3e:	eb02 1141 	add.w	r1, r2, r1, lsl #5
    8f42:	680a      	ldr	r2, [r1, #0]
    8f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8f48:	2104      	movs	r1, #4
    8f4a:	4710      	bx	r2
    8f4c:	f640 017f 	movw	r1, #2175	; 0x87f
    8f50:	2070      	movs	r0, #112	; 0x70
    8f52:	f003 fba1 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8f56:	0000      	.short	0x0000
    8f58:	20001108 	.word	0x20001108
    8f5c:	b570      	push	{r4, r5, r6, lr}
    8f5e:	4605      	mov	r5, r0
    8f60:	2a20      	cmp	r2, #32
    8f62:	d028      	beq.n	8fb6 <MPSL_IRQ_RADIO_Handler+0x96>
    8f64:	4819      	ldr	r0, [pc, #100]	; (8fcc <MPSL_IRQ_RADIO_Handler+0xac>)
    8f66:	4c1a      	ldr	r4, [pc, #104]	; (8fd0 <MPSL_IRQ_RADIO_Handler+0xb0>)
    8f68:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    8f6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8f70:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    8f74:	4423      	add	r3, r4
    8f76:	2920      	cmp	r1, #32
    8f78:	d022      	beq.n	8fc0 <MPSL_IRQ_RADIO_Handler+0xa0>
    8f7a:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    8f7e:	7840      	ldrb	r0, [r0, #1]
    8f80:	784c      	ldrb	r4, [r1, #1]
    8f82:	7048      	strb	r0, [r1, #1]
    8f84:	4620      	mov	r0, r4
    8f86:	4601      	mov	r1, r0
    8f88:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    8f8c:	4291      	cmp	r1, r2
    8f8e:	7005      	strb	r5, [r0, #0]
    8f90:	7840      	ldrb	r0, [r0, #1]
    8f92:	d1f8      	bne.n	8f86 <MPSL_IRQ_RADIO_Handler+0x66>
    8f94:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    8f98:	2a20      	cmp	r2, #32
    8f9a:	bf1a      	itte	ne
    8f9c:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    8fa0:	7054      	strbne	r4, [r2, #1]
    8fa2:	f883 4029 	strbeq.w	r4, [r3, #41]	; 0x29
    8fa6:	2220      	movs	r2, #32
    8fa8:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    8fac:	f88c 2001 	strb.w	r2, [ip, #1]
    8fb0:	f883 102a 	strb.w	r1, [r3, #42]	; 0x2a
    8fb4:	bd70      	pop	{r4, r5, r6, pc}
    8fb6:	f240 2186 	movw	r1, #646	; 0x286
    8fba:	2070      	movs	r0, #112	; 0x70
    8fbc:	f003 fb6c 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8fc0:	f893 4028 	ldrb.w	r4, [r3, #40]	; 0x28
    8fc4:	7840      	ldrb	r0, [r0, #1]
    8fc6:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    8fca:	e7db      	b.n	8f84 <MPSL_IRQ_RADIO_Handler+0x64>
    8fcc:	20001088 	.word	0x20001088
    8fd0:	20001108 	.word	0x20001108
    8fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8fd8:	b08f      	sub	sp, #60	; 0x3c
    8fda:	4616      	mov	r6, r2
    8fdc:	461d      	mov	r5, r3
    8fde:	460c      	mov	r4, r1
    8fe0:	f002 faaa 	bl	b538 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    8fe4:	1830      	adds	r0, r6, r0
    8fe6:	f145 0100 	adc.w	r1, r5, #0
    8fea:	e9cd 1001 	strd	r1, r0, [sp, #4]
    8fee:	e9d4 2300 	ldrd	r2, r3, [r4]
    8ff2:	1a80      	subs	r0, r0, r2
    8ff4:	eb71 0003 	sbcs.w	r0, r1, r3
    8ff8:	f0c0 80e5 	bcc.w	91c6 <MPSL_IRQ_RADIO_Handler+0x2a6>
    8ffc:	a808      	add	r0, sp, #32
    8ffe:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
    9002:	900a      	str	r0, [sp, #40]	; 0x28
    9004:	48be      	ldr	r0, [pc, #760]	; (9300 <MPSL_IRQ_RADIO_Handler+0x3e0>)
    9006:	eb08 0148 	add.w	r1, r8, r8, lsl #1
    900a:	4408      	add	r0, r1
    900c:	9009      	str	r0, [sp, #36]	; 0x24
    900e:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    9012:	2020      	movs	r0, #32
    9014:	f10d 091c 	add.w	r9, sp, #28
    9018:	f88d 001c 	strb.w	r0, [sp, #28]
    901c:	2d20      	cmp	r5, #32
    901e:	d036      	beq.n	908e <MPSL_IRQ_RADIO_Handler+0x16e>
    9020:	48b8      	ldr	r0, [pc, #736]	; (9304 <MPSL_IRQ_RADIO_Handler+0x3e4>)
    9022:	2600      	movs	r6, #0
    9024:	eb00 1a88 	add.w	sl, r0, r8, lsl #6
    9028:	48b7      	ldr	r0, [pc, #732]	; (9308 <MPSL_IRQ_RADIO_Handler+0x3e8>)
    902a:	e9d4 7300 	ldrd	r7, r3, [r4]
    902e:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    9032:	f850 bf08 	ldr.w	fp, [r0, #8]!
    9036:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    903a:	eb1b 0202 	adds.w	r2, fp, r2
    903e:	4171      	adcs	r1, r6
    9040:	1aba      	subs	r2, r7, r2
    9042:	eb73 0101 	sbcs.w	r1, r3, r1
    9046:	d322      	bcc.n	908e <MPSL_IRQ_RADIO_Handler+0x16e>
    9048:	89e1      	ldrh	r1, [r4, #14]
    904a:	b1c9      	cbz	r1, 9080 <MPSL_IRQ_RADIO_Handler+0x160>
    904c:	89c0      	ldrh	r0, [r0, #14]
    904e:	b9b8      	cbnz	r0, 9080 <MPSL_IRQ_RADIO_Handler+0x160>
    9050:	f003 f964 	bl	c31c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9054:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9058:	bf08      	it	eq
    905a:	200d      	moveq	r0, #13
    905c:	d00b      	beq.n	9076 <MPSL_IRQ_RADIO_Handler+0x156>
    905e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9062:	3856      	subs	r0, #86	; 0x56
    9064:	bf08      	it	eq
    9066:	201c      	moveq	r0, #28
    9068:	d005      	beq.n	9076 <MPSL_IRQ_RADIO_Handler+0x156>
    906a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    906e:	389f      	subs	r0, #159	; 0x9f
    9070:	bf14      	ite	ne
    9072:	4630      	movne	r0, r6
    9074:	2032      	moveq	r0, #50	; 0x32
    9076:	1c41      	adds	r1, r0, #1
    9078:	ebb7 000b 	subs.w	r0, r7, fp
    907c:	4288      	cmp	r0, r1
    907e:	db06      	blt.n	908e <MPSL_IRQ_RADIO_Handler+0x16e>
    9080:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
    9084:	f889 5000 	strb.w	r5, [r9]
    9088:	7845      	ldrb	r5, [r0, #1]
    908a:	2d20      	cmp	r5, #32
    908c:	d1cc      	bne.n	9028 <MPSL_IRQ_RADIO_Handler+0x108>
    908e:	980a      	ldr	r0, [sp, #40]	; 0x28
    9090:	f899 1000 	ldrb.w	r1, [r9]
    9094:	2d20      	cmp	r5, #32
    9096:	7001      	strb	r1, [r0, #0]
    9098:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    909a:	f000 812d 	beq.w	92f8 <MPSL_IRQ_RADIO_Handler+0x3d8>
    909e:	4899      	ldr	r0, [pc, #612]	; (9304 <MPSL_IRQ_RADIO_Handler+0x3e4>)
    90a0:	2700      	movs	r7, #0
    90a2:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    90a6:	f8df 8260 	ldr.w	r8, [pc, #608]	; 9308 <MPSL_IRQ_RADIO_Handler+0x3e8>
    90aa:	9004      	str	r0, [sp, #16]
    90ac:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    90b0:	f8d4 b000 	ldr.w	fp, [r4]
    90b4:	eb08 1945 	add.w	r9, r8, r5, lsl #5
    90b8:	f109 0008 	add.w	r0, r9, #8
    90bc:	eb1b 0201 	adds.w	r2, fp, r1
    90c0:	eb43 0107 	adc.w	r1, r3, r7
    90c4:	e9d0 a300 	ldrd	sl, r3, [r0]
    90c8:	ebba 0202 	subs.w	r2, sl, r2
    90cc:	eb73 0101 	sbcs.w	r1, r3, r1
    90d0:	d320      	bcc.n	9114 <MPSL_IRQ_RADIO_Handler+0x1f4>
    90d2:	89c0      	ldrh	r0, [r0, #14]
    90d4:	2800      	cmp	r0, #0
    90d6:	f000 810f 	beq.w	92f8 <MPSL_IRQ_RADIO_Handler+0x3d8>
    90da:	89e0      	ldrh	r0, [r4, #14]
    90dc:	2800      	cmp	r0, #0
    90de:	f040 810b 	bne.w	92f8 <MPSL_IRQ_RADIO_Handler+0x3d8>
    90e2:	f003 f91b 	bl	c31c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    90e6:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    90ea:	bf08      	it	eq
    90ec:	200d      	moveq	r0, #13
    90ee:	d00b      	beq.n	9108 <MPSL_IRQ_RADIO_Handler+0x1e8>
    90f0:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    90f4:	3856      	subs	r0, #86	; 0x56
    90f6:	bf08      	it	eq
    90f8:	201c      	moveq	r0, #28
    90fa:	d005      	beq.n	9108 <MPSL_IRQ_RADIO_Handler+0x1e8>
    90fc:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9100:	389f      	subs	r0, #159	; 0x9f
    9102:	bf14      	ite	ne
    9104:	4638      	movne	r0, r7
    9106:	2032      	moveq	r0, #50	; 0x32
    9108:	1c40      	adds	r0, r0, #1
    910a:	ebba 010b 	subs.w	r1, sl, fp
    910e:	4281      	cmp	r1, r0
    9110:	f280 80f2 	bge.w	92f8 <MPSL_IRQ_RADIO_Handler+0x3d8>
    9114:	7035      	strb	r5, [r6, #0]
    9116:	f899 0018 	ldrb.w	r0, [r9, #24]
    911a:	7c21      	ldrb	r1, [r4, #16]
    911c:	4281      	cmp	r1, r0
    911e:	d207      	bcs.n	9130 <MPSL_IRQ_RADIO_Handler+0x210>
    9120:	9804      	ldr	r0, [sp, #16]
    9122:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    9126:	7845      	ldrb	r5, [r0, #1]
    9128:	2d20      	cmp	r5, #32
    912a:	d1bf      	bne.n	90ac <MPSL_IRQ_RADIO_Handler+0x18c>
    912c:	f000 b8e4 	b.w	92f8 <MPSL_IRQ_RADIO_Handler+0x3d8>
    9130:	f89d 0020 	ldrb.w	r0, [sp, #32]
    9134:	eb08 1040 	add.w	r0, r8, r0, lsl #5
    9138:	e9d0 2103 	ldrd	r2, r1, [r0, #12]
    913c:	f8d0 9008 	ldr.w	r9, [r0, #8]
    9140:	8ac0      	ldrh	r0, [r0, #22]
    9142:	eb19 0501 	adds.w	r5, r9, r1
    9146:	eb42 0607 	adc.w	r6, r2, r7
    914a:	bbb0      	cbnz	r0, 91ba <MPSL_IRQ_RADIO_Handler+0x29a>
    914c:	89e0      	ldrh	r0, [r4, #14]
    914e:	b3a0      	cbz	r0, 91ba <MPSL_IRQ_RADIO_Handler+0x29a>
    9150:	f003 f8e4 	bl	c31c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9154:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9158:	bf08      	it	eq
    915a:	200d      	moveq	r0, #13
    915c:	d00b      	beq.n	9176 <MPSL_IRQ_RADIO_Handler+0x256>
    915e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9162:	3856      	subs	r0, #86	; 0x56
    9164:	bf08      	it	eq
    9166:	201c      	moveq	r0, #28
    9168:	d005      	beq.n	9176 <MPSL_IRQ_RADIO_Handler+0x256>
    916a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    916e:	389f      	subs	r0, #159	; 0x9f
    9170:	bf14      	ite	ne
    9172:	4638      	movne	r0, r7
    9174:	2032      	moveq	r0, #50	; 0x32
    9176:	1c41      	adds	r1, r0, #1
    9178:	ebb5 0009 	subs.w	r0, r5, r9
    917c:	4288      	cmp	r0, r1
    917e:	da1c      	bge.n	91ba <MPSL_IRQ_RADIO_Handler+0x29a>
    9180:	f003 f8cc 	bl	c31c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9184:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9188:	bf08      	it	eq
    918a:	200d      	moveq	r0, #13
    918c:	d00b      	beq.n	91a6 <MPSL_IRQ_RADIO_Handler+0x286>
    918e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9192:	3856      	subs	r0, #86	; 0x56
    9194:	bf08      	it	eq
    9196:	201c      	moveq	r0, #28
    9198:	d005      	beq.n	91a6 <MPSL_IRQ_RADIO_Handler+0x286>
    919a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    919e:	389f      	subs	r0, #159	; 0x9f
    91a0:	bf14      	ite	ne
    91a2:	4638      	movne	r0, r7
    91a4:	2032      	moveq	r0, #50	; 0x32
    91a6:	f89d 1020 	ldrb.w	r1, [sp, #32]
    91aa:	1c40      	adds	r0, r0, #1
    91ac:	eb08 1241 	add.w	r2, r8, r1, lsl #5
    91b0:	e9d2 1302 	ldrd	r1, r3, [r2, #8]
    91b4:	180d      	adds	r5, r1, r0
    91b6:	eb43 0607 	adc.w	r6, r3, r7
    91ba:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
    91be:	1b40      	subs	r0, r0, r5
    91c0:	eb71 0006 	sbcs.w	r0, r1, r6
    91c4:	d203      	bcs.n	91ce <MPSL_IRQ_RADIO_Handler+0x2ae>
    91c6:	b00f      	add	sp, #60	; 0x3c
    91c8:	2000      	movs	r0, #0
    91ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    91ce:	e9c4 5600 	strd	r5, r6, [r4]
    91d2:	9818      	ldr	r0, [sp, #96]	; 0x60
    91d4:	900b      	str	r0, [sp, #44]	; 0x2c
    91d6:	a808      	add	r0, sp, #32
    91d8:	900a      	str	r0, [sp, #40]	; 0x28
    91da:	9809      	ldr	r0, [sp, #36]	; 0x24
    91dc:	f10d 091c 	add.w	r9, sp, #28
    91e0:	f890 5028 	ldrb.w	r5, [r0, #40]	; 0x28
    91e4:	2020      	movs	r0, #32
    91e6:	f88d 001c 	strb.w	r0, [sp, #28]
    91ea:	2d20      	cmp	r5, #32
    91ec:	d03c      	beq.n	9268 <MPSL_IRQ_RADIO_Handler+0x348>
    91ee:	4845      	ldr	r0, [pc, #276]	; (9304 <MPSL_IRQ_RADIO_Handler+0x3e4>)
    91f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    91f2:	eb00 1a81 	add.w	sl, r0, r1, lsl #6
    91f6:	bf00      	nop
    91f8:	eb08 1045 	add.w	r0, r8, r5, lsl #5
    91fc:	f100 0108 	add.w	r1, r0, #8
    9200:	6902      	ldr	r2, [r0, #16]
    9202:	e9d1 0c00 	ldrd	r0, ip, [r1]
    9206:	46bb      	mov	fp, r7
    9208:	1883      	adds	r3, r0, r2
    920a:	eb4c 020b 	adc.w	r2, ip, fp
    920e:	e9d4 6c00 	ldrd	r6, ip, [r4]
    9212:	1af3      	subs	r3, r6, r3
    9214:	eb7c 0202 	sbcs.w	r2, ip, r2
    9218:	d326      	bcc.n	9268 <MPSL_IRQ_RADIO_Handler+0x348>
    921a:	89e2      	ldrh	r2, [r4, #14]
    921c:	b1ea      	cbz	r2, 925a <MPSL_IRQ_RADIO_Handler+0x33a>
    921e:	89c9      	ldrh	r1, [r1, #14]
    9220:	b9d9      	cbnz	r1, 925a <MPSL_IRQ_RADIO_Handler+0x33a>
    9222:	900c      	str	r0, [sp, #48]	; 0x30
    9224:	f003 f87a 	bl	c31c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9228:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    922c:	bf08      	it	eq
    922e:	f04f 0b0d 	moveq.w	fp, #13
    9232:	d00c      	beq.n	924e <MPSL_IRQ_RADIO_Handler+0x32e>
    9234:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9238:	3856      	subs	r0, #86	; 0x56
    923a:	bf08      	it	eq
    923c:	f04f 0b1c 	moveq.w	fp, #28
    9240:	d005      	beq.n	924e <MPSL_IRQ_RADIO_Handler+0x32e>
    9242:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9246:	389f      	subs	r0, #159	; 0x9f
    9248:	bf08      	it	eq
    924a:	f04f 0b32 	moveq.w	fp, #50	; 0x32
    924e:	f10b 0001 	add.w	r0, fp, #1
    9252:	990c      	ldr	r1, [sp, #48]	; 0x30
    9254:	1a71      	subs	r1, r6, r1
    9256:	4281      	cmp	r1, r0
    9258:	db06      	blt.n	9268 <MPSL_IRQ_RADIO_Handler+0x348>
    925a:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
    925e:	f889 5000 	strb.w	r5, [r9]
    9262:	7845      	ldrb	r5, [r0, #1]
    9264:	2d20      	cmp	r5, #32
    9266:	d1c7      	bne.n	91f8 <MPSL_IRQ_RADIO_Handler+0x2d8>
    9268:	980a      	ldr	r0, [sp, #40]	; 0x28
    926a:	f899 1000 	ldrb.w	r1, [r9]
    926e:	2d20      	cmp	r5, #32
    9270:	7001      	strb	r1, [r0, #0]
    9272:	e9dd a00a 	ldrd	sl, r0, [sp, #40]	; 0x28
    9276:	d03f      	beq.n	92f8 <MPSL_IRQ_RADIO_Handler+0x3d8>
    9278:	4922      	ldr	r1, [pc, #136]	; (9304 <MPSL_IRQ_RADIO_Handler+0x3e4>)
    927a:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    927e:	9003      	str	r0, [sp, #12]
    9280:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    9284:	f8d4 b000 	ldr.w	fp, [r4]
    9288:	eb08 1645 	add.w	r6, r8, r5, lsl #5
    928c:	f106 0008 	add.w	r0, r6, #8
    9290:	eb1b 0201 	adds.w	r2, fp, r1
    9294:	eb43 0107 	adc.w	r1, r3, r7
    9298:	e9d0 9300 	ldrd	r9, r3, [r0]
    929c:	ebb9 0202 	subs.w	r2, r9, r2
    92a0:	eb73 0101 	sbcs.w	r1, r3, r1
    92a4:	d31b      	bcc.n	92de <MPSL_IRQ_RADIO_Handler+0x3be>
    92a6:	89c0      	ldrh	r0, [r0, #14]
    92a8:	b330      	cbz	r0, 92f8 <MPSL_IRQ_RADIO_Handler+0x3d8>
    92aa:	89e0      	ldrh	r0, [r4, #14]
    92ac:	bb20      	cbnz	r0, 92f8 <MPSL_IRQ_RADIO_Handler+0x3d8>
    92ae:	f003 f835 	bl	c31c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    92b2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    92b6:	bf08      	it	eq
    92b8:	200d      	moveq	r0, #13
    92ba:	d00b      	beq.n	92d4 <MPSL_IRQ_RADIO_Handler+0x3b4>
    92bc:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    92c0:	3856      	subs	r0, #86	; 0x56
    92c2:	bf08      	it	eq
    92c4:	201c      	moveq	r0, #28
    92c6:	d005      	beq.n	92d4 <MPSL_IRQ_RADIO_Handler+0x3b4>
    92c8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    92cc:	389f      	subs	r0, #159	; 0x9f
    92ce:	bf14      	ite	ne
    92d0:	4638      	movne	r0, r7
    92d2:	2032      	moveq	r0, #50	; 0x32
    92d4:	1c40      	adds	r0, r0, #1
    92d6:	ebb9 010b 	subs.w	r1, r9, fp
    92da:	4281      	cmp	r1, r0
    92dc:	da0c      	bge.n	92f8 <MPSL_IRQ_RADIO_Handler+0x3d8>
    92de:	f88a 5000 	strb.w	r5, [sl]
    92e2:	7e30      	ldrb	r0, [r6, #24]
    92e4:	7c21      	ldrb	r1, [r4, #16]
    92e6:	4281      	cmp	r1, r0
    92e8:	f4bf af22 	bcs.w	9130 <MPSL_IRQ_RADIO_Handler+0x210>
    92ec:	9803      	ldr	r0, [sp, #12]
    92ee:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    92f2:	7845      	ldrb	r5, [r0, #1]
    92f4:	2d20      	cmp	r5, #32
    92f6:	d1c3      	bne.n	9280 <MPSL_IRQ_RADIO_Handler+0x360>
    92f8:	b00f      	add	sp, #60	; 0x3c
    92fa:	2001      	movs	r0, #1
    92fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9300:	20001108 	.word	0x20001108
    9304:	20001088 	.word	0x20001088
    9308:	20000c88 	.word	0x20000c88
    930c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9310:	b083      	sub	sp, #12
    9312:	4691      	mov	r9, r2
    9314:	4604      	mov	r4, r0
    9316:	460d      	mov	r5, r1
    9318:	4698      	mov	r8, r3
    931a:	aa01      	add	r2, sp, #4
    931c:	4669      	mov	r1, sp
    931e:	4618      	mov	r0, r3
    9320:	f002 f926 	bl	b570 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9324:	f002 fe22 	bl	bf6c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    9328:	f002 f906 	bl	b538 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    932c:	4607      	mov	r7, r0
    932e:	481e      	ldr	r0, [pc, #120]	; (93a8 <MPSL_IRQ_RADIO_Handler+0x488>)
    9330:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
    9334:	2600      	movs	r6, #0
    9336:	2920      	cmp	r1, #32
    9338:	d009      	beq.n	934e <MPSL_IRQ_RADIO_Handler+0x42e>
    933a:	6882      	ldr	r2, [r0, #8]
    933c:	68c1      	ldr	r1, [r0, #12]
    933e:	6900      	ldr	r0, [r0, #16]
    9340:	1d83      	adds	r3, r0, #6
    9342:	f146 0000 	adc.w	r0, r6, #0
    9346:	18d4      	adds	r4, r2, r3
    9348:	eb41 0500 	adc.w	r5, r1, r0
    934c:	e026      	b.n	939c <MPSL_IRQ_RADIO_Handler+0x47c>
    934e:	340a      	adds	r4, #10
    9350:	f145 0500 	adc.w	r5, r5, #0
    9354:	f1b8 0f00 	cmp.w	r8, #0
    9358:	d017      	beq.n	938a <MPSL_IRQ_RADIO_Handler+0x46a>
    935a:	f003 f925 	bl	c5a8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    935e:	b9a0      	cbnz	r0, 938a <MPSL_IRQ_RADIO_Handler+0x46a>
    9360:	f002 ffdc 	bl	c31c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9364:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9368:	bf08      	it	eq
    936a:	200d      	moveq	r0, #13
    936c:	d00b      	beq.n	9386 <MPSL_IRQ_RADIO_Handler+0x466>
    936e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9372:	3856      	subs	r0, #86	; 0x56
    9374:	bf08      	it	eq
    9376:	201c      	moveq	r0, #28
    9378:	d005      	beq.n	9386 <MPSL_IRQ_RADIO_Handler+0x466>
    937a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    937e:	389f      	subs	r0, #159	; 0x9f
    9380:	bf14      	ite	ne
    9382:	4630      	movne	r0, r6
    9384:	2032      	moveq	r0, #50	; 0x32
    9386:	1904      	adds	r4, r0, r4
    9388:	4175      	adcs	r5, r6
    938a:	f1b9 0f00 	cmp.w	r9, #0
    938e:	d105      	bne.n	939c <MPSL_IRQ_RADIO_Handler+0x47c>
    9390:	9800      	ldr	r0, [sp, #0]
    9392:	4287      	cmp	r7, r0
    9394:	d902      	bls.n	939c <MPSL_IRQ_RADIO_Handler+0x47c>
    9396:	1a38      	subs	r0, r7, r0
    9398:	1904      	adds	r4, r0, r4
    939a:	4175      	adcs	r5, r6
    939c:	b003      	add	sp, #12
    939e:	4620      	mov	r0, r4
    93a0:	4629      	mov	r1, r5
    93a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    93a6:	0000      	.short	0x0000
    93a8:	20001108 	.word	0x20001108
    93ac:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    93b0:	b081      	sub	sp, #4
    93b2:	4605      	mov	r5, r0
    93b4:	9802      	ldr	r0, [sp, #8]
    93b6:	494a      	ldr	r1, [pc, #296]	; (94e0 <MPSL_IRQ_RADIO_Handler+0x5c0>)
    93b8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    93bc:	4408      	add	r0, r1
    93be:	2600      	movs	r6, #0
    93c0:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    93c4:	2020      	movs	r0, #32
    93c6:	4692      	mov	sl, r2
    93c8:	7010      	strb	r0, [r2, #0]
    93ca:	f5a1 6990 	sub.w	r9, r1, #1152	; 0x480
    93ce:	2c20      	cmp	r4, #32
    93d0:	d036      	beq.n	9440 <MPSL_IRQ_RADIO_Handler+0x520>
    93d2:	9902      	ldr	r1, [sp, #8]
    93d4:	f509 6080 	add.w	r0, r9, #1024	; 0x400
    93d8:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    93dc:	eb09 1044 	add.w	r0, r9, r4, lsl #5
    93e0:	e9d5 7300 	ldrd	r7, r3, [r5]
    93e4:	f850 8f08 	ldr.w	r8, [r0, #8]!
    93e8:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    93ec:	eb18 0202 	adds.w	r2, r8, r2
    93f0:	4171      	adcs	r1, r6
    93f2:	1aba      	subs	r2, r7, r2
    93f4:	eb73 0101 	sbcs.w	r1, r3, r1
    93f8:	d322      	bcc.n	9440 <MPSL_IRQ_RADIO_Handler+0x520>
    93fa:	89e9      	ldrh	r1, [r5, #14]
    93fc:	b1c9      	cbz	r1, 9432 <MPSL_IRQ_RADIO_Handler+0x512>
    93fe:	89c0      	ldrh	r0, [r0, #14]
    9400:	b9b8      	cbnz	r0, 9432 <MPSL_IRQ_RADIO_Handler+0x512>
    9402:	f002 ff8b 	bl	c31c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9406:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    940a:	bf08      	it	eq
    940c:	200d      	moveq	r0, #13
    940e:	d00b      	beq.n	9428 <MPSL_IRQ_RADIO_Handler+0x508>
    9410:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9414:	3856      	subs	r0, #86	; 0x56
    9416:	bf08      	it	eq
    9418:	201c      	moveq	r0, #28
    941a:	d005      	beq.n	9428 <MPSL_IRQ_RADIO_Handler+0x508>
    941c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9420:	389f      	subs	r0, #159	; 0x9f
    9422:	bf14      	ite	ne
    9424:	4630      	movne	r0, r6
    9426:	2032      	moveq	r0, #50	; 0x32
    9428:	1c41      	adds	r1, r0, #1
    942a:	ebb7 0008 	subs.w	r0, r7, r8
    942e:	4288      	cmp	r0, r1
    9430:	db06      	blt.n	9440 <MPSL_IRQ_RADIO_Handler+0x520>
    9432:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    9436:	f88a 4000 	strb.w	r4, [sl]
    943a:	7844      	ldrb	r4, [r0, #1]
    943c:	2c20      	cmp	r4, #32
    943e:	d1cd      	bne.n	93dc <MPSL_IRQ_RADIO_Handler+0x4bc>
    9440:	9804      	ldr	r0, [sp, #16]
    9442:	f89a 1000 	ldrb.w	r1, [sl]
    9446:	2c20      	cmp	r4, #32
    9448:	7001      	strb	r1, [r0, #0]
    944a:	9f04      	ldr	r7, [sp, #16]
    944c:	9802      	ldr	r0, [sp, #8]
    944e:	d042      	beq.n	94d6 <MPSL_IRQ_RADIO_Handler+0x5b6>
    9450:	4924      	ldr	r1, [pc, #144]	; (94e4 <MPSL_IRQ_RADIO_Handler+0x5c4>)
    9452:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    9456:	9000      	str	r0, [sp, #0]
    9458:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
    945c:	f8d5 b000 	ldr.w	fp, [r5]
    9460:	eb09 1844 	add.w	r8, r9, r4, lsl #5
    9464:	f108 0008 	add.w	r0, r8, #8
    9468:	eb1b 0201 	adds.w	r2, fp, r1
    946c:	eb43 0106 	adc.w	r1, r3, r6
    9470:	e9d0 a300 	ldrd	sl, r3, [r0]
    9474:	ebba 0202 	subs.w	r2, sl, r2
    9478:	eb73 0101 	sbcs.w	r1, r3, r1
    947c:	d31b      	bcc.n	94b6 <MPSL_IRQ_RADIO_Handler+0x596>
    947e:	89c0      	ldrh	r0, [r0, #14]
    9480:	b348      	cbz	r0, 94d6 <MPSL_IRQ_RADIO_Handler+0x5b6>
    9482:	89e8      	ldrh	r0, [r5, #14]
    9484:	bb38      	cbnz	r0, 94d6 <MPSL_IRQ_RADIO_Handler+0x5b6>
    9486:	f002 ff49 	bl	c31c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    948a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    948e:	bf08      	it	eq
    9490:	200d      	moveq	r0, #13
    9492:	d00b      	beq.n	94ac <MPSL_IRQ_RADIO_Handler+0x58c>
    9494:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9498:	3856      	subs	r0, #86	; 0x56
    949a:	bf08      	it	eq
    949c:	201c      	moveq	r0, #28
    949e:	d005      	beq.n	94ac <MPSL_IRQ_RADIO_Handler+0x58c>
    94a0:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    94a4:	389f      	subs	r0, #159	; 0x9f
    94a6:	bf14      	ite	ne
    94a8:	4630      	movne	r0, r6
    94aa:	2032      	moveq	r0, #50	; 0x32
    94ac:	1c41      	adds	r1, r0, #1
    94ae:	ebba 000b 	subs.w	r0, sl, fp
    94b2:	4288      	cmp	r0, r1
    94b4:	da0f      	bge.n	94d6 <MPSL_IRQ_RADIO_Handler+0x5b6>
    94b6:	703c      	strb	r4, [r7, #0]
    94b8:	f898 1018 	ldrb.w	r1, [r8, #24]
    94bc:	7c28      	ldrb	r0, [r5, #16]
    94be:	4288      	cmp	r0, r1
    94c0:	d303      	bcc.n	94ca <MPSL_IRQ_RADIO_Handler+0x5aa>
    94c2:	b005      	add	sp, #20
    94c4:	2000      	movs	r0, #0
    94c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    94ca:	9800      	ldr	r0, [sp, #0]
    94cc:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    94d0:	7844      	ldrb	r4, [r0, #1]
    94d2:	2c20      	cmp	r4, #32
    94d4:	d1c0      	bne.n	9458 <MPSL_IRQ_RADIO_Handler+0x538>
    94d6:	b005      	add	sp, #20
    94d8:	2001      	movs	r0, #1
    94da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    94de:	0000      	.short	0x0000
    94e0:	20001108 	.word	0x20001108
    94e4:	20001088 	.word	0x20001088
    94e8:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    94ec:	b09c      	sub	sp, #112	; 0x70
    94ee:	461e      	mov	r6, r3
    94f0:	f002 fa8e 	bl	ba10 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    94f4:	4604      	mov	r4, r0
    94f6:	460d      	mov	r5, r1
    94f8:	f002 fd38 	bl	bf6c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    94fc:	4680      	mov	r8, r0
    94fe:	981e      	ldr	r0, [sp, #120]	; 0x78
    9500:	2801      	cmp	r0, #1
    9502:	bf18      	it	ne
    9504:	2802      	cmpne	r0, #2
    9506:	d005      	beq.n	9514 <MPSL_IRQ_RADIO_Handler+0x5f4>
    9508:	f640 1156 	movw	r1, #2390	; 0x956
    950c:	f04f 0070 	mov.w	r0, #112	; 0x70
    9510:	f003 f8c2 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9514:	49fe      	ldr	r1, [pc, #1016]	; (9910 <MPSL_IRQ_RADIO_Handler+0x9f0>)
    9516:	2001      	movs	r0, #1
    9518:	6008      	str	r0, [r1, #0]
    951a:	49fe      	ldr	r1, [pc, #1016]	; (9914 <MPSL_IRQ_RADIO_Handler+0x9f4>)
    951c:	6889      	ldr	r1, [r1, #8]
    951e:	6008      	str	r0, [r1, #0]
    9520:	2000      	movs	r0, #0
    9522:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
    9526:	900c      	str	r0, [sp, #48]	; 0x30
    9528:	1e40      	subs	r0, r0, #1
    952a:	900d      	str	r0, [sp, #52]	; 0x34
    952c:	48fa      	ldr	r0, [pc, #1000]	; (9918 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    952e:	eb00 1046 	add.w	r0, r0, r6, lsl #5
    9532:	f100 0108 	add.w	r1, r0, #8
    9536:	e9d0 6006 	ldrd	r6, r0, [r0, #24]
    953a:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    953e:	e9cd 6012 	strd	r6, r0, [sp, #72]	; 0x48
    9542:	a80e      	add	r0, sp, #56	; 0x38
    9544:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    9548:	f021 407f 	bic.w	r0, r1, #4278190080	; 0xff000000
    954c:	f007 fa27 	bl	1099e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9550:	4602      	mov	r2, r0
    9552:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
    9556:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    955a:	4bf0      	ldr	r3, [pc, #960]	; (991c <MPSL_IRQ_RADIO_Handler+0x9fc>)
    955c:	4448      	add	r0, r9
    955e:	1c41      	adds	r1, r0, #1
    9560:	1850      	adds	r0, r2, r1
    9562:	429a      	cmp	r2, r3
    9564:	d857      	bhi.n	9616 <MPSL_IRQ_RADIO_Handler+0x6f6>
    9566:	4aee      	ldr	r2, [pc, #952]	; (9920 <MPSL_IRQ_RADIO_Handler+0xa00>)
    9568:	4291      	cmp	r1, r2
    956a:	dc5c      	bgt.n	9626 <MPSL_IRQ_RADIO_Handler+0x706>
    956c:	4252      	negs	r2, r2
    956e:	4291      	cmp	r1, r2
    9570:	db61      	blt.n	9636 <MPSL_IRQ_RADIO_Handler+0x716>
    9572:	1c59      	adds	r1, r3, #1
    9574:	4281      	cmp	r1, r0
    9576:	bfdc      	itt	le
    9578:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    957c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    9580:	dd05      	ble.n	958e <MPSL_IRQ_RADIO_Handler+0x66e>
    9582:	2800      	cmp	r0, #0
    9584:	bfbc      	itt	lt
    9586:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    958a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    958e:	9017      	str	r0, [sp, #92]	; 0x5c
    9590:	48e4      	ldr	r0, [pc, #912]	; (9924 <MPSL_IRQ_RADIO_Handler+0xa04>)
    9592:	f1b9 0f00 	cmp.w	r9, #0
    9596:	f8b0 00a0 	ldrh.w	r0, [r0, #160]	; 0xa0
    959a:	f8ad 0050 	strh.w	r0, [sp, #80]	; 0x50
    959e:	bf14      	ite	ne
    95a0:	f04f 0b01 	movne.w	fp, #1
    95a4:	f04f 0b00 	moveq.w	fp, #0
    95a8:	f002 fffe 	bl	c5a8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    95ac:	9019      	str	r0, [sp, #100]	; 0x64
    95ae:	f1bb 0f00 	cmp.w	fp, #0
    95b2:	d00c      	beq.n	95ce <MPSL_IRQ_RADIO_Handler+0x6ae>
    95b4:	49dc      	ldr	r1, [pc, #880]	; (9928 <MPSL_IRQ_RADIO_Handler+0xa08>)
    95b6:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
    95ba:	ea6f 0000 	mvn.w	r0, r0
    95be:	ea70 0001 	orns	r0, r0, r1
    95c2:	bf02      	ittt	eq
    95c4:	9819      	ldreq	r0, [sp, #100]	; 0x64
    95c6:	2800      	cmpeq	r0, #0
    95c8:	f04f 0a01 	moveq.w	sl, #1
    95cc:	d001      	beq.n	95d2 <MPSL_IRQ_RADIO_Handler+0x6b2>
    95ce:	f04f 0a00 	mov.w	sl, #0
    95d2:	f002 fea3 	bl	c31c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    95d6:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    95da:	bf08      	it	eq
    95dc:	200d      	moveq	r0, #13
    95de:	d00b      	beq.n	95f8 <MPSL_IRQ_RADIO_Handler+0x6d8>
    95e0:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    95e4:	3856      	subs	r0, #86	; 0x56
    95e6:	bf08      	it	eq
    95e8:	201c      	moveq	r0, #28
    95ea:	d005      	beq.n	95f8 <MPSL_IRQ_RADIO_Handler+0x6d8>
    95ec:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    95f0:	389f      	subs	r0, #159	; 0x9f
    95f2:	bf14      	ite	ne
    95f4:	2000      	movne	r0, #0
    95f6:	2032      	moveq	r0, #50	; 0x32
    95f8:	2600      	movs	r6, #0
    95fa:	4637      	mov	r7, r6
    95fc:	9016      	str	r0, [sp, #88]	; 0x58
    95fe:	45c8      	cmp	r8, r9
    9600:	d937      	bls.n	9672 <MPSL_IRQ_RADIO_Handler+0x752>
    9602:	9917      	ldr	r1, [sp, #92]	; 0x5c
    9604:	4ec5      	ldr	r6, [pc, #788]	; (991c <MPSL_IRQ_RADIO_Handler+0x9fc>)
    9606:	ea6f 0c08 	mvn.w	ip, r8
    960a:	466b      	mov	r3, sp
    960c:	aa1a      	add	r2, sp, #104	; 0x68
    960e:	eb01 000c 	add.w	r0, r1, ip
    9612:	42b1      	cmp	r1, r6
    9614:	d904      	bls.n	9620 <MPSL_IRQ_RADIO_Handler+0x700>
    9616:	f240 517f 	movw	r1, #1407	; 0x57f
    961a:	2070      	movs	r0, #112	; 0x70
    961c:	f003 f83c 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9620:	49bf      	ldr	r1, [pc, #764]	; (9920 <MPSL_IRQ_RADIO_Handler+0xa00>)
    9622:	458c      	cmp	ip, r1
    9624:	dd04      	ble.n	9630 <MPSL_IRQ_RADIO_Handler+0x710>
    9626:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    962a:	2070      	movs	r0, #112	; 0x70
    962c:	f003 f834 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9630:	49be      	ldr	r1, [pc, #760]	; (992c <MPSL_IRQ_RADIO_Handler+0xa0c>)
    9632:	458c      	cmp	ip, r1
    9634:	da04      	bge.n	9640 <MPSL_IRQ_RADIO_Handler+0x720>
    9636:	f240 5181 	movw	r1, #1409	; 0x581
    963a:	2070      	movs	r0, #112	; 0x70
    963c:	f003 f82c 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9640:	49bb      	ldr	r1, [pc, #748]	; (9930 <MPSL_IRQ_RADIO_Handler+0xa10>)
    9642:	4281      	cmp	r1, r0
    9644:	bfdc      	itt	le
    9646:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    964a:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    964e:	dd05      	ble.n	965c <MPSL_IRQ_RADIO_Handler+0x73c>
    9650:	2800      	cmp	r0, #0
    9652:	bfbc      	itt	lt
    9654:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    9658:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    965c:	4619      	mov	r1, r3
    965e:	f001 ff87 	bl	b570 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9662:	9800      	ldr	r0, [sp, #0]
    9664:	990e      	ldr	r1, [sp, #56]	; 0x38
    9666:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    966a:	9000      	str	r0, [sp, #0]
    966c:	1a08      	subs	r0, r1, r0
    966e:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
    9672:	f1ba 0f00 	cmp.w	sl, #0
    9676:	bf18      	it	ne
    9678:	9f16      	ldrne	r7, [sp, #88]	; 0x58
    967a:	d104      	bne.n	9686 <MPSL_IRQ_RADIO_Handler+0x766>
    967c:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    9680:	2800      	cmp	r0, #0
    9682:	bf18      	it	ne
    9684:	2702      	movne	r7, #2
    9686:	43e0      	mvns	r0, r4
    9688:	ea70 0005 	orns	r0, r0, r5
    968c:	d022      	beq.n	96d4 <MPSL_IRQ_RADIO_Handler+0x7b4>
    968e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    9692:	1a22      	subs	r2, r4, r0
    9694:	eb75 0201 	sbcs.w	r2, r5, r1
    9698:	d20c      	bcs.n	96b4 <MPSL_IRQ_RADIO_Handler+0x794>
    969a:	1b02      	subs	r2, r0, r4
    969c:	eb61 0105 	sbc.w	r1, r1, r5
    96a0:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    96a4:	f171 0100 	sbcs.w	r1, r1, #0
    96a8:	d311      	bcc.n	96ce <MPSL_IRQ_RADIO_Handler+0x7ae>
    96aa:	f640 1195 	movw	r1, #2453	; 0x995
    96ae:	2070      	movs	r0, #112	; 0x70
    96b0:	f002 fff2 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    96b4:	1a22      	subs	r2, r4, r0
    96b6:	eb65 0101 	sbc.w	r1, r5, r1
    96ba:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    96be:	f171 0100 	sbcs.w	r1, r1, #0
    96c2:	d304      	bcc.n	96ce <MPSL_IRQ_RADIO_Handler+0x7ae>
    96c4:	f640 1199 	movw	r1, #2457	; 0x999
    96c8:	2070      	movs	r0, #112	; 0x70
    96ca:	f002 ffe5 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    96ce:	1b00      	subs	r0, r0, r4
    96d0:	2801      	cmp	r0, #1
    96d2:	da03      	bge.n	96dc <MPSL_IRQ_RADIO_Handler+0x7bc>
    96d4:	981c      	ldr	r0, [sp, #112]	; 0x70
    96d6:	901a      	str	r0, [sp, #104]	; 0x68
    96d8:	2003      	movs	r0, #3
    96da:	e00d      	b.n	96f8 <MPSL_IRQ_RADIO_Handler+0x7d8>
    96dc:	f1ba 0f00 	cmp.w	sl, #0
    96e0:	d008      	beq.n	96f4 <MPSL_IRQ_RADIO_Handler+0x7d4>
    96e2:	4891      	ldr	r0, [pc, #580]	; (9928 <MPSL_IRQ_RADIO_Handler+0xa08>)
    96e4:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    96e8:	b120      	cbz	r0, 96f4 <MPSL_IRQ_RADIO_Handler+0x7d4>
    96ea:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    96ee:	1c07      	adds	r7, r0, #0
    96f0:	bf18      	it	ne
    96f2:	2702      	movne	r7, #2
    96f4:	2000      	movs	r0, #0
    96f6:	941a      	str	r4, [sp, #104]	; 0x68
    96f8:	4407      	add	r7, r0
    96fa:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    96fe:	1b80      	subs	r0, r0, r6
    9700:	f162 0100 	sbc.w	r1, r2, #0
    9704:	1e42      	subs	r2, r0, #1
    9706:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
    970a:	f141 33ff 	adc.w	r3, r1, #4294967295
    970e:	ebb2 0c0c 	subs.w	ip, r2, ip
    9712:	45bc      	cmp	ip, r7
    9714:	db08      	blt.n	9728 <MPSL_IRQ_RADIO_Handler+0x808>
    9716:	b3a6      	cbz	r6, 9782 <MPSL_IRQ_RADIO_Handler+0x862>
    9718:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    971c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    9720:	44b4      	add	ip, r6
    9722:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
    9726:	e02c      	b.n	9782 <MPSL_IRQ_RADIO_Handler+0x862>
    9728:	b12e      	cbz	r6, 9736 <MPSL_IRQ_RADIO_Handler+0x816>
    972a:	f89d 0051 	ldrb.w	r0, [sp, #81]	; 0x51
    972e:	b930      	cbnz	r0, 973e <MPSL_IRQ_RADIO_Handler+0x81e>
    9730:	f002 fc12 	bl	bf58 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    9734:	b118      	cbz	r0, 973e <MPSL_IRQ_RADIO_Handler+0x81e>
    9736:	f1ba 0f00 	cmp.w	sl, #0
    973a:	d114      	bne.n	9766 <MPSL_IRQ_RADIO_Handler+0x846>
    973c:	e00c      	b.n	9758 <MPSL_IRQ_RADIO_Handler+0x838>
    973e:	f1ba 0f00 	cmp.w	sl, #0
    9742:	d104      	bne.n	974e <MPSL_IRQ_RADIO_Handler+0x82e>
    9744:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    9748:	2800      	cmp	r0, #0
    974a:	bf18      	it	ne
    974c:	1ebf      	subne	r7, r7, #2
    974e:	2600      	movs	r6, #0
    9750:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
    9754:	46b0      	mov	r8, r6
    9756:	e006      	b.n	9766 <MPSL_IRQ_RADIO_Handler+0x846>
    9758:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    975c:	b118      	cbz	r0, 9766 <MPSL_IRQ_RADIO_Handler+0x846>
    975e:	2000      	movs	r0, #0
    9760:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    9764:	1ebf      	subs	r7, r7, #2
    9766:	e9dd 020e 	ldrd	r0, r2, [sp, #56]	; 0x38
    976a:	1b80      	subs	r0, r0, r6
    976c:	f162 0100 	sbc.w	r1, r2, #0
    9770:	1e42      	subs	r2, r0, #1
    9772:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
    9776:	f141 33ff 	adc.w	r3, r1, #4294967295
    977a:	ebb2 0c0c 	subs.w	ip, r2, ip
    977e:	45bc      	cmp	ip, r7
    9780:	db7e      	blt.n	9880 <MPSL_IRQ_RADIO_Handler+0x960>
    9782:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
    9786:	f1bc 0f00 	cmp.w	ip, #0
    978a:	d111      	bne.n	97b0 <MPSL_IRQ_RADIO_Handler+0x890>
    978c:	f8df c198 	ldr.w	ip, [pc, #408]	; 9928 <MPSL_IRQ_RADIO_Handler+0xa08>
    9790:	e9dc 6c0e 	ldrd	r6, ip, [ip, #56]	; 0x38
    9794:	43f7      	mvns	r7, r6
    9796:	ea77 070c 	orns	r7, r7, ip
    979a:	d009      	beq.n	97b0 <MPSL_IRQ_RADIO_Handler+0x890>
    979c:	1b86      	subs	r6, r0, r6
    979e:	9816      	ldr	r0, [sp, #88]	; 0x58
    97a0:	eb61 010c 	sbc.w	r1, r1, ip
    97a4:	1a30      	subs	r0, r6, r0
    97a6:	f171 0000 	sbcs.w	r0, r1, #0
    97aa:	bf38      	it	cc
    97ac:	2000      	movcc	r0, #0
    97ae:	d300      	bcc.n	97b2 <MPSL_IRQ_RADIO_Handler+0x892>
    97b0:	2001      	movs	r0, #1
    97b2:	ea3b 0000 	bics.w	r0, fp, r0
    97b6:	d163      	bne.n	9880 <MPSL_IRQ_RADIO_Handler+0x960>
    97b8:	e9dd 101c 	ldrd	r1, r0, [sp, #112]	; 0x70
    97bc:	e9cd 0107 	strd	r0, r1, [sp, #28]
    97c0:	981e      	ldr	r0, [sp, #120]	; 0x78
    97c2:	4616      	mov	r6, r2
    97c4:	e9cd a018 	strd	sl, r0, [sp, #96]	; 0x60
    97c8:	461f      	mov	r7, r3
    97ca:	f04f 0a00 	mov.w	sl, #0
    97ce:	f002 fda5 	bl	c31c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    97d2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    97d6:	bf08      	it	eq
    97d8:	200d      	moveq	r0, #13
    97da:	d00b      	beq.n	97f4 <MPSL_IRQ_RADIO_Handler+0x8d4>
    97dc:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    97e0:	3856      	subs	r0, #86	; 0x56
    97e2:	bf08      	it	eq
    97e4:	201c      	moveq	r0, #28
    97e6:	d005      	beq.n	97f4 <MPSL_IRQ_RADIO_Handler+0x8d4>
    97e8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    97ec:	389f      	subs	r0, #159	; 0x9f
    97ee:	bf14      	ite	ne
    97f0:	4650      	movne	r0, sl
    97f2:	2032      	moveq	r0, #50	; 0x32
    97f4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    97f8:	300b      	adds	r0, #11
    97fa:	1ab2      	subs	r2, r6, r2
    97fc:	eb67 0303 	sbc.w	r3, r7, r3
    9800:	1a10      	subs	r0, r2, r0
    9802:	f173 0000 	sbcs.w	r0, r3, #0
    9806:	d229      	bcs.n	985c <MPSL_IRQ_RADIO_Handler+0x93c>
    9808:	9819      	ldr	r0, [sp, #100]	; 0x64
    980a:	2801      	cmp	r0, #1
    980c:	d002      	beq.n	9814 <MPSL_IRQ_RADIO_Handler+0x8f4>
    980e:	9818      	ldr	r0, [sp, #96]	; 0x60
    9810:	b148      	cbz	r0, 9826 <MPSL_IRQ_RADIO_Handler+0x906>
    9812:	e016      	b.n	9842 <MPSL_IRQ_RADIO_Handler+0x922>
    9814:	43e0      	mvns	r0, r4
    9816:	ea70 0005 	orns	r0, r0, r5
    981a:	d126      	bne.n	986a <MPSL_IRQ_RADIO_Handler+0x94a>
    981c:	f640 01d7 	movw	r1, #2263	; 0x8d7
    9820:	2070      	movs	r0, #112	; 0x70
    9822:	f002 ff39 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9826:	43e0      	mvns	r0, r4
    9828:	ea70 0005 	orns	r0, r0, r5
    982c:	d009      	beq.n	9842 <MPSL_IRQ_RADIO_Handler+0x922>
    982e:	d01c      	beq.n	986a <MPSL_IRQ_RADIO_Handler+0x94a>
    9830:	1ba0      	subs	r0, r4, r6
    9832:	eb65 0107 	sbc.w	r1, r5, r7
    9836:	2300      	movs	r3, #0
    9838:	f1d0 0204 	rsbs	r2, r0, #4
    983c:	eb73 0201 	sbcs.w	r2, r3, r1
    9840:	da06      	bge.n	9850 <MPSL_IRQ_RADIO_Handler+0x930>
    9842:	4634      	mov	r4, r6
    9844:	463d      	mov	r5, r7
    9846:	4620      	mov	r0, r4
    9848:	4629      	mov	r1, r5
    984a:	f001 ffc1 	bl	b7d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    984e:	e00c      	b.n	986a <MPSL_IRQ_RADIO_Handler+0x94a>
    9850:	2200      	movs	r2, #0
    9852:	1a10      	subs	r0, r2, r0
    9854:	eb72 0001 	sbcs.w	r0, r2, r1
    9858:	db12      	blt.n	9880 <MPSL_IRQ_RADIO_Handler+0x960>
    985a:	e006      	b.n	986a <MPSL_IRQ_RADIO_Handler+0x94a>
    985c:	4634      	mov	r4, r6
    985e:	463d      	mov	r5, r7
    9860:	4620      	mov	r0, r4
    9862:	4629      	mov	r1, r5
    9864:	f001 ffb4 	bl	b7d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    9868:	46da      	mov	sl, fp
    986a:	4626      	mov	r6, r4
    986c:	43f1      	mvns	r1, r6
    986e:	ea71 0005 	orns	r0, r1, r5
    9872:	d06f      	beq.n	9954 <MPSL_IRQ_RADIO_Handler+0xa34>
    9874:	990e      	ldr	r1, [sp, #56]	; 0x38
    9876:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    987a:	2700      	movs	r7, #0
    987c:	1a0b      	subs	r3, r1, r0
    987e:	e000      	b.n	9882 <MPSL_IRQ_RADIO_Handler+0x962>
    9880:	e06d      	b.n	995e <MPSL_IRQ_RADIO_Handler+0xa3e>
    9882:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    9886:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    988a:	eb11 010c 	adds.w	r1, r1, ip
    988e:	1a08      	subs	r0, r1, r0
    9890:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9894:	2b01      	cmp	r3, #1
    9896:	d362      	bcc.n	995e <MPSL_IRQ_RADIO_Handler+0xa3e>
    9898:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    989c:	bf98      	it	ls
    989e:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    98a2:	d85c      	bhi.n	995e <MPSL_IRQ_RADIO_Handler+0xa3e>
    98a4:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    98a8:	f007 f879 	bl	1099e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    98ac:	9917      	ldr	r1, [sp, #92]	; 0x5c
    98ae:	4a1c      	ldr	r2, [pc, #112]	; (9920 <MPSL_IRQ_RADIO_Handler+0xa00>)
    98b0:	1a0c      	subs	r4, r1, r0
    98b2:	1aa2      	subs	r2, r4, r2
    98b4:	f177 0200 	sbcs.w	r2, r7, #0
    98b8:	d316      	bcc.n	98e8 <MPSL_IRQ_RADIO_Handler+0x9c8>
    98ba:	4b19      	ldr	r3, [pc, #100]	; (9920 <MPSL_IRQ_RADIO_Handler+0xa00>)
    98bc:	1a42      	subs	r2, r0, r1
    98be:	1ad3      	subs	r3, r2, r3
    98c0:	f177 0300 	sbcs.w	r3, r7, #0
    98c4:	d310      	bcc.n	98e8 <MPSL_IRQ_RADIO_Handler+0x9c8>
    98c6:	4b15      	ldr	r3, [pc, #84]	; (991c <MPSL_IRQ_RADIO_Handler+0x9fc>)
    98c8:	42a3      	cmp	r3, r4
    98ca:	bf3e      	ittt	cc
    98cc:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    98d0:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    98d4:	1844      	addcc	r4, r0, r1
    98d6:	d307      	bcc.n	98e8 <MPSL_IRQ_RADIO_Handler+0x9c8>
    98d8:	4293      	cmp	r3, r2
    98da:	d244      	bcs.n	9966 <MPSL_IRQ_RADIO_Handler+0xa46>
    98dc:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    98e0:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    98e4:	4408      	add	r0, r1
    98e6:	4244      	negs	r4, r0
    98e8:	4d0f      	ldr	r5, [pc, #60]	; (9928 <MPSL_IRQ_RADIO_Handler+0xa08>)
    98ea:	f895 0022 	ldrb.w	r0, [r5, #34]	; 0x22
    98ee:	b378      	cbz	r0, 9950 <MPSL_IRQ_RADIO_Handler+0xa30>
    98f0:	981e      	ldr	r0, [sp, #120]	; 0x78
    98f2:	2801      	cmp	r0, #1
    98f4:	d005      	beq.n	9902 <MPSL_IRQ_RADIO_Handler+0x9e2>
    98f6:	2002      	movs	r0, #2
    98f8:	f002 f9f6 	bl	bce8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    98fc:	2001      	movs	r0, #1
    98fe:	f002 f9f3 	bl	bce8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9902:	45c1      	cmp	r9, r8
    9904:	d240      	bcs.n	9988 <MPSL_IRQ_RADIO_Handler+0xa68>
    9906:	eba4 0108 	sub.w	r1, r4, r8
    990a:	f04f 0002 	mov.w	r0, #2
    990e:	e011      	b.n	9934 <MPSL_IRQ_RADIO_Handler+0xa14>
    9910:	40000508 	.word	0x40000508
    9914:	20000308 	.word	0x20000308
    9918:	20000c88 	.word	0x20000c88
    991c:	1e847fff 	.word	0x1e847fff
    9920:	0f424000 	.word	0x0f424000
    9924:	20001088 	.word	0x20001088
    9928:	20001108 	.word	0x20001108
    992c:	f0bdc000 	.word	0xf0bdc000
    9930:	1e848000 	.word	0x1e848000
    9934:	f002 f91e 	bl	bb74 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9938:	b3a8      	cbz	r0, 99a6 <MPSL_IRQ_RADIO_Handler+0xa86>
    993a:	f1b9 0f00 	cmp.w	r9, #0
    993e:	bf1c      	itt	ne
    9940:	eba4 0109 	subne.w	r1, r4, r9
    9944:	2001      	movne	r0, #1
    9946:	d037      	beq.n	99b8 <MPSL_IRQ_RADIO_Handler+0xa98>
    9948:	f002 f914 	bl	bb74 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    994c:	b358      	cbz	r0, 99a6 <MPSL_IRQ_RADIO_Handler+0xa86>
    994e:	e033      	b.n	99b8 <MPSL_IRQ_RADIO_Handler+0xa98>
    9950:	e00e      	b.n	9970 <MPSL_IRQ_RADIO_Handler+0xa50>
    9952:	e7ff      	b.n	9954 <MPSL_IRQ_RADIO_Handler+0xa34>
    9954:	f640 2103 	movw	r1, #2563	; 0xa03
    9958:	2070      	movs	r0, #112	; 0x70
    995a:	f002 fe9d 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    995e:	b020      	add	sp, #128	; 0x80
    9960:	2000      	movs	r0, #0
    9962:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9966:	f640 21d7 	movw	r1, #2775	; 0xad7
    996a:	2070      	movs	r0, #112	; 0x70
    996c:	f002 fe94 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9970:	45c1      	cmp	r9, r8
    9972:	bf34      	ite	cc
    9974:	4640      	movcc	r0, r8
    9976:	4648      	movcs	r0, r9
    9978:	301e      	adds	r0, #30
    997a:	42a0      	cmp	r0, r4
    997c:	dbb8      	blt.n	98f0 <MPSL_IRQ_RADIO_Handler+0x9d0>
    997e:	f640 2117 	movw	r1, #2583	; 0xa17
    9982:	2070      	movs	r0, #112	; 0x70
    9984:	f002 fe88 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9988:	d90e      	bls.n	99a8 <MPSL_IRQ_RADIO_Handler+0xa88>
    998a:	eba4 0109 	sub.w	r1, r4, r9
    998e:	2001      	movs	r0, #1
    9990:	f002 f8f0 	bl	bb74 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9994:	b138      	cbz	r0, 99a6 <MPSL_IRQ_RADIO_Handler+0xa86>
    9996:	f1b8 0f00 	cmp.w	r8, #0
    999a:	bf1c      	itt	ne
    999c:	eba4 0108 	subne.w	r1, r4, r8
    99a0:	2002      	movne	r0, #2
    99a2:	d009      	beq.n	99b8 <MPSL_IRQ_RADIO_Handler+0xa98>
    99a4:	e7d0      	b.n	9948 <MPSL_IRQ_RADIO_Handler+0xa28>
    99a6:	e038      	b.n	9a1a <MPSL_IRQ_RADIO_Handler+0xafa>
    99a8:	ea58 0009 	orrs.w	r0, r8, r9
    99ac:	d004      	beq.n	99b8 <MPSL_IRQ_RADIO_Handler+0xa98>
    99ae:	f640 113a 	movw	r1, #2362	; 0x93a
    99b2:	2070      	movs	r0, #112	; 0x70
    99b4:	f002 fe70 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    99b8:	4621      	mov	r1, r4
    99ba:	2000      	movs	r0, #0
    99bc:	f002 f8da 	bl	bb74 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    99c0:	b358      	cbz	r0, 9a1a <MPSL_IRQ_RADIO_Handler+0xafa>
    99c2:	f04f 0801 	mov.w	r8, #1
    99c6:	f1bb 0f00 	cmp.w	fp, #0
    99ca:	bf04      	itt	eq
    99cc:	f895 0040 	ldrbeq.w	r0, [r5, #64]	; 0x40
    99d0:	2800      	cmpeq	r0, #0
    99d2:	d002      	beq.n	99da <MPSL_IRQ_RADIO_Handler+0xaba>
    99d4:	f1ba 0f00 	cmp.w	sl, #0
    99d8:	d029      	beq.n	9a2e <MPSL_IRQ_RADIO_Handler+0xb0e>
    99da:	e9d5 100e 	ldrd	r1, r0, [r5, #56]	; 0x38
    99de:	43c9      	mvns	r1, r1
    99e0:	ea71 0000 	orns	r0, r1, r0
    99e4:	d006      	beq.n	99f4 <MPSL_IRQ_RADIO_Handler+0xad4>
    99e6:	f002 fc9f 	bl	c328 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    99ea:	f04f 30ff 	mov.w	r0, #4294967295
    99ee:	4601      	mov	r1, r0
    99f0:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    99f4:	f1ba 0f00 	cmp.w	sl, #0
    99f8:	d01f      	beq.n	9a3a <MPSL_IRQ_RADIO_Handler+0xb1a>
    99fa:	9816      	ldr	r0, [sp, #88]	; 0x58
    99fc:	1a30      	subs	r0, r6, r0
    99fe:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9a02:	f04f 0005 	mov.w	r0, #5
    9a06:	f002 f8b5 	bl	bb74 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9a0a:	b370      	cbz	r0, 9a6a <MPSL_IRQ_RADIO_Handler+0xb4a>
    9a0c:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
    9a10:	2800      	cmp	r0, #0
    9a12:	bf08      	it	eq
    9a14:	f885 8040 	strbeq.w	r8, [r5, #64]	; 0x40
    9a18:	e017      	b.n	9a4a <MPSL_IRQ_RADIO_Handler+0xb2a>
    9a1a:	2002      	movs	r0, #2
    9a1c:	f002 f964 	bl	bce8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9a20:	2001      	movs	r0, #1
    9a22:	f002 f961 	bl	bce8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9a26:	b020      	add	sp, #128	; 0x80
    9a28:	2000      	movs	r0, #0
    9a2a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9a2e:	e9d5 100e 	ldrd	r1, r0, [r5, #56]	; 0x38
    9a32:	43c9      	mvns	r1, r1
    9a34:	ea71 0000 	orns	r0, r1, r0
    9a38:	d012      	beq.n	9a60 <MPSL_IRQ_RADIO_Handler+0xb40>
    9a3a:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
    9a3e:	b120      	cbz	r0, 9a4a <MPSL_IRQ_RADIO_Handler+0xb2a>
    9a40:	2005      	movs	r0, #5
    9a42:	f002 f951 	bl	bce8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9a46:	f885 7040 	strb.w	r7, [r5, #64]	; 0x40
    9a4a:	eba4 0009 	sub.w	r0, r4, r9
    9a4e:	f1a0 0119 	sub.w	r1, r0, #25
    9a52:	2900      	cmp	r1, #0
    9a54:	dc0f      	bgt.n	9a76 <MPSL_IRQ_RADIO_Handler+0xb56>
    9a56:	f44f 6124 	mov.w	r1, #2624	; 0xa40
    9a5a:	2070      	movs	r0, #112	; 0x70
    9a5c:	f002 fe1c 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9a60:	f002 fc7e 	bl	c360 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    9a64:	f002 f864 	bl	bb30 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    9a68:	e7c2      	b.n	99f0 <MPSL_IRQ_RADIO_Handler+0xad0>
    9a6a:	e7ff      	b.n	9a6c <MPSL_IRQ_RADIO_Handler+0xb4c>
    9a6c:	f240 21e6 	movw	r1, #742	; 0x2e6
    9a70:	2070      	movs	r0, #112	; 0x70
    9a72:	f002 fe11 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9a76:	2003      	movs	r0, #3
    9a78:	f002 f87c 	bl	bb74 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9a7c:	b318      	cbz	r0, 9ac6 <MPSL_IRQ_RADIO_Handler+0xba6>
    9a7e:	4814      	ldr	r0, [pc, #80]	; (9ad0 <MPSL_IRQ_RADIO_Handler+0xbb0>)
    9a80:	6880      	ldr	r0, [r0, #8]
    9a82:	6007      	str	r7, [r0, #0]
    9a84:	4813      	ldr	r0, [pc, #76]	; (9ad4 <MPSL_IRQ_RADIO_Handler+0xbb4>)
    9a86:	6007      	str	r7, [r0, #0]
    9a88:	f10d 0830 	add.w	r8, sp, #48	; 0x30
    9a8c:	4812      	ldr	r0, [pc, #72]	; (9ad8 <MPSL_IRQ_RADIO_Handler+0xbb8>)
    9a8e:	e898 10fe 	ldmia.w	r8, {r1, r2, r3, r4, r5, r6, r7, ip}
    9a92:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    9a96:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    9a9a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    9a9e:	f8c0 408c 	str.w	r4, [r0, #140]	; 0x8c
    9aa2:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    9aa6:	f8c0 6094 	str.w	r6, [r0, #148]	; 0x94
    9aaa:	f8c0 7098 	str.w	r7, [r0, #152]	; 0x98
    9aae:	f8c0 c09c 	str.w	ip, [r0, #156]	; 0x9c
    9ab2:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
    9ab6:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    9aba:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
    9abe:	b020      	add	sp, #128	; 0x80
    9ac0:	2001      	movs	r0, #1
    9ac2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9ac6:	f640 2148 	movw	r1, #2632	; 0xa48
    9aca:	2070      	movs	r0, #112	; 0x70
    9acc:	f002 fde4 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9ad0:	20000308 	.word	0x20000308
    9ad4:	40000508 	.word	0x40000508
    9ad8:	20001088 	.word	0x20001088
    9adc:	b570      	push	{r4, r5, r6, lr}
    9ade:	4d1d      	ldr	r5, [pc, #116]	; (9b54 <MPSL_IRQ_RADIO_Handler+0xc34>)
    9ae0:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    9ae4:	2820      	cmp	r0, #32
    9ae6:	bf18      	it	ne
    9ae8:	bd70      	popne	{r4, r5, r6, pc}
    9aea:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    9aee:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    9af2:	4428      	add	r0, r5
    9af4:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    9af8:	2c20      	cmp	r4, #32
    9afa:	d026      	beq.n	9b4a <MPSL_IRQ_RADIO_Handler+0xc2a>
    9afc:	4b16      	ldr	r3, [pc, #88]	; (9b58 <MPSL_IRQ_RADIO_Handler+0xc38>)
    9afe:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    9b02:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    9b06:	7849      	ldrb	r1, [r1, #1]
    9b08:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    9b0c:	20ff      	movs	r0, #255	; 0xff
    9b0e:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    9b12:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
    9b16:	4621      	mov	r1, r4
    9b18:	2002      	movs	r0, #2
    9b1a:	f000 f88b 	bl	9c34 <MPSL_IRQ_RADIO_Handler+0xd14>
    9b1e:	2000      	movs	r0, #0
    9b20:	f885 0030 	strb.w	r0, [r5, #48]	; 0x30
    9b24:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    9b28:	480c      	ldr	r0, [pc, #48]	; (9b5c <MPSL_IRQ_RADIO_Handler+0xc3c>)
    9b2a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    9b2e:	7e00      	ldrb	r0, [r0, #24]
    9b30:	2800      	cmp	r0, #0
    9b32:	bf08      	it	eq
    9b34:	f002 ff18 	bleq	c968 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    9b38:	2000      	movs	r0, #0
    9b3a:	4909      	ldr	r1, [pc, #36]	; (9b60 <MPSL_IRQ_RADIO_Handler+0xc40>)
    9b3c:	6849      	ldr	r1, [r1, #4]
    9b3e:	2900      	cmp	r1, #0
    9b40:	bf08      	it	eq
    9b42:	bd70      	popeq	{r4, r5, r6, pc}
    9b44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9b48:	4708      	bx	r1
    9b4a:	f240 311d 	movw	r1, #797	; 0x31d
    9b4e:	2070      	movs	r0, #112	; 0x70
    9b50:	f002 fda2 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9b54:	20001108 	.word	0x20001108
    9b58:	20001088 	.word	0x20001088
    9b5c:	20000c88 	.word	0x20000c88
    9b60:	20000308 	.word	0x20000308
    9b64:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9b68:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 9c24 <MPSL_IRQ_RADIO_Handler+0xd04>
    9b6c:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    9b70:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9b74:	4440      	add	r0, r8
    9b76:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    9b7a:	2c20      	cmp	r4, #32
    9b7c:	bf08      	it	eq
    9b7e:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9b82:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 9c28 <MPSL_IRQ_RADIO_Handler+0xd08>
    9b86:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 9c2c <MPSL_IRQ_RADIO_Handler+0xd0c>
    9b8a:	f5a9 6a80 	sub.w	sl, r9, #1024	; 0x400
    9b8e:	eb09 1785 	add.w	r7, r9, r5, lsl #6
    9b92:	2607      	movs	r6, #7
    9b94:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    9b98:	2801      	cmp	r0, #1
    9b9a:	d00e      	beq.n	9bba <MPSL_IRQ_RADIO_Handler+0xc9a>
    9b9c:	2804      	cmp	r0, #4
    9b9e:	bf08      	it	eq
    9ba0:	2602      	moveq	r6, #2
    9ba2:	d00a      	beq.n	9bba <MPSL_IRQ_RADIO_Handler+0xc9a>
    9ba4:	2805      	cmp	r0, #5
    9ba6:	bf0c      	ite	eq
    9ba8:	2603      	moveq	r6, #3
    9baa:	2806      	cmpne	r0, #6
    9bac:	d005      	beq.n	9bba <MPSL_IRQ_RADIO_Handler+0xc9a>
    9bae:	f44f 610a 	mov.w	r1, #2208	; 0x8a0
    9bb2:	f04f 0070 	mov.w	r0, #112	; 0x70
    9bb6:	f002 fd6f 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9bba:	f1bb 0f00 	cmp.w	fp, #0
    9bbe:	bf18      	it	ne
    9bc0:	f3af 8000 	nopne.w
    9bc4:	f3ef 8010 	mrs	r0, PRIMASK
    9bc8:	b672      	cpsid	i
    9bca:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    9bce:	784a      	ldrb	r2, [r1, #1]
    9bd0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    9bd4:	4441      	add	r1, r8
    9bd6:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
    9bda:	f891 202a 	ldrb.w	r2, [r1, #42]	; 0x2a
    9bde:	42a2      	cmp	r2, r4
    9be0:	bf04      	itt	eq
    9be2:	2220      	moveq	r2, #32
    9be4:	f881 202a 	strbeq.w	r2, [r1, #42]	; 0x2a
    9be8:	b1a8      	cbz	r0, 9c16 <MPSL_IRQ_RADIO_Handler+0xcf6>
    9bea:	462a      	mov	r2, r5
    9bec:	4621      	mov	r1, r4
    9bee:	2001      	movs	r0, #1
    9bf0:	f000 f820 	bl	9c34 <MPSL_IRQ_RADIO_Handler+0xd14>
    9bf4:	eb0a 1144 	add.w	r1, sl, r4, lsl #5
    9bf8:	e9d1 2000 	ldrd	r2, r0, [r1]
    9bfc:	4631      	mov	r1, r6
    9bfe:	4790      	blx	r2
    9c00:	f898 5041 	ldrb.w	r5, [r8, #65]	; 0x41
    9c04:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9c08:	4440      	add	r0, r8
    9c0a:	f890 4029 	ldrb.w	r4, [r0, #41]	; 0x29
    9c0e:	2c20      	cmp	r4, #32
    9c10:	d1bd      	bne.n	9b8e <MPSL_IRQ_RADIO_Handler+0xc6e>
    9c12:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9c16:	4806      	ldr	r0, [pc, #24]	; (9c30 <MPSL_IRQ_RADIO_Handler+0xd10>)
    9c18:	2800      	cmp	r0, #0
    9c1a:	bf18      	it	ne
    9c1c:	f3af 8000 	nopne.w
    9c20:	b662      	cpsie	i
    9c22:	e7e2      	b.n	9bea <MPSL_IRQ_RADIO_Handler+0xcca>
    9c24:	20001108 	.word	0x20001108
    9c28:	00000000 	.word	0x00000000
    9c2c:	20001088 	.word	0x20001088
    9c30:	00000000 	.word	0x00000000
    9c34:	f8df c058 	ldr.w	ip, [pc, #88]	; 9c90 <MPSL_IRQ_RADIO_Handler+0xd70>
    9c38:	b510      	push	{r4, lr}
    9c3a:	2300      	movs	r3, #0
    9c3c:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    9c40:	2807      	cmp	r0, #7
    9c42:	d21f      	bcs.n	9c84 <MPSL_IRQ_RADIO_Handler+0xd64>
    9c44:	e8df f000 	tbb	[pc, r0]
    9c48:	05050505 	.word	0x05050505
    9c4c:	00040404 	.word	0x00040404
    9c50:	2301      	movs	r3, #1
    9c52:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    9c56:	2b00      	cmp	r3, #0
    9c58:	bf08      	it	eq
    9c5a:	bd10      	popeq	{r4, pc}
    9c5c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    9c60:	480c      	ldr	r0, [pc, #48]	; (9c94 <MPSL_IRQ_RADIO_Handler+0xd74>)
    9c62:	4402      	add	r2, r0
    9c64:	f892 002a 	ldrb.w	r0, [r2, #42]	; 0x2a
    9c68:	2820      	cmp	r0, #32
    9c6a:	bf0e      	itee	eq
    9c6c:	f882 1029 	strbeq.w	r1, [r2, #41]	; 0x29
    9c70:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    9c74:	7041      	strbne	r1, [r0, #1]
    9c76:	2020      	movs	r0, #32
    9c78:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    9c7c:	7058      	strb	r0, [r3, #1]
    9c7e:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
    9c82:	bd10      	pop	{r4, pc}
    9c84:	f44f 7117 	mov.w	r1, #604	; 0x25c
    9c88:	2070      	movs	r0, #112	; 0x70
    9c8a:	f002 fd05 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9c8e:	0000      	.short	0x0000
    9c90:	20001088 	.word	0x20001088
    9c94:	20001108 	.word	0x20001108
    9c98:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9c9c:	460f      	mov	r7, r1
    9c9e:	4680      	mov	r8, r0
    9ca0:	f8df b154 	ldr.w	fp, [pc, #340]	; 9df8 <MPSL_IRQ_RADIO_Handler+0xed8>
    9ca4:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    9ca8:	4458      	add	r0, fp
    9caa:	f1b8 0f01 	cmp.w	r8, #1
    9cae:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
    9cb2:	4625      	mov	r5, r4
    9cb4:	bf18      	it	ne
    9cb6:	f1b8 0f02 	cmpne.w	r8, #2
    9cba:	d005      	beq.n	9cc8 <MPSL_IRQ_RADIO_Handler+0xda8>
    9cbc:	f640 217e 	movw	r1, #2686	; 0xa7e
    9cc0:	f04f 0070 	mov.w	r0, #112	; 0x70
    9cc4:	f002 fce8 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9cc8:	2d20      	cmp	r5, #32
    9cca:	d041      	beq.n	9d50 <MPSL_IRQ_RADIO_Handler+0xe30>
    9ccc:	f89b 0022 	ldrb.w	r0, [fp, #34]	; 0x22
    9cd0:	2600      	movs	r6, #0
    9cd2:	2800      	cmp	r0, #0
    9cd4:	bf08      	it	eq
    9cd6:	2602      	moveq	r6, #2
    9cd8:	f001 fd74 	bl	b7c4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9cdc:	f8df 911c 	ldr.w	r9, [pc, #284]	; 9dfc <MPSL_IRQ_RADIO_Handler+0xedc>
    9ce0:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    9ce4:	6899      	ldr	r1, [r3, #8]
    9ce6:	691b      	ldr	r3, [r3, #16]
    9ce8:	1a0a      	subs	r2, r1, r0
    9cea:	18c9      	adds	r1, r1, r3
    9cec:	1a09      	subs	r1, r1, r0
    9cee:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9cf2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9cf6:	4296      	cmp	r6, r2
    9cf8:	bf99      	ittee	ls
    9cfa:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    9cfe:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9d02:	4a3f      	ldrhi	r2, [pc, #252]	; (9e00 <MPSL_IRQ_RADIO_Handler+0xee0>)
    9d04:	eb02 1a87 	addhi.w	sl, r2, r7, lsl #6
    9d08:	d920      	bls.n	9d4c <MPSL_IRQ_RADIO_Handler+0xe2c>
    9d0a:	4622      	mov	r2, r4
    9d0c:	eb0a 0142 	add.w	r1, sl, r2, lsl #1
    9d10:	784c      	ldrb	r4, [r1, #1]
    9d12:	2c20      	cmp	r4, #32
    9d14:	d012      	beq.n	9d3c <MPSL_IRQ_RADIO_Handler+0xe1c>
    9d16:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    9d1a:	6899      	ldr	r1, [r3, #8]
    9d1c:	691b      	ldr	r3, [r3, #16]
    9d1e:	ebb1 0c00 	subs.w	ip, r1, r0
    9d22:	18c9      	adds	r1, r1, r3
    9d24:	1a09      	subs	r1, r1, r0
    9d26:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    9d2a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9d2e:	4566      	cmp	r6, ip
    9d30:	bf9c      	itt	ls
    9d32:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    9d36:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9d3a:	d8e6      	bhi.n	9d0a <MPSL_IRQ_RADIO_Handler+0xdea>
    9d3c:	2a20      	cmp	r2, #32
    9d3e:	d005      	beq.n	9d4c <MPSL_IRQ_RADIO_Handler+0xe2c>
    9d40:	463b      	mov	r3, r7
    9d42:	2120      	movs	r1, #32
    9d44:	2004      	movs	r0, #4
    9d46:	f7ff f909 	bl	8f5c <MPSL_IRQ_RADIO_Handler+0x3c>
    9d4a:	4604      	mov	r4, r0
    9d4c:	42ac      	cmp	r4, r5
    9d4e:	d113      	bne.n	9d78 <MPSL_IRQ_RADIO_Handler+0xe58>
    9d50:	482c      	ldr	r0, [pc, #176]	; (9e04 <MPSL_IRQ_RADIO_Handler+0xee4>)
    9d52:	2800      	cmp	r0, #0
    9d54:	bf18      	it	ne
    9d56:	f3af 8000 	nopne.w
    9d5a:	f001 fee9 	bl	bb30 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    9d5e:	f89b 2043 	ldrb.w	r2, [fp, #67]	; 0x43
    9d62:	2a20      	cmp	r2, #32
    9d64:	d00b      	beq.n	9d7e <MPSL_IRQ_RADIO_Handler+0xe5e>
    9d66:	e9db 3202 	ldrd	r3, r2, [fp, #8]
    9d6a:	1c84      	adds	r4, r0, #2
    9d6c:	f141 0c00 	adc.w	ip, r1, #0
    9d70:	1b1b      	subs	r3, r3, r4
    9d72:	eb72 020c 	sbcs.w	r2, r2, ip
    9d76:	d202      	bcs.n	9d7e <MPSL_IRQ_RADIO_Handler+0xe5e>
    9d78:	2000      	movs	r0, #0
    9d7a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9d7e:	2d20      	cmp	r5, #32
    9d80:	d013      	beq.n	9daa <MPSL_IRQ_RADIO_Handler+0xe8a>
    9d82:	462b      	mov	r3, r5
    9d84:	4642      	mov	r2, r8
    9d86:	f7ff fbaf 	bl	94e8 <MPSL_IRQ_RADIO_Handler+0x5c8>
    9d8a:	2800      	cmp	r0, #0
    9d8c:	bf1e      	ittt	ne
    9d8e:	f88b 5043 	strbne.w	r5, [fp, #67]	; 0x43
    9d92:	2002      	movne	r0, #2
    9d94:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9d98:	463b      	mov	r3, r7
    9d9a:	462a      	mov	r2, r5
    9d9c:	2120      	movs	r1, #32
    9d9e:	2004      	movs	r0, #4
    9da0:	f7ff f8dc 	bl	8f5c <MPSL_IRQ_RADIO_Handler+0x3c>
    9da4:	2000      	movs	r0, #0
    9da6:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9daa:	e9db 010e 	ldrd	r0, r1, [fp, #56]	; 0x38
    9dae:	43c0      	mvns	r0, r0
    9db0:	ea70 0001 	orns	r0, r0, r1
    9db4:	d005      	beq.n	9dc2 <MPSL_IRQ_RADIO_Handler+0xea2>
    9db6:	f002 fab7 	bl	c328 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    9dba:	f04f 30ff 	mov.w	r0, #4294967295
    9dbe:	e9cb 000e 	strd	r0, r0, [fp, #56]	; 0x38
    9dc2:	f89b 0040 	ldrb.w	r0, [fp, #64]	; 0x40
    9dc6:	b128      	cbz	r0, 9dd4 <MPSL_IRQ_RADIO_Handler+0xeb4>
    9dc8:	2005      	movs	r0, #5
    9dca:	f001 ff8d 	bl	bce8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9dce:	2000      	movs	r0, #0
    9dd0:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    9dd4:	2004      	movs	r0, #4
    9dd6:	f001 ff87 	bl	bce8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9dda:	f001 ffed 	bl	bdb8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    9dde:	490a      	ldr	r1, [pc, #40]	; (9e08 <MPSL_IRQ_RADIO_Handler+0xee8>)
    9de0:	2020      	movs	r0, #32
    9de2:	f88b 0043 	strb.w	r0, [fp, #67]	; 0x43
    9de6:	6889      	ldr	r1, [r1, #8]
    9de8:	2000      	movs	r0, #0
    9dea:	6008      	str	r0, [r1, #0]
    9dec:	4907      	ldr	r1, [pc, #28]	; (9e0c <MPSL_IRQ_RADIO_Handler+0xeec>)
    9dee:	6008      	str	r0, [r1, #0]
    9df0:	2001      	movs	r0, #1
    9df2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9df6:	0000      	.short	0x0000
    9df8:	20001108 	.word	0x20001108
    9dfc:	20000c88 	.word	0x20000c88
    9e00:	20001088 	.word	0x20001088
    9e04:	00000000 	.word	0x00000000
    9e08:	20000308 	.word	0x20000308
    9e0c:	40000508 	.word	0x40000508

00009e10 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    9e10:	4906      	ldr	r1, [pc, #24]	; (9e2c <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    9e12:	b510      	push	{r4, lr}
    9e14:	f891 2042 	ldrb.w	r2, [r1, #66]	; 0x42
    9e18:	2a20      	cmp	r2, #32
    9e1a:	bf1c      	itt	ne
    9e1c:	f881 0022 	strbne.w	r0, [r1, #34]	; 0x22
    9e20:	bd10      	popne	{r4, pc}
    9e22:	f240 3177 	movw	r1, #887	; 0x377
    9e26:	2070      	movs	r0, #112	; 0x70
    9e28:	f002 fc36 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9e2c:	20001108 	.word	0x20001108

00009e30 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    9e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9e34:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 9ffc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>
    9e38:	4606      	mov	r6, r0
    9e3a:	b08f      	sub	sp, #60	; 0x3c
    9e3c:	f89b 0042 	ldrb.w	r0, [fp, #66]	; 0x42
    9e40:	468a      	mov	sl, r1
    9e42:	2820      	cmp	r0, #32
    9e44:	d061      	beq.n	9f0a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xda>
    9e46:	f89b 1042 	ldrb.w	r1, [fp, #66]	; 0x42
    9e4a:	f10b 0408 	add.w	r4, fp, #8
    9e4e:	f5ab 6890 	sub.w	r8, fp, #1152	; 0x480
    9e52:	eb08 1941 	add.w	r9, r8, r1, lsl #5
    9e56:	2120      	movs	r1, #32
    9e58:	f88d 1018 	strb.w	r1, [sp, #24]
    9e5c:	f89b 1041 	ldrb.w	r1, [fp, #65]	; 0x41
    9e60:	f8db 2008 	ldr.w	r2, [fp, #8]
    9e64:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    9e68:	4459      	add	r1, fp
    9e6a:	2700      	movs	r7, #0
    9e6c:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
    9e70:	f8db 1010 	ldr.w	r1, [fp, #16]
    9e74:	1851      	adds	r1, r2, r1
    9e76:	910a      	str	r1, [sp, #40]	; 0x28
    9e78:	f8db 0000 	ldr.w	r0, [fp]
    9e7c:	aa09      	add	r2, sp, #36	; 0x24
    9e7e:	4430      	add	r0, r6
    9e80:	a907      	add	r1, sp, #28
    9e82:	f001 fb75 	bl	b570 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9e86:	f8d9 0010 	ldr.w	r0, [r9, #16]
    9e8a:	9907      	ldr	r1, [sp, #28]
    9e8c:	f8d9 2008 	ldr.w	r2, [r9, #8]
    9e90:	1840      	adds	r0, r0, r1
    9e92:	1810      	adds	r0, r2, r0
    9e94:	2e67      	cmp	r6, #103	; 0x67
    9e96:	d33d      	bcc.n	9f14 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    9e98:	4959      	ldr	r1, [pc, #356]	; (a000 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d0>)
    9e9a:	2200      	movs	r2, #0
    9e9c:	1b89      	subs	r1, r1, r6
    9e9e:	eb72 0107 	sbcs.w	r1, r2, r7
    9ea2:	d337      	bcc.n	9f14 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    9ea4:	6821      	ldr	r1, [r4, #0]
    9ea6:	4694      	mov	ip, r2
    9ea8:	1a40      	subs	r0, r0, r1
    9eaa:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9eae:	f5d1 0100 	rsbs	r1, r1, #8388608	; 0x800000
    9eb2:	eb7c 010c 	sbcs.w	r1, ip, ip
    9eb6:	d32d      	bcc.n	9f14 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe4>
    9eb8:	60a0      	str	r0, [r4, #8]
    9eba:	f508 6090 	add.w	r0, r8, #1152	; 0x480
    9ebe:	f884 a010 	strb.w	sl, [r4, #16]
    9ec2:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
    9ec6:	f10d 0b18 	add.w	fp, sp, #24
    9eca:	2d20      	cmp	r5, #32
    9ecc:	d055      	beq.n	9f7a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    9ece:	f508 6180 	add.w	r1, r8, #1024	; 0x400
    9ed2:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    9ed6:	9001      	str	r0, [sp, #4]
    9ed8:	484a      	ldr	r0, [pc, #296]	; (a004 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d4>)
    9eda:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    9ede:	f8d4 a000 	ldr.w	sl, [r4]
    9ee2:	eb00 1845 	add.w	r8, r0, r5, lsl #5
    9ee6:	f108 0008 	add.w	r0, r8, #8
    9eea:	eb1a 0201 	adds.w	r2, sl, r1
    9eee:	eb43 0107 	adc.w	r1, r3, r7
    9ef2:	e9d0 9300 	ldrd	r9, r3, [r0]
    9ef6:	ebb9 0202 	subs.w	r2, r9, r2
    9efa:	eb73 0101 	sbcs.w	r1, r3, r1
    9efe:	d325      	bcc.n	9f4c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x11c>
    9f00:	89c0      	ldrh	r0, [r0, #14]
    9f02:	b398      	cbz	r0, 9f6c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13c>
    9f04:	89e0      	ldrh	r0, [r4, #14]
    9f06:	b148      	cbz	r0, 9f1c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xec>
    9f08:	e037      	b.n	9f7a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    9f0a:	f640 3135 	movw	r1, #2869	; 0xb35
    9f0e:	2070      	movs	r0, #112	; 0x70
    9f10:	f002 fbc2 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9f14:	b00f      	add	sp, #60	; 0x3c
    9f16:	2001      	movs	r0, #1
    9f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f1c:	f002 f9fe 	bl	c31c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9f20:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9f24:	bf08      	it	eq
    9f26:	200d      	moveq	r0, #13
    9f28:	d00b      	beq.n	9f42 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    9f2a:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9f2e:	3856      	subs	r0, #86	; 0x56
    9f30:	bf08      	it	eq
    9f32:	201c      	moveq	r0, #28
    9f34:	d005      	beq.n	9f42 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x112>
    9f36:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9f3a:	389f      	subs	r0, #159	; 0x9f
    9f3c:	bf14      	ite	ne
    9f3e:	4638      	movne	r0, r7
    9f40:	2032      	moveq	r0, #50	; 0x32
    9f42:	1c41      	adds	r1, r0, #1
    9f44:	ebb9 000a 	subs.w	r0, r9, sl
    9f48:	4288      	cmp	r0, r1
    9f4a:	da16      	bge.n	9f7a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    9f4c:	f88b 5000 	strb.w	r5, [fp]
    9f50:	f898 0018 	ldrb.w	r0, [r8, #24]
    9f54:	7c21      	ldrb	r1, [r4, #16]
    9f56:	4281      	cmp	r1, r0
    9f58:	d309      	bcc.n	9f6e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13e>
    9f5a:	6821      	ldr	r1, [r4, #0]
    9f5c:	980a      	ldr	r0, [sp, #40]	; 0x28
    9f5e:	1a40      	subs	r0, r0, r1
    9f60:	60a0      	str	r0, [r4, #8]
    9f62:	b00f      	add	sp, #60	; 0x3c
    9f64:	f04f 0002 	mov.w	r0, #2
    9f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f6c:	e005      	b.n	9f7a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x14a>
    9f6e:	9801      	ldr	r0, [sp, #4]
    9f70:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    9f74:	7845      	ldrb	r5, [r0, #1]
    9f76:	2d20      	cmp	r5, #32
    9f78:	d1ae      	bne.n	9ed8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xa8>
    9f7a:	2005      	movs	r0, #5
    9f7c:	f001 feb4 	bl	bce8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9f80:	4d1e      	ldr	r5, [pc, #120]	; (9ffc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1cc>)
    9f82:	f04f 30ff 	mov.w	r0, #4294967295
    9f86:	6068      	str	r0, [r5, #4]
    9f88:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
    9f8c:	f89d 2018 	ldrb.w	r2, [sp, #24]
    9f90:	2120      	movs	r1, #32
    9f92:	2a20      	cmp	r2, #32
    9f94:	d003      	beq.n	9f9e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16e>
    9f96:	2005      	movs	r0, #5
    9f98:	f7fe ffe0 	bl	8f5c <MPSL_IRQ_RADIO_Handler+0x3c>
    9f9c:	e004      	b.n	9fa8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>
    9f9e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    9fa2:	4428      	add	r0, r5
    9fa4:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    9fa8:	f895 2041 	ldrb.w	r2, [r5, #65]	; 0x41
    9fac:	4916      	ldr	r1, [pc, #88]	; (a008 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d8>)
    9fae:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    9fb2:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
    9fb6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    9fba:	7048      	strb	r0, [r1, #1]
    9fbc:	6828      	ldr	r0, [r5, #0]
    9fbe:	4430      	add	r0, r6
    9fc0:	6028      	str	r0, [r5, #0]
    9fc2:	20ff      	movs	r0, #255	; 0xff
    9fc4:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    9fc8:	7e68      	ldrb	r0, [r5, #25]
    9fca:	2801      	cmp	r0, #1
    9fcc:	d10a      	bne.n	9fe4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>
    9fce:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
    9fd2:	6823      	ldr	r3, [r4, #0]
    9fd4:	1818      	adds	r0, r3, r0
    9fd6:	f142 0100 	adc.w	r1, r2, #0
    9fda:	1e40      	subs	r0, r0, #1
    9fdc:	f141 31ff 	adc.w	r1, r1, #4294967295
    9fe0:	f001 fca4 	bl	b92c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    9fe4:	f89d 0018 	ldrb.w	r0, [sp, #24]
    9fe8:	2820      	cmp	r0, #32
    9fea:	d003      	beq.n	9ff4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1c4>
    9fec:	4807      	ldr	r0, [pc, #28]	; (a00c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1dc>)
    9fee:	7840      	ldrb	r0, [r0, #1]
    9ff0:	f002 fc24 	bl	c83c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9ff4:	b00f      	add	sp, #60	; 0x3c
    9ff6:	2000      	movs	r0, #0
    9ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ffc:	20001108 	.word	0x20001108
    a000:	0f424000 	.word	0x0f424000
    a004:	20000c88 	.word	0x20000c88
    a008:	20001088 	.word	0x20001088
    a00c:	20000308 	.word	0x20000308

0000a010 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    a010:	b570      	push	{r4, r5, r6, lr}
    a012:	4a23      	ldr	r2, [pc, #140]	; (a0a0 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x90>)
    a014:	f892 1042 	ldrb.w	r1, [r2, #66]	; 0x42
    a018:	2920      	cmp	r1, #32
    a01a:	d039      	beq.n	a090 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x80>
    a01c:	f892 1042 	ldrb.w	r1, [r2, #66]	; 0x42
    a020:	f5a2 6390 	sub.w	r3, r2, #1152	; 0x480
    a024:	eb03 1c41 	add.w	ip, r3, r1, lsl #5
    a028:	f892 1041 	ldrb.w	r1, [r2, #65]	; 0x41
    a02c:	f892 4041 	ldrb.w	r4, [r2, #65]	; 0x41
    a030:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    a034:	4411      	add	r1, r2
    a036:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    a03a:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    a03e:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    a042:	2920      	cmp	r1, #32
    a044:	d029      	beq.n	a09a <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8a>
    a046:	eb03 1541 	add.w	r5, r3, r1, lsl #5
    a04a:	7e2d      	ldrb	r5, [r5, #24]
    a04c:	42a8      	cmp	r0, r5
    a04e:	bf3c      	itt	cc
    a050:	eb04 0141 	addcc.w	r1, r4, r1, lsl #1
    a054:	7849      	ldrbcc	r1, [r1, #1]
    a056:	d3f4      	bcc.n	a042 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x32>
    a058:	e9dc 6003 	ldrd	r6, r0, [ip, #12]
    a05c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    a060:	f8dc 5008 	ldr.w	r5, [ip, #8]
    a064:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
    a068:	6814      	ldr	r4, [r2, #0]
    a06a:	1828      	adds	r0, r5, r0
    a06c:	f146 0200 	adc.w	r2, r6, #0
    a070:	ebb1 0c00 	subs.w	ip, r1, r0
    a074:	eb73 0202 	sbcs.w	r2, r3, r2
    a078:	d308      	bcc.n	a08c <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7c>
    a07a:	1a08      	subs	r0, r1, r0
    a07c:	f006 fc8f 	bl	1099e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a080:	f104 0167 	add.w	r1, r4, #103	; 0x67
    a084:	4281      	cmp	r1, r0
    a086:	bf9c      	itt	ls
    a088:	1b00      	subls	r0, r0, r4
    a08a:	bd70      	popls	{r4, r5, r6, pc}
    a08c:	2000      	movs	r0, #0
    a08e:	bd70      	pop	{r4, r5, r6, pc}
    a090:	f640 3108 	movw	r1, #2824	; 0xb08
    a094:	2070      	movs	r0, #112	; 0x70
    a096:	f002 faff 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a09a:	f04f 30ff 	mov.w	r0, #4294967295
    a09e:	bd70      	pop	{r4, r5, r6, pc}
    a0a0:	20001108 	.word	0x20001108

0000a0a4 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    a0a4:	4806      	ldr	r0, [pc, #24]	; (a0c0 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    a0a6:	b510      	push	{r4, lr}
    a0a8:	f890 1042 	ldrb.w	r1, [r0, #66]	; 0x42
    a0ac:	2920      	cmp	r1, #32
    a0ae:	bf1c      	itt	ne
    a0b0:	7e00      	ldrbne	r0, [r0, #24]
    a0b2:	bd10      	popne	{r4, pc}
    a0b4:	f640 312f 	movw	r1, #2863	; 0xb2f
    a0b8:	2070      	movs	r0, #112	; 0x70
    a0ba:	f002 faed 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a0be:	0000      	.short	0x0000
    a0c0:	20001108 	.word	0x20001108

0000a0c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    a0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a0c6:	4d6f      	ldr	r5, [pc, #444]	; (a284 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    a0c8:	2600      	movs	r6, #0
    a0ca:	f505 6490 	add.w	r4, r5, #1152	; 0x480
    a0ce:	2701      	movs	r7, #1
    a0d0:	e9d4 120e 	ldrd	r1, r2, [r4, #56]	; 0x38
    a0d4:	4b6c      	ldr	r3, [pc, #432]	; (a288 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    a0d6:	2808      	cmp	r0, #8
    a0d8:	d273      	bcs.n	a1c2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfe>
    a0da:	e8df f000 	tbb	[pc, r0]
    a0de:	7804      	.short	0x7804
    a0e0:	47ceb3a0 	.word	0x47ceb3a0
    a0e4:	bdb8      	.short	0xbdb8
    a0e6:	43c8      	mvns	r0, r1
    a0e8:	ea70 0002 	orns	r0, r0, r2
    a0ec:	d105      	bne.n	a0fa <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x36>
    a0ee:	f002 f937 	bl	c360 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a0f2:	f001 fd1d 	bl	bb30 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a0f6:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    a0fa:	8ae0      	ldrh	r0, [r4, #22]
    a0fc:	b110      	cbz	r0, a104 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x40>
    a0fe:	f002 fa53 	bl	c5a8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a102:	b180      	cbz	r0, a126 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    a104:	f7ff fcea 	bl	9adc <MPSL_IRQ_RADIO_Handler+0xbbc>
    a108:	20ff      	movs	r0, #255	; 0xff
    a10a:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    a10e:	6861      	ldr	r1, [r4, #4]
    a110:	f1b1 3fff 	cmp.w	r1, #4294967295
    a114:	d003      	beq.n	a11e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
    a116:	2005      	movs	r0, #5
    a118:	f001 fd2c 	bl	bb74 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    a11c:	b140      	cbz	r0, a130 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    a11e:	7e60      	ldrb	r0, [r4, #25]
    a120:	2801      	cmp	r0, #1
    a122:	d114      	bne.n	a14e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x8a>
    a124:	e009      	b.n	a13a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x76>
    a126:	f640 012c 	movw	r1, #2092	; 0x82c
    a12a:	2070      	movs	r0, #112	; 0x70
    a12c:	f002 fab4 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a130:	f640 0131 	movw	r1, #2097	; 0x831
    a134:	2070      	movs	r0, #112	; 0x70
    a136:	f002 faaf 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a13a:	68a2      	ldr	r2, [r4, #8]
    a13c:	6920      	ldr	r0, [r4, #16]
    a13e:	68e1      	ldr	r1, [r4, #12]
    a140:	1810      	adds	r0, r2, r0
    a142:	4171      	adcs	r1, r6
    a144:	1e40      	subs	r0, r0, #1
    a146:	f141 31ff 	adc.w	r1, r1, #4294967295
    a14a:	f001 fbef 	bl	b92c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    a14e:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    a152:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    a156:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    a15a:	6840      	ldr	r0, [r0, #4]
    a15c:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    a160:	680a      	ldr	r2, [r1, #0]
    a162:	b001      	add	sp, #4
    a164:	2101      	movs	r1, #1
    a166:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a16a:	4710      	bx	r2
    a16c:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
    a170:	b160      	cbz	r0, a18c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc8>
    a172:	43c8      	mvns	r0, r1
    a174:	ea70 0002 	orns	r0, r0, r2
    a178:	d105      	bne.n	a186 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xc2>
    a17a:	f002 f8f1 	bl	c360 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a17e:	f001 fcd7 	bl	bb30 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a182:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    a186:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    a18a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a18c:	f7ff fca6 	bl	9adc <MPSL_IRQ_RADIO_Handler+0xbbc>
    a190:	f04f 30ff 	mov.w	r0, #4294967295
    a194:	6060      	str	r0, [r4, #4]
    a196:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    a19a:	f88d 0000 	strb.w	r0, [sp]
    a19e:	f89d 0000 	ldrb.w	r0, [sp]
    a1a2:	b178      	cbz	r0, a1c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x100>
    a1a4:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    a1a8:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    a1ac:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    a1b0:	6840      	ldr	r0, [r0, #4]
    a1b2:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    a1b6:	680a      	ldr	r2, [r1, #0]
    a1b8:	b001      	add	sp, #4
    a1ba:	2106      	movs	r1, #6
    a1bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a1c0:	4710      	bx	r2
    a1c2:	e05a      	b.n	a27a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b6>
    a1c4:	f640 0148 	movw	r1, #2120	; 0x848
    a1c8:	2070      	movs	r0, #112	; 0x70
    a1ca:	f002 fa65 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a1ce:	f7ff fc85 	bl	9adc <MPSL_IRQ_RADIO_Handler+0xbbc>
    a1d2:	f884 702e 	strb.w	r7, [r4, #46]	; 0x2e
    a1d6:	f002 f9e7 	bl	c5a8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a1da:	b130      	cbz	r0, a1ea <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
    a1dc:	e9d4 100e 	ldrd	r1, r0, [r4, #56]	; 0x38
    a1e0:	43c9      	mvns	r1, r1
    a1e2:	ea71 0000 	orns	r0, r1, r0
    a1e6:	d005      	beq.n	a1f4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x130>
    a1e8:	e00a      	b.n	a200 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x13c>
    a1ea:	f640 0156 	movw	r1, #2134	; 0x856
    a1ee:	2070      	movs	r0, #112	; 0x70
    a1f0:	f002 fa52 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a1f4:	f002 f8b4 	bl	c360 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a1f8:	f001 fc9a 	bl	bb30 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a1fc:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
    a200:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    a204:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    a208:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    a20c:	6840      	ldr	r0, [r0, #4]
    a20e:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    a212:	680a      	ldr	r2, [r1, #0]
    a214:	b001      	add	sp, #4
    a216:	2100      	movs	r1, #0
    a218:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a21c:	4710      	bx	r2
    a21e:	f001 fe87 	bl	bf30 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    a222:	8ae0      	ldrh	r0, [r4, #22]
    a224:	b110      	cbz	r0, a22c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    a226:	f002 f9bf 	bl	c5a8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a22a:	b130      	cbz	r0, a23a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x176>
    a22c:	f001 fe94 	bl	bf58 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    a230:	2800      	cmp	r0, #0
    a232:	bf18      	it	ne
    a234:	f884 7021 	strbne.w	r7, [r4, #33]	; 0x21
    a238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a23a:	f44f 6106 	mov.w	r1, #2144	; 0x860
    a23e:	2070      	movs	r0, #112	; 0x70
    a240:	f002 fa2a 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a244:	4811      	ldr	r0, [pc, #68]	; (a28c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    a246:	6007      	str	r7, [r0, #0]
    a248:	6898      	ldr	r0, [r3, #8]
    a24a:	6007      	str	r7, [r0, #0]
    a24c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a24e:	7818      	ldrb	r0, [r3, #0]
    a250:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a254:	f002 baf2 	b.w	c83c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a258:	f7ff fc40 	bl	9adc <MPSL_IRQ_RADIO_Handler+0xbbc>
    a25c:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    a260:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    a264:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    a268:	6840      	ldr	r0, [r0, #4]
    a26a:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    a26e:	680a      	ldr	r2, [r1, #0]
    a270:	b001      	add	sp, #4
    a272:	2105      	movs	r1, #5
    a274:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a278:	4710      	bx	r2
    a27a:	f640 0173 	movw	r1, #2163	; 0x873
    a27e:	2070      	movs	r0, #112	; 0x70
    a280:	f002 fa0a 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a284:	20000c88 	.word	0x20000c88
    a288:	20000308 	.word	0x20000308
    a28c:	40000508 	.word	0x40000508

0000a290 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    a290:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a294:	48ff      	ldr	r0, [pc, #1020]	; (a694 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x404>)
    a296:	b097      	sub	sp, #92	; 0x5c
    a298:	460c      	mov	r4, r1
    a29a:	6800      	ldr	r0, [r0, #0]
    a29c:	4ffe      	ldr	r7, [pc, #1016]	; (a698 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x408>)
    a29e:	05c0      	lsls	r0, r0, #23
    a2a0:	0dc0      	lsrs	r0, r0, #23
    a2a2:	d00e      	beq.n	a2c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    a2a4:	3810      	subs	r0, #16
    a2a6:	b240      	sxtb	r0, r0
    a2a8:	2800      	cmp	r0, #0
    a2aa:	bfb8      	it	lt
    a2ac:	f000 000f 	andlt.w	r0, r0, #15
    a2b0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a2b4:	bfac      	ite	ge
    a2b6:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a2ba:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a2be:	0940      	lsrs	r0, r0, #5
    a2c0:	d00c      	beq.n	a2dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c>
    a2c2:	7820      	ldrb	r0, [r4, #0]
    a2c4:	f04f 0a00 	mov.w	sl, #0
    a2c8:	2800      	cmp	r0, #0
    a2ca:	bf18      	it	ne
    a2cc:	2801      	cmpne	r0, #1
    a2ce:	d017      	beq.n	a300 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    a2d0:	f240 61f9 	movw	r1, #1785	; 0x6f9
    a2d4:	f04f 0070 	mov.w	r0, #112	; 0x70
    a2d8:	f002 f9de 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a2dc:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    a2e0:	f04f 0a01 	mov.w	sl, #1
    a2e4:	2820      	cmp	r0, #32
    a2e6:	d006      	beq.n	a2f6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x66>
    a2e8:	7820      	ldrb	r0, [r4, #0]
    a2ea:	b148      	cbz	r0, a300 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x70>
    a2ec:	f240 61f5 	movw	r1, #1781	; 0x6f5
    a2f0:	2070      	movs	r0, #112	; 0x70
    a2f2:	f002 f9d1 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a2f6:	f240 61f2 	movw	r1, #1778	; 0x6f2
    a2fa:	2070      	movs	r0, #112	; 0x70
    a2fc:	f002 f9cc 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a300:	4de6      	ldr	r5, [pc, #920]	; (a69c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x40c>)
    a302:	b125      	cbz	r5, a30e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x7e>
    a304:	2100      	movs	r1, #0
    a306:	f240 60fc 	movw	r0, #1788	; 0x6fc
    a30a:	f3af 8000 	nop.w
    a30e:	2000      	movs	r0, #0
    a310:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    a314:	a905      	add	r1, sp, #20
    a316:	9112      	str	r1, [sp, #72]	; 0x48
    a318:	49e1      	ldr	r1, [pc, #900]	; (a6a0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x410>)
    a31a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a31c:	f04f 0801 	mov.w	r8, #1
    a320:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    a324:	9001      	str	r0, [sp, #4]
    a326:	f8df b374 	ldr.w	fp, [pc, #884]	; a69c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x40c>
    a32a:	f1bb 0f00 	cmp.w	fp, #0
    a32e:	d004      	beq.n	a33a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xaa>
    a330:	2100      	movs	r1, #0
    a332:	f240 7007 	movw	r0, #1799	; 0x707
    a336:	f3af 8000 	nop.w
    a33a:	f1b8 0f00 	cmp.w	r8, #0
    a33e:	d008      	beq.n	a352 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc2>
    a340:	f897 6041 	ldrb.w	r6, [r7, #65]	; 0x41
    a344:	2500      	movs	r5, #0
    a346:	f887 5031 	strb.w	r5, [r7, #49]	; 0x31
    a34a:	f1ba 0f00 	cmp.w	sl, #0
    a34e:	d007      	beq.n	a360 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xd0>
    a350:	e03e      	b.n	a3d0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x140>
    a352:	48d4      	ldr	r0, [pc, #848]	; (a6a4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x414>)
    a354:	2800      	cmp	r0, #0
    a356:	bf18      	it	ne
    a358:	f3af 8000 	nopne.w
    a35c:	b662      	cpsie	i
    a35e:	e7ef      	b.n	a340 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb0>
    a360:	46b1      	mov	r9, r6
    a362:	2001      	movs	r0, #1
    a364:	ea20 0609 	bic.w	r6, r0, r9
    a368:	48cf      	ldr	r0, [pc, #828]	; (a6a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x418>)
    a36a:	2240      	movs	r2, #64	; 0x40
    a36c:	eb00 1189 	add.w	r1, r0, r9, lsl #6
    a370:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    a374:	f006 fca3 	bl	10cbe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a378:	f1bb 0f00 	cmp.w	fp, #0
    a37c:	d004      	beq.n	a388 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf8>
    a37e:	2100      	movs	r1, #0
    a380:	f240 503c 	movw	r0, #1340	; 0x53c
    a384:	f3af 8000 	nop.w
    a388:	eb09 0149 	add.w	r1, r9, r9, lsl #1
    a38c:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a390:	4439      	add	r1, r7
    a392:	4438      	add	r0, r7
    a394:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    a396:	8502      	strh	r2, [r0, #40]	; 0x28
    a398:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    a39c:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    a3a0:	f1bb 0f00 	cmp.w	fp, #0
    a3a4:	d004      	beq.n	a3b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x120>
    a3a6:	2100      	movs	r1, #0
    a3a8:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    a3ac:	f3af 8000 	nop.w
    a3b0:	f1bb 0f00 	cmp.w	fp, #0
    a3b4:	d004      	beq.n	a3c0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x130>
    a3b6:	2100      	movs	r1, #0
    a3b8:	f240 7011 	movw	r0, #1809	; 0x711
    a3bc:	f3af 8000 	nop.w
    a3c0:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    a3c4:	f88d 0020 	strb.w	r0, [sp, #32]
    a3c8:	f89d 0020 	ldrb.w	r0, [sp, #32]
    a3cc:	2800      	cmp	r0, #0
    a3ce:	d1aa      	bne.n	a326 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x96>
    a3d0:	f1bb 0f00 	cmp.w	fp, #0
    a3d4:	d004      	beq.n	a3e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x150>
    a3d6:	2100      	movs	r1, #0
    a3d8:	f240 701b 	movw	r0, #1819	; 0x71b
    a3dc:	f3af 8000 	nop.w
    a3e0:	f001 fba6 	bl	bb30 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a3e4:	4681      	mov	r9, r0
    a3e6:	a802      	add	r0, sp, #8
    a3e8:	900a      	str	r0, [sp, #40]	; 0x28
    a3ea:	4688      	mov	r8, r1
    a3ec:	8921      	ldrh	r1, [r4, #8]
    a3ee:	4628      	mov	r0, r5
    a3f0:	f361 401f 	bfi	r0, r1, #16, #16
    a3f4:	4601      	mov	r1, r0
    a3f6:	7aa2      	ldrb	r2, [r4, #10]
    a3f8:	4628      	mov	r0, r5
    a3fa:	f362 0007 	bfi	r0, r2, #0, #8
    a3fe:	7ae2      	ldrb	r2, [r4, #11]
    a400:	f362 200f 	bfi	r0, r2, #8, #8
    a404:	7822      	ldrb	r2, [r4, #0]
    a406:	9502      	str	r5, [sp, #8]
    a408:	f362 4017 	bfi	r0, r2, #16, #8
    a40c:	e9cd 5104 	strd	r5, r1, [sp, #16]
    a410:	e9cd 0506 	strd	r0, r5, [sp, #24]
    a414:	9503      	str	r5, [sp, #12]
    a416:	7820      	ldrb	r0, [r4, #0]
    a418:	b380      	cbz	r0, a47c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    a41a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    a41e:	48a3      	ldr	r0, [pc, #652]	; (a6ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x41c>)
    a420:	1a40      	subs	r0, r0, r1
    a422:	990a      	ldr	r1, [sp, #40]	; 0x28
    a424:	f101 020c 	add.w	r2, r1, #12
    a428:	a914      	add	r1, sp, #80	; 0x50
    a42a:	f001 f8a1 	bl	b570 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a42e:	2200      	movs	r2, #0
    a430:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    a434:	4648      	mov	r0, r9
    a436:	4641      	mov	r1, r8
    a438:	f7fe ff68 	bl	930c <MPSL_IRQ_RADIO_Handler+0x3ec>
    a43c:	468c      	mov	ip, r1
    a43e:	7ae1      	ldrb	r1, [r4, #11]
    a440:	2900      	cmp	r1, #0
    a442:	bf0c      	ite	eq
    a444:	217a      	moveq	r1, #122	; 0x7a
    a446:	214a      	movne	r1, #74	; 0x4a
    a448:	6862      	ldr	r2, [r4, #4]
    a44a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    a44e:	4411      	add	r1, r2
    a450:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    a454:	e9cd 0c02 	strd	r0, ip, [sp, #8]
    a458:	441a      	add	r2, r3
    a45a:	4411      	add	r1, r2
    a45c:	1c88      	adds	r0, r1, #2
    a45e:	f001 f86b 	bl	b538 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a462:	9600      	str	r6, [sp, #0]
    a464:	9004      	str	r0, [sp, #16]
    a466:	464a      	mov	r2, r9
    a468:	4643      	mov	r3, r8
    a46a:	6920      	ldr	r0, [r4, #16]
    a46c:	990a      	ldr	r1, [sp, #40]	; 0x28
    a46e:	f7fe fdb1 	bl	8fd4 <MPSL_IRQ_RADIO_Handler+0xb4>
    a472:	2800      	cmp	r0, #0
    a474:	bf08      	it	eq
    a476:	e9cd 9802 	strdeq	r9, r8, [sp, #8]
    a47a:	e046      	b.n	a50a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27a>
    a47c:	e7ff      	b.n	a47e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ee>
    a47e:	4648      	mov	r0, r9
    a480:	4641      	mov	r1, r8
    a482:	f000 fff7 	bl	b474 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    a486:	4b8a      	ldr	r3, [pc, #552]	; (a6b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x420>)
    a488:	4602      	mov	r2, r0
    a48a:	eb10 0c03 	adds.w	ip, r0, r3
    a48e:	468e      	mov	lr, r1
    a490:	f141 0300 	adc.w	r3, r1, #0
    a494:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    a498:	ebb0 0c0c 	subs.w	ip, r0, ip
    a49c:	eb71 0303 	sbcs.w	r3, r1, r3
    a4a0:	d22a      	bcs.n	a4f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    a4a2:	3229      	adds	r2, #41	; 0x29
    a4a4:	f14e 0300 	adc.w	r3, lr, #0
    a4a8:	1a82      	subs	r2, r0, r2
    a4aa:	eb71 0203 	sbcs.w	r2, r1, r3
    a4ae:	d323      	bcc.n	a4f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    a4b0:	8922      	ldrh	r2, [r4, #8]
    a4b2:	ab14      	add	r3, sp, #80	; 0x50
    a4b4:	1a80      	subs	r0, r0, r2
    a4b6:	eb61 0105 	sbc.w	r1, r1, r5
    a4ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
    a4bc:	1e40      	subs	r0, r0, #1
    a4be:	9200      	str	r2, [sp, #0]
    a4c0:	f141 31ff 	adc.w	r1, r1, #4294967295
    a4c4:	aa0b      	add	r2, sp, #44	; 0x2c
    a4c6:	f000 fff9 	bl	b4bc <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    a4ca:	7ae0      	ldrb	r0, [r4, #11]
    a4cc:	2800      	cmp	r0, #0
    a4ce:	bf0c      	ite	eq
    a4d0:	207a      	moveq	r0, #122	; 0x7a
    a4d2:	204a      	movne	r0, #74	; 0x4a
    a4d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    a4d6:	8922      	ldrh	r2, [r4, #8]
    a4d8:	4408      	add	r0, r1
    a4da:	6861      	ldr	r1, [r4, #4]
    a4dc:	4411      	add	r1, r2
    a4de:	4408      	add	r0, r1
    a4e0:	1c80      	adds	r0, r0, #2
    a4e2:	f001 f829 	bl	b538 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a4e6:	4601      	mov	r1, r0
    a4e8:	e9dd 0214 	ldrd	r0, r2, [sp, #80]	; 0x50
    a4ec:	e9cd 0202 	strd	r0, r2, [sp, #8]
    a4f0:	1a08      	subs	r0, r1, r0
    a4f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a4f6:	e007      	b.n	a508 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x278>
    a4f8:	f1b9 0101 	subs.w	r1, r9, #1
    a4fc:	f148 30ff 	adc.w	r0, r8, #4294967295
    a500:	e9cd 1002 	strd	r1, r0, [sp, #8]
    a504:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    a508:	9004      	str	r0, [sp, #16]
    a50a:	f1bb 0f00 	cmp.w	fp, #0
    a50e:	d004      	beq.n	a51a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x28a>
    a510:	2100      	movs	r1, #0
    a512:	f240 7022 	movw	r0, #1826	; 0x722
    a516:	f3af 8000 	nop.w
    a51a:	4963      	ldr	r1, [pc, #396]	; (a6a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x418>)
    a51c:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
    a520:	eb01 1186 	add.w	r1, r1, r6, lsl #6
    a524:	9108      	str	r1, [sp, #32]
    a526:	f811 1018 	ldrb.w	r1, [r1, r8, lsl #1]
    a52a:	a802      	add	r0, sp, #8
    a52c:	2901      	cmp	r1, #1
    a52e:	bf18      	it	ne
    a530:	2902      	cmpne	r1, #2
    a532:	d141      	bne.n	a5b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    a534:	9511      	str	r5, [sp, #68]	; 0x44
    a536:	9a02      	ldr	r2, [sp, #8]
    a538:	f029 417f 	bic.w	r1, r9, #4278190080	; 0xff000000
    a53c:	1a53      	subs	r3, r2, r1
    a53e:	f8dd c010 	ldr.w	ip, [sp, #16]
    a542:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    a546:	eb12 020c 	adds.w	r2, r2, ip
    a54a:	1a51      	subs	r1, r2, r1
    a54c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a550:	2b02      	cmp	r3, #2
    a552:	d372      	bcc.n	a63a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3aa>
    a554:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    a558:	bf98      	it	ls
    a55a:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    a55e:	d86c      	bhi.n	a63a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3aa>
    a560:	2501      	movs	r5, #1
    a562:	ab14      	add	r3, sp, #80	; 0x50
    a564:	aa0e      	add	r2, sp, #56	; 0x38
    a566:	4631      	mov	r1, r6
    a568:	f7fe ff20 	bl	93ac <MPSL_IRQ_RADIO_Handler+0x48c>
    a56c:	2800      	cmp	r0, #0
    a56e:	d06b      	beq.n	a648 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b8>
    a570:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    a574:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    a578:	4633      	mov	r3, r6
    a57a:	428a      	cmp	r2, r1
    a57c:	d068      	beq.n	a650 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c0>
    a57e:	2005      	movs	r0, #5
    a580:	f7fe fcec 	bl	8f5c <MPSL_IRQ_RADIO_Handler+0x3c>
    a584:	9908      	ldr	r1, [sp, #32]
    a586:	eb01 0148 	add.w	r1, r1, r8, lsl #1
    a58a:	7048      	strb	r0, [r1, #1]
    a58c:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    a590:	2820      	cmp	r0, #32
    a592:	bf01      	itttt	eq
    a594:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    a598:	4438      	addeq	r0, r7
    a59a:	f880 8028 	strbeq.w	r8, [r0, #40]	; 0x28
    a59e:	9511      	streq	r5, [sp, #68]	; 0x44
    a5a0:	bf1e      	ittt	ne
    a5a2:	9908      	ldrne	r1, [sp, #32]
    a5a4:	eb01 0040 	addne.w	r0, r1, r0, lsl #1
    a5a8:	f880 8001 	strbne.w	r8, [r0, #1]
    a5ac:	4632      	mov	r2, r6
    a5ae:	4641      	mov	r1, r8
    a5b0:	f05f 0003 	movs.w	r0, #3
    a5b4:	f7ff fb3e 	bl	9c34 <MPSL_IRQ_RADIO_Handler+0xd14>
    a5b8:	f1bb 0f00 	cmp.w	fp, #0
    a5bc:	d004      	beq.n	a5c8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x338>
    a5be:	2100      	movs	r1, #0
    a5c0:	f240 7027 	movw	r0, #1831	; 0x727
    a5c4:	f3af 8000 	nop.w
    a5c8:	483a      	ldr	r0, [pc, #232]	; (a6b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x424>)
    a5ca:	2800      	cmp	r0, #0
    a5cc:	bf18      	it	ne
    a5ce:	f3af 8000 	nopne.w
    a5d2:	f3ef 8810 	mrs	r8, PRIMASK
    a5d6:	b672      	cpsid	i
    a5d8:	f1bb 0f00 	cmp.w	fp, #0
    a5dc:	d004      	beq.n	a5e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x358>
    a5de:	2100      	movs	r1, #0
    a5e0:	f240 702d 	movw	r0, #1837	; 0x72d
    a5e4:	f3af 8000 	nop.w
    a5e8:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
    a5ec:	f88d 0020 	strb.w	r0, [sp, #32]
    a5f0:	f89d 0020 	ldrb.w	r0, [sp, #32]
    a5f4:	2800      	cmp	r0, #0
    a5f6:	f47f ae96 	bne.w	a326 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x96>
    a5fa:	4828      	ldr	r0, [pc, #160]	; (a69c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x40c>)
    a5fc:	b120      	cbz	r0, a608 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>
    a5fe:	2100      	movs	r1, #0
    a600:	f240 7035 	movw	r0, #1845	; 0x735
    a604:	f3af 8000 	nop.w
    a608:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
    a60c:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
    a610:	e9dd bc05 	ldrd	fp, ip, [sp, #20]
    a614:	f100 0008 	add.w	r0, r0, #8
    a618:	f8dd e01c 	ldr.w	lr, [sp, #28]
    a61c:	e880 580e 	stmia.w	r0, {r1, r2, r3, fp, ip, lr}
    a620:	b3b5      	cbz	r5, a690 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x400>
    a622:	4d1e      	ldr	r5, [pc, #120]	; (a69c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x40c>)
    a624:	b125      	cbz	r5, a630 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a0>
    a626:	2100      	movs	r1, #0
    a628:	f240 7042 	movw	r0, #1858	; 0x742
    a62c:	f3af 8000 	nop.w
    a630:	f1ba 0f00 	cmp.w	sl, #0
    a634:	d146      	bne.n	a6c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x434>
    a636:	e018      	b.n	a66a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3da>
    a638:	e7ff      	b.n	a63a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3aa>
    a63a:	4632      	mov	r2, r6
    a63c:	4641      	mov	r1, r8
    a63e:	2004      	movs	r0, #4
    a640:	f7ff faf8 	bl	9c34 <MPSL_IRQ_RADIO_Handler+0xd14>
    a644:	2501      	movs	r5, #1
    a646:	e7b7      	b.n	a5b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    a648:	4632      	mov	r2, r6
    a64a:	4641      	mov	r1, r8
    a64c:	2004      	movs	r0, #4
    a64e:	e7b1      	b.n	a5b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x324>
    a650:	2920      	cmp	r1, #32
    a652:	bf1d      	ittte	ne
    a654:	9808      	ldrne	r0, [sp, #32]
    a656:	eb00 0041 	addne.w	r0, r0, r1, lsl #1
    a65a:	7840      	ldrbne	r0, [r0, #1]
    a65c:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    a660:	bf04      	itt	eq
    a662:	4438      	addeq	r0, r7
    a664:	f890 0028 	ldrbeq.w	r0, [r0, #40]	; 0x28
    a668:	e78c      	b.n	a584 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f4>
    a66a:	9811      	ldr	r0, [sp, #68]	; 0x44
    a66c:	f010 0fff 	tst.w	r0, #255	; 0xff
    a670:	d028      	beq.n	a6c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x434>
    a672:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
    a676:	2820      	cmp	r0, #32
    a678:	d124      	bne.n	a6c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x434>
    a67a:	b125      	cbz	r5, a686 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f6>
    a67c:	2100      	movs	r1, #0
    a67e:	f240 7047 	movw	r0, #1863	; 0x747
    a682:	f3af 8000 	nop.w
    a686:	4631      	mov	r1, r6
    a688:	2002      	movs	r0, #2
    a68a:	f7ff fb05 	bl	9c98 <MPSL_IRQ_RADIO_Handler+0xd78>
    a68e:	e013      	b.n	a6b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x428>
    a690:	e027      	b.n	a6e2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x452>
    a692:	0000      	.short	0x0000
    a694:	e000ed04 	.word	0xe000ed04
    a698:	20001108 	.word	0x20001108
    a69c:	00000000 	.word	0x00000000
    a6a0:	20000c88 	.word	0x20000c88
    a6a4:	00000000 	.word	0x00000000
    a6a8:	20001088 	.word	0x20001088
    a6ac:	1e847fff 	.word	0x1e847fff
    a6b0:	0f424000 	.word	0x0f424000
    a6b4:	00000000 	.word	0x00000000
    a6b8:	9010      	str	r0, [sp, #64]	; 0x40
    a6ba:	b918      	cbnz	r0, a6c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x434>
    a6bc:	7820      	ldrb	r0, [r4, #0]
    a6be:	b1f0      	cbz	r0, a6fe <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x46e>
    a6c0:	2801      	cmp	r0, #1
    a6c2:	d02b      	beq.n	a71c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x48c>
    a6c4:	483b      	ldr	r0, [pc, #236]	; (a7b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x524>)
    a6c6:	b120      	cbz	r0, a6d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x442>
    a6c8:	2100      	movs	r1, #0
    a6ca:	f240 7064 	movw	r0, #1892	; 0x764
    a6ce:	f3af 8000 	nop.w
    a6d2:	20ff      	movs	r0, #255	; 0xff
    a6d4:	f1ba 0f00 	cmp.w	sl, #0
    a6d8:	bf18      	it	ne
    a6da:	f887 0031 	strbne.w	r0, [r7, #49]	; 0x31
    a6de:	d026      	beq.n	a72e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x49e>
    a6e0:	2501      	movs	r5, #1
    a6e2:	4c34      	ldr	r4, [pc, #208]	; (a7b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x524>)
    a6e4:	b124      	cbz	r4, a6f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x460>
    a6e6:	2100      	movs	r1, #0
    a6e8:	f240 7075 	movw	r0, #1909	; 0x775
    a6ec:	f3af 8000 	nop.w
    a6f0:	9810      	ldr	r0, [sp, #64]	; 0x40
    a6f2:	4e31      	ldr	r6, [pc, #196]	; (a7b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x528>)
    a6f4:	2802      	cmp	r0, #2
    a6f6:	d023      	beq.n	a740 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4b0>
    a6f8:	2801      	cmp	r0, #1
    a6fa:	d029      	beq.n	a750 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c0>
    a6fc:	e02d      	b.n	a75a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4ca>
    a6fe:	482d      	ldr	r0, [pc, #180]	; (a7b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x524>)
    a700:	b120      	cbz	r0, a70c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x47c>
    a702:	2100      	movs	r1, #0
    a704:	f240 704f 	movw	r0, #1871	; 0x74f
    a708:	f3af 8000 	nop.w
    a70c:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    a710:	2004      	movs	r0, #4
    a712:	9917      	ldr	r1, [sp, #92]	; 0x5c
    a714:	f7ff fa8e 	bl	9c34 <MPSL_IRQ_RADIO_Handler+0xd14>
    a718:	2501      	movs	r5, #1
    a71a:	e7e2      	b.n	a6e2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x452>
    a71c:	2d00      	cmp	r5, #0
    a71e:	f43f ae02 	beq.w	a326 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x96>
    a722:	2100      	movs	r1, #0
    a724:	f240 705a 	movw	r0, #1882	; 0x75a
    a728:	f3af 8000 	nop.w
    a72c:	e5fb      	b.n	a326 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x96>
    a72e:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
    a732:	2101      	movs	r1, #1
    a734:	4391      	bics	r1, r2
    a736:	f887 1041 	strb.w	r1, [r7, #65]	; 0x41
    a73a:	f887 0031 	strb.w	r0, [r7, #49]	; 0x31
    a73e:	e7cf      	b.n	a6e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x450>
    a740:	68b8      	ldr	r0, [r7, #8]
    a742:	ebb0 0009 	subs.w	r0, r0, r9
    a746:	f006 f92a 	bl	1099e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a74a:	6871      	ldr	r1, [r6, #4]
    a74c:	b921      	cbnz	r1, a758 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4c8>
    a74e:	e004      	b.n	a75a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4ca>
    a750:	6871      	ldr	r1, [r6, #4]
    a752:	f04f 30ff 	mov.w	r0, #4294967295
    a756:	b101      	cbz	r1, a75a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4ca>
    a758:	4788      	blx	r1
    a75a:	f1b8 0f00 	cmp.w	r8, #0
    a75e:	d022      	beq.n	a7a6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x516>
    a760:	b124      	cbz	r4, a76c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4dc>
    a762:	2100      	movs	r1, #0
    a764:	f44f 60f1 	mov.w	r0, #1928	; 0x788
    a768:	f3af 8000 	nop.w
    a76c:	b18d      	cbz	r5, a792 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x502>
    a76e:	f897 0041 	ldrb.w	r0, [r7, #65]	; 0x41
    a772:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    a776:	4438      	add	r0, r7
    a778:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
    a77c:	2820      	cmp	r0, #32
    a77e:	d008      	beq.n	a792 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x502>
    a780:	b124      	cbz	r4, a78c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4fc>
    a782:	2100      	movs	r1, #0
    a784:	f240 708f 	movw	r0, #1935	; 0x78f
    a788:	f3af 8000 	nop.w
    a78c:	7870      	ldrb	r0, [r6, #1]
    a78e:	f002 f855 	bl	c83c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a792:	b124      	cbz	r4, a79e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x50e>
    a794:	2100      	movs	r1, #0
    a796:	f240 7094 	movw	r0, #1940	; 0x794
    a79a:	f3af 8000 	nop.w
    a79e:	b019      	add	sp, #100	; 0x64
    a7a0:	4628      	mov	r0, r5
    a7a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a7a6:	4805      	ldr	r0, [pc, #20]	; (a7bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x52c>)
    a7a8:	2800      	cmp	r0, #0
    a7aa:	bf18      	it	ne
    a7ac:	f3af 8000 	nopne.w
    a7b0:	b662      	cpsie	i
    a7b2:	e7d5      	b.n	a760 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d0>
    a7b4:	00000000 	.word	0x00000000
    a7b8:	20000308 	.word	0x20000308
    a7bc:	00000000 	.word	0x00000000

0000a7c0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    a7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a7c4:	4604      	mov	r4, r0
    a7c6:	7800      	ldrb	r0, [r0, #0]
    a7c8:	b08d      	sub	sp, #52	; 0x34
    a7ca:	b118      	cbz	r0, a7d4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    a7cc:	b00d      	add	sp, #52	; 0x34
    a7ce:	2000      	movs	r0, #0
    a7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a7d4:	48d0      	ldr	r0, [pc, #832]	; (ab18 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x358>)
    a7d6:	6800      	ldr	r0, [r0, #0]
    a7d8:	05c0      	lsls	r0, r0, #23
    a7da:	0dc0      	lsrs	r0, r0, #23
    a7dc:	d00e      	beq.n	a7fc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    a7de:	3810      	subs	r0, #16
    a7e0:	b240      	sxtb	r0, r0
    a7e2:	2800      	cmp	r0, #0
    a7e4:	bfb8      	it	lt
    a7e6:	f000 000f 	andlt.w	r0, r0, #15
    a7ea:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a7ee:	bfac      	ite	ge
    a7f0:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a7f4:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a7f8:	0940      	lsrs	r0, r0, #5
    a7fa:	d0e7      	beq.n	a7cc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    a7fc:	a805      	add	r0, sp, #20
    a7fe:	f8df a31c 	ldr.w	sl, [pc, #796]	; ab1c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x35c>
    a802:	9008      	str	r0, [sp, #32]
    a804:	f1ba 0f00 	cmp.w	sl, #0
    a808:	d004      	beq.n	a814 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x54>
    a80a:	2100      	movs	r1, #0
    a80c:	f240 50c5 	movw	r0, #1477	; 0x5c5
    a810:	f3af 8000 	nop.w
    a814:	f8df 8308 	ldr.w	r8, [pc, #776]	; ab20 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x360>
    a818:	f898 6041 	ldrb.w	r6, [r8, #65]	; 0x41
    a81c:	2500      	movs	r5, #0
    a81e:	f888 5031 	strb.w	r5, [r8, #49]	; 0x31
    a822:	9501      	str	r5, [sp, #4]
    a824:	f1ba 0f00 	cmp.w	sl, #0
    a828:	d004      	beq.n	a834 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x74>
    a82a:	2100      	movs	r1, #0
    a82c:	f240 50ca 	movw	r0, #1482	; 0x5ca
    a830:	f3af 8000 	nop.w
    a834:	2001      	movs	r0, #1
    a836:	ea20 0906 	bic.w	r9, r0, r6
    a83a:	48ba      	ldr	r0, [pc, #744]	; (ab24 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x364>)
    a83c:	2240      	movs	r2, #64	; 0x40
    a83e:	eb00 1186 	add.w	r1, r0, r6, lsl #6
    a842:	eb00 1089 	add.w	r0, r0, r9, lsl #6
    a846:	f006 fa3a 	bl	10cbe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a84a:	f1ba 0f00 	cmp.w	sl, #0
    a84e:	d004      	beq.n	a85a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x9a>
    a850:	2100      	movs	r1, #0
    a852:	f240 503c 	movw	r0, #1340	; 0x53c
    a856:	f3af 8000 	nop.w
    a85a:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    a85e:	eb00 0108 	add.w	r1, r0, r8
    a862:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a866:	4440      	add	r0, r8
    a868:	f1ba 0f00 	cmp.w	sl, #0
    a86c:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    a86e:	850a      	strh	r2, [r1, #40]	; 0x28
    a870:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    a874:	f881 002a 	strb.w	r0, [r1, #42]	; 0x2a
    a878:	d004      	beq.n	a884 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    a87a:	2100      	movs	r1, #0
    a87c:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    a880:	f3af 8000 	nop.w
    a884:	f1ba 0f00 	cmp.w	sl, #0
    a888:	d004      	beq.n	a894 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xd4>
    a88a:	2100      	movs	r1, #0
    a88c:	f240 50cf 	movw	r0, #1487	; 0x5cf
    a890:	f3af 8000 	nop.w
    a894:	f001 f94c 	bl	bb30 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a898:	460f      	mov	r7, r1
    a89a:	8922      	ldrh	r2, [r4, #8]
    a89c:	4629      	mov	r1, r5
    a89e:	f362 411f 	bfi	r1, r2, #16, #16
    a8a2:	4606      	mov	r6, r0
    a8a4:	7aa2      	ldrb	r2, [r4, #10]
    a8a6:	4628      	mov	r0, r5
    a8a8:	f362 0007 	bfi	r0, r2, #0, #8
    a8ac:	7ae2      	ldrb	r2, [r4, #11]
    a8ae:	f10d 0b08 	add.w	fp, sp, #8
    a8b2:	f362 200f 	bfi	r0, r2, #8, #8
    a8b6:	7822      	ldrb	r2, [r4, #0]
    a8b8:	9502      	str	r5, [sp, #8]
    a8ba:	f362 4017 	bfi	r0, r2, #16, #8
    a8be:	e9cd 5104 	strd	r5, r1, [sp, #16]
    a8c2:	e9cd 0506 	strd	r0, r5, [sp, #24]
    a8c6:	9503      	str	r5, [sp, #12]
    a8c8:	7820      	ldrb	r0, [r4, #0]
    a8ca:	b388      	cbz	r0, a930 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x170>
    a8cc:	f8bd 0016 	ldrh.w	r0, [sp, #22]
    a8d0:	4995      	ldr	r1, [pc, #596]	; (ab28 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x368>)
    a8d2:	f10b 020c 	add.w	r2, fp, #12
    a8d6:	1a08      	subs	r0, r1, r0
    a8d8:	a909      	add	r1, sp, #36	; 0x24
    a8da:	f000 fe49 	bl	b570 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a8de:	2200      	movs	r2, #0
    a8e0:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    a8e4:	4630      	mov	r0, r6
    a8e6:	4639      	mov	r1, r7
    a8e8:	f7fe fd10 	bl	930c <MPSL_IRQ_RADIO_Handler+0x3ec>
    a8ec:	4684      	mov	ip, r0
    a8ee:	7ae0      	ldrb	r0, [r4, #11]
    a8f0:	460b      	mov	r3, r1
    a8f2:	2800      	cmp	r0, #0
    a8f4:	bf0c      	ite	eq
    a8f6:	207a      	moveq	r0, #122	; 0x7a
    a8f8:	204a      	movne	r0, #74	; 0x4a
    a8fa:	6861      	ldr	r1, [r4, #4]
    a8fc:	f89d 2014 	ldrb.w	r2, [sp, #20]
    a900:	4408      	add	r0, r1
    a902:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    a906:	e9cd c302 	strd	ip, r3, [sp, #8]
    a90a:	4411      	add	r1, r2
    a90c:	4408      	add	r0, r1
    a90e:	1c80      	adds	r0, r0, #2
    a910:	f000 fe12 	bl	b538 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a914:	f8cd 9000 	str.w	r9, [sp]
    a918:	9004      	str	r0, [sp, #16]
    a91a:	4632      	mov	r2, r6
    a91c:	463b      	mov	r3, r7
    a91e:	4659      	mov	r1, fp
    a920:	6920      	ldr	r0, [r4, #16]
    a922:	f7fe fb57 	bl	8fd4 <MPSL_IRQ_RADIO_Handler+0xb4>
    a926:	2800      	cmp	r0, #0
    a928:	bf08      	it	eq
    a92a:	e9cd 6702 	strdeq	r6, r7, [sp, #8]
    a92e:	e045      	b.n	a9bc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    a930:	e7ff      	b.n	a932 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x172>
    a932:	4630      	mov	r0, r6
    a934:	4639      	mov	r1, r7
    a936:	f000 fd9d 	bl	b474 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    a93a:	4b7c      	ldr	r3, [pc, #496]	; (ab2c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36c>)
    a93c:	4602      	mov	r2, r0
    a93e:	eb10 0c03 	adds.w	ip, r0, r3
    a942:	468b      	mov	fp, r1
    a944:	f141 0300 	adc.w	r3, r1, #0
    a948:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    a94c:	ebb0 0c0c 	subs.w	ip, r0, ip
    a950:	eb71 0303 	sbcs.w	r3, r1, r3
    a954:	d22a      	bcs.n	a9ac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ec>
    a956:	3229      	adds	r2, #41	; 0x29
    a958:	f14b 0300 	adc.w	r3, fp, #0
    a95c:	1a82      	subs	r2, r0, r2
    a95e:	eb71 0203 	sbcs.w	r2, r1, r3
    a962:	d323      	bcc.n	a9ac <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ec>
    a964:	8922      	ldrh	r2, [r4, #8]
    a966:	ab0a      	add	r3, sp, #40	; 0x28
    a968:	1a80      	subs	r0, r0, r2
    a96a:	eb61 0105 	sbc.w	r1, r1, r5
    a96e:	9a08      	ldr	r2, [sp, #32]
    a970:	1e40      	subs	r0, r0, #1
    a972:	9200      	str	r2, [sp, #0]
    a974:	f141 31ff 	adc.w	r1, r1, #4294967295
    a978:	aa09      	add	r2, sp, #36	; 0x24
    a97a:	f000 fd9f 	bl	b4bc <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    a97e:	7ae0      	ldrb	r0, [r4, #11]
    a980:	2800      	cmp	r0, #0
    a982:	bf0c      	ite	eq
    a984:	207a      	moveq	r0, #122	; 0x7a
    a986:	204a      	movne	r0, #74	; 0x4a
    a988:	9909      	ldr	r1, [sp, #36]	; 0x24
    a98a:	8922      	ldrh	r2, [r4, #8]
    a98c:	4408      	add	r0, r1
    a98e:	6861      	ldr	r1, [r4, #4]
    a990:	4411      	add	r1, r2
    a992:	4408      	add	r0, r1
    a994:	1c80      	adds	r0, r0, #2
    a996:	f000 fdcf 	bl	b538 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a99a:	4601      	mov	r1, r0
    a99c:	e9dd 020a 	ldrd	r0, r2, [sp, #40]	; 0x28
    a9a0:	e9cd 0202 	strd	r0, r2, [sp, #8]
    a9a4:	1a08      	subs	r0, r1, r0
    a9a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a9aa:	e006      	b.n	a9ba <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fa>
    a9ac:	1e70      	subs	r0, r6, #1
    a9ae:	f147 31ff 	adc.w	r1, r7, #4294967295
    a9b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    a9b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    a9ba:	9004      	str	r0, [sp, #16]
    a9bc:	f1ba 0f00 	cmp.w	sl, #0
    a9c0:	d004      	beq.n	a9cc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20c>
    a9c2:	2100      	movs	r1, #0
    a9c4:	f240 50d5 	movw	r0, #1493	; 0x5d5
    a9c8:	f3af 8000 	nop.w
    a9cc:	e9d8 2003 	ldrd	r2, r0, [r8, #12]
    a9d0:	f8d8 1008 	ldr.w	r1, [r8, #8]
    a9d4:	1808      	adds	r0, r1, r0
    a9d6:	eb42 0105 	adc.w	r1, r2, r5
    a9da:	f898 2042 	ldrb.w	r2, [r8, #66]	; 0x42
    a9de:	2a20      	cmp	r2, #32
    a9e0:	d009      	beq.n	a9f6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x236>
    a9e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    a9e6:	1a12      	subs	r2, r2, r0
    a9e8:	eb73 0201 	sbcs.w	r2, r3, r1
    a9ec:	d203      	bcs.n	a9f6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x236>
    a9ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
    a9f2:	2001      	movs	r0, #1
    a9f4:	9001      	str	r0, [sp, #4]
    a9f6:	f1ba 0f00 	cmp.w	sl, #0
    a9fa:	d004      	beq.n	aa06 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x246>
    a9fc:	2100      	movs	r1, #0
    a9fe:	f44f 60bc 	mov.w	r0, #1504	; 0x5e0
    aa02:	f3af 8000 	nop.w
    aa06:	9902      	ldr	r1, [sp, #8]
    aa08:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    aa0c:	1a0a      	subs	r2, r1, r0
    aa0e:	9b04      	ldr	r3, [sp, #16]
    aa10:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    aa14:	18c9      	adds	r1, r1, r3
    aa16:	1a08      	subs	r0, r1, r0
    aa18:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    aa1c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    aa20:	bf98      	it	ls
    aa22:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    aa26:	d80b      	bhi.n	aa40 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x280>
    aa28:	4632      	mov	r2, r6
    aa2a:	463b      	mov	r3, r7
    aa2c:	a902      	add	r1, sp, #8
    aa2e:	483f      	ldr	r0, [pc, #252]	; (ab2c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36c>)
    aa30:	f8cd 9000 	str.w	r9, [sp]
    aa34:	f7fe face 	bl	8fd4 <MPSL_IRQ_RADIO_Handler+0xb4>
    aa38:	9901      	ldr	r1, [sp, #4]
    aa3a:	4308      	orrs	r0, r1
    aa3c:	d145      	bne.n	aaca <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x30a>
    aa3e:	e05d      	b.n	aafc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x33c>
    aa40:	f8bd b016 	ldrh.w	fp, [sp, #22]
    aa44:	aa01      	add	r2, sp, #4
    aa46:	4669      	mov	r1, sp
    aa48:	4658      	mov	r0, fp
    aa4a:	f000 fd91 	bl	b570 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    aa4e:	f001 fa8d 	bl	bf6c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    aa52:	f000 fd71 	bl	b538 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    aa56:	4681      	mov	r9, r0
    aa58:	f898 0042 	ldrb.w	r0, [r8, #66]	; 0x42
    aa5c:	2820      	cmp	r0, #32
    aa5e:	d00a      	beq.n	aa76 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b6>
    aa60:	e9d8 3103 	ldrd	r3, r1, [r8, #12]
    aa64:	f8d8 2008 	ldr.w	r2, [r8, #8]
    aa68:	1d89      	adds	r1, r1, #6
    aa6a:	f145 0000 	adc.w	r0, r5, #0
    aa6e:	1856      	adds	r6, r2, r1
    aa70:	eb43 0700 	adc.w	r7, r3, r0
    aa74:	e024      	b.n	aac0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x300>
    aa76:	360a      	adds	r6, #10
    aa78:	f147 0700 	adc.w	r7, r7, #0
    aa7c:	f1bb 0f00 	cmp.w	fp, #0
    aa80:	d017      	beq.n	aab2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f2>
    aa82:	f001 fd91 	bl	c5a8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    aa86:	b9a0      	cbnz	r0, aab2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2f2>
    aa88:	f001 fc48 	bl	c31c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    aa8c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    aa90:	bf08      	it	eq
    aa92:	200d      	moveq	r0, #13
    aa94:	d00b      	beq.n	aaae <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ee>
    aa96:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    aa9a:	3856      	subs	r0, #86	; 0x56
    aa9c:	bf08      	it	eq
    aa9e:	201c      	moveq	r0, #28
    aaa0:	d005      	beq.n	aaae <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ee>
    aaa2:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    aaa6:	389f      	subs	r0, #159	; 0x9f
    aaa8:	bf14      	ite	ne
    aaaa:	4628      	movne	r0, r5
    aaac:	2032      	moveq	r0, #50	; 0x32
    aaae:	1986      	adds	r6, r0, r6
    aab0:	416f      	adcs	r7, r5
    aab2:	9800      	ldr	r0, [sp, #0]
    aab4:	4581      	cmp	r9, r0
    aab6:	d903      	bls.n	aac0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x300>
    aab8:	eba9 0000 	sub.w	r0, r9, r0
    aabc:	1986      	adds	r6, r0, r6
    aabe:	416f      	adcs	r7, r5
    aac0:	201f      	movs	r0, #31
    aac2:	e9cd 6702 	strd	r6, r7, [sp, #8]
    aac6:	f88d 0014 	strb.w	r0, [sp, #20]
    aaca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    aace:	f000 fcd1 	bl	b474 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    aad2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    aad6:	1880      	adds	r0, r0, r2
    aad8:	f89d 2014 	ldrb.w	r2, [sp, #20]
    aadc:	4169      	adcs	r1, r5
    aade:	1880      	adds	r0, r0, r2
    aae0:	4169      	adcs	r1, r5
    aae2:	1c42      	adds	r2, r0, #1
    aae4:	f141 0000 	adc.w	r0, r1, #0
    aae8:	e9c4 2004 	strd	r2, r0, [r4, #16]
    aaec:	f1ba 0f00 	cmp.w	sl, #0
    aaf0:	d004      	beq.n	aafc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x33c>
    aaf2:	2100      	movs	r1, #0
    aaf4:	f240 50fa 	movw	r0, #1530	; 0x5fa
    aaf8:	f3af 8000 	nop.w
    aafc:	f898 0031 	ldrb.w	r0, [r8, #49]	; 0x31
    ab00:	f88d 0000 	strb.w	r0, [sp]
    ab04:	f89d 0000 	ldrb.w	r0, [sp]
    ab08:	2800      	cmp	r0, #0
    ab0a:	f47f ae7b 	bne.w	a804 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x44>
    ab0e:	b00d      	add	sp, #52	; 0x34
    ab10:	2001      	movs	r0, #1
    ab12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ab16:	0000      	.short	0x0000
    ab18:	e000ed04 	.word	0xe000ed04
    ab1c:	00000000 	.word	0x00000000
    ab20:	20001108 	.word	0x20001108
    ab24:	20001088 	.word	0x20001088
    ab28:	1e847fff 	.word	0x1e847fff
    ab2c:	0f424000 	.word	0x0f424000

0000ab30 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    ab30:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab34:	4d9d      	ldr	r5, [pc, #628]	; (adac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x27c>)
    ab36:	b08c      	sub	sp, #48	; 0x30
    ab38:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    ab3c:	2000      	movs	r0, #0
    ab3e:	9007      	str	r0, [sp, #28]
    ab40:	9008      	str	r0, [sp, #32]
    ab42:	2001      	movs	r0, #1
    ab44:	4c9a      	ldr	r4, [pc, #616]	; (adb0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x280>)
    ab46:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    ab4a:	f04f 0800 	mov.w	r8, #0
    ab4e:	4607      	mov	r7, r0
    ab50:	9006      	str	r0, [sp, #24]
    ab52:	b124      	cbz	r4, ab5e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    ab54:	2100      	movs	r1, #0
    ab56:	f240 70a5 	movw	r0, #1957	; 0x7a5
    ab5a:	f3af 8000 	nop.w
    ab5e:	9806      	ldr	r0, [sp, #24]
    ab60:	2800      	cmp	r0, #0
    ab62:	d03c      	beq.n	abde <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    ab64:	f885 8031 	strb.w	r8, [r5, #49]	; 0x31
    ab68:	b124      	cbz	r4, ab74 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    ab6a:	2100      	movs	r1, #0
    ab6c:	f240 70aa 	movw	r0, #1962	; 0x7aa
    ab70:	f3af 8000 	nop.w
    ab74:	f895 a041 	ldrb.w	sl, [r5, #65]	; 0x41
    ab78:	2240      	movs	r2, #64	; 0x40
    ab7a:	ea27 060a 	bic.w	r6, r7, sl
    ab7e:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    ab82:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    ab86:	4683      	mov	fp, r0
    ab88:	f006 f899 	bl	10cbe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ab8c:	b124      	cbz	r4, ab98 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    ab8e:	2100      	movs	r1, #0
    ab90:	f240 503c 	movw	r0, #1340	; 0x53c
    ab94:	f3af 8000 	nop.w
    ab98:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    ab9c:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    aba0:	4428      	add	r0, r5
    aba2:	4429      	add	r1, r5
    aba4:	9000      	str	r0, [sp, #0]
    aba6:	8d0a      	ldrh	r2, [r1, #40]	; 0x28
    aba8:	8502      	strh	r2, [r0, #40]	; 0x28
    abaa:	f891 102a 	ldrb.w	r1, [r1, #42]	; 0x2a
    abae:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
    abb2:	b124      	cbz	r4, abbe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    abb4:	2100      	movs	r1, #0
    abb6:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    abba:	f3af 8000 	nop.w
    abbe:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    abc2:	f88d 0008 	strb.w	r0, [sp, #8]
    abc6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    abca:	b178      	cbz	r0, abec <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    abcc:	2c00      	cmp	r4, #0
    abce:	bf1c      	itt	ne
    abd0:	2100      	movne	r1, #0
    abd2:	f44f 60f6 	movne.w	r0, #1968	; 0x7b0
    abd6:	d0bc      	beq.n	ab52 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    abd8:	f3af 8000 	nop.w
    abdc:	e7b9      	b.n	ab52 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    abde:	4875      	ldr	r0, [pc, #468]	; (adb4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    abe0:	2800      	cmp	r0, #0
    abe2:	bf18      	it	ne
    abe4:	f3af 8000 	nopne.w
    abe8:	b662      	cpsie	i
    abea:	e7bb      	b.n	ab64 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    abec:	b124      	cbz	r4, abf8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    abee:	2100      	movs	r1, #0
    abf0:	f240 70b4 	movw	r0, #1972	; 0x7b4
    abf4:	f3af 8000 	nop.w
    abf8:	980c      	ldr	r0, [sp, #48]	; 0x30
    abfa:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    abfe:	2803      	cmp	r0, #3
    ac00:	d17e      	bne.n	ad00 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    ac02:	9a00      	ldr	r2, [sp, #0]
    ac04:	990c      	ldr	r1, [sp, #48]	; 0x30
    ac06:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
    ac0a:	4288      	cmp	r0, r1
    ac0c:	bf14      	ite	ne
    ac0e:	f04f 0a00 	movne.w	sl, #0
    ac12:	f04f 0a01 	moveq.w	sl, #1
    ac16:	f102 0c28 	add.w	ip, r2, #40	; 0x28
    ac1a:	4683      	mov	fp, r0
    ac1c:	2220      	movs	r2, #32
    ac1e:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    ac22:	e003      	b.n	ac2c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    ac24:	4602      	mov	r2, r0
    ac26:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    ac2a:	7840      	ldrb	r0, [r0, #1]
    ac2c:	4288      	cmp	r0, r1
    ac2e:	d002      	beq.n	ac36 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    ac30:	2820      	cmp	r0, #32
    ac32:	d00a      	beq.n	ac4a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    ac34:	e7f6      	b.n	ac24 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    ac36:	2820      	cmp	r0, #32
    ac38:	d007      	beq.n	ac4a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    ac3a:	4583      	cmp	fp, r0
    ac3c:	d107      	bne.n	ac4e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    ac3e:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    ac42:	7840      	ldrb	r0, [r0, #1]
    ac44:	f88c 0000 	strb.w	r0, [ip]
    ac48:	e007      	b.n	ac5a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    ac4a:	4640      	mov	r0, r8
    ac4c:	e00c      	b.n	ac68 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    ac4e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    ac52:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    ac56:	7840      	ldrb	r0, [r0, #1]
    ac58:	7048      	strb	r0, [r1, #1]
    ac5a:	b124      	cbz	r4, ac66 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    ac5c:	2100      	movs	r1, #0
    ac5e:	f240 40a4 	movw	r0, #1188	; 0x4a4
    ac62:	f3af 8000 	nop.w
    ac66:	4638      	mov	r0, r7
    ac68:	46c3      	mov	fp, r8
    ac6a:	ea10 0f0a 	tst.w	r0, sl
    ac6e:	bf18      	it	ne
    ac70:	46bb      	movne	fp, r7
    ac72:	2800      	cmp	r0, #0
    ac74:	d04e      	beq.n	ad14 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    ac76:	b124      	cbz	r4, ac82 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    ac78:	2100      	movs	r1, #0
    ac7a:	f240 70b9 	movw	r0, #1977	; 0x7b9
    ac7e:	f3af 8000 	nop.w
    ac82:	4632      	mov	r2, r6
    ac84:	2001      	movs	r0, #1
    ac86:	990c      	ldr	r1, [sp, #48]	; 0x30
    ac88:	f7fe ffd4 	bl	9c34 <MPSL_IRQ_RADIO_Handler+0xd14>
    ac8c:	b124      	cbz	r4, ac98 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    ac8e:	2100      	movs	r1, #0
    ac90:	f240 70c2 	movw	r0, #1986	; 0x7c2
    ac94:	f3af 8000 	nop.w
    ac98:	4847      	ldr	r0, [pc, #284]	; (adb8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x288>)
    ac9a:	2800      	cmp	r0, #0
    ac9c:	bf18      	it	ne
    ac9e:	f3af 8000 	nopne.w
    aca2:	f3ef 8010 	mrs	r0, PRIMASK
    aca6:	b672      	cpsid	i
    aca8:	9006      	str	r0, [sp, #24]
    acaa:	b124      	cbz	r4, acb6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    acac:	2100      	movs	r1, #0
    acae:	f240 70c7 	movw	r0, #1991	; 0x7c7
    acb2:	f3af 8000 	nop.w
    acb6:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    acba:	f88d 0008 	strb.w	r0, [sp, #8]
    acbe:	f89d 0008 	ldrb.w	r0, [sp, #8]
    acc2:	b138      	cbz	r0, acd4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    acc4:	2c00      	cmp	r4, #0
    acc6:	bf1c      	itt	ne
    acc8:	2100      	movne	r1, #0
    acca:	f240 70cb 	movwne	r0, #1995	; 0x7cb
    acce:	f43f af40 	beq.w	ab52 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    acd2:	e781      	b.n	abd8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    acd4:	f1bb 0f00 	cmp.w	fp, #0
    acd8:	d009      	beq.n	acee <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    acda:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
    acde:	2820      	cmp	r0, #32
    ace0:	d105      	bne.n	acee <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    ace2:	4631      	mov	r1, r6
    ace4:	2002      	movs	r0, #2
    ace6:	f7fe ffd7 	bl	9c98 <MPSL_IRQ_RADIO_Handler+0xd78>
    acea:	9008      	str	r0, [sp, #32]
    acec:	b1f8      	cbz	r0, ad2e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    acee:	b124      	cbz	r4, acfa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    acf0:	2100      	movs	r1, #0
    acf2:	f240 70df 	movw	r0, #2015	; 0x7df
    acf6:	f3af 8000 	nop.w
    acfa:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
    acfe:	e000      	b.n	ad02 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    ad00:	e008      	b.n	ad14 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    ad02:	ea27 0000 	bic.w	r0, r7, r0
    ad06:	f885 0041 	strb.w	r0, [r5, #65]	; 0x41
    ad0a:	20ff      	movs	r0, #255	; 0xff
    ad0c:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    ad10:	2001      	movs	r0, #1
    ad12:	9007      	str	r0, [sp, #28]
    ad14:	b124      	cbz	r4, ad20 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    ad16:	2100      	movs	r1, #0
    ad18:	f44f 60fd 	mov.w	r0, #2024	; 0x7e8
    ad1c:	f3af 8000 	nop.w
    ad20:	9808      	ldr	r0, [sp, #32]
    ad22:	4e26      	ldr	r6, [pc, #152]	; (adbc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x28c>)
    ad24:	2802      	cmp	r0, #2
    ad26:	d009      	beq.n	ad3c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    ad28:	2801      	cmp	r0, #1
    ad2a:	d027      	beq.n	ad7c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24c>
    ad2c:	e02b      	b.n	ad86 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    ad2e:	b354      	cbz	r4, ad86 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    ad30:	2100      	movs	r1, #0
    ad32:	f240 70da 	movw	r0, #2010	; 0x7da
    ad36:	f3af 8000 	nop.w
    ad3a:	e7ec      	b.n	ad16 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    ad3c:	f000 fef8 	bl	bb30 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    ad40:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    ad44:	ebb3 0c00 	subs.w	ip, r3, r0
    ad48:	eb72 0c01 	sbcs.w	ip, r2, r1
    ad4c:	d204      	bcs.n	ad58 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    ad4e:	f240 71ee 	movw	r1, #2030	; 0x7ee
    ad52:	2070      	movs	r0, #112	; 0x70
    ad54:	f001 fca0 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ad58:	1a18      	subs	r0, r3, r0
    ad5a:	eb62 0101 	sbc.w	r1, r2, r1
    ad5e:	f5b0 0200 	subs.w	r2, r0, #8388608	; 0x800000
    ad62:	f171 0100 	sbcs.w	r1, r1, #0
    ad66:	d304      	bcc.n	ad72 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x242>
    ad68:	f240 71ef 	movw	r1, #2031	; 0x7ef
    ad6c:	2070      	movs	r0, #112	; 0x70
    ad6e:	f001 fc93 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ad72:	f005 fe14 	bl	1099e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    ad76:	6871      	ldr	r1, [r6, #4]
    ad78:	b129      	cbz	r1, ad86 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    ad7a:	e003      	b.n	ad84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>
    ad7c:	6871      	ldr	r1, [r6, #4]
    ad7e:	f04f 30ff 	mov.w	r0, #4294967295
    ad82:	b101      	cbz	r1, ad86 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    ad84:	4788      	blx	r1
    ad86:	9806      	ldr	r0, [sp, #24]
    ad88:	b148      	cbz	r0, ad9e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x26e>
    ad8a:	b124      	cbz	r4, ad96 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x266>
    ad8c:	2100      	movs	r1, #0
    ad8e:	f240 70ff 	movw	r0, #2047	; 0x7ff
    ad92:	f3af 8000 	nop.w
    ad96:	9807      	ldr	r0, [sp, #28]
    ad98:	b00d      	add	sp, #52	; 0x34
    ad9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ad9e:	4805      	ldr	r0, [pc, #20]	; (adb4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    ada0:	2800      	cmp	r0, #0
    ada2:	bf18      	it	ne
    ada4:	f3af 8000 	nopne.w
    ada8:	b662      	cpsie	i
    adaa:	e7ee      	b.n	ad8a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25a>
    adac:	20001108 	.word	0x20001108
	...
    adbc:	20000308 	.word	0x20000308

0000adc0 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    adc0:	2820      	cmp	r0, #32
    adc2:	bf24      	itt	cs
    adc4:	2000      	movcs	r0, #0
    adc6:	4770      	bxcs	lr
    adc8:	4b03      	ldr	r3, [pc, #12]	; (add8 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x18>)
    adca:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    adce:	e9c0 1200 	strd	r1, r2, [r0]
    add2:	2001      	movs	r0, #1
    add4:	4770      	bx	lr
    add6:	0000      	.short	0x0000
    add8:	20000c88 	.word	0x20000c88

0000addc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    addc:	b510      	push	{r4, lr}
    adde:	2820      	cmp	r0, #32
    ade0:	d211      	bcs.n	ae06 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    ade2:	490e      	ldr	r1, [pc, #56]	; (ae1c <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    ade4:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    ade8:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    adec:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    adf0:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    adf4:	b13b      	cbz	r3, ae06 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    adf6:	f891 3041 	ldrb.w	r3, [r1, #65]	; 0x41
    adfa:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    adfe:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    ae02:	2a01      	cmp	r2, #1
    ae04:	d001      	beq.n	ae0a <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    ae06:	2000      	movs	r0, #0
    ae08:	bd10      	pop	{r4, pc}
    ae0a:	f891 2041 	ldrb.w	r2, [r1, #65]	; 0x41
    ae0e:	4601      	mov	r1, r0
    ae10:	2000      	movs	r0, #0
    ae12:	f7fe ff0f 	bl	9c34 <MPSL_IRQ_RADIO_Handler+0xd14>
    ae16:	2001      	movs	r0, #1
    ae18:	bd10      	pop	{r4, pc}
    ae1a:	0000      	.short	0x0000
    ae1c:	20001108 	.word	0x20001108

0000ae20 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    ae20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ae24:	4e86      	ldr	r6, [pc, #536]	; (b040 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    ae26:	4680      	mov	r8, r0
    ae28:	f896 0041 	ldrb.w	r0, [r6, #65]	; 0x41
    ae2c:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    ae30:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    ae34:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    ae38:	2800      	cmp	r0, #0
    ae3a:	d071      	beq.n	af20 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    ae3c:	f896 9041 	ldrb.w	r9, [r6, #65]	; 0x41
    ae40:	4d80      	ldr	r5, [pc, #512]	; (b044 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    ae42:	b125      	cbz	r5, ae4e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    ae44:	2100      	movs	r1, #0
    ae46:	f640 307b 	movw	r0, #2939	; 0xb7b
    ae4a:	f3af 8000 	nop.w
    ae4e:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    ae52:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    ae56:	2801      	cmp	r0, #1
    ae58:	d018      	beq.n	ae8c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    ae5a:	b2c0      	uxtb	r0, r0
    ae5c:	2804      	cmp	r0, #4
    ae5e:	bf1c      	itt	ne
    ae60:	2805      	cmpne	r0, #5
    ae62:	2806      	cmpne	r0, #6
    ae64:	d061      	beq.n	af2a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    ae66:	b12d      	cbz	r5, ae74 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    ae68:	f04f 0100 	mov.w	r1, #0
    ae6c:	f640 3087 	movw	r0, #2951	; 0xb87
    ae70:	f3af 8000 	nop.w
    ae74:	f005 fec9 	bl	10c0a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    ae78:	b125      	cbz	r5, ae84 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    ae7a:	2100      	movs	r1, #0
    ae7c:	f640 308b 	movw	r0, #2955	; 0xb8b
    ae80:	f3af 8000 	nop.w
    ae84:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    ae88:	2801      	cmp	r0, #1
    ae8a:	d1e6      	bne.n	ae5a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    ae8c:	2401      	movs	r4, #1
    ae8e:	b125      	cbz	r5, ae9a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    ae90:	2100      	movs	r1, #0
    ae92:	f640 3092 	movw	r0, #2962	; 0xb92
    ae96:	f3af 8000 	nop.w
    ae9a:	2c00      	cmp	r4, #0
    ae9c:	d04b      	beq.n	af36 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    ae9e:	2000      	movs	r0, #0
    aea0:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    aea4:	b125      	cbz	r5, aeb0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    aea6:	2100      	movs	r1, #0
    aea8:	f640 3097 	movw	r0, #2967	; 0xb97
    aeac:	f3af 8000 	nop.w
    aeb0:	f896 b041 	ldrb.w	fp, [r6, #65]	; 0x41
    aeb4:	2001      	movs	r0, #1
    aeb6:	ea20 090b 	bic.w	r9, r0, fp
    aeba:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    aebe:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    aec2:	2240      	movs	r2, #64	; 0x40
    aec4:	f005 fefb 	bl	10cbe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    aec8:	b125      	cbz	r5, aed4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    aeca:	2100      	movs	r1, #0
    aecc:	f240 503c 	movw	r0, #1340	; 0x53c
    aed0:	f3af 8000 	nop.w
    aed4:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    aed8:	eb00 0a06 	add.w	sl, r0, r6
    aedc:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    aee0:	4430      	add	r0, r6
    aee2:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    aee4:	f8aa 1028 	strh.w	r1, [sl, #40]	; 0x28
    aee8:	f890 002a 	ldrb.w	r0, [r0, #42]	; 0x2a
    aeec:	f88a 002a 	strb.w	r0, [sl, #42]	; 0x2a
    aef0:	b125      	cbz	r5, aefc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    aef2:	2100      	movs	r1, #0
    aef4:	f44f 60a8 	mov.w	r0, #1344	; 0x540
    aef8:	f3af 8000 	nop.w
    aefc:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    af00:	f88d 0000 	strb.w	r0, [sp]
    af04:	f89d 0000 	ldrb.w	r0, [sp]
    af08:	b1e0      	cbz	r0, af44 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    af0a:	2d00      	cmp	r5, #0
    af0c:	bf1c      	itt	ne
    af0e:	2100      	movne	r1, #0
    af10:	f640 309d 	movwne	r0, #2973	; 0xb9d
    af14:	d0bb      	beq.n	ae8e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    af16:	bf00      	nop
    af18:	f3af 8000 	nop.w
    af1c:	e7b7      	b.n	ae8e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    af1e:	e7ff      	b.n	af20 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    af20:	f640 3172 	movw	r1, #2930	; 0xb72
    af24:	2070      	movs	r0, #112	; 0x70
    af26:	f001 fbb7 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    af2a:	464a      	mov	r2, r9
    af2c:	4641      	mov	r1, r8
    af2e:	2001      	movs	r0, #1
    af30:	f7fe fe80 	bl	9c34 <MPSL_IRQ_RADIO_Handler+0xd14>
    af34:	e7a0      	b.n	ae78 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    af36:	4844      	ldr	r0, [pc, #272]	; (b048 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    af38:	2800      	cmp	r0, #0
    af3a:	bf18      	it	ne
    af3c:	f3af 8000 	nopne.w
    af40:	b662      	cpsie	i
    af42:	e7ac      	b.n	ae9e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    af44:	b125      	cbz	r5, af50 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    af46:	2100      	movs	r1, #0
    af48:	f640 30a1 	movw	r0, #2977	; 0xba1
    af4c:	f3af 8000 	nop.w
    af50:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
    af54:	f10a 0129 	add.w	r1, sl, #41	; 0x29
    af58:	4640      	mov	r0, r8
    af5a:	461c      	mov	r4, r3
    af5c:	f04f 0b20 	mov.w	fp, #32
    af60:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    af64:	f10a 0a2a 	add.w	sl, sl, #42	; 0x2a
    af68:	e004      	b.n	af74 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    af6a:	46a3      	mov	fp, r4
    af6c:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    af70:	f89c 4001 	ldrb.w	r4, [ip, #1]
    af74:	4284      	cmp	r4, r0
    af76:	d002      	beq.n	af7e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    af78:	2c20      	cmp	r4, #32
    af7a:	d02b      	beq.n	afd4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    af7c:	e7f5      	b.n	af6a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    af7e:	2c20      	cmp	r4, #32
    af80:	d028      	beq.n	afd4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    af82:	42a3      	cmp	r3, r4
    af84:	d104      	bne.n	af90 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    af86:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    af8a:	7840      	ldrb	r0, [r0, #1]
    af8c:	7008      	strb	r0, [r1, #0]
    af8e:	e005      	b.n	af9c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    af90:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    af94:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    af98:	7840      	ldrb	r0, [r0, #1]
    af9a:	7048      	strb	r0, [r1, #1]
    af9c:	f1ba 0f00 	cmp.w	sl, #0
    afa0:	d011      	beq.n	afc6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    afa2:	b125      	cbz	r5, afae <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    afa4:	2100      	movs	r1, #0
    afa6:	f240 409c 	movw	r0, #1180	; 0x49c
    afaa:	f3af 8000 	nop.w
    afae:	f89a 0000 	ldrb.w	r0, [sl]
    afb2:	42a0      	cmp	r0, r4
    afb4:	d107      	bne.n	afc6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    afb6:	b125      	cbz	r5, afc2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    afb8:	2100      	movs	r1, #0
    afba:	f240 409f 	movw	r0, #1183	; 0x49f
    afbe:	f3af 8000 	nop.w
    afc2:	f88a b000 	strb.w	fp, [sl]
    afc6:	b15d      	cbz	r5, afe0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    afc8:	2100      	movs	r1, #0
    afca:	f240 40a4 	movw	r0, #1188	; 0x4a4
    afce:	f3af 8000 	nop.w
    afd2:	e000      	b.n	afd6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    afd4:	b125      	cbz	r5, afe0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    afd6:	2100      	movs	r1, #0
    afd8:	f640 30a5 	movw	r0, #2981	; 0xba5
    afdc:	f3af 8000 	nop.w
    afe0:	481a      	ldr	r0, [pc, #104]	; (b04c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    afe2:	2800      	cmp	r0, #0
    afe4:	bf18      	it	ne
    afe6:	f3af 8000 	nopne.w
    afea:	f3ef 8410 	mrs	r4, PRIMASK
    afee:	b672      	cpsid	i
    aff0:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    aff4:	f88d 0000 	strb.w	r0, [sp]
    aff8:	f89d 0000 	ldrb.w	r0, [sp]
    affc:	b138      	cbz	r0, b00e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    affe:	2d00      	cmp	r5, #0
    b000:	bf1c      	itt	ne
    b002:	2100      	movne	r1, #0
    b004:	f640 30ab 	movwne	r0, #2987	; 0xbab
    b008:	f43f af41 	beq.w	ae8e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    b00c:	e784      	b.n	af18 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    b00e:	f886 9041 	strb.w	r9, [r6, #65]	; 0x41
    b012:	20ff      	movs	r0, #255	; 0xff
    b014:	f886 0031 	strb.w	r0, [r6, #49]	; 0x31
    b018:	b154      	cbz	r4, b030 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    b01a:	2d00      	cmp	r5, #0
    b01c:	bf08      	it	eq
    b01e:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b022:	2100      	movs	r1, #0
    b024:	f640 30b8 	movw	r0, #3000	; 0xbb8
    b028:	f3af 8000 	nop.w
    b02c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b030:	4805      	ldr	r0, [pc, #20]	; (b048 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    b032:	2800      	cmp	r0, #0
    b034:	bf18      	it	ne
    b036:	f3af 8000 	nopne.w
    b03a:	b662      	cpsie	i
    b03c:	e7ed      	b.n	b01a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    b03e:	0000      	.short	0x0000
    b040:	20001108 	.word	0x20001108
	...

0000b050 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    b050:	b570      	push	{r4, r5, r6, lr}
    b052:	460d      	mov	r5, r1
    b054:	4606      	mov	r6, r0
    b056:	f001 fa95 	bl	c584 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    b05a:	480d      	ldr	r0, [pc, #52]	; (b090 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x40>)
    b05c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    b060:	2400      	movs	r4, #0
    b062:	3880      	subs	r0, #128	; 0x80
    b064:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    b068:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    b06c:	b129      	cbz	r1, b07a <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    b06e:	1c61      	adds	r1, r4, #1
    b070:	b2cc      	uxtb	r4, r1
    b072:	2c20      	cmp	r4, #32
    b074:	d3f8      	bcc.n	b068 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    b076:	2020      	movs	r0, #32
    b078:	bd70      	pop	{r4, r5, r6, pc}
    b07a:	4806      	ldr	r0, [pc, #24]	; (b094 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x44>)
    b07c:	4621      	mov	r1, r4
    b07e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    b082:	e9c0 6500 	strd	r6, r5, [r0]
    b086:	2001      	movs	r0, #1
    b088:	f7fe fdd4 	bl	9c34 <MPSL_IRQ_RADIO_Handler+0xd14>
    b08c:	4620      	mov	r0, r4
    b08e:	bd70      	pop	{r4, r5, r6, pc}
    b090:	20001108 	.word	0x20001108
    b094:	20000c88 	.word	0x20000c88

0000b098 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    b098:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b09c:	f000 fd48 	bl	bb30 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    b0a0:	4606      	mov	r6, r0
    b0a2:	460f      	mov	r7, r1
    b0a4:	f000 fe88 	bl	bdb8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    b0a8:	4c65      	ldr	r4, [pc, #404]	; (b240 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1a8>)
    b0aa:	6860      	ldr	r0, [r4, #4]
    b0ac:	f1b0 3fff 	cmp.w	r0, #4294967295
    b0b0:	bf1c      	itt	ne
    b0b2:	f04f 30ff 	movne.w	r0, #4294967295
    b0b6:	6060      	strne	r0, [r4, #4]
    b0b8:	f894 0022 	ldrb.w	r0, [r4, #34]	; 0x22
    b0bc:	f8df b184 	ldr.w	fp, [pc, #388]	; b244 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1ac>
    b0c0:	2500      	movs	r5, #0
    b0c2:	bb10      	cbnz	r0, b10a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
    b0c4:	f44f 710c 	mov.w	r1, #560	; 0x230
    b0c8:	6920      	ldr	r0, [r4, #16]
    b0ca:	f001 fa47 	bl	c55c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    b0ce:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
    b0d2:	68a1      	ldr	r1, [r4, #8]
    b0d4:	1818      	adds	r0, r3, r0
    b0d6:	eb45 0305 	adc.w	r3, r5, r5
    b0da:	1809      	adds	r1, r1, r0
    b0dc:	eb42 0003 	adc.w	r0, r2, r3
    b0e0:	1a71      	subs	r1, r6, r1
    b0e2:	eb77 0000 	sbcs.w	r0, r7, r0
    b0e6:	d310      	bcc.n	b10a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x72>
    b0e8:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    b0ec:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
    b0f0:	eb0b 1040 	add.w	r0, fp, r0, lsl #5
    b0f4:	6840      	ldr	r0, [r0, #4]
    b0f6:	eb0b 1141 	add.w	r1, fp, r1, lsl #5
    b0fa:	680a      	ldr	r2, [r1, #0]
    b0fc:	2108      	movs	r1, #8
    b0fe:	4790      	blx	r2
    b100:	f44f 716d 	mov.w	r1, #948	; 0x3b4
    b104:	2070      	movs	r0, #112	; 0x70
    b106:	f001 fac7 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b10a:	7e60      	ldrb	r0, [r4, #25]
    b10c:	b180      	cbz	r0, b130 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    b10e:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    b112:	f88d 0000 	strb.w	r0, [sp]
    b116:	f89d 0000 	ldrb.w	r0, [sp]
    b11a:	b148      	cbz	r0, b130 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x98>
    b11c:	f000 fc7e 	bl	ba1c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    b120:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    b124:	b150      	cbz	r0, b13c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    b126:	f240 31cd 	movw	r1, #973	; 0x3cd
    b12a:	2070      	movs	r0, #112	; 0x70
    b12c:	f001 fab4 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b130:	1cf0      	adds	r0, r6, #3
    b132:	f147 0100 	adc.w	r1, r7, #0
    b136:	f000 fb4b 	bl	b7d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    b13a:	e7f1      	b.n	b120 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x88>
    b13c:	2001      	movs	r0, #1
    b13e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    b142:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    b146:	2820      	cmp	r0, #32
    b148:	d020      	beq.n	b18c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xf4>
    b14a:	f894 9042 	ldrb.w	r9, [r4, #66]	; 0x42
    b14e:	2020      	movs	r0, #32
    b150:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    b154:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
    b158:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
    b15c:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
    b160:	6025      	str	r5, [r4, #0]
    b162:	f000 ff09 	bl	bf78 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    b166:	f884 0020 	strb.w	r0, [r4, #32]
    b16a:	f894 8041 	ldrb.w	r8, [r4, #65]	; 0x41
    b16e:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    b172:	eb00 0a04 	add.w	sl, r0, r4
    b176:	f89a 0028 	ldrb.w	r0, [sl, #40]	; 0x28
    b17a:	2820      	cmp	r0, #32
    b17c:	d01c      	beq.n	b1b8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    b17e:	eb0b 1b40 	add.w	fp, fp, r0, lsl #5
    b182:	f89b 001a 	ldrb.w	r0, [fp, #26]
    b186:	2801      	cmp	r0, #1
    b188:	d005      	beq.n	b196 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfe>
    b18a:	e015      	b.n	b1b8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    b18c:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    b190:	2070      	movs	r0, #112	; 0x70
    b192:	f001 fa81 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b196:	2201      	movs	r2, #1
    b198:	f8bb 3016 	ldrh.w	r3, [fp, #22]
    b19c:	4630      	mov	r0, r6
    b19e:	4639      	mov	r1, r7
    b1a0:	f7fe f8b4 	bl	930c <MPSL_IRQ_RADIO_Handler+0x3ec>
    b1a4:	e9db 2302 	ldrd	r2, r3, [fp, #8]
    b1a8:	1a12      	subs	r2, r2, r0
    b1aa:	eb73 0201 	sbcs.w	r2, r3, r1
    b1ae:	bf24      	itt	cs
    b1b0:	f10b 0208 	addcs.w	r2, fp, #8
    b1b4:	e9c2 0100 	strdcs	r0, r1, [r2]
    b1b8:	4641      	mov	r1, r8
    b1ba:	2001      	movs	r0, #1
    b1bc:	f7fe fd6c 	bl	9c98 <MPSL_IRQ_RADIO_Handler+0xd78>
    b1c0:	0007      	movs	r7, r0
    b1c2:	d0f9      	beq.n	b1b8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x120>
    b1c4:	4820      	ldr	r0, [pc, #128]	; (b248 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    b1c6:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    b1ca:	f810 0019 	ldrb.w	r0, [r0, r9, lsl #1]
    b1ce:	2802      	cmp	r0, #2
    b1d0:	d104      	bne.n	b1dc <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x144>
    b1d2:	4642      	mov	r2, r8
    b1d4:	4649      	mov	r1, r9
    b1d6:	2006      	movs	r0, #6
    b1d8:	f7fe fd2c 	bl	9c34 <MPSL_IRQ_RADIO_Handler+0xd14>
    b1dc:	20ff      	movs	r0, #255	; 0xff
    b1de:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    b1e2:	f89a 0029 	ldrb.w	r0, [sl, #41]	; 0x29
    b1e6:	f8df 8064 	ldr.w	r8, [pc, #100]	; b24c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    b1ea:	2820      	cmp	r0, #32
    b1ec:	bf1c      	itt	ne
    b1ee:	f898 0001 	ldrbne.w	r0, [r8, #1]
    b1f2:	f001 fb23 	blne	c83c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b1f6:	f894 0020 	ldrb.w	r0, [r4, #32]
    b1fa:	b128      	cbz	r0, b208 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x170>
    b1fc:	f000 fe98 	bl	bf30 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    b200:	f884 5020 	strb.w	r5, [r4, #32]
    b204:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    b208:	2f02      	cmp	r7, #2
    b20a:	d00f      	beq.n	b22c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x194>
    b20c:	2f01      	cmp	r7, #1
    b20e:	bf18      	it	ne
    b210:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b214:	f04f 30ff 	mov.w	r0, #4294967295
    b218:	f8d8 1004 	ldr.w	r1, [r8, #4]
    b21c:	2900      	cmp	r1, #0
    b21e:	bf08      	it	eq
    b220:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b224:	b001      	add	sp, #4
    b226:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b22a:	4708      	bx	r1
    b22c:	68a0      	ldr	r0, [r4, #8]
    b22e:	1b80      	subs	r0, r0, r6
    b230:	f005 fbb5 	bl	1099e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b234:	f8d8 1004 	ldr.w	r1, [r8, #4]
    b238:	2900      	cmp	r1, #0
    b23a:	d1f3      	bne.n	b224 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18c>
    b23c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b240:	20001108 	.word	0x20001108
    b244:	20000c88 	.word	0x20000c88
    b248:	20001088 	.word	0x20001088
    b24c:	20000308 	.word	0x20000308

0000b250 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    b250:	b570      	push	{r4, r5, r6, lr}
    b252:	4c42      	ldr	r4, [pc, #264]	; (b35c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    b254:	4605      	mov	r5, r0
    b256:	b082      	sub	sp, #8
    b258:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    b25c:	2820      	cmp	r0, #32
    b25e:	d008      	beq.n	b272 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    b260:	6860      	ldr	r0, [r4, #4]
    b262:	f1b0 3fff 	cmp.w	r0, #4294967295
    b266:	d009      	beq.n	b27c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    b268:	f640 21b6 	movw	r1, #2742	; 0xab6
    b26c:	2070      	movs	r0, #112	; 0x70
    b26e:	f001 fa13 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b272:	f640 21b5 	movw	r1, #2741	; 0xab5
    b276:	2070      	movs	r0, #112	; 0x70
    b278:	f001 fa0e 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b27c:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
    b280:	4937      	ldr	r1, [pc, #220]	; (b360 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    b282:	eb01 1640 	add.w	r6, r1, r0, lsl #5
    b286:	68b0      	ldr	r0, [r6, #8]
    b288:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b28c:	f005 fb87 	bl	1099e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b290:	4602      	mov	r2, r0
    b292:	8af0      	ldrh	r0, [r6, #22]
    b294:	7d31      	ldrb	r1, [r6, #20]
    b296:	4b33      	ldr	r3, [pc, #204]	; (b364 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    b298:	4408      	add	r0, r1
    b29a:	1c40      	adds	r0, r0, #1
    b29c:	1811      	adds	r1, r2, r0
    b29e:	429a      	cmp	r2, r3
    b2a0:	d817      	bhi.n	b2d2 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    b2a2:	4a31      	ldr	r2, [pc, #196]	; (b368 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    b2a4:	4290      	cmp	r0, r2
    b2a6:	dc1b      	bgt.n	b2e0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    b2a8:	f1c2 0c00 	rsb	ip, r2, #0
    b2ac:	4560      	cmp	r0, ip
    b2ae:	db1e      	blt.n	b2ee <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    b2b0:	0056      	lsls	r6, r2, #1
    b2b2:	428e      	cmp	r6, r1
    b2b4:	bfdc      	itt	le
    b2b6:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    b2ba:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    b2be:	dd05      	ble.n	b2cc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    b2c0:	2900      	cmp	r1, #0
    b2c2:	bfbc      	itt	lt
    b2c4:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    b2c8:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    b2cc:	1948      	adds	r0, r1, r5
    b2ce:	4299      	cmp	r1, r3
    b2d0:	d904      	bls.n	b2dc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    b2d2:	f240 517f 	movw	r1, #1407	; 0x57f
    b2d6:	2070      	movs	r0, #112	; 0x70
    b2d8:	f001 f9de 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b2dc:	4295      	cmp	r5, r2
    b2de:	dd04      	ble.n	b2ea <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    b2e0:	f44f 61b0 	mov.w	r1, #1408	; 0x580
    b2e4:	2070      	movs	r0, #112	; 0x70
    b2e6:	f001 f9d7 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b2ea:	4565      	cmp	r5, ip
    b2ec:	da04      	bge.n	b2f8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    b2ee:	f240 5181 	movw	r1, #1409	; 0x581
    b2f2:	2070      	movs	r0, #112	; 0x70
    b2f4:	f001 f9d0 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b2f8:	4286      	cmp	r6, r0
    b2fa:	bfdc      	itt	le
    b2fc:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    b300:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    b304:	dd05      	ble.n	b312 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    b306:	2800      	cmp	r0, #0
    b308:	bfbc      	itt	lt
    b30a:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    b30e:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    b312:	aa01      	add	r2, sp, #4
    b314:	4669      	mov	r1, sp
    b316:	f000 f92b 	bl	b570 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    b31a:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b31e:	280f      	cmp	r0, #15
    b320:	bf8c      	ite	hi
    b322:	2001      	movhi	r0, #1
    b324:	2000      	movls	r0, #0
    b326:	9900      	ldr	r1, [sp, #0]
    b328:	4408      	add	r0, r1
    b32a:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    b32e:	6061      	str	r1, [r4, #4]
    b330:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    b334:	f88d 0000 	strb.w	r0, [sp]
    b338:	f89d 0000 	ldrb.w	r0, [sp]
    b33c:	2800      	cmp	r0, #0
    b33e:	bf04      	itt	eq
    b340:	b002      	addeq	sp, #8
    b342:	bd70      	popeq	{r4, r5, r6, pc}
    b344:	2005      	movs	r0, #5
    b346:	f000 fc15 	bl	bb74 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    b34a:	2800      	cmp	r0, #0
    b34c:	bf1c      	itt	ne
    b34e:	b002      	addne	sp, #8
    b350:	bd70      	popne	{r4, r5, r6, pc}
    b352:	f640 21bd 	movw	r1, #2749	; 0xabd
    b356:	2070      	movs	r0, #112	; 0x70
    b358:	f001 f99e 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b35c:	20001108 	.word	0x20001108
    b360:	20000c88 	.word	0x20000c88
    b364:	1e847fff 	.word	0x1e847fff
    b368:	0f424000 	.word	0x0f424000

0000b36c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    b36c:	b570      	push	{r4, r5, r6, lr}
    b36e:	4c1e      	ldr	r4, [pc, #120]	; (b3e8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    b370:	2120      	movs	r1, #32
    b372:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    b376:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
    b37a:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
    b37e:	2000      	movs	r0, #0
    b380:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    b384:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    b388:	1e42      	subs	r2, r0, #1
    b38a:	e9c4 0200 	strd	r0, r2, [r4]
    b38e:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
    b392:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    b396:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    b39a:	f884 0020 	strb.w	r0, [r4, #32]
    b39e:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    b3a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
    b3a6:	1e41      	subs	r1, r0, #1
    b3a8:	e9c4 110e 	strd	r1, r1, [r4, #56]	; 0x38
    b3ac:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    b3b0:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    b3b4:	2210      	movs	r2, #16
    b3b6:	7088      	strb	r0, [r1, #2]
    b3b8:	f801 0f04 	strb.w	r0, [r1, #4]!
    b3bc:	1e52      	subs	r2, r2, #1
    b3be:	d1fa      	bne.n	b3b6 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4a>
    b3c0:	f000 fde4 	bl	bf8c <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    b3c4:	4d09      	ldr	r5, [pc, #36]	; (b3ec <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    b3c6:	2601      	movs	r6, #1
    b3c8:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    b3cc:	20ff      	movs	r0, #255	; 0xff
    b3ce:	7028      	strb	r0, [r5, #0]
    b3d0:	4807      	ldr	r0, [pc, #28]	; (b3f0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    b3d2:	f001 fa15 	bl	c800 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    b3d6:	7068      	strb	r0, [r5, #1]
    b3d8:	f001 fa80 	bl	c8dc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    b3dc:	60a8      	str	r0, [r5, #8]
    b3de:	f000 fd67 	bl	beb0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    b3e2:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
    b3e6:	bd70      	pop	{r4, r5, r6, pc}
    b3e8:	20001108 	.word	0x20001108
    b3ec:	20000308 	.word	0x20000308
    b3f0:	00009b65 	.word	0x00009b65

0000b3f4 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    b3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b3f6:	4607      	mov	r7, r0
    b3f8:	b087      	sub	sp, #28
    b3fa:	461d      	mov	r5, r3
    b3fc:	460e      	mov	r6, r1
    b3fe:	4610      	mov	r0, r2
    b400:	f005 facd 	bl	1099e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b404:	4604      	mov	r4, r0
    b406:	a803      	add	r0, sp, #12
    b408:	9000      	str	r0, [sp, #0]
    b40a:	ab04      	add	r3, sp, #16
    b40c:	aa02      	add	r2, sp, #8
    b40e:	4638      	mov	r0, r7
    b410:	4631      	mov	r1, r6
    b412:	f000 f853 	bl	b4bc <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    b416:	9902      	ldr	r1, [sp, #8]
    b418:	4a14      	ldr	r2, [pc, #80]	; (b46c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x78>)
    b41a:	1a60      	subs	r0, r4, r1
    b41c:	2300      	movs	r3, #0
    b41e:	1a82      	subs	r2, r0, r2
    b420:	f173 0200 	sbcs.w	r2, r3, #0
    b424:	d318      	bcc.n	b458 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x64>
    b426:	f8df c044 	ldr.w	ip, [pc, #68]	; b46c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x78>
    b42a:	1b0a      	subs	r2, r1, r4
    b42c:	ebb2 0c0c 	subs.w	ip, r2, ip
    b430:	f173 0300 	sbcs.w	r3, r3, #0
    b434:	d310      	bcc.n	b458 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x64>
    b436:	4b0e      	ldr	r3, [pc, #56]	; (b470 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x7c>)
    b438:	4283      	cmp	r3, r0
    b43a:	bf3e      	ittt	cc
    b43c:	f5c1 2090 	rsbcc	r0, r1, #294912	; 0x48000
    b440:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    b444:	4420      	addcc	r0, r4
    b446:	d307      	bcc.n	b458 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x64>
    b448:	4293      	cmp	r3, r2
    b44a:	d209      	bcs.n	b460 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x6c>
    b44c:	f5c4 2090 	rsb	r0, r4, #294912	; 0x48000
    b450:	f100 50f4 	add.w	r0, r0, #511705088	; 0x1e800000
    b454:	4408      	add	r0, r1
    b456:	4240      	negs	r0, r0
    b458:	300f      	adds	r0, #15
    b45a:	b007      	add	sp, #28
    b45c:	1a28      	subs	r0, r5, r0
    b45e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b460:	f640 21d7 	movw	r1, #2775	; 0xad7
    b464:	2070      	movs	r0, #112	; 0x70
    b466:	f001 f917 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b46a:	0000      	.short	0x0000
    b46c:	0f424000 	.word	0x0f424000
    b470:	1e847fff 	.word	0x1e847fff

0000b474 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>:
    b474:	0e03      	lsrs	r3, r0, #24
    b476:	b430      	push	{r4, r5}
    b478:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    b47c:	f8df c038 	ldr.w	ip, [pc, #56]	; b4b8 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY+0x44>
    b480:	0e09      	lsrs	r1, r1, #24
    b482:	fba3 250c 	umull	r2, r5, r3, ip
    b486:	fb01 510c 	mla	r1, r1, ip, r5
    b48a:	2400      	movs	r4, #0
    b48c:	fb03 1104 	mla	r1, r3, r4, r1
    b490:	f647 73ff 	movw	r3, #32767	; 0x7fff
    b494:	ea03 2350 	and.w	r3, r3, r0, lsr #9
    b498:	f643 5c09 	movw	ip, #15625	; 0x3d09
    b49c:	fb13 f30c 	smulbb	r3, r3, ip
    b4a0:	f3c0 0008 	ubfx	r0, r0, #0, #9
    b4a4:	fb10 f00c 	smulbb	r0, r0, ip
    b4a8:	f500 7080 	add.w	r0, r0, #256	; 0x100
    b4ac:	eb03 2050 	add.w	r0, r3, r0, lsr #9
    b4b0:	1880      	adds	r0, r0, r2
    b4b2:	4161      	adcs	r1, r4
    b4b4:	bc30      	pop	{r4, r5}
    b4b6:	4770      	bx	lr
    b4b8:	1e848000 	.word	0x1e848000

0000b4bc <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>:
    b4bc:	b570      	push	{r4, r5, r6, lr}
    b4be:	b084      	sub	sp, #16
    b4c0:	4615      	mov	r5, r2
    b4c2:	aa01      	add	r2, sp, #4
    b4c4:	461c      	mov	r4, r3
    b4c6:	9200      	str	r2, [sp, #0]
    b4c8:	9e08      	ldr	r6, [sp, #32]
    b4ca:	ab02      	add	r3, sp, #8
    b4cc:	4a17      	ldr	r2, [pc, #92]	; (b52c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x70>)
    b4ce:	f005 fbe7 	bl	10ca0 <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>
    b4d2:	9801      	ldr	r0, [sp, #4]
    b4d4:	f248 6237 	movw	r2, #34359	; 0x8637
    b4d8:	0b41      	lsrs	r1, r0, #13
    b4da:	4351      	muls	r1, r2
    b4dc:	0c09      	lsrs	r1, r1, #16
    b4de:	4a14      	ldr	r2, [pc, #80]	; (b530 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x74>)
    b4e0:	024b      	lsls	r3, r1, #9
    b4e2:	fb01 0102 	mla	r1, r1, r2, r0
    b4e6:	4813      	ldr	r0, [pc, #76]	; (b534 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x78>)
    b4e8:	4348      	muls	r0, r1
    b4ea:	0d42      	lsrs	r2, r0, #21
    b4ec:	1898      	adds	r0, r3, r2
    b4ee:	f643 5309 	movw	r3, #15625	; 0x3d09
    b4f2:	fb12 f303 	smulbb	r3, r2, r3
    b4f6:	f503 7280 	add.w	r2, r3, #256	; 0x100
    b4fa:	f643 5c08 	movw	ip, #15624	; 0x3d08
    b4fe:	eba1 2252 	sub.w	r2, r1, r2, lsr #9
    b502:	4463      	add	r3, ip
    b504:	b2d2      	uxtb	r2, r2
    b506:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
    b50a:	bf84      	itt	hi
    b50c:	2200      	movhi	r2, #0
    b50e:	1c40      	addhi	r0, r0, #1
    b510:	7032      	strb	r2, [r6, #0]
    b512:	9b02      	ldr	r3, [sp, #8]
    b514:	0a19      	lsrs	r1, r3, #8
    b516:	061b      	lsls	r3, r3, #24
    b518:	1818      	adds	r0, r3, r0
    b51a:	f141 0100 	adc.w	r1, r1, #0
    b51e:	e9c4 0100 	strd	r0, r1, [r4]
    b522:	9801      	ldr	r0, [sp, #4]
    b524:	6028      	str	r0, [r5, #0]
    b526:	b004      	add	sp, #16
    b528:	bd70      	pop	{r4, r5, r6, pc}
    b52a:	0000      	.short	0x0000
    b52c:	1e848000 	.word	0x1e848000
    b530:	ffffc2f7 	.word	0xffffc2f7
    b534:	00010c6f 	.word	0x00010c6f

0000b538 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    b538:	0b41      	lsrs	r1, r0, #13
    b53a:	f248 6237 	movw	r2, #34359	; 0x8637
    b53e:	4351      	muls	r1, r2
    b540:	0c0a      	lsrs	r2, r1, #16
    b542:	4b09      	ldr	r3, [pc, #36]	; (b568 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    b544:	0251      	lsls	r1, r2, #9
    b546:	fb02 0203 	mla	r2, r2, r3, r0
    b54a:	4808      	ldr	r0, [pc, #32]	; (b56c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    b54c:	4350      	muls	r0, r2
    b54e:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    b552:	306e      	adds	r0, #110	; 0x6e
    b554:	0d40      	lsrs	r0, r0, #21
    b556:	425b      	negs	r3, r3
    b558:	fb10 f303 	smulbb	r3, r0, r3
    b55c:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    b560:	bf88      	it	hi
    b562:	1c49      	addhi	r1, r1, #1
    b564:	4408      	add	r0, r1
    b566:	4770      	bx	lr
    b568:	ffffc2f7 	.word	0xffffc2f7
    b56c:	00010c6f 	.word	0x00010c6f

0000b570 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    b570:	0b43      	lsrs	r3, r0, #13
    b572:	f248 6c37 	movw	ip, #34359	; 0x8637
    b576:	fb03 f30c 	mul.w	r3, r3, ip
    b57a:	b430      	push	{r4, r5}
    b57c:	0c1b      	lsrs	r3, r3, #16
    b57e:	f8df c044 	ldr.w	ip, [pc, #68]	; b5c4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    b582:	025c      	lsls	r4, r3, #9
    b584:	fb03 030c 	mla	r3, r3, ip, r0
    b588:	480f      	ldr	r0, [pc, #60]	; (b5c8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    b58a:	4358      	muls	r0, r3
    b58c:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    b590:	eb04 000c 	add.w	r0, r4, ip
    b594:	f643 5409 	movw	r4, #15625	; 0x3d09
    b598:	fb1c f404 	smulbb	r4, ip, r4
    b59c:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    b5a0:	f643 5508 	movw	r5, #15624	; 0x3d08
    b5a4:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    b5a8:	442c      	add	r4, r5
    b5aa:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    b5ae:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    b5b2:	bf84      	itt	hi
    b5b4:	f04f 0c00 	movhi.w	ip, #0
    b5b8:	1c40      	addhi	r0, r0, #1
    b5ba:	6008      	str	r0, [r1, #0]
    b5bc:	f882 c000 	strb.w	ip, [r2]
    b5c0:	bc30      	pop	{r4, r5}
    b5c2:	4770      	bx	lr
    b5c4:	ffffc2f7 	.word	0xffffc2f7
    b5c8:	00010c6f 	.word	0x00010c6f

0000b5cc <MPSL_IRQ_RTC0_Handler>:
    b5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b5d0:	2400      	movs	r4, #0
    b5d2:	f8df 9080 	ldr.w	r9, [pc, #128]	; b654 <MPSL_IRQ_RTC0_Handler+0x88>
    b5d6:	4d20      	ldr	r5, [pc, #128]	; (b658 <MPSL_IRQ_RTC0_Handler+0x8c>)
    b5d8:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    b5dc:	f44f 78a0 	mov.w	r8, #320	; 0x140
    b5e0:	ea4f 0604 	mov.w	r6, r4
    b5e4:	f8d5 2304 	ldr.w	r2, [r5, #772]	; 0x304
    b5e8:	fa07 f004 	lsl.w	r0, r7, r4
    b5ec:	eb08 0184 	add.w	r1, r8, r4, lsl #2
    b5f0:	4202      	tst	r2, r0
    b5f2:	d01a      	beq.n	b62a <MPSL_IRQ_RTC0_Handler+0x5e>
    b5f4:	4a18      	ldr	r2, [pc, #96]	; (b658 <MPSL_IRQ_RTC0_Handler+0x8c>)
    b5f6:	5852      	ldr	r2, [r2, r1]
    b5f8:	b1ba      	cbz	r2, b62a <MPSL_IRQ_RTC0_Handler+0x5e>
    b5fa:	506e      	str	r6, [r5, r1]
    b5fc:	00a1      	lsls	r1, r4, #2
    b5fe:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    b602:	f501 4130 	add.w	r1, r1, #45056	; 0xb000
    b606:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    b60a:	f8d9 2000 	ldr.w	r2, [r9]
    b60e:	1a89      	subs	r1, r1, r2
    b610:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    b614:	2902      	cmp	r1, #2
    b616:	d302      	bcc.n	b61e <MPSL_IRQ_RTC0_Handler+0x52>
    b618:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    b61c:	d905      	bls.n	b62a <MPSL_IRQ_RTC0_Handler+0x5e>
    b61e:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b622:	1d20      	adds	r0, r4, #4
    b624:	b2c0      	uxtb	r0, r0
    b626:	f7fe fd4d 	bl	a0c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b62a:	1c60      	adds	r0, r4, #1
    b62c:	b2c4      	uxtb	r4, r0
    b62e:	2c03      	cmp	r4, #3
    b630:	d3d8      	bcc.n	b5e4 <MPSL_IRQ_RTC0_Handler+0x18>
    b632:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b636:	b128      	cbz	r0, b644 <MPSL_IRQ_RTC0_Handler+0x78>
    b638:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    b63c:	4807      	ldr	r0, [pc, #28]	; (b65c <MPSL_IRQ_RTC0_Handler+0x90>)
    b63e:	6881      	ldr	r1, [r0, #8]
    b640:	1c49      	adds	r1, r1, #1
    b642:	6081      	str	r1, [r0, #8]
    b644:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    b648:	f44f 6000 	mov.w	r0, #2048	; 0x800
    b64c:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    b650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b654:	4000b504 	.word	0x4000b504
    b658:	4000b000 	.word	0x4000b000
    b65c:	20000028 	.word	0x20000028

0000b660 <MPSL_IRQ_TIMER0_Handler>:
    b660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b664:	4d38      	ldr	r5, [pc, #224]	; (b748 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    b666:	7828      	ldrb	r0, [r5, #0]
    b668:	2804      	cmp	r0, #4
    b66a:	d068      	beq.n	b73e <MPSL_IRQ_TIMER0_Handler+0xde>
    b66c:	1ca8      	adds	r0, r5, #2
    b66e:	2201      	movs	r2, #1
    b670:	7801      	ldrb	r1, [r0, #0]
    b672:	b159      	cbz	r1, b68c <MPSL_IRQ_TIMER0_Handler+0x2c>
    b674:	2901      	cmp	r1, #1
    b676:	bf08      	it	eq
    b678:	706a      	strbeq	r2, [r5, #1]
    b67a:	d002      	beq.n	b682 <MPSL_IRQ_TIMER0_Handler+0x22>
    b67c:	7869      	ldrb	r1, [r5, #1]
    b67e:	2900      	cmp	r1, #0
    b680:	d058      	beq.n	b734 <MPSL_IRQ_TIMER0_Handler+0xd4>
    b682:	2102      	movs	r1, #2
    b684:	7001      	strb	r1, [r0, #0]
    b686:	7840      	ldrb	r0, [r0, #1]
    b688:	f000 fb2e 	bl	bce8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b68c:	4c2f      	ldr	r4, [pc, #188]	; (b74c <MPSL_IRQ_TIMER0_Handler+0xec>)
    b68e:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b692:	f04f 0800 	mov.w	r8, #0
    b696:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    b69a:	f44f 7780 	mov.w	r7, #256	; 0x100
    b69e:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    b6a2:	d00a      	beq.n	b6ba <MPSL_IRQ_TIMER0_Handler+0x5a>
    b6a4:	482a      	ldr	r0, [pc, #168]	; (b750 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    b6a6:	6800      	ldr	r0, [r0, #0]
    b6a8:	b138      	cbz	r0, b6ba <MPSL_IRQ_TIMER0_Handler+0x5a>
    b6aa:	2003      	movs	r0, #3
    b6ac:	f000 fb1c 	bl	bce8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b6b0:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b6b4:	2003      	movs	r0, #3
    b6b6:	f7fe fd05 	bl	a0c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b6ba:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b6be:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    b6c2:	d00a      	beq.n	b6da <MPSL_IRQ_TIMER0_Handler+0x7a>
    b6c4:	4823      	ldr	r0, [pc, #140]	; (b754 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    b6c6:	6800      	ldr	r0, [r0, #0]
    b6c8:	b138      	cbz	r0, b6da <MPSL_IRQ_TIMER0_Handler+0x7a>
    b6ca:	2002      	movs	r0, #2
    b6cc:	f000 fb0c 	bl	bce8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b6d0:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b6d4:	2002      	movs	r0, #2
    b6d6:	f7fe fcf5 	bl	a0c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b6da:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b6de:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    b6e2:	d00a      	beq.n	b6fa <MPSL_IRQ_TIMER0_Handler+0x9a>
    b6e4:	481c      	ldr	r0, [pc, #112]	; (b758 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    b6e6:	6800      	ldr	r0, [r0, #0]
    b6e8:	b138      	cbz	r0, b6fa <MPSL_IRQ_TIMER0_Handler+0x9a>
    b6ea:	2001      	movs	r0, #1
    b6ec:	f000 fafc 	bl	bce8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b6f0:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b6f4:	2001      	movs	r0, #1
    b6f6:	f7fe fce5 	bl	a0c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b6fa:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b6fe:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    b702:	bf08      	it	eq
    b704:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b708:	4814      	ldr	r0, [pc, #80]	; (b75c <MPSL_IRQ_TIMER0_Handler+0xfc>)
    b70a:	6800      	ldr	r0, [r0, #0]
    b70c:	2800      	cmp	r0, #0
    b70e:	bf08      	it	eq
    b710:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b714:	2000      	movs	r0, #0
    b716:	f000 fae7 	bl	bce8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b71a:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b71e:	2004      	movs	r0, #4
    b720:	7028      	strb	r0, [r5, #0]
    b722:	f8c5 8004 	str.w	r8, [r5, #4]
    b726:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    b72a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b72e:	2000      	movs	r0, #0
    b730:	f7fe bcc8 	b.w	a0c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b734:	f240 5169 	movw	r1, #1385	; 0x569
    b738:	206c      	movs	r0, #108	; 0x6c
    b73a:	f000 ffad 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b73e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b742:	2007      	movs	r0, #7
    b744:	f7fe bcbe 	b.w	a0c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b748:	20000028 	.word	0x20000028
    b74c:	40008000 	.word	0x40008000
    b750:	4000814c 	.word	0x4000814c
    b754:	40008148 	.word	0x40008148
    b758:	40008144 	.word	0x40008144
    b75c:	40008140 	.word	0x40008140
    b760:	2201      	movs	r2, #1
    b762:	0211      	lsls	r1, r2, #8
    b764:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b768:	2000      	movs	r0, #0
    b76a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    b76e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    b772:	f3bf 8f4f 	dsb	sy
    b776:	f3bf 8f6f 	isb	sy
    b77a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    b77e:	490e      	ldr	r1, [pc, #56]	; (b7b8 <MPSL_IRQ_TIMER0_Handler+0x158>)
    b780:	f841 2f04 	str.w	r2, [r1, #4]!
    b784:	1e43      	subs	r3, r0, #1
    b786:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    b78a:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    b78e:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    b792:	4b0a      	ldr	r3, [pc, #40]	; (b7bc <MPSL_IRQ_TIMER0_Handler+0x15c>)
    b794:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b798:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    b79c:	1d1b      	adds	r3, r3, #4
    b79e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b7a2:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    b7a6:	1d1b      	adds	r3, r3, #4
    b7a8:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b7ac:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    b7b0:	60ca      	str	r2, [r1, #12]
    b7b2:	4903      	ldr	r1, [pc, #12]	; (b7c0 <MPSL_IRQ_TIMER0_Handler+0x160>)
    b7b4:	7048      	strb	r0, [r1, #1]
    b7b6:	4770      	bx	lr
    b7b8:	40008000 	.word	0x40008000
    b7bc:	40008004 	.word	0x40008004
    b7c0:	20000028 	.word	0x20000028

0000b7c4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    b7c4:	4801      	ldr	r0, [pc, #4]	; (b7cc <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    b7c6:	6800      	ldr	r0, [r0, #0]
    b7c8:	4770      	bx	lr
    b7ca:	0000      	.short	0x0000
    b7cc:	4000b504 	.word	0x4000b504

0000b7d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    b7d0:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    b7d4:	f8df 8130 	ldr.w	r8, [pc, #304]	; b908 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>
    b7d8:	4604      	mov	r4, r0
    b7da:	f1a8 0702 	sub.w	r7, r8, #2
    b7de:	460e      	mov	r6, r1
    b7e0:	f898 c000 	ldrb.w	ip, [r8]
    b7e4:	e9d7 1004 	ldrd	r1, r0, [r7, #16]
    b7e8:	f1bc 0f01 	cmp.w	ip, #1
    b7ec:	d106      	bne.n	b7fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x2c>
    b7ee:	ea81 0204 	eor.w	r2, r1, r4
    b7f2:	4070      	eors	r0, r6
    b7f4:	4310      	orrs	r0, r2
    b7f6:	bf08      	it	eq
    b7f8:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    b7fc:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    b800:	4a42      	ldr	r2, [pc, #264]	; (b90c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>)
    b802:	6010      	str	r0, [r2, #0]
    b804:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
    b808:	f1bc 0f00 	cmp.w	ip, #0
    b80c:	bf07      	ittee	eq
    b80e:	f44f 3340 	moveq.w	r3, #196608	; 0x30000
    b812:	2200      	moveq	r2, #0
    b814:	f44f 3300 	movne.w	r3, #131072	; 0x20000
    b818:	2201      	movne	r2, #1
    b81a:	483d      	ldr	r0, [pc, #244]	; (b910 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
    b81c:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    b820:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    b824:	2500      	movs	r5, #0
    b826:	f44f 79a0 	mov.w	r9, #320	; 0x140
    b82a:	2a02      	cmp	r2, #2
    b82c:	d207      	bcs.n	b83e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x6e>
    b82e:	bf00      	nop
    b830:	eb09 0382 	add.w	r3, r9, r2, lsl #2
    b834:	50c5      	str	r5, [r0, r3]
    b836:	1c52      	adds	r2, r2, #1
    b838:	b2d2      	uxtb	r2, r2
    b83a:	2a02      	cmp	r2, #2
    b83c:	d3f8      	bcc.n	b830 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x60>
    b83e:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    b842:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    b846:	f8c0 a308 	str.w	sl, [r0, #776]	; 0x308
    b84a:	f8c0 a348 	str.w	sl, [r0, #840]	; 0x348
    b84e:	f8c0 5140 	str.w	r5, [r0, #320]	; 0x140
    b852:	4a30      	ldr	r2, [pc, #192]	; (b914 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x144>)
    b854:	f8d2 9000 	ldr.w	r9, [r2]
    b858:	eba3 0909 	sub.w	r9, r3, r9
    b85c:	f029 4a7f 	bic.w	sl, r9, #4278190080	; 0xff000000
    b860:	f04f 0901 	mov.w	r9, #1
    b864:	f1ba 0f02 	cmp.w	sl, #2
    b868:	d32e      	bcc.n	b8c8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    b86a:	f5ba 0f00 	cmp.w	sl, #8388608	; 0x800000
    b86e:	d82b      	bhi.n	b8c8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xf8>
    b870:	f8c0 3540 	str.w	r3, [r0, #1344]	; 0x540
    b874:	f8c0 b344 	str.w	fp, [r0, #836]	; 0x344
    b878:	f1bc 0f00 	cmp.w	ip, #0
    b87c:	d005      	beq.n	b88a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xba>
    b87e:	6810      	ldr	r0, [r2, #0]
    b880:	1a08      	subs	r0, r1, r0
    b882:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b886:	2802      	cmp	r0, #2
    b888:	d3f9      	bcc.n	b87e <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xae>
    b88a:	f8c7 9004 	str.w	r9, [r7, #4]
    b88e:	703d      	strb	r5, [r7, #0]
    b890:	f7ff ff66 	bl	b760 <MPSL_IRQ_TIMER0_Handler+0x100>
    b894:	4820      	ldr	r0, [pc, #128]	; (b918 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x148>)
    b896:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    b89a:	f365 0101 	bfi	r1, r5, #0, #2
    b89e:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    b8a2:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    b8a6:	2102      	movs	r1, #2
    b8a8:	f361 0201 	bfi	r2, r1, #0, #2
    b8ac:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    b8b0:	2110      	movs	r1, #16
    b8b2:	fa91 f1a1 	rbit	r1, r1
    b8b6:	fab1 f181 	clz	r1, r1
    b8ba:	2909      	cmp	r1, #9
    b8bc:	d909      	bls.n	b8d2 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x102>
    b8be:	f240 3155 	movw	r1, #853	; 0x355
    b8c2:	a016      	add	r0, pc, #88	; (adr r0, b91c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x14c>)
    b8c4:	f000 febc 	bl	c640 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    b8c8:	f240 31b2 	movw	r1, #946	; 0x3b2
    b8cc:	206c      	movs	r0, #108	; 0x6c
    b8ce:	f000 fee3 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b8d2:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    b8d6:	f8c0 900c 	str.w	r9, [r0, #12]
    b8da:	6879      	ldr	r1, [r7, #4]
    b8dc:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b8e0:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    b8e4:	f44f 7180 	mov.w	r1, #256	; 0x100
    b8e8:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    b8ec:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b8f0:	490d      	ldr	r1, [pc, #52]	; (b928 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x158>)
    b8f2:	0480      	lsls	r0, r0, #18
    b8f4:	6008      	str	r0, [r1, #0]
    b8f6:	e9c7 4604 	strd	r4, r6, [r7, #16]
    b8fa:	2004      	movs	r0, #4
    b8fc:	f888 0001 	strb.w	r0, [r8, #1]
    b900:	f888 9000 	strb.w	r9, [r8]
    b904:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    b908:	2000002a 	.word	0x2000002a
    b90c:	4001f508 	.word	0x4001f508
    b910:	4000b000 	.word	0x4000b000
    b914:	4000b504 	.word	0x4000b504
    b918:	40008000 	.word	0x40008000
    b91c:	5f66726e 	.word	0x5f66726e
    b920:	656d6974 	.word	0x656d6974
    b924:	00682e72 	.word	0x00682e72
    b928:	4001f504 	.word	0x4001f504

0000b92c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    b92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b930:	4c31      	ldr	r4, [pc, #196]	; (b9f8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xcc>)
    b932:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    b936:	ea82 0c00 	eor.w	ip, r2, r0
    b93a:	404b      	eors	r3, r1
    b93c:	ea5c 0303 	orrs.w	r3, ip, r3
    b940:	bf14      	ite	ne
    b942:	2301      	movne	r3, #1
    b944:	2300      	moveq	r3, #0
    b946:	f8df c0b4 	ldr.w	ip, [pc, #180]	; b9fc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd0>
    b94a:	f89c 8000 	ldrb.w	r8, [ip]
    b94e:	f1b8 0f02 	cmp.w	r8, #2
    b952:	d002      	beq.n	b95a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2e>
    b954:	2b00      	cmp	r3, #0
    b956:	d03f      	beq.n	b9d8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>
    b958:	e003      	b.n	b962 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x36>
    b95a:	2b00      	cmp	r3, #0
    b95c:	bf08      	it	eq
    b95e:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b962:	7863      	ldrb	r3, [r4, #1]
    b964:	b3bb      	cbz	r3, b9d6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xaa>
    b966:	4d26      	ldr	r5, [pc, #152]	; (ba00 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd4>)
    b968:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    b96c:	602b      	str	r3, [r5, #0]
    b96e:	4e25      	ldr	r6, [pc, #148]	; (ba04 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd8>)
    b970:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    b974:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    b978:	462f      	mov	r7, r5
    b97a:	f8c6 5308 	str.w	r5, [r6, #776]	; 0x308
    b97e:	f8c6 5348 	str.w	r5, [r6, #840]	; 0x348
    b982:	2500      	movs	r5, #0
    b984:	f8c6 5140 	str.w	r5, [r6, #320]	; 0x140
    b988:	4d1f      	ldr	r5, [pc, #124]	; (ba08 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xdc>)
    b98a:	f8d5 9000 	ldr.w	r9, [r5]
    b98e:	eba3 0909 	sub.w	r9, r3, r9
    b992:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
    b996:	f1b9 0f02 	cmp.w	r9, #2
    b99a:	d327      	bcc.n	b9ec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
    b99c:	f5b9 0f00 	cmp.w	r9, #8388608	; 0x800000
    b9a0:	d824      	bhi.n	b9ec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
    b9a2:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
    b9a6:	f8c6 7344 	str.w	r7, [r6, #836]	; 0x344
    b9aa:	f1b8 0f00 	cmp.w	r8, #0
    b9ae:	d005      	beq.n	b9bc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    b9b0:	682b      	ldr	r3, [r5, #0]
    b9b2:	1ad3      	subs	r3, r2, r3
    b9b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b9b8:	2b02      	cmp	r3, #2
    b9ba:	d3f9      	bcc.n	b9b0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x84>
    b9bc:	4d13      	ldr	r5, [pc, #76]	; (ba0c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xe0>)
    b9be:	2202      	movs	r2, #2
    b9c0:	0753      	lsls	r3, r2, #29
    b9c2:	602b      	str	r3, [r5, #0]
    b9c4:	e9c4 0104 	strd	r0, r1, [r4, #16]
    b9c8:	2004      	movs	r0, #4
    b9ca:	f88c 0001 	strb.w	r0, [ip, #1]
    b9ce:	f88c 2000 	strb.w	r2, [ip]
    b9d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b9d6:	e004      	b.n	b9e2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb6>
    b9d8:	f44f 7170 	mov.w	r1, #960	; 0x3c0
    b9dc:	206c      	movs	r0, #108	; 0x6c
    b9de:	f000 fe5b 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b9e2:	f44f 7171 	mov.w	r1, #964	; 0x3c4
    b9e6:	206c      	movs	r0, #108	; 0x6c
    b9e8:	f000 fe56 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b9ec:	f44f 7174 	mov.w	r1, #976	; 0x3d0
    b9f0:	206c      	movs	r0, #108	; 0x6c
    b9f2:	f000 fe51 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b9f6:	0000      	.short	0x0000
    b9f8:	20000028 	.word	0x20000028
    b9fc:	2000002a 	.word	0x2000002a
    ba00:	4001f508 	.word	0x4001f508
    ba04:	4000b000 	.word	0x4000b000
    ba08:	4000b504 	.word	0x4000b504
    ba0c:	4001f504 	.word	0x4001f504

0000ba10 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    ba10:	4901      	ldr	r1, [pc, #4]	; (ba18 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    ba12:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
    ba16:	4770      	bx	lr
    ba18:	20000028 	.word	0x20000028

0000ba1c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    ba1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ba20:	f8df c0f4 	ldr.w	ip, [pc, #244]	; bb18 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xfc>
    ba24:	f89c 4000 	ldrb.w	r4, [ip]
    ba28:	2c00      	cmp	r4, #0
    ba2a:	bf07      	ittee	eq
    ba2c:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    ba30:	2100      	moveq	r1, #0
    ba32:	f44f 3200 	movne.w	r2, #131072	; 0x20000
    ba36:	2101      	movne	r1, #1
    ba38:	4838      	ldr	r0, [pc, #224]	; (bb1c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x100>)
    ba3a:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    ba3e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    ba42:	2300      	movs	r3, #0
    ba44:	2902      	cmp	r1, #2
    ba46:	bf38      	it	cc
    ba48:	f44f 75a0 	movcc.w	r5, #320	; 0x140
    ba4c:	d207      	bcs.n	ba5e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x42>
    ba4e:	bf00      	nop
    ba50:	eb05 0281 	add.w	r2, r5, r1, lsl #2
    ba54:	5083      	str	r3, [r0, r2]
    ba56:	1c49      	adds	r1, r1, #1
    ba58:	b2c9      	uxtb	r1, r1
    ba5a:	2902      	cmp	r1, #2
    ba5c:	d3f8      	bcc.n	ba50 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    ba5e:	2c02      	cmp	r4, #2
    ba60:	d004      	beq.n	ba6c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x50>
    ba62:	f240 31db 	movw	r1, #987	; 0x3db
    ba66:	206c      	movs	r0, #108	; 0x6c
    ba68:	f000 fe16 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ba6c:	f3ef 8210 	mrs	r2, PRIMASK
    ba70:	b672      	cpsid	i
    ba72:	4c2b      	ldr	r4, [pc, #172]	; (bb20 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x104>)
    ba74:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    ba78:	f8d0 5104 	ldr.w	r5, [r0, #260]	; 0x104
    ba7c:	b12d      	cbz	r5, ba8a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6e>
    ba7e:	68a1      	ldr	r1, [r4, #8]
    ba80:	1c49      	adds	r1, r1, #1
    ba82:	60a1      	str	r1, [r4, #8]
    ba84:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    ba88:	e7f4      	b.n	ba74 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x58>
    ba8a:	68a0      	ldr	r0, [r4, #8]
    ba8c:	b902      	cbnz	r2, ba90 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x74>
    ba8e:	b662      	cpsie	i
    ba90:	0a02      	lsrs	r2, r0, #8
    ba92:	0600      	lsls	r0, r0, #24
    ba94:	1840      	adds	r0, r0, r1
    ba96:	eb42 0103 	adc.w	r1, r2, r3
    ba9a:	e9d4 2804 	ldrd	r2, r8, [r4, #16]
    ba9e:	1cc0      	adds	r0, r0, #3
    baa0:	f141 0100 	adc.w	r1, r1, #0
    baa4:	4f1f      	ldr	r7, [pc, #124]	; (bb24 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x108>)
    baa6:	2601      	movs	r6, #1
    baa8:	4d1f      	ldr	r5, [pc, #124]	; (bb28 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x10c>)
    baaa:	ea80 0902 	eor.w	r9, r0, r2
    baae:	ea81 0808 	eor.w	r8, r1, r8
    bab2:	ea59 0808 	orrs.w	r8, r9, r8
    bab6:	d00e      	beq.n	bad6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    bab8:	f8d7 8000 	ldr.w	r8, [r7]
    babc:	eba2 0808 	sub.w	r8, r2, r8
    bac0:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    bac4:	f1b8 0f04 	cmp.w	r8, #4
    bac8:	d305      	bcc.n	bad6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    baca:	f5b8 0f00 	cmp.w	r8, #8388608	; 0x800000
    bace:	d802      	bhi.n	bad6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xba>
    bad0:	f7ff fe7e 	bl	b7d0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    bad4:	e01b      	b.n	bb0e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    bad6:	6838      	ldr	r0, [r7, #0]
    bad8:	1a10      	subs	r0, r2, r0
    bada:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bade:	2802      	cmp	r0, #2
    bae0:	d313      	bcc.n	bb0a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    bae2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    bae6:	d810      	bhi.n	bb0a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xee>
    bae8:	4910      	ldr	r1, [pc, #64]	; (bb2c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x110>)
    baea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    baee:	6008      	str	r0, [r1, #0]
    baf0:	6066      	str	r6, [r4, #4]
    baf2:	7023      	strb	r3, [r4, #0]
    baf4:	606e      	str	r6, [r5, #4]
    baf6:	60ee      	str	r6, [r5, #12]
    baf8:	0040      	lsls	r0, r0, #1
    bafa:	1f09      	subs	r1, r1, #4
    bafc:	6008      	str	r0, [r1, #0]
    bafe:	2004      	movs	r0, #4
    bb00:	f88c 0001 	strb.w	r0, [ip, #1]
    bb04:	f88c 6000 	strb.w	r6, [ip]
    bb08:	e001      	b.n	bb0e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf2>
    bb0a:	6066      	str	r6, [r4, #4]
    bb0c:	7023      	strb	r3, [r4, #0]
    bb0e:	6860      	ldr	r0, [r4, #4]
    bb10:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    bb14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bb18:	2000002a 	.word	0x2000002a
    bb1c:	4000b000 	.word	0x4000b000
    bb20:	20000028 	.word	0x20000028
    bb24:	4000b504 	.word	0x4000b504
    bb28:	40008000 	.word	0x40008000
    bb2c:	4001f508 	.word	0x4001f508

0000bb30 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>:
    bb30:	b410      	push	{r4}
    bb32:	f3ef 8410 	mrs	r4, PRIMASK
    bb36:	b672      	cpsid	i
    bb38:	4a0c      	ldr	r2, [pc, #48]	; (bb6c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x3c>)
    bb3a:	490d      	ldr	r1, [pc, #52]	; (bb70 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x40>)
    bb3c:	f04f 0c00 	mov.w	ip, #0
    bb40:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
    bb44:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    bb48:	b12b      	cbz	r3, bb56 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x26>
    bb4a:	6888      	ldr	r0, [r1, #8]
    bb4c:	1c40      	adds	r0, r0, #1
    bb4e:	6088      	str	r0, [r1, #8]
    bb50:	f8c2 c104 	str.w	ip, [r2, #260]	; 0x104
    bb54:	e7f4      	b.n	bb40 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x10>
    bb56:	6889      	ldr	r1, [r1, #8]
    bb58:	b904      	cbnz	r4, bb5c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x2c>
    bb5a:	b662      	cpsie	i
    bb5c:	0a0a      	lsrs	r2, r1, #8
    bb5e:	0609      	lsls	r1, r1, #24
    bb60:	1808      	adds	r0, r1, r0
    bb62:	bc10      	pop	{r4}
    bb64:	eb42 010c 	adc.w	r1, r2, ip
    bb68:	4770      	bx	lr
    bb6a:	0000      	.short	0x0000
    bb6c:	4000b000 	.word	0x4000b000
    bb70:	20000028 	.word	0x20000028

0000bb74 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    bb74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bb78:	4a56      	ldr	r2, [pc, #344]	; (bcd4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>)
    bb7a:	2501      	movs	r5, #1
    bb7c:	2400      	movs	r4, #0
    bb7e:	f892 c000 	ldrb.w	ip, [r2]
    bb82:	7852      	ldrb	r2, [r2, #1]
    bb84:	f44f 76a0 	mov.w	r6, #320	; 0x140
    bb88:	2807      	cmp	r0, #7
    bb8a:	d27d      	bcs.n	bc88 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    bb8c:	e8df f000 	tbb	[pc, r0]
    bb90:	04040404 	.word	0x04040404
    bb94:	00606060 	.word	0x00606060
    bb98:	4b4f      	ldr	r3, [pc, #316]	; (bcd8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>)
    bb9a:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    bb9e:	43ff      	mvns	r7, r7
    bba0:	ea77 0708 	orns	r7, r7, r8
    bba4:	bf04      	itt	eq
    bba6:	785b      	ldrbeq	r3, [r3, #1]
    bba8:	2b00      	cmpeq	r3, #0
    bbaa:	d003      	beq.n	bbb4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x40>
    bbac:	f1bc 0f02 	cmp.w	ip, #2
    bbb0:	d005      	beq.n	bbbe <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x4a>
    bbb2:	e026      	b.n	bc02 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8e>
    bbb4:	f44f 6186 	mov.w	r1, #1072	; 0x430
    bbb8:	206c      	movs	r0, #108	; 0x6c
    bbba:	f000 fd6d 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bbbe:	1f13      	subs	r3, r2, #4
    bbc0:	b2db      	uxtb	r3, r3
    bbc2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    bbc6:	f103 4680 	add.w	r6, r3, #1073741824	; 0x40000000
    bbca:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    bbce:	2300      	movs	r3, #0
    bbd0:	f1bc 0f01 	cmp.w	ip, #1
    bbd4:	d003      	beq.n	bbde <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x6a>
    bbd6:	f1bc 0f02 	cmp.w	ip, #2
    bbda:	d008      	beq.n	bbee <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x7a>
    bbdc:	e00e      	b.n	bbfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    bbde:	2a04      	cmp	r2, #4
    bbe0:	bf24      	itt	cs
    bbe2:	6837      	ldrcs	r7, [r6, #0]
    bbe4:	2f00      	cmpcs	r7, #0
    bbe6:	bf08      	it	eq
    bbe8:	f04f 4300 	moveq.w	r3, #2147483648	; 0x80000000
    bbec:	e006      	b.n	bbfc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x88>
    bbee:	2a04      	cmp	r2, #4
    bbf0:	bf24      	itt	cs
    bbf2:	6837      	ldrcs	r7, [r6, #0]
    bbf4:	2f00      	cmpcs	r7, #0
    bbf6:	bf08      	it	eq
    bbf8:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
    bbfc:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    bc00:	d1e5      	bne.n	bbce <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x5a>
    bc02:	4b36      	ldr	r3, [pc, #216]	; (bcdc <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    bc04:	f100 0210 	add.w	r2, r0, #16
    bc08:	fa05 f202 	lsl.w	r2, r5, r2
    bc0c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    bc10:	f04f 0c40 	mov.w	ip, #64	; 0x40
    bc14:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
    bc18:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    bc1c:	449c      	add	ip, r3
    bc1e:	f8cc 5000 	str.w	r5, [ip]
    bc22:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    bc26:	f8d0 c540 	ldr.w	ip, [r0, #1344]	; 0x540
    bc2a:	eba1 0c0c 	sub.w	ip, r1, ip
    bc2e:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    bc32:	f1bc 0f03 	cmp.w	ip, #3
    bc36:	bf3e      	ittt	cc
    bc38:	f8c0 4540 	strcc.w	r4, [r0, #1344]	; 0x540
    bc3c:	2000      	movcc	r0, #0
    bc3e:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    bc42:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    bc46:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    bc4a:	2001      	movs	r0, #1
    bc4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bc50:	f1bc 0f00 	cmp.w	ip, #0
    bc54:	d006      	beq.n	bc64 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    bc56:	4282      	cmp	r2, r0
    bc58:	d104      	bne.n	bc64 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf0>
    bc5a:	f44f 618a 	mov.w	r1, #1104	; 0x450
    bc5e:	206c      	movs	r0, #108	; 0x6c
    bc60:	f000 fd1a 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bc64:	1f00      	subs	r0, r0, #4
    bc66:	b2c2      	uxtb	r2, r0
    bc68:	2a03      	cmp	r2, #3
    bc6a:	d304      	bcc.n	bc76 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x102>
    bc6c:	f44f 7127 	mov.w	r1, #668	; 0x29c
    bc70:	206c      	movs	r0, #108	; 0x6c
    bc72:	f000 fd11 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bc76:	4b1a      	ldr	r3, [pc, #104]	; (bce0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x16c>)
    bc78:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    bc7c:	4090      	lsls	r0, r2
    bc7e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    bc82:	f8c3 0348 	str.w	r0, [r3, #840]	; 0x348
    bc86:	e000      	b.n	bc8a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    bc88:	e01f      	b.n	bcca <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x156>
    bc8a:	eb06 0c82 	add.w	ip, r6, r2, lsl #2
    bc8e:	f843 400c 	str.w	r4, [r3, ip]
    bc92:	f8df c050 	ldr.w	ip, [pc, #80]	; bce4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    bc96:	f8dc c000 	ldr.w	ip, [ip]
    bc9a:	eba1 0c0c 	sub.w	ip, r1, ip
    bc9e:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    bca2:	f1bc 0f02 	cmp.w	ip, #2
    bca6:	d30d      	bcc.n	bcc4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    bca8:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    bcac:	d80a      	bhi.n	bcc4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>
    bcae:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    bcb2:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bcb6:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    bcba:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
    bcbe:	4628      	mov	r0, r5
    bcc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bcc4:	4620      	mov	r0, r4
    bcc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bcca:	f240 4154 	movw	r1, #1108	; 0x454
    bcce:	206c      	movs	r0, #108	; 0x6c
    bcd0:	f000 fce2 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bcd4:	2000002a 	.word	0x2000002a
    bcd8:	20000028 	.word	0x20000028
    bcdc:	40008000 	.word	0x40008000
    bce0:	4000b000 	.word	0x4000b000
    bce4:	4000b504 	.word	0x4000b504

0000bce8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    bce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bcea:	2101      	movs	r1, #1
    bcec:	2600      	movs	r6, #0
    bcee:	f44f 77a0 	mov.w	r7, #320	; 0x140
    bcf2:	2807      	cmp	r0, #7
    bcf4:	d24a      	bcs.n	bd8c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    bcf6:	e8df f000 	tbb	[pc, r0]
    bcfa:	0404      	.short	0x0404
    bcfc:	18180404 	.word	0x18180404
    bd00:	0018      	.short	0x0018
    bd02:	f100 0210 	add.w	r2, r0, #16
    bd06:	fa01 f202 	lsl.w	r2, r1, r2
    bd0a:	4923      	ldr	r1, [pc, #140]	; (bd98 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    bd0c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    bd10:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    bd14:	2200      	movs	r2, #0
    bd16:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    bd1a:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    bd1e:	508e      	str	r6, [r1, r2]
    bd20:	491e      	ldr	r1, [pc, #120]	; (bd9c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    bd22:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    bd26:	9000      	str	r0, [sp, #0]
    bd28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bd2a:	4d1d      	ldr	r5, [pc, #116]	; (bda0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    bd2c:	1f01      	subs	r1, r0, #4
    bd2e:	b2cc      	uxtb	r4, r1
    bd30:	7829      	ldrb	r1, [r5, #0]
    bd32:	b181      	cbz	r1, bd56 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    bd34:	786a      	ldrb	r2, [r5, #1]
    bd36:	4282      	cmp	r2, r0
    bd38:	d10d      	bne.n	bd56 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    bd3a:	4a1a      	ldr	r2, [pc, #104]	; (bda4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    bd3c:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    bd40:	6010      	str	r0, [r2, #0]
    bd42:	2901      	cmp	r1, #1
    bd44:	bf08      	it	eq
    bd46:	f7ff fd0b 	bleq	b760 <MPSL_IRQ_TIMER0_Handler+0x100>
    bd4a:	702e      	strb	r6, [r5, #0]
    bd4c:	4a16      	ldr	r2, [pc, #88]	; (bda8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    bd4e:	f04f 30ff 	mov.w	r0, #4294967295
    bd52:	e9c2 0004 	strd	r0, r0, [r2, #16]
    bd56:	4915      	ldr	r1, [pc, #84]	; (bdac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    bd58:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    bd5c:	40a0      	lsls	r0, r4
    bd5e:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    bd62:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    bd66:	00a0      	lsls	r0, r4, #2
    bd68:	4408      	add	r0, r1
    bd6a:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    bd6e:	4a10      	ldr	r2, [pc, #64]	; (bdb0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    bd70:	6812      	ldr	r2, [r2, #0]
    bd72:	1a80      	subs	r0, r0, r2
    bd74:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bd78:	2802      	cmp	r0, #2
    bd7a:	bf24      	itt	cs
    bd7c:	eb07 0084 	addcs.w	r0, r7, r4, lsl #2
    bd80:	500e      	strcs	r6, [r1, r0]
    bd82:	480c      	ldr	r0, [pc, #48]	; (bdb4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    bd84:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    bd88:	9000      	str	r0, [sp, #0]
    bd8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bd8c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    bd90:	206c      	movs	r0, #108	; 0x6c
    bd92:	f000 fc81 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bd96:	0000      	.short	0x0000
    bd98:	40008000 	.word	0x40008000
    bd9c:	40008140 	.word	0x40008140
    bda0:	2000002a 	.word	0x2000002a
    bda4:	4001f508 	.word	0x4001f508
    bda8:	20000028 	.word	0x20000028
    bdac:	4000b000 	.word	0x4000b000
    bdb0:	4000b504 	.word	0x4000b504
    bdb4:	4000b140 	.word	0x4000b140

0000bdb8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    bdb8:	481a      	ldr	r0, [pc, #104]	; (be24 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x6c>)
    bdba:	7800      	ldrb	r0, [r0, #0]
    bdbc:	2800      	cmp	r0, #0
    bdbe:	bf07      	ittee	eq
    bdc0:	f44f 3040 	moveq.w	r0, #196608	; 0x30000
    bdc4:	2100      	moveq	r1, #0
    bdc6:	f44f 3000 	movne.w	r0, #131072	; 0x20000
    bdca:	2101      	movne	r1, #1
    bdcc:	4a16      	ldr	r2, [pc, #88]	; (be28 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x70>)
    bdce:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    bdd2:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    bdd6:	2000      	movs	r0, #0
    bdd8:	2902      	cmp	r1, #2
    bdda:	bf38      	it	cc
    bddc:	f44f 7ca0 	movcc.w	ip, #320	; 0x140
    bde0:	d207      	bcs.n	bdf2 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    bde2:	bf00      	nop
    bde4:	eb0c 0381 	add.w	r3, ip, r1, lsl #2
    bde8:	50d0      	str	r0, [r2, r3]
    bdea:	1c49      	adds	r1, r1, #1
    bdec:	b2c9      	uxtb	r1, r1
    bdee:	2902      	cmp	r1, #2
    bdf0:	d3f8      	bcc.n	bde4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    bdf2:	490e      	ldr	r1, [pc, #56]	; (be2c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x74>)
    bdf4:	f04f 32ff 	mov.w	r2, #4294967295
    bdf8:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    bdfc:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    be00:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    be04:	1d0a      	adds	r2, r1, #4
    be06:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    be0a:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    be0e:	1d12      	adds	r2, r2, #4
    be10:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    be14:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    be18:	1d12      	adds	r2, r2, #4
    be1a:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    be1e:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    be22:	4770      	bx	lr
    be24:	2000002a 	.word	0x2000002a
    be28:	4000b000 	.word	0x4000b000
    be2c:	40008000 	.word	0x40008000

0000be30 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>:
    be30:	b570      	push	{r4, r5, r6, lr}
    be32:	f3ef 8110 	mrs	r1, PRIMASK
    be36:	b672      	cpsid	i
    be38:	2400      	movs	r4, #0
    be3a:	4b0d      	ldr	r3, [pc, #52]	; (be70 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x40>)
    be3c:	4a0d      	ldr	r2, [pc, #52]	; (be74 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x44>)
    be3e:	bf00      	nop
    be40:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    be44:	f8d3 c104 	ldr.w	ip, [r3, #260]	; 0x104
    be48:	f1bc 0f00 	cmp.w	ip, #0
    be4c:	d005      	beq.n	be5a <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x2a>
    be4e:	6890      	ldr	r0, [r2, #8]
    be50:	1c40      	adds	r0, r0, #1
    be52:	6090      	str	r0, [r2, #8]
    be54:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    be58:	e7f2      	b.n	be40 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x10>
    be5a:	6895      	ldr	r5, [r2, #8]
    be5c:	b901      	cbnz	r1, be60 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x30>
    be5e:	b662      	cpsie	i
    be60:	f004 fd9d 	bl	1099e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    be64:	4a04      	ldr	r2, [pc, #16]	; (be78 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x48>)
    be66:	4621      	mov	r1, r4
    be68:	fbe5 0102 	umlal	r0, r1, r5, r2
    be6c:	bd70      	pop	{r4, r5, r6, pc}
    be6e:	0000      	.short	0x0000
    be70:	4000b000 	.word	0x4000b000
    be74:	20000028 	.word	0x20000028
    be78:	1e848000 	.word	0x1e848000

0000be7c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    be7c:	b510      	push	{r4, lr}
    be7e:	2807      	cmp	r0, #7
    be80:	d20d      	bcs.n	be9e <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    be82:	e8df f000 	tbb	[pc, r0]
    be86:	0404      	.short	0x0404
    be88:	06060404 	.word	0x06060404
    be8c:	0006      	.short	0x0006
    be8e:	4906      	ldr	r1, [pc, #24]	; (bea8 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    be90:	e002      	b.n	be98 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    be92:	1f00      	subs	r0, r0, #4
    be94:	4905      	ldr	r1, [pc, #20]	; (beac <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    be96:	b2c0      	uxtb	r0, r0
    be98:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    be9c:	bd10      	pop	{r4, pc}
    be9e:	f240 417b 	movw	r1, #1147	; 0x47b
    bea2:	206c      	movs	r0, #108	; 0x6c
    bea4:	f000 fbf8 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bea8:	40008140 	.word	0x40008140
    beac:	4000b140 	.word	0x4000b140

0000beb0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    beb0:	b570      	push	{r4, r5, r6, lr}
    beb2:	481b      	ldr	r0, [pc, #108]	; (bf20 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x70>)
    beb4:	2400      	movs	r4, #0
    beb6:	2104      	movs	r1, #4
    beb8:	7004      	strb	r4, [r0, #0]
    beba:	1e80      	subs	r0, r0, #2
    bebc:	7001      	strb	r1, [r0, #0]
    bebe:	1f49      	subs	r1, r1, #5
    bec0:	e9c0 1104 	strd	r1, r1, [r0, #16]
    bec4:	6084      	str	r4, [r0, #8]
    bec6:	f7ff fc4b 	bl	b760 <MPSL_IRQ_TIMER0_Handler+0x100>
    beca:	2501      	movs	r5, #1
    becc:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    bed0:	02eb      	lsls	r3, r5, #11
    bed2:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    bed6:	f3bf 8f4f 	dsb	sy
    beda:	f3bf 8f6f 	isb	sy
    bede:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    bee2:	4a10      	ldr	r2, [pc, #64]	; (bf24 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    bee4:	6055      	str	r5, [r2, #4]
    bee6:	6095      	str	r5, [r2, #8]
    bee8:	480f      	ldr	r0, [pc, #60]	; (bf28 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    beea:	6801      	ldr	r1, [r0, #0]
    beec:	2900      	cmp	r1, #0
    beee:	d1fc      	bne.n	beea <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3a>
    bef0:	480e      	ldr	r0, [pc, #56]	; (bf2c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    bef2:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    bef6:	f8c2 0348 	str.w	r0, [r2, #840]	; 0x348
    befa:	f8c2 4140 	str.w	r4, [r2, #320]	; 0x140
    befe:	f8c2 4144 	str.w	r4, [r2, #324]	; 0x144
    bf02:	f8c2 4148 	str.w	r4, [r2, #328]	; 0x148
    bf06:	f8c2 4104 	str.w	r4, [r2, #260]	; 0x104
    bf0a:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    bf0e:	6015      	str	r5, [r2, #0]
    bf10:	f44f 7082 	mov.w	r0, #260	; 0x104
    bf14:	f8c2 0344 	str.w	r0, [r2, #836]	; 0x344
    bf18:	2002      	movs	r0, #2
    bf1a:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
    bf1e:	bd70      	pop	{r4, r5, r6, pc}
    bf20:	2000002a 	.word	0x2000002a
    bf24:	4000b000 	.word	0x4000b000
    bf28:	4000b504 	.word	0x4000b504
    bf2c:	00070002 	.word	0x00070002

0000bf30 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    bf30:	4808      	ldr	r0, [pc, #32]	; (bf54 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    bf32:	f990 0000 	ldrsb.w	r0, [r0]
    bf36:	2800      	cmp	r0, #0
    bf38:	bfb8      	it	lt
    bf3a:	4770      	bxlt	lr
    bf3c:	f000 011f 	and.w	r1, r0, #31
    bf40:	2201      	movs	r2, #1
    bf42:	fa02 f101 	lsl.w	r1, r2, r1
    bf46:	0940      	lsrs	r0, r0, #5
    bf48:	0080      	lsls	r0, r0, #2
    bf4a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bf4e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    bf52:	4770      	bx	lr
    bf54:	20000384 	.word	0x20000384

0000bf58 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    bf58:	4803      	ldr	r0, [pc, #12]	; (bf68 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    bf5a:	7800      	ldrb	r0, [r0, #0]
    bf5c:	2803      	cmp	r0, #3
    bf5e:	bf0c      	ite	eq
    bf60:	2001      	moveq	r0, #1
    bf62:	2000      	movne	r0, #0
    bf64:	4770      	bx	lr
    bf66:	0000      	.short	0x0000
    bf68:	2000035c 	.word	0x2000035c

0000bf6c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    bf6c:	4801      	ldr	r0, [pc, #4]	; (bf74 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    bf6e:	8840      	ldrh	r0, [r0, #2]
    bf70:	4770      	bx	lr
    bf72:	0000      	.short	0x0000
    bf74:	2000035c 	.word	0x2000035c

0000bf78 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    bf78:	4803      	ldr	r0, [pc, #12]	; (bf88 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    bf7a:	7800      	ldrb	r0, [r0, #0]
    bf7c:	2802      	cmp	r0, #2
    bf7e:	bf16      	itet	ne
    bf80:	2803      	cmpne	r0, #3
    bf82:	2001      	moveq	r0, #1
    bf84:	2000      	movne	r0, #0
    bf86:	4770      	bx	lr
    bf88:	2000035c 	.word	0x2000035c

0000bf8c <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    bf8c:	4802      	ldr	r0, [pc, #8]	; (bf98 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    bf8e:	2100      	movs	r1, #0
    bf90:	7001      	strb	r1, [r0, #0]
    bf92:	8041      	strh	r1, [r0, #2]
    bf94:	4770      	bx	lr
    bf96:	0000      	.short	0x0000
    bf98:	2000035c 	.word	0x2000035c

0000bf9c <MPSL_IRQ_CLOCK_Handler>:
    bf9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bfa0:	4c16      	ldr	r4, [pc, #88]	; (bffc <MPSL_IRQ_CLOCK_Handler+0x60>)
    bfa2:	7a60      	ldrb	r0, [r4, #9]
    bfa4:	2800      	cmp	r0, #0
    bfa6:	d027      	beq.n	bff8 <MPSL_IRQ_CLOCK_Handler+0x5c>
    bfa8:	f44f 7180 	mov.w	r1, #256	; 0x100
    bfac:	058d      	lsls	r5, r1, #22
    bfae:	4628      	mov	r0, r5
    bfb0:	f004 fd20 	bl	109f4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bfb4:	4680      	mov	r8, r0
    bfb6:	f44f 7182 	mov.w	r1, #260	; 0x104
    bfba:	4628      	mov	r0, r5
    bfbc:	f004 fd1a 	bl	109f4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bfc0:	2600      	movs	r6, #0
    bfc2:	4607      	mov	r7, r0
    bfc4:	f1b8 0f00 	cmp.w	r8, #0
    bfc8:	d009      	beq.n	bfde <MPSL_IRQ_CLOCK_Handler+0x42>
    bfca:	2001      	movs	r0, #1
    bfcc:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bfd0:	7920      	ldrb	r0, [r4, #4]
    bfd2:	b120      	cbz	r0, bfde <MPSL_IRQ_CLOCK_Handler+0x42>
    bfd4:	7126      	strb	r6, [r4, #4]
    bfd6:	69e0      	ldr	r0, [r4, #28]
    bfd8:	b108      	cbz	r0, bfde <MPSL_IRQ_CLOCK_Handler+0x42>
    bfda:	4780      	blx	r0
    bfdc:	61e6      	str	r6, [r4, #28]
    bfde:	b137      	cbz	r7, bfee <MPSL_IRQ_CLOCK_Handler+0x52>
    bfe0:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    bfe4:	2002      	movs	r0, #2
    bfe6:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bfea:	f000 fa75 	bl	c4d8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    bfee:	4640      	mov	r0, r8
    bff0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bff4:	f000 b858 	b.w	c0a8 <MPSL_IRQ_CLOCK_Handler+0x10c>
    bff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bffc:	20000314 	.word	0x20000314
    c000:	b510      	push	{r4, lr}
    c002:	f004 fda1 	bl	10b48 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    c006:	b930      	cbnz	r0, c016 <MPSL_IRQ_CLOCK_Handler+0x7a>
    c008:	f004 fdbf 	bl	10b8a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c00c:	b918      	cbnz	r0, c016 <MPSL_IRQ_CLOCK_Handler+0x7a>
    c00e:	f004 fdf2 	bl	10bf6 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    c012:	2800      	cmp	r0, #0
    c014:	d002      	beq.n	c01c <MPSL_IRQ_CLOCK_Handler+0x80>
    c016:	4902      	ldr	r1, [pc, #8]	; (c020 <MPSL_IRQ_CLOCK_Handler+0x84>)
    c018:	2002      	movs	r0, #2
    c01a:	6008      	str	r0, [r1, #0]
    c01c:	bd10      	pop	{r4, pc}
    c01e:	0000      	.short	0x0000
    c020:	40000c34 	.word	0x40000c34
    c024:	b570      	push	{r4, r5, r6, lr}
    c026:	f000 f99b 	bl	c360 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c02a:	f000 fabd 	bl	c5a8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c02e:	4c09      	ldr	r4, [pc, #36]	; (c054 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    c030:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    c034:	b130      	cbz	r0, c044 <MPSL_IRQ_CLOCK_Handler+0xa8>
    c036:	f7ff ffe3 	bl	c000 <MPSL_IRQ_CLOCK_Handler+0x64>
    c03a:	2001      	movs	r0, #1
    c03c:	6128      	str	r0, [r5, #16]
    c03e:	2004      	movs	r0, #4
    c040:	72a0      	strb	r0, [r4, #10]
    c042:	e004      	b.n	c04e <MPSL_IRQ_CLOCK_Handler+0xb2>
    c044:	2003      	movs	r0, #3
    c046:	72a0      	strb	r0, [r4, #10]
    c048:	2001      	movs	r0, #1
    c04a:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    c04e:	2000      	movs	r0, #0
    c050:	71e0      	strb	r0, [r4, #7]
    c052:	bd70      	pop	{r4, r5, r6, pc}
    c054:	20000314 	.word	0x20000314
    c058:	b570      	push	{r4, r5, r6, lr}
    c05a:	4c12      	ldr	r4, [pc, #72]	; (c0a4 <MPSL_IRQ_CLOCK_Handler+0x108>)
    c05c:	79a0      	ldrb	r0, [r4, #6]
    c05e:	b1e0      	cbz	r0, c09a <MPSL_IRQ_CLOCK_Handler+0xfe>
    c060:	79e1      	ldrb	r1, [r4, #7]
    c062:	1e40      	subs	r0, r0, #1
    c064:	4281      	cmp	r1, r0
    c066:	da18      	bge.n	c09a <MPSL_IRQ_CLOCK_Handler+0xfe>
    c068:	f000 fa9e 	bl	c5a8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c06c:	4605      	mov	r5, r0
    c06e:	f000 fb87 	bl	c780 <mpsl_temperature_get>
    c072:	79a1      	ldrb	r1, [r4, #6]
    c074:	2901      	cmp	r1, #1
    c076:	d902      	bls.n	c07e <MPSL_IRQ_CLOCK_Handler+0xe2>
    c078:	79e1      	ldrb	r1, [r4, #7]
    c07a:	1c49      	adds	r1, r1, #1
    c07c:	71e1      	strb	r1, [r4, #7]
    c07e:	b10d      	cbz	r5, c084 <MPSL_IRQ_CLOCK_Handler+0xe8>
    c080:	6961      	ldr	r1, [r4, #20]
    c082:	e000      	b.n	c086 <MPSL_IRQ_CLOCK_Handler+0xea>
    c084:	6921      	ldr	r1, [r4, #16]
    c086:	1a41      	subs	r1, r0, r1
    c088:	2902      	cmp	r1, #2
    c08a:	da02      	bge.n	c092 <MPSL_IRQ_CLOCK_Handler+0xf6>
    c08c:	f111 0f02 	cmn.w	r1, #2
    c090:	dc07      	bgt.n	c0a2 <MPSL_IRQ_CLOCK_Handler+0x106>
    c092:	b10d      	cbz	r5, c098 <MPSL_IRQ_CLOCK_Handler+0xfc>
    c094:	6160      	str	r0, [r4, #20]
    c096:	e000      	b.n	c09a <MPSL_IRQ_CLOCK_Handler+0xfe>
    c098:	6120      	str	r0, [r4, #16]
    c09a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c09e:	f7ff bfc1 	b.w	c024 <MPSL_IRQ_CLOCK_Handler+0x88>
    c0a2:	bd70      	pop	{r4, r5, r6, pc}
    c0a4:	20000314 	.word	0x20000314
    c0a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c0ac:	4606      	mov	r6, r0
    c0ae:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    c0b2:	f44f 7186 	mov.w	r1, #268	; 0x10c
    c0b6:	4628      	mov	r0, r5
    c0b8:	f004 fc9c 	bl	109f4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c0bc:	4680      	mov	r8, r0
    c0be:	f44f 7188 	mov.w	r1, #272	; 0x110
    c0c2:	4628      	mov	r0, r5
    c0c4:	f004 fc96 	bl	109f4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c0c8:	4c27      	ldr	r4, [pc, #156]	; (c168 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    c0ca:	4682      	mov	sl, r0
    c0cc:	7827      	ldrb	r7, [r4, #0]
    c0ce:	f104 0008 	add.w	r0, r4, #8
    c0d2:	f004 fd03 	bl	10adc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    c0d6:	b110      	cbz	r0, c0de <MPSL_IRQ_CLOCK_Handler+0x142>
    c0d8:	f44f 71db 	mov.w	r1, #438	; 0x1b6
    c0dc:	e016      	b.n	c10c <MPSL_IRQ_CLOCK_Handler+0x170>
    c0de:	f04f 0901 	mov.w	r9, #1
    c0e2:	b146      	cbz	r6, c0f6 <MPSL_IRQ_CLOCK_Handler+0x15a>
    c0e4:	7aa0      	ldrb	r0, [r4, #10]
    c0e6:	2803      	cmp	r0, #3
    c0e8:	d105      	bne.n	c0f6 <MPSL_IRQ_CLOCK_Handler+0x15a>
    c0ea:	2004      	movs	r0, #4
    c0ec:	72a0      	strb	r0, [r4, #10]
    c0ee:	f7ff ff87 	bl	c000 <MPSL_IRQ_CLOCK_Handler+0x64>
    c0f2:	f8c5 9010 	str.w	r9, [r5, #16]
    c0f6:	2600      	movs	r6, #0
    c0f8:	f1b8 0f00 	cmp.w	r8, #0
    c0fc:	d018      	beq.n	c130 <MPSL_IRQ_CLOCK_Handler+0x194>
    c0fe:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    c102:	7aa0      	ldrb	r0, [r4, #10]
    c104:	2804      	cmp	r0, #4
    c106:	d004      	beq.n	c112 <MPSL_IRQ_CLOCK_Handler+0x176>
    c108:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    c10c:	206d      	movs	r0, #109	; 0x6d
    c10e:	f000 fac3 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c112:	f004 fd19 	bl	10b48 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    c116:	b928      	cbnz	r0, c124 <MPSL_IRQ_CLOCK_Handler+0x188>
    c118:	f004 fd37 	bl	10b8a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c11c:	b910      	cbnz	r0, c124 <MPSL_IRQ_CLOCK_Handler+0x188>
    c11e:	f004 fd6a 	bl	10bf6 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    c122:	b108      	cbz	r0, c128 <MPSL_IRQ_CLOCK_Handler+0x18c>
    c124:	4811      	ldr	r0, [pc, #68]	; (c16c <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    c126:	6006      	str	r6, [r0, #0]
    c128:	2002      	movs	r0, #2
    c12a:	72a0      	strb	r0, [r4, #10]
    c12c:	f000 f8fc 	bl	c328 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    c130:	f1ba 0f00 	cmp.w	sl, #0
    c134:	d008      	beq.n	c148 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    c136:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    c13a:	7aa0      	ldrb	r0, [r4, #10]
    c13c:	2802      	cmp	r0, #2
    c13e:	d101      	bne.n	c144 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    c140:	f7ff ff8a 	bl	c058 <MPSL_IRQ_CLOCK_Handler+0xbc>
    c144:	f8c5 9014 	str.w	r9, [r5, #20]
    c148:	b13f      	cbz	r7, c15a <MPSL_IRQ_CLOCK_Handler+0x1be>
    c14a:	7026      	strb	r6, [r4, #0]
    c14c:	7aa0      	ldrb	r0, [r4, #10]
    c14e:	2802      	cmp	r0, #2
    c150:	d101      	bne.n	c156 <MPSL_IRQ_CLOCK_Handler+0x1ba>
    c152:	f7ff ff67 	bl	c024 <MPSL_IRQ_CLOCK_Handler+0x88>
    c156:	f000 f8e7 	bl	c328 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    c15a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c15e:	4802      	ldr	r0, [pc, #8]	; (c168 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    c160:	3008      	adds	r0, #8
    c162:	f004 bcd2 	b.w	10b0a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    c166:	0000      	.short	0x0000
    c168:	20000314 	.word	0x20000314
    c16c:	40000c34 	.word	0x40000c34
    c170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c174:	4c49      	ldr	r4, [pc, #292]	; (c29c <MPSL_IRQ_CLOCK_Handler+0x300>)
    c176:	2700      	movs	r7, #0
    c178:	4606      	mov	r6, r0
    c17a:	61a7      	str	r7, [r4, #24]
    c17c:	7842      	ldrb	r2, [r0, #1]
    c17e:	7881      	ldrb	r1, [r0, #2]
    c180:	7800      	ldrb	r0, [r0, #0]
    c182:	72e0      	strb	r0, [r4, #11]
    c184:	7162      	strb	r2, [r4, #5]
    c186:	71a1      	strb	r1, [r4, #6]
    c188:	71e7      	strb	r7, [r4, #7]
    c18a:	f04f 0801 	mov.w	r8, #1
    c18e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    c192:	2805      	cmp	r0, #5
    c194:	d225      	bcs.n	c1e2 <MPSL_IRQ_CLOCK_Handler+0x246>
    c196:	e8df f000 	tbb	[pc, r0]
    c19a:	0310      	.short	0x0310
    c19c:	00222006 	.word	0x00222006
    c1a0:	f8c4 8018 	str.w	r8, [r4, #24]
    c1a4:	e009      	b.n	c1ba <MPSL_IRQ_CLOCK_Handler+0x21e>
    c1a6:	f000 f8db 	bl	c360 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c1aa:	2101      	movs	r1, #1
    c1ac:	4628      	mov	r0, r5
    c1ae:	f004 fc26 	bl	109fe <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    c1b2:	2800      	cmp	r0, #0
    c1b4:	d0f9      	beq.n	c1aa <MPSL_IRQ_CLOCK_Handler+0x20e>
    c1b6:	2002      	movs	r0, #2
    c1b8:	61a0      	str	r0, [r4, #24]
    c1ba:	f004 fc4c 	bl	10a56 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    c1be:	b1c0      	cbz	r0, c1f2 <MPSL_IRQ_CLOCK_Handler+0x256>
    c1c0:	f000 fa0c 	bl	c5dc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    c1c4:	7e21      	ldrb	r1, [r4, #24]
    c1c6:	f001 0103 	and.w	r1, r1, #3
    c1ca:	4288      	cmp	r0, r1
    c1cc:	d111      	bne.n	c1f2 <MPSL_IRQ_CLOCK_Handler+0x256>
    c1ce:	79b0      	ldrb	r0, [r6, #6]
    c1d0:	b160      	cbz	r0, c1ec <MPSL_IRQ_CLOCK_Handler+0x250>
    c1d2:	2002      	movs	r0, #2
    c1d4:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    c1d8:	e044      	b.n	c264 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    c1da:	4831      	ldr	r0, [pc, #196]	; (c2a0 <MPSL_IRQ_CLOCK_Handler+0x304>)
    c1dc:	e7ec      	b.n	c1b8 <MPSL_IRQ_CLOCK_Handler+0x21c>
    c1de:	4831      	ldr	r0, [pc, #196]	; (c2a4 <MPSL_IRQ_CLOCK_Handler+0x308>)
    c1e0:	e7ea      	b.n	c1b8 <MPSL_IRQ_CLOCK_Handler+0x21c>
    c1e2:	f240 313d 	movw	r1, #829	; 0x33d
    c1e6:	206d      	movs	r0, #109	; 0x6d
    c1e8:	f000 fa56 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c1ec:	f000 f9ca 	bl	c584 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    c1f0:	e038      	b.n	c264 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    c1f2:	f8c5 800c 	str.w	r8, [r5, #12]
    c1f6:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    c1fa:	69a0      	ldr	r0, [r4, #24]
    c1fc:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    c200:	f004 fc8e 	bl	10b20 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c204:	b940      	cbnz	r0, c218 <MPSL_IRQ_CLOCK_Handler+0x27c>
    c206:	f004 fc95 	bl	10b34 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c20a:	b928      	cbnz	r0, c218 <MPSL_IRQ_CLOCK_Handler+0x27c>
    c20c:	f004 fca9 	bl	10b62 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c210:	b910      	cbnz	r0, c218 <MPSL_IRQ_CLOCK_Handler+0x27c>
    c212:	f004 fcba 	bl	10b8a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c216:	b138      	cbz	r0, c228 <MPSL_IRQ_CLOCK_Handler+0x28c>
    c218:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c21c:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    c220:	4921      	ldr	r1, [pc, #132]	; (c2a8 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    c222:	f3c0 3042 	ubfx	r0, r0, #13, #3
    c226:	6008      	str	r0, [r1, #0]
    c228:	f004 fc7a 	bl	10b20 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c22c:	b940      	cbnz	r0, c240 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    c22e:	f004 fc81 	bl	10b34 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c232:	b928      	cbnz	r0, c240 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    c234:	f004 fc95 	bl	10b62 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c238:	b910      	cbnz	r0, c240 <MPSL_IRQ_CLOCK_Handler+0x2a4>
    c23a:	f004 fca6 	bl	10b8a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c23e:	b118      	cbz	r0, c248 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    c240:	4919      	ldr	r1, [pc, #100]	; (c2a8 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    c242:	3110      	adds	r1, #16
    c244:	f8c1 8000 	str.w	r8, [r1]
    c248:	f8c5 8008 	str.w	r8, [r5, #8]
    c24c:	2002      	movs	r0, #2
    c24e:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    c252:	79b0      	ldrb	r0, [r6, #6]
    c254:	b930      	cbnz	r0, c264 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    c256:	f000 f829 	bl	c2ac <MPSL_IRQ_CLOCK_Handler+0x310>
    c25a:	2002      	movs	r0, #2
    c25c:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    c260:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    c264:	79a0      	ldrb	r0, [r4, #6]
    c266:	b170      	cbz	r0, c286 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c268:	7830      	ldrb	r0, [r6, #0]
    c26a:	b960      	cbnz	r0, c286 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c26c:	f000 f99c 	bl	c5a8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c270:	4606      	mov	r6, r0
    c272:	f000 fa85 	bl	c780 <mpsl_temperature_get>
    c276:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    c27a:	b116      	cbz	r6, c282 <MPSL_IRQ_CLOCK_Handler+0x2e6>
    c27c:	e9c4 1004 	strd	r1, r0, [r4, #16]
    c280:	e001      	b.n	c286 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    c282:	e9c4 0104 	strd	r0, r1, [r4, #16]
    c286:	2101      	movs	r1, #1
    c288:	4628      	mov	r0, r5
    c28a:	f004 fbb8 	bl	109fe <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    c28e:	b108      	cbz	r0, c294 <MPSL_IRQ_CLOCK_Handler+0x2f8>
    c290:	f000 f984 	bl	c59c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    c294:	72a7      	strb	r7, [r4, #10]
    c296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c29a:	0000      	.short	0x0000
    c29c:	20000314 	.word	0x20000314
    c2a0:	00020001 	.word	0x00020001
    c2a4:	00030001 	.word	0x00030001
    c2a8:	4000053c 	.word	0x4000053c
    c2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c2b0:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    c2b4:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    c2b8:	f010 0f02 	tst.w	r0, #2
    c2bc:	d011      	beq.n	c2e2 <MPSL_IRQ_CLOCK_Handler+0x346>
    c2be:	4c16      	ldr	r4, [pc, #88]	; (c318 <MPSL_IRQ_CLOCK_Handler+0x37c>)
    c2c0:	6820      	ldr	r0, [r4, #0]
    c2c2:	43c0      	mvns	r0, r0
    c2c4:	f340 1600 	sbfx	r6, r0, #4, #1
    c2c8:	6820      	ldr	r0, [r4, #0]
    c2ca:	f040 0010 	orr.w	r0, r0, #16
    c2ce:	6020      	str	r0, [r4, #0]
    c2d0:	f44f 7782 	mov.w	r7, #260	; 0x104
    c2d4:	4639      	mov	r1, r7
    c2d6:	4628      	mov	r0, r5
    c2d8:	1c76      	adds	r6, r6, #1
    c2da:	f004 fb8b 	bl	109f4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c2de:	b128      	cbz	r0, c2ec <MPSL_IRQ_CLOCK_Handler+0x350>
    c2e0:	e00a      	b.n	c2f8 <MPSL_IRQ_CLOCK_Handler+0x35c>
    c2e2:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    c2e6:	206d      	movs	r0, #109	; 0x6d
    c2e8:	f000 f9d6 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c2ec:	f004 fc8f 	bl	10c0e <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>
    c2f0:	e002      	b.n	c2f8 <MPSL_IRQ_CLOCK_Handler+0x35c>
    c2f2:	bf00      	nop
    c2f4:	f004 fc89 	bl	10c0a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c2f8:	4639      	mov	r1, r7
    c2fa:	4628      	mov	r0, r5
    c2fc:	f004 fb7a 	bl	109f4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    c300:	2800      	cmp	r0, #0
    c302:	d0f7      	beq.n	c2f4 <MPSL_IRQ_CLOCK_Handler+0x358>
    c304:	f000 f93e 	bl	c584 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    c308:	2e00      	cmp	r6, #0
    c30a:	d103      	bne.n	c314 <MPSL_IRQ_CLOCK_Handler+0x378>
    c30c:	6820      	ldr	r0, [r4, #0]
    c30e:	f020 0010 	bic.w	r0, r0, #16
    c312:	6020      	str	r0, [r4, #0]
    c314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c318:	e000ed10 	.word	0xe000ed10

0000c31c <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    c31c:	4801      	ldr	r0, [pc, #4]	; (c324 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    c31e:	89c0      	ldrh	r0, [r0, #14]
    c320:	4770      	bx	lr
    c322:	0000      	.short	0x0000
    c324:	20000314 	.word	0x20000314

0000c328 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    c328:	b510      	push	{r4, lr}
    c32a:	f3ef 8410 	mrs	r4, PRIMASK
    c32e:	b672      	cpsid	i
    c330:	480a      	ldr	r0, [pc, #40]	; (c35c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    c332:	7841      	ldrb	r1, [r0, #1]
    c334:	b129      	cbz	r1, c342 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    c336:	7841      	ldrb	r1, [r0, #1]
    c338:	1e49      	subs	r1, r1, #1
    c33a:	7041      	strb	r1, [r0, #1]
    c33c:	7841      	ldrb	r1, [r0, #1]
    c33e:	b129      	cbz	r1, c34c <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    c340:	e008      	b.n	c354 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    c342:	f240 1119 	movw	r1, #281	; 0x119
    c346:	206d      	movs	r0, #109	; 0x6d
    c348:	f000 f9a6 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c34c:	7880      	ldrb	r0, [r0, #2]
    c34e:	b908      	cbnz	r0, c354 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    c350:	f000 f938 	bl	c5c4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    c354:	2c00      	cmp	r4, #0
    c356:	d100      	bne.n	c35a <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    c358:	b662      	cpsie	i
    c35a:	bd10      	pop	{r4, pc}
    c35c:	20000314 	.word	0x20000314

0000c360 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    c360:	b510      	push	{r4, lr}
    c362:	f3ef 8410 	mrs	r4, PRIMASK
    c366:	b672      	cpsid	i
    c368:	4806      	ldr	r0, [pc, #24]	; (c384 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    c36a:	7841      	ldrb	r1, [r0, #1]
    c36c:	1c49      	adds	r1, r1, #1
    c36e:	7041      	strb	r1, [r0, #1]
    c370:	7840      	ldrb	r0, [r0, #1]
    c372:	2801      	cmp	r0, #1
    c374:	d101      	bne.n	c37a <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    c376:	f004 fb59 	bl	10a2c <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    c37a:	2c00      	cmp	r4, #0
    c37c:	d100      	bne.n	c380 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    c37e:	b662      	cpsie	i
    c380:	bd10      	pop	{r4, pc}
    c382:	0000      	.short	0x0000
    c384:	20000314 	.word	0x20000314

0000c388 <mpsl_clock_hfclk_release>:
    c388:	4805      	ldr	r0, [pc, #20]	; (c3a0 <mpsl_clock_hfclk_release+0x18>)
    c38a:	b510      	push	{r4, lr}
    c38c:	78c1      	ldrb	r1, [r0, #3]
    c38e:	b121      	cbz	r1, c39a <mpsl_clock_hfclk_release+0x12>
    c390:	2100      	movs	r1, #0
    c392:	7101      	strb	r1, [r0, #4]
    c394:	70c1      	strb	r1, [r0, #3]
    c396:	f7ff ffc7 	bl	c328 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    c39a:	2000      	movs	r0, #0
    c39c:	bd10      	pop	{r4, pc}
    c39e:	0000      	.short	0x0000
    c3a0:	20000314 	.word	0x20000314

0000c3a4 <mpsl_clock_hfclk_request>:
    c3a4:	b570      	push	{r4, r5, r6, lr}
    c3a6:	4c0c      	ldr	r4, [pc, #48]	; (c3d8 <mpsl_clock_hfclk_request+0x34>)
    c3a8:	78e1      	ldrb	r1, [r4, #3]
    c3aa:	b961      	cbnz	r1, c3c6 <mpsl_clock_hfclk_request+0x22>
    c3ac:	2501      	movs	r5, #1
    c3ae:	70e5      	strb	r5, [r4, #3]
    c3b0:	61e0      	str	r0, [r4, #28]
    c3b2:	f7ff ffd5 	bl	c360 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c3b6:	f000 f8f7 	bl	c5a8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c3ba:	b130      	cbz	r0, c3ca <mpsl_clock_hfclk_request+0x26>
    c3bc:	69e0      	ldr	r0, [r4, #28]
    c3be:	b110      	cbz	r0, c3c6 <mpsl_clock_hfclk_request+0x22>
    c3c0:	4780      	blx	r0
    c3c2:	2000      	movs	r0, #0
    c3c4:	61e0      	str	r0, [r4, #28]
    c3c6:	2000      	movs	r0, #0
    c3c8:	bd70      	pop	{r4, r5, r6, pc}
    c3ca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c3ce:	7125      	strb	r5, [r4, #4]
    c3d0:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    c3d4:	e7f7      	b.n	c3c6 <mpsl_clock_hfclk_request+0x22>
    c3d6:	0000      	.short	0x0000
    c3d8:	20000314 	.word	0x20000314

0000c3dc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    c3dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c3e0:	0005      	movs	r5, r0
    c3e2:	f06f 0015 	mvn.w	r0, #21
    c3e6:	d03f      	beq.n	c468 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c3e8:	7829      	ldrb	r1, [r5, #0]
    c3ea:	2904      	cmp	r1, #4
    c3ec:	d83c      	bhi.n	c468 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c3ee:	2900      	cmp	r1, #0
    c3f0:	7869      	ldrb	r1, [r5, #1]
    c3f2:	d03b      	beq.n	c46c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    c3f4:	2900      	cmp	r1, #0
    c3f6:	d137      	bne.n	c468 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c3f8:	78a9      	ldrb	r1, [r5, #2]
    c3fa:	2900      	cmp	r1, #0
    c3fc:	d134      	bne.n	c468 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c3fe:	2000      	movs	r0, #0
    c400:	f004 fae7 	bl	109d2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    c404:	2000      	movs	r0, #0
    c406:	f004 fad7 	bl	109b8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    c40a:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    c40e:	f04f 31ff 	mov.w	r1, #4294967295
    c412:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    c416:	2600      	movs	r6, #0
    c418:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    c41c:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    c420:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    c424:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    c428:	4c14      	ldr	r4, [pc, #80]	; (c47c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    c42a:	7066      	strb	r6, [r4, #1]
    c42c:	88a8      	ldrh	r0, [r5, #4]
    c42e:	81a0      	strh	r0, [r4, #12]
    c430:	f004 faf3 	bl	10a1a <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    c434:	2701      	movs	r7, #1
    c436:	b108      	cbz	r0, c43c <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    c438:	70e7      	strb	r7, [r4, #3]
    c43a:	7067      	strb	r7, [r4, #1]
    c43c:	2101      	movs	r1, #1
    c43e:	4640      	mov	r0, r8
    c440:	f004 fadd 	bl	109fe <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    c444:	b108      	cbz	r0, c44a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    c446:	f000 f8a9 	bl	c59c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    c44a:	f240 50f5 	movw	r0, #1525	; 0x5f5
    c44e:	81e0      	strh	r0, [r4, #14]
    c450:	4628      	mov	r0, r5
    c452:	f7ff fe8d 	bl	c170 <MPSL_IRQ_CLOCK_Handler+0x1d4>
    c456:	7267      	strb	r7, [r4, #9]
    c458:	2000      	movs	r0, #0
    c45a:	f004 faad 	bl	109b8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    c45e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c462:	4630      	mov	r0, r6
    c464:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    c468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c46c:	2900      	cmp	r1, #0
    c46e:	d0fb      	beq.n	c468 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c470:	2920      	cmp	r1, #32
    c472:	d8f9      	bhi.n	c468 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c474:	78a9      	ldrb	r1, [r5, #2]
    c476:	2921      	cmp	r1, #33	; 0x21
    c478:	d9c1      	bls.n	c3fe <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    c47a:	e7f5      	b.n	c468 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c47c:	20000314 	.word	0x20000314

0000c480 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    c480:	4801      	ldr	r0, [pc, #4]	; (c488 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    c482:	8980      	ldrh	r0, [r0, #12]
    c484:	4770      	bx	lr
    c486:	0000      	.short	0x0000
    c488:	20000314 	.word	0x20000314

0000c48c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    c48c:	b510      	push	{r4, lr}
    c48e:	480d      	ldr	r0, [pc, #52]	; (c4c4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    c490:	f004 fb24 	bl	10adc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    c494:	490b      	ldr	r1, [pc, #44]	; (c4c4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    c496:	3908      	subs	r1, #8
    c498:	b148      	cbz	r0, c4ae <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    c49a:	2001      	movs	r0, #1
    c49c:	7008      	strb	r0, [r1, #0]
    c49e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c4a2:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    c4a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c4aa:	f7ff bf59 	b.w	c360 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c4ae:	7a88      	ldrb	r0, [r1, #10]
    c4b0:	2802      	cmp	r0, #2
    c4b2:	d101      	bne.n	c4b8 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    c4b4:	f7ff fdb6 	bl	c024 <MPSL_IRQ_CLOCK_Handler+0x88>
    c4b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c4bc:	4801      	ldr	r0, [pc, #4]	; (c4c4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    c4be:	f004 bb24 	b.w	10b0a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    c4c2:	0000      	.short	0x0000
    c4c4:	2000031c 	.word	0x2000031c

0000c4c8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    c4c8:	4802      	ldr	r0, [pc, #8]	; (c4d4 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    c4ca:	7a80      	ldrb	r0, [r0, #10]
    c4cc:	2800      	cmp	r0, #0
    c4ce:	d000      	beq.n	c4d2 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    c4d0:	2001      	movs	r0, #1
    c4d2:	4770      	bx	lr
    c4d4:	20000314 	.word	0x20000314

0000c4d8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    c4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c4da:	4d1f      	ldr	r5, [pc, #124]	; (c558 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c4dc:	7ae8      	ldrb	r0, [r5, #11]
    c4de:	2800      	cmp	r0, #0
    c4e0:	d10f      	bne.n	c502 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c4e2:	7e28      	ldrb	r0, [r5, #24]
    c4e4:	f000 0003 	and.w	r0, r0, #3
    c4e8:	f004 faa5 	bl	10a36 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c4ec:	2800      	cmp	r0, #0
    c4ee:	d008      	beq.n	c502 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c4f0:	f3ef 8110 	mrs	r1, PRIMASK
    c4f4:	b672      	cpsid	i
    c4f6:	f7ff ffe7 	bl	c4c8 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    c4fa:	b118      	cbz	r0, c504 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    c4fc:	2900      	cmp	r1, #0
    c4fe:	d100      	bne.n	c502 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c500:	b662      	cpsie	i
    c502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c504:	2601      	movs	r6, #1
    c506:	72ae      	strb	r6, [r5, #10]
    c508:	b901      	cbnz	r1, c50c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    c50a:	b662      	cpsie	i
    c50c:	2018      	movs	r0, #24
    c50e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    c512:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    c516:	61a6      	str	r6, [r4, #24]
    c518:	f44f 7020 	mov.w	r0, #640	; 0x280
    c51c:	f8ad 0000 	strh.w	r0, [sp]
    c520:	f8bd 0000 	ldrh.w	r0, [sp]
    c524:	1e41      	subs	r1, r0, #1
    c526:	f8ad 1000 	strh.w	r1, [sp]
    c52a:	d2f9      	bcs.n	c520 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    c52c:	2700      	movs	r7, #0
    c52e:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    c532:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    c536:	4808      	ldr	r0, [pc, #32]	; (c558 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c538:	3008      	adds	r0, #8
    c53a:	f004 fae2 	bl	10b02 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    c53e:	702f      	strb	r7, [r5, #0]
    c540:	f7ff fd70 	bl	c024 <MPSL_IRQ_CLOCK_Handler+0x88>
    c544:	6166      	str	r6, [r4, #20]
    c546:	7968      	ldrb	r0, [r5, #5]
    c548:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    c54c:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    c550:	2018      	movs	r0, #24
    c552:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    c556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c558:	20000314 	.word	0x20000314

0000c55c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c55c:	4602      	mov	r2, r0
    c55e:	b510      	push	{r4, lr}
    c560:	2000      	movs	r0, #0
    c562:	2900      	cmp	r1, #0
    c564:	d00a      	beq.n	c57c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c566:	2a00      	cmp	r2, #0
    c568:	d008      	beq.n	c57c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c56a:	fba2 0101 	umull	r0, r1, r2, r1
    c56e:	1e40      	subs	r0, r0, #1
    c570:	4a03      	ldr	r2, [pc, #12]	; (c580 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x24>)
    c572:	f141 31ff 	adc.w	r1, r1, #4294967295
    c576:	f004 fb4c 	bl	10c12 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    c57a:	1c40      	adds	r0, r0, #1
    c57c:	bd10      	pop	{r4, pc}
    c57e:	0000      	.short	0x0000
    c580:	000f4240 	.word	0x000f4240

0000c584 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    c584:	b510      	push	{r4, lr}
    c586:	4c04      	ldr	r4, [pc, #16]	; (c598 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    c588:	7e20      	ldrb	r0, [r4, #24]
    c58a:	f000 0003 	and.w	r0, r0, #3
    c58e:	f004 fa52 	bl	10a36 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c592:	2800      	cmp	r0, #0
    c594:	d0f8      	beq.n	c588 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    c596:	bd10      	pop	{r4, pc}
    c598:	20000314 	.word	0x20000314

0000c59c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    c59c:	4901      	ldr	r1, [pc, #4]	; (c5a4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    c59e:	2001      	movs	r0, #1
    c5a0:	7008      	strb	r0, [r1, #0]
    c5a2:	4770      	bx	lr
    c5a4:	20000385 	.word	0x20000385

0000c5a8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    c5a8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c5ac:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    c5b0:	b918      	cbnz	r0, c5ba <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    c5b2:	4803      	ldr	r0, [pc, #12]	; (c5c0 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    c5b4:	7800      	ldrb	r0, [r0, #0]
    c5b6:	2800      	cmp	r0, #0
    c5b8:	d000      	beq.n	c5bc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    c5ba:	2001      	movs	r0, #1
    c5bc:	4770      	bx	lr
    c5be:	0000      	.short	0x0000
    c5c0:	20000385 	.word	0x20000385

0000c5c4 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    c5c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c5c8:	2101      	movs	r1, #1
    c5ca:	6041      	str	r1, [r0, #4]
    c5cc:	2100      	movs	r1, #0
    c5ce:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c5d2:	4801      	ldr	r0, [pc, #4]	; (c5d8 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    c5d4:	7001      	strb	r1, [r0, #0]
    c5d6:	4770      	bx	lr
    c5d8:	20000385 	.word	0x20000385

0000c5dc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    c5dc:	4802      	ldr	r0, [pc, #8]	; (c5e8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    c5de:	6800      	ldr	r0, [r0, #0]
    c5e0:	f000 0003 	and.w	r0, r0, #3
    c5e4:	4770      	bx	lr
    c5e6:	0000      	.short	0x0000
    c5e8:	4000041c 	.word	0x4000041c
    c5ec:	b510      	push	{r4, lr}
    c5ee:	b131      	cbz	r1, c5fe <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    c5f0:	2901      	cmp	r1, #1
    c5f2:	d007      	beq.n	c604 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    c5f4:	f240 3102 	movw	r1, #770	; 0x302
    c5f8:	a005      	add	r0, pc, #20	; (adr r0, c610 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    c5fa:	f000 f821 	bl	c640 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    c5fe:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    c602:	e001      	b.n	c608 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    c604:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    c608:	f000 0001 	and.w	r0, r0, #1
    c60c:	bd10      	pop	{r4, pc}
    c60e:	0000      	.short	0x0000
    c610:	5f66726e 	.word	0x5f66726e
    c614:	636f6c63 	.word	0x636f6c63
    c618:	00682e6b 	.word	0x00682e6b
    c61c:	f3bf 8f4f 	dsb	sy
    c620:	4805      	ldr	r0, [pc, #20]	; (c638 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    c622:	6801      	ldr	r1, [r0, #0]
    c624:	4a05      	ldr	r2, [pc, #20]	; (c63c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    c626:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    c62a:	4311      	orrs	r1, r2
    c62c:	6001      	str	r1, [r0, #0]
    c62e:	f3bf 8f4f 	dsb	sy
    c632:	bf00      	nop
    c634:	e7fd      	b.n	c632 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    c636:	0000      	.short	0x0000
    c638:	e000ed0c 	.word	0xe000ed0c
    c63c:	05fa0004 	.word	0x05fa0004

0000c640 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    c640:	b672      	cpsid	i
    c642:	4a03      	ldr	r2, [pc, #12]	; (c650 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    c644:	6852      	ldr	r2, [r2, #4]
    c646:	b102      	cbz	r2, c64a <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    c648:	4790      	blx	r2
    c64a:	f7ff ffe7 	bl	c61c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c64e:	0000      	.short	0x0000
    c650:	20000334 	.word	0x20000334
    c654:	4806      	ldr	r0, [pc, #24]	; (c670 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    c656:	b510      	push	{r4, lr}
    c658:	2100      	movs	r1, #0
    c65a:	6001      	str	r1, [r0, #0]
    c65c:	2101      	movs	r1, #1
    c65e:	6001      	str	r1, [r0, #0]
    c660:	4608      	mov	r0, r1
    c662:	f004 fa0f 	bl	10a84 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c66a:	2001      	movs	r0, #1
    c66c:	f004 b9fd 	b.w	10a6a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c670:	40001ffc 	.word	0x40001ffc
    c674:	4807      	ldr	r0, [pc, #28]	; (c694 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    c676:	b510      	push	{r4, lr}
    c678:	2101      	movs	r1, #1
    c67a:	6041      	str	r1, [r0, #4]
    c67c:	1e89      	subs	r1, r1, #2
    c67e:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    c682:	200c      	movs	r0, #12
    c684:	f004 f9fe 	bl	10a84 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c68c:	200c      	movs	r0, #12
    c68e:	f004 b9ec 	b.w	10a6a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c692:	0000      	.short	0x0000
    c694:	4000c000 	.word	0x4000c000

0000c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    c698:	b50e      	push	{r1, r2, r3, lr}
    c69a:	b672      	cpsid	i
    c69c:	4a0f      	ldr	r2, [pc, #60]	; (c6dc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    c69e:	6855      	ldr	r5, [r2, #4]
    c6a0:	b1d5      	cbz	r5, c6d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    c6a2:	2200      	movs	r2, #0
    c6a4:	4603      	mov	r3, r0
    c6a6:	466e      	mov	r6, sp
    c6a8:	240a      	movs	r4, #10
    c6aa:	e003      	b.n	c6b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    c6ac:	fbb0 f0f4 	udiv	r0, r0, r4
    c6b0:	1c52      	adds	r2, r2, #1
    c6b2:	b2d2      	uxtb	r2, r2
    c6b4:	2800      	cmp	r0, #0
    c6b6:	d1f9      	bne.n	c6ac <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    c6b8:	54b0      	strb	r0, [r6, r2]
    c6ba:	e009      	b.n	c6d0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    c6bc:	fbb3 f0f4 	udiv	r0, r3, r4
    c6c0:	fb04 3010 	mls	r0, r4, r0, r3
    c6c4:	fbb3 f3f4 	udiv	r3, r3, r4
    c6c8:	1e52      	subs	r2, r2, #1
    c6ca:	b2d2      	uxtb	r2, r2
    c6cc:	3030      	adds	r0, #48	; 0x30
    c6ce:	54b0      	strb	r0, [r6, r2]
    c6d0:	2a00      	cmp	r2, #0
    c6d2:	d1f3      	bne.n	c6bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    c6d4:	4630      	mov	r0, r6
    c6d6:	47a8      	blx	r5
    c6d8:	f7ff ffa0 	bl	c61c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c6dc:	20000334 	.word	0x20000334

0000c6e0 <mpsl_init>:
    c6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c6e4:	4c18      	ldr	r4, [pc, #96]	; (c748 <mpsl_init+0x68>)
    c6e6:	4606      	mov	r6, r0
    c6e8:	4617      	mov	r7, r2
    c6ea:	7860      	ldrb	r0, [r4, #1]
    c6ec:	460d      	mov	r5, r1
    c6ee:	b118      	cbz	r0, c6f8 <mpsl_init+0x18>
    c6f0:	f04f 30ff 	mov.w	r0, #4294967295
    c6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c6f8:	f7fc fb6c 	bl	8dd4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    c6fc:	b906      	cbnz	r6, c700 <mpsl_init+0x20>
    c6fe:	4e13      	ldr	r6, [pc, #76]	; (c74c <mpsl_init+0x6c>)
    c700:	6067      	str	r7, [r4, #4]
    c702:	7025      	strb	r5, [r4, #0]
    c704:	f7ff ffa6 	bl	c654 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    c708:	f7ff ffb4 	bl	c674 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    c70c:	4630      	mov	r0, r6
    c70e:	f7ff fe65 	bl	c3dc <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    c712:	0006      	movs	r6, r0
    c714:	d1ee      	bne.n	c6f4 <mpsl_init+0x14>
    c716:	f7fe fe29 	bl	b36c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    c71a:	f7ff fedd 	bl	c4d8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    c71e:	f004 f918 	bl	10952 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    c722:	4628      	mov	r0, r5
    c724:	f004 f9a1 	bl	10a6a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c728:	2001      	movs	r0, #1
    c72a:	2d00      	cmp	r5, #0
    c72c:	db09      	blt.n	c742 <mpsl_init+0x62>
    c72e:	f005 011f 	and.w	r1, r5, #31
    c732:	fa00 f101 	lsl.w	r1, r0, r1
    c736:	096a      	lsrs	r2, r5, #5
    c738:	0092      	lsls	r2, r2, #2
    c73a:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    c73e:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    c742:	7060      	strb	r0, [r4, #1]
    c744:	4630      	mov	r0, r6
    c746:	e7d5      	b.n	c6f4 <mpsl_init+0x14>
    c748:	20000334 	.word	0x20000334
    c74c:	00010aa6 	.word	0x00010aa6

0000c750 <mpsl_is_initialized>:
    c750:	4801      	ldr	r0, [pc, #4]	; (c758 <mpsl_is_initialized+0x8>)
    c752:	7840      	ldrb	r0, [r0, #1]
    c754:	4770      	bx	lr
    c756:	0000      	.short	0x0000
    c758:	20000334 	.word	0x20000334

0000c75c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    c75c:	4807      	ldr	r0, [pc, #28]	; (c77c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    c75e:	f990 0000 	ldrsb.w	r0, [r0]
    c762:	2800      	cmp	r0, #0
    c764:	db09      	blt.n	c77a <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    c766:	f000 021f 	and.w	r2, r0, #31
    c76a:	2101      	movs	r1, #1
    c76c:	4091      	lsls	r1, r2
    c76e:	0940      	lsrs	r0, r0, #5
    c770:	0080      	lsls	r0, r0, #2
    c772:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c776:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c77a:	4770      	bx	lr
    c77c:	20000334 	.word	0x20000334

0000c780 <mpsl_temperature_get>:
    c780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c784:	2501      	movs	r5, #1
    c786:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c78a:	0329      	lsls	r1, r5, #12
    c78c:	f04f 0800 	mov.w	r8, #0
    c790:	4640      	mov	r0, r8
    c792:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    c796:	f3bf 8f4f 	dsb	sy
    c79a:	f3bf 8f6f 	isb	sy
    c79e:	4c16      	ldr	r4, [pc, #88]	; (c7f8 <mpsl_temperature_get+0x78>)
    c7a0:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    c7a4:	200c      	movs	r0, #12
    c7a6:	f004 f98c 	bl	10ac2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c7aa:	4e14      	ldr	r6, [pc, #80]	; (c7fc <mpsl_temperature_get+0x7c>)
    c7ac:	6830      	ldr	r0, [r6, #0]
    c7ae:	43c0      	mvns	r0, r0
    c7b0:	f340 1700 	sbfx	r7, r0, #4, #1
    c7b4:	6830      	ldr	r0, [r6, #0]
    c7b6:	f040 0010 	orr.w	r0, r0, #16
    c7ba:	6030      	str	r0, [r6, #0]
    c7bc:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    c7c0:	6025      	str	r5, [r4, #0]
    c7c2:	1c7f      	adds	r7, r7, #1
    c7c4:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    c7c8:	b108      	cbz	r0, c7ce <mpsl_temperature_get+0x4e>
    c7ca:	b11f      	cbz	r7, c7d4 <mpsl_temperature_get+0x54>
    c7cc:	e006      	b.n	c7dc <mpsl_temperature_get+0x5c>
    c7ce:	f004 fa1c 	bl	10c0a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c7d2:	e7f7      	b.n	c7c4 <mpsl_temperature_get+0x44>
    c7d4:	6830      	ldr	r0, [r6, #0]
    c7d6:	f020 0010 	bic.w	r0, r0, #16
    c7da:	6030      	str	r0, [r6, #0]
    c7dc:	f8d4 6508 	ldr.w	r6, [r4, #1288]	; 0x508
    c7e0:	6065      	str	r5, [r4, #4]
    c7e2:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
    c7e6:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    c7ea:	200c      	movs	r0, #12
    c7ec:	f004 f969 	bl	10ac2 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c7f0:	4630      	mov	r0, r6
    c7f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c7f6:	0000      	.short	0x0000
    c7f8:	4000c000 	.word	0x4000c000
    c7fc:	e000ed10 	.word	0xe000ed10

0000c800 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    c800:	b510      	push	{r4, lr}
    c802:	4602      	mov	r2, r0
    c804:	2005      	movs	r0, #5
    c806:	490c      	ldr	r1, [pc, #48]	; (c838 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    c808:	e004      	b.n	c814 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    c80a:	bf00      	nop
    c80c:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    c810:	791b      	ldrb	r3, [r3, #4]
    c812:	b133      	cbz	r3, c822 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    c814:	1e40      	subs	r0, r0, #1
    c816:	b2c0      	uxtb	r0, r0
    c818:	d2f8      	bcs.n	c80c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    c81a:	2148      	movs	r1, #72	; 0x48
    c81c:	2069      	movs	r0, #105	; 0x69
    c81e:	f7ff ff3b 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c822:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    c826:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    c82a:	2200      	movs	r2, #0
    c82c:	714a      	strb	r2, [r1, #5]
    c82e:	718a      	strb	r2, [r1, #6]
    c830:	2201      	movs	r2, #1
    c832:	710a      	strb	r2, [r1, #4]
    c834:	bd10      	pop	{r4, pc}
    c836:	0000      	.short	0x0000
    c838:	20001378 	.word	0x20001378

0000c83c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    c83c:	b510      	push	{r4, lr}
    c83e:	2805      	cmp	r0, #5
    c840:	d301      	bcc.n	c846 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    c842:	2158      	movs	r1, #88	; 0x58
    c844:	e006      	b.n	c854 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    c846:	490a      	ldr	r1, [pc, #40]	; (c870 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    c848:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    c84c:	7901      	ldrb	r1, [r0, #4]
    c84e:	2901      	cmp	r1, #1
    c850:	d003      	beq.n	c85a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    c852:	2159      	movs	r1, #89	; 0x59
    c854:	2069      	movs	r0, #105	; 0x69
    c856:	f7ff ff1f 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c85a:	7941      	ldrb	r1, [r0, #5]
    c85c:	7982      	ldrb	r2, [r0, #6]
    c85e:	1c49      	adds	r1, r1, #1
    c860:	b2c9      	uxtb	r1, r1
    c862:	428a      	cmp	r2, r1
    c864:	d000      	beq.n	c868 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    c866:	7141      	strb	r1, [r0, #5]
    c868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c86c:	f7ff bf76 	b.w	c75c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    c870:	20001378 	.word	0x20001378

0000c874 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    c874:	b510      	push	{r4, lr}
    c876:	2805      	cmp	r0, #5
    c878:	d303      	bcc.n	c882 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    c87a:	214f      	movs	r1, #79	; 0x4f
    c87c:	2069      	movs	r0, #105	; 0x69
    c87e:	f7ff ff0b 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c882:	4a03      	ldr	r2, [pc, #12]	; (c890 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    c884:	2100      	movs	r1, #0
    c886:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    c88a:	7101      	strb	r1, [r0, #4]
    c88c:	bd10      	pop	{r4, pc}
    c88e:	0000      	.short	0x0000
    c890:	20001378 	.word	0x20001378

0000c894 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    c894:	b570      	push	{r4, r5, r6, lr}
    c896:	2505      	movs	r5, #5
    c898:	4e0e      	ldr	r6, [pc, #56]	; (c8d4 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    c89a:	4c0f      	ldr	r4, [pc, #60]	; (c8d8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    c89c:	e016      	b.n	c8cc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c89e:	7821      	ldrb	r1, [r4, #0]
    c8a0:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    c8a4:	7902      	ldrb	r2, [r0, #4]
    c8a6:	2a01      	cmp	r2, #1
    c8a8:	d108      	bne.n	c8bc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c8aa:	7942      	ldrb	r2, [r0, #5]
    c8ac:	7983      	ldrb	r3, [r0, #6]
    c8ae:	429a      	cmp	r2, r3
    c8b0:	d004      	beq.n	c8bc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c8b2:	7942      	ldrb	r2, [r0, #5]
    c8b4:	7182      	strb	r2, [r0, #6]
    c8b6:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    c8ba:	4780      	blx	r0
    c8bc:	7820      	ldrb	r0, [r4, #0]
    c8be:	1c40      	adds	r0, r0, #1
    c8c0:	b2c0      	uxtb	r0, r0
    c8c2:	7020      	strb	r0, [r4, #0]
    c8c4:	2805      	cmp	r0, #5
    c8c6:	d301      	bcc.n	c8cc <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c8c8:	2000      	movs	r0, #0
    c8ca:	7020      	strb	r0, [r4, #0]
    c8cc:	1e6d      	subs	r5, r5, #1
    c8ce:	b2ed      	uxtb	r5, r5
    c8d0:	d2e5      	bcs.n	c89e <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    c8d2:	bd70      	pop	{r4, r5, r6, pc}
    c8d4:	20001378 	.word	0x20001378
    c8d8:	20000386 	.word	0x20000386

0000c8dc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    c8dc:	b500      	push	{lr}
    c8de:	f004 f91f 	bl	10b20 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c8e2:	b940      	cbnz	r0, c8f6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c8e4:	f004 f926 	bl	10b34 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c8e8:	b928      	cbnz	r0, c8f6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c8ea:	f004 f93a 	bl	10b62 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c8ee:	b910      	cbnz	r0, c8f6 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c8f0:	f004 f94b 	bl	10b8a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c8f4:	b108      	cbz	r0, c8fa <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    c8f6:	4802      	ldr	r0, [pc, #8]	; (c900 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    c8f8:	bd00      	pop	{pc}
    c8fa:	4802      	ldr	r0, [pc, #8]	; (c904 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    c8fc:	bd00      	pop	{pc}
    c8fe:	0000      	.short	0x0000
    c900:	4000050c 	.word	0x4000050c
    c904:	4001e700 	.word	0x4001e700
    c908:	b510      	push	{r4, lr}
    c90a:	f004 f93e 	bl	10b8a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c90e:	b330      	cbz	r0, c95e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x82>
    c910:	f3ef 8010 	mrs	r0, PRIMASK
    c914:	b1c8      	cbz	r0, c94a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x6e>
    c916:	2100      	movs	r1, #0
    c918:	b672      	cpsid	i
    c91a:	4812      	ldr	r0, [pc, #72]	; (c964 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x88>)
    c91c:	6802      	ldr	r2, [r0, #0]
    c91e:	6803      	ldr	r3, [r0, #0]
    c920:	f3c2 1200 	ubfx	r2, r2, #4, #1
    c924:	f043 0310 	orr.w	r3, r3, #16
    c928:	6003      	str	r3, [r0, #0]
    c92a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c92e:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c932:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    c936:	431c      	orrs	r4, r3
    c938:	d000      	beq.n	c93c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x60>
    c93a:	bf40      	sev
    c93c:	bf20      	wfe
    c93e:	bf00      	nop
    c940:	bf00      	nop
    c942:	bf00      	nop
    c944:	bf00      	nop
    c946:	b112      	cbz	r2, c94e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x72>
    c948:	e005      	b.n	c956 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x7a>
    c94a:	2101      	movs	r1, #1
    c94c:	e7e4      	b.n	c918 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x3c>
    c94e:	6802      	ldr	r2, [r0, #0]
    c950:	f022 0210 	bic.w	r2, r2, #16
    c954:	6002      	str	r2, [r0, #0]
    c956:	2900      	cmp	r1, #0
    c958:	d000      	beq.n	c95c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x80>
    c95a:	b662      	cpsie	i
    c95c:	bd10      	pop	{r4, pc}
    c95e:	bf20      	wfe
    c960:	bd10      	pop	{r4, pc}
    c962:	0000      	.short	0x0000
    c964:	e000ed10 	.word	0xe000ed10

0000c968 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    c968:	4901      	ldr	r1, [pc, #4]	; (c970 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    c96a:	2001      	movs	r0, #1
    c96c:	7088      	strb	r0, [r1, #2]
    c96e:	4770      	bx	lr
    c970:	2000033c 	.word	0x2000033c

0000c974 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    c974:	00010e8b 00010ec3 00010ead 00010e9b     ................
    c984:	00010ea7 00010e95 00010e89 00010e87     ................
    c994:	00010ebf 00010eb3 00010ea1 00010e8f     ................
    c9a4:	00010e81 00010e79 00010e7d 00010e73     ....y...}...s...

0000c9b4 <mpsl_fem_disable>:
    c9b4:	4801      	ldr	r0, [pc, #4]	; (c9bc <mpsl_fem_disable+0x8>)
    c9b6:	6800      	ldr	r0, [r0, #0]
    c9b8:	6800      	ldr	r0, [r0, #0]
    c9ba:	4700      	bx	r0
    c9bc:	20000350 	.word	0x20000350

0000c9c0 <mpsl_fem_lna_configuration_clear>:
    c9c0:	4801      	ldr	r0, [pc, #4]	; (c9c8 <mpsl_fem_lna_configuration_clear+0x8>)
    c9c2:	6800      	ldr	r0, [r0, #0]
    c9c4:	6940      	ldr	r0, [r0, #20]
    c9c6:	4700      	bx	r0
    c9c8:	20000350 	.word	0x20000350

0000c9cc <mpsl_fem_lna_configuration_set>:
    c9cc:	4a01      	ldr	r2, [pc, #4]	; (c9d4 <mpsl_fem_lna_configuration_set+0x8>)
    c9ce:	6812      	ldr	r2, [r2, #0]
    c9d0:	68d2      	ldr	r2, [r2, #12]
    c9d2:	4710      	bx	r2
    c9d4:	20000350 	.word	0x20000350

0000c9d8 <mpsl_fem_lna_is_configured>:
    c9d8:	4901      	ldr	r1, [pc, #4]	; (c9e0 <mpsl_fem_lna_is_configured+0x8>)
    c9da:	6809      	ldr	r1, [r1, #0]
    c9dc:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    c9de:	4708      	bx	r1
    c9e0:	20000350 	.word	0x20000350

0000c9e4 <mpsl_fem_pa_configuration_clear>:
    c9e4:	4801      	ldr	r0, [pc, #4]	; (c9ec <mpsl_fem_pa_configuration_clear+0x8>)
    c9e6:	6800      	ldr	r0, [r0, #0]
    c9e8:	6900      	ldr	r0, [r0, #16]
    c9ea:	4700      	bx	r0
    c9ec:	20000350 	.word	0x20000350

0000c9f0 <mpsl_fem_pa_configuration_set>:
    c9f0:	4a01      	ldr	r2, [pc, #4]	; (c9f8 <mpsl_fem_pa_configuration_set+0x8>)
    c9f2:	6812      	ldr	r2, [r2, #0]
    c9f4:	6892      	ldr	r2, [r2, #8]
    c9f6:	4710      	bx	r2
    c9f8:	20000350 	.word	0x20000350

0000c9fc <mpsl_fem_pa_gain_set>:
    c9fc:	4901      	ldr	r1, [pc, #4]	; (ca04 <mpsl_fem_pa_gain_set+0x8>)
    c9fe:	6809      	ldr	r1, [r1, #0]
    ca00:	6a49      	ldr	r1, [r1, #36]	; 0x24
    ca02:	4708      	bx	r1
    ca04:	20000350 	.word	0x20000350

0000ca08 <mpsl_fem_pa_is_configured>:
    ca08:	4901      	ldr	r1, [pc, #4]	; (ca10 <mpsl_fem_pa_is_configured+0x8>)
    ca0a:	6809      	ldr	r1, [r1, #0]
    ca0c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    ca0e:	4708      	bx	r1
    ca10:	20000350 	.word	0x20000350

0000ca14 <mpsl_fem_tx_power_split>:
    ca14:	b430      	push	{r4, r5}
    ca16:	4c03      	ldr	r4, [pc, #12]	; (ca24 <mpsl_fem_tx_power_split+0x10>)
    ca18:	6824      	ldr	r4, [r4, #0]
    ca1a:	6864      	ldr	r4, [r4, #4]
    ca1c:	46a4      	mov	ip, r4
    ca1e:	bc30      	pop	{r4, r5}
    ca20:	4760      	bx	ip
    ca22:	0000      	.short	0x0000
    ca24:	20000350 	.word	0x20000350

0000ca28 <mpsl_fem_device_config_254_apply_get>:
    ca28:	4801      	ldr	r0, [pc, #4]	; (ca30 <mpsl_fem_device_config_254_apply_get+0x8>)
    ca2a:	7800      	ldrb	r0, [r0, #0]
    ca2c:	4770      	bx	lr
    ca2e:	0000      	.short	0x0000
    ca30:	20000387 	.word	0x20000387

0000ca34 <__udivmoddi4>:
    ca34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ca38:	4686      	mov	lr, r0
    ca3a:	468c      	mov	ip, r1
    ca3c:	4608      	mov	r0, r1
    ca3e:	9e08      	ldr	r6, [sp, #32]
    ca40:	4615      	mov	r5, r2
    ca42:	4674      	mov	r4, lr
    ca44:	4619      	mov	r1, r3
    ca46:	2b00      	cmp	r3, #0
    ca48:	f040 80c2 	bne.w	cbd0 <__udivmoddi4+0x19c>
    ca4c:	4285      	cmp	r5, r0
    ca4e:	fab2 f282 	clz	r2, r2
    ca52:	d945      	bls.n	cae0 <__udivmoddi4+0xac>
    ca54:	b14a      	cbz	r2, ca6a <__udivmoddi4+0x36>
    ca56:	f1c2 0320 	rsb	r3, r2, #32
    ca5a:	fa00 fc02 	lsl.w	ip, r0, r2
    ca5e:	fa2e f303 	lsr.w	r3, lr, r3
    ca62:	4095      	lsls	r5, r2
    ca64:	ea43 0c0c 	orr.w	ip, r3, ip
    ca68:	4094      	lsls	r4, r2
    ca6a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    ca6e:	b2a8      	uxth	r0, r5
    ca70:	fbbc f8fe 	udiv	r8, ip, lr
    ca74:	0c23      	lsrs	r3, r4, #16
    ca76:	fb0e cc18 	mls	ip, lr, r8, ip
    ca7a:	fb08 f900 	mul.w	r9, r8, r0
    ca7e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    ca82:	4599      	cmp	r9, r3
    ca84:	d928      	bls.n	cad8 <__udivmoddi4+0xa4>
    ca86:	18eb      	adds	r3, r5, r3
    ca88:	f108 37ff 	add.w	r7, r8, #4294967295
    ca8c:	d204      	bcs.n	ca98 <__udivmoddi4+0x64>
    ca8e:	4599      	cmp	r9, r3
    ca90:	d902      	bls.n	ca98 <__udivmoddi4+0x64>
    ca92:	f1a8 0702 	sub.w	r7, r8, #2
    ca96:	442b      	add	r3, r5
    ca98:	eba3 0309 	sub.w	r3, r3, r9
    ca9c:	b2a4      	uxth	r4, r4
    ca9e:	fbb3 fcfe 	udiv	ip, r3, lr
    caa2:	fb0e 331c 	mls	r3, lr, ip, r3
    caa6:	fb0c f000 	mul.w	r0, ip, r0
    caaa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    caae:	42a0      	cmp	r0, r4
    cab0:	d914      	bls.n	cadc <__udivmoddi4+0xa8>
    cab2:	192c      	adds	r4, r5, r4
    cab4:	f10c 33ff 	add.w	r3, ip, #4294967295
    cab8:	d204      	bcs.n	cac4 <__udivmoddi4+0x90>
    caba:	42a0      	cmp	r0, r4
    cabc:	d902      	bls.n	cac4 <__udivmoddi4+0x90>
    cabe:	f1ac 0302 	sub.w	r3, ip, #2
    cac2:	442c      	add	r4, r5
    cac4:	1a24      	subs	r4, r4, r0
    cac6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    caca:	b11e      	cbz	r6, cad4 <__udivmoddi4+0xa0>
    cacc:	40d4      	lsrs	r4, r2
    cace:	2300      	movs	r3, #0
    cad0:	6034      	str	r4, [r6, #0]
    cad2:	6073      	str	r3, [r6, #4]
    cad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    cad8:	4647      	mov	r7, r8
    cada:	e7dd      	b.n	ca98 <__udivmoddi4+0x64>
    cadc:	4663      	mov	r3, ip
    cade:	e7f1      	b.n	cac4 <__udivmoddi4+0x90>
    cae0:	bb92      	cbnz	r2, cb48 <__udivmoddi4+0x114>
    cae2:	1b43      	subs	r3, r0, r5
    cae4:	2101      	movs	r1, #1
    cae6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    caea:	b2af      	uxth	r7, r5
    caec:	fbb3 fcfe 	udiv	ip, r3, lr
    caf0:	0c20      	lsrs	r0, r4, #16
    caf2:	fb0e 331c 	mls	r3, lr, ip, r3
    caf6:	fb0c f807 	mul.w	r8, ip, r7
    cafa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    cafe:	4598      	cmp	r8, r3
    cb00:	d962      	bls.n	cbc8 <__udivmoddi4+0x194>
    cb02:	18eb      	adds	r3, r5, r3
    cb04:	f10c 30ff 	add.w	r0, ip, #4294967295
    cb08:	d204      	bcs.n	cb14 <__udivmoddi4+0xe0>
    cb0a:	4598      	cmp	r8, r3
    cb0c:	d902      	bls.n	cb14 <__udivmoddi4+0xe0>
    cb0e:	f1ac 0002 	sub.w	r0, ip, #2
    cb12:	442b      	add	r3, r5
    cb14:	eba3 0308 	sub.w	r3, r3, r8
    cb18:	b2a4      	uxth	r4, r4
    cb1a:	fbb3 fcfe 	udiv	ip, r3, lr
    cb1e:	fb0e 331c 	mls	r3, lr, ip, r3
    cb22:	fb0c f707 	mul.w	r7, ip, r7
    cb26:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    cb2a:	42a7      	cmp	r7, r4
    cb2c:	d94e      	bls.n	cbcc <__udivmoddi4+0x198>
    cb2e:	192c      	adds	r4, r5, r4
    cb30:	f10c 33ff 	add.w	r3, ip, #4294967295
    cb34:	d204      	bcs.n	cb40 <__udivmoddi4+0x10c>
    cb36:	42a7      	cmp	r7, r4
    cb38:	d902      	bls.n	cb40 <__udivmoddi4+0x10c>
    cb3a:	f1ac 0302 	sub.w	r3, ip, #2
    cb3e:	442c      	add	r4, r5
    cb40:	1be4      	subs	r4, r4, r7
    cb42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    cb46:	e7c0      	b.n	caca <__udivmoddi4+0x96>
    cb48:	f1c2 0320 	rsb	r3, r2, #32
    cb4c:	fa20 f103 	lsr.w	r1, r0, r3
    cb50:	4095      	lsls	r5, r2
    cb52:	4090      	lsls	r0, r2
    cb54:	fa2e f303 	lsr.w	r3, lr, r3
    cb58:	4303      	orrs	r3, r0
    cb5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    cb5e:	b2af      	uxth	r7, r5
    cb60:	fbb1 fcfe 	udiv	ip, r1, lr
    cb64:	fb0e 101c 	mls	r0, lr, ip, r1
    cb68:	0c19      	lsrs	r1, r3, #16
    cb6a:	fb0c f807 	mul.w	r8, ip, r7
    cb6e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    cb72:	4588      	cmp	r8, r1
    cb74:	fa04 f402 	lsl.w	r4, r4, r2
    cb78:	d922      	bls.n	cbc0 <__udivmoddi4+0x18c>
    cb7a:	1869      	adds	r1, r5, r1
    cb7c:	f10c 30ff 	add.w	r0, ip, #4294967295
    cb80:	d204      	bcs.n	cb8c <__udivmoddi4+0x158>
    cb82:	4588      	cmp	r8, r1
    cb84:	d902      	bls.n	cb8c <__udivmoddi4+0x158>
    cb86:	f1ac 0002 	sub.w	r0, ip, #2
    cb8a:	4429      	add	r1, r5
    cb8c:	eba1 0108 	sub.w	r1, r1, r8
    cb90:	b29b      	uxth	r3, r3
    cb92:	fbb1 fcfe 	udiv	ip, r1, lr
    cb96:	fb0e 111c 	mls	r1, lr, ip, r1
    cb9a:	fb0c f707 	mul.w	r7, ip, r7
    cb9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    cba2:	429f      	cmp	r7, r3
    cba4:	d90e      	bls.n	cbc4 <__udivmoddi4+0x190>
    cba6:	18eb      	adds	r3, r5, r3
    cba8:	f10c 31ff 	add.w	r1, ip, #4294967295
    cbac:	d204      	bcs.n	cbb8 <__udivmoddi4+0x184>
    cbae:	429f      	cmp	r7, r3
    cbb0:	d902      	bls.n	cbb8 <__udivmoddi4+0x184>
    cbb2:	f1ac 0102 	sub.w	r1, ip, #2
    cbb6:	442b      	add	r3, r5
    cbb8:	1bdb      	subs	r3, r3, r7
    cbba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    cbbe:	e792      	b.n	cae6 <__udivmoddi4+0xb2>
    cbc0:	4660      	mov	r0, ip
    cbc2:	e7e3      	b.n	cb8c <__udivmoddi4+0x158>
    cbc4:	4661      	mov	r1, ip
    cbc6:	e7f7      	b.n	cbb8 <__udivmoddi4+0x184>
    cbc8:	4660      	mov	r0, ip
    cbca:	e7a3      	b.n	cb14 <__udivmoddi4+0xe0>
    cbcc:	4663      	mov	r3, ip
    cbce:	e7b7      	b.n	cb40 <__udivmoddi4+0x10c>
    cbd0:	4283      	cmp	r3, r0
    cbd2:	d906      	bls.n	cbe2 <__udivmoddi4+0x1ae>
    cbd4:	b916      	cbnz	r6, cbdc <__udivmoddi4+0x1a8>
    cbd6:	2100      	movs	r1, #0
    cbd8:	4608      	mov	r0, r1
    cbda:	e77b      	b.n	cad4 <__udivmoddi4+0xa0>
    cbdc:	e9c6 e000 	strd	lr, r0, [r6]
    cbe0:	e7f9      	b.n	cbd6 <__udivmoddi4+0x1a2>
    cbe2:	fab3 f783 	clz	r7, r3
    cbe6:	b98f      	cbnz	r7, cc0c <__udivmoddi4+0x1d8>
    cbe8:	4283      	cmp	r3, r0
    cbea:	d301      	bcc.n	cbf0 <__udivmoddi4+0x1bc>
    cbec:	4572      	cmp	r2, lr
    cbee:	d808      	bhi.n	cc02 <__udivmoddi4+0x1ce>
    cbf0:	ebbe 0402 	subs.w	r4, lr, r2
    cbf4:	eb60 0303 	sbc.w	r3, r0, r3
    cbf8:	2001      	movs	r0, #1
    cbfa:	469c      	mov	ip, r3
    cbfc:	b91e      	cbnz	r6, cc06 <__udivmoddi4+0x1d2>
    cbfe:	2100      	movs	r1, #0
    cc00:	e768      	b.n	cad4 <__udivmoddi4+0xa0>
    cc02:	4638      	mov	r0, r7
    cc04:	e7fa      	b.n	cbfc <__udivmoddi4+0x1c8>
    cc06:	e9c6 4c00 	strd	r4, ip, [r6]
    cc0a:	e7f8      	b.n	cbfe <__udivmoddi4+0x1ca>
    cc0c:	f1c7 0c20 	rsb	ip, r7, #32
    cc10:	40bb      	lsls	r3, r7
    cc12:	fa22 f40c 	lsr.w	r4, r2, ip
    cc16:	431c      	orrs	r4, r3
    cc18:	fa2e f10c 	lsr.w	r1, lr, ip
    cc1c:	fa20 f30c 	lsr.w	r3, r0, ip
    cc20:	40b8      	lsls	r0, r7
    cc22:	4301      	orrs	r1, r0
    cc24:	ea4f 4914 	mov.w	r9, r4, lsr #16
    cc28:	fa0e f507 	lsl.w	r5, lr, r7
    cc2c:	fbb3 f8f9 	udiv	r8, r3, r9
    cc30:	fa1f fe84 	uxth.w	lr, r4
    cc34:	fb09 3018 	mls	r0, r9, r8, r3
    cc38:	0c0b      	lsrs	r3, r1, #16
    cc3a:	fb08 fa0e 	mul.w	sl, r8, lr
    cc3e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    cc42:	459a      	cmp	sl, r3
    cc44:	fa02 f207 	lsl.w	r2, r2, r7
    cc48:	d940      	bls.n	cccc <__udivmoddi4+0x298>
    cc4a:	18e3      	adds	r3, r4, r3
    cc4c:	f108 30ff 	add.w	r0, r8, #4294967295
    cc50:	d204      	bcs.n	cc5c <__udivmoddi4+0x228>
    cc52:	459a      	cmp	sl, r3
    cc54:	d902      	bls.n	cc5c <__udivmoddi4+0x228>
    cc56:	f1a8 0002 	sub.w	r0, r8, #2
    cc5a:	4423      	add	r3, r4
    cc5c:	eba3 030a 	sub.w	r3, r3, sl
    cc60:	b289      	uxth	r1, r1
    cc62:	fbb3 f8f9 	udiv	r8, r3, r9
    cc66:	fb09 3318 	mls	r3, r9, r8, r3
    cc6a:	fb08 fe0e 	mul.w	lr, r8, lr
    cc6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    cc72:	458e      	cmp	lr, r1
    cc74:	d92c      	bls.n	ccd0 <__udivmoddi4+0x29c>
    cc76:	1861      	adds	r1, r4, r1
    cc78:	f108 33ff 	add.w	r3, r8, #4294967295
    cc7c:	d204      	bcs.n	cc88 <__udivmoddi4+0x254>
    cc7e:	458e      	cmp	lr, r1
    cc80:	d902      	bls.n	cc88 <__udivmoddi4+0x254>
    cc82:	f1a8 0302 	sub.w	r3, r8, #2
    cc86:	4421      	add	r1, r4
    cc88:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    cc8c:	fba0 9802 	umull	r9, r8, r0, r2
    cc90:	eba1 010e 	sub.w	r1, r1, lr
    cc94:	4541      	cmp	r1, r8
    cc96:	46ce      	mov	lr, r9
    cc98:	4643      	mov	r3, r8
    cc9a:	d302      	bcc.n	cca2 <__udivmoddi4+0x26e>
    cc9c:	d106      	bne.n	ccac <__udivmoddi4+0x278>
    cc9e:	454d      	cmp	r5, r9
    cca0:	d204      	bcs.n	ccac <__udivmoddi4+0x278>
    cca2:	ebb9 0e02 	subs.w	lr, r9, r2
    cca6:	eb68 0304 	sbc.w	r3, r8, r4
    ccaa:	3801      	subs	r0, #1
    ccac:	2e00      	cmp	r6, #0
    ccae:	d0a6      	beq.n	cbfe <__udivmoddi4+0x1ca>
    ccb0:	ebb5 020e 	subs.w	r2, r5, lr
    ccb4:	eb61 0103 	sbc.w	r1, r1, r3
    ccb8:	fa01 fc0c 	lsl.w	ip, r1, ip
    ccbc:	fa22 f307 	lsr.w	r3, r2, r7
    ccc0:	ea4c 0303 	orr.w	r3, ip, r3
    ccc4:	40f9      	lsrs	r1, r7
    ccc6:	e9c6 3100 	strd	r3, r1, [r6]
    ccca:	e798      	b.n	cbfe <__udivmoddi4+0x1ca>
    cccc:	4640      	mov	r0, r8
    ccce:	e7c5      	b.n	cc5c <__udivmoddi4+0x228>
    ccd0:	4643      	mov	r3, r8
    ccd2:	e7d9      	b.n	cc88 <__udivmoddi4+0x254>
    ccd4:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    ccd8:	4681      	mov	r9, r0
    ccda:	f100 0007 	add.w	r0, r0, #7
    ccde:	f020 0007 	bic.w	r0, r0, #7
    cce2:	ea5f 0802 	movs.w	r8, r2
    cce6:	9000      	str	r0, [sp, #0]
    cce8:	784a      	ldrb	r2, [r1, #1]
    ccea:	f88d 2004 	strb.w	r2, [sp, #4]
    ccee:	788a      	ldrb	r2, [r1, #2]
    ccf0:	460c      	mov	r4, r1
    ccf2:	f88d 2005 	strb.w	r2, [sp, #5]
    ccf6:	d000      	beq.n	ccfa <__udivmoddi4+0x2c6>
    ccf8:	2000      	movs	r0, #0
    ccfa:	a901      	add	r1, sp, #4
    ccfc:	f7f4 fd74 	bl	17e8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    cd00:	9900      	ldr	r1, [sp, #0]
    cd02:	2600      	movs	r6, #0
    cd04:	4408      	add	r0, r1
    cd06:	9000      	str	r0, [sp, #0]
    cd08:	7820      	ldrb	r0, [r4, #0]
    cd0a:	7861      	ldrb	r1, [r4, #1]
    cd0c:	4635      	mov	r5, r6
    cd0e:	4408      	add	r0, r1
    cd10:	b2c7      	uxtb	r7, r0
    cd12:	e008      	b.n	cd26 <__udivmoddi4+0x2f2>
    cd14:	7a23      	ldrb	r3, [r4, #8]
    cd16:	79e2      	ldrb	r2, [r4, #7]
    cd18:	79a1      	ldrb	r1, [r4, #6]
    cd1a:	7960      	ldrb	r0, [r4, #5]
    cd1c:	f000 fe2a 	bl	d974 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    cd20:	1c6d      	adds	r5, r5, #1
    cd22:	4406      	add	r6, r0
    cd24:	b2ed      	uxtb	r5, r5
    cd26:	42bd      	cmp	r5, r7
    cd28:	d3f4      	bcc.n	cd14 <__udivmoddi4+0x2e0>
    cd2a:	9800      	ldr	r0, [sp, #0]
    cd2c:	1cc0      	adds	r0, r0, #3
    cd2e:	f020 0003 	bic.w	r0, r0, #3
    cd32:	9000      	str	r0, [sp, #0]
    cd34:	f1b8 0f00 	cmp.w	r8, #0
    cd38:	d000      	beq.n	cd3c <__udivmoddi4+0x308>
    cd3a:	2000      	movs	r0, #0
    cd3c:	4632      	mov	r2, r6
    cd3e:	4639      	mov	r1, r7
    cd40:	f7f4 fe8c 	bl	1a5c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    cd44:	9900      	ldr	r1, [sp, #0]
    cd46:	4642      	mov	r2, r8
    cd48:	4408      	add	r0, r1
    cd4a:	9000      	str	r0, [sp, #0]
    cd4c:	4621      	mov	r1, r4
    cd4e:	4668      	mov	r0, sp
    cd50:	f000 f805 	bl	cd5e <__udivmoddi4+0x32a>
    cd54:	9900      	ldr	r1, [sp, #0]
    cd56:	eba1 0009 	sub.w	r0, r1, r9
    cd5a:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    cd5e:	b570      	push	{r4, r5, r6, lr}
    cd60:	4605      	mov	r5, r0
    cd62:	7888      	ldrb	r0, [r1, #2]
    cd64:	4616      	mov	r6, r2
    cd66:	460c      	mov	r4, r1
    cd68:	b188      	cbz	r0, cd8e <__udivmoddi4+0x35a>
    cd6a:	6828      	ldr	r0, [r5, #0]
    cd6c:	1cc0      	adds	r0, r0, #3
    cd6e:	f020 0003 	bic.w	r0, r0, #3
    cd72:	6028      	str	r0, [r5, #0]
    cd74:	7de1      	ldrb	r1, [r4, #23]
    cd76:	78e2      	ldrb	r2, [r4, #3]
    cd78:	8a63      	ldrh	r3, [r4, #18]
    cd7a:	4411      	add	r1, r2
    cd7c:	b2ca      	uxtb	r2, r1
    cd7e:	78a1      	ldrb	r1, [r4, #2]
    cd80:	b106      	cbz	r6, cd84 <__udivmoddi4+0x350>
    cd82:	2000      	movs	r0, #0
    cd84:	f7f4 ff1e 	bl	1bc4 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    cd88:	6829      	ldr	r1, [r5, #0]
    cd8a:	4408      	add	r0, r1
    cd8c:	6028      	str	r0, [r5, #0]
    cd8e:	7d20      	ldrb	r0, [r4, #20]
    cd90:	2800      	cmp	r0, #0
    cd92:	d00f      	beq.n	cdb4 <__udivmoddi4+0x380>
    cd94:	78a0      	ldrb	r0, [r4, #2]
    cd96:	2800      	cmp	r0, #0
    cd98:	d00c      	beq.n	cdb4 <__udivmoddi4+0x380>
    cd9a:	6828      	ldr	r0, [r5, #0]
    cd9c:	1dc0      	adds	r0, r0, #7
    cd9e:	f020 0007 	bic.w	r0, r0, #7
    cda2:	6028      	str	r0, [r5, #0]
    cda4:	7d21      	ldrb	r1, [r4, #20]
    cda6:	b106      	cbz	r6, cdaa <__udivmoddi4+0x376>
    cda8:	2000      	movs	r0, #0
    cdaa:	f7f6 fe05 	bl	39b8 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>
    cdae:	6829      	ldr	r1, [r5, #0]
    cdb0:	4408      	add	r0, r1
    cdb2:	6028      	str	r0, [r5, #0]
    cdb4:	bd70      	pop	{r4, r5, r6, pc}

0000cdb6 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    cdb6:	b50e      	push	{r1, r2, r3, lr}
    cdb8:	4601      	mov	r1, r0
    cdba:	4668      	mov	r0, sp
    cdbc:	f000 f818 	bl	cdf0 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    cdc0:	4668      	mov	r0, sp
    cdc2:	f001 fbd1 	bl	e568 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    cdc6:	bd0e      	pop	{r1, r2, r3, pc}
    cdc8:	b570      	push	{r4, r5, r6, lr}
    cdca:	460c      	mov	r4, r1
    cdcc:	4605      	mov	r5, r0
    cdce:	f7f4 fb49 	bl	1464 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    cdd2:	2800      	cmp	r0, #0
    cdd4:	d002      	beq.n	cddc <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x26>
    cdd6:	2d3e      	cmp	r5, #62	; 0x3e
    cdd8:	d001      	beq.n	cdde <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x28>
    cdda:	2001      	movs	r0, #1
    cddc:	bd70      	pop	{r4, r5, r6, pc}
    cdde:	2c12      	cmp	r4, #18
    cde0:	d004      	beq.n	cdec <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x36>
    cde2:	4620      	mov	r0, r4
    cde4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cde8:	f7f4 bb4e 	b.w	1488 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cdec:	2000      	movs	r0, #0
    cdee:	bd70      	pop	{r4, r5, r6, pc}

0000cdf0 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    cdf0:	880a      	ldrh	r2, [r1, #0]
    cdf2:	f3c2 020b 	ubfx	r2, r2, #0, #12
    cdf6:	8082      	strh	r2, [r0, #4]
    cdf8:	884a      	ldrh	r2, [r1, #2]
    cdfa:	80c2      	strh	r2, [r0, #6]
    cdfc:	784a      	ldrb	r2, [r1, #1]
    cdfe:	0993      	lsrs	r3, r2, #6
    ce00:	2200      	movs	r2, #0
    ce02:	7242      	strb	r2, [r0, #9]
    ce04:	784b      	ldrb	r3, [r1, #1]
    ce06:	f3c3 1301 	ubfx	r3, r3, #4, #2
    ce0a:	b11b      	cbz	r3, ce14 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    ce0c:	2b01      	cmp	r3, #1
    ce0e:	d005      	beq.n	ce1c <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    ce10:	2b02      	cmp	r3, #2
    ce12:	d005      	beq.n	ce20 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    ce14:	7202      	strb	r2, [r0, #8]
    ce16:	1d09      	adds	r1, r1, #4
    ce18:	6001      	str	r1, [r0, #0]
    ce1a:	4770      	bx	lr
    ce1c:	2201      	movs	r2, #1
    ce1e:	e7f9      	b.n	ce14 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    ce20:	2202      	movs	r2, #2
    ce22:	e7f7      	b.n	ce14 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000ce24 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    ce24:	b510      	push	{r4, lr}
    ce26:	460c      	mov	r4, r1
    ce28:	7909      	ldrb	r1, [r1, #4]
    ce2a:	7001      	strb	r1, [r0, #0]
    ce2c:	7841      	ldrb	r1, [r0, #1]
    ce2e:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    ce32:	7041      	strb	r1, [r0, #1]
    ce34:	88a2      	ldrh	r2, [r4, #4]
    ce36:	f3c2 2203 	ubfx	r2, r2, #8, #4
    ce3a:	4311      	orrs	r1, r2
    ce3c:	7041      	strb	r1, [r0, #1]
    ce3e:	79a2      	ldrb	r2, [r4, #6]
    ce40:	7082      	strb	r2, [r0, #2]
    ce42:	88e2      	ldrh	r2, [r4, #6]
    ce44:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    ce48:	0a12      	lsrs	r2, r2, #8
    ce4a:	70c2      	strb	r2, [r0, #3]
    ce4c:	7041      	strb	r1, [r0, #1]
    ce4e:	7a22      	ldrb	r2, [r4, #8]
    ce50:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    ce54:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    ce58:	7041      	strb	r1, [r0, #1]
    ce5a:	7a62      	ldrb	r2, [r4, #9]
    ce5c:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    ce60:	7041      	strb	r1, [r0, #1]
    ce62:	6821      	ldr	r1, [r4, #0]
    ce64:	1d02      	adds	r2, r0, #4
    ce66:	4291      	cmp	r1, r2
    ce68:	d006      	beq.n	ce78 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    ce6a:	88e2      	ldrh	r2, [r4, #6]
    ce6c:	2afb      	cmp	r2, #251	; 0xfb
    ce6e:	d300      	bcc.n	ce72 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    ce70:	22fb      	movs	r2, #251	; 0xfb
    ce72:	1d00      	adds	r0, r0, #4
    ce74:	f003 ff23 	bl	10cbe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ce78:	79a0      	ldrb	r0, [r4, #6]
    ce7a:	1d00      	adds	r0, r0, #4
    ce7c:	b2c0      	uxtb	r0, r0
    ce7e:	bd10      	pop	{r4, pc}

0000ce80 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>:
    ce80:	b430      	push	{r4, r5}
    ce82:	790a      	ldrb	r2, [r1, #4]
    ce84:	7002      	strb	r2, [r0, #0]
    ce86:	7842      	ldrb	r2, [r0, #1]
    ce88:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    ce8c:	7042      	strb	r2, [r0, #1]
    ce8e:	888b      	ldrh	r3, [r1, #4]
    ce90:	f3c3 2303 	ubfx	r3, r3, #8, #4
    ce94:	431a      	orrs	r2, r3
    ce96:	7042      	strb	r2, [r0, #1]
    ce98:	798b      	ldrb	r3, [r1, #6]
    ce9a:	7083      	strb	r3, [r0, #2]
    ce9c:	78c3      	ldrb	r3, [r0, #3]
    ce9e:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
    cea2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    cea6:	70c3      	strb	r3, [r0, #3]
    cea8:	88cc      	ldrh	r4, [r1, #6]
    ceaa:	f3c4 2405 	ubfx	r4, r4, #8, #6
    ceae:	4323      	orrs	r3, r4
    ceb0:	70c3      	strb	r3, [r0, #3]
    ceb2:	7042      	strb	r2, [r0, #1]
    ceb4:	7a0c      	ldrb	r4, [r1, #8]
    ceb6:	f004 0403 	and.w	r4, r4, #3
    ceba:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    cebe:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    cec2:	7042      	strb	r2, [r0, #1]
    cec4:	7a4c      	ldrb	r4, [r1, #9]
    cec6:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
    ceca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    cece:	7042      	strb	r2, [r0, #1]
    ced0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    ced4:	70c2      	strb	r2, [r0, #3]
    ced6:	680b      	ldr	r3, [r1, #0]
    ced8:	1d02      	adds	r2, r0, #4
    ceda:	4293      	cmp	r3, r2
    cedc:	d005      	beq.n	ceea <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY+0x6a>
    cede:	88ca      	ldrh	r2, [r1, #6]
    cee0:	bc30      	pop	{r4, r5}
    cee2:	4619      	mov	r1, r3
    cee4:	1d00      	adds	r0, r0, #4
    cee6:	f003 beea 	b.w	10cbe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ceea:	bc30      	pop	{r4, r5}
    ceec:	4770      	bx	lr

0000ceee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    ceee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cef2:	460d      	mov	r5, r1
    cef4:	4604      	mov	r4, r0
    cef6:	f891 c000 	ldrb.w	ip, [r1]
    cefa:	2000      	movs	r0, #0
    cefc:	230c      	movs	r3, #12
    cefe:	2705      	movs	r7, #5
    cf00:	2203      	movs	r2, #3
    cf02:	263e      	movs	r6, #62	; 0x3e
    cf04:	21ff      	movs	r1, #255	; 0xff
    cf06:	f1bc 0f1e 	cmp.w	ip, #30
    cf0a:	d27e      	bcs.n	d00a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11c>
    cf0c:	e8df f00c 	tbb	[pc, ip]
    cf10:	424029e7 	.word	0x424029e7
    cf14:	806d63e7 	.word	0x806d63e7
    cf18:	b9aeac99 	.word	0xb9aeac99
    cf1c:	0ff3dfc4 	.word	0x0ff3dfc4
    cf20:	cf48e7e7 	.word	0xcf48e7e7
    cf24:	eff0fcd2 	.word	0xeff0fcd2
    cf28:	ebecedee 	.word	0xebecedee
    cf2c:	e9ea      	.short	0xe9ea
    cf2e:	200e      	movs	r0, #14
    cf30:	7020      	strb	r0, [r4, #0]
    cf32:	7968      	ldrb	r0, [r5, #5]
    cf34:	70e0      	strb	r0, [r4, #3]
    cf36:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cf3a:	0a00      	lsrs	r0, r0, #8
    cf3c:	7120      	strb	r0, [r4, #4]
    cf3e:	7928      	ldrb	r0, [r5, #4]
    cf40:	70a0      	strb	r0, [r4, #2]
    cf42:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cf46:	3883      	subs	r0, #131	; 0x83
    cf48:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    cf4c:	d003      	beq.n	cf56 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x68>
    cf4e:	2136      	movs	r1, #54	; 0x36
    cf50:	20c7      	movs	r0, #199	; 0xc7
    cf52:	f7f4 f907 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cf56:	1de9      	adds	r1, r5, #7
    cf58:	1d60      	adds	r0, r4, #5
    cf5a:	f003 feb0 	bl	10cbe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cf5e:	2007      	movs	r0, #7
    cf60:	e0bb      	b.n	d0da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cf62:	7023      	strb	r3, [r4, #0]
    cf64:	7928      	ldrb	r0, [r5, #4]
    cf66:	70a0      	strb	r0, [r4, #2]
    cf68:	7968      	ldrb	r0, [r5, #5]
    cf6a:	70e0      	strb	r0, [r4, #3]
    cf6c:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cf70:	0a00      	lsrs	r0, r0, #8
    cf72:	7120      	strb	r0, [r4, #4]
    cf74:	79e8      	ldrb	r0, [r5, #7]
    cf76:	7160      	strb	r0, [r4, #5]
    cf78:	7a28      	ldrb	r0, [r5, #8]
    cf7a:	71a0      	strb	r0, [r4, #6]
    cf7c:	8928      	ldrh	r0, [r5, #8]
    cf7e:	0a00      	lsrs	r0, r0, #8
    cf80:	71e0      	strb	r0, [r4, #7]
    cf82:	7aa8      	ldrb	r0, [r5, #10]
    cf84:	7220      	strb	r0, [r4, #8]
    cf86:	8968      	ldrh	r0, [r5, #10]
    cf88:	0a00      	lsrs	r0, r0, #8
    cf8a:	7260      	strb	r0, [r4, #9]
    cf8c:	2008      	movs	r0, #8
    cf8e:	e0a4      	b.n	d0da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cf90:	2010      	movs	r0, #16
    cf92:	e000      	b.n	cf96 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xa8>
    cf94:	201a      	movs	r0, #26
    cf96:	7020      	strb	r0, [r4, #0]
    cf98:	7928      	ldrb	r0, [r5, #4]
    cf9a:	70a0      	strb	r0, [r4, #2]
    cf9c:	2001      	movs	r0, #1
    cf9e:	e09c      	b.n	d0da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cfa0:	2029      	movs	r0, #41	; 0x29
    cfa2:	f7f4 fa71 	bl	1488 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cfa6:	b148      	cbz	r0, cfbc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xce>
    cfa8:	7026      	strb	r6, [r4, #0]
    cfaa:	2029      	movs	r0, #41	; 0x29
    cfac:	70a0      	strb	r0, [r4, #2]
    cfae:	2221      	movs	r2, #33	; 0x21
    cfb0:	1d29      	adds	r1, r5, #4
    cfb2:	1ce0      	adds	r0, r4, #3
    cfb4:	f003 fe83 	bl	10cbe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cfb8:	2022      	movs	r0, #34	; 0x22
    cfba:	e08e      	b.n	d0da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    cfbc:	200a      	movs	r0, #10
    cfbe:	f7f4 fa63 	bl	1488 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cfc2:	2800      	cmp	r0, #0
    cfc4:	4629      	mov	r1, r5
    cfc6:	4620      	mov	r0, r4
    cfc8:	d002      	beq.n	cfd0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xe2>
    cfca:	f000 f95b 	bl	d284 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0x52>
    cfce:	e082      	b.n	d0d6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    cfd0:	f000 f92f 	bl	d232 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>
    cfd4:	e07f      	b.n	d0d6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1e8>
    cfd6:	7026      	strb	r6, [r4, #0]
    cfd8:	2014      	movs	r0, #20
    cfda:	70a0      	strb	r0, [r4, #2]
    cfdc:	7928      	ldrb	r0, [r5, #4]
    cfde:	70e0      	strb	r0, [r4, #3]
    cfe0:	88a8      	ldrh	r0, [r5, #4]
    cfe2:	0a00      	lsrs	r0, r0, #8
    cfe4:	7120      	strb	r0, [r4, #4]
    cfe6:	79a8      	ldrb	r0, [r5, #6]
    cfe8:	e0c0      	b.n	d16c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    cfea:	223e      	movs	r2, #62	; 0x3e
    cfec:	7022      	strb	r2, [r4, #0]
    cfee:	2204      	movs	r2, #4
    cff0:	70a2      	strb	r2, [r4, #2]
    cff2:	6868      	ldr	r0, [r5, #4]
    cff4:	f8c4 0003 	str.w	r0, [r4, #3]
    cff8:	68a8      	ldr	r0, [r5, #8]
    cffa:	f8c4 0007 	str.w	r0, [r4, #7]
    cffe:	89a8      	ldrh	r0, [r5, #12]
    d000:	f8a4 000b 	strh.w	r0, [r4, #11]
    d004:	7ba8      	ldrb	r0, [r5, #14]
    d006:	7360      	strb	r0, [r4, #13]
    d008:	e000      	b.n	d00c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11e>
    d00a:	e068      	b.n	d0de <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    d00c:	200c      	movs	r0, #12
    d00e:	e064      	b.n	d0da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    d010:	7026      	strb	r6, [r4, #0]
    d012:	70a2      	strb	r2, [r4, #2]
    d014:	7928      	ldrb	r0, [r5, #4]
    d016:	70e0      	strb	r0, [r4, #3]
    d018:	79a8      	ldrb	r0, [r5, #6]
    d01a:	7120      	strb	r0, [r4, #4]
    d01c:	88e8      	ldrh	r0, [r5, #6]
    d01e:	0a00      	lsrs	r0, r0, #8
    d020:	7160      	strb	r0, [r4, #5]
    d022:	7a28      	ldrb	r0, [r5, #8]
    d024:	71a0      	strb	r0, [r4, #6]
    d026:	8928      	ldrh	r0, [r5, #8]
    d028:	0a00      	lsrs	r0, r0, #8
    d02a:	71e0      	strb	r0, [r4, #7]
    d02c:	7aa8      	ldrb	r0, [r5, #10]
    d02e:	7220      	strb	r0, [r4, #8]
    d030:	8968      	ldrh	r0, [r5, #10]
    d032:	0a00      	lsrs	r0, r0, #8
    d034:	7260      	strb	r0, [r4, #9]
    d036:	7b28      	ldrb	r0, [r5, #12]
    d038:	72a0      	strb	r0, [r4, #10]
    d03a:	89a8      	ldrh	r0, [r5, #12]
    d03c:	0a00      	lsrs	r0, r0, #8
    d03e:	72e0      	strb	r0, [r4, #11]
    d040:	e0d1      	b.n	d1e6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f8>
    d042:	7026      	strb	r6, [r4, #0]
    d044:	70a7      	strb	r7, [r4, #2]
    d046:	7928      	ldrb	r0, [r5, #4]
    d048:	70e0      	strb	r0, [r4, #3]
    d04a:	88a8      	ldrh	r0, [r5, #4]
    d04c:	0a00      	lsrs	r0, r0, #8
    d04e:	7120      	strb	r0, [r4, #4]
    d050:	f8d5 0006 	ldr.w	r0, [r5, #6]
    d054:	f8c4 0005 	str.w	r0, [r4, #5]
    d058:	f8d5 000a 	ldr.w	r0, [r5, #10]
    d05c:	f8c4 0009 	str.w	r0, [r4, #9]
    d060:	89e8      	ldrh	r0, [r5, #14]
    d062:	f8a4 000d 	strh.w	r0, [r4, #13]
    d066:	e0e2      	b.n	d22e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x340>
    d068:	2011      	movs	r0, #17
    d06a:	e045      	b.n	d0f8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x20a>
    d06c:	7027      	strb	r7, [r4, #0]
    d06e:	7928      	ldrb	r0, [r5, #4]
    d070:	70a0      	strb	r0, [r4, #2]
    d072:	7968      	ldrb	r0, [r5, #5]
    d074:	70e0      	strb	r0, [r4, #3]
    d076:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    d07a:	0a00      	lsrs	r0, r0, #8
    d07c:	7120      	strb	r0, [r4, #4]
    d07e:	79e8      	ldrb	r0, [r5, #7]
    d080:	e074      	b.n	d16c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    d082:	2008      	movs	r0, #8
    d084:	7020      	strb	r0, [r4, #0]
    d086:	7928      	ldrb	r0, [r5, #4]
    d088:	70a0      	strb	r0, [r4, #2]
    d08a:	79a8      	ldrb	r0, [r5, #6]
    d08c:	70e0      	strb	r0, [r4, #3]
    d08e:	88e8      	ldrh	r0, [r5, #6]
    d090:	0a00      	lsrs	r0, r0, #8
    d092:	7120      	strb	r0, [r4, #4]
    d094:	7a28      	ldrb	r0, [r5, #8]
    d096:	e069      	b.n	d16c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    d098:	2030      	movs	r0, #48	; 0x30
    d09a:	7020      	strb	r0, [r4, #0]
    d09c:	7928      	ldrb	r0, [r5, #4]
    d09e:	70a0      	strb	r0, [r4, #2]
    d0a0:	79a8      	ldrb	r0, [r5, #6]
    d0a2:	70e0      	strb	r0, [r4, #3]
    d0a4:	88e8      	ldrh	r0, [r5, #6]
    d0a6:	0a00      	lsrs	r0, r0, #8
    d0a8:	7120      	strb	r0, [r4, #4]
    d0aa:	2003      	movs	r0, #3
    d0ac:	e015      	b.n	d0da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    d0ae:	7026      	strb	r6, [r4, #0]
    d0b0:	2007      	movs	r0, #7
    d0b2:	e060      	b.n	d176 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x288>
    d0b4:	7026      	strb	r6, [r4, #0]
    d0b6:	70a3      	strb	r3, [r4, #2]
    d0b8:	7928      	ldrb	r0, [r5, #4]
    d0ba:	70e0      	strb	r0, [r4, #3]
    d0bc:	79a8      	ldrb	r0, [r5, #6]
    d0be:	7120      	strb	r0, [r4, #4]
    d0c0:	88e8      	ldrh	r0, [r5, #6]
    d0c2:	0a00      	lsrs	r0, r0, #8
    d0c4:	7160      	strb	r0, [r4, #5]
    d0c6:	7a28      	ldrb	r0, [r5, #8]
    d0c8:	71a0      	strb	r0, [r4, #6]
    d0ca:	7a68      	ldrb	r0, [r5, #9]
    d0cc:	e029      	b.n	d122 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    d0ce:	1d29      	adds	r1, r5, #4
    d0d0:	4620      	mov	r0, r4
    d0d2:	f7f4 f999 	bl	1408 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x80>
    d0d6:	2800      	cmp	r0, #0
    d0d8:	d001      	beq.n	d0de <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1f0>
    d0da:	7060      	strb	r0, [r4, #1]
    d0dc:	1c80      	adds	r0, r0, #2
    d0de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d0e2:	e08f      	b.n	d204 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x316>
    d0e4:	e063      	b.n	d1ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c0>
    d0e6:	e044      	b.n	d172 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    d0e8:	e06f      	b.n	d1ca <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2dc>
    d0ea:	e07e      	b.n	d1ea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fc>
    d0ec:	e036      	b.n	d15c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x26e>
    d0ee:	e01e      	b.n	d12e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x240>
    d0f0:	e01a      	b.n	d128 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
    d0f2:	e009      	b.n	d108 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x21a>
    d0f4:	e7ff      	b.n	d0f6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x208>
    d0f6:	2057      	movs	r0, #87	; 0x57
    d0f8:	7020      	strb	r0, [r4, #0]
    d0fa:	7928      	ldrb	r0, [r5, #4]
    d0fc:	70a0      	strb	r0, [r4, #2]
    d0fe:	88a8      	ldrh	r0, [r5, #4]
    d100:	0a00      	lsrs	r0, r0, #8
    d102:	70e0      	strb	r0, [r4, #3]
    d104:	2002      	movs	r0, #2
    d106:	e7e8      	b.n	d0da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    d108:	7026      	strb	r6, [r4, #0]
    d10a:	2012      	movs	r0, #18
    d10c:	70a0      	strb	r0, [r4, #2]
    d10e:	7928      	ldrb	r0, [r5, #4]
    d110:	70e0      	strb	r0, [r4, #3]
    d112:	7968      	ldrb	r0, [r5, #5]
    d114:	7120      	strb	r0, [r4, #4]
    d116:	79a8      	ldrb	r0, [r5, #6]
    d118:	7160      	strb	r0, [r4, #5]
    d11a:	88e8      	ldrh	r0, [r5, #6]
    d11c:	0a00      	lsrs	r0, r0, #8
    d11e:	71a0      	strb	r0, [r4, #6]
    d120:	7a28      	ldrb	r0, [r5, #8]
    d122:	71e0      	strb	r0, [r4, #7]
    d124:	2006      	movs	r0, #6
    d126:	e7d8      	b.n	d0da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    d128:	7026      	strb	r6, [r4, #0]
    d12a:	2020      	movs	r0, #32
    d12c:	e041      	b.n	d1b2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c4>
    d12e:	7026      	strb	r6, [r4, #0]
    d130:	2021      	movs	r0, #33	; 0x21
    d132:	70a0      	strb	r0, [r4, #2]
    d134:	7928      	ldrb	r0, [r5, #4]
    d136:	70e0      	strb	r0, [r4, #3]
    d138:	7968      	ldrb	r0, [r5, #5]
    d13a:	7120      	strb	r0, [r4, #4]
    d13c:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    d140:	0a00      	lsrs	r0, r0, #8
    d142:	7160      	strb	r0, [r4, #5]
    d144:	79e8      	ldrb	r0, [r5, #7]
    d146:	71a0      	strb	r0, [r4, #6]
    d148:	7a28      	ldrb	r0, [r5, #8]
    d14a:	71e0      	strb	r0, [r4, #7]
    d14c:	7a68      	ldrb	r0, [r5, #9]
    d14e:	7220      	strb	r0, [r4, #8]
    d150:	7aa8      	ldrb	r0, [r5, #10]
    d152:	7260      	strb	r0, [r4, #9]
    d154:	7ae8      	ldrb	r0, [r5, #11]
    d156:	72a0      	strb	r0, [r4, #10]
    d158:	2009      	movs	r0, #9
    d15a:	e7be      	b.n	d0da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    d15c:	7021      	strb	r1, [r4, #0]
    d15e:	20a1      	movs	r0, #161	; 0xa1
    d160:	70a0      	strb	r0, [r4, #2]
    d162:	7928      	ldrb	r0, [r5, #4]
    d164:	70e0      	strb	r0, [r4, #3]
    d166:	7968      	ldrb	r0, [r5, #5]
    d168:	7120      	strb	r0, [r4, #4]
    d16a:	2000      	movs	r0, #0
    d16c:	7160      	strb	r0, [r4, #5]
    d16e:	2004      	movs	r0, #4
    d170:	e7b3      	b.n	d0da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    d172:	7021      	strb	r1, [r4, #0]
    d174:	20a2      	movs	r0, #162	; 0xa2
    d176:	70a0      	strb	r0, [r4, #2]
    d178:	7928      	ldrb	r0, [r5, #4]
    d17a:	70e0      	strb	r0, [r4, #3]
    d17c:	88a8      	ldrh	r0, [r5, #4]
    d17e:	0a00      	lsrs	r0, r0, #8
    d180:	7120      	strb	r0, [r4, #4]
    d182:	79a8      	ldrb	r0, [r5, #6]
    d184:	7160      	strb	r0, [r4, #5]
    d186:	88e8      	ldrh	r0, [r5, #6]
    d188:	0a00      	lsrs	r0, r0, #8
    d18a:	71a0      	strb	r0, [r4, #6]
    d18c:	7a28      	ldrb	r0, [r5, #8]
    d18e:	71e0      	strb	r0, [r4, #7]
    d190:	8928      	ldrh	r0, [r5, #8]
    d192:	0a00      	lsrs	r0, r0, #8
    d194:	7220      	strb	r0, [r4, #8]
    d196:	7aa8      	ldrb	r0, [r5, #10]
    d198:	7260      	strb	r0, [r4, #9]
    d19a:	8968      	ldrh	r0, [r5, #10]
    d19c:	0a00      	lsrs	r0, r0, #8
    d19e:	72a0      	strb	r0, [r4, #10]
    d1a0:	7b28      	ldrb	r0, [r5, #12]
    d1a2:	72e0      	strb	r0, [r4, #11]
    d1a4:	89a8      	ldrh	r0, [r5, #12]
    d1a6:	0a00      	lsrs	r0, r0, #8
    d1a8:	7320      	strb	r0, [r4, #12]
    d1aa:	200b      	movs	r0, #11
    d1ac:	e795      	b.n	d0da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    d1ae:	7021      	strb	r1, [r4, #0]
    d1b0:	20a3      	movs	r0, #163	; 0xa3
    d1b2:	70a0      	strb	r0, [r4, #2]
    d1b4:	7928      	ldrb	r0, [r5, #4]
    d1b6:	70e0      	strb	r0, [r4, #3]
    d1b8:	88a8      	ldrh	r0, [r5, #4]
    d1ba:	0a00      	lsrs	r0, r0, #8
    d1bc:	7120      	strb	r0, [r4, #4]
    d1be:	79a8      	ldrb	r0, [r5, #6]
    d1c0:	7160      	strb	r0, [r4, #5]
    d1c2:	79e8      	ldrb	r0, [r5, #7]
    d1c4:	71a0      	strb	r0, [r4, #6]
    d1c6:	2005      	movs	r0, #5
    d1c8:	e787      	b.n	d0da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    d1ca:	7026      	strb	r6, [r4, #0]
    d1cc:	2013      	movs	r0, #19
    d1ce:	70a0      	strb	r0, [r4, #2]
    d1d0:	7928      	ldrb	r0, [r5, #4]
    d1d2:	70e0      	strb	r0, [r4, #3]
    d1d4:	7968      	ldrb	r0, [r5, #5]
    d1d6:	7120      	strb	r0, [r4, #4]
    d1d8:	f8d5 0006 	ldr.w	r0, [r5, #6]
    d1dc:	f8c4 0005 	str.w	r0, [r4, #5]
    d1e0:	8968      	ldrh	r0, [r5, #10]
    d1e2:	f8a4 0009 	strh.w	r0, [r4, #9]
    d1e6:	200a      	movs	r0, #10
    d1e8:	e777      	b.n	d0da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>
    d1ea:	7021      	strb	r1, [r4, #0]
    d1ec:	20a4      	movs	r0, #164	; 0xa4
    d1ee:	70a0      	strb	r0, [r4, #2]
    d1f0:	7928      	ldrb	r0, [r5, #4]
    d1f2:	70e0      	strb	r0, [r4, #3]
    d1f4:	88a8      	ldrh	r0, [r5, #4]
    d1f6:	0a00      	lsrs	r0, r0, #8
    d1f8:	7120      	strb	r0, [r4, #4]
    d1fa:	79a8      	ldrb	r0, [r5, #6]
    d1fc:	7160      	strb	r0, [r4, #5]
    d1fe:	79e8      	ldrb	r0, [r5, #7]
    d200:	71a0      	strb	r0, [r4, #6]
    d202:	e6ac      	b.n	cf5e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x70>
    d204:	7021      	strb	r1, [r4, #0]
    d206:	2080      	movs	r0, #128	; 0x80
    d208:	70a0      	strb	r0, [r4, #2]
    d20a:	88a9      	ldrh	r1, [r5, #4]
    d20c:	f8a4 1003 	strh.w	r1, [r4, #3]
    d210:	88e9      	ldrh	r1, [r5, #6]
    d212:	f8a4 1005 	strh.w	r1, [r4, #5]
    d216:	7a29      	ldrb	r1, [r5, #8]
    d218:	71e1      	strb	r1, [r4, #7]
    d21a:	8969      	ldrh	r1, [r5, #10]
    d21c:	8121      	strh	r1, [r4, #8]
    d21e:	89a9      	ldrh	r1, [r5, #12]
    d220:	8161      	strh	r1, [r4, #10]
    d222:	89e9      	ldrh	r1, [r5, #14]
    d224:	81a1      	strh	r1, [r4, #12]
    d226:	7c29      	ldrb	r1, [r5, #16]
    d228:	f001 0101 	and.w	r1, r1, #1
    d22c:	73a1      	strb	r1, [r4, #14]
    d22e:	200d      	movs	r0, #13
    d230:	e753      	b.n	d0da <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x1ec>

0000d232 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>:
    d232:	223e      	movs	r2, #62	; 0x3e
    d234:	7002      	strb	r2, [r0, #0]
    d236:	2201      	movs	r2, #1
    d238:	7082      	strb	r2, [r0, #2]
    d23a:	790a      	ldrb	r2, [r1, #4]
    d23c:	70c2      	strb	r2, [r0, #3]
    d23e:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    d242:	7102      	strb	r2, [r0, #4]
    d244:	880a      	ldrh	r2, [r1, #0]
    d246:	0a12      	lsrs	r2, r2, #8
    d248:	7142      	strb	r2, [r0, #5]
    d24a:	788a      	ldrb	r2, [r1, #2]
    d24c:	7182      	strb	r2, [r0, #6]
    d24e:	78ca      	ldrb	r2, [r1, #3]
    d250:	71c2      	strb	r2, [r0, #7]
    d252:	684a      	ldr	r2, [r1, #4]
    d254:	6082      	str	r2, [r0, #8]
    d256:	890a      	ldrh	r2, [r1, #8]
    d258:	8182      	strh	r2, [r0, #12]
    d25a:	7d8a      	ldrb	r2, [r1, #22]
    d25c:	7382      	strb	r2, [r0, #14]
    d25e:	8aca      	ldrh	r2, [r1, #22]
    d260:	0a12      	lsrs	r2, r2, #8
    d262:	73c2      	strb	r2, [r0, #15]
    d264:	7e0a      	ldrb	r2, [r1, #24]
    d266:	7402      	strb	r2, [r0, #16]
    d268:	8b0a      	ldrh	r2, [r1, #24]
    d26a:	0a12      	lsrs	r2, r2, #8
    d26c:	7442      	strb	r2, [r0, #17]
    d26e:	7e8a      	ldrb	r2, [r1, #26]
    d270:	7482      	strb	r2, [r0, #18]
    d272:	8b4a      	ldrh	r2, [r1, #26]
    d274:	0a12      	lsrs	r2, r2, #8
    d276:	74c2      	strb	r2, [r0, #19]
    d278:	7f09      	ldrb	r1, [r1, #28]
    d27a:	7501      	strb	r1, [r0, #20]
    d27c:	2113      	movs	r1, #19
    d27e:	7041      	strb	r1, [r0, #1]
    d280:	4608      	mov	r0, r1
    d282:	4770      	bx	lr
    d284:	223e      	movs	r2, #62	; 0x3e
    d286:	7002      	strb	r2, [r0, #0]
    d288:	220a      	movs	r2, #10
    d28a:	7082      	strb	r2, [r0, #2]
    d28c:	790a      	ldrb	r2, [r1, #4]
    d28e:	70c2      	strb	r2, [r0, #3]
    d290:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    d294:	7102      	strb	r2, [r0, #4]
    d296:	880a      	ldrh	r2, [r1, #0]
    d298:	0a12      	lsrs	r2, r2, #8
    d29a:	7142      	strb	r2, [r0, #5]
    d29c:	788a      	ldrb	r2, [r1, #2]
    d29e:	7182      	strb	r2, [r0, #6]
    d2a0:	78ca      	ldrb	r2, [r1, #3]
    d2a2:	71c2      	strb	r2, [r0, #7]
    d2a4:	684a      	ldr	r2, [r1, #4]
    d2a6:	6082      	str	r2, [r0, #8]
    d2a8:	890a      	ldrh	r2, [r1, #8]
    d2aa:	8182      	strh	r2, [r0, #12]
    d2ac:	f8d1 200a 	ldr.w	r2, [r1, #10]
    d2b0:	f8c0 200e 	str.w	r2, [r0, #14]
    d2b4:	89ca      	ldrh	r2, [r1, #14]
    d2b6:	8242      	strh	r2, [r0, #18]
    d2b8:	690a      	ldr	r2, [r1, #16]
    d2ba:	6142      	str	r2, [r0, #20]
    d2bc:	8a8a      	ldrh	r2, [r1, #20]
    d2be:	8302      	strh	r2, [r0, #24]
    d2c0:	7d8a      	ldrb	r2, [r1, #22]
    d2c2:	7682      	strb	r2, [r0, #26]
    d2c4:	8aca      	ldrh	r2, [r1, #22]
    d2c6:	0a12      	lsrs	r2, r2, #8
    d2c8:	76c2      	strb	r2, [r0, #27]
    d2ca:	7e0a      	ldrb	r2, [r1, #24]
    d2cc:	7702      	strb	r2, [r0, #28]
    d2ce:	8b0a      	ldrh	r2, [r1, #24]
    d2d0:	0a12      	lsrs	r2, r2, #8
    d2d2:	7742      	strb	r2, [r0, #29]
    d2d4:	7e8a      	ldrb	r2, [r1, #26]
    d2d6:	7782      	strb	r2, [r0, #30]
    d2d8:	8b4a      	ldrh	r2, [r1, #26]
    d2da:	0a12      	lsrs	r2, r2, #8
    d2dc:	77c2      	strb	r2, [r0, #31]
    d2de:	7f09      	ldrb	r1, [r1, #28]
    d2e0:	f880 1020 	strb.w	r1, [r0, #32]
    d2e4:	211f      	movs	r1, #31
    d2e6:	7041      	strb	r1, [r0, #1]
    d2e8:	4608      	mov	r0, r1
    d2ea:	4770      	bx	lr
    d2ec:	094a      	lsrs	r2, r1, #5
    d2ee:	f001 011f 	and.w	r1, r1, #31
    d2f2:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    d2f6:	40c8      	lsrs	r0, r1
    d2f8:	f000 0001 	and.w	r0, r0, #1
    d2fc:	4770      	bx	lr

0000d2fe <sdc_hci_data_put>:
    d2fe:	b510      	push	{r4, lr}
    d300:	f06f 0415 	mvn.w	r4, #21
    d304:	b120      	cbz	r0, d310 <sdc_hci_data_put+0x12>
    d306:	f7ff fd56 	bl	cdb6 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    d30a:	b108      	cbz	r0, d310 <sdc_hci_data_put+0x12>
    d30c:	2000      	movs	r0, #0
    d30e:	bd10      	pop	{r4, pc}
    d310:	4620      	mov	r0, r4
    d312:	bd10      	pop	{r4, pc}

0000d314 <sdc_hci_get>:
    d314:	b510      	push	{r4, lr}
    d316:	460c      	mov	r4, r1
    d318:	b130      	cbz	r0, d328 <sdc_hci_get+0x14>
    d31a:	b12c      	cbz	r4, d328 <sdc_hci_get+0x14>
    d31c:	f7f4 f81e 	bl	135c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    d320:	b128      	cbz	r0, d32e <sdc_hci_get+0x1a>
    d322:	7020      	strb	r0, [r4, #0]
    d324:	2000      	movs	r0, #0
    d326:	bd10      	pop	{r4, pc}
    d328:	f06f 0015 	mvn.w	r0, #21
    d32c:	bd10      	pop	{r4, pc}
    d32e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d332:	bd10      	pop	{r4, pc}

0000d334 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    d334:	f002 bf62 	b.w	101fc <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000d338 <sdc_hci_cmd_cb_read_transmit_power_level>:
    d338:	f002 bf7d 	b.w	10236 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000d33c <sdc_hci_cmd_cb_set_event_mask>:
    d33c:	b510      	push	{r4, lr}
    d33e:	f7f4 f8b3 	bl	14a8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    d342:	2000      	movs	r0, #0
    d344:	bd10      	pop	{r4, pc}

0000d346 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    d346:	b510      	push	{r4, lr}
    d348:	f7f4 f8be 	bl	14c8 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    d34c:	2000      	movs	r0, #0
    d34e:	bd10      	pop	{r4, pc}

0000d350 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    d350:	f002 bf92 	b.w	10278 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000d354 <sdc_hci_cmd_vs_conn_event_extend>:
    d354:	b508      	push	{r3, lr}
    d356:	7800      	ldrb	r0, [r0, #0]
    d358:	f88d 0000 	strb.w	r0, [sp]
    d35c:	4668      	mov	r0, sp
    d35e:	f002 fe6e 	bl	1003e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    d362:	bd08      	pop	{r3, pc}

0000d364 <sdc_hci_cmd_vs_conn_update>:
    d364:	2001      	movs	r0, #1
    d366:	4770      	bx	lr

0000d368 <sdc_hci_cmd_vs_event_length_set>:
    d368:	f7f9 bfec 	b.w	7344 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000d36c <sdc_hci_cmd_vs_llpm_mode_set>:
    d36c:	2001      	movs	r0, #1
    d36e:	4770      	bx	lr

0000d370 <sdc_hci_cmd_vs_peripheral_latency_mode_set>:
    d370:	7881      	ldrb	r1, [r0, #2]
    d372:	8800      	ldrh	r0, [r0, #0]
    d374:	f002 be13 	b.w	ff9e <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>

0000d378 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    d378:	7800      	ldrb	r0, [r0, #0]
    d37a:	b100      	cbz	r0, d37e <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    d37c:	2001      	movs	r0, #1
    d37e:	f002 be09 	b.w	ff94 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000d382 <sdc_hci_cmd_vs_set_adv_randomness>:
    d382:	f002 be36 	b.w	fff2 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>

0000d386 <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    d386:	b510      	push	{r4, lr}
    d388:	4604      	mov	r4, r0
    d38a:	f7ff f9f9 	bl	c780 <mpsl_temperature_get>
    d38e:	17c1      	asrs	r1, r0, #31
    d390:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    d394:	1080      	asrs	r0, r0, #2
    d396:	287f      	cmp	r0, #127	; 0x7f
    d398:	dd01      	ble.n	d39e <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    d39a:	207f      	movs	r0, #127	; 0x7f
    d39c:	e004      	b.n	d3a8 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d39e:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    d3a2:	4288      	cmp	r0, r1
    d3a4:	da00      	bge.n	d3a8 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d3a6:	4608      	mov	r0, r1
    d3a8:	7020      	strb	r0, [r4, #0]
    d3aa:	2000      	movs	r0, #0
    d3ac:	bd10      	pop	{r4, pc}

0000d3ae <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    d3ae:	f002 be35 	b.w	1001c <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000d3b2 <sdc_hci_cmd_ip_read_bd_addr>:
    d3b2:	f002 bf34 	b.w	1021e <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000d3b6 <sdc_hci_cmd_ip_read_local_version_information>:
    d3b6:	f7f9 bfd3 	b.w	7360 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000d3ba <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    d3ba:	f002 bbc2 	b.w	fb42 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000d3be <sdc_hci_cmd_le_clear_filter_accept_list>:
    d3be:	f002 bbd7 	b.w	fb70 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000d3c2 <sdc_hci_cmd_le_encrypt>:
    d3c2:	f002 bbe2 	b.w	fb8a <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000d3c6 <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    d3c6:	8802      	ldrh	r2, [r0, #0]
    d3c8:	800a      	strh	r2, [r1, #0]
    d3ca:	f002 bbe7 	b.w	fb9c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000d3ce <sdc_hci_cmd_le_long_term_key_request_reply>:
    d3ce:	8802      	ldrh	r2, [r0, #0]
    d3d0:	800a      	strh	r2, [r1, #0]
    d3d2:	f002 bbfc 	b.w	fbce <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000d3d6 <sdc_hci_cmd_le_rand>:
    d3d6:	f002 bc24 	b.w	fc22 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000d3da <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    d3da:	f002 bc28 	b.w	fc2e <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000d3de <sdc_hci_cmd_le_read_buffer_size>:
    d3de:	f7f9 bebf 	b.w	7160 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000d3e2 <sdc_hci_cmd_le_read_channel_map>:
    d3e2:	f7f9 bec7 	b.w	7174 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000d3e6 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    d3e6:	f002 bc62 	b.w	fcae <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000d3ea <sdc_hci_cmd_le_read_max_data_length>:
    d3ea:	f002 bc2b 	b.w	fc44 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000d3ee <sdc_hci_cmd_le_read_phy>:
    d3ee:	f7f9 bee9 	b.w	71c4 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000d3f2 <sdc_hci_cmd_le_read_remote_features>:
    d3f2:	f002 bc30 	b.w	fc56 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000d3f6 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    d3f6:	f7f9 bf0b 	b.w	7210 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000d3fa <sdc_hci_cmd_le_read_transmit_power>:
    d3fa:	f002 bc48 	b.w	fc8e <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000d3fe <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    d3fe:	f002 bc5d 	b.w	fcbc <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000d402 <sdc_hci_cmd_le_set_adv_data>:
    d402:	f002 bc70 	b.w	fce6 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000d406 <sdc_hci_cmd_le_set_adv_enable>:
    d406:	f002 bc83 	b.w	fd10 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000d40a <sdc_hci_cmd_le_set_adv_params>:
    d40a:	f002 bcb4 	b.w	fd76 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000d40e <sdc_hci_cmd_le_set_data_length>:
    d40e:	f002 bd47 	b.w	fea0 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000d412 <sdc_hci_cmd_le_set_data_related_address_changes>:
    d412:	f002 bd65 	b.w	fee0 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>

0000d416 <sdc_hci_cmd_le_set_default_phy>:
    d416:	f7f9 bf05 	b.w	7224 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000d41a <sdc_hci_cmd_le_set_event_mask>:
    d41a:	b510      	push	{r4, lr}
    d41c:	f7f4 f83c 	bl	1498 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    d420:	2000      	movs	r0, #0
    d422:	bd10      	pop	{r4, pc}

0000d424 <sdc_hci_cmd_le_set_phy>:
    d424:	f002 bd69 	b.w	fefa <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000d428 <sdc_hci_cmd_le_set_random_address>:
    d428:	f002 bd80 	b.w	ff2c <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000d42c <sdc_hci_cmd_le_set_scan_response_data>:
    d42c:	f002 bd8c 	b.w	ff48 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000d430 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    d430:	f002 bd9f 	b.w	ff72 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000d434 <sdc_hci_cmd_lc_disconnect>:
    d434:	f002 bb37 	b.w	faa6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000d438 <sdc_hci_cmd_lc_read_remote_version_information>:
    d438:	f7f9 bf9c 	b.w	7374 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    d43c:	b570      	push	{r4, r5, r6, lr}
    d43e:	880b      	ldrh	r3, [r1, #0]
    d440:	7cc4      	ldrb	r4, [r0, #19]
    d442:	f100 0518 	add.w	r5, r0, #24
    d446:	f3c3 060e 	ubfx	r6, r3, #0, #15
    d44a:	8802      	ldrh	r2, [r0, #0]
    d44c:	4435      	add	r5, r6
    d44e:	1d64      	adds	r4, r4, #5
    d450:	882d      	ldrh	r5, [r5, #0]
    d452:	4422      	add	r2, r4
    d454:	b292      	uxth	r2, r2
    d456:	4425      	add	r5, r4
    d458:	1e54      	subs	r4, r2, #1
    d45a:	442c      	add	r4, r5
    d45c:	fb94 f4f2 	sdiv	r4, r4, r2
    d460:	fb02 6204 	mla	r2, r2, r4, r6
    d464:	8840      	ldrh	r0, [r0, #2]
    d466:	b292      	uxth	r2, r2
    d468:	4290      	cmp	r0, r2
    d46a:	d903      	bls.n	d474 <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    d46c:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d470:	4310      	orrs	r0, r2
    d472:	e002      	b.n	d47a <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    d474:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d478:	4398      	bics	r0, r3
    d47a:	8008      	strh	r0, [r1, #0]
    d47c:	bd70      	pop	{r4, r5, r6, pc}
    d47e:	0442      	lsls	r2, r0, #17
    d480:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    d484:	d107      	bne.n	d496 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d486:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d48a:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d48e:	4288      	cmp	r0, r1
    d490:	d001      	beq.n	d496 <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d492:	2001      	movs	r0, #1
    d494:	4770      	bx	lr
    d496:	2000      	movs	r0, #0
    d498:	4770      	bx	lr

0000d49a <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    d49a:	8881      	ldrh	r1, [r0, #4]
    d49c:	88c0      	ldrh	r0, [r0, #6]
    d49e:	4288      	cmp	r0, r1
    d4a0:	d101      	bne.n	d4a6 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    d4a2:	2001      	movs	r0, #1
    d4a4:	4770      	bx	lr
    d4a6:	2000      	movs	r0, #0
    d4a8:	4770      	bx	lr

0000d4aa <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    d4aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d4ae:	460f      	mov	r7, r1
    d4b0:	4604      	mov	r4, r0
    d4b2:	f100 0118 	add.w	r1, r0, #24
    d4b6:	8880      	ldrh	r0, [r0, #4]
    d4b8:	2600      	movs	r6, #0
    d4ba:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d4be:	1845      	adds	r5, r0, r1
    d4c0:	603e      	str	r6, [r7, #0]
    d4c2:	89e0      	ldrh	r0, [r4, #14]
    d4c4:	2800      	cmp	r0, #0
    d4c6:	d016      	beq.n	d4f6 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    d4c8:	8961      	ldrh	r1, [r4, #10]
    d4ca:	4408      	add	r0, r1
    d4cc:	b280      	uxth	r0, r0
    d4ce:	8160      	strh	r0, [r4, #10]
    d4d0:	8829      	ldrh	r1, [r5, #0]
    d4d2:	4288      	cmp	r0, r1
    d4d4:	d905      	bls.n	d4e2 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    d4d6:	f240 1151 	movw	r1, #337	; 0x151
    d4da:	f04f 0014 	mov.w	r0, #20
    d4de:	f7f3 fe41 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d4e2:	d106      	bne.n	d4f2 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    d4e4:	f104 0104 	add.w	r1, r4, #4
    d4e8:	4620      	mov	r0, r4
    d4ea:	f7ff ffa7 	bl	d43c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d4ee:	8166      	strh	r6, [r4, #10]
    d4f0:	603d      	str	r5, [r7, #0]
    d4f2:	81e6      	strh	r6, [r4, #14]
    d4f4:	2001      	movs	r0, #1
    d4f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d4fa <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d4fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d4fe:	4604      	mov	r4, r0
    d500:	f100 0318 	add.w	r3, r0, #24
    d504:	88c0      	ldrh	r0, [r0, #6]
    d506:	460e      	mov	r6, r1
    d508:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d50c:	8a20      	ldrh	r0, [r4, #16]
    d50e:	19d9      	adds	r1, r3, r7
    d510:	b108      	cbz	r0, d516 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    d512:	42b0      	cmp	r0, r6
    d514:	d202      	bcs.n	d51c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    d516:	2000      	movs	r0, #0
    d518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d51c:	89a0      	ldrh	r0, [r4, #12]
    d51e:	2500      	movs	r5, #0
    d520:	b140      	cbz	r0, d534 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    d522:	f8b1 c000 	ldrh.w	ip, [r1]
    d526:	4560      	cmp	r0, ip
    d528:	d006      	beq.n	d538 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    d52a:	f44f 7101 	mov.w	r1, #516	; 0x204
    d52e:	2014      	movs	r0, #20
    d530:	f7f3 fe18 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d534:	800d      	strh	r5, [r1, #0]
    d536:	e00e      	b.n	d556 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    d538:	f894 c013 	ldrb.w	ip, [r4, #19]
    d53c:	4418      	add	r0, r3
    d53e:	f10c 0c05 	add.w	ip, ip, #5
    d542:	44bc      	add	ip, r7
    d544:	4460      	add	r0, ip
    d546:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    d54a:	f820 cc03 	strh.w	ip, [r0, #-3]
    d54e:	f894 c016 	ldrb.w	ip, [r4, #22]
    d552:	f800 cc01 	strb.w	ip, [r0, #-1]
    d556:	89a0      	ldrh	r0, [r4, #12]
    d558:	4430      	add	r0, r6
    d55a:	81a0      	strh	r0, [r4, #12]
    d55c:	8808      	ldrh	r0, [r1, #0]
    d55e:	4430      	add	r0, r6
    d560:	8008      	strh	r0, [r1, #0]
    d562:	b12a      	cbz	r2, d570 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
    d564:	1da1      	adds	r1, r4, #6
    d566:	4620      	mov	r0, r4
    d568:	f7ff ff68 	bl	d43c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d56c:	81a5      	strh	r5, [r4, #12]
    d56e:	e00a      	b.n	d586 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
    d570:	7ce0      	ldrb	r0, [r4, #19]
    d572:	89a1      	ldrh	r1, [r4, #12]
    d574:	1d40      	adds	r0, r0, #5
    d576:	4438      	add	r0, r7
    d578:	4419      	add	r1, r3
    d57a:	4408      	add	r0, r1
    d57c:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d580:	82a1      	strh	r1, [r4, #20]
    d582:	7880      	ldrb	r0, [r0, #2]
    d584:	75a0      	strb	r0, [r4, #22]
    d586:	8225      	strh	r5, [r4, #16]
    d588:	2001      	movs	r0, #1
    d58a:	e7c5      	b.n	d518 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000d58c <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    d58c:	1c80      	adds	r0, r0, #2
    d58e:	4770      	bx	lr

0000d590 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d590:	b510      	push	{r4, lr}
    d592:	4604      	mov	r4, r0
    d594:	88c0      	ldrh	r0, [r0, #6]
    d596:	88a1      	ldrh	r1, [r4, #4]
    d598:	4281      	cmp	r1, r0
    d59a:	d003      	beq.n	d5a4 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d59c:	8960      	ldrh	r0, [r4, #10]
    d59e:	b908      	cbnz	r0, d5a4 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d5a0:	89e0      	ldrh	r0, [r4, #14]
    d5a2:	b108      	cbz	r0, d5a8 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x18>
    d5a4:	2000      	movs	r0, #0
    d5a6:	bd10      	pop	{r4, pc}
    d5a8:	1d21      	adds	r1, r4, #4
    d5aa:	4620      	mov	r0, r4
    d5ac:	f7ff ff46 	bl	d43c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d5b0:	2000      	movs	r0, #0
    d5b2:	81e0      	strh	r0, [r4, #14]
    d5b4:	2001      	movs	r0, #1
    d5b6:	bd10      	pop	{r4, pc}

0000d5b8 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d5b8:	b510      	push	{r4, lr}
    d5ba:	4604      	mov	r4, r0
    d5bc:	f100 0218 	add.w	r2, r0, #24
    d5c0:	88c0      	ldrh	r0, [r0, #6]
    d5c2:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d5c6:	4402      	add	r2, r0
    d5c8:	8820      	ldrh	r0, [r4, #0]
    d5ca:	2845      	cmp	r0, #69	; 0x45
    d5cc:	d200      	bcs.n	d5d0 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d5ce:	2045      	movs	r0, #69	; 0x45
    d5d0:	4288      	cmp	r0, r1
    d5d2:	d204      	bcs.n	d5de <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d5d4:	f44f 7182 	mov.w	r1, #260	; 0x104
    d5d8:	2014      	movs	r0, #20
    d5da:	f7f3 fdc3 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d5de:	7ca0      	ldrb	r0, [r4, #18]
    d5e0:	2800      	cmp	r0, #0
    d5e2:	d003      	beq.n	d5ec <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d5e4:	8810      	ldrh	r0, [r2, #0]
    d5e6:	4288      	cmp	r0, r1
    d5e8:	d201      	bcs.n	d5ee <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d5ea:	2000      	movs	r0, #0
    d5ec:	bd10      	pop	{r4, pc}
    d5ee:	8011      	strh	r1, [r2, #0]
    d5f0:	1da1      	adds	r1, r4, #6
    d5f2:	4620      	mov	r0, r4
    d5f4:	f7ff ff22 	bl	d43c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d5f8:	2000      	movs	r0, #0
    d5fa:	74a0      	strb	r0, [r4, #18]
    d5fc:	2001      	movs	r0, #1
    d5fe:	bd10      	pop	{r4, pc}

0000d600 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d600:	b510      	push	{r4, lr}
    d602:	88c4      	ldrh	r4, [r0, #6]
    d604:	8883      	ldrh	r3, [r0, #4]
    d606:	4601      	mov	r1, r0
    d608:	f100 0218 	add.w	r2, r0, #24
    d60c:	f3c3 000e 	ubfx	r0, r3, #0, #15
    d610:	4410      	add	r0, r2
    d612:	42a3      	cmp	r3, r4
    d614:	d002      	beq.n	d61c <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
    d616:	8949      	ldrh	r1, [r1, #10]
    d618:	2900      	cmp	r1, #0
    d61a:	d000      	beq.n	d61e <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1e>
    d61c:	2000      	movs	r0, #0
    d61e:	bd10      	pop	{r4, pc}

0000d620 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    d620:	8803      	ldrh	r3, [r0, #0]
    d622:	2b45      	cmp	r3, #69	; 0x45
    d624:	d200      	bcs.n	d628 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    d626:	2345      	movs	r3, #69	; 0x45
    d628:	8013      	strh	r3, [r2, #0]
    d62a:	88c2      	ldrh	r2, [r0, #6]
    d62c:	f3c2 030e 	ubfx	r3, r2, #0, #15
    d630:	f100 0218 	add.w	r2, r0, #24
    d634:	441a      	add	r2, r3
    d636:	600a      	str	r2, [r1, #0]
    d638:	8980      	ldrh	r0, [r0, #12]
    d63a:	4770      	bx	lr

0000d63c <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d63c:	7cc0      	ldrb	r0, [r0, #19]
    d63e:	1d40      	adds	r0, r0, #5
    d640:	4408      	add	r0, r1
    d642:	1ec0      	subs	r0, r0, #3
    d644:	6010      	str	r0, [r2, #0]
    d646:	8808      	ldrh	r0, [r1, #0]
    d648:	4770      	bx	lr

0000d64a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d64a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d64e:	460e      	mov	r6, r1
    d650:	88c1      	ldrh	r1, [r0, #6]
    d652:	8902      	ldrh	r2, [r0, #8]
    d654:	4604      	mov	r4, r0
    d656:	f100 0818 	add.w	r8, r0, #24
    d65a:	8800      	ldrh	r0, [r0, #0]
    d65c:	f3c1 050e 	ubfx	r5, r1, #0, #15
    d660:	f3c2 070e 	ubfx	r7, r2, #0, #15
    d664:	2845      	cmp	r0, #69	; 0x45
    d666:	d200      	bcs.n	d66a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d668:	2045      	movs	r0, #69	; 0x45
    d66a:	42b0      	cmp	r0, r6
    d66c:	d203      	bcs.n	d676 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d66e:	21c6      	movs	r1, #198	; 0xc6
    d670:	2014      	movs	r0, #20
    d672:	f7f3 fd77 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d676:	4610      	mov	r0, r2
    d678:	f7ff ff01 	bl	d47e <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d67c:	b110      	cbz	r0, d684 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    d67e:	2000      	movs	r0, #0
    d680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d684:	42af      	cmp	r7, r5
    d686:	d908      	bls.n	d69a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d688:	7ce1      	ldrb	r1, [r4, #19]
    d68a:	1b78      	subs	r0, r7, r5
    d68c:	1a40      	subs	r0, r0, r1
    d68e:	1f40      	subs	r0, r0, #5
    d690:	4286      	cmp	r6, r0
    d692:	dd02      	ble.n	d69a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d694:	2000      	movs	r0, #0
    d696:	74a0      	strb	r0, [r4, #18]
    d698:	e7f1      	b.n	d67e <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    d69a:	eb08 0005 	add.w	r0, r8, r5
    d69e:	2101      	movs	r1, #1
    d6a0:	8006      	strh	r6, [r0, #0]
    d6a2:	74a1      	strb	r1, [r4, #18]
    d6a4:	e7ec      	b.n	d680 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000d6a6 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    d6a6:	b538      	push	{r3, r4, r5, lr}
    d6a8:	88c4      	ldrh	r4, [r0, #6]
    d6aa:	8881      	ldrh	r1, [r0, #4]
    d6ac:	f100 0218 	add.w	r2, r0, #24
    d6b0:	f3c1 030e 	ubfx	r3, r1, #0, #15
    d6b4:	441a      	add	r2, r3
    d6b6:	42a1      	cmp	r1, r4
    d6b8:	d010      	beq.n	d6dc <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d6ba:	8943      	ldrh	r3, [r0, #10]
    d6bc:	89c5      	ldrh	r5, [r0, #14]
    d6be:	8812      	ldrh	r2, [r2, #0]
    d6c0:	442b      	add	r3, r5
    d6c2:	4293      	cmp	r3, r2
    d6c4:	d308      	bcc.n	d6d8 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    d6c6:	f8ad 1000 	strh.w	r1, [sp]
    d6ca:	4669      	mov	r1, sp
    d6cc:	f7ff feb6 	bl	d43c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d6d0:	f8bd 0000 	ldrh.w	r0, [sp]
    d6d4:	42a0      	cmp	r0, r4
    d6d6:	d001      	beq.n	d6dc <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d6d8:	2001      	movs	r0, #1
    d6da:	bd38      	pop	{r3, r4, r5, pc}
    d6dc:	2000      	movs	r0, #0
    d6de:	bd38      	pop	{r3, r4, r5, pc}

0000d6e0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    d6e0:	b570      	push	{r4, r5, r6, lr}
    d6e2:	88c6      	ldrh	r6, [r0, #6]
    d6e4:	8885      	ldrh	r5, [r0, #4]
    d6e6:	4603      	mov	r3, r0
    d6e8:	f100 0418 	add.w	r4, r0, #24
    d6ec:	f3c5 000e 	ubfx	r0, r5, #0, #15
    d6f0:	4420      	add	r0, r4
    d6f2:	42b5      	cmp	r5, r6
    d6f4:	d102      	bne.n	d6fc <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    d6f6:	2000      	movs	r0, #0
    d6f8:	81d8      	strh	r0, [r3, #14]
    d6fa:	bd70      	pop	{r4, r5, r6, pc}
    d6fc:	8804      	ldrh	r4, [r0, #0]
    d6fe:	895d      	ldrh	r5, [r3, #10]
    d700:	7cde      	ldrb	r6, [r3, #19]
    d702:	1b64      	subs	r4, r4, r5
    d704:	4435      	add	r5, r6
    d706:	4428      	add	r0, r5
    d708:	880d      	ldrh	r5, [r1, #0]
    d70a:	b2a4      	uxth	r4, r4
    d70c:	1c80      	adds	r0, r0, #2
    d70e:	42a5      	cmp	r5, r4
    d710:	d900      	bls.n	d714 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    d712:	800c      	strh	r4, [r1, #0]
    d714:	895c      	ldrh	r4, [r3, #10]
    d716:	b124      	cbz	r4, d722 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    d718:	2400      	movs	r4, #0
    d71a:	7014      	strb	r4, [r2, #0]
    d71c:	8809      	ldrh	r1, [r1, #0]
    d71e:	81d9      	strh	r1, [r3, #14]
    d720:	bd70      	pop	{r4, r5, r6, pc}
    d722:	2401      	movs	r4, #1
    d724:	e7f9      	b.n	d71a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000d726 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    d726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d72a:	461d      	mov	r5, r3
    d72c:	4616      	mov	r6, r2
    d72e:	9f06      	ldr	r7, [sp, #24]
    d730:	460b      	mov	r3, r1
    d732:	4604      	mov	r4, r0
    d734:	463a      	mov	r2, r7
    d736:	4629      	mov	r1, r5
    d738:	4630      	mov	r0, r6
    d73a:	f000 f839 	bl	d7b0 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d73e:	4283      	cmp	r3, r0
    d740:	d201      	bcs.n	d746 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    d742:	219e      	movs	r1, #158	; 0x9e
    d744:	e012      	b.n	d76c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d746:	07a0      	lsls	r0, r4, #30
    d748:	d001      	beq.n	d74e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    d74a:	219f      	movs	r1, #159	; 0x9f
    d74c:	e00e      	b.n	d76c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d74e:	2218      	movs	r2, #24
    d750:	2100      	movs	r1, #0
    d752:	4620      	mov	r0, r4
    d754:	f003 fb2d 	bl	10db2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d758:	19a8      	adds	r0, r5, r6
    d75a:	1d40      	adds	r0, r0, #5
    d75c:	4378      	muls	r0, r7
    d75e:	b280      	uxth	r0, r0
    d760:	74e5      	strb	r5, [r4, #19]
    d762:	8060      	strh	r0, [r4, #2]
    d764:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d768:	d903      	bls.n	d772 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    d76a:	21a4      	movs	r1, #164	; 0xa4
    d76c:	2014      	movs	r0, #20
    d76e:	f7f3 fcf9 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d772:	8026      	strh	r6, [r4, #0]
    d774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d778 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    d778:	b570      	push	{r4, r5, r6, lr}
    d77a:	460b      	mov	r3, r1
    d77c:	4604      	mov	r4, r0
    d77e:	f100 0118 	add.w	r1, r0, #24
    d782:	8902      	ldrh	r2, [r0, #8]
    d784:	8880      	ldrh	r0, [r0, #4]
    d786:	f3c2 050e 	ubfx	r5, r2, #0, #15
    d78a:	440d      	add	r5, r1
    d78c:	4282      	cmp	r2, r0
    d78e:	d101      	bne.n	d794 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    d790:	2000      	movs	r0, #0
    d792:	bd70      	pop	{r4, r5, r6, pc}
    d794:	b123      	cbz	r3, d7a0 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    d796:	7ce2      	ldrb	r2, [r4, #19]
    d798:	1ca9      	adds	r1, r5, #2
    d79a:	4618      	mov	r0, r3
    d79c:	f003 fa8f 	bl	10cbe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d7a0:	882d      	ldrh	r5, [r5, #0]
    d7a2:	f104 0108 	add.w	r1, r4, #8
    d7a6:	4620      	mov	r0, r4
    d7a8:	f7ff fe48 	bl	d43c <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d7ac:	4628      	mov	r0, r5
    d7ae:	bd70      	pop	{r4, r5, r6, pc}

0000d7b0 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d7b0:	4401      	add	r1, r0
    d7b2:	1d49      	adds	r1, r1, #5
    d7b4:	4351      	muls	r1, r2
    d7b6:	b28a      	uxth	r2, r1
    d7b8:	2100      	movs	r1, #0
    d7ba:	2845      	cmp	r0, #69	; 0x45
    d7bc:	d202      	bcs.n	d7c4 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    d7be:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    d7c2:	b281      	uxth	r1, r0
    d7c4:	3218      	adds	r2, #24
    d7c6:	1850      	adds	r0, r2, r1
    d7c8:	b280      	uxth	r0, r0
    d7ca:	4770      	bx	lr

0000d7cc <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d7cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d7d0:	4688      	mov	r8, r1
    d7d2:	88c1      	ldrh	r1, [r0, #6]
    d7d4:	4604      	mov	r4, r0
    d7d6:	8900      	ldrh	r0, [r0, #8]
    d7d8:	f3c1 060e 	ubfx	r6, r1, #0, #15
    d7dc:	f104 0518 	add.w	r5, r4, #24
    d7e0:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d7e4:	eb05 0906 	add.w	r9, r5, r6
    d7e8:	f7ff fe49 	bl	d47e <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d7ec:	2200      	movs	r2, #0
    d7ee:	b998      	cbnz	r0, d818 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d7f0:	8820      	ldrh	r0, [r4, #0]
    d7f2:	2845      	cmp	r0, #69	; 0x45
    d7f4:	d200      	bcs.n	d7f8 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d7f6:	2045      	movs	r0, #69	; 0x45
    d7f8:	42b7      	cmp	r7, r6
    d7fa:	d906      	bls.n	d80a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d7fc:	7ce3      	ldrb	r3, [r4, #19]
    d7fe:	1bb9      	subs	r1, r7, r6
    d800:	1ac9      	subs	r1, r1, r3
    d802:	1f49      	subs	r1, r1, #5
    d804:	4281      	cmp	r1, r0
    d806:	da00      	bge.n	d80a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d808:	4608      	mov	r0, r1
    d80a:	89a1      	ldrh	r1, [r4, #12]
    d80c:	b111      	cbz	r1, d814 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d80e:	f8b9 3000 	ldrh.w	r3, [r9]
    d812:	1ac0      	subs	r0, r0, r3
    d814:	4540      	cmp	r0, r8
    d816:	da03      	bge.n	d820 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d818:	8222      	strh	r2, [r4, #16]
    d81a:	2000      	movs	r0, #0
    d81c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d820:	7ce0      	ldrb	r0, [r4, #19]
    d822:	4429      	add	r1, r5
    d824:	1d40      	adds	r0, r0, #5
    d826:	4430      	add	r0, r6
    d828:	4408      	add	r0, r1
    d82a:	f8a4 8010 	strh.w	r8, [r4, #16]
    d82e:	1ec0      	subs	r0, r0, #3
    d830:	e7f4      	b.n	d81c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d832 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d832:	b570      	push	{r4, r5, r6, lr}
    d834:	2300      	movs	r3, #0
    d836:	f1a1 0208 	sub.w	r2, r1, #8
    d83a:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    d83e:	42a2      	cmp	r2, r4
    d840:	d304      	bcc.n	d84c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d842:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    d846:	2015      	movs	r0, #21
    d848:	f7f3 fc8c 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d84c:	6802      	ldr	r2, [r0, #0]
    d84e:	b90a      	cbnz	r2, d854 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    d850:	e01e      	b.n	d890 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d852:	4610      	mov	r0, r2
    d854:	6802      	ldr	r2, [r0, #0]
    d856:	8893      	ldrh	r3, [r2, #4]
    d858:	428b      	cmp	r3, r1
    d85a:	d002      	beq.n	d862 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    d85c:	6813      	ldr	r3, [r2, #0]
    d85e:	2b00      	cmp	r3, #0
    d860:	d1f7      	bne.n	d852 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    d862:	8894      	ldrh	r4, [r2, #4]
    d864:	4613      	mov	r3, r2
    d866:	428c      	cmp	r4, r1
    d868:	d101      	bne.n	d86e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    d86a:	6811      	ldr	r1, [r2, #0]
    d86c:	e00d      	b.n	d88a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    d86e:	f101 0508 	add.w	r5, r1, #8
    d872:	b2ae      	uxth	r6, r5
    d874:	2500      	movs	r5, #0
    d876:	42b4      	cmp	r4, r6
    d878:	d309      	bcc.n	d88e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    d87a:	1a64      	subs	r4, r4, r1
    d87c:	4411      	add	r1, r2
    d87e:	600d      	str	r5, [r1, #0]
    d880:	808c      	strh	r4, [r1, #4]
    d882:	6802      	ldr	r2, [r0, #0]
    d884:	6812      	ldr	r2, [r2, #0]
    d886:	6002      	str	r2, [r0, #0]
    d888:	600a      	str	r2, [r1, #0]
    d88a:	6001      	str	r1, [r0, #0]
    d88c:	e000      	b.n	d890 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d88e:	2300      	movs	r3, #0
    d890:	4618      	mov	r0, r3
    d892:	bd70      	pop	{r4, r5, r6, pc}

0000d894 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d894:	b510      	push	{r4, lr}
    d896:	000c      	movs	r4, r1
    d898:	d004      	beq.n	d8a4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    d89a:	2c08      	cmp	r4, #8
    d89c:	d207      	bcs.n	d8ae <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d89e:	f44f 71cd 	mov.w	r1, #410	; 0x19a
    d8a2:	e00a      	b.n	d8ba <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    d8a4:	b108      	cbz	r0, d8aa <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    d8a6:	2100      	movs	r1, #0
    d8a8:	6001      	str	r1, [r0, #0]
    d8aa:	2000      	movs	r0, #0
    d8ac:	bd10      	pop	{r4, pc}
    d8ae:	b158      	cbz	r0, d8c8 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    d8b0:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    d8b4:	d304      	bcc.n	d8c0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    d8b6:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    d8ba:	2015      	movs	r0, #21
    d8bc:	f7f3 fc52 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d8c0:	b2a1      	uxth	r1, r4
    d8c2:	6800      	ldr	r0, [r0, #0]
    d8c4:	f000 f814 	bl	d8f0 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d8c8:	1d20      	adds	r0, r4, #4
    d8ca:	bd10      	pop	{r4, pc}

0000d8cc <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d8cc:	2100      	movs	r1, #0
    d8ce:	6802      	ldr	r2, [r0, #0]
    d8d0:	e003      	b.n	d8da <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d8d2:	8893      	ldrh	r3, [r2, #4]
    d8d4:	6812      	ldr	r2, [r2, #0]
    d8d6:	4419      	add	r1, r3
    d8d8:	b289      	uxth	r1, r1
    d8da:	2a00      	cmp	r2, #0
    d8dc:	d1f9      	bne.n	d8d2 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d8de:	f000 b807 	b.w	d8f0 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d8e2 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d8e2:	2300      	movs	r3, #0
    d8e4:	600b      	str	r3, [r1, #0]
    d8e6:	808a      	strh	r2, [r1, #4]
    d8e8:	6802      	ldr	r2, [r0, #0]
    d8ea:	600a      	str	r2, [r1, #0]
    d8ec:	6001      	str	r1, [r0, #0]
    d8ee:	4770      	bx	lr
    d8f0:	2300      	movs	r3, #0
    d8f2:	6043      	str	r3, [r0, #4]
    d8f4:	1d02      	adds	r2, r0, #4
    d8f6:	8101      	strh	r1, [r0, #8]
    d8f8:	6002      	str	r2, [r0, #0]
    d8fa:	4770      	bx	lr
    d8fc:	eb00 0342 	add.w	r3, r0, r2, lsl #1
    d900:	8159      	strh	r1, [r3, #10]
    d902:	4611      	mov	r1, r2
    d904:	f000 b814 	b.w	d930 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    d908:	b170      	cbz	r0, d928 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x46>
    d90a:	7882      	ldrb	r2, [r0, #2]
    d90c:	fbb1 f3f2 	udiv	r3, r1, r2
    d910:	fb02 1213 	mls	r2, r2, r3, r1
    d914:	b2d2      	uxtb	r2, r2
    d916:	eb00 0342 	add.w	r3, r0, r2, lsl #1
    d91a:	895b      	ldrh	r3, [r3, #10]
    d91c:	428b      	cmp	r3, r1
    d91e:	d101      	bne.n	d924 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x42>
    d920:	4610      	mov	r0, r2
    d922:	4770      	bx	lr
    d924:	78c3      	ldrb	r3, [r0, #3]
    d926:	b10b      	cbz	r3, d92c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4a>
    d928:	20ff      	movs	r0, #255	; 0xff
    d92a:	4770      	bx	lr
    d92c:	f7f3 befc 	b.w	1728 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
    d930:	8802      	ldrh	r2, [r0, #0]
    d932:	fb01 0102 	mla	r1, r1, r2, r0
    d936:	7880      	ldrb	r0, [r0, #2]
    d938:	220a      	movs	r2, #10
    d93a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    d93e:	4408      	add	r0, r1
    d940:	4770      	bx	lr

0000d942 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    d942:	b51c      	push	{r2, r3, r4, lr}
    d944:	4604      	mov	r4, r0
    d946:	2000      	movs	r0, #0
    d948:	9001      	str	r0, [sp, #4]
    d94a:	9000      	str	r0, [sp, #0]
    d94c:	f88d 4006 	strb.w	r4, [sp, #6]
    d950:	e00a      	b.n	d968 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d952:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d956:	4621      	mov	r1, r4
    d958:	f7f3 ffd4 	bl	1904 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    d95c:	b120      	cbz	r0, d968 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d95e:	f240 217e 	movw	r1, #638	; 0x27e
    d962:	2017      	movs	r0, #23
    d964:	f7f3 fbfe 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d968:	4668      	mov	r0, sp
    d96a:	f7f3 ff7b 	bl	1864 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    d96e:	2800      	cmp	r0, #0
    d970:	d0ef      	beq.n	d952 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    d972:	bd1c      	pop	{r2, r3, r4, pc}

0000d974 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d974:	b570      	push	{r4, r5, r6, lr}
    d976:	460e      	mov	r6, r1
    d978:	461d      	mov	r5, r3
    d97a:	4611      	mov	r1, r2
    d97c:	f000 f813 	bl	d9a6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    d980:	4604      	mov	r4, r0
    d982:	4629      	mov	r1, r5
    d984:	4630      	mov	r0, r6
    d986:	f000 f804 	bl	d992 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    d98a:	4420      	add	r0, r4
    d98c:	1d00      	adds	r0, r0, #4
    d98e:	b280      	uxth	r0, r0
    d990:	bd70      	pop	{r4, r5, r6, pc}
    d992:	b510      	push	{r4, lr}
    d994:	460a      	mov	r2, r1
    d996:	2109      	movs	r1, #9
    d998:	f7ff ff0a 	bl	d7b0 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d99c:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d9a0:	1cc0      	adds	r0, r0, #3
    d9a2:	4008      	ands	r0, r1
    d9a4:	bd10      	pop	{r4, pc}
    d9a6:	b510      	push	{r4, lr}
    d9a8:	460a      	mov	r2, r1
    d9aa:	210a      	movs	r1, #10
    d9ac:	f7ff ff00 	bl	d7b0 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d9b0:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d9b4:	1cc0      	adds	r0, r0, #3
    d9b6:	4008      	ands	r0, r1
    d9b8:	bd10      	pop	{r4, pc}
    d9ba:	b109      	cbz	r1, d9c0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4c>
    d9bc:	2100      	movs	r1, #0
    d9be:	e000      	b.n	d9c2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4e>
    d9c0:	2102      	movs	r1, #2
    d9c2:	1843      	adds	r3, r0, r1
    d9c4:	7d1a      	ldrb	r2, [r3, #20]
    d9c6:	2a02      	cmp	r2, #2
    d9c8:	d008      	beq.n	d9dc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    d9ca:	7d5b      	ldrb	r3, [r3, #21]
    d9cc:	2b02      	cmp	r3, #2
    d9ce:	d009      	beq.n	d9e4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    d9d0:	2a03      	cmp	r2, #3
    d9d2:	d003      	beq.n	d9dc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    d9d4:	2b03      	cmp	r3, #3
    d9d6:	d005      	beq.n	d9e4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    d9d8:	2000      	movs	r0, #0
    d9da:	4770      	bx	lr
    d9dc:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d9e0:	8b00      	ldrh	r0, [r0, #24]
    d9e2:	4770      	bx	lr
    d9e4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d9e8:	8b40      	ldrh	r0, [r0, #26]
    d9ea:	4770      	bx	lr
    d9ec:	b109      	cbz	r1, d9f2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7e>
    d9ee:	2100      	movs	r1, #0
    d9f0:	e000      	b.n	d9f4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    d9f2:	2102      	movs	r1, #2
    d9f4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d9f8:	8b01      	ldrh	r1, [r0, #24]
    d9fa:	b911      	cbnz	r1, da02 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8e>
    d9fc:	8b40      	ldrh	r0, [r0, #26]
    d9fe:	2800      	cmp	r0, #0
    da00:	d000      	beq.n	da04 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x90>
    da02:	2001      	movs	r0, #1
    da04:	4770      	bx	lr
    da06:	b538      	push	{r3, r4, r5, lr}
    da08:	7883      	ldrb	r3, [r0, #2]
    da0a:	f88d 3000 	strb.w	r3, [sp]
    da0e:	9b00      	ldr	r3, [sp, #0]
    da10:	9300      	str	r3, [sp, #0]
    da12:	f89d 3000 	ldrb.w	r3, [sp]
    da16:	b95b      	cbnz	r3, da30 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbc>
    da18:	2400      	movs	r4, #0
    da1a:	b10a      	cbz	r2, da20 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xac>
    da1c:	2300      	movs	r3, #0
    da1e:	e000      	b.n	da22 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xae>
    da20:	2302      	movs	r3, #2
    da22:	18c2      	adds	r2, r0, r3
    da24:	7d15      	ldrb	r5, [r2, #20]
    da26:	2d02      	cmp	r5, #2
    da28:	d004      	beq.n	da34 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    da2a:	7d52      	ldrb	r2, [r2, #21]
    da2c:	2a02      	cmp	r2, #2
    da2e:	d004      	beq.n	da3a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc6>
    da30:	2000      	movs	r0, #0
    da32:	bd38      	pop	{r3, r4, r5, pc}
    da34:	461a      	mov	r2, r3
    da36:	1c5b      	adds	r3, r3, #1
    da38:	e000      	b.n	da3c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc8>
    da3a:	1c5a      	adds	r2, r3, #1
    da3c:	b179      	cbz	r1, da5e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xea>
    da3e:	18c5      	adds	r5, r0, r3
    da40:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    da44:	752c      	strb	r4, [r5, #20]
    da46:	831c      	strh	r4, [r3, #24]
    da48:	2303      	movs	r3, #3
    da4a:	1884      	adds	r4, r0, r2
    da4c:	7523      	strb	r3, [r4, #20]
    da4e:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    da52:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    da56:	685b      	ldr	r3, [r3, #4]
    da58:	600b      	str	r3, [r1, #0]
    da5a:	8b00      	ldrh	r0, [r0, #24]
    da5c:	8088      	strh	r0, [r1, #4]
    da5e:	2001      	movs	r0, #1
    da60:	bd38      	pop	{r3, r4, r5, pc}
    da62:	b510      	push	{r4, lr}
    da64:	b109      	cbz	r1, da6a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf6>
    da66:	2100      	movs	r1, #0
    da68:	e000      	b.n	da6c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf8>
    da6a:	2102      	movs	r1, #2
    da6c:	1843      	adds	r3, r0, r1
    da6e:	7d1c      	ldrb	r4, [r3, #20]
    da70:	4294      	cmp	r4, r2
    da72:	d103      	bne.n	da7c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x108>
    da74:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    da78:	8b00      	ldrh	r0, [r0, #24]
    da7a:	bd10      	pop	{r4, pc}
    da7c:	7d5b      	ldrb	r3, [r3, #21]
    da7e:	4293      	cmp	r3, r2
    da80:	d103      	bne.n	da8a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x116>
    da82:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    da86:	8b40      	ldrh	r0, [r0, #26]
    da88:	bd10      	pop	{r4, pc}
    da8a:	2000      	movs	r0, #0
    da8c:	bd10      	pop	{r4, pc}
    da8e:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    da92:	d201      	bcs.n	da98 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x124>
    da94:	0841      	lsrs	r1, r0, #1
    da96:	e000      	b.n	da9a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x126>
    da98:	21ff      	movs	r1, #255	; 0xff
    da9a:	1a40      	subs	r0, r0, r1
    da9c:	f240 6172 	movw	r1, #1650	; 0x672
    daa0:	4288      	cmp	r0, r1
    daa2:	db00      	blt.n	daa6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x132>
    daa4:	4608      	mov	r0, r1
    daa6:	b280      	uxth	r0, r0
    daa8:	4770      	bx	lr

0000daaa <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    daaa:	2101      	movs	r1, #1
    daac:	f7ff bf85 	b.w	d9ba <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

0000dab0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    dab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dab4:	4606      	mov	r6, r0
    dab6:	f342 0780 	sbfx	r7, r2, #2, #1
    daba:	7848      	ldrb	r0, [r1, #1]
    dabc:	460c      	mov	r4, r1
    dabe:	f022 0504 	bic.w	r5, r2, #4
    dac2:	1c7f      	adds	r7, r7, #1
    dac4:	b100      	cbz	r0, dac8 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    dac6:	b90d      	cbnz	r5, dacc <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    dac8:	4328      	orrs	r0, r5
    daca:	d104      	bne.n	dad6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    dacc:	b145      	cbz	r5, dae0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    dace:	2100      	movs	r1, #0
    dad0:	4620      	mov	r0, r4
    dad2:	f7f4 f837 	bl	1b44 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    dad6:	20ff      	movs	r0, #255	; 0xff
    dad8:	70a0      	strb	r0, [r4, #2]
    dada:	b11f      	cbz	r7, dae4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    dadc:	2000      	movs	r0, #0
    dade:	e002      	b.n	dae6 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    dae0:	2101      	movs	r1, #1
    dae2:	e7f5      	b.n	dad0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    dae4:	2002      	movs	r0, #2
    dae6:	1821      	adds	r1, r4, r0
    dae8:	7d09      	ldrb	r1, [r1, #20]
    daea:	2903      	cmp	r1, #3
    daec:	d102      	bne.n	daf4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    daee:	2d02      	cmp	r5, #2
    daf0:	d000      	beq.n	daf4 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    daf2:	1c40      	adds	r0, r0, #1
    daf4:	1822      	adds	r2, r4, r0
    daf6:	2101      	movs	r1, #1
    daf8:	7511      	strb	r1, [r2, #20]
    dafa:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    dafe:	2200      	movs	r2, #0
    db00:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    db04:	830a      	strh	r2, [r1, #24]
    db06:	6840      	ldr	r0, [r0, #4]
    db08:	70a2      	strb	r2, [r4, #2]
    db0a:	4631      	mov	r1, r6
    db0c:	f362 010f 	bfi	r1, r2, #0, #16
    db10:	e9c6 0100 	strd	r0, r1, [r6]
    db14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000db18 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    db18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    db1c:	461e      	mov	r6, r3
    db1e:	4613      	mov	r3, r2
    db20:	4604      	mov	r4, r0
    db22:	b109      	cbz	r1, db28 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    db24:	2000      	movs	r0, #0
    db26:	e000      	b.n	db2a <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    db28:	2002      	movs	r0, #2
    db2a:	21ff      	movs	r1, #255	; 0xff
    db2c:	70a1      	strb	r1, [r4, #2]
    db2e:	1821      	adds	r1, r4, r0
    db30:	7d0a      	ldrb	r2, [r1, #20]
    db32:	2a01      	cmp	r2, #1
    db34:	d003      	beq.n	db3e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    db36:	7d49      	ldrb	r1, [r1, #21]
    db38:	2901      	cmp	r1, #1
    db3a:	d10c      	bne.n	db56 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    db3c:	1c40      	adds	r0, r0, #1
    db3e:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    db42:	2700      	movs	r7, #0
    db44:	8b29      	ldrh	r1, [r5, #24]
    db46:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    db4a:	198a      	adds	r2, r1, r6
    db4c:	4562      	cmp	r2, ip
    db4e:	d905      	bls.n	db5c <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    db50:	4420      	add	r0, r4
    db52:	832f      	strh	r7, [r5, #24]
    db54:	7507      	strb	r7, [r0, #20]
    db56:	2000      	movs	r0, #0
    db58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    db5c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    db60:	4632      	mov	r2, r6
    db62:	6840      	ldr	r0, [r0, #4]
    db64:	4408      	add	r0, r1
    db66:	4619      	mov	r1, r3
    db68:	f003 f8a9 	bl	10cbe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    db6c:	8b28      	ldrh	r0, [r5, #24]
    db6e:	4430      	add	r0, r6
    db70:	8328      	strh	r0, [r5, #24]
    db72:	70a7      	strb	r7, [r4, #2]
    db74:	2001      	movs	r0, #1
    db76:	e7ef      	b.n	db58 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000db78 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    db78:	b510      	push	{r4, lr}
    db7a:	2101      	movs	r1, #1
    db7c:	f7ff ff36 	bl	d9ec <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    db80:	2800      	cmp	r0, #0
    db82:	d000      	beq.n	db86 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    db84:	2001      	movs	r0, #1
    db86:	bd10      	pop	{r4, pc}

0000db88 <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    db88:	2201      	movs	r2, #1
    db8a:	f7ff bf3c 	b.w	da06 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000db8e <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    db8e:	2200      	movs	r2, #0
    db90:	f7ff bf39 	b.w	da06 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000db94 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>:
    db94:	b510      	push	{r4, lr}
    db96:	2100      	movs	r1, #0
    db98:	f7ff ff28 	bl	d9ec <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    db9c:	2800      	cmp	r0, #0
    db9e:	d000      	beq.n	dba2 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I+0xe>
    dba0:	2001      	movs	r0, #1
    dba2:	bd10      	pop	{r4, pc}

0000dba4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    dba4:	b570      	push	{r4, r5, r6, lr}
    dba6:	b109      	cbz	r1, dbac <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    dba8:	2300      	movs	r3, #0
    dbaa:	e000      	b.n	dbae <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    dbac:	2302      	movs	r3, #2
    dbae:	21ff      	movs	r1, #255	; 0xff
    dbb0:	7081      	strb	r1, [r0, #2]
    dbb2:	18c1      	adds	r1, r0, r3
    dbb4:	2402      	movs	r4, #2
    dbb6:	7d0d      	ldrb	r5, [r1, #20]
    dbb8:	2d01      	cmp	r5, #1
    dbba:	d007      	beq.n	dbcc <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    dbbc:	7d4d      	ldrb	r5, [r1, #21]
    dbbe:	2d01      	cmp	r5, #1
    dbc0:	d009      	beq.n	dbd6 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    dbc2:	f44f 718b 	mov.w	r1, #278	; 0x116
    dbc6:	2009      	movs	r0, #9
    dbc8:	f7f3 facc 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dbcc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    dbd0:	831a      	strh	r2, [r3, #24]
    dbd2:	750c      	strb	r4, [r1, #20]
    dbd4:	e003      	b.n	dbde <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    dbd6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    dbda:	835a      	strh	r2, [r3, #26]
    dbdc:	754c      	strb	r4, [r1, #21]
    dbde:	2100      	movs	r1, #0
    dbe0:	7081      	strb	r1, [r0, #2]
    dbe2:	bd70      	pop	{r4, r5, r6, pc}

0000dbe4 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    dbe4:	2101      	movs	r1, #1
    dbe6:	7001      	strb	r1, [r0, #0]
    dbe8:	4770      	bx	lr

0000dbea <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    dbea:	2201      	movs	r2, #1
    dbec:	4611      	mov	r1, r2
    dbee:	f7ff bf38 	b.w	da62 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000dbf2 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    dbf2:	2201      	movs	r2, #1
    dbf4:	2100      	movs	r1, #0
    dbf6:	f7ff bf34 	b.w	da62 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000dbfa <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    dbfa:	2100      	movs	r1, #0
    dbfc:	f7ff bedd 	b.w	d9ba <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    dc00:	2800      	cmp	r0, #0
    dc02:	db09      	blt.n	dc18 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    dc04:	f000 021f 	and.w	r2, r0, #31
    dc08:	2101      	movs	r1, #1
    dc0a:	4091      	lsls	r1, r2
    dc0c:	0940      	lsrs	r0, r0, #5
    dc0e:	0080      	lsls	r0, r0, #2
    dc10:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    dc14:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    dc18:	4770      	bx	lr
    dc1a:	2800      	cmp	r0, #0
    dc1c:	db0d      	blt.n	dc3a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    dc1e:	f000 021f 	and.w	r2, r0, #31
    dc22:	2101      	movs	r1, #1
    dc24:	4091      	lsls	r1, r2
    dc26:	0940      	lsrs	r0, r0, #5
    dc28:	0080      	lsls	r0, r0, #2
    dc2a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    dc2e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    dc32:	f3bf 8f4f 	dsb	sy
    dc36:	f3bf 8f6f 	isb	sy
    dc3a:	4770      	bx	lr
    dc3c:	b510      	push	{r4, lr}
    dc3e:	200e      	movs	r0, #14
    dc40:	f7ff ffeb 	bl	dc1a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    dc44:	200e      	movs	r0, #14
    dc46:	f7ff ffdb 	bl	dc00 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    dc4a:	200f      	movs	r0, #15
    dc4c:	f7ff ffe5 	bl	dc1a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    dc50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dc54:	200f      	movs	r0, #15
    dc56:	f7ff bfd3 	b.w	dc00 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    dc5a:	2800      	cmp	r0, #0
    dc5c:	db09      	blt.n	dc72 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    dc5e:	f000 021f 	and.w	r2, r0, #31
    dc62:	2101      	movs	r1, #1
    dc64:	4091      	lsls	r1, r2
    dc66:	0940      	lsrs	r0, r0, #5
    dc68:	0080      	lsls	r0, r0, #2
    dc6a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    dc6e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    dc72:	4770      	bx	lr
    dc74:	5840      	ldr	r0, [r0, r1]
    dc76:	2800      	cmp	r0, #0
    dc78:	d000      	beq.n	dc7c <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    dc7a:	2001      	movs	r0, #1
    dc7c:	4770      	bx	lr

0000dc7e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    dc7e:	b510      	push	{r4, lr}
    dc80:	4604      	mov	r4, r0
    dc82:	4620      	mov	r0, r4
    dc84:	f7f4 f866 	bl	1d54 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x8>
    dc88:	2811      	cmp	r0, #17
    dc8a:	d0fa      	beq.n	dc82 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    dc8c:	bd10      	pop	{r4, pc}

0000dc8e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    dc8e:	b510      	push	{r4, lr}
    dc90:	f7ff fff5 	bl	dc7e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    dc94:	2800      	cmp	r0, #0
    dc96:	d003      	beq.n	dca0 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    dc98:	21a9      	movs	r1, #169	; 0xa9
    dc9a:	201d      	movs	r0, #29
    dc9c:	f7f3 fa62 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dca0:	bd10      	pop	{r4, pc}

0000dca2 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    dca2:	f7f4 b9b5 	b.w	2010 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000dca6 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    dca6:	f7f4 b9a3 	b.w	1ff0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000dcaa <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    dcaa:	b510      	push	{r4, lr}
    dcac:	4050      	eors	r0, r2
    dcae:	780a      	ldrb	r2, [r1, #0]
    dcb0:	781c      	ldrb	r4, [r3, #0]
    dcb2:	4062      	eors	r2, r4
    dcb4:	4410      	add	r0, r2
    dcb6:	784a      	ldrb	r2, [r1, #1]
    dcb8:	785c      	ldrb	r4, [r3, #1]
    dcba:	4062      	eors	r2, r4
    dcbc:	4410      	add	r0, r2
    dcbe:	788a      	ldrb	r2, [r1, #2]
    dcc0:	789c      	ldrb	r4, [r3, #2]
    dcc2:	4062      	eors	r2, r4
    dcc4:	4410      	add	r0, r2
    dcc6:	78ca      	ldrb	r2, [r1, #3]
    dcc8:	78dc      	ldrb	r4, [r3, #3]
    dcca:	4062      	eors	r2, r4
    dccc:	4410      	add	r0, r2
    dcce:	790a      	ldrb	r2, [r1, #4]
    dcd0:	791c      	ldrb	r4, [r3, #4]
    dcd2:	7949      	ldrb	r1, [r1, #5]
    dcd4:	4062      	eors	r2, r4
    dcd6:	4410      	add	r0, r2
    dcd8:	795a      	ldrb	r2, [r3, #5]
    dcda:	4051      	eors	r1, r2
    dcdc:	42c1      	cmn	r1, r0
    dcde:	d101      	bne.n	dce4 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    dce0:	2001      	movs	r0, #1
    dce2:	bd10      	pop	{r4, pc}
    dce4:	2000      	movs	r0, #0
    dce6:	bd10      	pop	{r4, pc}

0000dce8 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    dce8:	b510      	push	{r4, lr}
    dcea:	2900      	cmp	r1, #0
    dcec:	4604      	mov	r4, r0
    dcee:	f04f 0106 	mov.w	r1, #6
    dcf2:	d002      	beq.n	dcfa <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    dcf4:	f7f3 fad8 	bl	12a8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    dcf8:	e001      	b.n	dcfe <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    dcfa:	f7f3 fae3 	bl	12c4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    dcfe:	7960      	ldrb	r0, [r4, #5]
    dd00:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    dd04:	7160      	strb	r0, [r4, #5]
    dd06:	bd10      	pop	{r4, pc}

0000dd08 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    dd08:	4770      	bx	lr

0000dd0a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    dd0a:	b530      	push	{r4, r5, lr}
    dd0c:	460c      	mov	r4, r1
    dd0e:	4605      	mov	r5, r0
    dd10:	b08d      	sub	sp, #52	; 0x34
    dd12:	f04f 0103 	mov.w	r1, #3
    dd16:	f104 0003 	add.w	r0, r4, #3
    dd1a:	b112      	cbz	r2, dd22 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    dd1c:	f7f3 fac4 	bl	12a8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    dd20:	e001      	b.n	dd26 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    dd22:	f7f3 facf 	bl	12c4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    dd26:	7960      	ldrb	r0, [r4, #5]
    dd28:	220d      	movs	r2, #13
    dd2a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    dd2e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    dd32:	7160      	strb	r0, [r4, #5]
    dd34:	2100      	movs	r1, #0
    dd36:	a804      	add	r0, sp, #16
    dd38:	f003 f83b 	bl	10db2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    dd3c:	78e0      	ldrb	r0, [r4, #3]
    dd3e:	f88d 001f 	strb.w	r0, [sp, #31]
    dd42:	7920      	ldrb	r0, [r4, #4]
    dd44:	f88d 001e 	strb.w	r0, [sp, #30]
    dd48:	7960      	ldrb	r0, [r4, #5]
    dd4a:	f88d 001d 	strb.w	r0, [sp, #29]
    dd4e:	2210      	movs	r2, #16
    dd50:	4629      	mov	r1, r5
    dd52:	4668      	mov	r0, sp
    dd54:	f002 ffb3 	bl	10cbe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dd58:	4668      	mov	r0, sp
    dd5a:	f7ff ff98 	bl	dc8e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    dd5e:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    dd62:	7020      	strb	r0, [r4, #0]
    dd64:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    dd68:	7060      	strb	r0, [r4, #1]
    dd6a:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    dd6e:	70a0      	strb	r0, [r4, #2]
    dd70:	b00d      	add	sp, #52	; 0x34
    dd72:	bd30      	pop	{r4, r5, pc}

0000dd74 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A>:
    dd74:	f7f4 bcb6 	b.w	26e4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b8>
    dd78:	07c1      	lsls	r1, r0, #31
    dd7a:	d001      	beq.n	dd80 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0xc>
    dd7c:	2001      	movs	r0, #1
    dd7e:	4770      	bx	lr
    dd80:	0780      	lsls	r0, r0, #30
    dd82:	d501      	bpl.n	dd88 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x14>
    dd84:	2002      	movs	r0, #2
    dd86:	4770      	bx	lr
    dd88:	2000      	movs	r0, #0
    dd8a:	4770      	bx	lr
    dd8c:	b510      	push	{r4, lr}
    dd8e:	2801      	cmp	r0, #1
    dd90:	d008      	beq.n	dda4 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x30>
    dd92:	2802      	cmp	r0, #2
    dd94:	d004      	beq.n	dda0 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x2c>
    dd96:	f240 4121 	movw	r1, #1057	; 0x421
    dd9a:	2006      	movs	r0, #6
    dd9c:	f7f3 f9e2 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dda0:	2001      	movs	r0, #1
    dda2:	bd10      	pop	{r4, pc}
    dda4:	2000      	movs	r0, #0
    dda6:	bd10      	pop	{r4, pc}
    dda8:	2900      	cmp	r1, #0
    ddaa:	d004      	beq.n	ddb6 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x42>
    ddac:	2801      	cmp	r0, #1
    ddae:	d003      	beq.n	ddb8 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x44>
    ddb0:	2901      	cmp	r1, #1
    ddb2:	d001      	beq.n	ddb8 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x44>
    ddb4:	2002      	movs	r0, #2
    ddb6:	4770      	bx	lr
    ddb8:	2001      	movs	r0, #1
    ddba:	4770      	bx	lr
    ddbc:	f7ff bc90 	b.w	d6e0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000ddc0 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    ddc0:	2101      	movs	r1, #1
    ddc2:	f7f4 bf09 	b.w	2bd8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc>

0000ddc6 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    ddc6:	b510      	push	{r4, lr}
    ddc8:	f002 fd4c 	bl	10864 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    ddcc:	b118      	cbz	r0, ddd6 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    ddce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ddd2:	f7f9 beef 	b.w	7bb4 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    ddd6:	20ff      	movs	r0, #255	; 0xff
    ddd8:	bd10      	pop	{r4, pc}

0000ddda <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    ddda:	b510      	push	{r4, lr}
    dddc:	f7f4 ff28 	bl	2c30 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x64>
    dde0:	2808      	cmp	r0, #8
    dde2:	d003      	beq.n	ddec <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    dde4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dde8:	f7f4 bf0e 	b.w	2c08 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    ddec:	bd10      	pop	{r4, pc}

0000ddee <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    ddee:	b570      	push	{r4, r5, r6, lr}
    ddf0:	460e      	mov	r6, r1
    ddf2:	b08c      	sub	sp, #48	; 0x30
    ddf4:	4614      	mov	r4, r2
    ddf6:	4601      	mov	r1, r0
    ddf8:	461d      	mov	r5, r3
    ddfa:	2210      	movs	r2, #16
    ddfc:	4668      	mov	r0, sp
    ddfe:	f000 f929 	bl	e054 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    de02:	2210      	movs	r2, #16
    de04:	4631      	mov	r1, r6
    de06:	a804      	add	r0, sp, #16
    de08:	f000 f924 	bl	e054 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    de0c:	4668      	mov	r0, sp
    de0e:	f7ff ff3e 	bl	dc8e <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    de12:	a908      	add	r1, sp, #32
    de14:	f04f 0210 	mov.w	r2, #16
    de18:	4628      	mov	r0, r5
    de1a:	b11c      	cbz	r4, de24 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    de1c:	f000 f91a 	bl	e054 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    de20:	b00c      	add	sp, #48	; 0x30
    de22:	bd70      	pop	{r4, r5, r6, pc}
    de24:	f002 ff4b 	bl	10cbe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    de28:	e7fa      	b.n	de20 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>

0000de2a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    de2a:	b510      	push	{r4, lr}
    de2c:	460c      	mov	r4, r1
    de2e:	2100      	movs	r1, #0
    de30:	f7f3 fcc6 	bl	17c0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    de34:	6060      	str	r0, [r4, #4]
    de36:	b118      	cbz	r0, de40 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    de38:	2001      	movs	r0, #1
    de3a:	7020      	strb	r0, [r4, #0]
    de3c:	2000      	movs	r0, #0
    de3e:	bd10      	pop	{r4, pc}
    de40:	2002      	movs	r0, #2
    de42:	bd10      	pop	{r4, pc}

0000de44 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    de44:	f240 41e2 	movw	r1, #1250	; 0x4e2
    de48:	4348      	muls	r0, r1
    de4a:	4770      	bx	lr

0000de4c <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    de4c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    de50:	fbb0 f0f1 	udiv	r0, r0, r1
    de54:	b280      	uxth	r0, r0
    de56:	4770      	bx	lr

0000de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    de58:	b510      	push	{r4, lr}
    de5a:	f1a2 0310 	sub.w	r3, r2, #16
    de5e:	290d      	cmp	r1, #13
    de60:	d24d      	bcs.n	defe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de62:	e8df f001 	tbb	[pc, r1]
    de66:	0907      	.short	0x0907
    de68:	1d1a150e 	.word	0x1d1a150e
    de6c:	4e2c2921 	.word	0x4e2c2921
    de70:	0048362f 	.word	0x0048362f
    de74:	b3f2      	cbz	r2, def4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9c>
    de76:	e042      	b.n	defe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de78:	2a06      	cmp	r2, #6
    de7a:	d03e      	beq.n	defa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de7c:	2a07      	cmp	r2, #7
    de7e:	d03c      	beq.n	defa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de80:	e03d      	b.n	defe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de82:	2a0b      	cmp	r2, #11
    de84:	d039      	beq.n	defa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de86:	2a0c      	cmp	r2, #12
    de88:	d037      	beq.n	defa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de8a:	2a0a      	cmp	r2, #10
    de8c:	d035      	beq.n	defa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de8e:	e036      	b.n	defe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de90:	2a0d      	cmp	r2, #13
    de92:	d032      	beq.n	defa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de94:	2a0e      	cmp	r2, #14
    de96:	d030      	beq.n	defa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de98:	e031      	b.n	defe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de9a:	2b0c      	cmp	r3, #12
    de9c:	d92d      	bls.n	defa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de9e:	e02e      	b.n	defe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dea0:	3a11      	subs	r2, #17
    dea2:	2a0b      	cmp	r2, #11
    dea4:	d929      	bls.n	defa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dea6:	e02a      	b.n	defe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dea8:	2b03      	cmp	r3, #3
    deaa:	d926      	bls.n	defa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    deac:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    deb0:	b1f8      	cbz	r0, def2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9a>
    deb2:	2a1c      	cmp	r2, #28
    deb4:	d921      	bls.n	defa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    deb6:	e022      	b.n	defe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    deb8:	2a04      	cmp	r2, #4
    deba:	d01e      	beq.n	defa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    debc:	e01f      	b.n	defe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    debe:	2a01      	cmp	r2, #1
    dec0:	d01b      	beq.n	defa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dec2:	e01c      	b.n	defe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dec4:	2a1d      	cmp	r2, #29
    dec6:	d018      	beq.n	defa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dec8:	2a1e      	cmp	r2, #30
    deca:	d016      	beq.n	defa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    decc:	2a1f      	cmp	r2, #31
    dece:	d014      	beq.n	defa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ded0:	e015      	b.n	defe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    ded2:	2a20      	cmp	r2, #32
    ded4:	d011      	beq.n	defa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ded6:	2a21      	cmp	r2, #33	; 0x21
    ded8:	d00f      	beq.n	defa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    deda:	2a22      	cmp	r2, #34	; 0x22
    dedc:	d00d      	beq.n	defa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dede:	2a23      	cmp	r2, #35	; 0x23
    dee0:	d00b      	beq.n	defa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dee2:	2a24      	cmp	r2, #36	; 0x24
    dee4:	d009      	beq.n	defa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dee6:	2a25      	cmp	r2, #37	; 0x25
    dee8:	d007      	beq.n	defa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    deea:	2a26      	cmp	r2, #38	; 0x26
    deec:	d005      	beq.n	defa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    deee:	2a2e      	cmp	r2, #46	; 0x2e
    def0:	d003      	beq.n	defa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    def2:	e004      	b.n	defe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    def4:	e001      	b.n	defa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    def6:	2a28      	cmp	r2, #40	; 0x28
    def8:	d101      	bne.n	defe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    defa:	2001      	movs	r0, #1
    defc:	bd10      	pop	{r4, pc}
    defe:	2000      	movs	r0, #0
    df00:	bd10      	pop	{r4, pc}
    df02:	2a0f      	cmp	r2, #15
    df04:	d1fb      	bne.n	defe <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    df06:	e7f8      	b.n	defa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>

0000df08 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    df08:	280b      	cmp	r0, #11
    df0a:	d019      	beq.n	df40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    df0c:	280c      	cmp	r0, #12
    df0e:	d017      	beq.n	df40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    df10:	280a      	cmp	r0, #10
    df12:	d015      	beq.n	df40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    df14:	280d      	cmp	r0, #13
    df16:	d013      	beq.n	df40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    df18:	280e      	cmp	r0, #14
    df1a:	d011      	beq.n	df40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    df1c:	2820      	cmp	r0, #32
    df1e:	d00f      	beq.n	df40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    df20:	2821      	cmp	r0, #33	; 0x21
    df22:	d00d      	beq.n	df40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    df24:	2822      	cmp	r0, #34	; 0x22
    df26:	d00b      	beq.n	df40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    df28:	2823      	cmp	r0, #35	; 0x23
    df2a:	d009      	beq.n	df40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    df2c:	2824      	cmp	r0, #36	; 0x24
    df2e:	d007      	beq.n	df40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    df30:	2825      	cmp	r0, #37	; 0x25
    df32:	d005      	beq.n	df40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    df34:	2826      	cmp	r0, #38	; 0x26
    df36:	d003      	beq.n	df40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    df38:	282e      	cmp	r0, #46	; 0x2e
    df3a:	d001      	beq.n	df40 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    df3c:	2000      	movs	r0, #0
    df3e:	4770      	bx	lr
    df40:	2001      	movs	r0, #1
    df42:	4770      	bx	lr

0000df44 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    df44:	f011 0f0c 	tst.w	r1, #12
    df48:	d018      	beq.n	df7c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    df4a:	074a      	lsls	r2, r1, #29
    df4c:	f44f 7116 	mov.w	r1, #600	; 0x258
    df50:	2a00      	cmp	r2, #0
    df52:	da02      	bge.n	df5a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    df54:	f04f 0210 	mov.w	r2, #16
    df58:	e001      	b.n	df5e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    df5a:	f04f 0240 	mov.w	r2, #64	; 0x40
    df5e:	da01      	bge.n	df64 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    df60:	f04f 0196 	mov.w	r1, #150	; 0x96
    df64:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    df68:	eba0 0301 	sub.w	r3, r0, r1
    df6c:	4288      	cmp	r0, r1
    df6e:	d903      	bls.n	df78 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    df70:	fb93 f0f2 	sdiv	r0, r3, r2
    df74:	b280      	uxth	r0, r0
    df76:	4770      	bx	lr
    df78:	2000      	movs	r0, #0
    df7a:	4770      	bx	lr
    df7c:	2902      	cmp	r1, #2
    df7e:	d008      	beq.n	df92 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    df80:	2870      	cmp	r0, #112	; 0x70
    df82:	d9f9      	bls.n	df78 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    df84:	3870      	subs	r0, #112	; 0x70
    df86:	17c1      	asrs	r1, r0, #31
    df88:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    df8c:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    df90:	4770      	bx	lr
    df92:	283c      	cmp	r0, #60	; 0x3c
    df94:	d9f0      	bls.n	df78 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    df96:	383c      	subs	r0, #60	; 0x3c
    df98:	17c1      	asrs	r1, r0, #31
    df9a:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    df9e:	f3c0 008f 	ubfx	r0, r0, #2, #16
    dfa2:	4770      	bx	lr

0000dfa4 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    dfa4:	6809      	ldr	r1, [r1, #0]
    dfa6:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    dfaa:	4770      	bx	lr

0000dfac <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>:
    dfac:	07c1      	lsls	r1, r0, #31
    dfae:	d001      	beq.n	dfb4 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x8>
    dfb0:	2001      	movs	r0, #1
    dfb2:	4770      	bx	lr
    dfb4:	0781      	lsls	r1, r0, #30
    dfb6:	d501      	bpl.n	dfbc <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x10>
    dfb8:	2002      	movs	r0, #2
    dfba:	4770      	bx	lr
    dfbc:	0740      	lsls	r0, r0, #29
    dfbe:	d501      	bpl.n	dfc4 <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI+0x18>
    dfc0:	2008      	movs	r0, #8
    dfc2:	4770      	bx	lr
    dfc4:	2000      	movs	r0, #0
    dfc6:	4770      	bx	lr

0000dfc8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    dfc8:	b510      	push	{r4, lr}
    dfca:	f640 12c4 	movw	r2, #2500	; 0x9c4
    dfce:	2901      	cmp	r1, #1
    dfd0:	d006      	beq.n	dfe0 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    dfd2:	2902      	cmp	r1, #2
    dfd4:	d005      	beq.n	dfe2 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    dfd6:	f44f 7168 	mov.w	r1, #928	; 0x3a0
    dfda:	2029      	movs	r0, #41	; 0x29
    dfdc:	f7f3 f8c2 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dfe0:	b108      	cbz	r0, dfe6 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    dfe2:	4610      	mov	r0, r2
    dfe4:	bd10      	pop	{r4, pc}
    dfe6:	f240 40e2 	movw	r0, #1250	; 0x4e2
    dfea:	bd10      	pop	{r4, pc}

0000dfec <sym_AIEQYZJFZQBQ5LEMJNMQV56TMLIGCBAC63QLHGI>:
    dfec:	f880 106e 	strb.w	r1, [r0, #110]	; 0x6e
    dff0:	f001 bcf8 	b.w	f9e4 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>

0000dff4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    dff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dff8:	4607      	mov	r7, r0
    dffa:	460e      	mov	r6, r1
    dffc:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    e000:	f7fc fbde 	bl	a7c0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    e004:	b198      	cbz	r0, e02e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    e006:	b31e      	cbz	r6, e050 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    e008:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    e00c:	1b40      	subs	r0, r0, r5
    e00e:	2300      	movs	r3, #0
    e010:	eb61 0104 	sbc.w	r1, r1, r4
    e014:	461a      	mov	r2, r3
    e016:	1a1b      	subs	r3, r3, r0
    e018:	418a      	sbcs	r2, r1
    e01a:	da19      	bge.n	e050 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    e01c:	1c42      	adds	r2, r0, #1
    e01e:	f171 0100 	sbcs.w	r1, r1, #0
    e022:	db07      	blt.n	e034 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    e024:	f240 211a 	movw	r1, #538	; 0x21a
    e028:	2029      	movs	r0, #41	; 0x29
    e02a:	f7f3 f89b 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e02e:	f44f 7104 	mov.w	r1, #528	; 0x210
    e032:	e7f9      	b.n	e028 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    e034:	4430      	add	r0, r6
    e036:	1e40      	subs	r0, r0, #1
    e038:	fbb0 f1f6 	udiv	r1, r0, r6
    e03c:	fb01 f006 	mul.w	r0, r1, r6
    e040:	1828      	adds	r0, r5, r0
    e042:	f144 0400 	adc.w	r4, r4, #0
    e046:	e9c7 0404 	strd	r0, r4, [r7, #16]
    e04a:	4608      	mov	r0, r1
    e04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e050:	2000      	movs	r0, #0
    e052:	e7fb      	b.n	e04c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000e054 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    e054:	b530      	push	{r4, r5, lr}
    e056:	4613      	mov	r3, r2
    e058:	e006      	b.n	e068 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    e05a:	18cc      	adds	r4, r1, r3
    e05c:	1ad5      	subs	r5, r2, r3
    e05e:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    e062:	1e5b      	subs	r3, r3, #1
    e064:	5544      	strb	r4, [r0, r5]
    e066:	b2db      	uxtb	r3, r3
    e068:	2b00      	cmp	r3, #0
    e06a:	d1f6      	bne.n	e05a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    e06c:	bd30      	pop	{r4, r5, pc}

0000e06e <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    e06e:	2300      	movs	r3, #0
    e070:	6403      	str	r3, [r0, #64]	; 0x40
    e072:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
    e076:	f240 2371 	movw	r3, #625	; 0x271
    e07a:	435a      	muls	r2, r3
    e07c:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    e080:	1e52      	subs	r2, r2, #1
    e082:	fbb2 f1f1 	udiv	r1, r2, r1
    e086:	6441      	str	r1, [r0, #68]	; 0x44
    e088:	4770      	bx	lr

0000e08a <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q>:
    e08a:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    e08e:	4607      	mov	r7, r0
    e090:	4690      	mov	r8, r2
    e092:	468b      	mov	fp, r1
    e094:	2601      	movs	r6, #1
    e096:	4608      	mov	r0, r1
    e098:	f000 f9e5 	bl	e466 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    e09c:	4682      	mov	sl, r0
    e09e:	4658      	mov	r0, fp
    e0a0:	f000 f9e3 	bl	e46a <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    e0a4:	4681      	mov	r9, r0
    e0a6:	f7ff ff81 	bl	dfac <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    e0aa:	4604      	mov	r4, r0
    e0ac:	4650      	mov	r0, sl
    e0ae:	f7ff ff7d 	bl	dfac <sym_FRDCUWW6PTM2YTBQLG5XNT6WJGPFH2XWEMJXJRI>
    e0b2:	4605      	mov	r5, r0
    e0b4:	ea54 0005 	orrs.w	r0, r4, r5
    e0b8:	d100      	bne.n	e0bc <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x32>
    e0ba:	2600      	movs	r6, #0
    e0bc:	f7f9 fca2 	bl	7a04 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    e0c0:	ea10 0f09 	tst.w	r0, r9
    e0c4:	d100      	bne.n	e0c8 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x3e>
    e0c6:	2400      	movs	r4, #0
    e0c8:	f7f9 fc9c 	bl	7a04 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    e0cc:	ea10 0f0a 	tst.w	r0, sl
    e0d0:	d100      	bne.n	e0d4 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x4a>
    e0d2:	2500      	movs	r5, #0
    e0d4:	f897 006a 	ldrb.w	r0, [r7, #106]	; 0x6a
    e0d8:	42a0      	cmp	r0, r4
    e0da:	d100      	bne.n	e0de <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x54>
    e0dc:	2400      	movs	r4, #0
    e0de:	f888 4000 	strb.w	r4, [r8]
    e0e2:	f897 006b 	ldrb.w	r0, [r7, #107]	; 0x6b
    e0e6:	42a8      	cmp	r0, r5
    e0e8:	d100      	bne.n	e0ec <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x62>
    e0ea:	2500      	movs	r5, #0
    e0ec:	f888 5001 	strb.w	r5, [r8, #1]
    e0f0:	b974      	cbnz	r4, e110 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    e0f2:	b96d      	cbnz	r5, e110 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    e0f4:	4658      	mov	r0, fp
    e0f6:	f000 f9a4 	bl	e442 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    e0fa:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
    e0fe:	1a40      	subs	r0, r0, r1
    e100:	b200      	sxth	r0, r0
    e102:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    e106:	4288      	cmp	r0, r1
    e108:	dc01      	bgt.n	e10e <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x84>
    e10a:	2800      	cmp	r0, #0
    e10c:	dc00      	bgt.n	e110 <sym_ZX776SCJSI3JTFST57XOZBXAMGDDC7FRRHZEJ7Q+0x86>
    e10e:	2600      	movs	r6, #0
    e110:	4630      	mov	r0, r6
    e112:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000e116 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    e116:	f240 41e2 	movw	r1, #1250	; 0x4e2
    e11a:	4348      	muls	r0, r1
    e11c:	4770      	bx	lr

0000e11e <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    e11e:	f240 2171 	movw	r1, #625	; 0x271
    e122:	fb10 f001 	smulbb	r0, r0, r1
    e126:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e12a:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    e12e:	4770      	bx	lr

0000e130 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    e130:	b510      	push	{r4, lr}
    e132:	2300      	movs	r3, #0
    e134:	461a      	mov	r2, r3
    e136:	e003      	b.n	e140 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    e138:	5c84      	ldrb	r4, [r0, r2]
    e13a:	4323      	orrs	r3, r4
    e13c:	1c52      	adds	r2, r2, #1
    e13e:	b2d2      	uxtb	r2, r2
    e140:	428a      	cmp	r2, r1
    e142:	d3f9      	bcc.n	e138 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    e144:	b10b      	cbz	r3, e14a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    e146:	2000      	movs	r0, #0
    e148:	bd10      	pop	{r4, pc}
    e14a:	2001      	movs	r0, #1
    e14c:	bd10      	pop	{r4, pc}

0000e14e <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>:
    e14e:	2100      	movs	r1, #0
    e150:	4608      	mov	r0, r1
    e152:	f7f4 be5b 	b.w	2e0c <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>
    e156:	4401      	add	r1, r0
    e158:	2914      	cmp	r1, #20
    e15a:	dd01      	ble.n	e160 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x12>
    e15c:	2014      	movs	r0, #20
    e15e:	4770      	bx	lr
    e160:	f06f 007e 	mvn.w	r0, #126	; 0x7e
    e164:	4281      	cmp	r1, r0
    e166:	dbfa      	blt.n	e15e <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x10>
    e168:	b248      	sxtb	r0, r1
    e16a:	4770      	bx	lr

0000e16c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    e16c:	b570      	push	{r4, r5, r6, lr}
    e16e:	4605      	mov	r5, r0
    e170:	ea81 4011 	eor.w	r0, r1, r1, lsr #16
    e174:	b286      	uxth	r6, r0
    e176:	4610      	mov	r0, r2
    e178:	7aec      	ldrb	r4, [r5, #11]
    e17a:	4631      	mov	r1, r6
    e17c:	f000 f863 	bl	e246 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x52>
    e180:	4070      	eors	r0, r6
    e182:	2125      	movs	r1, #37	; 0x25
    e184:	fbb0 f2f1 	udiv	r2, r0, r1
    e188:	fb01 0112 	mls	r1, r1, r2, r0
    e18c:	eb05 02d1 	add.w	r2, r5, r1, lsr #3
    e190:	f001 0307 	and.w	r3, r1, #7
    e194:	7852      	ldrb	r2, [r2, #1]
    e196:	2601      	movs	r6, #1
    e198:	409e      	lsls	r6, r3
    e19a:	4232      	tst	r2, r6
    e19c:	d001      	beq.n	e1a2 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x36>
    e19e:	4608      	mov	r0, r1
    e1a0:	bd70      	pop	{r4, r5, r6, pc}
    e1a2:	4344      	muls	r4, r0
    e1a4:	0c21      	lsrs	r1, r4, #16
    e1a6:	4628      	mov	r0, r5
    e1a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e1ac:	f7f4 be7c 	b.w	2ea8 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x9c>

0000e1b0 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    e1b0:	b510      	push	{r4, lr}
    e1b2:	4604      	mov	r4, r0
    e1b4:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    e1b8:	b108      	cbz	r0, e1be <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    e1ba:	2825      	cmp	r0, #37	; 0x25
    e1bc:	d901      	bls.n	e1c2 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    e1be:	2012      	movs	r0, #18
    e1c0:	bd10      	pop	{r4, pc}
    e1c2:	b132      	cbz	r2, e1d2 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>
    e1c4:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
    e1c8:	b128      	cbz	r0, e1d6 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x26>
    e1ca:	2801      	cmp	r0, #1
    e1cc:	d009      	beq.n	e1e2 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x32>
    e1ce:	201f      	movs	r0, #31
    e1d0:	bd10      	pop	{r4, pc}
    e1d2:	2000      	movs	r0, #0
    e1d4:	bd10      	pop	{r4, pc}
    e1d6:	4620      	mov	r0, r4
    e1d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e1dc:	4611      	mov	r1, r2
    e1de:	f7f4 be1b 	b.w	2e18 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0xc>
    e1e2:	8aa2      	ldrh	r2, [r4, #20]
    e1e4:	6949      	ldr	r1, [r1, #20]
    e1e6:	f104 0025 	add.w	r0, r4, #37	; 0x25
    e1ea:	f7ff ffbf 	bl	e16c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    e1ee:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    e1f2:	e7ee      	b.n	e1d2 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>

0000e1f4 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    e1f4:	b570      	push	{r4, r5, r6, lr}
    e1f6:	4604      	mov	r4, r0
    e1f8:	1c40      	adds	r0, r0, #1
    e1fa:	4288      	cmp	r0, r1
    e1fc:	d004      	beq.n	e208 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
    e1fe:	6808      	ldr	r0, [r1, #0]
    e200:	f8c4 0001 	str.w	r0, [r4, #1]
    e204:	7908      	ldrb	r0, [r1, #4]
    e206:	7160      	strb	r0, [r4, #5]
    e208:	7960      	ldrb	r0, [r4, #5]
    e20a:	f000 001f 	and.w	r0, r0, #31
    e20e:	7160      	strb	r0, [r4, #5]
    e210:	2000      	movs	r0, #0
    e212:	72e0      	strb	r0, [r4, #11]
    e214:	4605      	mov	r5, r0
    e216:	1966      	adds	r6, r4, r5
    e218:	7870      	ldrb	r0, [r6, #1]
    e21a:	f000 faed 	bl	e7f8 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    e21e:	71b0      	strb	r0, [r6, #6]
    e220:	7ae1      	ldrb	r1, [r4, #11]
    e222:	1c6d      	adds	r5, r5, #1
    e224:	4408      	add	r0, r1
    e226:	b2ed      	uxtb	r5, r5
    e228:	72e0      	strb	r0, [r4, #11]
    e22a:	2d05      	cmp	r5, #5
    e22c:	d3f3      	bcc.n	e216 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
    e22e:	bd70      	pop	{r4, r5, r6, pc}
    e230:	b2c1      	uxtb	r1, r0
    e232:	fa91 f1a1 	rbit	r1, r1
    e236:	0a00      	lsrs	r0, r0, #8
    e238:	0e09      	lsrs	r1, r1, #24
    e23a:	fa90 f0a0 	rbit	r0, r0
    e23e:	0e00      	lsrs	r0, r0, #24
    e240:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    e244:	4770      	bx	lr
    e246:	b570      	push	{r4, r5, r6, lr}
    e248:	460d      	mov	r5, r1
    e24a:	4048      	eors	r0, r1
    e24c:	2400      	movs	r4, #0
    e24e:	f7ff ffef 	bl	e230 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x3c>
    e252:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    e256:	1c64      	adds	r4, r4, #1
    e258:	4428      	add	r0, r5
    e25a:	b2e4      	uxtb	r4, r4
    e25c:	b280      	uxth	r0, r0
    e25e:	2c03      	cmp	r4, #3
    e260:	d3f5      	bcc.n	e24e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x5a>
    e262:	bd70      	pop	{r4, r5, r6, pc}

0000e264 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>:
    e264:	7802      	ldrb	r2, [r0, #0]
    e266:	f002 020f 	and.w	r2, r2, #15
    e26a:	2a03      	cmp	r2, #3
    e26c:	d003      	beq.n	e276 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x12>
    e26e:	2a05      	cmp	r2, #5
    e270:	d104      	bne.n	e27c <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x18>
    e272:	f000 b92e 	b.w	e4d2 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4>
    e276:	7840      	ldrb	r0, [r0, #1]
    e278:	280c      	cmp	r0, #12
    e27a:	d001      	beq.n	e280 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x1c>
    e27c:	2000      	movs	r0, #0
    e27e:	4770      	bx	lr
    e280:	2001      	movs	r0, #1
    e282:	4770      	bx	lr

0000e284 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>:
    e284:	b570      	push	{r4, r5, r6, lr}
    e286:	4614      	mov	r4, r2
    e288:	4605      	mov	r5, r0
    e28a:	2a1f      	cmp	r2, #31
    e28c:	d903      	bls.n	e296 <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA+0x12>
    e28e:	21ee      	movs	r1, #238	; 0xee
    e290:	202a      	movs	r0, #42	; 0x2a
    e292:	f7f2 ff67 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e296:	f105 0009 	add.w	r0, r5, #9
    e29a:	f002 fd10 	bl	10cbe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e29e:	1da4      	adds	r4, r4, #6
    e2a0:	706c      	strb	r4, [r5, #1]
    e2a2:	bd70      	pop	{r4, r5, r6, pc}

0000e2a4 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    e2a4:	b510      	push	{r4, lr}
    e2a6:	7802      	ldrb	r2, [r0, #0]
    e2a8:	f001 030f 	and.w	r3, r1, #15
    e2ac:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    e2b0:	431a      	orrs	r2, r3
    e2b2:	7002      	strb	r2, [r0, #0]
    e2b4:	2907      	cmp	r1, #7
    e2b6:	d20c      	bcs.n	e2d2 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    e2b8:	e8df f001 	tbb	[pc, r1]
    e2bc:	06040604 	.word	0x06040604
    e2c0:	00040804 	.word	0x00040804
    e2c4:	2106      	movs	r1, #6
    e2c6:	e002      	b.n	e2ce <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    e2c8:	210c      	movs	r1, #12
    e2ca:	e000      	b.n	e2ce <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    e2cc:	2122      	movs	r1, #34	; 0x22
    e2ce:	7041      	strb	r1, [r0, #1]
    e2d0:	bd10      	pop	{r4, pc}
    e2d2:	21a8      	movs	r1, #168	; 0xa8
    e2d4:	202a      	movs	r0, #42	; 0x2a
    e2d6:	f7f2 ff45 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e2da <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    e2da:	680a      	ldr	r2, [r1, #0]
    e2dc:	f840 2f09 	str.w	r2, [r0, #9]!
    e2e0:	8889      	ldrh	r1, [r1, #4]
    e2e2:	8081      	strh	r1, [r0, #4]
    e2e4:	4770      	bx	lr

0000e2e6 <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    e2e6:	7802      	ldrb	r2, [r0, #0]
    e2e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    e2ec:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    e2f0:	7002      	strb	r2, [r0, #0]
    e2f2:	4770      	bx	lr

0000e2f4 <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    e2f4:	680a      	ldr	r2, [r1, #0]
    e2f6:	f840 2f03 	str.w	r2, [r0, #3]!
    e2fa:	8889      	ldrh	r1, [r1, #4]
    e2fc:	8081      	strh	r1, [r0, #4]
    e2fe:	4770      	bx	lr

0000e300 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    e300:	7802      	ldrb	r2, [r0, #0]
    e302:	2340      	movs	r3, #64	; 0x40
    e304:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    e308:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    e30c:	430a      	orrs	r2, r1
    e30e:	7002      	strb	r2, [r0, #0]
    e310:	4770      	bx	lr

0000e312 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>:
    e312:	b570      	push	{r4, r5, r6, lr}
    e314:	4614      	mov	r4, r2
    e316:	4605      	mov	r5, r0
    e318:	2a1f      	cmp	r2, #31
    e31a:	d904      	bls.n	e326 <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x14>
    e31c:	f44f 7188 	mov.w	r1, #272	; 0x110
    e320:	202a      	movs	r0, #42	; 0x2a
    e322:	f7f2 ff1f 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e326:	f105 0009 	add.w	r0, r5, #9
    e32a:	f002 fcc8 	bl	10cbe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e32e:	1da4      	adds	r4, r4, #6
    e330:	706c      	strb	r4, [r5, #1]
    e332:	bd70      	pop	{r4, r5, r6, pc}

0000e334 <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>:
    e334:	6842      	ldr	r2, [r0, #4]
    e336:	600a      	str	r2, [r1, #0]
    e338:	7a00      	ldrb	r0, [r0, #8]
    e33a:	7108      	strb	r0, [r1, #4]
    e33c:	4770      	bx	lr

0000e33e <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>:
    e33e:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    e342:	4770      	bx	lr

0000e344 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>:
    e344:	b570      	push	{r4, r5, r6, lr}
    e346:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    e34a:	f8b0 4009 	ldrh.w	r4, [r0, #9]
    e34e:	f830 5f05 	ldrh.w	r5, [r0, #5]!
    e352:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    e356:	88c0      	ldrh	r0, [r0, #6]
    e358:	b131      	cbz	r1, e368 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    e35a:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    e35e:	d903      	bls.n	e368 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    e360:	f640 5107 	movw	r1, #3335	; 0xd07
    e364:	428a      	cmp	r2, r1
    e366:	d90b      	bls.n	e380 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x3c>
    e368:	1f91      	subs	r1, r2, #6
    e36a:	f640 467a 	movw	r6, #3194	; 0xc7a
    e36e:	42b1      	cmp	r1, r6
    e370:	d810      	bhi.n	e394 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e372:	b17b      	cbz	r3, e394 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e374:	2b08      	cmp	r3, #8
    e376:	d80d      	bhi.n	e394 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e378:	4293      	cmp	r3, r2
    e37a:	d20b      	bcs.n	e394 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e37c:	4295      	cmp	r5, r2
    e37e:	d809      	bhi.n	e394 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e380:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    e384:	d206      	bcs.n	e394 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e386:	f640 4176 	movw	r1, #3190	; 0xc76
    e38a:	380a      	subs	r0, #10
    e38c:	4288      	cmp	r0, r1
    e38e:	d801      	bhi.n	e394 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e390:	2001      	movs	r0, #1
    e392:	bd70      	pop	{r4, r5, r6, pc}
    e394:	2000      	movs	r0, #0
    e396:	bd70      	pop	{r4, r5, r6, pc}

0000e398 <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>:
    e398:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    e39c:	4770      	bx	lr

0000e39e <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>:
    e39e:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    e3a2:	4770      	bx	lr

0000e3a4 <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>:
    e3a4:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    e3a8:	4770      	bx	lr

0000e3aa <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>:
    e3aa:	b510      	push	{r4, lr}
    e3ac:	29fb      	cmp	r1, #251	; 0xfb
    e3ae:	d904      	bls.n	e3ba <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI+0x10>
    e3b0:	f240 61a1 	movw	r1, #1697	; 0x6a1
    e3b4:	202a      	movs	r0, #42	; 0x2a
    e3b6:	f7f2 fed5 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e3ba:	7041      	strb	r1, [r0, #1]
    e3bc:	bd10      	pop	{r4, pc}

0000e3be <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>:
    e3be:	8980      	ldrh	r0, [r0, #12]
    e3c0:	8008      	strh	r0, [r1, #0]
    e3c2:	4770      	bx	lr

0000e3c4 <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>:
    e3c4:	f8d0 0016 	ldr.w	r0, [r0, #22]
    e3c8:	6008      	str	r0, [r1, #0]
    e3ca:	4770      	bx	lr

0000e3cc <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>:
    e3cc:	6842      	ldr	r2, [r0, #4]
    e3ce:	600a      	str	r2, [r1, #0]
    e3d0:	6880      	ldr	r0, [r0, #8]
    e3d2:	6048      	str	r0, [r1, #4]
    e3d4:	4770      	bx	lr

0000e3d6 <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>:
    e3d6:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    e3da:	600a      	str	r2, [r1, #0]
    e3dc:	6840      	ldr	r0, [r0, #4]
    e3de:	6048      	str	r0, [r1, #4]
    e3e0:	4770      	bx	lr

0000e3e2 <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>:
    e3e2:	6809      	ldr	r1, [r1, #0]
    e3e4:	60c1      	str	r1, [r0, #12]
    e3e6:	4770      	bx	lr

0000e3e8 <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>:
    e3e8:	680a      	ldr	r2, [r1, #0]
    e3ea:	6042      	str	r2, [r0, #4]
    e3ec:	6849      	ldr	r1, [r1, #4]
    e3ee:	6081      	str	r1, [r0, #8]
    e3f0:	4770      	bx	lr

0000e3f2 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>:
    e3f2:	7800      	ldrb	r0, [r0, #0]
    e3f4:	f000 0003 	and.w	r0, r0, #3
    e3f8:	4770      	bx	lr

0000e3fa <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>:
    e3fa:	8880      	ldrh	r0, [r0, #4]
    e3fc:	4770      	bx	lr

0000e3fe <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>:
    e3fe:	88c0      	ldrh	r0, [r0, #6]
    e400:	4770      	bx	lr

0000e402 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>:
    e402:	8900      	ldrh	r0, [r0, #8]
    e404:	4770      	bx	lr

0000e406 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>:
    e406:	8940      	ldrh	r0, [r0, #10]
    e408:	4770      	bx	lr

0000e40a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>:
    e40a:	8901      	ldrh	r1, [r0, #8]
    e40c:	291b      	cmp	r1, #27
    e40e:	d30c      	bcc.n	e42a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e410:	8941      	ldrh	r1, [r0, #10]
    e412:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e416:	4291      	cmp	r1, r2
    e418:	d307      	bcc.n	e42a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e41a:	8881      	ldrh	r1, [r0, #4]
    e41c:	291b      	cmp	r1, #27
    e41e:	d304      	bcc.n	e42a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e420:	88c0      	ldrh	r0, [r0, #6]
    e422:	4290      	cmp	r0, r2
    e424:	d301      	bcc.n	e42a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e426:	2001      	movs	r0, #1
    e428:	4770      	bx	lr
    e42a:	2000      	movs	r0, #0
    e42c:	4770      	bx	lr

0000e42e <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>:
    e42e:	7901      	ldrb	r1, [r0, #4]
    e430:	0749      	lsls	r1, r1, #29
    e432:	d004      	beq.n	e43e <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e434:	7940      	ldrb	r0, [r0, #5]
    e436:	0740      	lsls	r0, r0, #29
    e438:	d001      	beq.n	e43e <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e43a:	2001      	movs	r0, #1
    e43c:	4770      	bx	lr
    e43e:	2000      	movs	r0, #0
    e440:	4770      	bx	lr

0000e442 <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>:
    e442:	88c0      	ldrh	r0, [r0, #6]
    e444:	4770      	bx	lr

0000e446 <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>:
    e446:	7901      	ldrb	r1, [r0, #4]
    e448:	7940      	ldrb	r0, [r0, #5]
    e44a:	f001 0107 	and.w	r1, r1, #7
    e44e:	1e4a      	subs	r2, r1, #1
    e450:	f000 0007 	and.w	r0, r0, #7
    e454:	4011      	ands	r1, r2
    e456:	1e42      	subs	r2, r0, #1
    e458:	4010      	ands	r0, r2
    e45a:	4301      	orrs	r1, r0
    e45c:	d001      	beq.n	e462 <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ+0x1c>
    e45e:	2000      	movs	r0, #0
    e460:	4770      	bx	lr
    e462:	2001      	movs	r0, #1
    e464:	4770      	bx	lr

0000e466 <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>:
    e466:	7900      	ldrb	r0, [r0, #4]
    e468:	4770      	bx	lr

0000e46a <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>:
    e46a:	7940      	ldrb	r0, [r0, #5]
    e46c:	4770      	bx	lr

0000e46e <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>:
    e46e:	7900      	ldrb	r0, [r0, #4]
    e470:	4770      	bx	lr

0000e472 <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>:
    e472:	7101      	strb	r1, [r0, #4]
    e474:	4770      	bx	lr

0000e476 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>:
    e476:	7940      	ldrb	r0, [r0, #5]
    e478:	4770      	bx	lr

0000e47a <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>:
    e47a:	7141      	strb	r1, [r0, #5]
    e47c:	4770      	bx	lr

0000e47e <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>:
    e47e:	b510      	push	{r4, lr}
    e480:	2a1b      	cmp	r2, #27
    e482:	d904      	bls.n	e48e <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA+0x10>
    e484:	f240 417e 	movw	r1, #1150	; 0x47e
    e488:	202a      	movs	r0, #42	; 0x2a
    e48a:	f7f2 fe6b 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e48e:	7042      	strb	r2, [r0, #1]
    e490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e494:	1cc0      	adds	r0, r0, #3
    e496:	f002 bc12 	b.w	10cbe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000e49a <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>:
    e49a:	7802      	ldrb	r2, [r0, #0]
    e49c:	f001 0103 	and.w	r1, r1, #3
    e4a0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    e4a4:	430a      	orrs	r2, r1
    e4a6:	7002      	strb	r2, [r0, #0]
    e4a8:	4770      	bx	lr

0000e4aa <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>:
    e4aa:	7101      	strb	r1, [r0, #4]
    e4ac:	0a09      	lsrs	r1, r1, #8
    e4ae:	7141      	strb	r1, [r0, #5]
    e4b0:	4770      	bx	lr

0000e4b2 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>:
    e4b2:	7181      	strb	r1, [r0, #6]
    e4b4:	0a09      	lsrs	r1, r1, #8
    e4b6:	71c1      	strb	r1, [r0, #7]
    e4b8:	4770      	bx	lr

0000e4ba <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>:
    e4ba:	7201      	strb	r1, [r0, #8]
    e4bc:	0a09      	lsrs	r1, r1, #8
    e4be:	7241      	strb	r1, [r0, #9]
    e4c0:	4770      	bx	lr

0000e4c2 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>:
    e4c2:	7281      	strb	r1, [r0, #10]
    e4c4:	0a09      	lsrs	r1, r1, #8
    e4c6:	72c1      	strb	r1, [r0, #11]
    e4c8:	4770      	bx	lr

0000e4ca <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>:
    e4ca:	7900      	ldrb	r0, [r0, #4]
    e4cc:	4770      	bx	lr

0000e4ce <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>:
    e4ce:	7900      	ldrb	r0, [r0, #4]
    e4d0:	4770      	bx	lr
    e4d2:	b570      	push	{r4, r5, r6, lr}
    e4d4:	f8d0 201f 	ldr.w	r2, [r0, #31]
    e4d8:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    e4dc:	f012 0fff 	tst.w	r2, #255	; 0xff
    e4e0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    e4e4:	d108      	bne.n	e4f8 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e4e6:	f3c2 2407 	ubfx	r4, r2, #8, #8
    e4ea:	b92c      	cbnz	r4, e4f8 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e4ec:	f3c2 4407 	ubfx	r4, r2, #16, #8
    e4f0:	b914      	cbnz	r4, e4f8 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e4f2:	0e12      	lsrs	r2, r2, #24
    e4f4:	d100      	bne.n	e4f8 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e4f6:	b34b      	cbz	r3, e54c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e4f8:	7846      	ldrb	r6, [r0, #1]
    e4fa:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    e4fe:	f8b0 401b 	ldrh.w	r4, [r0, #27]
    e502:	f8b0 5017 	ldrh.w	r5, [r0, #23]
    e506:	7d83      	ldrb	r3, [r0, #22]
    e508:	2e22      	cmp	r6, #34	; 0x22
    e50a:	d11f      	bne.n	e54c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e50c:	b131      	cbz	r1, e51c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    e50e:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    e512:	d903      	bls.n	e51c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    e514:	f640 5107 	movw	r1, #3335	; 0xd07
    e518:	428a      	cmp	r2, r1
    e51a:	d90b      	bls.n	e534 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x66>
    e51c:	1f91      	subs	r1, r2, #6
    e51e:	f640 467a 	movw	r6, #3194	; 0xc7a
    e522:	42b1      	cmp	r1, r6
    e524:	d812      	bhi.n	e54c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e526:	b18b      	cbz	r3, e54c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e528:	2b08      	cmp	r3, #8
    e52a:	d80f      	bhi.n	e54c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e52c:	4293      	cmp	r3, r2
    e52e:	d20d      	bcs.n	e54c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e530:	4295      	cmp	r5, r2
    e532:	d80b      	bhi.n	e54c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e534:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    e538:	d208      	bcs.n	e54c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e53a:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    e53e:	f640 4176 	movw	r1, #3190	; 0xc76
    e542:	380a      	subs	r0, #10
    e544:	4288      	cmp	r0, r1
    e546:	d801      	bhi.n	e54c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e548:	2001      	movs	r0, #1
    e54a:	bd70      	pop	{r4, r5, r6, pc}
    e54c:	2000      	movs	r0, #0
    e54e:	bd70      	pop	{r4, r5, r6, pc}

0000e550 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    e550:	6841      	ldr	r1, [r0, #4]
    e552:	2200      	movs	r2, #0
    e554:	f891 322a 	ldrb.w	r3, [r1, #554]	; 0x22a
    e558:	2b00      	cmp	r3, #0
    e55a:	d004      	beq.n	e566 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    e55c:	f881 222a 	strb.w	r2, [r1, #554]	; 0x22a
    e560:	6840      	ldr	r0, [r0, #4]
    e562:	f000 bdfc 	b.w	f15e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    e566:	4770      	bx	lr

0000e568 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    e568:	b510      	push	{r4, lr}
    e56a:	7a01      	ldrb	r1, [r0, #8]
    e56c:	b119      	cbz	r1, e576 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    e56e:	2901      	cmp	r1, #1
    e570:	d006      	beq.n	e580 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    e572:	2000      	movs	r0, #0
    e574:	bd10      	pop	{r4, pc}
    e576:	88c2      	ldrh	r2, [r0, #6]
    e578:	6803      	ldr	r3, [r0, #0]
    e57a:	8880      	ldrh	r0, [r0, #4]
    e57c:	2102      	movs	r1, #2
    e57e:	e003      	b.n	e588 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    e580:	88c2      	ldrh	r2, [r0, #6]
    e582:	6803      	ldr	r3, [r0, #0]
    e584:	8880      	ldrh	r0, [r0, #4]
    e586:	2101      	movs	r1, #1
    e588:	f7f4 fcf8 	bl	2f7c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x14>
    e58c:	b908      	cbnz	r0, e592 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    e58e:	f7f4 fd45 	bl	301c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    e592:	2001      	movs	r0, #1
    e594:	bd10      	pop	{r4, pc}

0000e596 <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>:
    e596:	2203      	movs	r2, #3
    e598:	f000 b806 	b.w	e5a8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>

0000e59c <sym_43BYC3K4M44JBPOX4EUJM44GYCCY2C3C4SYEF6I>:
    e59c:	2203      	movs	r2, #3
    e59e:	f000 b817 	b.w	e5d0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>

0000e5a2 <sym_OHZGE3PRU72NL3TJSLCEUVROHETUDPWEUAQ7GMA>:
    e5a2:	2204      	movs	r2, #4
    e5a4:	f000 b814 	b.w	e5d0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>

0000e5a8 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>:
    e5a8:	b508      	push	{r3, lr}
    e5aa:	7a03      	ldrb	r3, [r0, #8]
    e5ac:	f88d 3000 	strb.w	r3, [sp]
    e5b0:	9b00      	ldr	r3, [sp, #0]
    e5b2:	9300      	str	r3, [sp, #0]
    e5b4:	f89d 3000 	ldrb.w	r3, [sp]
    e5b8:	b123      	cbz	r3, e5c4 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x1c>
    e5ba:	f240 21c2 	movw	r1, #706	; 0x2c2
    e5be:	2010      	movs	r0, #16
    e5c0:	f7f2 fdd0 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e5c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e5c8:	f7f4 be9a 	b.w	3300 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x11c>

0000e5cc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    e5cc:	f7f4 bec6 	b.w	335c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x178>

0000e5d0 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>:
    e5d0:	7a03      	ldrb	r3, [r0, #8]
    e5d2:	b082      	sub	sp, #8
    e5d4:	f88d 3000 	strb.w	r3, [sp]
    e5d8:	9b00      	ldr	r3, [sp, #0]
    e5da:	9300      	str	r3, [sp, #0]
    e5dc:	f89d 3000 	ldrb.w	r3, [sp]
    e5e0:	b113      	cbz	r3, e5e8 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0x18>
    e5e2:	7202      	strb	r2, [r0, #8]
    e5e4:	b002      	add	sp, #8
    e5e6:	4770      	bx	lr
    e5e8:	b002      	add	sp, #8
    e5ea:	f7f4 be89 	b.w	3300 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x11c>
    e5ee:	2000      	movs	r0, #0
    e5f0:	7048      	strb	r0, [r1, #1]
    e5f2:	2003      	movs	r0, #3
    e5f4:	7008      	strb	r0, [r1, #0]
    e5f6:	2001      	movs	r0, #1
    e5f8:	7108      	strb	r0, [r1, #4]
    e5fa:	4770      	bx	lr

0000e5fc <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e5fc:	b510      	push	{r4, lr}
    e5fe:	888c      	ldrh	r4, [r1, #4]
    e600:	890a      	ldrh	r2, [r1, #8]
    e602:	884b      	ldrh	r3, [r1, #2]
    e604:	88c9      	ldrh	r1, [r1, #6]
    e606:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    e60a:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    e60e:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    e612:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    e616:	bd10      	pop	{r4, pc}

0000e618 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e618:	b570      	push	{r4, r5, r6, lr}
    e61a:	4615      	mov	r5, r2
    e61c:	460c      	mov	r4, r1
    e61e:	f000 f8b8 	bl	e792 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa8>
    e622:	3096      	adds	r0, #150	; 0x96
    e624:	4428      	add	r0, r5
    e626:	42a0      	cmp	r0, r4
    e628:	d801      	bhi.n	e62e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e62a:	1a20      	subs	r0, r4, r0
    e62c:	bd70      	pop	{r4, r5, r6, pc}
    e62e:	2000      	movs	r0, #0
    e630:	bd70      	pop	{r4, r5, r6, pc}

0000e632 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e636:	4604      	mov	r4, r0
    e638:	f000 f87f 	bl	e73a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x50>
    e63c:	4680      	mov	r8, r0
    e63e:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    e642:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    e646:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    e648:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    e64a:	4285      	cmp	r5, r0
    e64c:	d300      	bcc.n	e650 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x1e>
    e64e:	4605      	mov	r5, r0
    e650:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    e654:	4620      	mov	r0, r4
    e656:	f000 f868 	bl	e72a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x40>
    e65a:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    e65e:	2902      	cmp	r1, #2
    e660:	d108      	bne.n	e674 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x42>
    e662:	42af      	cmp	r7, r5
    e664:	d200      	bcs.n	e668 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x36>
    e666:	463d      	mov	r5, r7
    e668:	4286      	cmp	r6, r0
    e66a:	d200      	bcs.n	e66e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3c>
    e66c:	4630      	mov	r0, r6
    e66e:	2100      	movs	r1, #0
    e670:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    e674:	86a5      	strh	r5, [r4, #52]	; 0x34
    e676:	8720      	strh	r0, [r4, #56]	; 0x38
    e678:	42bd      	cmp	r5, r7
    e67a:	d101      	bne.n	e680 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4e>
    e67c:	42b0      	cmp	r0, r6
    e67e:	d001      	beq.n	e684 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    e680:	2001      	movs	r0, #1
    e682:	e000      	b.n	e686 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x54>
    e684:	2000      	movs	r0, #0
    e686:	ea40 0008 	orr.w	r0, r0, r8
    e68a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e68e <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e68e:	221b      	movs	r2, #27
    e690:	8402      	strh	r2, [r0, #32]
    e692:	8382      	strh	r2, [r0, #28]
    e694:	82c2      	strh	r2, [r0, #22]
    e696:	8282      	strh	r2, [r0, #20]
    e698:	8142      	strh	r2, [r0, #10]
    e69a:	8202      	strh	r2, [r0, #16]
    e69c:	8102      	strh	r2, [r0, #8]
    e69e:	8542      	strh	r2, [r0, #42]	; 0x2a
    e6a0:	8582      	strh	r2, [r0, #44]	; 0x2c
    e6a2:	8482      	strh	r2, [r0, #36]	; 0x24
    e6a4:	2900      	cmp	r1, #0
    e6a6:	d10a      	bne.n	e6be <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e6a8:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e6ac:	8441      	strh	r1, [r0, #34]	; 0x22
    e6ae:	83c1      	strh	r1, [r0, #30]
    e6b0:	8341      	strh	r1, [r0, #26]
    e6b2:	8301      	strh	r1, [r0, #24]
    e6b4:	81c1      	strh	r1, [r0, #14]
    e6b6:	8241      	strh	r1, [r0, #18]
    e6b8:	8181      	strh	r1, [r0, #12]
    e6ba:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e6bc:	8601      	strh	r1, [r0, #48]	; 0x30
    e6be:	4770      	bx	lr

0000e6c0 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e6c0:	6800      	ldr	r0, [r0, #0]
    e6c2:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e6c6:	4290      	cmp	r0, r2
    e6c8:	d903      	bls.n	e6d2 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e6ca:	1a40      	subs	r0, r0, r1
    e6cc:	389c      	subs	r0, #156	; 0x9c
    e6ce:	0840      	lsrs	r0, r0, #1
    e6d0:	4770      	bx	lr
    e6d2:	2000      	movs	r0, #0
    e6d4:	4770      	bx	lr

0000e6d6 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>:
    e6d6:	6840      	ldr	r0, [r0, #4]
    e6d8:	4770      	bx	lr

0000e6da <sym_DGN3THKILL676ISUGG6LI5PGTHVDBLTDPNXUCAA>:
    e6da:	b570      	push	{r4, r5, r6, lr}
    e6dc:	460c      	mov	r4, r1
    e6de:	4605      	mov	r5, r0
    e6e0:	f000 f857 	bl	e792 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa8>
    e6e4:	4420      	add	r0, r4
    e6e6:	6328      	str	r0, [r5, #48]	; 0x30
    e6e8:	bd70      	pop	{r4, r5, r6, pc}

0000e6ea <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e6ea:	b510      	push	{r4, lr}
    e6ec:	9c02      	ldr	r4, [sp, #8]
    e6ee:	8281      	strh	r1, [r0, #20]
    e6f0:	82c2      	strh	r2, [r0, #22]
    e6f2:	8303      	strh	r3, [r0, #24]
    e6f4:	8344      	strh	r4, [r0, #26]
    e6f6:	bd10      	pop	{r4, pc}
    e6f8:	1d00      	adds	r0, r0, #4
    e6fa:	b510      	push	{r4, lr}
    e6fc:	b280      	uxth	r0, r0
    e6fe:	2901      	cmp	r1, #1
    e700:	d006      	beq.n	e710 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x26>
    e702:	2902      	cmp	r1, #2
    e704:	d007      	beq.n	e716 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x2c>
    e706:	f240 2123 	movw	r1, #547	; 0x223
    e70a:	2006      	movs	r0, #6
    e70c:	f7f2 fd2a 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e710:	00c0      	lsls	r0, r0, #3
    e712:	3050      	adds	r0, #80	; 0x50
    e714:	e001      	b.n	e71a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x30>
    e716:	0080      	lsls	r0, r0, #2
    e718:	302c      	adds	r0, #44	; 0x2c
    e71a:	b280      	uxth	r0, r0
    e71c:	bd10      	pop	{r4, pc}
    e71e:	8c41      	ldrh	r1, [r0, #34]	; 0x22
    e720:	8b00      	ldrh	r0, [r0, #24]
    e722:	4281      	cmp	r1, r0
    e724:	d200      	bcs.n	e728 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
    e726:	4608      	mov	r0, r1
    e728:	4770      	bx	lr
    e72a:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    e72e:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    e732:	4281      	cmp	r1, r0
    e734:	d200      	bcs.n	e738 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
    e736:	4608      	mov	r0, r1
    e738:	4770      	bx	lr
    e73a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e73e:	4606      	mov	r6, r0
    e740:	f8b0 9036 	ldrh.w	r9, [r0, #54]	; 0x36
    e744:	f8b0 803a 	ldrh.w	r8, [r0, #58]	; 0x3a
    e748:	f8b0 004c 	ldrh.w	r0, [r0, #76]	; 0x4c
    e74c:	f8b6 4040 	ldrh.w	r4, [r6, #64]	; 0x40
    e750:	42a0      	cmp	r0, r4
    e752:	d200      	bcs.n	e756 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x6c>
    e754:	4604      	mov	r4, r0
    e756:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    e75a:	4605      	mov	r5, r0
    e75c:	f7ff ffdf 	bl	e71e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
    e760:	4607      	mov	r7, r0
    e762:	4628      	mov	r0, r5
    e764:	f7ff ffdb 	bl	e71e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
    e768:	816c      	strh	r4, [r5, #10]
    e76a:	81ef      	strh	r7, [r5, #14]
    e76c:	8fb1      	ldrh	r1, [r6, #60]	; 0x3c
    e76e:	8ff2      	ldrh	r2, [r6, #62]	; 0x3e
    e770:	42a1      	cmp	r1, r4
    e772:	d200      	bcs.n	e776 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x8c>
    e774:	4621      	mov	r1, r4
    e776:	4282      	cmp	r2, r0
    e778:	d300      	bcc.n	e77c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x92>
    e77a:	4610      	mov	r0, r2
    e77c:	8229      	strh	r1, [r5, #16]
    e77e:	8268      	strh	r0, [r5, #18]
    e780:	454c      	cmp	r4, r9
    e782:	d101      	bne.n	e788 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x9e>
    e784:	4547      	cmp	r7, r8
    e786:	d002      	beq.n	e78e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa4>
    e788:	2001      	movs	r0, #1
    e78a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e78e:	2000      	movs	r0, #0
    e790:	e7fb      	b.n	e78a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa0>
    e792:	2196      	movs	r1, #150	; 0x96
    e794:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    e798:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    e79c:	f000 b800 	b.w	e7a0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xb6>
    e7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e7a4:	460d      	mov	r5, r1
    e7a6:	4606      	mov	r6, r0
    e7a8:	4698      	mov	r8, r3
    e7aa:	4617      	mov	r7, r2
    e7ac:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    e7ae:	4611      	mov	r1, r2
    e7b0:	f7ff ffa2 	bl	e6f8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e7b4:	4604      	mov	r4, r0
    e7b6:	4639      	mov	r1, r7
    e7b8:	4630      	mov	r0, r6
    e7ba:	f7ff ffb6 	bl	e72a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x40>
    e7be:	42a0      	cmp	r0, r4
    e7c0:	d200      	bcs.n	e7c4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xda>
    e7c2:	4604      	mov	r4, r0
    e7c4:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e7c6:	4641      	mov	r1, r8
    e7c8:	f7ff ff96 	bl	e6f8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e7cc:	8ff1      	ldrh	r1, [r6, #62]	; 0x3e
    e7ce:	4281      	cmp	r1, r0
    e7d0:	d200      	bcs.n	e7d4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xea>
    e7d2:	4608      	mov	r0, r1
    e7d4:	4420      	add	r0, r4
    e7d6:	4428      	add	r0, r5
    e7d8:	1d80      	adds	r0, r0, #6
    e7da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e7de:	b510      	push	{r4, lr}
    e7e0:	4604      	mov	r4, r0
    e7e2:	2108      	movs	r1, #8
    e7e4:	4620      	mov	r0, r4
    e7e6:	f7f2 fd6d 	bl	12c4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e7ea:	6820      	ldr	r0, [r4, #0]
    e7ec:	2800      	cmp	r0, #0
    e7ee:	d102      	bne.n	e7f6 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x10c>
    e7f0:	6860      	ldr	r0, [r4, #4]
    e7f2:	2800      	cmp	r0, #0
    e7f4:	d0f5      	beq.n	e7e2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf8>
    e7f6:	bd10      	pop	{r4, pc}

0000e7f8 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    e7f8:	f000 0155 	and.w	r1, r0, #85	; 0x55
    e7fc:	2255      	movs	r2, #85	; 0x55
    e7fe:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    e802:	4408      	add	r0, r1
    e804:	f000 0133 	and.w	r1, r0, #51	; 0x33
    e808:	2233      	movs	r2, #51	; 0x33
    e80a:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    e80e:	4408      	add	r0, r1
    e810:	f000 010f 	and.w	r1, r0, #15
    e814:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    e818:	4770      	bx	lr

0000e81a <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>:
    e81a:	6840      	ldr	r0, [r0, #4]
    e81c:	2100      	movs	r1, #0
    e81e:	f820 1fd8 	strh.w	r1, [r0, #216]!
    e822:	7881      	ldrb	r1, [r0, #2]
    e824:	1c49      	adds	r1, r1, #1
    e826:	7081      	strb	r1, [r0, #2]
    e828:	4770      	bx	lr

0000e82a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>:
    e82a:	b510      	push	{r4, lr}
    e82c:	6840      	ldr	r0, [r0, #4]
    e82e:	f810 1fda 	ldrb.w	r1, [r0, #218]!
    e832:	1e49      	subs	r1, r1, #1
    e834:	b249      	sxtb	r1, r1
    e836:	7001      	strb	r1, [r0, #0]
    e838:	2900      	cmp	r1, #0
    e83a:	da03      	bge.n	e844 <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA+0x1a>
    e83c:	2135      	movs	r1, #53	; 0x35
    e83e:	204a      	movs	r0, #74	; 0x4a
    e840:	f7f2 fc90 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e844:	bd10      	pop	{r4, pc}

0000e846 <sym_2UM6LVQLLMOP7WZDJLNUGNNDXOSOGAIT6WB627Q>:
    e846:	6840      	ldr	r0, [r0, #4]
    e848:	f880 1123 	strb.w	r1, [r0, #291]	; 0x123
    e84c:	f880 2122 	strb.w	r2, [r0, #290]	; 0x122
    e850:	4770      	bx	lr

0000e852 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>:
    e852:	6840      	ldr	r0, [r0, #4]
    e854:	2100      	movs	r1, #0
    e856:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    e85a:	f880 10d6 	strb.w	r1, [r0, #214]	; 0xd6
    e85e:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
    e862:	4770      	bx	lr

0000e864 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI>:
    e864:	b510      	push	{r4, lr}
    e866:	f1a0 0234 	sub.w	r2, r0, #52	; 0x34
    e86a:	f830 4cb4 	ldrh.w	r4, [r0, #-180]
    e86e:	2000      	movs	r0, #0
    e870:	7048      	strb	r0, [r1, #1]
    e872:	230a      	movs	r3, #10
    e874:	700b      	strb	r3, [r1, #0]
    e876:	7108      	strb	r0, [r1, #4]
    e878:	f8a1 4005 	strh.w	r4, [r1, #5]
    e87c:	f892 003d 	ldrb.w	r0, [r2, #61]	; 0x3d
    e880:	71c8      	strb	r0, [r1, #7]
    e882:	4620      	mov	r0, r4
    e884:	f7f3 f930 	bl	1ae8 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e888:	f7fe fe07 	bl	d49a <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    e88c:	b140      	cbz	r0, e8a0 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI+0x3c>
    e88e:	4620      	mov	r0, r4
    e890:	f7ff fa07 	bl	dca2 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    e894:	4620      	mov	r0, r4
    e896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e89a:	2100      	movs	r1, #0
    e89c:	f7f3 b832 	b.w	1904 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e8a0:	2173      	movs	r1, #115	; 0x73
    e8a2:	2063      	movs	r0, #99	; 0x63
    e8a4:	f7f2 fc5e 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e8a8 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA>:
    e8a8:	b570      	push	{r4, r5, r6, lr}
    e8aa:	6844      	ldr	r4, [r0, #4]
    e8ac:	460d      	mov	r5, r1
    e8ae:	7803      	ldrb	r3, [r0, #0]
    e8b0:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
    e8b4:	3480      	adds	r4, #128	; 0x80
    e8b6:	2101      	movs	r1, #1
    e8b8:	4620      	mov	r0, r4
    e8ba:	f7ff facd 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e8be:	b108      	cbz	r0, e8c4 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA+0x1c>
    e8c0:	2000      	movs	r0, #0
    e8c2:	bd70      	pop	{r4, r5, r6, pc}
    e8c4:	4628      	mov	r0, r5
    e8c6:	f7ff fe00 	bl	e4ca <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>
    e8ca:	f884 0020 	strb.w	r0, [r4, #32]
    e8ce:	2006      	movs	r0, #6
    e8d0:	77e0      	strb	r0, [r4, #31]
    e8d2:	e7f5      	b.n	e8c0 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA+0x18>

0000e8d4 <sym_MWD4AC6ISIKEYDTZF7KXOTJOBUPKKWWLNRGAYAA>:
    e8d4:	b510      	push	{r4, lr}
    e8d6:	6844      	ldr	r4, [r0, #4]
    e8d8:	7803      	ldrb	r3, [r0, #0]
    e8da:	2101      	movs	r1, #1
    e8dc:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
    e8e0:	3480      	adds	r4, #128	; 0x80
    e8e2:	4620      	mov	r0, r4
    e8e4:	f7ff fab8 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e8e8:	2800      	cmp	r0, #0
    e8ea:	d101      	bne.n	e8f0 <sym_MWD4AC6ISIKEYDTZF7KXOTJOBUPKKWWLNRGAYAA+0x1c>
    e8ec:	2007      	movs	r0, #7
    e8ee:	77e0      	strb	r0, [r4, #31]
    e8f0:	bd10      	pop	{r4, pc}

0000e8f2 <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y>:
    e8f2:	2200      	movs	r2, #0
    e8f4:	704a      	strb	r2, [r1, #1]
    e8f6:	2307      	movs	r3, #7
    e8f8:	700b      	strb	r3, [r1, #0]
    e8fa:	f100 030a 	add.w	r3, r0, #10
    e8fe:	f5a0 70df 	sub.w	r0, r0, #446	; 0x1be
    e902:	84c2      	strh	r2, [r0, #38]	; 0x26
    e904:	6818      	ldr	r0, [r3, #0]
    e906:	6048      	str	r0, [r1, #4]
    e908:	6858      	ldr	r0, [r3, #4]
    e90a:	6088      	str	r0, [r1, #8]
    e90c:	8918      	ldrh	r0, [r3, #8]
    e90e:	8188      	strh	r0, [r1, #12]
    e910:	710a      	strb	r2, [r1, #4]
    e912:	4770      	bx	lr

0000e914 <sym_YAZXXBE3UO3G4AM6TR2NFBXVHOGUGHIF6JXVVLI>:
    e914:	b510      	push	{r4, lr}
    e916:	6844      	ldr	r4, [r0, #4]
    e918:	7803      	ldrb	r3, [r0, #0]
    e91a:	2100      	movs	r1, #0
    e91c:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    e920:	3480      	adds	r4, #128	; 0x80
    e922:	4620      	mov	r0, r4
    e924:	f7ff fa98 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e928:	b110      	cbz	r0, e930 <sym_YAZXXBE3UO3G4AM6TR2NFBXVHOGUGHIF6JXVVLI+0x1c>
    e92a:	201d      	movs	r0, #29
    e92c:	7760      	strb	r0, [r4, #29]
    e92e:	bd10      	pop	{r4, pc}
    e930:	2122      	movs	r1, #34	; 0x22
    e932:	2045      	movs	r0, #69	; 0x45
    e934:	f7f2 fc16 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e938 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA>:
    e938:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e93c:	4606      	mov	r6, r0
    e93e:	7803      	ldrb	r3, [r0, #0]
    e940:	6840      	ldr	r0, [r0, #4]
    e942:	468b      	mov	fp, r1
    e944:	f100 0480 	add.w	r4, r0, #128	; 0x80
    e948:	4605      	mov	r5, r0
    e94a:	2700      	movs	r7, #0
    e94c:	7f62      	ldrb	r2, [r4, #29]
    e94e:	210a      	movs	r1, #10
    e950:	4620      	mov	r0, r4
    e952:	f7ff fa81 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e956:	b358      	cbz	r0, e9b0 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x78>
    e958:	4658      	mov	r0, fp
    e95a:	f7ff fd56 	bl	e40a <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    e95e:	b1f0      	cbz	r0, e99e <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x66>
    e960:	4658      	mov	r0, fp
    e962:	f7ff fd4c 	bl	e3fe <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    e966:	4682      	mov	sl, r0
    e968:	4658      	mov	r0, fp
    e96a:	f7ff fd4c 	bl	e406 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    e96e:	4681      	mov	r9, r0
    e970:	4658      	mov	r0, fp
    e972:	f7ff fd42 	bl	e3fa <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    e976:	4680      	mov	r8, r0
    e978:	4658      	mov	r0, fp
    e97a:	f7ff fd42 	bl	e402 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    e97e:	4601      	mov	r1, r0
    e980:	464b      	mov	r3, r9
    e982:	4642      	mov	r2, r8
    e984:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    e988:	f8cd a000 	str.w	sl, [sp]
    e98c:	f7ff fead 	bl	e6ea <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    e990:	4628      	mov	r0, r5
    e992:	f7ff fe4e 	bl	e632 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    e996:	2105      	movs	r1, #5
    e998:	6870      	ldr	r0, [r6, #4]
    e99a:	f7f6 f8cb 	bl	4b34 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    e99e:	f884 7056 	strb.w	r7, [r4, #86]	; 0x56
    e9a2:	7767      	strb	r7, [r4, #29]
    e9a4:	4630      	mov	r0, r6
    e9a6:	f000 f805 	bl	e9b4 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
    e9aa:	2000      	movs	r0, #0
    e9ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e9b0:	2001      	movs	r0, #1
    e9b2:	e7fb      	b.n	e9ac <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x74>

0000e9b4 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>:
    e9b4:	6841      	ldr	r1, [r0, #4]
    e9b6:	f501 72a5 	add.w	r2, r1, #330	; 0x14a
    e9ba:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    e9be:	2801      	cmp	r0, #1
    e9c0:	d004      	beq.n	e9cc <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA+0x18>
    e9c2:	f831 0b2c 	ldrh.w	r0, [r1], #44
    e9c6:	3218      	adds	r2, #24
    e9c8:	f7f4 bcde 	b.w	3388 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    e9cc:	2002      	movs	r0, #2
    e9ce:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    e9d2:	4770      	bx	lr

0000e9d4 <sym_2TCPCDAUQ3FXZYG56Z6ZP7VCFNUJTBV3EZJYPGY>:
    e9d4:	2200      	movs	r2, #0
    e9d6:	704a      	strb	r2, [r1, #1]
    e9d8:	220b      	movs	r2, #11
    e9da:	700a      	strb	r2, [r1, #0]
    e9dc:	f100 020a 	add.w	r2, r0, #10
    e9e0:	7a83      	ldrb	r3, [r0, #10]
    e9e2:	f2a0 200a 	subw	r0, r0, #522	; 0x20a
    e9e6:	710b      	strb	r3, [r1, #4]
    e9e8:	8800      	ldrh	r0, [r0, #0]
    e9ea:	80c8      	strh	r0, [r1, #6]
    e9ec:	7910      	ldrb	r0, [r2, #4]
    e9ee:	7208      	strb	r0, [r1, #8]
    e9f0:	4770      	bx	lr

0000e9f2 <sym_S6U6ANENQP6QL5TLITNXPOYFSB26Q5AFTW32CXI>:
    e9f2:	2200      	movs	r2, #0
    e9f4:	704a      	strb	r2, [r1, #1]
    e9f6:	220c      	movs	r2, #12
    e9f8:	700a      	strb	r2, [r1, #0]
    e9fa:	7a82      	ldrb	r2, [r0, #10]
    e9fc:	f2a0 200a 	subw	r0, r0, #522	; 0x20a
    ea00:	710a      	strb	r2, [r1, #4]
    ea02:	8800      	ldrh	r0, [r0, #0]
    ea04:	80c8      	strh	r0, [r1, #6]
    ea06:	4770      	bx	lr

0000ea08 <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY>:
    ea08:	2200      	movs	r2, #0
    ea0a:	704a      	strb	r2, [r1, #1]
    ea0c:	2208      	movs	r2, #8
    ea0e:	700a      	strb	r2, [r1, #0]
    ea10:	f5a0 7237 	sub.w	r2, r0, #732	; 0x2dc
    ea14:	8812      	ldrh	r2, [r2, #0]
    ea16:	808a      	strh	r2, [r1, #4]
    ea18:	68c2      	ldr	r2, [r0, #12]
    ea1a:	f8c1 2006 	str.w	r2, [r1, #6]
    ea1e:	6902      	ldr	r2, [r0, #16]
    ea20:	f8c1 200a 	str.w	r2, [r1, #10]
    ea24:	8a80      	ldrh	r0, [r0, #20]
    ea26:	81c8      	strh	r0, [r1, #14]
    ea28:	4770      	bx	lr
    ea2a:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    ea2e:	f001 0307 	and.w	r3, r1, #7
    ea32:	7802      	ldrb	r2, [r0, #0]
    ea34:	2101      	movs	r1, #1
    ea36:	4099      	lsls	r1, r3
    ea38:	430a      	orrs	r2, r1
    ea3a:	7002      	strb	r2, [r0, #0]
    ea3c:	4770      	bx	lr

0000ea3e <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>:
    ea3e:	b510      	push	{r4, lr}
    ea40:	6844      	ldr	r4, [r0, #4]
    ea42:	7803      	ldrb	r3, [r0, #0]
    ea44:	2100      	movs	r1, #0
    ea46:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    ea4a:	3480      	adds	r4, #128	; 0x80
    ea4c:	4620      	mov	r0, r4
    ea4e:	f7ff fa03 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ea52:	b110      	cbz	r0, ea5a <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY+0x1c>
    ea54:	2004      	movs	r0, #4
    ea56:	7760      	strb	r0, [r4, #29]
    ea58:	bd10      	pop	{r4, pc}
    ea5a:	21ab      	movs	r1, #171	; 0xab
    ea5c:	201c      	movs	r0, #28
    ea5e:	f7f2 fb81 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ea62 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>:
    ea62:	b510      	push	{r4, lr}
    ea64:	6841      	ldr	r1, [r0, #4]
    ea66:	f891 208c 	ldrb.w	r2, [r1, #140]	; 0x8c
    ea6a:	07d2      	lsls	r2, r2, #31
    ea6c:	d00b      	beq.n	ea86 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x24>
    ea6e:	f811 2fda 	ldrb.w	r2, [r1, #218]!
    ea72:	1e52      	subs	r2, r2, #1
    ea74:	b252      	sxtb	r2, r2
    ea76:	700a      	strb	r2, [r1, #0]
    ea78:	6840      	ldr	r0, [r0, #4]
    ea7a:	2a00      	cmp	r2, #0
    ea7c:	da05      	bge.n	ea8a <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x28>
    ea7e:	21ba      	movs	r1, #186	; 0xba
    ea80:	201c      	movs	r0, #28
    ea82:	f7f2 fb6f 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea86:	21b8      	movs	r1, #184	; 0xb8
    ea88:	e7fa      	b.n	ea80 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x1e>
    ea8a:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    ea8e:	f021 0101 	bic.w	r1, r1, #1
    ea92:	6001      	str	r1, [r0, #0]
    ea94:	bd10      	pop	{r4, pc}
    ea96:	2200      	movs	r2, #0
    ea98:	704a      	strb	r2, [r1, #1]
    ea9a:	2206      	movs	r2, #6
    ea9c:	700a      	strb	r2, [r1, #0]
    ea9e:	f850 2f09 	ldr.w	r2, [r0, #9]!
    eaa2:	604a      	str	r2, [r1, #4]
    eaa4:	6842      	ldr	r2, [r0, #4]
    eaa6:	608a      	str	r2, [r1, #8]
    eaa8:	8902      	ldrh	r2, [r0, #8]
    eaaa:	818a      	strh	r2, [r1, #12]
    eaac:	7a80      	ldrb	r0, [r0, #10]
    eaae:	7388      	strb	r0, [r1, #14]
    eab0:	4770      	bx	lr

0000eab2 <sym_NK4HRRKGX3ST3ARVTU6HUEXLOWZFFBMCIDNT3EI>:
    eab2:	2200      	movs	r2, #0
    eab4:	704a      	strb	r2, [r1, #1]
    eab6:	220e      	movs	r2, #14
    eab8:	f5a0 70ac 	sub.w	r0, r0, #344	; 0x158
    eabc:	700a      	strb	r2, [r1, #0]
    eabe:	8800      	ldrh	r0, [r0, #0]
    eac0:	8088      	strh	r0, [r1, #4]
    eac2:	4770      	bx	lr

0000eac4 <sym_P2OZB7UAJZNJ47VR5DS7V33BAD5DESWDHJYKOZA>:
    eac4:	b510      	push	{r4, lr}
    eac6:	6844      	ldr	r4, [r0, #4]
    eac8:	f894 108c 	ldrb.w	r1, [r4, #140]	; 0x8c
    eacc:	3480      	adds	r4, #128	; 0x80
    eace:	f011 0f04 	tst.w	r1, #4
    ead2:	d001      	beq.n	ead8 <sym_P2OZB7UAJZNJ47VR5DS7V33BAD5DESWDHJYKOZA+0x14>
    ead4:	2001      	movs	r0, #1
    ead6:	bd10      	pop	{r4, pc}
    ead8:	f7ff fe9f 	bl	e81a <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    eadc:	68e0      	ldr	r0, [r4, #12]
    eade:	f040 0004 	orr.w	r0, r0, #4
    eae2:	60e0      	str	r0, [r4, #12]
    eae4:	2000      	movs	r0, #0
    eae6:	bd10      	pop	{r4, pc}

0000eae8 <sym_BR7VCSB75RGRQ7O7PYOVLMHXKJKUMK6XH3GVGZA>:
    eae8:	b510      	push	{r4, lr}
    eaea:	6844      	ldr	r4, [r0, #4]
    eaec:	7803      	ldrb	r3, [r0, #0]
    eaee:	2100      	movs	r1, #0
    eaf0:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    eaf4:	3480      	adds	r4, #128	; 0x80
    eaf6:	4620      	mov	r0, r4
    eaf8:	f7ff f9ae 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    eafc:	b110      	cbz	r0, eb04 <sym_BR7VCSB75RGRQ7O7PYOVLMHXKJKUMK6XH3GVGZA+0x1c>
    eafe:	200f      	movs	r0, #15
    eb00:	7760      	strb	r0, [r4, #29]
    eb02:	bd10      	pop	{r4, pc}
    eb04:	216e      	movs	r1, #110	; 0x6e
    eb06:	204b      	movs	r0, #75	; 0x4b
    eb08:	f7f2 fb2c 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000eb0c <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ>:
    eb0c:	b510      	push	{r4, lr}
    eb0e:	6844      	ldr	r4, [r0, #4]
    eb10:	7803      	ldrb	r3, [r0, #0]
    eb12:	2109      	movs	r1, #9
    eb14:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    eb18:	3480      	adds	r4, #128	; 0x80
    eb1a:	4620      	mov	r0, r4
    eb1c:	f7ff f99c 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    eb20:	2800      	cmp	r0, #0
    eb22:	d005      	beq.n	eb30 <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ+0x24>
    eb24:	2000      	movs	r0, #0
    eb26:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
    eb2a:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    eb2e:	7760      	strb	r0, [r4, #29]
    eb30:	bd10      	pop	{r4, pc}

0000eb32 <sym_E2LE5OMX5VGHQ6BJ4G7CNEBI3KUUYONP2PS2EJQ>:
    eb32:	6841      	ldr	r1, [r0, #4]
    eb34:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    eb38:	f022 0204 	bic.w	r2, r2, #4
    eb3c:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    eb40:	f7ff be73 	b.w	e82a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>

0000eb44 <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A>:
    eb44:	b510      	push	{r4, lr}
    eb46:	2300      	movs	r3, #0
    eb48:	704b      	strb	r3, [r1, #1]
    eb4a:	2401      	movs	r4, #1
    eb4c:	700c      	strb	r4, [r1, #0]
    eb4e:	f100 0209 	add.w	r2, r0, #9
    eb52:	710b      	strb	r3, [r1, #4]
    eb54:	f830 0cde 	ldrh.w	r0, [r0, #-222]
    eb58:	f8a1 0005 	strh.w	r0, [r1, #5]
    eb5c:	f812 0b01 	ldrb.w	r0, [r2], #1
    eb60:	71c8      	strb	r0, [r1, #7]
    eb62:	8810      	ldrh	r0, [r2, #0]
    eb64:	8108      	strh	r0, [r1, #8]
    eb66:	8850      	ldrh	r0, [r2, #2]
    eb68:	8148      	strh	r0, [r1, #10]
    eb6a:	bd10      	pop	{r4, pc}

0000eb6c <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>:
    eb6c:	b570      	push	{r4, r5, r6, lr}
    eb6e:	7803      	ldrb	r3, [r0, #0]
    eb70:	6840      	ldr	r0, [r0, #4]
    eb72:	2500      	movs	r5, #0
    eb74:	f100 0480 	add.w	r4, r0, #128	; 0x80
    eb78:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
    eb7c:	f500 7098 	add.w	r0, r0, #304	; 0x130
    eb80:	0789      	lsls	r1, r1, #30
    eb82:	d40e      	bmi.n	eba2 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x36>
    eb84:	7f62      	ldrb	r2, [r4, #29]
    eb86:	2100      	movs	r1, #0
    eb88:	4620      	mov	r0, r4
    eb8a:	f7ff f965 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    eb8e:	b130      	cbz	r0, eb9e <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x32>
    eb90:	2001      	movs	r0, #1
    eb92:	7760      	strb	r0, [r4, #29]
    eb94:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    eb98:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
    eb9c:	bd70      	pop	{r4, r5, r6, pc}
    eb9e:	216e      	movs	r1, #110	; 0x6e
    eba0:	e00b      	b.n	ebba <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x4e>
    eba2:	7b21      	ldrb	r1, [r4, #12]
    eba4:	0789      	lsls	r1, r1, #30
    eba6:	d50f      	bpl.n	ebc8 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x5c>
    eba8:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    ebac:	1e49      	subs	r1, r1, #1
    ebae:	b249      	sxtb	r1, r1
    ebb0:	f884 105a 	strb.w	r1, [r4, #90]	; 0x5a
    ebb4:	2900      	cmp	r1, #0
    ebb6:	da03      	bge.n	ebc0 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x54>
    ebb8:	2180      	movs	r1, #128	; 0x80
    ebba:	2040      	movs	r0, #64	; 0x40
    ebbc:	f7f2 fad2 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ebc0:	68e1      	ldr	r1, [r4, #12]
    ebc2:	f021 0102 	bic.w	r1, r1, #2
    ebc6:	60e1      	str	r1, [r4, #12]
    ebc8:	7485      	strb	r5, [r0, #18]
    ebca:	bd70      	pop	{r4, r5, r6, pc}
    ebcc:	2200      	movs	r2, #0
    ebce:	704a      	strb	r2, [r1, #1]
    ebd0:	2219      	movs	r2, #25
    ebd2:	700a      	strb	r2, [r1, #0]
    ebd4:	f8d0 000a 	ldr.w	r0, [r0, #10]
    ebd8:	6048      	str	r0, [r1, #4]
    ebda:	4770      	bx	lr
    ebdc:	b510      	push	{r4, lr}
    ebde:	4604      	mov	r4, r0
    ebe0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    ebe4:	e9d4 1000 	ldrd	r1, r0, [r4]
    ebe8:	4050      	eors	r0, r2
    ebea:	ea70 0101 	orns	r1, r0, r1
    ebee:	d008      	beq.n	ec02 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x96>
    ebf0:	f001 fed3 	bl	1099a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    ebf4:	e9d4 2300 	ldrd	r2, r3, [r4]
    ebf8:	1a80      	subs	r0, r0, r2
    ebfa:	4199      	sbcs	r1, r3
    ebfc:	d301      	bcc.n	ec02 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x96>
    ebfe:	2001      	movs	r0, #1
    ec00:	bd10      	pop	{r4, pc}
    ec02:	2000      	movs	r0, #0
    ec04:	bd10      	pop	{r4, pc}

0000ec06 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>:
    ec06:	b508      	push	{r3, lr}
    ec08:	f000 f804 	bl	ec14 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    ec0c:	466a      	mov	r2, sp
    ec0e:	f7f4 ff11 	bl	3a34 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    ec12:	bd08      	pop	{r3, pc}
    ec14:	b530      	push	{r4, r5, lr}
    ec16:	784c      	ldrb	r4, [r1, #1]
    ec18:	4603      	mov	r3, r0
    ec1a:	7808      	ldrb	r0, [r1, #0]
    ec1c:	788d      	ldrb	r5, [r1, #2]
    ec1e:	0e22      	lsrs	r2, r4, #24
    ec20:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    ec24:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    ec28:	ea42 4215 	orr.w	r2, r2, r5, lsr #16
    ec2c:	78cd      	ldrb	r5, [r1, #3]
    ec2e:	790c      	ldrb	r4, [r1, #4]
    ec30:	ea42 2215 	orr.w	r2, r2, r5, lsr #8
    ec34:	4322      	orrs	r2, r4
    ec36:	7949      	ldrb	r1, [r1, #5]
    ec38:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
    ec3c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ec40:	4611      	mov	r1, r2
    ec42:	2b01      	cmp	r3, #1
    ec44:	d101      	bne.n	ec4a <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x44>
    ec46:	f442 3180 	orr.w	r1, r2, #65536	; 0x10000
    ec4a:	bd30      	pop	{r4, r5, pc}
    ec4c:	2801      	cmp	r0, #1
    ec4e:	d102      	bne.n	ec56 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x50>
    ec50:	7948      	ldrb	r0, [r1, #5]
    ec52:	0980      	lsrs	r0, r0, #6
    ec54:	d001      	beq.n	ec5a <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x54>
    ec56:	2000      	movs	r0, #0
    ec58:	4770      	bx	lr
    ec5a:	2001      	movs	r0, #1
    ec5c:	4770      	bx	lr
    ec5e:	2801      	cmp	r0, #1
    ec60:	d106      	bne.n	ec70 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    ec62:	7948      	ldrb	r0, [r1, #5]
    ec64:	2101      	movs	r1, #1
    ec66:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    ec6a:	d101      	bne.n	ec70 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6a>
    ec6c:	2001      	movs	r0, #1
    ec6e:	4770      	bx	lr
    ec70:	2000      	movs	r0, #0
    ec72:	4770      	bx	lr
    ec74:	2802      	cmp	r0, #2
    ec76:	d003      	beq.n	ec80 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x7a>
    ec78:	2803      	cmp	r0, #3
    ec7a:	d001      	beq.n	ec80 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x7a>
    ec7c:	2000      	movs	r0, #0
    ec7e:	4770      	bx	lr
    ec80:	2001      	movs	r0, #1
    ec82:	4770      	bx	lr

0000ec84 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    ec84:	b510      	push	{r4, lr}
    ec86:	4604      	mov	r4, r0
    ec88:	7c00      	ldrb	r0, [r0, #16]
    ec8a:	f7ff fff3 	bl	ec74 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x6e>
    ec8e:	b148      	cbz	r0, eca4 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    ec90:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    ec94:	f104 0158 	add.w	r1, r4, #88	; 0x58
    ec98:	f7ff f89f 	bl	ddda <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    ec9c:	2808      	cmp	r0, #8
    ec9e:	d001      	beq.n	eca4 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    eca0:	2001      	movs	r0, #1
    eca2:	bd10      	pop	{r4, pc}
    eca4:	7c20      	ldrb	r0, [r4, #16]
    eca6:	b118      	cbz	r0, ecb0 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    eca8:	2802      	cmp	r0, #2
    ecaa:	d001      	beq.n	ecb0 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    ecac:	7de0      	ldrb	r0, [r4, #23]
    ecae:	bd10      	pop	{r4, pc}
    ecb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ecb4:	2000      	movs	r0, #0
    ecb6:	f7f3 b9e5 	b.w	2084 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000ecba <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    ecba:	b508      	push	{r3, lr}
    ecbc:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
    ecc0:	f88d 1000 	strb.w	r1, [sp]
    ecc4:	9900      	ldr	r1, [sp, #0]
    ecc6:	9100      	str	r1, [sp, #0]
    ecc8:	f89d 1000 	ldrb.w	r1, [sp]
    eccc:	b941      	cbnz	r1, ece0 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x26>
    ecce:	f890 10ae 	ldrb.w	r1, [r0, #174]	; 0xae
    ecd2:	f88d 1000 	strb.w	r1, [sp]
    ecd6:	9900      	ldr	r1, [sp, #0]
    ecd8:	9100      	str	r1, [sp, #0]
    ecda:	f89d 1000 	ldrb.w	r1, [sp]
    ecde:	b109      	cbz	r1, ece4 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x2a>
    ece0:	2001      	movs	r0, #1
    ece2:	bd08      	pop	{r3, pc}
    ece4:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    ece8:	f88d 0000 	strb.w	r0, [sp]
    ecec:	9800      	ldr	r0, [sp, #0]
    ecee:	9000      	str	r0, [sp, #0]
    ecf0:	f89d 0000 	ldrb.w	r0, [sp]
    ecf4:	2000      	movs	r0, #0
    ecf6:	bd08      	pop	{r3, pc}

0000ecf8 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    ecf8:	20ff      	movs	r0, #255	; 0xff
    ecfa:	7008      	strb	r0, [r1, #0]
    ecfc:	6b48      	ldr	r0, [r1, #52]	; 0x34
    ecfe:	f7fe bf71 	b.w	dbe4 <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000ed02 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    ed02:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ed04:	460d      	mov	r5, r1
    ed06:	4604      	mov	r4, r0
    ed08:	f44f 728c 	mov.w	r2, #280	; 0x118
    ed0c:	2100      	movs	r1, #0
    ed0e:	f002 f850 	bl	10db2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ed12:	20ff      	movs	r0, #255	; 0xff
    ed14:	7020      	strb	r0, [r4, #0]
    ed16:	207f      	movs	r0, #127	; 0x7f
    ed18:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    ed1c:	2013      	movs	r0, #19
    ed1e:	8060      	strh	r0, [r4, #2]
    ed20:	f242 7010 	movw	r0, #10000	; 0x2710
    ed24:	8460      	strh	r0, [r4, #34]	; 0x22
    ed26:	f7f2 ff9d 	bl	1c64 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    ed2a:	4601      	mov	r1, r0
    ed2c:	6360      	str	r0, [r4, #52]	; 0x34
    ed2e:	2200      	movs	r2, #0
    ed30:	4668      	mov	r0, sp
    ed32:	f7fe febd 	bl	dab0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    ed36:	2200      	movs	r2, #0
    ed38:	2101      	movs	r1, #1
    ed3a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ed3c:	f7fe ff32 	bl	dba4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    ed40:	2204      	movs	r2, #4
    ed42:	4668      	mov	r0, sp
    ed44:	6b61      	ldr	r1, [r4, #52]	; 0x34
    ed46:	f7fe feb3 	bl	dab0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    ed4a:	2200      	movs	r2, #0
    ed4c:	4611      	mov	r1, r2
    ed4e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ed50:	f7fe ff28 	bl	dba4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    ed54:	73a5      	strb	r5, [r4, #14]
    ed56:	f104 0028 	add.w	r0, r4, #40	; 0x28
    ed5a:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    ed5e:	f000 b958 	b.w	f012 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000ed62 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    ed62:	7880      	ldrb	r0, [r0, #2]
    ed64:	f3c0 0080 	ubfx	r0, r0, #2, #1
    ed68:	b108      	cbz	r0, ed6e <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    ed6a:	2000      	movs	r0, #0
    ed6c:	4770      	bx	lr
    ed6e:	201f      	movs	r0, #31
    ed70:	4770      	bx	lr

0000ed72 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    ed72:	f7f5 bbc5 	b.w	4500 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x454>

0000ed76 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    ed76:	6880      	ldr	r0, [r0, #8]
    ed78:	4770      	bx	lr

0000ed7a <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    ed7a:	2001      	movs	r0, #1
    ed7c:	4770      	bx	lr

0000ed7e <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    ed7e:	b510      	push	{r4, lr}
    ed80:	4604      	mov	r4, r0
    ed82:	3028      	adds	r0, #40	; 0x28
    ed84:	f000 f905 	bl	ef92 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    ed88:	8861      	ldrh	r1, [r4, #2]
    ed8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed8e:	2228      	movs	r2, #40	; 0x28
    ed90:	f7f5 bd86 	b.w	48a0 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000ed94 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    ed94:	2200      	movs	r2, #0
    ed96:	8602      	strh	r2, [r0, #48]	; 0x30
    ed98:	8843      	ldrh	r3, [r0, #2]
    ed9a:	2b1d      	cmp	r3, #29
    ed9c:	d001      	beq.n	eda2 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    ed9e:	7341      	strb	r1, [r0, #13]
    eda0:	4770      	bx	lr
    eda2:	7342      	strb	r2, [r0, #13]
    eda4:	4770      	bx	lr

0000eda6 <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>:
    eda6:	b510      	push	{r4, lr}
    eda8:	2400      	movs	r4, #0
    edaa:	6b40      	ldr	r0, [r0, #52]	; 0x34
    edac:	f7fe fef2 	bl	db94 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>
    edb0:	4384      	bics	r4, r0
    edb2:	f084 0001 	eor.w	r0, r4, #1
    edb6:	bd10      	pop	{r4, pc}

0000edb8 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    edb8:	2000      	movs	r0, #0
    edba:	4770      	bx	lr

0000edbc <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    edbc:	7880      	ldrb	r0, [r0, #2]
    edbe:	f000 0001 	and.w	r0, r0, #1
    edc2:	4770      	bx	lr

0000edc4 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    edc4:	7880      	ldrb	r0, [r0, #2]
    edc6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    edca:	4770      	bx	lr

0000edcc <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    edcc:	2001      	movs	r0, #1
    edce:	4770      	bx	lr

0000edd0 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    edd0:	7880      	ldrb	r0, [r0, #2]
    edd2:	f3c0 0040 	ubfx	r0, r0, #1, #1
    edd6:	4770      	bx	lr

0000edd8 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    edd8:	f990 000e 	ldrsb.w	r0, [r0, #14]
    eddc:	4770      	bx	lr

0000edde <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    edde:	7800      	ldrb	r0, [r0, #0]
    ede0:	28ff      	cmp	r0, #255	; 0xff
    ede2:	d001      	beq.n	ede8 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    ede4:	2001      	movs	r0, #1
    ede6:	4770      	bx	lr
    ede8:	2000      	movs	r0, #0
    edea:	4770      	bx	lr

0000edec <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>:
    edec:	f800 1f20 	strb.w	r1, [r0, #32]!
    edf0:	7042      	strb	r2, [r0, #1]
    edf2:	4770      	bx	lr

0000edf4 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    edf4:	680a      	ldr	r2, [r1, #0]
    edf6:	f840 2f11 	str.w	r2, [r0, #17]!
    edfa:	8889      	ldrh	r1, [r1, #4]
    edfc:	8081      	strh	r1, [r0, #4]
    edfe:	2101      	movs	r1, #1
    ee00:	7181      	strb	r1, [r0, #6]
    ee02:	4770      	bx	lr

0000ee04 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    ee04:	7b00      	ldrb	r0, [r0, #12]
    ee06:	4770      	bx	lr

0000ee08 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    ee08:	2001      	movs	r0, #1
    ee0a:	4770      	bx	lr

0000ee0c <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    ee0c:	61c1      	str	r1, [r0, #28]
    ee0e:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    ee12:	724a      	strb	r2, [r1, #9]
    ee14:	f8d0 2051 	ldr.w	r2, [r0, #81]	; 0x51
    ee18:	f8c1 200a 	str.w	r2, [r1, #10]
    ee1c:	f8b0 0055 	ldrh.w	r0, [r0, #85]	; 0x55
    ee20:	81c8      	strh	r0, [r1, #14]
    ee22:	4770      	bx	lr

0000ee24 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    ee24:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    ee28:	4770      	bx	lr

0000ee2a <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    ee2a:	7bc0      	ldrb	r0, [r0, #15]
    ee2c:	2800      	cmp	r0, #0
    ee2e:	d000      	beq.n	ee32 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    ee30:	2001      	movs	r0, #1
    ee32:	4770      	bx	lr
    ee34:	7802      	ldrb	r2, [r0, #0]
    ee36:	2320      	movs	r3, #32
    ee38:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    ee3c:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    ee40:	430a      	orrs	r2, r1
    ee42:	7002      	strb	r2, [r0, #0]
    ee44:	4770      	bx	lr
    ee46:	2101      	movs	r1, #1
    ee48:	f7f4 bfaa 	b.w	3da0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    ee4c:	2101      	movs	r1, #1
    ee4e:	f7f4 bfa7 	b.w	3da0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    ee52:	2200      	movs	r2, #0
    ee54:	704a      	strb	r2, [r1, #1]
    ee56:	2205      	movs	r2, #5
    ee58:	700a      	strb	r2, [r1, #0]
    ee5a:	f8d0 000a 	ldr.w	r0, [r0, #10]
    ee5e:	6048      	str	r0, [r1, #4]
    ee60:	4770      	bx	lr
    ee62:	b510      	push	{r4, lr}
    ee64:	460c      	mov	r4, r1
    ee66:	2100      	movs	r1, #0
    ee68:	7061      	strb	r1, [r4, #1]
    ee6a:	2112      	movs	r1, #18
    ee6c:	7021      	strb	r1, [r4, #0]
    ee6e:	f100 0109 	add.w	r1, r0, #9
    ee72:	2221      	movs	r2, #33	; 0x21
    ee74:	1d20      	adds	r0, r4, #4
    ee76:	f001 ff22 	bl	10cbe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ee7a:	2001      	movs	r0, #1
    ee7c:	71e0      	strb	r0, [r4, #7]
    ee7e:	7920      	ldrb	r0, [r4, #4]
    ee80:	2800      	cmp	r0, #0
    ee82:	d015      	beq.n	eeb0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x86>
    ee84:	f8b4 4005 	ldrh.w	r4, [r4, #5]
    ee88:	2100      	movs	r1, #0
    ee8a:	4620      	mov	r0, r4
    ee8c:	f7f2 fc98 	bl	17c0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ee90:	2800      	cmp	r0, #0
    ee92:	d00d      	beq.n	eeb0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x86>
    ee94:	8800      	ldrh	r0, [r0, #0]
    ee96:	f7fe ff04 	bl	dca2 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    ee9a:	2100      	movs	r1, #0
    ee9c:	4620      	mov	r0, r4
    ee9e:	f7f2 fd31 	bl	1904 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    eea2:	2800      	cmp	r0, #0
    eea4:	d004      	beq.n	eeb0 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x86>
    eea6:	f240 2151 	movw	r1, #593	; 0x251
    eeaa:	202d      	movs	r0, #45	; 0x2d
    eeac:	f7f2 f95a 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eeb0:	bd10      	pop	{r4, pc}
    eeb2:	2200      	movs	r2, #0
    eeb4:	704a      	strb	r2, [r1, #1]
    eeb6:	221a      	movs	r2, #26
    eeb8:	700a      	strb	r2, [r1, #0]
    eeba:	f850 2f09 	ldr.w	r2, [r0, #9]!
    eebe:	604a      	str	r2, [r1, #4]
    eec0:	6842      	ldr	r2, [r0, #4]
    eec2:	608a      	str	r2, [r1, #8]
    eec4:	7a00      	ldrb	r0, [r0, #8]
    eec6:	7308      	strb	r0, [r1, #12]
    eec8:	4770      	bx	lr
    eeca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eece:	4604      	mov	r4, r0
    eed0:	460f      	mov	r7, r1
    eed2:	7e40      	ldrb	r0, [r0, #25]
    eed4:	f7f3 fe12 	bl	2afc <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    eed8:	4606      	mov	r6, r0
    eeda:	7e20      	ldrb	r0, [r4, #24]
    eedc:	f104 0551 	add.w	r5, r4, #81	; 0x51
    eee0:	b120      	cbz	r0, eeec <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc2>
    eee2:	b11e      	cbz	r6, eeec <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xc2>
    eee4:	7e60      	ldrb	r0, [r4, #25]
    eee6:	f7f3 fdfd 	bl	2ae4 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    eeea:	b1a0      	cbz	r0, ef16 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xec>
    eeec:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    eef0:	2800      	cmp	r0, #0
    eef2:	d024      	beq.n	ef3e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x114>
    eef4:	7ea0      	ldrb	r0, [r4, #26]
    eef6:	2800      	cmp	r0, #0
    eef8:	d021      	beq.n	ef3e <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x114>
    eefa:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    eefe:	4629      	mov	r1, r5
    ef00:	f7ff fead 	bl	ec5e <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x58>
    ef04:	b1a8      	cbz	r0, ef32 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x108>
    ef06:	f7f3 fde9 	bl	2adc <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    ef0a:	463a      	mov	r2, r7
    ef0c:	4629      	mov	r1, r5
    ef0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ef12:	f7fe befa 	b.w	dd0a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    ef16:	2001      	movs	r0, #1
    ef18:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    ef1c:	463a      	mov	r2, r7
    ef1e:	4629      	mov	r1, r5
    ef20:	4630      	mov	r0, r6
    ef22:	f7fe fef2 	bl	dd0a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    ef26:	7e61      	ldrb	r1, [r4, #25]
    ef28:	4628      	mov	r0, r5
    ef2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ef2e:	f7f3 bdf1 	b.w	2b14 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    ef32:	4639      	mov	r1, r7
    ef34:	4628      	mov	r0, r5
    ef36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ef3a:	f7fe bed5 	b.w	dce8 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    ef3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ef42:	b510      	push	{r4, lr}
    ef44:	4604      	mov	r4, r0
    ef46:	4608      	mov	r0, r1
    ef48:	f7f9 fb5a 	bl	8600 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    ef4c:	7921      	ldrb	r1, [r4, #4]
    ef4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef52:	2025      	movs	r0, #37	; 0x25
    ef54:	f7f9 bb2a 	b.w	85ac <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    ef58:	b570      	push	{r4, r5, r6, lr}
    ef5a:	4614      	mov	r4, r2
    ef5c:	461d      	mov	r5, r3
    ef5e:	4606      	mov	r6, r0
    ef60:	f001 fd1b 	bl	1099a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    ef64:	1900      	adds	r0, r0, r4
    ef66:	4169      	adcs	r1, r5
    ef68:	e9c6 0100 	strd	r0, r1, [r6]
    ef6c:	bd70      	pop	{r4, r5, r6, pc}

0000ef6e <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    ef6e:	b570      	push	{r4, r5, r6, lr}
    ef70:	7001      	strb	r1, [r0, #0]
    ef72:	7042      	strb	r2, [r0, #1]
    ef74:	4614      	mov	r4, r2
    ef76:	460d      	mov	r5, r1
    ef78:	7880      	ldrb	r0, [r0, #2]
    ef7a:	f000 f87f 	bl	f07c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ef7e:	fb10 f005 	smulbb	r0, r0, r5
    ef82:	4360      	muls	r0, r4
    ef84:	28ff      	cmp	r0, #255	; 0xff
    ef86:	d303      	bcc.n	ef90 <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    ef88:	215c      	movs	r1, #92	; 0x5c
    ef8a:	202e      	movs	r0, #46	; 0x2e
    ef8c:	f7f2 f8ea 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef90:	bd70      	pop	{r4, r5, r6, pc}

0000ef92 <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    ef92:	b510      	push	{r4, lr}
    ef94:	4604      	mov	r4, r0
    ef96:	7880      	ldrb	r0, [r0, #2]
    ef98:	f000 f870 	bl	f07c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ef9c:	7861      	ldrb	r1, [r4, #1]
    ef9e:	7822      	ldrb	r2, [r4, #0]
    efa0:	fb11 f102 	smulbb	r1, r1, r2
    efa4:	4348      	muls	r0, r1
    efa6:	b2c0      	uxtb	r0, r0
    efa8:	bd10      	pop	{r4, pc}

0000efaa <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    efaa:	b510      	push	{r4, lr}
    efac:	4604      	mov	r4, r0
    efae:	f000 f84d 	bl	f04c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    efb2:	7961      	ldrb	r1, [r4, #5]
    efb4:	1c49      	adds	r1, r1, #1
    efb6:	b2c9      	uxtb	r1, r1
    efb8:	7161      	strb	r1, [r4, #5]
    efba:	7862      	ldrb	r2, [r4, #1]
    efbc:	4291      	cmp	r1, r2
    efbe:	d10b      	bne.n	efd8 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    efc0:	2200      	movs	r2, #0
    efc2:	7162      	strb	r2, [r4, #5]
    efc4:	78e1      	ldrb	r1, [r4, #3]
    efc6:	4301      	orrs	r1, r0
    efc8:	70e1      	strb	r1, [r4, #3]
    efca:	78a3      	ldrb	r3, [r4, #2]
    efcc:	4299      	cmp	r1, r3
    efce:	d103      	bne.n	efd8 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    efd0:	70e2      	strb	r2, [r4, #3]
    efd2:	7921      	ldrb	r1, [r4, #4]
    efd4:	1c49      	adds	r1, r1, #1
    efd6:	7121      	strb	r1, [r4, #4]
    efd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    efdc:	f000 b825 	b.w	f02a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000efe0 <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    efe0:	7081      	strb	r1, [r0, #2]
    efe2:	4770      	bx	lr

0000efe4 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    efe4:	b570      	push	{r4, r5, r6, lr}
    efe6:	4604      	mov	r4, r0
    efe8:	7880      	ldrb	r0, [r0, #2]
    efea:	f000 f847 	bl	f07c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    efee:	7861      	ldrb	r1, [r4, #1]
    eff0:	fb11 f500 	smulbb	r5, r1, r0
    eff4:	78e0      	ldrb	r0, [r4, #3]
    eff6:	f000 f841 	bl	f07c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    effa:	7861      	ldrb	r1, [r4, #1]
    effc:	7962      	ldrb	r2, [r4, #5]
    effe:	fb10 2001 	smlabb	r0, r0, r1, r2
    f002:	7821      	ldrb	r1, [r4, #0]
    f004:	7922      	ldrb	r2, [r4, #4]
    f006:	1a89      	subs	r1, r1, r2
    f008:	fb11 f105 	smulbb	r1, r1, r5
    f00c:	1a08      	subs	r0, r1, r0
    f00e:	b2c0      	uxtb	r0, r0
    f010:	bd70      	pop	{r4, r5, r6, pc}

0000f012 <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    f012:	2100      	movs	r1, #0
    f014:	6001      	str	r1, [r0, #0]
    f016:	8081      	strh	r1, [r0, #4]
    f018:	2101      	movs	r1, #1
    f01a:	7041      	strb	r1, [r0, #1]
    f01c:	7001      	strb	r1, [r0, #0]
    f01e:	4770      	bx	lr

0000f020 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    f020:	2100      	movs	r1, #0
    f022:	70c1      	strb	r1, [r0, #3]
    f024:	7141      	strb	r1, [r0, #5]
    f026:	7101      	strb	r1, [r0, #4]
    f028:	4770      	bx	lr
    f02a:	b510      	push	{r4, lr}
    f02c:	2801      	cmp	r0, #1
    f02e:	d007      	beq.n	f040 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    f030:	2802      	cmp	r0, #2
    f032:	d007      	beq.n	f044 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    f034:	2804      	cmp	r0, #4
    f036:	d007      	beq.n	f048 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    f038:	2139      	movs	r1, #57	; 0x39
    f03a:	202e      	movs	r0, #46	; 0x2e
    f03c:	f7f2 f892 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f040:	2025      	movs	r0, #37	; 0x25
    f042:	bd10      	pop	{r4, pc}
    f044:	2026      	movs	r0, #38	; 0x26
    f046:	bd10      	pop	{r4, pc}
    f048:	2027      	movs	r0, #39	; 0x27
    f04a:	bd10      	pop	{r4, pc}
    f04c:	4601      	mov	r1, r0
    f04e:	2000      	movs	r0, #0
    f050:	788a      	ldrb	r2, [r1, #2]
    f052:	07d3      	lsls	r3, r2, #31
    f054:	d002      	beq.n	f05c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    f056:	78cb      	ldrb	r3, [r1, #3]
    f058:	07db      	lsls	r3, r3, #31
    f05a:	d006      	beq.n	f06a <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    f05c:	0793      	lsls	r3, r2, #30
    f05e:	d506      	bpl.n	f06e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    f060:	78cb      	ldrb	r3, [r1, #3]
    f062:	079b      	lsls	r3, r3, #30
    f064:	d403      	bmi.n	f06e <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    f066:	2002      	movs	r0, #2
    f068:	4770      	bx	lr
    f06a:	2001      	movs	r0, #1
    f06c:	4770      	bx	lr
    f06e:	0752      	lsls	r2, r2, #29
    f070:	d5fc      	bpl.n	f06c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    f072:	78c9      	ldrb	r1, [r1, #3]
    f074:	0749      	lsls	r1, r1, #29
    f076:	d4f9      	bmi.n	f06c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    f078:	2004      	movs	r0, #4
    f07a:	4770      	bx	lr
    f07c:	f3c0 0180 	ubfx	r1, r0, #2, #1
    f080:	f3c0 0240 	ubfx	r2, r0, #1, #1
    f084:	4411      	add	r1, r2
    f086:	f000 0001 	and.w	r0, r0, #1
    f08a:	4408      	add	r0, r1
    f08c:	4770      	bx	lr

0000f08e <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    f08e:	f240 315a 	movw	r1, #858	; 0x35a
    f092:	4348      	muls	r0, r1
    f094:	4770      	bx	lr

0000f096 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    f096:	f240 20ef 	movw	r0, #751	; 0x2ef
    f09a:	4770      	bx	lr
    f09c:	041c020e 	.word	0x041c020e
    f0a0:	0c600630 	.word	0x0c600630
    f0a4:	06b4035a 	.word	0x06b4035a
    f0a8:	0bf505c5 	.word	0x0bf505c5
    f0ac:	01a31225 	.word	0x01a31225
    f0b0:	05bf03b1 	.word	0x05bf03b1
    f0b4:	064902ef 	.word	0x064902ef
    f0b8:	09a3      	.short	0x09a3

0000f0ba <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    f0ba:	b510      	push	{r4, lr}
    f0bc:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    f0c0:	b109      	cbz	r1, f0c6 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    f0c2:	2000      	movs	r0, #0
    f0c4:	bd10      	pop	{r4, pc}
    f0c6:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    f0ca:	b131      	cbz	r1, f0da <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    f0cc:	e9d0 1235 	ldrd	r1, r2, [r0, #212]	; 0xd4
    f0d0:	428a      	cmp	r2, r1
    f0d2:	d902      	bls.n	f0da <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    f0d4:	f7f4 fe4c 	bl	3d70 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    f0d8:	e7f3      	b.n	f0c2 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    f0da:	2001      	movs	r0, #1
    f0dc:	bd10      	pop	{r4, pc}

0000f0de <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    f0de:	b510      	push	{r4, lr}
    f0e0:	b131      	cbz	r1, f0f0 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    f0e2:	2901      	cmp	r1, #1
    f0e4:	d008      	beq.n	f0f8 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    f0e6:	f240 71d3 	movw	r1, #2003	; 0x7d3
    f0ea:	2030      	movs	r0, #48	; 0x30
    f0ec:	f7f2 f83a 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f0f4:	f000 b9c7 	b.w	f486 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x328>
    f0f8:	2100      	movs	r1, #0
    f0fa:	f880 10d0 	strb.w	r1, [r0, #208]	; 0xd0
    f0fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f102:	f000 b923 	b.w	f34c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>

0000f106 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    f106:	b510      	push	{r4, lr}
    f108:	4604      	mov	r4, r0
    f10a:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    f10e:	2800      	cmp	r0, #0
    f110:	d019      	beq.n	f146 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    f112:	2001      	movs	r0, #1
    f114:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
    f118:	4601      	mov	r1, r0
    f11a:	4620      	mov	r0, r4
    f11c:	f7ff fe82 	bl	ee24 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    f120:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    f124:	b170      	cbz	r0, f144 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    f126:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    f12a:	f7fb fd01 	bl	ab30 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    f12e:	7820      	ldrb	r0, [r4, #0]
    f130:	f7fb fe76 	bl	ae20 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    f134:	f814 09c8 	ldrb.w	r0, [r4], #-200
    f138:	f7fb fe50 	bl	addc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f13c:	b120      	cbz	r0, f148 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    f13e:	2000      	movs	r0, #0
    f140:	f884 00e0 	strb.w	r0, [r4, #224]	; 0xe0
    f144:	2000      	movs	r0, #0
    f146:	bd10      	pop	{r4, pc}
    f148:	f240 210b 	movw	r1, #523	; 0x20b
    f14c:	2030      	movs	r0, #48	; 0x30
    f14e:	f7f2 f809 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f152 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    f152:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    f156:	4770      	bx	lr

0000f158 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    f158:	f890 00e0 	ldrb.w	r0, [r0, #224]	; 0xe0
    f15c:	4770      	bx	lr

0000f15e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    f15e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f160:	4604      	mov	r4, r0
    f162:	f890 022b 	ldrb.w	r0, [r0, #555]	; 0x22b
    f166:	2800      	cmp	r0, #0
    f168:	d15f      	bne.n	f22a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f16a:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    f16e:	2803      	cmp	r0, #3
    f170:	d15b      	bne.n	f22a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f172:	f001 fc12 	bl	1099a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    f176:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
    f17a:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
    f17e:	1ac0      	subs	r0, r0, r3
    f180:	eb61 0102 	sbc.w	r1, r1, r2
    f184:	2300      	movs	r3, #0
    f186:	461a      	mov	r2, r3
    f188:	1a1b      	subs	r3, r3, r0
    f18a:	418a      	sbcs	r2, r1
    f18c:	da4d      	bge.n	f22a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f18e:	1c42      	adds	r2, r0, #1
    f190:	f171 0100 	sbcs.w	r1, r1, #0
    f194:	db02      	blt.n	f19c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3e>
    f196:	f240 610b 	movw	r1, #1547	; 0x60b
    f19a:	e036      	b.n	f20a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xac>
    f19c:	6921      	ldr	r1, [r4, #16]
    f19e:	b111      	cbz	r1, f1a6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x48>
    f1a0:	fbb0 f0f1 	udiv	r0, r0, r1
    f1a4:	e000      	b.n	f1a8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4a>
    f1a6:	2000      	movs	r0, #0
    f1a8:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    f1ac:	1c40      	adds	r0, r0, #1
    f1ae:	4408      	add	r0, r1
    f1b0:	f8a4 026c 	strh.w	r0, [r4, #620]	; 0x26c
    f1b4:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    f1b8:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    f1bc:	1a08      	subs	r0, r1, r0
    f1be:	b200      	sxth	r0, r0
    f1c0:	2800      	cmp	r0, #0
    f1c2:	dd32      	ble.n	f22a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f1c4:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    f1c8:	f7fb fcb2 	bl	ab30 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    f1cc:	2800      	cmp	r0, #0
    f1ce:	d02c      	beq.n	f22a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f1d0:	20ff      	movs	r0, #255	; 0xff
    f1d2:	f884 0271 	strb.w	r0, [r4, #625]	; 0x271
    f1d6:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
    f1da:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
    f1de:	ae01      	add	r6, sp, #4
    f1e0:	1a40      	subs	r0, r0, r1
    f1e2:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    f1e6:	1e40      	subs	r0, r0, #1
    f1e8:	4408      	add	r0, r1
    f1ea:	b285      	uxth	r5, r0
    f1ec:	e017      	b.n	f21e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xc0>
    f1ee:	9600      	str	r6, [sp, #0]
    f1f0:	f8b4 126c 	ldrh.w	r1, [r4, #620]	; 0x26c
    f1f4:	2300      	movs	r3, #0
    f1f6:	2201      	movs	r2, #1
    f1f8:	4620      	mov	r0, r4
    f1fa:	f7f5 fe59 	bl	4eb0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
    f1fe:	2800      	cmp	r0, #0
    f200:	d013      	beq.n	f22a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f202:	2801      	cmp	r0, #1
    f204:	d004      	beq.n	f210 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb2>
    f206:	f240 6144 	movw	r1, #1604	; 0x644
    f20a:	2030      	movs	r0, #48	; 0x30
    f20c:	f7f1 ffaa 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f210:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    f214:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    f218:	4408      	add	r0, r1
    f21a:	f8a4 026c 	strh.w	r0, [r4, #620]	; 0x26c
    f21e:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    f222:	1a28      	subs	r0, r5, r0
    f224:	b200      	sxth	r0, r0
    f226:	2800      	cmp	r0, #0
    f228:	dae1      	bge.n	f1ee <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x90>
    f22a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f22c:	2000      	movs	r0, #0
    f22e:	4770      	bx	lr
    f230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f234:	4604      	mov	r4, r0
    f236:	f000 f8ff 	bl	f438 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2da>
    f23a:	2700      	movs	r7, #0
    f23c:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    f240:	f884 70e8 	strb.w	r7, [r4, #232]	; 0xe8
    f244:	2601      	movs	r6, #1
    f246:	f884 60f3 	strb.w	r6, [r4, #243]	; 0xf3
    f24a:	8c60      	ldrh	r0, [r4, #34]	; 0x22
    f24c:	463d      	mov	r5, r7
    f24e:	b130      	cbz	r0, f25e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x100>
    f250:	f001 fba3 	bl	1099a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    f254:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    f256:	fbb0 f2f1 	udiv	r2, r0, r1
    f25a:	fb01 0512 	mls	r5, r1, r2, r0
    f25e:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
    f262:	2100      	movs	r1, #0
    f264:	4680      	mov	r8, r0
    f266:	f7fe fec5 	bl	dff4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    f26a:	e9f4 103e 	ldrd	r1, r0, [r4, #248]!	; 0xf8
    f26e:	1949      	adds	r1, r1, r5
    f270:	4178      	adcs	r0, r7
    f272:	e9c4 1000 	strd	r1, r0, [r4]
    f276:	8920      	ldrh	r0, [r4, #8]
    f278:	3cf8      	subs	r4, #248	; 0xf8
    f27a:	1c40      	adds	r0, r0, #1
    f27c:	280a      	cmp	r0, #10
    f27e:	d201      	bcs.n	f284 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x126>
    f280:	f8a4 0100 	strh.w	r0, [r4, #256]	; 0x100
    f284:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    f288:	b138      	cbz	r0, f29a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
    f28a:	f8b4 0100 	ldrh.w	r0, [r4, #256]	; 0x100
    f28e:	1c40      	adds	r0, r0, #1
    f290:	280a      	cmp	r0, #10
    f292:	d302      	bcc.n	f29a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x13c>
    f294:	f884 60f2 	strb.w	r6, [r4, #242]	; 0xf2
    f298:	e002      	b.n	f2a0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x142>
    f29a:	2002      	movs	r0, #2
    f29c:	f884 00f2 	strb.w	r0, [r4, #242]	; 0xf2
    f2a0:	4620      	mov	r0, r4
    f2a2:	f000 f823 	bl	f2ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
    f2a6:	b120      	cbz	r0, f2b2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x154>
    f2a8:	4620      	mov	r0, r4
    f2aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f2ae:	f000 b80e 	b.w	f2ce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
    f2b2:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    f2b6:	4641      	mov	r1, r8
    f2b8:	f000 f8bc 	bl	f434 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    f2bc:	2800      	cmp	r0, #0
    f2be:	d104      	bne.n	f2ca <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x16c>
    f2c0:	f240 61e7 	movw	r1, #1767	; 0x6e7
    f2c4:	2030      	movs	r0, #48	; 0x30
    f2c6:	f7f1 ff4d 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f2ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f2ce:	b510      	push	{r4, lr}
    f2d0:	4604      	mov	r4, r0
    f2d2:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    f2d6:	f7fb fd81 	bl	addc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f2da:	2000      	movs	r0, #0
    f2dc:	7620      	strb	r0, [r4, #24]
    f2de:	bd10      	pop	{r4, pc}
    f2e0:	b510      	push	{r4, lr}
    f2e2:	f7ff fd4c 	bl	ed7e <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    f2e6:	f200 1015 	addw	r0, r0, #277	; 0x115
    f2ea:	bd10      	pop	{r4, pc}
    f2ec:	b570      	push	{r4, r5, r6, lr}
    f2ee:	4605      	mov	r5, r0
    f2f0:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
    f2f4:	b108      	cbz	r0, f2fa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x19c>
    f2f6:	2001      	movs	r0, #1
    f2f8:	bd70      	pop	{r4, r5, r6, pc}
    f2fa:	e9d5 1042 	ldrd	r1, r0, [r5, #264]	; 0x108
    f2fe:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    f302:	4050      	eors	r0, r2
    f304:	ea70 0101 	orns	r1, r0, r1
    f308:	d012      	beq.n	f330 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d2>
    f30a:	2400      	movs	r4, #0
    f30c:	4621      	mov	r1, r4
    f30e:	4628      	mov	r0, r5
    f310:	f7ff ffe6 	bl	f2e0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    f314:	e9f5 123e 	ldrd	r1, r2, [r5, #248]!	; 0xf8
    f318:	1840      	adds	r0, r0, r1
    f31a:	4154      	adcs	r4, r2
    f31c:	e9d5 2104 	ldrd	r2, r1, [r5, #16]
    f320:	3df8      	subs	r5, #248	; 0xf8
    f322:	1a10      	subs	r0, r2, r0
    f324:	41a1      	sbcs	r1, r4
    f326:	d503      	bpl.n	f330 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d2>
    f328:	4628      	mov	r0, r5
    f32a:	f7f4 fd21 	bl	3d70 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    f32e:	e7e2      	b.n	f2f6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x198>
    f330:	2000      	movs	r0, #0
    f332:	bd70      	pop	{r4, r5, r6, pc}
    f334:	b510      	push	{r4, lr}
    f336:	4604      	mov	r4, r0
    f338:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    f33c:	f000 f988 	bl	f650 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4f2>
    f340:	4601      	mov	r1, r0
    f342:	4620      	mov	r0, r4
    f344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f348:	f7ff b9c7 	b.w	e6da <sym_DGN3THKILL676ISUGG6LI5PGTHVDBLTDPNXUCAA>
    f34c:	b510      	push	{r4, lr}
    f34e:	f7f8 ff89 	bl	8264 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    f352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f356:	f7fb be9f 	b.w	b098 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    f35a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f35e:	4604      	mov	r4, r0
    f360:	f890 0272 	ldrb.w	r0, [r0, #626]	; 0x272
    f364:	2800      	cmp	r0, #0
    f366:	d051      	beq.n	f40c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ae>
    f368:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    f36c:	2803      	cmp	r0, #3
    f36e:	d14d      	bne.n	f40c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ae>
    f370:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
    f374:	f001 fa2a 	bl	107cc <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    f378:	4605      	mov	r5, r0
    f37a:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    f37e:	f7f5 fc63 	bl	4c48 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
    f382:	4428      	add	r0, r5
    f384:	b286      	uxth	r6, r0
    f386:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    f38a:	f7f5 fc5d 	bl	4c48 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x90>
    f38e:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    f392:	fa1f f880 	uxth.w	r8, r0
    f396:	4648      	mov	r0, r9
    f398:	f7f9 f822 	bl	83e0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f39c:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    f3a0:	1a0d      	subs	r5, r1, r0
    f3a2:	4648      	mov	r0, r9
    f3a4:	f7f9 f848 	bl	8438 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f3a8:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    f3ac:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    f3b0:	fbb0 f0fa 	udiv	r0, r0, sl
    f3b4:	1a2d      	subs	r5, r5, r0
    f3b6:	4648      	mov	r0, r9
    f3b8:	f7f9 f812 	bl	83e0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f3bc:	f8d4 1230 	ldr.w	r1, [r4, #560]	; 0x230
    f3c0:	1a0f      	subs	r7, r1, r0
    f3c2:	4648      	mov	r0, r9
    f3c4:	f7f9 f838 	bl	8438 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f3c8:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    f3cc:	4401      	add	r1, r0
    f3ce:	fbb1 f0fa 	udiv	r0, r1, sl
    f3d2:	1a39      	subs	r1, r7, r0
    f3d4:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    f3d8:	4370      	muls	r0, r6
    f3da:	fbb0 f2f8 	udiv	r2, r0, r8
    f3de:	2029      	movs	r0, #41	; 0x29
    f3e0:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    f3e4:	3260      	adds	r2, #96	; 0x60
    f3e6:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    f3ea:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    f3ee:	42a9      	cmp	r1, r5
    f3f0:	d801      	bhi.n	f3f6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x298>
    f3f2:	4285      	cmp	r5, r0
    f3f4:	d901      	bls.n	f3fa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x29c>
    f3f6:	f7fd f849 	bl	c48c <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    f3fa:	4631      	mov	r1, r6
    f3fc:	6920      	ldr	r0, [r4, #16]
    f3fe:	f7fd f8ad 	bl	c55c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    f402:	2100      	movs	r1, #0
    f404:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    f408:	f884 1272 	strb.w	r1, [r4, #626]	; 0x272
    f40c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f410:	b570      	push	{r4, r5, r6, lr}
    f412:	460c      	mov	r4, r1
    f414:	4605      	mov	r5, r0
    f416:	f7f9 f80f 	bl	8438 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f41a:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    f41e:	4408      	add	r0, r1
    f420:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f424:	fbb0 f6f1 	udiv	r6, r0, r1
    f428:	4628      	mov	r0, r5
    f42a:	f7f8 ffd9 	bl	83e0 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f42e:	4430      	add	r0, r6
    f430:	4420      	add	r0, r4
    f432:	bd70      	pop	{r4, r5, r6, pc}
    f434:	f7fa bf2c 	b.w	a290 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    f438:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f43a:	4604      	mov	r4, r0
    f43c:	f7ff fcc6 	bl	edcc <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f440:	b1f8      	cbz	r0, f482 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x324>
    f442:	4620      	mov	r0, r4
    f444:	f7ff fcba 	bl	edbc <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f448:	b918      	cbnz	r0, f452 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f4>
    f44a:	4620      	mov	r0, r4
    f44c:	f7ff fcc0 	bl	edd0 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f450:	b140      	cbz	r0, f464 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x306>
    f452:	245a      	movs	r4, #90	; 0x5a
    f454:	4668      	mov	r0, sp
    f456:	f7fd fad7 	bl	ca08 <mpsl_fem_pa_is_configured>
    f45a:	f89d 0000 	ldrb.w	r0, [sp]
    f45e:	b118      	cbz	r0, f468 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30a>
    f460:	2501      	movs	r5, #1
    f462:	e002      	b.n	f46a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x30c>
    f464:	2450      	movs	r4, #80	; 0x50
    f466:	e7f5      	b.n	f454 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2f6>
    f468:	2500      	movs	r5, #0
    f46a:	a801      	add	r0, sp, #4
    f46c:	f7fd fab4 	bl	c9d8 <mpsl_fem_lna_is_configured>
    f470:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f474:	b100      	cbz	r0, f478 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x31a>
    f476:	2001      	movs	r0, #1
    f478:	4305      	orrs	r5, r0
    f47a:	d000      	beq.n	f47e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x320>
    f47c:	340a      	adds	r4, #10
    f47e:	4620      	mov	r0, r4
    f480:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f482:	2061      	movs	r0, #97	; 0x61
    f484:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f486:	b570      	push	{r4, r5, r6, lr}
    f488:	4604      	mov	r4, r0
    f48a:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    f48c:	2500      	movs	r5, #0
    f48e:	b130      	cbz	r0, f49e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x340>
    f490:	f7f4 f85c 	bl	354c <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    f494:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    f496:	fbb0 f2f1 	udiv	r2, r0, r1
    f49a:	fb01 0512 	mls	r5, r1, r2, r0
    f49e:	4620      	mov	r0, r4
    f4a0:	f7ff fc69 	bl	ed76 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    f4a4:	e9d4 213e 	ldrd	r2, r1, [r4, #248]	; 0xf8
    f4a8:	4428      	add	r0, r5
    f4aa:	34e8      	adds	r4, #232	; 0xe8
    f4ac:	2500      	movs	r5, #0
    f4ae:	1882      	adds	r2, r0, r2
    f4b0:	eb45 0001 	adc.w	r0, r5, r1
    f4b4:	e9c4 2004 	strd	r2, r0, [r4, #16]
    f4b8:	f804 5b0b 	strb.w	r5, [r4], #11
    f4bc:	2001      	movs	r0, #1
    f4be:	f804 0901 	strb.w	r0, [r4], #-1
    f4c2:	2002      	movs	r0, #2
    f4c4:	f804 09f2 	strb.w	r0, [r4], #-242
    f4c8:	4620      	mov	r0, r4
    f4ca:	f7ff ffb5 	bl	f438 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2da>
    f4ce:	f8a4 00f0 	strh.w	r0, [r4, #240]	; 0xf0
    f4d2:	4620      	mov	r0, r4
    f4d4:	f7ff ff0a 	bl	f2ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x18e>
    f4d8:	b930      	cbnz	r0, f4e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x38a>
    f4da:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    f4de:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    f4e2:	f7ff ffa7 	bl	f434 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d6>
    f4e6:	b128      	cbz	r0, f4f4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x396>
    f4e8:	f8a4 5100 	strh.w	r5, [r4, #256]	; 0x100
    f4ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f4f0:	f7ff bf2c 	b.w	f34c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    f4f4:	f240 712d 	movw	r1, #1837	; 0x72d
    f4f8:	2030      	movs	r0, #48	; 0x30
    f4fa:	f7f1 fe33 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f4fe:	b510      	push	{r4, lr}
    f500:	4604      	mov	r4, r0
    f502:	2000      	movs	r0, #0
    f504:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    f508:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    f50c:	f7fb fc66 	bl	addc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f510:	2020      	movs	r0, #32
    f512:	f884 02a4 	strb.w	r0, [r4, #676]	; 0x2a4
    f516:	bd10      	pop	{r4, pc}
    f518:	b510      	push	{r4, lr}
    f51a:	b140      	cbz	r0, f52e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3d0>
    f51c:	2909      	cmp	r1, #9
    f51e:	d22f      	bcs.n	f580 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x422>
    f520:	e8df f001 	tbb	[pc, r1]
    f524:	1e1e1607 	.word	0x1e1e1607
    f528:	26222e1a 	.word	0x26222e1a
    f52c:	002a      	.short	0x002a
    f52e:	21cd      	movs	r1, #205	; 0xcd
    f530:	e023      	b.n	f57a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x41c>
    f532:	4604      	mov	r4, r0
    f534:	f7f4 fbec 	bl	3d10 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    f538:	b110      	cbz	r0, f540 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3e2>
    f53a:	f240 2187 	movw	r1, #647	; 0x287
    f53e:	e01c      	b.n	f57a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x41c>
    f540:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
    f544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f548:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
    f54c:	f7fb be80 	b.w	b250 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    f550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f554:	f000 b8b1 	b.w	f6ba <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x55c>
    f558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f55c:	f7f9 b856 	b.w	860c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f564:	f7ff be64 	b.w	f230 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xd2>
    f568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f56c:	f7ff bc01 	b.w	ed72 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    f570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f574:	f7ff beab 	b.w	f2ce <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x170>
    f578:	21ed      	movs	r1, #237	; 0xed
    f57a:	2030      	movs	r0, #48	; 0x30
    f57c:	f7f1 fdf2 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f580:	21f1      	movs	r1, #241	; 0xf1
    f582:	e7fa      	b.n	f57a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x41c>
    f584:	b510      	push	{r4, lr}
    f586:	0004      	movs	r4, r0
    f588:	d009      	beq.n	f59e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x440>
    f58a:	2200      	movs	r2, #0
    f58c:	2909      	cmp	r1, #9
    f58e:	d25d      	bcs.n	f64c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4ee>
    f590:	e8df f001 	tbb	[pc, r1]
    f594:	43433b07 	.word	0x43433b07
    f598:	4f485c3f 	.word	0x4f485c3f
    f59c:	0058      	.short	0x0058
    f59e:	2196      	movs	r1, #150	; 0x96
    f5a0:	e051      	b.n	f646 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
    f5a2:	f8c4 22ac 	str.w	r2, [r4, #684]	; 0x2ac
    f5a6:	f894 1270 	ldrb.w	r1, [r4, #624]	; 0x270
    f5aa:	4620      	mov	r0, r4
    f5ac:	b189      	cbz	r1, f5d2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x474>
    f5ae:	f8b0 226e 	ldrh.w	r2, [r0, #622]	; 0x26e
    f5b2:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    f5b6:	428a      	cmp	r2, r1
    f5b8:	d106      	bne.n	f5c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x46a>
    f5ba:	f8b0 2224 	ldrh.w	r2, [r0, #548]	; 0x224
    f5be:	1a51      	subs	r1, r2, r1
    f5c0:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    f5c4:	4611      	mov	r1, r2
    f5c6:	e00d      	b.n	f5e4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x486>
    f5c8:	1a51      	subs	r1, r2, r1
    f5ca:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    f5ce:	b291      	uxth	r1, r2
    f5d0:	e008      	b.n	f5e4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x486>
    f5d2:	f8b0 126c 	ldrh.w	r1, [r0, #620]	; 0x26c
    f5d6:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
    f5da:	1a89      	subs	r1, r1, r2
    f5dc:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    f5e0:	f8b0 126c 	ldrh.w	r1, [r0, #620]	; 0x26c
    f5e4:	f8a0 1094 	strh.w	r1, [r0, #148]	; 0x94
    f5e8:	e9d0 12a2 	ldrd	r1, r2, [r0, #648]	; 0x288
    f5ec:	f8c0 1290 	str.w	r1, [r0, #656]	; 0x290
    f5f0:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
    f5f4:	f7f5 fff6 	bl	55e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    f5f8:	f894 022b 	ldrb.w	r0, [r4, #555]	; 0x22b
    f5fc:	2800      	cmp	r0, #0
    f5fe:	d020      	beq.n	f642 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e4>
    f600:	4620      	mov	r0, r4
    f602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f606:	f7f5 bbd7 	b.w	4db8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x200>
    f60a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f60e:	f000 b8a0 	b.w	f752 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    f612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f616:	f7f8 bff9 	b.w	860c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f61a:	4620      	mov	r0, r4
    f61c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f620:	f7f5 be50 	b.w	52c4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x70c>
    f624:	2001      	movs	r0, #1
    f626:	f7fa fbf3 	bl	9e10 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    f62a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f62e:	f7fe bba1 	b.w	dd74 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A>
    f632:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    f636:	2804      	cmp	r0, #4
    f638:	d001      	beq.n	f63e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e0>
    f63a:	21bb      	movs	r1, #187	; 0xbb
    f63c:	e003      	b.n	f646 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
    f63e:	f884 225c 	strb.w	r2, [r4, #604]	; 0x25c
    f642:	bd10      	pop	{r4, pc}
    f644:	21c1      	movs	r1, #193	; 0xc1
    f646:	2030      	movs	r0, #48	; 0x30
    f648:	f7f1 fd8c 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f64c:	21c5      	movs	r1, #197	; 0xc5
    f64e:	e7fa      	b.n	f646 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4e8>
    f650:	b510      	push	{r4, lr}
    f652:	f7f8 fef1 	bl	8438 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f656:	f64d 7141 	movw	r1, #57153	; 0xdf41
    f65a:	4408      	add	r0, r1
    f65c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f660:	fbb0 f0f1 	udiv	r0, r0, r1
    f664:	f500 70bf 	add.w	r0, r0, #382	; 0x17e
    f668:	bd10      	pop	{r4, pc}
    f66a:	b538      	push	{r3, r4, r5, lr}
    f66c:	2500      	movs	r5, #0
    f66e:	4604      	mov	r4, r0
    f670:	f880 525c 	strb.w	r5, [r0, #604]	; 0x25c
    f674:	f8a0 52a0 	strh.w	r5, [r0, #672]	; 0x2a0
    f678:	462b      	mov	r3, r5
    f67a:	462a      	mov	r2, r5
    f67c:	4629      	mov	r1, r5
    f67e:	9500      	str	r5, [sp, #0]
    f680:	f7f5 fc16 	bl	4eb0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2f8>
    f684:	b120      	cbz	r0, f690 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x532>
    f686:	f240 211f 	movw	r1, #543	; 0x21f
    f68a:	2030      	movs	r0, #48	; 0x30
    f68c:	f7f1 fd6a 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f690:	f8c4 5258 	str.w	r5, [r4, #600]	; 0x258
    f694:	2001      	movs	r0, #1
    f696:	f8c4 5250 	str.w	r5, [r4, #592]	; 0x250
    f69a:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    f69e:	f8a4 526e 	strh.w	r5, [r4, #622]	; 0x26e
    f6a2:	f8a4 526c 	strh.w	r5, [r4, #620]	; 0x26c
    f6a6:	3494      	adds	r4, #148	; 0x94
    f6a8:	f884 51dd 	strb.w	r5, [r4, #477]	; 0x1dd
    f6ac:	8820      	ldrh	r0, [r4, #0]
    f6ae:	1e40      	subs	r0, r0, #1
    f6b0:	8020      	strh	r0, [r4, #0]
    f6b2:	f8a4 520e 	strh.w	r5, [r4, #526]	; 0x20e
    f6b6:	2000      	movs	r0, #0
    f6b8:	bd38      	pop	{r3, r4, r5, pc}
    f6ba:	b570      	push	{r4, r5, r6, lr}
    f6bc:	4605      	mov	r5, r0
    f6be:	f7ff fb81 	bl	edc4 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    f6c2:	b9c8      	cbnz	r0, f6f8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x59a>
    f6c4:	2100      	movs	r1, #0
    f6c6:	4628      	mov	r0, r5
    f6c8:	f7ff fe0a 	bl	f2e0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x182>
    f6cc:	4604      	mov	r4, r0
    f6ce:	f8d5 00ec 	ldr.w	r0, [r5, #236]	; 0xec
    f6d2:	42a0      	cmp	r0, r4
    f6d4:	d20e      	bcs.n	f6f4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x596>
    f6d6:	1a20      	subs	r0, r4, r0
    f6d8:	2867      	cmp	r0, #103	; 0x67
    f6da:	d200      	bcs.n	f6de <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x580>
    f6dc:	2067      	movs	r0, #103	; 0x67
    f6de:	2103      	movs	r1, #3
    f6e0:	f7fa fba6 	bl	9e30 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    f6e4:	b130      	cbz	r0, f6f4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x596>
    f6e6:	4628      	mov	r0, r5
    f6e8:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    f6ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f6f0:	f7ff bb3f 	b.w	ed72 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    f6f4:	f8c5 40ec 	str.w	r4, [r5, #236]	; 0xec
    f6f8:	4628      	mov	r0, r5
    f6fa:	f7f4 fb25 	bl	3d48 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    f6fe:	2800      	cmp	r0, #0
    f700:	d004      	beq.n	f70c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x5ae>
    f702:	f240 21bd 	movw	r1, #701	; 0x2bd
    f706:	2030      	movs	r0, #48	; 0x30
    f708:	f7f1 fd2c 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f70c:	bd70      	pop	{r4, r5, r6, pc}
    f70e:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f712:	f001 0307 	and.w	r3, r1, #7
    f716:	7802      	ldrb	r2, [r0, #0]
    f718:	2101      	movs	r1, #1
    f71a:	4099      	lsls	r1, r3
    f71c:	438a      	bics	r2, r1
    f71e:	7002      	strb	r2, [r0, #0]
    f720:	4770      	bx	lr

0000f722 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    f722:	b510      	push	{r4, lr}
    f724:	460c      	mov	r4, r1
    f726:	f7f2 f96d 	bl	1a04 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    f72a:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    f72e:	2820      	cmp	r0, #32
    f730:	d00c      	beq.n	f74c <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY+0x2a>
    f732:	f7fb fb75 	bl	ae20 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    f736:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    f73a:	f7fb fb4f 	bl	addc <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f73e:	2800      	cmp	r0, #0
    f740:	d104      	bne.n	f74c <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY+0x2a>
    f742:	f640 4129 	movw	r1, #3113	; 0xc29
    f746:	2031      	movs	r0, #49	; 0x31
    f748:	f7f1 fd0c 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f74c:	bd10      	pop	{r4, pc}

0000f74e <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    f74e:	2000      	movs	r0, #0
    f750:	4770      	bx	lr

0000f752 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    f752:	f7f2 bdeb 	b.w	232c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA>

0000f756 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    f756:	2100      	movs	r1, #0
    f758:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    f75c:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f760:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
    f764:	f890 122b 	ldrb.w	r1, [r0, #555]	; 0x22b
    f768:	b109      	cbz	r1, f76e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    f76a:	2102      	movs	r1, #2
    f76c:	e000      	b.n	f770 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    f76e:	2103      	movs	r1, #3
    f770:	f7f5 b9e0 	b.w	4b34 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    f774:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    f778:	28fe      	cmp	r0, #254	; 0xfe
    f77a:	d001      	beq.n	f780 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    f77c:	2001      	movs	r0, #1
    f77e:	4770      	bx	lr
    f780:	2000      	movs	r0, #0
    f782:	4770      	bx	lr
    f784:	b510      	push	{r4, lr}
    f786:	2801      	cmp	r0, #1
    f788:	d006      	beq.n	f798 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f78a:	2802      	cmp	r0, #2
    f78c:	d004      	beq.n	f798 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f78e:	f240 21d7 	movw	r1, #727	; 0x2d7
    f792:	2006      	movs	r0, #6
    f794:	f7f1 fce6 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f798:	bd10      	pop	{r4, pc}
    f79a:	2801      	cmp	r0, #1
    f79c:	d002      	beq.n	f7a4 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x4e>
    f79e:	2802      	cmp	r0, #2
    f7a0:	d105      	bne.n	f7ae <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f7a2:	e002      	b.n	f7aa <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    f7a4:	2901      	cmp	r1, #1
    f7a6:	d004      	beq.n	f7b2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f7a8:	e001      	b.n	f7ae <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f7aa:	2902      	cmp	r1, #2
    f7ac:	d001      	beq.n	f7b2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    f7ae:	2000      	movs	r0, #0
    f7b0:	4770      	bx	lr
    f7b2:	2001      	movs	r0, #1
    f7b4:	4770      	bx	lr
    f7b6:	1a40      	subs	r0, r0, r1
    f7b8:	b200      	sxth	r0, r0
    f7ba:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    f7be:	4288      	cmp	r0, r1
    f7c0:	dc01      	bgt.n	f7c6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    f7c2:	2800      	cmp	r0, #0
    f7c4:	dc01      	bgt.n	f7ca <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    f7c6:	2001      	movs	r0, #1
    f7c8:	4770      	bx	lr
    f7ca:	2000      	movs	r0, #0
    f7cc:	4770      	bx	lr
    f7ce:	6840      	ldr	r0, [r0, #4]
    f7d0:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f7d4:	2912      	cmp	r1, #18
    f7d6:	d001      	beq.n	f7dc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x86>
    f7d8:	2002      	movs	r0, #2
    f7da:	4770      	bx	lr
    f7dc:	2113      	movs	r1, #19
    f7de:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f7e2:	2000      	movs	r0, #0
    f7e4:	4770      	bx	lr
    f7e6:	b510      	push	{r4, lr}
    f7e8:	6843      	ldr	r3, [r0, #4]
    f7ea:	4604      	mov	r4, r0
    f7ec:	f893 012c 	ldrb.w	r0, [r3, #300]	; 0x12c
    f7f0:	2808      	cmp	r0, #8
    f7f2:	d20d      	bcs.n	f810 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xba>
    f7f4:	f500 7210 	add.w	r2, r0, #576	; 0x240
    f7f8:	f1c0 0008 	rsb	r0, r0, #8
    f7fc:	b2c1      	uxtb	r1, r0
    f7fe:	1898      	adds	r0, r3, r2
    f800:	f7f1 fd52 	bl	12a8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    f804:	6861      	ldr	r1, [r4, #4]
    f806:	f891 212c 	ldrb.w	r2, [r1, #300]	; 0x12c
    f80a:	4410      	add	r0, r2
    f80c:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    f810:	6862      	ldr	r2, [r4, #4]
    f812:	f892 112c 	ldrb.w	r1, [r2, #300]	; 0x12c
    f816:	3908      	subs	r1, #8
    f818:	2904      	cmp	r1, #4
    f81a:	d20d      	bcs.n	f838 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xe2>
    f81c:	f501 708e 	add.w	r0, r1, #284	; 0x11c
    f820:	f1c1 0104 	rsb	r1, r1, #4
    f824:	b2c9      	uxtb	r1, r1
    f826:	4410      	add	r0, r2
    f828:	f7f1 fd3e 	bl	12a8 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    f82c:	6861      	ldr	r1, [r4, #4]
    f82e:	f891 212c 	ldrb.w	r2, [r1, #300]	; 0x12c
    f832:	4410      	add	r0, r2
    f834:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    f838:	6860      	ldr	r0, [r4, #4]
    f83a:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    f83e:	290c      	cmp	r1, #12
    f840:	d30f      	bcc.n	f862 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x10c>
    f842:	d005      	beq.n	f850 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xfa>
    f844:	f640 01c2 	movw	r1, #2242	; 0x8c2
    f848:	f04f 0031 	mov.w	r0, #49	; 0x31
    f84c:	f7f1 fc8a 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f850:	2100      	movs	r1, #0
    f852:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
    f856:	2101      	movs	r1, #1
    f858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f85c:	2004      	movs	r0, #4
    f85e:	f7f6 bd4d 	b.w	62fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    f862:	bd10      	pop	{r4, pc}
    f864:	6842      	ldr	r2, [r0, #4]
    f866:	2131      	movs	r1, #49	; 0x31
    f868:	f882 109d 	strb.w	r1, [r2, #157]	; 0x9d
    f86c:	6840      	ldr	r0, [r0, #4]
    f86e:	2100      	movs	r1, #0
    f870:	f880 12c4 	strb.w	r1, [r0, #708]	; 0x2c4
    f874:	4770      	bx	lr
    f876:	b510      	push	{r4, lr}
    f878:	6841      	ldr	r1, [r0, #4]
    f87a:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    f87e:	2a15      	cmp	r2, #21
    f880:	d004      	beq.n	f88c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x136>
    f882:	f240 7183 	movw	r1, #1923	; 0x783
    f886:	2031      	movs	r0, #49	; 0x31
    f888:	f7f1 fc6c 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f88c:	2201      	movs	r2, #1
    f88e:	f881 20db 	strb.w	r2, [r1, #219]	; 0xdb
    f892:	6840      	ldr	r0, [r0, #4]
    f894:	2116      	movs	r1, #22
    f896:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f89a:	bd10      	pop	{r4, pc}
    f89c:	f7ff b8e1 	b.w	ea62 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>
    f8a0:	b510      	push	{r4, lr}
    f8a2:	6841      	ldr	r1, [r0, #4]
    f8a4:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    f8a8:	2a11      	cmp	r2, #17
    f8aa:	d004      	beq.n	f8b6 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x160>
    f8ac:	f240 717b 	movw	r1, #1915	; 0x77b
    f8b0:	2031      	movs	r0, #49	; 0x31
    f8b2:	f7f1 fc57 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f8b6:	2201      	movs	r2, #1
    f8b8:	f881 20db 	strb.w	r2, [r1, #219]	; 0xdb
    f8bc:	6840      	ldr	r0, [r0, #4]
    f8be:	2112      	movs	r1, #18
    f8c0:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f8c4:	bd10      	pop	{r4, pc}
    f8c6:	b510      	push	{r4, lr}
    f8c8:	6841      	ldr	r1, [r0, #4]
    f8ca:	f891 009e 	ldrb.w	r0, [r1, #158]	; 0x9e
    f8ce:	2822      	cmp	r0, #34	; 0x22
    f8d0:	d005      	beq.n	f8de <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x188>
    f8d2:	b120      	cbz	r0, f8de <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x188>
    f8d4:	f240 71e7 	movw	r1, #2023	; 0x7e7
    f8d8:	2031      	movs	r0, #49	; 0x31
    f8da:	f7f1 fc43 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f8de:	2023      	movs	r0, #35	; 0x23
    f8e0:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    f8e4:	bd10      	pop	{r4, pc}
    f8e6:	b510      	push	{r4, lr}
    f8e8:	6840      	ldr	r0, [r0, #4]
    f8ea:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f8ee:	2916      	cmp	r1, #22
    f8f0:	d004      	beq.n	f8fc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a6>
    f8f2:	f44f 61f2 	mov.w	r1, #1936	; 0x790
    f8f6:	2031      	movs	r0, #49	; 0x31
    f8f8:	f7f1 fc34 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f8fc:	211a      	movs	r1, #26
    f8fe:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f902:	bd10      	pop	{r4, pc}
    f904:	f7ff b89b 	b.w	ea3e <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>
    f908:	b510      	push	{r4, lr}
    f90a:	6840      	ldr	r0, [r0, #4]
    f90c:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f910:	2916      	cmp	r1, #22
    f912:	d004      	beq.n	f91e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1c8>
    f914:	f240 718a 	movw	r1, #1930	; 0x78a
    f918:	2031      	movs	r0, #49	; 0x31
    f91a:	f7f1 fc23 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f91e:	2118      	movs	r1, #24
    f920:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f924:	bd10      	pop	{r4, pc}
    f926:	f7ff b921 	b.w	eb6c <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>
    f92a:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f92e:	f001 0107 	and.w	r1, r1, #7
    f932:	7800      	ldrb	r0, [r0, #0]
    f934:	40c8      	lsrs	r0, r1
    f936:	f000 0001 	and.w	r0, r0, #1
    f93a:	4770      	bx	lr

0000f93c <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>:
    f93c:	b510      	push	{r4, lr}
    f93e:	2801      	cmp	r0, #1
    f940:	d006      	beq.n	f950 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x14>
    f942:	2802      	cmp	r0, #2
    f944:	d006      	beq.n	f954 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x18>
    f946:	f240 2175 	movw	r1, #629	; 0x275
    f94a:	2078      	movs	r0, #120	; 0x78
    f94c:	f7f1 fc0a 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f950:	2000      	movs	r0, #0
    f952:	bd10      	pop	{r4, pc}
    f954:	2001      	movs	r0, #1
    f956:	bd10      	pop	{r4, pc}

0000f958 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>:
    f958:	207f      	movs	r0, #127	; 0x7f
    f95a:	f000 b88c 	b.w	fa76 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x92>

0000f95e <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>:
    f95e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f962:	f000 b888 	b.w	fa76 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x92>

0000f966 <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>:
    f966:	b510      	push	{r4, lr}
    f968:	4604      	mov	r4, r0
    f96a:	f7f8 f845 	bl	79f8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f96e:	1e64      	subs	r4, r4, #1
    f970:	b2e2      	uxtb	r2, r4
    f972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f976:	f000 b85b 	b.w	fa30 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x4c>

0000f97a <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>:
    f97a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f97e:	4607      	mov	r7, r0
    f980:	461e      	mov	r6, r3
    f982:	4690      	mov	r8, r2
    f984:	460c      	mov	r4, r1
    f986:	4608      	mov	r0, r1
    f988:	f7ff ffed 	bl	f966 <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>
    f98c:	b1e8      	cbz	r0, f9ca <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>
    f98e:	687d      	ldr	r5, [r7, #4]
    f990:	2121      	movs	r1, #33	; 0x21
    f992:	f105 00ec 	add.w	r0, r5, #236	; 0xec
    f996:	3580      	adds	r5, #128	; 0x80
    f998:	f7ff ffc7 	bl	f92a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1d4>
    f99c:	b1b8      	cbz	r0, f9ce <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
    f99e:	1e64      	subs	r4, r4, #1
    f9a0:	6f29      	ldr	r1, [r5, #112]	; 0x70
    f9a2:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    f9a4:	b2e2      	uxtb	r2, r4
    f9a6:	f000 f843 	bl	fa30 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x4c>
    f9aa:	b180      	cbz	r0, f9ce <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
    f9ac:	6878      	ldr	r0, [r7, #4]
    f9ae:	f890 1149 	ldrb.w	r1, [r0, #329]	; 0x149
    f9b2:	f88d 1000 	strb.w	r1, [sp]
    f9b6:	9900      	ldr	r1, [sp, #0]
    f9b8:	9100      	str	r1, [sp, #0]
    f9ba:	f89d 1000 	ldrb.w	r1, [sp]
    f9be:	f200 1047 	addw	r0, r0, #327	; 0x147
    f9c2:	b131      	cbz	r1, f9d2 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x58>
    f9c4:	203a      	movs	r0, #58	; 0x3a
    f9c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f9ca:	2011      	movs	r0, #17
    f9cc:	e7fb      	b.n	f9c6 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>
    f9ce:	201a      	movs	r0, #26
    f9d0:	e7f9      	b.n	f9c6 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>
    f9d2:	1c81      	adds	r1, r0, #2
    f9d4:	700e      	strb	r6, [r1, #0]
    f9d6:	2101      	movs	r1, #1
    f9d8:	40a1      	lsls	r1, r4
    f9da:	7001      	strb	r1, [r0, #0]
    f9dc:	f880 8001 	strb.w	r8, [r0, #1]
    f9e0:	2000      	movs	r0, #0
    f9e2:	e7f0      	b.n	f9c6 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>

0000f9e4 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
    f9e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f9e8:	460d      	mov	r5, r1
    f9ea:	4606      	mov	r6, r0
    f9ec:	f7ff ffb4 	bl	f958 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>
    f9f0:	4607      	mov	r7, r0
    f9f2:	f7ff ffb4 	bl	f95e <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>
    f9f6:	2400      	movs	r4, #0
    f9f8:	4285      	cmp	r5, r0
    f9fa:	d100      	bne.n	f9fe <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
    f9fc:	2401      	movs	r4, #1
    f9fe:	42bd      	cmp	r5, r7
    fa00:	d101      	bne.n	fa06 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
    fa02:	f044 0402 	orr.w	r4, r4, #2
    fa06:	f000 f826 	bl	fa56 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x72>
    fa0a:	2200      	movs	r2, #0
    fa0c:	4601      	mov	r1, r0
    fa0e:	2301      	movs	r3, #1
    fa10:	fa03 f002 	lsl.w	r0, r3, r2
    fa14:	4208      	tst	r0, r1
    fa16:	d005      	beq.n	fa24 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x40>
    fa18:	eb06 0042 	add.w	r0, r6, r2, lsl #1
    fa1c:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
    fa20:	f880 406f 	strb.w	r4, [r0, #111]	; 0x6f
    fa24:	1c52      	adds	r2, r2, #1
    fa26:	b2d2      	uxtb	r2, r2
    fa28:	2a02      	cmp	r2, #2
    fa2a:	d3f1      	bcc.n	fa10 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
    fa2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fa30:	b510      	push	{r4, lr}
    fa32:	4614      	mov	r4, r2
    fa34:	4602      	mov	r2, r0
    fa36:	2000      	movs	r0, #0
    fa38:	4603      	mov	r3, r0
    fa3a:	2c02      	cmp	r4, #2
    fa3c:	d205      	bcs.n	fa4a <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x66>
    fa3e:	4610      	mov	r0, r2
    fa40:	f000 f810 	bl	fa64 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x80>
    fa44:	2101      	movs	r1, #1
    fa46:	40a1      	lsls	r1, r4
    fa48:	b2cb      	uxtb	r3, r1
    fa4a:	4203      	tst	r3, r0
    fa4c:	d001      	beq.n	fa52 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x6e>
    fa4e:	2001      	movs	r0, #1
    fa50:	bd10      	pop	{r4, pc}
    fa52:	2000      	movs	r0, #0
    fa54:	bd10      	pop	{r4, pc}
    fa56:	b510      	push	{r4, lr}
    fa58:	f7f7 ffce 	bl	79f8 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    fa5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa60:	f000 b800 	b.w	fa64 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x80>
    fa64:	0a00      	lsrs	r0, r0, #8
    fa66:	2201      	movs	r2, #1
    fa68:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    fa6c:	07c0      	lsls	r0, r0, #31
    fa6e:	d000      	beq.n	fa72 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x8e>
    fa70:	2203      	movs	r2, #3
    fa72:	4610      	mov	r0, r2
    fa74:	4770      	bx	lr
    fa76:	b508      	push	{r3, lr}
    fa78:	2301      	movs	r3, #1
    fa7a:	f640 1288 	movw	r2, #2440	; 0x988
    fa7e:	4669      	mov	r1, sp
    fa80:	f7fc ffc8 	bl	ca14 <mpsl_fem_tx_power_split>
    fa84:	bd08      	pop	{r3, pc}
    fa86:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    fa8a:	f001 0107 	and.w	r1, r1, #7
    fa8e:	7800      	ldrb	r0, [r0, #0]
    fa90:	40c8      	lsrs	r0, r1
    fa92:	f000 0001 	and.w	r0, r0, #1
    fa96:	4770      	bx	lr
    fa98:	b118      	cbz	r0, faa2 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xbe>
    fa9a:	2802      	cmp	r0, #2
    fa9c:	d001      	beq.n	faa2 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xbe>
    fa9e:	2001      	movs	r0, #1
    faa0:	4770      	bx	lr
    faa2:	2000      	movs	r0, #0
    faa4:	4770      	bx	lr

0000faa6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    faa6:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    faa8:	7881      	ldrb	r1, [r0, #2]
    faaa:	2500      	movs	r5, #0
    faac:	4604      	mov	r4, r0
    faae:	291a      	cmp	r1, #26
    fab0:	d024      	beq.n	fafc <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    fab2:	dc0e      	bgt.n	fad2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    fab4:	2916      	cmp	r1, #22
    fab6:	d22b      	bcs.n	fb10 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fab8:	e8df f001 	tbb	[pc, r1]
    fabc:	2a2a2a2a 	.word	0x2a2a2a2a
    fac0:	2a2a202a 	.word	0x2a2a202a
    fac4:	2a2a2a2a 	.word	0x2a2a2a2a
    fac8:	2a2a2a2a 	.word	0x2a2a2a2a
    facc:	202a2a2a 	.word	0x202a2a2a
    fad0:	2020      	.short	0x2020
    fad2:	292a      	cmp	r1, #42	; 0x2a
    fad4:	d01c      	beq.n	fb10 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fad6:	dc0b      	bgt.n	faf0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    fad8:	f1a1 011e 	sub.w	r1, r1, #30
    fadc:	290c      	cmp	r1, #12
    fade:	d217      	bcs.n	fb10 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fae0:	e8df f001 	tbb	[pc, r1]
    fae4:	16161616 	.word	0x16161616
    fae8:	16161616 	.word	0x16161616
    faec:	0c161616 	.word	0x0c161616
    faf0:	393a      	subs	r1, #58	; 0x3a
    faf2:	2902      	cmp	r1, #2
    faf4:	d20c      	bcs.n	fb10 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    faf6:	e8df f001 	tbb	[pc, r1]
    fafa:	010b      	.short	0x010b
    fafc:	8820      	ldrh	r0, [r4, #0]
    fafe:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    fb02:	d205      	bcs.n	fb10 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    fb04:	4669      	mov	r1, sp
    fb06:	f7fe f990 	bl	de2a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fb0a:	b118      	cbz	r0, fb14 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
    fb0c:	2002      	movs	r0, #2
    fb0e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fb10:	2012      	movs	r0, #18
    fb12:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fb14:	9901      	ldr	r1, [sp, #4]
    fb16:	4668      	mov	r0, sp
    fb18:	f891 2130 	ldrb.w	r2, [r1, #304]	; 0x130
    fb1c:	f88d 2008 	strb.w	r2, [sp, #8]
    fb20:	9a02      	ldr	r2, [sp, #8]
    fb22:	9202      	str	r2, [sp, #8]
    fb24:	f89d 2008 	ldrb.w	r2, [sp, #8]
    fb28:	f501 7198 	add.w	r1, r1, #304	; 0x130
    fb2c:	b10a      	cbz	r2, fb32 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8c>
    fb2e:	200c      	movs	r0, #12
    fb30:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fb32:	78a2      	ldrb	r2, [r4, #2]
    fb34:	704a      	strb	r2, [r1, #1]
    fb36:	22ff      	movs	r2, #255	; 0xff
    fb38:	700a      	strb	r2, [r1, #0]
    fb3a:	f7fe fd09 	bl	e550 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    fb3e:	4628      	mov	r0, r5
    fb40:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fb42 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    fb42:	b510      	push	{r4, lr}
    fb44:	4604      	mov	r4, r0
    fb46:	f7f7 fe81 	bl	784c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20c>
    fb4a:	b108      	cbz	r0, fb50 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    fb4c:	200c      	movs	r0, #12
    fb4e:	bd10      	pop	{r4, pc}
    fb50:	7820      	ldrb	r0, [r4, #0]
    fb52:	b118      	cbz	r0, fb5c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    fb54:	2801      	cmp	r0, #1
    fb56:	d001      	beq.n	fb5c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    fb58:	2012      	movs	r0, #18
    fb5a:	bd10      	pop	{r4, pc}
    fb5c:	f7ff ff9c 	bl	fa98 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    fb60:	1c61      	adds	r1, r4, #1
    fb62:	f7f3 fefd 	bl	3960 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>
    fb66:	b108      	cbz	r0, fb6c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    fb68:	2000      	movs	r0, #0
    fb6a:	bd10      	pop	{r4, pc}
    fb6c:	2007      	movs	r0, #7
    fb6e:	bd10      	pop	{r4, pc}

0000fb70 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    fb70:	b510      	push	{r4, lr}
    fb72:	f7f7 fe6b 	bl	784c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20c>
    fb76:	b108      	cbz	r0, fb7c <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    fb78:	200c      	movs	r0, #12
    fb7a:	bd10      	pop	{r4, pc}
    fb7c:	f7f3 ff4e 	bl	3a1c <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
    fb80:	2000      	movs	r0, #0
    fb82:	f7f3 f823 	bl	2bcc <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
    fb86:	2000      	movs	r0, #0
    fb88:	bd10      	pop	{r4, pc}

0000fb8a <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    fb8a:	b510      	push	{r4, lr}
    fb8c:	460b      	mov	r3, r1
    fb8e:	2201      	movs	r2, #1
    fb90:	f100 0110 	add.w	r1, r0, #16
    fb94:	f7fe f92b 	bl	ddee <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    fb98:	2000      	movs	r0, #0
    fb9a:	bd10      	pop	{r4, pc}

0000fb9c <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    fb9c:	b510      	push	{r4, lr}
    fb9e:	8800      	ldrh	r0, [r0, #0]
    fba0:	2100      	movs	r1, #0
    fba2:	f7f1 fe0d 	bl	17c0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fba6:	b118      	cbz	r0, fbb0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    fba8:	f890 12b0 	ldrb.w	r1, [r0, #688]	; 0x2b0
    fbac:	b111      	cbz	r1, fbb4 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    fbae:	e007      	b.n	fbc0 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    fbb0:	2002      	movs	r0, #2
    fbb2:	bd10      	pop	{r4, pc}
    fbb4:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    fbb8:	2915      	cmp	r1, #21
    fbba:	d003      	beq.n	fbc4 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    fbbc:	2916      	cmp	r1, #22
    fbbe:	d001      	beq.n	fbc4 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    fbc0:	200c      	movs	r0, #12
    fbc2:	bd10      	pop	{r4, pc}
    fbc4:	2102      	movs	r1, #2
    fbc6:	f880 12b0 	strb.w	r1, [r0, #688]	; 0x2b0
    fbca:	2000      	movs	r0, #0
    fbcc:	bd10      	pop	{r4, pc}

0000fbce <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    fbce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fbd0:	4605      	mov	r5, r0
    fbd2:	8800      	ldrh	r0, [r0, #0]
    fbd4:	2100      	movs	r1, #0
    fbd6:	f7f1 fdf3 	bl	17c0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fbda:	0004      	movs	r4, r0
    fbdc:	d003      	beq.n	fbe6 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    fbde:	f894 02b0 	ldrb.w	r0, [r4, #688]	; 0x2b0
    fbe2:	b110      	cbz	r0, fbea <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    fbe4:	e011      	b.n	fc0a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    fbe6:	2002      	movs	r0, #2
    fbe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fbea:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    fbee:	2815      	cmp	r0, #21
    fbf0:	d001      	beq.n	fbf6 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    fbf2:	2816      	cmp	r0, #22
    fbf4:	d109      	bne.n	fc0a <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    fbf6:	f894 02e4 	ldrb.w	r0, [r4, #740]	; 0x2e4
    fbfa:	f88d 0000 	strb.w	r0, [sp]
    fbfe:	9800      	ldr	r0, [sp, #0]
    fc00:	9000      	str	r0, [sp, #0]
    fc02:	f89d 0000 	ldrb.w	r0, [sp]
    fc06:	2601      	movs	r6, #1
    fc08:	b108      	cbz	r0, fc0e <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x40>
    fc0a:	200c      	movs	r0, #12
    fc0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fc0e:	2210      	movs	r2, #16
    fc10:	1ca9      	adds	r1, r5, #2
    fc12:	f204 20b1 	addw	r0, r4, #689	; 0x2b1
    fc16:	f001 f852 	bl	10cbe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    fc1a:	f884 62b0 	strb.w	r6, [r4, #688]	; 0x2b0
    fc1e:	2000      	movs	r0, #0
    fc20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000fc22 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    fc22:	b510      	push	{r4, lr}
    fc24:	2108      	movs	r1, #8
    fc26:	f7f1 fb4d 	bl	12c4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    fc2a:	2000      	movs	r0, #0
    fc2c:	bd10      	pop	{r4, pc}

0000fc2e <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    fc2e:	b510      	push	{r4, lr}
    fc30:	4604      	mov	r4, r0
    fc32:	f7f7 fce9 	bl	7608 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    fc36:	f7ff f8cf 	bl	edd8 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    fc3a:	f7f3 f8c9 	bl	2dd0 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fc3e:	7020      	strb	r0, [r4, #0]
    fc40:	2000      	movs	r0, #0
    fc42:	bd10      	pop	{r4, pc}

0000fc44 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    fc44:	21fb      	movs	r1, #251	; 0xfb
    fc46:	8001      	strh	r1, [r0, #0]
    fc48:	f640 0248 	movw	r2, #2120	; 0x848
    fc4c:	8042      	strh	r2, [r0, #2]
    fc4e:	8081      	strh	r1, [r0, #4]
    fc50:	80c2      	strh	r2, [r0, #6]
    fc52:	2000      	movs	r0, #0
    fc54:	4770      	bx	lr

0000fc56 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    fc56:	b51c      	push	{r2, r3, r4, lr}
    fc58:	8800      	ldrh	r0, [r0, #0]
    fc5a:	4669      	mov	r1, sp
    fc5c:	f7fe f8e5 	bl	de2a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fc60:	2800      	cmp	r0, #0
    fc62:	d10d      	bne.n	fc80 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
    fc64:	f89d 0000 	ldrb.w	r0, [sp]
    fc68:	9c01      	ldr	r4, [sp, #4]
    fc6a:	2801      	cmp	r0, #1
    fc6c:	f504 7498 	add.w	r4, r4, #304	; 0x130
    fc70:	d103      	bne.n	fc7a <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x24>
    fc72:	9801      	ldr	r0, [sp, #4]
    fc74:	f000 fce2 	bl	1063c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
    fc78:	b118      	cbz	r0, fc82 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    fc7a:	7ce0      	ldrb	r0, [r4, #19]
    fc7c:	b118      	cbz	r0, fc86 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x30>
    fc7e:	203a      	movs	r0, #58	; 0x3a
    fc80:	bd1c      	pop	{r2, r3, r4, pc}
    fc82:	2002      	movs	r0, #2
    fc84:	bd1c      	pop	{r2, r3, r4, pc}
    fc86:	2001      	movs	r0, #1
    fc88:	74e0      	strb	r0, [r4, #19]
    fc8a:	2000      	movs	r0, #0
    fc8c:	bd1c      	pop	{r2, r3, r4, pc}

0000fc8e <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    fc8e:	b510      	push	{r4, lr}
    fc90:	4604      	mov	r4, r0
    fc92:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    fc96:	f000 fd0d 	bl	106b4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x306>
    fc9a:	f7f3 f899 	bl	2dd0 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fc9e:	7020      	strb	r0, [r4, #0]
    fca0:	f000 fcc9 	bl	10636 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
    fca4:	f7f3 f894 	bl	2dd0 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fca8:	7060      	strb	r0, [r4, #1]
    fcaa:	2000      	movs	r0, #0
    fcac:	bd10      	pop	{r4, pc}

0000fcae <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    fcae:	b510      	push	{r4, lr}
    fcb0:	4604      	mov	r4, r0
    fcb2:	f7f3 feb9 	bl	3a28 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>
    fcb6:	7020      	strb	r0, [r4, #0]
    fcb8:	2000      	movs	r0, #0
    fcba:	bd10      	pop	{r4, pc}

0000fcbc <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    fcbc:	b510      	push	{r4, lr}
    fcbe:	4604      	mov	r4, r0
    fcc0:	f7f7 fdc4 	bl	784c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20c>
    fcc4:	b108      	cbz	r0, fcca <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    fcc6:	200c      	movs	r0, #12
    fcc8:	bd10      	pop	{r4, pc}
    fcca:	7820      	ldrb	r0, [r4, #0]
    fccc:	b108      	cbz	r0, fcd2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    fcce:	2801      	cmp	r0, #1
    fcd0:	d107      	bne.n	fce2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fcd2:	f7ff fee1 	bl	fa98 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    fcd6:	1c61      	adds	r1, r4, #1
    fcd8:	f7f3 fe80 	bl	39dc <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>
    fcdc:	b108      	cbz	r0, fce2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fcde:	2000      	movs	r0, #0
    fce0:	bd10      	pop	{r4, pc}
    fce2:	2012      	movs	r0, #18
    fce4:	bd10      	pop	{r4, pc}

0000fce6 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    fce6:	b51c      	push	{r2, r3, r4, lr}
    fce8:	4604      	mov	r4, r0
    fcea:	f7f7 fc8d 	bl	7608 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    fcee:	2000      	movs	r0, #0
    fcf0:	f88d 0002 	strb.w	r0, [sp, #2]
    fcf4:	2103      	movs	r1, #3
    fcf6:	f88d 1001 	strb.w	r1, [sp, #1]
    fcfa:	f814 1b01 	ldrb.w	r1, [r4], #1
    fcfe:	f88d 1003 	strb.w	r1, [sp, #3]
    fd02:	f88d 0000 	strb.w	r0, [sp]
    fd06:	4668      	mov	r0, sp
    fd08:	9401      	str	r4, [sp, #4]
    fd0a:	f000 f9a2 	bl	10052 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    fd0e:	bd1c      	pop	{r2, r3, r4, pc}

0000fd10 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    fd10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    fd12:	4605      	mov	r5, r0
    fd14:	f7f7 fc78 	bl	7608 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    fd18:	4606      	mov	r6, r0
    fd1a:	7828      	ldrb	r0, [r5, #0]
    fd1c:	2400      	movs	r4, #0
    fd1e:	b160      	cbz	r0, fd3a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    fd20:	f88d 4000 	strb.w	r4, [sp]
    fd24:	2001      	movs	r0, #1
    fd26:	f10d 0101 	add.w	r1, sp, #1
    fd2a:	f7f2 f97f 	bl	202c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    fd2e:	b120      	cbz	r0, fd3a <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    fd30:	4668      	mov	r0, sp
    fd32:	f000 f897 	bl	fe64 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    fd36:	2800      	cmp	r0, #0
    fd38:	d112      	bne.n	fd60 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    fd3a:	f88d 400c 	strb.w	r4, [sp, #12]
    fd3e:	4630      	mov	r0, r6
    fd40:	f7ff f840 	bl	edc4 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    fd44:	b118      	cbz	r0, fd4e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    fd46:	2080      	movs	r0, #128	; 0x80
    fd48:	f8ad 000d 	strh.w	r0, [sp, #13]
    fd4c:	e001      	b.n	fd52 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    fd4e:	f8ad 400d 	strh.w	r4, [sp, #13]
    fd52:	f88d 400f 	strb.w	r4, [sp, #15]
    fd56:	7828      	ldrb	r0, [r5, #0]
    fd58:	2801      	cmp	r0, #1
    fd5a:	d003      	beq.n	fd64 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    fd5c:	b138      	cbz	r0, fd6e <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    fd5e:	2012      	movs	r0, #18
    fd60:	b004      	add	sp, #16
    fd62:	bd70      	pop	{r4, r5, r6, pc}
    fd64:	a903      	add	r1, sp, #12
    fd66:	4630      	mov	r0, r6
    fd68:	f7f7 fc6a 	bl	7640 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    fd6c:	e7f8      	b.n	fd60 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    fd6e:	4630      	mov	r0, r6
    fd70:	f000 fc7a 	bl	10668 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
    fd74:	e7f4      	b.n	fd60 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000fd76 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    fd76:	b530      	push	{r4, r5, lr}
    fd78:	b08b      	sub	sp, #44	; 0x2c
    fd7a:	4604      	mov	r4, r0
    fd7c:	f7f7 fc44 	bl	7608 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    fd80:	4602      	mov	r2, r0
    fd82:	7920      	ldrb	r0, [r4, #4]
    fd84:	2804      	cmp	r0, #4
    fd86:	d803      	bhi.n	fd90 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    fd88:	8860      	ldrh	r0, [r4, #2]
    fd8a:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    fd8e:	d902      	bls.n	fd96 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    fd90:	2012      	movs	r0, #18
    fd92:	b00b      	add	sp, #44	; 0x2c
    fd94:	bd30      	pop	{r4, r5, pc}
    fd96:	2500      	movs	r5, #0
    fd98:	f88d 5004 	strb.w	r5, [sp, #4]
    fd9c:	7921      	ldrb	r1, [r4, #4]
    fd9e:	9500      	str	r5, [sp, #0]
    fda0:	f89d 0000 	ldrb.w	r0, [sp]
    fda4:	2905      	cmp	r1, #5
    fda6:	f040 0010 	orr.w	r0, r0, #16
    fdaa:	f88d 0000 	strb.w	r0, [sp]
    fdae:	d254      	bcs.n	fe5a <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    fdb0:	e8df f001 	tbb	[pc, r1]
    fdb4:	11050803 	.word	0x11050803
    fdb8:	000b      	.short	0x000b
    fdba:	f040 0001 	orr.w	r0, r0, #1
    fdbe:	f040 0002 	orr.w	r0, r0, #2
    fdc2:	e006      	b.n	fdd2 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    fdc4:	f040 0009 	orr.w	r0, r0, #9
    fdc8:	e001      	b.n	fdce <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    fdca:	f040 0001 	orr.w	r0, r0, #1
    fdce:	f040 0004 	orr.w	r0, r0, #4
    fdd2:	f88d 0000 	strb.w	r0, [sp]
    fdd6:	f8bd 0000 	ldrh.w	r0, [sp]
    fdda:	9000      	str	r0, [sp, #0]
    fddc:	f8bd 0000 	ldrh.w	r0, [sp]
    fde0:	f8ad 0005 	strh.w	r0, [sp, #5]
    fde4:	8821      	ldrh	r1, [r4, #0]
    fde6:	f8dd 0006 	ldr.w	r0, [sp, #6]
    fdea:	f361 201f 	bfi	r0, r1, #8, #24
    fdee:	f8cd 0006 	str.w	r0, [sp, #6]
    fdf2:	8861      	ldrh	r1, [r4, #2]
    fdf4:	f8dd 0009 	ldr.w	r0, [sp, #9]
    fdf8:	f361 201f 	bfi	r0, r1, #8, #24
    fdfc:	f8cd 0009 	str.w	r0, [sp, #9]
    fe00:	7b60      	ldrb	r0, [r4, #13]
    fe02:	f88d 000d 	strb.w	r0, [sp, #13]
    fe06:	7960      	ldrb	r0, [r4, #5]
    fe08:	f88d 000e 	strb.w	r0, [sp, #14]
    fe0c:	79a0      	ldrb	r0, [r4, #6]
    fe0e:	f88d 000f 	strb.w	r0, [sp, #15]
    fe12:	f8d4 0007 	ldr.w	r0, [r4, #7]
    fe16:	9004      	str	r0, [sp, #16]
    fe18:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    fe1c:	f8ad 0014 	strh.w	r0, [sp, #20]
    fe20:	7ba0      	ldrb	r0, [r4, #14]
    fe22:	f88d 0016 	strb.w	r0, [sp, #22]
    fe26:	207f      	movs	r0, #127	; 0x7f
    fe28:	f88d 0017 	strb.w	r0, [sp, #23]
    fe2c:	2001      	movs	r0, #1
    fe2e:	f88d 0018 	strb.w	r0, [sp, #24]
    fe32:	f88d 5019 	strb.w	r5, [sp, #25]
    fe36:	f88d 001a 	strb.w	r0, [sp, #26]
    fe3a:	f88d 501b 	strb.w	r5, [sp, #27]
    fe3e:	4610      	mov	r0, r2
    fe40:	f7fe ffe0 	bl	ee04 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    fe44:	f88d 001c 	strb.w	r0, [sp, #28]
    fe48:	f88d 501d 	strb.w	r5, [sp, #29]
    fe4c:	f88d 501e 	strb.w	r5, [sp, #30]
    fe50:	a909      	add	r1, sp, #36	; 0x24
    fe52:	a801      	add	r0, sp, #4
    fe54:	f7f7 fa0e 	bl	7274 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    fe58:	e79b      	b.n	fd92 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    fe5a:	f241 31a9 	movw	r1, #5033	; 0x13a9
    fe5e:	2039      	movs	r0, #57	; 0x39
    fe60:	f7f1 f980 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000fe64 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    fe64:	b570      	push	{r4, r5, r6, lr}
    fe66:	4604      	mov	r4, r0
    fe68:	7800      	ldrb	r0, [r0, #0]
    fe6a:	2101      	movs	r1, #1
    fe6c:	f7f1 fca8 	bl	17c0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fe70:	0005      	movs	r5, r0
    fe72:	d007      	beq.n	fe84 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    fe74:	f7ff f970 	bl	f158 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fe78:	b160      	cbz	r0, fe94 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    fe7a:	4628      	mov	r0, r5
    fe7c:	f7fe ffa8 	bl	edd0 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    fe80:	b110      	cbz	r0, fe88 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    fe82:	e005      	b.n	fe90 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    fe84:	2042      	movs	r0, #66	; 0x42
    fe86:	bd70      	pop	{r4, r5, r6, pc}
    fe88:	4628      	mov	r0, r5
    fe8a:	f7fe ff97 	bl	edbc <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    fe8e:	b108      	cbz	r0, fe94 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    fe90:	200c      	movs	r0, #12
    fe92:	bd70      	pop	{r4, r5, r6, pc}
    fe94:	1c61      	adds	r1, r4, #1
    fe96:	4628      	mov	r0, r5
    fe98:	f7fe ffac 	bl	edf4 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    fe9c:	2000      	movs	r0, #0
    fe9e:	bd70      	pop	{r4, r5, r6, pc}

0000fea0 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    fea0:	b50e      	push	{r1, r2, r3, lr}
    fea2:	8882      	ldrh	r2, [r0, #4]
    fea4:	f244 2390 	movw	r3, #17040	; 0x4290
    fea8:	429a      	cmp	r2, r3
    feaa:	d901      	bls.n	feb0 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
    feac:	2012      	movs	r0, #18
    feae:	bd0e      	pop	{r1, r2, r3, pc}
    feb0:	f640 0348 	movw	r3, #2120	; 0x848
    feb4:	429a      	cmp	r2, r3
    feb6:	d300      	bcc.n	feba <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    feb8:	461a      	mov	r2, r3
    feba:	8803      	ldrh	r3, [r0, #0]
    febc:	f8ad 3000 	strh.w	r3, [sp]
    fec0:	8843      	ldrh	r3, [r0, #2]
    fec2:	f8ad 3002 	strh.w	r3, [sp, #2]
    fec6:	f8ad 2004 	strh.w	r2, [sp, #4]
    feca:	8843      	ldrh	r3, [r0, #2]
    fecc:	f8ad 3006 	strh.w	r3, [sp, #6]
    fed0:	f8ad 2008 	strh.w	r2, [sp, #8]
    fed4:	8800      	ldrh	r0, [r0, #0]
    fed6:	8008      	strh	r0, [r1, #0]
    fed8:	4668      	mov	r0, sp
    feda:	f7f7 fc33 	bl	7744 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x104>
    fede:	bd0e      	pop	{r1, r2, r3, pc}

0000fee0 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>:
    fee0:	b510      	push	{r4, lr}
    fee2:	4604      	mov	r4, r0
    fee4:	f7f7 fb90 	bl	7608 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    fee8:	7861      	ldrb	r1, [r4, #1]
    feea:	f3c1 0240 	ubfx	r2, r1, #1, #1
    feee:	f001 0101 	and.w	r1, r1, #1
    fef2:	f7fe ff7b 	bl	edec <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>
    fef6:	2000      	movs	r0, #0
    fef8:	bd10      	pop	{r4, pc}

0000fefa <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    fefa:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fefc:	4604      	mov	r4, r0
    fefe:	f10d 0007 	add.w	r0, sp, #7
    ff02:	9000      	str	r0, [sp, #0]
    ff04:	7922      	ldrb	r2, [r4, #4]
    ff06:	78e1      	ldrb	r1, [r4, #3]
    ff08:	78a0      	ldrb	r0, [r4, #2]
    ff0a:	f10d 0306 	add.w	r3, sp, #6
    ff0e:	f000 fbd9 	bl	106c4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x316>
    ff12:	2800      	cmp	r0, #0
    ff14:	d109      	bne.n	ff2a <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
    ff16:	8820      	ldrh	r0, [r4, #0]
    ff18:	f8ad 0004 	strh.w	r0, [sp, #4]
    ff1c:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    ff20:	f8ad 0008 	strh.w	r0, [sp, #8]
    ff24:	a801      	add	r0, sp, #4
    ff26:	f000 f94f 	bl	101c8 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    ff2a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000ff2c <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    ff2c:	b510      	push	{r4, lr}
    ff2e:	4604      	mov	r4, r0
    ff30:	2001      	movs	r0, #1
    ff32:	f000 fa5e 	bl	103f2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
    ff36:	b128      	cbz	r0, ff44 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    ff38:	4621      	mov	r1, r4
    ff3a:	2001      	movs	r0, #1
    ff3c:	f7f2 f88e 	bl	205c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    ff40:	2000      	movs	r0, #0
    ff42:	bd10      	pop	{r4, pc}
    ff44:	200c      	movs	r0, #12
    ff46:	bd10      	pop	{r4, pc}

0000ff48 <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    ff48:	b51c      	push	{r2, r3, r4, lr}
    ff4a:	4604      	mov	r4, r0
    ff4c:	f7f7 fb5c 	bl	7608 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
    ff50:	2000      	movs	r0, #0
    ff52:	f88d 0000 	strb.w	r0, [sp]
    ff56:	f88d 0002 	strb.w	r0, [sp, #2]
    ff5a:	2003      	movs	r0, #3
    ff5c:	f88d 0001 	strb.w	r0, [sp, #1]
    ff60:	f814 0b01 	ldrb.w	r0, [r4], #1
    ff64:	f88d 0003 	strb.w	r0, [sp, #3]
    ff68:	4668      	mov	r0, sp
    ff6a:	9401      	str	r4, [sp, #4]
    ff6c:	f000 f8da 	bl	10124 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    ff70:	bd1c      	pop	{r2, r3, r4, pc}

0000ff72 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    ff72:	b51c      	push	{r2, r3, r4, lr}
    ff74:	8801      	ldrh	r1, [r0, #0]
    ff76:	f8ad 1000 	strh.w	r1, [sp]
    ff7a:	8841      	ldrh	r1, [r0, #2]
    ff7c:	f8ad 1002 	strh.w	r1, [sp, #2]
    ff80:	8801      	ldrh	r1, [r0, #0]
    ff82:	f8ad 1004 	strh.w	r1, [sp, #4]
    ff86:	8840      	ldrh	r0, [r0, #2]
    ff88:	f8ad 0006 	strh.w	r0, [sp, #6]
    ff8c:	4668      	mov	r0, sp
    ff8e:	f7f7 fc79 	bl	7884 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x244>
    ff92:	bd1c      	pop	{r2, r3, r4, pc}

0000ff94 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    ff94:	b510      	push	{r4, lr}
    ff96:	f7f2 f885 	bl	20a4 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>
    ff9a:	2000      	movs	r0, #0
    ff9c:	bd10      	pop	{r4, pc}

0000ff9e <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>:
    ff9e:	b510      	push	{r4, lr}
    ffa0:	460c      	mov	r4, r1
    ffa2:	2100      	movs	r1, #0
    ffa4:	f7f1 fc0c 	bl	17c0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ffa8:	b118      	cbz	r0, ffb2 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x14>
    ffaa:	2c02      	cmp	r4, #2
    ffac:	d903      	bls.n	ffb6 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x18>
    ffae:	2012      	movs	r0, #18
    ffb0:	bd10      	pop	{r4, pc}
    ffb2:	2002      	movs	r0, #2
    ffb4:	bd10      	pop	{r4, pc}
    ffb6:	f014 0101 	ands.w	r1, r4, #1
    ffba:	f880 122d 	strb.w	r1, [r0, #557]	; 0x22d
    ffbe:	f3c4 0240 	ubfx	r2, r4, #1, #1
    ffc2:	f880 222c 	strb.w	r2, [r0, #556]	; 0x22c
    ffc6:	d004      	beq.n	ffd2 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
    ffc8:	f890 122a 	ldrb.w	r1, [r0, #554]	; 0x22a
    ffcc:	b109      	cbz	r1, ffd2 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
    ffce:	f7ff f8c6 	bl	f15e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    ffd2:	2000      	movs	r0, #0
    ffd4:	bd10      	pop	{r4, pc}

0000ffd6 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    ffd6:	b51c      	push	{r2, r3, r4, lr}
    ffd8:	460c      	mov	r4, r1
    ffda:	4669      	mov	r1, sp
    ffdc:	f7fd ff25 	bl	de2a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ffe0:	2800      	cmp	r0, #0
    ffe2:	d105      	bne.n	fff0 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
    ffe4:	2100      	movs	r1, #0
    ffe6:	4622      	mov	r2, r4
    ffe8:	9801      	ldr	r0, [sp, #4]
    ffea:	f000 face 	bl	1058a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    ffee:	2000      	movs	r0, #0
    fff0:	bd1c      	pop	{r2, r3, r4, pc}

0000fff2 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>:
    fff2:	b510      	push	{r4, lr}
    fff4:	4604      	mov	r4, r0
    fff6:	7800      	ldrb	r0, [r0, #0]
    fff8:	28ff      	cmp	r0, #255	; 0xff
    fffa:	d009      	beq.n	10010 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1e>
    fffc:	2101      	movs	r1, #1
    fffe:	f7f1 fbdf 	bl	17c0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10002:	b118      	cbz	r0, 1000c <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1a>
   10004:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   10008:	8441      	strh	r1, [r0, #34]	; 0x22
   1000a:	e005      	b.n	10018 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x26>
   1000c:	2042      	movs	r0, #66	; 0x42
   1000e:	bd10      	pop	{r4, pc}
   10010:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   10014:	f7f4 fd3a 	bl	4a8c <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>
   10018:	2000      	movs	r0, #0
   1001a:	bd10      	pop	{r4, pc}

0001001c <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   1001c:	b510      	push	{r4, lr}
   1001e:	4604      	mov	r4, r0
   10020:	f7f7 fc70 	bl	7904 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>
   10024:	b118      	cbz	r0, 1002e <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x12>
   10026:	2000      	movs	r0, #0
   10028:	f000 f9e3 	bl	103f2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
   1002c:	b128      	cbz	r0, 1003a <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x1e>
   1002e:	4621      	mov	r1, r4
   10030:	2000      	movs	r0, #0
   10032:	f7f2 f813 	bl	205c <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   10036:	2000      	movs	r0, #0
   10038:	bd10      	pop	{r4, pc}
   1003a:	200c      	movs	r0, #12
   1003c:	bd10      	pop	{r4, pc}

0001003e <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   1003e:	b510      	push	{r4, lr}
   10040:	7800      	ldrb	r0, [r0, #0]
   10042:	b100      	cbz	r0, 10046 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
   10044:	2001      	movs	r0, #1
   10046:	f7f4 fd4b 	bl	4ae0 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
   1004a:	2000      	movs	r0, #0
   1004c:	bd10      	pop	{r4, pc}

0001004e <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   1004e:	f7f7 bb79 	b.w	7744 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x104>

00010052 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
   10052:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10056:	4606      	mov	r6, r0
   10058:	7845      	ldrb	r5, [r0, #1]
   1005a:	7800      	ldrb	r0, [r0, #0]
   1005c:	2101      	movs	r1, #1
   1005e:	f7f1 fbaf 	bl	17c0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10062:	0004      	movs	r4, r0
   10064:	d01e      	beq.n	100a4 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
   10066:	f7fe fe7c 	bl	ed62 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
   1006a:	78f1      	ldrb	r1, [r6, #3]
   1006c:	4281      	cmp	r1, r0
   1006e:	d800      	bhi.n	10072 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
   10070:	4608      	mov	r0, r1
   10072:	4607      	mov	r7, r0
   10074:	2d04      	cmp	r5, #4
   10076:	d018      	beq.n	100aa <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
   10078:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1007a:	f7fd fdb6 	bl	dbea <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   1007e:	4438      	add	r0, r7
   10080:	b281      	uxth	r1, r0
   10082:	4620      	mov	r0, r4
   10084:	2201      	movs	r2, #1
   10086:	f000 f9c6 	bl	10416 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
   1008a:	2800      	cmp	r0, #0
   1008c:	d10b      	bne.n	100a6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   1008e:	2d03      	cmp	r5, #3
   10090:	d000      	beq.n	10094 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   10092:	b1df      	cbz	r7, 100cc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   10094:	4620      	mov	r0, r4
   10096:	f7fe fe99 	bl	edcc <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   1009a:	7871      	ldrb	r1, [r6, #1]
   1009c:	2903      	cmp	r1, #3
   1009e:	d010      	beq.n	100c2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   100a0:	b9a0      	cbnz	r0, 100cc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   100a2:	e004      	b.n	100ae <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
   100a4:	2042      	movs	r0, #66	; 0x42
   100a6:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   100aa:	b97f      	cbnz	r7, 100cc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   100ac:	e7f2      	b.n	10094 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
   100ae:	2904      	cmp	r1, #4
   100b0:	d107      	bne.n	100c2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
   100b2:	4620      	mov	r0, r4
   100b4:	f7ff f850 	bl	f158 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   100b8:	b140      	cbz	r0, 100cc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   100ba:	6b60      	ldr	r0, [r4, #52]	; 0x34
   100bc:	f7fd fd5c 	bl	db78 <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
   100c0:	b120      	cbz	r0, 100cc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
   100c2:	2d01      	cmp	r5, #1
   100c4:	d004      	beq.n	100d0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   100c6:	2d03      	cmp	r5, #3
   100c8:	d002      	beq.n	100d0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
   100ca:	e00e      	b.n	100ea <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
   100cc:	2012      	movs	r0, #18
   100ce:	e7ea      	b.n	100a6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   100d0:	4620      	mov	r0, r4
   100d2:	f7fe fe7b 	bl	edcc <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   100d6:	b108      	cbz	r0, 100dc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
   100d8:	2200      	movs	r2, #0
   100da:	e002      	b.n	100e2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   100dc:	2d01      	cmp	r5, #1
   100de:	d013      	beq.n	10108 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
   100e0:	2201      	movs	r2, #1
   100e2:	4668      	mov	r0, sp
   100e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
   100e6:	f7fd fce3 	bl	dab0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   100ea:	2d04      	cmp	r5, #4
   100ec:	d018      	beq.n	10120 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   100ee:	6872      	ldr	r2, [r6, #4]
   100f0:	463b      	mov	r3, r7
   100f2:	2101      	movs	r1, #1
   100f4:	6b60      	ldr	r0, [r4, #52]	; 0x34
   100f6:	f7fd fd0f 	bl	db18 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   100fa:	b138      	cbz	r0, 1010c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
   100fc:	7870      	ldrb	r0, [r6, #1]
   100fe:	2802      	cmp	r0, #2
   10100:	d006      	beq.n	10110 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   10102:	2803      	cmp	r0, #3
   10104:	d004      	beq.n	10110 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
   10106:	e00b      	b.n	10120 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
   10108:	2202      	movs	r2, #2
   1010a:	e7ea      	b.n	100e2 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
   1010c:	2007      	movs	r0, #7
   1010e:	e7ca      	b.n	100a6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
   10110:	6b60      	ldr	r0, [r4, #52]	; 0x34
   10112:	f7fd fd6a 	bl	dbea <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
   10116:	4602      	mov	r2, r0
   10118:	2101      	movs	r1, #1
   1011a:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1011c:	f7fd fd42 	bl	dba4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   10120:	2000      	movs	r0, #0
   10122:	e7c0      	b.n	100a6 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

00010124 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
   10124:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10128:	4607      	mov	r7, r0
   1012a:	7845      	ldrb	r5, [r0, #1]
   1012c:	78c6      	ldrb	r6, [r0, #3]
   1012e:	7800      	ldrb	r0, [r0, #0]
   10130:	2101      	movs	r1, #1
   10132:	f7f1 fb45 	bl	17c0 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10136:	0004      	movs	r4, r0
   10138:	d003      	beq.n	10142 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
   1013a:	f7fe fe49 	bl	edd0 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   1013e:	b118      	cbz	r0, 10148 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
   10140:	e003      	b.n	1014a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
   10142:	2042      	movs	r0, #66	; 0x42
   10144:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10148:	2600      	movs	r6, #0
   1014a:	6b60      	ldr	r0, [r4, #52]	; 0x34
   1014c:	f7fd fd51 	bl	dbf2 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
   10150:	4430      	add	r0, r6
   10152:	b281      	uxth	r1, r0
   10154:	4688      	mov	r8, r1
   10156:	4620      	mov	r0, r4
   10158:	2201      	movs	r2, #1
   1015a:	f000 f95c 	bl	10416 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
   1015e:	2800      	cmp	r0, #0
   10160:	d1f0      	bne.n	10144 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10162:	2d04      	cmp	r5, #4
   10164:	d008      	beq.n	10178 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   10166:	2d03      	cmp	r5, #3
   10168:	d00a      	beq.n	10180 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x5c>
   1016a:	b12e      	cbz	r6, 10178 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x54>
   1016c:	4620      	mov	r0, r4
   1016e:	f7fe fff3 	bl	f158 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10172:	b118      	cbz	r0, 1017c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x58>
   10174:	200c      	movs	r0, #12
   10176:	e7e5      	b.n	10144 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10178:	2012      	movs	r0, #18
   1017a:	e7e3      	b.n	10144 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   1017c:	2d01      	cmp	r5, #1
   1017e:	d10c      	bne.n	1019a <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x76>
   10180:	4620      	mov	r0, r4
   10182:	f7fe fe23 	bl	edcc <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10186:	b108      	cbz	r0, 1018c <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x68>
   10188:	2204      	movs	r2, #4
   1018a:	e002      	b.n	10192 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   1018c:	2d01      	cmp	r5, #1
   1018e:	d010      	beq.n	101b2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x8e>
   10190:	2205      	movs	r2, #5
   10192:	4668      	mov	r0, sp
   10194:	6b61      	ldr	r1, [r4, #52]	; 0x34
   10196:	f7fd fc8b 	bl	dab0 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   1019a:	687a      	ldr	r2, [r7, #4]
   1019c:	4633      	mov	r3, r6
   1019e:	2100      	movs	r1, #0
   101a0:	6b60      	ldr	r0, [r4, #52]	; 0x34
   101a2:	f7fd fcb9 	bl	db18 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   101a6:	b130      	cbz	r0, 101b6 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x92>
   101a8:	2d02      	cmp	r5, #2
   101aa:	d006      	beq.n	101ba <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   101ac:	2d03      	cmp	r5, #3
   101ae:	d004      	beq.n	101ba <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x96>
   101b0:	e008      	b.n	101c4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0xa0>
   101b2:	2206      	movs	r2, #6
   101b4:	e7ed      	b.n	10192 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x6e>
   101b6:	2007      	movs	r0, #7
   101b8:	e7c4      	b.n	10144 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   101ba:	4642      	mov	r2, r8
   101bc:	2100      	movs	r1, #0
   101be:	6b60      	ldr	r0, [r4, #52]	; 0x34
   101c0:	f7fd fcf0 	bl	dba4 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   101c4:	2000      	movs	r0, #0
   101c6:	e7bd      	b.n	10144 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

000101c8 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   101c8:	b510      	push	{r4, lr}
   101ca:	4604      	mov	r4, r0
   101cc:	8880      	ldrh	r0, [r0, #4]
   101ce:	b128      	cbz	r0, 101dc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   101d0:	2801      	cmp	r0, #1
   101d2:	d003      	beq.n	101dc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   101d4:	2802      	cmp	r0, #2
   101d6:	d001      	beq.n	101dc <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   101d8:	2012      	movs	r0, #18
   101da:	bd10      	pop	{r4, pc}
   101dc:	78e0      	ldrb	r0, [r4, #3]
   101de:	f000 f9b1 	bl	10544 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
   101e2:	b148      	cbz	r0, 101f8 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   101e4:	78a0      	ldrb	r0, [r4, #2]
   101e6:	f000 f9ad 	bl	10544 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
   101ea:	b128      	cbz	r0, 101f8 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   101ec:	4620      	mov	r0, r4
   101ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   101f2:	2101      	movs	r1, #1
   101f4:	f000 b862 	b.w	102bc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   101f8:	2011      	movs	r0, #17
   101fa:	bd10      	pop	{r4, pc}

000101fc <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   101fc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   101fe:	460c      	mov	r4, r1
   10200:	4605      	mov	r5, r0
   10202:	8800      	ldrh	r0, [r0, #0]
   10204:	4669      	mov	r1, sp
   10206:	f7fd fe10 	bl	de2a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1020a:	2800      	cmp	r0, #0
   1020c:	d106      	bne.n	1021c <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   1020e:	9801      	ldr	r0, [sp, #4]
   10210:	8829      	ldrh	r1, [r5, #0]
   10212:	8021      	strh	r1, [r4, #0]
   10214:	f8b0 00c8 	ldrh.w	r0, [r0, #200]	; 0xc8
   10218:	8060      	strh	r0, [r4, #2]
   1021a:	2000      	movs	r0, #0
   1021c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0001021e <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   1021e:	b510      	push	{r4, lr}
   10220:	4604      	mov	r4, r0
   10222:	4601      	mov	r1, r0
   10224:	2000      	movs	r0, #0
   10226:	f7f1 ff01 	bl	202c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   1022a:	b910      	cbnz	r0, 10232 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   1022c:	2000      	movs	r0, #0
   1022e:	6020      	str	r0, [r4, #0]
   10230:	80a0      	strh	r0, [r4, #4]
   10232:	2000      	movs	r0, #0
   10234:	bd10      	pop	{r4, pc}

00010236 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   10236:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10238:	460c      	mov	r4, r1
   1023a:	4605      	mov	r5, r0
   1023c:	8800      	ldrh	r0, [r0, #0]
   1023e:	4669      	mov	r1, sp
   10240:	f7fd fdf3 	bl	de2a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10244:	b108      	cbz	r0, 1024a <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   10246:	2002      	movs	r0, #2
   10248:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1024a:	78a8      	ldrb	r0, [r5, #2]
   1024c:	b158      	cbz	r0, 10266 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x30>
   1024e:	f000 f9f2 	bl	10636 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
   10252:	70a0      	strb	r0, [r4, #2]
   10254:	8828      	ldrh	r0, [r5, #0]
   10256:	8020      	strh	r0, [r4, #0]
   10258:	f994 0002 	ldrsb.w	r0, [r4, #2]
   1025c:	f7f2 fdb8 	bl	2dd0 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
   10260:	70a0      	strb	r0, [r4, #2]
   10262:	2000      	movs	r0, #0
   10264:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10266:	9801      	ldr	r0, [sp, #4]
   10268:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
   1026c:	e7f1      	b.n	10252 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0001026e <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   1026e:	b510      	push	{r4, lr}
   10270:	f7f7 fb4e 	bl	7910 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   10274:	2000      	movs	r0, #0
   10276:	bd10      	pop	{r4, pc}

00010278 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   10278:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1027c:	4604      	mov	r4, r0
   1027e:	8840      	ldrh	r0, [r0, #2]
   10280:	460d      	mov	r5, r1
   10282:	b1b8      	cbz	r0, 102b4 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   10284:	8820      	ldrh	r0, [r4, #0]
   10286:	4669      	mov	r1, sp
   10288:	f7fd fdcf 	bl	de2a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1028c:	2800      	cmp	r0, #0
   1028e:	d10f      	bne.n	102b0 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   10290:	8820      	ldrh	r0, [r4, #0]
   10292:	8028      	strh	r0, [r5, #0]
   10294:	9e01      	ldr	r6, [sp, #4]
   10296:	f106 0510 	add.w	r5, r6, #16
   1029a:	3680      	adds	r6, #128	; 0x80
   1029c:	682f      	ldr	r7, [r5, #0]
   1029e:	8862      	ldrh	r2, [r4, #2]
   102a0:	4639      	mov	r1, r7
   102a2:	4630      	mov	r0, r6
   102a4:	f7fd fee3 	bl	e06e <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   102a8:	6828      	ldr	r0, [r5, #0]
   102aa:	42b8      	cmp	r0, r7
   102ac:	d1f6      	bne.n	1029c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   102ae:	2000      	movs	r0, #0
   102b0:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   102b4:	2012      	movs	r0, #18
   102b6:	e7fb      	b.n	102b0 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

000102b8 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   102b8:	f000 b868 	b.w	1038c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

000102bc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   102bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   102c0:	b085      	sub	sp, #20
   102c2:	4688      	mov	r8, r1
   102c4:	4606      	mov	r6, r0
   102c6:	8800      	ldrh	r0, [r0, #0]
   102c8:	a901      	add	r1, sp, #4
   102ca:	f7fd fdae 	bl	de2a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   102ce:	2800      	cmp	r0, #0
   102d0:	d13b      	bne.n	1034a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   102d2:	9802      	ldr	r0, [sp, #8]
   102d4:	4601      	mov	r1, r0
   102d6:	468a      	mov	sl, r1
   102d8:	f890 1194 	ldrb.w	r1, [r0, #404]	; 0x194
   102dc:	f500 7498 	add.w	r4, r0, #304	; 0x130
   102e0:	f88d 1000 	strb.w	r1, [sp]
   102e4:	9900      	ldr	r1, [sp, #0]
   102e6:	9100      	str	r1, [sp, #0]
   102e8:	f89d 1000 	ldrb.w	r1, [sp]
   102ec:	f04f 0900 	mov.w	r9, #0
   102f0:	3080      	adds	r0, #128	; 0x80
   102f2:	b121      	cbz	r1, 102fe <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   102f4:	f1b8 0f02 	cmp.w	r8, #2
   102f8:	d001      	beq.n	102fe <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   102fa:	2701      	movs	r7, #1
   102fc:	e000      	b.n	10300 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
   102fe:	2700      	movs	r7, #0
   10300:	7f81      	ldrb	r1, [r0, #30]
   10302:	2922      	cmp	r1, #34	; 0x22
   10304:	d100      	bne.n	10308 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
   10306:	b13f      	cbz	r7, 10318 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
   10308:	2500      	movs	r5, #0
   1030a:	306c      	adds	r0, #108	; 0x6c
   1030c:	2108      	movs	r1, #8
   1030e:	4683      	mov	fp, r0
   10310:	f7ff fbb9 	bl	fa86 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
   10314:	b110      	cbz	r0, 1031c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x60>
   10316:	e007      	b.n	10328 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x6c>
   10318:	2501      	movs	r5, #1
   1031a:	e7f6      	b.n	1030a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4e>
   1031c:	210b      	movs	r1, #11
   1031e:	4658      	mov	r0, fp
   10320:	f7ff fbb1 	bl	fa86 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
   10324:	b900      	cbnz	r0, 10328 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x6c>
   10326:	b17d      	cbz	r5, 10348 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8c>
   10328:	a804      	add	r0, sp, #16
   1032a:	9000      	str	r0, [sp, #0]
   1032c:	f89d 0004 	ldrb.w	r0, [sp, #4]
   10330:	ab03      	add	r3, sp, #12
   10332:	4632      	mov	r2, r6
   10334:	4651      	mov	r1, sl
   10336:	f000 f95e 	bl	105f6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
   1033a:	0005      	movs	r5, r0
   1033c:	d105      	bne.n	1034a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   1033e:	340c      	adds	r4, #12
   10340:	20ff      	movs	r0, #255	; 0xff
   10342:	7060      	strb	r0, [r4, #1]
   10344:	b937      	cbnz	r7, 10354 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x98>
   10346:	e003      	b.n	10350 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
   10348:	201a      	movs	r0, #26
   1034a:	b005      	add	sp, #20
   1034c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10350:	7820      	ldrb	r0, [r4, #0]
   10352:	b108      	cbz	r0, 10358 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
   10354:	253a      	movs	r5, #58	; 0x3a
   10356:	e012      	b.n	1037e <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc2>
   10358:	f884 8000 	strb.w	r8, [r4]
   1035c:	f89d 000c 	ldrb.w	r0, [sp, #12]
   10360:	70a0      	strb	r0, [r4, #2]
   10362:	f89d 1010 	ldrb.w	r1, [sp, #16]
   10366:	70e1      	strb	r1, [r4, #3]
   10368:	f88d 0000 	strb.w	r0, [sp]
   1036c:	f88d 1001 	strb.w	r1, [sp, #1]
   10370:	88b0      	ldrh	r0, [r6, #4]
   10372:	f8ad 0002 	strh.w	r0, [sp, #2]
   10376:	4669      	mov	r1, sp
   10378:	4650      	mov	r0, sl
   1037a:	f7fd fe13 	bl	dfa4 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   1037e:	f884 9001 	strb.w	r9, [r4, #1]
   10382:	4628      	mov	r0, r5
   10384:	e7e1      	b.n	1034a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>

00010386 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   10386:	2008      	movs	r0, #8
   10388:	f7f7 bb2a 	b.w	79e0 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

0001038c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
   1038c:	b510      	push	{r4, lr}
   1038e:	f7fd fcbb 	bl	dd08 <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   10392:	f7f2 fbd9 	bl	2b48 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   10396:	f7f7 fb45 	bl	7a24 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
   1039a:	f7fe f917 	bl	e5cc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
   1039e:	f7fd fed6 	bl	e14e <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>
   103a2:	f7f3 fb3b 	bl	3a1c <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
   103a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   103aa:	f7f7 b90d 	b.w	75c8 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x48>

000103ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>:
   103ae:	f7f5 b901 	b.w	55b4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
   103b2:	f44f 71a4 	mov.w	r1, #328	; 0x148
   103b6:	4288      	cmp	r0, r1
   103b8:	d303      	bcc.n	103c2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14>
   103ba:	f640 0148 	movw	r1, #2120	; 0x848
   103be:	4288      	cmp	r0, r1
   103c0:	d300      	bcc.n	103c4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x16>
   103c2:	4608      	mov	r0, r1
   103c4:	b280      	uxth	r0, r0
   103c6:	4770      	bx	lr
   103c8:	07c1      	lsls	r1, r0, #31
   103ca:	d001      	beq.n	103d0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22>
   103cc:	2001      	movs	r0, #1
   103ce:	4770      	bx	lr
   103d0:	0780      	lsls	r0, r0, #30
   103d2:	d501      	bpl.n	103d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a>
   103d4:	2002      	movs	r0, #2
   103d6:	4770      	bx	lr
   103d8:	2000      	movs	r0, #0
   103da:	4770      	bx	lr
   103dc:	b510      	push	{r4, lr}
   103de:	2801      	cmp	r0, #1
   103e0:	d006      	beq.n	103f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   103e2:	2802      	cmp	r0, #2
   103e4:	d004      	beq.n	103f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   103e6:	f240 21d7 	movw	r1, #727	; 0x2d7
   103ea:	2006      	movs	r0, #6
   103ec:	f7f0 feba 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   103f0:	bd10      	pop	{r4, pc}
   103f2:	b510      	push	{r4, lr}
   103f4:	f7f7 f8d2 	bl	759c <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1c>
   103f8:	b158      	cbz	r0, 10412 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
   103fa:	f7f7 f905 	bl	7608 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x88>
   103fe:	4604      	mov	r4, r0
   10400:	f7fe fce6 	bl	edd0 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   10404:	b918      	cbnz	r0, 1040e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x60>
   10406:	4620      	mov	r0, r4
   10408:	f7fe fcd8 	bl	edbc <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   1040c:	b108      	cbz	r0, 10412 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
   1040e:	2000      	movs	r0, #0
   10410:	bd10      	pop	{r4, pc}
   10412:	2001      	movs	r0, #1
   10414:	bd10      	pop	{r4, pc}
   10416:	b570      	push	{r4, r5, r6, lr}
   10418:	460c      	mov	r4, r1
   1041a:	4605      	mov	r5, r0
   1041c:	b112      	cbz	r2, 10424 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x76>
   1041e:	291f      	cmp	r1, #31
   10420:	d80c      	bhi.n	1043c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x8e>
   10422:	e016      	b.n	10452 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa4>
   10424:	f7f1 fc42 	bl	1cac <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   10428:	42a0      	cmp	r0, r4
   1042a:	d201      	bcs.n	10430 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x82>
   1042c:	2007      	movs	r0, #7
   1042e:	bd70      	pop	{r4, r5, r6, pc}
   10430:	4628      	mov	r0, r5
   10432:	f7fe fccb 	bl	edcc <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10436:	b118      	cbz	r0, 10440 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
   10438:	2c1f      	cmp	r4, #31
   1043a:	d901      	bls.n	10440 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
   1043c:	2012      	movs	r0, #18
   1043e:	bd70      	pop	{r4, r5, r6, pc}
   10440:	4628      	mov	r0, r5
   10442:	f7fe fccc 	bl	edde <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   10446:	b130      	cbz	r0, 10456 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa8>
   10448:	4621      	mov	r1, r4
   1044a:	4628      	mov	r0, r5
   1044c:	f7fe fc95 	bl	ed7a <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   10450:	b118      	cbz	r0, 1045a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xac>
   10452:	2000      	movs	r0, #0
   10454:	bd70      	pop	{r4, r5, r6, pc}
   10456:	2042      	movs	r0, #66	; 0x42
   10458:	bd70      	pop	{r4, r5, r6, pc}
   1045a:	2045      	movs	r0, #69	; 0x45
   1045c:	bd70      	pop	{r4, r5, r6, pc}
   1045e:	b510      	push	{r4, lr}
   10460:	4604      	mov	r4, r0
   10462:	7840      	ldrb	r0, [r0, #1]
   10464:	06c1      	lsls	r1, r0, #27
   10466:	d51c      	bpl.n	104a2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   10468:	07c0      	lsls	r0, r0, #31
   1046a:	d00b      	beq.n	10484 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   1046c:	f7f7 fa8c 	bl	7988 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   10470:	b1b8      	cbz	r0, 104a2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   10472:	7860      	ldrb	r0, [r4, #1]
   10474:	06c1      	lsls	r1, r0, #27
   10476:	d405      	bmi.n	10484 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   10478:	0700      	lsls	r0, r0, #28
   1047a:	d503      	bpl.n	10484 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   1047c:	7d20      	ldrb	r0, [r4, #20]
   1047e:	2802      	cmp	r0, #2
   10480:	d10f      	bne.n	104a2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   10482:	e010      	b.n	104a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   10484:	7d20      	ldrb	r0, [r4, #20]
   10486:	2802      	cmp	r0, #2
   10488:	d001      	beq.n	1048e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xe0>
   1048a:	7ea0      	ldrb	r0, [r4, #26]
   1048c:	b948      	cbnz	r0, 104a2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   1048e:	7860      	ldrb	r0, [r4, #1]
   10490:	0700      	lsls	r0, r0, #28
   10492:	d408      	bmi.n	104a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   10494:	f8d4 0005 	ldr.w	r0, [r4, #5]
   10498:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   1049c:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   104a0:	d201      	bcs.n	104a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   104a2:	2011      	movs	r0, #17
   104a4:	bd10      	pop	{r4, pc}
   104a6:	2000      	movs	r0, #0
   104a8:	bd10      	pop	{r4, pc}
   104aa:	b538      	push	{r3, r4, r5, lr}
   104ac:	4604      	mov	r4, r0
   104ae:	7800      	ldrb	r0, [r0, #0]
   104b0:	28ef      	cmp	r0, #239	; 0xef
   104b2:	d843      	bhi.n	1053c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   104b4:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   104b8:	f8ad 0000 	strh.w	r0, [sp]
   104bc:	9800      	ldr	r0, [sp, #0]
   104be:	f000 f918 	bl	106f2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x344>
   104c2:	b3a0      	cbz	r0, 1052e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
   104c4:	7861      	ldrb	r1, [r4, #1]
   104c6:	0708      	lsls	r0, r1, #28
   104c8:	d40b      	bmi.n	104e2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x134>
   104ca:	f8d4 0002 	ldr.w	r0, [r4, #2]
   104ce:	f8d4 3005 	ldr.w	r3, [r4, #5]
   104d2:	0a02      	lsrs	r2, r0, #8
   104d4:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   104d8:	d830      	bhi.n	1053c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   104da:	2220      	movs	r2, #32
   104dc:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   104e0:	d82c      	bhi.n	1053c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   104e2:	7a60      	ldrb	r0, [r4, #9]
   104e4:	b318      	cbz	r0, 1052e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
   104e6:	2807      	cmp	r0, #7
   104e8:	d828      	bhi.n	1053c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   104ea:	7aa0      	ldrb	r0, [r4, #10]
   104ec:	b128      	cbz	r0, 104fa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   104ee:	2801      	cmp	r0, #1
   104f0:	d003      	beq.n	104fa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   104f2:	2802      	cmp	r0, #2
   104f4:	d001      	beq.n	104fa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   104f6:	2803      	cmp	r0, #3
   104f8:	d120      	bne.n	1053c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   104fa:	074a      	lsls	r2, r1, #29
   104fc:	d403      	bmi.n	10506 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
   104fe:	2802      	cmp	r0, #2
   10500:	d001      	beq.n	10506 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
   10502:	2803      	cmp	r0, #3
   10504:	d105      	bne.n	10512 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x164>
   10506:	7ae0      	ldrb	r0, [r4, #11]
   10508:	b108      	cbz	r0, 1050e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x160>
   1050a:	2801      	cmp	r0, #1
   1050c:	d116      	bne.n	1053c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   1050e:	0748      	lsls	r0, r1, #29
   10510:	d407      	bmi.n	10522 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   10512:	7ca0      	ldrb	r0, [r4, #18]
   10514:	b128      	cbz	r0, 10522 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   10516:	2801      	cmp	r0, #1
   10518:	d003      	beq.n	10522 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   1051a:	2802      	cmp	r0, #2
   1051c:	d001      	beq.n	10522 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   1051e:	2803      	cmp	r0, #3
   10520:	d10c      	bne.n	1053c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10522:	06c8      	lsls	r0, r1, #27
   10524:	7d20      	ldrb	r0, [r4, #20]
   10526:	d503      	bpl.n	10530 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x182>
   10528:	2801      	cmp	r0, #1
   1052a:	d107      	bne.n	1053c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   1052c:	e002      	b.n	10534 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x186>
   1052e:	e005      	b.n	1053c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10530:	2802      	cmp	r0, #2
   10532:	d003      	beq.n	1053c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10534:	7e20      	ldrb	r0, [r4, #24]
   10536:	b118      	cbz	r0, 10540 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
   10538:	2801      	cmp	r0, #1
   1053a:	d001      	beq.n	10540 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
   1053c:	2012      	movs	r0, #18
   1053e:	bd38      	pop	{r3, r4, r5, pc}
   10540:	2000      	movs	r0, #0
   10542:	bd38      	pop	{r3, r4, r5, pc}
   10544:	b510      	push	{r4, lr}
   10546:	0004      	movs	r4, r0
   10548:	d005      	beq.n	10556 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
   1054a:	f7f7 fa5b 	bl	7a04 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1054e:	4384      	bics	r4, r0
   10550:	d001      	beq.n	10556 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
   10552:	2000      	movs	r0, #0
   10554:	bd10      	pop	{r4, pc}
   10556:	2001      	movs	r0, #1
   10558:	bd10      	pop	{r4, pc}
   1055a:	28fb      	cmp	r0, #251	; 0xfb
   1055c:	d803      	bhi.n	10566 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b8>
   1055e:	f640 0048 	movw	r0, #2120	; 0x848
   10562:	4281      	cmp	r1, r0
   10564:	d901      	bls.n	1056a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1bc>
   10566:	2011      	movs	r0, #17
   10568:	4770      	bx	lr
   1056a:	2000      	movs	r0, #0
   1056c:	4770      	bx	lr
   1056e:	381b      	subs	r0, #27
   10570:	28e1      	cmp	r0, #225	; 0xe1
   10572:	d206      	bcs.n	10582 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   10574:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   10578:	d303      	bcc.n	10582 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   1057a:	f244 2090 	movw	r0, #17040	; 0x4290
   1057e:	4281      	cmp	r1, r0
   10580:	d901      	bls.n	10586 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d8>
   10582:	2012      	movs	r0, #18
   10584:	4770      	bx	lr
   10586:	2000      	movs	r0, #0
   10588:	4770      	bx	lr
   1058a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1058e:	4606      	mov	r6, r0
   10590:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
   10594:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
   10598:	4615      	mov	r5, r2
   1059a:	302c      	adds	r0, #44	; 0x2c
   1059c:	f7f4 faa6 	bl	4aec <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   105a0:	4680      	mov	r8, r0
   105a2:	2102      	movs	r1, #2
   105a4:	f7fd fcce 	bl	df44 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   105a8:	4287      	cmp	r7, r0
   105aa:	d200      	bcs.n	105ae <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x200>
   105ac:	4638      	mov	r0, r7
   105ae:	4607      	mov	r7, r0
   105b0:	2102      	movs	r1, #2
   105b2:	4640      	mov	r0, r8
   105b4:	f7fd fcc6 	bl	df44 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   105b8:	4284      	cmp	r4, r0
   105ba:	d200      	bcs.n	105be <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x210>
   105bc:	4620      	mov	r0, r4
   105be:	8831      	ldrh	r1, [r6, #0]
   105c0:	8029      	strh	r1, [r5, #0]
   105c2:	2f1b      	cmp	r7, #27
   105c4:	d913      	bls.n	105ee <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x240>
   105c6:	2ffb      	cmp	r7, #251	; 0xfb
   105c8:	d300      	bcc.n	105cc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
   105ca:	27fb      	movs	r7, #251	; 0xfb
   105cc:	806f      	strh	r7, [r5, #2]
   105ce:	281b      	cmp	r0, #27
   105d0:	d90f      	bls.n	105f2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   105d2:	28fb      	cmp	r0, #251	; 0xfb
   105d4:	d300      	bcc.n	105d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
   105d6:	20fb      	movs	r0, #251	; 0xfb
   105d8:	80e8      	strh	r0, [r5, #6]
   105da:	4640      	mov	r0, r8
   105dc:	f7ff fee9 	bl	103b2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   105e0:	80a8      	strh	r0, [r5, #4]
   105e2:	4640      	mov	r0, r8
   105e4:	f7ff fee5 	bl	103b2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   105e8:	8128      	strh	r0, [r5, #8]
   105ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   105ee:	271b      	movs	r7, #27
   105f0:	e7ec      	b.n	105cc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
   105f2:	201b      	movs	r0, #27
   105f4:	e7f0      	b.n	105d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
   105f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   105fa:	7890      	ldrb	r0, [r2, #2]
   105fc:	9e06      	ldr	r6, [sp, #24]
   105fe:	461d      	mov	r5, r3
   10600:	4614      	mov	r4, r2
   10602:	b908      	cbnz	r0, 10608 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25a>
   10604:	f7f7 f9fe 	bl	7a04 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10608:	78e4      	ldrb	r4, [r4, #3]
   1060a:	4607      	mov	r7, r0
   1060c:	b914      	cbnz	r4, 10614 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x266>
   1060e:	f7f7 f9f9 	bl	7a04 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10612:	4604      	mov	r4, r0
   10614:	b16f      	cbz	r7, 10632 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   10616:	b164      	cbz	r4, 10632 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   10618:	4638      	mov	r0, r7
   1061a:	f7ff fed5 	bl	103c8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   1061e:	4620      	mov	r0, r4
   10620:	f7ff fed2 	bl	103c8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   10624:	b12f      	cbz	r7, 10632 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   10626:	b124      	cbz	r4, 10632 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   10628:	702f      	strb	r7, [r5, #0]
   1062a:	7034      	strb	r4, [r6, #0]
   1062c:	2000      	movs	r0, #0
   1062e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10632:	2009      	movs	r0, #9
   10634:	e7fb      	b.n	1062e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x280>
   10636:	207f      	movs	r0, #127	; 0x7f
   10638:	f000 b83c 	b.w	106b4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x306>
   1063c:	b508      	push	{r3, lr}
   1063e:	f890 125c 	ldrb.w	r1, [r0, #604]	; 0x25c
   10642:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
   10646:	f88d 0000 	strb.w	r0, [sp]
   1064a:	9800      	ldr	r0, [sp, #0]
   1064c:	9000      	str	r0, [sp, #0]
   1064e:	f89d 0000 	ldrb.w	r0, [sp]
   10652:	b100      	cbz	r0, 10656 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a8>
   10654:	2001      	movs	r0, #1
   10656:	1e40      	subs	r0, r0, #1
   10658:	4208      	tst	r0, r1
   1065a:	d003      	beq.n	10664 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   1065c:	2904      	cmp	r1, #4
   1065e:	d001      	beq.n	10664 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   10660:	2001      	movs	r0, #1
   10662:	bd08      	pop	{r3, pc}
   10664:	2000      	movs	r0, #0
   10666:	bd08      	pop	{r3, pc}
   10668:	b570      	push	{r4, r5, r6, lr}
   1066a:	4605      	mov	r5, r0
   1066c:	f7fe fbb7 	bl	edde <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   10670:	b170      	cbz	r0, 10690 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e2>
   10672:	4628      	mov	r0, r5
   10674:	f7fe fd70 	bl	f158 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10678:	2800      	cmp	r0, #0
   1067a:	d008      	beq.n	1068e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e0>
   1067c:	4628      	mov	r0, r5
   1067e:	f7fe fd68 	bl	f152 <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   10682:	4604      	mov	r4, r0
   10684:	4628      	mov	r0, r5
   10686:	f7fe fd3e 	bl	f106 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   1068a:	b118      	cbz	r0, 10694 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e6>
   1068c:	200c      	movs	r0, #12
   1068e:	bd70      	pop	{r4, r5, r6, pc}
   10690:	2042      	movs	r0, #66	; 0x42
   10692:	bd70      	pop	{r4, r5, r6, pc}
   10694:	b164      	cbz	r4, 106b0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x302>
   10696:	8820      	ldrh	r0, [r4, #0]
   10698:	f7fd fb03 	bl	dca2 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   1069c:	8820      	ldrh	r0, [r4, #0]
   1069e:	2100      	movs	r1, #0
   106a0:	f7f1 f930 	bl	1904 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   106a4:	b120      	cbz	r0, 106b0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x302>
   106a6:	f241 71ae 	movw	r1, #6062	; 0x17ae
   106aa:	2039      	movs	r0, #57	; 0x39
   106ac:	f7f0 fd5a 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   106b0:	2000      	movs	r0, #0
   106b2:	bd70      	pop	{r4, r5, r6, pc}
   106b4:	b508      	push	{r3, lr}
   106b6:	f640 1288 	movw	r2, #2440	; 0x988
   106ba:	2300      	movs	r3, #0
   106bc:	4669      	mov	r1, sp
   106be:	f7fc f9a9 	bl	ca14 <mpsl_fem_tx_power_split>
   106c2:	bd08      	pop	{r3, pc}
   106c4:	b530      	push	{r4, r5, lr}
   106c6:	f340 0400 	sbfx	r4, r0, #0, #1
   106ca:	f340 0040 	sbfx	r0, r0, #1, #1
   106ce:	1c40      	adds	r0, r0, #1
   106d0:	9d03      	ldr	r5, [sp, #12]
   106d2:	1c64      	adds	r4, r4, #1
   106d4:	d000      	beq.n	106d8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x32a>
   106d6:	b119      	cbz	r1, 106e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x332>
   106d8:	b100      	cbz	r0, 106dc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x32e>
   106da:	b10a      	cbz	r2, 106e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x332>
   106dc:	b91c      	cbnz	r4, 106e6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x338>
   106de:	e001      	b.n	106e4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x336>
   106e0:	2011      	movs	r0, #17
   106e2:	bd30      	pop	{r4, r5, pc}
   106e4:	2100      	movs	r1, #0
   106e6:	7019      	strb	r1, [r3, #0]
   106e8:	b900      	cbnz	r0, 106ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x33e>
   106ea:	2200      	movs	r2, #0
   106ec:	702a      	strb	r2, [r5, #0]
   106ee:	2000      	movs	r0, #0
   106f0:	bd30      	pop	{r4, r5, pc}
   106f2:	b2c0      	uxtb	r0, r0
   106f4:	06c1      	lsls	r1, r0, #27
   106f6:	d40c      	bmi.n	10712 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x364>
   106f8:	0681      	lsls	r1, r0, #26
   106fa:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   106fe:	d503      	bpl.n	10708 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x35a>
   10700:	b9d1      	cbnz	r1, 10738 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   10702:	0781      	lsls	r1, r0, #30
   10704:	d418      	bmi.n	10738 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   10706:	e001      	b.n	1070c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x35e>
   10708:	2900      	cmp	r1, #0
   1070a:	d1fa      	bne.n	10702 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x354>
   1070c:	0700      	lsls	r0, r0, #28
   1070e:	d413      	bmi.n	10738 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   10710:	e010      	b.n	10734 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x386>
   10712:	0641      	lsls	r1, r0, #25
   10714:	d410      	bmi.n	10738 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   10716:	0681      	lsls	r1, r0, #26
   10718:	d40e      	bmi.n	10738 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   1071a:	07c1      	lsls	r1, r0, #31
   1071c:	ea4f 7180 	mov.w	r1, r0, lsl #30
   10720:	d004      	beq.n	1072c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37e>
   10722:	2900      	cmp	r1, #0
   10724:	db02      	blt.n	1072c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37e>
   10726:	0740      	lsls	r0, r0, #29
   10728:	d404      	bmi.n	10734 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x386>
   1072a:	e005      	b.n	10738 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   1072c:	0701      	lsls	r1, r0, #28
   1072e:	d403      	bmi.n	10738 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   10730:	0740      	lsls	r0, r0, #29
   10732:	d401      	bmi.n	10738 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   10734:	2001      	movs	r0, #1
   10736:	4770      	bx	lr
   10738:	2000      	movs	r0, #0
   1073a:	4770      	bx	lr
   1073c:	b510      	push	{r4, lr}
   1073e:	f7f4 f9b9 	bl	4ab4 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   10742:	b110      	cbz	r0, 1074a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x39c>
   10744:	f44f 7188 	mov.w	r1, #272	; 0x110
   10748:	e004      	b.n	10754 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3a6>
   1074a:	f7f3 fae9 	bl	3d20 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   1074e:	b120      	cbz	r0, 1075a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ac>
   10750:	f240 1115 	movw	r1, #277	; 0x115
   10754:	2001      	movs	r0, #1
   10756:	f7f0 fd05 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1075a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1075e:	2001      	movs	r0, #1
   10760:	f7fd b8ef 	b.w	d942 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10764:	6802      	ldr	r2, [r0, #0]
   10766:	b912      	cbnz	r2, 1076e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c0>
   10768:	6001      	str	r1, [r0, #0]
   1076a:	4770      	bx	lr
   1076c:	4602      	mov	r2, r0
   1076e:	6850      	ldr	r0, [r2, #4]
   10770:	b108      	cbz	r0, 10776 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c8>
   10772:	428a      	cmp	r2, r1
   10774:	d1fa      	bne.n	1076c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3be>
   10776:	428a      	cmp	r2, r1
   10778:	d0f7      	beq.n	1076a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3bc>
   1077a:	6051      	str	r1, [r2, #4]
   1077c:	4770      	bx	lr
   1077e:	b510      	push	{r4, lr}
   10780:	4604      	mov	r4, r0
   10782:	e002      	b.n	1078a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3dc>
   10784:	6820      	ldr	r0, [r4, #0]
   10786:	4780      	blx	r0
   10788:	6864      	ldr	r4, [r4, #4]
   1078a:	2c00      	cmp	r4, #0
   1078c:	d1fa      	bne.n	10784 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d6>
   1078e:	bd10      	pop	{r4, pc}
   10790:	b510      	push	{r4, lr}
   10792:	2000      	movs	r0, #0
   10794:	f7fd f8d5 	bl	d942 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10798:	f7f1 f992 	bl	1ac0 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   1079c:	f7f1 fc28 	bl	1ff0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   107a0:	f7f1 fdb6 	bl	2310 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>
   107a4:	2800      	cmp	r0, #0
   107a6:	d003      	beq.n	107b0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x402>
   107a8:	21f2      	movs	r1, #242	; 0xf2
   107aa:	2001      	movs	r0, #1
   107ac:	f7f0 fcda 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   107b0:	bd10      	pop	{r4, pc}
   107b2:	b510      	push	{r4, lr}
   107b4:	f7ff ffc2 	bl	1073c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38e>
   107b8:	f7fe ffc9 	bl	f74e <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   107bc:	2800      	cmp	r0, #0
   107be:	d004      	beq.n	107ca <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41c>
   107c0:	f44f 7195 	mov.w	r1, #298	; 0x12a
   107c4:	2001      	movs	r0, #1
   107c6:	f7f0 fccd 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   107ca:	bd10      	pop	{r4, pc}

000107cc <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   107cc:	f7fb be58 	b.w	c480 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   107d0:	000b0001 	.word	0x000b0001
   107d4:	000a0002 	.word	0x000a0002
   107d8:	00090005 	.word	0x00090005
   107dc:	0008000a 	.word	0x0008000a
   107e0:	00070014 	.word	0x00070014
   107e4:	0006001e 	.word	0x0006001e
   107e8:	00050032 	.word	0x00050032
   107ec:	0004004b 	.word	0x0004004b
   107f0:	00030064 	.word	0x00030064
   107f4:	00020096 	.word	0x00020096
   107f8:	000100fa 	.word	0x000100fa
   107fc:	000001f4 	.word	0x000001f4

00010800 <sym_5UID3SBXLTGQYGRFXVINZNLWHB7EKFT76O275JI>:
   10800:	b510      	push	{r4, lr}
   10802:	6844      	ldr	r4, [r0, #4]
   10804:	7803      	ldrb	r3, [r0, #0]
   10806:	2100      	movs	r1, #0
   10808:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
   1080c:	3480      	adds	r4, #128	; 0x80
   1080e:	4620      	mov	r0, r4
   10810:	f7fd fb22 	bl	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   10814:	b110      	cbz	r0, 1081c <sym_5UID3SBXLTGQYGRFXVINZNLWHB7EKFT76O275JI+0x1c>
   10816:	2020      	movs	r0, #32
   10818:	7760      	strb	r0, [r4, #29]
   1081a:	bd10      	pop	{r4, pc}
   1081c:	2180      	movs	r1, #128	; 0x80
   1081e:	207e      	movs	r0, #126	; 0x7e
   10820:	f7f0 fca0 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010824 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA>:
   10824:	2200      	movs	r2, #0
   10826:	704a      	strb	r2, [r1, #1]
   10828:	2214      	movs	r2, #20
   1082a:	700a      	strb	r2, [r1, #0]
   1082c:	f8d0 200a 	ldr.w	r2, [r0, #10]
   10830:	604a      	str	r2, [r1, #4]
   10832:	89c0      	ldrh	r0, [r0, #14]
   10834:	8108      	strh	r0, [r1, #8]
   10836:	4770      	bx	lr
   10838:	b510      	push	{r4, lr}
   1083a:	2801      	cmp	r0, #1
   1083c:	d006      	beq.n	1084c <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x28>
   1083e:	2802      	cmp	r0, #2
   10840:	d004      	beq.n	1084c <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0x28>
   10842:	f240 21d7 	movw	r1, #727	; 0x2d7
   10846:	2006      	movs	r0, #6
   10848:	f7f0 fc8c 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1084c:	bd10      	pop	{r4, pc}

0001084e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   1084e:	b510      	push	{r4, lr}
   10850:	f7f7 fcc6 	bl	81e0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   10854:	f000 f81d 	bl	10892 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   10858:	f7f7 f9a2 	bl	7ba0 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   1085c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10860:	f7f7 ba9c 	b.w	7d9c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00010864 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   10864:	b510      	push	{r4, lr}
   10866:	24c8      	movs	r4, #200	; 0xc8
   10868:	1e64      	subs	r4, r4, #1
   1086a:	b2e4      	uxtb	r4, r4
   1086c:	f7f7 f9b6 	bl	7bdc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   10870:	2802      	cmp	r0, #2
   10872:	d003      	beq.n	1087c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   10874:	2801      	cmp	r0, #1
   10876:	d000      	beq.n	1087a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   10878:	2000      	movs	r0, #0
   1087a:	bd10      	pop	{r4, pc}
   1087c:	2c00      	cmp	r4, #0
   1087e:	d1f3      	bne.n	10868 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   10880:	21ed      	movs	r1, #237	; 0xed
   10882:	203b      	movs	r0, #59	; 0x3b
   10884:	f7f0 fc6e 	bl	1164 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10888:	5840      	ldr	r0, [r0, r1]
   1088a:	2800      	cmp	r0, #0
   1088c:	d000      	beq.n	10890 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   1088e:	2001      	movs	r0, #1
   10890:	4770      	bx	lr

00010892 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   10892:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   10896:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1089a:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   1089e:	f3bf 8f4f 	dsb	sy
   108a2:	f3bf 8f6f 	isb	sy
   108a6:	f7f7 bb13 	b.w	7ed0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   108aa:	2800      	cmp	r0, #0
   108ac:	db09      	blt.n	108c2 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   108ae:	f000 021f 	and.w	r2, r0, #31
   108b2:	2101      	movs	r1, #1
   108b4:	4091      	lsls	r1, r2
   108b6:	0940      	lsrs	r0, r0, #5
   108b8:	0080      	lsls	r0, r0, #2
   108ba:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   108be:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   108c2:	4770      	bx	lr
   108c4:	2800      	cmp	r0, #0
   108c6:	db0d      	blt.n	108e4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   108c8:	f000 021f 	and.w	r2, r0, #31
   108cc:	2101      	movs	r1, #1
   108ce:	4091      	lsls	r1, r2
   108d0:	0940      	lsrs	r0, r0, #5
   108d2:	0080      	lsls	r0, r0, #2
   108d4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   108d8:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   108dc:	f3bf 8f4f 	dsb	sy
   108e0:	f3bf 8f6f 	isb	sy
   108e4:	4770      	bx	lr
   108e6:	5840      	ldr	r0, [r0, r1]
   108e8:	2800      	cmp	r0, #0
   108ea:	d000      	beq.n	108ee <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   108ec:	2001      	movs	r0, #1
   108ee:	4770      	bx	lr
   108f0:	5840      	ldr	r0, [r0, r1]
   108f2:	2800      	cmp	r0, #0
   108f4:	d000      	beq.n	108f8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   108f6:	2001      	movs	r0, #1
   108f8:	4770      	bx	lr

000108fa <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   108fa:	b510      	push	{r4, lr}
   108fc:	4604      	mov	r4, r0
   108fe:	4608      	mov	r0, r1
   10900:	f7f7 fd9a 	bl	8438 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10904:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10908:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   1090c:	fbb0 f0f1 	udiv	r0, r0, r1
   10910:	1a20      	subs	r0, r4, r0
   10912:	1e80      	subs	r0, r0, #2
   10914:	bd10      	pop	{r4, pc}

00010916 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   10916:	b510      	push	{r4, lr}
   10918:	4604      	mov	r4, r0
   1091a:	4608      	mov	r0, r1
   1091c:	f7f7 fd8c 	bl	8438 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10920:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10924:	fbb0 f0f1 	udiv	r0, r0, r1
   10928:	1a20      	subs	r0, r4, r0
   1092a:	bd10      	pop	{r4, pc}
   1092c:	2804      	cmp	r0, #4
   1092e:	d202      	bcs.n	10936 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x20>
   10930:	f04f 0028 	mov.w	r0, #40	; 0x28
   10934:	4770      	bx	lr
   10936:	d102      	bne.n	1093e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x28>
   10938:	f04f 0010 	mov.w	r0, #16
   1093c:	4770      	bx	lr
   1093e:	f04f 0000 	mov.w	r0, #0
   10942:	4770      	bx	lr
   10944:	2100      	movs	r1, #0
   10946:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   1094a:	f800 1f24 	strb.w	r1, [r0, #36]!
   1094e:	7041      	strb	r1, [r0, #1]
   10950:	4770      	bx	lr

00010952 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
   10952:	b570      	push	{r4, r5, r6, lr}
   10954:	f7f8 fad0 	bl	8ef8 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   10958:	4605      	mov	r5, r0
   1095a:	2400      	movs	r4, #0
   1095c:	e006      	b.n	1096c <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
   1095e:	4620      	mov	r0, r4
   10960:	f7f8 fad0 	bl	8f04 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   10964:	f7ff ffee 	bl	10944 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
   10968:	1c64      	adds	r4, r4, #1
   1096a:	b2e4      	uxtb	r4, r4
   1096c:	42ac      	cmp	r4, r5
   1096e:	d3f6      	bcc.n	1095e <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
   10970:	bd70      	pop	{r4, r5, r6, pc}

00010972 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
   10972:	f7fa bf27 	b.w	b7c4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

00010976 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
   10976:	b510      	push	{r4, lr}
   10978:	2000      	movs	r0, #0
   1097a:	f7fb fa7f 	bl	be7c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
   1097e:	6800      	ldr	r0, [r0, #0]
   10980:	2800      	cmp	r0, #0
   10982:	bf18      	it	ne
   10984:	2001      	movne	r0, #1
   10986:	bd10      	pop	{r4, pc}

00010988 <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
   10988:	b510      	push	{r4, lr}
   1098a:	f7fb faef 	bl	bf6c <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
   1098e:	f7fa fdd3 	bl	b538 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
   10992:	f000 f804 	bl	1099e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   10996:	b280      	uxth	r0, r0
   10998:	bd10      	pop	{r4, pc}

0001099a <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
   1099a:	f7fb ba49 	b.w	be30 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>

0001099e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
   1099e:	0a41      	lsrs	r1, r0, #9
   109a0:	f643 5209 	movw	r2, #15625	; 0x3d09
   109a4:	4351      	muls	r1, r2
   109a6:	f3c0 0008 	ubfx	r0, r0, #0, #9
   109aa:	fb10 f002 	smulbb	r0, r0, r2
   109ae:	f500 7080 	add.w	r0, r0, #256	; 0x100
   109b2:	eb01 2050 	add.w	r0, r1, r0, lsr #9
   109b6:	4770      	bx	lr
   109b8:	2800      	cmp	r0, #0
   109ba:	db09      	blt.n	109d0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
   109bc:	f000 021f 	and.w	r2, r0, #31
   109c0:	2101      	movs	r1, #1
   109c2:	4091      	lsls	r1, r2
   109c4:	0940      	lsrs	r0, r0, #5
   109c6:	0080      	lsls	r0, r0, #2
   109c8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   109cc:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   109d0:	4770      	bx	lr
   109d2:	2800      	cmp	r0, #0
   109d4:	db0d      	blt.n	109f2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
   109d6:	f000 021f 	and.w	r2, r0, #31
   109da:	2101      	movs	r1, #1
   109dc:	4091      	lsls	r1, r2
   109de:	0940      	lsrs	r0, r0, #5
   109e0:	0080      	lsls	r0, r0, #2
   109e2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   109e6:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   109ea:	f3bf 8f4f 	dsb	sy
   109ee:	f3bf 8f6f 	isb	sy
   109f2:	4770      	bx	lr
   109f4:	5840      	ldr	r0, [r0, r1]
   109f6:	2800      	cmp	r0, #0
   109f8:	d000      	beq.n	109fc <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x5e>
   109fa:	2001      	movs	r0, #1
   109fc:	4770      	bx	lr
   109fe:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
   10a02:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
   10a06:	f002 0201 	and.w	r2, r2, #1
   10a0a:	03c0      	lsls	r0, r0, #15
   10a0c:	d503      	bpl.n	10a16 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   10a0e:	428a      	cmp	r2, r1
   10a10:	d101      	bne.n	10a16 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   10a12:	2001      	movs	r0, #1
   10a14:	4770      	bx	lr
   10a16:	2000      	movs	r0, #0
   10a18:	4770      	bx	lr

00010a1a <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
   10a1a:	b510      	push	{r4, lr}
   10a1c:	2101      	movs	r1, #1
   10a1e:	0788      	lsls	r0, r1, #30
   10a20:	f7fb fde4 	bl	c5ec <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   10a24:	2800      	cmp	r0, #0
   10a26:	d000      	beq.n	10a2a <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
   10a28:	2001      	movs	r0, #1
   10a2a:	bd10      	pop	{r4, pc}

00010a2c <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
   10a2c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10a30:	2101      	movs	r1, #1
   10a32:	6001      	str	r1, [r0, #0]
   10a34:	4770      	bx	lr

00010a36 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
   10a36:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   10a3a:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
   10a3e:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
   10a42:	f002 0203 	and.w	r2, r2, #3
   10a46:	03c9      	lsls	r1, r1, #15
   10a48:	d503      	bpl.n	10a52 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   10a4a:	4282      	cmp	r2, r0
   10a4c:	d101      	bne.n	10a52 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   10a4e:	2001      	movs	r0, #1
   10a50:	4770      	bx	lr
   10a52:	2000      	movs	r0, #0
   10a54:	4770      	bx	lr

00010a56 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
   10a56:	b510      	push	{r4, lr}
   10a58:	2100      	movs	r1, #0
   10a5a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10a5e:	f7fb fdc5 	bl	c5ec <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   10a62:	2800      	cmp	r0, #0
   10a64:	d000      	beq.n	10a68 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
   10a66:	2001      	movs	r0, #1
   10a68:	bd10      	pop	{r4, pc}
   10a6a:	2800      	cmp	r0, #0
   10a6c:	db09      	blt.n	10a82 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
   10a6e:	f000 021f 	and.w	r2, r0, #31
   10a72:	2101      	movs	r1, #1
   10a74:	4091      	lsls	r1, r2
   10a76:	0940      	lsrs	r0, r0, #5
   10a78:	0080      	lsls	r0, r0, #2
   10a7a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10a7e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10a82:	4770      	bx	lr
   10a84:	2800      	cmp	r0, #0
   10a86:	db0d      	blt.n	10aa4 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
   10a88:	f000 021f 	and.w	r2, r0, #31
   10a8c:	2101      	movs	r1, #1
   10a8e:	4091      	lsls	r1, r2
   10a90:	0940      	lsrs	r0, r0, #5
   10a92:	0080      	lsls	r0, r0, #2
   10a94:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10a98:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10a9c:	f3bf 8f4f 	dsb	sy
   10aa0:	f3bf 8f6f 	isb	sy
   10aa4:	4770      	bx	lr
   10aa6:	1000      	.short	0x1000
   10aa8:	00fa0002 	.word	0x00fa0002
   10aac:	e8ff0000 	.word	0xe8ff0000
   10ab0:	95775fae 	.word	0x95775fae
   10ab4:	6227c87c 	.word	0x6227c87c
   10ab8:	eae61814 	.word	0xeae61814
   10abc:	3992c65d 	.word	0x3992c65d
   10ac0:	3a72      	.short	0x3a72
   10ac2:	2800      	cmp	r0, #0
   10ac4:	db09      	blt.n	10ada <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
   10ac6:	f000 021f 	and.w	r2, r0, #31
   10aca:	2101      	movs	r1, #1
   10acc:	4091      	lsls	r1, r2
   10ace:	0940      	lsrs	r0, r0, #5
   10ad0:	0080      	lsls	r0, r0, #2
   10ad2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10ad6:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10ada:	4770      	bx	lr

00010adc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
   10adc:	f3ef 8110 	mrs	r1, PRIMASK
   10ae0:	b672      	cpsid	i
   10ae2:	7802      	ldrb	r2, [r0, #0]
   10ae4:	2a01      	cmp	r2, #1
   10ae6:	d001      	beq.n	10aec <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
   10ae8:	2201      	movs	r2, #1
   10aea:	e000      	b.n	10aee <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
   10aec:	2200      	movs	r2, #0
   10aee:	2301      	movs	r3, #1
   10af0:	7003      	strb	r3, [r0, #0]
   10af2:	b901      	cbnz	r1, 10af6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
   10af4:	b662      	cpsie	i
   10af6:	b10a      	cbz	r2, 10afc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
   10af8:	2000      	movs	r0, #0
   10afa:	4770      	bx	lr
   10afc:	f06f 0022 	mvn.w	r0, #34	; 0x22
   10b00:	4770      	bx	lr

00010b02 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
   10b02:	2100      	movs	r1, #0
   10b04:	7001      	strb	r1, [r0, #0]
   10b06:	4608      	mov	r0, r1
   10b08:	4770      	bx	lr

00010b0a <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
   10b0a:	f3ef 8110 	mrs	r1, PRIMASK
   10b0e:	b672      	cpsid	i
   10b10:	2200      	movs	r2, #0
   10b12:	7002      	strb	r2, [r0, #0]
   10b14:	b901      	cbnz	r1, 10b18 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
   10b16:	b662      	cpsie	i
   10b18:	2000      	movs	r0, #0
   10b1a:	4770      	bx	lr

00010b1c <mpsl_low_priority_process>:
   10b1c:	f7fb beba 	b.w	c894 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

00010b20 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
   10b20:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10b24:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10b28:	280f      	cmp	r0, #15
   10b2a:	d001      	beq.n	10b30 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
   10b2c:	2000      	movs	r0, #0
   10b2e:	4770      	bx	lr
   10b30:	2001      	movs	r0, #1
   10b32:	4770      	bx	lr

00010b34 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
   10b34:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10b38:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10b3c:	280a      	cmp	r0, #10
   10b3e:	d001      	beq.n	10b44 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
   10b40:	2000      	movs	r0, #0
   10b42:	4770      	bx	lr
   10b44:	2001      	movs	r0, #1
   10b46:	4770      	bx	lr

00010b48 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
   10b48:	b500      	push	{lr}
   10b4a:	f7ff fff3 	bl	10b34 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   10b4e:	b120      	cbz	r0, 10b5a <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
   10b50:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10b54:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10b58:	b108      	cbz	r0, 10b5e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
   10b5a:	2000      	movs	r0, #0
   10b5c:	bd00      	pop	{pc}
   10b5e:	2001      	movs	r0, #1
   10b60:	bd00      	pop	{pc}

00010b62 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
   10b62:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10b66:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10b6a:	280e      	cmp	r0, #14
   10b6c:	d001      	beq.n	10b72 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
   10b6e:	2000      	movs	r0, #0
   10b70:	4770      	bx	lr
   10b72:	2001      	movs	r0, #1
   10b74:	4770      	bx	lr

00010b76 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
   10b76:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10b7a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10b7e:	2810      	cmp	r0, #16
   10b80:	d001      	beq.n	10b86 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
   10b82:	2000      	movs	r0, #0
   10b84:	4770      	bx	lr
   10b86:	2001      	movs	r0, #1
   10b88:	4770      	bx	lr

00010b8a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
   10b8a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10b8e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10b92:	2806      	cmp	r0, #6
   10b94:	d003      	beq.n	10b9e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10b96:	1c40      	adds	r0, r0, #1
   10b98:	d001      	beq.n	10b9e <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10b9a:	2000      	movs	r0, #0
   10b9c:	4770      	bx	lr
   10b9e:	2001      	movs	r0, #1
   10ba0:	4770      	bx	lr

00010ba2 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
   10ba2:	b500      	push	{lr}
   10ba4:	f7ff fff1 	bl	10b8a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10ba8:	b148      	cbz	r0, 10bbe <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10baa:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10bae:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10bb2:	2806      	cmp	r0, #6
   10bb4:	d303      	bcc.n	10bbe <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10bb6:	1c40      	adds	r0, r0, #1
   10bb8:	d001      	beq.n	10bbe <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10bba:	2001      	movs	r0, #1
   10bbc:	bd00      	pop	{pc}
   10bbe:	2000      	movs	r0, #0
   10bc0:	bd00      	pop	{pc}

00010bc2 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
   10bc2:	b500      	push	{lr}
   10bc4:	f7ff ffe1 	bl	10b8a <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10bc8:	b138      	cbz	r0, 10bda <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
   10bca:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10bce:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10bd2:	2806      	cmp	r0, #6
   10bd4:	d303      	bcc.n	10bde <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10bd6:	1c40      	adds	r0, r0, #1
   10bd8:	d001      	beq.n	10bde <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10bda:	2000      	movs	r0, #0
   10bdc:	bd00      	pop	{pc}
   10bde:	2001      	movs	r0, #1
   10be0:	bd00      	pop	{pc}

00010be2 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
   10be2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10be6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10bea:	280d      	cmp	r0, #13
   10bec:	d001      	beq.n	10bf2 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
   10bee:	2000      	movs	r0, #0
   10bf0:	4770      	bx	lr
   10bf2:	2001      	movs	r0, #1
   10bf4:	4770      	bx	lr

00010bf6 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
   10bf6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10bfa:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10bfe:	2808      	cmp	r0, #8
   10c00:	d001      	beq.n	10c06 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
   10c02:	2000      	movs	r0, #0
   10c04:	4770      	bx	lr
   10c06:	2001      	movs	r0, #1
   10c08:	4770      	bx	lr

00010c0a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
   10c0a:	f7fb be7d 	b.w	c908 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00010c0e <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>:
   10c0e:	f7fb be7b 	b.w	c908 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00010c12 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>:
   10c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10c16:	428a      	cmp	r2, r1
   10c18:	d803      	bhi.n	10c22 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x10>
   10c1a:	2179      	movs	r1, #121	; 0x79
   10c1c:	2096      	movs	r0, #150	; 0x96
   10c1e:	f7fb fd3b 	bl	c698 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   10c22:	fab2 f382 	clz	r3, r2
   10c26:	b143      	cbz	r3, 10c3a <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x28>
   10c28:	4099      	lsls	r1, r3
   10c2a:	f1c3 0c20 	rsb	ip, r3, #32
   10c2e:	fa20 fc0c 	lsr.w	ip, r0, ip
   10c32:	4098      	lsls	r0, r3
   10c34:	ea41 010c 	orr.w	r1, r1, ip
   10c38:	409a      	lsls	r2, r3
   10c3a:	0c13      	lsrs	r3, r2, #16
   10c3c:	fbb1 f5f3 	udiv	r5, r1, r3
   10c40:	ea4f 4c10 	mov.w	ip, r0, lsr #16
   10c44:	b287      	uxth	r7, r0
   10c46:	fbb1 f0f3 	udiv	r0, r1, r3
   10c4a:	fb03 1615 	mls	r6, r3, r5, r1
   10c4e:	b294      	uxth	r4, r2
   10c50:	fb00 f504 	mul.w	r5, r0, r4
   10c54:	eb0c 4606 	add.w	r6, ip, r6, lsl #16
   10c58:	42b5      	cmp	r5, r6
   10c5a:	d905      	bls.n	10c68 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x56>
   10c5c:	1bad      	subs	r5, r5, r6
   10c5e:	4295      	cmp	r5, r2
   10c60:	bf94      	ite	ls
   10c62:	2501      	movls	r5, #1
   10c64:	2502      	movhi	r5, #2
   10c66:	1b40      	subs	r0, r0, r5
   10c68:	0409      	lsls	r1, r1, #16
   10c6a:	0405      	lsls	r5, r0, #16
   10c6c:	eb11 010c 	adds.w	r1, r1, ip
   10c70:	fba0 0c02 	umull	r0, ip, r0, r2
   10c74:	1a09      	subs	r1, r1, r0
   10c76:	fbb1 f0f3 	udiv	r0, r1, r3
   10c7a:	fbb1 fcf3 	udiv	ip, r1, r3
   10c7e:	fb03 131c 	mls	r3, r3, ip, r1
   10c82:	fb00 f104 	mul.w	r1, r0, r4
   10c86:	eb07 4303 	add.w	r3, r7, r3, lsl #16
   10c8a:	4299      	cmp	r1, r3
   10c8c:	d905      	bls.n	10c9a <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x88>
   10c8e:	1ac9      	subs	r1, r1, r3
   10c90:	4291      	cmp	r1, r2
   10c92:	bf94      	ite	ls
   10c94:	2101      	movls	r1, #1
   10c96:	2102      	movhi	r1, #2
   10c98:	1a40      	subs	r0, r0, r1
   10c9a:	4328      	orrs	r0, r5
   10c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010ca0 <sym_ZY67JFDYC72ZRZASFF2HOA7TV55LM74BXABVWRI>:
   10ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10ca4:	461e      	mov	r6, r3
   10ca6:	4615      	mov	r5, r2
   10ca8:	4604      	mov	r4, r0
   10caa:	9f06      	ldr	r7, [sp, #24]
   10cac:	f7ff ffb1 	bl	10c12 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
   10cb0:	6030      	str	r0, [r6, #0]
   10cb2:	fba0 0105 	umull	r0, r1, r0, r5
   10cb6:	1a20      	subs	r0, r4, r0
   10cb8:	6038      	str	r0, [r7, #0]
   10cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010cbe <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
   10cbe:	b4f0      	push	{r4, r5, r6, r7}
   10cc0:	ea80 0c01 	eor.w	ip, r0, r1
   10cc4:	4603      	mov	r3, r0
   10cc6:	f01c 0f03 	tst.w	ip, #3
   10cca:	d13c      	bne.n	10d46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10ccc:	f013 0f03 	tst.w	r3, #3
   10cd0:	d00b      	beq.n	10cea <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
   10cd2:	2a00      	cmp	r2, #0
   10cd4:	bf04      	itt	eq
   10cd6:	bcf0      	popeq	{r4, r5, r6, r7}
   10cd8:	4770      	bxeq	lr
   10cda:	f811 cb01 	ldrb.w	ip, [r1], #1
   10cde:	f803 cb01 	strb.w	ip, [r3], #1
   10ce2:	1e52      	subs	r2, r2, #1
   10ce4:	f013 0f03 	tst.w	r3, #3
   10ce8:	d1f3      	bne.n	10cd2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
   10cea:	2a03      	cmp	r2, #3
   10cec:	d94f      	bls.n	10d8e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   10cee:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10cf2:	d24c      	bcs.n	10d8e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   10cf4:	f1c2 0c00 	rsb	ip, r2, #0
   10cf8:	ea4f 74ec 	mov.w	r4, ip, asr #31
   10cfc:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
   10d00:	ea4f 0cac 	mov.w	ip, ip, asr #2
   10d04:	f1cc 0c00 	rsb	ip, ip, #0
   10d08:	f1bc 0f00 	cmp.w	ip, #0
   10d0c:	dd1b      	ble.n	10d46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10d0e:	1f0d      	subs	r5, r1, #4
   10d10:	1f1c      	subs	r4, r3, #4
   10d12:	f01c 0f01 	tst.w	ip, #1
   10d16:	d003      	beq.n	10d20 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
   10d18:	f855 6f04 	ldr.w	r6, [r5, #4]!
   10d1c:	f844 6f04 	str.w	r6, [r4, #4]!
   10d20:	ea5f 066c 	movs.w	r6, ip, asr #1
   10d24:	d007      	beq.n	10d36 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
   10d26:	686f      	ldr	r7, [r5, #4]
   10d28:	6067      	str	r7, [r4, #4]
   10d2a:	f855 7f08 	ldr.w	r7, [r5, #8]!
   10d2e:	f844 7f08 	str.w	r7, [r4, #8]!
   10d32:	1e76      	subs	r6, r6, #1
   10d34:	d1f7      	bne.n	10d26 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
   10d36:	eb01 018c 	add.w	r1, r1, ip, lsl #2
   10d3a:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   10d3e:	f1cc 0c00 	rsb	ip, ip, #0
   10d42:	eb02 028c 	add.w	r2, r2, ip, lsl #2
   10d46:	2a00      	cmp	r2, #0
   10d48:	bf04      	itt	eq
   10d4a:	bcf0      	popeq	{r4, r5, r6, r7}
   10d4c:	4770      	bxeq	lr
   10d4e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10d52:	d226      	bcs.n	10da2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   10d54:	2a00      	cmp	r2, #0
   10d56:	bfdc      	itt	le
   10d58:	bcf0      	pople	{r4, r5, r6, r7}
   10d5a:	4770      	bxle	lr
   10d5c:	1e49      	subs	r1, r1, #1
   10d5e:	1e5b      	subs	r3, r3, #1
   10d60:	f012 0f01 	tst.w	r2, #1
   10d64:	d003      	beq.n	10d6e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
   10d66:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   10d6a:	f803 cf01 	strb.w	ip, [r3, #1]!
   10d6e:	1052      	asrs	r2, r2, #1
   10d70:	bf04      	itt	eq
   10d72:	bcf0      	popeq	{r4, r5, r6, r7}
   10d74:	4770      	bxeq	lr
   10d76:	f891 c001 	ldrb.w	ip, [r1, #1]
   10d7a:	f883 c001 	strb.w	ip, [r3, #1]
   10d7e:	f811 cf02 	ldrb.w	ip, [r1, #2]!
   10d82:	f803 cf02 	strb.w	ip, [r3, #2]!
   10d86:	1e52      	subs	r2, r2, #1
   10d88:	d1f5      	bne.n	10d76 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
   10d8a:	bcf0      	pop	{r4, r5, r6, r7}
   10d8c:	4770      	bx	lr
   10d8e:	2a04      	cmp	r2, #4
   10d90:	d3d9      	bcc.n	10d46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10d92:	f851 cb04 	ldr.w	ip, [r1], #4
   10d96:	1f12      	subs	r2, r2, #4
   10d98:	f843 cb04 	str.w	ip, [r3], #4
   10d9c:	2a04      	cmp	r2, #4
   10d9e:	d2f8      	bcs.n	10d92 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
   10da0:	e7d1      	b.n	10d46 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10da2:	f811 cb01 	ldrb.w	ip, [r1], #1
   10da6:	f803 cb01 	strb.w	ip, [r3], #1
   10daa:	1e52      	subs	r2, r2, #1
   10dac:	d1f9      	bne.n	10da2 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   10dae:	bcf0      	pop	{r4, r5, r6, r7}
   10db0:	4770      	bx	lr

00010db2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
   10db2:	b470      	push	{r4, r5, r6}
   10db4:	4603      	mov	r3, r0
   10db6:	f001 0cff 	and.w	ip, r1, #255	; 0xff
   10dba:	f010 0f03 	tst.w	r0, #3
   10dbe:	d009      	beq.n	10dd4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
   10dc0:	2a00      	cmp	r2, #0
   10dc2:	bf04      	itt	eq
   10dc4:	bc70      	popeq	{r4, r5, r6}
   10dc6:	4770      	bxeq	lr
   10dc8:	f803 cb01 	strb.w	ip, [r3], #1
   10dcc:	1e52      	subs	r2, r2, #1
   10dce:	f013 0f03 	tst.w	r3, #3
   10dd2:	d1f5      	bne.n	10dc0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
   10dd4:	b2c9      	uxtb	r1, r1
   10dd6:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   10dda:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
   10dde:	2a03      	cmp	r2, #3
   10de0:	d939      	bls.n	10e56 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   10de2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10de6:	d236      	bcs.n	10e56 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   10de8:	4251      	negs	r1, r2
   10dea:	17cc      	asrs	r4, r1, #31
   10dec:	eb01 7194 	add.w	r1, r1, r4, lsr #30
   10df0:	1089      	asrs	r1, r1, #2
   10df2:	424e      	negs	r6, r1
   10df4:	2e00      	cmp	r6, #0
   10df6:	dd11      	ble.n	10e1c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10df8:	1f19      	subs	r1, r3, #4
   10dfa:	f016 0f01 	tst.w	r6, #1
   10dfe:	bf18      	it	ne
   10e00:	f841 5f04 	strne.w	r5, [r1, #4]!
   10e04:	1074      	asrs	r4, r6, #1
   10e06:	d004      	beq.n	10e12 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
   10e08:	604d      	str	r5, [r1, #4]
   10e0a:	f841 5f08 	str.w	r5, [r1, #8]!
   10e0e:	1e64      	subs	r4, r4, #1
   10e10:	d1fa      	bne.n	10e08 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
   10e12:	4271      	negs	r1, r6
   10e14:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   10e18:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   10e1c:	2a00      	cmp	r2, #0
   10e1e:	bf04      	itt	eq
   10e20:	bc70      	popeq	{r4, r5, r6}
   10e22:	4770      	bxeq	lr
   10e24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10e28:	d21d      	bcs.n	10e66 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   10e2a:	2a00      	cmp	r2, #0
   10e2c:	bfdc      	itt	le
   10e2e:	bc70      	pople	{r4, r5, r6}
   10e30:	4770      	bxle	lr
   10e32:	1e59      	subs	r1, r3, #1
   10e34:	f012 0f01 	tst.w	r2, #1
   10e38:	bf18      	it	ne
   10e3a:	f801 cf01 	strbne.w	ip, [r1, #1]!
   10e3e:	1052      	asrs	r2, r2, #1
   10e40:	bf04      	itt	eq
   10e42:	bc70      	popeq	{r4, r5, r6}
   10e44:	4770      	bxeq	lr
   10e46:	f881 c001 	strb.w	ip, [r1, #1]
   10e4a:	f801 cf02 	strb.w	ip, [r1, #2]!
   10e4e:	1e52      	subs	r2, r2, #1
   10e50:	d1f9      	bne.n	10e46 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
   10e52:	bc70      	pop	{r4, r5, r6}
   10e54:	4770      	bx	lr
   10e56:	2a04      	cmp	r2, #4
   10e58:	d3e0      	bcc.n	10e1c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10e5a:	1f12      	subs	r2, r2, #4
   10e5c:	f843 5b04 	str.w	r5, [r3], #4
   10e60:	2a04      	cmp	r2, #4
   10e62:	d2fa      	bcs.n	10e5a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
   10e64:	e7da      	b.n	10e1c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10e66:	f803 cb01 	strb.w	ip, [r3], #1
   10e6a:	1e52      	subs	r2, r2, #1
   10e6c:	d1fb      	bne.n	10e66 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   10e6e:	bc70      	pop	{r4, r5, r6}
   10e70:	4770      	bx	lr
   10e72:	f04f 30ff 	mov.w	r0, #4294967295
   10e76:	4770      	bx	lr
   10e78:	2000      	movs	r0, #0
   10e7a:	4770      	bx	lr
   10e7c:	2000      	movs	r0, #0
   10e7e:	4770      	bx	lr
   10e80:	f04f 30ff 	mov.w	r0, #4294967295
   10e84:	4770      	bx	lr
   10e86:	4770      	bx	lr
   10e88:	4770      	bx	lr
   10e8a:	2000      	movs	r0, #0
   10e8c:	4770      	bx	lr
   10e8e:	2100      	movs	r1, #0
   10e90:	7001      	strb	r1, [r0, #0]
   10e92:	4770      	bx	lr
   10e94:	f04f 30ff 	mov.w	r0, #4294967295
   10e98:	4770      	bx	lr
   10e9a:	f04f 30ff 	mov.w	r0, #4294967295
   10e9e:	4770      	bx	lr
   10ea0:	2100      	movs	r1, #0
   10ea2:	7001      	strb	r1, [r0, #0]
   10ea4:	4770      	bx	lr
   10ea6:	f04f 30ff 	mov.w	r0, #4294967295
   10eaa:	4770      	bx	lr
   10eac:	f04f 30ff 	mov.w	r0, #4294967295
   10eb0:	4770      	bx	lr
   10eb2:	7800      	ldrb	r0, [r0, #0]
   10eb4:	2800      	cmp	r0, #0
   10eb6:	d001      	beq.n	10ebc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
   10eb8:	f06f 0015 	mvn.w	r0, #21
   10ebc:	4770      	bx	lr
   10ebe:	2000      	movs	r0, #0
   10ec0:	4770      	bx	lr
   10ec2:	2200      	movs	r2, #0
   10ec4:	f000 b802 	b.w	10ecc <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

00010ec8 <mpsl_fem_init>:
   10ec8:	f7f7 bf84 	b.w	8dd4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

00010ecc <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
   10ecc:	b570      	push	{r4, r5, r6, lr}
   10ece:	4614      	mov	r4, r2
   10ed0:	460d      	mov	r5, r1
   10ed2:	1b00      	subs	r0, r0, r4
   10ed4:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   10ed8:	4288      	cmp	r0, r1
   10eda:	da01      	bge.n	10ee0 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
   10edc:	4608      	mov	r0, r1
   10ede:	e002      	b.n	10ee6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   10ee0:	287f      	cmp	r0, #127	; 0x7f
   10ee2:	dd00      	ble.n	10ee6 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   10ee4:	207f      	movs	r0, #127	; 0x7f
   10ee6:	4619      	mov	r1, r3
   10ee8:	b240      	sxtb	r0, r0
   10eea:	f7f7 ffa7 	bl	8e3c <mpsl_tx_power_radio_supported_power_adjust>
   10eee:	7028      	strb	r0, [r5, #0]
   10ef0:	706c      	strb	r4, [r5, #1]
   10ef2:	2100      	movs	r1, #0
   10ef4:	4420      	add	r0, r4
   10ef6:	70a9      	strb	r1, [r5, #2]
   10ef8:	b240      	sxtb	r0, r0
   10efa:	bd70      	pop	{r4, r5, r6, pc}
   10efc:	1702080c 	.word	0x1702080c
   10f00:	0201010d 	.word	0x0201010d
   10f04:	01010909 	.word	0x01010909
   10f08:	18090206 	.word	0x18090206
   10f0c:	01010318 	.word	0x01010318
   10f10:	03030909 	.word	0x03030909
   10f14:	01020305 	.word	0x01020305
   10f18:	24020223 	.word	0x24020223
   10f1c:	04041009 	.word	0x04041009
   10f20:	0b0b0505 	.word	0x0b0b0505
   10f24:	0b04      	.short	0x0b04
   10f26:	2b          	.byte	0x2b
   10f27:	d8          	.byte	0xd8
   10f28:	f8f4f0ec 	.word	0xf8f4f0ec
   10f2c:	030200fc 	.word	0x030200fc
   10f30:	07060504 	.word	0x07060504
   10f34:	00000008 	.word	0x00000008
	...
   10f48:	01010100 	.word	0x01010100
   10f4c:	02020201 	.word	0x02020201
   10f50:	03030302 	.word	0x03030302
   10f54:	04040403 	.word	0x04040403
   10f58:	05050504 	.word	0x05050504
   10f5c:	07060605 	.word	0x07060605
   10f60:	0b0a0908 	.word	0x0b0a0908
   10f64:	00000d0c 	.word	0x00000d0c
	...
   10f78:	01010000 	.word	0x01010000
   10f7c:	02020101 	.word	0x02020101
   10f80:	03030202 	.word	0x03030202
   10f84:	04040303 	.word	0x04040303
   10f88:	05050404 	.word	0x05050404
   10f8c:	06060505 	.word	0x06060505
   10f90:	00090806 	.word	0x00090806
   10f94:	00000000 	.word	0x00000000

00010f98 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   10f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f9c:	b09f      	sub	sp, #124	; 0x7c
   10f9e:	4682      	mov	sl, r0
   10fa0:	9103      	str	r1, [sp, #12]
   10fa2:	4616      	mov	r6, r2
   10fa4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   10fa6:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   10fa8:	7830      	ldrb	r0, [r6, #0]
   10faa:	b910      	cbnz	r0, 10fb2 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   10fac:	4628      	mov	r0, r5
   10fae:	f000 bd85 	b.w	11abc <z_cbvprintf_impl+0xb24>
			OUTC(*fp++);
   10fb2:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
   10fb4:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   10fb6:	9306      	str	r3, [sp, #24]
		if (*fp != '%') {
   10fb8:	d006      	beq.n	10fc8 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
   10fba:	9903      	ldr	r1, [sp, #12]
			OUTC('%');
   10fbc:	47d0      	blx	sl
   10fbe:	2800      	cmp	r0, #0
   10fc0:	f2c0 857c 	blt.w	11abc <z_cbvprintf_impl+0xb24>
   10fc4:	3501      	adds	r5, #1
		if (bps == NULL) {
   10fc6:	e227      	b.n	11418 <z_cbvprintf_impl+0x480>
		} state = {
   10fc8:	2218      	movs	r2, #24
   10fca:	2100      	movs	r1, #0
   10fcc:	a810      	add	r0, sp, #64	; 0x40
   10fce:	f016 fd38 	bl	27a42 <memset>
	if (*sp == '%') {
   10fd2:	7873      	ldrb	r3, [r6, #1]
   10fd4:	2b25      	cmp	r3, #37	; 0x25
   10fd6:	d07d      	beq.n	110d4 <z_cbvprintf_impl+0x13c>
   10fd8:	2300      	movs	r3, #0
   10fda:	1c70      	adds	r0, r6, #1
   10fdc:	4698      	mov	r8, r3
   10fde:	469e      	mov	lr, r3
   10fe0:	469c      	mov	ip, r3
   10fe2:	461f      	mov	r7, r3
   10fe4:	4601      	mov	r1, r0
		switch (*sp) {
   10fe6:	f810 2b01 	ldrb.w	r2, [r0], #1
   10fea:	2a2b      	cmp	r2, #43	; 0x2b
   10fec:	f000 80a1 	beq.w	11132 <z_cbvprintf_impl+0x19a>
   10ff0:	f200 8098 	bhi.w	11124 <z_cbvprintf_impl+0x18c>
   10ff4:	2a20      	cmp	r2, #32
   10ff6:	f000 809f 	beq.w	11138 <z_cbvprintf_impl+0x1a0>
   10ffa:	2a23      	cmp	r2, #35	; 0x23
   10ffc:	f000 809f 	beq.w	1113e <z_cbvprintf_impl+0x1a6>
   11000:	b12b      	cbz	r3, 1100e <z_cbvprintf_impl+0x76>
   11002:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   11006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1100a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   1100e:	f1b8 0f00 	cmp.w	r8, #0
   11012:	d005      	beq.n	11020 <z_cbvprintf_impl+0x88>
   11014:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   11018:	f043 0320 	orr.w	r3, r3, #32
   1101c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   11020:	f1be 0f00 	cmp.w	lr, #0
   11024:	d005      	beq.n	11032 <z_cbvprintf_impl+0x9a>
   11026:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1102a:	f043 0310 	orr.w	r3, r3, #16
   1102e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   11032:	f1bc 0f00 	cmp.w	ip, #0
   11036:	d005      	beq.n	11044 <z_cbvprintf_impl+0xac>
   11038:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1103c:	f043 0308 	orr.w	r3, r3, #8
   11040:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   11044:	b12f      	cbz	r7, 11052 <z_cbvprintf_impl+0xba>
   11046:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1104a:	f043 0304 	orr.w	r3, r3, #4
   1104e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
   11052:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   11056:	f003 0044 	and.w	r0, r3, #68	; 0x44
   1105a:	2844      	cmp	r0, #68	; 0x44
   1105c:	d103      	bne.n	11066 <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
   1105e:	f36f 1386 	bfc	r3, #6, #1
   11062:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
   11066:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
   1106a:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   1106c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11070:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
   11074:	d17f      	bne.n	11176 <z_cbvprintf_impl+0x1de>
		conv->width_star = true;
   11076:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1107a:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
   1107e:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   11080:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	conv->prec_present = (*sp == '.');
   11084:	781a      	ldrb	r2, [r3, #0]
   11086:	2a2e      	cmp	r2, #46	; 0x2e
   11088:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1108c:	bf0c      	ite	eq
   1108e:	2101      	moveq	r1, #1
   11090:	2100      	movne	r1, #0
   11092:	f361 0241 	bfi	r2, r1, #1, #1
   11096:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
   1109a:	d178      	bne.n	1118e <z_cbvprintf_impl+0x1f6>
	if (*sp == '*') {
   1109c:	785a      	ldrb	r2, [r3, #1]
   1109e:	2a2a      	cmp	r2, #42	; 0x2a
   110a0:	d06e      	beq.n	11180 <z_cbvprintf_impl+0x1e8>
	++sp;
   110a2:	3301      	adds	r3, #1
	size_t val = 0;
   110a4:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   110a6:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   110aa:	4619      	mov	r1, r3
   110ac:	f811 0b01 	ldrb.w	r0, [r1], #1
   110b0:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   110b4:	2f09      	cmp	r7, #9
   110b6:	f240 80ad 	bls.w	11214 <z_cbvprintf_impl+0x27c>
	conv->unsupported |= ((conv->prec_value < 0)
   110ba:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
	conv->prec_value = prec;
   110be:	9214      	str	r2, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
   110c0:	f3c1 0040 	ubfx	r0, r1, #1, #1
   110c4:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
   110c8:	460a      	mov	r2, r1
   110ca:	f360 0241 	bfi	r2, r0, #1, #1
   110ce:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
   110d2:	e05c      	b.n	1118e <z_cbvprintf_impl+0x1f6>
		conv->specifier = *sp++;
   110d4:	1cb2      	adds	r2, r6, #2
   110d6:	9206      	str	r2, [sp, #24]
   110d8:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
   110dc:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   110e0:	07d9      	lsls	r1, r3, #31
   110e2:	f140 8150 	bpl.w	11386 <z_cbvprintf_impl+0x3ee>
			width = va_arg(ap, int);
   110e6:	f854 2b04 	ldr.w	r2, [r4], #4
   110ea:	9204      	str	r2, [sp, #16]
			if (width < 0) {
   110ec:	2a00      	cmp	r2, #0
   110ee:	da08      	bge.n	11102 <z_cbvprintf_impl+0x16a>
				conv->flag_dash = true;
   110f0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   110f4:	f042 0204 	orr.w	r2, r2, #4
   110f8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
   110fc:	9a04      	ldr	r2, [sp, #16]
   110fe:	4252      	negs	r2, r2
		int width = -1;
   11100:	9204      	str	r2, [sp, #16]
		if (conv->prec_star) {
   11102:	075a      	lsls	r2, r3, #29
   11104:	f140 8147 	bpl.w	11396 <z_cbvprintf_impl+0x3fe>
			int arg = va_arg(ap, int);
   11108:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
   1110c:	2f00      	cmp	r7, #0
   1110e:	f280 8146 	bge.w	1139e <z_cbvprintf_impl+0x406>
				conv->prec_present = false;
   11112:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   11116:	f36f 0341 	bfc	r3, #1, #1
   1111a:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
   1111e:	f04f 37ff 	mov.w	r7, #4294967295
   11122:	e13c      	b.n	1139e <z_cbvprintf_impl+0x406>
		switch (*sp) {
   11124:	2a2d      	cmp	r2, #45	; 0x2d
   11126:	d00d      	beq.n	11144 <z_cbvprintf_impl+0x1ac>
   11128:	2a30      	cmp	r2, #48	; 0x30
   1112a:	f47f af69 	bne.w	11000 <z_cbvprintf_impl+0x68>
   1112e:	2301      	movs	r3, #1
	} while (loop);
   11130:	e758      	b.n	10fe4 <z_cbvprintf_impl+0x4c>
		switch (*sp) {
   11132:	f04f 0c01 	mov.w	ip, #1
   11136:	e755      	b.n	10fe4 <z_cbvprintf_impl+0x4c>
   11138:	f04f 0e01 	mov.w	lr, #1
   1113c:	e752      	b.n	10fe4 <z_cbvprintf_impl+0x4c>
   1113e:	f04f 0801 	mov.w	r8, #1
   11142:	e74f      	b.n	10fe4 <z_cbvprintf_impl+0x4c>
   11144:	2701      	movs	r7, #1
   11146:	e74d      	b.n	10fe4 <z_cbvprintf_impl+0x4c>
		val = 10U * val + *sp++ - '0';
   11148:	fb0e 7202 	mla	r2, lr, r2, r7
   1114c:	3a30      	subs	r2, #48	; 0x30
   1114e:	4603      	mov	r3, r0
   11150:	4618      	mov	r0, r3
   11152:	f810 7b01 	ldrb.w	r7, [r0], #1
   11156:	f1a7 0c30 	sub.w	ip, r7, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   1115a:	f1bc 0f09 	cmp.w	ip, #9
   1115e:	d9f3      	bls.n	11148 <z_cbvprintf_impl+0x1b0>
	if (sp != wp) {
   11160:	4299      	cmp	r1, r3
   11162:	d08f      	beq.n	11084 <z_cbvprintf_impl+0xec>
		conv->unsupported |= ((conv->width_value < 0)
   11164:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
		conv->width_value = width;
   11168:	9213      	str	r2, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
   1116a:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   1116c:	f362 0141 	bfi	r1, r2, #1, #1
   11170:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
   11174:	e786      	b.n	11084 <z_cbvprintf_impl+0xec>
   11176:	460b      	mov	r3, r1
	size_t val = 0;
   11178:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   1117a:	f04f 0e0a 	mov.w	lr, #10
   1117e:	e7e7      	b.n	11150 <z_cbvprintf_impl+0x1b8>
		conv->prec_star = true;
   11180:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   11184:	f042 0204 	orr.w	r2, r2, #4
   11188:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		return ++sp;
   1118c:	3302      	adds	r3, #2
	switch (*sp) {
   1118e:	781a      	ldrb	r2, [r3, #0]
   11190:	2a6c      	cmp	r2, #108	; 0x6c
   11192:	d05f      	beq.n	11254 <z_cbvprintf_impl+0x2bc>
   11194:	d843      	bhi.n	1121e <z_cbvprintf_impl+0x286>
   11196:	2a68      	cmp	r2, #104	; 0x68
   11198:	d049      	beq.n	1122e <z_cbvprintf_impl+0x296>
   1119a:	2a6a      	cmp	r2, #106	; 0x6a
   1119c:	d063      	beq.n	11266 <z_cbvprintf_impl+0x2ce>
   1119e:	2a4c      	cmp	r2, #76	; 0x4c
   111a0:	d069      	beq.n	11276 <z_cbvprintf_impl+0x2de>
	conv->specifier = *sp++;
   111a2:	f813 2b01 	ldrb.w	r2, [r3], #1
   111a6:	9306      	str	r3, [sp, #24]
	switch (conv->specifier) {
   111a8:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   111aa:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	switch (conv->specifier) {
   111ae:	f200 80a9 	bhi.w	11304 <z_cbvprintf_impl+0x36c>
   111b2:	2a6d      	cmp	r2, #109	; 0x6d
   111b4:	d86c      	bhi.n	11290 <z_cbvprintf_impl+0x2f8>
   111b6:	2a69      	cmp	r2, #105	; 0x69
   111b8:	f200 80a4 	bhi.w	11304 <z_cbvprintf_impl+0x36c>
   111bc:	2a57      	cmp	r2, #87	; 0x57
   111be:	f200 8084 	bhi.w	112ca <z_cbvprintf_impl+0x332>
   111c2:	2a41      	cmp	r2, #65	; 0x41
   111c4:	d004      	beq.n	111d0 <z_cbvprintf_impl+0x238>
   111c6:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
   111ca:	2b02      	cmp	r3, #2
   111cc:	f200 809a 	bhi.w	11304 <z_cbvprintf_impl+0x36c>
		conv->specifier_cat = SPECIFIER_FP;
   111d0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
   111d4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
   111d8:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
   111da:	f1a2 0741 	sub.w	r7, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
   111de:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
   111e2:	427a      	negs	r2, r7
		conv->specifier_a = (conv->specifier == 'a')
   111e4:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		conv->specifier_cat = SPECIFIER_FP;
   111e8:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
   111ec:	417a      	adcs	r2, r7
		conv->specifier_a = (conv->specifier == 'a')
   111ee:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
   111f2:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
   111f4:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		if (conv->specifier_a
   111f8:	b2cb      	uxtb	r3, r1
   111fa:	f100 80c2 	bmi.w	11382 <z_cbvprintf_impl+0x3ea>
		if (conv->length_mod == LENGTH_L) {
   111fe:	f003 0278 	and.w	r2, r3, #120	; 0x78
   11202:	2a18      	cmp	r2, #24
   11204:	f040 80ac 	bne.w	11360 <z_cbvprintf_impl+0x3c8>
			conv->length_mod = LENGTH_NONE;
   11208:	f36f 03c6 	bfc	r3, #3, #4
   1120c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	bool unsupported = false;
   11210:	2300      	movs	r3, #0
   11212:	e09b      	b.n	1134c <z_cbvprintf_impl+0x3b4>
		val = 10U * val + *sp++ - '0';
   11214:	fb0c 0202 	mla	r2, ip, r2, r0
   11218:	3a30      	subs	r2, #48	; 0x30
   1121a:	460b      	mov	r3, r1
   1121c:	e745      	b.n	110aa <z_cbvprintf_impl+0x112>
	switch (*sp) {
   1121e:	2a74      	cmp	r2, #116	; 0x74
   11220:	d025      	beq.n	1126e <z_cbvprintf_impl+0x2d6>
   11222:	2a7a      	cmp	r2, #122	; 0x7a
   11224:	d1bd      	bne.n	111a2 <z_cbvprintf_impl+0x20a>
		conv->length_mod = LENGTH_Z;
   11226:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1122a:	2106      	movs	r1, #6
   1122c:	e00c      	b.n	11248 <z_cbvprintf_impl+0x2b0>
		if (*++sp == 'h') {
   1122e:	785a      	ldrb	r2, [r3, #1]
   11230:	2a68      	cmp	r2, #104	; 0x68
   11232:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   11236:	d106      	bne.n	11246 <z_cbvprintf_impl+0x2ae>
			conv->length_mod = LENGTH_HH;
   11238:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   1123a:	f361 02c6 	bfi	r2, r1, #3, #4
   1123e:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
   11242:	3302      	adds	r3, #2
   11244:	e7ad      	b.n	111a2 <z_cbvprintf_impl+0x20a>
			conv->length_mod = LENGTH_H;
   11246:	2102      	movs	r1, #2
   11248:	f361 02c6 	bfi	r2, r1, #3, #4
   1124c:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
   11250:	3301      	adds	r3, #1
   11252:	e7a6      	b.n	111a2 <z_cbvprintf_impl+0x20a>
		if (*++sp == 'l') {
   11254:	785a      	ldrb	r2, [r3, #1]
   11256:	2a6c      	cmp	r2, #108	; 0x6c
   11258:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1125c:	d101      	bne.n	11262 <z_cbvprintf_impl+0x2ca>
			conv->length_mod = LENGTH_LL;
   1125e:	2104      	movs	r1, #4
   11260:	e7eb      	b.n	1123a <z_cbvprintf_impl+0x2a2>
			conv->length_mod = LENGTH_L;
   11262:	2103      	movs	r1, #3
   11264:	e7f0      	b.n	11248 <z_cbvprintf_impl+0x2b0>
		conv->length_mod = LENGTH_J;
   11266:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1126a:	2105      	movs	r1, #5
   1126c:	e7ec      	b.n	11248 <z_cbvprintf_impl+0x2b0>
		conv->length_mod = LENGTH_T;
   1126e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   11272:	2107      	movs	r1, #7
   11274:	e7e8      	b.n	11248 <z_cbvprintf_impl+0x2b0>
		conv->unsupported = true;
   11276:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   1127a:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   1127e:	f022 0202 	bic.w	r2, r2, #2
   11282:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   11286:	f042 0202 	orr.w	r2, r2, #2
   1128a:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
   1128e:	e7df      	b.n	11250 <z_cbvprintf_impl+0x2b8>
	switch (conv->specifier) {
   11290:	3a6e      	subs	r2, #110	; 0x6e
   11292:	b2d3      	uxtb	r3, r2
   11294:	2201      	movs	r2, #1
   11296:	409a      	lsls	r2, r3
   11298:	f240 4382 	movw	r3, #1154	; 0x482
   1129c:	421a      	tst	r2, r3
   1129e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   112a2:	d136      	bne.n	11312 <z_cbvprintf_impl+0x37a>
   112a4:	f012 0f24 	tst.w	r2, #36	; 0x24
   112a8:	d15e      	bne.n	11368 <z_cbvprintf_impl+0x3d0>
   112aa:	07d1      	lsls	r1, r2, #31
   112ac:	d52a      	bpl.n	11304 <z_cbvprintf_impl+0x36c>
		conv->specifier_cat = SPECIFIER_PTR;
   112ae:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   112b2:	f003 0378 	and.w	r3, r3, #120	; 0x78
   112b6:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   112ba:	2103      	movs	r1, #3
   112bc:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   112c0:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   112c2:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   112c6:	4143      	adcs	r3, r0
   112c8:	e040      	b.n	1134c <z_cbvprintf_impl+0x3b4>
	switch (conv->specifier) {
   112ca:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   112ce:	b2c9      	uxtb	r1, r1
   112d0:	2001      	movs	r0, #1
   112d2:	fa00 f101 	lsl.w	r1, r0, r1
   112d6:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   112da:	f47f af79 	bne.w	111d0 <z_cbvprintf_impl+0x238>
   112de:	f640 0301 	movw	r3, #2049	; 0x801
   112e2:	4219      	tst	r1, r3
   112e4:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   112e8:	d119      	bne.n	1131e <z_cbvprintf_impl+0x386>
   112ea:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   112ee:	d009      	beq.n	11304 <z_cbvprintf_impl+0x36c>
		conv->specifier_cat = SPECIFIER_SINT;
   112f0:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   112f4:	f360 0202 	bfi	r2, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   112f8:	f003 0378 	and.w	r3, r3, #120	; 0x78
   112fc:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   112fe:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   11302:	d185      	bne.n	11210 <z_cbvprintf_impl+0x278>
		conv->invalid = true;
   11304:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   11308:	f043 0301 	orr.w	r3, r3, #1
   1130c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
   11310:	e77e      	b.n	11210 <z_cbvprintf_impl+0x278>
		conv->specifier_cat = SPECIFIER_UINT;
   11312:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   11316:	2102      	movs	r1, #2
   11318:	f361 0202 	bfi	r2, r1, #0, #3
   1131c:	e7ec      	b.n	112f8 <z_cbvprintf_impl+0x360>
   1131e:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
   11322:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
   11324:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   11328:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1132c:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   1132e:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
   11332:	bf02      	ittt	eq
   11334:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
   11338:	f041 0101 	orreq.w	r1, r1, #1
   1133c:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
   11340:	2a63      	cmp	r2, #99	; 0x63
   11342:	f47f af65 	bne.w	11210 <z_cbvprintf_impl+0x278>
			unsupported = (conv->length_mod != LENGTH_NONE);
   11346:	3b00      	subs	r3, #0
   11348:	bf18      	it	ne
   1134a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   1134c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   11350:	f3c2 0140 	ubfx	r1, r2, #1, #1
   11354:	430b      	orrs	r3, r1
   11356:	f363 0241 	bfi	r2, r3, #1, #1
   1135a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
   1135e:	e6bd      	b.n	110dc <z_cbvprintf_impl+0x144>
		} else if ((conv->length_mod != LENGTH_NONE)
   11360:	f013 0f38 	tst.w	r3, #56	; 0x38
   11364:	d1ce      	bne.n	11304 <z_cbvprintf_impl+0x36c>
   11366:	e753      	b.n	11210 <z_cbvprintf_impl+0x278>
		conv->specifier_cat = SPECIFIER_PTR;
   11368:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   1136c:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   1136e:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   11372:	f361 0202 	bfi	r2, r1, #0, #3
   11376:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
   1137a:	bf14      	ite	ne
   1137c:	2301      	movne	r3, #1
   1137e:	2300      	moveq	r3, #0
   11380:	e7e4      	b.n	1134c <z_cbvprintf_impl+0x3b4>
			unsupported = true;
   11382:	2301      	movs	r3, #1
   11384:	e7e2      	b.n	1134c <z_cbvprintf_impl+0x3b4>
		} else if (conv->width_present) {
   11386:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
   1138a:	2a00      	cmp	r2, #0
			width = conv->width_value;
   1138c:	bfb4      	ite	lt
   1138e:	9a13      	ldrlt	r2, [sp, #76]	; 0x4c
		int width = -1;
   11390:	f04f 32ff 	movge.w	r2, #4294967295
   11394:	e6b4      	b.n	11100 <z_cbvprintf_impl+0x168>
		} else if (conv->prec_present) {
   11396:	079f      	lsls	r7, r3, #30
   11398:	f57f aec1 	bpl.w	1111e <z_cbvprintf_impl+0x186>
			precision = conv->prec_value;
   1139c:	9f14      	ldr	r7, [sp, #80]	; 0x50
		conv->pad0_value = 0;
   1139e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   113a0:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
		    && (conv->specifier_cat == SPECIFIER_FP)
   113a4:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
   113a8:	f003 0207 	and.w	r2, r3, #7
   113ac:	2a04      	cmp	r2, #4
   113ae:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   113b2:	d107      	bne.n	113c4 <z_cbvprintf_impl+0x42c>
		    && !conv->prec_present) {
   113b4:	0790      	lsls	r0, r2, #30
   113b6:	d405      	bmi.n	113c4 <z_cbvprintf_impl+0x42c>
			if (conv->specifier_a) {
   113b8:	f99d 1049 	ldrsb.w	r1, [sp, #73]	; 0x49
				precision = FRACTION_HEX;
   113bc:	2900      	cmp	r1, #0
   113be:	bfac      	ite	ge
   113c0:	2706      	movge	r7, #6
   113c2:	270d      	movlt	r7, #13
		enum specifier_cat_enum specifier_cat
   113c4:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   113c8:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   113ca:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   113ce:	d133      	bne.n	11438 <z_cbvprintf_impl+0x4a0>
			switch (length_mod) {
   113d0:	1ed3      	subs	r3, r2, #3
   113d2:	2b04      	cmp	r3, #4
   113d4:	d804      	bhi.n	113e0 <z_cbvprintf_impl+0x448>
   113d6:	e8df f003 	tbb	[pc, r3]
   113da:	4621      	.short	0x4621
   113dc:	2146      	.short	0x2146
   113de:	21          	.byte	0x21
   113df:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   113e0:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   113e2:	2a01      	cmp	r2, #1
				value->sint = va_arg(ap, int);
   113e4:	ea4f 71e3 	mov.w	r1, r3, asr #31
   113e8:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
   113ec:	d11c      	bne.n	11428 <z_cbvprintf_impl+0x490>
				value->sint = (signed char)value->sint;
   113ee:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
   113f2:	17d9      	asrs	r1, r3, #31
   113f4:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
   113f8:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   113fa:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   113fe:	9307      	str	r3, [sp, #28]
   11400:	0799      	lsls	r1, r3, #30
   11402:	d050      	beq.n	114a6 <z_cbvprintf_impl+0x50e>
			OUTS(sp, fp);
   11404:	9b06      	ldr	r3, [sp, #24]
   11406:	9903      	ldr	r1, [sp, #12]
   11408:	4632      	mov	r2, r6
   1140a:	4650      	mov	r0, sl
   1140c:	f015 fec8 	bl	271a0 <outs>
   11410:	2800      	cmp	r0, #0
   11412:	f2c0 8353 	blt.w	11abc <z_cbvprintf_impl+0xb24>
   11416:	4405      	add	r5, r0
			continue;
   11418:	9e06      	ldr	r6, [sp, #24]
   1141a:	e5c5      	b.n	10fa8 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1141c:	f854 3b04 	ldr.w	r3, [r4], #4
   11420:	17d9      	asrs	r1, r3, #31
				value->uint = (unsigned char)value->uint;
   11422:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
   11426:	e7e8      	b.n	113fa <z_cbvprintf_impl+0x462>
			} else if (length_mod == LENGTH_H) {
   11428:	2a02      	cmp	r2, #2
   1142a:	d1e5      	bne.n	113f8 <z_cbvprintf_impl+0x460>
				value->sint = (short)value->sint;
   1142c:	b219      	sxth	r1, r3
   1142e:	f343 33c0 	sbfx	r3, r3, #15, #1
   11432:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
   11436:	e7df      	b.n	113f8 <z_cbvprintf_impl+0x460>
		} else if (specifier_cat == SPECIFIER_UINT) {
   11438:	2b02      	cmp	r3, #2
   1143a:	d124      	bne.n	11486 <z_cbvprintf_impl+0x4ee>
			switch (length_mod) {
   1143c:	1ed3      	subs	r3, r2, #3
   1143e:	2b04      	cmp	r3, #4
   11440:	d804      	bhi.n	1144c <z_cbvprintf_impl+0x4b4>
   11442:	e8df f003 	tbb	[pc, r3]
   11446:	1018      	.short	0x1018
   11448:	1810      	.short	0x1810
   1144a:	18          	.byte	0x18
   1144b:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   1144c:	2a01      	cmp	r2, #1
				value->uint = va_arg(ap, unsigned int);
   1144e:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   11452:	f04f 0100 	mov.w	r1, #0
   11456:	d014      	beq.n	11482 <z_cbvprintf_impl+0x4ea>
			} else if (length_mod == LENGTH_H) {
   11458:	2a02      	cmp	r2, #2
				value->uint = va_arg(ap, unsigned int);
   1145a:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
   1145e:	d1cc      	bne.n	113fa <z_cbvprintf_impl+0x462>
				value->uint = (unsigned short)value->uint;
   11460:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   11462:	9310      	str	r3, [sp, #64]	; 0x40
   11464:	e7c9      	b.n	113fa <z_cbvprintf_impl+0x462>
					(uint_value_type)va_arg(ap,
   11466:	3407      	adds	r4, #7
   11468:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   1146c:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   11470:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
   11474:	e7c1      	b.n	113fa <z_cbvprintf_impl+0x462>
					(uint_value_type)va_arg(ap, size_t);
   11476:	f854 3b04 	ldr.w	r3, [r4], #4
   1147a:	9310      	str	r3, [sp, #64]	; 0x40
   1147c:	2300      	movs	r3, #0
   1147e:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
   11480:	e7bb      	b.n	113fa <z_cbvprintf_impl+0x462>
				value->uint = (unsigned char)value->uint;
   11482:	b2db      	uxtb	r3, r3
   11484:	e7cd      	b.n	11422 <z_cbvprintf_impl+0x48a>
		} else if (specifier_cat == SPECIFIER_FP) {
   11486:	2b04      	cmp	r3, #4
   11488:	d108      	bne.n	1149c <z_cbvprintf_impl+0x504>
					(sint_value_type)va_arg(ap, long long);
   1148a:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   1148c:	f024 0407 	bic.w	r4, r4, #7
   11490:	e9d4 0100 	ldrd	r0, r1, [r4]
   11494:	3408      	adds	r4, #8
   11496:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   1149a:	e7ae      	b.n	113fa <z_cbvprintf_impl+0x462>
		} else if (specifier_cat == SPECIFIER_PTR) {
   1149c:	2b03      	cmp	r3, #3
   1149e:	d1ac      	bne.n	113fa <z_cbvprintf_impl+0x462>
			value->ptr = va_arg(ap, void *);
   114a0:	f854 3b04 	ldr.w	r3, [r4], #4
   114a4:	e7dd      	b.n	11462 <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
   114a6:	f89d b04b 	ldrb.w	fp, [sp, #75]	; 0x4b
   114aa:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
   114ae:	d8b3      	bhi.n	11418 <z_cbvprintf_impl+0x480>
   114b0:	f1bb 0f57 	cmp.w	fp, #87	; 0x57
   114b4:	d849      	bhi.n	1154a <z_cbvprintf_impl+0x5b2>
   114b6:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
   114ba:	f000 8091 	beq.w	115e0 <z_cbvprintf_impl+0x648>
   114be:	f1bb 0f24 	cmp.w	fp, #36	; 0x24
   114c2:	d9a9      	bls.n	11418 <z_cbvprintf_impl+0x480>
   114c4:	f1bb 0f41 	cmp.w	fp, #65	; 0x41
   114c8:	d003      	beq.n	114d2 <z_cbvprintf_impl+0x53a>
   114ca:	f1ab 0245 	sub.w	r2, fp, #69	; 0x45
   114ce:	2a02      	cmp	r2, #2
   114d0:	d8a2      	bhi.n	11418 <z_cbvprintf_impl+0x480>
	} u = {
   114d2:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
	if ((u.u64 & SIGN_MASK) != 0U) {
   114d6:	2a00      	cmp	r2, #0
   114d8:	f2c0 8136 	blt.w	11748 <z_cbvprintf_impl+0x7b0>
	} else if (conv->flag_plus) {
   114dc:	9b07      	ldr	r3, [sp, #28]
   114de:	071e      	lsls	r6, r3, #28
   114e0:	f100 8135 	bmi.w	1174e <z_cbvprintf_impl+0x7b6>
	} else if (conv->flag_space) {
   114e4:	f3c3 1900 	ubfx	r9, r3, #4, #1
   114e8:	ea4f 1949 	mov.w	r9, r9, lsl #5
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   114ec:	f3c2 500a 	ubfx	r0, r2, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   114f0:	f3c2 0213 	ubfx	r2, r2, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
   114f4:	2800      	cmp	r0, #0
   114f6:	f040 812d 	bne.w	11754 <z_cbvprintf_impl+0x7bc>
   114fa:	ea51 0602 	orrs.w	r6, r1, r2
   114fe:	bf14      	ite	ne
   11500:	2601      	movne	r6, #1
   11502:	2600      	moveq	r6, #0
	fract <<= EXPONENT_BITS;
   11504:	02d2      	lsls	r2, r2, #11
   11506:	ea42 5251 	orr.w	r2, r2, r1, lsr #21
   1150a:	02c9      	lsls	r1, r1, #11
		c = 'f';
   1150c:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
	if ((expo | fract) != 0) {
   11510:	ea40 0e01 	orr.w	lr, r0, r1
   11514:	ea42 7ce0 	orr.w	ip, r2, r0, asr #31
		c = 'f';
   11518:	bf08      	it	eq
   1151a:	f04f 0b66 	moveq.w	fp, #102	; 0x66
	if ((expo | fract) != 0) {
   1151e:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
   11522:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	if ((expo | fract) != 0) {
   11526:	f000 8197 	beq.w	11858 <z_cbvprintf_impl+0x8c0>
		if (is_subnormal) {
   1152a:	2e00      	cmp	r6, #0
   1152c:	f040 8144 	bne.w	117b8 <z_cbvprintf_impl+0x820>
		fract |= BIT_63;
   11530:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11532:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
   11536:	f2a0 38fe 	subw	r8, r0, #1022	; 0x3fe
		fract |= BIT_63;
   1153a:	920d      	str	r2, [sp, #52]	; 0x34
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   1153c:	2000      	movs	r0, #0
   1153e:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
   11542:	4606      	mov	r6, r0
		fract *= 5U;
   11544:	f04f 0c05 	mov.w	ip, #5
   11548:	e150      	b.n	117ec <z_cbvprintf_impl+0x854>
		switch (conv->specifier) {
   1154a:	f1ab 0158 	sub.w	r1, fp, #88	; 0x58
   1154e:	2920      	cmp	r1, #32
   11550:	f63f af62 	bhi.w	11418 <z_cbvprintf_impl+0x480>
   11554:	a001      	add	r0, pc, #4	; (adr r0, 1155c <z_cbvprintf_impl+0x5c4>)
   11556:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   1155a:	bf00      	nop
   1155c:	000116e7 	.word	0x000116e7
   11560:	00011419 	.word	0x00011419
   11564:	00011419 	.word	0x00011419
   11568:	00011419 	.word	0x00011419
   1156c:	00011419 	.word	0x00011419
   11570:	00011419 	.word	0x00011419
   11574:	00011419 	.word	0x00011419
   11578:	00011419 	.word	0x00011419
   1157c:	00011419 	.word	0x00011419
   11580:	000114d3 	.word	0x000114d3
   11584:	00011419 	.word	0x00011419
   11588:	0001166b 	.word	0x0001166b
   1158c:	0001167f 	.word	0x0001167f
   11590:	000114d3 	.word	0x000114d3
   11594:	000114d3 	.word	0x000114d3
   11598:	000114d3 	.word	0x000114d3
   1159c:	00011419 	.word	0x00011419
   115a0:	0001167f 	.word	0x0001167f
   115a4:	00011419 	.word	0x00011419
   115a8:	00011419 	.word	0x00011419
   115ac:	00011419 	.word	0x00011419
   115b0:	00011419 	.word	0x00011419
   115b4:	00011721 	.word	0x00011721
   115b8:	000116e7 	.word	0x000116e7
   115bc:	000116ed 	.word	0x000116ed
   115c0:	00011419 	.word	0x00011419
   115c4:	00011419 	.word	0x00011419
   115c8:	000115e7 	.word	0x000115e7
   115cc:	00011419 	.word	0x00011419
   115d0:	000116e7 	.word	0x000116e7
   115d4:	00011419 	.word	0x00011419
   115d8:	00011419 	.word	0x00011419
   115dc:	000116e7 	.word	0x000116e7
			OUTC('%');
   115e0:	9903      	ldr	r1, [sp, #12]
   115e2:	4658      	mov	r0, fp
   115e4:	e4ea      	b.n	10fbc <z_cbvprintf_impl+0x24>
			if (precision >= 0) {
   115e6:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
   115e8:	9e10      	ldr	r6, [sp, #64]	; 0x40
			if (precision >= 0) {
   115ea:	db3a      	blt.n	11662 <z_cbvprintf_impl+0x6ca>
				len = strnlen(bps, precision);
   115ec:	4639      	mov	r1, r7
   115ee:	4630      	mov	r0, r6
   115f0:	f016 f9ec 	bl	279cc <strnlen>
			bpe = bps + len;
   115f4:	1837      	adds	r7, r6, r0
		if (bps == NULL) {
   115f6:	2e00      	cmp	r6, #0
   115f8:	f43f af0e 	beq.w	11418 <z_cbvprintf_impl+0x480>
		char sign = 0;
   115fc:	f04f 0900 	mov.w	r9, #0
		if (conv->altform_0c) {
   11600:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   11604:	f013 0210 	ands.w	r2, r3, #16
   11608:	9205      	str	r2, [sp, #20]
   1160a:	f000 824c 	beq.w	11aa6 <z_cbvprintf_impl+0xb0e>
			nj_len += 2U;
   1160e:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   11610:	f013 0340 	ands.w	r3, r3, #64	; 0x40
		nj_len += conv->pad0_value;
   11614:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
		if (conv->pad_fp) {
   11618:	9308      	str	r3, [sp, #32]
			nj_len += conv->pad0_pre_exp;
   1161a:	bf18      	it	ne
   1161c:	9b14      	ldrne	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
   1161e:	f8cd 801c 	str.w	r8, [sp, #28]
   11622:	4440      	add	r0, r8
			nj_len += conv->pad0_pre_exp;
   11624:	bf18      	it	ne
   11626:	18c0      	addne	r0, r0, r3
		if (width > 0) {
   11628:	9b04      	ldr	r3, [sp, #16]
   1162a:	2b00      	cmp	r3, #0
   1162c:	f340 8256 	ble.w	11adc <z_cbvprintf_impl+0xb44>
			if (!conv->flag_dash) {
   11630:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
   11634:	1a1b      	subs	r3, r3, r0
   11636:	9304      	str	r3, [sp, #16]
			if (!conv->flag_dash) {
   11638:	0753      	lsls	r3, r2, #29
   1163a:	f3c2 0b80 	ubfx	fp, r2, #2, #1
   1163e:	f100 824d 	bmi.w	11adc <z_cbvprintf_impl+0xb44>
				if (conv->flag_zero) {
   11642:	0650      	lsls	r0, r2, #25
   11644:	f140 823d 	bpl.w	11ac2 <z_cbvprintf_impl+0xb2a>
					if (sign != 0) {
   11648:	f1b9 0f00 	cmp.w	r9, #0
   1164c:	d007      	beq.n	1165e <z_cbvprintf_impl+0x6c6>
						OUTC(sign);
   1164e:	9903      	ldr	r1, [sp, #12]
   11650:	4648      	mov	r0, r9
   11652:	47d0      	blx	sl
   11654:	2800      	cmp	r0, #0
   11656:	f2c0 8231 	blt.w	11abc <z_cbvprintf_impl+0xb24>
   1165a:	3501      	adds	r5, #1
						sign = 0;
   1165c:	46d9      	mov	r9, fp
					pad = '0';
   1165e:	2230      	movs	r2, #48	; 0x30
   11660:	e230      	b.n	11ac4 <z_cbvprintf_impl+0xb2c>
				len = strlen(bps);
   11662:	4630      	mov	r0, r6
   11664:	f016 f9ab 	bl	279be <strlen>
   11668:	e7c4      	b.n	115f4 <z_cbvprintf_impl+0x65c>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1166a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1166c:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		char sign = 0;
   11670:	f04f 0900 	mov.w	r9, #0
			bpe = buf + 1;
   11674:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
			bps = buf;
   11678:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
   1167a:	2001      	movs	r0, #1
   1167c:	e7c0      	b.n	11600 <z_cbvprintf_impl+0x668>
			if (conv->flag_plus) {
   1167e:	9b07      	ldr	r3, [sp, #28]
   11680:	071a      	lsls	r2, r3, #28
			} else if (conv->flag_space) {
   11682:	bf58      	it	pl
   11684:	f3c3 1900 	ubfxpl	r9, r3, #4, #1
			sint = value->sint;
   11688:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			} else if (conv->flag_space) {
   1168c:	bf54      	ite	pl
   1168e:	ea4f 1949 	movpl.w	r9, r9, lsl #5
				sign = '+';
   11692:	f04f 092b 	movmi.w	r9, #43	; 0x2b
			if (sint < 0) {
   11696:	2b00      	cmp	r3, #0
   11698:	da06      	bge.n	116a8 <z_cbvprintf_impl+0x710>
				value->uint = (uint_value_type)-sint;
   1169a:	4252      	negs	r2, r2
   1169c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   116a0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
				sign = '-';
   116a4:	f04f 092d 	mov.w	r9, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
   116a8:	f10d 0375 	add.w	r3, sp, #117	; 0x75
   116ac:	9300      	str	r3, [sp, #0]
   116ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   116b2:	ab17      	add	r3, sp, #92	; 0x5c
   116b4:	aa12      	add	r2, sp, #72	; 0x48
   116b6:	f015 fd2d 	bl	27114 <encode_uint>
   116ba:	4606      	mov	r6, r0
			if (precision >= 0) {
   116bc:	2f00      	cmp	r7, #0
   116be:	db0c      	blt.n	116da <z_cbvprintf_impl+0x742>
				conv->flag_zero = false;
   116c0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
   116c4:	f10d 0375 	add.w	r3, sp, #117	; 0x75
   116c8:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
   116ca:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   116ce:	429f      	cmp	r7, r3
				conv->flag_zero = false;
   116d0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
   116d4:	d901      	bls.n	116da <z_cbvprintf_impl+0x742>
					conv->pad0_value = precision - (int)len;
   116d6:	1afb      	subs	r3, r7, r3
   116d8:	9313      	str	r3, [sp, #76]	; 0x4c
		if (bps == NULL) {
   116da:	2e00      	cmp	r6, #0
   116dc:	f43f ae9c 	beq.w	11418 <z_cbvprintf_impl+0x480>
   116e0:	f10d 0775 	add.w	r7, sp, #117	; 0x75
   116e4:	e056      	b.n	11794 <z_cbvprintf_impl+0x7fc>
		switch (conv->specifier) {
   116e6:	f04f 0900 	mov.w	r9, #0
   116ea:	e7dd      	b.n	116a8 <z_cbvprintf_impl+0x710>
			if (value->ptr != NULL) {
   116ec:	9810      	ldr	r0, [sp, #64]	; 0x40
   116ee:	2800      	cmp	r0, #0
   116f0:	f000 81d4 	beq.w	11a9c <z_cbvprintf_impl+0xb04>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   116f4:	f10d 0375 	add.w	r3, sp, #117	; 0x75
   116f8:	9300      	str	r3, [sp, #0]
   116fa:	aa12      	add	r2, sp, #72	; 0x48
   116fc:	ab17      	add	r3, sp, #92	; 0x5c
   116fe:	2100      	movs	r1, #0
   11700:	f015 fd08 	bl	27114 <encode_uint>
				conv->altform_0c = true;
   11704:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
   11708:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   1170c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   11710:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   11714:	4606      	mov	r6, r0
				conv->altform_0c = true;
   11716:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
		char sign = 0;
   1171a:	f04f 0900 	mov.w	r9, #0
				goto prec_int_pad0;
   1171e:	e7cd      	b.n	116bc <z_cbvprintf_impl+0x724>
				store_count(conv, value->ptr, count);
   11720:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
   11722:	2a07      	cmp	r2, #7
   11724:	f63f ae78 	bhi.w	11418 <z_cbvprintf_impl+0x480>
   11728:	e8df f002 	tbb	[pc, r2]
   1172c:	0c06040c 	.word	0x0c06040c
   11730:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   11734:	701d      	strb	r5, [r3, #0]
		break;
   11736:	e66f      	b.n	11418 <z_cbvprintf_impl+0x480>
		*(short *)dp = (short)count;
   11738:	801d      	strh	r5, [r3, #0]
		break;
   1173a:	e66d      	b.n	11418 <z_cbvprintf_impl+0x480>
		*(intmax_t *)dp = (intmax_t)count;
   1173c:	17ea      	asrs	r2, r5, #31
   1173e:	e9c3 5200 	strd	r5, r2, [r3]
		break;
   11742:	e669      	b.n	11418 <z_cbvprintf_impl+0x480>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   11744:	601d      	str	r5, [r3, #0]
		break;
   11746:	e667      	b.n	11418 <z_cbvprintf_impl+0x480>
		*sign = '-';
   11748:	f04f 092d 	mov.w	r9, #45	; 0x2d
   1174c:	e6ce      	b.n	114ec <z_cbvprintf_impl+0x554>
		*sign = '+';
   1174e:	f04f 092b 	mov.w	r9, #43	; 0x2b
   11752:	e6cb      	b.n	114ec <z_cbvprintf_impl+0x554>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
   11754:	f240 76ff 	movw	r6, #2047	; 0x7ff
   11758:	42b0      	cmp	r0, r6
   1175a:	d12a      	bne.n	117b2 <z_cbvprintf_impl+0x81a>
		if (fract == 0) {
   1175c:	430a      	orrs	r2, r1
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1175e:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
   11762:	d11e      	bne.n	117a2 <z_cbvprintf_impl+0x80a>
			if (isupper((unsigned char)c) != 0) {
   11764:	2b1a      	cmp	r3, #26
   11766:	bf35      	itete	cc
   11768:	2349      	movcc	r3, #73	; 0x49
   1176a:	2369      	movcs	r3, #105	; 0x69
   1176c:	214e      	movcc	r1, #78	; 0x4e
   1176e:	216e      	movcs	r1, #110	; 0x6e
   11770:	bf34      	ite	cc
   11772:	2246      	movcc	r2, #70	; 0x46
   11774:	2266      	movcs	r2, #102	; 0x66
				*buf++ = 'I';
   11776:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		conv->flag_zero = false;
   1177a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
				*buf++ = 'N';
   1177e:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
		conv->flag_zero = false;
   11782:	f36f 1386 	bfc	r3, #6, #1
				*buf++ = 'F';
   11786:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
		conv->flag_zero = false;
   1178a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		*bpe = buf;
   1178e:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
				bps = encode_float(value->dbl, conv, precision,
   11792:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
   11794:	1bb8      	subs	r0, r7, r6
		if (sign != 0) {
   11796:	f1b9 0f00 	cmp.w	r9, #0
   1179a:	f43f af31 	beq.w	11600 <z_cbvprintf_impl+0x668>
			nj_len += 1U;
   1179e:	3001      	adds	r0, #1
   117a0:	e72e      	b.n	11600 <z_cbvprintf_impl+0x668>
			if (isupper((unsigned char)c) != 0) {
   117a2:	2b19      	cmp	r3, #25
   117a4:	bf8b      	itete	hi
   117a6:	236e      	movhi	r3, #110	; 0x6e
   117a8:	234e      	movls	r3, #78	; 0x4e
   117aa:	2161      	movhi	r1, #97	; 0x61
   117ac:	2141      	movls	r1, #65	; 0x41
   117ae:	461a      	mov	r2, r3
   117b0:	e7e1      	b.n	11776 <z_cbvprintf_impl+0x7de>
	bool is_subnormal = (expo == 0) && (fract != 0);
   117b2:	2600      	movs	r6, #0
   117b4:	e6a6      	b.n	11504 <z_cbvprintf_impl+0x56c>
				expo--;
   117b6:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
   117b8:	1849      	adds	r1, r1, r1
   117ba:	4152      	adcs	r2, r2
   117bc:	2a00      	cmp	r2, #0
   117be:	dafa      	bge.n	117b6 <z_cbvprintf_impl+0x81e>
   117c0:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
   117c4:	e6b4      	b.n	11530 <z_cbvprintf_impl+0x598>
			fract >>= 1;
   117c6:	0849      	lsrs	r1, r1, #1
   117c8:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   117cc:	0852      	lsrs	r2, r2, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   117ce:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
   117d2:	4640      	mov	r0, r8
			expo++;
   117d4:	f108 0801 	add.w	r8, r8, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   117d8:	d2f5      	bcs.n	117c6 <z_cbvprintf_impl+0x82e>
		fract *= 5U;
   117da:	fb0c fe02 	mul.w	lr, ip, r2
   117de:	fba1 120c 	umull	r1, r2, r1, ip
		expo++;
   117e2:	f100 0802 	add.w	r8, r0, #2
		fract *= 5U;
   117e6:	4472      	add	r2, lr
		decexp--;
   117e8:	3e01      	subs	r6, #1
   117ea:	2001      	movs	r0, #1
	while (expo < -2) {
   117ec:	f118 0f02 	cmn.w	r8, #2
   117f0:	dbe9      	blt.n	117c6 <z_cbvprintf_impl+0x82e>
   117f2:	b108      	cbz	r0, 117f8 <z_cbvprintf_impl+0x860>
   117f4:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	while (expo > 0) {
   117f8:	f1b8 0f00 	cmp.w	r8, #0
		fract += 2;
   117fc:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
	while (expo > 0) {
   11800:	dc2d      	bgt.n	1185e <z_cbvprintf_impl+0x8c6>
	fract >>= (4 - expo);
   11802:	f1c8 0004 	rsb	r0, r8, #4
   11806:	f1a0 0c20 	sub.w	ip, r0, #32
   1180a:	f108 081c 	add.w	r8, r8, #28
   1180e:	40c2      	lsrs	r2, r0
   11810:	fa01 f808 	lsl.w	r8, r1, r8
   11814:	fa21 fc0c 	lsr.w	ip, r1, ip
   11818:	40c1      	lsrs	r1, r0
	if ((c == 'g') || (c == 'G')) {
   1181a:	f00b 00df 	and.w	r0, fp, #223	; 0xdf
	fract >>= (4 - expo);
   1181e:	ea42 0208 	orr.w	r2, r2, r8
	if ((c == 'g') || (c == 'G')) {
   11822:	2847      	cmp	r0, #71	; 0x47
	fract >>= (4 - expo);
   11824:	ea42 020c 	orr.w	r2, r2, ip
	if ((c == 'g') || (c == 'G')) {
   11828:	d13a      	bne.n	118a0 <z_cbvprintf_impl+0x908>
		if (decexp < (-4 + 1) || decexp > precision) {
   1182a:	1cf0      	adds	r0, r6, #3
   1182c:	db01      	blt.n	11832 <z_cbvprintf_impl+0x89a>
   1182e:	42b7      	cmp	r7, r6
   11830:	da2b      	bge.n	1188a <z_cbvprintf_impl+0x8f2>
			c += 'e' - 'g';  /* e or E */
   11832:	f1ab 0302 	sub.w	r3, fp, #2
			if (precision > 0) {
   11836:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
   11838:	fa5f fb83 	uxtb.w	fp, r3
			if (precision > 0) {
   1183c:	dd7d      	ble.n	1193a <z_cbvprintf_impl+0x9a2>
		if (!conv->flag_hash && (precision > 0)) {
   1183e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   11842:	0683      	lsls	r3, r0, #26
				precision--;
   11844:	f107 37ff 	add.w	r7, r7, #4294967295
		if (!conv->flag_hash && (precision > 0)) {
   11848:	d477      	bmi.n	1193a <z_cbvprintf_impl+0x9a2>
   1184a:	1e3b      	subs	r3, r7, #0
   1184c:	bf18      	it	ne
   1184e:	2301      	movne	r3, #1
	bool prune_zero = false;
   11850:	9305      	str	r3, [sp, #20]
		decimals = precision + 1;
   11852:	f107 0801 	add.w	r8, r7, #1
   11856:	e02d      	b.n	118b4 <z_cbvprintf_impl+0x91c>
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   11858:	f04f 0800 	mov.w	r8, #0
   1185c:	e66e      	b.n	1153c <z_cbvprintf_impl+0x5a4>
		fract += 2;
   1185e:	3202      	adds	r2, #2
   11860:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
   11864:	a80c      	add	r0, sp, #48	; 0x30
		fract += 2;
   11866:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		_ldiv5(&fract);
   1186a:	f015 fc24 	bl	270b6 <_ldiv5>
		expo--;
   1186e:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
   11872:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
   11876:	3601      	adds	r6, #1
			fract <<= 1;
   11878:	1892      	adds	r2, r2, r2
   1187a:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
   1187c:	2900      	cmp	r1, #0
			expo--;
   1187e:	f108 38ff 	add.w	r8, r8, #4294967295
		} while (!(fract & BIT_63));
   11882:	daf9      	bge.n	11878 <z_cbvprintf_impl+0x8e0>
   11884:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
   11888:	e7b6      	b.n	117f8 <z_cbvprintf_impl+0x860>
		if (!conv->flag_hash && (precision > 0)) {
   1188a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1188e:	0698      	lsls	r0, r3, #26
			precision -= decexp;
   11890:	eba7 0706 	sub.w	r7, r7, r6
		if (!conv->flag_hash && (precision > 0)) {
   11894:	d44f      	bmi.n	11936 <z_cbvprintf_impl+0x99e>
   11896:	1e3b      	subs	r3, r7, #0
   11898:	bf18      	it	ne
   1189a:	2301      	movne	r3, #1
	bool prune_zero = false;
   1189c:	9305      	str	r3, [sp, #20]
   1189e:	e004      	b.n	118aa <z_cbvprintf_impl+0x912>
   118a0:	2300      	movs	r3, #0
	if (c == 'f') {
   118a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
	bool prune_zero = false;
   118a6:	9305      	str	r3, [sp, #20]
	if (c == 'f') {
   118a8:	d1d3      	bne.n	11852 <z_cbvprintf_impl+0x8ba>
		if (decimals < 0) {
   118aa:	eb17 0806 	adds.w	r8, r7, r6
   118ae:	f04f 0b66 	mov.w	fp, #102	; 0x66
   118b2:	d444      	bmi.n	1193e <z_cbvprintf_impl+0x9a6>
	if (decimals > 16) {
   118b4:	f1b8 0f10 	cmp.w	r8, #16
   118b8:	bfa8      	it	ge
   118ba:	f04f 0810 	movge.w	r8, #16
	uint64_t round = BIT64(59); /* 0.5 */
   118be:	ed9f 7bb2 	vldr	d7, [pc, #712]	; 11b88 <z_cbvprintf_impl+0xbf0>
   118c2:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   118c6:	2010      	movs	r0, #16
   118c8:	900b      	str	r0, [sp, #44]	; 0x2c
	*v >>= 1;
   118ca:	e9dd 030e 	ldrd	r0, r3, [sp, #56]	; 0x38
	while (decimals--) {
   118ce:	f1b8 0f00 	cmp.w	r8, #0
   118d2:	d137      	bne.n	11944 <z_cbvprintf_impl+0x9ac>
	fract += round;
   118d4:	1812      	adds	r2, r2, r0
   118d6:	eb41 0103 	adc.w	r1, r1, r3
	if (fract >= BIT64(60)) {
   118da:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   118de:	d241      	bcs.n	11964 <z_cbvprintf_impl+0x9cc>
	fract += round;
   118e0:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		if (conv->flag_hash || (precision > 0)) {
   118e4:	9b07      	ldr	r3, [sp, #28]
	if (c == 'f') {
   118e6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
		if (conv->flag_hash || (precision > 0)) {
   118ea:	f003 0220 	and.w	r2, r3, #32
	if (c == 'f') {
   118ee:	f040 80b4 	bne.w	11a5a <z_cbvprintf_impl+0xac2>
		if (decexp > 0) {
   118f2:	2e00      	cmp	r6, #0
   118f4:	dc41      	bgt.n	1197a <z_cbvprintf_impl+0x9e2>
			*buf++ = '0';
   118f6:	2130      	movs	r1, #48	; 0x30
   118f8:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
		if (conv->flag_hash || (precision > 0)) {
   118fc:	2a00      	cmp	r2, #0
   118fe:	d165      	bne.n	119cc <z_cbvprintf_impl+0xa34>
   11900:	2f00      	cmp	r7, #0
   11902:	f340 81b2 	ble.w	11c6a <z_cbvprintf_impl+0xcd2>
			*buf++ = '.';
   11906:	222e      	movs	r2, #46	; 0x2e
   11908:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
   1190c:	b186      	cbz	r6, 11930 <z_cbvprintf_impl+0x998>
			conv->pad0_value = -decexp;
   1190e:	4272      	negs	r2, r6
   11910:	42ba      	cmp	r2, r7
   11912:	bfa8      	it	ge
   11914:	463a      	movge	r2, r7
			conv->pad_postdp = (conv->pad0_value > 0);
   11916:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
   1191a:	9213      	str	r2, [sp, #76]	; 0x4c
   1191c:	2a00      	cmp	r2, #0
			precision -= conv->pad0_value;
   1191e:	eba7 0702 	sub.w	r7, r7, r2
			conv->pad_postdp = (conv->pad0_value > 0);
   11922:	bfd4      	ite	le
   11924:	2200      	movle	r2, #0
   11926:	2201      	movgt	r2, #1
   11928:	f362 1145 	bfi	r1, r2, #5, #1
   1192c:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			*buf++ = '.';
   11930:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
   11934:	e039      	b.n	119aa <z_cbvprintf_impl+0xa12>
	bool prune_zero = false;
   11936:	2300      	movs	r3, #0
   11938:	e7b0      	b.n	1189c <z_cbvprintf_impl+0x904>
   1193a:	2300      	movs	r3, #0
   1193c:	e788      	b.n	11850 <z_cbvprintf_impl+0x8b8>
			decimals = 0;
   1193e:	f04f 0800 	mov.w	r8, #0
   11942:	e7bc      	b.n	118be <z_cbvprintf_impl+0x926>
	*v >>= 1;
   11944:	0840      	lsrs	r0, r0, #1
   11946:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
   1194a:	085b      	lsrs	r3, r3, #1
   1194c:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	_ldiv5(v);
   11950:	a80e      	add	r0, sp, #56	; 0x38
   11952:	e9cd 2108 	strd	r2, r1, [sp, #32]
   11956:	f108 38ff 	add.w	r8, r8, #4294967295
   1195a:	f015 fbac 	bl	270b6 <_ldiv5>
   1195e:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
}
   11962:	e7b2      	b.n	118ca <z_cbvprintf_impl+0x932>
	*v >>= 1;
   11964:	0852      	lsrs	r2, r2, #1
   11966:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
	_ldiv5(v);
   1196a:	a80c      	add	r0, sp, #48	; 0x30
	*v >>= 1;
   1196c:	0849      	lsrs	r1, r1, #1
   1196e:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		decexp++;
   11972:	3601      	adds	r6, #1
	_ldiv5(v);
   11974:	f015 fb9f 	bl	270b6 <_ldiv5>
		decexp++;
   11978:	e7b4      	b.n	118e4 <z_cbvprintf_impl+0x94c>
	char *buf = bps;
   1197a:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
			while (decexp > 0 && digit_count > 0) {
   1197e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11980:	2900      	cmp	r1, #0
   11982:	dd09      	ble.n	11998 <z_cbvprintf_impl+0xa00>
				*buf++ = _get_digit(&fract, &digit_count);
   11984:	a90b      	add	r1, sp, #44	; 0x2c
   11986:	a80c      	add	r0, sp, #48	; 0x30
   11988:	9207      	str	r2, [sp, #28]
   1198a:	f015 fbac 	bl	270e6 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   1198e:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
   11990:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
   11994:	9a07      	ldr	r2, [sp, #28]
   11996:	d1f2      	bne.n	1197e <z_cbvprintf_impl+0x9e6>
			conv->pad0_value = decexp;
   11998:	9613      	str	r6, [sp, #76]	; 0x4c
		if (conv->flag_hash || (precision > 0)) {
   1199a:	b99a      	cbnz	r2, 119c4 <z_cbvprintf_impl+0xa2c>
   1199c:	2f00      	cmp	r7, #0
   1199e:	f340 8162 	ble.w	11c66 <z_cbvprintf_impl+0xcce>
			*buf++ = '.';
   119a2:	212e      	movs	r1, #46	; 0x2e
   119a4:	f808 1b01 	strb.w	r1, [r8], #1
   119a8:	2600      	movs	r6, #0
	while (precision > 0 && digit_count > 0) {
   119aa:	2f00      	cmp	r7, #0
   119ac:	dd17      	ble.n	119de <z_cbvprintf_impl+0xa46>
   119ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   119b0:	2a00      	cmp	r2, #0
   119b2:	dd14      	ble.n	119de <z_cbvprintf_impl+0xa46>
		*buf++ = _get_digit(&fract, &digit_count);
   119b4:	a90b      	add	r1, sp, #44	; 0x2c
   119b6:	a80c      	add	r0, sp, #48	; 0x30
   119b8:	f015 fb95 	bl	270e6 <_get_digit>
		precision--;
   119bc:	3f01      	subs	r7, #1
		*buf++ = _get_digit(&fract, &digit_count);
   119be:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
   119c2:	e7f2      	b.n	119aa <z_cbvprintf_impl+0xa12>
			*buf++ = '.';
   119c4:	222e      	movs	r2, #46	; 0x2e
   119c6:	f808 2b01 	strb.w	r2, [r8], #1
   119ca:	e7ed      	b.n	119a8 <z_cbvprintf_impl+0xa10>
   119cc:	222e      	movs	r2, #46	; 0x2e
   119ce:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
   119d2:	2e00      	cmp	r6, #0
   119d4:	d0ac      	beq.n	11930 <z_cbvprintf_impl+0x998>
   119d6:	2f00      	cmp	r7, #0
   119d8:	dc99      	bgt.n	1190e <z_cbvprintf_impl+0x976>
			*buf++ = '.';
   119da:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
	if (prune_zero) {
   119de:	9b05      	ldr	r3, [sp, #20]
   119e0:	2b00      	cmp	r3, #0
   119e2:	d14e      	bne.n	11a82 <z_cbvprintf_impl+0xaea>
	conv->pad0_pre_exp = precision;
   119e4:	9714      	str	r7, [sp, #80]	; 0x50
   119e6:	4647      	mov	r7, r8
	if ((c == 'e') || (c == 'E')) {
   119e8:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
   119ec:	2a45      	cmp	r2, #69	; 0x45
   119ee:	d123      	bne.n	11a38 <z_cbvprintf_impl+0xaa0>
		if (decexp < 0) {
   119f0:	2e00      	cmp	r6, #0
			decexp = -decexp;
   119f2:	bfba      	itte	lt
   119f4:	4276      	neglt	r6, r6
			*buf++ = '-';
   119f6:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
   119f8:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
   119fa:	2e63      	cmp	r6, #99	; 0x63
			*buf++ = (decexp / 100) + '0';
   119fc:	bfc8      	it	gt
   119fe:	2164      	movgt	r1, #100	; 0x64
   11a00:	707b      	strb	r3, [r7, #1]
			*buf++ = '-';
   11a02:	bfd1      	iteee	le
   11a04:	1cba      	addle	r2, r7, #2
			*buf++ = (decexp / 100) + '0';
   11a06:	fbb6 f3f1 	udivgt	r3, r6, r1
   11a0a:	1cfa      	addgt	r2, r7, #3
   11a0c:	f103 0030 	addgt.w	r0, r3, #48	; 0x30
			decexp %= 100;
   11a10:	bfc8      	it	gt
   11a12:	fb01 6613 	mlsgt	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
   11a16:	f04f 010a 	mov.w	r1, #10
			*buf++ = (decexp / 100) + '0';
   11a1a:	bfc8      	it	gt
   11a1c:	70b8      	strbgt	r0, [r7, #2]
		*buf++ = c;
   11a1e:	f887 b000 	strb.w	fp, [r7]
		*buf++ = (decexp / 10) + '0';
   11a22:	fbb6 f3f1 	udiv	r3, r6, r1
   11a26:	4617      	mov	r7, r2
   11a28:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
   11a2c:	fb01 6313 	mls	r3, r1, r3, r6
   11a30:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   11a32:	f807 0b02 	strb.w	r0, [r7], #2
		*buf++ = (decexp % 10) + '0';
   11a36:	7053      	strb	r3, [r2, #1]
		|| (conv->pad0_pre_exp > 0);
   11a38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11a3a:	2b00      	cmp	r3, #0
   11a3c:	dc2c      	bgt.n	11a98 <z_cbvprintf_impl+0xb00>
   11a3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11a40:	2b00      	cmp	r3, #0
   11a42:	bfd4      	ite	le
   11a44:	2300      	movle	r3, #0
   11a46:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
   11a48:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   11a4c:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
   11a50:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
   11a52:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	*buf = 0;
   11a56:	703b      	strb	r3, [r7, #0]
	return bps;
   11a58:	e69b      	b.n	11792 <z_cbvprintf_impl+0x7fa>
		*buf = _get_digit(&fract, &digit_count);
   11a5a:	a90b      	add	r1, sp, #44	; 0x2c
   11a5c:	a80c      	add	r0, sp, #48	; 0x30
   11a5e:	9207      	str	r2, [sp, #28]
   11a60:	f015 fb41 	bl	270e6 <_get_digit>
		if (*buf++ != '0') {
   11a64:	9a07      	ldr	r2, [sp, #28]
		*buf = _get_digit(&fract, &digit_count);
   11a66:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
		if (*buf++ != '0') {
   11a6a:	2830      	cmp	r0, #48	; 0x30
			decexp--;
   11a6c:	bf18      	it	ne
   11a6e:	f106 36ff 	addne.w	r6, r6, #4294967295
		if (conv->flag_hash || (precision > 0)) {
   11a72:	b912      	cbnz	r2, 11a7a <z_cbvprintf_impl+0xae2>
   11a74:	2f00      	cmp	r7, #0
   11a76:	f340 80f8 	ble.w	11c6a <z_cbvprintf_impl+0xcd2>
			*buf++ = '.';
   11a7a:	222e      	movs	r2, #46	; 0x2e
   11a7c:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
   11a80:	e756      	b.n	11930 <z_cbvprintf_impl+0x998>
		while (*--buf == '0') {
   11a82:	4647      	mov	r7, r8
   11a84:	f108 38ff 	add.w	r8, r8, #4294967295
   11a88:	f817 2c01 	ldrb.w	r2, [r7, #-1]
   11a8c:	2a30      	cmp	r2, #48	; 0x30
   11a8e:	d0f8      	beq.n	11a82 <z_cbvprintf_impl+0xaea>
   11a90:	2a2e      	cmp	r2, #46	; 0x2e
   11a92:	bf08      	it	eq
   11a94:	4647      	moveq	r7, r8
   11a96:	e7a7      	b.n	119e8 <z_cbvprintf_impl+0xa50>
		|| (conv->pad0_pre_exp > 0);
   11a98:	2301      	movs	r3, #1
   11a9a:	e7d5      	b.n	11a48 <z_cbvprintf_impl+0xab0>
			bpe = bps + 5;
   11a9c:	4f3c      	ldr	r7, [pc, #240]	; (11b90 <z_cbvprintf_impl+0xbf8>)
		char sign = 0;
   11a9e:	4681      	mov	r9, r0
			bps = "(nil)";
   11aa0:	1f7e      	subs	r6, r7, #5
		size_t nj_len = (bpe - bps);
   11aa2:	2005      	movs	r0, #5
   11aa4:	e5ac      	b.n	11600 <z_cbvprintf_impl+0x668>
		} else if (conv->altform_0) {
   11aa6:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   11aa8:	bf48      	it	mi
   11aaa:	3001      	addmi	r0, #1
   11aac:	e5b0      	b.n	11610 <z_cbvprintf_impl+0x678>
					OUTC(pad);
   11aae:	4610      	mov	r0, r2
   11ab0:	9209      	str	r2, [sp, #36]	; 0x24
   11ab2:	9903      	ldr	r1, [sp, #12]
   11ab4:	47d0      	blx	sl
   11ab6:	2800      	cmp	r0, #0
   11ab8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11aba:	da05      	bge.n	11ac8 <z_cbvprintf_impl+0xb30>
#undef OUTS
#undef OUTC
}
   11abc:	b01f      	add	sp, #124	; 0x7c
   11abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   11ac2:	2220      	movs	r2, #32
					pad = '0';
   11ac4:	f8dd b010 	ldr.w	fp, [sp, #16]
				while (width-- > 0) {
   11ac8:	4659      	mov	r1, fp
   11aca:	2900      	cmp	r1, #0
   11acc:	f10b 3bff 	add.w	fp, fp, #4294967295
   11ad0:	dced      	bgt.n	11aae <z_cbvprintf_impl+0xb16>
   11ad2:	9b04      	ldr	r3, [sp, #16]
   11ad4:	f8cd b010 	str.w	fp, [sp, #16]
   11ad8:	442b      	add	r3, r5
   11ada:	1a5d      	subs	r5, r3, r1
		if (sign != 0) {
   11adc:	f1b9 0f00 	cmp.w	r9, #0
   11ae0:	d005      	beq.n	11aee <z_cbvprintf_impl+0xb56>
			OUTC(sign);
   11ae2:	9903      	ldr	r1, [sp, #12]
   11ae4:	4648      	mov	r0, r9
   11ae6:	47d0      	blx	sl
   11ae8:	2800      	cmp	r0, #0
   11aea:	dbe7      	blt.n	11abc <z_cbvprintf_impl+0xb24>
   11aec:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
   11aee:	9b08      	ldr	r3, [sp, #32]
   11af0:	2b00      	cmp	r3, #0
   11af2:	d07d      	beq.n	11bf0 <z_cbvprintf_impl+0xc58>
			if (conv->specifier_a) {
   11af4:	f99d 3049 	ldrsb.w	r3, [sp, #73]	; 0x49
   11af8:	2b00      	cmp	r3, #0
   11afa:	db28      	blt.n	11b4e <z_cbvprintf_impl+0xbb6>
   11afc:	46b3      	mov	fp, r6
				while (isdigit((unsigned char)*cp) != 0) {
   11afe:	f89b 0000 	ldrb.w	r0, [fp]
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   11b02:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   11b06:	2b09      	cmp	r3, #9
   11b08:	46d9      	mov	r9, fp
   11b0a:	f10b 0b01 	add.w	fp, fp, #1
   11b0e:	d946      	bls.n	11b9e <z_cbvprintf_impl+0xc06>
				if (!conv->pad_postdp) {
   11b10:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   11b14:	1bae      	subs	r6, r5, r6
   11b16:	0699      	lsls	r1, r3, #26
   11b18:	444e      	add	r6, r9
   11b1a:	d407      	bmi.n	11b2c <z_cbvprintf_impl+0xb94>
					while (pad_len-- > 0) {
   11b1c:	4642      	mov	r2, r8
   11b1e:	2a00      	cmp	r2, #0
   11b20:	f108 38ff 	add.w	r8, r8, #4294967295
   11b24:	dc40      	bgt.n	11ba8 <z_cbvprintf_impl+0xc10>
   11b26:	9b07      	ldr	r3, [sp, #28]
   11b28:	4433      	add	r3, r6
   11b2a:	1a9e      	subs	r6, r3, r2
				if (*cp == '.') {
   11b2c:	f899 0000 	ldrb.w	r0, [r9]
   11b30:	282e      	cmp	r0, #46	; 0x2e
   11b32:	d10a      	bne.n	11b4a <z_cbvprintf_impl+0xbb2>
					OUTC(*cp++);
   11b34:	9903      	ldr	r1, [sp, #12]
   11b36:	47d0      	blx	sl
						OUTC('0');
   11b38:	2800      	cmp	r0, #0
   11b3a:	dbbf      	blt.n	11abc <z_cbvprintf_impl+0xb24>
					while (pad_len-- > 0) {
   11b3c:	f1b8 0f00 	cmp.w	r8, #0
						OUTC('0');
   11b40:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
   11b44:	dc36      	bgt.n	11bb4 <z_cbvprintf_impl+0xc1c>
					OUTC(*cp++);
   11b46:	f109 0901 	add.w	r9, r9, #1
			if (conv->specifier_a) {
   11b4a:	464d      	mov	r5, r9
   11b4c:	e03d      	b.n	11bca <z_cbvprintf_impl+0xc32>
   11b4e:	46b1      	mov	r9, r6
				while (*cp != 'p') {
   11b50:	f899 0000 	ldrb.w	r0, [r9]
   11b54:	2870      	cmp	r0, #112	; 0x70
   11b56:	46c8      	mov	r8, r9
   11b58:	f109 0901 	add.w	r9, r9, #1
   11b5c:	d11a      	bne.n	11b94 <z_cbvprintf_impl+0xbfc>
   11b5e:	1bae      	subs	r6, r5, r6
   11b60:	9d14      	ldr	r5, [sp, #80]	; 0x50
   11b62:	4446      	add	r6, r8
			while (pad_len-- > 0) {
   11b64:	4435      	add	r5, r6
   11b66:	1bab      	subs	r3, r5, r6
   11b68:	2b00      	cmp	r3, #0
   11b6a:	dc39      	bgt.n	11be0 <z_cbvprintf_impl+0xc48>
			OUTS(cp, bpe);
   11b6c:	9903      	ldr	r1, [sp, #12]
   11b6e:	463b      	mov	r3, r7
   11b70:	4642      	mov	r2, r8
   11b72:	4650      	mov	r0, sl
   11b74:	f015 fb14 	bl	271a0 <outs>
   11b78:	2800      	cmp	r0, #0
   11b7a:	db9f      	blt.n	11abc <z_cbvprintf_impl+0xb24>
   11b7c:	4430      	add	r0, r6
   11b7e:	9e04      	ldr	r6, [sp, #16]
			while (pad_len-- > 0) {
   11b80:	4605      	mov	r5, r0
   11b82:	4406      	add	r6, r0
   11b84:	e06a      	b.n	11c5c <z_cbvprintf_impl+0xcc4>
   11b86:	bf00      	nop
   11b88:	00000000 	.word	0x00000000
   11b8c:	08000000 	.word	0x08000000
   11b90:	0002b2d9 	.word	0x0002b2d9
					OUTC(*cp++);
   11b94:	9903      	ldr	r1, [sp, #12]
   11b96:	47d0      	blx	sl
   11b98:	2800      	cmp	r0, #0
   11b9a:	dad9      	bge.n	11b50 <z_cbvprintf_impl+0xbb8>
   11b9c:	e78e      	b.n	11abc <z_cbvprintf_impl+0xb24>
					OUTC(*cp++);
   11b9e:	9903      	ldr	r1, [sp, #12]
   11ba0:	47d0      	blx	sl
   11ba2:	2800      	cmp	r0, #0
   11ba4:	daab      	bge.n	11afe <z_cbvprintf_impl+0xb66>
   11ba6:	e789      	b.n	11abc <z_cbvprintf_impl+0xb24>
						OUTC('0');
   11ba8:	9903      	ldr	r1, [sp, #12]
   11baa:	2030      	movs	r0, #48	; 0x30
   11bac:	47d0      	blx	sl
   11bae:	2800      	cmp	r0, #0
   11bb0:	dab4      	bge.n	11b1c <z_cbvprintf_impl+0xb84>
   11bb2:	e783      	b.n	11abc <z_cbvprintf_impl+0xb24>
						OUTC('0');
   11bb4:	9903      	ldr	r1, [sp, #12]
   11bb6:	2030      	movs	r0, #48	; 0x30
   11bb8:	47d0      	blx	sl
   11bba:	f108 38ff 	add.w	r8, r8, #4294967295
   11bbe:	e7bb      	b.n	11b38 <z_cbvprintf_impl+0xba0>
					OUTC(*cp++);
   11bc0:	9903      	ldr	r1, [sp, #12]
   11bc2:	47d0      	blx	sl
   11bc4:	2800      	cmp	r0, #0
   11bc6:	f6ff af79 	blt.w	11abc <z_cbvprintf_impl+0xb24>
				while (isdigit((unsigned char)*cp) != 0) {
   11bca:	7828      	ldrb	r0, [r5, #0]
   11bcc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   11bd0:	2b09      	cmp	r3, #9
   11bd2:	46a8      	mov	r8, r5
   11bd4:	f105 0501 	add.w	r5, r5, #1
   11bd8:	d9f2      	bls.n	11bc0 <z_cbvprintf_impl+0xc28>
   11bda:	eba6 0609 	sub.w	r6, r6, r9
   11bde:	e7bf      	b.n	11b60 <z_cbvprintf_impl+0xbc8>
				OUTC('0');
   11be0:	9903      	ldr	r1, [sp, #12]
   11be2:	2030      	movs	r0, #48	; 0x30
   11be4:	47d0      	blx	sl
   11be6:	2800      	cmp	r0, #0
   11be8:	f6ff af68 	blt.w	11abc <z_cbvprintf_impl+0xb24>
   11bec:	3601      	adds	r6, #1
   11bee:	e7ba      	b.n	11b66 <z_cbvprintf_impl+0xbce>
			if (conv->altform_0c | conv->altform_0) {
   11bf0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   11bf4:	06da      	lsls	r2, r3, #27
   11bf6:	d401      	bmi.n	11bfc <z_cbvprintf_impl+0xc64>
   11bf8:	071b      	lsls	r3, r3, #28
   11bfa:	d506      	bpl.n	11c0a <z_cbvprintf_impl+0xc72>
				OUTC('0');
   11bfc:	9903      	ldr	r1, [sp, #12]
   11bfe:	2030      	movs	r0, #48	; 0x30
   11c00:	47d0      	blx	sl
   11c02:	2800      	cmp	r0, #0
   11c04:	f6ff af5a 	blt.w	11abc <z_cbvprintf_impl+0xb24>
   11c08:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   11c0a:	9b05      	ldr	r3, [sp, #20]
   11c0c:	b13b      	cbz	r3, 11c1e <z_cbvprintf_impl+0xc86>
				OUTC(conv->specifier);
   11c0e:	9903      	ldr	r1, [sp, #12]
   11c10:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   11c14:	47d0      	blx	sl
   11c16:	2800      	cmp	r0, #0
   11c18:	f6ff af50 	blt.w	11abc <z_cbvprintf_impl+0xb24>
   11c1c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   11c1e:	44a8      	add	r8, r5
   11c20:	e006      	b.n	11c30 <z_cbvprintf_impl+0xc98>
				OUTC('0');
   11c22:	9903      	ldr	r1, [sp, #12]
   11c24:	2030      	movs	r0, #48	; 0x30
   11c26:	47d0      	blx	sl
   11c28:	2800      	cmp	r0, #0
   11c2a:	f6ff af47 	blt.w	11abc <z_cbvprintf_impl+0xb24>
   11c2e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   11c30:	eba8 0305 	sub.w	r3, r8, r5
   11c34:	2b00      	cmp	r3, #0
   11c36:	dcf4      	bgt.n	11c22 <z_cbvprintf_impl+0xc8a>
			OUTS(bps, bpe);
   11c38:	9903      	ldr	r1, [sp, #12]
   11c3a:	463b      	mov	r3, r7
   11c3c:	4632      	mov	r2, r6
   11c3e:	4650      	mov	r0, sl
   11c40:	f015 faae 	bl	271a0 <outs>
   11c44:	2800      	cmp	r0, #0
   11c46:	f6ff af39 	blt.w	11abc <z_cbvprintf_impl+0xb24>
   11c4a:	4428      	add	r0, r5
   11c4c:	e797      	b.n	11b7e <z_cbvprintf_impl+0xbe6>
			OUTC(' ');
   11c4e:	9903      	ldr	r1, [sp, #12]
   11c50:	2020      	movs	r0, #32
   11c52:	47d0      	blx	sl
   11c54:	2800      	cmp	r0, #0
   11c56:	f6ff af31 	blt.w	11abc <z_cbvprintf_impl+0xb24>
   11c5a:	3501      	adds	r5, #1
		while (width > 0) {
   11c5c:	1b73      	subs	r3, r6, r5
   11c5e:	2b00      	cmp	r3, #0
   11c60:	dcf5      	bgt.n	11c4e <z_cbvprintf_impl+0xcb6>
   11c62:	f7ff bbd9 	b.w	11418 <z_cbvprintf_impl+0x480>
			decexp = 0;
   11c66:	4616      	mov	r6, r2
   11c68:	e6b9      	b.n	119de <z_cbvprintf_impl+0xa46>
		if (*buf++ != '0') {
   11c6a:	f10d 085d 	add.w	r8, sp, #93	; 0x5d
	while (precision > 0 && digit_count > 0) {
   11c6e:	e6b6      	b.n	119de <z_cbvprintf_impl+0xa46>

00011c70 <uart_work_handler.part.0>:
		break;
	}
}

// used in case UART_RX is disabled 
static void uart_work_handler(struct k_work *item)
   11c70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	buf = k_malloc(sizeof(*buf));
	if (buf) {
		buf->len = 0;
	} else {
		LOG_WRN("UART_WORK_HANDLER\nNot able to allocate UART receive buffer");
   11c72:	4b09      	ldr	r3, [pc, #36]	; (11c98 <uart_work_handler.part.0+0x28>)
   11c74:	9305      	str	r3, [sp, #20]
   11c76:	aa04      	add	r2, sp, #16
   11c78:	2302      	movs	r3, #2
   11c7a:	4808      	ldr	r0, [pc, #32]	; (11c9c <uart_work_handler.part.0+0x2c>)
   11c7c:	9304      	str	r3, [sp, #16]
   11c7e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11c82:	f014 ffe7 	bl	26c54 <z_log_msg_static_create.constprop.0>
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
   11c86:	4806      	ldr	r0, [pc, #24]	; (11ca0 <uart_work_handler.part.0+0x30>)
   11c88:	f240 6267 	movw	r2, #1639	; 0x667
   11c8c:	2300      	movs	r3, #0
		return;
	}

	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
}
   11c8e:	b007      	add	sp, #28
   11c90:	f85d eb04 	ldr.w	lr, [sp], #4
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
   11c94:	f00f be0c 	b.w	218b0 <k_work_reschedule>
   11c98:	0002aa0c 	.word	0x0002aa0c
   11c9c:	00029f90 	.word	0x00029f90
   11ca0:	20001938 	.word	0x20001938

00011ca4 <on_le_param_updated>:
		dk_set_led_off(CON_STATUS_LED);
	}
}

void on_le_param_updated(struct bt_conn *conn, uint16_t interval, uint16_t latency, uint16_t timeout)
{
   11ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11ca6:	af00      	add	r7, sp, #0
    double connection_interval = interval*1.25;         // in ms
    uint16_t supervision_timeout = timeout*10;          // in ms
    LOG_INF("Connection parameters updated: interval %.2f ms, latency %d intervals, timeout %d ms", connection_interval, latency, supervision_timeout);
   11ca8:	b08a      	sub	sp, #40	; 0x28
{
   11caa:	4608      	mov	r0, r1
   11cac:	4616      	mov	r6, r2
   11cae:	461c      	mov	r4, r3
    LOG_INF("Connection parameters updated: interval %.2f ms, latency %d intervals, timeout %d ms", connection_interval, latency, supervision_timeout);
   11cb0:	466d      	mov	r5, sp
   11cb2:	4b0f      	ldr	r3, [pc, #60]	; (11cf0 <on_le_param_updated+0x4c>)
   11cb4:	616b      	str	r3, [r5, #20]
    double connection_interval = interval*1.25;         // in ms
   11cb6:	f7ee fb75 	bl	3a4 <__aeabi_i2d>
   11cba:	4b0e      	ldr	r3, [pc, #56]	; (11cf4 <on_le_param_updated+0x50>)
   11cbc:	2200      	movs	r2, #0
   11cbe:	f7ee fbdb 	bl	478 <__aeabi_dmul>
    LOG_INF("Connection parameters updated: interval %.2f ms, latency %d intervals, timeout %d ms", connection_interval, latency, supervision_timeout);
   11cc2:	2200      	movs	r2, #0
   11cc4:	2300      	movs	r3, #0
   11cc6:	f7ee fa21 	bl	10c <__adddf3>
    uint16_t supervision_timeout = timeout*10;          // in ms
   11cca:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    LOG_INF("Connection parameters updated: interval %.2f ms, latency %d intervals, timeout %d ms", connection_interval, latency, supervision_timeout);
   11cce:	462a      	mov	r2, r5
    uint16_t supervision_timeout = timeout*10;          // in ms
   11cd0:	0064      	lsls	r4, r4, #1
    LOG_INF("Connection parameters updated: interval %.2f ms, latency %d intervals, timeout %d ms", connection_interval, latency, supervision_timeout);
   11cd2:	2306      	movs	r3, #6
   11cd4:	b2a4      	uxth	r4, r4
   11cd6:	e9c5 0106 	strd	r0, r1, [r5, #24]
   11cda:	622e      	str	r6, [r5, #32]
   11cdc:	626c      	str	r4, [r5, #36]	; 0x24
   11cde:	4806      	ldr	r0, [pc, #24]	; (11cf8 <on_le_param_updated+0x54>)
   11ce0:	f842 3f10 	str.w	r3, [r2, #16]!
   11ce4:	f44f 5143 	mov.w	r1, #12480	; 0x30c0
   11ce8:	f014 ffb4 	bl	26c54 <z_log_msg_static_create.constprop.0>
}
   11cec:	46bd      	mov	sp, r7
   11cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11cf0:	0002aa47 	.word	0x0002aa47
   11cf4:	3ff40000 	.word	0x3ff40000
   11cf8:	00029f90 	.word	0x00029f90

00011cfc <uart_work_handler>:
{
   11cfc:	b508      	push	{r3, lr}
	buf = k_malloc(sizeof(*buf));
   11cfe:	201c      	movs	r0, #28
   11d00:	f017 ff79 	bl	29bf6 <k_malloc>
	if (buf) {
   11d04:	b138      	cbz	r0, 11d16 <uart_work_handler+0x1a>
		buf->len = 0;
   11d06:	2300      	movs	r3, #0
   11d08:	8303      	strh	r3, [r0, #24]
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
   11d0a:	1d01      	adds	r1, r0, #4
}
   11d0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
   11d10:	4803      	ldr	r0, [pc, #12]	; (11d20 <uart_work_handler+0x24>)
   11d12:	f014 bfa2 	b.w	26c5a <uart_rx_enable.constprop.0>
}
   11d16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   11d1a:	f7ff bfa9 	b.w	11c70 <uart_work_handler.part.0>
   11d1e:	bf00      	nop
   11d20:	00029d50 	.word	0x00029d50

00011d24 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   11d24:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   11d26:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   11d28:	b08a      	sub	sp, #40	; 0x28
   11d2a:	4604      	mov	r4, r0
   11d2c:	460e      	mov	r6, r1
   11d2e:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   11d30:	2b03      	cmp	r3, #3
   11d32:	d820      	bhi.n	11d76 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
   11d34:	e8df f003 	tbb	[pc, r3]
   11d38:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   11d3c:	4911      	ldr	r1, [pc, #68]	; (11d84 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   11d3e:	4628      	mov	r0, r5
   11d40:	f015 fe33 	bl	279aa <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   11d44:	9505      	str	r5, [sp, #20]
   11d46:	7863      	ldrb	r3, [r4, #1]
   11d48:	9304      	str	r3, [sp, #16]
   11d4a:	78a3      	ldrb	r3, [r4, #2]
   11d4c:	9303      	str	r3, [sp, #12]
   11d4e:	78e3      	ldrb	r3, [r4, #3]
   11d50:	9302      	str	r3, [sp, #8]
   11d52:	7923      	ldrb	r3, [r4, #4]
   11d54:	9301      	str	r3, [sp, #4]
   11d56:	7963      	ldrb	r3, [r4, #5]
   11d58:	9300      	str	r3, [sp, #0]
   11d5a:	79a3      	ldrb	r3, [r4, #6]
   11d5c:	4a0a      	ldr	r2, [pc, #40]	; (11d88 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
   11d5e:	211e      	movs	r1, #30
   11d60:	4630      	mov	r0, r6
   11d62:	f015 f811 	bl	26d88 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   11d66:	b00a      	add	sp, #40	; 0x28
   11d68:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   11d6a:	4908      	ldr	r1, [pc, #32]	; (11d8c <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
   11d6c:	e7e7      	b.n	11d3e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
   11d6e:	4908      	ldr	r1, [pc, #32]	; (11d90 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
   11d70:	e7e5      	b.n	11d3e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
   11d72:	4908      	ldr	r1, [pc, #32]	; (11d94 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
   11d74:	e7e3      	b.n	11d3e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   11d76:	4a08      	ldr	r2, [pc, #32]	; (11d98 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
   11d78:	210a      	movs	r1, #10
   11d7a:	4628      	mov	r0, r5
   11d7c:	f015 f804 	bl	26d88 <snprintk>
		break;
   11d80:	e7e0      	b.n	11d44 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
   11d82:	bf00      	nop
   11d84:	0002aa9c 	.word	0x0002aa9c
   11d88:	0002aabe 	.word	0x0002aabe
   11d8c:	0002aaa3 	.word	0x0002aaa3
   11d90:	0002aaaa 	.word	0x0002aaaa
   11d94:	0002aab4 	.word	0x0002aab4
   11d98:	0002d0ea 	.word	0x0002d0ea

00011d9c <disconnected>:
{
   11d9c:	b5b0      	push	{r4, r5, r7, lr}
   11d9e:	b088      	sub	sp, #32
   11da0:	af00      	add	r7, sp, #0
   11da2:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11da4:	f016 f92c 	bl	28000 <bt_conn_get_dst>
   11da8:	4639      	mov	r1, r7
   11daa:	f7ff ffbb 	bl	11d24 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
   11dae:	466d      	mov	r5, sp
   11db0:	b08a      	sub	sp, #40	; 0x28
   11db2:	466a      	mov	r2, sp
   11db4:	4b11      	ldr	r3, [pc, #68]	; (11dfc <disconnected+0x60>)
   11db6:	61d4      	str	r4, [r2, #28]
   11db8:	e9c2 3705 	strd	r3, r7, [r2, #20]
   11dbc:	f44f 7300 	mov.w	r3, #512	; 0x200
   11dc0:	8413      	strh	r3, [r2, #32]
	if (auth_conn) {
   11dc2:	4c0f      	ldr	r4, [pc, #60]	; (11e00 <disconnected+0x64>)
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
   11dc4:	4b0f      	ldr	r3, [pc, #60]	; (11e04 <disconnected+0x68>)
   11dc6:	4810      	ldr	r0, [pc, #64]	; (11e08 <disconnected+0x6c>)
   11dc8:	f842 3f10 	str.w	r3, [r2, #16]!
   11dcc:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   11dd0:	f014 ff40 	bl	26c54 <z_log_msg_static_create.constprop.0>
	if (auth_conn) {
   11dd4:	6820      	ldr	r0, [r4, #0]
   11dd6:	46ad      	mov	sp, r5
   11dd8:	b118      	cbz	r0, 11de2 <disconnected+0x46>
		bt_conn_unref(auth_conn);
   11dda:	f007 f811 	bl	18e00 <bt_conn_unref>
		auth_conn = NULL;
   11dde:	2300      	movs	r3, #0
   11de0:	6023      	str	r3, [r4, #0]
	if (current_conn) {
   11de2:	4c0a      	ldr	r4, [pc, #40]	; (11e0c <disconnected+0x70>)
   11de4:	6820      	ldr	r0, [r4, #0]
   11de6:	b130      	cbz	r0, 11df6 <disconnected+0x5a>
		bt_conn_unref(current_conn);
   11de8:	f007 f80a 	bl	18e00 <bt_conn_unref>
		current_conn = NULL;
   11dec:	2300      	movs	r3, #0
		dk_set_led_off(CON_STATUS_LED);
   11dee:	2001      	movs	r0, #1
		current_conn = NULL;
   11df0:	6023      	str	r3, [r4, #0]
		dk_set_led_off(CON_STATUS_LED);
   11df2:	f017 fbae 	bl	29552 <dk_set_led_off>
}
   11df6:	3720      	adds	r7, #32
   11df8:	46bd      	mov	sp, r7
   11dfa:	bdb0      	pop	{r4, r5, r7, pc}
   11dfc:	0002aae1 	.word	0x0002aae1
   11e00:	20002f00 	.word	0x20002f00
   11e04:	01000004 	.word	0x01000004
   11e08:	00029f90 	.word	0x00029f90
   11e0c:	20002f04 	.word	0x20002f04

00011e10 <connected>:
{
   11e10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11e14:	b093      	sub	sp, #76	; 0x4c
   11e16:	4680      	mov	r8, r0
   11e18:	af02      	add	r7, sp, #8
	if (err) {
   11e1a:	b191      	cbz	r1, 11e42 <connected+0x32>
		LOG_ERR("Connection failed (err %u)\n", err);
   11e1c:	466c      	mov	r4, sp
   11e1e:	b088      	sub	sp, #32
   11e20:	aa02      	add	r2, sp, #8
   11e22:	4b2c      	ldr	r3, [pc, #176]	; (11ed4 <connected+0xc4>)
   11e24:	e9c2 3105 	strd	r3, r1, [r2, #20]
   		LOG_ERR("bt_conn_get_info() returned %d", err);
   11e28:	2303      	movs	r3, #3
   11e2a:	f842 3f10 	str.w	r3, [r2, #16]!
   11e2e:	482a      	ldr	r0, [pc, #168]	; (11ed8 <connected+0xc8>)
   11e30:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11e34:	f014 ff0e 	bl	26c54 <z_log_msg_static_create.constprop.0>
   11e38:	46a5      	mov	sp, r4
}
   11e3a:	3744      	adds	r7, #68	; 0x44
   11e3c:	46bd      	mov	sp, r7
   11e3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_conn_get_info(conn, &info);
   11e42:	f107 0120 	add.w	r1, r7, #32
   11e46:	f007 fabd 	bl	193c4 <bt_conn_get_info>
	if (err) {
   11e4a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
   11e4e:	d006      	beq.n	11e5e <connected+0x4e>
   		LOG_ERR("bt_conn_get_info() returned %d", err);
   11e50:	466c      	mov	r4, sp
   11e52:	b088      	sub	sp, #32
   11e54:	aa02      	add	r2, sp, #8
   11e56:	4b21      	ldr	r3, [pc, #132]	; (11edc <connected+0xcc>)
   11e58:	e9c2 3005 	strd	r3, r0, [r2, #20]
   11e5c:	e7e4      	b.n	11e28 <connected+0x18>
	double connection_interval = info.le.interval*1.25; // in ms
   11e5e:	8eb8      	ldrh	r0, [r7, #52]	; 0x34
   11e60:	f7ee faa0 	bl	3a4 <__aeabi_i2d>
   11e64:	2200      	movs	r2, #0
   11e66:	4b1e      	ldr	r3, [pc, #120]	; (11ee0 <connected+0xd0>)
   11e68:	f7ee fb06 	bl	478 <__aeabi_dmul>
	uint16_t supervision_timeout = info.le.timeout*10; // in ms
   11e6c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
	double connection_interval = info.le.interval*1.25; // in ms
   11e6e:	4604      	mov	r4, r0
	uint16_t supervision_timeout = info.le.timeout*10; // in ms
   11e70:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11e74:	4640      	mov	r0, r8
	uint16_t supervision_timeout = info.le.timeout*10; // in ms
   11e76:	005e      	lsls	r6, r3, #1
	double connection_interval = info.le.interval*1.25; // in ms
   11e78:	460d      	mov	r5, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11e7a:	f016 f8c1 	bl	28000 <bt_conn_get_dst>
   11e7e:	4639      	mov	r1, r7
   11e80:	f7ff ff50 	bl	11d24 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Connected %s", addr);
   11e84:	46e9      	mov	r9, sp
   11e86:	b088      	sub	sp, #32
	uint16_t supervision_timeout = info.le.timeout*10; // in ms
   11e88:	b2b6      	uxth	r6, r6
	LOG_INF("Connected %s", addr);
   11e8a:	aa02      	add	r2, sp, #8
   11e8c:	4b15      	ldr	r3, [pc, #84]	; (11ee4 <connected+0xd4>)
   11e8e:	4812      	ldr	r0, [pc, #72]	; (11ed8 <connected+0xc8>)
   11e90:	e9c2 3705 	strd	r3, r7, [r2, #20]
   11e94:	f44f 7300 	mov.w	r3, #512	; 0x200
   11e98:	8393      	strh	r3, [r2, #28]
   11e9a:	4b13      	ldr	r3, [pc, #76]	; (11ee8 <connected+0xd8>)
   11e9c:	f842 3f10 	str.w	r3, [r2, #16]!
   11ea0:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
   11ea4:	f014 fed6 	bl	26c54 <z_log_msg_static_create.constprop.0>
	printk("--------------------\nbuffer size %i, connection interval %.2fms, timeout %ims, latency %i\n", CONFIG_BT_NUS_UART_BUFFER_SIZE, connection_interval, supervision_timeout, info.le.latency);
   11ea8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
   11eaa:	4810      	ldr	r0, [pc, #64]	; (11eec <connected+0xdc>)
   11eac:	46cd      	mov	sp, r9
   11eae:	4622      	mov	r2, r4
   11eb0:	2114      	movs	r1, #20
   11eb2:	e9cd 6300 	strd	r6, r3, [sp]
   11eb6:	462b      	mov	r3, r5
   11eb8:	f014 ff59 	bl	26d6e <printk>
	printk(menu);
   11ebc:	480c      	ldr	r0, [pc, #48]	; (11ef0 <connected+0xe0>)
   11ebe:	f014 ff56 	bl	26d6e <printk>
	current_conn = bt_conn_ref(conn);
   11ec2:	4640      	mov	r0, r8
   11ec4:	f006 ff6c 	bl	18da0 <bt_conn_ref>
   11ec8:	4b0a      	ldr	r3, [pc, #40]	; (11ef4 <connected+0xe4>)
   11eca:	6018      	str	r0, [r3, #0]
	dk_set_led_on(CON_STATUS_LED);
   11ecc:	2001      	movs	r0, #1
   11ece:	f017 fb3d 	bl	2954c <dk_set_led_on>
   11ed2:	e7b2      	b.n	11e3a <connected+0x2a>
   11ed4:	0002aafe 	.word	0x0002aafe
   11ed8:	00029f90 	.word	0x00029f90
   11edc:	0002ab1a 	.word	0x0002ab1a
   11ee0:	3ff40000 	.word	0x3ff40000
   11ee4:	0002ab39 	.word	0x0002ab39
   11ee8:	01000003 	.word	0x01000003
   11eec:	0002ab46 	.word	0x0002ab46
   11ef0:	0002aba1 	.word	0x0002aba1
   11ef4:	20002f04 	.word	0x20002f04

00011ef8 <bt_receive_cb>:
#endif

// this method defines teh receiving behavior 
static void bt_receive_cb(struct bt_conn *conn, const uint8_t *const data,
			  uint16_t len) // change priority 
{
   11ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11efc:	b095      	sub	sp, #84	; 0x54
	int err;
	char addr[BT_ADDR_LE_STR_LEN] = {0};
   11efe:	2400      	movs	r4, #0
{
   11f00:	af00      	add	r7, sp, #0
   11f02:	4605      	mov	r5, r0
   11f04:	4688      	mov	r8, r1
   11f06:	4616      	mov	r6, r2
	char addr[BT_ADDR_LE_STR_LEN] = {0};
   11f08:	4621      	mov	r1, r4
   11f0a:	221a      	movs	r2, #26
   11f0c:	f107 0034 	add.w	r0, r7, #52	; 0x34
   11f10:	633c      	str	r4, [r7, #48]	; 0x30
   11f12:	f015 fd96 	bl	27a42 <memset>
	uint8_t out[CONFIG_BT_NUS_UART_BUFFER_SIZE];
	int length;
	// unsigned char *out = k_malloc(64 * sizeof(char));
	// printk("variable out at address 0x_%p\n", out);
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, ARRAY_SIZE(addr));
   11f16:	4628      	mov	r0, r5
   11f18:	f107 0530 	add.w	r5, r7, #48	; 0x30
   11f1c:	f016 f870 	bl	28000 <bt_conn_get_dst>
   11f20:	4629      	mov	r1, r5
   11f22:	f7ff feff 	bl	11d24 <bt_addr_le_to_str.constprop.0.isra.0>
	printk("\n");
   11f26:	4832      	ldr	r0, [pc, #200]	; (11ff0 <bt_receive_cb+0xf8>)
   11f28:	f014 ff21 	bl	26d6e <printk>
	LOG_INF("Received data from: %s", addr);
   11f2c:	46e9      	mov	r9, sp
   11f2e:	b088      	sub	sp, #32
   11f30:	466a      	mov	r2, sp
   11f32:	4b30      	ldr	r3, [pc, #192]	; (11ff4 <bt_receive_cb+0xfc>)
   11f34:	4830      	ldr	r0, [pc, #192]	; (11ff8 <bt_receive_cb+0x100>)
		if(out == (uint8_t)'c'){
			printk("please enter the parameter\n");
		}
		
		if (err) {
			k_fifo_put(&fifo_uart_tx_data, tx);
   11f36:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 12008 <bt_receive_cb+0x110>
	LOG_INF("Received data from: %s", addr);
   11f3a:	e9c2 3505 	strd	r3, r5, [r2, #20]
   11f3e:	f44f 7300 	mov.w	r3, #512	; 0x200
   11f42:	8393      	strh	r3, [r2, #28]
   11f44:	4b2d      	ldr	r3, [pc, #180]	; (11ffc <bt_receive_cb+0x104>)
   11f46:	f842 3f10 	str.w	r3, [r2, #16]!
   11f4a:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
   11f4e:	f014 fe81 	bl	26c54 <z_log_msg_static_create.constprop.0>
   11f52:	46cd      	mov	sp, r9
	for (uint16_t pos = 0; pos != len;) {
   11f54:	42b4      	cmp	r4, r6
   11f56:	d00f      	beq.n	11f78 <bt_receive_cb+0x80>
		struct uart_data_t *tx = k_malloc(sizeof(*tx));
   11f58:	201c      	movs	r0, #28
   11f5a:	f017 fe4c 	bl	29bf6 <k_malloc>
		if (!tx) {
   11f5e:	4605      	mov	r5, r0
   11f60:	b970      	cbnz	r0, 11f80 <bt_receive_cb+0x88>
			LOG_WRN("Not able to allocate UART send data buffer");
   11f62:	4b27      	ldr	r3, [pc, #156]	; (12000 <bt_receive_cb+0x108>)
   11f64:	62fb      	str	r3, [r7, #44]	; 0x2c
   11f66:	4824      	ldr	r0, [pc, #144]	; (11ff8 <bt_receive_cb+0x100>)
   11f68:	2302      	movs	r3, #2
   11f6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
   11f6e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11f72:	62bb      	str	r3, [r7, #40]	; 0x28
   11f74:	f014 fe6e 	bl	26c54 <z_log_msg_static_create.constprop.0>
		}
	}
}
   11f78:	3754      	adds	r7, #84	; 0x54
   11f7a:	46bd      	mov	sp, r7
   11f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((len - pos) > tx_data_size) {
   11f80:	1b32      	subs	r2, r6, r4
   11f82:	2a13      	cmp	r2, #19
			tx->len = (len - pos);
   11f84:	bf94      	ite	ls
   11f86:	b292      	uxthls	r2, r2
			tx->len = tx_data_size;
   11f88:	2213      	movhi	r2, #19
		memcpy(tx->data, &data[pos], tx->len);
   11f8a:	f100 0904 	add.w	r9, r0, #4
   11f8e:	8302      	strh	r2, [r0, #24]
   11f90:	eb08 0104 	add.w	r1, r8, r4
   11f94:	4648      	mov	r0, r9
   11f96:	f015 fd49 	bl	27a2c <memcpy>
		pos += tx->len;
   11f9a:	8b2b      	ldrh	r3, [r5, #24]
   11f9c:	441c      	add	r4, r3
   11f9e:	b2a4      	uxth	r4, r4
		if ((pos == len) && (data[len - 1] == '\r')) {
   11fa0:	42a6      	cmp	r6, r4
   11fa2:	d10a      	bne.n	11fba <bt_receive_cb+0xc2>
   11fa4:	eb08 0206 	add.w	r2, r8, r6
   11fa8:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   11fac:	2a0d      	cmp	r2, #13
   11fae:	d104      	bne.n	11fba <bt_receive_cb+0xc2>
			tx->data[tx->len] = '\n';
   11fb0:	18ea      	adds	r2, r5, r3
   11fb2:	210a      	movs	r1, #10
			tx->len++;
   11fb4:	3301      	adds	r3, #1
			tx->data[tx->len] = '\n';
   11fb6:	7111      	strb	r1, [r2, #4]
			tx->len++;
   11fb8:	832b      	strh	r3, [r5, #24]
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
   11fba:	8b2a      	ldrh	r2, [r5, #24]
   11fbc:	4811      	ldr	r0, [pc, #68]	; (12004 <bt_receive_cb+0x10c>)
   11fbe:	4649      	mov	r1, r9
   11fc0:	f014 fe54 	bl	26c6c <uart_tx.constprop.0>
		memcpy(out, &(tx->data), sizeof(tx->data));
   11fc4:	2214      	movs	r2, #20
   11fc6:	4649      	mov	r1, r9
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
   11fc8:	4682      	mov	sl, r0
		memcpy(out, &(tx->data), sizeof(tx->data));
   11fca:	1d38      	adds	r0, r7, #4
   11fcc:	f015 fd2e 	bl	27a2c <memcpy>
		length = tx->len;
   11fd0:	8b2a      	ldrh	r2, [r5, #24]
		out[length] = NULL;
   11fd2:	f102 0350 	add.w	r3, r2, #80	; 0x50
   11fd6:	19da      	adds	r2, r3, r7
   11fd8:	2100      	movs	r1, #0
   11fda:	f802 1c4c 	strb.w	r1, [r2, #-76]
		if (err) {
   11fde:	f1ba 0f00 	cmp.w	sl, #0
   11fe2:	d0b7      	beq.n	11f54 <bt_receive_cb+0x5c>
			k_fifo_put(&fifo_uart_tx_data, tx);
   11fe4:	4629      	mov	r1, r5
   11fe6:	4658      	mov	r0, fp
   11fe8:	f017 fc45 	bl	29876 <k_queue_append>
   11fec:	e7b2      	b.n	11f54 <bt_receive_cb+0x5c>
   11fee:	bf00      	nop
   11ff0:	0002d49f 	.word	0x0002d49f
   11ff4:	0002abe4 	.word	0x0002abe4
   11ff8:	00029f90 	.word	0x00029f90
   11ffc:	01000003 	.word	0x01000003
   12000:	0002abfb 	.word	0x0002abfb
   12004:	00029d50 	.word	0x00029d50
   12008:	20000a8c 	.word	0x20000a8c

0001200c <uart_cb>:
{
   1200c:	b510      	push	{r4, lr}
	switch (evt->type) {
   1200e:	780b      	ldrb	r3, [r1, #0]
{
   12010:	b086      	sub	sp, #24
	switch (evt->type) {
   12012:	2b05      	cmp	r3, #5
   12014:	d828      	bhi.n	12068 <uart_cb+0x5c>
   12016:	e8df f003 	tbb	[pc, r3]
   1201a:	9503      	.short	0x9503
   1201c:	467a682b 	.word	0x467a682b
		if ((evt->data.tx.len == 0) ||
   12020:	688b      	ldr	r3, [r1, #8]
   12022:	b30b      	cbz	r3, 12068 <uart_cb+0x5c>
		    (!evt->data.tx.buf)) {
   12024:	6848      	ldr	r0, [r1, #4]
		if ((evt->data.tx.len == 0) ||
   12026:	b1f8      	cbz	r0, 12068 <uart_cb+0x5c>
		if (aborted_buf) {
   12028:	4a50      	ldr	r2, [pc, #320]	; (1216c <uart_cb+0x160>)
   1202a:	6813      	ldr	r3, [r2, #0]
   1202c:	b1f3      	cbz	r3, 1206c <uart_cb+0x60>
			buf = CONTAINER_OF(aborted_buf, struct uart_data_t,
   1202e:	1f18      	subs	r0, r3, #4
			aborted_buf = NULL;
   12030:	2300      	movs	r3, #0
   12032:	6013      	str	r3, [r2, #0]
			aborted_len = 0;
   12034:	4a4e      	ldr	r2, [pc, #312]	; (12170 <uart_cb+0x164>)
   12036:	6013      	str	r3, [r2, #0]
		k_free(buf);
   12038:	f017 fdd6 	bl	29be8 <k_free>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (void *) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_QUEUE_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_queue_get(queue, timeout);
   1203c:	484d      	ldr	r0, [pc, #308]	; (12174 <uart_cb+0x168>)
   1203e:	2200      	movs	r2, #0
   12040:	2300      	movs	r3, #0
   12042:	f00e feb9 	bl	20db8 <z_impl_k_queue_get>
		if (!buf) {
   12046:	b178      	cbz	r0, 12068 <uart_cb+0x5c>
		if (uart_tx(uart, buf->data, buf->len, SYS_FOREVER_MS)) {
   12048:	8b02      	ldrh	r2, [r0, #24]
   1204a:	1d01      	adds	r1, r0, #4
   1204c:	484a      	ldr	r0, [pc, #296]	; (12178 <uart_cb+0x16c>)
   1204e:	f014 fe0d 	bl	26c6c <uart_tx.constprop.0>
   12052:	b148      	cbz	r0, 12068 <uart_cb+0x5c>
			LOG_WRN("Failed to send data over UART");
   12054:	4b49      	ldr	r3, [pc, #292]	; (1217c <uart_cb+0x170>)
			LOG_WRN("UART_RX_BUF_REQUEST\nNot able to allocate UART receive buffer");
   12056:	9305      	str	r3, [sp, #20]
   12058:	4849      	ldr	r0, [pc, #292]	; (12180 <uart_cb+0x174>)
   1205a:	2302      	movs	r3, #2
   1205c:	aa04      	add	r2, sp, #16
   1205e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   12062:	9304      	str	r3, [sp, #16]
   12064:	f014 fdf6 	bl	26c54 <z_log_msg_static_create.constprop.0>
}
   12068:	b006      	add	sp, #24
   1206a:	bd10      	pop	{r4, pc}
			buf = CONTAINER_OF(evt->data.tx.buf, struct uart_data_t,
   1206c:	3804      	subs	r0, #4
   1206e:	e7e3      	b.n	12038 <uart_cb+0x2c>
		buf = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data);
   12070:	684a      	ldr	r2, [r1, #4]
		buf->len += evt->data.rx.len;
   12072:	68cb      	ldr	r3, [r1, #12]
   12074:	8a90      	ldrh	r0, [r2, #20]
   12076:	4403      	add	r3, r0
		if (disable_req) {
   12078:	4842      	ldr	r0, [pc, #264]	; (12184 <uart_cb+0x178>)
		buf->len += evt->data.rx.len;
   1207a:	b29b      	uxth	r3, r3
   1207c:	8293      	strh	r3, [r2, #20]
		if (disable_req) {
   1207e:	7802      	ldrb	r2, [r0, #0]
   12080:	2a00      	cmp	r2, #0
   12082:	d1f1      	bne.n	12068 <uart_cb+0x5c>
		if ((evt->data.rx.buf[buf->len - 1] == '\n') ||
   12084:	684a      	ldr	r2, [r1, #4]
   12086:	4413      	add	r3, r2
   12088:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   1208c:	2b0a      	cmp	r3, #10
   1208e:	d001      	beq.n	12094 <uart_cb+0x88>
   12090:	2b0d      	cmp	r3, #13
   12092:	d1e9      	bne.n	12068 <uart_cb+0x5c>
			disable_req = true;
   12094:	2301      	movs	r3, #1
   12096:	7003      	strb	r3, [r0, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->rx_disable(dev);
   12098:	4837      	ldr	r0, [pc, #220]	; (12178 <uart_cb+0x16c>)
   1209a:	6883      	ldr	r3, [r0, #8]
   1209c:	695b      	ldr	r3, [r3, #20]
}
   1209e:	b006      	add	sp, #24
   120a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   120a4:	4718      	bx	r3
		disable_req = false;
   120a6:	4b37      	ldr	r3, [pc, #220]	; (12184 <uart_cb+0x178>)
   120a8:	2400      	movs	r4, #0
		buf = k_malloc(sizeof(*buf));
   120aa:	201c      	movs	r0, #28
		disable_req = false;
   120ac:	701c      	strb	r4, [r3, #0]
		buf = k_malloc(sizeof(*buf));
   120ae:	f017 fda2 	bl	29bf6 <k_malloc>
		if (buf) {
   120b2:	b138      	cbz	r0, 120c4 <uart_cb+0xb8>
			buf->len = 0;
   120b4:	8304      	strh	r4, [r0, #24]
		uart_rx_enable(uart, buf->data, sizeof(buf->data),
   120b6:	1d01      	adds	r1, r0, #4
   120b8:	482f      	ldr	r0, [pc, #188]	; (12178 <uart_cb+0x16c>)
}
   120ba:	b006      	add	sp, #24
   120bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_rx_enable(uart, buf->data, sizeof(buf->data),
   120c0:	f014 bdcb 	b.w	26c5a <uart_rx_enable.constprop.0>
			LOG_WRN("UART_RX_DISABLED\nNot able to allocate UART receive buffer");
   120c4:	4b30      	ldr	r3, [pc, #192]	; (12188 <uart_cb+0x17c>)
   120c6:	9305      	str	r3, [sp, #20]
   120c8:	aa04      	add	r2, sp, #16
   120ca:	2302      	movs	r3, #2
   120cc:	482c      	ldr	r0, [pc, #176]	; (12180 <uart_cb+0x174>)
   120ce:	9304      	str	r3, [sp, #16]
   120d0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   120d4:	f014 fdbe 	bl	26c54 <z_log_msg_static_create.constprop.0>
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
   120d8:	482c      	ldr	r0, [pc, #176]	; (1218c <uart_cb+0x180>)
   120da:	f240 6267 	movw	r2, #1639	; 0x667
   120de:	2300      	movs	r3, #0
}
   120e0:	b006      	add	sp, #24
   120e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
   120e6:	f00f bbe3 	b.w	218b0 <k_work_reschedule>
		buf = k_malloc(sizeof(*buf));
   120ea:	201c      	movs	r0, #28
   120ec:	f017 fd83 	bl	29bf6 <k_malloc>
		if (buf) {
   120f0:	4601      	mov	r1, r0
   120f2:	b150      	cbz	r0, 1210a <uart_cb+0xfe>
			buf->len = 0;
   120f4:	2300      	movs	r3, #0
   120f6:	8303      	strh	r3, [r0, #24]
	return api->rx_buf_rsp(dev, buf, len);
   120f8:	481f      	ldr	r0, [pc, #124]	; (12178 <uart_cb+0x16c>)
   120fa:	6883      	ldr	r3, [r0, #8]
   120fc:	691b      	ldr	r3, [r3, #16]
   120fe:	2214      	movs	r2, #20
   12100:	3104      	adds	r1, #4
}
   12102:	b006      	add	sp, #24
   12104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12108:	4718      	bx	r3
			LOG_WRN("UART_RX_BUF_REQUEST\nNot able to allocate UART receive buffer");
   1210a:	4b21      	ldr	r3, [pc, #132]	; (12190 <uart_cb+0x184>)
   1210c:	e7a3      	b.n	12056 <uart_cb+0x4a>
		buf = CONTAINER_OF(evt->data.rx_buf.buf, struct uart_data_t,
   1210e:	684b      	ldr	r3, [r1, #4]
   12110:	1f1c      	subs	r4, r3, #4
		if (buf->len > 0) {
   12112:	8a9b      	ldrh	r3, [r3, #20]
   12114:	b183      	cbz	r3, 12138 <uart_cb+0x12c>
			LOG_INF("---------------\npushing to fifo\n");
   12116:	4b1f      	ldr	r3, [pc, #124]	; (12194 <uart_cb+0x188>)
   12118:	9305      	str	r3, [sp, #20]
   1211a:	4819      	ldr	r0, [pc, #100]	; (12180 <uart_cb+0x174>)
   1211c:	2302      	movs	r3, #2
   1211e:	aa04      	add	r2, sp, #16
   12120:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   12124:	9304      	str	r3, [sp, #16]
   12126:	f014 fd95 	bl	26c54 <z_log_msg_static_create.constprop.0>
			k_fifo_put(&fifo_uart_rx_data, buf);
   1212a:	481b      	ldr	r0, [pc, #108]	; (12198 <uart_cb+0x18c>)
   1212c:	4621      	mov	r1, r4
}
   1212e:	b006      	add	sp, #24
   12130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_fifo_put(&fifo_uart_rx_data, buf);
   12134:	f017 bb9f 	b.w	29876 <k_queue_append>
			k_free(buf);
   12138:	4620      	mov	r0, r4
}
   1213a:	b006      	add	sp, #24
   1213c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_free(buf);
   12140:	f017 bd52 	b.w	29be8 <k_free>
		if (!aborted_buf) {
   12144:	4a09      	ldr	r2, [pc, #36]	; (1216c <uart_cb+0x160>)
   12146:	6813      	ldr	r3, [r2, #0]
   12148:	b90b      	cbnz	r3, 1214e <uart_cb+0x142>
			aborted_buf = (uint8_t *)evt->data.tx.buf;
   1214a:	684b      	ldr	r3, [r1, #4]
   1214c:	6013      	str	r3, [r2, #0]
		aborted_len += evt->data.tx.len;
   1214e:	4808      	ldr	r0, [pc, #32]	; (12170 <uart_cb+0x164>)
   12150:	688b      	ldr	r3, [r1, #8]
   12152:	6801      	ldr	r1, [r0, #0]
   12154:	440b      	add	r3, r1
		buf = CONTAINER_OF(aborted_buf, struct uart_data_t,
   12156:	6811      	ldr	r1, [r2, #0]
		aborted_len += evt->data.tx.len;
   12158:	6003      	str	r3, [r0, #0]
			buf->len - aborted_len, SYS_FOREVER_MS);
   1215a:	8a8a      	ldrh	r2, [r1, #20]
		uart_tx(uart, &buf->data[aborted_len],
   1215c:	4806      	ldr	r0, [pc, #24]	; (12178 <uart_cb+0x16c>)
   1215e:	1ad2      	subs	r2, r2, r3
   12160:	4419      	add	r1, r3
}
   12162:	b006      	add	sp, #24
   12164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_tx(uart, &buf->data[aborted_len],
   12168:	f014 bd80 	b.w	26c6c <uart_tx.constprop.0>
   1216c:	20002efc 	.word	0x20002efc
   12170:	20002ef8 	.word	0x20002ef8
   12174:	20000a8c 	.word	0x20000a8c
   12178:	00029d50 	.word	0x00029d50
   1217c:	0002ac26 	.word	0x0002ac26
   12180:	00029f90 	.word	0x00029f90
   12184:	20004314 	.word	0x20004314
   12188:	0002ac44 	.word	0x0002ac44
   1218c:	20001938 	.word	0x20001938
   12190:	0002ac7e 	.word	0x0002ac7e
   12194:	0002acbb 	.word	0x0002acbb
   12198:	20000a70 	.word	0x20000a70

0001219c <ble_write_thread>:
		k_sleep(K_MSEC(RUN_LED_BLINK_INTERVAL));
	}
}
/* Define the thread function  */
void ble_write_thread(void)
{
   1219c:	b570      	push	{r4, r5, r6, lr}
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
   1219e:	480c      	ldr	r0, [pc, #48]	; (121d0 <ble_write_thread+0x34>)
	return z_impl_k_queue_get(queue, timeout);
   121a0:	4e0c      	ldr	r6, [pc, #48]	; (121d4 <ble_write_thread+0x38>)
		struct uart_data_t *buf = k_fifo_get(&fifo_uart_rx_data,
						     K_FOREVER);

		// store to string out 
		// *out = buf->data;
		printk("incoming message:\n");
   121a2:	4d0d      	ldr	r5, [pc, #52]	; (121d8 <ble_write_thread+0x3c>)
	return z_impl_k_sem_take(sem, timeout);
   121a4:	f04f 32ff 	mov.w	r2, #4294967295
   121a8:	f04f 33ff 	mov.w	r3, #4294967295
   121ac:	f00e feb2 	bl	20f14 <z_impl_k_sem_take>
	return z_impl_k_queue_get(queue, timeout);
   121b0:	f04f 32ff 	mov.w	r2, #4294967295
   121b4:	f04f 33ff 	mov.w	r3, #4294967295
   121b8:	4630      	mov	r0, r6
   121ba:	f00e fdfd 	bl	20db8 <z_impl_k_queue_get>
   121be:	4604      	mov	r4, r0
   121c0:	4628      	mov	r0, r5
   121c2:	f014 fdd4 	bl	26d6e <printk>
		*/
		
		
		

		k_free(buf);
   121c6:	4620      	mov	r0, r4
   121c8:	f017 fd0e 	bl	29be8 <k_free>
	for (;;) {
   121cc:	e7f0      	b.n	121b0 <ble_write_thread+0x14>
   121ce:	bf00      	nop
   121d0:	20000a40 	.word	0x20000a40
   121d4:	20000a70 	.word	0x20000a70
   121d8:	0002acdc 	.word	0x0002acdc

000121dc <main>:
{
   121dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   121e0:	b089      	sub	sp, #36	; 0x24
	uint8_t *out = k_malloc(sizeof(uint8_t));
   121e2:	2001      	movs	r0, #1
{
   121e4:	af02      	add	r7, sp, #8
	uint8_t *out = k_malloc(sizeof(uint8_t));
   121e6:	f017 fd06 	bl	29bf6 <k_malloc>
	err = dk_leds_init();
   121ea:	f00b ff0f 	bl	1e00c <dk_leds_init>
	if (err) {
   121ee:	b170      	cbz	r0, 1220e <main+0x32>
		LOG_ERR("Cannot init LEDs (err: %d)", err);
   121f0:	466c      	mov	r4, sp
   121f2:	b088      	sub	sp, #32
   121f4:	aa02      	add	r2, sp, #8
   121f6:	4b64      	ldr	r3, [pc, #400]	; (12388 <main+0x1ac>)
   121f8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   121fc:	2303      	movs	r3, #3
   121fe:	f842 3f10 	str.w	r3, [r2, #16]!
   12202:	4862      	ldr	r0, [pc, #392]	; (1238c <main+0x1b0>)
   12204:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12208:	f014 fd24 	bl	26c54 <z_log_msg_static_create.constprop.0>
   1220c:	46a5      	mov	sp, r4
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   1220e:	4e60      	ldr	r6, [pc, #384]	; (12390 <main+0x1b4>)
   12210:	4630      	mov	r0, r6
   12212:	f017 fab7 	bl	29784 <z_device_is_ready>
	if (!device_is_ready(uart)) {
   12216:	b1c0      	cbz	r0, 1224a <main+0x6e>
	rx = k_malloc(sizeof(*rx));
   12218:	201c      	movs	r0, #28
   1221a:	f017 fcec 	bl	29bf6 <k_malloc>
	if (rx) {
   1221e:	4680      	mov	r8, r0
   12220:	b198      	cbz	r0, 1224a <main+0x6e>
		rx->len = 0;
   12222:	2400      	movs	r4, #0
   12224:	8304      	strh	r4, [r0, #24]
	k_work_init_delayable(&uart_work, uart_work_handler);
   12226:	495b      	ldr	r1, [pc, #364]	; (12394 <main+0x1b8>)
   12228:	485b      	ldr	r0, [pc, #364]	; (12398 <main+0x1bc>)
   1222a:	f00f fa25 	bl	21678 <k_work_init_delayable>
	if (api->callback_set == NULL) {
   1222e:	68b3      	ldr	r3, [r6, #8]
   12230:	681b      	ldr	r3, [r3, #0]
   12232:	b963      	cbnz	r3, 1224e <main+0x72>
		LOG_ERR("Cannot initialize UART callback");
   12234:	4b59      	ldr	r3, [pc, #356]	; (1239c <main+0x1c0>)
   12236:	617b      	str	r3, [r7, #20]
   12238:	2302      	movs	r3, #2
   1223a:	4854      	ldr	r0, [pc, #336]	; (1238c <main+0x1b0>)
   1223c:	613b      	str	r3, [r7, #16]
   1223e:	f107 0210 	add.w	r2, r7, #16
   12242:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12246:	f014 fd05 	bl	26c54 <z_log_msg_static_create.constprop.0>
		error();
   1224a:	f014 fd18 	bl	26c7e <error>
	return api->callback_set(dev, callback, user_data);
   1224e:	4954      	ldr	r1, [pc, #336]	; (123a0 <main+0x1c4>)
   12250:	4622      	mov	r2, r4
   12252:	4630      	mov	r0, r6
   12254:	4798      	blx	r3
	if (err) {
   12256:	2800      	cmp	r0, #0
   12258:	d1ec      	bne.n	12234 <main+0x58>
	tx = k_malloc(sizeof(*tx));
   1225a:	201c      	movs	r0, #28
   1225c:	f017 fccb 	bl	29bf6 <k_malloc>
	if (tx) {
   12260:	4605      	mov	r5, r0
   12262:	2800      	cmp	r0, #0
   12264:	d0f1      	beq.n	1224a <main+0x6e>
		pos = snprintf(tx->data, sizeof(tx->data),
   12266:	f100 0904 	add.w	r9, r0, #4
   1226a:	4a4e      	ldr	r2, [pc, #312]	; (123a4 <main+0x1c8>)
   1226c:	2114      	movs	r1, #20
   1226e:	4648      	mov	r0, r9
   12270:	f003 fe06 	bl	15e80 <snprintf>
		if ((pos < 0) || (pos >= sizeof(tx->data))) {
   12274:	2813      	cmp	r0, #19
		pos = snprintf(tx->data, sizeof(tx->data),
   12276:	4604      	mov	r4, r0
		if ((pos < 0) || (pos >= sizeof(tx->data))) {
   12278:	d913      	bls.n	122a2 <main+0xc6>
			k_free(tx);
   1227a:	4628      	mov	r0, r5
   1227c:	f017 fcb4 	bl	29be8 <k_free>
			LOG_ERR("snprintf returned %d", pos);
   12280:	466d      	mov	r5, sp
   12282:	b088      	sub	sp, #32
   12284:	ab02      	add	r3, sp, #8
   12286:	4a48      	ldr	r2, [pc, #288]	; (123a8 <main+0x1cc>)
   12288:	4840      	ldr	r0, [pc, #256]	; (1238c <main+0x1b0>)
   1228a:	e9c3 2405 	strd	r2, r4, [r3, #20]
   1228e:	461a      	mov	r2, r3
   12290:	2303      	movs	r3, #3
   12292:	f842 3f10 	str.w	r3, [r2, #16]!
   12296:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1229a:	f014 fcdb 	bl	26c54 <z_log_msg_static_create.constprop.0>
   1229e:	46ad      	mov	sp, r5
	if (err) {
   122a0:	e7d3      	b.n	1224a <main+0x6e>
		tx->len = pos;
   122a2:	8328      	strh	r0, [r5, #24]
	err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
   122a4:	4602      	mov	r2, r0
   122a6:	4649      	mov	r1, r9
   122a8:	4630      	mov	r0, r6
   122aa:	f014 fcdf 	bl	26c6c <uart_tx.constprop.0>
	if (err) {
   122ae:	b178      	cbz	r0, 122d0 <main+0xf4>
		LOG_ERR("Cannot display welcome message (err: %d)", err);
   122b0:	466c      	mov	r4, sp
   122b2:	b088      	sub	sp, #32
   122b4:	aa02      	add	r2, sp, #8
   122b6:	4b3d      	ldr	r3, [pc, #244]	; (123ac <main+0x1d0>)
   122b8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   122bc:	2303      	movs	r3, #3
   122be:	f842 3f10 	str.w	r3, [r2, #16]!
   122c2:	4832      	ldr	r0, [pc, #200]	; (1238c <main+0x1b0>)
   122c4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   122c8:	f014 fcc4 	bl	26c54 <z_log_msg_static_create.constprop.0>
   122cc:	46a5      	mov	sp, r4
	if (err) {
   122ce:	e7bc      	b.n	1224a <main+0x6e>
	return uart_rx_enable(uart, rx->data, sizeof(rx->data), 50);
   122d0:	f108 0104 	add.w	r1, r8, #4
   122d4:	4630      	mov	r0, r6
   122d6:	f014 fcc0 	bl	26c5a <uart_rx_enable.constprop.0>
	if (err) {
   122da:	2800      	cmp	r0, #0
   122dc:	d1b5      	bne.n	1224a <main+0x6e>
	err = bt_enable(NULL);
   122de:	f005 fbf9 	bl	17ad4 <bt_enable>
	if (err) {
   122e2:	2800      	cmp	r0, #0
   122e4:	d1b1      	bne.n	1224a <main+0x6e>
	LOG_INF("Bluetooth initialized");
   122e6:	4b32      	ldr	r3, [pc, #200]	; (123b0 <main+0x1d4>)
   122e8:	617b      	str	r3, [r7, #20]
   122ea:	2302      	movs	r3, #2
   122ec:	4827      	ldr	r0, [pc, #156]	; (1238c <main+0x1b0>)
   122ee:	613b      	str	r3, [r7, #16]
   122f0:	f107 0210 	add.w	r2, r7, #16
   122f4:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   122f8:	f014 fcac 	bl	26c54 <z_log_msg_static_create.constprop.0>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   122fc:	482d      	ldr	r0, [pc, #180]	; (123b4 <main+0x1d8>)
   122fe:	f00e fdc5 	bl	20e8c <z_impl_k_sem_give>
	err = bt_nus_init(&nus_cb);
   12302:	482d      	ldr	r0, [pc, #180]	; (123b8 <main+0x1dc>)
   12304:	f002 fc6a 	bl	14bdc <bt_nus_init>
	if (err) {
   12308:	b190      	cbz	r0, 12330 <main+0x154>
		LOG_ERR("Failed to initialize UART service (err: %d)", err);
   1230a:	466c      	mov	r4, sp
   1230c:	b088      	sub	sp, #32
   1230e:	aa02      	add	r2, sp, #8
   12310:	4b2a      	ldr	r3, [pc, #168]	; (123bc <main+0x1e0>)
   12312:	e9c2 3005 	strd	r3, r0, [r2, #20]
   12316:	2303      	movs	r3, #3
   12318:	f842 3f10 	str.w	r3, [r2, #16]!
   1231c:	481b      	ldr	r0, [pc, #108]	; (1238c <main+0x1b0>)
   1231e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12322:	f014 fc97 	bl	26c54 <z_log_msg_static_create.constprop.0>
   12326:	46a5      	mov	sp, r4
}
   12328:	371c      	adds	r7, #28
   1232a:	46bd      	mov	sp, r7
   1232c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd,
   12330:	4d23      	ldr	r5, [pc, #140]	; (123c0 <main+0x1e4>)
   12332:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   12334:	463c      	mov	r4, r7
   12336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   12338:	682b      	ldr	r3, [r5, #0]
   1233a:	6023      	str	r3, [r4, #0]
   1233c:	2301      	movs	r3, #1
   1233e:	9300      	str	r3, [sp, #0]
   12340:	4920      	ldr	r1, [pc, #128]	; (123c4 <main+0x1e8>)
   12342:	4b21      	ldr	r3, [pc, #132]	; (123c8 <main+0x1ec>)
   12344:	2202      	movs	r2, #2
   12346:	4638      	mov	r0, r7
   12348:	f006 f8bc 	bl	184c4 <bt_le_adv_start>
	if (err) {
   1234c:	4604      	mov	r4, r0
   1234e:	b178      	cbz	r0, 12370 <main+0x194>
		LOG_ERR("Advertising failed to start (err %d)", err);
   12350:	466d      	mov	r5, sp
   12352:	b088      	sub	sp, #32
   12354:	aa02      	add	r2, sp, #8
   12356:	4b1d      	ldr	r3, [pc, #116]	; (123cc <main+0x1f0>)
   12358:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1235c:	2303      	movs	r3, #3
   1235e:	f842 3f10 	str.w	r3, [r2, #16]!
   12362:	480a      	ldr	r0, [pc, #40]	; (1238c <main+0x1b0>)
   12364:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12368:	f014 fc74 	bl	26c54 <z_log_msg_static_create.constprop.0>
   1236c:	46ad      	mov	sp, r5
		return;
   1236e:	e7db      	b.n	12328 <main+0x14c>
		dk_set_led(RUN_STATUS_LED, (++blink_status) % 2);
   12370:	3401      	adds	r4, #1
   12372:	f004 0101 	and.w	r1, r4, #1
   12376:	2000      	movs	r0, #0
   12378:	f00b fe74 	bl	1e064 <dk_set_led>
	return z_impl_k_sleep(timeout);
   1237c:	2100      	movs	r1, #0
   1237e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   12382:	f010 fbd5 	bl	22b30 <z_impl_k_sleep>
	for (;;) {
   12386:	e7f3      	b.n	12370 <main+0x194>
   12388:	0002acef 	.word	0x0002acef
   1238c:	00029f90 	.word	0x00029f90
   12390:	00029d50 	.word	0x00029d50
   12394:	00011cfd 	.word	0x00011cfd
   12398:	20001938 	.word	0x20001938
   1239c:	0002ad0a 	.word	0x0002ad0a
   123a0:	0001200d 	.word	0x0001200d
   123a4:	0002ad2a 	.word	0x0002ad2a
   123a8:	0002ad38 	.word	0x0002ad38
   123ac:	0002ad4d 	.word	0x0002ad4d
   123b0:	0002ad76 	.word	0x0002ad76
   123b4:	20000a40 	.word	0x20000a40
   123b8:	200005c0 	.word	0x200005c0
   123bc:	0002ad8c 	.word	0x0002ad8c
   123c0:	0002a0b0 	.word	0x0002a0b0
   123c4:	0002a150 	.word	0x0002a150
   123c8:	0002a148 	.word	0x0002a148
   123cc:	0002adb8 	.word	0x0002adb8

000123d0 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   123d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123d4:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   123d6:	0784      	lsls	r4, r0, #30
{
   123d8:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   123da:	f002 0304 	and.w	r3, r2, #4
   123de:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   123e0:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   123e4:	f103 0301 	add.w	r3, r3, #1
   123e8:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
{
   123ec:	9203      	str	r2, [sp, #12]
   123ee:	4605      	mov	r5, r0
   123f0:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   123f2:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
   123f4:	f040 81fb 	bne.w	127ee <cbvprintf_package+0x41e>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   123f8:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   123fa:	b130      	cbz	r0, 1240a <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   123fc:	2907      	cmp	r1, #7
   123fe:	d809      	bhi.n	12414 <cbvprintf_package+0x44>
		return -ENOSPC;
   12400:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   12404:	b011      	add	sp, #68	; 0x44
   12406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   1240a:	f001 0607 	and.w	r6, r1, #7
   1240e:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   12410:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
   12414:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   12416:	f04f 0800 	mov.w	r8, #0
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   1241a:	f04f 32ff 	mov.w	r2, #4294967295
	align = VA_STACK_ALIGN(char *);
   1241e:	f04f 0b04 	mov.w	fp, #4
	s = fmt--;
   12422:	1e59      	subs	r1, r3, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   12424:	f8cd 8010 	str.w	r8, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   12428:	4647      	mov	r7, r8
	bool parsing = false;
   1242a:	4643      	mov	r3, r8
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   1242c:	9201      	str	r2, [sp, #4]
	size = sizeof(char *);
   1242e:	46da      	mov	sl, fp
			if (buf0 != NULL) {
   12430:	b10d      	cbz	r5, 12436 <cbvprintf_package+0x66>
				*(const char **)buf = s;
   12432:	9800      	ldr	r0, [sp, #0]
   12434:	6020      	str	r0, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   12436:	9805      	ldr	r0, [sp, #20]
   12438:	2800      	cmp	r0, #0
   1243a:	f300 80da 	bgt.w	125f2 <cbvprintf_package+0x222>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   1243e:	489b      	ldr	r0, [pc, #620]	; (126ac <cbvprintf_package+0x2dc>)
   12440:	9a00      	ldr	r2, [sp, #0]
   12442:	4282      	cmp	r2, r0
   12444:	d303      	bcc.n	1244e <cbvprintf_package+0x7e>
   12446:	489a      	ldr	r0, [pc, #616]	; (126b0 <cbvprintf_package+0x2e0>)
   12448:	4282      	cmp	r2, r0
   1244a:	f0c0 80d2 	bcc.w	125f2 <cbvprintf_package+0x222>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   1244e:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   12450:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   12454:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   12456:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   1245a:	f140 80e5 	bpl.w	12628 <cbvprintf_package+0x258>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   1245e:	f04f 0c00 	mov.w	ip, #0
   12462:	e0cf      	b.n	12604 <cbvprintf_package+0x234>
			switch (*fmt) {
   12464:	287a      	cmp	r0, #122	; 0x7a
   12466:	d85f      	bhi.n	12528 <cbvprintf_package+0x158>
   12468:	284b      	cmp	r0, #75	; 0x4b
   1246a:	d80c      	bhi.n	12486 <cbvprintf_package+0xb6>
   1246c:	2847      	cmp	r0, #71	; 0x47
   1246e:	d85b      	bhi.n	12528 <cbvprintf_package+0x158>
   12470:	2829      	cmp	r0, #41	; 0x29
   12472:	d82c      	bhi.n	124ce <cbvprintf_package+0xfe>
   12474:	2825      	cmp	r0, #37	; 0x25
   12476:	d054      	beq.n	12522 <cbvprintf_package+0x152>
   12478:	d856      	bhi.n	12528 <cbvprintf_package+0x158>
   1247a:	2820      	cmp	r0, #32
   1247c:	d07a      	beq.n	12574 <cbvprintf_package+0x1a4>
   1247e:	3823      	subs	r0, #35	; 0x23
   12480:	4243      	negs	r3, r0
   12482:	4143      	adcs	r3, r0
   12484:	e076      	b.n	12574 <cbvprintf_package+0x1a4>
   12486:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
   1248a:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
   1248e:	d84b      	bhi.n	12528 <cbvprintf_package+0x158>
   12490:	e8df f00c 	tbb	[pc, ip]
   12494:	4a4a4a70 	.word	0x4a4a4a70
   12498:	4a4a4a4a 	.word	0x4a4a4a4a
   1249c:	4a4a4a4a 	.word	0x4a4a4a4a
   124a0:	4a4a4a4c 	.word	0x4a4a4a4c
   124a4:	4a4a4a4a 	.word	0x4a4a4a4a
   124a8:	4c4a5a4a 	.word	0x4c4a5a4a
   124ac:	5a5a5a4c 	.word	0x5a5a5a4c
   124b0:	4a6d4c70 	.word	0x4a6d4c70
   124b4:	4c184a70 	.word	0x4c184a70
   124b8:	814a4a18 	.word	0x814a4a18
   124bc:	4a4a4c7e 	.word	0x4a4a4c7e
   124c0:	4a4c      	.short	0x4a4c
   124c2:	7e          	.byte	0x7e
   124c3:	00          	.byte	0x00
   124c4:	2000      	movs	r0, #0
   124c6:	2300      	movs	r3, #0
				align = VA_STACK_ALIGN(void *);
   124c8:	f04f 0b04 	mov.w	fp, #4
   124cc:	e03a      	b.n	12544 <cbvprintf_package+0x174>
			switch (*fmt) {
   124ce:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
   124d2:	fa5f fc8c 	uxtb.w	ip, ip
   124d6:	2201      	movs	r2, #1
   124d8:	fa02 fc0c 	lsl.w	ip, r2, ip
   124dc:	ea1c 0f0e 	tst.w	ip, lr
   124e0:	d148      	bne.n	12574 <cbvprintf_package+0x1a4>
   124e2:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
   124e6:	d12f      	bne.n	12548 <cbvprintf_package+0x178>
   124e8:	ea1c 0302 	ands.w	r3, ip, r2
   124ec:	d042      	beq.n	12574 <cbvprintf_package+0x1a4>
		buf = (void *) ROUND_UP(buf, align);
   124ee:	3c01      	subs	r4, #1
   124f0:	445c      	add	r4, fp
   124f2:	f1cb 0c00 	rsb	ip, fp, #0
   124f6:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   124fa:	2d00      	cmp	r5, #0
   124fc:	d060      	beq.n	125c0 <cbvprintf_package+0x1f0>
   124fe:	ebaa 0c05 	sub.w	ip, sl, r5
   12502:	44a4      	add	ip, r4
   12504:	45b4      	cmp	ip, r6
   12506:	f63f af7b 	bhi.w	12400 <cbvprintf_package+0x30>
		if (is_str_arg) {
   1250a:	2800      	cmp	r0, #0
   1250c:	d16a      	bne.n	125e4 <cbvprintf_package+0x214>
		} else if (size == sizeof(int)) {
   1250e:	f1ba 0f04 	cmp.w	sl, #4
   12512:	d145      	bne.n	125a0 <cbvprintf_package+0x1d0>
			int v = va_arg(ap, int);
   12514:	f859 0b04 	ldr.w	r0, [r9], #4
				*(int *)buf = v;
   12518:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
   1251a:	3404      	adds	r4, #4
   1251c:	f04f 0a04 	mov.w	sl, #4
   12520:	e028      	b.n	12574 <cbvprintf_package+0x1a4>
				arg_idx--;
   12522:	9b01      	ldr	r3, [sp, #4]
   12524:	3b01      	subs	r3, #1
   12526:	9301      	str	r3, [sp, #4]
				parsing = false;
   12528:	2300      	movs	r3, #0
				continue;
   1252a:	e023      	b.n	12574 <cbvprintf_package+0x1a4>
				if (fmt[-1] == 'l') {
   1252c:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   12530:	2b6c      	cmp	r3, #108	; 0x6c
   12532:	d132      	bne.n	1259a <cbvprintf_package+0x1ca>
					if (fmt[-2] == 'l') {
   12534:	f811 3c02 	ldrb.w	r3, [r1, #-2]
   12538:	2000      	movs	r0, #0
   1253a:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
   1253c:	4603      	mov	r3, r0
					if (fmt[-2] == 'l') {
   1253e:	d1c3      	bne.n	124c8 <cbvprintf_package+0xf8>
						align = VA_STACK_ALIGN(long long);
   12540:	f04f 0b08 	mov.w	fp, #8
				size = sizeof(void *);
   12544:	46da      	mov	sl, fp
   12546:	e7d2      	b.n	124ee <cbvprintf_package+0x11e>
					v.ld = va_arg(ap, long double);
   12548:	f109 0907 	add.w	r9, r9, #7
   1254c:	f029 0907 	bic.w	r9, r9, #7
				buf = (void *) ROUND_UP(buf, align);
   12550:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
   12552:	e8f9 ab02 	ldrd	sl, fp, [r9], #8
				buf = (void *) ROUND_UP(buf, align);
   12556:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
   1255a:	b135      	cbz	r5, 1256a <cbvprintf_package+0x19a>
					if (BUF_OFFSET + size > len) {
   1255c:	9806      	ldr	r0, [sp, #24]
   1255e:	4420      	add	r0, r4
   12560:	42b0      	cmp	r0, r6
   12562:	f63f af4d 	bhi.w	12400 <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
   12566:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
   1256a:	3408      	adds	r4, #8
				parsing = false;
   1256c:	2300      	movs	r3, #0
			switch (*fmt) {
   1256e:	f04f 0b08 	mov.w	fp, #8
   12572:	46da      	mov	sl, fp
			if (*++fmt == '\0') {
   12574:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   12578:	2800      	cmp	r0, #0
   1257a:	f000 80c0 	beq.w	126fe <cbvprintf_package+0x32e>
			if (!parsing) {
   1257e:	2b00      	cmp	r3, #0
   12580:	f47f af70 	bne.w	12464 <cbvprintf_package+0x94>
				if (*fmt == '%') {
   12584:	2825      	cmp	r0, #37	; 0x25
   12586:	d1f5      	bne.n	12574 <cbvprintf_package+0x1a4>
					arg_idx++;
   12588:	9b01      	ldr	r3, [sp, #4]
   1258a:	3301      	adds	r3, #1
   1258c:	9301      	str	r3, [sp, #4]
					parsing = true;
   1258e:	2301      	movs	r3, #1
				align = VA_STACK_ALIGN(size_t);
   12590:	f04f 0b04 	mov.w	fp, #4
   12594:	e7ed      	b.n	12572 <cbvprintf_package+0x1a2>
			switch (*fmt) {
   12596:	4618      	mov	r0, r3
   12598:	e795      	b.n	124c6 <cbvprintf_package+0xf6>
   1259a:	2000      	movs	r0, #0
				parsing = false;
   1259c:	4603      	mov	r3, r0
   1259e:	e7a6      	b.n	124ee <cbvprintf_package+0x11e>
		} else if (size == sizeof(long long)) {
   125a0:	f1ba 0f08 	cmp.w	sl, #8
   125a4:	f040 809d 	bne.w	126e2 <cbvprintf_package+0x312>
			long long v = va_arg(ap, long long);
   125a8:	f109 0907 	add.w	r9, r9, #7
   125ac:	f029 0907 	bic.w	r9, r9, #7
   125b0:	ecb9 7b02 	vldmia	r9!, {d7}
					*(long long *)buf = v;
   125b4:	ed84 7b00 	vstr	d7, [r4]
			buf += sizeof(long long);
   125b8:	3408      	adds	r4, #8
   125ba:	f04f 0a08 	mov.w	sl, #8
   125be:	e7d9      	b.n	12574 <cbvprintf_package+0x1a4>
		if (is_str_arg) {
   125c0:	b980      	cbnz	r0, 125e4 <cbvprintf_package+0x214>
		} else if (size == sizeof(int)) {
   125c2:	f1ba 0f04 	cmp.w	sl, #4
   125c6:	d102      	bne.n	125ce <cbvprintf_package+0x1fe>
			int v = va_arg(ap, int);
   125c8:	f109 0904 	add.w	r9, r9, #4
			if (buf0 != NULL) {
   125cc:	e7a5      	b.n	1251a <cbvprintf_package+0x14a>
		} else if (size == sizeof(long long)) {
   125ce:	f1ba 0f08 	cmp.w	sl, #8
   125d2:	f040 8086 	bne.w	126e2 <cbvprintf_package+0x312>
			long long v = va_arg(ap, long long);
   125d6:	f109 0907 	add.w	r9, r9, #7
   125da:	f029 0907 	bic.w	r9, r9, #7
   125de:	f109 0908 	add.w	r9, r9, #8
			if (buf0 != NULL) {
   125e2:	e7e9      	b.n	125b8 <cbvprintf_package+0x1e8>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   125e4:	9805      	ldr	r0, [sp, #20]
   125e6:	3801      	subs	r0, #1
   125e8:	9005      	str	r0, [sp, #20]
			s = va_arg(ap, char *);
   125ea:	f859 0b04 	ldr.w	r0, [r9], #4
   125ee:	9000      	str	r0, [sp, #0]
   125f0:	e71e      	b.n	12430 <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
   125f2:	9a03      	ldr	r2, [sp, #12]
   125f4:	0790      	lsls	r0, r2, #30
   125f6:	d54c      	bpl.n	12692 <cbvprintf_package+0x2c2>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   125f8:	eba4 0e05 	sub.w	lr, r4, r5
   125fc:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   12600:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   12604:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   12608:	d31f      	bcc.n	1264a <cbvprintf_package+0x27a>
					__ASSERT(false, "String with too many arguments");
   1260a:	492a      	ldr	r1, [pc, #168]	; (126b4 <cbvprintf_package+0x2e4>)
   1260c:	4a2a      	ldr	r2, [pc, #168]	; (126b8 <cbvprintf_package+0x2e8>)
   1260e:	482b      	ldr	r0, [pc, #172]	; (126bc <cbvprintf_package+0x2ec>)
   12610:	f240 237b 	movw	r3, #635	; 0x27b
   12614:	f014 fde2 	bl	271dc <assert_print>
   12618:	4829      	ldr	r0, [pc, #164]	; (126c0 <cbvprintf_package+0x2f0>)
   1261a:	f014 fddf 	bl	271dc <assert_print>
   1261e:	f240 217b 	movw	r1, #635	; 0x27b
					__ASSERT(false, "str_ptr_pos[] too small");
   12622:	4825      	ldr	r0, [pc, #148]	; (126b8 <cbvprintf_package+0x2e8>)
   12624:	f014 fdd3 	bl	271ce <assert_post_action>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   12628:	2f0f      	cmp	r7, #15
   1262a:	d810      	bhi.n	1264e <cbvprintf_package+0x27e>
				if (buf0 != NULL) {
   1262c:	2d00      	cmp	r5, #0
   1262e:	d04b      	beq.n	126c8 <cbvprintf_package+0x2f8>
					str_ptr_pos[s_idx] = s_ptr_idx;
   12630:	f107 0240 	add.w	r2, r7, #64	; 0x40
   12634:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
   12638:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   1263a:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   1263e:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
   12642:	9804      	ldr	r0, [sp, #16]
   12644:	3001      	adds	r0, #1
   12646:	9004      	str	r0, [sp, #16]
   12648:	e022      	b.n	12690 <cbvprintf_package+0x2c0>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   1264a:	2f0f      	cmp	r7, #15
   1264c:	d90c      	bls.n	12668 <cbvprintf_package+0x298>
					__ASSERT(false, "str_ptr_pos[] too small");
   1264e:	4919      	ldr	r1, [pc, #100]	; (126b4 <cbvprintf_package+0x2e4>)
   12650:	4a19      	ldr	r2, [pc, #100]	; (126b8 <cbvprintf_package+0x2e8>)
   12652:	481a      	ldr	r0, [pc, #104]	; (126bc <cbvprintf_package+0x2ec>)
   12654:	f44f 7320 	mov.w	r3, #640	; 0x280
   12658:	f014 fdc0 	bl	271dc <assert_print>
   1265c:	4819      	ldr	r0, [pc, #100]	; (126c4 <cbvprintf_package+0x2f4>)
   1265e:	f014 fdbd 	bl	271dc <assert_print>
   12662:	f44f 7120 	mov.w	r1, #640	; 0x280
   12666:	e7dc      	b.n	12622 <cbvprintf_package+0x252>
				if (buf0 != NULL) {
   12668:	b1d5      	cbz	r5, 126a0 <cbvprintf_package+0x2d0>
					str_ptr_pos[s_idx] = s_ptr_idx;
   1266a:	f107 0240 	add.w	r2, r7, #64	; 0x40
   1266e:	eb0d 0e02 	add.w	lr, sp, r2
   12672:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
   12674:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   12676:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   1267a:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
   1267e:	f1bc 0f00 	cmp.w	ip, #0
   12682:	d0de      	beq.n	12642 <cbvprintf_package+0x272>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   12684:	f060 007f 	orn	r0, r0, #127	; 0x7f
   12688:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
   1268c:	f108 0801 	add.w	r8, r8, #1
				s_idx++;
   12690:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
   12692:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
   12696:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
   12698:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
   1269a:	f64f 7eda 	movw	lr, #65498	; 0xffda
   1269e:	e769      	b.n	12574 <cbvprintf_package+0x1a4>
				} else if (is_ro) {
   126a0:	f1bc 0f00 	cmp.w	ip, #0
   126a4:	d010      	beq.n	126c8 <cbvprintf_package+0x2f8>
					len += 1;
   126a6:	3601      	adds	r6, #1
   126a8:	e7f2      	b.n	12690 <cbvprintf_package+0x2c0>
   126aa:	bf00      	nop
   126ac:	00029c08 	.word	0x00029c08
   126b0:	0002ed68 	.word	0x0002ed68
   126b4:	0002dab5 	.word	0x0002dab5
   126b8:	0002ae09 	.word	0x0002ae09
   126bc:	0002ae37 	.word	0x0002ae37
   126c0:	0002ae54 	.word	0x0002ae54
   126c4:	0002ae75 	.word	0x0002ae75
				} else if (rws_pos_en) {
   126c8:	9a02      	ldr	r2, [sp, #8]
					len += 2;
   126ca:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
   126cc:	2a00      	cmp	r2, #0
   126ce:	d1df      	bne.n	12690 <cbvprintf_package+0x2c0>
					len += strlen(s) + 1 + 1;
   126d0:	9800      	ldr	r0, [sp, #0]
   126d2:	e9cd 3106 	strd	r3, r1, [sp, #24]
   126d6:	f015 f972 	bl	279be <strlen>
   126da:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
   126de:	4406      	add	r6, r0
   126e0:	e7d6      	b.n	12690 <cbvprintf_package+0x2c0>
			__ASSERT(false, "unexpected size %u", size);
   126e2:	4a44      	ldr	r2, [pc, #272]	; (127f4 <cbvprintf_package+0x424>)
   126e4:	4944      	ldr	r1, [pc, #272]	; (127f8 <cbvprintf_package+0x428>)
   126e6:	4845      	ldr	r0, [pc, #276]	; (127fc <cbvprintf_package+0x42c>)
   126e8:	f240 23c5 	movw	r3, #709	; 0x2c5
   126ec:	f014 fd76 	bl	271dc <assert_print>
   126f0:	4651      	mov	r1, sl
   126f2:	4843      	ldr	r0, [pc, #268]	; (12800 <cbvprintf_package+0x430>)
   126f4:	f014 fd72 	bl	271dc <assert_print>
   126f8:	f240 21c5 	movw	r1, #709	; 0x2c5
   126fc:	e791      	b.n	12622 <cbvprintf_package+0x252>
	if (BUF_OFFSET / sizeof(int) > 255) {
   126fe:	1b63      	subs	r3, r4, r5
   12700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   12704:	d30c      	bcc.n	12720 <cbvprintf_package+0x350>
		__ASSERT(false, "too many format args");
   12706:	493c      	ldr	r1, [pc, #240]	; (127f8 <cbvprintf_package+0x428>)
   12708:	4a3a      	ldr	r2, [pc, #232]	; (127f4 <cbvprintf_package+0x424>)
   1270a:	483c      	ldr	r0, [pc, #240]	; (127fc <cbvprintf_package+0x42c>)
   1270c:	f240 23d1 	movw	r3, #721	; 0x2d1
   12710:	f014 fd64 	bl	271dc <assert_print>
   12714:	483b      	ldr	r0, [pc, #236]	; (12804 <cbvprintf_package+0x434>)
   12716:	f014 fd61 	bl	271dc <assert_print>
   1271a:	f240 21d1 	movw	r1, #721	; 0x2d1
   1271e:	e780      	b.n	12622 <cbvprintf_package+0x252>
	if (buf0 == NULL) {
   12720:	b91d      	cbnz	r5, 1272a <cbvprintf_package+0x35a>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   12722:	f1a6 0408 	sub.w	r4, r6, #8
   12726:	18e0      	adds	r0, r4, r3
   12728:	e66c      	b.n	12404 <cbvprintf_package+0x34>
	if (rws_pos_en) {
   1272a:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
   1272c:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   1272e:	089b      	lsrs	r3, r3, #2
   12730:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   12732:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
   12736:	b1c2      	cbz	r2, 1276a <cbvprintf_package+0x39a>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   12738:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   1273a:	f885 8002 	strb.w	r8, [r5, #2]
	if (s_ro_cnt) {
   1273e:	f1b8 0f00 	cmp.w	r8, #0
   12742:	d005      	beq.n	12750 <cbvprintf_package+0x380>
   12744:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
   12746:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
   12748:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
   1274c:	4297      	cmp	r7, r2
   1274e:	d10e      	bne.n	1276e <cbvprintf_package+0x39e>
		if (BUF_OFFSET + 1 + size > len) {
   12750:	f1c5 0301 	rsb	r3, r5, #1
   12754:	f10d 0920 	add.w	r9, sp, #32
			*buf++ = str_ptr_arg[i];
   12758:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
   1275c:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
   1275e:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
   12762:	4557      	cmp	r7, sl
   12764:	d112      	bne.n	1278c <cbvprintf_package+0x3bc>
	return BUF_OFFSET;
   12766:	1b60      	subs	r0, r4, r5
   12768:	e64c      	b.n	12404 <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   1276a:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   1276c:	e7e5      	b.n	1273a <cbvprintf_package+0x36a>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   1276e:	f810 3b01 	ldrb.w	r3, [r0], #1
   12772:	0619      	lsls	r1, r3, #24
   12774:	d508      	bpl.n	12788 <cbvprintf_package+0x3b8>
			if (BUF_OFFSET + 1 > len) {
   12776:	eb04 0e0c 	add.w	lr, r4, ip
   1277a:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   1277c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   12780:	f63f ae3e 	bhi.w	12400 <cbvprintf_package+0x30>
			*buf++ = pos;
   12784:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
   12788:	3201      	adds	r2, #1
   1278a:	e7df      	b.n	1274c <cbvprintf_package+0x37c>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   1278c:	f1b8 0f00 	cmp.w	r8, #0
   12790:	d003      	beq.n	1279a <cbvprintf_package+0x3ca>
   12792:	f999 2000 	ldrsb.w	r2, [r9]
   12796:	2a00      	cmp	r2, #0
   12798:	db17      	blt.n	127ca <cbvprintf_package+0x3fa>
		if (rws_pos_en) {
   1279a:	9b02      	ldr	r3, [sp, #8]
   1279c:	b1d3      	cbz	r3, 127d4 <cbvprintf_package+0x404>
			*buf++ = str_ptr_arg[i];
   1279e:	f81a 200b 	ldrb.w	r2, [sl, fp]
   127a2:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
   127a6:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
   127a8:	9b01      	ldr	r3, [sp, #4]
   127aa:	1898      	adds	r0, r3, r2
   127ac:	4420      	add	r0, r4
   127ae:	42b0      	cmp	r0, r6
   127b0:	f63f ae26 	bhi.w	12400 <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
   127b4:	f899 0000 	ldrb.w	r0, [r9]
   127b8:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
   127bc:	9900      	ldr	r1, [sp, #0]
   127be:	9203      	str	r2, [sp, #12]
   127c0:	4620      	mov	r0, r4
   127c2:	f015 f933 	bl	27a2c <memcpy>
		buf += size;
   127c6:	9a03      	ldr	r2, [sp, #12]
   127c8:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
   127ca:	f10a 0a01 	add.w	sl, sl, #1
   127ce:	f109 0901 	add.w	r9, r9, #1
   127d2:	e7c6      	b.n	12762 <cbvprintf_package+0x392>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   127d4:	f899 2000 	ldrb.w	r2, [r9]
   127d8:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   127dc:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   127de:	9b02      	ldr	r3, [sp, #8]
   127e0:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
   127e4:	9800      	ldr	r0, [sp, #0]
   127e6:	f015 f8ea 	bl	279be <strlen>
   127ea:	1c42      	adds	r2, r0, #1
   127ec:	e7dc      	b.n	127a8 <cbvprintf_package+0x3d8>
		return -EFAULT;
   127ee:	f06f 000d 	mvn.w	r0, #13
   127f2:	e607      	b.n	12404 <cbvprintf_package+0x34>
   127f4:	0002ae09 	.word	0x0002ae09
   127f8:	0002dab5 	.word	0x0002dab5
   127fc:	0002ae37 	.word	0x0002ae37
   12800:	0002ae8f 	.word	0x0002ae8f
   12804:	0002aea4 	.word	0x0002aea4

00012808 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
   12808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1280c:	b095      	sub	sp, #84	; 0x54
   1280e:	af00      	add	r7, sp, #0
   12810:	e9c7 1208 	strd	r1, r2, [r7, #32]
   12814:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
   12818:	61bb      	str	r3, [r7, #24]
	__ASSERT_NO_MSG(in_packaged != NULL);
   1281a:	4604      	mov	r4, r0
   1281c:	b958      	cbnz	r0, 12836 <cbprintf_package_convert+0x2e>
   1281e:	49a8      	ldr	r1, [pc, #672]	; (12ac0 <cbprintf_package_convert+0x2b8>)
   12820:	4aa8      	ldr	r2, [pc, #672]	; (12ac4 <cbprintf_package_convert+0x2bc>)
   12822:	48a9      	ldr	r0, [pc, #676]	; (12ac8 <cbprintf_package_convert+0x2c0>)
   12824:	f44f 7365 	mov.w	r3, #916	; 0x394
   12828:	f014 fcd8 	bl	271dc <assert_print>
   1282c:	f44f 7165 	mov.w	r1, #916	; 0x394
			continue;
		}

		if (is_ro) {
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
   12830:	48a4      	ldr	r0, [pc, #656]	; (12ac4 <cbprintf_package_convert+0x2bc>)
   12832:	f014 fccc 	bl	271ce <assert_post_action>
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
   12836:	f3cb 03c0 	ubfx	r3, fp, #3, #1
   1283a:	613b      	str	r3, [r7, #16]
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   1283c:	6a3b      	ldr	r3, [r7, #32]
   1283e:	b953      	cbnz	r3, 12856 <cbprintf_package_convert+0x4e>
	buf += ros_nbr;
   12840:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
   12842:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
   12844:	7880      	ldrb	r0, [r0, #2]
   12846:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1284a:	4420      	add	r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
   1284c:	6a3b      	ldr	r3, [r7, #32]
   1284e:	429e      	cmp	r6, r3
   12850:	d81a      	bhi.n	12888 <cbprintf_package_convert+0x80>
	return (size_t)(uintptr_t)(buf - start);
   12852:	1b03      	subs	r3, r0, r4
   12854:	623b      	str	r3, [r7, #32]
	ros_nbr = in_desc->ro_str_cnt;
   12856:	f894 a002 	ldrb.w	sl, [r4, #2]
	rws_nbr = in_desc->rw_str_cnt;
   1285a:	78e3      	ldrb	r3, [r4, #3]
   1285c:	617b      	str	r3, [r7, #20]
	ros_nbr = in_desc->ro_str_cnt;
   1285e:	4656      	mov	r6, sl
	ro_cpy = ros_nbr &&
   12860:	f1ba 0f00 	cmp.w	sl, #0
   12864:	d002      	beq.n	1286c <cbprintf_package_convert+0x64>
   12866:	f01b 0f01 	tst.w	fp, #1
   1286a:	d117      	bne.n	1289c <cbprintf_package_convert+0x94>
	rw_cpy = rws_nbr > 0 &&
   1286c:	697b      	ldr	r3, [r7, #20]
   1286e:	bb5b      	cbnz	r3, 128c8 <cbprintf_package_convert+0xc0>
		if (cb) {
   12870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12872:	b11b      	cbz	r3, 1287c <cbprintf_package_convert+0x74>
			cb(in_packaged, in_len, ctx);
   12874:	69ba      	ldr	r2, [r7, #24]
   12876:	6a39      	ldr	r1, [r7, #32]
   12878:	4620      	mov	r0, r4
   1287a:	4798      	blx	r3
		return in_len;
   1287c:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
   1287e:	4628      	mov	r0, r5
   12880:	3754      	adds	r7, #84	; 0x54
   12882:	46bd      	mov	sp, r7
   12884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
   12888:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
   1288a:	4628      	mov	r0, r5
   1288c:	f015 f897 	bl	279be <strlen>
	for (unsigned int i = 0; i < s_nbr; i++) {
   12890:	6a3b      	ldr	r3, [r7, #32]
		buf += strlen((const char *)buf) + 1;
   12892:	3001      	adds	r0, #1
	for (unsigned int i = 0; i < s_nbr; i++) {
   12894:	3301      	adds	r3, #1
		buf += strlen((const char *)buf) + 1;
   12896:	4428      	add	r0, r5
	for (unsigned int i = 0; i < s_nbr; i++) {
   12898:	623b      	str	r3, [r7, #32]
   1289a:	e7d7      	b.n	1284c <cbprintf_package_convert+0x44>
	rw_cpy = rws_nbr > 0 &&
   1289c:	f894 8000 	ldrb.w	r8, [r4]
   128a0:	6863      	ldr	r3, [r4, #4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   128a2:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   128a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
   128a6:	ea4f 0288 	mov.w	r2, r8, lsl #2
   128aa:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
   128ac:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
   128b0:	2b00      	cmp	r3, #0
   128b2:	f040 8115 	bne.w	12ae0 <cbprintf_package_convert+0x2d8>
		out_len = (int)in_len;
   128b6:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
   128b8:	46c1      	mov	r9, r8
   128ba:	eb0a 0308 	add.w	r3, sl, r8
	size_t strl_cnt = 0;
   128be:	2600      	movs	r6, #0
			for (unsigned int i = 0; i < ros_nbr; i++) {
   128c0:	4599      	cmp	r9, r3
   128c2:	d14e      	bne.n	12962 <cbprintf_package_convert+0x15a>
   128c4:	44d0      	add	r8, sl
   128c6:	e013      	b.n	128f0 <cbprintf_package_convert+0xe8>
	rw_cpy = rws_nbr > 0 &&
   128c8:	f01b 0f02 	tst.w	fp, #2
   128cc:	d0d0      	beq.n	12870 <cbprintf_package_convert+0x68>
	args_size = in_desc->len * sizeof(int);
   128ce:	f894 8000 	ldrb.w	r8, [r4]
   128d2:	ea4f 0388 	mov.w	r3, r8, lsl #2
   128d6:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   128d8:	6863      	ldr	r3, [r4, #4]
   128da:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   128dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
   128de:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
   128e2:	2b00      	cmp	r3, #0
   128e4:	d178      	bne.n	129d8 <cbprintf_package_convert+0x1d0>
		out_len = (int)in_len;
   128e6:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   128e8:	f1ba 0f00 	cmp.w	sl, #0
   128ec:	d14e      	bne.n	1298c <cbprintf_package_convert+0x184>
	size_t strl_cnt = 0;
   128ee:	4656      	mov	r6, sl
		for (unsigned int i = 0; i < rws_nbr; i++) {
   128f0:	f01b 0f05 	tst.w	fp, #5
   128f4:	bf0c      	ite	eq
   128f6:	2302      	moveq	r3, #2
   128f8:	2301      	movne	r3, #1
   128fa:	627b      	str	r3, [r7, #36]	; 0x24
   128fc:	697b      	ldr	r3, [r7, #20]
   128fe:	eb08 0a43 	add.w	sl, r8, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   12902:	f00b 0302 	and.w	r3, fp, #2
   12906:	623b      	str	r3, [r7, #32]
		for (unsigned int i = 0; i < rws_nbr; i++) {
   12908:	45d0      	cmp	r8, sl
   1290a:	d0b8      	beq.n	1287e <cbprintf_package_convert+0x76>
			uint8_t arg_idx = *str_pos++;
   1290c:	f818 1b02 	ldrb.w	r1, [r8], #2
			const char *str = *(const char **)&buf32[arg_pos];
   12910:	f818 3c01 	ldrb.w	r3, [r8, #-1]
   12914:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
   12918:	4b6c      	ldr	r3, [pc, #432]	; (12acc <cbprintf_package_convert+0x2c4>)
   1291a:	4599      	cmp	r9, r3
   1291c:	d302      	bcc.n	12924 <cbprintf_package_convert+0x11c>
   1291e:	4b6c      	ldr	r3, [pc, #432]	; (12ad0 <cbprintf_package_convert+0x2c8>)
   12920:	4599      	cmp	r9, r3
   12922:	d339      	bcc.n	12998 <cbprintf_package_convert+0x190>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   12924:	693b      	ldr	r3, [r7, #16]
   12926:	2b00      	cmp	r3, #0
   12928:	d043      	beq.n	129b2 <cbprintf_package_convert+0x1aa>
   1292a:	69f8      	ldr	r0, [r7, #28]
   1292c:	f014 f9e3 	bl	26cf6 <is_ptr>
   12930:	2800      	cmp	r0, #0
   12932:	d03e      	beq.n	129b2 <cbprintf_package_convert+0x1aa>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   12934:	46e9      	mov	r9, sp
   12936:	b08a      	sub	sp, #40	; 0x28
   12938:	466a      	mov	r2, sp
   1293a:	4b66      	ldr	r3, [pc, #408]	; (12ad4 <cbprintf_package_convert+0x2cc>)
   1293c:	6153      	str	r3, [r2, #20]
   1293e:	69fb      	ldr	r3, [r7, #28]
   12940:	e9c2 3106 	strd	r3, r1, [r2, #24]
   12944:	f44f 7300 	mov.w	r3, #512	; 0x200
   12948:	8413      	strh	r3, [r2, #32]
   1294a:	4b63      	ldr	r3, [pc, #396]	; (12ad8 <cbprintf_package_convert+0x2d0>)
   1294c:	f842 3f10 	str.w	r3, [r2, #16]!
   12950:	4862      	ldr	r0, [pc, #392]	; (12adc <cbprintf_package_convert+0x2d4>)
   12952:	2300      	movs	r3, #0
   12954:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   12958:	f001 fb94 	bl	14084 <z_impl_z_log_msg_static_create>
				out_len -= 2;
   1295c:	3d02      	subs	r5, #2
   1295e:	46cd      	mov	sp, r9
				continue;
   12960:	e7d2      	b.n	12908 <cbprintf_package_convert+0x100>
				const char *str = *(const char **)&buf32[*str_pos];
   12962:	f819 2b01 	ldrb.w	r2, [r9], #1
   12966:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
   12968:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
   1296c:	f015 f827 	bl	279be <strlen>
				if (strl && strl_cnt < strl_len) {
   12970:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   12972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
   12974:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
   12976:	b13a      	cbz	r2, 12988 <cbprintf_package_convert+0x180>
   12978:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   1297c:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
   1297e:	bf3e      	ittt	cc
   12980:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
   12982:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
   12986:	3601      	addcc	r6, #1
				out_len += len;
   12988:	4405      	add	r5, r0
			for (unsigned int i = 0; i < ros_nbr; i++) {
   1298a:	e799      	b.n	128c0 <cbprintf_package_convert+0xb8>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   1298c:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
   12990:	bf1c      	itt	ne
   12992:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
   12994:	44d0      	addne	r8, sl
   12996:	e7ab      	b.n	128f0 <cbprintf_package_convert+0xe8>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   12998:	693b      	ldr	r3, [r7, #16]
   1299a:	b123      	cbz	r3, 129a6 <cbprintf_package_convert+0x19e>
   1299c:	69f8      	ldr	r0, [r7, #28]
   1299e:	f014 f9aa 	bl	26cf6 <is_ptr>
   129a2:	2800      	cmp	r0, #0
   129a4:	d1c6      	bne.n	12934 <cbprintf_package_convert+0x12c>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   129a6:	f01b 0f01 	tst.w	fp, #1
   129aa:	d105      	bne.n	129b8 <cbprintf_package_convert+0x1b0>
					out_len -= drop_ro_str_pos ? 2 : 1;
   129ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   129ae:	1aed      	subs	r5, r5, r3
   129b0:	e7aa      	b.n	12908 <cbprintf_package_convert+0x100>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   129b2:	6a3b      	ldr	r3, [r7, #32]
   129b4:	2b00      	cmp	r3, #0
   129b6:	d0a7      	beq.n	12908 <cbprintf_package_convert+0x100>
		return 1 + strlen(str);
   129b8:	4648      	mov	r0, r9
   129ba:	f015 f800 	bl	279be <strlen>
				if (strl && strl_cnt < strl_len) {
   129be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   129c0:	b143      	cbz	r3, 129d4 <cbprintf_package_convert+0x1cc>
   129c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   129c6:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
   129c8:	bf3f      	itttt	cc
   129ca:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
   129cc:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
   129ce:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
   129d2:	3601      	addcc	r6, #1
				out_len += (len - 1);
   129d4:	4405      	add	r5, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
   129d6:	e797      	b.n	12908 <cbprintf_package_convert+0x100>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   129d8:	f1ba 0f00 	cmp.w	sl, #0
   129dc:	f000 8085 	beq.w	12aea <cbprintf_package_convert+0x2e2>
   129e0:	f01b 0604 	ands.w	r6, fp, #4
   129e4:	f000 8084 	beq.w	12af0 <cbprintf_package_convert+0x2e8>
		keep_cnt = ros_nbr;
   129e8:	46d1      	mov	r9, sl
		scpy_cnt = 0;
   129ea:	2600      	movs	r6, #0
		dst = keep_str_pos;
   129ec:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
   129f0:	4652      	mov	r2, sl
   129f2:	4641      	mov	r1, r8
   129f4:	f015 f81a 	bl	27a2c <memcpy>
	str_pos += ros_nbr;
   129f8:	697b      	ldr	r3, [r7, #20]
   129fa:	005b      	lsls	r3, r3, #1
   129fc:	60bb      	str	r3, [r7, #8]
   129fe:	697b      	ldr	r3, [r7, #20]
   12a00:	44d0      	add	r8, sl
	for (unsigned int i = 0; i < rws_nbr; i++) {
   12a02:	eb08 0343 	add.w	r3, r8, r3, lsl #1
   12a06:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   12a08:	f00b 0302 	and.w	r3, fp, #2
   12a0c:	607b      	str	r3, [r7, #4]
	for (unsigned int i = 0; i < rws_nbr; i++) {
   12a0e:	697b      	ldr	r3, [r7, #20]
   12a10:	4598      	cmp	r8, r3
   12a12:	d16f      	bne.n	12af4 <cbprintf_package_convert+0x2ec>
	out_desc.len = in_desc->len;
   12a14:	7823      	ldrb	r3, [r4, #0]
   12a16:	617b      	str	r3, [r7, #20]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   12a18:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   12a1a:	f01b 0f02 	tst.w	fp, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   12a1e:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   12a22:	bf0c      	ite	eq
   12a24:	ea4f 0159 	moveq.w	r1, r9, lsr #1
   12a28:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   12a2a:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   12a2e:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   12a30:	f040 80e3 	bne.w	12bfa <cbprintf_package_convert+0x3f2>
   12a34:	f01b 0f04 	tst.w	fp, #4
   12a38:	bf14      	ite	ne
   12a3a:	4648      	movne	r0, r9
   12a3c:	2000      	moveq	r0, #0
   12a3e:	613b      	str	r3, [r7, #16]
	struct cbprintf_package_desc in_desc_backup = *in_desc;
   12a40:	78a3      	ldrb	r3, [r4, #2]
   12a42:	f894 b003 	ldrb.w	fp, [r4, #3]
   12a46:	61fb      	str	r3, [r7, #28]
	*in_desc = out_desc;
   12a48:	7062      	strb	r2, [r4, #1]
   12a4a:	70a0      	strb	r0, [r4, #2]
   12a4c:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
   12a4e:	69ba      	ldr	r2, [r7, #24]
   12a50:	68f9      	ldr	r1, [r7, #12]
   12a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12a54:	4620      	mov	r0, r4
   12a56:	4798      	blx	r3
	if (rv < 0) {
   12a58:	1e05      	subs	r5, r0, #0
   12a5a:	f6ff af10 	blt.w	1287e <cbprintf_package_convert+0x76>
	*in_desc = in_desc_backup;
   12a5e:	697b      	ldr	r3, [r7, #20]
   12a60:	7023      	strb	r3, [r4, #0]
   12a62:	693b      	ldr	r3, [r7, #16]
   12a64:	7063      	strb	r3, [r4, #1]
   12a66:	69fb      	ldr	r3, [r7, #28]
   12a68:	70a3      	strb	r3, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   12a6a:	4649      	mov	r1, r9
   12a6c:	69ba      	ldr	r2, [r7, #24]
   12a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
   12a70:	f884 b003 	strb.w	fp, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   12a74:	f107 0040 	add.w	r0, r7, #64	; 0x40
   12a78:	4798      	blx	r3
	if (rv < 0) {
   12a7a:	f1b0 0900 	subs.w	r9, r0, #0
   12a7e:	f2c0 80e9 	blt.w	12c54 <cbprintf_package_convert+0x44c>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   12a82:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
   12a84:	69ba      	ldr	r2, [r7, #24]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   12a86:	eba3 010a 	sub.w	r1, r3, sl
   12a8a:	68fb      	ldr	r3, [r7, #12]
   12a8c:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
   12a8e:	68bb      	ldr	r3, [r7, #8]
   12a90:	4640      	mov	r0, r8
   12a92:	1ac9      	subs	r1, r1, r3
   12a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12a96:	4798      	blx	r3
	if (rv < 0) {
   12a98:	2800      	cmp	r0, #0
   12a9a:	f2c0 80dd 	blt.w	12c58 <cbprintf_package_convert+0x450>
	out_len += rv;
   12a9e:	eb05 0809 	add.w	r8, r5, r9
	out_len += rv;
   12aa2:	eb08 0500 	add.w	r5, r8, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
   12aa6:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
   12aaa:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (unsigned int i = 0; i < scpy_cnt; i++) {
   12aae:	45b3      	cmp	fp, r6
   12ab0:	f0c0 80a5 	bcc.w	12bfe <cbprintf_package_convert+0x3f6>
	(void)cb(NULL, 0, ctx);
   12ab4:	2100      	movs	r1, #0
   12ab6:	69ba      	ldr	r2, [r7, #24]
   12ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12aba:	4608      	mov	r0, r1
   12abc:	4798      	blx	r3
	return out_len;
   12abe:	e6de      	b.n	1287e <cbprintf_package_convert+0x76>
   12ac0:	0002aebb 	.word	0x0002aebb
   12ac4:	0002ae09 	.word	0x0002ae09
   12ac8:	0002ae37 	.word	0x0002ae37
   12acc:	00029c08 	.word	0x00029c08
   12ad0:	0002ed68 	.word	0x0002ed68
   12ad4:	0002aed6 	.word	0x0002aed6
   12ad8:	01000004 	.word	0x01000004
   12adc:	0002a018 	.word	0x0002a018
	if (cb == NULL) {
   12ae0:	f04f 0900 	mov.w	r9, #0
   12ae4:	f107 0030 	add.w	r0, r7, #48	; 0x30
   12ae8:	e782      	b.n	129f0 <cbprintf_package_convert+0x1e8>
		scpy_cnt = 0;
   12aea:	4656      	mov	r6, sl
		keep_cnt = 0;
   12aec:	46d1      	mov	r9, sl
   12aee:	e783      	b.n	129f8 <cbprintf_package_convert+0x1f0>
   12af0:	46b1      	mov	r9, r6
   12af2:	e781      	b.n	129f8 <cbprintf_package_convert+0x1f0>
		uint8_t arg_idx = *str_pos++;
   12af4:	f818 1b02 	ldrb.w	r1, [r8], #2
   12af8:	4b58      	ldr	r3, [pc, #352]	; (12c5c <cbprintf_package_convert+0x454>)
		uint8_t arg_pos = *str_pos++;
   12afa:	f818 5c01 	ldrb.w	r5, [r8, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
   12afe:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
   12b02:	429a      	cmp	r2, r3
   12b04:	d302      	bcc.n	12b0c <cbprintf_package_convert+0x304>
   12b06:	4b56      	ldr	r3, [pc, #344]	; (12c60 <cbprintf_package_convert+0x458>)
   12b08:	429a      	cmp	r2, r3
   12b0a:	d316      	bcc.n	12b3a <cbprintf_package_convert+0x332>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   12b0c:	693b      	ldr	r3, [r7, #16]
   12b0e:	b12b      	cbz	r3, 12b1c <cbprintf_package_convert+0x314>
   12b10:	69f8      	ldr	r0, [r7, #28]
   12b12:	f014 f8f0 	bl	26cf6 <is_ptr>
   12b16:	2800      	cmp	r0, #0
   12b18:	f47f af79 	bne.w	12a0e <cbprintf_package_convert+0x206>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   12b1c:	687b      	ldr	r3, [r7, #4]
   12b1e:	2b00      	cmp	r3, #0
   12b20:	d04a      	beq.n	12bb8 <cbprintf_package_convert+0x3b0>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
   12b22:	2e0f      	cmp	r6, #15
   12b24:	d93e      	bls.n	12ba4 <cbprintf_package_convert+0x39c>
   12b26:	494f      	ldr	r1, [pc, #316]	; (12c64 <cbprintf_package_convert+0x45c>)
   12b28:	4a4f      	ldr	r2, [pc, #316]	; (12c68 <cbprintf_package_convert+0x460>)
   12b2a:	4850      	ldr	r0, [pc, #320]	; (12c6c <cbprintf_package_convert+0x464>)
   12b2c:	f44f 6389 	mov.w	r3, #1096	; 0x448
   12b30:	f014 fb54 	bl	271dc <assert_print>
   12b34:	f44f 6189 	mov.w	r1, #1096	; 0x448
   12b38:	e67a      	b.n	12830 <cbprintf_package_convert+0x28>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   12b3a:	693b      	ldr	r3, [r7, #16]
   12b3c:	b12b      	cbz	r3, 12b4a <cbprintf_package_convert+0x342>
   12b3e:	69f8      	ldr	r0, [r7, #28]
   12b40:	f014 f8d9 	bl	26cf6 <is_ptr>
   12b44:	2800      	cmp	r0, #0
   12b46:	f47f af62 	bne.w	12a0e <cbprintf_package_convert+0x206>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   12b4a:	f01b 0f01 	tst.w	fp, #1
   12b4e:	d00b      	beq.n	12b68 <cbprintf_package_convert+0x360>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
   12b50:	2e0f      	cmp	r6, #15
   12b52:	d927      	bls.n	12ba4 <cbprintf_package_convert+0x39c>
   12b54:	4943      	ldr	r1, [pc, #268]	; (12c64 <cbprintf_package_convert+0x45c>)
   12b56:	4a44      	ldr	r2, [pc, #272]	; (12c68 <cbprintf_package_convert+0x460>)
   12b58:	4844      	ldr	r0, [pc, #272]	; (12c6c <cbprintf_package_convert+0x464>)
   12b5a:	f240 433e 	movw	r3, #1086	; 0x43e
   12b5e:	f014 fb3d 	bl	271dc <assert_print>
   12b62:	f240 413e 	movw	r1, #1086	; 0x43e
   12b66:	e663      	b.n	12830 <cbprintf_package_convert+0x28>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   12b68:	f01b 0f04 	tst.w	fp, #4
   12b6c:	f43f af4f 	beq.w	12a0e <cbprintf_package_convert+0x206>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
   12b70:	f1b9 0f0f 	cmp.w	r9, #15
   12b74:	d909      	bls.n	12b8a <cbprintf_package_convert+0x382>
   12b76:	493e      	ldr	r1, [pc, #248]	; (12c70 <cbprintf_package_convert+0x468>)
   12b78:	4a3b      	ldr	r2, [pc, #236]	; (12c68 <cbprintf_package_convert+0x460>)
   12b7a:	483c      	ldr	r0, [pc, #240]	; (12c6c <cbprintf_package_convert+0x464>)
   12b7c:	f240 4341 	movw	r3, #1089	; 0x441
   12b80:	f014 fb2c 	bl	271dc <assert_print>
   12b84:	f240 4141 	movw	r1, #1089	; 0x441
   12b88:	e652      	b.n	12830 <cbprintf_package_convert+0x28>
				keep_str_pos[keep_cnt++] = arg_pos;
   12b8a:	f109 0328 	add.w	r3, r9, #40	; 0x28
   12b8e:	f107 0128 	add.w	r1, r7, #40	; 0x28
   12b92:	f109 0201 	add.w	r2, r9, #1
   12b96:	eb03 0901 	add.w	r9, r3, r1
   12b9a:	f809 5c10 	strb.w	r5, [r9, #-16]
   12b9e:	fa5f f982 	uxtb.w	r9, r2
   12ba2:	e734      	b.n	12a0e <cbprintf_package_convert+0x206>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   12ba4:	f106 0328 	add.w	r3, r6, #40	; 0x28
   12ba8:	f107 0128 	add.w	r1, r7, #40	; 0x28
   12bac:	1c72      	adds	r2, r6, #1
   12bae:	185e      	adds	r6, r3, r1
   12bb0:	f806 5c20 	strb.w	r5, [r6, #-32]
   12bb4:	b2d6      	uxtb	r6, r2
   12bb6:	e72a      	b.n	12a0e <cbprintf_package_convert+0x206>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
   12bb8:	f1b9 0f0f 	cmp.w	r9, #15
   12bbc:	d909      	bls.n	12bd2 <cbprintf_package_convert+0x3ca>
   12bbe:	492c      	ldr	r1, [pc, #176]	; (12c70 <cbprintf_package_convert+0x468>)
   12bc0:	4a29      	ldr	r2, [pc, #164]	; (12c68 <cbprintf_package_convert+0x460>)
   12bc2:	482a      	ldr	r0, [pc, #168]	; (12c6c <cbprintf_package_convert+0x464>)
   12bc4:	f240 434b 	movw	r3, #1099	; 0x44b
   12bc8:	f014 fb08 	bl	271dc <assert_print>
   12bcc:	f240 414b 	movw	r1, #1099	; 0x44b
   12bd0:	e62e      	b.n	12830 <cbprintf_package_convert+0x28>
				keep_str_pos[keep_cnt++] = arg_idx;
   12bd2:	f109 0328 	add.w	r3, r9, #40	; 0x28
   12bd6:	f107 0028 	add.w	r0, r7, #40	; 0x28
   12bda:	f109 0201 	add.w	r2, r9, #1
   12bde:	1818      	adds	r0, r3, r0
				keep_str_pos[keep_cnt++] = arg_pos;
   12be0:	f107 0350 	add.w	r3, r7, #80	; 0x50
   12be4:	fa53 f282 	uxtab	r2, r3, r2
   12be8:	f109 0902 	add.w	r9, r9, #2
				keep_str_pos[keep_cnt++] = arg_idx;
   12bec:	f800 1c10 	strb.w	r1, [r0, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
   12bf0:	fa5f f989 	uxtb.w	r9, r9
   12bf4:	f802 5c10 	strb.w	r5, [r2, #-16]
	for (unsigned int i = 0; i < rws_nbr; i++) {
   12bf8:	e709      	b.n	12a0e <cbprintf_package_convert+0x206>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   12bfa:	2000      	movs	r0, #0
   12bfc:	e71f      	b.n	12a3e <cbprintf_package_convert+0x236>
		uint8_t loc = cpy_str_pos[i];
   12bfe:	f81b 300a 	ldrb.w	r3, [fp, sl]
   12c02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *str = *(const char **)&buf32[loc];
   12c06:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
   12c0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   12c0c:	b1fb      	cbz	r3, 12c4e <cbprintf_package_convert+0x446>
   12c0e:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
   12c12:	69ba      	ldr	r2, [r7, #24]
   12c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12c16:	2101      	movs	r1, #1
   12c18:	f107 002f 	add.w	r0, r7, #47	; 0x2f
   12c1c:	4798      	blx	r3
		if (rv < 0) {
   12c1e:	2800      	cmp	r0, #0
   12c20:	db1a      	blt.n	12c58 <cbprintf_package_convert+0x450>
		out_len += rv;
   12c22:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   12c24:	f1b8 0f00 	cmp.w	r8, #0
   12c28:	d106      	bne.n	12c38 <cbprintf_package_convert+0x430>
   12c2a:	4648      	mov	r0, r9
   12c2c:	f014 fec7 	bl	279be <strlen>
   12c30:	f100 0801 	add.w	r8, r0, #1
   12c34:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
   12c38:	69ba      	ldr	r2, [r7, #24]
   12c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12c3c:	4641      	mov	r1, r8
   12c3e:	4648      	mov	r0, r9
   12c40:	4798      	blx	r3
		if (rv < 0) {
   12c42:	2800      	cmp	r0, #0
   12c44:	db08      	blt.n	12c58 <cbprintf_package_convert+0x450>
		out_len += rv;
   12c46:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
   12c48:	f10b 0b01 	add.w	fp, fp, #1
   12c4c:	e72f      	b.n	12aae <cbprintf_package_convert+0x2a6>
		uint16_t str_len = strl ? strl[i] : 0;
   12c4e:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
   12c52:	e7de      	b.n	12c12 <cbprintf_package_convert+0x40a>
   12c54:	464d      	mov	r5, r9
   12c56:	e612      	b.n	1287e <cbprintf_package_convert+0x76>
   12c58:	4605      	mov	r5, r0
   12c5a:	e610      	b.n	1287e <cbprintf_package_convert+0x76>
   12c5c:	00029c08 	.word	0x00029c08
   12c60:	0002ed68 	.word	0x0002ed68
   12c64:	0002af79 	.word	0x0002af79
   12c68:	0002ae09 	.word	0x0002ae09
   12c6c:	0002ae37 	.word	0x0002ae37
   12c70:	0002af98 	.word	0x0002af98

00012c74 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
   12c74:	4b01      	ldr	r3, [pc, #4]	; (12c7c <__printk_hook_install+0x8>)
   12c76:	6018      	str	r0, [r3, #0]
}
   12c78:	4770      	bx	lr
   12c7a:	bf00      	nop
   12c7c:	200005cc 	.word	0x200005cc

00012c80 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   12c80:	b530      	push	{r4, r5, lr}
   12c82:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   12c84:	2500      	movs	r5, #0
   12c86:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   12c8a:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   12c8c:	9500      	str	r5, [sp, #0]
   12c8e:	a903      	add	r1, sp, #12
   12c90:	4805      	ldr	r0, [pc, #20]	; (12ca8 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   12c92:	9505      	str	r5, [sp, #20]
   12c94:	f7fe f980 	bl	10f98 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   12c98:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   12c9c:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   12c9e:	bfb8      	it	lt
   12ca0:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   12ca2:	b007      	add	sp, #28
   12ca4:	bd30      	pop	{r4, r5, pc}
   12ca6:	bf00      	nop
   12ca8:	00026d45 	.word	0x00026d45

00012cac <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   12cac:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
   12cae:	460c      	mov	r4, r1
   12cb0:	2900      	cmp	r1, #0
   12cb2:	d034      	beq.n	12d1e <sys_heap_free+0x72>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   12cb4:	6802      	ldr	r2, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   12cb6:	1f0b      	subs	r3, r1, #4
   12cb8:	1a9b      	subs	r3, r3, r2
   12cba:	08d9      	lsrs	r1, r3, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   12cbc:	f023 0307 	bic.w	r3, r3, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   12cc0:	4413      	add	r3, r2
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   12cc2:	885d      	ldrh	r5, [r3, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   12cc4:	07e8      	lsls	r0, r5, #31
   12cc6:	d40d      	bmi.n	12ce4 <sys_heap_free+0x38>
   12cc8:	4a15      	ldr	r2, [pc, #84]	; (12d20 <sys_heap_free+0x74>)
   12cca:	4916      	ldr	r1, [pc, #88]	; (12d24 <sys_heap_free+0x78>)
   12ccc:	4816      	ldr	r0, [pc, #88]	; (12d28 <sys_heap_free+0x7c>)
   12cce:	23af      	movs	r3, #175	; 0xaf
   12cd0:	f014 fa84 	bl	271dc <assert_print>
   12cd4:	4621      	mov	r1, r4
   12cd6:	4815      	ldr	r0, [pc, #84]	; (12d2c <sys_heap_free+0x80>)
   12cd8:	f014 fa80 	bl	271dc <assert_print>
   12cdc:	21af      	movs	r1, #175	; 0xaf
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   12cde:	4810      	ldr	r0, [pc, #64]	; (12d20 <sys_heap_free+0x74>)
   12ce0:	f014 fa75 	bl	271ce <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   12ce4:	4610      	mov	r0, r2
   12ce6:	f014 f866 	bl	26db6 <chunk_size>
   12cea:	4408      	add	r0, r1
		return ((uint16_t *)cmem)[f];
   12cec:	f832 6030 	ldrh.w	r6, [r2, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   12cf0:	1b80      	subs	r0, r0, r6
   12cf2:	4281      	cmp	r1, r0
   12cf4:	d00b      	beq.n	12d0e <sys_heap_free+0x62>
   12cf6:	4a0a      	ldr	r2, [pc, #40]	; (12d20 <sys_heap_free+0x74>)
   12cf8:	490d      	ldr	r1, [pc, #52]	; (12d30 <sys_heap_free+0x84>)
   12cfa:	480b      	ldr	r0, [pc, #44]	; (12d28 <sys_heap_free+0x7c>)
   12cfc:	23b7      	movs	r3, #183	; 0xb7
   12cfe:	f014 fa6d 	bl	271dc <assert_print>
   12d02:	4621      	mov	r1, r4
   12d04:	480b      	ldr	r0, [pc, #44]	; (12d34 <sys_heap_free+0x88>)
   12d06:	f014 fa69 	bl	271dc <assert_print>
   12d0a:	21b7      	movs	r1, #183	; 0xb7
   12d0c:	e7e7      	b.n	12cde <sys_heap_free+0x32>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   12d0e:	f025 0501 	bic.w	r5, r5, #1
   12d12:	805d      	strh	r5, [r3, #2]
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
}
   12d14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
   12d18:	4610      	mov	r0, r2
   12d1a:	f014 b909 	b.w	26f30 <free_chunk>
}
   12d1e:	bd70      	pop	{r4, r5, r6, pc}
   12d20:	0002afc9 	.word	0x0002afc9
   12d24:	0002afea 	.word	0x0002afea
   12d28:	0002ae37 	.word	0x0002ae37
   12d2c:	0002affb 	.word	0x0002affb
   12d30:	0002b033 	.word	0x0002b033
   12d34:	0002b059 	.word	0x0002b059

00012d38 <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   12d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12d3c:	1e4b      	subs	r3, r1, #1
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   12d3e:	400b      	ands	r3, r1
	struct z_heap *h = heap->heap;
   12d40:	6806      	ldr	r6, [r0, #0]
{
   12d42:	460f      	mov	r7, r1
   12d44:	4614      	mov	r4, r2
	if (align != rew) {
   12d46:	d011      	beq.n	12d6c <sys_heap_aligned_alloc+0x34>
	rew = align & -align;
   12d48:	f1c1 0900 	rsb	r9, r1, #0
   12d4c:	ea09 0901 	and.w	r9, r9, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   12d50:	464a      	mov	r2, r9
   12d52:	2a04      	cmp	r2, #4
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   12d54:	f103 31ff 	add.w	r1, r3, #4294967295
		gap = MIN(rew, chunk_header_bytes(h));
   12d58:	bf28      	it	cs
   12d5a:	2204      	movcs	r2, #4
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   12d5c:	4219      	tst	r1, r3
   12d5e:	d10c      	bne.n	12d7a <sys_heap_aligned_alloc+0x42>
   12d60:	461f      	mov	r7, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
   12d62:	b9e4      	cbnz	r4, 12d9e <sys_heap_aligned_alloc+0x66>
		return NULL;
   12d64:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   12d66:	4628      	mov	r0, r5
   12d68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   12d6c:	2904      	cmp	r1, #4
   12d6e:	d813      	bhi.n	12d98 <sys_heap_aligned_alloc+0x60>
}
   12d70:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   12d74:	4611      	mov	r1, r2
   12d76:	f014 b90c 	b.w	26f92 <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   12d7a:	492c      	ldr	r1, [pc, #176]	; (12e2c <sys_heap_aligned_alloc+0xf4>)
   12d7c:	4a2c      	ldr	r2, [pc, #176]	; (12e30 <sys_heap_aligned_alloc+0xf8>)
   12d7e:	482d      	ldr	r0, [pc, #180]	; (12e34 <sys_heap_aligned_alloc+0xfc>)
   12d80:	f44f 73a2 	mov.w	r3, #324	; 0x144
   12d84:	f014 fa2a 	bl	271dc <assert_print>
   12d88:	482b      	ldr	r0, [pc, #172]	; (12e38 <sys_heap_aligned_alloc+0x100>)
   12d8a:	f014 fa27 	bl	271dc <assert_print>
   12d8e:	4828      	ldr	r0, [pc, #160]	; (12e30 <sys_heap_aligned_alloc+0xf8>)
   12d90:	f44f 71a2 	mov.w	r1, #324	; 0x144
   12d94:	f014 fa1b 	bl	271ce <assert_post_action>
		rew = 0;
   12d98:	4699      	mov	r9, r3
		gap = chunk_header_bytes(h);
   12d9a:	2204      	movs	r2, #4
   12d9c:	e7e1      	b.n	12d62 <sys_heap_aligned_alloc+0x2a>
	if (bytes == 0 || size_too_big(h, bytes)) {
   12d9e:	68b3      	ldr	r3, [r6, #8]
   12da0:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   12da4:	d9de      	bls.n	12d64 <sys_heap_aligned_alloc+0x2c>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   12da6:	f104 010b 	add.w	r1, r4, #11
   12daa:	4439      	add	r1, r7
   12dac:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   12dae:	08c9      	lsrs	r1, r1, #3
   12db0:	4630      	mov	r0, r6
   12db2:	f014 f856 	bl	26e62 <alloc_chunk>
	if (c0 == 0) {
   12db6:	4680      	mov	r8, r0
   12db8:	2800      	cmp	r0, #0
   12dba:	d0d3      	beq.n	12d64 <sys_heap_aligned_alloc+0x2c>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   12dbc:	f109 0504 	add.w	r5, r9, #4
   12dc0:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   12dc4:	1e7b      	subs	r3, r7, #1
   12dc6:	4435      	add	r5, r6
   12dc8:	441d      	add	r5, r3
   12dca:	427f      	negs	r7, r7
   12dcc:	403d      	ands	r5, r7
   12dce:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   12dd2:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   12dd4:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   12dd6:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   12dd8:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   12dda:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   12dde:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   12de0:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   12de4:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   12de8:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   12dec:	d208      	bcs.n	12e00 <sys_heap_aligned_alloc+0xc8>
		split_chunks(h, c0, c);
   12dee:	4601      	mov	r1, r0
   12df0:	463a      	mov	r2, r7
   12df2:	4630      	mov	r0, r6
   12df4:	f014 f882 	bl	26efc <split_chunks>
		free_list_add(h, c0);
   12df8:	4641      	mov	r1, r8
   12dfa:	4630      	mov	r0, r6
   12dfc:	f013 ffe0 	bl	26dc0 <free_list_add>
	return c + chunk_size(h, c);
   12e00:	4639      	mov	r1, r7
   12e02:	4630      	mov	r0, r6
   12e04:	f013 ffd7 	bl	26db6 <chunk_size>
   12e08:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   12e0a:	4284      	cmp	r4, r0
   12e0c:	d207      	bcs.n	12e1e <sys_heap_aligned_alloc+0xe6>
		split_chunks(h, c, c_end);
   12e0e:	4630      	mov	r0, r6
   12e10:	4622      	mov	r2, r4
   12e12:	f014 f873 	bl	26efc <split_chunks>
		free_list_add(h, c_end);
   12e16:	4621      	mov	r1, r4
   12e18:	4630      	mov	r0, r6
   12e1a:	f013 ffd1 	bl	26dc0 <free_list_add>
	void *cmem = &buf[c];
   12e1e:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   12e22:	8873      	ldrh	r3, [r6, #2]
   12e24:	f043 0301 	orr.w	r3, r3, #1
   12e28:	8073      	strh	r3, [r6, #2]
   12e2a:	e79c      	b.n	12d66 <sys_heap_aligned_alloc+0x2e>
   12e2c:	0002b095 	.word	0x0002b095
   12e30:	0002afc9 	.word	0x0002afc9
   12e34:	0002ae37 	.word	0x0002ae37
   12e38:	0002b0b0 	.word	0x0002b0b0

00012e3c <sys_heap_init>:
{
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   12e3c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
   12e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12e42:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   12e44:	d30e      	bcc.n	12e64 <sys_heap_init+0x28>
   12e46:	493b      	ldr	r1, [pc, #236]	; (12f34 <sys_heap_init+0xf8>)
   12e48:	4a3b      	ldr	r2, [pc, #236]	; (12f38 <sys_heap_init+0xfc>)
   12e4a:	483c      	ldr	r0, [pc, #240]	; (12f3c <sys_heap_init+0x100>)
   12e4c:	f240 13eb 	movw	r3, #491	; 0x1eb
   12e50:	f014 f9c4 	bl	271dc <assert_print>
   12e54:	483a      	ldr	r0, [pc, #232]	; (12f40 <sys_heap_init+0x104>)
   12e56:	f014 f9c1 	bl	271dc <assert_print>
   12e5a:	f240 11eb 	movw	r1, #491	; 0x1eb
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   12e5e:	4836      	ldr	r0, [pc, #216]	; (12f38 <sys_heap_init+0xfc>)
   12e60:	f014 f9b5 	bl	271ce <assert_post_action>
   12e64:	2a04      	cmp	r2, #4
   12e66:	d80c      	bhi.n	12e82 <sys_heap_init+0x46>
   12e68:	4936      	ldr	r1, [pc, #216]	; (12f44 <sys_heap_init+0x108>)
   12e6a:	4a33      	ldr	r2, [pc, #204]	; (12f38 <sys_heap_init+0xfc>)
   12e6c:	4833      	ldr	r0, [pc, #204]	; (12f3c <sys_heap_init+0x100>)
   12e6e:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
   12e72:	f014 f9b3 	bl	271dc <assert_print>
   12e76:	4834      	ldr	r0, [pc, #208]	; (12f48 <sys_heap_init+0x10c>)
   12e78:	f014 f9b0 	bl	271dc <assert_print>
   12e7c:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   12e80:	e7ed      	b.n	12e5e <sys_heap_init+0x22>
	bytes -= heap_footer_bytes(bytes);
   12e82:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   12e84:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   12e86:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   12e88:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   12e8c:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   12e90:	1a12      	subs	r2, r2, r0

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   12e92:	2a17      	cmp	r2, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   12e94:	ea4f 03d2 	mov.w	r3, r2, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   12e98:	d80c      	bhi.n	12eb4 <sys_heap_init+0x78>
   12e9a:	492c      	ldr	r1, [pc, #176]	; (12f4c <sys_heap_init+0x110>)
   12e9c:	4a26      	ldr	r2, [pc, #152]	; (12f38 <sys_heap_init+0xfc>)
   12e9e:	4827      	ldr	r0, [pc, #156]	; (12f3c <sys_heap_init+0x100>)
   12ea0:	f240 13fb 	movw	r3, #507	; 0x1fb
   12ea4:	f014 f99a 	bl	271dc <assert_print>
   12ea8:	4827      	ldr	r0, [pc, #156]	; (12f48 <sys_heap_init+0x10c>)
   12eaa:	f014 f997 	bl	271dc <assert_print>
   12eae:	f240 11fb 	movw	r1, #507	; 0x1fb
   12eb2:	e7d4      	b.n	12e5e <sys_heap_init+0x22>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   12eb4:	fab3 f183 	clz	r1, r3
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   12eb8:	f1c1 0620 	rsb	r6, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   12ebc:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
   12ec0:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   12ec2:	3107      	adds	r1, #7
   12ec4:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   12ec6:	1c4d      	adds	r5, r1, #1
	heap->heap = h;
   12ec8:	6020      	str	r0, [r4, #0]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   12eca:	429d      	cmp	r5, r3
	h->avail_buckets = 0;
   12ecc:	f04f 0400 	mov.w	r4, #0
	h->end_chunk = heap_sz;
   12ed0:	6083      	str	r3, [r0, #8]
	h->avail_buckets = 0;
   12ed2:	60c4      	str	r4, [r0, #12]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   12ed4:	d90c      	bls.n	12ef0 <sys_heap_init+0xb4>
   12ed6:	491e      	ldr	r1, [pc, #120]	; (12f50 <sys_heap_init+0x114>)
   12ed8:	4a17      	ldr	r2, [pc, #92]	; (12f38 <sys_heap_init+0xfc>)
   12eda:	4818      	ldr	r0, [pc, #96]	; (12f3c <sys_heap_init+0x100>)
   12edc:	f44f 7303 	mov.w	r3, #524	; 0x20c
   12ee0:	f014 f97c 	bl	271dc <assert_print>
   12ee4:	4818      	ldr	r0, [pc, #96]	; (12f48 <sys_heap_init+0x10c>)
   12ee6:	f014 f979 	bl	271dc <assert_print>
   12eea:	f44f 7103 	mov.w	r1, #524	; 0x20c
   12eee:	e7b6      	b.n	12e5e <sys_heap_init+0x22>
   12ef0:	f100 050c 	add.w	r5, r0, #12
   12ef4:	eb05 0686 	add.w	r6, r5, r6, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   12ef8:	f845 4f04 	str.w	r4, [r5, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   12efc:	42b5      	cmp	r5, r6
   12efe:	d1fb      	bne.n	12ef8 <sys_heap_init+0xbc>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   12f00:	004d      	lsls	r5, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   12f02:	f045 0501 	orr.w	r5, r5, #1
   12f06:	8045      	strh	r5, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   12f08:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   12f0c:	1a5d      	subs	r5, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   12f0e:	006f      	lsls	r7, r5, #1
		((uint16_t *)cmem)[f] = val;
   12f10:	8004      	strh	r4, [r0, #0]
   12f12:	8077      	strh	r7, [r6, #2]
   12f14:	1886      	adds	r6, r0, r2
   12f16:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   12f1a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   12f1e:	8074      	strh	r4, [r6, #2]
   12f20:	5285      	strh	r5, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   12f22:	885a      	ldrh	r2, [r3, #2]
   12f24:	f042 0201 	orr.w	r2, r2, #1
   12f28:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   12f2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   12f2e:	f013 bf47 	b.w	26dc0 <free_list_add>
   12f32:	bf00      	nop
   12f34:	0002b0cd 	.word	0x0002b0cd
   12f38:	0002afc9 	.word	0x0002afc9
   12f3c:	0002ae37 	.word	0x0002ae37
   12f40:	0002b0e3 	.word	0x0002b0e3
   12f44:	0002b0fa 	.word	0x0002b0fa
   12f48:	0002b11b 	.word	0x0002b11b
   12f4c:	0002b134 	.word	0x0002b134
   12f50:	0002b15d 	.word	0x0002b15d

00012f54 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   12f54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f58:	4604      	mov	r4, r0
   12f5a:	4608      	mov	r0, r1
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12f5c:	8ba3      	ldrh	r3, [r4, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   12f5e:	0719      	lsls	r1, r3, #28
{
   12f60:	4615      	mov	r5, r2
	if (processing) {
   12f62:	d412      	bmi.n	12f8a <process_event+0x36>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   12f64:	2802      	cmp	r0, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12f66:	f003 0107 	and.w	r1, r3, #7
		if (evt == EVT_RECHECK) {
   12f6a:	d164      	bne.n	13036 <process_event+0xe2>
			evt = process_recheck(mgr);
   12f6c:	4620      	mov	r0, r4
   12f6e:	f014 f839 	bl	26fe4 <process_recheck>
		}

		if (evt == EVT_NOP) {
   12f72:	b188      	cbz	r0, 12f98 <process_event+0x44>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   12f74:	3801      	subs	r0, #1
   12f76:	2804      	cmp	r0, #4
   12f78:	f200 8134 	bhi.w	131e4 <process_event+0x290>
   12f7c:	e8df f010 	tbh	[pc, r0, lsl #1]
   12f80:	0132005b 	.word	0x0132005b
   12f84:	00d10081 	.word	0x00d10081
   12f88:	0101      	.short	0x0101
		if (evt == EVT_COMPLETE) {
   12f8a:	2801      	cmp	r0, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   12f8c:	bf0c      	ite	eq
   12f8e:	f043 0110 	orreq.w	r1, r3, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12f92:	f043 0120 	orrne.w	r1, r3, #32
   12f96:	83a1      	strh	r1, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
   12f98:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12f9a:	4620      	mov	r0, r4
   12f9c:	f00d fcca 	bl	20934 <z_spin_unlock_valid>
   12fa0:	2800      	cmp	r0, #0
   12fa2:	f040 819b 	bne.w	132dc <process_event+0x388>
   12fa6:	4998      	ldr	r1, [pc, #608]	; (13208 <process_event+0x2b4>)
   12fa8:	4a98      	ldr	r2, [pc, #608]	; (1320c <process_event+0x2b8>)
   12faa:	4899      	ldr	r0, [pc, #612]	; (13210 <process_event+0x2bc>)
   12fac:	23c2      	movs	r3, #194	; 0xc2
   12fae:	f014 f915 	bl	271dc <assert_print>
   12fb2:	4621      	mov	r1, r4
   12fb4:	e0b0      	b.n	13118 <process_event+0x1c4>
   12fb6:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   12fba:	1f50      	subs	r0, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   12fbc:	2801      	cmp	r0, #1
   12fbe:	d81e      	bhi.n	12ffe <process_event+0xaa>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   12fc0:	2000      	movs	r0, #0
		if (state == ONOFF_STATE_TO_ON) {
   12fc2:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   12fc4:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   12fc6:	e9c4 0000 	strd	r0, r0, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   12fca:	d114      	bne.n	12ff6 <process_event+0xa2>
		*clients = mgr->clients;
   12fcc:	463a      	mov	r2, r7
   12fce:	e003      	b.n	12fd8 <process_event+0x84>
				mgr->refs += 1U;
   12fd0:	8be0      	ldrh	r0, [r4, #30]
   12fd2:	3001      	adds	r0, #1
   12fd4:	83e0      	strh	r0, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   12fd6:	6812      	ldr	r2, [r2, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   12fd8:	2a00      	cmp	r2, #0
   12fda:	d1f9      	bne.n	12fd0 <process_event+0x7c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12fdc:	f023 0307 	bic.w	r3, r3, #7
   12fe0:	f043 0202 	orr.w	r2, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   12fe4:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   12fe6:	4620      	mov	r0, r4
   12fe8:	f013 fffc 	bl	26fe4 <process_recheck>
   12fec:	b390      	cbz	r0, 13054 <process_event+0x100>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12fee:	f042 0220 	orr.w	r2, r2, #32
   12ff2:	83a2      	strh	r2, [r4, #28]
   12ff4:	e02e      	b.n	13054 <process_event+0x100>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12ff6:	f023 0307 	bic.w	r3, r3, #7
   12ffa:	b29a      	uxth	r2, r3
}
   12ffc:	e7f2      	b.n	12fe4 <process_event+0x90>
	} else if (state == ONOFF_STATE_TO_OFF) {
   12ffe:	2a04      	cmp	r2, #4
   13000:	d133      	bne.n	1306a <process_event+0x116>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   13002:	f023 0307 	bic.w	r3, r3, #7
   13006:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   13008:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   1300a:	4620      	mov	r0, r4
   1300c:	f013 ffea 	bl	26fe4 <process_recheck>
   13010:	b110      	cbz	r0, 13018 <process_event+0xc4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   13012:	f042 0220 	orr.w	r2, r2, #32
   13016:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   13018:	8ba3      	ldrh	r3, [r4, #28]
   1301a:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1301e:	4589      	cmp	r9, r1
   13020:	f040 80ea 	bne.w	131f8 <process_event+0x2a4>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   13024:	8ba1      	ldrh	r1, [r4, #28]
   13026:	06ca      	lsls	r2, r1, #27
   13028:	f140 814f 	bpl.w	132ca <process_event+0x376>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   1302c:	f021 0310 	bic.w	r3, r1, #16
   13030:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   13032:	f001 0107 	and.w	r1, r1, #7
			res = mgr->last_res;
   13036:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1303a:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   1303c:	f1b8 0f00 	cmp.w	r8, #0
   13040:	dab9      	bge.n	12fb6 <process_event+0x62>
	list->head = NULL;
   13042:	2200      	movs	r2, #0
		*clients = mgr->clients;
   13044:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   13046:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   1304a:	e9c4 2200 	strd	r2, r2, [r4]
   1304e:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   13052:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   13054:	8ba3      	ldrh	r3, [r4, #28]
   13056:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1305a:	4589      	cmp	r9, r1
   1305c:	f040 80cd 	bne.w	131fa <process_event+0x2a6>
		    || !sys_slist_is_empty(&clients)
   13060:	2f00      	cmp	r7, #0
   13062:	d0df      	beq.n	13024 <process_event+0xd0>
   13064:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   13066:	46b2      	mov	sl, r6
   13068:	e044      	b.n	130f4 <process_event+0x1a0>
		__ASSERT_NO_MSG(false);
   1306a:	496a      	ldr	r1, [pc, #424]	; (13214 <process_event+0x2c0>)
   1306c:	4a6a      	ldr	r2, [pc, #424]	; (13218 <process_event+0x2c4>)
   1306e:	4868      	ldr	r0, [pc, #416]	; (13210 <process_event+0x2bc>)
   13070:	f240 131b 	movw	r3, #283	; 0x11b
   13074:	f014 f8b2 	bl	271dc <assert_print>
   13078:	f240 111b 	movw	r1, #283	; 0x11b
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   1307c:	4866      	ldr	r0, [pc, #408]	; (13218 <process_event+0x2c4>)
   1307e:	f014 f8a6 	bl	271ce <assert_post_action>
   13082:	b149      	cbz	r1, 13098 <process_event+0x144>
   13084:	4965      	ldr	r1, [pc, #404]	; (1321c <process_event+0x2c8>)
   13086:	4a64      	ldr	r2, [pc, #400]	; (13218 <process_event+0x2c4>)
   13088:	4861      	ldr	r0, [pc, #388]	; (13210 <process_event+0x2bc>)
   1308a:	f44f 73ab 	mov.w	r3, #342	; 0x156
   1308e:	f014 f8a5 	bl	271dc <assert_print>
   13092:	f44f 71ab 	mov.w	r1, #342	; 0x156
   13096:	e7f1      	b.n	1307c <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   13098:	6823      	ldr	r3, [r4, #0]
   1309a:	b94b      	cbnz	r3, 130b0 <process_event+0x15c>
   1309c:	4960      	ldr	r1, [pc, #384]	; (13220 <process_event+0x2cc>)
   1309e:	4a5e      	ldr	r2, [pc, #376]	; (13218 <process_event+0x2c4>)
   130a0:	485b      	ldr	r0, [pc, #364]	; (13210 <process_event+0x2bc>)
   130a2:	f240 1357 	movw	r3, #343	; 0x157
   130a6:	f014 f899 	bl	271dc <assert_print>
   130aa:	f240 1157 	movw	r1, #343	; 0x157
   130ae:	e7e5      	b.n	1307c <process_event+0x128>
			transit = mgr->transitions->start;
   130b0:	6923      	ldr	r3, [r4, #16]
   130b2:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
   130b4:	b94e      	cbnz	r6, 130ca <process_event+0x176>
   130b6:	495b      	ldr	r1, [pc, #364]	; (13224 <process_event+0x2d0>)
   130b8:	4a57      	ldr	r2, [pc, #348]	; (13218 <process_event+0x2c4>)
   130ba:	4855      	ldr	r0, [pc, #340]	; (13210 <process_event+0x2bc>)
   130bc:	f44f 73ad 	mov.w	r3, #346	; 0x15a
   130c0:	f014 f88c 	bl	271dc <assert_print>
   130c4:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   130c8:	e7d8      	b.n	1307c <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   130ca:	8ba3      	ldrh	r3, [r4, #28]
   130cc:	f023 0307 	bic.w	r3, r3, #7
   130d0:	f043 0306 	orr.w	r3, r3, #6
   130d4:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   130d6:	83a3      	strh	r3, [r4, #28]
   130d8:	460f      	mov	r7, r1
		res = 0;
   130da:	4688      	mov	r8, r1
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   130dc:	f04f 0906 	mov.w	r9, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   130e0:	68a2      	ldr	r2, [r4, #8]
   130e2:	2a00      	cmp	r2, #0
   130e4:	f040 808b 	bne.w	131fe <process_event+0x2aa>
		    || !sys_slist_is_empty(&clients)
   130e8:	2f00      	cmp	r7, #0
   130ea:	f040 808b 	bne.w	13204 <process_event+0x2b0>
		    || (transit != NULL)) {
   130ee:	2e00      	cmp	r6, #0
   130f0:	d098      	beq.n	13024 <process_event+0xd0>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   130f2:	46ba      	mov	sl, r7
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   130f4:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
   130f8:	f104 0b14 	add.w	fp, r4, #20
			mgr->flags = flags;
   130fc:	83a3      	strh	r3, [r4, #28]
   130fe:	4658      	mov	r0, fp
   13100:	f00d fc18 	bl	20934 <z_spin_unlock_valid>
   13104:	2800      	cmp	r0, #0
   13106:	f040 8097 	bne.w	13238 <process_event+0x2e4>
   1310a:	493f      	ldr	r1, [pc, #252]	; (13208 <process_event+0x2b4>)
   1310c:	4a3f      	ldr	r2, [pc, #252]	; (1320c <process_event+0x2b8>)
   1310e:	4840      	ldr	r0, [pc, #256]	; (13210 <process_event+0x2bc>)
   13110:	23c2      	movs	r3, #194	; 0xc2
   13112:	f014 f863 	bl	271dc <assert_print>
   13116:	4659      	mov	r1, fp
   13118:	4843      	ldr	r0, [pc, #268]	; (13228 <process_event+0x2d4>)
   1311a:	f014 f85f 	bl	271dc <assert_print>
   1311e:	21c2      	movs	r1, #194	; 0xc2
   13120:	e0ae      	b.n	13280 <process_event+0x32c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   13122:	2902      	cmp	r1, #2
   13124:	d009      	beq.n	1313a <process_event+0x1e6>
   13126:	4941      	ldr	r1, [pc, #260]	; (1322c <process_event+0x2d8>)
   13128:	4a3b      	ldr	r2, [pc, #236]	; (13218 <process_event+0x2c4>)
   1312a:	4839      	ldr	r0, [pc, #228]	; (13210 <process_event+0x2bc>)
   1312c:	f240 135d 	movw	r3, #349	; 0x15d
   13130:	f014 f854 	bl	271dc <assert_print>
   13134:	f240 115d 	movw	r1, #349	; 0x15d
   13138:	e7a0      	b.n	1307c <process_event+0x128>
			__ASSERT_NO_MSG(mgr->refs == 0);
   1313a:	8be7      	ldrh	r7, [r4, #30]
   1313c:	b14f      	cbz	r7, 13152 <process_event+0x1fe>
   1313e:	493c      	ldr	r1, [pc, #240]	; (13230 <process_event+0x2dc>)
   13140:	4a35      	ldr	r2, [pc, #212]	; (13218 <process_event+0x2c4>)
   13142:	4833      	ldr	r0, [pc, #204]	; (13210 <process_event+0x2bc>)
   13144:	f44f 73af 	mov.w	r3, #350	; 0x15e
   13148:	f014 f848 	bl	271dc <assert_print>
   1314c:	f44f 71af 	mov.w	r1, #350	; 0x15e
   13150:	e794      	b.n	1307c <process_event+0x128>
			transit = mgr->transitions->stop;
   13152:	6923      	ldr	r3, [r4, #16]
   13154:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
   13156:	b94e      	cbnz	r6, 1316c <process_event+0x218>
   13158:	4932      	ldr	r1, [pc, #200]	; (13224 <process_event+0x2d0>)
   1315a:	4a2f      	ldr	r2, [pc, #188]	; (13218 <process_event+0x2c4>)
   1315c:	482c      	ldr	r0, [pc, #176]	; (13210 <process_event+0x2bc>)
   1315e:	f240 1361 	movw	r3, #353	; 0x161
   13162:	f014 f83b 	bl	271dc <assert_print>
   13166:	f240 1161 	movw	r1, #353	; 0x161
   1316a:	e787      	b.n	1307c <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1316c:	8ba3      	ldrh	r3, [r4, #28]
   1316e:	f023 0307 	bic.w	r3, r3, #7
   13172:	f043 0304 	orr.w	r3, r3, #4
   13176:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   13178:	83a3      	strh	r3, [r4, #28]
		res = 0;
   1317a:	46b8      	mov	r8, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1317c:	f04f 0904 	mov.w	r9, #4
   13180:	e7ae      	b.n	130e0 <process_event+0x18c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   13182:	2901      	cmp	r1, #1
   13184:	d009      	beq.n	1319a <process_event+0x246>
   13186:	492b      	ldr	r1, [pc, #172]	; (13234 <process_event+0x2e0>)
   13188:	4a23      	ldr	r2, [pc, #140]	; (13218 <process_event+0x2c4>)
   1318a:	4821      	ldr	r0, [pc, #132]	; (13210 <process_event+0x2bc>)
   1318c:	f44f 73b2 	mov.w	r3, #356	; 0x164
   13190:	f014 f824 	bl	271dc <assert_print>
   13194:	f44f 71b2 	mov.w	r1, #356	; 0x164
   13198:	e770      	b.n	1307c <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   1319a:	6823      	ldr	r3, [r4, #0]
   1319c:	b94b      	cbnz	r3, 131b2 <process_event+0x25e>
   1319e:	4920      	ldr	r1, [pc, #128]	; (13220 <process_event+0x2cc>)
   131a0:	4a1d      	ldr	r2, [pc, #116]	; (13218 <process_event+0x2c4>)
   131a2:	481b      	ldr	r0, [pc, #108]	; (13210 <process_event+0x2bc>)
   131a4:	f240 1365 	movw	r3, #357	; 0x165
   131a8:	f014 f818 	bl	271dc <assert_print>
   131ac:	f240 1165 	movw	r1, #357	; 0x165
   131b0:	e764      	b.n	1307c <process_event+0x128>
			transit = mgr->transitions->reset;
   131b2:	6923      	ldr	r3, [r4, #16]
   131b4:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
   131b6:	b94e      	cbnz	r6, 131cc <process_event+0x278>
   131b8:	491a      	ldr	r1, [pc, #104]	; (13224 <process_event+0x2d0>)
   131ba:	4a17      	ldr	r2, [pc, #92]	; (13218 <process_event+0x2c4>)
   131bc:	4814      	ldr	r0, [pc, #80]	; (13210 <process_event+0x2bc>)
   131be:	f44f 73b4 	mov.w	r3, #360	; 0x168
   131c2:	f014 f80b 	bl	271dc <assert_print>
   131c6:	f44f 71b4 	mov.w	r1, #360	; 0x168
   131ca:	e757      	b.n	1307c <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   131cc:	8ba3      	ldrh	r3, [r4, #28]
   131ce:	f023 0307 	bic.w	r3, r3, #7
   131d2:	f043 0305 	orr.w	r3, r3, #5
   131d6:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   131d8:	2700      	movs	r7, #0
   131da:	83a3      	strh	r3, [r4, #28]
		res = 0;
   131dc:	46b8      	mov	r8, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   131de:	f04f 0905 	mov.w	r9, #5
   131e2:	e77d      	b.n	130e0 <process_event+0x18c>
			__ASSERT_NO_MSG(false);
   131e4:	490b      	ldr	r1, [pc, #44]	; (13214 <process_event+0x2c0>)
   131e6:	4a0c      	ldr	r2, [pc, #48]	; (13218 <process_event+0x2c4>)
   131e8:	4809      	ldr	r0, [pc, #36]	; (13210 <process_event+0x2bc>)
   131ea:	f240 136b 	movw	r3, #363	; 0x16b
   131ee:	f013 fff5 	bl	271dc <assert_print>
   131f2:	f240 116b 	movw	r1, #363	; 0x16b
   131f6:	e741      	b.n	1307c <process_event+0x128>
				   && !sys_slist_is_empty(&mgr->monitors);
   131f8:	2700      	movs	r7, #0
   131fa:	2600      	movs	r6, #0
   131fc:	e770      	b.n	130e0 <process_event+0x18c>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   131fe:	f04f 0a01 	mov.w	sl, #1
   13202:	e777      	b.n	130f4 <process_event+0x1a0>
   13204:	4692      	mov	sl, r2
   13206:	e775      	b.n	130f4 <process_event+0x1a0>
   13208:	0002b258 	.word	0x0002b258
   1320c:	0002b22b 	.word	0x0002b22b
   13210:	0002ae37 	.word	0x0002ae37
   13214:	0002dab5 	.word	0x0002dab5
   13218:	0002b188 	.word	0x0002b188
   1321c:	0002b1aa 	.word	0x0002b1aa
   13220:	0002b1b6 	.word	0x0002b1b6
   13224:	0002b1d9 	.word	0x0002b1d9
   13228:	0002b26f 	.word	0x0002b26f
   1322c:	0002b1f0 	.word	0x0002b1f0
   13230:	0002b206 	.word	0x0002b206
   13234:	0002b215 	.word	0x0002b215
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   13238:	f385 8811 	msr	BASEPRI, r5
   1323c:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   13240:	f1ba 0f00 	cmp.w	sl, #0
   13244:	d11e      	bne.n	13284 <process_event+0x330>
	while (!sys_slist_is_empty(list)) {
   13246:	2f00      	cmp	r7, #0
   13248:	d12f      	bne.n	132aa <process_event+0x356>
			if (transit != NULL) {
   1324a:	b116      	cbz	r6, 13252 <process_event+0x2fe>
				transit(mgr, transition_complete);
   1324c:	4926      	ldr	r1, [pc, #152]	; (132e8 <process_event+0x394>)
   1324e:	4620      	mov	r0, r4
   13250:	47b0      	blx	r6
	__asm__ volatile(
   13252:	f04f 0340 	mov.w	r3, #64	; 0x40
   13256:	f3ef 8511 	mrs	r5, BASEPRI
   1325a:	f383 8812 	msr	BASEPRI_MAX, r3
   1325e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13262:	4658      	mov	r0, fp
   13264:	f00d fb58 	bl	20918 <z_spin_lock_valid>
   13268:	bb38      	cbnz	r0, 132ba <process_event+0x366>
   1326a:	4a20      	ldr	r2, [pc, #128]	; (132ec <process_event+0x398>)
   1326c:	4920      	ldr	r1, [pc, #128]	; (132f0 <process_event+0x39c>)
   1326e:	4821      	ldr	r0, [pc, #132]	; (132f4 <process_event+0x3a0>)
   13270:	2394      	movs	r3, #148	; 0x94
   13272:	f013 ffb3 	bl	271dc <assert_print>
   13276:	4659      	mov	r1, fp
   13278:	481f      	ldr	r0, [pc, #124]	; (132f8 <process_event+0x3a4>)
   1327a:	f013 ffaf 	bl	271dc <assert_print>
   1327e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13280:	481a      	ldr	r0, [pc, #104]	; (132ec <process_event+0x398>)
   13282:	e6fc      	b.n	1307e <process_event+0x12a>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   13284:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   13286:	2900      	cmp	r1, #0
   13288:	d0dd      	beq.n	13246 <process_event+0x2f2>
	return node->next;
   1328a:	680d      	ldr	r5, [r1, #0]
   1328c:	2900      	cmp	r1, #0
   1328e:	d0da      	beq.n	13246 <process_event+0x2f2>
		mon->callback(mgr, mon, state, res);
   13290:	f8d1 a004 	ldr.w	sl, [r1, #4]
   13294:	4643      	mov	r3, r8
   13296:	464a      	mov	r2, r9
   13298:	4620      	mov	r0, r4
   1329a:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1329c:	b11d      	cbz	r5, 132a6 <process_event+0x352>
   1329e:	682b      	ldr	r3, [r5, #0]
   132a0:	4629      	mov	r1, r5
   132a2:	461d      	mov	r5, r3
   132a4:	e7f2      	b.n	1328c <process_event+0x338>
   132a6:	462b      	mov	r3, r5
   132a8:	e7fa      	b.n	132a0 <process_event+0x34c>
   132aa:	4639      	mov	r1, r7
		notify_one(mgr, cli, state, res);
   132ac:	4643      	mov	r3, r8
   132ae:	464a      	mov	r2, r9
   132b0:	4620      	mov	r0, r4
   132b2:	683f      	ldr	r7, [r7, #0]
   132b4:	f013 fec2 	bl	2703c <notify_one>
   132b8:	e7c5      	b.n	13246 <process_event+0x2f2>
	z_spin_lock_set_owner(l);
   132ba:	4658      	mov	r0, fp
   132bc:	f00d fb4a 	bl	20954 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   132c0:	8ba3      	ldrh	r3, [r4, #28]
   132c2:	f023 0308 	bic.w	r3, r3, #8
   132c6:	83a3      	strh	r3, [r4, #28]
   132c8:	e6ac      	b.n	13024 <process_event+0xd0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   132ca:	068b      	lsls	r3, r1, #26
   132cc:	f57f ae64 	bpl.w	12f98 <process_event+0x44>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   132d0:	f021 0320 	bic.w	r3, r1, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   132d4:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   132d6:	f001 0107 	and.w	r1, r1, #7
		if (evt == EVT_RECHECK) {
   132da:	e647      	b.n	12f6c <process_event+0x18>
	__asm__ volatile(
   132dc:	f385 8811 	msr	BASEPRI, r5
   132e0:	f3bf 8f6f 	isb	sy
}
   132e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132e8:	000132fd 	.word	0x000132fd
   132ec:	0002b22b 	.word	0x0002b22b
   132f0:	0002b284 	.word	0x0002b284
   132f4:	0002ae37 	.word	0x0002ae37
   132f8:	0002b299 	.word	0x0002b299

000132fc <transition_complete>:
{
   132fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   132fe:	4604      	mov	r4, r0
   13300:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   13302:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   13306:	f04f 0340 	mov.w	r3, #64	; 0x40
   1330a:	f3ef 8711 	mrs	r7, BASEPRI
   1330e:	f383 8812 	msr	BASEPRI_MAX, r3
   13312:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13316:	4630      	mov	r0, r6
   13318:	f00d fafe 	bl	20918 <z_spin_lock_valid>
   1331c:	b968      	cbnz	r0, 1333a <transition_complete+0x3e>
   1331e:	4a0c      	ldr	r2, [pc, #48]	; (13350 <transition_complete+0x54>)
   13320:	490c      	ldr	r1, [pc, #48]	; (13354 <transition_complete+0x58>)
   13322:	480d      	ldr	r0, [pc, #52]	; (13358 <transition_complete+0x5c>)
   13324:	2394      	movs	r3, #148	; 0x94
   13326:	f013 ff59 	bl	271dc <assert_print>
   1332a:	480c      	ldr	r0, [pc, #48]	; (1335c <transition_complete+0x60>)
   1332c:	4631      	mov	r1, r6
   1332e:	f013 ff55 	bl	271dc <assert_print>
   13332:	4807      	ldr	r0, [pc, #28]	; (13350 <transition_complete+0x54>)
   13334:	2194      	movs	r1, #148	; 0x94
   13336:	f013 ff4a 	bl	271ce <assert_post_action>
	z_spin_lock_set_owner(l);
   1333a:	4630      	mov	r0, r6
   1333c:	f00d fb0a 	bl	20954 <z_spin_lock_set_owner>
	mgr->last_res = res;
   13340:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   13342:	463a      	mov	r2, r7
   13344:	4620      	mov	r0, r4
   13346:	2101      	movs	r1, #1
}
   13348:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   1334c:	f7ff be02 	b.w	12f54 <process_event>
   13350:	0002b22b 	.word	0x0002b22b
   13354:	0002b284 	.word	0x0002b284
   13358:	0002ae37 	.word	0x0002ae37
   1335c:	0002b299 	.word	0x0002b299

00013360 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   13360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13364:	4604      	mov	r4, r0
   13366:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   13368:	f013 fe58 	bl	2701c <validate_args>

	if (rv < 0) {
   1336c:	1e05      	subs	r5, r0, #0
   1336e:	db67      	blt.n	13440 <onoff_request+0xe0>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   13370:	f104 0914 	add.w	r9, r4, #20
   13374:	f04f 0340 	mov.w	r3, #64	; 0x40
   13378:	f3ef 8a11 	mrs	sl, BASEPRI
   1337c:	f383 8812 	msr	BASEPRI_MAX, r3
   13380:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13384:	4648      	mov	r0, r9
   13386:	f00d fac7 	bl	20918 <z_spin_lock_valid>
   1338a:	4680      	mov	r8, r0
   1338c:	b960      	cbnz	r0, 133a8 <onoff_request+0x48>
   1338e:	4a38      	ldr	r2, [pc, #224]	; (13470 <onoff_request+0x110>)
   13390:	4938      	ldr	r1, [pc, #224]	; (13474 <onoff_request+0x114>)
   13392:	4839      	ldr	r0, [pc, #228]	; (13478 <onoff_request+0x118>)
   13394:	2394      	movs	r3, #148	; 0x94
   13396:	f013 ff21 	bl	271dc <assert_print>
   1339a:	4649      	mov	r1, r9
   1339c:	4837      	ldr	r0, [pc, #220]	; (1347c <onoff_request+0x11c>)
   1339e:	f013 ff1d 	bl	271dc <assert_print>
   133a2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   133a4:	4832      	ldr	r0, [pc, #200]	; (13470 <onoff_request+0x110>)
   133a6:	e040      	b.n	1342a <onoff_request+0xca>
	z_spin_lock_set_owner(l);
   133a8:	4648      	mov	r0, r9
   133aa:	f00d fad3 	bl	20954 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   133ae:	8be3      	ldrh	r3, [r4, #30]
   133b0:	8ba6      	ldrh	r6, [r4, #28]
   133b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   133b6:	4293      	cmp	r3, r2
   133b8:	f006 0607 	and.w	r6, r6, #7
   133bc:	d043      	beq.n	13446 <onoff_request+0xe6>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   133be:	2e02      	cmp	r6, #2
   133c0:	d113      	bne.n	133ea <onoff_request+0x8a>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   133c2:	3301      	adds	r3, #1
   133c4:	83e3      	strh	r3, [r4, #30]
	rv = state;
   133c6:	4635      	mov	r5, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   133c8:	4648      	mov	r0, r9
   133ca:	f00d fab3 	bl	20934 <z_spin_unlock_valid>
   133ce:	2800      	cmp	r0, #0
   133d0:	d13f      	bne.n	13452 <onoff_request+0xf2>
   133d2:	4a27      	ldr	r2, [pc, #156]	; (13470 <onoff_request+0x110>)
   133d4:	492a      	ldr	r1, [pc, #168]	; (13480 <onoff_request+0x120>)
   133d6:	4828      	ldr	r0, [pc, #160]	; (13478 <onoff_request+0x118>)
   133d8:	23c2      	movs	r3, #194	; 0xc2
   133da:	f013 feff 	bl	271dc <assert_print>
   133de:	4649      	mov	r1, r9
   133e0:	4828      	ldr	r0, [pc, #160]	; (13484 <onoff_request+0x124>)
   133e2:	f013 fefb 	bl	271dc <assert_print>
   133e6:	21c2      	movs	r1, #194	; 0xc2
   133e8:	e7dc      	b.n	133a4 <onoff_request+0x44>
	} else if ((state == ONOFF_STATE_OFF)
   133ea:	2e06      	cmp	r6, #6
   133ec:	d813      	bhi.n	13416 <onoff_request+0xb6>
   133ee:	e8df f006 	tbb	[pc, r6]
   133f2:	2d09      	.short	0x2d09
   133f4:	04091212 	.word	0x04091212
   133f8:	09          	.byte	0x09
   133f9:	00          	.byte	0x00
	if (state == ONOFF_STATE_ON) {
   133fa:	f06f 0585 	mvn.w	r5, #133	; 0x85
   133fe:	f04f 0800 	mov.w	r8, #0
   13402:	e7e1      	b.n	133c8 <onoff_request+0x68>
	parent->next = child;
   13404:	2300      	movs	r3, #0
   13406:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   13408:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   1340a:	b983      	cbnz	r3, 1342e <onoff_request+0xce>
	list->head = node;
   1340c:	e9c4 7700 	strd	r7, r7, [r4]
out:
	if (add_client) {
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   13410:	b186      	cbz	r6, 13434 <onoff_request+0xd4>
	rv = state;
   13412:	4635      	mov	r5, r6
   13414:	e7f3      	b.n	133fe <onoff_request+0x9e>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   13416:	491c      	ldr	r1, [pc, #112]	; (13488 <onoff_request+0x128>)
   13418:	4817      	ldr	r0, [pc, #92]	; (13478 <onoff_request+0x118>)
   1341a:	4a1c      	ldr	r2, [pc, #112]	; (1348c <onoff_request+0x12c>)
   1341c:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
   13420:	f013 fedc 	bl	271dc <assert_print>
   13424:	4819      	ldr	r0, [pc, #100]	; (1348c <onoff_request+0x12c>)
   13426:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1342a:	f013 fed0 	bl	271ce <assert_post_action>
	parent->next = child;
   1342e:	601f      	str	r7, [r3, #0]
	list->tail = node;
   13430:	6067      	str	r7, [r4, #4]
}
   13432:	e7ed      	b.n	13410 <onoff_request+0xb0>
		process_event(mgr, EVT_RECHECK, key);
   13434:	4652      	mov	r2, sl
   13436:	2102      	movs	r1, #2
   13438:	4620      	mov	r0, r4
   1343a:	f7ff fd8b 	bl	12f54 <process_event>
   1343e:	4635      	mov	r5, r6
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   13440:	4628      	mov	r0, r5
   13442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
   13446:	f06f 050a 	mvn.w	r5, #10
   1344a:	e7d8      	b.n	133fe <onoff_request+0x9e>
	if (state == ONOFF_STATE_ON) {
   1344c:	f06f 0504 	mvn.w	r5, #4
   13450:	e7d5      	b.n	133fe <onoff_request+0x9e>
	__asm__ volatile(
   13452:	f38a 8811 	msr	BASEPRI, sl
   13456:	f3bf 8f6f 	isb	sy
		if (notify) {
   1345a:	f1b8 0f00 	cmp.w	r8, #0
   1345e:	d0ef      	beq.n	13440 <onoff_request+0xe0>
			notify_one(mgr, cli, state, 0);
   13460:	2300      	movs	r3, #0
   13462:	4632      	mov	r2, r6
   13464:	4639      	mov	r1, r7
   13466:	4620      	mov	r0, r4
   13468:	f013 fde8 	bl	2703c <notify_one>
   1346c:	e7e8      	b.n	13440 <onoff_request+0xe0>
   1346e:	bf00      	nop
   13470:	0002b22b 	.word	0x0002b22b
   13474:	0002b284 	.word	0x0002b284
   13478:	0002ae37 	.word	0x0002ae37
   1347c:	0002b299 	.word	0x0002b299
   13480:	0002b258 	.word	0x0002b258
   13484:	0002b26f 	.word	0x0002b26f
   13488:	0002b215 	.word	0x0002b215
   1348c:	0002b188 	.word	0x0002b188

00013490 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   13490:	b508      	push	{r3, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   13492:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   13494:	6081      	str	r1, [r0, #8]

	return method & SYS_NOTIFY_METHOD_MASK;
   13496:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   1349a:	2a02      	cmp	r2, #2
{
   1349c:	4603      	mov	r3, r0
	switch (method) {
   1349e:	d00a      	beq.n	134b6 <sys_notify_finalize+0x26>
   134a0:	2a03      	cmp	r2, #3
   134a2:	f04f 0100 	mov.w	r1, #0
   134a6:	d003      	beq.n	134b0 <sys_notify_finalize+0x20>
   134a8:	2a01      	cmp	r2, #1
   134aa:	d10a      	bne.n	134c2 <sys_notify_finalize+0x32>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   134ac:	6059      	str	r1, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   134ae:	e006      	b.n	134be <sys_notify_finalize+0x2e>
		rv = notify->method.callback;
   134b0:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   134b2:	6059      	str	r1, [r3, #4]
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   134b4:	bd08      	pop	{r3, pc}
		sig = notify->method.signal;
   134b6:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   134b8:	2200      	movs	r2, #0
   134ba:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   134bc:	b958      	cbnz	r0, 134d6 <sys_notify_finalize+0x46>
	sys_notify_generic_callback rv = NULL;
   134be:	2000      	movs	r0, #0
   134c0:	e7f8      	b.n	134b4 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   134c2:	4906      	ldr	r1, [pc, #24]	; (134dc <sys_notify_finalize+0x4c>)
   134c4:	4806      	ldr	r0, [pc, #24]	; (134e0 <sys_notify_finalize+0x50>)
   134c6:	4a07      	ldr	r2, [pc, #28]	; (134e4 <sys_notify_finalize+0x54>)
   134c8:	2345      	movs	r3, #69	; 0x45
   134ca:	f013 fe87 	bl	271dc <assert_print>
   134ce:	4805      	ldr	r0, [pc, #20]	; (134e4 <sys_notify_finalize+0x54>)
   134d0:	2145      	movs	r1, #69	; 0x45
   134d2:	f013 fe7c 	bl	271ce <assert_post_action>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   134d6:	f010 fb21 	bl	23b1c <z_impl_k_poll_signal_raise>
   134da:	e7f0      	b.n	134be <sys_notify_finalize+0x2e>
   134dc:	0002dab5 	.word	0x0002dab5
   134e0:	0002ae37 	.word	0x0002ae37
   134e4:	0002b2b1 	.word	0x0002b2b1

000134e8 <mpsc_pbuf_init>:
	}
}

void mpsc_pbuf_init(struct mpsc_pbuf_buffer *buffer,
		    const struct mpsc_pbuf_buffer_config *cfg)
{
   134e8:	b538      	push	{r3, r4, r5, lr}
   134ea:	460d      	mov	r5, r1
   134ec:	4604      	mov	r4, r0
	int err;

	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   134ee:	2220      	movs	r2, #32
   134f0:	2100      	movs	r1, #0
   134f2:	f014 faa6 	bl	27a42 <memset>
	buffer->get_wlen = cfg->get_wlen;
   134f6:	68eb      	ldr	r3, [r5, #12]
   134f8:	61e3      	str	r3, [r4, #28]
	buffer->notify_drop = cfg->notify_drop;
   134fa:	68ab      	ldr	r3, [r5, #8]
   134fc:	61a3      	str	r3, [r4, #24]
	buffer->buf = cfg->buf;
   134fe:	682b      	ldr	r3, [r5, #0]
   13500:	6223      	str	r3, [r4, #32]
	buffer->size = cfg->size;
   13502:	686b      	ldr	r3, [r5, #4]
   13504:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->max_usage = 0;
   13506:	2200      	movs	r2, #0
   13508:	62a2      	str	r2, [r4, #40]	; 0x28
	buffer->flags = cfg->flags;
   1350a:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
   1350c:	b123      	cbz	r3, 13518 <mpsc_pbuf_init+0x30>
   1350e:	1e59      	subs	r1, r3, #1
   13510:	4219      	tst	r1, r3

	if (is_power_of_two(buffer->size)) {
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   13512:	bf08      	it	eq
   13514:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
   13518:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1351a:	2201      	movs	r2, #1
   1351c:	2100      	movs	r1, #0
   1351e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   13522:	f016 f9c1 	bl	298a8 <z_impl_k_sem_init>
	}

	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
   13526:	b148      	cbz	r0, 1353c <mpsc_pbuf_init+0x54>
   13528:	4905      	ldr	r1, [pc, #20]	; (13540 <mpsc_pbuf_init+0x58>)
   1352a:	4806      	ldr	r0, [pc, #24]	; (13544 <mpsc_pbuf_init+0x5c>)
   1352c:	4a06      	ldr	r2, [pc, #24]	; (13548 <mpsc_pbuf_init+0x60>)
   1352e:	232e      	movs	r3, #46	; 0x2e
   13530:	f013 fe54 	bl	271dc <assert_print>
   13534:	4804      	ldr	r0, [pc, #16]	; (13548 <mpsc_pbuf_init+0x60>)
   13536:	212e      	movs	r1, #46	; 0x2e
   13538:	f013 fe49 	bl	271ce <assert_post_action>
	ARG_UNUSED(err);
}
   1353c:	bd38      	pop	{r3, r4, r5, pc}
   1353e:	bf00      	nop
   13540:	0002b300 	.word	0x0002b300
   13544:	0002ae37 	.word	0x0002ae37
   13548:	0002b2da 	.word	0x0002b2da

0001354c <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   1354c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13550:	b089      	sub	sp, #36	; 0x24
   13552:	e9cd 2301 	strd	r2, r3, [sp, #4]
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
   13556:	6a43      	ldr	r3, [r0, #36]	; 0x24
	union mpsc_pbuf_generic *dropped_item = NULL;
   13558:	2700      	movs	r7, #0
	if (wlen > (buffer->size)) {
   1355a:	428b      	cmp	r3, r1
{
   1355c:	4604      	mov	r4, r0
   1355e:	4688      	mov	r8, r1
	union mpsc_pbuf_generic *dropped_item = NULL;
   13560:	9705      	str	r7, [sp, #20]
	uint32_t tmp_wr_idx_shift = 0;
   13562:	9707      	str	r7, [sp, #28]
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
   13564:	46ba      	mov	sl, r7
	if (wlen > (buffer->size)) {
   13566:	d353      	bcc.n	13610 <mpsc_pbuf_alloc+0xc4>

	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
   13568:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   1356c:	f04f 0340 	mov.w	r3, #64	; 0x40
   13570:	f3ef 8b11 	mrs	fp, BASEPRI
   13574:	f383 8812 	msr	BASEPRI_MAX, r3
   13578:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1357c:	4630      	mov	r0, r6
	k.key = arch_irq_lock();
   1357e:	46d9      	mov	r9, fp
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13580:	f00d f9ca 	bl	20918 <z_spin_lock_valid>
   13584:	b958      	cbnz	r0, 1359e <mpsc_pbuf_alloc+0x52>
   13586:	4a4b      	ldr	r2, [pc, #300]	; (136b4 <mpsc_pbuf_alloc+0x168>)
   13588:	494b      	ldr	r1, [pc, #300]	; (136b8 <mpsc_pbuf_alloc+0x16c>)
   1358a:	484c      	ldr	r0, [pc, #304]	; (136bc <mpsc_pbuf_alloc+0x170>)
   1358c:	2394      	movs	r3, #148	; 0x94
   1358e:	f013 fe25 	bl	271dc <assert_print>
   13592:	4631      	mov	r1, r6
   13594:	484a      	ldr	r0, [pc, #296]	; (136c0 <mpsc_pbuf_alloc+0x174>)
   13596:	f013 fe21 	bl	271dc <assert_print>
   1359a:	2194      	movs	r1, #148	; 0x94
   1359c:	e05e      	b.n	1365c <mpsc_pbuf_alloc+0x110>
	z_spin_lock_set_owner(l);
   1359e:	4630      	mov	r0, r6
   135a0:	f00d f9d8 	bl	20954 <z_spin_lock_set_owner>
		if (tmp_wr_idx_shift) {
   135a4:	9a07      	ldr	r2, [sp, #28]
   135a6:	b12a      	cbz	r2, 135b4 <mpsc_pbuf_alloc+0x68>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
   135a8:	4639      	mov	r1, r7
   135aa:	4620      	mov	r0, r4
   135ac:	f013 fef5 	bl	2739a <post_drop_action>
			tmp_wr_idx_shift = 0;
   135b0:	2300      	movs	r3, #0
   135b2:	9307      	str	r3, [sp, #28]
		}

		wrap = free_space(buffer, &free_wlen);
   135b4:	a906      	add	r1, sp, #24
   135b6:	4620      	mov	r0, r4
   135b8:	f013 fe1d 	bl	271f6 <free_space>

		if (free_wlen >= wlen) {
   135bc:	9906      	ldr	r1, [sp, #24]
   135be:	4541      	cmp	r1, r8
		wrap = free_space(buffer, &free_wlen);
   135c0:	4605      	mov	r5, r0
		if (free_wlen >= wlen) {
   135c2:	d32e      	bcc.n	13622 <mpsc_pbuf_alloc+0xd6>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   135c4:	6822      	ldr	r2, [r4, #0]
			item =
   135c6:	6a23      	ldr	r3, [r4, #32]
			item->hdr.valid = 0;
   135c8:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   135cc:	f021 0103 	bic.w	r1, r1, #3
   135d0:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
   135d4:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   135d8:	6821      	ldr	r1, [r4, #0]
   135da:	4642      	mov	r2, r8
   135dc:	4620      	mov	r0, r4
   135de:	f013 fe2e 	bl	2723e <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   135e2:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   135e4:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   135e6:	4298      	cmp	r0, r3
   135e8:	d016      	beq.n	13618 <mpsc_pbuf_alloc+0xcc>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
   135ea:	2500      	movs	r5, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   135ec:	4630      	mov	r0, r6
   135ee:	f00d f9a1 	bl	20934 <z_spin_unlock_valid>
   135f2:	b340      	cbz	r0, 13646 <mpsc_pbuf_alloc+0xfa>
	__asm__ volatile(
   135f4:	f389 8811 	msr	BASEPRI, r9
   135f8:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
   135fc:	9905      	ldr	r1, [sp, #20]
   135fe:	b129      	cbz	r1, 1360c <mpsc_pbuf_alloc+0xc0>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   13600:	69a2      	ldr	r2, [r4, #24]
   13602:	b10a      	cbz	r2, 13608 <mpsc_pbuf_alloc+0xbc>
				buffer->notify_drop(buffer, dropped_item);
   13604:	4620      	mov	r0, r4
   13606:	4790      	blx	r2
			}
			dropped_item = NULL;
   13608:	2300      	movs	r3, #0
   1360a:	9305      	str	r3, [sp, #20]
		}
	} while (cont);
   1360c:	2d00      	cmp	r5, #0
   1360e:	d1ad      	bne.n	1356c <mpsc_pbuf_alloc+0x20>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   13610:	4650      	mov	r0, sl
   13612:	b009      	add	sp, #36	; 0x24
   13614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
   13618:	6923      	ldr	r3, [r4, #16]
   1361a:	f043 0308 	orr.w	r3, r3, #8
   1361e:	6123      	str	r3, [r4, #16]
   13620:	e7e3      	b.n	135ea <mpsc_pbuf_alloc+0x9e>
		} else if (wrap) {
   13622:	b118      	cbz	r0, 1362c <mpsc_pbuf_alloc+0xe0>
			add_skip_item(buffer, free_wlen);
   13624:	4620      	mov	r0, r4
   13626:	f013 fe24 	bl	27272 <add_skip_item>
			cont = true;
   1362a:	e7df      	b.n	135ec <mpsc_pbuf_alloc+0xa0>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   1362c:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   13630:	4313      	orrs	r3, r2
   13632:	d036      	beq.n	136a2 <mpsc_pbuf_alloc+0x156>
   13634:	9103      	str	r1, [sp, #12]
   13636:	f016 f8e2 	bl	297fe <k_is_in_isr>
   1363a:	9903      	ldr	r1, [sp, #12]
   1363c:	bb88      	cbnz	r0, 136a2 <mpsc_pbuf_alloc+0x156>
   1363e:	4630      	mov	r0, r6
   13640:	f00d f978 	bl	20934 <z_spin_unlock_valid>
   13644:	b968      	cbnz	r0, 13662 <mpsc_pbuf_alloc+0x116>
   13646:	4a1b      	ldr	r2, [pc, #108]	; (136b4 <mpsc_pbuf_alloc+0x168>)
   13648:	491e      	ldr	r1, [pc, #120]	; (136c4 <mpsc_pbuf_alloc+0x178>)
   1364a:	481c      	ldr	r0, [pc, #112]	; (136bc <mpsc_pbuf_alloc+0x170>)
   1364c:	23c2      	movs	r3, #194	; 0xc2
   1364e:	f013 fdc5 	bl	271dc <assert_print>
   13652:	4631      	mov	r1, r6
   13654:	481c      	ldr	r0, [pc, #112]	; (136c8 <mpsc_pbuf_alloc+0x17c>)
   13656:	f013 fdc1 	bl	271dc <assert_print>
   1365a:	21c2      	movs	r1, #194	; 0xc2
   1365c:	4815      	ldr	r0, [pc, #84]	; (136b4 <mpsc_pbuf_alloc+0x168>)
   1365e:	f013 fdb6 	bl	271ce <assert_post_action>
   13662:	f38b 8811 	msr	BASEPRI, fp
   13666:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   1366a:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   1366e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   13672:	f00d fc4f 	bl	20f14 <z_impl_k_sem_take>
   13676:	4605      	mov	r5, r0
	__asm__ volatile(
   13678:	f04f 0340 	mov.w	r3, #64	; 0x40
   1367c:	f3ef 8911 	mrs	r9, BASEPRI
   13680:	f383 8812 	msr	BASEPRI_MAX, r3
   13684:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13688:	4630      	mov	r0, r6
   1368a:	f00d f945 	bl	20918 <z_spin_lock_valid>
   1368e:	2800      	cmp	r0, #0
   13690:	f43f af79 	beq.w	13586 <mpsc_pbuf_alloc+0x3a>
	z_spin_lock_set_owner(l);
   13694:	4630      	mov	r0, r6
			cont = (err == 0) ? true : false;
   13696:	fab5 f585 	clz	r5, r5
   1369a:	f00d f95b 	bl	20954 <z_spin_lock_set_owner>
   1369e:	096d      	lsrs	r5, r5, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   136a0:	e7a4      	b.n	135ec <mpsc_pbuf_alloc+0xa0>
			cont = drop_item_locked(buffer, free_wlen,
   136a2:	ab07      	add	r3, sp, #28
   136a4:	aa05      	add	r2, sp, #20
   136a6:	4620      	mov	r0, r4
			tmp_wr_idx_val = buffer->tmp_wr_idx;
   136a8:	6827      	ldr	r7, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
   136aa:	f013 fdff 	bl	272ac <drop_item_locked>
   136ae:	4605      	mov	r5, r0
   136b0:	e79c      	b.n	135ec <mpsc_pbuf_alloc+0xa0>
   136b2:	bf00      	nop
   136b4:	0002b22b 	.word	0x0002b22b
   136b8:	0002b284 	.word	0x0002b284
   136bc:	0002ae37 	.word	0x0002ae37
   136c0:	0002b299 	.word	0x0002b299
   136c4:	0002b258 	.word	0x0002b258
   136c8:	0002b26f 	.word	0x0002b26f

000136cc <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   136cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   136d0:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   136d2:	69c3      	ldr	r3, [r0, #28]
   136d4:	4608      	mov	r0, r1
{
   136d6:	460e      	mov	r6, r1
	uint32_t wlen = buffer->get_wlen(item);
   136d8:	4798      	blx	r3

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
   136da:	f104 0514 	add.w	r5, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
   136de:	4607      	mov	r7, r0
   136e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   136e4:	f3ef 8811 	mrs	r8, BASEPRI
   136e8:	f383 8812 	msr	BASEPRI_MAX, r3
   136ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   136f0:	4628      	mov	r0, r5
   136f2:	f00d f911 	bl	20918 <z_spin_lock_valid>
   136f6:	b968      	cbnz	r0, 13714 <mpsc_pbuf_commit+0x48>
   136f8:	4a19      	ldr	r2, [pc, #100]	; (13760 <mpsc_pbuf_commit+0x94>)
   136fa:	491a      	ldr	r1, [pc, #104]	; (13764 <mpsc_pbuf_commit+0x98>)
   136fc:	481a      	ldr	r0, [pc, #104]	; (13768 <mpsc_pbuf_commit+0x9c>)
   136fe:	2394      	movs	r3, #148	; 0x94
   13700:	f013 fd6c 	bl	271dc <assert_print>
   13704:	4629      	mov	r1, r5
   13706:	4819      	ldr	r0, [pc, #100]	; (1376c <mpsc_pbuf_commit+0xa0>)
   13708:	f013 fd68 	bl	271dc <assert_print>
   1370c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1370e:	4814      	ldr	r0, [pc, #80]	; (13760 <mpsc_pbuf_commit+0x94>)
   13710:	f013 fd5d 	bl	271ce <assert_post_action>
	z_spin_lock_set_owner(l);
   13714:	4628      	mov	r0, r5
   13716:	f00d f91d 	bl	20954 <z_spin_lock_set_owner>

	item->hdr.valid = 1;
   1371a:	7833      	ldrb	r3, [r6, #0]
   1371c:	f043 0301 	orr.w	r3, r3, #1
   13720:	7033      	strb	r3, [r6, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   13722:	6861      	ldr	r1, [r4, #4]
   13724:	463a      	mov	r2, r7
   13726:	4620      	mov	r0, r4
   13728:	f013 fd89 	bl	2723e <idx_inc>
   1372c:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   1372e:	4620      	mov	r0, r4
   13730:	f013 fe4e 	bl	273d0 <max_utilization_update>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13734:	4628      	mov	r0, r5
   13736:	f00d f8fd 	bl	20934 <z_spin_unlock_valid>
   1373a:	b958      	cbnz	r0, 13754 <mpsc_pbuf_commit+0x88>
   1373c:	4a08      	ldr	r2, [pc, #32]	; (13760 <mpsc_pbuf_commit+0x94>)
   1373e:	490c      	ldr	r1, [pc, #48]	; (13770 <mpsc_pbuf_commit+0xa4>)
   13740:	4809      	ldr	r0, [pc, #36]	; (13768 <mpsc_pbuf_commit+0x9c>)
   13742:	23c2      	movs	r3, #194	; 0xc2
   13744:	f013 fd4a 	bl	271dc <assert_print>
   13748:	4629      	mov	r1, r5
   1374a:	480a      	ldr	r0, [pc, #40]	; (13774 <mpsc_pbuf_commit+0xa8>)
   1374c:	f013 fd46 	bl	271dc <assert_print>
   13750:	21c2      	movs	r1, #194	; 0xc2
   13752:	e7dc      	b.n	1370e <mpsc_pbuf_commit+0x42>
	__asm__ volatile(
   13754:	f388 8811 	msr	BASEPRI, r8
   13758:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
   1375c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13760:	0002b22b 	.word	0x0002b22b
   13764:	0002b284 	.word	0x0002b284
   13768:	0002ae37 	.word	0x0002ae37
   1376c:	0002b299 	.word	0x0002b299
   13770:	0002b258 	.word	0x0002b258
   13774:	0002b26f 	.word	0x0002b26f

00013778 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   13778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1377c:	4604      	mov	r4, r0
	do {
		uint32_t a;
		k_spinlock_key_t key;

		cont = false;
		key = k_spin_lock(&buffer->lock);
   1377e:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
   13782:	f04f 0340 	mov.w	r3, #64	; 0x40
   13786:	f3ef 8811 	mrs	r8, BASEPRI
   1378a:	f383 8812 	msr	BASEPRI_MAX, r3
   1378e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13792:	4638      	mov	r0, r7
   13794:	f00d f8c0 	bl	20918 <z_spin_lock_valid>
   13798:	4605      	mov	r5, r0
   1379a:	b968      	cbnz	r0, 137b8 <mpsc_pbuf_claim+0x40>
   1379c:	4a34      	ldr	r2, [pc, #208]	; (13870 <mpsc_pbuf_claim+0xf8>)
   1379e:	4935      	ldr	r1, [pc, #212]	; (13874 <mpsc_pbuf_claim+0xfc>)
   137a0:	4835      	ldr	r0, [pc, #212]	; (13878 <mpsc_pbuf_claim+0x100>)
   137a2:	2394      	movs	r3, #148	; 0x94
   137a4:	f013 fd1a 	bl	271dc <assert_print>
   137a8:	4639      	mov	r1, r7
   137aa:	4834      	ldr	r0, [pc, #208]	; (1387c <mpsc_pbuf_claim+0x104>)
   137ac:	f013 fd16 	bl	271dc <assert_print>
   137b0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   137b2:	482f      	ldr	r0, [pc, #188]	; (13870 <mpsc_pbuf_claim+0xf8>)
   137b4:	f013 fd0b 	bl	271ce <assert_post_action>
	z_spin_lock_set_owner(l);
   137b8:	4638      	mov	r0, r7
   137ba:	f00d f8cb 	bl	20954 <z_spin_lock_set_owner>
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   137be:	6923      	ldr	r3, [r4, #16]
   137c0:	68a2      	ldr	r2, [r4, #8]
   137c2:	f013 0f08 	tst.w	r3, #8
   137c6:	d102      	bne.n	137ce <mpsc_pbuf_claim+0x56>
   137c8:	6863      	ldr	r3, [r4, #4]
   137ca:	429a      	cmp	r2, r3
   137cc:	d900      	bls.n	137d0 <mpsc_pbuf_claim+0x58>
		*res = buffer->size - buffer->tmp_rd_idx;
   137ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   137d0:	1a9b      	subs	r3, r3, r2
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
   137d2:	2b00      	cmp	r3, #0
   137d4:	d03d      	beq.n	13852 <mpsc_pbuf_claim+0xda>
		item = (union mpsc_pbuf_generic *)
   137d6:	6a21      	ldr	r1, [r4, #32]
	return !item->hdr.valid && !item->hdr.busy;
   137d8:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
   137dc:	f013 0003 	ands.w	r0, r3, #3
		item = (union mpsc_pbuf_generic *)
   137e0:	eb01 0982 	add.w	r9, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
   137e4:	d038      	beq.n	13858 <mpsc_pbuf_claim+0xe0>
	if (item->hdr.busy && !item->hdr.valid) {
   137e6:	2802      	cmp	r0, #2
   137e8:	d103      	bne.n	137f2 <mpsc_pbuf_claim+0x7a>
		return item->skip.len;
   137ea:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
   137ee:	08b6      	lsrs	r6, r6, #2
   137f0:	d105      	bne.n	137fe <mpsc_pbuf_claim+0x86>
   137f2:	07d8      	lsls	r0, r3, #31
   137f4:	d41d      	bmi.n	13832 <mpsc_pbuf_claim+0xba>
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);
   137f6:	69e3      	ldr	r3, [r4, #28]
   137f8:	4648      	mov	r0, r9
   137fa:	4798      	blx	r3
   137fc:	4606      	mov	r6, r0

				buffer->tmp_rd_idx =
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   137fe:	68a1      	ldr	r1, [r4, #8]
   13800:	4632      	mov	r2, r6
   13802:	4620      	mov	r0, r4
   13804:	f013 fd1b 	bl	2723e <idx_inc>
				rd_idx_inc(buffer, inc);
   13808:	4631      	mov	r1, r6
				buffer->tmp_rd_idx =
   1380a:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
   1380c:	4620      	mov	r0, r4
   1380e:	f013 fd24 	bl	2725a <rd_idx_inc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13812:	4638      	mov	r0, r7
   13814:	f00d f88e 	bl	20934 <z_spin_unlock_valid>
   13818:	bb00      	cbnz	r0, 1385c <mpsc_pbuf_claim+0xe4>
   1381a:	4a15      	ldr	r2, [pc, #84]	; (13870 <mpsc_pbuf_claim+0xf8>)
   1381c:	4918      	ldr	r1, [pc, #96]	; (13880 <mpsc_pbuf_claim+0x108>)
   1381e:	4816      	ldr	r0, [pc, #88]	; (13878 <mpsc_pbuf_claim+0x100>)
   13820:	23c2      	movs	r3, #194	; 0xc2
   13822:	f013 fcdb 	bl	271dc <assert_print>
   13826:	4639      	mov	r1, r7
   13828:	4816      	ldr	r0, [pc, #88]	; (13884 <mpsc_pbuf_claim+0x10c>)
   1382a:	f013 fcd7 	bl	271dc <assert_print>
   1382e:	21c2      	movs	r1, #194	; 0xc2
   13830:	e7bf      	b.n	137b2 <mpsc_pbuf_claim+0x3a>
				cont = true;
			} else {
				item->hdr.busy = 1;
   13832:	f043 0302 	orr.w	r3, r3, #2
   13836:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
   1383a:	4648      	mov	r0, r9
   1383c:	69e3      	ldr	r3, [r4, #28]
					idx_inc(buffer, buffer->tmp_rd_idx,
   1383e:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
   13840:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
   13842:	4629      	mov	r1, r5
						buffer->get_wlen(item));
   13844:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
   13846:	4620      	mov	r0, r4
   13848:	f013 fcf9 	bl	2723e <idx_inc>
		cont = false;
   1384c:	2500      	movs	r5, #0
				buffer->tmp_rd_idx =
   1384e:	60a0      	str	r0, [r4, #8]
   13850:	e7df      	b.n	13812 <mpsc_pbuf_claim+0x9a>
		cont = false;
   13852:	461d      	mov	r5, r3
			item = NULL;
   13854:	46a9      	mov	r9, r5
   13856:	e7dc      	b.n	13812 <mpsc_pbuf_claim+0x9a>
		cont = false;
   13858:	4605      	mov	r5, r0
   1385a:	e7fb      	b.n	13854 <mpsc_pbuf_claim+0xdc>
	__asm__ volatile(
   1385c:	f388 8811 	msr	BASEPRI, r8
   13860:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
   13864:	2d00      	cmp	r5, #0
   13866:	d18c      	bne.n	13782 <mpsc_pbuf_claim+0xa>

	return item;
}
   13868:	4648      	mov	r0, r9
   1386a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1386e:	bf00      	nop
   13870:	0002b22b 	.word	0x0002b22b
   13874:	0002b284 	.word	0x0002b284
   13878:	0002ae37 	.word	0x0002ae37
   1387c:	0002b299 	.word	0x0002b299
   13880:	0002b258 	.word	0x0002b258
   13884:	0002b26f 	.word	0x0002b26f

00013888 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   13888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1388c:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   1388e:	69c3      	ldr	r3, [r0, #28]
   13890:	4608      	mov	r0, r1
{
   13892:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   13894:	4798      	blx	r3
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
   13896:	f104 0614 	add.w	r6, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
   1389a:	4607      	mov	r7, r0
	__asm__ volatile(
   1389c:	f04f 0340 	mov.w	r3, #64	; 0x40
   138a0:	f3ef 8811 	mrs	r8, BASEPRI
   138a4:	f383 8812 	msr	BASEPRI_MAX, r3
   138a8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   138ac:	4630      	mov	r0, r6
   138ae:	f00d f833 	bl	20918 <z_spin_lock_valid>
   138b2:	b968      	cbnz	r0, 138d0 <mpsc_pbuf_free+0x48>
   138b4:	4a26      	ldr	r2, [pc, #152]	; (13950 <mpsc_pbuf_free+0xc8>)
   138b6:	4927      	ldr	r1, [pc, #156]	; (13954 <mpsc_pbuf_free+0xcc>)
   138b8:	4827      	ldr	r0, [pc, #156]	; (13958 <mpsc_pbuf_free+0xd0>)
   138ba:	2394      	movs	r3, #148	; 0x94
   138bc:	f013 fc8e 	bl	271dc <assert_print>
   138c0:	4631      	mov	r1, r6
   138c2:	4826      	ldr	r0, [pc, #152]	; (1395c <mpsc_pbuf_free+0xd4>)
   138c4:	f013 fc8a 	bl	271dc <assert_print>
   138c8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   138ca:	4821      	ldr	r0, [pc, #132]	; (13950 <mpsc_pbuf_free+0xc8>)
   138cc:	f013 fc7f 	bl	271ce <assert_post_action>
	z_spin_lock_set_owner(l);
   138d0:	4630      	mov	r0, r6
   138d2:	f00d f83f 	bl	20954 <z_spin_lock_set_owner>
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   138d6:	782b      	ldrb	r3, [r5, #0]
   138d8:	f36f 0300 	bfc	r3, #0, #1
   138dc:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   138de:	6923      	ldr	r3, [r4, #16]
   138e0:	079b      	lsls	r3, r3, #30
   138e2:	d505      	bpl.n	138f0 <mpsc_pbuf_free+0x68>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   138e4:	68e2      	ldr	r2, [r4, #12]
   138e6:	6a23      	ldr	r3, [r4, #32]
   138e8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   138ec:	429d      	cmp	r5, r3
   138ee:	d120      	bne.n	13932 <mpsc_pbuf_free+0xaa>
		witem->hdr.busy = 0;
   138f0:	782b      	ldrb	r3, [r5, #0]
   138f2:	f36f 0341 	bfc	r3, #1, #1
   138f6:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   138f8:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   138fc:	4299      	cmp	r1, r3
   138fe:	d104      	bne.n	1390a <mpsc_pbuf_free+0x82>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
   13900:	463a      	mov	r2, r7
   13902:	4620      	mov	r0, r4
   13904:	f013 fc9b 	bl	2723e <idx_inc>
   13908:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
   1390a:	4639      	mov	r1, r7
   1390c:	4620      	mov	r0, r4
   1390e:	f013 fca4 	bl	2725a <rd_idx_inc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13912:	4630      	mov	r0, r6
   13914:	f00d f80e 	bl	20934 <z_spin_unlock_valid>
   13918:	b980      	cbnz	r0, 1393c <mpsc_pbuf_free+0xb4>
   1391a:	4a0d      	ldr	r2, [pc, #52]	; (13950 <mpsc_pbuf_free+0xc8>)
   1391c:	4910      	ldr	r1, [pc, #64]	; (13960 <mpsc_pbuf_free+0xd8>)
   1391e:	480e      	ldr	r0, [pc, #56]	; (13958 <mpsc_pbuf_free+0xd0>)
   13920:	23c2      	movs	r3, #194	; 0xc2
   13922:	f013 fc5b 	bl	271dc <assert_print>
   13926:	4631      	mov	r1, r6
   13928:	480e      	ldr	r0, [pc, #56]	; (13964 <mpsc_pbuf_free+0xdc>)
   1392a:	f013 fc57 	bl	271dc <assert_print>
   1392e:	21c2      	movs	r1, #194	; 0xc2
   13930:	e7cb      	b.n	138ca <mpsc_pbuf_free+0x42>
	} else {
		MPSC_PBUF_DBG(buffer, "Allocation occurred during claim");
		witem->skip.len = wlen;
   13932:	682b      	ldr	r3, [r5, #0]
   13934:	f367 039f 	bfi	r3, r7, #2, #30
   13938:	602b      	str	r3, [r5, #0]
   1393a:	e7ea      	b.n	13912 <mpsc_pbuf_free+0x8a>
	__asm__ volatile(
   1393c:	f388 8811 	msr	BASEPRI, r8
   13940:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   13944:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   13948:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1394c:	f00d ba9e 	b.w	20e8c <z_impl_k_sem_give>
   13950:	0002b22b 	.word	0x0002b22b
   13954:	0002b284 	.word	0x0002b284
   13958:	0002ae37 	.word	0x0002ae37
   1395c:	0002b299 	.word	0x0002b299
   13960:	0002b258 	.word	0x0002b258
   13964:	0002b26f 	.word	0x0002b26f

00013968 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   13968:	b508      	push	{r3, lr}
   1396a:	4604      	mov	r4, r0
	__asm__ volatile(
   1396c:	f04f 0240 	mov.w	r2, #64	; 0x40
   13970:	f3ef 8311 	mrs	r3, BASEPRI
   13974:	f382 8812 	msr	BASEPRI_MAX, r2
   13978:	f3bf 8f6f 	isb	sy
	sys_cache_instr_disable();
#endif /* CONFIG_ICACHE */
#endif /* CONFIG_ARCH_CACHE */

	if (IS_ENABLED(CONFIG_SYSTEM_TIMER_HAS_DISABLE_SUPPORT)) {
		sys_clock_disable();
   1397c:	f00a fa1a 	bl	1ddb4 <sys_clock_disable>
	}

	sys_arch_reboot(type);
   13980:	4620      	mov	r0, r4
   13982:	f002 fac7 	bl	15f14 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   13986:	4803      	ldr	r0, [pc, #12]	; (13994 <sys_reboot+0x2c>)
   13988:	f013 f9f1 	bl	26d6e <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   1398c:	f001 fa82 	bl	14e94 <arch_cpu_idle>
   13990:	e7fc      	b.n	1398c <sys_reboot+0x24>
   13992:	bf00      	nop
   13994:	0002b309 	.word	0x0002b309

00013998 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   13998:	f00b bd52 	b.w	1f440 <SystemInit>

0001399c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
   1399c:	b530      	push	{r4, r5, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   1399e:	4910      	ldr	r1, [pc, #64]	; (139e0 <enable_logger+0x44>)
   139a0:	4810      	ldr	r0, [pc, #64]	; (139e4 <enable_logger+0x48>)
{
   139a2:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   139a4:	2200      	movs	r2, #0
   139a6:	f016 f855 	bl	29a54 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   139aa:	4d0f      	ldr	r5, [pc, #60]	; (139e8 <enable_logger+0x4c>)
   139ac:	490f      	ldr	r1, [pc, #60]	; (139ec <enable_logger+0x50>)
   139ae:	2200      	movs	r2, #0
   139b0:	2300      	movs	r3, #0
   139b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   139b6:	2400      	movs	r4, #0
   139b8:	230e      	movs	r3, #14
   139ba:	e9cd 3403 	strd	r3, r4, [sp, #12]
   139be:	e9cd 4401 	strd	r4, r4, [sp, #4]
   139c2:	4b0b      	ldr	r3, [pc, #44]	; (139f0 <enable_logger+0x54>)
   139c4:	9400      	str	r4, [sp, #0]
   139c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   139ca:	4628      	mov	r0, r5
   139cc:	f00c feda 	bl	20784 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   139d0:	4908      	ldr	r1, [pc, #32]	; (139f4 <enable_logger+0x58>)
   139d2:	4628      	mov	r0, r5
   139d4:	f015 ff19 	bl	2980a <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
   139d8:	4620      	mov	r0, r4
   139da:	b009      	add	sp, #36	; 0x24
   139dc:	bd30      	pop	{r4, r5, pc}
   139de:	bf00      	nop
   139e0:	00013b3d 	.word	0x00013b3d
   139e4:	20001e38 	.word	0x20001e38
   139e8:	20001968 	.word	0x20001968
   139ec:	20004d80 	.word	0x20004d80
   139f0:	00013e2d 	.word	0x00013e2d
   139f4:	0002b332 	.word	0x0002b332

000139f8 <activate_foreach_backend>:
{
   139f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   139fc:	f8df 8058 	ldr.w	r8, [pc, #88]	; 13a58 <activate_foreach_backend+0x60>
{
   13a00:	4604      	mov	r4, r0
	while (mask_cpy) {
   13a02:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
   13a04:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
   13a08:	b914      	cbnz	r4, 13a10 <activate_foreach_backend+0x18>
}
   13a0a:	4638      	mov	r0, r7
   13a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
   13a10:	fa94 f5a4 	rbit	r5, r4
   13a14:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
   13a18:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   13a1c:	012e      	lsls	r6, r5, #4
   13a1e:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
   13a22:	ea6f 0a03 	mvn.w	sl, r3
   13a26:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   13a2a:	7b2b      	ldrb	r3, [r5, #12]
   13a2c:	2b00      	cmp	r3, #0
   13a2e:	d0eb      	beq.n	13a08 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
   13a30:	f858 3006 	ldr.w	r3, [r8, r6]
   13a34:	691b      	ldr	r3, [r3, #16]
   13a36:	b94b      	cbnz	r3, 13a4c <activate_foreach_backend+0x54>
					   backend->cb->ctx,
   13a38:	4446      	add	r6, r8
			log_backend_enable(backend,
   13a3a:	2204      	movs	r2, #4
   13a3c:	6873      	ldr	r3, [r6, #4]
   13a3e:	4628      	mov	r0, r5
   13a40:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
   13a42:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
   13a46:	f000 faf7 	bl	14038 <log_backend_enable>
   13a4a:	e7dd      	b.n	13a08 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
   13a4c:	4628      	mov	r0, r5
   13a4e:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   13a50:	2800      	cmp	r0, #0
   13a52:	d1d9      	bne.n	13a08 <activate_foreach_backend+0x10>
   13a54:	e7f0      	b.n	13a38 <activate_foreach_backend+0x40>
   13a56:	bf00      	nop
   13a58:	0002a090 	.word	0x0002a090

00013a5c <z_log_init>:
{
   13a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 */
static inline int log_backend_count_get(void)
{
	int cnt;

	STRUCT_SECTION_COUNT(log_backend, &cnt);
   13a60:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 13b38 <z_log_init+0xdc>
   13a64:	4c2d      	ldr	r4, [pc, #180]	; (13b1c <z_log_init+0xc0>)
   13a66:	eba9 0304 	sub.w	r3, r9, r4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   13a6a:	2b9f      	cmp	r3, #159	; 0x9f
{
   13a6c:	4680      	mov	r8, r0
   13a6e:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   13a70:	d90b      	bls.n	13a8a <z_log_init+0x2e>
   13a72:	492b      	ldr	r1, [pc, #172]	; (13b20 <z_log_init+0xc4>)
   13a74:	4a2b      	ldr	r2, [pc, #172]	; (13b24 <z_log_init+0xc8>)
   13a76:	482c      	ldr	r0, [pc, #176]	; (13b28 <z_log_init+0xcc>)
   13a78:	f44f 738c 	mov.w	r3, #280	; 0x118
   13a7c:	f013 fbae 	bl	271dc <assert_print>
   13a80:	f44f 718c 	mov.w	r1, #280	; 0x118
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13a84:	4827      	ldr	r0, [pc, #156]	; (13b24 <z_log_init+0xc8>)
   13a86:	f013 fba2 	bl	271ce <assert_post_action>
	if (atomic_inc(&initialized) != 0) {
   13a8a:	4828      	ldr	r0, [pc, #160]	; (13b2c <z_log_init+0xd0>)
   13a8c:	f013 fccf 	bl	2742e <atomic_inc>
   13a90:	4606      	mov	r6, r0
   13a92:	b360      	cbz	r0, 13aee <z_log_init+0x92>
	uint32_t mask = 0;
   13a94:	2500      	movs	r5, #0
}
   13a96:	4628      	mov	r0, r5
   13a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
   13a9c:	7b23      	ldrb	r3, [r4, #12]
   13a9e:	b173      	cbz	r3, 13abe <z_log_init+0x62>
	if (backend->api->init) {
   13aa0:	6823      	ldr	r3, [r4, #0]
   13aa2:	68db      	ldr	r3, [r3, #12]
   13aa4:	b10b      	cbz	r3, 13aaa <z_log_init+0x4e>
		backend->api->init(backend);
   13aa6:	4620      	mov	r0, r4
   13aa8:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
   13aaa:	6823      	ldr	r3, [r4, #0]
   13aac:	691b      	ldr	r3, [r3, #16]
   13aae:	b9b3      	cbnz	r3, 13ade <z_log_init+0x82>
				log_backend_enable(backend,
   13ab0:	6863      	ldr	r3, [r4, #4]
   13ab2:	2204      	movs	r2, #4
   13ab4:	6819      	ldr	r1, [r3, #0]
   13ab6:	4620      	mov	r0, r4
   13ab8:	f000 fabe 	bl	14038 <log_backend_enable>
			i++;
   13abc:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13abe:	3410      	adds	r4, #16
   13ac0:	454c      	cmp	r4, r9
   13ac2:	d918      	bls.n	13af6 <z_log_init+0x9a>
   13ac4:	491a      	ldr	r1, [pc, #104]	; (13b30 <z_log_init+0xd4>)
   13ac6:	4a17      	ldr	r2, [pc, #92]	; (13b24 <z_log_init+0xc8>)
   13ac8:	4817      	ldr	r0, [pc, #92]	; (13b28 <z_log_init+0xcc>)
   13aca:	f240 1325 	movw	r3, #293	; 0x125
   13ace:	f013 fb85 	bl	271dc <assert_print>
   13ad2:	4818      	ldr	r0, [pc, #96]	; (13b34 <z_log_init+0xd8>)
   13ad4:	f013 fb82 	bl	271dc <assert_print>
   13ad8:	f240 1125 	movw	r1, #293	; 0x125
   13adc:	e7d2      	b.n	13a84 <z_log_init+0x28>
		return backend->api->is_ready(backend);
   13ade:	4620      	mov	r0, r4
   13ae0:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   13ae2:	2800      	cmp	r0, #0
   13ae4:	d0e4      	beq.n	13ab0 <z_log_init+0x54>
				mask |= BIT(i);
   13ae6:	fa0a f306 	lsl.w	r3, sl, r6
   13aea:	431d      	orrs	r5, r3
   13aec:	e7e6      	b.n	13abc <z_log_init+0x60>
	uint32_t mask = 0;
   13aee:	4605      	mov	r5, r0
				mask |= BIT(i);
   13af0:	f04f 0a01 	mov.w	sl, #1
   13af4:	e7e4      	b.n	13ac0 <z_log_init+0x64>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13af6:	d3d1      	bcc.n	13a9c <z_log_init+0x40>
	if (blocking) {
   13af8:	f1b8 0f00 	cmp.w	r8, #0
   13afc:	d0cb      	beq.n	13a96 <z_log_init+0x3a>
		while (mask) {
   13afe:	2d00      	cmp	r5, #0
   13b00:	d0c8      	beq.n	13a94 <z_log_init+0x38>
			mask = activate_foreach_backend(mask);
   13b02:	4628      	mov	r0, r5
   13b04:	f7ff ff78 	bl	139f8 <activate_foreach_backend>
   13b08:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   13b0a:	2f00      	cmp	r7, #0
   13b0c:	d0f7      	beq.n	13afe <z_log_init+0xa2>
	return z_impl_k_sleep(timeout);
   13b0e:	2100      	movs	r1, #0
   13b10:	f44f 70a4 	mov.w	r0, #328	; 0x148
   13b14:	f00f f80c 	bl	22b30 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   13b18:	e7f1      	b.n	13afe <z_log_init+0xa2>
   13b1a:	bf00      	nop
   13b1c:	0002a090 	.word	0x0002a090
   13b20:	0002b367 	.word	0x0002b367
   13b24:	0002b33a 	.word	0x0002b33a
   13b28:	0002ae37 	.word	0x0002ae37
   13b2c:	20002f1c 	.word	0x20002f1c
   13b30:	0002b38b 	.word	0x0002b38b
   13b34:	0002b3ac 	.word	0x0002b3ac
   13b38:	0002a0b0 	.word	0x0002a0b0

00013b3c <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
   13b3c:	4801      	ldr	r0, [pc, #4]	; (13b44 <log_process_thread_timer_expiry_fn+0x8>)
   13b3e:	f00d b9a5 	b.w	20e8c <z_impl_k_sem_give>
   13b42:	bf00      	nop
   13b44:	20000a58 	.word	0x20000a58

00013b48 <log_format_func_t_get>:
}
   13b48:	4b01      	ldr	r3, [pc, #4]	; (13b50 <log_format_func_t_get+0x8>)
   13b4a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   13b4e:	4770      	bx	lr
   13b50:	0002a174 	.word	0x0002a174

00013b54 <log_set_timestamp_func>:
{
   13b54:	b508      	push	{r3, lr}
   13b56:	4603      	mov	r3, r0
   13b58:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
   13b5a:	b12b      	cbz	r3, 13b68 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
   13b5c:	4a04      	ldr	r2, [pc, #16]	; (13b70 <log_set_timestamp_func+0x1c>)
   13b5e:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
   13b60:	f000 fd9e 	bl	146a0 <log_output_timestamp_freq_set>
	return 0;
   13b64:	2000      	movs	r0, #0
}
   13b66:	bd08      	pop	{r3, pc}
		return -EINVAL;
   13b68:	f06f 0015 	mvn.w	r0, #21
   13b6c:	e7fb      	b.n	13b66 <log_set_timestamp_func+0x12>
   13b6e:	bf00      	nop
   13b70:	200005d0 	.word	0x200005d0

00013b74 <z_log_notify_backend_enabled>:
{
   13b74:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   13b76:	4c04      	ldr	r4, [pc, #16]	; (13b88 <z_log_notify_backend_enabled+0x14>)
   13b78:	7823      	ldrb	r3, [r4, #0]
   13b7a:	b913      	cbnz	r3, 13b82 <z_log_notify_backend_enabled+0xe>
   13b7c:	4803      	ldr	r0, [pc, #12]	; (13b8c <z_log_notify_backend_enabled+0x18>)
   13b7e:	f00d f985 	bl	20e8c <z_impl_k_sem_give>
	backend_attached = true;
   13b82:	2301      	movs	r3, #1
   13b84:	7023      	strb	r3, [r4, #0]
}
   13b86:	bd10      	pop	{r4, pc}
   13b88:	20004315 	.word	0x20004315
   13b8c:	20000a58 	.word	0x20000a58

00013b90 <z_log_dropped>:
{
   13b90:	b510      	push	{r4, lr}
   13b92:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
   13b94:	4808      	ldr	r0, [pc, #32]	; (13bb8 <z_log_dropped+0x28>)
   13b96:	f013 fc4a 	bl	2742e <atomic_inc>
	if (buffered) {
   13b9a:	b15c      	cbz	r4, 13bb4 <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   13b9c:	f3bf 8f5b 	dmb	ish
   13ba0:	4b06      	ldr	r3, [pc, #24]	; (13bbc <z_log_dropped+0x2c>)
   13ba2:	e853 1f00 	ldrex	r1, [r3]
   13ba6:	3901      	subs	r1, #1
   13ba8:	e843 1200 	strex	r2, r1, [r3]
   13bac:	2a00      	cmp	r2, #0
   13bae:	d1f8      	bne.n	13ba2 <z_log_dropped+0x12>
   13bb0:	f3bf 8f5b 	dmb	ish
}
   13bb4:	bd10      	pop	{r4, pc}
   13bb6:	bf00      	nop
   13bb8:	20002f14 	.word	0x20002f14
   13bbc:	20002f18 	.word	0x20002f18

00013bc0 <z_log_dropped_read_and_clear>:
}
   13bc0:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13bc2:	4b06      	ldr	r3, [pc, #24]	; (13bdc <z_log_dropped_read_and_clear+0x1c>)
   13bc4:	f3bf 8f5b 	dmb	ish
   13bc8:	4601      	mov	r1, r0
   13bca:	e853 0f00 	ldrex	r0, [r3]
   13bce:	e843 1200 	strex	r2, r1, [r3]
   13bd2:	2a00      	cmp	r2, #0
   13bd4:	d1f9      	bne.n	13bca <z_log_dropped_read_and_clear+0xa>
   13bd6:	f3bf 8f5b 	dmb	ish
   13bda:	4770      	bx	lr
   13bdc:	20002f14 	.word	0x20002f14

00013be0 <dropped_notify>:
{
   13be0:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   13be2:	f7ff ffed 	bl	13bc0 <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13be6:	4c10      	ldr	r4, [pc, #64]	; (13c28 <dropped_notify+0x48>)
   13be8:	4e10      	ldr	r6, [pc, #64]	; (13c2c <dropped_notify+0x4c>)
	uint32_t dropped = z_log_dropped_read_and_clear();
   13bea:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13bec:	42b4      	cmp	r4, r6
   13bee:	d919      	bls.n	13c24 <dropped_notify+0x44>
   13bf0:	490f      	ldr	r1, [pc, #60]	; (13c30 <dropped_notify+0x50>)
   13bf2:	4a10      	ldr	r2, [pc, #64]	; (13c34 <dropped_notify+0x54>)
   13bf4:	4810      	ldr	r0, [pc, #64]	; (13c38 <dropped_notify+0x58>)
   13bf6:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
   13bfa:	f013 faef 	bl	271dc <assert_print>
   13bfe:	480f      	ldr	r0, [pc, #60]	; (13c3c <dropped_notify+0x5c>)
   13c00:	f013 faec 	bl	271dc <assert_print>
   13c04:	480b      	ldr	r0, [pc, #44]	; (13c34 <dropped_notify+0x54>)
   13c06:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
   13c0a:	f013 fae0 	bl	271ce <assert_post_action>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   13c0e:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   13c10:	795b      	ldrb	r3, [r3, #5]
   13c12:	b12b      	cbz	r3, 13c20 <dropped_notify+0x40>
	if (backend->api->dropped != NULL) {
   13c14:	6823      	ldr	r3, [r4, #0]
   13c16:	685b      	ldr	r3, [r3, #4]
   13c18:	b113      	cbz	r3, 13c20 <dropped_notify+0x40>
		backend->api->dropped(backend, cnt);
   13c1a:	4629      	mov	r1, r5
   13c1c:	4620      	mov	r0, r4
   13c1e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13c20:	3410      	adds	r4, #16
   13c22:	e7e3      	b.n	13bec <dropped_notify+0xc>
   13c24:	d3f3      	bcc.n	13c0e <dropped_notify+0x2e>
}
   13c26:	bd70      	pop	{r4, r5, r6, pc}
   13c28:	0002a090 	.word	0x0002a090
   13c2c:	0002a0b0 	.word	0x0002a0b0
   13c30:	0002b38b 	.word	0x0002b38b
   13c34:	0002b33a 	.word	0x0002b33a
   13c38:	0002ae37 	.word	0x0002ae37
   13c3c:	0002b3ac 	.word	0x0002b3ac

00013c40 <z_log_msg_init>:
{
   13c40:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
   13c42:	4c04      	ldr	r4, [pc, #16]	; (13c54 <z_log_msg_init+0x14>)
   13c44:	4904      	ldr	r1, [pc, #16]	; (13c58 <z_log_msg_init+0x18>)
   13c46:	4620      	mov	r0, r4
   13c48:	f7ff fc4e 	bl	134e8 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
   13c4c:	4b03      	ldr	r3, [pc, #12]	; (13c5c <z_log_msg_init+0x1c>)
   13c4e:	601c      	str	r4, [r3, #0]
}
   13c50:	bd10      	pop	{r4, pc}
   13c52:	bf00      	nop
   13c54:	20000908 	.word	0x20000908
   13c58:	0002a160 	.word	0x0002a160
   13c5c:	20002f0c 	.word	0x20002f0c

00013c60 <log_core_init>:
	panic_mode = false;
   13c60:	4a08      	ldr	r2, [pc, #32]	; (13c84 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
   13c62:	4809      	ldr	r0, [pc, #36]	; (13c88 <log_core_init+0x28>)
{
   13c64:	b508      	push	{r3, lr}
	panic_mode = false;
   13c66:	2300      	movs	r3, #0
   13c68:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   13c6a:	4a08      	ldr	r2, [pc, #32]	; (13c8c <log_core_init+0x2c>)
   13c6c:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
   13c6e:	4a08      	ldr	r2, [pc, #32]	; (13c90 <log_core_init+0x30>)
		log_set_timestamp_func(default_get_timestamp,
   13c70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	buffered_cnt = 0;
   13c74:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
   13c76:	f7ff ff6d 	bl	13b54 <log_set_timestamp_func>
}
   13c7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
   13c7e:	f7ff bfdf 	b.w	13c40 <z_log_msg_init>
   13c82:	bf00      	nop
   13c84:	20004316 	.word	0x20004316
   13c88:	0002742b 	.word	0x0002742b
   13c8c:	20002f14 	.word	0x20002f14
   13c90:	20002f18 	.word	0x20002f18

00013c94 <z_log_msg_alloc>:
{
   13c94:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
   13c96:	2200      	movs	r2, #0
   13c98:	4801      	ldr	r0, [pc, #4]	; (13ca0 <z_log_msg_alloc+0xc>)
   13c9a:	2300      	movs	r3, #0
   13c9c:	f7ff bc56 	b.w	1354c <mpsc_pbuf_alloc>
   13ca0:	20000908 	.word	0x20000908

00013ca4 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
   13ca4:	4801      	ldr	r0, [pc, #4]	; (13cac <z_log_msg_local_claim+0x8>)
   13ca6:	f7ff bd67 	b.w	13778 <mpsc_pbuf_claim>
   13caa:	bf00      	nop
   13cac:	20000908 	.word	0x20000908

00013cb0 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
   13cb0:	4b02      	ldr	r3, [pc, #8]	; (13cbc <z_log_msg_free+0xc>)
{
   13cb2:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
   13cb4:	6818      	ldr	r0, [r3, #0]
   13cb6:	f7ff bde7 	b.w	13888 <mpsc_pbuf_free>
   13cba:	bf00      	nop
   13cbc:	20002f0c 	.word	0x20002f0c

00013cc0 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
   13cc0:	4801      	ldr	r0, [pc, #4]	; (13cc8 <z_log_msg_pending+0x8>)
   13cc2:	f013 bb92 	b.w	273ea <mpsc_pbuf_is_pending>
   13cc6:	bf00      	nop
   13cc8:	20000908 	.word	0x20000908

00013ccc <z_impl_log_process>:
{
   13ccc:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
   13cce:	4b30      	ldr	r3, [pc, #192]	; (13d90 <z_impl_log_process+0xc4>)
   13cd0:	7818      	ldrb	r0, [r3, #0]
   13cd2:	2800      	cmp	r0, #0
   13cd4:	d05b      	beq.n	13d8e <z_impl_log_process+0xc2>
	return z_log_msg_local_claim();
   13cd6:	f7ff ffe5 	bl	13ca4 <z_log_msg_local_claim>
	if (msg) {
   13cda:	4605      	mov	r5, r0
   13cdc:	b360      	cbz	r0, 13d38 <z_impl_log_process+0x6c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   13cde:	f3bf 8f5b 	dmb	ish
   13ce2:	4b2c      	ldr	r3, [pc, #176]	; (13d94 <z_impl_log_process+0xc8>)
   13ce4:	e853 1f00 	ldrex	r1, [r3]
   13ce8:	3901      	subs	r1, #1
   13cea:	e843 1200 	strex	r2, r1, [r3]
   13cee:	2a00      	cmp	r2, #0
   13cf0:	d1f8      	bne.n	13ce4 <z_impl_log_process+0x18>
   13cf2:	f3bf 8f5b 	dmb	ish
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13cf6:	4c28      	ldr	r4, [pc, #160]	; (13d98 <z_impl_log_process+0xcc>)
   13cf8:	4e28      	ldr	r6, [pc, #160]	; (13d9c <z_impl_log_process+0xd0>)
   13cfa:	42b4      	cmp	r4, r6
   13cfc:	d918      	bls.n	13d30 <z_impl_log_process+0x64>
   13cfe:	4928      	ldr	r1, [pc, #160]	; (13da0 <z_impl_log_process+0xd4>)
   13d00:	4a28      	ldr	r2, [pc, #160]	; (13da4 <z_impl_log_process+0xd8>)
   13d02:	4829      	ldr	r0, [pc, #164]	; (13da8 <z_impl_log_process+0xdc>)
   13d04:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   13d08:	f013 fa68 	bl	271dc <assert_print>
   13d0c:	4827      	ldr	r0, [pc, #156]	; (13dac <z_impl_log_process+0xe0>)
   13d0e:	f013 fa65 	bl	271dc <assert_print>
   13d12:	4824      	ldr	r0, [pc, #144]	; (13da4 <z_impl_log_process+0xd8>)
   13d14:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   13d18:	f013 fa59 	bl	271ce <assert_post_action>
	return backend->cb->active;
   13d1c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
   13d1e:	795b      	ldrb	r3, [r3, #5]
   13d20:	b123      	cbz	r3, 13d2c <z_impl_log_process+0x60>
	backend->api->process(backend, msg);
   13d22:	6823      	ldr	r3, [r4, #0]
   13d24:	4629      	mov	r1, r5
   13d26:	681b      	ldr	r3, [r3, #0]
   13d28:	4620      	mov	r0, r4
   13d2a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13d2c:	3410      	adds	r4, #16
   13d2e:	e7e4      	b.n	13cfa <z_impl_log_process+0x2e>
   13d30:	d3f4      	bcc.n	13d1c <z_impl_log_process+0x50>
		z_log_msg_free(msg);
   13d32:	4628      	mov	r0, r5
   13d34:	f7ff ffbc 	bl	13cb0 <z_log_msg_free>
	return dropped_cnt > 0;
   13d38:	4b1d      	ldr	r3, [pc, #116]	; (13db0 <z_impl_log_process+0xe4>)
   13d3a:	4c1e      	ldr	r4, [pc, #120]	; (13db4 <z_impl_log_process+0xe8>)
		if ((dropped_pend || unordered_pend) &&
   13d3c:	681b      	ldr	r3, [r3, #0]
   13d3e:	2b00      	cmp	r3, #0
   13d40:	dd19      	ble.n	13d76 <z_impl_log_process+0xaa>
	return z_impl_k_uptime_ticks();
   13d42:	f015 fe5f 	bl	29a04 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   13d46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13d4a:	fba0 0302 	umull	r0, r3, r0, r2
   13d4e:	fb02 3101 	mla	r1, r2, r1, r3
   13d52:	0bc3      	lsrs	r3, r0, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   13d54:	e9d4 2000 	ldrd	r2, r0, [r4]
   13d58:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   13d5c:	1a9b      	subs	r3, r3, r2
   13d5e:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		if ((dropped_pend || unordered_pend) &&
   13d62:	f240 32e9 	movw	r2, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   13d66:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
   13d6a:	4293      	cmp	r3, r2
   13d6c:	f171 0100 	sbcs.w	r1, r1, #0
   13d70:	d301      	bcc.n	13d76 <z_impl_log_process+0xaa>
				dropped_notify();
   13d72:	f7ff ff35 	bl	13be0 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
   13d76:	e9d4 3200 	ldrd	r3, r2, [r4]
   13d7a:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
   13d7e:	f142 0200 	adc.w	r2, r2, #0
   13d82:	e9c4 3200 	strd	r3, r2, [r4]
}
   13d86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
   13d8a:	f7ff bf99 	b.w	13cc0 <z_log_msg_pending>
}
   13d8e:	bd70      	pop	{r4, r5, r6, pc}
   13d90:	20004315 	.word	0x20004315
   13d94:	20002f18 	.word	0x20002f18
   13d98:	0002a090 	.word	0x0002a090
   13d9c:	0002a0b0 	.word	0x0002a0b0
   13da0:	0002b38b 	.word	0x0002b38b
   13da4:	0002b33a 	.word	0x0002b33a
   13da8:	0002ae37 	.word	0x0002ae37
   13dac:	0002b3ac 	.word	0x0002b3ac
   13db0:	20002f14 	.word	0x20002f14
   13db4:	20001e30 	.word	0x20001e30

00013db8 <z_impl_log_panic>:
{
   13db8:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
   13dba:	4d15      	ldr	r5, [pc, #84]	; (13e10 <z_impl_log_panic+0x58>)
   13dbc:	7829      	ldrb	r1, [r5, #0]
   13dbe:	bb29      	cbnz	r1, 13e0c <z_impl_log_panic+0x54>
	(void)z_log_init(true, false);
   13dc0:	2001      	movs	r0, #1
   13dc2:	f7ff fe4b 	bl	13a5c <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13dc6:	4c13      	ldr	r4, [pc, #76]	; (13e14 <z_impl_log_panic+0x5c>)
   13dc8:	4e13      	ldr	r6, [pc, #76]	; (13e18 <z_impl_log_panic+0x60>)
   13dca:	42b4      	cmp	r4, r6
   13dcc:	d917      	bls.n	13dfe <z_impl_log_panic+0x46>
   13dce:	4913      	ldr	r1, [pc, #76]	; (13e1c <z_impl_log_panic+0x64>)
   13dd0:	4a13      	ldr	r2, [pc, #76]	; (13e20 <z_impl_log_panic+0x68>)
   13dd2:	4814      	ldr	r0, [pc, #80]	; (13e24 <z_impl_log_panic+0x6c>)
   13dd4:	f240 1387 	movw	r3, #391	; 0x187
   13dd8:	f013 fa00 	bl	271dc <assert_print>
   13ddc:	4812      	ldr	r0, [pc, #72]	; (13e28 <z_impl_log_panic+0x70>)
   13dde:	f013 f9fd 	bl	271dc <assert_print>
   13de2:	480f      	ldr	r0, [pc, #60]	; (13e20 <z_impl_log_panic+0x68>)
   13de4:	f240 1187 	movw	r1, #391	; 0x187
   13de8:	f013 f9f1 	bl	271ce <assert_post_action>
	return backend->cb->active;
   13dec:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   13dee:	795b      	ldrb	r3, [r3, #5]
   13df0:	b11b      	cbz	r3, 13dfa <z_impl_log_panic+0x42>
	backend->api->panic(backend);
   13df2:	6823      	ldr	r3, [r4, #0]
   13df4:	4620      	mov	r0, r4
   13df6:	689b      	ldr	r3, [r3, #8]
   13df8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13dfa:	3410      	adds	r4, #16
   13dfc:	e7e5      	b.n	13dca <z_impl_log_panic+0x12>
   13dfe:	d3f5      	bcc.n	13dec <z_impl_log_panic+0x34>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
   13e00:	f7ff ff64 	bl	13ccc <z_impl_log_process>
		while (log_process() == true) {
   13e04:	2800      	cmp	r0, #0
   13e06:	d1fb      	bne.n	13e00 <z_impl_log_panic+0x48>
	panic_mode = true;
   13e08:	2301      	movs	r3, #1
   13e0a:	702b      	strb	r3, [r5, #0]
}
   13e0c:	bd70      	pop	{r4, r5, r6, pc}
   13e0e:	bf00      	nop
   13e10:	20004316 	.word	0x20004316
   13e14:	0002a090 	.word	0x0002a090
   13e18:	0002a0b0 	.word	0x0002a0b0
   13e1c:	0002b38b 	.word	0x0002b38b
   13e20:	0002b33a 	.word	0x0002b33a
   13e24:	0002ae37 	.word	0x0002ae37
   13e28:	0002b3ac 	.word	0x0002b3ac

00013e2c <log_process_thread_func>:
{
   13e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	STRUCT_SECTION_COUNT(log_backend, &cnt);
   13e30:	4b2f      	ldr	r3, [pc, #188]	; (13ef0 <log_process_thread_func+0xc4>)
   13e32:	4f30      	ldr	r7, [pc, #192]	; (13ef4 <log_process_thread_func+0xc8>)
   13e34:	1afb      	subs	r3, r7, r3
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
   13e36:	091b      	lsrs	r3, r3, #4
   13e38:	d10b      	bne.n	13e52 <log_process_thread_func+0x26>
   13e3a:	492f      	ldr	r1, [pc, #188]	; (13ef8 <log_process_thread_func+0xcc>)
   13e3c:	4a2f      	ldr	r2, [pc, #188]	; (13efc <log_process_thread_func+0xd0>)
   13e3e:	4830      	ldr	r0, [pc, #192]	; (13f00 <log_process_thread_func+0xd4>)
   13e40:	f240 335b 	movw	r3, #859	; 0x35b
   13e44:	f013 f9ca 	bl	271dc <assert_print>
   13e48:	f240 315b 	movw	r1, #859	; 0x35b
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13e4c:	482b      	ldr	r0, [pc, #172]	; (13efc <log_process_thread_func+0xd0>)
   13e4e:	f013 f9be 	bl	271ce <assert_post_action>
	uint32_t activate_mask = z_log_init(false, false);
   13e52:	2100      	movs	r1, #0
   13e54:	4608      	mov	r0, r1
   13e56:	f7ff fe01 	bl	13a5c <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   13e5a:	4604      	mov	r4, r0
   13e5c:	b340      	cbz	r0, 13eb0 <log_process_thread_func+0x84>
   13e5e:	f240 6867 	movw	r8, #1639	; 0x667
   13e62:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
   13e66:	f00e fe97 	bl	22b98 <z_impl_z_current_get>
	proc_tid = process_tid;
   13e6a:	4b26      	ldr	r3, [pc, #152]	; (13f04 <log_process_thread_func+0xd8>)
   13e6c:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   13e6e:	b130      	cbz	r0, 13e7e <log_process_thread_func+0x52>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   13e70:	4b25      	ldr	r3, [pc, #148]	; (13f08 <log_process_thread_func+0xdc>)
	    process_tid &&
   13e72:	681b      	ldr	r3, [r3, #0]
   13e74:	2b09      	cmp	r3, #9
   13e76:	dd02      	ble.n	13e7e <log_process_thread_func+0x52>
	z_impl_k_sem_give(sem);
   13e78:	4824      	ldr	r0, [pc, #144]	; (13f0c <log_process_thread_func+0xe0>)
   13e7a:	f00d f807 	bl	20e8c <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   13e7e:	f8df a08c 	ldr.w	sl, [pc, #140]	; 13f0c <log_process_thread_func+0xe0>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   13e82:	2500      	movs	r5, #0
		if (activate_mask) {
   13e84:	b144      	cbz	r4, 13e98 <log_process_thread_func+0x6c>
			activate_mask = activate_foreach_backend(activate_mask);
   13e86:	4620      	mov	r0, r4
   13e88:	f7ff fdb6 	bl	139f8 <activate_foreach_backend>
			if (!activate_mask) {
   13e8c:	4604      	mov	r4, r0
   13e8e:	b918      	cbnz	r0, 13e98 <log_process_thread_func+0x6c>
				timeout = K_FOREVER;
   13e90:	f04f 38ff 	mov.w	r8, #4294967295
   13e94:	f04f 39ff 	mov.w	r9, #4294967295
   13e98:	f7ff ff18 	bl	13ccc <z_impl_log_process>
		if (log_process() == false) {
   13e9c:	4606      	mov	r6, r0
   13e9e:	b928      	cbnz	r0, 13eac <log_process_thread_func+0x80>
			if (processed_any) {
   13ea0:	b95d      	cbnz	r5, 13eba <log_process_thread_func+0x8e>
   13ea2:	4642      	mov	r2, r8
   13ea4:	464b      	mov	r3, r9
   13ea6:	4650      	mov	r0, sl
   13ea8:	f00d f834 	bl	20f14 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   13eac:	4635      	mov	r5, r6
   13eae:	e7e9      	b.n	13e84 <log_process_thread_func+0x58>
   13eb0:	f04f 38ff 	mov.w	r8, #4294967295
   13eb4:	f04f 39ff 	mov.w	r9, #4294967295
   13eb8:	e7d5      	b.n	13e66 <log_process_thread_func+0x3a>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13eba:	4d0d      	ldr	r5, [pc, #52]	; (13ef0 <log_process_thread_func+0xc4>)
   13ebc:	e008      	b.n	13ed0 <log_process_thread_func+0xa4>
   13ebe:	d2f0      	bcs.n	13ea2 <log_process_thread_func+0x76>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
   13ec0:	682b      	ldr	r3, [r5, #0]
   13ec2:	699b      	ldr	r3, [r3, #24]
   13ec4:	b11b      	cbz	r3, 13ece <log_process_thread_func+0xa2>
		backend->api->notify(backend, event, arg);
   13ec6:	2200      	movs	r2, #0
   13ec8:	4611      	mov	r1, r2
   13eca:	4628      	mov	r0, r5
   13ecc:	4798      	blx	r3
   13ece:	3510      	adds	r5, #16
   13ed0:	42bd      	cmp	r5, r7
   13ed2:	d9f4      	bls.n	13ebe <log_process_thread_func+0x92>
   13ed4:	490e      	ldr	r1, [pc, #56]	; (13f10 <log_process_thread_func+0xe4>)
   13ed6:	4a09      	ldr	r2, [pc, #36]	; (13efc <log_process_thread_func+0xd0>)
   13ed8:	4809      	ldr	r0, [pc, #36]	; (13f00 <log_process_thread_func+0xd4>)
   13eda:	f240 334f 	movw	r3, #847	; 0x34f
   13ede:	f013 f97d 	bl	271dc <assert_print>
   13ee2:	480c      	ldr	r0, [pc, #48]	; (13f14 <log_process_thread_func+0xe8>)
   13ee4:	f013 f97a 	bl	271dc <assert_print>
   13ee8:	f240 314f 	movw	r1, #847	; 0x34f
   13eec:	e7ae      	b.n	13e4c <log_process_thread_func+0x20>
   13eee:	bf00      	nop
   13ef0:	0002a090 	.word	0x0002a090
   13ef4:	0002a0b0 	.word	0x0002a0b0
   13ef8:	0002b3cb 	.word	0x0002b3cb
   13efc:	0002b33a 	.word	0x0002b33a
   13f00:	0002ae37 	.word	0x0002ae37
   13f04:	20002f10 	.word	0x20002f10
   13f08:	20002f18 	.word	0x20002f18
   13f0c:	20000a58 	.word	0x20000a58
   13f10:	0002b38b 	.word	0x0002b38b
   13f14:	0002b3ac 	.word	0x0002b3ac

00013f18 <z_log_msg_post_finalize>:
{
   13f18:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
   13f1a:	482b      	ldr	r0, [pc, #172]	; (13fc8 <z_log_msg_post_finalize+0xb0>)
   13f1c:	f013 fa87 	bl	2742e <atomic_inc>
	if (panic_mode) {
   13f20:	4b2a      	ldr	r3, [pc, #168]	; (13fcc <z_log_msg_post_finalize+0xb4>)
   13f22:	781b      	ldrb	r3, [r3, #0]
   13f24:	2b00      	cmp	r3, #0
   13f26:	d034      	beq.n	13f92 <z_log_msg_post_finalize+0x7a>
   13f28:	f04f 0340 	mov.w	r3, #64	; 0x40
   13f2c:	f3ef 8411 	mrs	r4, BASEPRI
   13f30:	f383 8812 	msr	BASEPRI_MAX, r3
   13f34:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13f38:	4825      	ldr	r0, [pc, #148]	; (13fd0 <z_log_msg_post_finalize+0xb8>)
   13f3a:	f00c fced 	bl	20918 <z_spin_lock_valid>
   13f3e:	b968      	cbnz	r0, 13f5c <z_log_msg_post_finalize+0x44>
   13f40:	4a24      	ldr	r2, [pc, #144]	; (13fd4 <z_log_msg_post_finalize+0xbc>)
   13f42:	4925      	ldr	r1, [pc, #148]	; (13fd8 <z_log_msg_post_finalize+0xc0>)
   13f44:	4825      	ldr	r0, [pc, #148]	; (13fdc <z_log_msg_post_finalize+0xc4>)
   13f46:	2394      	movs	r3, #148	; 0x94
   13f48:	f013 f948 	bl	271dc <assert_print>
   13f4c:	4920      	ldr	r1, [pc, #128]	; (13fd0 <z_log_msg_post_finalize+0xb8>)
   13f4e:	4824      	ldr	r0, [pc, #144]	; (13fe0 <z_log_msg_post_finalize+0xc8>)
   13f50:	f013 f944 	bl	271dc <assert_print>
   13f54:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13f56:	481f      	ldr	r0, [pc, #124]	; (13fd4 <z_log_msg_post_finalize+0xbc>)
   13f58:	f013 f939 	bl	271ce <assert_post_action>
	z_spin_lock_set_owner(l);
   13f5c:	481c      	ldr	r0, [pc, #112]	; (13fd0 <z_log_msg_post_finalize+0xb8>)
   13f5e:	f00c fcf9 	bl	20954 <z_spin_lock_set_owner>
   13f62:	f7ff feb3 	bl	13ccc <z_impl_log_process>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13f66:	481a      	ldr	r0, [pc, #104]	; (13fd0 <z_log_msg_post_finalize+0xb8>)
   13f68:	f00c fce4 	bl	20934 <z_spin_unlock_valid>
   13f6c:	b958      	cbnz	r0, 13f86 <z_log_msg_post_finalize+0x6e>
   13f6e:	4a19      	ldr	r2, [pc, #100]	; (13fd4 <z_log_msg_post_finalize+0xbc>)
   13f70:	491c      	ldr	r1, [pc, #112]	; (13fe4 <z_log_msg_post_finalize+0xcc>)
   13f72:	481a      	ldr	r0, [pc, #104]	; (13fdc <z_log_msg_post_finalize+0xc4>)
   13f74:	23c2      	movs	r3, #194	; 0xc2
   13f76:	f013 f931 	bl	271dc <assert_print>
   13f7a:	4915      	ldr	r1, [pc, #84]	; (13fd0 <z_log_msg_post_finalize+0xb8>)
   13f7c:	481a      	ldr	r0, [pc, #104]	; (13fe8 <z_log_msg_post_finalize+0xd0>)
   13f7e:	f013 f92d 	bl	271dc <assert_print>
   13f82:	21c2      	movs	r1, #194	; 0xc2
   13f84:	e7e7      	b.n	13f56 <z_log_msg_post_finalize+0x3e>
	__asm__ volatile(
   13f86:	f384 8811 	msr	BASEPRI, r4
   13f8a:	f3bf 8f6f 	isb	sy
}
   13f8e:	b002      	add	sp, #8
   13f90:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
   13f92:	4b16      	ldr	r3, [pc, #88]	; (13fec <z_log_msg_post_finalize+0xd4>)
   13f94:	681b      	ldr	r3, [r3, #0]
   13f96:	2b00      	cmp	r3, #0
   13f98:	d0f9      	beq.n	13f8e <z_log_msg_post_finalize+0x76>
		if (cnt == 0) {
   13f9a:	b950      	cbnz	r0, 13fb2 <z_log_msg_post_finalize+0x9a>
	z_impl_k_timer_start(timer, duration, period);
   13f9c:	2200      	movs	r2, #0
   13f9e:	2300      	movs	r3, #0
   13fa0:	e9cd 2300 	strd	r2, r3, [sp]
   13fa4:	4812      	ldr	r0, [pc, #72]	; (13ff0 <z_log_msg_post_finalize+0xd8>)
   13fa6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   13faa:	2300      	movs	r3, #0
   13fac:	f00f fa98 	bl	234e0 <z_impl_k_timer_start>
   13fb0:	e7ed      	b.n	13f8e <z_log_msg_post_finalize+0x76>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   13fb2:	280a      	cmp	r0, #10
   13fb4:	d1eb      	bne.n	13f8e <z_log_msg_post_finalize+0x76>
	z_impl_k_timer_stop(timer);
   13fb6:	480e      	ldr	r0, [pc, #56]	; (13ff0 <z_log_msg_post_finalize+0xd8>)
   13fb8:	f015 fd58 	bl	29a6c <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   13fbc:	480d      	ldr	r0, [pc, #52]	; (13ff4 <z_log_msg_post_finalize+0xdc>)
}
   13fbe:	b002      	add	sp, #8
   13fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13fc4:	f00c bf62 	b.w	20e8c <z_impl_k_sem_give>
   13fc8:	20002f18 	.word	0x20002f18
   13fcc:	20004316 	.word	0x20004316
   13fd0:	20002f08 	.word	0x20002f08
   13fd4:	0002b22b 	.word	0x0002b22b
   13fd8:	0002b284 	.word	0x0002b284
   13fdc:	0002ae37 	.word	0x0002ae37
   13fe0:	0002b299 	.word	0x0002b299
   13fe4:	0002b258 	.word	0x0002b258
   13fe8:	0002b26f 	.word	0x0002b26f
   13fec:	20002f10 	.word	0x20002f10
   13ff0:	20001e38 	.word	0x20001e38
   13ff4:	20000a58 	.word	0x20000a58

00013ff8 <z_log_msg_commit>:
{
   13ff8:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
   13ffa:	4b06      	ldr	r3, [pc, #24]	; (14014 <z_log_msg_commit+0x1c>)
   13ffc:	681b      	ldr	r3, [r3, #0]
{
   13ffe:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   14000:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
   14002:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
   14004:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
   14006:	4804      	ldr	r0, [pc, #16]	; (14018 <z_log_msg_commit+0x20>)
   14008:	f7ff fb60 	bl	136cc <mpsc_pbuf_commit>
}
   1400c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
   14010:	f7ff bf82 	b.w	13f18 <z_log_msg_post_finalize>
   14014:	200005d0 	.word	0x200005d0
   14018:	20000908 	.word	0x20000908

0001401c <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   1401c:	4a04      	ldr	r2, [pc, #16]	; (14030 <log_source_name_get+0x14>)
   1401e:	4b05      	ldr	r3, [pc, #20]	; (14034 <log_source_name_get+0x18>)
   14020:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
   14022:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
   14026:	bf34      	ite	cc
   14028:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
   1402c:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
   1402e:	4770      	bx	lr
   14030:	00029f90 	.word	0x00029f90
   14034:	0002a090 	.word	0x0002a090

00014038 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   14038:	4b0e      	ldr	r3, [pc, #56]	; (14074 <log_backend_enable+0x3c>)
   1403a:	1ac3      	subs	r3, r0, r3
   1403c:	111b      	asrs	r3, r3, #4
   1403e:	3301      	adds	r3, #1
{
   14040:	b510      	push	{r4, lr}

	log_backend_id_set(backend, id);
   14042:	b2db      	uxtb	r3, r3
	__ASSERT_NO_MSG(backend != NULL);
   14044:	b948      	cbnz	r0, 1405a <log_backend_enable+0x22>
   14046:	490c      	ldr	r1, [pc, #48]	; (14078 <log_backend_enable+0x40>)
   14048:	480c      	ldr	r0, [pc, #48]	; (1407c <log_backend_enable+0x44>)
   1404a:	4a0d      	ldr	r2, [pc, #52]	; (14080 <log_backend_enable+0x48>)
   1404c:	23de      	movs	r3, #222	; 0xde
   1404e:	f013 f8c5 	bl	271dc <assert_print>
   14052:	480b      	ldr	r0, [pc, #44]	; (14080 <log_backend_enable+0x48>)
   14054:	21de      	movs	r1, #222	; 0xde
   14056:	f013 f8ba 	bl	271ce <assert_post_action>
	backend->cb->id = id;
   1405a:	6844      	ldr	r4, [r0, #4]
   1405c:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
   1405e:	6843      	ldr	r3, [r0, #4]
   14060:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
   14062:	6843      	ldr	r3, [r0, #4]
   14064:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   14066:	6843      	ldr	r3, [r0, #4]
   14068:	2201      	movs	r2, #1
   1406a:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
   1406c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_notify_backend_enabled();
   14070:	f7ff bd80 	b.w	13b74 <z_log_notify_backend_enabled>
   14074:	0002a090 	.word	0x0002a090
   14078:	0002b46b 	.word	0x0002b46b
   1407c:	0002ae37 	.word	0x0002ae37
   14080:	0002b433 	.word	0x0002b433

00014084 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   14084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14088:	b08f      	sub	sp, #60	; 0x3c
   1408a:	af04      	add	r7, sp, #16
   1408c:	f3c1 284a 	ubfx	r8, r1, #9, #11
   14090:	60b8      	str	r0, [r7, #8]
   14092:	460d      	mov	r5, r1
   14094:	4691      	mov	r9, r2
   14096:	607b      	str	r3, [r7, #4]

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
   14098:	0d0c      	lsrs	r4, r1, #20
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
   1409a:	f1b8 0f00 	cmp.w	r8, #0
   1409e:	d066      	beq.n	1416e <z_impl_z_log_msg_static_create+0xea>
	struct z_cbprintf_buf_desc buf_desc = {
   140a0:	2600      	movs	r6, #0
	return cbprintf_package_convert(in_packaged, in_len,
   140a2:	f107 0314 	add.w	r3, r7, #20
   140a6:	f04f 0b04 	mov.w	fp, #4
   140aa:	f04f 0a0a 	mov.w	sl, #10
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
   140ae:	f8c7 800c 	str.w	r8, [r7, #12]
	struct z_cbprintf_buf_desc buf_desc = {
   140b2:	e9c7 6607 	strd	r6, r6, [r7, #28]
   140b6:	627e      	str	r6, [r7, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
   140b8:	9301      	str	r3, [sp, #4]
   140ba:	f8cd b008 	str.w	fp, [sp, #8]
   140be:	f8cd a000 	str.w	sl, [sp]
   140c2:	f107 031c 	add.w	r3, r7, #28
   140c6:	68f9      	ldr	r1, [r7, #12]
   140c8:	4632      	mov	r2, r6
   140ca:	4648      	mov	r0, r9
   140cc:	f7fe fb9c 	bl	12808 <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
   140d0:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   140d4:	4603      	mov	r3, r0
   140d6:	d31c      	bcc.n	14112 <z_impl_z_log_msg_static_create+0x8e>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
   140d8:	466c      	mov	r4, sp
   140da:	b08a      	sub	sp, #40	; 0x28
   140dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
   140e0:	ab04      	add	r3, sp, #16
   140e2:	482b      	ldr	r0, [pc, #172]	; (14190 <z_impl_z_log_msg_static_create+0x10c>)
   140e4:	e9c3 0105 	strd	r0, r1, [r3, #20]
   140e8:	f240 71ff 	movw	r1, #2047	; 0x7ff
   140ec:	61d9      	str	r1, [r3, #28]
   140ee:	461a      	mov	r2, r3
   140f0:	f44f 7100 	mov.w	r1, #512	; 0x200
   140f4:	8419      	strh	r1, [r3, #32]
   140f6:	4b27      	ldr	r3, [pc, #156]	; (14194 <z_impl_z_log_msg_static_create+0x110>)
   140f8:	f842 3f10 	str.w	r3, [r2, #16]!
   140fc:	4826      	ldr	r0, [pc, #152]	; (14198 <z_impl_z_log_msg_static_create+0x114>)
   140fe:	4633      	mov	r3, r6
   14100:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   14104:	f7ff ffbe 	bl	14084 <z_impl_z_log_msg_static_create>
   14108:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
   1410a:	372c      	adds	r7, #44	; 0x2c
   1410c:	46bd      	mov	sp, r7
   1410e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_desc.package_len = len;
   14112:	f3c0 080a 	ubfx	r8, r0, #0, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   14116:	f104 0017 	add.w	r0, r4, #23
   1411a:	4418      	add	r0, r3
   1411c:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   14120:	0880      	lsrs	r0, r0, #2
   14122:	603b      	str	r3, [r7, #0]
   14124:	f7ff fdb6 	bl	13c94 <z_log_msg_alloc>
   14128:	f368 2553 	bfi	r5, r8, #9, #11
		if (msg) {
   1412c:	4604      	mov	r4, r0
   1412e:	b330      	cbz	r0, 1417e <z_impl_z_log_msg_static_create+0xfa>
	struct z_cbprintf_buf_desc buf_desc = {
   14130:	683b      	ldr	r3, [r7, #0]
	return cbprintf_package_convert(in_packaged, in_len,
   14132:	4a1a      	ldr	r2, [pc, #104]	; (1419c <z_impl_z_log_msg_static_create+0x118>)
	struct z_cbprintf_buf_desc buf_desc = {
   14134:	e9c7 3608 	strd	r3, r6, [r7, #32]
						    msg->data, out_desc.package_len,
   14138:	f100 0110 	add.w	r1, r0, #16
	return cbprintf_package_convert(in_packaged, in_len,
   1413c:	f107 0314 	add.w	r3, r7, #20
	struct z_cbprintf_buf_desc buf_desc = {
   14140:	61f9      	str	r1, [r7, #28]
	return cbprintf_package_convert(in_packaged, in_len,
   14142:	e9cd a300 	strd	sl, r3, [sp]
   14146:	f8cd b008 	str.w	fp, [sp, #8]
   1414a:	68f9      	ldr	r1, [r7, #12]
   1414c:	f107 031c 	add.w	r3, r7, #28
   14150:	4648      	mov	r0, r9
   14152:	f7fe fb59 	bl	12808 <cbprintf_package_convert>
			__ASSERT_NO_MSG(len >= 0);
   14156:	2800      	cmp	r0, #0
   14158:	da11      	bge.n	1417e <z_impl_z_log_msg_static_create+0xfa>
   1415a:	4911      	ldr	r1, [pc, #68]	; (141a0 <z_impl_z_log_msg_static_create+0x11c>)
   1415c:	4811      	ldr	r0, [pc, #68]	; (141a4 <z_impl_z_log_msg_static_create+0x120>)
   1415e:	4a12      	ldr	r2, [pc, #72]	; (141a8 <z_impl_z_log_msg_static_create+0x124>)
   14160:	2356      	movs	r3, #86	; 0x56
   14162:	f013 f83b 	bl	271dc <assert_print>
   14166:	4810      	ldr	r0, [pc, #64]	; (141a8 <z_impl_z_log_msg_static_create+0x124>)
   14168:	2156      	movs	r1, #86	; 0x56
   1416a:	f013 f830 	bl	271ce <assert_post_action>
   1416e:	f104 0017 	add.w	r0, r4, #23
   14172:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   14176:	0880      	lsrs	r0, r0, #2
   14178:	f7ff fd8c 	bl	13c94 <z_log_msg_alloc>
   1417c:	4604      	mov	r4, r0
	z_log_msg_finalize(msg, source, out_desc, data);
   1417e:	f368 2553 	bfi	r5, r8, #9, #11
   14182:	687b      	ldr	r3, [r7, #4]
   14184:	68b9      	ldr	r1, [r7, #8]
   14186:	462a      	mov	r2, r5
   14188:	4620      	mov	r0, r4
   1418a:	f013 f986 	bl	2749a <z_log_msg_finalize>
   1418e:	e7bc      	b.n	1410a <z_impl_z_log_msg_static_create+0x86>
   14190:	0002b48b 	.word	0x0002b48b
   14194:	01000004 	.word	0x01000004
   14198:	0002a038 	.word	0x0002a038
   1419c:	0002746f 	.word	0x0002746f
   141a0:	0002b4f7 	.word	0x0002b4f7
   141a4:	0002ae37 	.word	0x0002ae37
   141a8:	0002b4ca 	.word	0x0002b4ca

000141ac <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   141ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141b0:	b087      	sub	sp, #28
   141b2:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
   141b6:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
   141ba:	4604      	mov	r4, r0
   141bc:	460f      	mov	r7, r1
   141be:	4693      	mov	fp, r2
   141c0:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
   141c2:	b1ae      	cbz	r6, 141f0 <z_impl_z_log_msg_runtime_vcreate+0x44>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
   141c4:	2110      	movs	r1, #16
   141c6:	f8cd 9000 	str.w	r9, [sp]
   141ca:	4633      	mov	r3, r6
   141cc:	4652      	mov	r2, sl
   141ce:	2000      	movs	r0, #0
		va_copy(ap2, ap);
   141d0:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
   141d4:	f7fe f8fc 	bl	123d0 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
   141d8:	1e01      	subs	r1, r0, #0
   141da:	da0a      	bge.n	141f2 <z_impl_z_log_msg_runtime_vcreate+0x46>
   141dc:	491f      	ldr	r1, [pc, #124]	; (1425c <z_impl_z_log_msg_runtime_vcreate+0xb0>)
   141de:	4a20      	ldr	r2, [pc, #128]	; (14260 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
   141e0:	4820      	ldr	r0, [pc, #128]	; (14264 <z_impl_z_log_msg_runtime_vcreate+0xb8>)
   141e2:	2375      	movs	r3, #117	; 0x75
   141e4:	f012 fffa 	bl	271dc <assert_print>
   141e8:	2175      	movs	r1, #117	; 0x75
		pkg = msg->data;
	}

	if (pkg && fmt) {
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
		__ASSERT_NO_MSG(plen >= 0);
   141ea:	481d      	ldr	r0, [pc, #116]	; (14260 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
   141ec:	f012 ffef 	bl	271ce <assert_post_action>
		plen = 0;
   141f0:	4631      	mov	r1, r6
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   141f2:	f105 0017 	add.w	r0, r5, #23
   141f6:	4408      	add	r0, r1
	struct log_msg_desc desc =
   141f8:	4b1b      	ldr	r3, [pc, #108]	; (14268 <z_impl_z_log_msg_runtime_vcreate+0xbc>)
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   141fa:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
   141fc:	f004 0407 	and.w	r4, r4, #7
   14200:	f00b 0b07 	and.w	fp, fp, #7
   14204:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   14206:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
   1420a:	ea03 2341 	and.w	r3, r3, r1, lsl #9
   1420e:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
		msg = z_log_msg_alloc(msg_wlen);
   14212:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
   14214:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
   14216:	f7ff fd3d 	bl	13c94 <z_log_msg_alloc>
	struct log_msg_desc desc =
   1421a:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
			pkg = msg ? msg->data : NULL;
   1421e:	4605      	mov	r5, r0
   14220:	b190      	cbz	r0, 14248 <z_impl_z_log_msg_runtime_vcreate+0x9c>
	if (pkg && fmt) {
   14222:	b18e      	cbz	r6, 14248 <z_impl_z_log_msg_runtime_vcreate+0x9c>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   14224:	9903      	ldr	r1, [sp, #12]
   14226:	f8cd 9000 	str.w	r9, [sp]
   1422a:	4633      	mov	r3, r6
   1422c:	4652      	mov	r2, sl
   1422e:	3010      	adds	r0, #16
   14230:	f7fe f8ce 	bl	123d0 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
   14234:	2800      	cmp	r0, #0
   14236:	da07      	bge.n	14248 <z_impl_z_log_msg_runtime_vcreate+0x9c>
   14238:	4908      	ldr	r1, [pc, #32]	; (1425c <z_impl_z_log_msg_runtime_vcreate+0xb0>)
   1423a:	4a09      	ldr	r2, [pc, #36]	; (14260 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
   1423c:	4809      	ldr	r0, [pc, #36]	; (14264 <z_impl_z_log_msg_runtime_vcreate+0xb8>)
   1423e:	238f      	movs	r3, #143	; 0x8f
   14240:	f012 ffcc 	bl	271dc <assert_print>
   14244:	218f      	movs	r1, #143	; 0x8f
   14246:	e7d0      	b.n	141ea <z_impl_z_log_msg_runtime_vcreate+0x3e>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   14248:	4643      	mov	r3, r8
   1424a:	4622      	mov	r2, r4
   1424c:	4639      	mov	r1, r7
   1424e:	4628      	mov	r0, r5
	}
}
   14250:	b007      	add	sp, #28
   14252:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
   14256:	f013 b920 	b.w	2749a <z_log_msg_finalize>
   1425a:	bf00      	nop
   1425c:	0002b4f6 	.word	0x0002b4f6
   14260:	0002b4ca 	.word	0x0002b4ca
   14264:	0002ae37 	.word	0x0002ae37
   14268:	000ffe00 	.word	0x000ffe00

0001426c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   1426c:	b40e      	push	{r1, r2, r3}
   1426e:	b503      	push	{r0, r1, lr}
   14270:	ab03      	add	r3, sp, #12
   14272:	4601      	mov	r1, r0
   14274:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   14278:	4804      	ldr	r0, [pc, #16]	; (1428c <print_formatted+0x20>)
	va_start(args, fmt);
   1427a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   1427c:	f013 f933 	bl	274e6 <cbvprintf>
	va_end(args);

	return length;
}
   14280:	b002      	add	sp, #8
   14282:	f85d eb04 	ldr.w	lr, [sp], #4
   14286:	b003      	add	sp, #12
   14288:	4770      	bx	lr
   1428a:	bf00      	nop
   1428c:	000142ad 	.word	0x000142ad

00014290 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   14290:	06ca      	lsls	r2, r1, #27
   14292:	d405      	bmi.n	142a0 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   14294:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
   14296:	bf4c      	ite	mi
   14298:	4902      	ldrmi	r1, [pc, #8]	; (142a4 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
   1429a:	4903      	ldrpl	r1, [pc, #12]	; (142a8 <newline_print+0x18>)
   1429c:	f7ff bfe6 	b.w	1426c <print_formatted>
	}
}
   142a0:	4770      	bx	lr
   142a2:	bf00      	nop
   142a4:	0002d49f 	.word	0x0002d49f
   142a8:	0002b500 	.word	0x0002b500

000142ac <out_func>:
{
   142ac:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   142ae:	684b      	ldr	r3, [r1, #4]
   142b0:	681a      	ldr	r2, [r3, #0]
   142b2:	68cb      	ldr	r3, [r1, #12]
   142b4:	429a      	cmp	r2, r3
{
   142b6:	4605      	mov	r5, r0
   142b8:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   142ba:	d102      	bne.n	142c2 <out_func+0x16>
		log_output_flush(out_ctx);
   142bc:	4608      	mov	r0, r1
   142be:	f013 f919 	bl	274f4 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   142c2:	6863      	ldr	r3, [r4, #4]
   142c4:	f3bf 8f5b 	dmb	ish
   142c8:	e853 2f00 	ldrex	r2, [r3]
   142cc:	1c51      	adds	r1, r2, #1
   142ce:	e843 1000 	strex	r0, r1, [r3]
   142d2:	2800      	cmp	r0, #0
   142d4:	d1f8      	bne.n	142c8 <out_func+0x1c>
   142d6:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   142da:	68a3      	ldr	r3, [r4, #8]
   142dc:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
   142de:	6863      	ldr	r3, [r4, #4]
   142e0:	681a      	ldr	r2, [r3, #0]
   142e2:	68e3      	ldr	r3, [r4, #12]
   142e4:	429a      	cmp	r2, r3
   142e6:	d909      	bls.n	142fc <out_func+0x50>
   142e8:	4905      	ldr	r1, [pc, #20]	; (14300 <out_func+0x54>)
   142ea:	4806      	ldr	r0, [pc, #24]	; (14304 <out_func+0x58>)
   142ec:	4a06      	ldr	r2, [pc, #24]	; (14308 <out_func+0x5c>)
   142ee:	237a      	movs	r3, #122	; 0x7a
   142f0:	f012 ff74 	bl	271dc <assert_print>
   142f4:	4804      	ldr	r0, [pc, #16]	; (14308 <out_func+0x5c>)
   142f6:	217a      	movs	r1, #122	; 0x7a
   142f8:	f012 ff69 	bl	271ce <assert_post_action>
}
   142fc:	2000      	movs	r0, #0
   142fe:	bd38      	pop	{r3, r4, r5, pc}
   14300:	0002b532 	.word	0x0002b532
   14304:	0002ae37 	.word	0x0002ae37
   14308:	0002b503 	.word	0x0002b503

0001430c <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   1430c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14310:	b08b      	sub	sp, #44	; 0x2c
   14312:	469b      	mov	fp, r3
   14314:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
   14318:	9305      	str	r3, [sp, #20]
   1431a:	e9dd 9315 	ldrd	r9, r3, [sp, #84]	; 0x54
   1431e:	9306      	str	r3, [sp, #24]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
   14320:	9b05      	ldr	r3, [sp, #20]
{
   14322:	9208      	str	r2, [sp, #32]
   14324:	e9dd 7617 	ldrd	r7, r6, [sp, #92]	; 0x5c
   14328:	4604      	mov	r4, r0
   1432a:	460d      	mov	r5, r1
	if (!raw_string) {
   1432c:	2b00      	cmp	r3, #0
   1432e:	f000 8087 	beq.w	14440 <log_output_process+0x134>
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   14332:	f006 0301 	and.w	r3, r6, #1
   14336:	9309      	str	r3, [sp, #36]	; 0x24
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   14338:	f006 0308 	and.w	r3, r6, #8
   1433c:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
   1433e:	f013 f894 	bl	2746a <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   14342:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
   14346:	4602      	mov	r2, r0
   14348:	2800      	cmp	r0, #0
   1434a:	d049      	beq.n	143e0 <log_output_process+0xd4>
		length += print_formatted(output, "%s ", tag);
   1434c:	498c      	ldr	r1, [pc, #560]	; (14580 <log_output_process+0x274>)
   1434e:	4620      	mov	r0, r4
   14350:	f7ff ff8c 	bl	1426c <print_formatted>
   14354:	4680      	mov	r8, r0
	if (stamp) {
   14356:	f1ba 0f00 	cmp.w	sl, #0
   1435a:	d008      	beq.n	1436e <log_output_process+0x62>
	if (!format) {
   1435c:	f016 0f44 	tst.w	r6, #68	; 0x44
   14360:	d140      	bne.n	143e4 <log_output_process+0xd8>
		length = print_formatted(output, "[%08lu] ", timestamp);
   14362:	4988      	ldr	r1, [pc, #544]	; (14584 <log_output_process+0x278>)
   14364:	462a      	mov	r2, r5
   14366:	4620      	mov	r0, r4
   14368:	f7ff ff80 	bl	1426c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   1436c:	4480      	add	r8, r0
	if (color) {
   1436e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14370:	b15b      	cbz	r3, 1438a <log_output_process+0x7e>
		const char *log_color = start && (colors[level] != NULL) ?
   14372:	4b85      	ldr	r3, [pc, #532]	; (14588 <log_output_process+0x27c>)
   14374:	9a05      	ldr	r2, [sp, #20]
		print_formatted(output, "%s", log_color);
   14376:	4985      	ldr	r1, [pc, #532]	; (1458c <log_output_process+0x280>)
		const char *log_color = start && (colors[level] != NULL) ?
   14378:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
   1437c:	4b84      	ldr	r3, [pc, #528]	; (14590 <log_output_process+0x284>)
   1437e:	4620      	mov	r0, r4
   14380:	2a00      	cmp	r2, #0
   14382:	bf08      	it	eq
   14384:	461a      	moveq	r2, r3
   14386:	f7ff ff71 	bl	1426c <print_formatted>
	if (level_on) {
   1438a:	9b07      	ldr	r3, [sp, #28]
   1438c:	2b00      	cmp	r3, #0
   1438e:	d055      	beq.n	1443c <log_output_process+0x130>
		total += print_formatted(output, "<%s> ", severity[level]);
   14390:	4b80      	ldr	r3, [pc, #512]	; (14594 <log_output_process+0x288>)
   14392:	9a05      	ldr	r2, [sp, #20]
   14394:	4980      	ldr	r1, [pc, #512]	; (14598 <log_output_process+0x28c>)
   14396:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   1439a:	4620      	mov	r0, r4
   1439c:	f7ff ff66 	bl	1426c <print_formatted>
   143a0:	4605      	mov	r5, r0
	if (domain) {
   143a2:	9b08      	ldr	r3, [sp, #32]
   143a4:	b12b      	cbz	r3, 143b2 <log_output_process+0xa6>
		total += print_formatted(output, "%s/", domain);
   143a6:	497d      	ldr	r1, [pc, #500]	; (1459c <log_output_process+0x290>)
   143a8:	461a      	mov	r2, r3
   143aa:	4620      	mov	r0, r4
   143ac:	f7ff ff5e 	bl	1426c <print_formatted>
   143b0:	4405      	add	r5, r0
	if (source) {
   143b2:	f1bb 0f00 	cmp.w	fp, #0
   143b6:	d005      	beq.n	143c4 <log_output_process+0xb8>
		total += print_formatted(output,
   143b8:	4979      	ldr	r1, [pc, #484]	; (145a0 <log_output_process+0x294>)
   143ba:	465a      	mov	r2, fp
   143bc:	4620      	mov	r0, r4
   143be:	f7ff ff55 	bl	1426c <print_formatted>
   143c2:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
   143c4:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
   143c6:	f1b9 0f00 	cmp.w	r9, #0
   143ca:	d149      	bne.n	14460 <log_output_process+0x154>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   143cc:	2f00      	cmp	r7, #0
   143ce:	d160      	bne.n	14492 <log_output_process+0x186>
	if (color) {
   143d0:	07f3      	lsls	r3, r6, #31
   143d2:	f100 80ce 	bmi.w	14572 <log_output_process+0x266>
	newline_print(output, flags);
   143d6:	4631      	mov	r1, r6
   143d8:	4620      	mov	r0, r4
   143da:	f7ff ff59 	bl	14290 <newline_print>
}
   143de:	e0c2      	b.n	14566 <log_output_process+0x25a>
	uint32_t length = 0U;
   143e0:	4680      	mov	r8, r0
   143e2:	e7b8      	b.n	14356 <log_output_process+0x4a>
	} else if (freq != 0U) {
   143e4:	4b6f      	ldr	r3, [pc, #444]	; (145a4 <log_output_process+0x298>)
   143e6:	6818      	ldr	r0, [r3, #0]
   143e8:	2800      	cmp	r0, #0
   143ea:	d0bf      	beq.n	1436c <log_output_process+0x60>
		timestamp /= timestamp_div;
   143ec:	4b6e      	ldr	r3, [pc, #440]	; (145a8 <log_output_process+0x29c>)
		ms = (remainder * 1000U) / freq;
   143ee:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
   143f2:	681b      	ldr	r3, [r3, #0]
   143f4:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
   143f8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   143fc:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
   14400:	fb00 5513 	mls	r5, r0, r3, r5
   14404:	fbb3 faf2 	udiv	sl, r3, r2
		ms = (remainder * 1000U) / freq;
   14408:	fb0e f505 	mul.w	r5, lr, r5
   1440c:	fb02 321a 	mls	r2, r2, sl, r3
		mins = seconds / 60U;
   14410:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   14412:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
   14416:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1441a:	fb00 551c 	mls	r5, r0, ip, r5
				length = print_formatted(output,
   1441e:	fb01 2213 	mls	r2, r1, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   14422:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
   14426:	9200      	str	r2, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   14428:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
   1442c:	495f      	ldr	r1, [pc, #380]	; (145ac <log_output_process+0x2a0>)
   1442e:	e9cd c501 	strd	ip, r5, [sp, #4]
   14432:	4652      	mov	r2, sl
   14434:	4620      	mov	r0, r4
   14436:	f7ff ff19 	bl	1426c <print_formatted>
   1443a:	e797      	b.n	1436c <log_output_process+0x60>
	int total = 0;
   1443c:	9d07      	ldr	r5, [sp, #28]
   1443e:	e7b0      	b.n	143a2 <log_output_process+0x96>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   14440:	f1bb 0f01 	cmp.w	fp, #1
   14444:	d107      	bne.n	14456 <log_output_process+0x14a>
	if (package) {
   14446:	f1b9 0f00 	cmp.w	r9, #0
   1444a:	d11d      	bne.n	14488 <log_output_process+0x17c>
	if (data_len) {
   1444c:	2f00      	cmp	r7, #0
   1444e:	f000 808a 	beq.w	14566 <log_output_process+0x25a>
		prefix_offset = 0;
   14452:	2500      	movs	r5, #0
   14454:	e01d      	b.n	14492 <log_output_process+0x186>
	if (package) {
   14456:	f1b9 0f00 	cmp.w	r9, #0
   1445a:	d0f7      	beq.n	1444c <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   1445c:	4854      	ldr	r0, [pc, #336]	; (145b0 <log_output_process+0x2a4>)
   1445e:	e014      	b.n	1448a <log_output_process+0x17e>
		cb = out_func;
   14460:	4854      	ldr	r0, [pc, #336]	; (145b4 <log_output_process+0x2a8>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   14462:	4955      	ldr	r1, [pc, #340]	; (145b8 <log_output_process+0x2ac>)
   14464:	464b      	mov	r3, r9
   14466:	4622      	mov	r2, r4
   14468:	f012 fc14 	bl	26c94 <cbpprintf_external>
		__ASSERT_NO_MSG(err >= 0);
   1446c:	2800      	cmp	r0, #0
   1446e:	da0e      	bge.n	1448e <log_output_process+0x182>
   14470:	4952      	ldr	r1, [pc, #328]	; (145bc <log_output_process+0x2b0>)
   14472:	4853      	ldr	r0, [pc, #332]	; (145c0 <log_output_process+0x2b4>)
   14474:	4a53      	ldr	r2, [pc, #332]	; (145c4 <log_output_process+0x2b8>)
   14476:	f44f 7302 	mov.w	r3, #520	; 0x208
   1447a:	f012 feaf 	bl	271dc <assert_print>
   1447e:	4851      	ldr	r0, [pc, #324]	; (145c4 <log_output_process+0x2b8>)
   14480:	f44f 7102 	mov.w	r1, #520	; 0x208
   14484:	f012 fea3 	bl	271ce <assert_post_action>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   14488:	484a      	ldr	r0, [pc, #296]	; (145b4 <log_output_process+0x2a8>)
		prefix_offset = 0;
   1448a:	9d05      	ldr	r5, [sp, #20]
   1448c:	e7e9      	b.n	14462 <log_output_process+0x156>
	if (data_len) {
   1448e:	2f00      	cmp	r7, #0
   14490:	d065      	beq.n	1455e <log_output_process+0x252>
		print_formatted(output, " ");
   14492:	f8df 9140 	ldr.w	r9, [pc, #320]	; 145d4 <log_output_process+0x2c8>
			print_formatted(output, "%02x ", data[i]);
   14496:	f8df a140 	ldr.w	sl, [pc, #320]	; 145d8 <log_output_process+0x2cc>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   1449a:	2f10      	cmp	r7, #16
	newline_print(output, flags);
   1449c:	4631      	mov	r1, r6
   1449e:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   144a0:	46b8      	mov	r8, r7
   144a2:	bf28      	it	cs
   144a4:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
   144a8:	f7ff fef2 	bl	14290 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
   144ac:	f04f 0b00 	mov.w	fp, #0
   144b0:	455d      	cmp	r5, fp
   144b2:	dc42      	bgt.n	1453a <log_output_process+0x22e>
			print_formatted(output, "%02x ", data[i]);
   144b4:	9b06      	ldr	r3, [sp, #24]
   144b6:	4651      	mov	r1, sl
   144b8:	781a      	ldrb	r2, [r3, #0]
   144ba:	4620      	mov	r0, r4
   144bc:	f7ff fed6 	bl	1426c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   144c0:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
   144c4:	f01b 0f07 	tst.w	fp, #7
   144c8:	d103      	bne.n	144d2 <log_output_process+0x1c6>
			print_formatted(output, " ");
   144ca:	4649      	mov	r1, r9
   144cc:	4620      	mov	r0, r4
   144ce:	f7ff fecd 	bl	1426c <print_formatted>
		if (i < length) {
   144d2:	45d8      	cmp	r8, fp
   144d4:	d938      	bls.n	14548 <log_output_process+0x23c>
			print_formatted(output, "%02x ", data[i]);
   144d6:	9b06      	ldr	r3, [sp, #24]
   144d8:	4651      	mov	r1, sl
   144da:	f813 200b 	ldrb.w	r2, [r3, fp]
   144de:	4620      	mov	r0, r4
   144e0:	f7ff fec4 	bl	1426c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   144e4:	f10b 0b01 	add.w	fp, fp, #1
   144e8:	f1bb 0f10 	cmp.w	fp, #16
   144ec:	d1ea      	bne.n	144c4 <log_output_process+0x1b8>
	print_formatted(output, "|");
   144ee:	4936      	ldr	r1, [pc, #216]	; (145c8 <log_output_process+0x2bc>)
   144f0:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   144f2:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
   144f6:	f7ff feb9 	bl	1426c <print_formatted>
		if (i < length) {
   144fa:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
   144fc:	9b06      	ldr	r3, [sp, #24]
   144fe:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
   14500:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
   14504:	295f      	cmp	r1, #95	; 0x5f
   14506:	bf28      	it	cs
   14508:	222e      	movcs	r2, #46	; 0x2e
   1450a:	4930      	ldr	r1, [pc, #192]	; (145cc <log_output_process+0x2c0>)
   1450c:	4620      	mov	r0, r4
   1450e:	f7ff fead 	bl	1426c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   14512:	f10b 0b01 	add.w	fp, fp, #1
   14516:	f1bb 0f10 	cmp.w	fp, #16
   1451a:	d01a      	beq.n	14552 <log_output_process+0x246>
		if (i > 0 && !(i % 8)) {
   1451c:	f01b 0f07 	tst.w	fp, #7
   14520:	d103      	bne.n	1452a <log_output_process+0x21e>
			print_formatted(output, " ");
   14522:	4649      	mov	r1, r9
   14524:	4620      	mov	r0, r4
   14526:	f7ff fea1 	bl	1426c <print_formatted>
		if (i < length) {
   1452a:	45d8      	cmp	r8, fp
   1452c:	465a      	mov	r2, fp
   1452e:	d8e5      	bhi.n	144fc <log_output_process+0x1f0>
			print_formatted(output, " ");
   14530:	4649      	mov	r1, r9
   14532:	4620      	mov	r0, r4
   14534:	f7ff fe9a 	bl	1426c <print_formatted>
   14538:	e7eb      	b.n	14512 <log_output_process+0x206>
		print_formatted(output, " ");
   1453a:	4649      	mov	r1, r9
   1453c:	4620      	mov	r0, r4
   1453e:	f7ff fe95 	bl	1426c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   14542:	f10b 0b01 	add.w	fp, fp, #1
   14546:	e7b3      	b.n	144b0 <log_output_process+0x1a4>
			print_formatted(output, "   ");
   14548:	4921      	ldr	r1, [pc, #132]	; (145d0 <log_output_process+0x2c4>)
   1454a:	4620      	mov	r0, r4
   1454c:	f7ff fe8e 	bl	1426c <print_formatted>
   14550:	e7c8      	b.n	144e4 <log_output_process+0x1d8>
		data += length;
   14552:	9b06      	ldr	r3, [sp, #24]
	} while (len);
   14554:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
   14558:	4443      	add	r3, r8
   1455a:	9306      	str	r3, [sp, #24]
	} while (len);
   1455c:	d19d      	bne.n	1449a <log_output_process+0x18e>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   1455e:	9b05      	ldr	r3, [sp, #20]
   14560:	2b00      	cmp	r3, #0
   14562:	f47f af35 	bne.w	143d0 <log_output_process+0xc4>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   14566:	4620      	mov	r0, r4
}
   14568:	b00b      	add	sp, #44	; 0x2c
   1456a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
   1456e:	f012 bfc1 	b.w	274f4 <log_output_flush>
		print_formatted(output, "%s", log_color);
   14572:	4a07      	ldr	r2, [pc, #28]	; (14590 <log_output_process+0x284>)
   14574:	4905      	ldr	r1, [pc, #20]	; (1458c <log_output_process+0x280>)
   14576:	4620      	mov	r0, r4
   14578:	f7ff fe78 	bl	1426c <print_formatted>
}
   1457c:	e72b      	b.n	143d6 <log_output_process+0xca>
   1457e:	bf00      	nop
   14580:	0002b567 	.word	0x0002b567
   14584:	0002b56b 	.word	0x0002b56b
   14588:	0002a184 	.word	0x0002a184
   1458c:	0002c4d1 	.word	0x0002c4d1
   14590:	0002b562 	.word	0x0002b562
   14594:	0002a198 	.word	0x0002a198
   14598:	0002b590 	.word	0x0002b590
   1459c:	0002b596 	.word	0x0002b596
   145a0:	0002b59a 	.word	0x0002b59a
   145a4:	20002f24 	.word	0x20002f24
   145a8:	20002f20 	.word	0x20002f20
   145ac:	0002b574 	.word	0x0002b574
   145b0:	0002750f 	.word	0x0002750f
   145b4:	000142ad 	.word	0x000142ad
   145b8:	000274e7 	.word	0x000274e7
   145bc:	0002b59f 	.word	0x0002b59f
   145c0:	0002ae37 	.word	0x0002ae37
   145c4:	0002b503 	.word	0x0002b503
   145c8:	0002b5b2 	.word	0x0002b5b2
   145cc:	0002b5b4 	.word	0x0002b5b4
   145d0:	0002b5ae 	.word	0x0002b5ae
   145d4:	0002b5b0 	.word	0x0002b5b0
   145d8:	0002b5a8 	.word	0x0002b5a8

000145dc <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   145dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
   145e0:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
   145e2:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   145e4:	688e      	ldr	r6, [r1, #8]
   145e6:	b086      	sub	sp, #24
   145e8:	4605      	mov	r5, r0
   145ea:	460c      	mov	r4, r1
   145ec:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
   145ee:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
   145f2:	b15b      	cbz	r3, 1460c <log_output_msg_process+0x30>
   145f4:	4a13      	ldr	r2, [pc, #76]	; (14644 <log_output_msg_process+0x68>)
   145f6:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
   145f8:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   145fc:	2900      	cmp	r1, #0
   145fe:	db1f      	blt.n	14640 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
   14600:	7820      	ldrb	r0, [r4, #0]
   14602:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   14606:	f7ff fd09 	bl	1401c <log_source_name_get>
   1460a:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   1460c:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
   1460e:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
   14610:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   14614:	9700      	str	r7, [sp, #0]
   14616:	f3c2 224a 	ubfx	r2, r2, #9, #11
   1461a:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
   1461c:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
   14620:	f3c0 100b 	ubfx	r0, r0, #4, #12
   14624:	bf08      	it	eq
   14626:	2100      	moveq	r1, #0
   14628:	e9cd 0803 	strd	r0, r8, [sp, #12]
   1462c:	e9cd 1401 	strd	r1, r4, [sp, #4]
   14630:	2200      	movs	r2, #0
   14632:	4631      	mov	r1, r6
   14634:	4628      	mov	r0, r5
   14636:	f7ff fe69 	bl	1430c <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   1463a:	b006      	add	sp, #24
   1463c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   14640:	2300      	movs	r3, #0
   14642:	e7e3      	b.n	1460c <log_output_msg_process+0x30>
   14644:	00029f90 	.word	0x00029f90

00014648 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   14648:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1464a:	f242 730f 	movw	r3, #9999	; 0x270f
   1464e:	428b      	cmp	r3, r1
   14650:	bf28      	it	cs
   14652:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   14654:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   14656:	4a0f      	ldr	r2, [pc, #60]	; (14694 <log_output_dropped_process+0x4c>)
{
   14658:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1465a:	2105      	movs	r1, #5
   1465c:	4668      	mov	r0, sp
   1465e:	f012 fb93 	bl	26d88 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   14662:	6863      	ldr	r3, [r4, #4]
   14664:	490c      	ldr	r1, [pc, #48]	; (14698 <log_output_dropped_process+0x50>)
   14666:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   14668:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   1466a:	220b      	movs	r2, #11
   1466c:	4628      	mov	r0, r5
   1466e:	f012 ff2d 	bl	274cc <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   14672:	6863      	ldr	r3, [r4, #4]
   14674:	4632      	mov	r2, r6
   14676:	4669      	mov	r1, sp
   14678:	4628      	mov	r0, r5
   1467a:	685b      	ldr	r3, [r3, #4]
   1467c:	f012 ff26 	bl	274cc <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   14680:	6863      	ldr	r3, [r4, #4]
   14682:	4906      	ldr	r1, [pc, #24]	; (1469c <log_output_dropped_process+0x54>)
   14684:	685b      	ldr	r3, [r3, #4]
   14686:	221b      	movs	r2, #27
   14688:	4628      	mov	r0, r5
   1468a:	f012 ff1f 	bl	274cc <buffer_write>
		     output->control_block->ctx);
}
   1468e:	b002      	add	sp, #8
   14690:	bd70      	pop	{r4, r5, r6, pc}
   14692:	bf00      	nop
   14694:	0002e06c 	.word	0x0002e06c
   14698:	0002b5d3 	.word	0x0002b5d3
   1469c:	0002b5b7 	.word	0x0002b5b7

000146a0 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   146a0:	4a07      	ldr	r2, [pc, #28]	; (146c0 <log_output_timestamp_freq_set+0x20>)
   146a2:	2100      	movs	r1, #0
   146a4:	2301      	movs	r3, #1
   146a6:	4290      	cmp	r0, r2
   146a8:	d806      	bhi.n	146b8 <log_output_timestamp_freq_set+0x18>
   146aa:	4a06      	ldr	r2, [pc, #24]	; (146c4 <log_output_timestamp_freq_set+0x24>)
   146ac:	b901      	cbnz	r1, 146b0 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
   146ae:	2301      	movs	r3, #1
   146b0:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   146b2:	4b05      	ldr	r3, [pc, #20]	; (146c8 <log_output_timestamp_freq_set+0x28>)
   146b4:	6018      	str	r0, [r3, #0]
}
   146b6:	4770      	bx	lr
		frequency /= 2U;
   146b8:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   146ba:	005b      	lsls	r3, r3, #1
   146bc:	2101      	movs	r1, #1
   146be:	e7f2      	b.n	146a6 <log_output_timestamp_freq_set+0x6>
   146c0:	000f4240 	.word	0x000f4240
   146c4:	20002f20 	.word	0x20002f20
   146c8:	20002f24 	.word	0x20002f24

000146cc <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   146cc:	4b01      	ldr	r3, [pc, #4]	; (146d4 <log_backend_rtt_init+0x8>)
   146ce:	2201      	movs	r2, #1
   146d0:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   146d2:	4770      	bx	lr
   146d4:	20004317 	.word	0x20004317

000146d8 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   146d8:	4b01      	ldr	r3, [pc, #4]	; (146e0 <format_set+0x8>)
	return 0;
}
   146da:	2000      	movs	r0, #0
	log_format_current = log_type;
   146dc:	6019      	str	r1, [r3, #0]
}
   146de:	4770      	bx	lr
   146e0:	20002f3c 	.word	0x20002f3c

000146e4 <panic>:
	panic_mode = true;
   146e4:	4b02      	ldr	r3, [pc, #8]	; (146f0 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   146e6:	4803      	ldr	r0, [pc, #12]	; (146f4 <panic+0x10>)
   146e8:	2201      	movs	r2, #1
   146ea:	701a      	strb	r2, [r3, #0]
   146ec:	f012 bf02 	b.w	274f4 <log_output_flush>
   146f0:	20004318 	.word	0x20004318
   146f4:	0002a1c8 	.word	0x0002a1c8

000146f8 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   146f8:	4801      	ldr	r0, [pc, #4]	; (14700 <dropped+0x8>)
   146fa:	f7ff bfa5 	b.w	14648 <log_output_dropped_process>
   146fe:	bf00      	nop
   14700:	0002a1c8 	.word	0x0002a1c8

00014704 <process>:
{
   14704:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   14706:	4b06      	ldr	r3, [pc, #24]	; (14720 <process+0x1c>)
   14708:	6818      	ldr	r0, [r3, #0]
{
   1470a:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1470c:	f7ff fa1c 	bl	13b48 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
   14710:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   14712:	4603      	mov	r3, r0
}
   14714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
   14718:	4802      	ldr	r0, [pc, #8]	; (14724 <process+0x20>)
   1471a:	220f      	movs	r2, #15
   1471c:	4718      	bx	r3
   1471e:	bf00      	nop
   14720:	20002f3c 	.word	0x20002f3c
   14724:	0002a1c8 	.word	0x0002a1c8

00014728 <on_failed_write>:
	if (retry_cnt == 0) {
   14728:	b910      	cbnz	r0, 14730 <on_failed_write+0x8>
		host_present = false;
   1472a:	4b07      	ldr	r3, [pc, #28]	; (14748 <on_failed_write+0x20>)
   1472c:	7018      	strb	r0, [r3, #0]
}
   1472e:	4770      	bx	lr
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   14730:	4b06      	ldr	r3, [pc, #24]	; (1474c <on_failed_write+0x24>)
	} else if (is_sync_mode()) {
   14732:	781b      	ldrb	r3, [r3, #0]
   14734:	b11b      	cbz	r3, 1473e <on_failed_write+0x16>
	z_impl_k_busy_wait(usec_to_wait);
   14736:	f241 3088 	movw	r0, #5000	; 0x1388
   1473a:	f015 b965 	b.w	29a08 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   1473e:	20a4      	movs	r0, #164	; 0xa4
   14740:	2100      	movs	r1, #0
   14742:	f00e b9f5 	b.w	22b30 <z_impl_k_sleep>
   14746:	bf00      	nop
   14748:	20004317 	.word	0x20004317
   1474c:	20004318 	.word	0x20004318

00014750 <data_out_block_mode>:
{
   14750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   14754:	f8df 9078 	ldr.w	r9, [pc, #120]	; 147d0 <data_out_block_mode+0x80>
   14758:	4f1c      	ldr	r7, [pc, #112]	; (147cc <data_out_block_mode+0x7c>)
{
   1475a:	4680      	mov	r8, r0
   1475c:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   1475e:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
   14760:	f899 5000 	ldrb.w	r5, [r9]
   14764:	b995      	cbnz	r5, 1478c <data_out_block_mode+0x3c>
			RTT_LOCK();
   14766:	f00b fc0f 	bl	1ff88 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   1476a:	4628      	mov	r0, r5
   1476c:	4632      	mov	r2, r6
   1476e:	4641      	mov	r1, r8
   14770:	f00b fbb8 	bl	1fee4 <SEGGER_RTT_WriteSkipNoLock>
   14774:	4605      	mov	r5, r0
			RTT_UNLOCK();
   14776:	f00b fc11 	bl	1ff9c <zephyr_rtt_mutex_unlock>
		if (ret) {
   1477a:	b1e5      	cbz	r5, 147b6 <data_out_block_mode+0x66>
	host_present = true;
   1477c:	2301      	movs	r3, #1
   1477e:	703b      	strb	r3, [r7, #0]
	if (is_panic_mode()) {
   14780:	f899 3000 	ldrb.w	r3, [r9]
   14784:	b973      	cbnz	r3, 147a4 <data_out_block_mode+0x54>
}
   14786:	4630      	mov	r0, r6
   14788:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   1478c:	4632      	mov	r2, r6
   1478e:	4641      	mov	r1, r8
   14790:	2000      	movs	r0, #0
   14792:	f00b fba7 	bl	1fee4 <SEGGER_RTT_WriteSkipNoLock>
   14796:	4605      	mov	r5, r0
   14798:	e7ef      	b.n	1477a <data_out_block_mode+0x2a>
			on_failed_write(retry_cnt--);
   1479a:	4620      	mov	r0, r4
   1479c:	f7ff ffc4 	bl	14728 <on_failed_write>
   147a0:	1e65      	subs	r5, r4, #1
   147a2:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   147a4:	2000      	movs	r0, #0
   147a6:	f00b fbe5 	bl	1ff74 <SEGGER_RTT_HasDataUp>
   147aa:	2800      	cmp	r0, #0
   147ac:	d0eb      	beq.n	14786 <data_out_block_mode+0x36>
   147ae:	783b      	ldrb	r3, [r7, #0]
   147b0:	2b00      	cmp	r3, #0
   147b2:	d1f2      	bne.n	1479a <data_out_block_mode+0x4a>
   147b4:	e7e7      	b.n	14786 <data_out_block_mode+0x36>
		} else if (host_present) {
   147b6:	783b      	ldrb	r3, [r7, #0]
   147b8:	2b00      	cmp	r3, #0
   147ba:	d0e4      	beq.n	14786 <data_out_block_mode+0x36>
			retry_cnt--;
   147bc:	3c01      	subs	r4, #1
			on_failed_write(retry_cnt);
   147be:	4620      	mov	r0, r4
   147c0:	f7ff ffb2 	bl	14728 <on_failed_write>
	} while ((ret == 0) && host_present);
   147c4:	783b      	ldrb	r3, [r7, #0]
   147c6:	2b00      	cmp	r3, #0
   147c8:	d1ca      	bne.n	14760 <data_out_block_mode+0x10>
   147ca:	e7dc      	b.n	14786 <data_out_block_mode+0x36>
   147cc:	20004317 	.word	0x20004317
   147d0:	20004318 	.word	0x20004318

000147d4 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   147d4:	4b01      	ldr	r3, [pc, #4]	; (147dc <format_set+0x8>)
	return 0;
}
   147d6:	2000      	movs	r0, #0
	log_format_current = log_type;
   147d8:	6019      	str	r1, [r3, #0]
}
   147da:	4770      	bx	lr
   147dc:	20002f54 	.word	0x20002f54

000147e0 <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
   147e0:	4b02      	ldr	r3, [pc, #8]	; (147ec <panic+0xc>)
	log_output_flush(output);
   147e2:	4803      	ldr	r0, [pc, #12]	; (147f0 <panic+0x10>)
   147e4:	2201      	movs	r2, #1
   147e6:	701a      	strb	r2, [r3, #0]
   147e8:	f012 be84 	b.w	274f4 <log_output_flush>
   147ec:	2000432a 	.word	0x2000432a
   147f0:	0002a1f4 	.word	0x0002a1f4

000147f4 <dropped>:
	log_output_dropped_process(output, cnt);
   147f4:	4801      	ldr	r0, [pc, #4]	; (147fc <dropped+0x8>)
   147f6:	f7ff bf27 	b.w	14648 <log_output_dropped_process>
   147fa:	bf00      	nop
   147fc:	0002a1f4 	.word	0x0002a1f4

00014800 <process>:
{
   14800:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   14802:	4b06      	ldr	r3, [pc, #24]	; (1481c <process+0x1c>)
   14804:	6818      	ldr	r0, [r3, #0]
{
   14806:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   14808:	f7ff f99e 	bl	13b48 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
   1480c:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1480e:	4603      	mov	r3, r0
}
   14810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
   14814:	4802      	ldr	r0, [pc, #8]	; (14820 <process+0x20>)
   14816:	220f      	movs	r2, #15
   14818:	4718      	bx	r3
   1481a:	bf00      	nop
   1481c:	20002f54 	.word	0x20002f54
   14820:	0002a1f4 	.word	0x0002a1f4

00014824 <char_out>:
{
   14824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	api->poll_out(dev, out_char);
   14826:	4f07      	ldr	r7, [pc, #28]	; (14844 <char_out+0x20>)
   14828:	460d      	mov	r5, r1
   1482a:	4604      	mov	r4, r0
   1482c:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
   1482e:	42b4      	cmp	r4, r6
   14830:	d101      	bne.n	14836 <char_out+0x12>
}
   14832:	4628      	mov	r0, r5
   14834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
   14836:	f814 1b01 	ldrb.w	r1, [r4], #1
   1483a:	68bb      	ldr	r3, [r7, #8]
   1483c:	4801      	ldr	r0, [pc, #4]	; (14844 <char_out+0x20>)
   1483e:	69db      	ldr	r3, [r3, #28]
   14840:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   14842:	e7f4      	b.n	1482e <char_out+0xa>
   14844:	00029d50 	.word	0x00029d50

00014848 <log_backend_uart_init>:
{
   14848:	b508      	push	{r3, lr}
   1484a:	4807      	ldr	r0, [pc, #28]	; (14868 <log_backend_uart_init+0x20>)
   1484c:	f014 ff9a 	bl	29784 <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
   14850:	b948      	cbnz	r0, 14866 <log_backend_uart_init+0x1e>
   14852:	4906      	ldr	r1, [pc, #24]	; (1486c <log_backend_uart_init+0x24>)
   14854:	4806      	ldr	r0, [pc, #24]	; (14870 <log_backend_uart_init+0x28>)
   14856:	4a07      	ldr	r2, [pc, #28]	; (14874 <log_backend_uart_init+0x2c>)
   14858:	237f      	movs	r3, #127	; 0x7f
   1485a:	f012 fcbf 	bl	271dc <assert_print>
   1485e:	4805      	ldr	r0, [pc, #20]	; (14874 <log_backend_uart_init+0x2c>)
   14860:	217f      	movs	r1, #127	; 0x7f
   14862:	f012 fcb4 	bl	271ce <assert_post_action>
}
   14866:	bd08      	pop	{r3, pc}
   14868:	00029d50 	.word	0x00029d50
   1486c:	0002b64d 	.word	0x0002b64d
   14870:	0002ae37 	.word	0x0002ae37
   14874:	0002b60f 	.word	0x0002b60f

00014878 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   14878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1487c:	4605      	mov	r5, r0
	__asm__ volatile(
   1487e:	f04f 0340 	mov.w	r3, #64	; 0x40
   14882:	f3ef 8611 	mrs	r6, BASEPRI
   14886:	f383 8812 	msr	BASEPRI_MAX, r3
   1488a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1488e:	4820      	ldr	r0, [pc, #128]	; (14910 <pm_state_notify+0x98>)
   14890:	f00c f842 	bl	20918 <z_spin_lock_valid>
   14894:	b968      	cbnz	r0, 148b2 <pm_state_notify+0x3a>
   14896:	4a1f      	ldr	r2, [pc, #124]	; (14914 <pm_state_notify+0x9c>)
   14898:	491f      	ldr	r1, [pc, #124]	; (14918 <pm_state_notify+0xa0>)
   1489a:	4820      	ldr	r0, [pc, #128]	; (1491c <pm_state_notify+0xa4>)
   1489c:	2394      	movs	r3, #148	; 0x94
   1489e:	f012 fc9d 	bl	271dc <assert_print>
   148a2:	491b      	ldr	r1, [pc, #108]	; (14910 <pm_state_notify+0x98>)
   148a4:	481e      	ldr	r0, [pc, #120]	; (14920 <pm_state_notify+0xa8>)
   148a6:	f012 fc99 	bl	271dc <assert_print>
   148aa:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   148ac:	4819      	ldr	r0, [pc, #100]	; (14914 <pm_state_notify+0x9c>)
   148ae:	f012 fc8e 	bl	271ce <assert_post_action>
	z_spin_lock_set_owner(l);
   148b2:	4817      	ldr	r0, [pc, #92]	; (14910 <pm_state_notify+0x98>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   148b4:	4f1b      	ldr	r7, [pc, #108]	; (14924 <pm_state_notify+0xac>)
   148b6:	f8df 807c 	ldr.w	r8, [pc, #124]	; 14934 <pm_state_notify+0xbc>
   148ba:	f00c f84b 	bl	20954 <z_spin_lock_set_owner>
	return list->head;
   148be:	4b1a      	ldr	r3, [pc, #104]	; (14928 <pm_state_notify+0xb0>)
   148c0:	681c      	ldr	r4, [r3, #0]
   148c2:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   148c6:	b97c      	cbnz	r4, 148e8 <pm_state_notify+0x70>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   148c8:	4811      	ldr	r0, [pc, #68]	; (14910 <pm_state_notify+0x98>)
   148ca:	f00c f833 	bl	20934 <z_spin_unlock_valid>
   148ce:	b9c8      	cbnz	r0, 14904 <pm_state_notify+0x8c>
   148d0:	4a10      	ldr	r2, [pc, #64]	; (14914 <pm_state_notify+0x9c>)
   148d2:	4916      	ldr	r1, [pc, #88]	; (1492c <pm_state_notify+0xb4>)
   148d4:	4811      	ldr	r0, [pc, #68]	; (1491c <pm_state_notify+0xa4>)
   148d6:	23c2      	movs	r3, #194	; 0xc2
   148d8:	f012 fc80 	bl	271dc <assert_print>
   148dc:	490c      	ldr	r1, [pc, #48]	; (14910 <pm_state_notify+0x98>)
   148de:	4814      	ldr	r0, [pc, #80]	; (14930 <pm_state_notify+0xb8>)
   148e0:	f012 fc7c 	bl	271dc <assert_print>
   148e4:	21c2      	movs	r1, #194	; 0xc2
   148e6:	e7e1      	b.n	148ac <pm_state_notify+0x34>
			callback = notifier->state_exit;
   148e8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   148ec:	2d00      	cmp	r5, #0
   148ee:	bf18      	it	ne
   148f0:	4613      	movne	r3, r2
		if (callback) {
   148f2:	b12b      	cbz	r3, 14900 <pm_state_notify+0x88>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   148f4:	f898 2010 	ldrb.w	r2, [r8, #16]
   148f8:	fb09 f202 	mul.w	r2, r9, r2
   148fc:	5cb8      	ldrb	r0, [r7, r2]
   148fe:	4798      	blx	r3
	return node->next;
   14900:	6824      	ldr	r4, [r4, #0]
   14902:	e7e0      	b.n	148c6 <pm_state_notify+0x4e>
	__asm__ volatile(
   14904:	f386 8811 	msr	BASEPRI, r6
   14908:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   1490c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14910:	20002f58 	.word	0x20002f58
   14914:	0002b22b 	.word	0x0002b22b
   14918:	0002b284 	.word	0x0002b284
   1491c:	0002ae37 	.word	0x0002ae37
   14920:	0002b299 	.word	0x0002b299
   14924:	20002f6c 	.word	0x20002f6c
   14928:	20002f78 	.word	0x20002f78
   1492c:	0002b258 	.word	0x0002b258
   14930:	0002b26f 	.word	0x0002b26f
   14934:	200037d0 	.word	0x200037d0

00014938 <pm_system_resume>:

void pm_system_resume(void)
{
   14938:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   1493a:	4b19      	ldr	r3, [pc, #100]	; (149a0 <pm_system_resume+0x68>)
   1493c:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1493e:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   14942:	f004 031f 	and.w	r3, r4, #31
   14946:	2201      	movs	r2, #1
   14948:	409a      	lsls	r2, r3
   1494a:	4b16      	ldr	r3, [pc, #88]	; (149a4 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1494c:	0961      	lsrs	r1, r4, #5
   1494e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   14952:	43d0      	mvns	r0, r2
   14954:	e853 1f00 	ldrex	r1, [r3]
   14958:	ea01 0500 	and.w	r5, r1, r0
   1495c:	e843 5600 	strex	r6, r5, [r3]
   14960:	2e00      	cmp	r6, #0
   14962:	d1f7      	bne.n	14954 <pm_system_resume+0x1c>
   14964:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   14968:	420a      	tst	r2, r1
   1496a:	d013      	beq.n	14994 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
   1496c:	4b0e      	ldr	r3, [pc, #56]	; (149a8 <pm_system_resume+0x70>)
   1496e:	4d0f      	ldr	r5, [pc, #60]	; (149ac <pm_system_resume+0x74>)
   14970:	b18b      	cbz	r3, 14996 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
   14972:	230c      	movs	r3, #12
   14974:	4363      	muls	r3, r4
   14976:	18ea      	adds	r2, r5, r3
   14978:	5ce8      	ldrb	r0, [r5, r3]
   1497a:	7851      	ldrb	r1, [r2, #1]
   1497c:	f013 f886 	bl	27a8c <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   14980:	2000      	movs	r0, #0
   14982:	f7ff ff79 	bl	14878 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   14986:	230c      	movs	r3, #12
   14988:	435c      	muls	r4, r3
   1498a:	192a      	adds	r2, r5, r4
   1498c:	2300      	movs	r3, #0
   1498e:	512b      	str	r3, [r5, r4]
   14990:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   14994:	bd70      	pop	{r4, r5, r6, pc}
   14996:	f383 8811 	msr	BASEPRI, r3
   1499a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1499e:	e7ef      	b.n	14980 <pm_system_resume+0x48>
   149a0:	200037d0 	.word	0x200037d0
   149a4:	20002f80 	.word	0x20002f80
   149a8:	00027a8d 	.word	0x00027a8d
   149ac:	20002f6c 	.word	0x20002f6c

000149b0 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   149b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   149b4:	4b47      	ldr	r3, [pc, #284]	; (14ad4 <pm_system_suspend+0x124>)
{
   149b6:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   149b8:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
   149ba:	f04f 0340 	mov.w	r3, #64	; 0x40
   149be:	f3ef 8811 	mrs	r8, BASEPRI
   149c2:	f383 8812 	msr	BASEPRI_MAX, r3
   149c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   149ca:	4843      	ldr	r0, [pc, #268]	; (14ad8 <pm_system_suspend+0x128>)
   149cc:	f00b ffa4 	bl	20918 <z_spin_lock_valid>
   149d0:	b968      	cbnz	r0, 149ee <pm_system_suspend+0x3e>
   149d2:	4a42      	ldr	r2, [pc, #264]	; (14adc <pm_system_suspend+0x12c>)
   149d4:	4942      	ldr	r1, [pc, #264]	; (14ae0 <pm_system_suspend+0x130>)
   149d6:	4843      	ldr	r0, [pc, #268]	; (14ae4 <pm_system_suspend+0x134>)
   149d8:	2394      	movs	r3, #148	; 0x94
   149da:	f012 fbff 	bl	271dc <assert_print>
   149de:	493e      	ldr	r1, [pc, #248]	; (14ad8 <pm_system_suspend+0x128>)
   149e0:	4841      	ldr	r0, [pc, #260]	; (14ae8 <pm_system_suspend+0x138>)
   149e2:	f012 fbfb 	bl	271dc <assert_print>
   149e6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   149e8:	483c      	ldr	r0, [pc, #240]	; (14adc <pm_system_suspend+0x12c>)
   149ea:	f012 fbf0 	bl	271ce <assert_post_action>
	z_spin_lock_set_owner(l);
   149ee:	483a      	ldr	r0, [pc, #232]	; (14ad8 <pm_system_suspend+0x128>)
   149f0:	4e3e      	ldr	r6, [pc, #248]	; (14aec <pm_system_suspend+0x13c>)
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   149f2:	240c      	movs	r4, #12
   149f4:	f00b ffae 	bl	20954 <z_spin_lock_set_owner>
   149f8:	436c      	muls	r4, r5
   149fa:	4b3d      	ldr	r3, [pc, #244]	; (14af0 <pm_system_suspend+0x140>)
   149fc:	5d19      	ldrb	r1, [r3, r4]
   149fe:	191a      	adds	r2, r3, r4
   14a00:	b1b9      	cbz	r1, 14a32 <pm_system_suspend+0x82>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   14a02:	ca07      	ldmia	r2, {r0, r1, r2}
   14a04:	eb06 0c04 	add.w	ip, r6, r4
   14a08:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   14a0c:	2200      	movs	r2, #0
   14a0e:	551a      	strb	r2, [r3, r4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   14a10:	4831      	ldr	r0, [pc, #196]	; (14ad8 <pm_system_suspend+0x128>)
   14a12:	f00b ff8f 	bl	20934 <z_spin_unlock_valid>
   14a16:	4604      	mov	r4, r0
   14a18:	b9b0      	cbnz	r0, 14a48 <pm_system_suspend+0x98>
   14a1a:	4a30      	ldr	r2, [pc, #192]	; (14adc <pm_system_suspend+0x12c>)
   14a1c:	4935      	ldr	r1, [pc, #212]	; (14af4 <pm_system_suspend+0x144>)
   14a1e:	4831      	ldr	r0, [pc, #196]	; (14ae4 <pm_system_suspend+0x134>)
   14a20:	23c2      	movs	r3, #194	; 0xc2
   14a22:	f012 fbdb 	bl	271dc <assert_print>
   14a26:	492c      	ldr	r1, [pc, #176]	; (14ad8 <pm_system_suspend+0x128>)
   14a28:	4833      	ldr	r0, [pc, #204]	; (14af8 <pm_system_suspend+0x148>)
   14a2a:	f012 fbd7 	bl	271dc <assert_print>
   14a2e:	21c2      	movs	r1, #194	; 0xc2
   14a30:	e7da      	b.n	149e8 <pm_system_suspend+0x38>
	} else {
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
   14a32:	4639      	mov	r1, r7
   14a34:	4628      	mov	r0, r5
   14a36:	f000 f869 	bl	14b0c <pm_policy_next_state>
		if (info != NULL) {
   14a3a:	2800      	cmp	r0, #0
   14a3c:	d0e8      	beq.n	14a10 <pm_system_suspend+0x60>
			z_cpus_pm_state[id] = *info;
   14a3e:	c807      	ldmia	r0, {r0, r1, r2}
   14a40:	4434      	add	r4, r6
   14a42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   14a46:	e7e3      	b.n	14a10 <pm_system_suspend+0x60>
	__asm__ volatile(
   14a48:	f388 8811 	msr	BASEPRI, r8
   14a4c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   14a50:	230c      	movs	r3, #12
   14a52:	436b      	muls	r3, r5
   14a54:	18f2      	adds	r2, r6, r3
   14a56:	5cf3      	ldrb	r3, [r6, r3]
   14a58:	2b00      	cmp	r3, #0
   14a5a:	d039      	beq.n	14ad0 <pm_system_suspend+0x120>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   14a5c:	1c7b      	adds	r3, r7, #1
   14a5e:	d00f      	beq.n	14a80 <pm_system_suspend+0xd0>
			return (uint32_t)((t * to_hz + off) / from_hz);
   14a60:	f8d2 e008 	ldr.w	lr, [r2, #8]
   14a64:	4825      	ldr	r0, [pc, #148]	; (14afc <pm_system_suspend+0x14c>)
   14a66:	4a26      	ldr	r2, [pc, #152]	; (14b00 <pm_system_suspend+0x150>)
   14a68:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   14a6c:	2100      	movs	r1, #0
   14a6e:	2300      	movs	r3, #0
   14a70:	fbee 010c 	umlal	r0, r1, lr, ip
   14a74:	f7eb ff12 	bl	89c <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
   14a78:	2101      	movs	r1, #1
   14a7a:	1a38      	subs	r0, r7, r0
   14a7c:	f009 f964 	bl	1dd48 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   14a80:	f00d fa1c 	bl	21ebc <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   14a84:	2001      	movs	r0, #1
   14a86:	f7ff fef7 	bl	14878 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   14a8a:	f3bf 8f5b 	dmb	ish
   14a8e:	4b1d      	ldr	r3, [pc, #116]	; (14b04 <pm_system_suspend+0x154>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   14a90:	096a      	lsrs	r2, r5, #5
   14a92:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   14a96:	f005 011f 	and.w	r1, r5, #31
   14a9a:	2201      	movs	r2, #1
   14a9c:	408a      	lsls	r2, r1
   14a9e:	e853 0f00 	ldrex	r0, [r3]
   14aa2:	4310      	orrs	r0, r2
   14aa4:	e843 0100 	strex	r1, r0, [r3]
   14aa8:	2900      	cmp	r1, #0
   14aaa:	d1f8      	bne.n	14a9e <pm_system_suspend+0xee>
   14aac:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   14ab0:	4b15      	ldr	r3, [pc, #84]	; (14b08 <pm_system_suspend+0x158>)
   14ab2:	b133      	cbz	r3, 14ac2 <pm_system_suspend+0x112>
		pm_state_set(info->state, info->substate_id);
   14ab4:	230c      	movs	r3, #12
   14ab6:	436b      	muls	r3, r5
   14ab8:	18f2      	adds	r2, r6, r3
   14aba:	5cf0      	ldrb	r0, [r6, r3]
   14abc:	7851      	ldrb	r1, [r2, #1]
   14abe:	f012 ffd9 	bl	27a74 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   14ac2:	f7ff ff39 	bl	14938 <pm_system_resume>
	k_sched_unlock();
   14ac6:	f00d fa65 	bl	21f94 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
}
   14aca:	4620      	mov	r0, r4
   14acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   14ad0:	461c      	mov	r4, r3
   14ad2:	e7fa      	b.n	14aca <pm_system_suspend+0x11a>
   14ad4:	200037d0 	.word	0x200037d0
   14ad8:	20002f5c 	.word	0x20002f5c
   14adc:	0002b22b 	.word	0x0002b22b
   14ae0:	0002b284 	.word	0x0002b284
   14ae4:	0002ae37 	.word	0x0002ae37
   14ae8:	0002b299 	.word	0x0002b299
   14aec:	20002f6c 	.word	0x20002f6c
   14af0:	20002f60 	.word	0x20002f60
   14af4:	0002b258 	.word	0x0002b258
   14af8:	0002b26f 	.word	0x0002b26f
   14afc:	000f423f 	.word	0x000f423f
   14b00:	000f4240 	.word	0x000f4240
   14b04:	20002f80 	.word	0x20002f80
   14b08:	00027a75 	.word	0x00027a75

00014b0c <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   14b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b10:	b085      	sub	sp, #20
   14b12:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   14b14:	a903      	add	r1, sp, #12
   14b16:	f000 f843 	bl	14ba0 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   14b1a:	4b1e      	ldr	r3, [pc, #120]	; (14b94 <pm_policy_next_state+0x88>)
   14b1c:	9d03      	ldr	r5, [sp, #12]
   14b1e:	f8d3 a000 	ldr.w	sl, [r3]
   14b22:	f8df 8078 	ldr.w	r8, [pc, #120]	; 14b9c <pm_policy_next_state+0x90>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   14b26:	1e43      	subs	r3, r0, #1
   14b28:	b21b      	sxth	r3, r3
   14b2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   14b2e:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   14b30:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   14b34:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   14b38:	f04f 0b00 	mov.w	fp, #0
   14b3c:	b924      	cbnz	r4, 14b48 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   14b3e:	46a1      	mov	r9, r4
}
   14b40:	4648      	mov	r0, r9
   14b42:	b005      	add	sp, #20
   14b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b48:	6868      	ldr	r0, [r5, #4]
   14b4a:	4a13      	ldr	r2, [pc, #76]	; (14b98 <pm_policy_next_state+0x8c>)
   14b4c:	46c4      	mov	ip, r8
   14b4e:	4659      	mov	r1, fp
   14b50:	fbe0 c107 	umlal	ip, r1, r0, r7
   14b54:	2300      	movs	r3, #0
   14b56:	4660      	mov	r0, ip
   14b58:	f7eb fea0 	bl	89c <__aeabi_uldivmod>
   14b5c:	9001      	str	r0, [sp, #4]
   14b5e:	68a8      	ldr	r0, [r5, #8]
   14b60:	4a0d      	ldr	r2, [pc, #52]	; (14b98 <pm_policy_next_state+0x8c>)
   14b62:	46c4      	mov	ip, r8
   14b64:	4659      	mov	r1, fp
   14b66:	fbe0 c107 	umlal	ip, r1, r0, r7
   14b6a:	2300      	movs	r3, #0
   14b6c:	4660      	mov	r0, ip
   14b6e:	f7eb fe95 	bl	89c <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   14b72:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   14b76:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   14b78:	d001      	beq.n	14b7e <pm_policy_next_state+0x72>
   14b7a:	4582      	cmp	sl, r0
   14b7c:	d905      	bls.n	14b8a <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   14b7e:	1c73      	adds	r3, r6, #1
   14b80:	d0de      	beq.n	14b40 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   14b82:	9b01      	ldr	r3, [sp, #4]
   14b84:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   14b86:	42b0      	cmp	r0, r6
   14b88:	d9da      	bls.n	14b40 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   14b8a:	3c01      	subs	r4, #1
   14b8c:	b2a4      	uxth	r4, r4
   14b8e:	3d0c      	subs	r5, #12
   14b90:	e7d4      	b.n	14b3c <pm_policy_next_state+0x30>
   14b92:	bf00      	nop
   14b94:	200005d4 	.word	0x200005d4
   14b98:	000f4240 	.word	0x000f4240
   14b9c:	000f423f 	.word	0x000f423f

00014ba0 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   14ba0:	b908      	cbnz	r0, 14ba6 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   14ba2:	4b02      	ldr	r3, [pc, #8]	; (14bac <pm_state_cpu_get_all+0xc>)
   14ba4:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   14ba6:	2000      	movs	r0, #0
   14ba8:	4770      	bx	lr
   14baa:	bf00      	nop
   14bac:	0002a204 	.word	0x0002a204

00014bb0 <nus_ccc_cfg_changed>:
static struct bt_nus_cb nus_cb;

static void nus_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	if (nus_cb.send_enabled) {
   14bb0:	4b03      	ldr	r3, [pc, #12]	; (14bc0 <nus_ccc_cfg_changed+0x10>)
   14bb2:	689b      	ldr	r3, [r3, #8]
   14bb4:	b11b      	cbz	r3, 14bbe <nus_ccc_cfg_changed+0xe>
		LOG_DBG("Notification has been turned %s",
			value == BT_GATT_CCC_NOTIFY ? "on" : "off");
		nus_cb.send_enabled(value == BT_GATT_CCC_NOTIFY ?
   14bb6:	1e48      	subs	r0, r1, #1
   14bb8:	bf18      	it	ne
   14bba:	2001      	movne	r0, #1
   14bbc:	4718      	bx	r3
			BT_NUS_SEND_STATUS_ENABLED : BT_NUS_SEND_STATUS_DISABLED);
	}
}
   14bbe:	4770      	bx	lr
   14bc0:	20002f84 	.word	0x20002f84

00014bc4 <on_receive>:
			  const struct bt_gatt_attr *attr,
			  const void *buf,
			  uint16_t len,
			  uint16_t offset,
			  uint8_t flags)
{
   14bc4:	b510      	push	{r4, lr}
   14bc6:	461c      	mov	r4, r3
	LOG_DBG("Received data, handle %d, conn %p",
		attr->handle, (void *)conn);

	if (nus_cb.received) {
   14bc8:	4b03      	ldr	r3, [pc, #12]	; (14bd8 <on_receive+0x14>)
   14bca:	681b      	ldr	r3, [r3, #0]
{
   14bcc:	4611      	mov	r1, r2
	if (nus_cb.received) {
   14bce:	b10b      	cbz	r3, 14bd4 <on_receive+0x10>
		nus_cb.received(conn, buf, len);
   14bd0:	4622      	mov	r2, r4
   14bd2:	4798      	blx	r3
}
	return len;
}
   14bd4:	4620      	mov	r0, r4
   14bd6:	bd10      	pop	{r4, pc}
   14bd8:	20002f84 	.word	0x20002f84

00014bdc <bt_nus_init>:
			       NULL, on_receive, NULL),
);

int bt_nus_init(struct bt_nus_cb *callbacks)
{
	if (callbacks) {
   14bdc:	b130      	cbz	r0, 14bec <bt_nus_init+0x10>
		nus_cb.received = callbacks->received;
   14bde:	4b04      	ldr	r3, [pc, #16]	; (14bf0 <bt_nus_init+0x14>)
   14be0:	6802      	ldr	r2, [r0, #0]
   14be2:	601a      	str	r2, [r3, #0]
		nus_cb.sent = callbacks->sent;
   14be4:	6842      	ldr	r2, [r0, #4]
   14be6:	605a      	str	r2, [r3, #4]
		nus_cb.send_enabled = callbacks->send_enabled;
   14be8:	6882      	ldr	r2, [r0, #8]
   14bea:	609a      	str	r2, [r3, #8]
	}

	return 0;
}
   14bec:	2000      	movs	r0, #0
   14bee:	4770      	bx	lr
   14bf0:	20002f84 	.word	0x20002f84

00014bf4 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   14bf4:	4904      	ldr	r1, [pc, #16]	; (14c08 <sub_bytes+0x14>)
   14bf6:	1e43      	subs	r3, r0, #1
   14bf8:	300f      	adds	r0, #15
   14bfa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   14bfe:	5c8a      	ldrb	r2, [r1, r2]
   14c00:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   14c02:	4283      	cmp	r3, r0
   14c04:	d1f9      	bne.n	14bfa <sub_bytes+0x6>
	}
}
   14c06:	4770      	bx	lr
   14c08:	0002b68b 	.word	0x0002b68b

00014c0c <tc_aes128_set_encrypt_key>:
{
   14c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   14c0e:	4e26      	ldr	r6, [pc, #152]	; (14ca8 <tc_aes128_set_encrypt_key+0x9c>)
{
   14c10:	4607      	mov	r7, r0
   14c12:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   14c14:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   14c16:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   14c18:	ad01      	add	r5, sp, #4
   14c1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   14c1c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   14c1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   14c20:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   14c24:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   14c28:	4638      	mov	r0, r7
   14c2a:	2f00      	cmp	r7, #0
   14c2c:	d038      	beq.n	14ca0 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   14c2e:	2c00      	cmp	r4, #0
   14c30:	d038      	beq.n	14ca4 <tc_aes128_set_encrypt_key+0x98>
   14c32:	1f38      	subs	r0, r7, #4
   14c34:	4621      	mov	r1, r4
   14c36:	4602      	mov	r2, r0
   14c38:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   14c3a:	784b      	ldrb	r3, [r1, #1]
   14c3c:	780d      	ldrb	r5, [r1, #0]
   14c3e:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   14c40:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   14c44:	78cd      	ldrb	r5, [r1, #3]
   14c46:	432b      	orrs	r3, r5
   14c48:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   14c4a:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   14c4c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   14c50:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   14c52:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   14c56:	d1f0      	bne.n	14c3a <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   14c58:	4c14      	ldr	r4, [pc, #80]	; (14cac <tc_aes128_set_encrypt_key+0xa0>)
   14c5a:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   14c5c:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   14c5e:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   14c60:	d116      	bne.n	14c90 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   14c62:	f3c3 4207 	ubfx	r2, r3, #16, #8
   14c66:	5ca5      	ldrb	r5, [r4, r2]
   14c68:	0e1a      	lsrs	r2, r3, #24
   14c6a:	5ca2      	ldrb	r2, [r4, r2]
   14c6c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   14c70:	f3c3 2507 	ubfx	r5, r3, #8, #8
   14c74:	b2db      	uxtb	r3, r3
   14c76:	5d65      	ldrb	r5, [r4, r5]
   14c78:	5ce3      	ldrb	r3, [r4, r3]
   14c7a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   14c7e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   14c82:	f021 0303 	bic.w	r3, r1, #3
   14c86:	3330      	adds	r3, #48	; 0x30
   14c88:	446b      	add	r3, sp
   14c8a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   14c8e:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   14c90:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   14c94:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   14c96:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   14c98:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   14c9a:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   14c9c:	d1de      	bne.n	14c5c <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   14c9e:	2001      	movs	r0, #1
}
   14ca0:	b00d      	add	sp, #52	; 0x34
   14ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   14ca4:	4620      	mov	r0, r4
   14ca6:	e7fb      	b.n	14ca0 <tc_aes128_set_encrypt_key+0x94>
   14ca8:	0002a0c4 	.word	0x0002a0c4
   14cac:	0002b68b 	.word	0x0002b68b

00014cb0 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   14cb0:	4801      	ldr	r0, [pc, #4]	; (14cb8 <nrf_cc3xx_platform_abort_init+0x8>)
   14cb2:	f00f bbd1 	b.w	24458 <nrf_cc3xx_platform_set_abort>
   14cb6:	bf00      	nop
   14cb8:	0002a27c 	.word	0x0002a27c

00014cbc <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14cbc:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
   14cbe:	4604      	mov	r4, r0
   14cc0:	b918      	cbnz	r0, 14cca <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   14cc2:	4b0f      	ldr	r3, [pc, #60]	; (14d00 <mutex_free_platform+0x44>)
   14cc4:	480f      	ldr	r0, [pc, #60]	; (14d04 <mutex_free_platform+0x48>)
   14cc6:	685b      	ldr	r3, [r3, #4]
   14cc8:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   14cca:	6861      	ldr	r1, [r4, #4]
   14ccc:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
   14cd0:	d00f      	beq.n	14cf2 <mutex_free_platform+0x36>
   14cd2:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
   14cd6:	d00c      	beq.n	14cf2 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   14cd8:	4d0b      	ldr	r5, [pc, #44]	; (14d08 <mutex_free_platform+0x4c>)
   14cda:	42a9      	cmp	r1, r5
   14cdc:	d009      	beq.n	14cf2 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   14cde:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
   14ce2:	d007      	beq.n	14cf4 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   14ce4:	4809      	ldr	r0, [pc, #36]	; (14d0c <mutex_free_platform+0x50>)
   14ce6:	4621      	mov	r1, r4
   14ce8:	f00b fc92 	bl	20610 <k_mem_slab_free>
        mutex->mutex = NULL;
   14cec:	2300      	movs	r3, #0
   14cee:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   14cf0:	6065      	str	r5, [r4, #4]
}
   14cf2:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   14cf4:	6820      	ldr	r0, [r4, #0]
   14cf6:	2214      	movs	r2, #20
   14cf8:	f012 fea3 	bl	27a42 <memset>
   14cfc:	e7f8      	b.n	14cf0 <mutex_free_platform+0x34>
   14cfe:	bf00      	nop
   14d00:	200007b8 	.word	0x200007b8
   14d04:	0002b78b 	.word	0x0002b78b
   14d08:	a95c5f2c 	.word	0xa95c5f2c
   14d0c:	20003490 	.word	0x20003490

00014d10 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14d10:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   14d12:	b320      	cbz	r0, 14d5e <mutex_lock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
   14d14:	6843      	ldr	r3, [r0, #4]
   14d16:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   14d1a:	d110      	bne.n	14d3e <mutex_lock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   14d1c:	2201      	movs	r2, #1
   14d1e:	6803      	ldr	r3, [r0, #0]
   14d20:	f3bf 8f5b 	dmb	ish
   14d24:	e853 1f00 	ldrex	r1, [r3]
   14d28:	2900      	cmp	r1, #0
   14d2a:	d103      	bne.n	14d34 <mutex_lock_platform+0x24>
   14d2c:	e843 2000 	strex	r0, r2, [r3]
   14d30:	2800      	cmp	r0, #0
   14d32:	d1f7      	bne.n	14d24 <mutex_lock_platform+0x14>
   14d34:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14d38:	d10d      	bne.n	14d56 <mutex_lock_platform+0x46>

        p_mutex = (struct k_mutex *)mutex->mutex;

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
            return NRF_CC3XX_PLATFORM_SUCCESS;
   14d3a:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
   14d3c:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   14d3e:	4a09      	ldr	r2, [pc, #36]	; (14d64 <mutex_lock_platform+0x54>)
   14d40:	4293      	cmp	r3, r2
   14d42:	d00a      	beq.n	14d5a <mutex_lock_platform+0x4a>
        p_mutex = (struct k_mutex *)mutex->mutex;
   14d44:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   14d46:	f04f 32ff 	mov.w	r2, #4294967295
   14d4a:	f04f 33ff 	mov.w	r3, #4294967295
   14d4e:	f00b fe3b 	bl	209c8 <z_impl_k_mutex_lock>
        if (ret == 0) {
   14d52:	2800      	cmp	r0, #0
   14d54:	d0f1      	beq.n	14d3a <mutex_lock_platform+0x2a>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14d56:	4804      	ldr	r0, [pc, #16]	; (14d68 <mutex_lock_platform+0x58>)
   14d58:	e7f0      	b.n	14d3c <mutex_lock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   14d5a:	4804      	ldr	r0, [pc, #16]	; (14d6c <mutex_lock_platform+0x5c>)
   14d5c:	e7ee      	b.n	14d3c <mutex_lock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   14d5e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   14d62:	e7eb      	b.n	14d3c <mutex_lock_platform+0x2c>
   14d64:	a95c5f2c 	.word	0xa95c5f2c
   14d68:	ffff8fe9 	.word	0xffff8fe9
   14d6c:	ffff8fea 	.word	0xffff8fea

00014d70 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14d70:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   14d72:	b1d8      	cbz	r0, 14dac <mutex_unlock_platform+0x3c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   14d74:	6843      	ldr	r3, [r0, #4]
   14d76:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   14d7a:	d110      	bne.n	14d9e <mutex_unlock_platform+0x2e>
   14d7c:	2200      	movs	r2, #0
   14d7e:	6803      	ldr	r3, [r0, #0]
   14d80:	f3bf 8f5b 	dmb	ish
   14d84:	e853 1f00 	ldrex	r1, [r3]
   14d88:	2901      	cmp	r1, #1
   14d8a:	d103      	bne.n	14d94 <mutex_unlock_platform+0x24>
   14d8c:	e843 2000 	strex	r0, r2, [r3]
   14d90:	2800      	cmp	r0, #0
   14d92:	d1f7      	bne.n	14d84 <mutex_unlock_platform+0x14>
   14d94:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14d98:	d10b      	bne.n	14db2 <mutex_unlock_platform+0x42>
        }

        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
   14d9a:	2000      	movs	r0, #0
    }
}
   14d9c:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   14d9e:	4a07      	ldr	r2, [pc, #28]	; (14dbc <mutex_unlock_platform+0x4c>)
   14da0:	4293      	cmp	r3, r2
   14da2:	d008      	beq.n	14db6 <mutex_unlock_platform+0x46>
        p_mutex = (struct k_mutex *)mutex->mutex;
   14da4:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
   14da6:	f00b fedf 	bl	20b68 <z_impl_k_mutex_unlock>
   14daa:	e7f6      	b.n	14d9a <mutex_unlock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   14dac:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   14db0:	e7f4      	b.n	14d9c <mutex_unlock_platform+0x2c>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   14db2:	4803      	ldr	r0, [pc, #12]	; (14dc0 <mutex_unlock_platform+0x50>)
   14db4:	e7f2      	b.n	14d9c <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   14db6:	4803      	ldr	r0, [pc, #12]	; (14dc4 <mutex_unlock_platform+0x54>)
   14db8:	e7f0      	b.n	14d9c <mutex_unlock_platform+0x2c>
   14dba:	bf00      	nop
   14dbc:	a95c5f2c 	.word	0xa95c5f2c
   14dc0:	ffff8fe9 	.word	0xffff8fe9
   14dc4:	ffff8fea 	.word	0xffff8fea

00014dc8 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   14dc8:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   14dca:	4604      	mov	r4, r0
   14dcc:	b918      	cbnz	r0, 14dd6 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   14dce:	4b1d      	ldr	r3, [pc, #116]	; (14e44 <mutex_init_platform+0x7c>)
   14dd0:	481d      	ldr	r0, [pc, #116]	; (14e48 <mutex_init_platform+0x80>)
   14dd2:	685b      	ldr	r3, [r3, #4]
   14dd4:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   14dd6:	6863      	ldr	r3, [r4, #4]
   14dd8:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   14ddc:	d02f      	beq.n	14e3e <mutex_init_platform+0x76>
   14dde:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
   14de2:	d02c      	beq.n	14e3e <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
   14de4:	4a19      	ldr	r2, [pc, #100]	; (14e4c <mutex_init_platform+0x84>)
   14de6:	4293      	cmp	r3, r2
   14de8:	d119      	bne.n	14e1e <mutex_init_platform+0x56>
   14dea:	6823      	ldr	r3, [r4, #0]
   14dec:	bb03      	cbnz	r3, 14e30 <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   14dee:	4818      	ldr	r0, [pc, #96]	; (14e50 <mutex_init_platform+0x88>)
   14df0:	f04f 32ff 	mov.w	r2, #4294967295
   14df4:	f04f 33ff 	mov.w	r3, #4294967295
   14df8:	4621      	mov	r1, r4
   14dfa:	f00b fb9f 	bl	2053c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   14dfe:	b908      	cbnz	r0, 14e04 <mutex_init_platform+0x3c>
   14e00:	6823      	ldr	r3, [r4, #0]
   14e02:	b91b      	cbnz	r3, 14e0c <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
   14e04:	4b0f      	ldr	r3, [pc, #60]	; (14e44 <mutex_init_platform+0x7c>)
   14e06:	4813      	ldr	r0, [pc, #76]	; (14e54 <mutex_init_platform+0x8c>)
   14e08:	685b      	ldr	r3, [r3, #4]
   14e0a:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
   14e0c:	6820      	ldr	r0, [r4, #0]
   14e0e:	2214      	movs	r2, #20
   14e10:	2100      	movs	r1, #0
   14e12:	f012 fe16 	bl	27a42 <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   14e16:	f44f 6368 	mov.w	r3, #3712	; 0xe80
   14e1a:	6063      	str	r3, [r4, #4]
   14e1c:	e008      	b.n	14e30 <mutex_init_platform+0x68>
    switch(flags){
   14e1e:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
   14e22:	d80d      	bhi.n	14e40 <mutex_init_platform+0x78>
   14e24:	2b3a      	cmp	r3, #58	; 0x3a
   14e26:	d003      	beq.n	14e30 <mutex_init_platform+0x68>
   14e28:	f640 62ba 	movw	r2, #3770	; 0xeba
   14e2c:	4293      	cmp	r3, r2
   14e2e:	d1de      	bne.n	14dee <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
   14e30:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   14e32:	f014 fd00 	bl	29836 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   14e36:	6863      	ldr	r3, [r4, #4]
   14e38:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
   14e3c:	6063      	str	r3, [r4, #4]
}
   14e3e:	bd10      	pop	{r4, pc}
    switch(flags){
   14e40:	4a05      	ldr	r2, [pc, #20]	; (14e58 <mutex_init_platform+0x90>)
   14e42:	e7f3      	b.n	14e2c <mutex_init_platform+0x64>
   14e44:	200007b8 	.word	0x200007b8
   14e48:	0002b78b 	.word	0x0002b78b
   14e4c:	a95c5f2c 	.word	0xa95c5f2c
   14e50:	20003490 	.word	0x20003490
   14e54:	0002b7b1 	.word	0x0002b7b1
   14e58:	3a00003a 	.word	0x3a00003a

00014e5c <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   14e5c:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   14e5e:	4906      	ldr	r1, [pc, #24]	; (14e78 <nrf_cc3xx_platform_mutex_init+0x1c>)
   14e60:	4806      	ldr	r0, [pc, #24]	; (14e7c <nrf_cc3xx_platform_mutex_init+0x20>)
   14e62:	2340      	movs	r3, #64	; 0x40
   14e64:	2214      	movs	r2, #20
   14e66:	f014 fcbb 	bl	297e0 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   14e6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   14e6e:	4904      	ldr	r1, [pc, #16]	; (14e80 <nrf_cc3xx_platform_mutex_init+0x24>)
   14e70:	4804      	ldr	r0, [pc, #16]	; (14e84 <nrf_cc3xx_platform_mutex_init+0x28>)
   14e72:	f00f bbb5 	b.w	245e0 <nrf_cc3xx_platform_set_mutexes>
   14e76:	bf00      	nop
   14e78:	20002f90 	.word	0x20002f90
   14e7c:	20003490 	.word	0x20003490
   14e80:	0002a284 	.word	0x0002a284
   14e84:	0002a298 	.word	0x0002a298

00014e88 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   14e88:	4901      	ldr	r1, [pc, #4]	; (14e90 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   14e8a:	2210      	movs	r2, #16
	str	r2, [r1]
   14e8c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   14e8e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   14e90:	e000ed10 	.word	0xe000ed10

00014e94 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   14e94:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   14e96:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   14e98:	f380 8811 	msr	BASEPRI, r0
	isb
   14e9c:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   14ea0:	f3bf 8f4f 	dsb	sy
   14ea4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   14ea6:	b662      	cpsie	i
	isb
   14ea8:	f3bf 8f6f 	isb	sy

	bx	lr
   14eac:	4770      	bx	lr
   14eae:	bf00      	nop

00014eb0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   14eb0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   14eb2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   14eb4:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   14eb8:	f3bf 8f4f 	dsb	sy
   14ebc:	bf20      	wfe

	msr	BASEPRI, r0
   14ebe:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   14ec2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   14ec4:	4770      	bx	lr
   14ec6:	bf00      	nop

00014ec8 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   14ec8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ecc:	4680      	mov	r8, r0
   14ece:	af00      	add	r7, sp, #0

	if (esf != NULL) {
   14ed0:	460c      	mov	r4, r1
   14ed2:	2900      	cmp	r1, #0
   14ed4:	f000 8093 	beq.w	14ffe <z_arm_fatal_error+0x136>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   14ed8:	46e9      	mov	r9, sp
   14eda:	b08a      	sub	sp, #40	; 0x28
   14edc:	e9d1 1200 	ldrd	r1, r2, [r1]
   14ee0:	68a3      	ldr	r3, [r4, #8]
   14ee2:	466d      	mov	r5, sp
   14ee4:	4849      	ldr	r0, [pc, #292]	; (1500c <z_arm_fatal_error+0x144>)
   14ee6:	462e      	mov	r6, r5
   14ee8:	f04f 0a05 	mov.w	sl, #5
   14eec:	e9c5 0105 	strd	r0, r1, [r5, #20]
   14ef0:	e9c5 2307 	strd	r2, r3, [r5, #28]
   14ef4:	f846 af10 	str.w	sl, [r6, #16]!
   14ef8:	4845      	ldr	r0, [pc, #276]	; (15010 <z_arm_fatal_error+0x148>)
   14efa:	4632      	mov	r2, r6
   14efc:	2300      	movs	r3, #0
   14efe:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   14f02:	f7ff f8bf 	bl	14084 <z_impl_z_log_msg_static_create>
   14f06:	46cd      	mov	sp, r9
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   14f08:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   14f0c:	6963      	ldr	r3, [r4, #20]
   14f0e:	46ad      	mov	sp, r5
   14f10:	4840      	ldr	r0, [pc, #256]	; (15014 <z_arm_fatal_error+0x14c>)
   14f12:	f8c5 a010 	str.w	sl, [r5, #16]
   14f16:	e9c5 0105 	strd	r0, r1, [r5, #20]
   14f1a:	e9c5 2307 	strd	r2, r3, [r5, #28]
   14f1e:	483c      	ldr	r0, [pc, #240]	; (15010 <z_arm_fatal_error+0x148>)
   14f20:	4632      	mov	r2, r6
   14f22:	2300      	movs	r3, #0
   14f24:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   14f28:	f7ff f8ac 	bl	14084 <z_impl_z_log_msg_static_create>
   14f2c:	46cd      	mov	sp, r9
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   14f2e:	b088      	sub	sp, #32
   14f30:	69e3      	ldr	r3, [r4, #28]
   14f32:	466a      	mov	r2, sp
   14f34:	4938      	ldr	r1, [pc, #224]	; (15018 <z_arm_fatal_error+0x150>)
   14f36:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14f3a:	2303      	movs	r3, #3
   14f3c:	f842 3f10 	str.w	r3, [r2, #16]!
   14f40:	4833      	ldr	r0, [pc, #204]	; (15010 <z_arm_fatal_error+0x148>)
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   14f42:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 15024 <z_arm_fatal_error+0x15c>
   14f46:	2300      	movs	r3, #0
   14f48:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14f4c:	f7ff f89a 	bl	14084 <z_impl_z_log_msg_static_create>
   14f50:	4626      	mov	r6, r4
   14f52:	46cd      	mov	sp, r9
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
   14f54:	2500      	movs	r5, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   14f56:	f04f 0a0a 	mov.w	sl, #10
   14f5a:	edd6 7a08 	vldr	s15, [r6, #32]
   14f5e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
   14f62:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
   14f66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   14f6a:	46e9      	mov	r9, sp
   14f6c:	ee17 1a90 	vmov	r1, s15
   14f70:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
   14f74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   14f78:	b08e      	sub	sp, #56	; 0x38
   14f7a:	ee17 3a90 	vmov	r3, s15
   14f7e:	edd6 7a0b 	vldr	s15, [r6, #44]	; 0x2c
   14f82:	466a      	mov	r2, sp
   14f84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   14f88:	1c68      	adds	r0, r5, #1
   14f8a:	e9c2 0108 	strd	r0, r1, [r2, #32]
   14f8e:	1ca9      	adds	r1, r5, #2
   14f90:	e9c2 130a 	strd	r1, r3, [r2, #40]	; 0x28
   14f94:	1ceb      	adds	r3, r5, #3
   14f96:	e9c2 b505 	strd	fp, r5, [r2, #20]
   14f9a:	ed82 7a07 	vstr	s14, [r2, #28]
   14f9e:	6313      	str	r3, [r2, #48]	; 0x30
   14fa0:	edc2 7a0d 	vstr	s15, [r2, #52]	; 0x34
   14fa4:	f842 af10 	str.w	sl, [r2, #16]!
   14fa8:	4819      	ldr	r0, [pc, #100]	; (15010 <z_arm_fatal_error+0x148>)
   14faa:	2300      	movs	r3, #0
   14fac:	f245 0140 	movw	r1, #20544	; 0x5040
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
   14fb0:	3504      	adds	r5, #4
   14fb2:	f7ff f867 	bl	14084 <z_impl_z_log_msg_static_create>
   14fb6:	2d10      	cmp	r5, #16
   14fb8:	46cd      	mov	sp, r9
   14fba:	f106 0610 	add.w	r6, r6, #16
   14fbe:	d1cc      	bne.n	14f5a <z_arm_fatal_error+0x92>
	LOG_ERR("fpscr:  0x%08x", esf->fpu.fpscr);
   14fc0:	b088      	sub	sp, #32
   14fc2:	6e23      	ldr	r3, [r4, #96]	; 0x60
   14fc4:	466a      	mov	r2, sp
   14fc6:	4915      	ldr	r1, [pc, #84]	; (1501c <z_arm_fatal_error+0x154>)
   14fc8:	2503      	movs	r5, #3
   14fca:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14fce:	f842 5f10 	str.w	r5, [r2, #16]!
   14fd2:	480f      	ldr	r0, [pc, #60]	; (15010 <z_arm_fatal_error+0x148>)
   14fd4:	2300      	movs	r3, #0
   14fd6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14fda:	f7ff f853 	bl	14084 <z_impl_z_log_msg_static_create>
   14fde:	46cd      	mov	sp, r9
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   14fe0:	b088      	sub	sp, #32
   14fe2:	69a3      	ldr	r3, [r4, #24]
   14fe4:	466a      	mov	r2, sp
   14fe6:	490e      	ldr	r1, [pc, #56]	; (15020 <z_arm_fatal_error+0x158>)
   14fe8:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14fec:	f842 5f10 	str.w	r5, [r2, #16]!
   14ff0:	4807      	ldr	r0, [pc, #28]	; (15010 <z_arm_fatal_error+0x148>)
   14ff2:	2300      	movs	r3, #0
   14ff4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14ff8:	f7ff f844 	bl	14084 <z_impl_z_log_msg_static_create>
   14ffc:	46cd      	mov	sp, r9
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   14ffe:	4621      	mov	r1, r4
   15000:	4640      	mov	r0, r8
   15002:	f00a ffd1 	bl	1ffa8 <z_fatal_error>
}
   15006:	46bd      	mov	sp, r7
   15008:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1500c:	0002b7de 	.word	0x0002b7de
   15010:	0002a070 	.word	0x0002a070
   15014:	0002b80d 	.word	0x0002b80d
   15018:	0002b83c 	.word	0x0002b83c
   1501c:	0002b88e 	.word	0x0002b88e
   15020:	0002b89d 	.word	0x0002b89d
   15024:	0002b84b 	.word	0x0002b84b

00015028 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   15028:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   1502a:	2800      	cmp	r0, #0
   1502c:	db07      	blt.n	1503e <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1502e:	4a04      	ldr	r2, [pc, #16]	; (15040 <arch_irq_enable+0x18>)
   15030:	0941      	lsrs	r1, r0, #5
   15032:	2301      	movs	r3, #1
   15034:	f000 001f 	and.w	r0, r0, #31
   15038:	4083      	lsls	r3, r0
   1503a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   1503e:	4770      	bx	lr
   15040:	e000e100 	.word	0xe000e100

00015044 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   15044:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   15046:	2800      	cmp	r0, #0
   15048:	db0c      	blt.n	15064 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1504a:	0943      	lsrs	r3, r0, #5
   1504c:	4906      	ldr	r1, [pc, #24]	; (15068 <arch_irq_disable+0x24>)
   1504e:	f000 001f 	and.w	r0, r0, #31
   15052:	3320      	adds	r3, #32
   15054:	2201      	movs	r2, #1
   15056:	4082      	lsls	r2, r0
   15058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1505c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15060:	f3bf 8f6f 	isb	sy
}
   15064:	4770      	bx	lr
   15066:	bf00      	nop
   15068:	e000e100 	.word	0xe000e100

0001506c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   1506c:	4b05      	ldr	r3, [pc, #20]	; (15084 <arch_irq_is_enabled+0x18>)
   1506e:	0942      	lsrs	r2, r0, #5
   15070:	f000 001f 	and.w	r0, r0, #31
   15074:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   15078:	2301      	movs	r3, #1
   1507a:	fa03 f000 	lsl.w	r0, r3, r0
}
   1507e:	4010      	ands	r0, r2
   15080:	4770      	bx	lr
   15082:	bf00      	nop
   15084:	e000e100 	.word	0xe000e100

00015088 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   15088:	b538      	push	{r3, r4, r5, lr}
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   1508a:	07d3      	lsls	r3, r2, #31
{
   1508c:	4604      	mov	r4, r0
   1508e:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   15090:	d412      	bmi.n	150b8 <z_arm_irq_priority_set+0x30>
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
   15092:	1c8b      	adds	r3, r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   15094:	2b07      	cmp	r3, #7
   15096:	d910      	bls.n	150ba <z_arm_irq_priority_set+0x32>
   15098:	4a11      	ldr	r2, [pc, #68]	; (150e0 <z_arm_irq_priority_set+0x58>)
   1509a:	4912      	ldr	r1, [pc, #72]	; (150e4 <z_arm_irq_priority_set+0x5c>)
   1509c:	4812      	ldr	r0, [pc, #72]	; (150e8 <z_arm_irq_priority_set+0x60>)
   1509e:	235b      	movs	r3, #91	; 0x5b
   150a0:	f012 f89c 	bl	271dc <assert_print>
   150a4:	4811      	ldr	r0, [pc, #68]	; (150ec <z_arm_irq_priority_set+0x64>)
   150a6:	4629      	mov	r1, r5
   150a8:	2306      	movs	r3, #6
   150aa:	4622      	mov	r2, r4
   150ac:	f012 f896 	bl	271dc <assert_print>
   150b0:	480b      	ldr	r0, [pc, #44]	; (150e0 <z_arm_irq_priority_set+0x58>)
   150b2:	215b      	movs	r1, #91	; 0x5b
   150b4:	f012 f88b 	bl	271ce <assert_post_action>
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   150b8:	2300      	movs	r3, #0
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   150ba:	b260      	sxtb	r0, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   150bc:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   150be:	bfac      	ite	ge
   150c0:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   150c4:	4a0a      	ldrlt	r2, [pc, #40]	; (150f0 <z_arm_irq_priority_set+0x68>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   150c6:	ea4f 1343 	mov.w	r3, r3, lsl #5
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   150ca:	bfb8      	it	lt
   150cc:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   150d0:	b2db      	uxtb	r3, r3
   150d2:	bfaa      	itet	ge
   150d4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   150d8:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   150da:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
}
   150de:	bd38      	pop	{r3, r4, r5, pc}
   150e0:	0002b8cb 	.word	0x0002b8cb
   150e4:	0002b901 	.word	0x0002b901
   150e8:	0002ae37 	.word	0x0002ae37
   150ec:	0002b91c 	.word	0x0002b91c
   150f0:	e000ed14 	.word	0xe000ed14

000150f4 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   150f4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   150f6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   150f8:	4b04      	ldr	r3, [pc, #16]	; (1510c <_arch_isr_direct_pm+0x18>)
   150fa:	699a      	ldr	r2, [r3, #24]
   150fc:	b11a      	cbz	r2, 15106 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   150fe:	2200      	movs	r2, #0
   15100:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   15102:	f014 fb89 	bl	29818 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   15106:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   15108:	bd08      	pop	{r3, pc}
   1510a:	bf00      	nop
   1510c:	200037d0 	.word	0x200037d0

00015110 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   15110:	bf30      	wfi
    b z_SysNmiOnReset
   15112:	f7ff bffd 	b.w	15110 <z_SysNmiOnReset>
   15116:	bf00      	nop

00015118 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   15118:	4a14      	ldr	r2, [pc, #80]	; (1516c <z_arm_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   1511a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1511c:	4b14      	ldr	r3, [pc, #80]	; (15170 <z_arm_prep_c+0x58>)
   1511e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   15122:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   15124:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15128:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   1512c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   15130:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   15134:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   15138:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   1513c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   15140:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   15144:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   15148:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   1514c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15150:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
   15154:	2300      	movs	r3, #0
   15156:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   1515a:	f00a fff7 	bl	2014c <z_bss_zero>
	z_data_copy();
   1515e:	f00d fe59 	bl	22e14 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   15162:	f000 fca3 	bl	15aac <z_arm_interrupt_init>
	z_cstart();
   15166:	f00b f835 	bl	201d4 <z_cstart>
   1516a:	bf00      	nop
   1516c:	00000000 	.word	0x00000000
   15170:	e000ed00 	.word	0xe000ed00

00015174 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   15174:	4a09      	ldr	r2, [pc, #36]	; (1519c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   15176:	490a      	ldr	r1, [pc, #40]	; (151a0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   15178:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1517a:	6809      	ldr	r1, [r1, #0]
   1517c:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1517e:	4909      	ldr	r1, [pc, #36]	; (151a4 <arch_swap+0x30>)
	_current->arch.basepri = key;
   15180:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   15182:	684b      	ldr	r3, [r1, #4]
   15184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   15188:	604b      	str	r3, [r1, #4]
   1518a:	2300      	movs	r3, #0
   1518c:	f383 8811 	msr	BASEPRI, r3
   15190:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   15194:	6893      	ldr	r3, [r2, #8]
}
   15196:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   15198:	4770      	bx	lr
   1519a:	bf00      	nop
   1519c:	200037d0 	.word	0x200037d0
   151a0:	0002a754 	.word	0x0002a754
   151a4:	e000ed00 	.word	0xe000ed00

000151a8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   151a8:	4921      	ldr	r1, [pc, #132]	; (15230 <in_fp_endif+0x2a>)
    ldr r2, [r1, #_kernel_offset_to_current]
   151aa:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   151ac:	f882 e0c1 	strb.w	lr, [r2, #193]	; 0xc1
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   151b0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   151b4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   151b6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   151ba:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
   151be:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
   151c2:	d103      	bne.n	151cc <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
   151c4:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vstmia r0, {s16-s31}
   151c8:	ec80 8a10 	vstmia	r0, {s16-s31}

000151cc <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   151cc:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   151ce:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   151d2:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   151d6:	4f17      	ldr	r7, [pc, #92]	; (15234 <in_fp_endif+0x2e>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   151d8:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   151dc:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   151de:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   151e0:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   151e2:	f992 e0c1 	ldrsb.w	lr, [r2, #193]	; 0xc1

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   151e6:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   151e8:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   151ea:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   151ec:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
   151f0:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
   151f4:	d003      	beq.n	151fe <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   151f6:	2300      	movs	r3, #0
    vmsr fpscr, r3
   151f8:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
   151fc:	e003      	b.n	15206 <in_fp_endif>

000151fe <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
   151fe:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vldmia r0, {s16-s31}
   15202:	ec90 8a10 	vldmia	r0, {s16-s31}

00015206 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   15206:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
   1520a:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   1520e:	f383 8814 	msr	CONTROL, r3
    isb
   15212:	f3bf 8f6f 	isb	sy
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   15216:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   15218:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   1521a:	f000 fce3 	bl	15be4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   1521e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   15222:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   15226:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1522a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   1522e:	4770      	bx	lr
    ldr r1, =_kernel
   15230:	200037d0 	.word	0x200037d0
    ldr v4, =_SCS_ICSR
   15234:	e000ed04 	.word	0xe000ed04

00015238 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   15238:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   1523c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1523e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   15242:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   15246:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   15248:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   1524c:	2902      	cmp	r1, #2
    beq _oops
   1524e:	d0ff      	beq.n	15250 <_oops>

00015250 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   15250:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   15252:	f012 fb98 	bl	27986 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   15256:	bd01      	pop	{r0, pc}

00015258 <arch_new_thread>:
		thread->stack_info.start += MPU_GUARD_ALIGN_AND_SIZE;
		thread->stack_info.size -= MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif /* CONFIG_USERSPACE */
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
   15258:	7b01      	ldrb	r1, [r0, #12]
   1525a:	0789      	lsls	r1, r1, #30
   1525c:	d505      	bpl.n	1526a <arch_new_thread+0x12>
		/* Larger guard needed due to lazy stacking of FP regs may
		 * overshoot the guard area without writing anything. We
		 * carve it out of the stack buffer as-needed instead of
		 * unconditionally reserving it.
		 */
		thread->stack_info.start += FP_GUARD_EXTRA_SIZE;
   1525e:	6e81      	ldr	r1, [r0, #104]	; 0x68
   15260:	3140      	adds	r1, #64	; 0x40
   15262:	6681      	str	r1, [r0, #104]	; 0x68
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
   15264:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
   15266:	3940      	subs	r1, #64	; 0x40
   15268:	66c1      	str	r1, [r0, #108]	; 0x6c

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   1526a:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   1526e:	9b00      	ldr	r3, [sp, #0]
   15270:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   15274:	490f      	ldr	r1, [pc, #60]	; (152b4 <arch_new_thread+0x5c>)
	iframe->a3 = (uint32_t)p2;
   15276:	9b01      	ldr	r3, [sp, #4]
   15278:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1527c:	9b02      	ldr	r3, [sp, #8]
   1527e:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   15282:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   15286:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1528a:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   1528e:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   15292:	2300      	movs	r3, #0
   15294:	6783      	str	r3, [r0, #120]	; 0x78
	thread->arch.mode = 0;
#if defined(CONFIG_ARM_STORE_EXC_RETURN)
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
#endif
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
   15296:	7b03      	ldrb	r3, [r0, #12]
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
   15298:	f013 0f02 	tst.w	r3, #2
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1529c:	f1a2 0220 	sub.w	r2, r2, #32
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
   152a0:	f64f 5308 	movw	r3, #64776	; 0xfd08
   152a4:	bf08      	it	eq
   152a6:	f44f 437d 	moveq.w	r3, #64768	; 0xfd00
	thread->callee_saved.psp = (uint32_t)iframe;
   152aa:	6502      	str	r2, [r0, #80]	; 0x50
	if ((thread->base.user_options & K_FP_REGS) != 0) {
   152ac:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   152b0:	4770      	bx	lr
   152b2:	bf00      	nop
   152b4:	00026da3 	.word	0x00026da3

000152b8 <z_arm_mpu_stack_guard_and_fpu_adjust>:
 * policy and the stack_info values for the thread that is
 * being switched in.
 */
uint32_t z_arm_mpu_stack_guard_and_fpu_adjust(struct k_thread *thread)
{
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
   152b8:	7b03      	ldrb	r3, [r0, #12]
   152ba:	f013 0f02 	tst.w	r3, #2
   152be:	4b19      	ldr	r3, [pc, #100]	; (15324 <z_arm_mpu_stack_guard_and_fpu_adjust+0x6c>)
   152c0:	d103      	bne.n	152ca <z_arm_mpu_stack_guard_and_fpu_adjust+0x12>
   152c2:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
   152c6:	06d2      	lsls	r2, r2, #27
   152c8:	d417      	bmi.n	152fa <z_arm_mpu_stack_guard_and_fpu_adjust+0x42>
		 * The thread is not pre-tagged with K_FP_REGS, but it has
		 * generated an FP context. Activate lazy stacking and
		 * program a large MPU guard to detect privilege thread
		 * stack overflows.
		 */
		FPU->FPCCR |= FPU_FPCCR_LSPEN_Msk;
   152ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   152cc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
   152d0:	635a      	str	r2, [r3, #52]	; 0x34
		if ((thread->arch.mode &
   152d2:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   152d6:	0719      	lsls	r1, r3, #28
   152d8:	d409      	bmi.n	152ee <z_arm_mpu_stack_guard_and_fpu_adjust+0x36>
			thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
   152da:	f043 0308 	orr.w	r3, r3, #8
   152de:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
				thread->stack_info.start +=
   152e2:	6e83      	ldr	r3, [r0, #104]	; 0x68
   152e4:	3340      	adds	r3, #64	; 0x40
   152e6:	6683      	str	r3, [r0, #104]	; 0x68
				thread->stack_info.size -=
   152e8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   152ea:	3b40      	subs	r3, #64	; 0x40
   152ec:	66c3      	str	r3, [r0, #108]	; 0x6c

		z_arm_thread_stack_info_adjust(thread, true);

		/* Tag the thread with K_FP_REGS */
		thread->base.user_options |= K_FP_REGS;
   152ee:	7b03      	ldrb	r3, [r0, #12]
   152f0:	f043 0302 	orr.w	r3, r3, #2
   152f4:	7303      	strb	r3, [r0, #12]

		return MPU_GUARD_ALIGN_AND_SIZE_FLOAT;
   152f6:	2080      	movs	r0, #128	; 0x80
   152f8:	4770      	bx	lr
	/* Thread is not pre-tagged with K_FP_REGS, and it has
	 * not been using the FPU. Since there is no active FPU
	 * context, de-activate lazy stacking and program the
	 * default MPU guard size.
	 */
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);
   152fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   152fc:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
   15300:	635a      	str	r2, [r3, #52]	; 0x34
		if ((thread->arch.mode &
   15302:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   15306:	071a      	lsls	r2, r3, #28
   15308:	d401      	bmi.n	1530e <z_arm_mpu_stack_guard_and_fpu_adjust+0x56>

	z_arm_thread_stack_info_adjust(thread, false);

	return MPU_GUARD_ALIGN_AND_SIZE;
   1530a:	2040      	movs	r0, #64	; 0x40
}
   1530c:	4770      	bx	lr
			thread->arch.mode &= ~Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
   1530e:	f023 0308 	bic.w	r3, r3, #8
   15312:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
				thread->stack_info.start -=
   15316:	6e83      	ldr	r3, [r0, #104]	; 0x68
   15318:	3b40      	subs	r3, #64	; 0x40
   1531a:	6683      	str	r3, [r0, #104]	; 0x68
				thread->stack_info.size +=
   1531c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   1531e:	3340      	adds	r3, #64	; 0x40
   15320:	66c3      	str	r3, [r0, #108]	; 0x6c
   15322:	e7f2      	b.n	1530a <z_arm_mpu_stack_guard_and_fpu_adjust+0x52>
   15324:	e000ef00 	.word	0xe000ef00

00015328 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   15328:	4a0c      	ldr	r2, [pc, #48]	; (1535c <z_check_thread_stack_fail+0x34>)
{
   1532a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   1532c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   1532e:	b1a0      	cbz	r0, 1535a <z_check_thread_stack_fail+0x32>
#endif

#if (defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)) && \
	defined(CONFIG_MPU_STACK_GUARD)
	uint32_t guard_len =
		((_current->arch.mode & Z_ARM_MODE_MPU_GUARD_FLOAT_Msk) != 0) ?
   15330:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   15334:	6e80      	ldr	r0, [r0, #104]	; 0x68
		MPU_GUARD_ALIGN_AND_SIZE_FLOAT : MPU_GUARD_ALIGN_AND_SIZE;
   15336:	f012 0f08 	tst.w	r2, #8
   1533a:	bf0c      	ite	eq
   1533c:	2240      	moveq	r2, #64	; 0x40
   1533e:	2280      	movne	r2, #128	; 0x80
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   15340:	f113 0f16 	cmn.w	r3, #22
   15344:	d004      	beq.n	15350 <z_check_thread_stack_fail+0x28>
   15346:	1a82      	subs	r2, r0, r2
   15348:	429a      	cmp	r2, r3
   1534a:	d805      	bhi.n	15358 <z_check_thread_stack_fail+0x30>
   1534c:	4283      	cmp	r3, r0
   1534e:	d203      	bcs.n	15358 <z_check_thread_stack_fail+0x30>
		return 0;
   15350:	4281      	cmp	r1, r0
   15352:	bf28      	it	cs
   15354:	2000      	movcs	r0, #0
   15356:	4770      	bx	lr
   15358:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
   1535a:	4770      	bx	lr
   1535c:	200037d0 	.word	0x200037d0

00015360 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   15360:	b508      	push	{r3, lr}
   15362:	4614      	mov	r4, r2
   15364:	460d      	mov	r5, r1
   15366:	2200      	movs	r2, #0
   15368:	eee1 2a10 	vmsr	fpscr, r2
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1536c:	f3ef 8214 	mrs	r2, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   15370:	f022 0204 	bic.w	r2, r2, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   15374:	f382 8814 	msr	CONTROL, r2
  __ASM volatile ("isb 0xF":::"memory");
   15378:	f3bf 8f6f 	isb	sy
   1537c:	f3bf 8f6f 	isb	sy
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   15380:	4a08      	ldr	r2, [pc, #32]	; (153a4 <arch_switch_to_main_thread+0x44>)
   15382:	6090      	str	r0, [r2, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   15384:	f000 fc2e 	bl	15be4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   15388:	4620      	mov	r0, r4
   1538a:	f385 8809 	msr	PSP, r5
   1538e:	2100      	movs	r1, #0
   15390:	b663      	cpsie	if
   15392:	f381 8811 	msr	BASEPRI, r1
   15396:	f3bf 8f6f 	isb	sy
   1539a:	2200      	movs	r2, #0
   1539c:	2300      	movs	r3, #0
   1539e:	f011 fd00 	bl	26da2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   153a2:	bf00      	nop
   153a4:	200037d0 	.word	0x200037d0

000153a8 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   153a8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   153aa:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   153ac:	4a0b      	ldr	r2, [pc, #44]	; (153dc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   153ae:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   153b0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   153b2:	bf1e      	ittt	ne
	movne	r1, #0
   153b4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   153b6:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   153b8:	f014 fa2e 	blne	29818 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   153bc:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   153be:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   153c2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   153c6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   153ca:	4905      	ldr	r1, [pc, #20]	; (153e0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   153cc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   153ce:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   153d0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   153d2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   153d6:	4903      	ldr	r1, [pc, #12]	; (153e4 <_isr_wrapper+0x3c>)
	bx r1
   153d8:	4708      	bx	r1
   153da:	0000      	.short	0x0000
	ldr r2, =_kernel
   153dc:	200037d0 	.word	0x200037d0
	ldr r1, =_sw_isr_table
   153e0:	00029d68 	.word	0x00029d68
	ldr r1, =z_arm_int_exit
   153e4:	000153e9 	.word	0x000153e9

000153e8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   153e8:	4b04      	ldr	r3, [pc, #16]	; (153fc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   153ea:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   153ec:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   153ee:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   153f0:	d003      	beq.n	153fa <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   153f2:	4903      	ldr	r1, [pc, #12]	; (15400 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   153f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   153f8:	600a      	str	r2, [r1, #0]

000153fa <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   153fa:	4770      	bx	lr
	ldr r3, =_kernel
   153fc:	200037d0 	.word	0x200037d0
	ldr r1, =_SCS_ICSR
   15400:	e000ed04 	.word	0xe000ed04

00015404 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   15404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15408:	b086      	sub	sp, #24
   1540a:	4606      	mov	r6, r0
   1540c:	af00      	add	r7, sp, #0
   1540e:	460d      	mov	r5, r1
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
   15410:	4b47      	ldr	r3, [pc, #284]	; (15530 <bus_fault.constprop.0+0x12c>)
   15412:	617b      	str	r3, [r7, #20]
   15414:	2402      	movs	r4, #2
   15416:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1541a:	4846      	ldr	r0, [pc, #280]	; (15534 <bus_fault.constprop.0+0x130>)
   1541c:	613c      	str	r4, [r7, #16]
   1541e:	f107 0210 	add.w	r2, r7, #16
   15422:	f012 fabf 	bl	279a4 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   15426:	4b44      	ldr	r3, [pc, #272]	; (15538 <bus_fault.constprop.0+0x134>)
   15428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1542a:	04d9      	lsls	r1, r3, #19
   1542c:	d56d      	bpl.n	1550a <bus_fault.constprop.0+0x106>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
   1542e:	4b43      	ldr	r3, [pc, #268]	; (1553c <bus_fault.constprop.0+0x138>)
   15430:	4840      	ldr	r0, [pc, #256]	; (15534 <bus_fault.constprop.0+0x130>)
   15432:	e9c7 4304 	strd	r4, r3, [r7, #16]
   15436:	f107 0210 	add.w	r2, r7, #16
   1543a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1543e:	f012 fab1 	bl	279a4 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
   15442:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   15444:	4b3c      	ldr	r3, [pc, #240]	; (15538 <bus_fault.constprop.0+0x134>)
   15446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15448:	051a      	lsls	r2, r3, #20
   1544a:	d50b      	bpl.n	15464 <bus_fault.constprop.0+0x60>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
   1544c:	4b3c      	ldr	r3, [pc, #240]	; (15540 <bus_fault.constprop.0+0x13c>)
   1544e:	617b      	str	r3, [r7, #20]
   15450:	2302      	movs	r3, #2
   15452:	4838      	ldr	r0, [pc, #224]	; (15534 <bus_fault.constprop.0+0x130>)
   15454:	613b      	str	r3, [r7, #16]
   15456:	f107 0210 	add.w	r2, r7, #16
   1545a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1545e:	f012 faa1 	bl	279a4 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
   15462:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   15464:	4c34      	ldr	r4, [pc, #208]	; (15538 <bus_fault.constprop.0+0x134>)
   15466:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   15468:	059b      	lsls	r3, r3, #22
   1546a:	d523      	bpl.n	154b4 <bus_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
   1546c:	46e8      	mov	r8, sp
   1546e:	4b35      	ldr	r3, [pc, #212]	; (15544 <bus_fault.constprop.0+0x140>)
   15470:	617b      	str	r3, [r7, #20]
   15472:	2302      	movs	r3, #2
   15474:	482f      	ldr	r0, [pc, #188]	; (15534 <bus_fault.constprop.0+0x130>)
   15476:	613b      	str	r3, [r7, #16]
   15478:	f107 0210 	add.w	r2, r7, #16
   1547c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15480:	f012 fa90 	bl	279a4 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   15484:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   15486:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   15488:	0410      	lsls	r0, r2, #16
   1548a:	d512      	bpl.n	154b2 <bus_fault.constprop.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   1548c:	b088      	sub	sp, #32
   1548e:	466a      	mov	r2, sp
   15490:	492d      	ldr	r1, [pc, #180]	; (15548 <bus_fault.constprop.0+0x144>)
   15492:	4828      	ldr	r0, [pc, #160]	; (15534 <bus_fault.constprop.0+0x130>)
   15494:	e9c2 1305 	strd	r1, r3, [r2, #20]
   15498:	2303      	movs	r3, #3
   1549a:	f842 3f10 	str.w	r3, [r2, #16]!
   1549e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   154a2:	f012 fa7f 	bl	279a4 <z_log_msg_static_create.constprop.0>
   154a6:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   154a8:	b11e      	cbz	r6, 154b2 <bus_fault.constprop.0+0xae>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   154aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   154ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   154b0:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
   154b2:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   154b4:	4b20      	ldr	r3, [pc, #128]	; (15538 <bus_fault.constprop.0+0x134>)
   154b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   154b8:	0559      	lsls	r1, r3, #21
   154ba:	d50b      	bpl.n	154d4 <bus_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
   154bc:	4b23      	ldr	r3, [pc, #140]	; (1554c <bus_fault.constprop.0+0x148>)
   154be:	617b      	str	r3, [r7, #20]
   154c0:	2302      	movs	r3, #2
   154c2:	481c      	ldr	r0, [pc, #112]	; (15534 <bus_fault.constprop.0+0x130>)
   154c4:	613b      	str	r3, [r7, #16]
   154c6:	f107 0210 	add.w	r2, r7, #16
   154ca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   154ce:	f012 fa69 	bl	279a4 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
   154d2:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   154d4:	4b18      	ldr	r3, [pc, #96]	; (15538 <bus_fault.constprop.0+0x134>)
   154d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   154d8:	05d2      	lsls	r2, r2, #23
   154da:	d518      	bpl.n	1550e <bus_fault.constprop.0+0x10a>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
   154dc:	4b1c      	ldr	r3, [pc, #112]	; (15550 <bus_fault.constprop.0+0x14c>)
   154de:	617b      	str	r3, [r7, #20]
   154e0:	2302      	movs	r3, #2
   154e2:	4814      	ldr	r0, [pc, #80]	; (15534 <bus_fault.constprop.0+0x130>)
   154e4:	613b      	str	r3, [r7, #16]
   154e6:	f107 0210 	add.w	r2, r7, #16
   154ea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   154ee:	f012 fa59 	bl	279a4 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
   154f2:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   154f4:	4a10      	ldr	r2, [pc, #64]	; (15538 <bus_fault.constprop.0+0x134>)
   154f6:	6a93      	ldr	r3, [r2, #40]	; 0x28
   154f8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   154fc:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
   154fe:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
   15500:	2300      	movs	r3, #0
   15502:	702b      	strb	r3, [r5, #0]
}
   15504:	46bd      	mov	sp, r7
   15506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
   1550a:	2016      	movs	r0, #22
   1550c:	e79a      	b.n	15444 <bus_fault.constprop.0+0x40>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   1550e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15510:	049b      	lsls	r3, r3, #18
   15512:	d5ef      	bpl.n	154f4 <bus_fault.constprop.0+0xf0>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   15514:	4b0f      	ldr	r3, [pc, #60]	; (15554 <bus_fault.constprop.0+0x150>)
   15516:	617b      	str	r3, [r7, #20]
   15518:	2302      	movs	r3, #2
   1551a:	4806      	ldr	r0, [pc, #24]	; (15534 <bus_fault.constprop.0+0x130>)
   1551c:	613b      	str	r3, [r7, #16]
   1551e:	f107 0210 	add.w	r2, r7, #16
   15522:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15526:	f012 fa3d 	bl	279a4 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
   1552a:	201c      	movs	r0, #28
   1552c:	e7e2      	b.n	154f4 <bus_fault.constprop.0+0xf0>
   1552e:	bf00      	nop
   15530:	0002b95c 	.word	0x0002b95c
   15534:	0002a070 	.word	0x0002a070
   15538:	e000ed00 	.word	0xe000ed00
   1553c:	0002b972 	.word	0x0002b972
   15540:	0002b983 	.word	0x0002b983
   15544:	0002b996 	.word	0x0002b996
   15548:	0002b9af 	.word	0x0002b9af
   1554c:	0002b9c4 	.word	0x0002b9c4
   15550:	0002b9df 	.word	0x0002b9df
   15554:	0002b9f7 	.word	0x0002b9f7

00015558 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   15558:	b510      	push	{r4, lr}
   1555a:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   1555c:	4b36      	ldr	r3, [pc, #216]	; (15638 <usage_fault.constprop.0+0xe0>)
   1555e:	4837      	ldr	r0, [pc, #220]	; (1563c <usage_fault.constprop.0+0xe4>)
   15560:	9305      	str	r3, [sp, #20]
   15562:	aa04      	add	r2, sp, #16
   15564:	2402      	movs	r4, #2
   15566:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1556a:	9404      	str	r4, [sp, #16]
   1556c:	f012 fa1a 	bl	279a4 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   15570:	4b33      	ldr	r3, [pc, #204]	; (15640 <usage_fault.constprop.0+0xe8>)
   15572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15574:	019a      	lsls	r2, r3, #6
   15576:	d55d      	bpl.n	15634 <usage_fault.constprop.0+0xdc>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
   15578:	4b32      	ldr	r3, [pc, #200]	; (15644 <usage_fault.constprop.0+0xec>)
   1557a:	4830      	ldr	r0, [pc, #192]	; (1563c <usage_fault.constprop.0+0xe4>)
   1557c:	aa04      	add	r2, sp, #16
   1557e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15582:	e9cd 4304 	strd	r4, r3, [sp, #16]
   15586:	f012 fa0d 	bl	279a4 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
   1558a:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   1558c:	4b2c      	ldr	r3, [pc, #176]	; (15640 <usage_fault.constprop.0+0xe8>)
   1558e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15590:	01db      	lsls	r3, r3, #7
   15592:	d50a      	bpl.n	155aa <usage_fault.constprop.0+0x52>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
   15594:	4b2c      	ldr	r3, [pc, #176]	; (15648 <usage_fault.constprop.0+0xf0>)
   15596:	4829      	ldr	r0, [pc, #164]	; (1563c <usage_fault.constprop.0+0xe4>)
   15598:	9305      	str	r3, [sp, #20]
   1559a:	aa04      	add	r2, sp, #16
   1559c:	2302      	movs	r3, #2
   1559e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   155a2:	9304      	str	r3, [sp, #16]
   155a4:	f012 f9fe 	bl	279a4 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
   155a8:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   155aa:	4b25      	ldr	r3, [pc, #148]	; (15640 <usage_fault.constprop.0+0xe8>)
   155ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   155ae:	031c      	lsls	r4, r3, #12
   155b0:	d50a      	bpl.n	155c8 <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
   155b2:	4b26      	ldr	r3, [pc, #152]	; (1564c <usage_fault.constprop.0+0xf4>)
   155b4:	4821      	ldr	r0, [pc, #132]	; (1563c <usage_fault.constprop.0+0xe4>)
   155b6:	9305      	str	r3, [sp, #20]
   155b8:	aa04      	add	r2, sp, #16
   155ba:	2302      	movs	r3, #2
   155bc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   155c0:	9304      	str	r3, [sp, #16]
   155c2:	f012 f9ef 	bl	279a4 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
   155c6:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   155c8:	4b1d      	ldr	r3, [pc, #116]	; (15640 <usage_fault.constprop.0+0xe8>)
   155ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   155cc:	0359      	lsls	r1, r3, #13
   155ce:	d50a      	bpl.n	155e6 <usage_fault.constprop.0+0x8e>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   155d0:	4b1f      	ldr	r3, [pc, #124]	; (15650 <usage_fault.constprop.0+0xf8>)
   155d2:	481a      	ldr	r0, [pc, #104]	; (1563c <usage_fault.constprop.0+0xe4>)
   155d4:	9305      	str	r3, [sp, #20]
   155d6:	aa04      	add	r2, sp, #16
   155d8:	2302      	movs	r3, #2
   155da:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   155de:	9304      	str	r3, [sp, #16]
   155e0:	f012 f9e0 	bl	279a4 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
   155e4:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   155e6:	4b16      	ldr	r3, [pc, #88]	; (15640 <usage_fault.constprop.0+0xe8>)
   155e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   155ea:	039a      	lsls	r2, r3, #14
   155ec:	d50a      	bpl.n	15604 <usage_fault.constprop.0+0xac>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
   155ee:	4b19      	ldr	r3, [pc, #100]	; (15654 <usage_fault.constprop.0+0xfc>)
   155f0:	4812      	ldr	r0, [pc, #72]	; (1563c <usage_fault.constprop.0+0xe4>)
   155f2:	9305      	str	r3, [sp, #20]
   155f4:	aa04      	add	r2, sp, #16
   155f6:	2302      	movs	r3, #2
   155f8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   155fc:	9304      	str	r3, [sp, #16]
   155fe:	f012 f9d1 	bl	279a4 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
   15602:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   15604:	4b0e      	ldr	r3, [pc, #56]	; (15640 <usage_fault.constprop.0+0xe8>)
   15606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15608:	03db      	lsls	r3, r3, #15
   1560a:	d50a      	bpl.n	15622 <usage_fault.constprop.0+0xca>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   1560c:	4b12      	ldr	r3, [pc, #72]	; (15658 <usage_fault.constprop.0+0x100>)
   1560e:	480b      	ldr	r0, [pc, #44]	; (1563c <usage_fault.constprop.0+0xe4>)
   15610:	9305      	str	r3, [sp, #20]
   15612:	aa04      	add	r2, sp, #16
   15614:	2302      	movs	r3, #2
   15616:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1561a:	9304      	str	r3, [sp, #16]
   1561c:	f012 f9c2 	bl	279a4 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
   15620:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   15622:	4a07      	ldr	r2, [pc, #28]	; (15640 <usage_fault.constprop.0+0xe8>)
   15624:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15626:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   1562a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   1562e:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   15630:	b006      	add	sp, #24
   15632:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
   15634:	201d      	movs	r0, #29
   15636:	e7a9      	b.n	1558c <usage_fault.constprop.0+0x34>
   15638:	0002ba26 	.word	0x0002ba26
   1563c:	0002a070 	.word	0x0002a070
   15640:	e000ed00 	.word	0xe000ed00
   15644:	0002ba3e 	.word	0x0002ba3e
   15648:	0002ba51 	.word	0x0002ba51
   1564c:	0002ba6b 	.word	0x0002ba6b
   15650:	0002ba89 	.word	0x0002ba89
   15654:	0002baae 	.word	0x0002baae
   15658:	0002bac8 	.word	0x0002bac8

0001565c <mem_manage_fault>:
{
   1565c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15660:	b086      	sub	sp, #24
   15662:	4681      	mov	r9, r0
   15664:	af00      	add	r7, sp, #0
   15666:	468a      	mov	sl, r1
   15668:	4690      	mov	r8, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   1566a:	4b5a      	ldr	r3, [pc, #360]	; (157d4 <mem_manage_fault+0x178>)
   1566c:	485a      	ldr	r0, [pc, #360]	; (157d8 <mem_manage_fault+0x17c>)
   1566e:	617b      	str	r3, [r7, #20]
   15670:	2402      	movs	r4, #2
   15672:	613c      	str	r4, [r7, #16]
   15674:	f107 0210 	add.w	r2, r7, #16
   15678:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1567c:	f012 f992 	bl	279a4 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   15680:	4b56      	ldr	r3, [pc, #344]	; (157dc <mem_manage_fault+0x180>)
   15682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15684:	06d8      	lsls	r0, r3, #27
   15686:	d545      	bpl.n	15714 <mem_manage_fault+0xb8>
		PR_FAULT_INFO("  Stacking error (context area might be"
   15688:	4b55      	ldr	r3, [pc, #340]	; (157e0 <mem_manage_fault+0x184>)
   1568a:	4853      	ldr	r0, [pc, #332]	; (157d8 <mem_manage_fault+0x17c>)
   1568c:	e9c7 4304 	strd	r4, r3, [r7, #16]
   15690:	f107 0210 	add.w	r2, r7, #16
   15694:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_STACKING;
   15698:	2411      	movs	r4, #17
		PR_FAULT_INFO("  Stacking error (context area might be"
   1569a:	f012 f983 	bl	279a4 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   1569e:	4b4f      	ldr	r3, [pc, #316]	; (157dc <mem_manage_fault+0x180>)
   156a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   156a2:	0719      	lsls	r1, r3, #28
   156a4:	d50b      	bpl.n	156be <mem_manage_fault+0x62>
		PR_FAULT_INFO("  Unstacking error");
   156a6:	4b4f      	ldr	r3, [pc, #316]	; (157e4 <mem_manage_fault+0x188>)
   156a8:	617b      	str	r3, [r7, #20]
   156aa:	2302      	movs	r3, #2
   156ac:	484a      	ldr	r0, [pc, #296]	; (157d8 <mem_manage_fault+0x17c>)
   156ae:	613b      	str	r3, [r7, #16]
   156b0:	f107 0210 	add.w	r2, r7, #16
   156b4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_UNSTACKING;
   156b8:	2412      	movs	r4, #18
		PR_FAULT_INFO("  Unstacking error");
   156ba:	f012 f973 	bl	279a4 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   156be:	4d47      	ldr	r5, [pc, #284]	; (157dc <mem_manage_fault+0x180>)
   156c0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   156c2:	079a      	lsls	r2, r3, #30
   156c4:	d528      	bpl.n	15718 <mem_manage_fault+0xbc>
		PR_FAULT_INFO("  Data Access Violation");
   156c6:	466c      	mov	r4, sp
   156c8:	4b47      	ldr	r3, [pc, #284]	; (157e8 <mem_manage_fault+0x18c>)
   156ca:	617b      	str	r3, [r7, #20]
   156cc:	2302      	movs	r3, #2
   156ce:	613b      	str	r3, [r7, #16]
   156d0:	4841      	ldr	r0, [pc, #260]	; (157d8 <mem_manage_fault+0x17c>)
   156d2:	f107 0210 	add.w	r2, r7, #16
   156d6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   156da:	f012 f963 	bl	279a4 <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
   156de:	6b6e      	ldr	r6, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   156e0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   156e2:	061b      	lsls	r3, r3, #24
   156e4:	d560      	bpl.n	157a8 <mem_manage_fault+0x14c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   156e6:	b088      	sub	sp, #32
   156e8:	466a      	mov	r2, sp
   156ea:	4b40      	ldr	r3, [pc, #256]	; (157ec <mem_manage_fault+0x190>)
   156ec:	483a      	ldr	r0, [pc, #232]	; (157d8 <mem_manage_fault+0x17c>)
   156ee:	e9c2 3605 	strd	r3, r6, [r2, #20]
   156f2:	2303      	movs	r3, #3
   156f4:	f842 3f10 	str.w	r3, [r2, #16]!
   156f8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   156fc:	f012 f952 	bl	279a4 <z_log_msg_static_create.constprop.0>
   15700:	46a5      	mov	sp, r4
			if (from_hard_fault != 0) {
   15702:	f1ba 0f00 	cmp.w	sl, #0
   15706:	d003      	beq.n	15710 <mem_manage_fault+0xb4>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   15708:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1570a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1570e:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
   15710:	2413      	movs	r4, #19
   15712:	e003      	b.n	1571c <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
   15714:	2410      	movs	r4, #16
   15716:	e7c2      	b.n	1569e <mem_manage_fault+0x42>
	uint32_t mmfar = -EINVAL;
   15718:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   1571c:	4b2f      	ldr	r3, [pc, #188]	; (157dc <mem_manage_fault+0x180>)
   1571e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15720:	07d8      	lsls	r0, r3, #31
   15722:	d50b      	bpl.n	1573c <mem_manage_fault+0xe0>
		PR_FAULT_INFO("  Instruction Access Violation");
   15724:	4b32      	ldr	r3, [pc, #200]	; (157f0 <mem_manage_fault+0x194>)
   15726:	617b      	str	r3, [r7, #20]
   15728:	2302      	movs	r3, #2
   1572a:	482b      	ldr	r0, [pc, #172]	; (157d8 <mem_manage_fault+0x17c>)
   1572c:	613b      	str	r3, [r7, #16]
   1572e:	f107 0210 	add.w	r2, r7, #16
   15732:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
   15736:	2414      	movs	r4, #20
		PR_FAULT_INFO("  Instruction Access Violation");
   15738:	f012 f934 	bl	279a4 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1573c:	4b27      	ldr	r3, [pc, #156]	; (157dc <mem_manage_fault+0x180>)
   1573e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15740:	0699      	lsls	r1, r3, #26
   15742:	d50b      	bpl.n	1575c <mem_manage_fault+0x100>
		PR_FAULT_INFO(
   15744:	4b2b      	ldr	r3, [pc, #172]	; (157f4 <mem_manage_fault+0x198>)
   15746:	617b      	str	r3, [r7, #20]
   15748:	2302      	movs	r3, #2
   1574a:	4823      	ldr	r0, [pc, #140]	; (157d8 <mem_manage_fault+0x17c>)
   1574c:	613b      	str	r3, [r7, #16]
   1574e:	f107 0210 	add.w	r2, r7, #16
   15752:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
   15756:	2415      	movs	r4, #21
		PR_FAULT_INFO(
   15758:	f012 f924 	bl	279a4 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1575c:	4d1f      	ldr	r5, [pc, #124]	; (157dc <mem_manage_fault+0x180>)
   1575e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15760:	06da      	lsls	r2, r3, #27
   15762:	d402      	bmi.n	1576a <mem_manage_fault+0x10e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   15764:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   15766:	079b      	lsls	r3, r3, #30
   15768:	d50a      	bpl.n	15780 <mem_manage_fault+0x124>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   1576a:	686b      	ldr	r3, [r5, #4]
   1576c:	0518      	lsls	r0, r3, #20
   1576e:	d507      	bpl.n	15780 <mem_manage_fault+0x124>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   15770:	4649      	mov	r1, r9
   15772:	4630      	mov	r0, r6
   15774:	f7ff fdd8 	bl	15328 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   15778:	b1c8      	cbz	r0, 157ae <mem_manage_fault+0x152>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1577a:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   1577e:	2402      	movs	r4, #2
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   15780:	4b16      	ldr	r3, [pc, #88]	; (157dc <mem_manage_fault+0x180>)
   15782:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   15784:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   15786:	bf42      	ittt	mi
   15788:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   1578a:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   1578e:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   15790:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   15792:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   15796:	629a      	str	r2, [r3, #40]	; 0x28
}
   15798:	4620      	mov	r0, r4
	*recoverable = memory_fault_recoverable(esf, true);
   1579a:	2300      	movs	r3, #0
}
   1579c:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
   1579e:	f888 3000 	strb.w	r3, [r8]
}
   157a2:	46bd      	mov	sp, r7
   157a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t mmfar = -EINVAL;
   157a8:	f06f 0615 	mvn.w	r6, #21
   157ac:	e7b0      	b.n	15710 <mem_manage_fault+0xb4>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   157ae:	6aab      	ldr	r3, [r5, #40]	; 0x28
   157b0:	06d9      	lsls	r1, r3, #27
   157b2:	d5e5      	bpl.n	15780 <mem_manage_fault+0x124>
   157b4:	4910      	ldr	r1, [pc, #64]	; (157f8 <mem_manage_fault+0x19c>)
   157b6:	4a11      	ldr	r2, [pc, #68]	; (157fc <mem_manage_fault+0x1a0>)
   157b8:	4811      	ldr	r0, [pc, #68]	; (15800 <mem_manage_fault+0x1a4>)
   157ba:	f240 135b 	movw	r3, #347	; 0x15b
   157be:	f011 fd0d 	bl	271dc <assert_print>
   157c2:	4810      	ldr	r0, [pc, #64]	; (15804 <mem_manage_fault+0x1a8>)
   157c4:	f011 fd0a 	bl	271dc <assert_print>
   157c8:	480c      	ldr	r0, [pc, #48]	; (157fc <mem_manage_fault+0x1a0>)
   157ca:	f240 115b 	movw	r1, #347	; 0x15b
   157ce:	f011 fcfe 	bl	271ce <assert_post_action>
   157d2:	bf00      	nop
   157d4:	0002baf3 	.word	0x0002baf3
   157d8:	0002a070 	.word	0x0002a070
   157dc:	e000ed00 	.word	0xe000ed00
   157e0:	0002bb09 	.word	0x0002bb09
   157e4:	0002b983 	.word	0x0002b983
   157e8:	0002bb3c 	.word	0x0002bb3c
   157ec:	0002bb54 	.word	0x0002bb54
   157f0:	0002bb6a 	.word	0x0002bb6a
   157f4:	0002b9f7 	.word	0x0002b9f7
   157f8:	0002bbc3 	.word	0x0002bbc3
   157fc:	0002bb89 	.word	0x0002bb89
   15800:	0002ae37 	.word	0x0002ae37
   15804:	0002bc0d 	.word	0x0002bc0d

00015808 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   15808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1580c:	4b8a      	ldr	r3, [pc, #552]	; (15a38 <z_arm_fault+0x230>)
{
   1580e:	b09d      	sub	sp, #116	; 0x74
   15810:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   15812:	6858      	ldr	r0, [r3, #4]
{
   15814:	af00      	add	r7, sp, #0
   15816:	f3c0 0308 	ubfx	r3, r0, #0, #9
   1581a:	2600      	movs	r6, #0
   1581c:	f386 8811 	msr	BASEPRI, r6
   15820:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   15824:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
   15828:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
   1582c:	d10e      	bne.n	1584c <z_arm_fault+0x44>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   1582e:	f002 040c 	and.w	r4, r2, #12
   15832:	2c08      	cmp	r4, #8
   15834:	d119      	bne.n	1586a <z_arm_fault+0x62>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   15836:	4b81      	ldr	r3, [pc, #516]	; (15a3c <z_arm_fault+0x234>)
   15838:	61fb      	str	r3, [r7, #28]
   1583a:	2302      	movs	r3, #2
   1583c:	4880      	ldr	r0, [pc, #512]	; (15a40 <z_arm_fault+0x238>)
   1583e:	61bb      	str	r3, [r7, #24]
   15840:	f107 0218 	add.w	r2, r7, #24
   15844:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15848:	f012 f8ac 	bl	279a4 <z_log_msg_static_create.constprop.0>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   1584c:	497d      	ldr	r1, [pc, #500]	; (15a44 <z_arm_fault+0x23c>)
   1584e:	4a7e      	ldr	r2, [pc, #504]	; (15a48 <z_arm_fault+0x240>)
   15850:	487e      	ldr	r0, [pc, #504]	; (15a4c <z_arm_fault+0x244>)
   15852:	f240 433e 	movw	r3, #1086	; 0x43e
   15856:	f011 fcc1 	bl	271dc <assert_print>
   1585a:	487d      	ldr	r0, [pc, #500]	; (15a50 <z_arm_fault+0x248>)
   1585c:	f011 fcbe 	bl	271dc <assert_print>
   15860:	f240 413e 	movw	r1, #1086	; 0x43e
			__ASSERT(0,
   15864:	4878      	ldr	r0, [pc, #480]	; (15a48 <z_arm_fault+0x240>)
   15866:	f011 fcb2 	bl	271ce <assert_post_action>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1586a:	0714      	lsls	r4, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   1586c:	bf4c      	ite	mi
   1586e:	460d      	movmi	r5, r1
			*nested_exc = true;
   15870:	2601      	movpl	r6, #1
	__ASSERT(esf != NULL,
   15872:	2d00      	cmp	r5, #0
   15874:	d0ea      	beq.n	1584c <z_arm_fault+0x44>
	*recoverable = false;
   15876:	2200      	movs	r2, #0
   15878:	71fa      	strb	r2, [r7, #7]
	switch (fault) {
   1587a:	1eda      	subs	r2, r3, #3
   1587c:	2a09      	cmp	r2, #9
   1587e:	f200 80bb 	bhi.w	159f8 <z_arm_fault+0x1f0>
   15882:	e8df f002 	tbb	[pc, r2]
   15886:	ae05      	.short	0xae05
   15888:	b9b991b1 	.word	0xb9b991b1
   1588c:	b4b9b9b9 	.word	0xb4b9b9b9
	PR_FAULT_INFO("***** HARD FAULT *****");
   15890:	46e9      	mov	r9, sp
   15892:	4b70      	ldr	r3, [pc, #448]	; (15a54 <z_arm_fault+0x24c>)
   15894:	61fb      	str	r3, [r7, #28]
   15896:	f04f 0802 	mov.w	r8, #2
   1589a:	f107 0218 	add.w	r2, r7, #24
   1589e:	4868      	ldr	r0, [pc, #416]	; (15a40 <z_arm_fault+0x238>)
   158a0:	f8c7 8018 	str.w	r8, [r7, #24]
   158a4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   158a8:	f012 f87c 	bl	279a4 <z_log_msg_static_create.constprop.0>
	*recoverable = false;
   158ac:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   158ae:	4c62      	ldr	r4, [pc, #392]	; (15a38 <z_arm_fault+0x230>)
	*recoverable = false;
   158b0:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   158b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   158b4:	079a      	lsls	r2, r3, #30
   158b6:	d50b      	bpl.n	158d0 <z_arm_fault+0xc8>
		PR_EXC("  Bus fault on vector table read");
   158b8:	4b67      	ldr	r3, [pc, #412]	; (15a58 <z_arm_fault+0x250>)
		PR_EXC("  Debug event");
   158ba:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
   158be:	4860      	ldr	r0, [pc, #384]	; (15a40 <z_arm_fault+0x238>)
   158c0:	f107 0218 	add.w	r2, r7, #24
   158c4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   158c8:	f012 f86c 	bl	279a4 <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   158cc:	2400      	movs	r4, #0
   158ce:	e038      	b.n	15942 <z_arm_fault+0x13a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   158d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   158d2:	2b00      	cmp	r3, #0
   158d4:	da01      	bge.n	158da <z_arm_fault+0xd2>
		PR_EXC("  Debug event");
   158d6:	4b61      	ldr	r3, [pc, #388]	; (15a5c <z_arm_fault+0x254>)
   158d8:	e7ef      	b.n	158ba <z_arm_fault+0xb2>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   158da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   158dc:	005b      	lsls	r3, r3, #1
   158de:	d573      	bpl.n	159c8 <z_arm_fault+0x1c0>
		PR_EXC("  Fault escalation (see below)");
   158e0:	4b5f      	ldr	r3, [pc, #380]	; (15a60 <z_arm_fault+0x258>)
   158e2:	4857      	ldr	r0, [pc, #348]	; (15a40 <z_arm_fault+0x238>)
   158e4:	e9c7 8306 	strd	r8, r3, [r7, #24]
   158e8:	f107 0218 	add.w	r2, r7, #24
   158ec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   158f0:	f012 f858 	bl	279a4 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   158f4:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   158f6:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   158f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   158fc:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   158fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15902:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   15906:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   15908:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   1590c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   15910:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   15912:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15916:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   1591a:	f64d 7302 	movw	r3, #57090	; 0xdf02
   1591e:	429a      	cmp	r2, r3
   15920:	d12b      	bne.n	1597a <z_arm_fault+0x172>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   15922:	b088      	sub	sp, #32
   15924:	682b      	ldr	r3, [r5, #0]
   15926:	466a      	mov	r2, sp
   15928:	494e      	ldr	r1, [pc, #312]	; (15a64 <z_arm_fault+0x25c>)
   1592a:	4845      	ldr	r0, [pc, #276]	; (15a40 <z_arm_fault+0x238>)
   1592c:	e9c2 1305 	strd	r1, r3, [r2, #20]
   15930:	2303      	movs	r3, #3
   15932:	f842 3f10 	str.w	r3, [r2, #16]!
   15936:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1593a:	f012 f833 	bl	279a4 <z_log_msg_static_create.constprop.0>
			reason = esf->basic.r0;
   1593e:	682c      	ldr	r4, [r5, #0]
   15940:	46cd      	mov	sp, r9
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   15942:	79fb      	ldrb	r3, [r7, #7]
   15944:	b9ab      	cbnz	r3, 15972 <z_arm_fault+0x16a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   15946:	2268      	movs	r2, #104	; 0x68
   15948:	4629      	mov	r1, r5
   1594a:	f107 0008 	add.w	r0, r7, #8
   1594e:	f012 f86d 	bl	27a2c <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   15952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15954:	2e00      	cmp	r6, #0
   15956:	d06a      	beq.n	15a2e <z_arm_fault+0x226>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   15958:	f3c3 0208 	ubfx	r2, r3, #0, #9
   1595c:	b922      	cbnz	r2, 15968 <z_arm_fault+0x160>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1595e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   15962:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   15966:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
   15968:	f107 0108 	add.w	r1, r7, #8
   1596c:	4620      	mov	r0, r4
   1596e:	f7ff faab 	bl	14ec8 <z_arm_fatal_error>
}
   15972:	3774      	adds	r7, #116	; 0x74
   15974:	46bd      	mov	sp, r7
   15976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   1597a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1597c:	b2db      	uxtb	r3, r3
   1597e:	b133      	cbz	r3, 1598e <z_arm_fault+0x186>
			reason = mem_manage_fault(esf, 1, recoverable);
   15980:	1dfa      	adds	r2, r7, #7
   15982:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   15984:	4628      	mov	r0, r5
   15986:	f7ff fe69 	bl	1565c <mem_manage_fault>
   1598a:	4604      	mov	r4, r0
		break;
   1598c:	e7d9      	b.n	15942 <z_arm_fault+0x13a>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   1598e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   15990:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   15994:	d004      	beq.n	159a0 <z_arm_fault+0x198>
			reason = bus_fault(esf, 1, recoverable);
   15996:	1df9      	adds	r1, r7, #7
   15998:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   1599a:	f7ff fd33 	bl	15404 <bus_fault.constprop.0>
   1599e:	e7f4      	b.n	1598a <z_arm_fault+0x182>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   159a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   159a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   159a6:	d302      	bcc.n	159ae <z_arm_fault+0x1a6>
		reason = usage_fault(esf);
   159a8:	f7ff fdd6 	bl	15558 <usage_fault.constprop.0>
   159ac:	e7ed      	b.n	1598a <z_arm_fault+0x182>
			__ASSERT(0,
   159ae:	492e      	ldr	r1, [pc, #184]	; (15a68 <z_arm_fault+0x260>)
   159b0:	4a25      	ldr	r2, [pc, #148]	; (15a48 <z_arm_fault+0x240>)
   159b2:	4826      	ldr	r0, [pc, #152]	; (15a4c <z_arm_fault+0x244>)
   159b4:	f44f 7344 	mov.w	r3, #784	; 0x310
   159b8:	f011 fc10 	bl	271dc <assert_print>
   159bc:	482b      	ldr	r0, [pc, #172]	; (15a6c <z_arm_fault+0x264>)
   159be:	f011 fc0d 	bl	271dc <assert_print>
   159c2:	f44f 7144 	mov.w	r1, #784	; 0x310
   159c6:	e74d      	b.n	15864 <z_arm_fault+0x5c>
		__ASSERT(0,
   159c8:	4927      	ldr	r1, [pc, #156]	; (15a68 <z_arm_fault+0x260>)
   159ca:	4a1f      	ldr	r2, [pc, #124]	; (15a48 <z_arm_fault+0x240>)
   159cc:	481f      	ldr	r0, [pc, #124]	; (15a4c <z_arm_fault+0x244>)
   159ce:	f44f 7345 	mov.w	r3, #788	; 0x314
   159d2:	f011 fc03 	bl	271dc <assert_print>
   159d6:	4826      	ldr	r0, [pc, #152]	; (15a70 <z_arm_fault+0x268>)
   159d8:	f011 fc00 	bl	271dc <assert_print>
   159dc:	f44f 7145 	mov.w	r1, #788	; 0x314
   159e0:	e740      	b.n	15864 <z_arm_fault+0x5c>
		reason = mem_manage_fault(esf, 0, recoverable);
   159e2:	1dfa      	adds	r2, r7, #7
   159e4:	2100      	movs	r1, #0
   159e6:	e7cd      	b.n	15984 <z_arm_fault+0x17c>
		reason = bus_fault(esf, 0, recoverable);
   159e8:	1df9      	adds	r1, r7, #7
   159ea:	2000      	movs	r0, #0
   159ec:	e7d5      	b.n	1599a <z_arm_fault+0x192>
	PR_FAULT_INFO(
   159ee:	4b21      	ldr	r3, [pc, #132]	; (15a74 <z_arm_fault+0x26c>)
   159f0:	61fb      	str	r3, [r7, #28]
   159f2:	2302      	movs	r3, #2
   159f4:	61bb      	str	r3, [r7, #24]
   159f6:	e762      	b.n	158be <z_arm_fault+0xb6>
	PR_FAULT_INFO("***** %s %d) *****",
   159f8:	4a1f      	ldr	r2, [pc, #124]	; (15a78 <z_arm_fault+0x270>)
   159fa:	4920      	ldr	r1, [pc, #128]	; (15a7c <z_arm_fault+0x274>)
   159fc:	f410 7ff8 	tst.w	r0, #496	; 0x1f0
   15a00:	466c      	mov	r4, sp
   15a02:	b08a      	sub	sp, #40	; 0x28
   15a04:	bf18      	it	ne
   15a06:	4611      	movne	r1, r2
   15a08:	466a      	mov	r2, sp
   15a0a:	3b10      	subs	r3, #16
   15a0c:	61d3      	str	r3, [r2, #28]
   15a0e:	481c      	ldr	r0, [pc, #112]	; (15a80 <z_arm_fault+0x278>)
   15a10:	f44f 7300 	mov.w	r3, #512	; 0x200
   15a14:	8413      	strh	r3, [r2, #32]
   15a16:	4b1b      	ldr	r3, [pc, #108]	; (15a84 <z_arm_fault+0x27c>)
   15a18:	e9c2 0105 	strd	r0, r1, [r2, #20]
   15a1c:	f842 3f10 	str.w	r3, [r2, #16]!
   15a20:	4807      	ldr	r0, [pc, #28]	; (15a40 <z_arm_fault+0x238>)
   15a22:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   15a26:	f011 ffbd 	bl	279a4 <z_log_msg_static_create.constprop.0>
   15a2a:	46a5      	mov	sp, r4
}
   15a2c:	e74e      	b.n	158cc <z_arm_fault+0xc4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   15a2e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   15a32:	f023 0301 	bic.w	r3, r3, #1
   15a36:	e796      	b.n	15966 <z_arm_fault+0x15e>
   15a38:	e000ed00 	.word	0xe000ed00
   15a3c:	0002bc5e 	.word	0x0002bc5e
   15a40:	0002a070 	.word	0x0002a070
   15a44:	0002bc89 	.word	0x0002bc89
   15a48:	0002bb89 	.word	0x0002bb89
   15a4c:	0002ae37 	.word	0x0002ae37
   15a50:	0002bc9c 	.word	0x0002bc9c
   15a54:	0002bcda 	.word	0x0002bcda
   15a58:	0002bcf1 	.word	0x0002bcf1
   15a5c:	0002bd12 	.word	0x0002bd12
   15a60:	0002bd20 	.word	0x0002bd20
   15a64:	0002bd3f 	.word	0x0002bd3f
   15a68:	0002dab5 	.word	0x0002dab5
   15a6c:	0002bd5b 	.word	0x0002bd5b
   15a70:	0002bd7f 	.word	0x0002bd7f
   15a74:	0002bdaf 	.word	0x0002bdaf
   15a78:	0002bc45 	.word	0x0002bc45
   15a7c:	0002bc30 	.word	0x0002bc30
   15a80:	0002bdd3 	.word	0x0002bdd3
   15a84:	01000004 	.word	0x01000004

00015a88 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   15a88:	4a02      	ldr	r2, [pc, #8]	; (15a94 <z_arm_fault_init+0xc>)
   15a8a:	6953      	ldr	r3, [r2, #20]
   15a8c:	f043 0310 	orr.w	r3, r3, #16
   15a90:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   15a92:	4770      	bx	lr
   15a94:	e000ed00 	.word	0xe000ed00

00015a98 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   15a98:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   15a9c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   15aa0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   15aa2:	4672      	mov	r2, lr
	bl z_arm_fault
   15aa4:	f7ff feb0 	bl	15808 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   15aa8:	bd01      	pop	{r0, pc}
   15aaa:	bf00      	nop

00015aac <z_arm_interrupt_init>:
   15aac:	4804      	ldr	r0, [pc, #16]	; (15ac0 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   15aae:	2300      	movs	r3, #0
   15ab0:	2140      	movs	r1, #64	; 0x40
   15ab2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   15ab4:	3301      	adds	r3, #1
   15ab6:	2b30      	cmp	r3, #48	; 0x30
   15ab8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   15abc:	d1f9      	bne.n	15ab2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   15abe:	4770      	bx	lr
   15ac0:	e000e100 	.word	0xe000e100

00015ac4 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   15ac4:	2000      	movs	r0, #0
    msr CONTROL, r0
   15ac6:	f380 8814 	msr	CONTROL, r0
    isb
   15aca:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   15ace:	f7fd ff63 	bl	13998 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   15ad2:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   15ad4:	490d      	ldr	r1, [pc, #52]	; (15b0c <__start+0x48>)
    str r0, [r1]
   15ad6:	6008      	str	r0, [r1, #0]
    dsb
   15ad8:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   15adc:	480c      	ldr	r0, [pc, #48]	; (15b10 <__start+0x4c>)
    msr msp, r0
   15ade:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   15ae2:	f000 f82b 	bl	15b3c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   15ae6:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   15ae8:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   15aec:	4809      	ldr	r0, [pc, #36]	; (15b14 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   15aee:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   15af2:	1840      	adds	r0, r0, r1
    msr PSP, r0
   15af4:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   15af8:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   15afc:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   15afe:	4308      	orrs	r0, r1
    msr CONTROL, r0
   15b00:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   15b04:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   15b08:	f7ff fb06 	bl	15118 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   15b0c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   15b10:	20008d00 	.word	0x20008d00
    ldr r0, =z_interrupt_stacks
   15b14:	20007300 	.word	0x20007300

00015b18 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   15b18:	4907      	ldr	r1, [pc, #28]	; (15b38 <z_arm_clear_arm_mpu_config+0x20>)
   15b1a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   15b1e:	2300      	movs	r3, #0
	int num_regions =
   15b20:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   15b24:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   15b26:	4293      	cmp	r3, r2
   15b28:	db00      	blt.n	15b2c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   15b2a:	4770      	bx	lr
  MPU->RNR = rnr;
   15b2c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   15b30:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   15b34:	3301      	adds	r3, #1
   15b36:	e7f6      	b.n	15b26 <z_arm_clear_arm_mpu_config+0xe>
   15b38:	e000ed00 	.word	0xe000ed00

00015b3c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   15b3c:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   15b3e:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   15b40:	2300      	movs	r3, #0
   15b42:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   15b46:	f7ff ffe7 	bl	15b18 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   15b4a:	4b14      	ldr	r3, [pc, #80]	; (15b9c <z_arm_init_arch_hw_at_boot+0x60>)
   15b4c:	f04f 32ff 	mov.w	r2, #4294967295
   15b50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   15b54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   15b58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   15b5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   15b60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   15b64:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   15b68:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   15b6c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   15b70:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   15b74:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   15b78:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   15b7c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   15b80:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   15b84:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   15b88:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   15b8c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   15b90:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   15b92:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15b96:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   15b9a:	bd08      	pop	{r3, pc}
   15b9c:	e000e100 	.word	0xe000e100

00015ba0 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   15ba0:	4b08      	ldr	r3, [pc, #32]	; (15bc4 <z_impl_k_thread_abort+0x24>)
   15ba2:	689b      	ldr	r3, [r3, #8]
   15ba4:	4283      	cmp	r3, r0
   15ba6:	d10b      	bne.n	15bc0 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   15ba8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   15bac:	b143      	cbz	r3, 15bc0 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   15bae:	4b06      	ldr	r3, [pc, #24]	; (15bc8 <z_impl_k_thread_abort+0x28>)
   15bb0:	685a      	ldr	r2, [r3, #4]
   15bb2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   15bb6:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   15bb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   15bba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   15bbe:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   15bc0:	f00c bff0 	b.w	22ba4 <z_thread_abort>
   15bc4:	200037d0 	.word	0x200037d0
   15bc8:	e000ed00 	.word	0xe000ed00

00015bcc <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   15bcc:	4b02      	ldr	r3, [pc, #8]	; (15bd8 <z_arm_configure_static_mpu_regions+0xc>)
   15bce:	4a03      	ldr	r2, [pc, #12]	; (15bdc <z_arm_configure_static_mpu_regions+0x10>)
   15bd0:	4803      	ldr	r0, [pc, #12]	; (15be0 <z_arm_configure_static_mpu_regions+0x14>)
   15bd2:	2101      	movs	r1, #1
   15bd4:	f000 b898 	b.w	15d08 <arm_core_mpu_configure_static_mpu_regions>
   15bd8:	20040000 	.word	0x20040000
   15bdc:	20000000 	.word	0x20000000
   15be0:	0002a2a8 	.word	0x0002a2a8

00015be4 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   15be4:	b510      	push	{r4, lr}
   15be6:	4604      	mov	r4, r0
	/* Privileged stack guard */
	uintptr_t guard_start;
	size_t guard_size = MPU_GUARD_ALIGN_AND_SIZE;

#if defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
   15be8:	f7ff fb66 	bl	152b8 <z_arm_mpu_stack_guard_and_fpu_adjust>
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   15bec:	6ea2      	ldr	r2, [r4, #104]	; 0x68
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
   15bee:	4603      	mov	r3, r0
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   15bf0:	4805      	ldr	r0, [pc, #20]	; (15c08 <z_arm_configure_dynamic_mpu_regions+0x24>)
		guard_start = thread->stack_info.start - guard_size;
   15bf2:	1ad2      	subs	r2, r2, r3
	dynamic_regions[region_num].size = guard_size;
   15bf4:	e9c0 2300 	strd	r2, r3, [r0]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   15bf8:	4b04      	ldr	r3, [pc, #16]	; (15c0c <z_arm_configure_dynamic_mpu_regions+0x28>)
   15bfa:	6083      	str	r3, [r0, #8]
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
						   region_num);
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_enable();
#endif
}
   15bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   15c00:	2101      	movs	r1, #1
   15c02:	f000 b8a7 	b.w	15d54 <arm_core_mpu_configure_dynamic_mpu_regions>
   15c06:	bf00      	nop
   15c08:	200034b0 	.word	0x200034b0
   15c0c:	150b0000 	.word	0x150b0000

00015c10 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   15c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   15c14:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 15cd8 <mpu_configure_regions+0xc8>
   15c18:	469c      	mov	ip, r3
   15c1a:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
   15c1c:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
   15c1e:	2300      	movs	r3, #0
   15c20:	428b      	cmp	r3, r1
   15c22:	da1a      	bge.n	15c5a <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
   15c24:	6844      	ldr	r4, [r0, #4]
   15c26:	2c00      	cmp	r4, #0
   15c28:	d04d      	beq.n	15cc6 <mpu_configure_regions+0xb6>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   15c2a:	f1bc 0f00 	cmp.w	ip, #0
   15c2e:	d01d      	beq.n	15c6c <mpu_configure_regions+0x5c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   15c30:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   15c32:	4234      	tst	r4, r6
   15c34:	d015      	beq.n	15c62 <mpu_configure_regions+0x52>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   15c36:	466c      	mov	r4, sp
   15c38:	b088      	sub	sp, #32
   15c3a:	466a      	mov	r2, sp
   15c3c:	4923      	ldr	r1, [pc, #140]	; (15ccc <mpu_configure_regions+0xbc>)
   15c3e:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   15c42:	2303      	movs	r3, #3
   15c44:	f842 3f10 	str.w	r3, [r2, #16]!
   15c48:	4821      	ldr	r0, [pc, #132]	; (15cd0 <mpu_configure_regions+0xc0>)
   15c4a:	2300      	movs	r3, #0
   15c4c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15c50:	f7fe fa18 	bl	14084 <z_impl_z_log_msg_static_create>
			return -EINVAL;
   15c54:	f06f 0515 	mvn.w	r5, #21
   15c58:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   15c5a:	4628      	mov	r0, r5
   15c5c:	46bd      	mov	sp, r7
   15c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
   15c62:	2c1f      	cmp	r4, #31
   15c64:	d9e7      	bls.n	15c36 <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
   15c66:	6802      	ldr	r2, [r0, #0]
		&&
   15c68:	4216      	tst	r6, r2
   15c6a:	d1e4      	bne.n	15c36 <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   15c6c:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   15c6e:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   15c70:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   15c72:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
   15c76:	d914      	bls.n	15ca2 <mpu_configure_regions+0x92>
	if (size > (1UL << 31)) {
   15c78:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   15c7c:	d813      	bhi.n	15ca6 <mpu_configure_regions+0x96>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   15c7e:	3c01      	subs	r4, #1
   15c80:	fab4 f484 	clz	r4, r4
   15c84:	f1c4 041f 	rsb	r4, r4, #31
   15c88:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   15c8a:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   15c8e:	ea46 0604 	orr.w	r6, r6, r4
   15c92:	d90a      	bls.n	15caa <mpu_configure_regions+0x9a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   15c94:	466c      	mov	r4, sp
   15c96:	b088      	sub	sp, #32
   15c98:	466a      	mov	r2, sp
   15c9a:	4b0e      	ldr	r3, [pc, #56]	; (15cd4 <mpu_configure_regions+0xc4>)
   15c9c:	e9c2 3505 	strd	r3, r5, [r2, #20]
   15ca0:	e7cf      	b.n	15c42 <mpu_configure_regions+0x32>
		return REGION_32B;
   15ca2:	2408      	movs	r4, #8
   15ca4:	e7f1      	b.n	15c8a <mpu_configure_regions+0x7a>
		return REGION_4G;
   15ca6:	243e      	movs	r4, #62	; 0x3e
   15ca8:	e7ef      	b.n	15c8a <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15caa:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
   15cae:	432a      	orrs	r2, r5
   15cb0:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   15cb4:	f046 0601 	orr.w	r6, r6, #1
   15cb8:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15cbc:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
   15cc0:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   15cc2:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
   15cc6:	3301      	adds	r3, #1
   15cc8:	300c      	adds	r0, #12
   15cca:	e7a9      	b.n	15c20 <mpu_configure_regions+0x10>
   15ccc:	0002bdea 	.word	0x0002bdea
   15cd0:	0002a058 	.word	0x0002a058
   15cd4:	0002be0d 	.word	0x0002be0d
   15cd8:	e000ed00 	.word	0xe000ed00

00015cdc <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   15cdc:	4b04      	ldr	r3, [pc, #16]	; (15cf0 <arm_core_mpu_enable+0x14>)
   15cde:	2205      	movs	r2, #5
   15ce0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   15ce4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15ce8:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   15cec:	4770      	bx	lr
   15cee:	bf00      	nop
   15cf0:	e000ed00 	.word	0xe000ed00

00015cf4 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   15cf4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   15cf8:	4b02      	ldr	r3, [pc, #8]	; (15d04 <arm_core_mpu_disable+0x10>)
   15cfa:	2200      	movs	r2, #0
   15cfc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   15d00:	4770      	bx	lr
   15d02:	bf00      	nop
   15d04:	e000ed00 	.word	0xe000ed00

00015d08 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   15d08:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   15d0a:	4d0d      	ldr	r5, [pc, #52]	; (15d40 <arm_core_mpu_configure_static_mpu_regions+0x38>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   15d0c:	2301      	movs	r3, #1
   15d0e:	782a      	ldrb	r2, [r5, #0]
   15d10:	460c      	mov	r4, r1
   15d12:	f7ff ff7d 	bl	15c10 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   15d16:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   15d18:	3016      	adds	r0, #22
   15d1a:	d10f      	bne.n	15d3c <arm_core_mpu_configure_static_mpu_regions+0x34>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   15d1c:	4a09      	ldr	r2, [pc, #36]	; (15d44 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   15d1e:	490a      	ldr	r1, [pc, #40]	; (15d48 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   15d20:	480a      	ldr	r0, [pc, #40]	; (15d4c <arm_core_mpu_configure_static_mpu_regions+0x44>)
   15d22:	f44f 738d 	mov.w	r3, #282	; 0x11a
   15d26:	f011 fa59 	bl	271dc <assert_print>
   15d2a:	4809      	ldr	r0, [pc, #36]	; (15d50 <arm_core_mpu_configure_static_mpu_regions+0x48>)
   15d2c:	4621      	mov	r1, r4
   15d2e:	f011 fa55 	bl	271dc <assert_print>
   15d32:	4804      	ldr	r0, [pc, #16]	; (15d44 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   15d34:	f44f 718d 	mov.w	r1, #282	; 0x11a
   15d38:	f011 fa49 	bl	271ce <assert_post_action>
			regions_num);
	}
}
   15d3c:	bd38      	pop	{r3, r4, r5, pc}
   15d3e:	bf00      	nop
   15d40:	2000432b 	.word	0x2000432b
   15d44:	0002be33 	.word	0x0002be33
   15d48:	0002dab5 	.word	0x0002dab5
   15d4c:	0002ae37 	.word	0x0002ae37
   15d50:	0002be6a 	.word	0x0002be6a

00015d54 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
   15d54:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   15d56:	4a12      	ldr	r2, [pc, #72]	; (15da0 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
   15d58:	2300      	movs	r3, #0
   15d5a:	7812      	ldrb	r2, [r2, #0]
   15d5c:	460c      	mov	r4, r1
   15d5e:	f7ff ff57 	bl	15c10 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   15d62:	f110 0f16 	cmn.w	r0, #22
   15d66:	d004      	beq.n	15d72 <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
  MPU->RNR = rnr;
   15d68:	4b0e      	ldr	r3, [pc, #56]	; (15da4 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
   15d6a:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   15d6c:	2807      	cmp	r0, #7
   15d6e:	dd10      	ble.n	15d92 <arm_core_mpu_configure_dynamic_mpu_regions+0x3e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   15d70:	bd10      	pop	{r4, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   15d72:	4a0d      	ldr	r2, [pc, #52]	; (15da8 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
   15d74:	490d      	ldr	r1, [pc, #52]	; (15dac <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
   15d76:	480e      	ldr	r0, [pc, #56]	; (15db0 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
   15d78:	f240 1339 	movw	r3, #313	; 0x139
   15d7c:	f011 fa2e 	bl	271dc <assert_print>
   15d80:	480c      	ldr	r0, [pc, #48]	; (15db4 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
   15d82:	4621      	mov	r1, r4
   15d84:	f011 fa2a 	bl	271dc <assert_print>
   15d88:	4807      	ldr	r0, [pc, #28]	; (15da8 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
   15d8a:	f240 1139 	movw	r1, #313	; 0x139
   15d8e:	f011 fa1e 	bl	271ce <assert_post_action>
  MPU->RNR = rnr;
   15d92:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
   15d96:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   15d9a:	3001      	adds	r0, #1
   15d9c:	e7e6      	b.n	15d6c <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
   15d9e:	bf00      	nop
   15da0:	2000432b 	.word	0x2000432b
   15da4:	e000ed00 	.word	0xe000ed00
   15da8:	0002be33 	.word	0x0002be33
   15dac:	0002dab5 	.word	0x0002dab5
   15db0:	0002ae37 	.word	0x0002ae37
   15db4:	0002be96 	.word	0x0002be96

00015db8 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   15db8:	4925      	ldr	r1, [pc, #148]	; (15e50 <z_arm_mpu_init+0x98>)
{
   15dba:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   15dbc:	680c      	ldr	r4, [r1, #0]
   15dbe:	2c08      	cmp	r4, #8
   15dc0:	d910      	bls.n	15de4 <z_arm_mpu_init+0x2c>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   15dc2:	4a24      	ldr	r2, [pc, #144]	; (15e54 <z_arm_mpu_init+0x9c>)
   15dc4:	4924      	ldr	r1, [pc, #144]	; (15e58 <z_arm_mpu_init+0xa0>)
   15dc6:	4825      	ldr	r0, [pc, #148]	; (15e5c <z_arm_mpu_init+0xa4>)
   15dc8:	f240 1351 	movw	r3, #337	; 0x151
   15dcc:	f011 fa06 	bl	271dc <assert_print>
   15dd0:	4621      	mov	r1, r4
   15dd2:	4823      	ldr	r0, [pc, #140]	; (15e60 <z_arm_mpu_init+0xa8>)
   15dd4:	2208      	movs	r2, #8
   15dd6:	f011 fa01 	bl	271dc <assert_print>
   15dda:	f240 1151 	movw	r1, #337	; 0x151

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
   15dde:	481d      	ldr	r0, [pc, #116]	; (15e54 <z_arm_mpu_init+0x9c>)
   15de0:	f011 f9f5 	bl	271ce <assert_post_action>
	arm_core_mpu_disable();
   15de4:	f7ff ff86 	bl	15cf4 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   15de8:	6848      	ldr	r0, [r1, #4]
   15dea:	491e      	ldr	r1, [pc, #120]	; (15e64 <z_arm_mpu_init+0xac>)
   15dec:	2200      	movs	r2, #0
   15dee:	4294      	cmp	r4, r2
   15df0:	f100 000c 	add.w	r0, r0, #12
   15df4:	d116      	bne.n	15e24 <z_arm_mpu_init+0x6c>
	static_regions_num = mpu_config.num_regions;
   15df6:	4b1c      	ldr	r3, [pc, #112]	; (15e68 <z_arm_mpu_init+0xb0>)
   15df8:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   15dfa:	f7ff ff6f 	bl	15cdc <arm_core_mpu_enable>
	__ASSERT(
   15dfe:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   15e02:	f3c3 2307 	ubfx	r3, r3, #8, #8
   15e06:	2b08      	cmp	r3, #8
   15e08:	d01f      	beq.n	15e4a <z_arm_mpu_init+0x92>
   15e0a:	4918      	ldr	r1, [pc, #96]	; (15e6c <z_arm_mpu_init+0xb4>)
   15e0c:	4a11      	ldr	r2, [pc, #68]	; (15e54 <z_arm_mpu_init+0x9c>)
   15e0e:	4813      	ldr	r0, [pc, #76]	; (15e5c <z_arm_mpu_init+0xa4>)
   15e10:	f240 13b7 	movw	r3, #439	; 0x1b7
   15e14:	f011 f9e2 	bl	271dc <assert_print>
   15e18:	4815      	ldr	r0, [pc, #84]	; (15e70 <z_arm_mpu_init+0xb8>)
   15e1a:	f011 f9df 	bl	271dc <assert_print>
   15e1e:	f240 11b7 	movw	r1, #439	; 0x1b7
   15e22:	e7dc      	b.n	15dde <z_arm_mpu_init+0x26>
   15e24:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15e28:	f850 3c0c 	ldr.w	r3, [r0, #-12]
   15e2c:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   15e30:	4313      	orrs	r3, r2
   15e32:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   15e36:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   15e3a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   15e3e:	f043 0301 	orr.w	r3, r3, #1
   15e42:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   15e46:	3201      	adds	r2, #1
   15e48:	e7d1      	b.n	15dee <z_arm_mpu_init+0x36>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   15e4a:	2000      	movs	r0, #0
   15e4c:	bd10      	pop	{r4, pc}
   15e4e:	bf00      	nop
   15e50:	0002a2b4 	.word	0x0002a2b4
   15e54:	0002be33 	.word	0x0002be33
   15e58:	0002dab5 	.word	0x0002dab5
   15e5c:	0002ae37 	.word	0x0002ae37
   15e60:	0002bec3 	.word	0x0002bec3
   15e64:	e000ed00 	.word	0xe000ed00
   15e68:	2000432b 	.word	0x2000432b
   15e6c:	0002bef7 	.word	0x0002bef7
   15e70:	0002bf47 	.word	0x0002bf47

00015e74 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   15e74:	4b01      	ldr	r3, [pc, #4]	; (15e7c <__stdout_hook_install+0x8>)
   15e76:	6018      	str	r0, [r3, #0]
}
   15e78:	4770      	bx	lr
   15e7a:	bf00      	nop
   15e7c:	2000062c 	.word	0x2000062c

00015e80 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
   15e80:	b40c      	push	{r2, r3}
   15e82:	b510      	push	{r4, lr}
   15e84:	b086      	sub	sp, #24

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
   15e86:	b909      	cbnz	r1, 15e8c <snprintf+0xc>
		str = &dummy; /* write final NUL to dummy, can't change *s */
   15e88:	f10d 000b 	add.w	r0, sp, #11
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   15e8c:	2400      	movs	r4, #0
	}

	p.ptr = str;
	p.len = (int) len;
   15e8e:	e9cd 0104 	strd	r0, r1, [sp, #16]

	va_start(vargs, format);
   15e92:	ab09      	add	r3, sp, #36	; 0x24
   15e94:	9a08      	ldr	r2, [sp, #32]
   15e96:	9400      	str	r4, [sp, #0]
   15e98:	a904      	add	r1, sp, #16
   15e9a:	4805      	ldr	r0, [pc, #20]	; (15eb0 <snprintf+0x30>)
   15e9c:	9303      	str	r3, [sp, #12]
   15e9e:	f7fb f87b 	bl	10f98 <z_cbvprintf_impl>
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
	va_end(vargs);

	*(p.ptr) = 0;
   15ea2:	9b04      	ldr	r3, [sp, #16]
   15ea4:	701c      	strb	r4, [r3, #0]
	return r;
}
   15ea6:	b006      	add	sp, #24
   15ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15eac:	b002      	add	sp, #8
   15eae:	4770      	bx	lr
   15eb0:	00027a5b 	.word	0x00027a5b

00015eb4 <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(void)
{
   15eb4:	b510      	push	{r4, lr}
	__asm__ volatile(
   15eb6:	f04f 0340 	mov.w	r3, #64	; 0x40
   15eba:	f3ef 8011 	mrs	r0, BASEPRI
   15ebe:	f383 8812 	msr	BASEPRI_MAX, r3
   15ec2:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   15ec6:	4a11      	ldr	r2, [pc, #68]	; (15f0c <nordicsemi_nrf52_init+0x58>)
   15ec8:	2301      	movs	r3, #1
   15eca:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   15ece:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   15ed2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   15ed6:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   15eda:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
   15ede:	2c08      	cmp	r4, #8
   15ee0:	d108      	bne.n	15ef4 <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   15ee2:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
   15ee6:	2905      	cmp	r1, #5
   15ee8:	d804      	bhi.n	15ef4 <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
   15eea:	4c09      	ldr	r4, [pc, #36]	; (15f10 <nordicsemi_nrf52_init+0x5c>)
   15eec:	5c61      	ldrb	r1, [r4, r1]
   15eee:	b109      	cbz	r1, 15ef4 <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
   15ef0:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   15ef4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15ef8:	2201      	movs	r2, #1
   15efa:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
   15efe:	f380 8811 	msr	BASEPRI, r0
   15f02:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   15f06:	2000      	movs	r0, #0
   15f08:	bd10      	pop	{r4, pc}
   15f0a:	bf00      	nop
   15f0c:	4001e000 	.word	0x4001e000
   15f10:	0002bf77 	.word	0x0002bf77

00015f14 <sys_arch_reboot>:
    *p_gpregret = val;
   15f14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   15f18:	b2c0      	uxtb	r0, r0
   15f1a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   15f1e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   15f22:	4905      	ldr	r1, [pc, #20]	; (15f38 <sys_arch_reboot+0x24>)
   15f24:	4b05      	ldr	r3, [pc, #20]	; (15f3c <sys_arch_reboot+0x28>)
   15f26:	68ca      	ldr	r2, [r1, #12]
   15f28:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   15f2c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   15f2e:	60cb      	str	r3, [r1, #12]
   15f30:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   15f34:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   15f36:	e7fd      	b.n	15f34 <sys_arch_reboot+0x20>
   15f38:	e000ed00 	.word	0xe000ed00
   15f3c:	05fa0004 	.word	0x05fa0004

00015f40 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   15f40:	b120      	cbz	r0, 15f4c <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   15f42:	4b03      	ldr	r3, [pc, #12]	; (15f50 <arch_busy_wait+0x10>)
   15f44:	0180      	lsls	r0, r0, #6
   15f46:	f043 0301 	orr.w	r3, r3, #1
   15f4a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   15f4c:	4770      	bx	lr
   15f4e:	bf00      	nop
   15f50:	0002a140 	.word	0x0002a140

00015f54 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(void)
{
   15f54:	b508      	push	{r3, lr}
   15f56:	4804      	ldr	r0, [pc, #16]	; (15f68 <xoshiro128_initialize+0x14>)
   15f58:	f013 fc14 	bl	29784 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   15f5c:	2800      	cmp	r0, #0
}
   15f5e:	bf0c      	ite	eq
   15f60:	f06f 0012 	mvneq.w	r0, #18
   15f64:	2000      	movne	r0, #0
   15f66:	bd08      	pop	{r3, pc}
   15f68:	00029d38 	.word	0x00029d38

00015f6c <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   15f6c:	4b0e      	ldr	r3, [pc, #56]	; (15fa8 <bt_hex+0x3c>)
   15f6e:	2940      	cmp	r1, #64	; 0x40
{
   15f70:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   15f72:	bf28      	it	cs
   15f74:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   15f76:	4c0d      	ldr	r4, [pc, #52]	; (15fac <bt_hex+0x40>)
   15f78:	1846      	adds	r6, r0, r1
   15f7a:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   15f7c:	42b0      	cmp	r0, r6
   15f7e:	f103 0302 	add.w	r3, r3, #2
   15f82:	d104      	bne.n	15f8e <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   15f84:	2300      	movs	r3, #0
   15f86:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   15f8a:	4807      	ldr	r0, [pc, #28]	; (15fa8 <bt_hex+0x3c>)
   15f8c:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   15f8e:	7802      	ldrb	r2, [r0, #0]
   15f90:	0912      	lsrs	r2, r2, #4
   15f92:	5ca2      	ldrb	r2, [r4, r2]
   15f94:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   15f98:	f810 2b01 	ldrb.w	r2, [r0], #1
   15f9c:	f002 020f 	and.w	r2, r2, #15
   15fa0:	5ca2      	ldrb	r2, [r4, r2]
   15fa2:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   15fa6:	e7e9      	b.n	15f7c <bt_hex+0x10>
   15fa8:	2000434a 	.word	0x2000434a
   15fac:	0002bf9b 	.word	0x0002bf9b

00015fb0 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   15fb0:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   15fb2:	7803      	ldrb	r3, [r0, #0]
   15fb4:	b08b      	sub	sp, #44	; 0x2c
   15fb6:	4604      	mov	r4, r0
   15fb8:	ad07      	add	r5, sp, #28
   15fba:	2b03      	cmp	r3, #3
   15fbc:	d821      	bhi.n	16002 <bt_addr_le_str+0x52>
   15fbe:	e8df f003 	tbb	[pc, r3]
   15fc2:	1a02      	.short	0x1a02
   15fc4:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   15fc6:	4912      	ldr	r1, [pc, #72]	; (16010 <bt_addr_le_str+0x60>)
		strcpy(type, "random");
   15fc8:	4628      	mov	r0, r5
   15fca:	f011 fcee 	bl	279aa <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   15fce:	9505      	str	r5, [sp, #20]
   15fd0:	7863      	ldrb	r3, [r4, #1]
   15fd2:	9304      	str	r3, [sp, #16]
   15fd4:	78a3      	ldrb	r3, [r4, #2]
   15fd6:	9303      	str	r3, [sp, #12]
   15fd8:	78e3      	ldrb	r3, [r4, #3]
   15fda:	9302      	str	r3, [sp, #8]
   15fdc:	7923      	ldrb	r3, [r4, #4]
   15fde:	9301      	str	r3, [sp, #4]
   15fe0:	7963      	ldrb	r3, [r4, #5]
   15fe2:	9300      	str	r3, [sp, #0]
   15fe4:	79a3      	ldrb	r3, [r4, #6]
   15fe6:	4a0b      	ldr	r2, [pc, #44]	; (16014 <bt_addr_le_str+0x64>)
   15fe8:	480b      	ldr	r0, [pc, #44]	; (16018 <bt_addr_le_str+0x68>)
   15fea:	211e      	movs	r1, #30
   15fec:	f010 fecc 	bl	26d88 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   15ff0:	4809      	ldr	r0, [pc, #36]	; (16018 <bt_addr_le_str+0x68>)
   15ff2:	b00b      	add	sp, #44	; 0x2c
   15ff4:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   15ff6:	4909      	ldr	r1, [pc, #36]	; (1601c <bt_addr_le_str+0x6c>)
   15ff8:	e7e6      	b.n	15fc8 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   15ffa:	4909      	ldr	r1, [pc, #36]	; (16020 <bt_addr_le_str+0x70>)
   15ffc:	e7e4      	b.n	15fc8 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   15ffe:	4909      	ldr	r1, [pc, #36]	; (16024 <bt_addr_le_str+0x74>)
   16000:	e7e2      	b.n	15fc8 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   16002:	4a09      	ldr	r2, [pc, #36]	; (16028 <bt_addr_le_str+0x78>)
   16004:	210a      	movs	r1, #10
   16006:	4628      	mov	r0, r5
   16008:	f010 febe 	bl	26d88 <snprintk>
		break;
   1600c:	e7df      	b.n	15fce <bt_addr_le_str+0x1e>
   1600e:	bf00      	nop
   16010:	0002aa9c 	.word	0x0002aa9c
   16014:	0002aabe 	.word	0x0002aabe
   16018:	2000432c 	.word	0x2000432c
   1601c:	0002aaa3 	.word	0x0002aaa3
   16020:	0002aaaa 	.word	0x0002aaaa
   16024:	0002aab4 	.word	0x0002aab4
   16028:	0002d0ea 	.word	0x0002d0ea

0001602c <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(void)
{
   1602c:	b530      	push	{r4, r5, lr}

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
   1602e:	4d0a      	ldr	r5, [pc, #40]	; (16058 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   16030:	4b0a      	ldr	r3, [pc, #40]	; (1605c <long_wq_init+0x30>)
{
   16032:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   16034:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
   16036:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   16038:	9302      	str	r3, [sp, #8]
   1603a:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   1603c:	f00b fa9a 	bl	21574 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   16040:	ab02      	add	r3, sp, #8
   16042:	9300      	str	r3, [sp, #0]
   16044:	4628      	mov	r0, r5
   16046:	4906      	ldr	r1, [pc, #24]	; (16060 <long_wq_init+0x34>)
   16048:	230a      	movs	r3, #10
   1604a:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   1604e:	f00b faab 	bl	215a8 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   16052:	4620      	mov	r0, r4
   16054:	b005      	add	sp, #20
   16056:	bd30      	pop	{r4, r5, pc}
   16058:	20001e70 	.word	0x20001e70
   1605c:	0002bfac 	.word	0x0002bfac
   16060:	20005600 	.word	0x20005600

00016064 <bt_long_wq_schedule>:
{
   16064:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   16066:	4801      	ldr	r0, [pc, #4]	; (1606c <bt_long_wq_schedule+0x8>)
   16068:	f00b bb32 	b.w	216d0 <k_work_schedule_for_queue>
   1606c:	20001e70 	.word	0x20001e70

00016070 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   16070:	b430      	push	{r4, r5}
   16072:	4603      	mov	r3, r0
   16074:	4608      	mov	r0, r1
	switch (src->type) {
   16076:	781a      	ldrb	r2, [r3, #0]
   16078:	2a01      	cmp	r2, #1
   1607a:	d013      	beq.n	160a4 <uuid_to_uuid128+0x34>
   1607c:	2a02      	cmp	r2, #2
   1607e:	d026      	beq.n	160ce <uuid_to_uuid128+0x5e>
   16080:	b972      	cbnz	r2, 160a0 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   16082:	4a15      	ldr	r2, [pc, #84]	; (160d8 <uuid_to_uuid128+0x68>)
   16084:	f102 0410 	add.w	r4, r2, #16
   16088:	f852 5b04 	ldr.w	r5, [r2], #4
   1608c:	f841 5b04 	str.w	r5, [r1], #4
   16090:	42a2      	cmp	r2, r4
   16092:	d1f9      	bne.n	16088 <uuid_to_uuid128+0x18>
   16094:	7812      	ldrb	r2, [r2, #0]
   16096:	700a      	strb	r2, [r1, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   16098:	885b      	ldrh	r3, [r3, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   1609a:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   1609c:	0a1b      	lsrs	r3, r3, #8
   1609e:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   160a0:	bc30      	pop	{r4, r5}
   160a2:	4770      	bx	lr
		*dst = uuid128_base;
   160a4:	4a0c      	ldr	r2, [pc, #48]	; (160d8 <uuid_to_uuid128+0x68>)
   160a6:	f102 0410 	add.w	r4, r2, #16
   160aa:	f852 5b04 	ldr.w	r5, [r2], #4
   160ae:	f841 5b04 	str.w	r5, [r1], #4
   160b2:	42a2      	cmp	r2, r4
   160b4:	d1f9      	bne.n	160aa <uuid_to_uuid128+0x3a>
   160b6:	7812      	ldrb	r2, [r2, #0]
   160b8:	700a      	strb	r2, [r1, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   160ba:	685b      	ldr	r3, [r3, #4]
	dst[0] = val;
   160bc:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   160be:	f3c3 2207 	ubfx	r2, r3, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   160c2:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   160c4:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   160c6:	0a1b      	lsrs	r3, r3, #8
   160c8:	7382      	strb	r2, [r0, #14]
   160ca:	7403      	strb	r3, [r0, #16]
}
   160cc:	e7e8      	b.n	160a0 <uuid_to_uuid128+0x30>
}
   160ce:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   160d0:	2211      	movs	r2, #17
   160d2:	4619      	mov	r1, r3
   160d4:	f011 bcaa 	b.w	27a2c <memcpy>
   160d8:	0002bfb5 	.word	0x0002bfb5

000160dc <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   160dc:	2805      	cmp	r0, #5
{
   160de:	b538      	push	{r3, r4, r5, lr}
   160e0:	4605      	mov	r5, r0
   160e2:	d803      	bhi.n	160ec <bt_buf_get_rx+0x10>
   160e4:	212a      	movs	r1, #42	; 0x2a
   160e6:	40c1      	lsrs	r1, r0
   160e8:	07c9      	lsls	r1, r1, #31
   160ea:	d40c      	bmi.n	16106 <bt_buf_get_rx+0x2a>
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   160ec:	490c      	ldr	r1, [pc, #48]	; (16120 <bt_buf_get_rx+0x44>)
   160ee:	4a0d      	ldr	r2, [pc, #52]	; (16124 <bt_buf_get_rx+0x48>)
   160f0:	480d      	ldr	r0, [pc, #52]	; (16128 <bt_buf_get_rx+0x4c>)
   160f2:	233d      	movs	r3, #61	; 0x3d
   160f4:	f011 f872 	bl	271dc <assert_print>
   160f8:	480c      	ldr	r0, [pc, #48]	; (1612c <bt_buf_get_rx+0x50>)
   160fa:	f011 f86f 	bl	271dc <assert_print>
   160fe:	4809      	ldr	r0, [pc, #36]	; (16124 <bt_buf_get_rx+0x48>)
   16100:	213d      	movs	r1, #61	; 0x3d
   16102:	f011 f864 	bl	271ce <assert_post_action>
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   16106:	480a      	ldr	r0, [pc, #40]	; (16130 <bt_buf_get_rx+0x54>)
   16108:	f012 fe7e 	bl	28e08 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   1610c:	4604      	mov	r4, r0
   1610e:	b120      	cbz	r0, 1611a <bt_buf_get_rx+0x3e>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   16110:	2100      	movs	r1, #0
   16112:	300c      	adds	r0, #12
   16114:	f006 f92e 	bl	1c374 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   16118:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   1611a:	4620      	mov	r0, r4
   1611c:	bd38      	pop	{r3, r4, r5, pc}
   1611e:	bf00      	nop
   16120:	0002bff5 	.word	0x0002bff5
   16124:	0002bfc6 	.word	0x0002bfc6
   16128:	0002ae37 	.word	0x0002ae37
   1612c:	0002c03a 	.word	0x0002c03a
   16130:	20000bb0 	.word	0x20000bb0

00016134 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   16134:	b570      	push	{r4, r5, r6, lr}
   16136:	4602      	mov	r2, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16138:	480d      	ldr	r0, [pc, #52]	; (16170 <bt_buf_get_cmd_complete+0x3c>)
   1613a:	f3bf 8f5b 	dmb	ish
   1613e:	460b      	mov	r3, r1
   16140:	2100      	movs	r1, #0
   16142:	e850 4f00 	ldrex	r4, [r0]
   16146:	e840 1500 	strex	r5, r1, [r0]
   1614a:	2d00      	cmp	r5, #0
   1614c:	d1f9      	bne.n	16142 <bt_buf_get_cmd_complete+0xe>
   1614e:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	buf = (struct net_buf *)atomic_ptr_clear((atomic_ptr_t *)&bt_dev.sent_cmd);
	if (buf) {
   16152:	b924      	cbnz	r4, 1615e <bt_buf_get_cmd_complete+0x2a>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   16154:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   16158:	2001      	movs	r0, #1
   1615a:	f7ff bfbf 	b.w	160dc <bt_buf_get_rx>
   1615e:	2301      	movs	r3, #1
   16160:	f104 000c 	add.w	r0, r4, #12
   16164:	7623      	strb	r3, [r4, #24]
		buf->len = 0U;
   16166:	8221      	strh	r1, [r4, #16]
   16168:	f006 f904 	bl	1c374 <net_buf_simple_reserve>
}
   1616c:	4620      	mov	r0, r4
   1616e:	bd70      	pop	{r4, r5, r6, pc}
   16170:	200004c0 	.word	0x200004c0

00016174 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   16174:	b570      	push	{r4, r5, r6, lr}
   16176:	4604      	mov	r4, r0
	switch (evt) {
   16178:	2c0f      	cmp	r4, #15
{
   1617a:	460d      	mov	r5, r1
   1617c:	4610      	mov	r0, r2
   1617e:	4619      	mov	r1, r3
	switch (evt) {
   16180:	d805      	bhi.n	1618e <bt_buf_get_evt+0x1a>
   16182:	2c0d      	cmp	r4, #13
   16184:	d90d      	bls.n	161a2 <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   16186:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   1618a:	f7ff bfd3 	b.w	16134 <bt_buf_get_cmd_complete>
	switch (evt) {
   1618e:	2c13      	cmp	r4, #19
   16190:	d107      	bne.n	161a2 <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   16192:	480c      	ldr	r0, [pc, #48]	; (161c4 <bt_buf_get_evt+0x50>)
   16194:	f012 fe38 	bl	28e08 <net_buf_alloc_fixed>
			if (buf) {
   16198:	4604      	mov	r4, r0
   1619a:	b938      	cbnz	r0, 161ac <bt_buf_get_evt+0x38>
{
   1619c:	2400      	movs	r4, #0
}
   1619e:	4620      	mov	r0, r4
   161a0:	bd70      	pop	{r4, r5, r6, pc}
   161a2:	4602      	mov	r2, r0
   161a4:	460b      	mov	r3, r1
		if (discardable) {
   161a6:	b145      	cbz	r5, 161ba <bt_buf_get_evt+0x46>
   161a8:	4807      	ldr	r0, [pc, #28]	; (161c8 <bt_buf_get_evt+0x54>)
   161aa:	e7f3      	b.n	16194 <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   161ac:	2100      	movs	r1, #0
   161ae:	300c      	adds	r0, #12
   161b0:	f006 f8e0 	bl	1c374 <net_buf_simple_reserve>
   161b4:	2301      	movs	r3, #1
   161b6:	7623      	strb	r3, [r4, #24]
}
   161b8:	e7f1      	b.n	1619e <bt_buf_get_evt+0x2a>
}
   161ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   161be:	2001      	movs	r0, #1
   161c0:	f7ff bf8c 	b.w	160dc <bt_buf_get_rx>
   161c4:	20000be4 	.word	0x20000be4
   161c8:	20000b14 	.word	0x20000b14

000161cc <ver_str>:
	sys_put_le64(mask, ev->events);
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static const char *ver_str(uint8_t ver)
{
   161cc:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
   161ce:	4d0c      	ldr	r5, [pc, #48]	; (16200 <ver_str+0x34>)
{
   161d0:	4606      	mov	r6, r0
	const char * const str[] = {
   161d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   161d4:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
   161d6:	466c      	mov	r4, sp
   161d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   161da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   161dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   161de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   161e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   161e2:	e895 0003 	ldmia.w	r5, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2", "5.3", "5.4"
	};

	if (ver < ARRAY_SIZE(str)) {
   161e6:	2e0d      	cmp	r6, #13
	const char * const str[] = {
   161e8:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
   161ec:	bf9b      	ittet	ls
   161ee:	ab0e      	addls	r3, sp, #56	; 0x38
   161f0:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
   161f4:	4803      	ldrhi	r0, [pc, #12]	; (16204 <ver_str+0x38>)
		return str[ver];
   161f6:	f856 0c38 	ldrls.w	r0, [r6, #-56]
}
   161fa:	b00e      	add	sp, #56	; 0x38
   161fc:	bd70      	pop	{r4, r5, r6, pc}
   161fe:	bf00      	nop
   16200:	0002a0f0 	.word	0x0002a0f0
   16204:	0002c062 	.word	0x0002c062

00016208 <hci_disconn_complete_prio>:
{
   16208:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1620a:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1620c:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   16210:	781b      	ldrb	r3, [r3, #0]
   16212:	b963      	cbnz	r3, 1622e <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
   16214:	4620      	mov	r0, r4
   16216:	f002 fe2b 	bl	18e70 <bt_conn_lookup_handle>
	if (!conn) {
   1621a:	4605      	mov	r5, r0
   1621c:	b940      	cbnz	r0, 16230 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   1621e:	4b08      	ldr	r3, [pc, #32]	; (16240 <hci_disconn_complete_prio+0x38>)
   16220:	881a      	ldrh	r2, [r3, #0]
   16222:	b922      	cbnz	r2, 1622e <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   16224:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   16228:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   1622c:	8018      	strh	r0, [r3, #0]
}
   1622e:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   16230:	2101      	movs	r1, #1
   16232:	f002 fe25 	bl	18e80 <bt_conn_set_state>
	bt_conn_unref(conn);
   16236:	4628      	mov	r0, r5
}
   16238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1623c:	f002 bde0 	b.w	18e00 <bt_conn_unref>
   16240:	200042f8 	.word	0x200042f8

00016244 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   16244:	b510      	push	{r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   16246:	4c08      	ldr	r4, [pc, #32]	; (16268 <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   16248:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   1624a:	2205      	movs	r2, #5
   1624c:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
   16250:	f003 f896 	bl	19380 <bt_conn_lookup_state_le>
		if (!conn) {
   16254:	b938      	cbnz	r0, 16266 <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   16256:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
   1625a:	4904      	ldr	r1, [pc, #16]	; (1626c <find_pending_connect.part.0+0x28>)
}
   1625c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   16260:	2204      	movs	r2, #4
   16262:	f003 b88d 	b.w	19380 <bt_conn_lookup_state_le>
}
   16266:	bd10      	pop	{r4, pc}
   16268:	20000388 	.word	0x20000388
   1626c:	0002bf81 	.word	0x0002bf81

00016270 <hci_data_buf_overflow>:
{
   16270:	b580      	push	{r7, lr}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   16272:	68c3      	ldr	r3, [r0, #12]
{
   16274:	af00      	add	r7, sp, #0
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   16276:	b088      	sub	sp, #32
   16278:	781b      	ldrb	r3, [r3, #0]
   1627a:	466a      	mov	r2, sp
   1627c:	4906      	ldr	r1, [pc, #24]	; (16298 <hci_data_buf_overflow+0x28>)
   1627e:	4807      	ldr	r0, [pc, #28]	; (1629c <hci_data_buf_overflow+0x2c>)
   16280:	e9c2 1305 	strd	r1, r3, [r2, #20]
   16284:	2303      	movs	r3, #3
   16286:	f842 3f10 	str.w	r3, [r2, #16]!
   1628a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1628e:	f011 fc8a 	bl	27ba6 <z_log_msg_static_create.constprop.0>
}
   16292:	46bd      	mov	sp, r7
   16294:	bd80      	pop	{r7, pc}
   16296:	bf00      	nop
   16298:	0002c06a 	.word	0x0002c06a
   1629c:	00029fd8 	.word	0x00029fd8

000162a0 <le_conn_param_neg_reply.part.0>:
static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
   162a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("Unable to allocate buffer");
   162a2:	4b06      	ldr	r3, [pc, #24]	; (162bc <le_conn_param_neg_reply.part.0+0x1c>)
   162a4:	9305      	str	r3, [sp, #20]
   162a6:	4806      	ldr	r0, [pc, #24]	; (162c0 <le_conn_param_neg_reply.part.0+0x20>)
   162a8:	2302      	movs	r3, #2
   162aa:	aa04      	add	r2, sp, #16
   162ac:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   162b0:	9304      	str	r3, [sp, #16]
   162b2:	f011 fc78 	bl	27ba6 <z_log_msg_static_create.constprop.0>
}
   162b6:	b007      	add	sp, #28
   162b8:	f85d fb04 	ldr.w	pc, [sp], #4
   162bc:	0002c092 	.word	0x0002c092
   162c0:	00029fd8 	.word	0x00029fd8

000162c4 <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
   162c4:	b598      	push	{r3, r4, r7, lr}
   162c6:	4601      	mov	r1, r0
   162c8:	af00      	add	r7, sp, #0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   162ca:	480d      	ldr	r0, [pc, #52]	; (16300 <rx_queue_put+0x3c>)
   162cc:	f005 fea0 	bl	1c010 <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   162d0:	490c      	ldr	r1, [pc, #48]	; (16304 <rx_queue_put+0x40>)
   162d2:	480d      	ldr	r0, [pc, #52]	; (16308 <rx_queue_put+0x44>)
   162d4:	f013 fb4c 	bl	29970 <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
   162d8:	2800      	cmp	r0, #0
   162da:	da0e      	bge.n	162fa <rx_queue_put+0x36>
		LOG_ERR("Could not submit rx_work: %d", err);
   162dc:	466c      	mov	r4, sp
   162de:	b088      	sub	sp, #32
   162e0:	466a      	mov	r2, sp
   162e2:	4b0a      	ldr	r3, [pc, #40]	; (1630c <rx_queue_put+0x48>)
   162e4:	e9c2 3005 	strd	r3, r0, [r2, #20]
   162e8:	2303      	movs	r3, #3
   162ea:	f842 3f10 	str.w	r3, [r2, #16]!
   162ee:	4808      	ldr	r0, [pc, #32]	; (16310 <rx_queue_put+0x4c>)
   162f0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   162f4:	f011 fc57 	bl	27ba6 <z_log_msg_static_create.constprop.0>
   162f8:	46a5      	mov	sp, r4
	}
}
   162fa:	46bd      	mov	sp, r7
   162fc:	bd98      	pop	{r3, r4, r7, pc}
   162fe:	bf00      	nop
   16300:	200004c4 	.word	0x200004c4
   16304:	2000066c 	.word	0x2000066c
   16308:	20002020 	.word	0x20002020
   1630c:	0002c0ac 	.word	0x0002c0ac
   16310:	00029fd8 	.word	0x00029fd8

00016314 <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   16314:	b5b0      	push	{r4, r5, r7, lr}
   16316:	460b      	mov	r3, r1
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   16318:	8a0d      	ldrh	r5, [r1, #16]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   1631a:	af00      	add	r7, sp, #0
   1631c:	4604      	mov	r4, r0
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   1631e:	4629      	mov	r1, r5
   16320:	68d8      	ldr	r0, [r3, #12]
   16322:	f7ff fe23 	bl	15f6c <bt_hex>
   16326:	b08a      	sub	sp, #40	; 0x28
   16328:	466a      	mov	r2, sp
   1632a:	4b09      	ldr	r3, [pc, #36]	; (16350 <handle_event.part.0+0x3c>)
   1632c:	e9c2 3405 	strd	r3, r4, [r2, #20]
   16330:	f240 4302 	movw	r3, #1026	; 0x402
   16334:	8493      	strh	r3, [r2, #36]	; 0x24
   16336:	4b07      	ldr	r3, [pc, #28]	; (16354 <handle_event.part.0+0x40>)
   16338:	e9c2 5007 	strd	r5, r0, [r2, #28]
   1633c:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
   16340:	f842 3f10 	str.w	r3, [r2, #16]!
   16344:	4804      	ldr	r0, [pc, #16]	; (16358 <handle_event.part.0+0x44>)
   16346:	f011 fc2e 	bl	27ba6 <z_log_msg_static_create.constprop.0>
}
   1634a:	46bd      	mov	sp, r7
   1634c:	bdb0      	pop	{r4, r5, r7, pc}
   1634e:	bf00      	nop
   16350:	0002c0c9 	.word	0x0002c0c9
   16354:	01000005 	.word	0x01000005
   16358:	00029fd8 	.word	0x00029fd8

0001635c <hci_hardware_error>:
{
   1635c:	b580      	push	{r7, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   1635e:	2101      	movs	r1, #1
   16360:	af00      	add	r7, sp, #0
   16362:	300c      	adds	r0, #12
   16364:	f006 f866 	bl	1c434 <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   16368:	b088      	sub	sp, #32
   1636a:	7803      	ldrb	r3, [r0, #0]
   1636c:	466a      	mov	r2, sp
   1636e:	4906      	ldr	r1, [pc, #24]	; (16388 <hci_hardware_error+0x2c>)
   16370:	4806      	ldr	r0, [pc, #24]	; (1638c <hci_hardware_error+0x30>)
   16372:	e9c2 1305 	strd	r1, r3, [r2, #20]
   16376:	2303      	movs	r3, #3
   16378:	f842 3f10 	str.w	r3, [r2, #16]!
   1637c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16380:	f011 fc11 	bl	27ba6 <z_log_msg_static_create.constprop.0>
}
   16384:	46bd      	mov	sp, r7
   16386:	bd80      	pop	{r7, pc}
   16388:	0002c0eb 	.word	0x0002c0eb
   1638c:	00029fd8 	.word	0x00029fd8

00016390 <le_data_len_change>:
{
   16390:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16392:	68c3      	ldr	r3, [r0, #12]
   16394:	881c      	ldrh	r4, [r3, #0]
{
   16396:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   16398:	4620      	mov	r0, r4
   1639a:	f002 fd69 	bl	18e70 <bt_conn_lookup_handle>
	if (!conn) {
   1639e:	b980      	cbnz	r0, 163c2 <le_data_len_change+0x32>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   163a0:	466d      	mov	r5, sp
   163a2:	b088      	sub	sp, #32
   163a4:	466a      	mov	r2, sp
   163a6:	4b08      	ldr	r3, [pc, #32]	; (163c8 <le_data_len_change+0x38>)
   163a8:	4808      	ldr	r0, [pc, #32]	; (163cc <le_data_len_change+0x3c>)
   163aa:	e9c2 3405 	strd	r3, r4, [r2, #20]
   163ae:	2303      	movs	r3, #3
   163b0:	f842 3f10 	str.w	r3, [r2, #16]!
   163b4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   163b8:	f011 fbf5 	bl	27ba6 <z_log_msg_static_create.constprop.0>
   163bc:	46ad      	mov	sp, r5
}
   163be:	46bd      	mov	sp, r7
   163c0:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   163c2:	f002 fd1d 	bl	18e00 <bt_conn_unref>
   163c6:	e7fa      	b.n	163be <le_data_len_change+0x2e>
   163c8:	0002c10d 	.word	0x0002c10d
   163cc:	00029fd8 	.word	0x00029fd8

000163d0 <le_phy_update_complete>:
{
   163d0:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   163d2:	68c3      	ldr	r3, [r0, #12]
   163d4:	f8b3 4001 	ldrh.w	r4, [r3, #1]
{
   163d8:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   163da:	4620      	mov	r0, r4
   163dc:	f002 fd48 	bl	18e70 <bt_conn_lookup_handle>
	if (!conn) {
   163e0:	b980      	cbnz	r0, 16404 <le_phy_update_complete+0x34>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   163e2:	466d      	mov	r5, sp
   163e4:	b088      	sub	sp, #32
   163e6:	466a      	mov	r2, sp
   163e8:	4b08      	ldr	r3, [pc, #32]	; (1640c <le_phy_update_complete+0x3c>)
   163ea:	4809      	ldr	r0, [pc, #36]	; (16410 <le_phy_update_complete+0x40>)
   163ec:	e9c2 3405 	strd	r3, r4, [r2, #20]
   163f0:	2303      	movs	r3, #3
   163f2:	f842 3f10 	str.w	r3, [r2, #16]!
   163f6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   163fa:	f011 fbd4 	bl	27ba6 <z_log_msg_static_create.constprop.0>
   163fe:	46ad      	mov	sp, r5
}
   16400:	46bd      	mov	sp, r7
   16402:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   16404:	f002 fcfc 	bl	18e00 <bt_conn_unref>
   16408:	e7fa      	b.n	16400 <le_phy_update_complete+0x30>
   1640a:	bf00      	nop
   1640c:	0002c10d 	.word	0x0002c10d
   16410:	00029fd8 	.word	0x00029fd8

00016414 <hci_disconn_complete>:
{
   16414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   16418:	68c5      	ldr	r5, [r0, #12]
	if (evt->status) {
   1641a:	782e      	ldrb	r6, [r5, #0]
{
   1641c:	af00      	add	r7, sp, #0
	if (evt->status) {
   1641e:	b9ae      	cbnz	r6, 1644c <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16420:	f8b5 8001 	ldrh.w	r8, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   16424:	4640      	mov	r0, r8
   16426:	f002 fd23 	bl	18e70 <bt_conn_lookup_handle>
	if (!conn) {
   1642a:	4604      	mov	r4, r0
   1642c:	b988      	cbnz	r0, 16452 <hci_disconn_complete+0x3e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   1642e:	466c      	mov	r4, sp
   16430:	b088      	sub	sp, #32
   16432:	466a      	mov	r2, sp
   16434:	4b0b      	ldr	r3, [pc, #44]	; (16464 <hci_disconn_complete+0x50>)
   16436:	480c      	ldr	r0, [pc, #48]	; (16468 <hci_disconn_complete+0x54>)
   16438:	e9c2 3805 	strd	r3, r8, [r2, #20]
   1643c:	2303      	movs	r3, #3
   1643e:	f842 3f10 	str.w	r3, [r2, #16]!
   16442:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16446:	f011 fbae 	bl	27ba6 <z_log_msg_static_create.constprop.0>
   1644a:	46a5      	mov	sp, r4
}
   1644c:	46bd      	mov	sp, r7
   1644e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
   16452:	78eb      	ldrb	r3, [r5, #3]
   16454:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16456:	4631      	mov	r1, r6
   16458:	f002 fd12 	bl	18e80 <bt_conn_set_state>
		bt_conn_unref(conn);
   1645c:	4620      	mov	r0, r4
	bt_conn_unref(conn);
   1645e:	f002 fccf 	bl	18e00 <bt_conn_unref>
   16462:	e7f3      	b.n	1644c <hci_disconn_complete+0x38>
   16464:	0002c131 	.word	0x0002c131
   16468:	00029fd8 	.word	0x00029fd8

0001646c <handle_event>:
{
   1646c:	b5b0      	push	{r4, r5, r7, lr}
   1646e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   16472:	af00      	add	r7, sp, #0
   16474:	4604      	mov	r4, r0
	for (i = 0; i < num_handlers; i++) {
   16476:	4293      	cmp	r3, r2
   16478:	d103      	bne.n	16482 <handle_event+0x16>
	if (err == -EOPNOTSUPP) {
   1647a:	4620      	mov	r0, r4
   1647c:	f7ff ff4a 	bl	16314 <handle_event.part.0>
}
   16480:	e018      	b.n	164b4 <handle_event+0x48>
		if (handler->event != event) {
   16482:	4610      	mov	r0, r2
   16484:	f810 5b08 	ldrb.w	r5, [r0], #8
   16488:	42a5      	cmp	r5, r4
   1648a:	d119      	bne.n	164c0 <handle_event+0x54>
		if (buf->len < handler->min_len) {
   1648c:	8a0b      	ldrh	r3, [r1, #16]
   1648e:	7850      	ldrb	r0, [r2, #1]
   16490:	4298      	cmp	r0, r3
   16492:	d911      	bls.n	164b8 <handle_event+0x4c>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   16494:	466d      	mov	r5, sp
   16496:	b088      	sub	sp, #32
   16498:	466a      	mov	r2, sp
   1649a:	490a      	ldr	r1, [pc, #40]	; (164c4 <handle_event+0x58>)
   1649c:	61d4      	str	r4, [r2, #28]
   1649e:	e9c2 1305 	strd	r1, r3, [r2, #20]
   164a2:	2304      	movs	r3, #4
   164a4:	f842 3f10 	str.w	r3, [r2, #16]!
   164a8:	4807      	ldr	r0, [pc, #28]	; (164c8 <handle_event+0x5c>)
   164aa:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   164ae:	f011 fb7a 	bl	27ba6 <z_log_msg_static_create.constprop.0>
   164b2:	46ad      	mov	sp, r5
}
   164b4:	46bd      	mov	sp, r7
   164b6:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
   164b8:	6853      	ldr	r3, [r2, #4]
   164ba:	4608      	mov	r0, r1
   164bc:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
   164be:	e7f9      	b.n	164b4 <handle_event+0x48>
   164c0:	4602      	mov	r2, r0
   164c2:	e7d8      	b.n	16476 <handle_event+0xa>
   164c4:	0002c157 	.word	0x0002c157
   164c8:	00029fd8 	.word	0x00029fd8

000164cc <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   164cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   164ce:	4855      	ldr	r0, [pc, #340]	; (16624 <rx_work_handler+0x158>)
{
   164d0:	af00      	add	r7, sp, #0
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   164d2:	f005 fe07 	bl	1c0e4 <net_buf_slist_get>
	if (!buf) {
   164d6:	4604      	mov	r4, r0
   164d8:	2800      	cmp	r0, #0
   164da:	d06a      	beq.n	165b2 <rx_work_handler+0xe6>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   164dc:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   164de:	2b01      	cmp	r3, #1
   164e0:	d069      	beq.n	165b6 <rx_work_handler+0xea>
   164e2:	2b03      	cmp	r3, #3
   164e4:	f040 8099 	bne.w	1661a <rx_work_handler+0x14e>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   164e8:	8a03      	ldrh	r3, [r0, #16]
   164ea:	2b03      	cmp	r3, #3
   164ec:	d80c      	bhi.n	16508 <rx_work_handler+0x3c>
   164ee:	4a4e      	ldr	r2, [pc, #312]	; (16628 <rx_work_handler+0x15c>)
   164f0:	494e      	ldr	r1, [pc, #312]	; (1662c <rx_work_handler+0x160>)
   164f2:	484f      	ldr	r0, [pc, #316]	; (16630 <rx_work_handler+0x164>)
   164f4:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
   164f8:	f010 fe70 	bl	271dc <assert_print>
   164fc:	4040      	eors	r0, r0
   164fe:	f380 8811 	msr	BASEPRI, r0
   16502:	f04f 0003 	mov.w	r0, #3
   16506:	df02      	svc	2
   16508:	2104      	movs	r1, #4
   1650a:	f104 000c 	add.w	r0, r4, #12
   1650e:	f005 ff91 	bl	1c434 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   16512:	8a21      	ldrh	r1, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
   16514:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   16516:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   16518:	22ff      	movs	r2, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
   1651a:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   1651e:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
   16520:	8360      	strh	r0, [r4, #26]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   16522:	7662      	strb	r2, [r4, #25]
	if (buf->len != len) {
   16524:	d010      	beq.n	16548 <rx_work_handler+0x7c>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   16526:	466d      	mov	r5, sp
   16528:	b088      	sub	sp, #32
   1652a:	466a      	mov	r2, sp
   1652c:	4841      	ldr	r0, [pc, #260]	; (16634 <rx_work_handler+0x168>)
   1652e:	61d3      	str	r3, [r2, #28]
   16530:	2304      	movs	r3, #4
   16532:	e9c2 0105 	strd	r0, r1, [r2, #20]
   16536:	f842 3f10 	str.w	r3, [r2, #16]!
   1653a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   1653e:	483e      	ldr	r0, [pc, #248]	; (16638 <rx_work_handler+0x16c>)
   16540:	f011 fb31 	bl	27ba6 <z_log_msg_static_create.constprop.0>
   16544:	46ad      	mov	sp, r5
   16546:	e064      	b.n	16612 <rx_work_handler+0x146>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   16548:	f002 fc92 	bl	18e70 <bt_conn_lookup_handle>
	if (!conn) {
   1654c:	4605      	mov	r5, r0
   1654e:	b960      	cbnz	r0, 1656a <rx_work_handler+0x9e>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   16550:	466d      	mov	r5, sp
   16552:	b088      	sub	sp, #32
   16554:	8b63      	ldrh	r3, [r4, #26]
   16556:	466a      	mov	r2, sp
   16558:	4938      	ldr	r1, [pc, #224]	; (1663c <rx_work_handler+0x170>)
	switch (bt_buf_get_type(buf)) {
   1655a:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   1655e:	2303      	movs	r3, #3
   16560:	f842 3f10 	str.w	r3, [r2, #16]!
   16564:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16568:	e7e9      	b.n	1653e <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
   1656a:	f002 fd8b 	bl	19084 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   1656e:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   16570:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   16572:	4621      	mov	r1, r4
   16574:	4628      	mov	r0, r5
   16576:	f002 fab5 	bl	18ae4 <bt_conn_recv>
	bt_conn_unref(conn);
   1657a:	4628      	mov	r0, r5
   1657c:	f002 fc40 	bl	18e00 <bt_conn_unref>
	return list->head;
   16580:	4b2f      	ldr	r3, [pc, #188]	; (16640 <rx_work_handler+0x174>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   16582:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   16586:	b1a3      	cbz	r3, 165b2 <rx_work_handler+0xe6>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   16588:	492e      	ldr	r1, [pc, #184]	; (16644 <rx_work_handler+0x178>)
   1658a:	482f      	ldr	r0, [pc, #188]	; (16648 <rx_work_handler+0x17c>)
   1658c:	f013 f9f0 	bl	29970 <k_work_submit_to_queue>
#endif
		if (err < 0) {
   16590:	2800      	cmp	r0, #0
   16592:	da0e      	bge.n	165b2 <rx_work_handler+0xe6>
			LOG_ERR("Could not submit rx_work: %d", err);
   16594:	466c      	mov	r4, sp
   16596:	b088      	sub	sp, #32
   16598:	466a      	mov	r2, sp
   1659a:	4b2c      	ldr	r3, [pc, #176]	; (1664c <rx_work_handler+0x180>)
   1659c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   165a0:	2303      	movs	r3, #3
   165a2:	f842 3f10 	str.w	r3, [r2, #16]!
   165a6:	4824      	ldr	r0, [pc, #144]	; (16638 <rx_work_handler+0x16c>)
   165a8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   165ac:	f011 fafb 	bl	27ba6 <z_log_msg_static_create.constprop.0>
   165b0:	46a5      	mov	sp, r4
		}
	}
}
   165b2:	46bd      	mov	sp, r7
   165b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   165b6:	8a03      	ldrh	r3, [r0, #16]
   165b8:	2b01      	cmp	r3, #1
   165ba:	d80c      	bhi.n	165d6 <rx_work_handler+0x10a>
   165bc:	4a1a      	ldr	r2, [pc, #104]	; (16628 <rx_work_handler+0x15c>)
   165be:	491b      	ldr	r1, [pc, #108]	; (1662c <rx_work_handler+0x160>)
   165c0:	481b      	ldr	r0, [pc, #108]	; (16630 <rx_work_handler+0x164>)
   165c2:	f640 2347 	movw	r3, #2631	; 0xa47
   165c6:	f010 fe09 	bl	271dc <assert_print>
   165ca:	4040      	eors	r0, r0
   165cc:	f380 8811 	msr	BASEPRI, r0
   165d0:	f04f 0003 	mov.w	r0, #3
   165d4:	df02      	svc	2
   165d6:	2102      	movs	r1, #2
   165d8:	f104 000c 	add.w	r0, r4, #12
   165dc:	f005 ff2a 	bl	1c434 <net_buf_simple_pull_mem>
   165e0:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   165e2:	7800      	ldrb	r0, [r0, #0]
   165e4:	f011 fabd 	bl	27b62 <bt_hci_evt_get_flags>
   165e8:	0783      	lsls	r3, r0, #30
   165ea:	d40c      	bmi.n	16606 <rx_work_handler+0x13a>
   165ec:	4a0e      	ldr	r2, [pc, #56]	; (16628 <rx_work_handler+0x15c>)
   165ee:	4918      	ldr	r1, [pc, #96]	; (16650 <rx_work_handler+0x184>)
   165f0:	480f      	ldr	r0, [pc, #60]	; (16630 <rx_work_handler+0x164>)
   165f2:	f640 234b 	movw	r3, #2635	; 0xa4b
   165f6:	f010 fdf1 	bl	271dc <assert_print>
   165fa:	4040      	eors	r0, r0
   165fc:	f380 8811 	msr	BASEPRI, r0
   16600:	f04f 0003 	mov.w	r0, #3
   16604:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   16606:	4a13      	ldr	r2, [pc, #76]	; (16654 <rx_work_handler+0x188>)
   16608:	7828      	ldrb	r0, [r5, #0]
   1660a:	2304      	movs	r3, #4
   1660c:	4621      	mov	r1, r4
   1660e:	f7ff ff2d 	bl	1646c <handle_event>
		net_buf_unref(buf);
   16612:	4620      	mov	r0, r4
   16614:	f005 fde8 	bl	1c1e8 <net_buf_unref>
		break;
   16618:	e7b2      	b.n	16580 <rx_work_handler+0xb4>
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   1661a:	466d      	mov	r5, sp
   1661c:	b088      	sub	sp, #32
   1661e:	466a      	mov	r2, sp
   16620:	490d      	ldr	r1, [pc, #52]	; (16658 <rx_work_handler+0x18c>)
   16622:	e79a      	b.n	1655a <rx_work_handler+0x8e>
   16624:	200004c4 	.word	0x200004c4
   16628:	0002c179 	.word	0x0002c179
   1662c:	0002c1ad 	.word	0x0002c1ad
   16630:	0002ae37 	.word	0x0002ae37
   16634:	0002c1c6 	.word	0x0002c1c6
   16638:	00029fd8 	.word	0x00029fd8
   1663c:	0002c1ea 	.word	0x0002c1ea
   16640:	20000388 	.word	0x20000388
   16644:	2000066c 	.word	0x2000066c
   16648:	20002020 	.word	0x20002020
   1664c:	0002c0ac 	.word	0x0002c0ac
   16650:	0002c20c 	.word	0x0002c20c
   16654:	0002a35c 	.word	0x0002a35c
   16658:	0002c23a 	.word	0x0002c23a

0001665c <hci_le_meta_event>:
{
   1665c:	b510      	push	{r4, lr}
   1665e:	2101      	movs	r1, #1
   16660:	4604      	mov	r4, r0
   16662:	300c      	adds	r0, #12
   16664:	f005 fee6 	bl	1c434 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   16668:	4621      	mov	r1, r4
   1666a:	4a03      	ldr	r2, [pc, #12]	; (16678 <hci_le_meta_event+0x1c>)
   1666c:	7800      	ldrb	r0, [r0, #0]
}
   1666e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   16672:	2307      	movs	r3, #7
   16674:	f7ff befa 	b.w	1646c <handle_event>
   16678:	0002a37c 	.word	0x0002a37c

0001667c <le_remote_feat_complete>:
{
   1667c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1667e:	68c5      	ldr	r5, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16680:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   16684:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   16686:	4630      	mov	r0, r6
   16688:	f002 fbf2 	bl	18e70 <bt_conn_lookup_handle>
	if (!conn) {
   1668c:	4604      	mov	r4, r0
   1668e:	b980      	cbnz	r0, 166b2 <le_remote_feat_complete+0x36>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   16690:	466c      	mov	r4, sp
   16692:	b088      	sub	sp, #32
   16694:	466a      	mov	r2, sp
   16696:	4b0f      	ldr	r3, [pc, #60]	; (166d4 <le_remote_feat_complete+0x58>)
   16698:	480f      	ldr	r0, [pc, #60]	; (166d8 <le_remote_feat_complete+0x5c>)
   1669a:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1669e:	2303      	movs	r3, #3
   166a0:	f842 3f10 	str.w	r3, [r2, #16]!
   166a4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   166a8:	f011 fa7d 	bl	27ba6 <z_log_msg_static_create.constprop.0>
   166ac:	46a5      	mov	sp, r4
}
   166ae:	46bd      	mov	sp, r7
   166b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
   166b2:	782b      	ldrb	r3, [r5, #0]
   166b4:	b923      	cbnz	r3, 166c0 <le_remote_feat_complete+0x44>
		memcpy(conn->le.features, evt->features,
   166b6:	2208      	movs	r2, #8
   166b8:	1ce9      	adds	r1, r5, #3
   166ba:	30b5      	adds	r0, #181	; 0xb5
   166bc:	f011 f9b6 	bl	27a2c <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   166c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   166c4:	1d20      	adds	r0, r4, #4
   166c6:	f011 fa5f 	bl	27b88 <atomic_or>
	bt_conn_unref(conn);
   166ca:	4620      	mov	r0, r4
   166cc:	f002 fb98 	bl	18e00 <bt_conn_unref>
   166d0:	e7ed      	b.n	166ae <le_remote_feat_complete+0x32>
   166d2:	bf00      	nop
   166d4:	0002c10d 	.word	0x0002c10d
   166d8:	00029fd8 	.word	0x00029fd8

000166dc <hci_cmd_done>:
{
   166dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   166e0:	4606      	mov	r6, r0
   166e2:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   166e4:	7a90      	ldrb	r0, [r2, #10]
   166e6:	4d43      	ldr	r5, [pc, #268]	; (167f4 <hci_cmd_done+0x118>)
{
   166e8:	4688      	mov	r8, r1
   166ea:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   166ec:	f005 fb68 	bl	1bdc0 <net_buf_pool_get>
   166f0:	4285      	cmp	r5, r0
   166f2:	d018      	beq.n	16726 <hci_cmd_done+0x4a>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   166f4:	7aa4      	ldrb	r4, [r4, #10]
   166f6:	4620      	mov	r0, r4
   166f8:	f005 fb62 	bl	1bdc0 <net_buf_pool_get>
   166fc:	46e8      	mov	r8, sp
   166fe:	b08a      	sub	sp, #40	; 0x28
   16700:	466a      	mov	r2, sp
   16702:	4b3d      	ldr	r3, [pc, #244]	; (167f8 <hci_cmd_done+0x11c>)
   16704:	6255      	str	r5, [r2, #36]	; 0x24
   16706:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1670a:	2306      	movs	r3, #6
   1670c:	e9c2 4007 	strd	r4, r0, [r2, #28]
   16710:	f44f 5142 	mov.w	r1, #12416	; 0x3080
   16714:	f842 3f10 	str.w	r3, [r2, #16]!
   16718:	4838      	ldr	r0, [pc, #224]	; (167fc <hci_cmd_done+0x120>)
   1671a:	f011 fa44 	bl	27ba6 <z_log_msg_static_create.constprop.0>
   1671e:	46c5      	mov	sp, r8
}
   16720:	46bd      	mov	sp, r7
   16722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   16726:	4620      	mov	r0, r4
   16728:	f005 fb52 	bl	1bdd0 <net_buf_id>
   1672c:	4d34      	ldr	r5, [pc, #208]	; (16800 <hci_cmd_done+0x124>)
   1672e:	f04f 090c 	mov.w	r9, #12
   16732:	fb09 5000 	mla	r0, r9, r0, r5
   16736:	8843      	ldrh	r3, [r0, #2]
   16738:	42b3      	cmp	r3, r6
   1673a:	d016      	beq.n	1676a <hci_cmd_done+0x8e>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   1673c:	4620      	mov	r0, r4
   1673e:	f005 fb47 	bl	1bdd0 <net_buf_id>
   16742:	fb09 5000 	mla	r0, r9, r0, r5
   16746:	466c      	mov	r4, sp
   16748:	b088      	sub	sp, #32
   1674a:	8843      	ldrh	r3, [r0, #2]
   1674c:	466a      	mov	r2, sp
   1674e:	492d      	ldr	r1, [pc, #180]	; (16804 <hci_cmd_done+0x128>)
   16750:	61d3      	str	r3, [r2, #28]
   16752:	2304      	movs	r3, #4
   16754:	e9c2 1605 	strd	r1, r6, [r2, #20]
   16758:	4828      	ldr	r0, [pc, #160]	; (167fc <hci_cmd_done+0x120>)
   1675a:	f842 3f10 	str.w	r3, [r2, #16]!
   1675e:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   16762:	f011 fa20 	bl	27ba6 <z_log_msg_static_create.constprop.0>
   16766:	46a5      	mov	sp, r4
		return;
   16768:	e7da      	b.n	16720 <hci_cmd_done+0x44>
	if (bt_dev.sent_cmd) {
   1676a:	4e27      	ldr	r6, [pc, #156]	; (16808 <hci_cmd_done+0x12c>)
   1676c:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   16770:	b120      	cbz	r0, 1677c <hci_cmd_done+0xa0>
		net_buf_unref(bt_dev.sent_cmd);
   16772:	f005 fd39 	bl	1c1e8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   16776:	2300      	movs	r3, #0
   16778:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   1677c:	4620      	mov	r0, r4
   1677e:	f005 fb27 	bl	1bdd0 <net_buf_id>
   16782:	260c      	movs	r6, #12
   16784:	fb06 5000 	mla	r0, r6, r0, r5
   16788:	6843      	ldr	r3, [r0, #4]
   1678a:	b1ab      	cbz	r3, 167b8 <hci_cmd_done+0xdc>
   1678c:	f1b8 0f00 	cmp.w	r8, #0
   16790:	d112      	bne.n	167b8 <hci_cmd_done+0xdc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   16792:	4620      	mov	r0, r4
   16794:	f005 fb1c 	bl	1bdd0 <net_buf_id>
   16798:	fb06 5000 	mla	r0, r6, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1679c:	2101      	movs	r1, #1
   1679e:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   167a0:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   167a4:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   167a6:	f003 061f 	and.w	r6, r3, #31
   167aa:	40b1      	lsls	r1, r6
	if (val) {
   167ac:	095b      	lsrs	r3, r3, #5
   167ae:	b1da      	cbz	r2, 167e8 <hci_cmd_done+0x10c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   167b0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   167b4:	f011 f9e8 	bl	27b88 <atomic_or>
	if (cmd(buf)->sync) {
   167b8:	4620      	mov	r0, r4
   167ba:	f005 fb09 	bl	1bdd0 <net_buf_id>
   167be:	260c      	movs	r6, #12
   167c0:	fb06 5000 	mla	r0, r6, r0, r5
   167c4:	6883      	ldr	r3, [r0, #8]
   167c6:	2b00      	cmp	r3, #0
   167c8:	d0aa      	beq.n	16720 <hci_cmd_done+0x44>
		cmd(buf)->status = status;
   167ca:	4620      	mov	r0, r4
   167cc:	f005 fb00 	bl	1bdd0 <net_buf_id>
   167d0:	4370      	muls	r0, r6
   167d2:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   167d6:	4620      	mov	r0, r4
   167d8:	f005 fafa 	bl	1bdd0 <net_buf_id>
   167dc:	fb06 5500 	mla	r5, r6, r0, r5
   167e0:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   167e2:	f00a fb53 	bl	20e8c <z_impl_k_sem_give>
}
   167e6:	e79b      	b.n	16720 <hci_cmd_done+0x44>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   167e8:	43c9      	mvns	r1, r1
   167ea:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   167ee:	f011 f9dd 	bl	27bac <atomic_and.isra.0>
   167f2:	e7e1      	b.n	167b8 <hci_cmd_done+0xdc>
   167f4:	20000b7c 	.word	0x20000b7c
   167f8:	0002c24e 	.word	0x0002c24e
   167fc:	00029fd8 	.word	0x00029fd8
   16800:	200034bc 	.word	0x200034bc
   16804:	0002c283 	.word	0x0002c283
   16808:	20000388 	.word	0x20000388

0001680c <hci_cmd_status>:
{
   1680c:	b538      	push	{r3, r4, r5, lr}
   1680e:	2104      	movs	r1, #4
   16810:	4604      	mov	r4, r0
   16812:	300c      	adds	r0, #12
   16814:	f005 fe0e 	bl	1c434 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   16818:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   1681a:	7801      	ldrb	r1, [r0, #0]
   1681c:	8840      	ldrh	r0, [r0, #2]
   1681e:	4622      	mov	r2, r4
   16820:	f7ff ff5c 	bl	166dc <hci_cmd_done>
	if (ncmd) {
   16824:	b125      	cbz	r5, 16830 <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
   16826:	4803      	ldr	r0, [pc, #12]	; (16834 <hci_cmd_status+0x28>)
}
   16828:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1682c:	f00a bb2e 	b.w	20e8c <z_impl_k_sem_give>
   16830:	bd38      	pop	{r3, r4, r5, pc}
   16832:	bf00      	nop
   16834:	200004a8 	.word	0x200004a8

00016838 <hci_cmd_complete>:
{
   16838:	b538      	push	{r3, r4, r5, lr}
   1683a:	2103      	movs	r1, #3
   1683c:	4604      	mov	r4, r0
   1683e:	300c      	adds	r0, #12
   16840:	f005 fdf8 	bl	1c434 <net_buf_simple_pull_mem>
	status = buf->data[0];
   16844:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   16846:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   16848:	7819      	ldrb	r1, [r3, #0]
   1684a:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   1684e:	4622      	mov	r2, r4
   16850:	f7ff ff44 	bl	166dc <hci_cmd_done>
	if (ncmd) {
   16854:	b125      	cbz	r5, 16860 <hci_cmd_complete+0x28>
   16856:	4803      	ldr	r0, [pc, #12]	; (16864 <hci_cmd_complete+0x2c>)
}
   16858:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1685c:	f00a bb16 	b.w	20e8c <z_impl_k_sem_give>
   16860:	bd38      	pop	{r3, r4, r5, pc}
   16862:	bf00      	nop
   16864:	200004a8 	.word	0x200004a8

00016868 <hci_num_completed_packets>:
{
   16868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1686c:	b087      	sub	sp, #28
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   1686e:	f8d0 800c 	ldr.w	r8, [r0, #12]
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
   16872:	8a01      	ldrh	r1, [r0, #16]
   16874:	f898 4000 	ldrb.w	r4, [r8]
   16878:	2301      	movs	r3, #1
   1687a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   1687e:	428b      	cmp	r3, r1
{
   16880:	af00      	add	r7, sp, #0
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
   16882:	f240 808c 	bls.w	1699e <hci_num_completed_packets+0x136>
		LOG_ERR("evt num_handles (=%u) too large (%u > %u)",
   16886:	466d      	mov	r5, sp
   16888:	b08a      	sub	sp, #40	; 0x28
   1688a:	466a      	mov	r2, sp
   1688c:	4846      	ldr	r0, [pc, #280]	; (169a8 <hci_num_completed_packets+0x140>)
   1688e:	e9c2 3107 	strd	r3, r1, [r2, #28]
   16892:	2305      	movs	r3, #5
   16894:	e9c2 0405 	strd	r0, r4, [r2, #20]
   16898:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1689c:	f842 3f10 	str.w	r3, [r2, #16]!
   168a0:	4842      	ldr	r0, [pc, #264]	; (169ac <hci_num_completed_packets+0x144>)
   168a2:	f011 f980 	bl	27ba6 <z_log_msg_static_create.constprop.0>
   168a6:	46ad      	mov	sp, r5
}
   168a8:	371c      	adds	r7, #28
   168aa:	46bd      	mov	sp, r7
   168ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("No connection for handle %u", handle);
   168b0:	466c      	mov	r4, sp
   168b2:	b088      	sub	sp, #32
   168b4:	466a      	mov	r2, sp
   168b6:	4b3e      	ldr	r3, [pc, #248]	; (169b0 <hci_num_completed_packets+0x148>)
   168b8:	483c      	ldr	r0, [pc, #240]	; (169ac <hci_num_completed_packets+0x144>)
   168ba:	e9c2 3b05 	strd	r3, fp, [r2, #20]
   168be:	2303      	movs	r3, #3
   168c0:	f842 3f10 	str.w	r3, [r2, #16]!
   168c4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   168c8:	f011 f96d 	bl	27ba6 <z_log_msg_static_create.constprop.0>
   168cc:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
   168ce:	3501      	adds	r5, #1
   168d0:	f898 3000 	ldrb.w	r3, [r8]
   168d4:	429d      	cmp	r5, r3
   168d6:	dae7      	bge.n	168a8 <hci_num_completed_packets+0x40>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   168d8:	eb08 0385 	add.w	r3, r8, r5, lsl #2
   168dc:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   168e0:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   168e4:	4658      	mov	r0, fp
   168e6:	f002 fac3 	bl	18e70 <bt_conn_lookup_handle>
		if (!conn) {
   168ea:	4604      	mov	r4, r0
   168ec:	2800      	cmp	r0, #0
   168ee:	d0df      	beq.n	168b0 <hci_num_completed_packets+0x48>
			k_work_submit(&conn->tx_complete_work);
   168f0:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   168f4:	b346      	cbz	r6, 16948 <hci_num_completed_packets+0xe0>
	__asm__ volatile(
   168f6:	f04f 0340 	mov.w	r3, #64	; 0x40
   168fa:	f3ef 8211 	mrs	r2, BASEPRI
   168fe:	f383 8812 	msr	BASEPRI_MAX, r3
   16902:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   16906:	69e3      	ldr	r3, [r4, #28]
   16908:	b16b      	cbz	r3, 16926 <hci_num_completed_packets+0xbe>
				conn->pending_no_cb--;
   1690a:	3b01      	subs	r3, #1
   1690c:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1690e:	f382 8811 	msr	BASEPRI, r2
   16912:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   16916:	4620      	mov	r0, r4
   16918:	f002 f85c 	bl	189d4 <bt_conn_get_pkts>
   1691c:	3e01      	subs	r6, #1
   1691e:	f00a fab5 	bl	20e8c <z_impl_k_sem_give>
   16922:	b2b6      	uxth	r6, r6
   16924:	e7e6      	b.n	168f4 <hci_num_completed_packets+0x8c>
   16926:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   16928:	b993      	cbnz	r3, 16950 <hci_num_completed_packets+0xe8>
   1692a:	f382 8811 	msr	BASEPRI, r2
   1692e:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
   16932:	2302      	movs	r3, #2
   16934:	481d      	ldr	r0, [pc, #116]	; (169ac <hci_num_completed_packets+0x144>)
   16936:	f8c7 a014 	str.w	sl, [r7, #20]
   1693a:	f107 0210 	add.w	r2, r7, #16
   1693e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16942:	613b      	str	r3, [r7, #16]
   16944:	f011 f92f 	bl	27ba6 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   16948:	4620      	mov	r0, r4
   1694a:	f002 fa59 	bl	18e00 <bt_conn_unref>
   1694e:	e7be      	b.n	168ce <hci_num_completed_packets+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16950:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   16952:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   16954:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   16956:	428b      	cmp	r3, r1
	list->tail = node;
   16958:	bf08      	it	eq
   1695a:	61a0      	streq	r0, [r4, #24]
   1695c:	f382 8811 	msr	BASEPRI, r2
   16960:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   16964:	f04f 0240 	mov.w	r2, #64	; 0x40
   16968:	f3ef 8111 	mrs	r1, BASEPRI
   1696c:	f382 8812 	msr	BASEPRI_MAX, r2
   16970:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   16974:	68da      	ldr	r2, [r3, #12]
   16976:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   16978:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
   1697c:	f8c3 9000 	str.w	r9, [r3]
	return list->tail;
   16980:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   16982:	b94a      	cbnz	r2, 16998 <hci_num_completed_packets+0x130>
	list->head = node;
   16984:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   16988:	f381 8811 	msr	BASEPRI, r1
   1698c:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   16990:	4658      	mov	r0, fp
   16992:	f00a fde9 	bl	21568 <k_work_submit>
   16996:	e7be      	b.n	16916 <hci_num_completed_packets+0xae>
	parent->next = child;
   16998:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1699a:	6263      	str	r3, [r4, #36]	; 0x24
}
   1699c:	e7f4      	b.n	16988 <hci_num_completed_packets+0x120>
	for (i = 0; i < evt->num_handles; i++) {
   1699e:	2500      	movs	r5, #0
				LOG_ERR("packets count mismatch");
   169a0:	f8df a010 	ldr.w	sl, [pc, #16]	; 169b4 <hci_num_completed_packets+0x14c>
			tx->pending_no_cb = 0U;
   169a4:	46a9      	mov	r9, r5
   169a6:	e793      	b.n	168d0 <hci_num_completed_packets+0x68>
   169a8:	0002c2b6 	.word	0x0002c2b6
   169ac:	00029fd8 	.word	0x00029fd8
   169b0:	0002c2e0 	.word	0x0002c2e0
   169b4:	0002c2fc 	.word	0x0002c2fc

000169b8 <le_conn_update_complete>:
{
   169b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   169ba:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   169bc:	68c5      	ldr	r5, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   169be:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   169c2:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   169c4:	4630      	mov	r0, r6
   169c6:	f002 fa53 	bl	18e70 <bt_conn_lookup_handle>
	if (!conn) {
   169ca:	4604      	mov	r4, r0
   169cc:	b988      	cbnz	r0, 169f2 <le_conn_update_complete+0x3a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   169ce:	466c      	mov	r4, sp
   169d0:	b088      	sub	sp, #32
   169d2:	466a      	mov	r2, sp
   169d4:	4b2d      	ldr	r3, [pc, #180]	; (16a8c <le_conn_update_complete+0xd4>)
   169d6:	482e      	ldr	r0, [pc, #184]	; (16a90 <le_conn_update_complete+0xd8>)
   169d8:	e9c2 3605 	strd	r3, r6, [r2, #20]
   169dc:	2303      	movs	r3, #3
   169de:	f842 3f10 	str.w	r3, [r2, #16]!
   169e2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   169e6:	f011 f8de 	bl	27ba6 <z_log_msg_static_create.constprop.0>
   169ea:	46a5      	mov	sp, r4
}
   169ec:	370c      	adds	r7, #12
   169ee:	46bd      	mov	sp, r7
   169f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   169f2:	782b      	ldrb	r3, [r5, #0]
   169f4:	2b1a      	cmp	r3, #26
	    !atomic_test_and_set_bit(conn->flags,
   169f6:	f100 0604 	add.w	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   169fa:	d117      	bne.n	16a2c <le_conn_update_complete+0x74>
   169fc:	78c3      	ldrb	r3, [r0, #3]
   169fe:	2b01      	cmp	r3, #1
   16a00:	d128      	bne.n	16a54 <le_conn_update_complete+0x9c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   16a02:	f44f 6180 	mov.w	r1, #1024	; 0x400
   16a06:	4630      	mov	r0, r6
   16a08:	f011 f8be 	bl	27b88 <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   16a0c:	0542      	lsls	r2, r0, #21
   16a0e:	d40d      	bmi.n	16a2c <le_conn_update_complete+0x74>
		param.interval_min = conn->le.interval_min;
   16a10:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   16a14:	603b      	str	r3, [r7, #0]
		bt_l2cap_update_conn_param(conn, &param);
   16a16:	4639      	mov	r1, r7
		param.latency = conn->le.pending_latency;
   16a18:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   16a1c:	607b      	str	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
   16a1e:	4620      	mov	r0, r4
   16a20:	f003 f82a 	bl	19a78 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   16a24:	4620      	mov	r0, r4
   16a26:	f002 f9eb 	bl	18e00 <bt_conn_unref>
   16a2a:	e7df      	b.n	169ec <le_conn_update_complete+0x34>
		if (!evt->status) {
   16a2c:	782b      	ldrb	r3, [r5, #0]
   16a2e:	b98b      	cbnz	r3, 16a54 <le_conn_update_complete+0x9c>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   16a30:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   16a34:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   16a38:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   16a3c:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   16a40:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   16a44:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16a48:	f46f 7180 	mvn.w	r1, #256	; 0x100
   16a4c:	4630      	mov	r0, r6
   16a4e:	f011 f8ad 	bl	27bac <atomic_and.isra.0>
}
   16a52:	e017      	b.n	16a84 <le_conn_update_complete+0xcc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16a54:	f3bf 8f5b 	dmb	ish
   16a58:	6863      	ldr	r3, [r4, #4]
   16a5a:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(conn->flags,
   16a5e:	05db      	lsls	r3, r3, #23
   16a60:	d5f2      	bpl.n	16a48 <le_conn_update_complete+0x90>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
   16a62:	782b      	ldrb	r3, [r5, #0]
   16a64:	2b20      	cmp	r3, #32
   16a66:	d1ef      	bne.n	16a48 <le_conn_update_complete+0x90>
			   conn->le.conn_param_retry_countdown) {
   16a68:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   16a6c:	2b00      	cmp	r3, #0
   16a6e:	d0eb      	beq.n	16a48 <le_conn_update_complete+0x90>
			conn->le.conn_param_retry_countdown--;
   16a70:	3b01      	subs	r3, #1
   16a72:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
   16a76:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   16a7a:	2300      	movs	r3, #0
   16a7c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   16a80:	f00a fe9c 	bl	217bc <k_work_schedule>
		notify_le_param_updated(conn);
   16a84:	4620      	mov	r0, r4
   16a86:	f002 fb61 	bl	1914c <notify_le_param_updated>
   16a8a:	e7cb      	b.n	16a24 <le_conn_update_complete+0x6c>
   16a8c:	0002c10d 	.word	0x0002c10d
   16a90:	00029fd8 	.word	0x00029fd8

00016a94 <bt_hci_cmd_state_set_init>:
{
   16a94:	b510      	push	{r4, lr}
	state->bit = bit;
   16a96:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   16a9a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   16a9e:	720b      	strb	r3, [r1, #8]
{
   16aa0:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   16aa2:	f005 f995 	bl	1bdd0 <net_buf_id>
   16aa6:	4b03      	ldr	r3, [pc, #12]	; (16ab4 <bt_hci_cmd_state_set_init+0x20>)
   16aa8:	220c      	movs	r2, #12
   16aaa:	fb02 3300 	mla	r3, r2, r0, r3
   16aae:	605c      	str	r4, [r3, #4]
}
   16ab0:	bd10      	pop	{r4, pc}
   16ab2:	bf00      	nop
   16ab4:	200034bc 	.word	0x200034bc

00016ab8 <bt_hci_cmd_create>:
{
   16ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   16abc:	f04f 32ff 	mov.w	r2, #4294967295
   16ac0:	4606      	mov	r6, r0
   16ac2:	f04f 33ff 	mov.w	r3, #4294967295
   16ac6:	481e      	ldr	r0, [pc, #120]	; (16b40 <bt_hci_cmd_create+0x88>)
   16ac8:	460f      	mov	r7, r1
   16aca:	f012 f99d 	bl	28e08 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   16ace:	4604      	mov	r4, r0
   16ad0:	b958      	cbnz	r0, 16aea <bt_hci_cmd_create+0x32>
   16ad2:	491c      	ldr	r1, [pc, #112]	; (16b44 <bt_hci_cmd_create+0x8c>)
   16ad4:	481c      	ldr	r0, [pc, #112]	; (16b48 <bt_hci_cmd_create+0x90>)
   16ad6:	4a1d      	ldr	r2, [pc, #116]	; (16b4c <bt_hci_cmd_create+0x94>)
   16ad8:	f44f 7381 	mov.w	r3, #258	; 0x102
   16adc:	f010 fb7e 	bl	271dc <assert_print>
   16ae0:	481a      	ldr	r0, [pc, #104]	; (16b4c <bt_hci_cmd_create+0x94>)
   16ae2:	f44f 7181 	mov.w	r1, #258	; 0x102
   16ae6:	f010 fb72 	bl	271ce <assert_post_action>
	net_buf_simple_reserve(&buf->b, reserve);
   16aea:	f100 0a0c 	add.w	sl, r0, #12
   16aee:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   16af0:	f04f 0800 	mov.w	r8, #0
   16af4:	4650      	mov	r0, sl
   16af6:	f005 fc3d 	bl	1c374 <net_buf_simple_reserve>
   16afa:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
   16afe:	4620      	mov	r0, r4
   16b00:	f005 f966 	bl	1bdd0 <net_buf_id>
   16b04:	4d12      	ldr	r5, [pc, #72]	; (16b50 <bt_hci_cmd_create+0x98>)
   16b06:	f04f 090c 	mov.w	r9, #12
   16b0a:	fb09 5000 	mla	r0, r9, r0, r5
   16b0e:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   16b10:	4620      	mov	r0, r4
   16b12:	f005 f95d 	bl	1bdd0 <net_buf_id>
   16b16:	fb09 5000 	mla	r0, r9, r0, r5
   16b1a:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   16b1e:	4620      	mov	r0, r4
   16b20:	f005 f956 	bl	1bdd0 <net_buf_id>
   16b24:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   16b28:	2103      	movs	r1, #3
   16b2a:	4650      	mov	r0, sl
   16b2c:	f8c5 8004 	str.w	r8, [r5, #4]
   16b30:	f005 fc9e 	bl	1c470 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   16b34:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   16b36:	7087      	strb	r7, [r0, #2]
}
   16b38:	4620      	mov	r0, r4
   16b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16b3e:	bf00      	nop
   16b40:	20000b7c 	.word	0x20000b7c
   16b44:	0002d4bb 	.word	0x0002d4bb
   16b48:	0002ae37 	.word	0x0002ae37
   16b4c:	0002c179 	.word	0x0002c179
   16b50:	200034bc 	.word	0x200034bc

00016b54 <bt_hci_cmd_send_sync>:
{
   16b54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16b58:	b087      	sub	sp, #28
   16b5a:	4606      	mov	r6, r0
   16b5c:	af00      	add	r7, sp, #0
   16b5e:	4615      	mov	r5, r2
	if (!buf) {
   16b60:	460c      	mov	r4, r1
   16b62:	b921      	cbnz	r1, 16b6e <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
   16b64:	f7ff ffa8 	bl	16ab8 <bt_hci_cmd_create>
		if (!buf) {
   16b68:	4604      	mov	r4, r0
   16b6a:	2800      	cmp	r0, #0
   16b6c:	d05f      	beq.n	16c2e <bt_hci_cmd_send_sync+0xda>
	return z_impl_k_sem_init(sem, initial_count, limit);
   16b6e:	2201      	movs	r2, #1
   16b70:	2100      	movs	r1, #0
   16b72:	4638      	mov	r0, r7
   16b74:	f012 fe98 	bl	298a8 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   16b78:	4620      	mov	r0, r4
   16b7a:	f005 f929 	bl	1bdd0 <net_buf_id>
   16b7e:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 16c50 <bt_hci_cmd_send_sync+0xfc>
   16b82:	230c      	movs	r3, #12
   16b84:	fb03 9000 	mla	r0, r3, r0, r9
   16b88:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   16b8a:	4620      	mov	r0, r4
   16b8c:	f005 fb70 	bl	1c270 <net_buf_ref>
   16b90:	4601      	mov	r1, r0
   16b92:	4828      	ldr	r0, [pc, #160]	; (16c34 <bt_hci_cmd_send_sync+0xe0>)
   16b94:	f005 fb02 	bl	1c19c <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   16b98:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   16b9c:	2300      	movs	r3, #0
   16b9e:	4638      	mov	r0, r7
   16ba0:	f00a f9b8 	bl	20f14 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "command opcode 0x%04x timeout with err %d", opcode, err);
   16ba4:	4680      	mov	r8, r0
   16ba6:	b188      	cbz	r0, 16bcc <bt_hci_cmd_send_sync+0x78>
   16ba8:	f44f 73a5 	mov.w	r3, #330	; 0x14a
   16bac:	4a22      	ldr	r2, [pc, #136]	; (16c38 <bt_hci_cmd_send_sync+0xe4>)
   16bae:	4923      	ldr	r1, [pc, #140]	; (16c3c <bt_hci_cmd_send_sync+0xe8>)
   16bb0:	4823      	ldr	r0, [pc, #140]	; (16c40 <bt_hci_cmd_send_sync+0xec>)
   16bb2:	f010 fb13 	bl	271dc <assert_print>
   16bb6:	4823      	ldr	r0, [pc, #140]	; (16c44 <bt_hci_cmd_send_sync+0xf0>)
   16bb8:	4642      	mov	r2, r8
   16bba:	4631      	mov	r1, r6
   16bbc:	f010 fb0e 	bl	271dc <assert_print>
   16bc0:	4040      	eors	r0, r0
   16bc2:	f380 8811 	msr	BASEPRI, r0
   16bc6:	f04f 0003 	mov.w	r0, #3
   16bca:	df02      	svc	2
	status = cmd(buf)->status;
   16bcc:	4620      	mov	r0, r4
   16bce:	f005 f8ff 	bl	1bdd0 <net_buf_id>
   16bd2:	230c      	movs	r3, #12
   16bd4:	4358      	muls	r0, r3
   16bd6:	f819 8000 	ldrb.w	r8, [r9, r0]
	if (status) {
   16bda:	f1b8 0f00 	cmp.w	r8, #0
   16bde:	d01e      	beq.n	16c1e <bt_hci_cmd_send_sync+0xca>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   16be0:	466d      	mov	r5, sp
   16be2:	b088      	sub	sp, #32
   16be4:	466a      	mov	r2, sp
   16be6:	4b18      	ldr	r3, [pc, #96]	; (16c48 <bt_hci_cmd_send_sync+0xf4>)
   16be8:	f8c2 801c 	str.w	r8, [r2, #28]
   16bec:	e9c2 3605 	strd	r3, r6, [r2, #20]
   16bf0:	2304      	movs	r3, #4
   16bf2:	f842 3f10 	str.w	r3, [r2, #16]!
   16bf6:	4815      	ldr	r0, [pc, #84]	; (16c4c <bt_hci_cmd_send_sync+0xf8>)
   16bf8:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   16bfc:	f010 ffd3 	bl	27ba6 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   16c00:	4620      	mov	r0, r4
   16c02:	46ad      	mov	sp, r5
   16c04:	f005 faf0 	bl	1c1e8 <net_buf_unref>
			return -ECONNREFUSED;
   16c08:	f1b8 0f09 	cmp.w	r8, #9
   16c0c:	bf14      	ite	ne
   16c0e:	f06f 0004 	mvnne.w	r0, #4
   16c12:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   16c16:	371c      	adds	r7, #28
   16c18:	46bd      	mov	sp, r7
   16c1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
   16c1e:	b115      	cbz	r5, 16c26 <bt_hci_cmd_send_sync+0xd2>
		*rsp = buf;
   16c20:	602c      	str	r4, [r5, #0]
	return 0;
   16c22:	2000      	movs	r0, #0
   16c24:	e7f7      	b.n	16c16 <bt_hci_cmd_send_sync+0xc2>
		net_buf_unref(buf);
   16c26:	4620      	mov	r0, r4
   16c28:	f005 fade 	bl	1c1e8 <net_buf_unref>
   16c2c:	e7f9      	b.n	16c22 <bt_hci_cmd_send_sync+0xce>
			return -ENOBUFS;
   16c2e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16c32:	e7f0      	b.n	16c16 <bt_hci_cmd_send_sync+0xc2>
   16c34:	200004cc 	.word	0x200004cc
   16c38:	0002c179 	.word	0x0002c179
   16c3c:	0002b300 	.word	0x0002b300
   16c40:	0002ae37 	.word	0x0002ae37
   16c44:	0002c313 	.word	0x0002c313
   16c48:	0002c33f 	.word	0x0002c33f
   16c4c:	00029fd8 	.word	0x00029fd8
   16c50:	200034bc 	.word	0x200034bc

00016c54 <hci_le_read_max_data_len>:
{
   16c54:	b570      	push	{r4, r5, r6, lr}
   16c56:	b088      	sub	sp, #32
   16c58:	4606      	mov	r6, r0
   16c5a:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   16c5c:	aa01      	add	r2, sp, #4
   16c5e:	2100      	movs	r1, #0
   16c60:	f242 002f 	movw	r0, #8239	; 0x202f
   16c64:	f7ff ff76 	bl	16b54 <bt_hci_cmd_send_sync>
	if (err) {
   16c68:	4604      	mov	r4, r0
   16c6a:	b160      	cbz	r0, 16c86 <hci_le_read_max_data_len+0x32>
		LOG_ERR("Failed to read DLE max data len");
   16c6c:	4b0b      	ldr	r3, [pc, #44]	; (16c9c <hci_le_read_max_data_len+0x48>)
   16c6e:	9307      	str	r3, [sp, #28]
   16c70:	480b      	ldr	r0, [pc, #44]	; (16ca0 <hci_le_read_max_data_len+0x4c>)
   16c72:	2302      	movs	r3, #2
   16c74:	aa06      	add	r2, sp, #24
   16c76:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16c7a:	9306      	str	r3, [sp, #24]
   16c7c:	f010 ff93 	bl	27ba6 <z_log_msg_static_create.constprop.0>
}
   16c80:	4620      	mov	r0, r4
   16c82:	b008      	add	sp, #32
   16c84:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   16c86:	9801      	ldr	r0, [sp, #4]
   16c88:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   16c8a:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   16c8e:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   16c90:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   16c94:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   16c96:	f005 faa7 	bl	1c1e8 <net_buf_unref>
	return 0;
   16c9a:	e7f1      	b.n	16c80 <hci_le_read_max_data_len+0x2c>
   16c9c:	0002c35b 	.word	0x0002c35b
   16ca0:	00029fd8 	.word	0x00029fd8

00016ca4 <bt_hci_le_rand>:
{
   16ca4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   16ca6:	4b14      	ldr	r3, [pc, #80]	; (16cf8 <bt_hci_le_rand+0x54>)
   16ca8:	f993 309b 	ldrsb.w	r3, [r3, #155]	; 0x9b
   16cac:	2b00      	cmp	r3, #0
{
   16cae:	4605      	mov	r5, r0
   16cb0:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   16cb2:	da1d      	bge.n	16cf0 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   16cb4:	b914      	cbnz	r4, 16cbc <bt_hci_le_rand+0x18>
	return 0;
   16cb6:	4620      	mov	r0, r4
}
   16cb8:	b003      	add	sp, #12
   16cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   16cbc:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   16cbe:	aa01      	add	r2, sp, #4
   16cc0:	f04f 0100 	mov.w	r1, #0
   16cc4:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   16cc8:	4626      	mov	r6, r4
   16cca:	bf28      	it	cs
   16ccc:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   16cce:	f7ff ff41 	bl	16b54 <bt_hci_cmd_send_sync>
		if (err) {
   16cd2:	2800      	cmp	r0, #0
   16cd4:	d1f0      	bne.n	16cb8 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   16cd6:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
   16cd8:	68f9      	ldr	r1, [r7, #12]
   16cda:	4632      	mov	r2, r6
   16cdc:	3101      	adds	r1, #1
   16cde:	4628      	mov	r0, r5
   16ce0:	f010 fea4 	bl	27a2c <memcpy>
		net_buf_unref(rsp);
   16ce4:	4638      	mov	r0, r7
   16ce6:	f005 fa7f 	bl	1c1e8 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   16cea:	4435      	add	r5, r6
		len -= count;
   16cec:	1ba4      	subs	r4, r4, r6
   16cee:	e7e1      	b.n	16cb4 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   16cf0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16cf4:	e7e0      	b.n	16cb8 <bt_hci_le_rand+0x14>
   16cf6:	bf00      	nop
   16cf8:	20000388 	.word	0x20000388

00016cfc <bt_hci_le_enh_conn_complete>:
{
   16cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16d00:	b08c      	sub	sp, #48	; 0x30
		if (disconnected_handles[i] == handle) {
   16d02:	4bae      	ldr	r3, [pc, #696]	; (16fbc <bt_hci_le_enh_conn_complete+0x2c0>)
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16d04:	f8b0 8001 	ldrh.w	r8, [r0, #1]
		if (disconnected_handles[i] == handle) {
   16d08:	8819      	ldrh	r1, [r3, #0]
   16d0a:	f448 4270 	orr.w	r2, r8, #61440	; 0xf000
   16d0e:	4291      	cmp	r1, r2
   16d10:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   16d14:	bf08      	it	eq
   16d16:	801e      	strheq	r6, [r3, #0]
	if (evt->status) {
   16d18:	7804      	ldrb	r4, [r0, #0]
{
   16d1a:	af02      	add	r7, sp, #8
   16d1c:	4605      	mov	r5, r0
			return true;
   16d1e:	bf08      	it	eq
   16d20:	2601      	moveq	r6, #1
	if (evt->status) {
   16d22:	b3a4      	cbz	r4, 16d8e <bt_hci_le_enh_conn_complete+0x92>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16d24:	2c3c      	cmp	r4, #60	; 0x3c
   16d26:	d122      	bne.n	16d6e <bt_hci_le_enh_conn_complete+0x72>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   16d28:	f001 fa8e 	bl	18248 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16d2c:	f06f 0180 	mvn.w	r1, #128	; 0x80
   16d30:	3010      	adds	r0, #16
   16d32:	f010 ff3b 	bl	27bac <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   16d36:	2000      	movs	r0, #0
   16d38:	f7ff fa84 	bl	16244 <find_pending_connect.part.0>
		if (!conn) {
   16d3c:	4605      	mov	r5, r0
   16d3e:	b970      	cbnz	r0, 16d5e <bt_hci_le_enh_conn_complete+0x62>
			LOG_ERR("No pending peripheral connection");
   16d40:	4b9f      	ldr	r3, [pc, #636]	; (16fc0 <bt_hci_le_enh_conn_complete+0x2c4>)
   16d42:	627b      	str	r3, [r7, #36]	; 0x24
   16d44:	2302      	movs	r3, #2
   16d46:	489f      	ldr	r0, [pc, #636]	; (16fc4 <bt_hci_le_enh_conn_complete+0x2c8>)
   16d48:	623b      	str	r3, [r7, #32]
   16d4a:	f107 0220 	add.w	r2, r7, #32
   16d4e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16d52:	f010 ff28 	bl	27ba6 <z_log_msg_static_create.constprop.0>
}
   16d56:	3728      	adds	r7, #40	; 0x28
   16d58:	46bd      	mov	sp, r7
   16d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   16d5e:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   16d60:	2100      	movs	r1, #0
   16d62:	f002 f88d 	bl	18e80 <bt_conn_set_state>
		bt_conn_unref(conn);
   16d66:	4628      	mov	r0, r5
	bt_conn_unref(conn);
   16d68:	f002 f84a 	bl	18e00 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   16d6c:	e7f3      	b.n	16d56 <bt_hci_le_enh_conn_complete+0x5a>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   16d6e:	466d      	mov	r5, sp
   16d70:	b088      	sub	sp, #32
   16d72:	aa02      	add	r2, sp, #8
   16d74:	4b94      	ldr	r3, [pc, #592]	; (16fc8 <bt_hci_le_enh_conn_complete+0x2cc>)
   16d76:	4893      	ldr	r0, [pc, #588]	; (16fc4 <bt_hci_le_enh_conn_complete+0x2c8>)
   16d78:	e9c2 3405 	strd	r3, r4, [r2, #20]
   16d7c:	2303      	movs	r3, #3
   16d7e:	f842 3f10 	str.w	r3, [r2, #16]!
   16d82:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   16d86:	f010 ff0e 	bl	27ba6 <z_log_msg_static_create.constprop.0>
   16d8a:	46ad      	mov	sp, r5
		return;
   16d8c:	e7e3      	b.n	16d56 <bt_hci_le_enh_conn_complete+0x5a>
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
   16d8e:	78c3      	ldrb	r3, [r0, #3]
   16d90:	2b01      	cmp	r3, #1
   16d92:	bf08      	it	eq
   16d94:	4b8d      	ldreq	r3, [pc, #564]	; (16fcc <bt_hci_le_enh_conn_complete+0x2d0>)
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   16d96:	f100 0904 	add.w	r9, r0, #4
   16d9a:	4648      	mov	r0, r9
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
   16d9c:	bf08      	it	eq
   16d9e:	f893 406f 	ldrbeq.w	r4, [r3, #111]	; 0x6f
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   16da2:	f010 feda 	bl	27b5a <bt_addr_le_is_resolved>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
   16da6:	4649      	mov	r1, r9
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   16da8:	b348      	cbz	r0, 16dfe <bt_hci_le_enh_conn_complete+0x102>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
   16daa:	f107 0010 	add.w	r0, r7, #16
   16dae:	f010 feca 	bl	27b46 <bt_addr_le_copy_resolved>
	memcpy(dst, src, sizeof(*dst));
   16db2:	2206      	movs	r2, #6
   16db4:	f105 0111 	add.w	r1, r5, #17
   16db8:	f107 0009 	add.w	r0, r7, #9
   16dbc:	f010 fe36 	bl	27a2c <memcpy>
		peer_addr->type = BT_ADDR_LE_RANDOM;
   16dc0:	2301      	movs	r3, #1
   16dc2:	723b      	strb	r3, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   16dc4:	78eb      	ldrb	r3, [r5, #3]
   16dc6:	2b01      	cmp	r3, #1
   16dc8:	d029      	beq.n	16e1e <bt_hci_le_enh_conn_complete+0x122>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   16dca:	4648      	mov	r0, r9
   16dcc:	f7ff f8f0 	bl	15fb0 <bt_addr_le_str>
   16dd0:	466c      	mov	r4, sp
   16dd2:	b088      	sub	sp, #32
   16dd4:	aa02      	add	r2, sp, #8
   16dd6:	4b7e      	ldr	r3, [pc, #504]	; (16fd0 <bt_hci_le_enh_conn_complete+0x2d4>)
   16dd8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16ddc:	f44f 7300 	mov.w	r3, #512	; 0x200
   16de0:	8393      	strh	r3, [r2, #28]
   16de2:	4b7c      	ldr	r3, [pc, #496]	; (16fd4 <bt_hci_le_enh_conn_complete+0x2d8>)
   16de4:	f842 3f10 	str.w	r3, [r2, #16]!
   16de8:	4876      	ldr	r0, [pc, #472]	; (16fc4 <bt_hci_le_enh_conn_complete+0x2c8>)
   16dea:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   16dee:	f010 feda 	bl	27ba6 <z_log_msg_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   16df2:	211f      	movs	r1, #31
   16df4:	46a5      	mov	sp, r4
   16df6:	4640      	mov	r0, r8
   16df8:	f010 fee4 	bl	27bc4 <bt_hci_disconnect>
		return;
   16dfc:	e7ab      	b.n	16d56 <bt_hci_le_enh_conn_complete+0x5a>
		bt_addr_le_copy(id_addr, bt_lookup_id_addr(id, &evt->peer_addr));
   16dfe:	4620      	mov	r0, r4
   16e00:	f010 ff90 	bl	27d24 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   16e04:	2207      	movs	r2, #7
   16e06:	4601      	mov	r1, r0
   16e08:	f107 0010 	add.w	r0, r7, #16
   16e0c:	f010 fe0e 	bl	27a2c <memcpy>
   16e10:	2207      	movs	r2, #7
   16e12:	4649      	mov	r1, r9
   16e14:	f107 0008 	add.w	r0, r7, #8
   16e18:	f010 fe08 	bl	27a2c <memcpy>
}
   16e1c:	e7d2      	b.n	16dc4 <bt_hci_le_enh_conn_complete+0xc8>
   16e1e:	f107 0010 	add.w	r0, r7, #16
   16e22:	f7ff fa0f 	bl	16244 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16e26:	78eb      	ldrb	r3, [r5, #3]
   16e28:	2b01      	cmp	r3, #1
   16e2a:	4604      	mov	r4, r0
   16e2c:	d10a      	bne.n	16e44 <bt_hci_le_enh_conn_complete+0x148>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   16e2e:	f001 fa0b 	bl	18248 <bt_le_adv_lookup_legacy>
   16e32:	f06f 0180 	mvn.w	r1, #128	; 0x80
   16e36:	4682      	mov	sl, r0
   16e38:	3010      	adds	r0, #16
   16e3a:	f010 feb7 	bl	27bac <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   16e3e:	4650      	mov	r0, sl
   16e40:	f011 f881 	bl	27f46 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   16e44:	2c00      	cmp	r4, #0
   16e46:	d0c0      	beq.n	16dca <bt_hci_le_enh_conn_complete+0xce>
	conn->handle = sys_le16_to_cpu(evt->handle);
   16e48:	4620      	mov	r0, r4
   16e4a:	f8b5 3001 	ldrh.w	r3, [r5, #1]
   16e4e:	f820 3b90 	strh.w	r3, [r0], #144
	memcpy(dst, src, sizeof(*dst));
   16e52:	2207      	movs	r2, #7
   16e54:	f107 0110 	add.w	r1, r7, #16
   16e58:	f010 fde8 	bl	27a2c <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   16e5c:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   16e60:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   16e64:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   16e68:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   16e6c:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   16e70:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   16e74:	78eb      	ldrb	r3, [r5, #3]
   16e76:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   16e78:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16e7a:	2b01      	cmp	r3, #1
	conn->err = 0U;
   16e7c:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16e7e:	d118      	bne.n	16eb2 <bt_hci_le_enh_conn_complete+0x1b6>
   16e80:	2207      	movs	r2, #7
   16e82:	f107 0108 	add.w	r1, r7, #8
   16e86:	f104 0097 	add.w	r0, r4, #151	; 0x97
   16e8a:	f010 fdcf 	bl	27a2c <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   16e8e:	f001 f9db 	bl	18248 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   16e92:	7a21      	ldrb	r1, [r4, #8]
   16e94:	4d4d      	ldr	r5, [pc, #308]	; (16fcc <bt_hci_le_enh_conn_complete+0x2d0>)
   16e96:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   16e9a:	4429      	add	r1, r5
   16e9c:	2207      	movs	r2, #7
   16e9e:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   16ea2:	f010 fdc3 	bl	27a2c <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   16ea6:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
   16eaa:	065d      	lsls	r5, r3, #25
   16eac:	d501      	bpl.n	16eb2 <bt_hci_le_enh_conn_complete+0x1b6>
			bt_le_adv_resume();
   16eae:	f001 fb93 	bl	185d8 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   16eb2:	2107      	movs	r1, #7
   16eb4:	4620      	mov	r0, r4
   16eb6:	f001 ffe3 	bl	18e80 <bt_conn_set_state>
	if (is_disconnected) {
   16eba:	b11e      	cbz	r6, 16ec4 <bt_hci_le_enh_conn_complete+0x1c8>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   16ebc:	2101      	movs	r1, #1
   16ebe:	4620      	mov	r0, r4
   16ec0:	f001 ffde 	bl	18e80 <bt_conn_set_state>
	bt_conn_connected(conn);
   16ec4:	4620      	mov	r0, r4
   16ec6:	f011 f872 	bl	27fae <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   16eca:	7aa3      	ldrb	r3, [r4, #10]
   16ecc:	2b07      	cmp	r3, #7
   16ece:	d170      	bne.n	16fb2 <bt_hci_le_enh_conn_complete+0x2b6>
   16ed0:	f3bf 8f5b 	dmb	ish
   16ed4:	6863      	ldr	r3, [r4, #4]
   16ed6:	4d3d      	ldr	r5, [pc, #244]	; (16fcc <bt_hci_le_enh_conn_complete+0x2d0>)
   16ed8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   16edc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   16ee0:	d129      	bne.n	16f36 <bt_hci_le_enh_conn_complete+0x23a>
   16ee2:	78e3      	ldrb	r3, [r4, #3]
   16ee4:	b11b      	cbz	r3, 16eee <bt_hci_le_enh_conn_complete+0x1f2>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   16ee6:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   16eea:	0718      	lsls	r0, r3, #28
   16eec:	d523      	bpl.n	16f36 <bt_hci_le_enh_conn_complete+0x23a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   16eee:	2102      	movs	r1, #2
   16ef0:	f242 0016 	movw	r0, #8214	; 0x2016
   16ef4:	f7ff fde0 	bl	16ab8 <bt_hci_cmd_create>
	if (!buf) {
   16ef8:	4606      	mov	r6, r0
   16efa:	2800      	cmp	r0, #0
   16efc:	d05b      	beq.n	16fb6 <bt_hci_le_enh_conn_complete+0x2ba>
   16efe:	2102      	movs	r1, #2
   16f00:	300c      	adds	r0, #12
   16f02:	f005 fab5 	bl	1c470 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   16f06:	8823      	ldrh	r3, [r4, #0]
   16f08:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   16f0a:	2200      	movs	r2, #0
   16f0c:	4631      	mov	r1, r6
   16f0e:	f242 0016 	movw	r0, #8214	; 0x2016
   16f12:	f7ff fe1f 	bl	16b54 <bt_hci_cmd_send_sync>
		if (err) {
   16f16:	b170      	cbz	r0, 16f36 <bt_hci_le_enh_conn_complete+0x23a>
			LOG_ERR("Failed read remote features (%d)", err);
   16f18:	466e      	mov	r6, sp
   16f1a:	b088      	sub	sp, #32
   16f1c:	aa02      	add	r2, sp, #8
   16f1e:	4b2e      	ldr	r3, [pc, #184]	; (16fd8 <bt_hci_le_enh_conn_complete+0x2dc>)
   16f20:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16f24:	2303      	movs	r3, #3
   16f26:	f842 3f10 	str.w	r3, [r2, #16]!
   16f2a:	4826      	ldr	r0, [pc, #152]	; (16fc4 <bt_hci_le_enh_conn_complete+0x2c8>)
   16f2c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16f30:	f010 fe39 	bl	27ba6 <z_log_msg_static_create.constprop.0>
   16f34:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   16f36:	f895 30d9 	ldrb.w	r3, [r5, #217]	; 0xd9
   16f3a:	07d9      	lsls	r1, r3, #31
   16f3c:	d516      	bpl.n	16f6c <bt_hci_le_enh_conn_complete+0x270>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   16f3e:	2100      	movs	r1, #0
   16f40:	2302      	movs	r3, #2
   16f42:	9100      	str	r1, [sp, #0]
   16f44:	461a      	mov	r2, r3
   16f46:	4620      	mov	r0, r4
   16f48:	f010 fe75 	bl	27c36 <bt_le_set_phy>
		if (err) {
   16f4c:	b170      	cbz	r0, 16f6c <bt_hci_le_enh_conn_complete+0x270>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   16f4e:	466e      	mov	r6, sp
   16f50:	b088      	sub	sp, #32
   16f52:	aa02      	add	r2, sp, #8
   16f54:	4b21      	ldr	r3, [pc, #132]	; (16fdc <bt_hci_le_enh_conn_complete+0x2e0>)
   16f56:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16f5a:	2303      	movs	r3, #3
   16f5c:	f842 3f10 	str.w	r3, [r2, #16]!
   16f60:	4818      	ldr	r0, [pc, #96]	; (16fc4 <bt_hci_le_enh_conn_complete+0x2c8>)
   16f62:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16f66:	f010 fe1e 	bl	27ba6 <z_log_msg_static_create.constprop.0>
   16f6a:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   16f6c:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   16f70:	069a      	lsls	r2, r3, #26
   16f72:	d51e      	bpl.n	16fb2 <bt_hci_le_enh_conn_complete+0x2b6>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   16f74:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   16f78:	689b      	ldr	r3, [r3, #8]
   16f7a:	079b      	lsls	r3, r3, #30
   16f7c:	d519      	bpl.n	16fb2 <bt_hci_le_enh_conn_complete+0x2b6>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   16f7e:	1db9      	adds	r1, r7, #6
   16f80:	1d38      	adds	r0, r7, #4
   16f82:	f7ff fe67 	bl	16c54 <hci_le_read_max_data_len>
			if (!err) {
   16f86:	b9a0      	cbnz	r0, 16fb2 <bt_hci_le_enh_conn_complete+0x2b6>
				err = bt_le_set_data_len(conn,
   16f88:	88fa      	ldrh	r2, [r7, #6]
   16f8a:	88b9      	ldrh	r1, [r7, #4]
   16f8c:	4620      	mov	r0, r4
   16f8e:	f010 fe34 	bl	27bfa <bt_le_set_data_len>
				if (err) {
   16f92:	b170      	cbz	r0, 16fb2 <bt_hci_le_enh_conn_complete+0x2b6>
					LOG_ERR("Failed to set data len (%d)", err);
   16f94:	466d      	mov	r5, sp
   16f96:	b088      	sub	sp, #32
   16f98:	aa02      	add	r2, sp, #8
   16f9a:	4b11      	ldr	r3, [pc, #68]	; (16fe0 <bt_hci_le_enh_conn_complete+0x2e4>)
   16f9c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16fa0:	2303      	movs	r3, #3
   16fa2:	f842 3f10 	str.w	r3, [r2, #16]!
   16fa6:	4807      	ldr	r0, [pc, #28]	; (16fc4 <bt_hci_le_enh_conn_complete+0x2c8>)
   16fa8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16fac:	f010 fdfb 	bl	27ba6 <z_log_msg_static_create.constprop.0>
   16fb0:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
   16fb2:	4620      	mov	r0, r4
   16fb4:	e6d8      	b.n	16d68 <bt_hci_le_enh_conn_complete+0x6c>
		return -ENOBUFS;
   16fb6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16fba:	e7ad      	b.n	16f18 <bt_hci_le_enh_conn_complete+0x21c>
   16fbc:	200042f8 	.word	0x200042f8
   16fc0:	0002c37b 	.word	0x0002c37b
   16fc4:	00029fd8 	.word	0x00029fd8
   16fc8:	0002c39c 	.word	0x0002c39c
   16fcc:	20000388 	.word	0x20000388
   16fd0:	0002c3b5 	.word	0x0002c3b5
   16fd4:	01000003 	.word	0x01000003
   16fd8:	0002c3d1 	.word	0x0002c3d1
   16fdc:	0002c3f2 	.word	0x0002c3f2
   16fe0:	0002c409 	.word	0x0002c409

00016fe4 <le_legacy_conn_complete>:
{
   16fe4:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   16fe6:	68c1      	ldr	r1, [r0, #12]
	memcpy(dst, src, sizeof(*dst));
   16fe8:	4c18      	ldr	r4, [pc, #96]	; (1704c <le_legacy_conn_complete+0x68>)
	enh.status         = evt->status;
   16fea:	780b      	ldrb	r3, [r1, #0]
{
   16fec:	b088      	sub	sp, #32
	memcpy(dst, src, sizeof(*dst));
   16fee:	2207      	movs	r2, #7
	enh.status         = evt->status;
   16ff0:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   16ff4:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   16ff8:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   16ffc:	78cb      	ldrb	r3, [r1, #3]
   16ffe:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   17002:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   17006:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   1700a:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   1700e:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   17012:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   17016:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   1701a:	7c4b      	ldrb	r3, [r1, #17]
   1701c:	f88d 301d 	strb.w	r3, [sp, #29]
   17020:	3104      	adds	r1, #4
   17022:	a801      	add	r0, sp, #4
   17024:	f010 fd02 	bl	27a2c <memcpy>
	memcpy(dst, src, sizeof(*dst));
   17028:	4621      	mov	r1, r4
   1702a:	2206      	movs	r2, #6
   1702c:	f10d 000b 	add.w	r0, sp, #11
   17030:	f010 fcfc 	bl	27a2c <memcpy>
   17034:	2206      	movs	r2, #6
   17036:	4621      	mov	r1, r4
   17038:	f10d 0011 	add.w	r0, sp, #17
   1703c:	f010 fcf6 	bl	27a2c <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   17040:	4668      	mov	r0, sp
   17042:	f7ff fe5b 	bl	16cfc <bt_hci_le_enh_conn_complete>
}
   17046:	b008      	add	sp, #32
   17048:	bd10      	pop	{r4, pc}
   1704a:	bf00      	nop
   1704c:	0002bf95 	.word	0x0002bf95

00017050 <bt_send>:
	return bt_dev.drv->send(buf);
   17050:	4b02      	ldr	r3, [pc, #8]	; (1705c <bt_send+0xc>)
   17052:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   17056:	695b      	ldr	r3, [r3, #20]
   17058:	4718      	bx	r3
   1705a:	bf00      	nop
   1705c:	20000388 	.word	0x20000388

00017060 <bt_hci_cmd_send>:
{
   17060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17062:	4605      	mov	r5, r0
   17064:	af00      	add	r7, sp, #0
	if (!buf) {
   17066:	460c      	mov	r4, r1
   17068:	b919      	cbnz	r1, 17072 <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   1706a:	f7ff fd25 	bl	16ab8 <bt_hci_cmd_create>
		if (!buf) {
   1706e:	4604      	mov	r4, r0
   17070:	b318      	cbz	r0, 170ba <bt_hci_cmd_send+0x5a>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   17072:	f640 4335 	movw	r3, #3125	; 0xc35
   17076:	429d      	cmp	r5, r3
   17078:	d119      	bne.n	170ae <bt_hci_cmd_send+0x4e>
		err = bt_send(buf);
   1707a:	4620      	mov	r0, r4
   1707c:	f7ff ffe8 	bl	17050 <bt_send>
		if (err) {
   17080:	4605      	mov	r5, r0
   17082:	b188      	cbz	r0, 170a8 <bt_hci_cmd_send+0x48>
			LOG_ERR("Unable to send to driver (err %d)", err);
   17084:	466e      	mov	r6, sp
   17086:	b088      	sub	sp, #32
   17088:	466a      	mov	r2, sp
   1708a:	4b0d      	ldr	r3, [pc, #52]	; (170c0 <bt_hci_cmd_send+0x60>)
   1708c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17090:	2303      	movs	r3, #3
   17092:	480c      	ldr	r0, [pc, #48]	; (170c4 <bt_hci_cmd_send+0x64>)
   17094:	f842 3f10 	str.w	r3, [r2, #16]!
   17098:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1709c:	f010 fd83 	bl	27ba6 <z_log_msg_static_create.constprop.0>
			net_buf_unref(buf);
   170a0:	4620      	mov	r0, r4
   170a2:	46b5      	mov	sp, r6
   170a4:	f005 f8a0 	bl	1c1e8 <net_buf_unref>
}
   170a8:	4628      	mov	r0, r5
   170aa:	46bd      	mov	sp, r7
   170ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   170ae:	4806      	ldr	r0, [pc, #24]	; (170c8 <bt_hci_cmd_send+0x68>)
   170b0:	4621      	mov	r1, r4
   170b2:	f005 f873 	bl	1c19c <net_buf_put>
	return 0;
   170b6:	2500      	movs	r5, #0
   170b8:	e7f6      	b.n	170a8 <bt_hci_cmd_send+0x48>
			return -ENOBUFS;
   170ba:	f06f 0568 	mvn.w	r5, #104	; 0x68
   170be:	e7f3      	b.n	170a8 <bt_hci_cmd_send+0x48>
   170c0:	0002c425 	.word	0x0002c425
   170c4:	00029fd8 	.word	0x00029fd8
   170c8:	200004cc 	.word	0x200004cc

000170cc <le_conn_param_req>:
{
   170cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   170d0:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   170d2:	68c3      	ldr	r3, [r0, #12]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   170d4:	78d9      	ldrb	r1, [r3, #3]
   170d6:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   170d8:	f8b3 8000 	ldrh.w	r8, [r3]
{
   170dc:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   170de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   170e2:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   170e4:	7959      	ldrb	r1, [r3, #5]
   170e6:	791a      	ldrb	r2, [r3, #4]
   170e8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   170ec:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   170ee:	799a      	ldrb	r2, [r3, #6]
   170f0:	79d9      	ldrb	r1, [r3, #7]
   170f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   170f6:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   170f8:	7a1a      	ldrb	r2, [r3, #8]
   170fa:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   170fc:	fa1f f488 	uxth.w	r4, r8
	param.timeout = sys_le16_to_cpu(evt->timeout);
   17100:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   17104:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   17106:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
   17108:	f001 feb2 	bl	18e70 <bt_conn_lookup_handle>
	if (!conn) {
   1710c:	4606      	mov	r6, r0
   1710e:	b9b0      	cbnz	r0, 1713e <le_conn_param_req+0x72>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   17110:	466d      	mov	r5, sp
   17112:	b088      	sub	sp, #32
   17114:	466a      	mov	r2, sp
   17116:	4b20      	ldr	r3, [pc, #128]	; (17198 <le_conn_param_req+0xcc>)
   17118:	4820      	ldr	r0, [pc, #128]	; (1719c <le_conn_param_req+0xd0>)
   1711a:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1711e:	2303      	movs	r3, #3
   17120:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17124:	f842 3f10 	str.w	r3, [r2, #16]!
   17128:	f010 fd3d 	bl	27ba6 <z_log_msg_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1712c:	2102      	movs	r1, #2
   1712e:	46ad      	mov	sp, r5
   17130:	4620      	mov	r0, r4
   17132:	f010 fdcc 	bl	27cce <le_conn_param_neg_reply>
}
   17136:	3708      	adds	r7, #8
   17138:	46bd      	mov	sp, r7
   1713a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!le_param_req(conn, &param)) {
   1713e:	4639      	mov	r1, r7
   17140:	f002 f868 	bl	19214 <le_param_req>
   17144:	b938      	cbnz	r0, 17156 <le_conn_param_req+0x8a>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   17146:	211e      	movs	r1, #30
   17148:	4620      	mov	r0, r4
   1714a:	f010 fdc0 	bl	27cce <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   1714e:	4630      	mov	r0, r6
   17150:	f001 fe56 	bl	18e00 <bt_conn_unref>
   17154:	e7ef      	b.n	17136 <le_conn_param_req+0x6a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   17156:	210e      	movs	r1, #14
   17158:	f242 0020 	movw	r0, #8224	; 0x2020
   1715c:	f7ff fcac 	bl	16ab8 <bt_hci_cmd_create>
	if (!buf) {
   17160:	4605      	mov	r5, r0
   17162:	2800      	cmp	r0, #0
   17164:	d0f3      	beq.n	1714e <le_conn_param_req+0x82>
   17166:	210e      	movs	r1, #14
   17168:	300c      	adds	r0, #12
   1716a:	f005 f981 	bl	1c470 <net_buf_simple_add>
   1716e:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   17170:	220e      	movs	r2, #14
   17172:	2100      	movs	r1, #0
   17174:	f010 fc65 	bl	27a42 <memset>
	cp->handle = sys_cpu_to_le16(handle);
   17178:	f8a4 8000 	strh.w	r8, [r4]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1717c:	883b      	ldrh	r3, [r7, #0]
   1717e:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   17180:	887b      	ldrh	r3, [r7, #2]
   17182:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   17184:	88bb      	ldrh	r3, [r7, #4]
   17186:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   17188:	88fb      	ldrh	r3, [r7, #6]
   1718a:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1718c:	4629      	mov	r1, r5
   1718e:	f242 0020 	movw	r0, #8224	; 0x2020
   17192:	f7ff ff65 	bl	17060 <bt_hci_cmd_send>
   17196:	e7da      	b.n	1714e <le_conn_param_req+0x82>
   17198:	0002c10d 	.word	0x0002c10d
   1719c:	00029fd8 	.word	0x00029fd8

000171a0 <hci_tx_thread>:
{
   171a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   171a4:	f8df 8158 	ldr.w	r8, [pc, #344]	; 17300 <hci_tx_thread+0x160>
		BT_ASSERT(err == 0);
   171a8:	f8df 9180 	ldr.w	r9, [pc, #384]	; 1732c <hci_tx_thread+0x18c>
{
   171ac:	b087      	sub	sp, #28
   171ae:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
   171b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   171b4:	4851      	ldr	r0, [pc, #324]	; (172fc <hci_tx_thread+0x15c>)
		events[0].state = K_POLL_STATE_NOT_READY;
   171b6:	f36f 3394 	bfc	r3, #14, #7
   171ba:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   171be:	f001 fd9d 	bl	18cfc <bt_conn_prepare_events>
   171c2:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   171c4:	484e      	ldr	r0, [pc, #312]	; (17300 <hci_tx_thread+0x160>)
   171c6:	f04f 32ff 	mov.w	r2, #4294967295
   171ca:	f04f 33ff 	mov.w	r3, #4294967295
   171ce:	4629      	mov	r1, r5
   171d0:	f00c fbc8 	bl	23964 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   171d4:	b160      	cbz	r0, 171f0 <hci_tx_thread+0x50>
   171d6:	494b      	ldr	r1, [pc, #300]	; (17304 <hci_tx_thread+0x164>)
   171d8:	484b      	ldr	r0, [pc, #300]	; (17308 <hci_tx_thread+0x168>)
   171da:	f640 23c8 	movw	r3, #2760	; 0xac8
   171de:	464a      	mov	r2, r9
   171e0:	f00f fffc 	bl	271dc <assert_print>
   171e4:	4040      	eors	r0, r0
   171e6:	f380 8811 	msr	BASEPRI, r0
   171ea:	f04f 0003 	mov.w	r0, #3
   171ee:	df02      	svc	2
{
   171f0:	4e43      	ldr	r6, [pc, #268]	; (17300 <hci_tx_thread+0x160>)
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   171f2:	f04f 0a03 	mov.w	sl, #3
	for (; count; ev++, count--) {
   171f6:	b915      	cbnz	r5, 171fe <hci_tx_thread+0x5e>
	z_impl_k_yield();
   171f8:	f00b fb60 	bl	228bc <z_impl_k_yield>
	while (1) {
   171fc:	e7d8      	b.n	171b0 <hci_tx_thread+0x10>
		switch (ev->state) {
   171fe:	68f3      	ldr	r3, [r6, #12]
   17200:	f3c3 3386 	ubfx	r3, r3, #14, #7
   17204:	2b02      	cmp	r3, #2
   17206:	d960      	bls.n	172ca <hci_tx_thread+0x12a>
   17208:	2b04      	cmp	r3, #4
   1720a:	d168      	bne.n	172de <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
   1720c:	7b33      	ldrb	r3, [r6, #12]
   1720e:	2b00      	cmp	r3, #0
   17210:	d15e      	bne.n	172d0 <hci_tx_thread+0x130>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   17212:	483e      	ldr	r0, [pc, #248]	; (1730c <hci_tx_thread+0x16c>)
   17214:	2200      	movs	r2, #0
   17216:	2300      	movs	r3, #0
   17218:	f011 fdfb 	bl	28e12 <net_buf_get>
	BT_ASSERT(buf);
   1721c:	4604      	mov	r4, r0
   1721e:	b960      	cbnz	r0, 1723a <hci_tx_thread+0x9a>
   17220:	493b      	ldr	r1, [pc, #236]	; (17310 <hci_tx_thread+0x170>)
   17222:	4839      	ldr	r0, [pc, #228]	; (17308 <hci_tx_thread+0x168>)
   17224:	f640 235a 	movw	r3, #2650	; 0xa5a
   17228:	464a      	mov	r2, r9
   1722a:	f00f ffd7 	bl	271dc <assert_print>
   1722e:	4040      	eors	r0, r0
   17230:	f380 8811 	msr	BASEPRI, r0
   17234:	f04f 0003 	mov.w	r0, #3
   17238:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   1723a:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 17330 <hci_tx_thread+0x190>
	return z_impl_k_sem_take(sem, timeout);
   1723e:	4835      	ldr	r0, [pc, #212]	; (17314 <hci_tx_thread+0x174>)
   17240:	f04f 33ff 	mov.w	r3, #4294967295
   17244:	f04f 32ff 	mov.w	r2, #4294967295
   17248:	f009 fe64 	bl	20f14 <z_impl_k_sem_take>
   1724c:	f8db 3138 	ldr.w	r3, [fp, #312]	; 0x138
   17250:	b18b      	cbz	r3, 17276 <hci_tx_thread+0xd6>
		LOG_ERR("Uncleared pending sent_cmd");
   17252:	4b31      	ldr	r3, [pc, #196]	; (17318 <hci_tx_thread+0x178>)
   17254:	4831      	ldr	r0, [pc, #196]	; (1731c <hci_tx_thread+0x17c>)
   17256:	617b      	str	r3, [r7, #20]
   17258:	f107 0210 	add.w	r2, r7, #16
   1725c:	2302      	movs	r3, #2
   1725e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17262:	613b      	str	r3, [r7, #16]
   17264:	f010 fc9f 	bl	27ba6 <z_log_msg_static_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
   17268:	f8db 0138 	ldr.w	r0, [fp, #312]	; 0x138
   1726c:	f004 ffbc 	bl	1c1e8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   17270:	2300      	movs	r3, #0
   17272:	f8cb 3138 	str.w	r3, [fp, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   17276:	4620      	mov	r0, r4
   17278:	f004 fffa 	bl	1c270 <net_buf_ref>
   1727c:	f8cb 0138 	str.w	r0, [fp, #312]	; 0x138
	err = bt_send(buf);
   17280:	4620      	mov	r0, r4
   17282:	f7ff fee5 	bl	17050 <bt_send>
	if (err) {
   17286:	b300      	cbz	r0, 172ca <hci_tx_thread+0x12a>
		LOG_ERR("Unable to send to driver (err %d)", err);
   17288:	46eb      	mov	fp, sp
   1728a:	b088      	sub	sp, #32
   1728c:	466a      	mov	r2, sp
   1728e:	4b24      	ldr	r3, [pc, #144]	; (17320 <hci_tx_thread+0x180>)
   17290:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17294:	2303      	movs	r3, #3
   17296:	f842 3f10 	str.w	r3, [r2, #16]!
   1729a:	4820      	ldr	r0, [pc, #128]	; (1731c <hci_tx_thread+0x17c>)
   1729c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   172a0:	f010 fc81 	bl	27ba6 <z_log_msg_static_create.constprop.0>
   172a4:	46dd      	mov	sp, fp
	z_impl_k_sem_give(sem);
   172a6:	481b      	ldr	r0, [pc, #108]	; (17314 <hci_tx_thread+0x174>)
   172a8:	f009 fdf0 	bl	20e8c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   172ac:	4620      	mov	r0, r4
   172ae:	f004 fd8f 	bl	1bdd0 <net_buf_id>
   172b2:	4b1c      	ldr	r3, [pc, #112]	; (17324 <hci_tx_thread+0x184>)
   172b4:	220c      	movs	r2, #12
   172b6:	fb02 3000 	mla	r0, r2, r0, r3
   172ba:	211f      	movs	r1, #31
   172bc:	8840      	ldrh	r0, [r0, #2]
   172be:	4622      	mov	r2, r4
   172c0:	f7ff fa0c 	bl	166dc <hci_cmd_done>
		net_buf_unref(buf);
   172c4:	4620      	mov	r0, r4
   172c6:	f004 ff8f 	bl	1c1e8 <net_buf_unref>
	for (; count; ev++, count--) {
   172ca:	3614      	adds	r6, #20
   172cc:	3d01      	subs	r5, #1
   172ce:	e792      	b.n	171f6 <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   172d0:	2b01      	cmp	r3, #1
   172d2:	d1fa      	bne.n	172ca <hci_tx_thread+0x12a>
					conn = CONTAINER_OF(ev->fifo,
   172d4:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   172d6:	3838      	subs	r0, #56	; 0x38
   172d8:	f002 f9c8 	bl	1966c <bt_conn_process_tx>
   172dc:	e7f5      	b.n	172ca <hci_tx_thread+0x12a>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   172de:	466c      	mov	r4, sp
   172e0:	b088      	sub	sp, #32
   172e2:	466a      	mov	r2, sp
   172e4:	4910      	ldr	r1, [pc, #64]	; (17328 <hci_tx_thread+0x188>)
   172e6:	480d      	ldr	r0, [pc, #52]	; (1731c <hci_tx_thread+0x17c>)
		switch (ev->state) {
   172e8:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   172ec:	f842 af10 	str.w	sl, [r2, #16]!
   172f0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   172f4:	f010 fc57 	bl	27ba6 <z_log_msg_static_create.constprop.0>
   172f8:	46a5      	mov	sp, r4
   172fa:	e7e6      	b.n	172ca <hci_tx_thread+0x12a>
   172fc:	20000644 	.word	0x20000644
   17300:	20000630 	.word	0x20000630
   17304:	0002b300 	.word	0x0002b300
   17308:	0002ae37 	.word	0x0002ae37
   1730c:	200004cc 	.word	0x200004cc
   17310:	0002d4bb 	.word	0x0002d4bb
   17314:	200004a8 	.word	0x200004a8
   17318:	0002c447 	.word	0x0002c447
   1731c:	00029fd8 	.word	0x00029fd8
   17320:	0002c425 	.word	0x0002c425
   17324:	200034bc 	.word	0x200034bc
   17328:	0002c462 	.word	0x0002c462
   1732c:	0002c179 	.word	0x0002c179
   17330:	20000388 	.word	0x20000388

00017334 <hci_event_prio>:
{
   17334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17338:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   1733a:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   1733e:	4630      	mov	r0, r6
   17340:	f011 fd71 	bl	28e26 <net_buf_simple_headroom>
	state->len = buf->len;
   17344:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   17348:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   1734c:	4605      	mov	r5, r0
   1734e:	d80c      	bhi.n	1736a <hci_event_prio+0x36>
   17350:	4a1c      	ldr	r2, [pc, #112]	; (173c4 <hci_event_prio+0x90>)
   17352:	491d      	ldr	r1, [pc, #116]	; (173c8 <hci_event_prio+0x94>)
   17354:	481d      	ldr	r0, [pc, #116]	; (173cc <hci_event_prio+0x98>)
   17356:	f640 636f 	movw	r3, #3695	; 0xe6f
   1735a:	f00f ff3f 	bl	271dc <assert_print>
   1735e:	4040      	eors	r0, r0
   17360:	f380 8811 	msr	BASEPRI, r0
   17364:	f04f 0003 	mov.w	r0, #3
   17368:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   1736a:	4630      	mov	r0, r6
   1736c:	2102      	movs	r1, #2
   1736e:	f005 f861 	bl	1c434 <net_buf_simple_pull_mem>
   17372:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   17374:	7800      	ldrb	r0, [r0, #0]
   17376:	f010 fbf4 	bl	27b62 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1737a:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1737c:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1737e:	d40c      	bmi.n	1739a <hci_event_prio+0x66>
   17380:	4a10      	ldr	r2, [pc, #64]	; (173c4 <hci_event_prio+0x90>)
   17382:	4913      	ldr	r1, [pc, #76]	; (173d0 <hci_event_prio+0x9c>)
   17384:	4811      	ldr	r0, [pc, #68]	; (173cc <hci_event_prio+0x98>)
   17386:	f640 6373 	movw	r3, #3699	; 0xe73
   1738a:	f00f ff27 	bl	271dc <assert_print>
   1738e:	4040      	eors	r0, r0
   17390:	f380 8811 	msr	BASEPRI, r0
   17394:	f04f 0003 	mov.w	r0, #3
   17398:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   1739a:	2305      	movs	r3, #5
   1739c:	4a0d      	ldr	r2, [pc, #52]	; (173d4 <hci_event_prio+0xa0>)
   1739e:	7838      	ldrb	r0, [r7, #0]
   173a0:	4621      	mov	r1, r4
   173a2:	f7ff f863 	bl	1646c <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   173a6:	07b3      	lsls	r3, r6, #30
   173a8:	d507      	bpl.n	173ba <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   173aa:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   173ac:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   173b0:	fa13 f585 	uxtah	r5, r3, r5
   173b4:	60e5      	str	r5, [r4, #12]
}
   173b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   173ba:	4620      	mov	r0, r4
}
   173bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   173c0:	f004 bf12 	b.w	1c1e8 <net_buf_unref>
   173c4:	0002c179 	.word	0x0002c179
   173c8:	0002c1ad 	.word	0x0002c1ad
   173cc:	0002ae37 	.word	0x0002ae37
   173d0:	0002c483 	.word	0x0002c483
   173d4:	0002a334 	.word	0x0002a334

000173d8 <bt_recv>:
{
   173d8:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   173da:	7e03      	ldrb	r3, [r0, #24]
	switch (bt_buf_get_type(buf)) {
   173dc:	2b01      	cmp	r3, #1
{
   173de:	af00      	add	r7, sp, #0
   173e0:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   173e2:	d006      	beq.n	173f2 <bt_recv+0x1a>
   173e4:	2b03      	cmp	r3, #3
   173e6:	d112      	bne.n	1740e <bt_recv+0x36>
			rx_queue_put(buf);
   173e8:	f7fe ff6c 	bl	162c4 <rx_queue_put>
		return 0;
   173ec:	2000      	movs	r0, #0
}
   173ee:	46bd      	mov	sp, r7
   173f0:	bdb0      	pop	{r4, r5, r7, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   173f2:	68c3      	ldr	r3, [r0, #12]
   173f4:	7818      	ldrb	r0, [r3, #0]
   173f6:	f010 fbb4 	bl	27b62 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   173fa:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   173fc:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   173fe:	d502      	bpl.n	17406 <bt_recv+0x2e>
			hci_event_prio(buf);
   17400:	4620      	mov	r0, r4
   17402:	f7ff ff97 	bl	17334 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   17406:	07ab      	lsls	r3, r5, #30
   17408:	d5f0      	bpl.n	173ec <bt_recv+0x14>
			rx_queue_put(buf);
   1740a:	4620      	mov	r0, r4
   1740c:	e7ec      	b.n	173e8 <bt_recv+0x10>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   1740e:	466d      	mov	r5, sp
   17410:	b088      	sub	sp, #32
   17412:	466a      	mov	r2, sp
   17414:	4908      	ldr	r1, [pc, #32]	; (17438 <bt_recv+0x60>)
   17416:	4809      	ldr	r0, [pc, #36]	; (1743c <bt_recv+0x64>)
	switch (bt_buf_get_type(buf)) {
   17418:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   1741c:	2303      	movs	r3, #3
   1741e:	f842 3f10 	str.w	r3, [r2, #16]!
   17422:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17426:	f010 fbbe 	bl	27ba6 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   1742a:	4620      	mov	r0, r4
   1742c:	46ad      	mov	sp, r5
   1742e:	f004 fedb 	bl	1c1e8 <net_buf_unref>
		return -EINVAL;
   17432:	f06f 0015 	mvn.w	r0, #21
   17436:	e7da      	b.n	173ee <bt_recv+0x16>
   17438:	0002c49c 	.word	0x0002c49c
   1743c:	00029fd8 	.word	0x00029fd8

00017440 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   17440:	4a08      	ldr	r2, [pc, #32]	; (17464 <bt_hci_driver_register+0x24>)
{
   17442:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   17444:	f8d2 0160 	ldr.w	r0, [r2, #352]	; 0x160
   17448:	b930      	cbnz	r0, 17458 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   1744a:	68d9      	ldr	r1, [r3, #12]
   1744c:	b139      	cbz	r1, 1745e <bt_hci_driver_register+0x1e>
   1744e:	6959      	ldr	r1, [r3, #20]
   17450:	b129      	cbz	r1, 1745e <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   17452:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	return 0;
   17456:	4770      	bx	lr
		return -EALREADY;
   17458:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1745c:	4770      	bx	lr
		return -EINVAL;
   1745e:	f06f 0015 	mvn.w	r0, #21
}
   17462:	4770      	bx	lr
   17464:	20000388 	.word	0x20000388

00017468 <bt_finalize_init>:
{
   17468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   1746c:	4c45      	ldr	r4, [pc, #276]	; (17584 <bt_finalize_init+0x11c>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1746e:	4846      	ldr	r0, [pc, #280]	; (17588 <bt_finalize_init+0x120>)
   17470:	4d46      	ldr	r5, [pc, #280]	; (1758c <bt_finalize_init+0x124>)
{
   17472:	b083      	sub	sp, #12
   17474:	2104      	movs	r1, #4
   17476:	af00      	add	r7, sp, #0
   17478:	f010 fb86 	bl	27b88 <atomic_or>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   1747c:	79e2      	ldrb	r2, [r4, #7]
   1747e:	4b44      	ldr	r3, [pc, #272]	; (17590 <bt_finalize_init+0x128>)
   17480:	4620      	mov	r0, r4
   17482:	2a01      	cmp	r2, #1
   17484:	bf88      	it	hi
   17486:	461d      	movhi	r5, r3
   17488:	466e      	mov	r6, sp
   1748a:	f7fe fd91 	bl	15fb0 <bt_addr_le_str>
   1748e:	b08a      	sub	sp, #40	; 0x28
   17490:	466b      	mov	r3, sp
   17492:	4940      	ldr	r1, [pc, #256]	; (17594 <bt_finalize_init+0x12c>)
   17494:	61d8      	str	r0, [r3, #28]
   17496:	e9c3 1505 	strd	r1, r5, [r3, #20]
   1749a:	493f      	ldr	r1, [pc, #252]	; (17598 <bt_finalize_init+0x130>)
   1749c:	6079      	str	r1, [r7, #4]
   1749e:	f103 0210 	add.w	r2, r3, #16
   174a2:	1d38      	adds	r0, r7, #4
   174a4:	f103 011f 	add.w	r1, r3, #31
   174a8:	f103 0523 	add.w	r5, r3, #35	; 0x23
   174ac:	f810 cb01 	ldrb.w	ip, [r0], #1
   174b0:	f801 cf01 	strb.w	ip, [r1, #1]!
   174b4:	42a9      	cmp	r1, r5
   174b6:	d1f9      	bne.n	174ac <bt_finalize_init+0x44>
   174b8:	4938      	ldr	r1, [pc, #224]	; (1759c <bt_finalize_init+0x134>)
   174ba:	6119      	str	r1, [r3, #16]
   174bc:	4838      	ldr	r0, [pc, #224]	; (175a0 <bt_finalize_init+0x138>)
   174be:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 17584 <bt_finalize_init+0x11c>
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   174c2:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 175b4 <bt_finalize_init+0x14c>
   174c6:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 175a0 <bt_finalize_init+0x138>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   174ca:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
   174ce:	f010 fb6a 	bl	27ba6 <z_log_msg_static_create.constprop.0>
   174d2:	46b5      	mov	sp, r6
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   174d4:	4e33      	ldr	r6, [pc, #204]	; (175a4 <bt_finalize_init+0x13c>)
	for (i = 1; i < bt_dev.id_count; i++) {
   174d6:	2501      	movs	r5, #1
   174d8:	79e3      	ldrb	r3, [r4, #7]
   174da:	429d      	cmp	r5, r3
   174dc:	f10b 0b07 	add.w	fp, fp, #7
   174e0:	db39      	blt.n	17556 <bt_finalize_init+0xee>
	LOG_INF("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   174e2:	f894 5070 	ldrb.w	r5, [r4, #112]	; 0x70
   174e6:	4628      	mov	r0, r5
   174e8:	f7fe fe70 	bl	161cc <ver_str>
   174ec:	466e      	mov	r6, sp
   174ee:	b08c      	sub	sp, #48	; 0x30
   174f0:	f8b4 1072 	ldrh.w	r1, [r4, #114]	; 0x72
   174f4:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
   174f8:	466a      	mov	r2, sp
   174fa:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 175b8 <bt_finalize_init+0x150>
   174fe:	6253      	str	r3, [r2, #36]	; 0x24
   17500:	e9c2 5107 	strd	r5, r1, [r2, #28]
   17504:	4b28      	ldr	r3, [pc, #160]	; (175a8 <bt_finalize_init+0x140>)
   17506:	f44f 7500 	mov.w	r5, #512	; 0x200
   1750a:	e9c2 c005 	strd	ip, r0, [r2, #20]
   1750e:	8515      	strh	r5, [r2, #40]	; 0x28
   17510:	f44f 5153 	mov.w	r1, #13504	; 0x34c0
   17514:	f842 3f10 	str.w	r3, [r2, #16]!
   17518:	4821      	ldr	r0, [pc, #132]	; (175a0 <bt_finalize_init+0x138>)
   1751a:	f010 fb44 	bl	27ba6 <z_log_msg_static_create.constprop.0>
   1751e:	46b5      	mov	sp, r6
	LOG_INF("LMP: version %s (0x%02x) subver 0x%04x", ver_str(bt_dev.lmp_version),
   17520:	f894 6071 	ldrb.w	r6, [r4, #113]	; 0x71
   17524:	4630      	mov	r0, r6
   17526:	f7fe fe51 	bl	161cc <ver_str>
   1752a:	b08a      	sub	sp, #40	; 0x28
   1752c:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
   17530:	466a      	mov	r2, sp
   17532:	491e      	ldr	r1, [pc, #120]	; (175ac <bt_finalize_init+0x144>)
   17534:	8495      	strh	r5, [r2, #36]	; 0x24
   17536:	e9c2 6307 	strd	r6, r3, [r2, #28]
   1753a:	4b1d      	ldr	r3, [pc, #116]	; (175b0 <bt_finalize_init+0x148>)
   1753c:	e9c2 1005 	strd	r1, r0, [r2, #20]
   17540:	f842 3f10 	str.w	r3, [r2, #16]!
   17544:	4816      	ldr	r0, [pc, #88]	; (175a0 <bt_finalize_init+0x138>)
   17546:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
   1754a:	f010 fb2c 	bl	27ba6 <z_log_msg_static_create.constprop.0>
}
   1754e:	370c      	adds	r7, #12
   17550:	46bd      	mov	sp, r7
   17552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   17556:	4658      	mov	r0, fp
   17558:	f7fe fd2a 	bl	15fb0 <bt_addr_le_str>
   1755c:	46ea      	mov	sl, sp
   1755e:	b08a      	sub	sp, #40	; 0x28
   17560:	466a      	mov	r2, sp
   17562:	f240 3301 	movw	r3, #769	; 0x301
   17566:	e9c2 6505 	strd	r6, r5, [r2, #20]
   1756a:	61d0      	str	r0, [r2, #28]
   1756c:	8413      	strh	r3, [r2, #32]
   1756e:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   17572:	f842 8f10 	str.w	r8, [r2, #16]!
   17576:	4648      	mov	r0, r9
   17578:	f010 fb15 	bl	27ba6 <z_log_msg_static_create.constprop.0>
	for (i = 1; i < bt_dev.id_count; i++) {
   1757c:	3501      	adds	r5, #1
   1757e:	46d5      	mov	sp, sl
   17580:	e7aa      	b.n	174d8 <bt_finalize_init+0x70>
   17582:	bf00      	nop
   17584:	20000388 	.word	0x20000388
   17588:	2000045c 	.word	0x2000045c
   1758c:	0002d4a0 	.word	0x0002d4a0
   17590:	0002c4b0 	.word	0x0002c4b0
   17594:	0002c4b4 	.word	0x0002c4b4
   17598:	03010200 	.word	0x03010200
   1759c:	02000004 	.word	0x02000004
   175a0:	00029fd8 	.word	0x00029fd8
   175a4:	0002c4c3 	.word	0x0002c4c3
   175a8:	01000006 	.word	0x01000006
   175ac:	0002c512 	.word	0x0002c512
   175b0:	01000005 	.word	0x01000005
   175b4:	01000004 	.word	0x01000004
   175b8:	0002c4d4 	.word	0x0002c4d4

000175bc <bt_init>:
{
   175bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   175be:	4dc0      	ldr	r5, [pc, #768]	; (178c0 <bt_init+0x304>)
{
   175c0:	b089      	sub	sp, #36	; 0x24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   175c2:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   175c6:	6899      	ldr	r1, [r3, #8]
   175c8:	f011 0101 	ands.w	r1, r1, #1
{
   175cc:	af00      	add	r7, sp, #0
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   175ce:	d122      	bne.n	17616 <bt_init+0x5a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   175d0:	f107 0208 	add.w	r2, r7, #8
   175d4:	f640 4003 	movw	r0, #3075	; 0xc03
   175d8:	f7ff fabc 	bl	16b54 <bt_hci_cmd_send_sync>
		if (err) {
   175dc:	4604      	mov	r4, r0
   175de:	2800      	cmp	r0, #0
   175e0:	d170      	bne.n	176c4 <bt_init+0x108>
		hci_reset_complete(rsp);
   175e2:	68b8      	ldr	r0, [r7, #8]
	uint8_t status = buf->data[0];
   175e4:	68c3      	ldr	r3, [r0, #12]
	if (status) {
   175e6:	781b      	ldrb	r3, [r3, #0]
   175e8:	b99b      	cbnz	r3, 17612 <bt_init+0x56>
   175ea:	f3bf 8f5b 	dmb	ish
   175ee:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
   175f2:	f3bf 8f5b 	dmb	ish
   175f6:	f105 02d4 	add.w	r2, r5, #212	; 0xd4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   175fa:	f003 0309 	and.w	r3, r3, #9
   175fe:	f3bf 8f5b 	dmb	ish
   17602:	e852 1f00 	ldrex	r1, [r2]
   17606:	e842 3400 	strex	r4, r3, [r2]
   1760a:	2c00      	cmp	r4, #0
   1760c:	d1f9      	bne.n	17602 <bt_init+0x46>
   1760e:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   17612:	f004 fde9 	bl	1c1e8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   17616:	f107 0208 	add.w	r2, r7, #8
   1761a:	2100      	movs	r1, #0
   1761c:	f241 0003 	movw	r0, #4099	; 0x1003
   17620:	f7ff fa98 	bl	16b54 <bt_hci_cmd_send_sync>
	if (err) {
   17624:	4604      	mov	r4, r0
   17626:	2800      	cmp	r0, #0
   17628:	d14c      	bne.n	176c4 <bt_init+0x108>
	read_local_features_complete(rsp);
   1762a:	68be      	ldr	r6, [r7, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   1762c:	48a5      	ldr	r0, [pc, #660]	; (178c4 <bt_init+0x308>)
   1762e:	68f1      	ldr	r1, [r6, #12]
   17630:	2208      	movs	r2, #8
   17632:	3101      	adds	r1, #1
   17634:	f010 f9fa 	bl	27a2c <memcpy>
	net_buf_unref(rsp);
   17638:	4630      	mov	r0, r6
   1763a:	f004 fdd5 	bl	1c1e8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   1763e:	4621      	mov	r1, r4
   17640:	f107 0208 	add.w	r2, r7, #8
   17644:	f241 0001 	movw	r0, #4097	; 0x1001
   17648:	f7ff fa84 	bl	16b54 <bt_hci_cmd_send_sync>
	if (err) {
   1764c:	4604      	mov	r4, r0
   1764e:	2800      	cmp	r0, #0
   17650:	d138      	bne.n	176c4 <bt_init+0x108>
	read_local_ver_complete(rsp);
   17652:	68b8      	ldr	r0, [r7, #8]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   17654:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
   17656:	785a      	ldrb	r2, [r3, #1]
   17658:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   1765c:	885a      	ldrh	r2, [r3, #2]
   1765e:	f8a5 2072 	strh.w	r2, [r5, #114]	; 0x72
	bt_dev.lmp_version = rp->lmp_version;
   17662:	791a      	ldrb	r2, [r3, #4]
   17664:	f885 2071 	strb.w	r2, [r5, #113]	; 0x71
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   17668:	f8b3 2007 	ldrh.w	r2, [r3, #7]
   1766c:	f8a5 2074 	strh.w	r2, [r5, #116]	; 0x74
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   17670:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   17674:	f8a5 3076 	strh.w	r3, [r5, #118]	; 0x76
	net_buf_unref(rsp);
   17678:	f004 fdb6 	bl	1c1e8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   1767c:	4621      	mov	r1, r4
   1767e:	f107 0208 	add.w	r2, r7, #8
   17682:	f241 0002 	movw	r0, #4098	; 0x1002
   17686:	f7ff fa65 	bl	16b54 <bt_hci_cmd_send_sync>
	if (err) {
   1768a:	4604      	mov	r4, r0
   1768c:	b9d0      	cbnz	r0, 176c4 <bt_init+0x108>
	read_supported_commands_complete(rsp);
   1768e:	68be      	ldr	r6, [r7, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   17690:	488d      	ldr	r0, [pc, #564]	; (178c8 <bt_init+0x30c>)
   17692:	68f1      	ldr	r1, [r6, #12]
   17694:	2240      	movs	r2, #64	; 0x40
   17696:	3101      	adds	r1, #1
   17698:	f010 f9c8 	bl	27a2c <memcpy>
	net_buf_unref(rsp);
   1769c:	4630      	mov	r0, r6
   1769e:	f004 fda3 	bl	1c1e8 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   176a2:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
   176a6:	065e      	lsls	r6, r3, #25
   176a8:	d410      	bmi.n	176cc <bt_init+0x110>
		LOG_ERR("Non-LE capable controller detected!");
   176aa:	4b88      	ldr	r3, [pc, #544]	; (178cc <bt_init+0x310>)
   176ac:	61fb      	str	r3, [r7, #28]
   176ae:	2302      	movs	r3, #2
   176b0:	4887      	ldr	r0, [pc, #540]	; (178d0 <bt_init+0x314>)
   176b2:	61bb      	str	r3, [r7, #24]
   176b4:	f107 0218 	add.w	r2, r7, #24
   176b8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   176bc:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("Non-LE capable controller detected!");
   176c0:	f010 fa71 	bl	27ba6 <z_log_msg_static_create.constprop.0>
}
   176c4:	4620      	mov	r0, r4
   176c6:	3724      	adds	r7, #36	; 0x24
   176c8:	46bd      	mov	sp, r7
   176ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   176cc:	4621      	mov	r1, r4
   176ce:	f107 0208 	add.w	r2, r7, #8
   176d2:	f242 0003 	movw	r0, #8195	; 0x2003
   176d6:	f7ff fa3d 	bl	16b54 <bt_hci_cmd_send_sync>
	if (err) {
   176da:	4604      	mov	r4, r0
   176dc:	2800      	cmp	r0, #0
   176de:	d1f1      	bne.n	176c4 <bt_init+0x108>
	read_le_features_complete(rsp);
   176e0:	68be      	ldr	r6, [r7, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   176e2:	487c      	ldr	r0, [pc, #496]	; (178d4 <bt_init+0x318>)
   176e4:	68f1      	ldr	r1, [r6, #12]
   176e6:	2208      	movs	r2, #8
   176e8:	3101      	adds	r1, #1
   176ea:	f010 f99f 	bl	27a2c <memcpy>
	net_buf_unref(rsp);
   176ee:	4630      	mov	r0, r6
   176f0:	f004 fd7a 	bl	1c1e8 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   176f4:	4621      	mov	r1, r4
   176f6:	f107 0208 	add.w	r2, r7, #8
   176fa:	f242 0002 	movw	r0, #8194	; 0x2002
   176fe:	f7ff fa29 	bl	16b54 <bt_hci_cmd_send_sync>
		if (err) {
   17702:	4604      	mov	r4, r0
   17704:	2800      	cmp	r0, #0
   17706:	d1dd      	bne.n	176c4 <bt_init+0x108>
		le_read_buffer_size_complete(rsp);
   17708:	68bc      	ldr	r4, [r7, #8]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   1770a:	68e3      	ldr	r3, [r4, #12]
	uint16_t acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   1770c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   17710:	b291      	uxth	r1, r2
	if (!acl_mtu || !rp->le_max_num) {
   17712:	b141      	cbz	r1, 17726 <bt_init+0x16a>
   17714:	78d9      	ldrb	r1, [r3, #3]
   17716:	b131      	cbz	r1, 17726 <bt_init+0x16a>
	bt_dev.le.acl_mtu = acl_mtu;
   17718:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   1771c:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1771e:	486e      	ldr	r0, [pc, #440]	; (178d8 <bt_init+0x31c>)
   17720:	4611      	mov	r1, r2
   17722:	f012 f8c1 	bl	298a8 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   17726:	4620      	mov	r0, r4
   17728:	f004 fd5e 	bl	1c1e8 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1772c:	f895 607c 	ldrb.w	r6, [r5, #124]	; 0x7c
   17730:	f016 0620 	ands.w	r6, r6, #32
   17734:	d118      	bne.n	17768 <bt_init+0x1ac>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   17736:	2102      	movs	r1, #2
   17738:	f640 406d 	movw	r0, #3181	; 0xc6d
   1773c:	f7ff f9bc 	bl	16ab8 <bt_hci_cmd_create>
		if (!buf) {
   17740:	4604      	mov	r4, r0
   17742:	2800      	cmp	r0, #0
   17744:	f000 80a8 	beq.w	17898 <bt_init+0x2dc>
	return net_buf_simple_add(&buf->b, len);
   17748:	2102      	movs	r1, #2
   1774a:	300c      	adds	r0, #12
   1774c:	f004 fe90 	bl	1c470 <net_buf_simple_add>
		cp_le->le = 0x01;
   17750:	2301      	movs	r3, #1
   17752:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   17754:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   17756:	4621      	mov	r1, r4
   17758:	4632      	mov	r2, r6
   1775a:	f640 406d 	movw	r0, #3181	; 0xc6d
   1775e:	f7ff f9f9 	bl	16b54 <bt_hci_cmd_send_sync>
		if (err) {
   17762:	4604      	mov	r4, r0
   17764:	2800      	cmp	r0, #0
   17766:	d1ad      	bne.n	176c4 <bt_init+0x108>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   17768:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
   1776c:	071c      	lsls	r4, r3, #28
   1776e:	d513      	bpl.n	17798 <bt_init+0x1dc>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   17770:	f107 0208 	add.w	r2, r7, #8
   17774:	2100      	movs	r1, #0
   17776:	f242 001c 	movw	r0, #8220	; 0x201c
   1777a:	f7ff f9eb 	bl	16b54 <bt_hci_cmd_send_sync>
		if (err) {
   1777e:	4604      	mov	r4, r0
   17780:	2800      	cmp	r0, #0
   17782:	d19f      	bne.n	176c4 <bt_init+0x108>
		le_read_supp_states_complete(rsp);
   17784:	68b8      	ldr	r0, [r7, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   17786:	68c3      	ldr	r3, [r0, #12]
   17788:	f8d3 2001 	ldr.w	r2, [r3, #1]
   1778c:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   17790:	e9c5 2338 	strd	r2, r3, [r5, #224]	; 0xe0
		net_buf_unref(rsp);
   17794:	f004 fd28 	bl	1c1e8 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   17798:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   1779c:	0698      	lsls	r0, r3, #26
   1779e:	d520      	bpl.n	177e2 <bt_init+0x226>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   177a0:	1d39      	adds	r1, r7, #4
   177a2:	1cb8      	adds	r0, r7, #2
   177a4:	f7ff fa56 	bl	16c54 <hci_le_read_max_data_len>
		if (err) {
   177a8:	4604      	mov	r4, r0
   177aa:	2800      	cmp	r0, #0
   177ac:	d18a      	bne.n	176c4 <bt_init+0x108>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   177ae:	2104      	movs	r1, #4
   177b0:	f242 0024 	movw	r0, #8228	; 0x2024
   177b4:	f7ff f980 	bl	16ab8 <bt_hci_cmd_create>
		if (!buf) {
   177b8:	4606      	mov	r6, r0
   177ba:	2800      	cmp	r0, #0
   177bc:	d06c      	beq.n	17898 <bt_init+0x2dc>
   177be:	2104      	movs	r1, #4
   177c0:	300c      	adds	r0, #12
   177c2:	f004 fe55 	bl	1c470 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   177c6:	887b      	ldrh	r3, [r7, #2]
   177c8:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   177ca:	88bb      	ldrh	r3, [r7, #4]
   177cc:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   177ce:	4622      	mov	r2, r4
   177d0:	4631      	mov	r1, r6
   177d2:	f242 0024 	movw	r0, #8228	; 0x2024
   177d6:	f7ff f9bd 	bl	16b54 <bt_hci_cmd_send_sync>
		if (err) {
   177da:	4604      	mov	r4, r0
   177dc:	2800      	cmp	r0, #0
   177de:	f47f af71 	bne.w	176c4 <bt_init+0x108>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   177e2:	2108      	movs	r1, #8
   177e4:	f242 0001 	movw	r0, #8193	; 0x2001
   177e8:	f7ff f966 	bl	16ab8 <bt_hci_cmd_create>
	if (!buf) {
   177ec:	4604      	mov	r4, r0
   177ee:	2800      	cmp	r0, #0
   177f0:	d052      	beq.n	17898 <bt_init+0x2dc>
   177f2:	2108      	movs	r1, #8
   177f4:	300c      	adds	r0, #12
   177f6:	f004 fe3b 	bl	1c470 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   177fa:	f895 20d8 	ldrb.w	r2, [r5, #216]	; 0xd8
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   177fe:	f012 0f02 	tst.w	r2, #2
   17802:	bf14      	ite	ne
   17804:	232f      	movne	r3, #47	; 0x2f
   17806:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   17808:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   1780a:	f895 20d9 	ldrb.w	r2, [r5, #217]	; 0xd9
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   1780e:	bf48      	it	mi
   17810:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   17814:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   17818:	bf18      	it	ne
   1781a:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
   1781e:	2200      	movs	r2, #0
   17820:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   17822:	f3c3 2307 	ubfx	r3, r3, #8, #8
   17826:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   17828:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   1782a:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   1782c:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   1782e:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   17830:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   17832:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   17834:	4621      	mov	r1, r4
   17836:	f242 0001 	movw	r0, #8193	; 0x2001
   1783a:	f7ff f98b 	bl	16b54 <bt_hci_cmd_send_sync>
	if (err) {
   1783e:	4604      	mov	r4, r0
   17840:	2800      	cmp	r0, #0
   17842:	f47f af3f 	bne.w	176c4 <bt_init+0x108>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   17846:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
	if (bt_dev.le.acl_mtu) {
   1784a:	f8b5 1104 	ldrh.w	r1, [r5, #260]	; 0x104
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1784e:	069a      	lsls	r2, r3, #26
   17850:	d425      	bmi.n	1789e <bt_init+0x2e2>
	if (bt_dev.le.acl_mtu) {
   17852:	b9d1      	cbnz	r1, 1788a <bt_init+0x2ce>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   17854:	f107 0208 	add.w	r2, r7, #8
   17858:	f241 0005 	movw	r0, #4101	; 0x1005
   1785c:	f7ff f97a 	bl	16b54 <bt_hci_cmd_send_sync>
	if (err) {
   17860:	4604      	mov	r4, r0
   17862:	2800      	cmp	r0, #0
   17864:	f47f af2e 	bne.w	176c4 <bt_init+0x108>
	if (bt_dev.le.acl_mtu) {
   17868:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	read_buffer_size_complete(rsp);
   1786c:	68bc      	ldr	r4, [r7, #8]
	if (bt_dev.le.acl_mtu) {
   1786e:	b94b      	cbnz	r3, 17884 <bt_init+0x2c8>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   17870:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   17872:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   17876:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   1787a:	889a      	ldrh	r2, [r3, #4]
   1787c:	4816      	ldr	r0, [pc, #88]	; (178d8 <bt_init+0x31c>)
   1787e:	4611      	mov	r1, r2
   17880:	f012 f812 	bl	298a8 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   17884:	4620      	mov	r0, r4
   17886:	f004 fcaf 	bl	1c1e8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   1788a:	2108      	movs	r1, #8
   1788c:	f640 4001 	movw	r0, #3073	; 0xc01
   17890:	f7ff f912 	bl	16ab8 <bt_hci_cmd_create>
	if (!buf) {
   17894:	4604      	mov	r4, r0
   17896:	bb18      	cbnz	r0, 178e0 <bt_init+0x324>
		return -ENOBUFS;
   17898:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1789c:	e712      	b.n	176c4 <bt_init+0x108>
	else if (!bt_dev.le.acl_mtu) {
   1789e:	2900      	cmp	r1, #0
   178a0:	d1f3      	bne.n	1788a <bt_init+0x2ce>
		LOG_ERR("ACL BR/EDR buffers not initialized");
   178a2:	4b0e      	ldr	r3, [pc, #56]	; (178dc <bt_init+0x320>)
   178a4:	61fb      	str	r3, [r7, #28]
   178a6:	2302      	movs	r3, #2
   178a8:	4809      	ldr	r0, [pc, #36]	; (178d0 <bt_init+0x314>)
   178aa:	61bb      	str	r3, [r7, #24]
   178ac:	f107 0218 	add.w	r2, r7, #24
   178b0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   178b4:	f010 f977 	bl	27ba6 <z_log_msg_static_create.constprop.0>
		return -EIO;
   178b8:	f06f 0404 	mvn.w	r4, #4
   178bc:	e702      	b.n	176c4 <bt_init+0x108>
   178be:	bf00      	nop
   178c0:	20000388 	.word	0x20000388
   178c4:	20000400 	.word	0x20000400
   178c8:	20000408 	.word	0x20000408
   178cc:	0002c539 	.word	0x0002c539
   178d0:	00029fd8 	.word	0x00029fd8
   178d4:	20000460 	.word	0x20000460
   178d8:	20000490 	.word	0x20000490
   178dc:	0002c55d 	.word	0x0002c55d
   178e0:	2108      	movs	r1, #8
   178e2:	300c      	adds	r0, #12
   178e4:	f004 fdc4 	bl	1c470 <net_buf_simple_add>
	dst[0] = val;
   178e8:	2310      	movs	r3, #16
   178ea:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   178ec:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
   178ee:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   178f0:	7043      	strb	r3, [r0, #1]
   178f2:	2602      	movs	r6, #2
   178f4:	2320      	movs	r3, #32
	dst[0] = val;
   178f6:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   178f8:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
   178fa:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   178fc:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   178fe:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   17900:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   17902:	4621      	mov	r1, r4
   17904:	f640 4001 	movw	r0, #3073	; 0xc01
   17908:	f7ff f924 	bl	16b54 <bt_hci_cmd_send_sync>
	if (err) {
   1790c:	4604      	mov	r4, r0
   1790e:	2800      	cmp	r0, #0
   17910:	f47f aed8 	bne.w	176c4 <bt_init+0x108>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   17914:	4601      	mov	r1, r0
   17916:	1d3a      	adds	r2, r7, #4
   17918:	f64f 4001 	movw	r0, #64513	; 0xfc01
   1791c:	f7ff f91a 	bl	16b54 <bt_hci_cmd_send_sync>
	if (err) {
   17920:	b1c0      	cbz	r0, 17954 <bt_init+0x398>
		LOG_WRN("Vendor HCI extensions not available");
   17922:	4b57      	ldr	r3, [pc, #348]	; (17a80 <bt_init+0x4c4>)
   17924:	e9c7 6306 	strd	r6, r3, [r7, #24]
			LOG_WRN("Failed to read supported vendor features");
   17928:	4856      	ldr	r0, [pc, #344]	; (17a84 <bt_init+0x4c8>)
   1792a:	f107 0218 	add.w	r2, r7, #24
   1792e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17932:	f010 f938 	bl	27ba6 <z_log_msg_static_create.constprop.0>
	err = bt_id_init();
   17936:	f000 fb69 	bl	1800c <bt_id_init>
	if (err) {
   1793a:	4604      	mov	r4, r0
   1793c:	2800      	cmp	r0, #0
   1793e:	f47f aec1 	bne.w	176c4 <bt_init+0x108>
		err = bt_conn_init();
   17942:	f001 ff21 	bl	19788 <bt_conn_init>
		if (err) {
   17946:	4604      	mov	r4, r0
   17948:	2800      	cmp	r0, #0
   1794a:	f47f aebb 	bne.w	176c4 <bt_init+0x108>
	bt_finalize_init();
   1794e:	f7ff fd8b 	bl	17468 <bt_finalize_init>
	return 0;
   17952:	e6b7      	b.n	176c4 <bt_init+0x108>
	rp.info = (void *)rsp->data;
   17954:	687b      	ldr	r3, [r7, #4]
   17956:	68dc      	ldr	r4, [r3, #12]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   17958:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
   1795c:	2b03      	cmp	r3, #3
		return plat_str[platform];
   1795e:	bf96      	itet	ls
   17960:	4a49      	ldrls	r2, [pc, #292]	; (17a88 <bt_init+0x4cc>)
	return "unknown";
   17962:	494a      	ldrhi	r1, [pc, #296]	; (17a8c <bt_init+0x4d0>)
		return plat_str[platform];
   17964:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   17968:	466e      	mov	r6, sp
   1796a:	b08a      	sub	sp, #40	; 0x28
   1796c:	466a      	mov	r2, sp
   1796e:	4848      	ldr	r0, [pc, #288]	; (17a90 <bt_init+0x4d4>)
   17970:	61d3      	str	r3, [r2, #28]
   17972:	f44f 7300 	mov.w	r3, #512	; 0x200
   17976:	8413      	strh	r3, [r2, #32]
   17978:	4b46      	ldr	r3, [pc, #280]	; (17a94 <bt_init+0x4d8>)
   1797a:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1797e:	f842 3f10 	str.w	r3, [r2, #16]!
   17982:	4840      	ldr	r0, [pc, #256]	; (17a84 <bt_init+0x4c8>)
   17984:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   17988:	f010 f90d 	bl	27ba6 <z_log_msg_static_create.constprop.0>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   1798c:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	LOG_INF("HW Variant: %s (0x%04x)",
   17990:	f8b4 3003 	ldrh.w	r3, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   17994:	2a02      	cmp	r2, #2
   17996:	46b5      	mov	sp, r6
   17998:	d14c      	bne.n	17a34 <bt_init+0x478>
	if (variant < ARRAY_SIZE(nordic_str)) {
   1799a:	2b03      	cmp	r3, #3
   1799c:	d84a      	bhi.n	17a34 <bt_init+0x478>
		return nordic_str[variant];
   1799e:	4a3e      	ldr	r2, [pc, #248]	; (17a98 <bt_init+0x4dc>)
   179a0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Variant: %s (0x%04x)",
   179a4:	466e      	mov	r6, sp
   179a6:	b08a      	sub	sp, #40	; 0x28
   179a8:	466a      	mov	r2, sp
   179aa:	483c      	ldr	r0, [pc, #240]	; (17a9c <bt_init+0x4e0>)
   179ac:	61d3      	str	r3, [r2, #28]
   179ae:	f44f 7300 	mov.w	r3, #512	; 0x200
   179b2:	8413      	strh	r3, [r2, #32]
   179b4:	4b37      	ldr	r3, [pc, #220]	; (17a94 <bt_init+0x4d8>)
   179b6:	e9c2 0105 	strd	r0, r1, [r2, #20]
   179ba:	f842 3f10 	str.w	r3, [r2, #16]!
   179be:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   179c2:	4830      	ldr	r0, [pc, #192]	; (17a84 <bt_init+0x4c8>)
   179c4:	f010 f8ef 	bl	27ba6 <z_log_msg_static_create.constprop.0>
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   179c8:	7963      	ldrb	r3, [r4, #5]
   179ca:	f894 c006 	ldrb.w	ip, [r4, #6]
   179ce:	f8d4 0009 	ldr.w	r0, [r4, #9]
	if (variant < ARRAY_SIZE(var_str)) {
   179d2:	2b03      	cmp	r3, #3
   179d4:	46b5      	mov	sp, r6
		return var_str[variant];
   179d6:	bf98      	it	ls
   179d8:	4a31      	ldrls	r2, [pc, #196]	; (17aa0 <bt_init+0x4e4>)
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   179da:	f8b4 6007 	ldrh.w	r6, [r4, #7]
		return var_str[variant];
   179de:	bf94      	ite	ls
   179e0:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	return "unknown";
   179e4:	4929      	ldrhi	r1, [pc, #164]	; (17a8c <bt_init+0x4d0>)
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   179e6:	466c      	mov	r4, sp
   179e8:	b08c      	sub	sp, #48	; 0x30
   179ea:	466a      	mov	r2, sp
   179ec:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 17ab8 <bt_init+0x4fc>
   179f0:	e9c2 3c07 	strd	r3, ip, [r2, #28]
   179f4:	f44f 7300 	mov.w	r3, #512	; 0x200
   179f8:	8593      	strh	r3, [r2, #44]	; 0x2c
   179fa:	4b2a      	ldr	r3, [pc, #168]	; (17aa4 <bt_init+0x4e8>)
   179fc:	e9c2 e105 	strd	lr, r1, [r2, #20]
   17a00:	e9c2 6009 	strd	r6, r0, [r2, #36]	; 0x24
   17a04:	f44f 5173 	mov.w	r1, #15552	; 0x3cc0
   17a08:	f842 3f10 	str.w	r3, [r2, #16]!
   17a0c:	481d      	ldr	r0, [pc, #116]	; (17a84 <bt_init+0x4c8>)
   17a0e:	f010 f8ca 	bl	27ba6 <z_log_msg_static_create.constprop.0>
   17a12:	46a5      	mov	sp, r4
	net_buf_unref(rsp);
   17a14:	6878      	ldr	r0, [r7, #4]
   17a16:	f004 fbe7 	bl	1c1e8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   17a1a:	1d3a      	adds	r2, r7, #4
   17a1c:	2100      	movs	r1, #0
   17a1e:	f64f 4002 	movw	r0, #64514	; 0xfc02
   17a22:	f7ff f897 	bl	16b54 <bt_hci_cmd_send_sync>
	if (err) {
   17a26:	4604      	mov	r4, r0
   17a28:	b130      	cbz	r0, 17a38 <bt_init+0x47c>
		LOG_WRN("Failed to read supported vendor commands");
   17a2a:	4b1f      	ldr	r3, [pc, #124]	; (17aa8 <bt_init+0x4ec>)
			LOG_WRN("Failed to read supported vendor features");
   17a2c:	61fb      	str	r3, [r7, #28]
   17a2e:	2302      	movs	r3, #2
   17a30:	61bb      	str	r3, [r7, #24]
   17a32:	e779      	b.n	17928 <bt_init+0x36c>
		return "unknown";
   17a34:	4915      	ldr	r1, [pc, #84]	; (17a8c <bt_init+0x4d0>)
   17a36:	e7b5      	b.n	179a4 <bt_init+0x3e8>
	rp.cmds = (void *)rsp->data;
   17a38:	687e      	ldr	r6, [r7, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   17a3a:	481c      	ldr	r0, [pc, #112]	; (17aac <bt_init+0x4f0>)
   17a3c:	68f1      	ldr	r1, [r6, #12]
   17a3e:	2202      	movs	r2, #2
   17a40:	3101      	adds	r1, #1
   17a42:	f00f fff3 	bl	27a2c <memcpy>
	net_buf_unref(rsp);
   17a46:	4630      	mov	r0, r6
   17a48:	f004 fbce 	bl	1c1e8 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   17a4c:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   17a50:	075b      	lsls	r3, r3, #29
   17a52:	f57f af70 	bpl.w	17936 <bt_init+0x37a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   17a56:	1d3a      	adds	r2, r7, #4
   17a58:	4621      	mov	r1, r4
   17a5a:	f64f 4003 	movw	r0, #64515	; 0xfc03
   17a5e:	f7ff f879 	bl	16b54 <bt_hci_cmd_send_sync>
		if (err) {
   17a62:	b108      	cbz	r0, 17a68 <bt_init+0x4ac>
			LOG_WRN("Failed to read supported vendor features");
   17a64:	4b12      	ldr	r3, [pc, #72]	; (17ab0 <bt_init+0x4f4>)
   17a66:	e7e1      	b.n	17a2c <bt_init+0x470>
		rp.feat = (void *)rsp->data;
   17a68:	687c      	ldr	r4, [r7, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   17a6a:	4812      	ldr	r0, [pc, #72]	; (17ab4 <bt_init+0x4f8>)
   17a6c:	68e1      	ldr	r1, [r4, #12]
   17a6e:	2201      	movs	r2, #1
   17a70:	4411      	add	r1, r2
   17a72:	f00f ffdb 	bl	27a2c <memcpy>
		net_buf_unref(rsp);
   17a76:	4620      	mov	r0, r4
   17a78:	f004 fbb6 	bl	1c1e8 <net_buf_unref>
   17a7c:	e75b      	b.n	17936 <bt_init+0x37a>
   17a7e:	bf00      	nop
   17a80:	0002c580 	.word	0x0002c580
   17a84:	00029fd8 	.word	0x00029fd8
   17a88:	0002a324 	.word	0x0002a324
   17a8c:	0002c062 	.word	0x0002c062
   17a90:	0002c5a4 	.word	0x0002c5a4
   17a94:	01000004 	.word	0x01000004
   17a98:	0002a314 	.word	0x0002a314
   17a9c:	0002c5bd 	.word	0x0002c5bd
   17aa0:	0002a304 	.word	0x0002a304
   17aa4:	01000007 	.word	0x01000007
   17aa8:	0002c602 	.word	0x0002c602
   17aac:	20000449 	.word	0x20000449
   17ab0:	0002c62b 	.word	0x0002c62b
   17ab4:	20000448 	.word	0x20000448
   17ab8:	0002c5d5 	.word	0x0002c5d5

00017abc <init_work>:
{
   17abc:	b510      	push	{r4, lr}
	err = bt_init();
   17abe:	f7ff fd7d 	bl	175bc <bt_init>
	if (ready_cb) {
   17ac2:	4b03      	ldr	r3, [pc, #12]	; (17ad0 <init_work+0x14>)
   17ac4:	681b      	ldr	r3, [r3, #0]
   17ac6:	b113      	cbz	r3, 17ace <init_work+0x12>
}
   17ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   17acc:	4718      	bx	r3
}
   17ace:	bd10      	pop	{r4, pc}
   17ad0:	200034d4 	.word	0x200034d4

00017ad4 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   17ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (!bt_dev.drv) {
   17ad6:	4d3c      	ldr	r5, [pc, #240]	; (17bc8 <bt_enable+0xf4>)
{
   17ad8:	b08f      	sub	sp, #60	; 0x3c
	if (!bt_dev.drv) {
   17ada:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
{
   17ade:	af08      	add	r7, sp, #32
   17ae0:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   17ae2:	b983      	cbnz	r3, 17b06 <bt_enable+0x32>
		LOG_ERR("No HCI driver registered");
   17ae4:	4b39      	ldr	r3, [pc, #228]	; (17bcc <bt_enable+0xf8>)
   17ae6:	617b      	str	r3, [r7, #20]
   17ae8:	4839      	ldr	r0, [pc, #228]	; (17bd0 <bt_enable+0xfc>)
   17aea:	2302      	movs	r3, #2
   17aec:	f107 0210 	add.w	r2, r7, #16
   17af0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   17af4:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("No HCI driver registered");
   17af8:	613b      	str	r3, [r7, #16]
   17afa:	f010 f854 	bl	27ba6 <z_log_msg_static_create.constprop.0>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   17afe:	4620      	mov	r0, r4
   17b00:	371c      	adds	r7, #28
   17b02:	46bd      	mov	sp, r7
   17b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17b06:	f06f 0102 	mvn.w	r1, #2
   17b0a:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
   17b0e:	f010 f84d 	bl	27bac <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   17b12:	2101      	movs	r1, #1
   17b14:	f010 f838 	bl	27b88 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   17b18:	ea10 0401 	ands.w	r4, r0, r1
   17b1c:	d150      	bne.n	17bc0 <bt_enable+0xec>
	ready_cb = cb;
   17b1e:	4b2d      	ldr	r3, [pc, #180]	; (17bd4 <bt_enable+0x100>)
   17b20:	601e      	str	r6, [r3, #0]
   17b22:	460a      	mov	r2, r1
   17b24:	f505 7090 	add.w	r0, r5, #288	; 0x120
   17b28:	f011 febe 	bl	298a8 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   17b2c:	f505 70a2 	add.w	r0, r5, #324	; 0x144
   17b30:	f011 fe94 	bl	2985c <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   17b34:	2200      	movs	r2, #0
   17b36:	2300      	movs	r3, #0
   17b38:	e9cd 2306 	strd	r2, r3, [sp, #24]
   17b3c:	f06f 0308 	mvn.w	r3, #8
   17b40:	e9cd 4302 	strd	r4, r3, [sp, #8]
   17b44:	e9cd 4400 	strd	r4, r4, [sp]
   17b48:	4b23      	ldr	r3, [pc, #140]	; (17bd8 <bt_enable+0x104>)
   17b4a:	4924      	ldr	r1, [pc, #144]	; (17bdc <bt_enable+0x108>)
   17b4c:	9404      	str	r4, [sp, #16]
   17b4e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   17b52:	4823      	ldr	r0, [pc, #140]	; (17be0 <bt_enable+0x10c>)
   17b54:	f008 fe16 	bl	20784 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   17b58:	4922      	ldr	r1, [pc, #136]	; (17be4 <bt_enable+0x110>)
   17b5a:	4821      	ldr	r0, [pc, #132]	; (17be0 <bt_enable+0x10c>)
   17b5c:	f011 fe55 	bl	2980a <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   17b60:	4821      	ldr	r0, [pc, #132]	; (17be8 <bt_enable+0x114>)
   17b62:	f009 fd07 	bl	21574 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   17b66:	4921      	ldr	r1, [pc, #132]	; (17bec <bt_enable+0x118>)
   17b68:	481f      	ldr	r0, [pc, #124]	; (17be8 <bt_enable+0x114>)
   17b6a:	9400      	str	r4, [sp, #0]
   17b6c:	f06f 0307 	mvn.w	r3, #7
   17b70:	f44f 6200 	mov.w	r2, #2048	; 0x800
   17b74:	f009 fd18 	bl	215a8 <k_work_queue_start>
   17b78:	491d      	ldr	r1, [pc, #116]	; (17bf0 <bt_enable+0x11c>)
   17b7a:	481b      	ldr	r0, [pc, #108]	; (17be8 <bt_enable+0x114>)
   17b7c:	f011 fe45 	bl	2980a <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   17b80:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   17b84:	68db      	ldr	r3, [r3, #12]
   17b86:	4798      	blx	r3
	if (err) {
   17b88:	4604      	mov	r4, r0
   17b8a:	b178      	cbz	r0, 17bac <bt_enable+0xd8>
		LOG_ERR("HCI driver open failed (%d)", err);
   17b8c:	466d      	mov	r5, sp
   17b8e:	462a      	mov	r2, r5
   17b90:	b088      	sub	sp, #32
   17b92:	4b18      	ldr	r3, [pc, #96]	; (17bf4 <bt_enable+0x120>)
   17b94:	e9c5 3005 	strd	r3, r0, [r5, #20]
   17b98:	2303      	movs	r3, #3
   17b9a:	f842 3f10 	str.w	r3, [r2, #16]!
   17b9e:	480c      	ldr	r0, [pc, #48]	; (17bd0 <bt_enable+0xfc>)
   17ba0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17ba4:	f00f ffff 	bl	27ba6 <z_log_msg_static_create.constprop.0>
   17ba8:	46ad      	mov	sp, r5
		return err;
   17baa:	e7a8      	b.n	17afe <bt_enable+0x2a>
	if (!cb) {
   17bac:	b91e      	cbnz	r6, 17bb6 <bt_enable+0xe2>
		return bt_init();
   17bae:	f7ff fd05 	bl	175bc <bt_init>
   17bb2:	4604      	mov	r4, r0
   17bb4:	e7a3      	b.n	17afe <bt_enable+0x2a>
	k_work_submit(&bt_dev.init);
   17bb6:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   17bba:	f009 fcd5 	bl	21568 <k_work_submit>
	return 0;
   17bbe:	e79e      	b.n	17afe <bt_enable+0x2a>
		return -EALREADY;
   17bc0:	f06f 0477 	mvn.w	r4, #119	; 0x77
   17bc4:	e79b      	b.n	17afe <bt_enable+0x2a>
   17bc6:	bf00      	nop
   17bc8:	20000388 	.word	0x20000388
   17bcc:	0002c654 	.word	0x0002c654
   17bd0:	00029fd8 	.word	0x00029fd8
   17bd4:	200034d4 	.word	0x200034d4
   17bd8:	000171a1 	.word	0x000171a1
   17bdc:	20005b80 	.word	0x20005b80
   17be0:	20001f58 	.word	0x20001f58
   17be4:	0002c66d 	.word	0x0002c66d
   17be8:	20002020 	.word	0x20002020
   17bec:	20006200 	.word	0x20006200
   17bf0:	0002c673 	.word	0x0002c673
   17bf4:	0002c679 	.word	0x0002c679

00017bf8 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17bf8:	4b04      	ldr	r3, [pc, #16]	; (17c0c <bt_is_ready+0x14>)
   17bfa:	f3bf 8f5b 	dmb	ish
   17bfe:	6818      	ldr	r0, [r3, #0]
   17c00:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   17c04:	f3c0 0080 	ubfx	r0, r0, #2, #1
   17c08:	4770      	bx	lr
   17c0a:	bf00      	nop
   17c0c:	2000045c 	.word	0x2000045c

00017c10 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   17c10:	4800      	ldr	r0, [pc, #0]	; (17c14 <bt_get_name+0x4>)
   17c12:	4770      	bx	lr
   17c14:	0002adf1 	.word	0x0002adf1

00017c18 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   17c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   17c1a:	4f0a      	ldr	r7, [pc, #40]	; (17c44 <id_find+0x2c>)
{
   17c1c:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   17c1e:	2500      	movs	r5, #0
   17c20:	79fb      	ldrb	r3, [r7, #7]
   17c22:	b2ec      	uxtb	r4, r5
   17c24:	42a3      	cmp	r3, r4
   17c26:	d802      	bhi.n	17c2e <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   17c28:	f06f 0001 	mvn.w	r0, #1
   17c2c:	e009      	b.n	17c42 <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   17c2e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   17c32:	4439      	add	r1, r7
   17c34:	4630      	mov	r0, r6
   17c36:	f010 f86a 	bl	27d0e <bt_addr_le_eq>
   17c3a:	3501      	adds	r5, #1
   17c3c:	2800      	cmp	r0, #0
   17c3e:	d0ef      	beq.n	17c20 <id_find+0x8>
   17c40:	4620      	mov	r0, r4
}
   17c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17c44:	20000388 	.word	0x20000388

00017c48 <set_random_address>:
{
   17c48:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   17c4a:	4913      	ldr	r1, [pc, #76]	; (17c98 <set_random_address+0x50>)
   17c4c:	2206      	movs	r2, #6
   17c4e:	4605      	mov	r5, r0
   17c50:	f00f fec5 	bl	279de <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   17c54:	b1d8      	cbz	r0, 17c8e <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   17c56:	2106      	movs	r1, #6
   17c58:	f242 0005 	movw	r0, #8197	; 0x2005
   17c5c:	f7fe ff2c 	bl	16ab8 <bt_hci_cmd_create>
	if (!buf) {
   17c60:	4604      	mov	r4, r0
   17c62:	b1b0      	cbz	r0, 17c92 <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17c64:	2206      	movs	r2, #6
   17c66:	4629      	mov	r1, r5
   17c68:	300c      	adds	r0, #12
   17c6a:	f011 f8e8 	bl	28e3e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   17c6e:	2200      	movs	r2, #0
   17c70:	4621      	mov	r1, r4
   17c72:	f242 0005 	movw	r0, #8197	; 0x2005
   17c76:	f7fe ff6d 	bl	16b54 <bt_hci_cmd_send_sync>
	if (err) {
   17c7a:	b948      	cbnz	r0, 17c90 <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
   17c7c:	2206      	movs	r2, #6
   17c7e:	4806      	ldr	r0, [pc, #24]	; (17c98 <set_random_address+0x50>)
   17c80:	4629      	mov	r1, r5
   17c82:	f00f fed3 	bl	27a2c <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   17c86:	4b05      	ldr	r3, [pc, #20]	; (17c9c <set_random_address+0x54>)
   17c88:	2201      	movs	r2, #1
   17c8a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		return 0;
   17c8e:	2000      	movs	r0, #0
}
   17c90:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   17c92:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17c96:	e7fb      	b.n	17c90 <set_random_address+0x48>
   17c98:	200003f1 	.word	0x200003f1
   17c9c:	20000388 	.word	0x20000388

00017ca0 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   17ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   17ca2:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   17ca4:	460d      	mov	r5, r1
   17ca6:	b179      	cbz	r1, 17cc8 <id_create.constprop.0+0x28>
   17ca8:	4914      	ldr	r1, [pc, #80]	; (17cfc <id_create.constprop.0+0x5c>)
   17caa:	4628      	mov	r0, r5
   17cac:	f010 f82f 	bl	27d0e <bt_addr_le_eq>
   17cb0:	b950      	cbnz	r0, 17cc8 <id_create.constprop.0+0x28>
	memcpy(dst, src, sizeof(*dst));
   17cb2:	4813      	ldr	r0, [pc, #76]	; (17d00 <id_create.constprop.0+0x60>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   17cb4:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   17cb8:	2207      	movs	r2, #7
   17cba:	4629      	mov	r1, r5
   17cbc:	4420      	add	r0, r4
   17cbe:	f00f feb5 	bl	27a2c <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   17cc2:	2000      	movs	r0, #0
}
   17cc4:	b003      	add	sp, #12
   17cc6:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   17cc8:	4668      	mov	r0, sp
   17cca:	f00f ff2e 	bl	27b2a <bt_addr_le_create_static>
			if (err) {
   17cce:	2800      	cmp	r0, #0
   17cd0:	d1f8      	bne.n	17cc4 <id_create.constprop.0+0x24>
		} while (id_find(&new_addr) >= 0);
   17cd2:	4668      	mov	r0, sp
   17cd4:	f7ff ffa0 	bl	17c18 <id_find>
   17cd8:	2800      	cmp	r0, #0
   17cda:	daf5      	bge.n	17cc8 <id_create.constprop.0+0x28>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   17cdc:	4b08      	ldr	r3, [pc, #32]	; (17d00 <id_create.constprop.0+0x60>)
   17cde:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   17ce2:	441c      	add	r4, r3
   17ce4:	2207      	movs	r2, #7
   17ce6:	4669      	mov	r1, sp
   17ce8:	4620      	mov	r0, r4
   17cea:	f00f fe9f 	bl	27a2c <memcpy>
		if (addr) {
   17cee:	2d00      	cmp	r5, #0
   17cf0:	d0e7      	beq.n	17cc2 <id_create.constprop.0+0x22>
   17cf2:	2207      	movs	r2, #7
   17cf4:	4621      	mov	r1, r4
   17cf6:	4628      	mov	r0, r5
   17cf8:	e7e1      	b.n	17cbe <id_create.constprop.0+0x1e>
   17cfa:	bf00      	nop
   17cfc:	0002bf88 	.word	0x0002bf88
   17d00:	20000388 	.word	0x20000388

00017d04 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   17d04:	b570      	push	{r4, r5, r6, lr}
   17d06:	460d      	mov	r5, r1
   17d08:	b086      	sub	sp, #24
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   17d0a:	4604      	mov	r4, r0
   17d0c:	b920      	cbnz	r0, 17d18 <bt_id_create+0x14>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   17d0e:	b31d      	cbz	r5, 17d58 <bt_id_create+0x54>
			return -EINVAL;
   17d10:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   17d14:	b006      	add	sp, #24
   17d16:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   17d18:	4921      	ldr	r1, [pc, #132]	; (17da0 <bt_id_create+0x9c>)
   17d1a:	f00f fff8 	bl	27d0e <bt_addr_le_eq>
   17d1e:	2800      	cmp	r0, #0
   17d20:	d1f5      	bne.n	17d0e <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   17d22:	7823      	ldrb	r3, [r4, #0]
   17d24:	2b01      	cmp	r3, #1
   17d26:	d104      	bne.n	17d32 <bt_id_create+0x2e>
   17d28:	79a3      	ldrb	r3, [r4, #6]
   17d2a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   17d2e:	2bc0      	cmp	r3, #192	; 0xc0
   17d30:	d00a      	beq.n	17d48 <bt_id_create+0x44>
			LOG_ERR("Only static random identity address supported");
   17d32:	4b1c      	ldr	r3, [pc, #112]	; (17da4 <bt_id_create+0xa0>)
   17d34:	9305      	str	r3, [sp, #20]
   17d36:	481c      	ldr	r0, [pc, #112]	; (17da8 <bt_id_create+0xa4>)
   17d38:	2302      	movs	r3, #2
   17d3a:	aa04      	add	r2, sp, #16
   17d3c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17d40:	9304      	str	r3, [sp, #16]
   17d42:	f00f ffec 	bl	27d1e <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   17d46:	e7e3      	b.n	17d10 <bt_id_create+0xc>
		if (id_find(addr) >= 0) {
   17d48:	4620      	mov	r0, r4
   17d4a:	f7ff ff65 	bl	17c18 <id_find>
   17d4e:	2800      	cmp	r0, #0
   17d50:	dbdd      	blt.n	17d0e <bt_id_create+0xa>
			return -EALREADY;
   17d52:	f06f 0077 	mvn.w	r0, #119	; 0x77
   17d56:	e7dd      	b.n	17d14 <bt_id_create+0x10>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   17d58:	4d14      	ldr	r5, [pc, #80]	; (17dac <bt_id_create+0xa8>)
   17d5a:	79eb      	ldrb	r3, [r5, #7]
   17d5c:	2b01      	cmp	r3, #1
   17d5e:	d01c      	beq.n	17d9a <bt_id_create+0x96>
   17d60:	f3bf 8f5b 	dmb	ish
   17d64:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
   17d68:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   17d6c:	07db      	lsls	r3, r3, #31
   17d6e:	d50b      	bpl.n	17d88 <bt_id_create+0x84>
	new_id = bt_dev.id_count;
   17d70:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   17d72:	4621      	mov	r1, r4
   17d74:	4630      	mov	r0, r6
   17d76:	f7ff ff93 	bl	17ca0 <id_create.constprop.0>
	if (err) {
   17d7a:	2800      	cmp	r0, #0
   17d7c:	d1ca      	bne.n	17d14 <bt_id_create+0x10>
		bt_dev.id_count++;
   17d7e:	79eb      	ldrb	r3, [r5, #7]
   17d80:	3301      	adds	r3, #1
	new_id = bt_dev.id_count;
   17d82:	4630      	mov	r0, r6
		bt_dev.id_count++;
   17d84:	71eb      	strb	r3, [r5, #7]
	return new_id;
   17d86:	e7c5      	b.n	17d14 <bt_id_create+0x10>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   17d88:	2c00      	cmp	r4, #0
   17d8a:	d0c1      	beq.n	17d10 <bt_id_create+0xc>
   17d8c:	4904      	ldr	r1, [pc, #16]	; (17da0 <bt_id_create+0x9c>)
   17d8e:	4620      	mov	r0, r4
   17d90:	f00f ffbd 	bl	27d0e <bt_addr_le_eq>
   17d94:	2800      	cmp	r0, #0
   17d96:	d0eb      	beq.n	17d70 <bt_id_create+0x6c>
   17d98:	e7ba      	b.n	17d10 <bt_id_create+0xc>
		return -ENOMEM;
   17d9a:	f06f 000b 	mvn.w	r0, #11
   17d9e:	e7b9      	b.n	17d14 <bt_id_create+0x10>
   17da0:	0002bf88 	.word	0x0002bf88
   17da4:	0002c788 	.word	0x0002c788
   17da8:	00029fe0 	.word	0x00029fe0
   17dac:	20000388 	.word	0x20000388

00017db0 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   17db0:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   17db2:	4604      	mov	r4, r0
{
   17db4:	b088      	sub	sp, #32
	CHECKIF(addr == NULL) {
   17db6:	b960      	cbnz	r0, 17dd2 <bt_id_read_public_addr+0x22>
		LOG_WRN("Invalid input parameters");
   17db8:	4b1a      	ldr	r3, [pc, #104]	; (17e24 <bt_id_read_public_addr+0x74>)
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
   17dba:	9307      	str	r3, [sp, #28]
   17dbc:	481a      	ldr	r0, [pc, #104]	; (17e28 <bt_id_read_public_addr+0x78>)
   17dbe:	2302      	movs	r3, #2
   17dc0:	aa06      	add	r2, sp, #24
   17dc2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17dc6:	9306      	str	r3, [sp, #24]
   17dc8:	f00f ffa9 	bl	27d1e <z_log_msg_static_create.constprop.0>
		return 0U;
   17dcc:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   17dce:	b008      	add	sp, #32
   17dd0:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   17dd2:	aa01      	add	r2, sp, #4
   17dd4:	2100      	movs	r1, #0
   17dd6:	f241 0009 	movw	r0, #4105	; 0x1009
   17dda:	f7fe febb 	bl	16b54 <bt_hci_cmd_send_sync>
	if (err) {
   17dde:	4606      	mov	r6, r0
   17de0:	b108      	cbz	r0, 17de6 <bt_id_read_public_addr+0x36>
		LOG_WRN("Failed to read public address");
   17de2:	4b12      	ldr	r3, [pc, #72]	; (17e2c <bt_id_read_public_addr+0x7c>)
   17de4:	e7e9      	b.n	17dba <bt_id_read_public_addr+0xa>
	rp = (void *)rsp->data;
   17de6:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
   17de8:	4911      	ldr	r1, [pc, #68]	; (17e30 <bt_id_read_public_addr+0x80>)
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   17dea:	68dd      	ldr	r5, [r3, #12]
   17dec:	3501      	adds	r5, #1
   17dee:	2206      	movs	r2, #6
   17df0:	4628      	mov	r0, r5
   17df2:	f00f fdf4 	bl	279de <memcmp>
   17df6:	b918      	cbnz	r0, 17e00 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   17df8:	9801      	ldr	r0, [sp, #4]
   17dfa:	f004 f9f5 	bl	1c1e8 <net_buf_unref>
		return 0U;
   17dfe:	e7e5      	b.n	17dcc <bt_id_read_public_addr+0x1c>
   17e00:	490c      	ldr	r1, [pc, #48]	; (17e34 <bt_id_read_public_addr+0x84>)
   17e02:	2206      	movs	r2, #6
   17e04:	4628      	mov	r0, r5
   17e06:	f00f fdea 	bl	279de <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   17e0a:	2800      	cmp	r0, #0
   17e0c:	d0f4      	beq.n	17df8 <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
   17e0e:	2206      	movs	r2, #6
   17e10:	4629      	mov	r1, r5
   17e12:	1c60      	adds	r0, r4, #1
   17e14:	f00f fe0a 	bl	27a2c <memcpy>
	net_buf_unref(rsp);
   17e18:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   17e1a:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   17e1c:	f004 f9e4 	bl	1c1e8 <net_buf_unref>
	return 1U;
   17e20:	2001      	movs	r0, #1
   17e22:	e7d4      	b.n	17dce <bt_id_read_public_addr+0x1e>
   17e24:	0002c7b6 	.word	0x0002c7b6
   17e28:	00029fe0 	.word	0x00029fe0
   17e2c:	0002c7cf 	.word	0x0002c7cf
   17e30:	0002bf95 	.word	0x0002bf95
   17e34:	0002bf8f 	.word	0x0002bf8f

00017e38 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   17e38:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   17e3a:	4668      	mov	r0, sp
   17e3c:	f7ff ffb8 	bl	17db0 <bt_id_read_public_addr>
   17e40:	4b04      	ldr	r3, [pc, #16]	; (17e54 <bt_setup_public_id_addr+0x1c>)
   17e42:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   17e44:	b118      	cbz	r0, 17e4e <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   17e46:	4669      	mov	r1, sp
   17e48:	2000      	movs	r0, #0
   17e4a:	f7ff ff29 	bl	17ca0 <id_create.constprop.0>
}
   17e4e:	b003      	add	sp, #12
   17e50:	f85d fb04 	ldr.w	pc, [sp], #4
   17e54:	20000388 	.word	0x20000388

00017e58 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   17e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   17e5c:	4b22      	ldr	r3, [pc, #136]	; (17ee8 <bt_read_static_addr+0x90>)
   17e5e:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
   17e62:	07db      	lsls	r3, r3, #31
{
   17e64:	b088      	sub	sp, #32
   17e66:	4607      	mov	r7, r0
   17e68:	4688      	mov	r8, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   17e6a:	d40e      	bmi.n	17e8a <bt_read_static_addr+0x32>
		LOG_WRN("Read Static Addresses command not available");
   17e6c:	4b1f      	ldr	r3, [pc, #124]	; (17eec <bt_read_static_addr+0x94>)
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
   17e6e:	9307      	str	r3, [sp, #28]
   17e70:	481f      	ldr	r0, [pc, #124]	; (17ef0 <bt_read_static_addr+0x98>)
   17e72:	2302      	movs	r3, #2
   17e74:	aa06      	add	r2, sp, #24
   17e76:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return 0;
   17e7a:	2500      	movs	r5, #0
		LOG_WRN("Failed to read static addresses");
   17e7c:	9306      	str	r3, [sp, #24]
   17e7e:	f00f ff4e 	bl	27d1e <z_log_msg_static_create.constprop.0>
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   17e82:	4628      	mov	r0, r5
   17e84:	b008      	add	sp, #32
   17e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   17e8a:	aa01      	add	r2, sp, #4
   17e8c:	2100      	movs	r1, #0
   17e8e:	f64f 4009 	movw	r0, #64521	; 0xfc09
   17e92:	f7fe fe5f 	bl	16b54 <bt_hci_cmd_send_sync>
	if (err) {
   17e96:	4604      	mov	r4, r0
   17e98:	b108      	cbz	r0, 17e9e <bt_read_static_addr+0x46>
		LOG_WRN("Failed to read static addresses");
   17e9a:	4b16      	ldr	r3, [pc, #88]	; (17ef4 <bt_read_static_addr+0x9c>)
   17e9c:	e7e7      	b.n	17e6e <bt_read_static_addr+0x16>
	rp = (void *)rsp->data;
   17e9e:	9b01      	ldr	r3, [sp, #4]
   17ea0:	68de      	ldr	r6, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
   17ea2:	7875      	ldrb	r5, [r6, #1]
   17ea4:	4545      	cmp	r5, r8
   17ea6:	bf28      	it	cs
   17ea8:	4645      	movcs	r5, r8
	for (i = 0; i < cnt; i++) {
   17eaa:	3602      	adds	r6, #2
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   17eac:	f04f 0816 	mov.w	r8, #22
	for (i = 0; i < cnt; i++) {
   17eb0:	42a5      	cmp	r5, r4
   17eb2:	dc0f      	bgt.n	17ed4 <bt_read_static_addr+0x7c>
	net_buf_unref(rsp);
   17eb4:	9801      	ldr	r0, [sp, #4]
   17eb6:	f004 f997 	bl	1c1e8 <net_buf_unref>
	if (!cnt) {
   17eba:	2d00      	cmp	r5, #0
   17ebc:	d1e1      	bne.n	17e82 <bt_read_static_addr+0x2a>
		LOG_WRN("No static addresses stored in controller");
   17ebe:	4b0e      	ldr	r3, [pc, #56]	; (17ef8 <bt_read_static_addr+0xa0>)
   17ec0:	9307      	str	r3, [sp, #28]
   17ec2:	480b      	ldr	r0, [pc, #44]	; (17ef0 <bt_read_static_addr+0x98>)
   17ec4:	2302      	movs	r3, #2
   17ec6:	aa06      	add	r2, sp, #24
   17ec8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17ecc:	9306      	str	r3, [sp, #24]
   17ece:	f00f ff26 	bl	27d1e <z_log_msg_static_create.constprop.0>
   17ed2:	e7d6      	b.n	17e82 <bt_read_static_addr+0x2a>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   17ed4:	4631      	mov	r1, r6
   17ed6:	fb08 7004 	mla	r0, r8, r4, r7
   17eda:	2216      	movs	r2, #22
   17edc:	f00f fda6 	bl	27a2c <memcpy>
	for (i = 0; i < cnt; i++) {
   17ee0:	3401      	adds	r4, #1
   17ee2:	3616      	adds	r6, #22
   17ee4:	e7e4      	b.n	17eb0 <bt_read_static_addr+0x58>
   17ee6:	bf00      	nop
   17ee8:	20000388 	.word	0x20000388
   17eec:	0002c7ed 	.word	0x0002c7ed
   17ef0:	00029fe0 	.word	0x00029fe0
   17ef4:	0002c819 	.word	0x0002c819
   17ef8:	0002c839 	.word	0x0002c839

00017efc <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   17efc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   17efe:	4e15      	ldr	r6, [pc, #84]	; (17f54 <bt_setup_random_id_addr+0x58>)
   17f00:	79f4      	ldrb	r4, [r6, #7]
{
   17f02:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   17f04:	b92c      	cbnz	r4, 17f12 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   17f06:	2101      	movs	r1, #1
   17f08:	a802      	add	r0, sp, #8
   17f0a:	f7ff ffa5 	bl	17e58 <bt_read_static_addr>
   17f0e:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   17f10:	b9c8      	cbnz	r0, 17f46 <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   17f12:	2100      	movs	r1, #0
   17f14:	4608      	mov	r0, r1
}
   17f16:	b009      	add	sp, #36	; 0x24
   17f18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   17f1c:	f7ff bef2 	b.w	17d04 <bt_id_create>
   17f20:	ab02      	add	r3, sp, #8
   17f22:	fb07 3105 	mla	r1, r7, r5, r3
   17f26:	2206      	movs	r2, #6
   17f28:	f10d 0001 	add.w	r0, sp, #1
   17f2c:	f00f fd7e 	bl	27a2c <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   17f30:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   17f32:	4669      	mov	r1, sp
   17f34:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   17f36:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   17f3a:	f7ff feb1 	bl	17ca0 <id_create.constprop.0>
				if (err) {
   17f3e:	3401      	adds	r4, #1
   17f40:	b110      	cbz	r0, 17f48 <bt_setup_random_id_addr+0x4c>
}
   17f42:	b009      	add	sp, #36	; 0x24
   17f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   17f46:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   17f48:	79f3      	ldrb	r3, [r6, #7]
   17f4a:	b2e5      	uxtb	r5, r4
   17f4c:	42ab      	cmp	r3, r5
   17f4e:	d8e7      	bhi.n	17f20 <bt_setup_random_id_addr+0x24>
			return 0;
   17f50:	2000      	movs	r0, #0
   17f52:	e7f6      	b.n	17f42 <bt_setup_random_id_addr+0x46>
   17f54:	20000388 	.word	0x20000388

00017f58 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   17f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17f5c:	4690      	mov	r8, r2
   17f5e:	460e      	mov	r6, r1
   17f60:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   17f62:	4602      	mov	r2, r0
   17f64:	2800      	cmp	r0, #0
   17f66:	d04b      	beq.n	18000 <bt_id_set_adv_own_addr+0xa8>
   17f68:	2b00      	cmp	r3, #0
   17f6a:	d049      	beq.n	18000 <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   17f6c:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   17f6e:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   17f70:	d531      	bpl.n	17fd6 <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   17f72:	4f25      	ldr	r7, [pc, #148]	; (18008 <bt_id_set_adv_own_addr+0xb0>)
   17f74:	f1b8 0f00 	cmp.w	r8, #0
   17f78:	d013      	beq.n	17fa2 <bt_id_set_adv_own_addr+0x4a>
   17f7a:	0688      	lsls	r0, r1, #26
   17f7c:	d40a      	bmi.n	17f94 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   17f7e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   17f82:	5cfb      	ldrb	r3, [r7, r3]
   17f84:	2b01      	cmp	r3, #1
   17f86:	d015      	beq.n	17fb4 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   17f88:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   17f8a:	06b2      	lsls	r2, r6, #26
   17f8c:	d50f      	bpl.n	17fae <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   17f8e:	f043 0302 	orr.w	r3, r3, #2
   17f92:	e00b      	b.n	17fac <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   17f94:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
   17f98:	0659      	lsls	r1, r3, #25
   17f9a:	d4f0      	bmi.n	17f7e <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
   17f9c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   17fa0:	e006      	b.n	17fb0 <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   17fa2:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   17fa6:	5cfb      	ldrb	r3, [r7, r3]
   17fa8:	2b01      	cmp	r3, #1
   17faa:	d003      	beq.n	17fb4 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
   17fac:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   17fae:	2000      	movs	r0, #0
}
   17fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   17fb4:	2107      	movs	r1, #7
   17fb6:	fb01 7104 	mla	r1, r1, r4, r7
   17fba:	3101      	adds	r1, #1
   17fbc:	4610      	mov	r0, r2
   17fbe:	f00f feb6 	bl	27d2e <bt_id_set_adv_random_addr>
				if (err) {
   17fc2:	2800      	cmp	r0, #0
   17fc4:	d1f4      	bne.n	17fb0 <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
   17fc6:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   17fca:	5d3b      	ldrb	r3, [r7, r4]
   17fcc:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   17fce:	f1b8 0f00 	cmp.w	r8, #0
   17fd2:	d0ec      	beq.n	17fae <bt_id_set_adv_own_addr+0x56>
   17fd4:	e7d9      	b.n	17f8a <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   17fd6:	074b      	lsls	r3, r1, #29
   17fd8:	d50e      	bpl.n	17ff8 <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   17fda:	4e0b      	ldr	r6, [pc, #44]	; (18008 <bt_id_set_adv_own_addr+0xb0>)
   17fdc:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   17fe0:	5df3      	ldrb	r3, [r6, r7]
   17fe2:	2b01      	cmp	r3, #1
   17fe4:	d1e2      	bne.n	17fac <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   17fe6:	2107      	movs	r1, #7
   17fe8:	fb11 3104 	smlabb	r1, r1, r4, r3
   17fec:	4431      	add	r1, r6
   17fee:	f00f fe9e 	bl	27d2e <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   17ff2:	5df3      	ldrb	r3, [r6, r7]
   17ff4:	702b      	strb	r3, [r5, #0]
		if (err) {
   17ff6:	e7db      	b.n	17fb0 <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
   17ff8:	f00f fea1 	bl	27d3e <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   17ffc:	2301      	movs	r3, #1
   17ffe:	e7f9      	b.n	17ff4 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
   18000:	f06f 0015 	mvn.w	r0, #21
   18004:	e7d4      	b.n	17fb0 <bt_id_set_adv_own_addr+0x58>
   18006:	bf00      	nop
   18008:	20000388 	.word	0x20000388

0001800c <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   1800c:	b530      	push	{r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   1800e:	4d13      	ldr	r5, [pc, #76]	; (1805c <bt_id_init+0x50>)
   18010:	79eb      	ldrb	r3, [r5, #7]
{
   18012:	b087      	sub	sp, #28
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   18014:	b11b      	cbz	r3, 1801e <bt_id_init+0x12>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   18016:	2400      	movs	r4, #0
}
   18018:	4620      	mov	r0, r4
   1801a:	b007      	add	sp, #28
   1801c:	bd30      	pop	{r4, r5, pc}
		err = bt_setup_public_id_addr();
   1801e:	f7ff ff0b 	bl	17e38 <bt_setup_public_id_addr>
		if (err) {
   18022:	4604      	mov	r4, r0
   18024:	b150      	cbz	r0, 1803c <bt_id_init+0x30>
			LOG_ERR("Unable to set identity address");
   18026:	4b0e      	ldr	r3, [pc, #56]	; (18060 <bt_id_init+0x54>)
			LOG_ERR("Unable to set random address");
   18028:	9305      	str	r3, [sp, #20]
   1802a:	480e      	ldr	r0, [pc, #56]	; (18064 <bt_id_init+0x58>)
   1802c:	2302      	movs	r3, #2
   1802e:	aa04      	add	r2, sp, #16
   18030:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18034:	9304      	str	r3, [sp, #16]
   18036:	f00f fe72 	bl	27d1e <z_log_msg_static_create.constprop.0>
			return err;
   1803a:	e7ed      	b.n	18018 <bt_id_init+0xc>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   1803c:	79eb      	ldrb	r3, [r5, #7]
   1803e:	2b00      	cmp	r3, #0
   18040:	d1e9      	bne.n	18016 <bt_id_init+0xa>
		err = bt_setup_random_id_addr();
   18042:	f7ff ff5b 	bl	17efc <bt_setup_random_id_addr>
		if (err) {
   18046:	4604      	mov	r4, r0
   18048:	2800      	cmp	r0, #0
   1804a:	d1ec      	bne.n	18026 <bt_id_init+0x1a>
		err = set_random_address(&bt_dev.id_addr[0].a);
   1804c:	1c68      	adds	r0, r5, #1
   1804e:	f7ff fdfb 	bl	17c48 <set_random_address>
		if (err) {
   18052:	4604      	mov	r4, r0
   18054:	2800      	cmp	r0, #0
   18056:	d0df      	beq.n	18018 <bt_id_init+0xc>
			LOG_ERR("Unable to set random address");
   18058:	4b03      	ldr	r3, [pc, #12]	; (18068 <bt_id_init+0x5c>)
   1805a:	e7e5      	b.n	18028 <bt_id_init+0x1c>
   1805c:	20000388 	.word	0x20000388
   18060:	0002c862 	.word	0x0002c862
   18064:	00029fe0 	.word	0x00029fe0
   18068:	0002c881 	.word	0x0002c881

0001806c <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   1806c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18070:	b089      	sub	sp, #36	; 0x24
   18072:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   18074:	2120      	movs	r1, #32
{
   18076:	9000      	str	r0, [sp, #0]
   18078:	4692      	mov	sl, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1807a:	f7fe fd1d 	bl	16ab8 <bt_hci_cmd_create>
	if (!buf) {
   1807e:	4605      	mov	r5, r0
   18080:	2800      	cmp	r0, #0
   18082:	d05b      	beq.n	1813c <hci_set_ad+0xd0>
	return net_buf_simple_add(&buf->b, len);
   18084:	2120      	movs	r1, #32
   18086:	300c      	adds	r0, #12
   18088:	f004 f9f2 	bl	1c470 <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
   1808c:	2220      	movs	r2, #32
   1808e:	2100      	movs	r1, #0
   18090:	4681      	mov	r9, r0
   18092:	f00f fcd6 	bl	27a42 <memset>

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   18096:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   1809a:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
	uint8_t set_data_len = 0;
   1809e:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   180a0:	f8d4 8000 	ldr.w	r8, [r4]
   180a4:	2300      	movs	r3, #0
   180a6:	6862      	ldr	r2, [r4, #4]
   180a8:	4293      	cmp	r3, r2
   180aa:	d30c      	bcc.n	180c6 <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
   180ac:	3408      	adds	r4, #8
   180ae:	45a2      	cmp	sl, r4
   180b0:	d1f6      	bne.n	180a0 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   180b2:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
   180b4:	f889 6000 	strb.w	r6, [r9]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   180b8:	2200      	movs	r2, #0
   180ba:	4629      	mov	r1, r5
}
   180bc:	b009      	add	sp, #36	; 0x24
   180be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   180c2:	f7fe bd47 	b.w	16b54 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   180c6:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   180ca:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   180ce:	1cb0      	adds	r0, r6, #2
   180d0:	1811      	adds	r1, r2, r0
   180d2:	291f      	cmp	r1, #31
   180d4:	d91b      	bls.n	1810e <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   180d6:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   180da:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   180de:	d101      	bne.n	180e4 <hci_set_ad+0x78>
   180e0:	2a00      	cmp	r2, #0
   180e2:	dc12      	bgt.n	1810a <hci_set_ad+0x9e>
					LOG_ERR("Too big advertising data");
   180e4:	4b17      	ldr	r3, [pc, #92]	; (18144 <hci_set_ad+0xd8>)
   180e6:	9307      	str	r3, [sp, #28]
   180e8:	2302      	movs	r3, #2
   180ea:	9306      	str	r3, [sp, #24]
   180ec:	4816      	ldr	r0, [pc, #88]	; (18148 <hci_set_ad+0xdc>)
   180ee:	2300      	movs	r3, #0
   180f0:	aa06      	add	r2, sp, #24
   180f2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   180f6:	f7fb ffc5 	bl	14084 <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   180fa:	4628      	mov	r0, r5
   180fc:	f004 f874 	bl	1c1e8 <net_buf_unref>
					return -EINVAL;
   18100:	f06f 0015 	mvn.w	r0, #21
}
   18104:	b009      	add	sp, #36	; 0x24
   18106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   1810a:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   1810e:	b2d7      	uxtb	r7, r2
   18110:	1c79      	adds	r1, r7, #1
   18112:	f80b 1006 	strb.w	r1, [fp, r6]
   18116:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   18118:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   1811a:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   1811e:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   18122:	f8d8 1004 	ldr.w	r1, [r8, #4]
   18126:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   18128:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   1812a:	f00f fc7f 	bl	27a2c <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   1812e:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   18130:	4437      	add	r7, r6
   18132:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   18134:	3301      	adds	r3, #1
   18136:	f108 0808 	add.w	r8, r8, #8
   1813a:	e7b4      	b.n	180a6 <hci_set_ad+0x3a>
		return -ENOBUFS;
   1813c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   18140:	e7e0      	b.n	18104 <hci_set_ad+0x98>
   18142:	bf00      	nop
   18144:	0002c8a4 	.word	0x0002c8a4
   18148:	00029fb0 	.word	0x00029fb0

0001814c <adv_is_directed>:

	return channel_map;
}

static inline bool adv_is_directed(const struct bt_le_ext_adv *adv)
{
   1814c:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   1814e:	4904      	ldr	r1, [pc, #16]	; (18160 <adv_is_directed+0x14>)
   18150:	2207      	movs	r2, #7
   18152:	3009      	adds	r0, #9
   18154:	f00f fc43 	bl	279de <memcmp>
	/* The advertiser is assumed to be directed when the peer address has
	 * been set.
	 */
	return !bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY);
}
   18158:	3800      	subs	r0, #0
   1815a:	bf18      	it	ne
   1815c:	2001      	movne	r0, #1
   1815e:	bd08      	pop	{r3, pc}
   18160:	0002bf88 	.word	0x0002bf88

00018164 <le_adv_start_add_conn>:

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   18164:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   18166:	4b15      	ldr	r3, [pc, #84]	; (181bc <le_adv_start_add_conn+0x58>)
   18168:	7802      	ldrb	r2, [r0, #0]
   1816a:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
{
   1816e:	4604      	mov	r4, r0
   18170:	460d      	mov	r5, r1

	if (!adv_is_directed(adv)) {
   18172:	f7ff ffeb 	bl	1814c <adv_is_directed>
   18176:	4603      	mov	r3, r0
   18178:	7820      	ldrb	r0, [r4, #0]
   1817a:	b96b      	cbnz	r3, 18198 <le_adv_start_add_conn+0x34>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   1817c:	4910      	ldr	r1, [pc, #64]	; (181c0 <le_adv_start_add_conn+0x5c>)
   1817e:	f001 f89b 	bl	192b8 <bt_conn_add_le>
		if (!conn) {
   18182:	4604      	mov	r4, r0
   18184:	b910      	cbnz	r0, 1818c <le_adv_start_add_conn+0x28>
			return -ENOMEM;
   18186:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   1818a:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   1818c:	2104      	movs	r1, #4
   1818e:	f000 fe77 	bl	18e80 <bt_conn_set_state>
		*out_conn = conn;
   18192:	602c      	str	r4, [r5, #0]
		return 0;
   18194:	2000      	movs	r0, #0
   18196:	e7f8      	b.n	1818a <le_adv_start_add_conn+0x26>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   18198:	f104 0609 	add.w	r6, r4, #9
   1819c:	4631      	mov	r1, r6
   1819e:	f001 f8bf 	bl	19320 <bt_conn_exists_le>
   181a2:	b940      	cbnz	r0, 181b6 <le_adv_start_add_conn+0x52>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   181a4:	7820      	ldrb	r0, [r4, #0]
   181a6:	4631      	mov	r1, r6
   181a8:	f001 f886 	bl	192b8 <bt_conn_add_le>
	if (!conn) {
   181ac:	4604      	mov	r4, r0
   181ae:	2800      	cmp	r0, #0
   181b0:	d0e9      	beq.n	18186 <le_adv_start_add_conn+0x22>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   181b2:	2105      	movs	r1, #5
   181b4:	e7eb      	b.n	1818e <le_adv_start_add_conn+0x2a>
		return -EINVAL;
   181b6:	f06f 0015 	mvn.w	r0, #21
   181ba:	e7e6      	b.n	1818a <le_adv_start_add_conn+0x26>
   181bc:	20000388 	.word	0x20000388
   181c0:	0002bf81 	.word	0x0002bf81

000181c4 <valid_adv_param>:
{
   181c4:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   181c6:	6843      	ldr	r3, [r0, #4]
{
   181c8:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   181ca:	0558      	lsls	r0, r3, #21
   181cc:	d501      	bpl.n	181d2 <valid_adv_param+0xe>
		return false;
   181ce:	2000      	movs	r0, #0
}
   181d0:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   181d2:	6922      	ldr	r2, [r4, #16]
   181d4:	b10a      	cbz	r2, 181da <valid_adv_param+0x16>
   181d6:	07d9      	lsls	r1, r3, #31
   181d8:	d5f9      	bpl.n	181ce <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   181da:	4d19      	ldr	r5, [pc, #100]	; (18240 <valid_adv_param+0x7c>)
   181dc:	7820      	ldrb	r0, [r4, #0]
   181de:	79eb      	ldrb	r3, [r5, #7]
   181e0:	4283      	cmp	r3, r0
   181e2:	d9f4      	bls.n	181ce <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   181e4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   181e8:	4916      	ldr	r1, [pc, #88]	; (18244 <valid_adv_param+0x80>)
   181ea:	2207      	movs	r2, #7
   181ec:	4428      	add	r0, r5
   181ee:	f00f fbf6 	bl	279de <memcmp>
	if (param->id >= bt_dev.id_count ||
   181f2:	2800      	cmp	r0, #0
   181f4:	d0eb      	beq.n	181ce <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   181f6:	6860      	ldr	r0, [r4, #4]
   181f8:	07c2      	lsls	r2, r0, #31
   181fa:	d406      	bmi.n	1820a <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   181fc:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
   18200:	2b08      	cmp	r3, #8
   18202:	d802      	bhi.n	1820a <valid_adv_param+0x46>
   18204:	68a3      	ldr	r3, [r4, #8]
   18206:	2b9f      	cmp	r3, #159	; 0x9f
   18208:	d9e1      	bls.n	181ce <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   1820a:	f010 0f30 	tst.w	r0, #48	; 0x30
   1820e:	d002      	beq.n	18216 <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   18210:	6923      	ldr	r3, [r4, #16]
   18212:	2b00      	cmp	r3, #0
   18214:	d0db      	beq.n	181ce <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   18216:	06c3      	lsls	r3, r0, #27
   18218:	d401      	bmi.n	1821e <valid_adv_param+0x5a>
   1821a:	6923      	ldr	r3, [r4, #16]
   1821c:	b943      	cbnz	r3, 18230 <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
   1821e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   18222:	429a      	cmp	r2, r3
   18224:	d8d3      	bhi.n	181ce <valid_adv_param+0xa>
   18226:	2a1f      	cmp	r2, #31
   18228:	d9d1      	bls.n	181ce <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   1822a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   1822e:	d8ce      	bhi.n	181ce <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   18230:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   18234:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   18238:	bf18      	it	ne
   1823a:	2001      	movne	r0, #1
   1823c:	e7c8      	b.n	181d0 <valid_adv_param+0xc>
   1823e:	bf00      	nop
   18240:	20000388 	.word	0x20000388
   18244:	0002bf88 	.word	0x0002bf88

00018248 <bt_le_adv_lookup_legacy>:
}
   18248:	4800      	ldr	r0, [pc, #0]	; (1824c <bt_le_adv_lookup_legacy+0x4>)
   1824a:	4770      	bx	lr
   1824c:	200003a0 	.word	0x200003a0

00018250 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   18250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18254:	b093      	sub	sp, #76	; 0x4c
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   18256:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
   1825a:	9305      	str	r3, [sp, #20]
	struct bt_conn *conn = NULL;
   1825c:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   1825e:	ebba 0403 	subs.w	r4, sl, r3
{
   18262:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18264:	4892      	ldr	r0, [pc, #584]	; (184b0 <bt_le_adv_start_legacy+0x260>)
	struct bt_conn *conn = NULL;
   18266:	9307      	str	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable = false;
   18268:	bf18      	it	ne
   1826a:	2401      	movne	r4, #1
   1826c:	f00f fd91 	bl	27d92 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   18270:	0747      	lsls	r7, r0, #29
{
   18272:	460d      	mov	r5, r1
   18274:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   18276:	f140 8112 	bpl.w	1849e <bt_le_adv_start_legacy+0x24e>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   1827a:	4608      	mov	r0, r1
   1827c:	f7ff ffa2 	bl	181c4 <valid_adv_param>
   18280:	b928      	cbnz	r0, 1828e <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   18282:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   18286:	4620      	mov	r0, r4
   18288:	b013      	add	sp, #76	; 0x4c
   1828a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   1828e:	4628      	mov	r0, r5
   18290:	f00f fd6c 	bl	27d6c <bt_id_adv_random_addr_check>
   18294:	4681      	mov	r9, r0
   18296:	2800      	cmp	r0, #0
   18298:	d0f3      	beq.n	18282 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1829a:	f106 0810 	add.w	r8, r6, #16
   1829e:	4640      	mov	r0, r8
   182a0:	f00f fd77 	bl	27d92 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   182a4:	f3c0 17c0 	ubfx	r7, r0, #7, #1
   182a8:	0600      	lsls	r0, r0, #24
   182aa:	f100 80fb 	bmi.w	184a4 <bt_le_adv_start_legacy+0x254>
	(void)memset(&set_param, 0, sizeof(set_param));
   182ae:	220f      	movs	r2, #15
   182b0:	4639      	mov	r1, r7
   182b2:	a808      	add	r0, sp, #32
   182b4:	f00f fbc5 	bl	27a42 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   182b8:	68ab      	ldr	r3, [r5, #8]
   182ba:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.channel_map  = get_adv_channel_map(param->options);
   182be:	6868      	ldr	r0, [r5, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   182c0:	68eb      	ldr	r3, [r5, #12]
   182c2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   182c6:	f00f fd55 	bl	27d74 <get_adv_channel_map>
	if (adv->id != param->id) {
   182ca:	7832      	ldrb	r2, [r6, #0]
   182cc:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
   182ce:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
   182d2:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   182d4:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
	if (adv->id != param->id) {
   182d8:	d004      	beq.n	182e4 <bt_le_adv_start_legacy+0x94>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   182da:	4875      	ldr	r0, [pc, #468]	; (184b0 <bt_le_adv_start_legacy+0x260>)
   182dc:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   182e0:	f00f fd5d 	bl	27d9e <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   182e4:	4a73      	ldr	r2, [pc, #460]	; (184b4 <bt_le_adv_start_legacy+0x264>)
	adv->id = param->id;
   182e6:	782b      	ldrb	r3, [r5, #0]
   182e8:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
   182ea:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   182ee:	6869      	ldr	r1, [r5, #4]
   182f0:	4622      	mov	r2, r4
   182f2:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   182f6:	4630      	mov	r0, r6
   182f8:	f7ff fe2e 	bl	17f58 <bt_id_set_adv_own_addr>
	if (err) {
   182fc:	4604      	mov	r4, r0
   182fe:	2800      	cmp	r0, #0
   18300:	d1c1      	bne.n	18286 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   18302:	f106 0009 	add.w	r0, r6, #9
	memcpy(dst, src, sizeof(*dst));
   18306:	2207      	movs	r2, #7
	if (dir_adv) {
   18308:	f1ba 0f00 	cmp.w	sl, #0
   1830c:	d013      	beq.n	18336 <bt_le_adv_start_legacy+0xe6>
   1830e:	6929      	ldr	r1, [r5, #16]
   18310:	f00f fb8c 	bl	27a2c <memcpy>
	name_type = get_adv_name_type_param(param);
   18314:	4628      	mov	r0, r5
   18316:	f00f fde1 	bl	27edc <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   1831a:	686b      	ldr	r3, [r5, #4]
   1831c:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
   1831e:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   18320:	d416      	bmi.n	18350 <bt_le_adv_start_legacy+0x100>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   18322:	059b      	lsls	r3, r3, #22
   18324:	d403      	bmi.n	1832e <bt_le_adv_start_legacy+0xde>
   18326:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   18328:	b90b      	cbnz	r3, 1832e <bt_le_adv_start_legacy+0xde>
   1832a:	2f02      	cmp	r7, #2
   1832c:	d15a      	bne.n	183e4 <bt_le_adv_start_legacy+0x194>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   1832e:	2302      	movs	r3, #2
   18330:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   18334:	e01a      	b.n	1836c <bt_le_adv_start_legacy+0x11c>
   18336:	4960      	ldr	r1, [pc, #384]	; (184b8 <bt_le_adv_start_legacy+0x268>)
   18338:	f00f fb78 	bl	27a2c <memcpy>
	name_type = get_adv_name_type_param(param);
   1833c:	4628      	mov	r0, r5
   1833e:	f00f fdcd 	bl	27edc <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   18342:	686b      	ldr	r3, [r5, #4]
   18344:	07da      	lsls	r2, r3, #31
	name_type = get_adv_name_type_param(param);
   18346:	4607      	mov	r7, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   18348:	d5eb      	bpl.n	18322 <bt_le_adv_start_legacy+0xd2>
			set_param.type = BT_HCI_ADV_IND;
   1834a:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
   1834e:	e00d      	b.n	1836c <bt_le_adv_start_legacy+0x11c>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   18350:	f013 0f10 	tst.w	r3, #16
   18354:	bf0c      	ite	eq
   18356:	2301      	moveq	r3, #1
   18358:	2304      	movne	r3, #4
   1835a:	6929      	ldr	r1, [r5, #16]
   1835c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   18360:	2207      	movs	r2, #7
   18362:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   18366:	f00f fb61 	bl	27a2c <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   1836a:	46a1      	mov	r9, r4
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   1836c:	210f      	movs	r1, #15
   1836e:	f242 0006 	movw	r0, #8198	; 0x2006
   18372:	f7fe fba1 	bl	16ab8 <bt_hci_cmd_create>
	if (!buf) {
   18376:	4604      	mov	r4, r0
   18378:	2800      	cmp	r0, #0
   1837a:	f000 8096 	beq.w	184aa <bt_le_adv_start_legacy+0x25a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1837e:	220f      	movs	r2, #15
   18380:	a908      	add	r1, sp, #32
   18382:	300c      	adds	r0, #12
   18384:	f010 fd5b 	bl	28e3e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   18388:	4621      	mov	r1, r4
   1838a:	2200      	movs	r2, #0
   1838c:	f242 0006 	movw	r0, #8198	; 0x2006
   18390:	f7fe fbe0 	bl	16b54 <bt_hci_cmd_send_sync>
	if (err) {
   18394:	4604      	mov	r4, r0
   18396:	2800      	cmp	r0, #0
   18398:	f47f af75 	bne.w	18286 <bt_le_adv_start_legacy+0x36>
	if (!dir_adv) {
   1839c:	f1ba 0f00 	cmp.w	sl, #0
   183a0:	d026      	beq.n	183f0 <bt_le_adv_start_legacy+0x1a0>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   183a2:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   183a4:	07dc      	lsls	r4, r3, #31
   183a6:	d431      	bmi.n	1840c <bt_le_adv_start_legacy+0x1bc>
	return bt_le_adv_set_enable_legacy(adv, enable);
   183a8:	2101      	movs	r1, #1
   183aa:	4630      	mov	r0, r6
   183ac:	f00f fda6 	bl	27efc <bt_le_adv_set_enable_legacy>
	if (err) {
   183b0:	4604      	mov	r4, r0
   183b2:	2800      	cmp	r0, #0
   183b4:	d06b      	beq.n	1848e <bt_le_adv_start_legacy+0x23e>
		LOG_ERR("Failed to start advertiser");
   183b6:	4b41      	ldr	r3, [pc, #260]	; (184bc <bt_le_adv_start_legacy+0x26c>)
   183b8:	9311      	str	r3, [sp, #68]	; 0x44
   183ba:	2302      	movs	r3, #2
   183bc:	9310      	str	r3, [sp, #64]	; 0x40
   183be:	4840      	ldr	r0, [pc, #256]	; (184c0 <bt_le_adv_start_legacy+0x270>)
   183c0:	2300      	movs	r3, #0
   183c2:	aa10      	add	r2, sp, #64	; 0x40
   183c4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   183c8:	f7fb fe5c 	bl	14084 <z_impl_z_log_msg_static_create>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   183cc:	9d07      	ldr	r5, [sp, #28]
   183ce:	2d00      	cmp	r5, #0
   183d0:	f43f af59 	beq.w	18286 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   183d4:	4628      	mov	r0, r5
   183d6:	2100      	movs	r1, #0
   183d8:	f000 fd52 	bl	18e80 <bt_conn_set_state>
			bt_conn_unref(conn);
   183dc:	4628      	mov	r0, r5
   183de:	f000 fd0f 	bl	18e00 <bt_conn_unref>
   183e2:	e750      	b.n	18286 <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   183e4:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   183e6:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   183ea:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   183ee:	e7bd      	b.n	1836c <bt_le_adv_start_legacy+0x11c>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   183f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   183f2:	9300      	str	r3, [sp, #0]
   183f4:	e9cd 9701 	strd	r9, r7, [sp, #4]
   183f8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   183fa:	9a05      	ldr	r2, [sp, #20]
   183fc:	4659      	mov	r1, fp
   183fe:	4630      	mov	r0, r6
   18400:	f00f fcf5 	bl	27dee <le_adv_update.constprop.0>
		if (err) {
   18404:	4604      	mov	r4, r0
   18406:	2800      	cmp	r0, #0
   18408:	d0cb      	beq.n	183a2 <bt_le_adv_start_legacy+0x152>
   1840a:	e73c      	b.n	18286 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   1840c:	a907      	add	r1, sp, #28
   1840e:	4630      	mov	r0, r6
   18410:	f7ff fea8 	bl	18164 <le_adv_start_add_conn>
		if (err) {
   18414:	4604      	mov	r4, r0
   18416:	2800      	cmp	r0, #0
   18418:	d0c6      	beq.n	183a8 <bt_le_adv_start_legacy+0x158>
			if (err == -ENOMEM && !dir_adv &&
   1841a:	f110 0f0c 	cmn.w	r0, #12
   1841e:	f47f af32 	bne.w	18286 <bt_le_adv_start_legacy+0x36>
   18422:	f1ba 0f00 	cmp.w	sl, #0
   18426:	f47f af2e 	bne.w	18286 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   1842a:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
   1842c:	0798      	lsls	r0, r3, #30
   1842e:	f53f af2a 	bmi.w	18286 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   18432:	686c      	ldr	r4, [r5, #4]
   18434:	f084 0402 	eor.w	r4, r4, #2
   18438:	f3c4 0440 	ubfx	r4, r4, #1, #1
   1843c:	f004 0201 	and.w	r2, r4, #1
   18440:	210e      	movs	r1, #14
   18442:	4640      	mov	r0, r8
   18444:	f00f fcba 	bl	27dbc <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   18448:	1e7b      	subs	r3, r7, #1
   1844a:	425a      	negs	r2, r3
   1844c:	415a      	adcs	r2, r3
   1844e:	2108      	movs	r1, #8
   18450:	4640      	mov	r0, r8
   18452:	f00f fcb3 	bl	27dbc <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   18456:	1eb9      	subs	r1, r7, #2
   18458:	424a      	negs	r2, r1
   1845a:	414a      	adcs	r2, r1
   1845c:	4640      	mov	r0, r8
   1845e:	2109      	movs	r1, #9
   18460:	f00f fcac 	bl	27dbc <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   18464:	686a      	ldr	r2, [r5, #4]
   18466:	210a      	movs	r1, #10
   18468:	f002 0201 	and.w	r2, r2, #1
   1846c:	4640      	mov	r0, r8
   1846e:	f00f fca5 	bl	27dbc <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   18472:	464a      	mov	r2, r9
   18474:	210b      	movs	r1, #11
   18476:	4640      	mov	r0, r8
   18478:	f00f fca0 	bl	27dbc <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   1847c:	686a      	ldr	r2, [r5, #4]
   1847e:	210d      	movs	r1, #13
   18480:	f3c2 0280 	ubfx	r2, r2, #2, #1
   18484:	4640      	mov	r0, r8
   18486:	f00f fc99 	bl	27dbc <atomic_set_bit_to>
	return 0;
   1848a:	2400      	movs	r4, #0
   1848c:	e6fb      	b.n	18286 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1848e:	9807      	ldr	r0, [sp, #28]
   18490:	b108      	cbz	r0, 18496 <bt_le_adv_start_legacy+0x246>
		bt_conn_unref(conn);
   18492:	f000 fcb5 	bl	18e00 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   18496:	f1ba 0f00 	cmp.w	sl, #0
   1849a:	d1cf      	bne.n	1843c <bt_le_adv_start_legacy+0x1ec>
   1849c:	e7c9      	b.n	18432 <bt_le_adv_start_legacy+0x1e2>
		return -EAGAIN;
   1849e:	f06f 040a 	mvn.w	r4, #10
   184a2:	e6f0      	b.n	18286 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   184a4:	f06f 0477 	mvn.w	r4, #119	; 0x77
   184a8:	e6ed      	b.n	18286 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   184aa:	f06f 0468 	mvn.w	r4, #104	; 0x68
   184ae:	e6ea      	b.n	18286 <bt_le_adv_start_legacy+0x36>
   184b0:	2000045c 	.word	0x2000045c
   184b4:	20000388 	.word	0x20000388
   184b8:	0002bf88 	.word	0x0002bf88
   184bc:	0002c8bd 	.word	0x0002c8bd
   184c0:	00029fb0 	.word	0x00029fb0

000184c4 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   184c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   184c6:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   184c8:	9a06      	ldr	r2, [sp, #24]
{
   184ca:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   184cc:	e9cd 3200 	strd	r3, r2, [sp]
   184d0:	462b      	mov	r3, r5
   184d2:	460a      	mov	r2, r1
   184d4:	4601      	mov	r1, r0
   184d6:	4811      	ldr	r0, [pc, #68]	; (1851c <bt_le_adv_start+0x58>)
   184d8:	f7ff feba 	bl	18250 <bt_le_adv_start_legacy>
   184dc:	4621      	mov	r1, r4
   184de:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   184e0:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   184e2:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   184e6:	429d      	cmp	r5, r3
   184e8:	d102      	bne.n	184f0 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   184ea:	4630      	mov	r0, r6
   184ec:	b002      	add	sp, #8
   184ee:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   184f0:	880a      	ldrh	r2, [r1, #0]
   184f2:	4282      	cmp	r2, r0
   184f4:	d104      	bne.n	18500 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   184f6:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   184f8:	b112      	cbz	r2, 18500 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   184fa:	7812      	ldrb	r2, [r2, #0]
   184fc:	07d2      	lsls	r2, r2, #31
   184fe:	d402      	bmi.n	18506 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   18500:	3301      	adds	r3, #1
   18502:	3108      	adds	r1, #8
   18504:	e7ef      	b.n	184e6 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   18506:	4906      	ldr	r1, [pc, #24]	; (18520 <bt_le_adv_start+0x5c>)
   18508:	4806      	ldr	r0, [pc, #24]	; (18524 <bt_le_adv_start+0x60>)
   1850a:	f009 f8b5 	bl	21678 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   1850e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   18512:	2300      	movs	r3, #0
   18514:	4803      	ldr	r0, [pc, #12]	; (18524 <bt_le_adv_start+0x60>)
   18516:	f009 f9cb 	bl	218b0 <k_work_reschedule>
   1851a:	e7e6      	b.n	184ea <bt_le_adv_start+0x26>
   1851c:	200003a0 	.word	0x200003a0
   18520:	000185a1 	.word	0x000185a1
   18524:	200003b8 	.word	0x200003b8

00018528 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   18528:	b510      	push	{r4, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   1852a:	4819      	ldr	r0, [pc, #100]	; (18590 <bt_le_adv_stop+0x68>)
   1852c:	f00f fd0b 	bl	27f46 <bt_le_lim_adv_cancel_timeout>
   18530:	4818      	ldr	r0, [pc, #96]	; (18594 <bt_le_adv_stop+0x6c>)
   18532:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   18536:	f00f fc32 	bl	27d9e <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1853a:	4816      	ldr	r0, [pc, #88]	; (18594 <bt_le_adv_stop+0x6c>)
   1853c:	f00f fc29 	bl	27d92 <atomic_get>
   18540:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   18542:	061a      	lsls	r2, r3, #24
   18544:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   18548:	d521      	bpl.n	1858e <bt_le_adv_stop+0x66>
   1854a:	4812      	ldr	r0, [pc, #72]	; (18594 <bt_le_adv_stop+0x6c>)
   1854c:	f00f fc21 	bl	27d92 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   18550:	0543      	lsls	r3, r0, #21
   18552:	d512      	bpl.n	1857a <bt_le_adv_stop+0x52>
	if (!adv_is_directed(adv)) {
   18554:	480e      	ldr	r0, [pc, #56]	; (18590 <bt_le_adv_stop+0x68>)
   18556:	f7ff fdf9 	bl	1814c <adv_is_directed>
   1855a:	4b0f      	ldr	r3, [pc, #60]	; (18598 <bt_le_adv_stop+0x70>)
   1855c:	b998      	cbnz	r0, 18586 <bt_le_adv_stop+0x5e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   1855e:	490f      	ldr	r1, [pc, #60]	; (1859c <bt_le_adv_stop+0x74>)
   18560:	2204      	movs	r2, #4
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   18562:	7e18      	ldrb	r0, [r3, #24]
   18564:	f000 ff0c 	bl	19380 <bt_conn_lookup_state_le>
   18568:	4604      	mov	r4, r0
	if (conn) {
   1856a:	b130      	cbz	r0, 1857a <bt_le_adv_stop+0x52>
		conn->err = status;
   1856c:	2100      	movs	r1, #0
   1856e:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   18570:	f000 fc86 	bl	18e80 <bt_conn_set_state>
		bt_conn_unref(conn);
   18574:	4620      	mov	r0, r4
   18576:	f000 fc43 	bl	18e00 <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   1857a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   1857e:	4804      	ldr	r0, [pc, #16]	; (18590 <bt_le_adv_stop+0x68>)
   18580:	2100      	movs	r1, #0
   18582:	f00f bcbb 	b.w	27efc <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   18586:	2205      	movs	r2, #5
   18588:	f103 0121 	add.w	r1, r3, #33	; 0x21
   1858c:	e7e9      	b.n	18562 <bt_le_adv_stop+0x3a>
}
   1858e:	bd10      	pop	{r4, pc}
   18590:	200003a0 	.word	0x200003a0
   18594:	200003b0 	.word	0x200003b0
   18598:	20000388 	.word	0x20000388
   1859c:	0002bf81 	.word	0x0002bf81

000185a0 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   185a0:	b598      	push	{r3, r4, r7, lr}
   185a2:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   185a4:	f7ff ffc0 	bl	18528 <bt_le_adv_stop>
#endif
	if (err) {
   185a8:	b178      	cbz	r0, 185ca <adv_timeout+0x2a>
		LOG_WRN("Failed to stop advertising: %d", err);
   185aa:	466c      	mov	r4, sp
   185ac:	b088      	sub	sp, #32
   185ae:	466a      	mov	r2, sp
   185b0:	4b07      	ldr	r3, [pc, #28]	; (185d0 <adv_timeout+0x30>)
   185b2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   185b6:	2303      	movs	r3, #3
   185b8:	f842 3f10 	str.w	r3, [r2, #16]!
   185bc:	4805      	ldr	r0, [pc, #20]	; (185d4 <adv_timeout+0x34>)
   185be:	2300      	movs	r3, #0
   185c0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   185c4:	f7fb fd5e 	bl	14084 <z_impl_z_log_msg_static_create>
   185c8:	46a5      	mov	sp, r4
	}
}
   185ca:	46bd      	mov	sp, r7
   185cc:	bd98      	pop	{r3, r4, r7, pc}
   185ce:	bf00      	nop
   185d0:	0002c8d8 	.word	0x0002c8d8
   185d4:	00029fb0 	.word	0x00029fb0

000185d8 <bt_le_adv_resume>:
{
   185d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   185da:	b083      	sub	sp, #12
   185dc:	4839      	ldr	r0, [pc, #228]	; (186c4 <bt_le_adv_resume+0xec>)
   185de:	4c39      	ldr	r4, [pc, #228]	; (186c4 <bt_le_adv_resume+0xec>)
   185e0:	af00      	add	r7, sp, #0
   185e2:	f00f fbd6 	bl	27d92 <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   185e6:	f410 4f80 	tst.w	r0, #16384	; 0x4000
   185ea:	d041      	beq.n	18670 <bt_le_adv_resume+0x98>
   185ec:	4620      	mov	r0, r4
   185ee:	f00f fbd0 	bl	27d92 <atomic_get>
   185f2:	0603      	lsls	r3, r0, #24
   185f4:	d43c      	bmi.n	18670 <bt_le_adv_resume+0x98>
   185f6:	4620      	mov	r0, r4
   185f8:	f00f fbcb 	bl	27d92 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   185fc:	0546      	lsls	r6, r0, #21
   185fe:	d537      	bpl.n	18670 <bt_le_adv_resume+0x98>
	err = le_adv_start_add_conn(adv, &conn);
   18600:	1d39      	adds	r1, r7, #4
   18602:	f1a4 0010 	sub.w	r0, r4, #16
   18606:	f7ff fdad 	bl	18164 <le_adv_start_add_conn>
	if (err) {
   1860a:	bb88      	cbnz	r0, 18670 <bt_le_adv_resume+0x98>
		bool dir_adv = adv_is_directed(adv);
   1860c:	f1a4 0010 	sub.w	r0, r4, #16
   18610:	f7ff fd9c 	bl	1814c <adv_is_directed>
   18614:	4602      	mov	r2, r0
   18616:	4620      	mov	r0, r4
   18618:	f00f fbbb 	bl	27d92 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1861c:	f3c0 3180 	ubfx	r1, r0, #14, #1
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   18620:	4620      	mov	r0, r4
   18622:	f00f fbb6 	bl	27d92 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST)) {
   18626:	f081 0101 	eor.w	r1, r1, #1
	if (atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   1862a:	0545      	lsls	r5, r0, #21
	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST)) {
   1862c:	ea4f 0141 	mov.w	r1, r1, lsl #1
   18630:	4824      	ldr	r0, [pc, #144]	; (186c4 <bt_le_adv_resume+0xec>)
		options |= BT_LE_ADV_OPT_CONNECTABLE;
   18632:	bf48      	it	mi
   18634:	f041 0101 	orrmi.w	r1, r1, #1
   18638:	f00f fbab 	bl	27d92 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   1863c:	0480      	lsls	r0, r0, #18
		options |= BT_LE_ADV_OPT_USE_IDENTITY;
   1863e:	bf48      	it	mi
   18640:	f041 0104 	orrmi.w	r1, r1, #4
		err = bt_id_set_adv_own_addr(adv, options, dir_adv, &own_addr_type);
   18644:	4820      	ldr	r0, [pc, #128]	; (186c8 <bt_le_adv_resume+0xf0>)
   18646:	1cfb      	adds	r3, r7, #3
   18648:	f7ff fc86 	bl	17f58 <bt_id_set_adv_own_addr>
		if (err) {
   1864c:	4605      	mov	r5, r0
   1864e:	b190      	cbz	r0, 18676 <bt_le_adv_resume+0x9e>
			LOG_ERR("Controller cannot resume connectable advertising (%d)", err);
   18650:	466c      	mov	r4, sp
   18652:	b088      	sub	sp, #32
   18654:	466a      	mov	r2, sp
   18656:	4b1d      	ldr	r3, [pc, #116]	; (186cc <bt_le_adv_resume+0xf4>)
   18658:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1865c:	2303      	movs	r3, #3
   1865e:	f842 3f10 	str.w	r3, [r2, #16]!
   18662:	481b      	ldr	r0, [pc, #108]	; (186d0 <bt_le_adv_resume+0xf8>)
   18664:	2300      	movs	r3, #0
   18666:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1866a:	f7fb fd0b 	bl	14084 <z_impl_z_log_msg_static_create>
   1866e:	46a5      	mov	sp, r4
}
   18670:	370c      	adds	r7, #12
   18672:	46bd      	mov	sp, r7
   18674:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_le_adv_set_enable_legacy(adv, enable);
   18676:	4814      	ldr	r0, [pc, #80]	; (186c8 <bt_le_adv_resume+0xf0>)
   18678:	2101      	movs	r1, #1
   1867a:	f00f fc3f 	bl	27efc <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
   1867e:	687e      	ldr	r6, [r7, #4]
	if (err) {
   18680:	b918      	cbnz	r0, 1868a <bt_le_adv_resume+0xb2>
	bt_conn_unref(conn);
   18682:	4630      	mov	r0, r6
   18684:	f000 fbbc 	bl	18e00 <bt_conn_unref>
	if (persist_paused) {
   18688:	e7f2      	b.n	18670 <bt_le_adv_resume+0x98>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1868a:	4629      	mov	r1, r5
   1868c:	4630      	mov	r0, r6
   1868e:	f000 fbf7 	bl	18e80 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   18692:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   18696:	480b      	ldr	r0, [pc, #44]	; (186c4 <bt_le_adv_resume+0xec>)
   18698:	f00f fb81 	bl	27d9e <atomic_and>
   1869c:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   1869e:	4630      	mov	r0, r6
   186a0:	f000 fbae 	bl	18e00 <bt_conn_unref>
	if (persist_paused) {
   186a4:	046b      	lsls	r3, r5, #17
   186a6:	d5e3      	bpl.n	18670 <bt_le_adv_resume+0x98>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   186a8:	f3bf 8f5b 	dmb	ish
   186ac:	e854 3f00 	ldrex	r3, [r4]
   186b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   186b4:	e844 3200 	strex	r2, r3, [r4]
   186b8:	2a00      	cmp	r2, #0
   186ba:	d1f7      	bne.n	186ac <bt_le_adv_resume+0xd4>
   186bc:	f3bf 8f5b 	dmb	ish
   186c0:	e7d6      	b.n	18670 <bt_le_adv_resume+0x98>
   186c2:	bf00      	nop
   186c4:	200003b0 	.word	0x200003b0
   186c8:	200003a0 	.word	0x200003a0
   186cc:	0002c8f7 	.word	0x0002c8f7
   186d0:	00029fb0 	.word	0x00029fb0

000186d4 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   186d4:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   186d6:	4b13      	ldr	r3, [pc, #76]	; (18724 <notify_connected+0x50>)
   186d8:	681d      	ldr	r5, [r3, #0]
{
   186da:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   186dc:	b995      	cbnz	r5, 18704 <notify_connected+0x30>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   186de:	4d12      	ldr	r5, [pc, #72]	; (18728 <notify_connected+0x54>)
   186e0:	4e12      	ldr	r6, [pc, #72]	; (1872c <notify_connected+0x58>)
   186e2:	42b5      	cmp	r5, r6
   186e4:	d91c      	bls.n	18720 <notify_connected+0x4c>
   186e6:	4912      	ldr	r1, [pc, #72]	; (18730 <notify_connected+0x5c>)
   186e8:	4a12      	ldr	r2, [pc, #72]	; (18734 <notify_connected+0x60>)
   186ea:	4813      	ldr	r0, [pc, #76]	; (18738 <notify_connected+0x64>)
   186ec:	f240 53ba 	movw	r3, #1466	; 0x5ba
   186f0:	f00e fd74 	bl	271dc <assert_print>
   186f4:	4811      	ldr	r0, [pc, #68]	; (1873c <notify_connected+0x68>)
   186f6:	f00e fd71 	bl	271dc <assert_print>
   186fa:	480e      	ldr	r0, [pc, #56]	; (18734 <notify_connected+0x60>)
   186fc:	f240 51ba 	movw	r1, #1466	; 0x5ba
   18700:	f00e fd65 	bl	271ce <assert_post_action>
		if (cb->connected) {
   18704:	682b      	ldr	r3, [r5, #0]
   18706:	b113      	cbz	r3, 1870e <notify_connected+0x3a>
			cb->connected(conn, conn->err);
   18708:	7a61      	ldrb	r1, [r4, #9]
   1870a:	4620      	mov	r0, r4
   1870c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1870e:	692d      	ldr	r5, [r5, #16]
   18710:	e7e4      	b.n	186dc <notify_connected+0x8>
		if (cb->connected) {
   18712:	682b      	ldr	r3, [r5, #0]
   18714:	b113      	cbz	r3, 1871c <notify_connected+0x48>
			cb->connected(conn, conn->err);
   18716:	7a61      	ldrb	r1, [r4, #9]
   18718:	4620      	mov	r0, r4
   1871a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1871c:	3514      	adds	r5, #20
   1871e:	e7e0      	b.n	186e2 <notify_connected+0xe>
   18720:	d3f7      	bcc.n	18712 <notify_connected+0x3e>
		}
	}
}
   18722:	bd70      	pop	{r4, r5, r6, pc}
   18724:	20003508 	.word	0x20003508
   18728:	00029f64 	.word	0x00029f64
   1872c:	00029f78 	.word	0x00029f78
   18730:	0002c964 	.word	0x0002c964
   18734:	0002c934 	.word	0x0002c934
   18738:	0002ae37 	.word	0x0002ae37
   1873c:	0002b3ac 	.word	0x0002b3ac

00018740 <tx_notify>:
{
   18740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
   18744:	4f15      	ldr	r7, [pc, #84]	; (1879c <tx_notify+0x5c>)
{
   18746:	4604      	mov	r4, r0
	tx->cb = NULL;
   18748:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
   1874c:	f04f 0240 	mov.w	r2, #64	; 0x40
   18750:	f3ef 8311 	mrs	r3, BASEPRI
   18754:	f382 8812 	msr	BASEPRI_MAX, r2
   18758:	f3bf 8f6f 	isb	sy
	return list->head;
   1875c:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   1875e:	b929      	cbnz	r1, 1876c <tx_notify+0x2c>
	__asm__ volatile(
   18760:	f383 8811 	msr	BASEPRI, r3
   18764:	f3bf 8f6f 	isb	sy
}
   18768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1876c:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   1876e:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   18770:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18772:	4281      	cmp	r1, r0
	list->tail = node;
   18774:	bf08      	it	eq
   18776:	6262      	streq	r2, [r4, #36]	; 0x24
   18778:	f383 8811 	msr	BASEPRI, r3
   1877c:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   18780:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   18784:	f8c1 800c 	str.w	r8, [r1, #12]
	tx->user_data = NULL;
   18788:	e9c1 8801 	strd	r8, r8, [r1, #4]
	k_fifo_put(&free_tx, tx);
   1878c:	4638      	mov	r0, r7
   1878e:	f011 f872 	bl	29876 <k_queue_append>
		cb(conn, user_data, 0);
   18792:	2200      	movs	r2, #0
   18794:	4631      	mov	r1, r6
   18796:	4620      	mov	r0, r4
   18798:	47a8      	blx	r5
	while (1) {
   1879a:	e7d7      	b.n	1874c <tx_notify+0xc>
   1879c:	20000ac4 	.word	0x20000ac4

000187a0 <conn_tx_destroy>:
{
   187a0:	b570      	push	{r4, r5, r6, lr}
   187a2:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(tx);
   187a4:	b949      	cbnz	r1, 187ba <conn_tx_destroy+0x1a>
   187a6:	490d      	ldr	r1, [pc, #52]	; (187dc <conn_tx_destroy+0x3c>)
   187a8:	480d      	ldr	r0, [pc, #52]	; (187e0 <conn_tx_destroy+0x40>)
   187aa:	4a0e      	ldr	r2, [pc, #56]	; (187e4 <conn_tx_destroy+0x44>)
   187ac:	2343      	movs	r3, #67	; 0x43
   187ae:	f00e fd15 	bl	271dc <assert_print>
   187b2:	480c      	ldr	r0, [pc, #48]	; (187e4 <conn_tx_destroy+0x44>)
   187b4:	2143      	movs	r1, #67	; 0x43
   187b6:	f00e fd0a 	bl	271ce <assert_post_action>
	void *user_data = tx->user_data;
   187ba:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->cb = NULL;
   187be:	2200      	movs	r2, #0
	tx->user_data = NULL;
   187c0:	e9c1 2201 	strd	r2, r2, [r1, #4]
	tx->pending_no_cb = 0U;
   187c4:	60ca      	str	r2, [r1, #12]
	k_fifo_put(&free_tx, tx);
   187c6:	4808      	ldr	r0, [pc, #32]	; (187e8 <conn_tx_destroy+0x48>)
   187c8:	f011 f855 	bl	29876 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   187cc:	4631      	mov	r1, r6
   187ce:	4620      	mov	r0, r4
   187d0:	462b      	mov	r3, r5
   187d2:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
   187d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   187da:	4718      	bx	r3
   187dc:	0002c97f 	.word	0x0002c97f
   187e0:	0002ae37 	.word	0x0002ae37
   187e4:	0002c934 	.word	0x0002c934
   187e8:	20000ac4 	.word	0x20000ac4

000187ec <send_frag>:
{
   187ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_dev.le.acl_mtu) {
   187f0:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 189d0 <send_frag+0x1e4>
{
   187f4:	b083      	sub	sp, #12
   187f6:	4698      	mov	r8, r3
	if (bt_dev.le.acl_mtu) {
   187f8:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
	return NULL;
   187fc:	2b00      	cmp	r3, #0
{
   187fe:	af00      	add	r7, sp, #0
   18800:	4604      	mov	r4, r0
   18802:	460d      	mov	r5, r1
	return NULL;
   18804:	f509 7084 	add.w	r0, r9, #264	; 0x108
{
   18808:	4616      	mov	r6, r2
	return NULL;
   1880a:	bf08      	it	eq
   1880c:	2000      	moveq	r0, #0
	return z_impl_k_sem_take(sem, timeout);
   1880e:	2200      	movs	r2, #0
   18810:	2300      	movs	r3, #0
   18812:	f008 fb7f 	bl	20f14 <z_impl_k_sem_take>
	if (k_sem_take(bt_conn_get_pkts(conn), K_NO_WAIT)) {
   18816:	2800      	cmp	r0, #0
   18818:	f040 80ca 	bne.w	189b0 <send_frag+0x1c4>
	if (frag) {
   1881c:	2e00      	cmp	r6, #0
   1881e:	f000 8090 	beq.w	18942 <send_frag+0x156>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   18822:	f106 0b0c 	add.w	fp, r6, #12
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   18826:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
   1882a:	607b      	str	r3, [r7, #4]
   1882c:	4658      	mov	r0, fp
   1882e:	f010 fafe 	bl	28e2e <net_buf_simple_tailroom>
   18832:	687b      	ldr	r3, [r7, #4]
   18834:	4298      	cmp	r0, r3
   18836:	d97f      	bls.n	18938 <send_frag+0x14c>
	return bt_dev.le.acl_mtu;
   18838:	f8b9 2104 	ldrh.w	r2, [r9, #260]	; 0x104
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1883c:	f855 1f0c 	ldr.w	r1, [r5, #12]!
   18840:	607a      	str	r2, [r7, #4]
   18842:	4658      	mov	r0, fp
   18844:	f010 fafb 	bl	28e3e <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   18848:	687a      	ldr	r2, [r7, #4]
   1884a:	4628      	mov	r0, r5
   1884c:	4611      	mov	r1, r2
   1884e:	f003 fdd3 	bl	1c3f8 <net_buf_simple_pull>
	if (conn->state != BT_CONN_CONNECTED) {
   18852:	7aa3      	ldrb	r3, [r4, #10]
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   18854:	69b5      	ldr	r5, [r6, #24]
	if (conn->state != BT_CONN_CONNECTED) {
   18856:	2b07      	cmp	r3, #7
   18858:	f040 80a7 	bne.w	189aa <send_frag+0x1be>
	__asm__ volatile(
   1885c:	f04f 0340 	mov.w	r3, #64	; 0x40
   18860:	f3ef 8211 	mrs	r2, BASEPRI
   18864:	f383 8812 	msr	BASEPRI_MAX, r3
   18868:	f3bf 8f6f 	isb	sy
	if (tx) {
   1886c:	2d00      	cmp	r5, #0
   1886e:	d073      	beq.n	18958 <send_frag+0x16c>
	parent->next = child;
   18870:	2300      	movs	r3, #0
   18872:	602b      	str	r3, [r5, #0]
	return list->tail;
   18874:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   18876:	2b00      	cmp	r3, #0
   18878:	d16b      	bne.n	18952 <send_frag+0x166>
	list->head = node;
   1887a:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   1887e:	f382 8811 	msr	BASEPRI, r2
   18882:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   18886:	2104      	movs	r1, #4
   18888:	f106 000c 	add.w	r0, r6, #12
   1888c:	f003 fd94 	bl	1c3b8 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   18890:	8823      	ldrh	r3, [r4, #0]
   18892:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
   18896:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
   1889a:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1889e:	8a33      	ldrh	r3, [r6, #16]
   188a0:	3b04      	subs	r3, #4
   188a2:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   188a4:	2302      	movs	r3, #2
   188a6:	7633      	strb	r3, [r6, #24]
	return bt_send(buf);
   188a8:	4630      	mov	r0, r6
   188aa:	f7fe fbd1 	bl	17050 <bt_send>
	if (err) {
   188ae:	4680      	mov	r8, r0
   188b0:	2800      	cmp	r0, #0
   188b2:	d03c      	beq.n	1892e <send_frag+0x142>
		LOG_ERR("Unable to send to driver (err %d)", err);
   188b4:	46eb      	mov	fp, sp
   188b6:	b088      	sub	sp, #32
   188b8:	466a      	mov	r2, sp
   188ba:	4b3f      	ldr	r3, [pc, #252]	; (189b8 <send_frag+0x1cc>)
   188bc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   188c0:	2303      	movs	r3, #3
   188c2:	f842 3f10 	str.w	r3, [r2, #16]!
   188c6:	483d      	ldr	r0, [pc, #244]	; (189bc <send_frag+0x1d0>)
   188c8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   188cc:	f00f fb3e 	bl	27f4c <z_log_msg_static_create.constprop.0>
   188d0:	46dd      	mov	sp, fp
	__asm__ volatile(
   188d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   188d6:	f3ef 8111 	mrs	r1, BASEPRI
   188da:	f383 8812 	msr	BASEPRI_MAX, r3
   188de:	f3bf 8f6f 	isb	sy
		if (tx) {
   188e2:	2d00      	cmp	r5, #0
   188e4:	d04e      	beq.n	18984 <send_frag+0x198>
	return list->head;
   188e6:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   188e8:	2200      	movs	r2, #0
   188ea:	b15b      	cbz	r3, 18904 <send_frag+0x118>
   188ec:	429d      	cmp	r5, r3
   188ee:	d146      	bne.n	1897e <send_frag+0x192>
	return node->next;
   188f0:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   188f2:	2a00      	cmp	r2, #0
   188f4:	d13d      	bne.n	18972 <send_frag+0x186>
   188f6:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   188f8:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   188fa:	4295      	cmp	r5, r2
   188fc:	d100      	bne.n	18900 <send_frag+0x114>
	list->tail = node;
   188fe:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   18900:	2300      	movs	r3, #0
   18902:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   18904:	f381 8811 	msr	BASEPRI, r1
   18908:	f3bf 8f6f 	isb	sy
		err = -EIO;
   1890c:	f06f 0804 	mvn.w	r8, #4
	if (bt_dev.le.acl_mtu) {
   18910:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
	return NULL;
   18914:	482a      	ldr	r0, [pc, #168]	; (189c0 <send_frag+0x1d4>)
   18916:	2b00      	cmp	r3, #0
   18918:	bf08      	it	eq
   1891a:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
   1891c:	f008 fab6 	bl	20e8c <z_impl_k_sem_give>
	if (tx) {
   18920:	b12d      	cbz	r5, 1892e <send_frag+0x142>
		tx_data(buf)->tx = NULL;
   18922:	2300      	movs	r3, #0
   18924:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
   18926:	4629      	mov	r1, r5
   18928:	4620      	mov	r0, r4
   1892a:	f7ff ff39 	bl	187a0 <conn_tx_destroy>
}
   1892e:	4640      	mov	r0, r8
   18930:	370c      	adds	r7, #12
   18932:	46bd      	mov	sp, r7
   18934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_tailroom(&buf->b);
   18938:	4658      	mov	r0, fp
   1893a:	f010 fa78 	bl	28e2e <net_buf_simple_tailroom>
		uint16_t frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1893e:	b282      	uxth	r2, r0
   18940:	e77c      	b.n	1883c <send_frag+0x50>
		buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   18942:	2200      	movs	r2, #0
   18944:	2300      	movs	r3, #0
   18946:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1894a:	f010 fa62 	bl	28e12 <net_buf_get>
   1894e:	4606      	mov	r6, r0
		frag = buf;
   18950:	e77f      	b.n	18852 <send_frag+0x66>
   18952:	601d      	str	r5, [r3, #0]
	list->tail = node;
   18954:	61a5      	str	r5, [r4, #24]
}
   18956:	e792      	b.n	1887e <send_frag+0x92>
	return list->tail;
   18958:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   1895a:	b133      	cbz	r3, 1896a <send_frag+0x17e>
			pending_no_cb = &tail_tx->pending_no_cb;
   1895c:	f103 0a0c 	add.w	sl, r3, #12
   18960:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   18962:	3301      	adds	r3, #1
   18964:	f8ca 3000 	str.w	r3, [sl]
   18968:	e789      	b.n	1887e <send_frag+0x92>
			pending_no_cb = &conn->pending_no_cb;
   1896a:	69e3      	ldr	r3, [r4, #28]
   1896c:	f104 0a1c 	add.w	sl, r4, #28
   18970:	e7f7      	b.n	18962 <send_frag+0x176>
	parent->next = child;
   18972:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   18974:	69a3      	ldr	r3, [r4, #24]
   18976:	429d      	cmp	r5, r3
	list->tail = node;
   18978:	bf08      	it	eq
   1897a:	61a2      	streq	r2, [r4, #24]
}
   1897c:	e7c0      	b.n	18900 <send_frag+0x114>
	return node->next;
   1897e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18980:	681b      	ldr	r3, [r3, #0]
   18982:	e7b2      	b.n	188ea <send_frag+0xfe>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   18984:	f8da 3000 	ldr.w	r3, [sl]
   18988:	b95b      	cbnz	r3, 189a2 <send_frag+0x1b6>
   1898a:	490e      	ldr	r1, [pc, #56]	; (189c4 <send_frag+0x1d8>)
   1898c:	480e      	ldr	r0, [pc, #56]	; (189c8 <send_frag+0x1dc>)
   1898e:	4a0f      	ldr	r2, [pc, #60]	; (189cc <send_frag+0x1e0>)
   18990:	f240 2351 	movw	r3, #593	; 0x251
   18994:	f00e fc22 	bl	271dc <assert_print>
   18998:	480c      	ldr	r0, [pc, #48]	; (189cc <send_frag+0x1e0>)
   1899a:	f240 2151 	movw	r1, #593	; 0x251
   1899e:	f00e fc16 	bl	271ce <assert_post_action>
			(*pending_no_cb)--;
   189a2:	3b01      	subs	r3, #1
   189a4:	f8ca 3000 	str.w	r3, [sl]
   189a8:	e7ac      	b.n	18904 <send_frag+0x118>
		err = -ENOTCONN;
   189aa:	f06f 087f 	mvn.w	r8, #127	; 0x7f
   189ae:	e7af      	b.n	18910 <send_frag+0x124>
		return -ENOBUFS;
   189b0:	f06f 0868 	mvn.w	r8, #104	; 0x68
   189b4:	e7bb      	b.n	1892e <send_frag+0x142>
   189b6:	bf00      	nop
   189b8:	0002c425 	.word	0x0002c425
   189bc:	00029fc0 	.word	0x00029fc0
   189c0:	20000490 	.word	0x20000490
   189c4:	0002c982 	.word	0x0002c982
   189c8:	0002ae37 	.word	0x0002ae37
   189cc:	0002c934 	.word	0x0002c934
   189d0:	20000388 	.word	0x20000388

000189d4 <bt_conn_get_pkts>:
	if (bt_dev.le.acl_mtu) {
   189d4:	4804      	ldr	r0, [pc, #16]	; (189e8 <bt_conn_get_pkts+0x14>)
   189d6:	f8b0 3104 	ldrh.w	r3, [r0, #260]	; 0x104
	return NULL;
   189da:	2b00      	cmp	r3, #0
   189dc:	f500 7084 	add.w	r0, r0, #264	; 0x108
}
   189e0:	bf08      	it	eq
   189e2:	2000      	moveq	r0, #0
   189e4:	4770      	bx	lr
   189e6:	bf00      	nop
   189e8:	20000388 	.word	0x20000388

000189ec <bt_conn_new>:
{
   189ec:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   189ee:	2200      	movs	r2, #0
   189f0:	4604      	mov	r4, r0
   189f2:	428a      	cmp	r2, r1
   189f4:	d102      	bne.n	189fc <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   189f6:	2400      	movs	r4, #0
}
   189f8:	4620      	mov	r0, r4
   189fa:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   189fc:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
   18a00:	2001      	movs	r0, #1
   18a02:	f3bf 8f5b 	dmb	ish
   18a06:	e853 5f00 	ldrex	r5, [r3]
   18a0a:	2d00      	cmp	r5, #0
   18a0c:	d104      	bne.n	18a18 <bt_conn_new+0x2c>
   18a0e:	e843 0c00 	strex	ip, r0, [r3]
   18a12:	f1bc 0f00 	cmp.w	ip, #0
   18a16:	d1f6      	bne.n	18a06 <bt_conn_new+0x1a>
   18a18:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   18a1c:	d002      	beq.n	18a24 <bt_conn_new+0x38>
   18a1e:	34c8      	adds	r4, #200	; 0xc8
	for (i = 0; i < size; i++) {
   18a20:	4402      	add	r2, r0
   18a22:	e7e6      	b.n	189f2 <bt_conn_new+0x6>
	if (!conn) {
   18a24:	2c00      	cmp	r4, #0
   18a26:	d0e6      	beq.n	189f6 <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   18a28:	22c4      	movs	r2, #196	; 0xc4
   18a2a:	2100      	movs	r1, #0
   18a2c:	4620      	mov	r0, r4
   18a2e:	f00f f808 	bl	27a42 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   18a32:	f104 0060 	add.w	r0, r4, #96	; 0x60
   18a36:	4904      	ldr	r1, [pc, #16]	; (18a48 <bt_conn_new+0x5c>)
   18a38:	f008 fe1e 	bl	21678 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   18a3c:	4903      	ldr	r1, [pc, #12]	; (18a4c <bt_conn_new+0x60>)
   18a3e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   18a42:	f008 fccb 	bl	213dc <k_work_init>
	return conn;
   18a46:	e7d7      	b.n	189f8 <bt_conn_new+0xc>
   18a48:	000194fd 	.word	0x000194fd
   18a4c:	00027f53 	.word	0x00027f53

00018a50 <conn_cleanup>:
{
   18a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18a54:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   18a56:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   18a58:	f104 0638 	add.w	r6, r4, #56	; 0x38
   18a5c:	2300      	movs	r3, #0
   18a5e:	2200      	movs	r2, #0
   18a60:	4630      	mov	r0, r6
   18a62:	f010 f9d6 	bl	28e12 <net_buf_get>
   18a66:	4603      	mov	r3, r0
   18a68:	b980      	cbnz	r0, 18a8c <conn_cleanup+0x3c>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   18a6a:	6963      	ldr	r3, [r4, #20]
   18a6c:	b1cb      	cbz	r3, 18aa2 <conn_cleanup+0x52>
   18a6e:	4918      	ldr	r1, [pc, #96]	; (18ad0 <conn_cleanup+0x80>)
   18a70:	4a18      	ldr	r2, [pc, #96]	; (18ad4 <conn_cleanup+0x84>)
   18a72:	4819      	ldr	r0, [pc, #100]	; (18ad8 <conn_cleanup+0x88>)
   18a74:	f44f 733c 	mov.w	r3, #752	; 0x2f0
   18a78:	f00e fbb0 	bl	271dc <assert_print>
   18a7c:	4817      	ldr	r0, [pc, #92]	; (18adc <conn_cleanup+0x8c>)
   18a7e:	f00e fbad 	bl	271dc <assert_print>
   18a82:	f44f 713c 	mov.w	r1, #752	; 0x2f0
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   18a86:	4813      	ldr	r0, [pc, #76]	; (18ad4 <conn_cleanup+0x84>)
   18a88:	f00e fba1 	bl	271ce <assert_post_action>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   18a8c:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   18a8e:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   18a90:	f003 fbaa 	bl	1c1e8 <net_buf_unref>
		if (tx) {
   18a94:	2d00      	cmp	r5, #0
   18a96:	d0e1      	beq.n	18a5c <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   18a98:	4629      	mov	r1, r5
   18a9a:	4620      	mov	r0, r4
   18a9c:	f7ff fe80 	bl	187a0 <conn_tx_destroy>
   18aa0:	e7da      	b.n	18a58 <conn_cleanup+0x8>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   18aa2:	69e3      	ldr	r3, [r4, #28]
   18aa4:	b14b      	cbz	r3, 18aba <conn_cleanup+0x6a>
   18aa6:	490e      	ldr	r1, [pc, #56]	; (18ae0 <conn_cleanup+0x90>)
   18aa8:	4a0a      	ldr	r2, [pc, #40]	; (18ad4 <conn_cleanup+0x84>)
   18aaa:	480b      	ldr	r0, [pc, #44]	; (18ad8 <conn_cleanup+0x88>)
   18aac:	f240 23f1 	movw	r3, #753	; 0x2f1
   18ab0:	f00e fb94 	bl	271dc <assert_print>
   18ab4:	f240 21f1 	movw	r1, #753	; 0x2f1
   18ab8:	e7e5      	b.n	18a86 <conn_cleanup+0x36>
	bt_conn_reset_rx_state(conn);
   18aba:	4620      	mov	r0, r4
   18abc:	f00f fa4c 	bl	27f58 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   18ac0:	f104 0060 	add.w	r0, r4, #96	; 0x60
   18ac4:	2200      	movs	r2, #0
}
   18ac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   18aca:	2300      	movs	r3, #0
   18acc:	f008 bef0 	b.w	218b0 <k_work_reschedule>
   18ad0:	0002c995 	.word	0x0002c995
   18ad4:	0002c934 	.word	0x0002c934
   18ad8:	0002ae37 	.word	0x0002ae37
   18adc:	0002c9bb 	.word	0x0002c9bb
   18ae0:	0002c9d0 	.word	0x0002c9d0

00018ae4 <bt_conn_recv>:
{
   18ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18ae8:	b086      	sub	sp, #24
   18aea:	4616      	mov	r6, r2
   18aec:	af00      	add	r7, sp, #0
   18aee:	4604      	mov	r4, r0
   18af0:	460d      	mov	r5, r1
	tx_notify(conn);
   18af2:	f7ff fe25 	bl	18740 <tx_notify>
	switch (flags) {
   18af6:	2e01      	cmp	r6, #1
   18af8:	d030      	beq.n	18b5c <bt_conn_recv+0x78>
   18afa:	2e02      	cmp	r6, #2
   18afc:	d16a      	bne.n	18bd4 <bt_conn_recv+0xf0>
		if (conn->rx) {
   18afe:	6923      	ldr	r3, [r4, #16]
   18b00:	b163      	cbz	r3, 18b1c <bt_conn_recv+0x38>
			LOG_ERR("Unexpected first L2CAP frame");
   18b02:	4b40      	ldr	r3, [pc, #256]	; (18c04 <bt_conn_recv+0x120>)
   18b04:	4840      	ldr	r0, [pc, #256]	; (18c08 <bt_conn_recv+0x124>)
   18b06:	e9c7 6304 	strd	r6, r3, [r7, #16]
   18b0a:	f107 0210 	add.w	r2, r7, #16
   18b0e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18b12:	f00f fa1b 	bl	27f4c <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   18b16:	4620      	mov	r0, r4
   18b18:	f00f fa1e 	bl	27f58 <bt_conn_reset_rx_state>
		conn->rx = buf;
   18b1c:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   18b1e:	6921      	ldr	r1, [r4, #16]
   18b20:	8a08      	ldrh	r0, [r1, #16]
   18b22:	2801      	cmp	r0, #1
   18b24:	d930      	bls.n	18b88 <bt_conn_recv+0xa4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   18b26:	68cb      	ldr	r3, [r1, #12]
   18b28:	881b      	ldrh	r3, [r3, #0]
   18b2a:	3304      	adds	r3, #4
   18b2c:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   18b2e:	4298      	cmp	r0, r3
   18b30:	d32a      	bcc.n	18b88 <bt_conn_recv+0xa4>
	if (conn->rx->len > acl_total_len) {
   18b32:	d95f      	bls.n	18bf4 <bt_conn_recv+0x110>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   18b34:	466d      	mov	r5, sp
   18b36:	b088      	sub	sp, #32
   18b38:	466a      	mov	r2, sp
   18b3a:	4934      	ldr	r1, [pc, #208]	; (18c0c <bt_conn_recv+0x128>)
   18b3c:	61d3      	str	r3, [r2, #28]
   18b3e:	2304      	movs	r3, #4
   18b40:	e9c2 1005 	strd	r1, r0, [r2, #20]
   18b44:	f842 3f10 	str.w	r3, [r2, #16]!
   18b48:	482f      	ldr	r0, [pc, #188]	; (18c08 <bt_conn_recv+0x124>)
   18b4a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   18b4e:	f00f f9fd 	bl	27f4c <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   18b52:	4620      	mov	r0, r4
   18b54:	46ad      	mov	sp, r5
   18b56:	f00f f9ff 	bl	27f58 <bt_conn_reset_rx_state>
		return;
   18b5a:	e015      	b.n	18b88 <bt_conn_recv+0xa4>
		if (!conn->rx) {
   18b5c:	6920      	ldr	r0, [r4, #16]
   18b5e:	b970      	cbnz	r0, 18b7e <bt_conn_recv+0x9a>
			LOG_ERR("Unexpected L2CAP continuation");
   18b60:	4b2b      	ldr	r3, [pc, #172]	; (18c10 <bt_conn_recv+0x12c>)
   18b62:	617b      	str	r3, [r7, #20]
   18b64:	2302      	movs	r3, #2
   18b66:	4828      	ldr	r0, [pc, #160]	; (18c08 <bt_conn_recv+0x124>)
   18b68:	613b      	str	r3, [r7, #16]
   18b6a:	f107 0210 	add.w	r2, r7, #16
   18b6e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18b72:	f00f f9eb 	bl	27f4c <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   18b76:	4620      	mov	r0, r4
   18b78:	f00f f9ee 	bl	27f58 <bt_conn_reset_rx_state>
   18b7c:	e001      	b.n	18b82 <bt_conn_recv+0x9e>
		if (!buf->len) {
   18b7e:	8a2e      	ldrh	r6, [r5, #16]
   18b80:	b936      	cbnz	r6, 18b90 <bt_conn_recv+0xac>
		net_buf_unref(buf);
   18b82:	4628      	mov	r0, r5
   18b84:	f003 fb30 	bl	1c1e8 <net_buf_unref>
}
   18b88:	3718      	adds	r7, #24
   18b8a:	46bd      	mov	sp, r7
   18b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18b90:	300c      	adds	r0, #12
   18b92:	f010 f94c 	bl	28e2e <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   18b96:	4286      	cmp	r6, r0
   18b98:	d912      	bls.n	18bc0 <bt_conn_recv+0xdc>
			LOG_ERR("Not enough buffer space for L2CAP data");
   18b9a:	4b1e      	ldr	r3, [pc, #120]	; (18c14 <bt_conn_recv+0x130>)
   18b9c:	617b      	str	r3, [r7, #20]
   18b9e:	2302      	movs	r3, #2
   18ba0:	613b      	str	r3, [r7, #16]
   18ba2:	4819      	ldr	r0, [pc, #100]	; (18c08 <bt_conn_recv+0x124>)
   18ba4:	f107 0210 	add.w	r2, r7, #16
   18ba8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18bac:	f00f f9ce 	bl	27f4c <z_log_msg_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   18bb0:	2200      	movs	r2, #0
   18bb2:	6921      	ldr	r1, [r4, #16]
   18bb4:	4620      	mov	r0, r4
   18bb6:	f000 ff21 	bl	199fc <bt_l2cap_recv>
			conn->rx = NULL;
   18bba:	2300      	movs	r3, #0
   18bbc:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   18bbe:	e7e0      	b.n	18b82 <bt_conn_recv+0x9e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   18bc0:	6920      	ldr	r0, [r4, #16]
   18bc2:	8a2a      	ldrh	r2, [r5, #16]
   18bc4:	68e9      	ldr	r1, [r5, #12]
   18bc6:	300c      	adds	r0, #12
   18bc8:	f010 f939 	bl	28e3e <net_buf_simple_add_mem>
		net_buf_unref(buf);
   18bcc:	4628      	mov	r0, r5
   18bce:	f003 fb0b 	bl	1c1e8 <net_buf_unref>
		break;
   18bd2:	e7a4      	b.n	18b1e <bt_conn_recv+0x3a>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   18bd4:	46e8      	mov	r8, sp
   18bd6:	b088      	sub	sp, #32
   18bd8:	466a      	mov	r2, sp
   18bda:	4b0f      	ldr	r3, [pc, #60]	; (18c18 <bt_conn_recv+0x134>)
   18bdc:	480a      	ldr	r0, [pc, #40]	; (18c08 <bt_conn_recv+0x124>)
	switch (flags) {
   18bde:	e9c2 3605 	strd	r3, r6, [r2, #20]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   18be2:	2303      	movs	r3, #3
   18be4:	f842 3f10 	str.w	r3, [r2, #16]!
   18be8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18bec:	f00f f9ae 	bl	27f4c <z_log_msg_static_create.constprop.0>
   18bf0:	46c5      	mov	sp, r8
   18bf2:	e7c0      	b.n	18b76 <bt_conn_recv+0x92>
	conn->rx = NULL;
   18bf4:	2300      	movs	r3, #0
   18bf6:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   18bf8:	2201      	movs	r2, #1
   18bfa:	4620      	mov	r0, r4
   18bfc:	f000 fefe 	bl	199fc <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
   18c00:	e7c2      	b.n	18b88 <bt_conn_recv+0xa4>
   18c02:	bf00      	nop
   18c04:	0002c9e9 	.word	0x0002c9e9
   18c08:	00029fc0 	.word	0x00029fc0
   18c0c:	0002ca69 	.word	0x0002ca69
   18c10:	0002ca06 	.word	0x0002ca06
   18c14:	0002ca24 	.word	0x0002ca24
   18c18:	0002ca4b 	.word	0x0002ca4b

00018c1c <bt_conn_send_cb>:
{
   18c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18c20:	4698      	mov	r8, r3
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
   18c22:	7acb      	ldrb	r3, [r1, #11]
   18c24:	2b07      	cmp	r3, #7
{
   18c26:	b086      	sub	sp, #24
   18c28:	4606      	mov	r6, r0
   18c2a:	460d      	mov	r5, r1
   18c2c:	4617      	mov	r7, r2
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
   18c2e:	d80e      	bhi.n	18c4e <bt_conn_send_cb+0x32>
		LOG_ERR("not enough room in user_data");
   18c30:	4b2c      	ldr	r3, [pc, #176]	; (18ce4 <bt_conn_send_cb+0xc8>)
   18c32:	482d      	ldr	r0, [pc, #180]	; (18ce8 <bt_conn_send_cb+0xcc>)
   18c34:	9305      	str	r3, [sp, #20]
   18c36:	aa04      	add	r2, sp, #16
   18c38:	2302      	movs	r3, #2
   18c3a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18c3e:	9304      	str	r3, [sp, #16]
   18c40:	f00f f984 	bl	27f4c <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   18c44:	f06f 0015 	mvn.w	r0, #21
}
   18c48:	b006      	add	sp, #24
   18c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->state != BT_CONN_CONNECTED) {
   18c4e:	7a83      	ldrb	r3, [r0, #10]
   18c50:	2b07      	cmp	r3, #7
   18c52:	d00c      	beq.n	18c6e <bt_conn_send_cb+0x52>
		LOG_ERR("not connected!");
   18c54:	4b25      	ldr	r3, [pc, #148]	; (18cec <bt_conn_send_cb+0xd0>)
   18c56:	9305      	str	r3, [sp, #20]
   18c58:	4823      	ldr	r0, [pc, #140]	; (18ce8 <bt_conn_send_cb+0xcc>)
   18c5a:	2302      	movs	r3, #2
   18c5c:	aa04      	add	r2, sp, #16
   18c5e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18c62:	9304      	str	r3, [sp, #16]
   18c64:	f00f f972 	bl	27f4c <z_log_msg_static_create.constprop.0>
		return -ENOTCONN;
   18c68:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   18c6c:	e7ec      	b.n	18c48 <bt_conn_send_cb+0x2c>
	if (cb) {
   18c6e:	2a00      	cmp	r2, #0
   18c70:	d033      	beq.n	18cda <bt_conn_send_cb+0xbe>
	return z_impl_z_current_get();
   18c72:	f009 ff91 	bl	22b98 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   18c76:	4b1e      	ldr	r3, [pc, #120]	; (18cf0 <bt_conn_send_cb+0xd4>)
   18c78:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   18c7a:	481e      	ldr	r0, [pc, #120]	; (18cf4 <bt_conn_send_cb+0xd8>)
   18c7c:	bf07      	ittee	eq
   18c7e:	2200      	moveq	r2, #0
   18c80:	2300      	moveq	r3, #0
   18c82:	f04f 32ff 	movne.w	r2, #4294967295
   18c86:	f04f 33ff 	movne.w	r3, #4294967295
   18c8a:	f008 f895 	bl	20db8 <z_impl_k_queue_get>
   18c8e:	4604      	mov	r4, r0
		if (!tx) {
   18c90:	b328      	cbz	r0, 18cde <bt_conn_send_cb+0xc2>
		if (conn->state != BT_CONN_CONNECTED) {
   18c92:	7ab3      	ldrb	r3, [r6, #10]
   18c94:	2b07      	cmp	r3, #7
   18c96:	d012      	beq.n	18cbe <bt_conn_send_cb+0xa2>
			LOG_WRN("Disconnected while allocating context");
   18c98:	4b17      	ldr	r3, [pc, #92]	; (18cf8 <bt_conn_send_cb+0xdc>)
   18c9a:	9305      	str	r3, [sp, #20]
   18c9c:	4812      	ldr	r0, [pc, #72]	; (18ce8 <bt_conn_send_cb+0xcc>)
   18c9e:	2302      	movs	r3, #2
   18ca0:	aa04      	add	r2, sp, #16
   18ca2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18ca6:	9304      	str	r3, [sp, #16]
   18ca8:	f00f f950 	bl	27f4c <z_log_msg_static_create.constprop.0>
	tx->cb = NULL;
   18cac:	2300      	movs	r3, #0
	tx->user_data = NULL;
   18cae:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
   18cb2:	4810      	ldr	r0, [pc, #64]	; (18cf4 <bt_conn_send_cb+0xd8>)
	tx->pending_no_cb = 0U;
   18cb4:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
   18cb6:	4621      	mov	r1, r4
   18cb8:	f010 fddd 	bl	29876 <k_queue_append>
}
   18cbc:	e7d4      	b.n	18c68 <bt_conn_send_cb+0x4c>
		tx->user_data = user_data;
   18cbe:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   18cc2:	2300      	movs	r3, #0
   18cc4:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   18cc6:	61ac      	str	r4, [r5, #24]
	tx_data(buf)->is_cont = false;
   18cc8:	2400      	movs	r4, #0
	net_buf_put(&conn->tx_queue, buf);
   18cca:	f106 0038 	add.w	r0, r6, #56	; 0x38
	tx_data(buf)->is_cont = false;
   18cce:	772c      	strb	r4, [r5, #28]
	net_buf_put(&conn->tx_queue, buf);
   18cd0:	4629      	mov	r1, r5
   18cd2:	f003 fa63 	bl	1c19c <net_buf_put>
	return 0;
   18cd6:	4620      	mov	r0, r4
   18cd8:	e7b6      	b.n	18c48 <bt_conn_send_cb+0x2c>
   18cda:	4614      	mov	r4, r2
   18cdc:	e7f3      	b.n	18cc6 <bt_conn_send_cb+0xaa>
			return -ENOBUFS;
   18cde:	f06f 0068 	mvn.w	r0, #104	; 0x68
   18ce2:	e7b1      	b.n	18c48 <bt_conn_send_cb+0x2c>
   18ce4:	0002ca84 	.word	0x0002ca84
   18ce8:	00029fc0 	.word	0x00029fc0
   18cec:	0002caa1 	.word	0x0002caa1
   18cf0:	20002df0 	.word	0x20002df0
   18cf4:	20000ac4 	.word	0x20000ac4
   18cf8:	0002cab0 	.word	0x0002cab0

00018cfc <bt_conn_prepare_events>:
{
   18cfc:	b570      	push	{r4, r5, r6, lr}
   18cfe:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
   18d00:	4823      	ldr	r0, [pc, #140]	; (18d90 <bt_conn_prepare_events+0x94>)
   18d02:	f010 ff69 	bl	29bd8 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   18d06:	4b22      	ldr	r3, [pc, #136]	; (18d90 <bt_conn_prepare_events+0x94>)
   18d08:	2200      	movs	r2, #0
   18d0a:	4620      	mov	r0, r4
   18d0c:	2101      	movs	r1, #1
   18d0e:	f00a fde7 	bl	238e0 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18d12:	f3bf 8f5b 	dmb	ish
   18d16:	4b1f      	ldr	r3, [pc, #124]	; (18d94 <bt_conn_prepare_events+0x98>)
   18d18:	681a      	ldr	r2, [r3, #0]
   18d1a:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   18d1e:	f104 0014 	add.w	r0, r4, #20
	if (!atomic_get(&conn->ref)) {
   18d22:	b90a      	cbnz	r2, 18d28 <bt_conn_prepare_events+0x2c>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   18d24:	2001      	movs	r0, #1
}
   18d26:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   18d28:	f1a3 01c4 	sub.w	r1, r3, #196	; 0xc4
   18d2c:	f813 3cba 	ldrb.w	r3, [r3, #-186]
   18d30:	b993      	cbnz	r3, 18d58 <bt_conn_prepare_events+0x5c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18d32:	f3bf 8f5b 	dmb	ish
   18d36:	1d0b      	adds	r3, r1, #4
   18d38:	e853 2f00 	ldrex	r2, [r3]
   18d3c:	f022 0540 	bic.w	r5, r2, #64	; 0x40
   18d40:	e843 5600 	strex	r6, r5, [r3]
   18d44:	2e00      	cmp	r6, #0
   18d46:	d1f7      	bne.n	18d38 <bt_conn_prepare_events+0x3c>
   18d48:	f3bf 8f5b 	dmb	ish
   18d4c:	0653      	lsls	r3, r2, #25
   18d4e:	d503      	bpl.n	18d58 <bt_conn_prepare_events+0x5c>
		conn_cleanup(conn);
   18d50:	4608      	mov	r0, r1
   18d52:	f7ff fe7d 	bl	18a50 <conn_cleanup>
		return -ENOTCONN;
   18d56:	e7e5      	b.n	18d24 <bt_conn_prepare_events+0x28>
	if (conn->state != BT_CONN_CONNECTED) {
   18d58:	7a8b      	ldrb	r3, [r1, #10]
   18d5a:	2b07      	cmp	r3, #7
   18d5c:	d1e2      	bne.n	18d24 <bt_conn_prepare_events+0x28>
	if (bt_dev.le.acl_mtu) {
   18d5e:	4b0e      	ldr	r3, [pc, #56]	; (18d98 <bt_conn_prepare_events+0x9c>)
   18d60:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   18d64:	2a00      	cmp	r2, #0
   18d66:	d0dd      	beq.n	18d24 <bt_conn_prepare_events+0x28>
	return sem->count;
   18d68:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (packets_waiting && !buffers_available) {
   18d6c:	6b89      	ldr	r1, [r1, #56]	; 0x38
   18d6e:	b151      	cbz	r1, 18d86 <bt_conn_prepare_events+0x8a>
   18d70:	b94a      	cbnz	r2, 18d86 <bt_conn_prepare_events+0x8a>
		k_poll_event_init(&events[0],
   18d72:	f503 7384 	add.w	r3, r3, #264	; 0x108
   18d76:	2102      	movs	r1, #2
		k_poll_event_init(&events[0],
   18d78:	f00a fdb2 	bl	238e0 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   18d7c:	2301      	movs	r3, #1
   18d7e:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   18d82:	2002      	movs	r0, #2
	return ev_count;
   18d84:	e7cf      	b.n	18d26 <bt_conn_prepare_events+0x2a>
		k_poll_event_init(&events[0],
   18d86:	4b05      	ldr	r3, [pc, #20]	; (18d9c <bt_conn_prepare_events+0xa0>)
   18d88:	2200      	movs	r2, #0
   18d8a:	2104      	movs	r1, #4
   18d8c:	e7f4      	b.n	18d78 <bt_conn_prepare_events+0x7c>
   18d8e:	bf00      	nop
   18d90:	2000067c 	.word	0x2000067c
   18d94:	200021cc 	.word	0x200021cc
   18d98:	20000388 	.word	0x20000388
   18d9c:	20002140 	.word	0x20002140

00018da0 <bt_conn_ref>:
{
   18da0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(conn);
   18da2:	b958      	cbnz	r0, 18dbc <bt_conn_ref+0x1c>
   18da4:	4913      	ldr	r1, [pc, #76]	; (18df4 <bt_conn_ref+0x54>)
   18da6:	4814      	ldr	r0, [pc, #80]	; (18df8 <bt_conn_ref+0x58>)
   18da8:	4a14      	ldr	r2, [pc, #80]	; (18dfc <bt_conn_ref+0x5c>)
   18daa:	f240 43db 	movw	r3, #1243	; 0x4db
   18dae:	f00e fa15 	bl	271dc <assert_print>
   18db2:	4812      	ldr	r0, [pc, #72]	; (18dfc <bt_conn_ref+0x5c>)
   18db4:	f240 41db 	movw	r1, #1243	; 0x4db
   18db8:	f00e fa09 	bl	271ce <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18dbc:	f3bf 8f5b 	dmb	ish
   18dc0:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   18dc4:	f3bf 8f5b 	dmb	ish
		old = atomic_get(&conn->ref);
   18dc8:	f100 02c4 	add.w	r2, r0, #196	; 0xc4
		if (!old) {
   18dcc:	b17b      	cbz	r3, 18dee <bt_conn_ref+0x4e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   18dce:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   18dd2:	1c59      	adds	r1, r3, #1
   18dd4:	e852 4f00 	ldrex	r4, [r2]
   18dd8:	429c      	cmp	r4, r3
   18dda:	d104      	bne.n	18de6 <bt_conn_ref+0x46>
   18ddc:	e842 1c00 	strex	ip, r1, [r2]
   18de0:	f1bc 0f00 	cmp.w	ip, #0
   18de4:	d1f6      	bne.n	18dd4 <bt_conn_ref+0x34>
   18de6:	f3bf 8f5b 	dmb	ish
   18dea:	d1e7      	bne.n	18dbc <bt_conn_ref+0x1c>
}
   18dec:	bd10      	pop	{r4, pc}
			return NULL;
   18dee:	4618      	mov	r0, r3
   18df0:	e7fc      	b.n	18dec <bt_conn_ref+0x4c>
   18df2:	bf00      	nop
   18df4:	0002cd6c 	.word	0x0002cd6c
   18df8:	0002ae37 	.word	0x0002ae37
   18dfc:	0002c934 	.word	0x0002c934

00018e00 <bt_conn_unref>:
{
   18e00:	b510      	push	{r4, lr}
	old = atomic_dec(&conn->ref);
   18e02:	f100 03c4 	add.w	r3, r0, #196	; 0xc4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   18e06:	f3bf 8f5b 	dmb	ish
   18e0a:	e853 2f00 	ldrex	r2, [r3]
   18e0e:	1e51      	subs	r1, r2, #1
   18e10:	e843 1400 	strex	r4, r1, [r3]
   18e14:	2c00      	cmp	r4, #0
   18e16:	d1f8      	bne.n	18e0a <bt_conn_unref+0xa>
   18e18:	f3bf 8f5b 	dmb	ish
	__ASSERT(old > 0, "Conn reference counter is 0");
   18e1c:	2a00      	cmp	r2, #0
   18e1e:	dc0e      	bgt.n	18e3e <bt_conn_unref+0x3e>
   18e20:	490f      	ldr	r1, [pc, #60]	; (18e60 <bt_conn_unref+0x60>)
   18e22:	4a10      	ldr	r2, [pc, #64]	; (18e64 <bt_conn_unref+0x64>)
   18e24:	4810      	ldr	r0, [pc, #64]	; (18e68 <bt_conn_unref+0x68>)
   18e26:	f240 43f7 	movw	r3, #1271	; 0x4f7
   18e2a:	f00e f9d7 	bl	271dc <assert_print>
   18e2e:	480f      	ldr	r0, [pc, #60]	; (18e6c <bt_conn_unref+0x6c>)
   18e30:	f00e f9d4 	bl	271dc <assert_print>
   18e34:	480b      	ldr	r0, [pc, #44]	; (18e64 <bt_conn_unref+0x64>)
   18e36:	f240 41f7 	movw	r1, #1271	; 0x4f7
   18e3a:	f00e f9c8 	bl	271ce <assert_post_action>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   18e3e:	8842      	ldrh	r2, [r0, #2]
   18e40:	f240 1301 	movw	r3, #257	; 0x101
   18e44:	429a      	cmp	r2, r3
   18e46:	d10a      	bne.n	18e5e <bt_conn_unref+0x5e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18e48:	f3bf 8f5b 	dmb	ish
   18e4c:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   18e50:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   18e54:	b91b      	cbnz	r3, 18e5e <bt_conn_unref+0x5e>
}
   18e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   18e5a:	f7ff bbbd 	b.w	185d8 <bt_le_adv_resume>
}
   18e5e:	bd10      	pop	{r4, pc}
   18e60:	0002cad6 	.word	0x0002cad6
   18e64:	0002c934 	.word	0x0002c934
   18e68:	0002ae37 	.word	0x0002ae37
   18e6c:	0002cade 	.word	0x0002cade

00018e70 <bt_conn_lookup_handle>:
{
   18e70:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   18e72:	2101      	movs	r1, #1
   18e74:	4801      	ldr	r0, [pc, #4]	; (18e7c <bt_conn_lookup_handle+0xc>)
   18e76:	f00f b878 	b.w	27f6a <conn_lookup_handle>
   18e7a:	bf00      	nop
   18e7c:	20002108 	.word	0x20002108

00018e80 <bt_conn_set_state>:
{
   18e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
   18e84:	7a86      	ldrb	r6, [r0, #10]
   18e86:	428e      	cmp	r6, r1
{
   18e88:	af00      	add	r7, sp, #0
   18e8a:	4604      	mov	r4, r0
   18e8c:	460d      	mov	r5, r1
	if (conn->state == state) {
   18e8e:	d118      	bne.n	18ec2 <bt_conn_set_state+0x42>
	switch (state) {
   18e90:	2e08      	cmp	r6, #8
   18e92:	bf96      	itet	ls
   18e94:	4b72      	ldrls	r3, [pc, #456]	; (19060 <bt_conn_set_state+0x1e0>)
	if (conn->state == state) {
   18e96:	4b73      	ldrhi	r3, [pc, #460]	; (19064 <bt_conn_set_state+0x1e4>)
   18e98:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
		LOG_WRN("no transition %s", state2str(state));
   18e9c:	466c      	mov	r4, sp
   18e9e:	b088      	sub	sp, #32
   18ea0:	466a      	mov	r2, sp
   18ea2:	4971      	ldr	r1, [pc, #452]	; (19068 <bt_conn_set_state+0x1e8>)
   18ea4:	e9c2 1305 	strd	r1, r3, [r2, #20]
   18ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
   18eac:	8393      	strh	r3, [r2, #28]
   18eae:	4b6f      	ldr	r3, [pc, #444]	; (1906c <bt_conn_set_state+0x1ec>)
   18eb0:	f842 3f10 	str.w	r3, [r2, #16]!
   18eb4:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
		LOG_WRN("no valid (%u) state was set", state);
   18eb8:	486d      	ldr	r0, [pc, #436]	; (19070 <bt_conn_set_state+0x1f0>)
   18eba:	f00f f847 	bl	27f4c <z_log_msg_static_create.constprop.0>
   18ebe:	46a5      	mov	sp, r4
   18ec0:	e04c      	b.n	18f5c <bt_conn_set_state+0xdc>
	conn->state = state;
   18ec2:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   18ec4:	b926      	cbnz	r6, 18ed0 <bt_conn_set_state+0x50>
		if (conn->type != BT_CONN_TYPE_ISO) {
   18ec6:	7883      	ldrb	r3, [r0, #2]
   18ec8:	2b08      	cmp	r3, #8
   18eca:	d001      	beq.n	18ed0 <bt_conn_set_state+0x50>
			bt_conn_ref(conn);
   18ecc:	f7ff ff68 	bl	18da0 <bt_conn_ref>
	switch (conn->state) {
   18ed0:	7aa3      	ldrb	r3, [r4, #10]
   18ed2:	2b08      	cmp	r3, #8
   18ed4:	f200 80bf 	bhi.w	19056 <bt_conn_set_state+0x1d6>
   18ed8:	e8df f003 	tbb	[pc, r3]
   18edc:	40400543 	.word	0x40400543
   18ee0:	25404040 	.word	0x25404040
   18ee4:	40          	.byte	0x40
   18ee5:	00          	.byte	0x00
	if (bt_dev.le.acl_mtu) {
   18ee6:	4d63      	ldr	r5, [pc, #396]	; (19074 <bt_conn_set_state+0x1f4>)
		tx->pending_no_cb = 0U;
   18ee8:	f04f 0800 	mov.w	r8, #0
	return NULL;
   18eec:	f505 7684 	add.w	r6, r5, #264	; 0x108
	__asm__ volatile(
   18ef0:	f04f 0240 	mov.w	r2, #64	; 0x40
   18ef4:	f3ef 8311 	mrs	r3, BASEPRI
   18ef8:	f382 8812 	msr	BASEPRI_MAX, r2
   18efc:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   18f00:	69e2      	ldr	r2, [r4, #28]
   18f02:	2a00      	cmp	r2, #0
   18f04:	f000 8082 	beq.w	1900c <bt_conn_set_state+0x18c>
			conn->pending_no_cb--;
   18f08:	3a01      	subs	r2, #1
   18f0a:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   18f0c:	f383 8811 	msr	BASEPRI, r3
   18f10:	f3bf 8f6f 	isb	sy
	if (bt_dev.le.acl_mtu) {
   18f14:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	return NULL;
   18f18:	2b00      	cmp	r3, #0
   18f1a:	bf14      	ite	ne
   18f1c:	4630      	movne	r0, r6
   18f1e:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
   18f20:	f007 ffb4 	bl	20e8c <z_impl_k_sem_give>
}
   18f24:	e7e4      	b.n	18ef0 <bt_conn_set_state+0x70>
		if (conn->type == BT_CONN_TYPE_SCO) {
   18f26:	78a3      	ldrb	r3, [r4, #2]
   18f28:	2b04      	cmp	r3, #4
   18f2a:	d017      	beq.n	18f5c <bt_conn_set_state+0xdc>
	z_impl_k_queue_init(queue);
   18f2c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   18f30:	f010 fc94 	bl	2985c <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   18f34:	4850      	ldr	r0, [pc, #320]	; (19078 <bt_conn_set_state+0x1f8>)
   18f36:	2100      	movs	r1, #0
   18f38:	f00a fdf0 	bl	23b1c <z_impl_k_poll_signal_raise>
	list->head = NULL;
   18f3c:	2300      	movs	r3, #0
	list->tail = NULL;
   18f3e:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   18f42:	78e3      	ldrb	r3, [r4, #3]
   18f44:	2b01      	cmp	r3, #1
   18f46:	d109      	bne.n	18f5c <bt_conn_set_state+0xdc>
			conn->le.conn_param_retry_countdown =
   18f48:	2303      	movs	r3, #3
   18f4a:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
   18f4e:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   18f52:	2300      	movs	r3, #0
   18f54:	f104 0060 	add.w	r0, r4, #96	; 0x60
   18f58:	f008 fc30 	bl	217bc <k_work_schedule>
}
   18f5c:	46bd      	mov	sp, r7
   18f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   18f62:	78a3      	ldrb	r3, [r4, #2]
   18f64:	2b04      	cmp	r3, #4
   18f66:	d103      	bne.n	18f70 <bt_conn_set_state+0xf0>
			bt_conn_unref(conn);
   18f68:	4620      	mov	r0, r4
   18f6a:	f7ff ff49 	bl	18e00 <bt_conn_unref>
			break;
   18f6e:	e7f5      	b.n	18f5c <bt_conn_set_state+0xdc>
		switch (old_state) {
   18f70:	2e08      	cmp	r6, #8
   18f72:	d8f3      	bhi.n	18f5c <bt_conn_set_state+0xdc>
   18f74:	a301      	add	r3, pc, #4	; (adr r3, 18f7c <bt_conn_set_state+0xfc>)
   18f76:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   18f7a:	bf00      	nop
   18f7c:	00018ff5 	.word	0x00018ff5
   18f80:	00018fa1 	.word	0x00018fa1
   18f84:	00018fe7 	.word	0x00018fe7
   18f88:	00018f69 	.word	0x00018f69
   18f8c:	00018f69 	.word	0x00018f69
   18f90:	00018fe7 	.word	0x00018fe7
   18f94:	00018fe7 	.word	0x00018fe7
   18f98:	00018ff5 	.word	0x00018ff5
   18f9c:	00018ff5 	.word	0x00018ff5
			tx_notify(conn);
   18fa0:	4620      	mov	r0, r4
   18fa2:	f7ff fbcd 	bl	18740 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   18fa6:	78a3      	ldrb	r3, [r4, #2]
   18fa8:	2b01      	cmp	r3, #1
   18faa:	d10a      	bne.n	18fc2 <bt_conn_set_state+0x142>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   18fac:	f104 0560 	add.w	r5, r4, #96	; 0x60
   18fb0:	4628      	mov	r0, r5
   18fb2:	f010 fcee 	bl	29992 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   18fb6:	f010 0f0c 	tst.w	r0, #12
   18fba:	d002      	beq.n	18fc2 <bt_conn_set_state+0x142>
				k_work_cancel_delayable(&conn->deferred_work);
   18fbc:	4628      	mov	r0, r5
   18fbe:	f008 fc7d 	bl	218bc <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18fc2:	f3bf 8f5b 	dmb	ish
   18fc6:	3404      	adds	r4, #4
   18fc8:	e854 3f00 	ldrex	r3, [r4]
   18fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   18fd0:	e844 3200 	strex	r2, r3, [r4]
   18fd4:	2a00      	cmp	r2, #0
   18fd6:	d1f7      	bne.n	18fc8 <bt_conn_set_state+0x148>
   18fd8:	f3bf 8f5b 	dmb	ish
   18fdc:	2100      	movs	r1, #0
   18fde:	4826      	ldr	r0, [pc, #152]	; (19078 <bt_conn_set_state+0x1f8>)
   18fe0:	f00a fd9c 	bl	23b1c <z_impl_k_poll_signal_raise>
   18fe4:	e7ba      	b.n	18f5c <bt_conn_set_state+0xdc>
			if (conn->err) {
   18fe6:	7a63      	ldrb	r3, [r4, #9]
   18fe8:	2b00      	cmp	r3, #0
   18fea:	d0bd      	beq.n	18f68 <bt_conn_set_state+0xe8>
				notify_connected(conn);
   18fec:	4620      	mov	r0, r4
   18fee:	f7ff fb71 	bl	186d4 <notify_connected>
   18ff2:	e7b9      	b.n	18f68 <bt_conn_set_state+0xe8>
			LOG_WRN("Invalid (%u) old state", state);
   18ff4:	466c      	mov	r4, sp
   18ff6:	b088      	sub	sp, #32
   18ff8:	466a      	mov	r2, sp
   18ffa:	4b20      	ldr	r3, [pc, #128]	; (1907c <bt_conn_set_state+0x1fc>)
		LOG_WRN("no valid (%u) state was set", state);
   18ffc:	e9c2 3505 	strd	r3, r5, [r2, #20]
   19000:	2303      	movs	r3, #3
   19002:	f842 3f10 	str.w	r3, [r2, #16]!
   19006:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1900a:	e755      	b.n	18eb8 <bt_conn_set_state+0x38>
	return list->head;
   1900c:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1900e:	b921      	cbnz	r1, 1901a <bt_conn_set_state+0x19a>
   19010:	f383 8811 	msr	BASEPRI, r3
   19014:	f3bf 8f6f 	isb	sy
		if (!node) {
   19018:	e7a0      	b.n	18f5c <bt_conn_set_state+0xdc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1901a:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   1901c:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   1901e:	6162      	str	r2, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19020:	4281      	cmp	r1, r0
	list->tail = node;
   19022:	bf08      	it	eq
   19024:	61a2      	streq	r2, [r4, #24]
   19026:	f383 8811 	msr	BASEPRI, r3
   1902a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1902e:	f04f 0240 	mov.w	r2, #64	; 0x40
   19032:	f3ef 8311 	mrs	r3, BASEPRI
   19036:	f382 8812 	msr	BASEPRI_MAX, r2
   1903a:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   1903e:	68ca      	ldr	r2, [r1, #12]
   19040:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   19042:	f8c1 800c 	str.w	r8, [r1, #12]
	__asm__ volatile(
   19046:	f383 8811 	msr	BASEPRI, r3
   1904a:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   1904e:	4620      	mov	r0, r4
   19050:	f7ff fba6 	bl	187a0 <conn_tx_destroy>
   19054:	e75e      	b.n	18f14 <bt_conn_set_state+0x94>
		LOG_WRN("no valid (%u) state was set", state);
   19056:	466c      	mov	r4, sp
   19058:	b088      	sub	sp, #32
   1905a:	466a      	mov	r2, sp
   1905c:	4b08      	ldr	r3, [pc, #32]	; (19080 <bt_conn_set_state+0x200>)
   1905e:	e7cd      	b.n	18ffc <bt_conn_set_state+0x17c>
   19060:	0002a3c4 	.word	0x0002a3c4
   19064:	0002cafc 	.word	0x0002cafc
   19068:	0002cb06 	.word	0x0002cb06
   1906c:	01000003 	.word	0x01000003
   19070:	00029fc0 	.word	0x00029fc0
   19074:	20000388 	.word	0x20000388
   19078:	2000067c 	.word	0x2000067c
   1907c:	0002cb17 	.word	0x0002cb17
   19080:	0002cb2e 	.word	0x0002cb2e

00019084 <bt_conn_index>:
		index = conn - acl_conns;
   19084:	4a0c      	ldr	r2, [pc, #48]	; (190b8 <bt_conn_index+0x34>)
   19086:	490d      	ldr	r1, [pc, #52]	; (190bc <bt_conn_index+0x38>)
{
   19088:	b508      	push	{r3, lr}
		index = conn - acl_conns;
   1908a:	1a83      	subs	r3, r0, r2
   1908c:	10db      	asrs	r3, r3, #3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   1908e:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   19090:	fb01 f303 	mul.w	r3, r1, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   19094:	d00e      	beq.n	190b4 <bt_conn_index+0x30>
   19096:	490a      	ldr	r1, [pc, #40]	; (190c0 <bt_conn_index+0x3c>)
   19098:	4a0a      	ldr	r2, [pc, #40]	; (190c4 <bt_conn_index+0x40>)
   1909a:	480b      	ldr	r0, [pc, #44]	; (190c8 <bt_conn_index+0x44>)
   1909c:	f240 5315 	movw	r3, #1301	; 0x515
   190a0:	f00e f89c 	bl	271dc <assert_print>
   190a4:	4809      	ldr	r0, [pc, #36]	; (190cc <bt_conn_index+0x48>)
   190a6:	f00e f899 	bl	271dc <assert_print>
   190aa:	4806      	ldr	r0, [pc, #24]	; (190c4 <bt_conn_index+0x40>)
   190ac:	f240 5115 	movw	r1, #1301	; 0x515
   190b0:	f00e f88d 	bl	271ce <assert_post_action>
}
   190b4:	b2d8      	uxtb	r0, r3
   190b6:	bd08      	pop	{r3, pc}
   190b8:	20002108 	.word	0x20002108
   190bc:	c28f5c29 	.word	0xc28f5c29
   190c0:	0002cb4a 	.word	0x0002cb4a
   190c4:	0002c934 	.word	0x0002c934
   190c8:	0002ae37 	.word	0x0002ae37
   190cc:	0002cc13 	.word	0x0002cc13

000190d0 <bt_conn_create_pdu_timeout>:
{
   190d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   190d2:	b087      	sub	sp, #28
   190d4:	4604      	mov	r4, r0
   190d6:	460d      	mov	r5, r1
   190d8:	4617      	mov	r7, r2
   190da:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   190dc:	f010 fb8f 	bl	297fe <k_is_in_isr>
   190e0:	b158      	cbz	r0, 190fa <bt_conn_create_pdu_timeout+0x2a>
   190e2:	4914      	ldr	r1, [pc, #80]	; (19134 <bt_conn_create_pdu_timeout+0x64>)
   190e4:	4814      	ldr	r0, [pc, #80]	; (19138 <bt_conn_create_pdu_timeout+0x68>)
   190e6:	4a15      	ldr	r2, [pc, #84]	; (1913c <bt_conn_create_pdu_timeout+0x6c>)
   190e8:	f240 5331 	movw	r3, #1329	; 0x531
   190ec:	f00e f876 	bl	271dc <assert_print>
   190f0:	4812      	ldr	r0, [pc, #72]	; (1913c <bt_conn_create_pdu_timeout+0x6c>)
   190f2:	f240 5131 	movw	r1, #1329	; 0x531
   190f6:	f00e f86a 	bl	271ce <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   190fa:	4911      	ldr	r1, [pc, #68]	; (19140 <bt_conn_create_pdu_timeout+0x70>)
   190fc:	463a      	mov	r2, r7
   190fe:	2c00      	cmp	r4, #0
   19100:	bf14      	ite	ne
   19102:	4620      	movne	r0, r4
   19104:	4608      	moveq	r0, r1
   19106:	4633      	mov	r3, r6
   19108:	f00f fe7e 	bl	28e08 <net_buf_alloc_fixed>
	if (!buf) {
   1910c:	4604      	mov	r4, r0
   1910e:	b960      	cbnz	r0, 1912a <bt_conn_create_pdu_timeout+0x5a>
		LOG_WRN("Unable to allocate buffer within timeout");
   19110:	4b0c      	ldr	r3, [pc, #48]	; (19144 <bt_conn_create_pdu_timeout+0x74>)
   19112:	9305      	str	r3, [sp, #20]
   19114:	480c      	ldr	r0, [pc, #48]	; (19148 <bt_conn_create_pdu_timeout+0x78>)
   19116:	2302      	movs	r3, #2
   19118:	aa04      	add	r2, sp, #16
   1911a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1911e:	9304      	str	r3, [sp, #16]
   19120:	f00e ff14 	bl	27f4c <z_log_msg_static_create.constprop.0>
}
   19124:	4620      	mov	r0, r4
   19126:	b007      	add	sp, #28
   19128:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   1912a:	1d29      	adds	r1, r5, #4
   1912c:	300c      	adds	r0, #12
   1912e:	f003 f921 	bl	1c374 <net_buf_simple_reserve>
	return buf;
   19132:	e7f7      	b.n	19124 <bt_conn_create_pdu_timeout+0x54>
   19134:	0002cc2d 	.word	0x0002cc2d
   19138:	0002ae37 	.word	0x0002ae37
   1913c:	0002c934 	.word	0x0002c934
   19140:	20000ae0 	.word	0x20000ae0
   19144:	0002cc3c 	.word	0x0002cc3c
   19148:	00029fc0 	.word	0x00029fc0

0001914c <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   1914c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1914e:	f3bf 8f5b 	dmb	ish
   19152:	6842      	ldr	r2, [r0, #4]
   19154:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   19158:	0592      	lsls	r2, r2, #22
{
   1915a:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1915c:	f100 0304 	add.w	r3, r0, #4
   19160:	d519      	bpl.n	19196 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   19162:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   19166:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
   1916a:	4291      	cmp	r1, r2
   1916c:	d813      	bhi.n	19196 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   1916e:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
   19172:	4291      	cmp	r1, r2
   19174:	d30f      	bcc.n	19196 <notify_le_param_updated+0x4a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   19176:	e9d0 122b 	ldrd	r1, r2, [r0, #172]	; 0xac
   1917a:	4291      	cmp	r1, r2
   1917c:	d10b      	bne.n	19196 <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1917e:	f3bf 8f5b 	dmb	ish
   19182:	e853 1f00 	ldrex	r1, [r3]
   19186:	f421 7100 	bic.w	r1, r1, #512	; 0x200
   1918a:	e843 1200 	strex	r2, r1, [r3]
   1918e:	2a00      	cmp	r2, #0
   19190:	d1f7      	bne.n	19182 <notify_le_param_updated+0x36>
   19192:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   19196:	4b18      	ldr	r3, [pc, #96]	; (191f8 <notify_le_param_updated+0xac>)
   19198:	681d      	ldr	r5, [r3, #0]
   1919a:	b995      	cbnz	r5, 191c2 <notify_le_param_updated+0x76>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1919c:	4d17      	ldr	r5, [pc, #92]	; (191fc <notify_le_param_updated+0xb0>)
   1919e:	4f18      	ldr	r7, [pc, #96]	; (19200 <notify_le_param_updated+0xb4>)
   191a0:	42bd      	cmp	r5, r7
   191a2:	d926      	bls.n	191f2 <notify_le_param_updated+0xa6>
   191a4:	4917      	ldr	r1, [pc, #92]	; (19204 <notify_le_param_updated+0xb8>)
   191a6:	4a18      	ldr	r2, [pc, #96]	; (19208 <notify_le_param_updated+0xbc>)
   191a8:	4818      	ldr	r0, [pc, #96]	; (1920c <notify_le_param_updated+0xc0>)
   191aa:	f240 6304 	movw	r3, #1540	; 0x604
   191ae:	f00e f815 	bl	271dc <assert_print>
   191b2:	4817      	ldr	r0, [pc, #92]	; (19210 <notify_le_param_updated+0xc4>)
   191b4:	f00e f812 	bl	271dc <assert_print>
   191b8:	4813      	ldr	r0, [pc, #76]	; (19208 <notify_le_param_updated+0xbc>)
   191ba:	f240 6104 	movw	r1, #1540	; 0x604
   191be:	f00e f806 	bl	271ce <assert_post_action>
		if (cb->le_param_updated) {
   191c2:	68ee      	ldr	r6, [r5, #12]
   191c4:	b13e      	cbz	r6, 191d6 <notify_le_param_updated+0x8a>
			cb->le_param_updated(conn, conn->le.interval,
   191c6:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   191ca:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   191ce:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   191d2:	4620      	mov	r0, r4
   191d4:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   191d6:	692d      	ldr	r5, [r5, #16]
   191d8:	e7df      	b.n	1919a <notify_le_param_updated+0x4e>
		if (cb->le_param_updated) {
   191da:	68ee      	ldr	r6, [r5, #12]
   191dc:	b13e      	cbz	r6, 191ee <notify_le_param_updated+0xa2>
			cb->le_param_updated(conn, conn->le.interval,
   191de:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   191e2:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   191e6:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   191ea:	4620      	mov	r0, r4
   191ec:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   191ee:	3514      	adds	r5, #20
   191f0:	e7d6      	b.n	191a0 <notify_le_param_updated+0x54>
   191f2:	d3f2      	bcc.n	191da <notify_le_param_updated+0x8e>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   191f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   191f6:	bf00      	nop
   191f8:	20003508 	.word	0x20003508
   191fc:	00029f64 	.word	0x00029f64
   19200:	00029f78 	.word	0x00029f78
   19204:	0002c964 	.word	0x0002c964
   19208:	0002c934 	.word	0x0002c934
   1920c:	0002ae37 	.word	0x0002ae37
   19210:	0002b3ac 	.word	0x0002b3ac

00019214 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   19214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19218:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   1921a:	4608      	mov	r0, r1
{
   1921c:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   1921e:	f00e fd35 	bl	27c8c <bt_le_conn_params_valid>
   19222:	4605      	mov	r5, r0
   19224:	b918      	cbnz	r0, 1922e <le_param_req+0x1a>
		return false;
   19226:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   19228:	4628      	mov	r0, r5
   1922a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   1922e:	4b1b      	ldr	r3, [pc, #108]	; (1929c <le_param_req+0x88>)
   19230:	681e      	ldr	r6, [r3, #0]
   19232:	b99e      	cbnz	r6, 1925c <le_param_req+0x48>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19234:	4e1a      	ldr	r6, [pc, #104]	; (192a0 <le_param_req+0x8c>)
   19236:	f8df 807c 	ldr.w	r8, [pc, #124]	; 192b4 <le_param_req+0xa0>
   1923a:	4546      	cmp	r6, r8
   1923c:	d927      	bls.n	1928e <le_param_req+0x7a>
   1923e:	4919      	ldr	r1, [pc, #100]	; (192a4 <le_param_req+0x90>)
   19240:	4a19      	ldr	r2, [pc, #100]	; (192a8 <le_param_req+0x94>)
   19242:	481a      	ldr	r0, [pc, #104]	; (192ac <le_param_req+0x98>)
   19244:	f240 634c 	movw	r3, #1612	; 0x64c
   19248:	f00d ffc8 	bl	271dc <assert_print>
   1924c:	4818      	ldr	r0, [pc, #96]	; (192b0 <le_param_req+0x9c>)
   1924e:	f00d ffc5 	bl	271dc <assert_print>
   19252:	4815      	ldr	r0, [pc, #84]	; (192a8 <le_param_req+0x94>)
   19254:	f240 614c 	movw	r1, #1612	; 0x64c
   19258:	f00d ffb9 	bl	271ce <assert_post_action>
		if (!cb->le_param_req) {
   1925c:	68b3      	ldr	r3, [r6, #8]
   1925e:	b90b      	cbnz	r3, 19264 <le_param_req+0x50>
	for (cb = callback_list; cb; cb = cb->_next) {
   19260:	6936      	ldr	r6, [r6, #16]
   19262:	e7e6      	b.n	19232 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   19264:	4621      	mov	r1, r4
   19266:	4638      	mov	r0, r7
   19268:	4798      	blx	r3
   1926a:	2800      	cmp	r0, #0
   1926c:	d0db      	beq.n	19226 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1926e:	4620      	mov	r0, r4
   19270:	f00e fd0c 	bl	27c8c <bt_le_conn_params_valid>
   19274:	2800      	cmp	r0, #0
   19276:	d1f3      	bne.n	19260 <le_param_req+0x4c>
   19278:	e7d5      	b.n	19226 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   1927a:	4621      	mov	r1, r4
   1927c:	4638      	mov	r0, r7
   1927e:	4798      	blx	r3
   19280:	2800      	cmp	r0, #0
   19282:	d0d0      	beq.n	19226 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   19284:	4620      	mov	r0, r4
   19286:	f00e fd01 	bl	27c8c <bt_le_conn_params_valid>
   1928a:	b920      	cbnz	r0, 19296 <le_param_req+0x82>
   1928c:	e7cb      	b.n	19226 <le_param_req+0x12>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1928e:	d2cb      	bcs.n	19228 <le_param_req+0x14>
		if (!cb->le_param_req) {
   19290:	68b3      	ldr	r3, [r6, #8]
   19292:	2b00      	cmp	r3, #0
   19294:	d1f1      	bne.n	1927a <le_param_req+0x66>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19296:	3614      	adds	r6, #20
   19298:	e7cf      	b.n	1923a <le_param_req+0x26>
   1929a:	bf00      	nop
   1929c:	20003508 	.word	0x20003508
   192a0:	00029f64 	.word	0x00029f64
   192a4:	0002c964 	.word	0x0002c964
   192a8:	0002c934 	.word	0x0002c934
   192ac:	0002ae37 	.word	0x0002ae37
   192b0:	0002b3ac 	.word	0x0002b3ac
   192b4:	00029f78 	.word	0x00029f78

000192b8 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   192b8:	b570      	push	{r4, r5, r6, lr}
   192ba:	4606      	mov	r6, r0
   192bc:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   192be:	4809      	ldr	r0, [pc, #36]	; (192e4 <bt_conn_add_le+0x2c>)
   192c0:	2101      	movs	r1, #1
   192c2:	f7ff fb93 	bl	189ec <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   192c6:	4604      	mov	r4, r0
   192c8:	b150      	cbz	r0, 192e0 <bt_conn_add_le+0x28>
		return NULL;
	}

	conn->id = id;
   192ca:	7206      	strb	r6, [r0, #8]
   192cc:	2207      	movs	r2, #7
   192ce:	4629      	mov	r1, r5
   192d0:	3090      	adds	r0, #144	; 0x90
   192d2:	f00e fbab 	bl	27a2c <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   192d6:	2301      	movs	r3, #1
   192d8:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   192da:	4b03      	ldr	r3, [pc, #12]	; (192e8 <bt_conn_add_le+0x30>)
   192dc:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   192e0:	4620      	mov	r0, r4
   192e2:	bd70      	pop	{r4, r5, r6, pc}
   192e4:	20002108 	.word	0x20002108
   192e8:	00280018 	.word	0x00280018

000192ec <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   192ec:	b570      	push	{r4, r5, r6, lr}
   192ee:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   192f0:	480a      	ldr	r0, [pc, #40]	; (1931c <bt_conn_lookup_addr_le+0x30>)
{
   192f2:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   192f4:	f7ff fd54 	bl	18da0 <bt_conn_ref>
   192f8:	4604      	mov	r4, r0

		if (!conn) {
   192fa:	b120      	cbz	r0, 19306 <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   192fc:	7883      	ldrb	r3, [r0, #2]
   192fe:	2b01      	cmp	r3, #1
   19300:	d004      	beq.n	1930c <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   19302:	f7ff fd7d 	bl	18e00 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   19306:	2400      	movs	r4, #0
}
   19308:	4620      	mov	r0, r4
   1930a:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   1930c:	4632      	mov	r2, r6
   1930e:	4629      	mov	r1, r5
   19310:	f00e fe56 	bl	27fc0 <bt_conn_is_peer_addr_le>
   19314:	2800      	cmp	r0, #0
   19316:	d1f7      	bne.n	19308 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   19318:	4620      	mov	r0, r4
   1931a:	e7f2      	b.n	19302 <bt_conn_lookup_addr_le+0x16>
   1931c:	20002108 	.word	0x20002108

00019320 <bt_conn_exists_le>:
{
   19320:	b5b0      	push	{r4, r5, r7, lr}
   19322:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   19324:	f7ff ffe2 	bl	192ec <bt_conn_lookup_addr_le>
	if (conn) {
   19328:	4604      	mov	r4, r0
   1932a:	b1e0      	cbz	r0, 19366 <bt_conn_exists_le+0x46>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   1932c:	7a83      	ldrb	r3, [r0, #10]
	switch (state) {
   1932e:	2b08      	cmp	r3, #8
   19330:	bf96      	itet	ls
   19332:	4a0e      	ldrls	r2, [pc, #56]	; (1936c <bt_conn_exists_le+0x4c>)
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   19334:	4b0e      	ldrhi	r3, [pc, #56]	; (19370 <bt_conn_exists_le+0x50>)
   19336:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   1933a:	466d      	mov	r5, sp
   1933c:	b088      	sub	sp, #32
   1933e:	466a      	mov	r2, sp
   19340:	490c      	ldr	r1, [pc, #48]	; (19374 <bt_conn_exists_le+0x54>)
   19342:	480d      	ldr	r0, [pc, #52]	; (19378 <bt_conn_exists_le+0x58>)
   19344:	e9c2 1305 	strd	r1, r3, [r2, #20]
   19348:	f44f 7300 	mov.w	r3, #512	; 0x200
   1934c:	8393      	strh	r3, [r2, #28]
   1934e:	4b0b      	ldr	r3, [pc, #44]	; (1937c <bt_conn_exists_le+0x5c>)
   19350:	f842 3f10 	str.w	r3, [r2, #16]!
   19354:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   19358:	f00e fdf8 	bl	27f4c <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   1935c:	4620      	mov	r0, r4
   1935e:	46ad      	mov	sp, r5
   19360:	f7ff fd4e 	bl	18e00 <bt_conn_unref>
		return true;
   19364:	2001      	movs	r0, #1
}
   19366:	46bd      	mov	sp, r7
   19368:	bdb0      	pop	{r4, r5, r7, pc}
   1936a:	bf00      	nop
   1936c:	0002a3c4 	.word	0x0002a3c4
   19370:	0002cafc 	.word	0x0002cafc
   19374:	0002cc65 	.word	0x0002cc65
   19378:	00029fc0 	.word	0x00029fc0
   1937c:	01000003 	.word	0x01000003

00019380 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   19380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19382:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   19384:	480e      	ldr	r0, [pc, #56]	; (193c0 <bt_conn_lookup_state_le+0x40>)
{
   19386:	460e      	mov	r6, r1
   19388:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1938a:	f7ff fd09 	bl	18da0 <bt_conn_ref>

		if (!conn) {
   1938e:	4604      	mov	r4, r0
   19390:	b120      	cbz	r0, 1939c <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   19392:	7883      	ldrb	r3, [r0, #2]
   19394:	2b01      	cmp	r3, #1
   19396:	d003      	beq.n	193a0 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   19398:	f7ff fd32 	bl	18e00 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1939c:	2400      	movs	r4, #0
   1939e:	e00d      	b.n	193bc <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   193a0:	b136      	cbz	r6, 193b0 <bt_conn_lookup_state_le+0x30>
   193a2:	4632      	mov	r2, r6
   193a4:	4629      	mov	r1, r5
   193a6:	f00e fe0b 	bl	27fc0 <bt_conn_is_peer_addr_le>
   193aa:	b908      	cbnz	r0, 193b0 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   193ac:	4620      	mov	r0, r4
   193ae:	e7f3      	b.n	19398 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   193b0:	7aa3      	ldrb	r3, [r4, #10]
   193b2:	42bb      	cmp	r3, r7
   193b4:	d1fa      	bne.n	193ac <bt_conn_lookup_state_le+0x2c>
   193b6:	7a23      	ldrb	r3, [r4, #8]
   193b8:	42ab      	cmp	r3, r5
   193ba:	d1f7      	bne.n	193ac <bt_conn_lookup_state_le+0x2c>
}
   193bc:	4620      	mov	r0, r4
   193be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   193c0:	20002108 	.word	0x20002108

000193c4 <bt_conn_get_info>:
		return 0;
	}
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
   193c4:	b510      	push	{r4, lr}
	info->type = conn->type;
   193c6:	7883      	ldrb	r3, [r0, #2]
   193c8:	700b      	strb	r3, [r1, #0]
	info->role = conn->role;
   193ca:	78c3      	ldrb	r3, [r0, #3]
   193cc:	704b      	strb	r3, [r1, #1]
	info->id = conn->id;
   193ce:	7a03      	ldrb	r3, [r0, #8]
   193d0:	708b      	strb	r3, [r1, #2]
	info->state = conn_internal_to_public_state(conn->state);
   193d2:	7a84      	ldrb	r4, [r0, #10]
	switch (state) {
   193d4:	2c08      	cmp	r4, #8
   193d6:	d80c      	bhi.n	193f2 <bt_conn_get_info+0x2e>
	info->state = conn_internal_to_public_state(conn->state);
   193d8:	4b27      	ldr	r3, [pc, #156]	; (19478 <bt_conn_get_info+0xb4>)
   193da:	5d1b      	ldrb	r3, [r3, r4]
   193dc:	770b      	strb	r3, [r1, #28]
	info->security.flags = 0;
	info->security.level = bt_conn_get_security(conn);
   193de:	2301      	movs	r3, #1
   193e0:	774b      	strb	r3, [r1, #29]
#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
	info->security.enc_key_size = bt_conn_enc_key_size(conn);
#else
	info->security.enc_key_size = 0;
   193e2:	2300      	movs	r3, #0
   193e4:	83cb      	strh	r3, [r1, #30]
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

	switch (conn->type) {
   193e6:	7883      	ldrb	r3, [r0, #2]
   193e8:	2b01      	cmp	r3, #1
   193ea:	d012      	beq.n	19412 <bt_conn_get_info+0x4e>
		}
		return 0;
#endif
	}

	return -EINVAL;
   193ec:	f06f 0015 	mvn.w	r0, #21
}
   193f0:	bd10      	pop	{r4, pc}
		__ASSERT(false, "Invalid conn state %u", state);
   193f2:	4a22      	ldr	r2, [pc, #136]	; (1947c <bt_conn_get_info+0xb8>)
   193f4:	4922      	ldr	r1, [pc, #136]	; (19480 <bt_conn_get_info+0xbc>)
   193f6:	4823      	ldr	r0, [pc, #140]	; (19484 <bt_conn_get_info+0xc0>)
   193f8:	f640 1385 	movw	r3, #2437	; 0x985
   193fc:	f00d feee 	bl	271dc <assert_print>
   19400:	4821      	ldr	r0, [pc, #132]	; (19488 <bt_conn_get_info+0xc4>)
   19402:	4621      	mov	r1, r4
   19404:	f00d feea 	bl	271dc <assert_print>
   19408:	481c      	ldr	r0, [pc, #112]	; (1947c <bt_conn_get_info+0xb8>)
   1940a:	f640 1185 	movw	r1, #2437	; 0x985
   1940e:	f00d fede 	bl	271ce <assert_post_action>
		info->le.dst = &conn->le.dst;
   19412:	f100 0390 	add.w	r3, r0, #144	; 0x90
   19416:	608b      	str	r3, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
   19418:	7a03      	ldrb	r3, [r0, #8]
   1941a:	4a1c      	ldr	r2, [pc, #112]	; (1948c <bt_conn_get_info+0xc8>)
   1941c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   19420:	4413      	add	r3, r2
   19422:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   19424:	78c4      	ldrb	r4, [r0, #3]
			info->le.remote = &conn->le.resp_addr;
   19426:	f100 039e 	add.w	r3, r0, #158	; 0x9e
			info->le.local = &conn->le.init_addr;
   1942a:	f100 0297 	add.w	r2, r0, #151	; 0x97
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1942e:	b114      	cbz	r4, 19436 <bt_conn_get_info+0x72>
   19430:	461c      	mov	r4, r3
   19432:	4613      	mov	r3, r2
   19434:	4622      	mov	r2, r4
			info->le.remote = &conn->le.resp_addr;
   19436:	e9c1 2303 	strd	r2, r3, [r1, #12]
		info->le.interval = conn->le.interval;
   1943a:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
   1943e:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
   19440:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	; 0xac
   19444:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
   19446:	f8b0 30ae 	ldrh.w	r3, [r0, #174]	; 0xae
   1944a:	830b      	strh	r3, [r1, #24]
		if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_SC)) {
   1944c:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   19450:	b123      	cbz	r3, 1945c <bt_conn_get_info+0x98>
   19452:	7b5b      	ldrb	r3, [r3, #13]
   19454:	06da      	lsls	r2, r3, #27
			info->security.flags |= BT_SECURITY_FLAG_SC;
   19456:	bf44      	itt	mi
   19458:	2301      	movmi	r3, #1
   1945a:	77cb      	strbmi	r3, [r1, #31]
		if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_OOB)) {
   1945c:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   19460:	b113      	cbz	r3, 19468 <bt_conn_get_info+0xa4>
   19462:	7b5b      	ldrb	r3, [r3, #13]
   19464:	069b      	lsls	r3, r3, #26
   19466:	d401      	bmi.n	1946c <bt_conn_get_info+0xa8>
		return 0;
   19468:	2000      	movs	r0, #0
   1946a:	e7c1      	b.n	193f0 <bt_conn_get_info+0x2c>
			info->security.flags |= BT_SECURITY_FLAG_OOB;
   1946c:	7fcb      	ldrb	r3, [r1, #31]
   1946e:	f043 0302 	orr.w	r3, r3, #2
   19472:	77cb      	strb	r3, [r1, #31]
   19474:	e7f8      	b.n	19468 <bt_conn_get_info+0xa4>
   19476:	bf00      	nop
   19478:	0002ccef 	.word	0x0002ccef
   1947c:	0002c934 	.word	0x0002c934
   19480:	0002dab5 	.word	0x0002dab5
   19484:	0002ae37 	.word	0x0002ae37
   19488:	0002cc88 	.word	0x0002cc88
   1948c:	20000388 	.word	0x20000388

00019490 <send_conn_le_param_update>:
{
   19490:	b538      	push	{r3, r4, r5, lr}
   19492:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   19494:	4608      	mov	r0, r1
{
   19496:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   19498:	f00e fbf8 	bl	27c8c <bt_le_conn_params_valid>
   1949c:	b348      	cbz	r0, 194f2 <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1949e:	4b16      	ldr	r3, [pc, #88]	; (194f8 <send_conn_le_param_update+0x68>)
   194a0:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
   194a4:	0799      	lsls	r1, r3, #30
   194a6:	d407      	bmi.n	194b8 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   194a8:	78e3      	ldrb	r3, [r4, #3]
   194aa:	b183      	cbz	r3, 194ce <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   194ac:	4629      	mov	r1, r5
   194ae:	4620      	mov	r0, r4
}
   194b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   194b4:	f000 bae0 	b.w	19a78 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   194b8:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
   194bc:	079a      	lsls	r2, r3, #30
   194be:	d5f3      	bpl.n	194a8 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   194c0:	f3bf 8f5b 	dmb	ish
   194c4:	6863      	ldr	r3, [r4, #4]
   194c6:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   194ca:	055b      	lsls	r3, r3, #21
   194cc:	d4ec      	bmi.n	194a8 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   194ce:	4629      	mov	r1, r5
   194d0:	4620      	mov	r0, r4
   194d2:	f00e fd97 	bl	28004 <bt_conn_le_conn_update>
		if (rc == 0) {
   194d6:	b958      	cbnz	r0, 194f0 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   194d8:	882b      	ldrh	r3, [r5, #0]
   194da:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   194de:	886b      	ldrh	r3, [r5, #2]
   194e0:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   194e4:	88ab      	ldrh	r3, [r5, #4]
   194e6:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   194ea:	88eb      	ldrh	r3, [r5, #6]
   194ec:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   194f0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   194f2:	f06f 0015 	mvn.w	r0, #21
   194f6:	e7fb      	b.n	194f0 <send_conn_le_param_update+0x60>
   194f8:	20000388 	.word	0x20000388

000194fc <deferred_work>:
{
   194fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19500:	b082      	sub	sp, #8
	if (conn->state == BT_CONN_DISCONNECTED) {
   19502:	f810 3c56 	ldrb.w	r3, [r0, #-86]
{
   19506:	af00      	add	r7, sp, #0
   19508:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   1950a:	f1a0 0660 	sub.w	r6, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   1950e:	bb8b      	cbnz	r3, 19574 <deferred_work+0x78>
		bt_l2cap_disconnected(conn);
   19510:	4630      	mov	r0, r6
   19512:	f00e fdd4 	bl	280be <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   19516:	4b47      	ldr	r3, [pc, #284]	; (19634 <deferred_work+0x138>)
   19518:	681d      	ldr	r5, [r3, #0]
   1951a:	b99d      	cbnz	r5, 19544 <deferred_work+0x48>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1951c:	4d46      	ldr	r5, [pc, #280]	; (19638 <deferred_work+0x13c>)
   1951e:	f8df 813c 	ldr.w	r8, [pc, #316]	; 1965c <deferred_work+0x160>
   19522:	4545      	cmp	r5, r8
   19524:	d91e      	bls.n	19564 <deferred_work+0x68>
   19526:	4945      	ldr	r1, [pc, #276]	; (1963c <deferred_work+0x140>)
   19528:	4a45      	ldr	r2, [pc, #276]	; (19640 <deferred_work+0x144>)
   1952a:	4846      	ldr	r0, [pc, #280]	; (19644 <deferred_work+0x148>)
   1952c:	f240 53cb 	movw	r3, #1483	; 0x5cb
   19530:	f00d fe54 	bl	271dc <assert_print>
   19534:	4844      	ldr	r0, [pc, #272]	; (19648 <deferred_work+0x14c>)
   19536:	f00d fe51 	bl	271dc <assert_print>
   1953a:	4841      	ldr	r0, [pc, #260]	; (19640 <deferred_work+0x144>)
   1953c:	f240 51cb 	movw	r1, #1483	; 0x5cb
   19540:	f00d fe45 	bl	271ce <assert_post_action>
		if (cb->disconnected) {
   19544:	686b      	ldr	r3, [r5, #4]
   19546:	b11b      	cbz	r3, 19550 <deferred_work+0x54>
			cb->disconnected(conn, conn->err);
   19548:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   1954c:	4630      	mov	r0, r6
   1954e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   19550:	692d      	ldr	r5, [r5, #16]
   19552:	e7e2      	b.n	1951a <deferred_work+0x1e>
		if (cb->disconnected) {
   19554:	686b      	ldr	r3, [r5, #4]
   19556:	b11b      	cbz	r3, 19560 <deferred_work+0x64>
			cb->disconnected(conn, conn->err);
   19558:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   1955c:	4630      	mov	r0, r6
   1955e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19560:	3514      	adds	r5, #20
   19562:	e7de      	b.n	19522 <deferred_work+0x26>
   19564:	d3f6      	bcc.n	19554 <deferred_work+0x58>
		bt_conn_unref(conn);
   19566:	4630      	mov	r0, r6
   19568:	f7ff fc4a 	bl	18e00 <bt_conn_unref>
}
   1956c:	3708      	adds	r7, #8
   1956e:	46bd      	mov	sp, r7
   19570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->type != BT_CONN_TYPE_LE) {
   19574:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   19578:	2b01      	cmp	r3, #1
   1957a:	d1f7      	bne.n	1956c <deferred_work+0x70>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1957c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   19580:	f1a0 055c 	sub.w	r5, r0, #92	; 0x5c
   19584:	e855 3f00 	ldrex	r3, [r5]
   19588:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   1958c:	e845 2100 	strex	r1, r2, [r5]
   19590:	2900      	cmp	r1, #0
   19592:	d1f7      	bne.n	19584 <deferred_work+0x88>
   19594:	f3bf 8f5b 	dmb	ish
   19598:	0599      	lsls	r1, r3, #22
   1959a:	d531      	bpl.n	19600 <deferred_work+0x104>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1959c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1959e:	603b      	str	r3, [r7, #0]
   195a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   195a2:	607b      	str	r3, [r7, #4]
		err = send_conn_le_param_update(conn, param);
   195a4:	4639      	mov	r1, r7
   195a6:	4630      	mov	r0, r6
   195a8:	f7ff ff72 	bl	19490 <send_conn_le_param_update>
		if (!err) {
   195ac:	b9c0      	cbnz	r0, 195e0 <deferred_work+0xe4>
   195ae:	f3bf 8f5b 	dmb	ish
   195b2:	e855 3f00 	ldrex	r3, [r5]
   195b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   195ba:	e845 3200 	strex	r2, r3, [r5]
   195be:	2a00      	cmp	r2, #0
   195c0:	d1f7      	bne.n	195b2 <deferred_work+0xb6>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   195c2:	f3bf 8f5b 	dmb	ish
   195c6:	f3bf 8f5b 	dmb	ish
   195ca:	e855 3f00 	ldrex	r3, [r5]
   195ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   195d2:	e845 3200 	strex	r2, r3, [r5]
   195d6:	2a00      	cmp	r2, #0
   195d8:	d1f7      	bne.n	195ca <deferred_work+0xce>
   195da:	f3bf 8f5b 	dmb	ish
   195de:	e7c5      	b.n	1956c <deferred_work+0x70>
			LOG_WRN("Send LE param update failed (err %d)", err);
   195e0:	466c      	mov	r4, sp
   195e2:	b088      	sub	sp, #32
   195e4:	466a      	mov	r2, sp
   195e6:	4b19      	ldr	r3, [pc, #100]	; (1964c <deferred_work+0x150>)
			LOG_WRN("Send auto LE param update failed (err %d)",
   195e8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   195ec:	2303      	movs	r3, #3
   195ee:	f842 3f10 	str.w	r3, [r2, #16]!
   195f2:	4817      	ldr	r0, [pc, #92]	; (19650 <deferred_work+0x154>)
   195f4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   195f8:	f00e fca8 	bl	27f4c <z_log_msg_static_create.constprop.0>
   195fc:	46a5      	mov	sp, r4
   195fe:	e7e2      	b.n	195c6 <deferred_work+0xca>
		param = BT_LE_CONN_PARAM(
   19600:	4a14      	ldr	r2, [pc, #80]	; (19654 <deferred_work+0x158>)
   19602:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
   19606:	e9c7 2300 	strd	r2, r3, [r7]
		err = send_conn_le_param_update(conn, param);
   1960a:	4639      	mov	r1, r7
   1960c:	4630      	mov	r0, r6
   1960e:	f7ff ff3f 	bl	19490 <send_conn_le_param_update>
		if (!err) {
   19612:	b950      	cbnz	r0, 1962a <deferred_work+0x12e>
   19614:	f3bf 8f5b 	dmb	ish
   19618:	e855 3f00 	ldrex	r3, [r5]
   1961c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   19620:	e845 3200 	strex	r2, r3, [r5]
   19624:	2a00      	cmp	r2, #0
   19626:	d0cc      	beq.n	195c2 <deferred_work+0xc6>
   19628:	e7f6      	b.n	19618 <deferred_work+0x11c>
			LOG_WRN("Send auto LE param update failed (err %d)",
   1962a:	466c      	mov	r4, sp
   1962c:	b088      	sub	sp, #32
   1962e:	466a      	mov	r2, sp
   19630:	4b09      	ldr	r3, [pc, #36]	; (19658 <deferred_work+0x15c>)
   19632:	e7d9      	b.n	195e8 <deferred_work+0xec>
   19634:	20003508 	.word	0x20003508
   19638:	00029f64 	.word	0x00029f64
   1963c:	0002c964 	.word	0x0002c964
   19640:	0002c934 	.word	0x0002c934
   19644:	0002ae37 	.word	0x0002ae37
   19648:	0002b3ac 	.word	0x0002b3ac
   1964c:	0002cca0 	.word	0x0002cca0
   19650:	00029fc0 	.word	0x00029fc0
   19654:	03200320 	.word	0x03200320
   19658:	0002ccc5 	.word	0x0002ccc5
   1965c:	00029f78 	.word	0x00029f78

00019660 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   19660:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   19662:	4801      	ldr	r0, [pc, #4]	; (19668 <bt_conn_create_frag_timeout+0x8>)
   19664:	f7ff bd34 	b.w	190d0 <bt_conn_create_pdu_timeout>
   19668:	20000b48 	.word	0x20000b48

0001966c <bt_conn_process_tx>:
{
   1966c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   19670:	7a83      	ldrb	r3, [r0, #10]
{
   19672:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   19674:	b993      	cbnz	r3, 1969c <bt_conn_process_tx+0x30>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19676:	f3bf 8f5b 	dmb	ish
   1967a:	1d03      	adds	r3, r0, #4
   1967c:	e853 2f00 	ldrex	r2, [r3]
   19680:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   19684:	e843 1400 	strex	r4, r1, [r3]
   19688:	2c00      	cmp	r4, #0
   1968a:	d1f7      	bne.n	1967c <bt_conn_process_tx+0x10>
   1968c:	f3bf 8f5b 	dmb	ish
   19690:	0653      	lsls	r3, r2, #25
   19692:	d503      	bpl.n	1969c <bt_conn_process_tx+0x30>
}
   19694:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		conn_cleanup(conn);
   19698:	f7ff b9da 	b.w	18a50 <conn_cleanup>
	return z_impl_k_queue_peek_head(queue);
   1969c:	f105 0038 	add.w	r0, r5, #56	; 0x38
   196a0:	f010 f8fe 	bl	298a0 <z_impl_k_queue_peek_head>
	BT_ASSERT(buf);
   196a4:	4604      	mov	r4, r0
   196a6:	b960      	cbnz	r0, 196c2 <bt_conn_process_tx+0x56>
   196a8:	4a33      	ldr	r2, [pc, #204]	; (19778 <bt_conn_process_tx+0x10c>)
   196aa:	4934      	ldr	r1, [pc, #208]	; (1977c <bt_conn_process_tx+0x110>)
   196ac:	4834      	ldr	r0, [pc, #208]	; (19780 <bt_conn_process_tx+0x114>)
   196ae:	f44f 735d 	mov.w	r3, #884	; 0x374
   196b2:	f00d fd93 	bl	271dc <assert_print>
   196b6:	4040      	eors	r0, r0
   196b8:	f380 8811 	msr	BASEPRI, r0
   196bc:	f04f 0003 	mov.w	r0, #3
   196c0:	df02      	svc	2
	buf = net_buf_ref(buf);
   196c2:	4620      	mov	r0, r4
   196c4:	f002 fdd4 	bl	1c270 <net_buf_ref>
	return bt_dev.le.acl_mtu;
   196c8:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 19784 <bt_conn_process_tx+0x118>
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
   196cc:	8a02      	ldrh	r2, [r0, #16]
   196ce:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
   196d2:	429a      	cmp	r2, r3
	buf = net_buf_ref(buf);
   196d4:	4604      	mov	r4, r0
	return bt_dev.le.acl_mtu;
   196d6:	7f02      	ldrb	r2, [r0, #28]
	if (buf->len <= conn_mtu(conn) && !tx_data(buf)->is_cont) {
   196d8:	d807      	bhi.n	196ea <bt_conn_process_tx+0x7e>
   196da:	b932      	cbnz	r2, 196ea <bt_conn_process_tx+0x7e>
		return send_frag(conn, buf, NULL, FRAG_SINGLE);
   196dc:	2302      	movs	r3, #2
	return send_frag(conn, buf, NULL, FRAG_END);
   196de:	4621      	mov	r1, r4
   196e0:	4628      	mov	r0, r5
   196e2:	f7ff f883 	bl	187ec <send_frag>
   196e6:	4606      	mov	r6, r0
   196e8:	e030      	b.n	1974c <bt_conn_process_tx+0xe0>
	if (tx_data(buf)->is_cont) {
   196ea:	4617      	mov	r7, r2
		frag = bt_conn_create_frag(0);
   196ec:	f04f 0a00 	mov.w	sl, #0
	while (buf->len > conn_mtu(conn)) {
   196f0:	8a22      	ldrh	r2, [r4, #16]
   196f2:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
   196f6:	429a      	cmp	r2, r3
   196f8:	d804      	bhi.n	19704 <bt_conn_process_tx+0x98>
	tx_data(buf)->is_cont = true;
   196fa:	2301      	movs	r3, #1
   196fc:	7723      	strb	r3, [r4, #28]
	return send_frag(conn, buf, NULL, FRAG_END);
   196fe:	2200      	movs	r2, #0
   19700:	2303      	movs	r3, #3
   19702:	e7ec      	b.n	196de <bt_conn_process_tx+0x72>
		frag = bt_conn_create_frag(0);
   19704:	f04f 33ff 	mov.w	r3, #4294967295
   19708:	f04f 32ff 	mov.w	r2, #4294967295
   1970c:	2000      	movs	r0, #0
   1970e:	f7ff ffa7 	bl	19660 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   19712:	7aab      	ldrb	r3, [r5, #10]
   19714:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   19716:	4680      	mov	r8, r0
	if (conn->state != BT_CONN_CONNECTED) {
   19718:	d006      	beq.n	19728 <bt_conn_process_tx+0xbc>
		net_buf_unref(frag);
   1971a:	f002 fd65 	bl	1c1e8 <net_buf_unref>
	net_buf_unref(buf);
   1971e:	4620      	mov	r0, r4
}
   19720:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	net_buf_unref(buf);
   19724:	f002 bd60 	b.w	1c1e8 <net_buf_unref>
	tx_data(frag)->tx = NULL;
   19728:	f8c0 a018 	str.w	sl, [r0, #24]
	tx_data(frag)->is_cont = false;
   1972c:	f880 a01c 	strb.w	sl, [r0, #28]
		err = send_frag(conn, buf, frag, flags);
   19730:	4602      	mov	r2, r0
   19732:	463b      	mov	r3, r7
   19734:	4621      	mov	r1, r4
   19736:	4628      	mov	r0, r5
   19738:	f7ff f858 	bl	187ec <send_frag>
		if (err) {
   1973c:	4606      	mov	r6, r0
   1973e:	b1b8      	cbz	r0, 19770 <bt_conn_process_tx+0x104>
			tx_data(buf)->is_cont = flags != FRAG_START;
   19740:	f007 0701 	and.w	r7, r7, #1
   19744:	7727      	strb	r7, [r4, #28]
			net_buf_unref(frag);
   19746:	4640      	mov	r0, r8
   19748:	f002 fd4e 	bl	1c1e8 <net_buf_unref>
	net_buf_unref(buf);
   1974c:	4620      	mov	r0, r4
   1974e:	f002 fd4b 	bl	1c1e8 <net_buf_unref>
	if (err  == -EIO) {
   19752:	3605      	adds	r6, #5
   19754:	d10e      	bne.n	19774 <bt_conn_process_tx+0x108>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   19756:	69a6      	ldr	r6, [r4, #24]
		tx_data(buf)->tx = NULL;
   19758:	2300      	movs	r3, #0
   1975a:	61a3      	str	r3, [r4, #24]
		net_buf_unref(buf);
   1975c:	4620      	mov	r0, r4
   1975e:	f002 fd43 	bl	1c1e8 <net_buf_unref>
		if (tx) {
   19762:	b13e      	cbz	r6, 19774 <bt_conn_process_tx+0x108>
			conn_tx_destroy(conn, tx);
   19764:	4631      	mov	r1, r6
   19766:	4628      	mov	r0, r5
}
   19768:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			conn_tx_destroy(conn, tx);
   1976c:	f7ff b818 	b.w	187a0 <conn_tx_destroy>
		flags = FRAG_CONT;
   19770:	2701      	movs	r7, #1
   19772:	e7bd      	b.n	196f0 <bt_conn_process_tx+0x84>
}
   19774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19778:	0002c934 	.word	0x0002c934
   1977c:	0002d4bb 	.word	0x0002d4bb
   19780:	0002ae37 	.word	0x0002ae37
   19784:	20000388 	.word	0x20000388

00019788 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   19788:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   1978a:	480c      	ldr	r0, [pc, #48]	; (197bc <bt_conn_init+0x34>)
   1978c:	f010 f866 	bl	2985c <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   19790:	490b      	ldr	r1, [pc, #44]	; (197c0 <bt_conn_init+0x38>)
   19792:	480a      	ldr	r0, [pc, #40]	; (197bc <bt_conn_init+0x34>)
   19794:	f010 f86f 	bl	29876 <k_queue_append>
   19798:	490a      	ldr	r1, [pc, #40]	; (197c4 <bt_conn_init+0x3c>)
   1979a:	4808      	ldr	r0, [pc, #32]	; (197bc <bt_conn_init+0x34>)
   1979c:	f010 f86b 	bl	29876 <k_queue_append>
   197a0:	4909      	ldr	r1, [pc, #36]	; (197c8 <bt_conn_init+0x40>)
   197a2:	4806      	ldr	r0, [pc, #24]	; (197bc <bt_conn_init+0x34>)
   197a4:	f010 f867 	bl	29876 <k_queue_append>
	}

	bt_att_init();
   197a8:	f001 f954 	bl	1aa54 <bt_att_init>

	err = bt_smp_init();
   197ac:	f00f fb29 	bl	28e02 <bt_smp_init>
	if (err) {
   197b0:	4604      	mov	r4, r0
   197b2:	b908      	cbnz	r0, 197b8 <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
   197b4:	f00e fcc1 	bl	2813a <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   197b8:	4620      	mov	r0, r4
   197ba:	bd10      	pop	{r4, pc}
   197bc:	20000ac4 	.word	0x20000ac4
   197c0:	200034d8 	.word	0x200034d8
   197c4:	200034e8 	.word	0x200034e8
   197c8:	200034f8 	.word	0x200034f8

000197cc <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   197cc:	b580      	push	{r7, lr}
   197ce:	af00      	add	r7, sp, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   197d0:	b088      	sub	sp, #32
   197d2:	466a      	mov	r2, sp
   197d4:	4b06      	ldr	r3, [pc, #24]	; (197f0 <l2cap_create_le_sig_pdu.part.0+0x24>)
   197d6:	e9c2 3005 	strd	r3, r0, [r2, #20]
   197da:	2303      	movs	r3, #3
   197dc:	f842 3f10 	str.w	r3, [r2, #16]!
   197e0:	4804      	ldr	r0, [pc, #16]	; (197f4 <l2cap_create_le_sig_pdu.part.0+0x28>)
   197e2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   197e6:	f00e fc36 	bl	28056 <z_log_msg_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
   197ea:	2000      	movs	r0, #0
   197ec:	46bd      	mov	sp, r7
   197ee:	bd80      	pop	{r7, pc}
   197f0:	0002cd71 	.word	0x0002cd71
   197f4:	00029fe8 	.word	0x00029fe8

000197f8 <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   197f8:	b580      	push	{r7, lr}
   197fa:	af00      	add	r7, sp, #0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);
   197fc:	b088      	sub	sp, #32
   197fe:	466a      	mov	r2, sp
   19800:	4b07      	ldr	r3, [pc, #28]	; (19820 <l2cap_accept.part.0+0x28>)
   19802:	e9c2 3005 	strd	r3, r0, [r2, #20]
   19806:	2303      	movs	r3, #3
   19808:	f842 3f10 	str.w	r3, [r2, #16]!
   1980c:	4805      	ldr	r0, [pc, #20]	; (19824 <l2cap_accept.part.0+0x2c>)
   1980e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19812:	f00e fc20 	bl	28056 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   19816:	f06f 000b 	mvn.w	r0, #11
   1981a:	46bd      	mov	sp, r7
   1981c:	bd80      	pop	{r7, pc}
   1981e:	bf00      	nop
   19820:	0002cd99 	.word	0x0002cd99
   19824:	00029fe8 	.word	0x00029fe8

00019828 <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
   19828:	4b04      	ldr	r3, [pc, #16]	; (1983c <l2cap_accept+0x14>)
   1982a:	681a      	ldr	r2, [r3, #0]
   1982c:	b10a      	cbz	r2, 19832 <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   1982e:	f7ff bfe3 	b.w	197f8 <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
   19832:	4803      	ldr	r0, [pc, #12]	; (19840 <l2cap_accept+0x18>)
   19834:	6058      	str	r0, [r3, #4]
		*chan = &l2cap->chan.chan;
   19836:	600b      	str	r3, [r1, #0]
}
   19838:	4610      	mov	r0, r2
   1983a:	4770      	bx	lr
   1983c:	2000350c 	.word	0x2000350c
   19840:	0002a408 	.word	0x0002a408

00019844 <bt_l2cap_connected>:
{
   19844:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   19846:	4d2c      	ldr	r5, [pc, #176]	; (198f8 <bt_l2cap_connected+0xb4>)
   19848:	4f2c      	ldr	r7, [pc, #176]	; (198fc <bt_l2cap_connected+0xb8>)
{
   1984a:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1984c:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1984e:	42bd      	cmp	r5, r7
   19850:	d94e      	bls.n	198f0 <bt_l2cap_connected+0xac>
   19852:	492b      	ldr	r1, [pc, #172]	; (19900 <bt_l2cap_connected+0xbc>)
   19854:	4a2b      	ldr	r2, [pc, #172]	; (19904 <bt_l2cap_connected+0xc0>)
   19856:	482c      	ldr	r0, [pc, #176]	; (19908 <bt_l2cap_connected+0xc4>)
   19858:	f240 1381 	movw	r3, #385	; 0x181
   1985c:	f00d fcbe 	bl	271dc <assert_print>
   19860:	482a      	ldr	r0, [pc, #168]	; (1990c <bt_l2cap_connected+0xc8>)
   19862:	f00d fcbb 	bl	271dc <assert_print>
   19866:	4827      	ldr	r0, [pc, #156]	; (19904 <bt_l2cap_connected+0xc0>)
   19868:	f240 1181 	movw	r1, #385	; 0x181
   1986c:	f00d fcaf 	bl	271ce <assert_post_action>
		if (fchan->accept(conn, &chan) < 0) {
   19870:	686b      	ldr	r3, [r5, #4]
   19872:	a901      	add	r1, sp, #4
   19874:	4620      	mov	r0, r4
   19876:	4798      	blx	r3
   19878:	2800      	cmp	r0, #0
   1987a:	db34      	blt.n	198e6 <bt_l2cap_connected+0xa2>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   1987c:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   1987e:	882a      	ldrh	r2, [r5, #0]
   19880:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   19882:	849a      	strh	r2, [r3, #36]	; 0x24
   19884:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   19888:	68a8      	ldr	r0, [r5, #8]
   1988a:	f3bf 8f5b 	dmb	ish
   1988e:	e852 1f00 	ldrex	r1, [r2]
   19892:	e842 6c00 	strex	ip, r6, [r2]
   19896:	f1bc 0f00 	cmp.w	ip, #0
   1989a:	d1f8      	bne.n	1988e <bt_l2cap_connected+0x4a>
   1989c:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   198a0:	609e      	str	r6, [r3, #8]
	return list->tail;
   198a2:	6da1      	ldr	r1, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   198a4:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   198a8:	b9f9      	cbnz	r1, 198ea <bt_l2cap_connected+0xa6>
	list->head = node;
   198aa:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
	chan->conn = conn;
   198ae:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   198b0:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   198b2:	9801      	ldr	r0, [sp, #4]
   198b4:	6843      	ldr	r3, [r0, #4]
   198b6:	681b      	ldr	r3, [r3, #0]
   198b8:	b103      	cbz	r3, 198bc <bt_l2cap_connected+0x78>
			chan->ops->connected(chan);
   198ba:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   198bc:	9b01      	ldr	r3, [sp, #4]
   198be:	f3bf 8f5b 	dmb	ish
   198c2:	3310      	adds	r3, #16
   198c4:	e853 1f00 	ldrex	r1, [r3]
   198c8:	f041 0101 	orr.w	r1, r1, #1
   198cc:	e843 1200 	strex	r2, r1, [r3]
   198d0:	2a00      	cmp	r2, #0
   198d2:	d1f7      	bne.n	198c4 <bt_l2cap_connected+0x80>
   198d4:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   198d8:	9801      	ldr	r0, [sp, #4]
   198da:	6843      	ldr	r3, [r0, #4]
   198dc:	69db      	ldr	r3, [r3, #28]
   198de:	b113      	cbz	r3, 198e6 <bt_l2cap_connected+0xa2>
			chan->ops->status(chan, chan->status);
   198e0:	f100 0110 	add.w	r1, r0, #16
   198e4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   198e6:	350c      	adds	r5, #12
   198e8:	e7b1      	b.n	1984e <bt_l2cap_connected+0xa>
	parent->next = child;
   198ea:	600a      	str	r2, [r1, #0]
	list->tail = node;
   198ec:	65a2      	str	r2, [r4, #88]	; 0x58
}
   198ee:	e7de      	b.n	198ae <bt_l2cap_connected+0x6a>
   198f0:	d3be      	bcc.n	19870 <bt_l2cap_connected+0x2c>
}
   198f2:	b003      	add	sp, #12
   198f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   198f6:	bf00      	nop
   198f8:	00029f40 	.word	0x00029f40
   198fc:	00029f64 	.word	0x00029f64
   19900:	0002cdf1 	.word	0x0002cdf1
   19904:	0002cdc0 	.word	0x0002cdc0
   19908:	0002ae37 	.word	0x0002ae37
   1990c:	0002b3ac 	.word	0x0002b3ac

00019910 <l2cap_recv>:
{
   19910:	b5f0      	push	{r4, r5, r6, r7, lr}
   19912:	b089      	sub	sp, #36	; 0x24
	if (buf->len < sizeof(*hdr)) {
   19914:	8a0b      	ldrh	r3, [r1, #16]
   19916:	2b03      	cmp	r3, #3
{
   19918:	af02      	add	r7, sp, #8
   1991a:	4606      	mov	r6, r0
   1991c:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1991e:	d80b      	bhi.n	19938 <l2cap_recv+0x28>
		LOG_ERR("Too small L2CAP signaling PDU");
   19920:	4b30      	ldr	r3, [pc, #192]	; (199e4 <l2cap_recv+0xd4>)
		LOG_ERR("Invalid ident value in L2CAP PDU");
   19922:	617b      	str	r3, [r7, #20]
   19924:	2302      	movs	r3, #2
   19926:	4830      	ldr	r0, [pc, #192]	; (199e8 <l2cap_recv+0xd8>)
   19928:	613b      	str	r3, [r7, #16]
   1992a:	f107 0210 	add.w	r2, r7, #16
   1992e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19932:	f00e fb90 	bl	28056 <z_log_msg_static_create.constprop.0>
		return 0;
   19936:	e019      	b.n	1996c <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   19938:	2104      	movs	r1, #4
   1993a:	f105 000c 	add.w	r0, r5, #12
   1993e:	f002 fd79 	bl	1c434 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   19942:	8a29      	ldrh	r1, [r5, #16]
	len = sys_le16_to_cpu(hdr->len);
   19944:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
   19946:	4299      	cmp	r1, r3
   19948:	4604      	mov	r4, r0
   1994a:	d013      	beq.n	19974 <l2cap_recv+0x64>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1994c:	466c      	mov	r4, sp
   1994e:	b088      	sub	sp, #32
   19950:	aa02      	add	r2, sp, #8
   19952:	4826      	ldr	r0, [pc, #152]	; (199ec <l2cap_recv+0xdc>)
   19954:	61d3      	str	r3, [r2, #28]
   19956:	2304      	movs	r3, #4
   19958:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1995c:	f842 3f10 	str.w	r3, [r2, #16]!
   19960:	4821      	ldr	r0, [pc, #132]	; (199e8 <l2cap_recv+0xd8>)
   19962:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   19966:	f00e fb76 	bl	28056 <z_log_msg_static_create.constprop.0>
   1996a:	46a5      	mov	sp, r4
}
   1996c:	2000      	movs	r0, #0
   1996e:	371c      	adds	r7, #28
   19970:	46bd      	mov	sp, r7
   19972:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   19974:	7843      	ldrb	r3, [r0, #1]
   19976:	b90b      	cbnz	r3, 1997c <l2cap_recv+0x6c>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   19978:	4b1d      	ldr	r3, [pc, #116]	; (199f0 <l2cap_recv+0xe0>)
   1997a:	e7d2      	b.n	19922 <l2cap_recv+0x12>
	switch (hdr->code) {
   1997c:	7803      	ldrb	r3, [r0, #0]
   1997e:	2b01      	cmp	r3, #1
   19980:	d0f4      	beq.n	1996c <l2cap_recv+0x5c>
   19982:	2b13      	cmp	r3, #19
   19984:	d103      	bne.n	1998e <l2cap_recv+0x7e>
	if (buf->len < sizeof(*rsp)) {
   19986:	2901      	cmp	r1, #1
   19988:	d8f0      	bhi.n	1996c <l2cap_recv+0x5c>
		LOG_ERR("Too small LE conn param rsp");
   1998a:	4b1a      	ldr	r3, [pc, #104]	; (199f4 <l2cap_recv+0xe4>)
   1998c:	e7c9      	b.n	19922 <l2cap_recv+0x12>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   1998e:	466d      	mov	r5, sp
   19990:	b088      	sub	sp, #32
   19992:	aa02      	add	r2, sp, #8
   19994:	4918      	ldr	r1, [pc, #96]	; (199f8 <l2cap_recv+0xe8>)
   19996:	4814      	ldr	r0, [pc, #80]	; (199e8 <l2cap_recv+0xd8>)
	switch (hdr->code) {
   19998:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   1999c:	2303      	movs	r3, #3
   1999e:	f842 3f10 	str.w	r3, [r2, #16]!
   199a2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   199a6:	f00e fb56 	bl	28056 <z_log_msg_static_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   199aa:	2202      	movs	r2, #2
   199ac:	7861      	ldrb	r1, [r4, #1]
   199ae:	46ad      	mov	sp, r5
   199b0:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   199b2:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   199b4:	f00e fb52 	bl	2805c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   199b8:	4604      	mov	r4, r0
   199ba:	2800      	cmp	r0, #0
   199bc:	d0d6      	beq.n	1996c <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   199be:	2102      	movs	r1, #2
   199c0:	300c      	adds	r0, #12
   199c2:	f002 fd55 	bl	1c470 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   199c6:	2300      	movs	r3, #0
   199c8:	7003      	strb	r3, [r0, #0]
   199ca:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   199cc:	4622      	mov	r2, r4
   199ce:	9300      	str	r3, [sp, #0]
   199d0:	2105      	movs	r1, #5
   199d2:	4628      	mov	r0, r5
   199d4:	f00e fb8e 	bl	280f4 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   199d8:	2800      	cmp	r0, #0
   199da:	d0c7      	beq.n	1996c <l2cap_recv+0x5c>
		net_buf_unref(buf);
   199dc:	4620      	mov	r0, r4
   199de:	f002 fc03 	bl	1c1e8 <net_buf_unref>
   199e2:	e7c3      	b.n	1996c <l2cap_recv+0x5c>
   199e4:	0002ce18 	.word	0x0002ce18
   199e8:	00029fe8 	.word	0x00029fe8
   199ec:	0002ce36 	.word	0x0002ce36
   199f0:	0002ce57 	.word	0x0002ce57
   199f4:	0002ce78 	.word	0x0002ce78
   199f8:	0002ce94 	.word	0x0002ce94

000199fc <bt_l2cap_recv>:
{
   199fc:	b5b0      	push	{r4, r5, r7, lr}
   199fe:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   19a00:	8a0b      	ldrh	r3, [r1, #16]
   19a02:	2b03      	cmp	r3, #3
{
   19a04:	af00      	add	r7, sp, #0
   19a06:	4605      	mov	r5, r0
   19a08:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   19a0a:	d810      	bhi.n	19a2e <bt_l2cap_recv+0x32>
		LOG_ERR("Too small L2CAP PDU received");
   19a0c:	4b17      	ldr	r3, [pc, #92]	; (19a6c <bt_l2cap_recv+0x70>)
   19a0e:	617b      	str	r3, [r7, #20]
   19a10:	4817      	ldr	r0, [pc, #92]	; (19a70 <bt_l2cap_recv+0x74>)
   19a12:	2302      	movs	r3, #2
   19a14:	f107 0210 	add.w	r2, r7, #16
   19a18:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19a1c:	613b      	str	r3, [r7, #16]
   19a1e:	f00e fb1a 	bl	28056 <z_log_msg_static_create.constprop.0>
	net_buf_unref(buf);
   19a22:	4620      	mov	r0, r4
   19a24:	f002 fbe0 	bl	1c1e8 <net_buf_unref>
}
   19a28:	3718      	adds	r7, #24
   19a2a:	46bd      	mov	sp, r7
   19a2c:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   19a2e:	2104      	movs	r1, #4
   19a30:	f104 000c 	add.w	r0, r4, #12
   19a34:	f002 fcfe 	bl	1c434 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   19a38:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   19a3a:	4628      	mov	r0, r5
   19a3c:	f00e fb73 	bl	28126 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   19a40:	b978      	cbnz	r0, 19a62 <bt_l2cap_recv+0x66>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   19a42:	466d      	mov	r5, sp
   19a44:	b088      	sub	sp, #32
   19a46:	466a      	mov	r2, sp
   19a48:	4b0a      	ldr	r3, [pc, #40]	; (19a74 <bt_l2cap_recv+0x78>)
   19a4a:	4809      	ldr	r0, [pc, #36]	; (19a70 <bt_l2cap_recv+0x74>)
   19a4c:	e9c2 3105 	strd	r3, r1, [r2, #20]
   19a50:	2303      	movs	r3, #3
   19a52:	f842 3f10 	str.w	r3, [r2, #16]!
   19a56:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19a5a:	f00e fafc 	bl	28056 <z_log_msg_static_create.constprop.0>
   19a5e:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   19a60:	e7df      	b.n	19a22 <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   19a62:	6843      	ldr	r3, [r0, #4]
   19a64:	4621      	mov	r1, r4
   19a66:	695b      	ldr	r3, [r3, #20]
   19a68:	4798      	blx	r3
   19a6a:	e7da      	b.n	19a22 <bt_l2cap_recv+0x26>
   19a6c:	0002cebc 	.word	0x0002cebc
   19a70:	00029fe8 	.word	0x00029fe8
   19a74:	0002ced9 	.word	0x0002ced9

00019a78 <bt_l2cap_update_conn_param>:
{
   19a78:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   19a7a:	4b17      	ldr	r3, [pc, #92]	; (19ad8 <bt_l2cap_update_conn_param+0x60>)
{
   19a7c:	460e      	mov	r6, r1
	ident++;
   19a7e:	7819      	ldrb	r1, [r3, #0]
   19a80:	3101      	adds	r1, #1
   19a82:	b2c9      	uxtb	r1, r1
   19a84:	2901      	cmp	r1, #1
   19a86:	bf38      	it	cc
   19a88:	2101      	movcc	r1, #1
{
   19a8a:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   19a8c:	2208      	movs	r2, #8
   19a8e:	2012      	movs	r0, #18
	ident++;
   19a90:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   19a92:	f00e fae3 	bl	2805c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   19a96:	4604      	mov	r4, r0
   19a98:	b1d0      	cbz	r0, 19ad0 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   19a9a:	2108      	movs	r1, #8
   19a9c:	300c      	adds	r0, #12
   19a9e:	f002 fce7 	bl	1c470 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   19aa2:	8833      	ldrh	r3, [r6, #0]
   19aa4:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   19aa6:	8873      	ldrh	r3, [r6, #2]
   19aa8:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   19aaa:	88b3      	ldrh	r3, [r6, #4]
   19aac:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   19aae:	88f3      	ldrh	r3, [r6, #6]
   19ab0:	80c3      	strh	r3, [r0, #6]
   19ab2:	2300      	movs	r3, #0
   19ab4:	4628      	mov	r0, r5
   19ab6:	9300      	str	r3, [sp, #0]
   19ab8:	4622      	mov	r2, r4
   19aba:	2105      	movs	r1, #5
   19abc:	f00e fb1a 	bl	280f4 <bt_l2cap_send_cb>
	if (err) {
   19ac0:	4605      	mov	r5, r0
   19ac2:	b110      	cbz	r0, 19aca <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   19ac4:	4620      	mov	r0, r4
   19ac6:	f002 fb8f 	bl	1c1e8 <net_buf_unref>
}
   19aca:	4628      	mov	r0, r5
   19acc:	b002      	add	sp, #8
   19ace:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   19ad0:	f06f 050b 	mvn.w	r5, #11
   19ad4:	e7f9      	b.n	19aca <bt_l2cap_update_conn_param+0x52>
   19ad6:	bf00      	nop
   19ad8:	200043cb 	.word	0x200043cb

00019adc <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   19adc:	2823      	cmp	r0, #35	; 0x23
   19ade:	d81f      	bhi.n	19b20 <att_op_get_type+0x44>
   19ae0:	281a      	cmp	r0, #26
   19ae2:	d804      	bhi.n	19aee <att_op_get_type+0x12>
   19ae4:	1e43      	subs	r3, r0, #1
   19ae6:	2b18      	cmp	r3, #24
   19ae8:	d90e      	bls.n	19b08 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   19aea:	2006      	movs	r0, #6
   19aec:	4770      	bx	lr
	switch (op) {
   19aee:	f1a0 031b 	sub.w	r3, r0, #27
   19af2:	2b08      	cmp	r3, #8
   19af4:	d81e      	bhi.n	19b34 <att_op_get_type+0x58>
   19af6:	e8df f003 	tbb	[pc, r3]
   19afa:	1d05      	.short	0x1d05
   19afc:	191d231b 	.word	0x191d231b
   19b00:	1d25      	.short	0x1d25
   19b02:	05          	.byte	0x05
   19b03:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   19b04:	2003      	movs	r0, #3
   19b06:	4770      	bx	lr
	switch (op) {
   19b08:	4a0f      	ldr	r2, [pc, #60]	; (19b48 <att_op_get_type+0x6c>)
   19b0a:	2301      	movs	r3, #1
   19b0c:	4083      	lsls	r3, r0
   19b0e:	401a      	ands	r2, r3
   19b10:	b9c2      	cbnz	r2, 19b44 <att_op_get_type+0x68>
   19b12:	4a0e      	ldr	r2, [pc, #56]	; (19b4c <att_op_get_type+0x70>)
   19b14:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   19b16:	2a00      	cmp	r2, #0
   19b18:	bf14      	ite	ne
   19b1a:	2001      	movne	r0, #1
   19b1c:	2006      	moveq	r0, #6
   19b1e:	4770      	bx	lr
	switch (op) {
   19b20:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   19b24:	2b52      	cmp	r3, #82	; 0x52
   19b26:	d105      	bne.n	19b34 <att_op_get_type+0x58>
		return ATT_COMMAND;
   19b28:	2000      	movs	r0, #0
}
   19b2a:	4770      	bx	lr
		return ATT_REQUEST;
   19b2c:	2001      	movs	r0, #1
   19b2e:	4770      	bx	lr
		return ATT_INDICATION;
   19b30:	2005      	movs	r0, #5
   19b32:	4770      	bx	lr
		return ATT_COMMAND;
   19b34:	f010 0f40 	tst.w	r0, #64	; 0x40
   19b38:	bf0c      	ite	eq
   19b3a:	2006      	moveq	r0, #6
   19b3c:	2000      	movne	r0, #0
   19b3e:	4770      	bx	lr
	switch (op) {
   19b40:	2004      	movs	r0, #4
   19b42:	4770      	bx	lr
		return ATT_RESPONSE;
   19b44:	2002      	movs	r0, #2
   19b46:	4770      	bx	lr
   19b48:	028aaaaa 	.word	0x028aaaaa
   19b4c:	01455554 	.word	0x01455554

00019b50 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   19b50:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   19b52:	3804      	subs	r0, #4
   19b54:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   19b56:	a901      	add	r1, sp, #4
   19b58:	4802      	ldr	r0, [pc, #8]	; (19b64 <bt_att_released+0x14>)
   19b5a:	f006 fd59 	bl	20610 <k_mem_slab_free>
}
   19b5e:	b003      	add	sp, #12
   19b60:	f85d fb04 	ldr.w	pc, [sp], #4
   19b64:	20000970 	.word	0x20000970

00019b68 <tx_meta_data_free>:
{
   19b68:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   19b6a:	4604      	mov	r4, r0
   19b6c:	b948      	cbnz	r0, 19b82 <tx_meta_data_free+0x1a>
   19b6e:	490a      	ldr	r1, [pc, #40]	; (19b98 <tx_meta_data_free+0x30>)
   19b70:	480a      	ldr	r0, [pc, #40]	; (19b9c <tx_meta_data_free+0x34>)
   19b72:	4a0b      	ldr	r2, [pc, #44]	; (19ba0 <tx_meta_data_free+0x38>)
   19b74:	23ae      	movs	r3, #174	; 0xae
   19b76:	f00d fb31 	bl	271dc <assert_print>
   19b7a:	4809      	ldr	r0, [pc, #36]	; (19ba0 <tx_meta_data_free+0x38>)
   19b7c:	21ae      	movs	r1, #174	; 0xae
   19b7e:	f00d fb26 	bl	271ce <assert_post_action>
	(void)memset(data, 0, sizeof(*data));
   19b82:	2100      	movs	r1, #0
   19b84:	2214      	movs	r2, #20
   19b86:	f00d ff5c 	bl	27a42 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   19b8a:	4621      	mov	r1, r4
   19b8c:	4805      	ldr	r0, [pc, #20]	; (19ba4 <tx_meta_data_free+0x3c>)
}
   19b8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   19b92:	f00f be70 	b.w	29876 <k_queue_append>
   19b96:	bf00      	nop
   19b98:	0002ca46 	.word	0x0002ca46
   19b9c:	0002ae37 	.word	0x0002ae37
   19ba0:	0002cf15 	.word	0x0002cf15
   19ba4:	20000aa8 	.word	0x20000aa8

00019ba8 <find_type_cb>:
{
   19ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19bac:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   19bae:	f8d2 a000 	ldr.w	sl, [r2]
{
   19bb2:	af02      	add	r7, sp, #8
	struct bt_conn *conn = chan->chan.chan.conn;
   19bb4:	f8da 3004 	ldr.w	r3, [sl, #4]
   19bb8:	607b      	str	r3, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   19bba:	2500      	movs	r5, #0
   19bbc:	f642 0301 	movw	r3, #10241	; 0x2801
{
   19bc0:	4680      	mov	r8, r0
   19bc2:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   19bc4:	6800      	ldr	r0, [r0, #0]
   19bc6:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   19bca:	85fb      	strh	r3, [r7, #46]	; 0x2e
   19bcc:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
   19bd0:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   19bd2:	f00d ff61 	bl	27a98 <bt_uuid_cmp>
   19bd6:	2800      	cmp	r0, #0
   19bd8:	d070      	beq.n	19cbc <find_type_cb+0x114>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   19bda:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   19bde:	f8d8 0000 	ldr.w	r0, [r8]
   19be2:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   19be6:	85fb      	strh	r3, [r7, #46]	; 0x2e
   19be8:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   19bec:	f00d ff54 	bl	27a98 <bt_uuid_cmp>
   19bf0:	b138      	cbz	r0, 19c02 <find_type_cb+0x5a>
		if (data->group &&
   19bf2:	68a3      	ldr	r3, [r4, #8]
   19bf4:	b11b      	cbz	r3, 19bfe <find_type_cb+0x56>
   19bf6:	885a      	ldrh	r2, [r3, #2]
   19bf8:	42b2      	cmp	r2, r6
   19bfa:	d200      	bcs.n	19bfe <find_type_cb+0x56>
	data->group->end_handle = sys_cpu_to_le16(handle);
   19bfc:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   19bfe:	2001      	movs	r0, #1
   19c00:	e009      	b.n	19c16 <find_type_cb+0x6e>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   19c02:	6861      	ldr	r1, [r4, #4]
   19c04:	4608      	mov	r0, r1
   19c06:	f00e faa3 	bl	28150 <net_buf_frags_len>
   19c0a:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   19c0e:	1a1b      	subs	r3, r3, r0
   19c10:	2b03      	cmp	r3, #3
   19c12:	d804      	bhi.n	19c1e <find_type_cb+0x76>
		return BT_GATT_ITER_STOP;
   19c14:	2000      	movs	r0, #0
}
   19c16:	3744      	adds	r7, #68	; 0x44
   19c18:	46bd      	mov	sp, r7
   19c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   19c1e:	4608      	mov	r0, r1
   19c20:	f002 fb3e 	bl	1c2a0 <net_buf_frag_last>
   19c24:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   19c26:	6860      	ldr	r0, [r4, #4]
   19c28:	f00e fa92 	bl	28150 <net_buf_frags_len>
   19c2c:	f8ba b02a 	ldrh.w	fp, [sl, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   19c30:	f105 090c 	add.w	r9, r5, #12
   19c34:	ebab 0b00 	sub.w	fp, fp, r0
   19c38:	4648      	mov	r0, r9
   19c3a:	f00f f8f8 	bl	28e2e <net_buf_simple_tailroom>
   19c3e:	4558      	cmp	r0, fp
   19c40:	d93f      	bls.n	19cc2 <find_type_cb+0x11a>
   19c42:	6860      	ldr	r0, [r4, #4]
   19c44:	f00e fa84 	bl	28150 <net_buf_frags_len>
   19c48:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
   19c4c:	1a18      	subs	r0, r3, r0
	if (!len) {
   19c4e:	b970      	cbnz	r0, 19c6e <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   19c50:	6863      	ldr	r3, [r4, #4]
   19c52:	7a98      	ldrb	r0, [r3, #10]
   19c54:	f002 f8b4 	bl	1bdc0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   19c58:	2200      	movs	r2, #0
   19c5a:	2300      	movs	r3, #0
   19c5c:	f00f f8d4 	bl	28e08 <net_buf_alloc_fixed>
		if (!frag) {
   19c60:	4605      	mov	r5, r0
   19c62:	2800      	cmp	r0, #0
   19c64:	d0d6      	beq.n	19c14 <find_type_cb+0x6c>
		net_buf_frag_add(data->buf, frag);
   19c66:	4601      	mov	r1, r0
   19c68:	6860      	ldr	r0, [r4, #4]
   19c6a:	f002 fb5f 	bl	1c32c <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   19c6e:	2300      	movs	r3, #0
   19c70:	9300      	str	r3, [sp, #0]
   19c72:	f8d8 a004 	ldr.w	sl, [r8, #4]
   19c76:	6878      	ldr	r0, [r7, #4]
   19c78:	4641      	mov	r1, r8
   19c7a:	2310      	movs	r3, #16
   19c7c:	f107 0208 	add.w	r2, r7, #8
   19c80:	47d0      	blx	sl
	if (read < 0) {
   19c82:	f1b0 0800 	subs.w	r8, r0, #0
   19c86:	db19      	blt.n	19cbc <find_type_cb+0x114>
	if (read != data->value_len) {
   19c88:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   19c8a:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   19c8c:	4542      	cmp	r2, r8
   19c8e:	d03f      	beq.n	19d10 <find_type_cb+0x168>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   19c90:	4601      	mov	r1, r0
   19c92:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   19c96:	f00d ff2d 	bl	27af4 <bt_uuid_create>
   19c9a:	b9b0      	cbnz	r0, 19cca <find_type_cb+0x122>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   19c9c:	466d      	mov	r5, sp
   19c9e:	b088      	sub	sp, #32
   19ca0:	7c23      	ldrb	r3, [r4, #16]
   19ca2:	aa02      	add	r2, sp, #8
   19ca4:	491d      	ldr	r1, [pc, #116]	; (19d1c <find_type_cb+0x174>)
   19ca6:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unable to create UUID: size %d", read);
   19caa:	2303      	movs	r3, #3
   19cac:	f842 3f10 	str.w	r3, [r2, #16]!
   19cb0:	481b      	ldr	r0, [pc, #108]	; (19d20 <find_type_cb+0x178>)
   19cb2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19cb6:	f00e fb39 	bl	2832c <z_log_msg_static_create.constprop.0>
   19cba:	46ad      	mov	sp, r5
	data->group = NULL;
   19cbc:	2300      	movs	r3, #0
   19cbe:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   19cc0:	e79d      	b.n	19bfe <find_type_cb+0x56>
	return net_buf_simple_tailroom(&buf->b);
   19cc2:	4648      	mov	r0, r9
   19cc4:	f00f f8b3 	bl	28e2e <net_buf_simple_tailroom>
   19cc8:	e7c1      	b.n	19c4e <find_type_cb+0xa6>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   19cca:	fa5f f288 	uxtb.w	r2, r8
   19cce:	f107 0108 	add.w	r1, r7, #8
   19cd2:	f107 0018 	add.w	r0, r7, #24
   19cd6:	f00d ff0d 	bl	27af4 <bt_uuid_create>
   19cda:	b930      	cbnz	r0, 19cea <find_type_cb+0x142>
			LOG_WRN("Unable to create UUID: size %d", read);
   19cdc:	466d      	mov	r5, sp
   19cde:	b088      	sub	sp, #32
   19ce0:	aa02      	add	r2, sp, #8
   19ce2:	4b10      	ldr	r3, [pc, #64]	; (19d24 <find_type_cb+0x17c>)
   19ce4:	e9c2 3805 	strd	r3, r8, [r2, #20]
   19ce8:	e7df      	b.n	19caa <find_type_cb+0x102>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   19cea:	f107 0118 	add.w	r1, r7, #24
   19cee:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   19cf2:	f00d fed1 	bl	27a98 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   19cf6:	2800      	cmp	r0, #0
   19cf8:	d1e0      	bne.n	19cbc <find_type_cb+0x114>
	data->err = 0x00;
   19cfa:	2300      	movs	r3, #0
   19cfc:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   19cfe:	2104      	movs	r1, #4
   19d00:	f105 000c 	add.w	r0, r5, #12
   19d04:	f002 fbb4 	bl	1c470 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   19d08:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   19d0a:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   19d0c:	68a3      	ldr	r3, [r4, #8]
   19d0e:	e775      	b.n	19bfc <find_type_cb+0x54>
	} else if (memcmp(data->value, uuid, read)) {
   19d10:	f107 0108 	add.w	r1, r7, #8
   19d14:	f00d fe63 	bl	279de <memcmp>
   19d18:	e7ed      	b.n	19cf6 <find_type_cb+0x14e>
   19d1a:	bf00      	nop
   19d1c:	0002cf44 	.word	0x0002cf44
   19d20:	00029fb8 	.word	0x00029fb8
   19d24:	0002cf63 	.word	0x0002cf63

00019d28 <chan_send>:
{
   19d28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19d2c:	4606      	mov	r6, r0
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   19d2e:	f8d1 9018 	ldr.w	r9, [r1, #24]
	hdr = (void *)buf->data;
   19d32:	68cb      	ldr	r3, [r1, #12]
{
   19d34:	b089      	sub	sp, #36	; 0x24
   19d36:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   19d38:	3034      	adds	r0, #52	; 0x34
   19d3a:	2102      	movs	r1, #2
   19d3c:	f00e fa22 	bl	28184 <atomic_test_bit>
   19d40:	b970      	cbnz	r0, 19d60 <chan_send+0x38>
		LOG_ERR("ATT channel not connected");
   19d42:	4b36      	ldr	r3, [pc, #216]	; (19e1c <chan_send+0xf4>)
   19d44:	4836      	ldr	r0, [pc, #216]	; (19e20 <chan_send+0xf8>)
   19d46:	e9cd 1306 	strd	r1, r3, [sp, #24]
   19d4a:	aa06      	add	r2, sp, #24
   19d4c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EINVAL;
   19d50:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("ATT channel not connected");
   19d54:	f00e faea 	bl	2832c <z_log_msg_static_create.constprop.0>
}
   19d58:	4628      	mov	r0, r5
   19d5a:	b009      	add	sp, #36	; 0x24
   19d5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   19d60:	781b      	ldrb	r3, [r3, #0]
   19d62:	2bd2      	cmp	r3, #210	; 0xd2
   19d64:	d117      	bne.n	19d96 <chan_send+0x6e>
		err = bt_smp_sign(chan->att->conn, buf);
   19d66:	6833      	ldr	r3, [r6, #0]
   19d68:	4621      	mov	r1, r4
   19d6a:	6818      	ldr	r0, [r3, #0]
   19d6c:	f00f f846 	bl	28dfc <bt_smp_sign>
		if (err) {
   19d70:	4605      	mov	r5, r0
   19d72:	b180      	cbz	r0, 19d96 <chan_send+0x6e>
			LOG_ERR("Error signing data");
   19d74:	4b2b      	ldr	r3, [pc, #172]	; (19e24 <chan_send+0xfc>)
   19d76:	9307      	str	r3, [sp, #28]
   19d78:	aa06      	add	r2, sp, #24
   19d7a:	2302      	movs	r3, #2
   19d7c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19d80:	4827      	ldr	r0, [pc, #156]	; (19e20 <chan_send+0xf8>)
   19d82:	9306      	str	r3, [sp, #24]
   19d84:	f00e fad2 	bl	2832c <z_log_msg_static_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   19d88:	69a0      	ldr	r0, [r4, #24]
   19d8a:	f7ff feed 	bl	19b68 <tx_meta_data_free>
			net_buf_unref(buf);
   19d8e:	4620      	mov	r0, r4
   19d90:	f002 fa2a 	bl	1c1e8 <net_buf_unref>
			return err;
   19d94:	e7e0      	b.n	19d58 <chan_send+0x30>
	state->offset = net_buf_simple_headroom(buf);
   19d96:	f104 000c 	add.w	r0, r4, #12
   19d9a:	f00f f844 	bl	28e26 <net_buf_simple_headroom>
	state->len = buf->len;
   19d9e:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	data->att_chan = chan;
   19da2:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   19da6:	6833      	ldr	r3, [r6, #0]
   19da8:	681e      	ldr	r6, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   19daa:	68e3      	ldr	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   19dac:	4607      	mov	r7, r0
   19dae:	7818      	ldrb	r0, [r3, #0]
   19db0:	f7ff fe94 	bl	19adc <att_op_get_type>
   19db4:	2805      	cmp	r0, #5
   19db6:	4605      	mov	r5, r0
	switch (op_type) {
   19db8:	d820      	bhi.n	19dfc <chan_send+0xd4>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   19dba:	4b1b      	ldr	r3, [pc, #108]	; (19e28 <chan_send+0x100>)
   19dbc:	f8cd 9000 	str.w	r9, [sp]
   19dc0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   19dc4:	4622      	mov	r2, r4
   19dc6:	2104      	movs	r1, #4
   19dc8:	4630      	mov	r0, r6
   19dca:	f00e f993 	bl	280f4 <bt_l2cap_send_cb>
	if (err) {
   19dce:	4605      	mov	r5, r0
   19dd0:	2800      	cmp	r0, #0
   19dd2:	d0c1      	beq.n	19d58 <chan_send+0x30>
		if (err == -ENOBUFS) {
   19dd4:	f110 0f69 	cmn.w	r0, #105	; 0x69
   19dd8:	d109      	bne.n	19dee <chan_send+0xc6>
			LOG_ERR("Ran out of TX buffers or contexts.");
   19dda:	4b14      	ldr	r3, [pc, #80]	; (19e2c <chan_send+0x104>)
   19ddc:	9307      	str	r3, [sp, #28]
   19dde:	4810      	ldr	r0, [pc, #64]	; (19e20 <chan_send+0xf8>)
   19de0:	2302      	movs	r3, #2
   19de2:	aa06      	add	r2, sp, #24
   19de4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19de8:	9306      	str	r3, [sp, #24]
   19dea:	f00e fa9f 	bl	2832c <z_log_msg_static_create.constprop.0>
	buf->data = buf->__buf + state->offset;
   19dee:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   19df0:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   19df4:	fa13 f787 	uxtah	r7, r3, r7
   19df8:	60e7      	str	r7, [r4, #12]
}
   19dfa:	e7ad      	b.n	19d58 <chan_send+0x30>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   19dfc:	4a0c      	ldr	r2, [pc, #48]	; (19e30 <chan_send+0x108>)
   19dfe:	490d      	ldr	r1, [pc, #52]	; (19e34 <chan_send+0x10c>)
   19e00:	480d      	ldr	r0, [pc, #52]	; (19e38 <chan_send+0x110>)
   19e02:	f44f 7319 	mov.w	r3, #612	; 0x264
   19e06:	f00d f9e9 	bl	271dc <assert_print>
   19e0a:	480c      	ldr	r0, [pc, #48]	; (19e3c <chan_send+0x114>)
   19e0c:	4629      	mov	r1, r5
   19e0e:	f00d f9e5 	bl	271dc <assert_print>
   19e12:	4807      	ldr	r0, [pc, #28]	; (19e30 <chan_send+0x108>)
   19e14:	f44f 7119 	mov.w	r1, #612	; 0x264
   19e18:	f00d f9d9 	bl	271ce <assert_post_action>
   19e1c:	0002cf82 	.word	0x0002cf82
   19e20:	00029fb8 	.word	0x00029fb8
   19e24:	0002cf9c 	.word	0x0002cf9c
   19e28:	0002a430 	.word	0x0002a430
   19e2c:	0002cfc8 	.word	0x0002cfc8
   19e30:	0002cf15 	.word	0x0002cf15
   19e34:	0002dab5 	.word	0x0002dab5
   19e38:	0002ae37 	.word	0x0002ae37
   19e3c:	0002cfaf 	.word	0x0002cfaf

00019e40 <bt_att_chan_req_send>:
{
   19e40:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan);
   19e42:	b958      	cbnz	r0, 19e5c <bt_att_chan_req_send+0x1c>
   19e44:	4919      	ldr	r1, [pc, #100]	; (19eac <bt_att_chan_req_send+0x6c>)
   19e46:	4a1a      	ldr	r2, [pc, #104]	; (19eb0 <bt_att_chan_req_send+0x70>)
   19e48:	481a      	ldr	r0, [pc, #104]	; (19eb4 <bt_att_chan_req_send+0x74>)
   19e4a:	f240 3325 	movw	r3, #805	; 0x325
   19e4e:	f00d f9c5 	bl	271dc <assert_print>
   19e52:	f240 3125 	movw	r1, #805	; 0x325
	__ASSERT_NO_MSG(req);
   19e56:	4816      	ldr	r0, [pc, #88]	; (19eb0 <bt_att_chan_req_send+0x70>)
   19e58:	f00d f9b9 	bl	271ce <assert_post_action>
   19e5c:	b949      	cbnz	r1, 19e72 <bt_att_chan_req_send+0x32>
   19e5e:	4916      	ldr	r1, [pc, #88]	; (19eb8 <bt_att_chan_req_send+0x78>)
   19e60:	4a13      	ldr	r2, [pc, #76]	; (19eb0 <bt_att_chan_req_send+0x70>)
   19e62:	4814      	ldr	r0, [pc, #80]	; (19eb4 <bt_att_chan_req_send+0x74>)
   19e64:	f240 3326 	movw	r3, #806	; 0x326
   19e68:	f00d f9b8 	bl	271dc <assert_print>
   19e6c:	f240 3126 	movw	r1, #806	; 0x326
   19e70:	e7f1      	b.n	19e56 <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(req->func);
   19e72:	684a      	ldr	r2, [r1, #4]
   19e74:	b94a      	cbnz	r2, 19e8a <bt_att_chan_req_send+0x4a>
   19e76:	4911      	ldr	r1, [pc, #68]	; (19ebc <bt_att_chan_req_send+0x7c>)
   19e78:	4a0d      	ldr	r2, [pc, #52]	; (19eb0 <bt_att_chan_req_send+0x70>)
   19e7a:	480e      	ldr	r0, [pc, #56]	; (19eb4 <bt_att_chan_req_send+0x74>)
   19e7c:	f240 3327 	movw	r3, #807	; 0x327
   19e80:	f00d f9ac 	bl	271dc <assert_print>
   19e84:	f240 3127 	movw	r1, #807	; 0x327
   19e88:	e7e5      	b.n	19e56 <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(!chan->req);
   19e8a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   19e8c:	b14b      	cbz	r3, 19ea2 <bt_att_chan_req_send+0x62>
   19e8e:	490c      	ldr	r1, [pc, #48]	; (19ec0 <bt_att_chan_req_send+0x80>)
   19e90:	4a07      	ldr	r2, [pc, #28]	; (19eb0 <bt_att_chan_req_send+0x70>)
   19e92:	4808      	ldr	r0, [pc, #32]	; (19eb4 <bt_att_chan_req_send+0x74>)
   19e94:	f44f 734a 	mov.w	r3, #808	; 0x328
   19e98:	f00d f9a0 	bl	271dc <assert_print>
   19e9c:	f44f 714a 	mov.w	r1, #808	; 0x328
   19ea0:	e7d9      	b.n	19e56 <bt_att_chan_req_send+0x16>
}
   19ea2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return chan_req_send(chan, req);
   19ea6:	f00e ba44 	b.w	28332 <chan_req_send>
   19eaa:	bf00      	nop
   19eac:	0002cfeb 	.word	0x0002cfeb
   19eb0:	0002cf15 	.word	0x0002cf15
   19eb4:	0002ae37 	.word	0x0002ae37
   19eb8:	0002d001 	.word	0x0002d001
   19ebc:	0002cff0 	.word	0x0002cff0
   19ec0:	0002cffa 	.word	0x0002cffa

00019ec4 <att_get>:
{
   19ec4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   19ec6:	7a83      	ldrb	r3, [r0, #10]
   19ec8:	2b07      	cmp	r3, #7
   19eca:	d00d      	beq.n	19ee8 <att_get+0x24>
		LOG_WRN("Not connected");
   19ecc:	4b13      	ldr	r3, [pc, #76]	; (19f1c <att_get+0x58>)
   19ece:	9305      	str	r3, [sp, #20]
   19ed0:	2302      	movs	r3, #2
   19ed2:	9304      	str	r3, [sp, #16]
   19ed4:	aa04      	add	r2, sp, #16
   19ed6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		LOG_ERR("Unable to find ATT channel");
   19eda:	4811      	ldr	r0, [pc, #68]	; (19f20 <att_get+0x5c>)
   19edc:	f00e fa26 	bl	2832c <z_log_msg_static_create.constprop.0>
		return NULL;
   19ee0:	2000      	movs	r0, #0
}
   19ee2:	b007      	add	sp, #28
   19ee4:	f85d fb04 	ldr.w	pc, [sp], #4
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   19ee8:	2104      	movs	r1, #4
   19eea:	f00e f91c 	bl	28126 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   19eee:	4603      	mov	r3, r0
   19ef0:	b938      	cbnz	r0, 19f02 <att_get+0x3e>
		LOG_ERR("Unable to find ATT channel");
   19ef2:	4b0c      	ldr	r3, [pc, #48]	; (19f24 <att_get+0x60>)
   19ef4:	9305      	str	r3, [sp, #20]
   19ef6:	2302      	movs	r3, #2
   19ef8:	9304      	str	r3, [sp, #16]
   19efa:	aa04      	add	r2, sp, #16
   19efc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19f00:	e7eb      	b.n	19eda <att_get+0x16>
	if (!atomic_test_bit(att_chan->flags, ATT_CONNECTED)) {
   19f02:	2102      	movs	r1, #2
   19f04:	3030      	adds	r0, #48	; 0x30
   19f06:	f00e f93d 	bl	28184 <atomic_test_bit>
   19f0a:	b918      	cbnz	r0, 19f14 <att_get+0x50>
		LOG_ERR("ATT channel not connected");
   19f0c:	4b06      	ldr	r3, [pc, #24]	; (19f28 <att_get+0x64>)
   19f0e:	e9cd 1304 	strd	r1, r3, [sp, #16]
   19f12:	e7f2      	b.n	19efa <att_get+0x36>
	return att_chan->att;
   19f14:	f853 0c04 	ldr.w	r0, [r3, #-4]
   19f18:	e7e3      	b.n	19ee2 <att_get+0x1e>
   19f1a:	bf00      	nop
   19f1c:	0002d005 	.word	0x0002d005
   19f20:	00029fb8 	.word	0x00029fb8
   19f24:	0002d013 	.word	0x0002d013
   19f28:	0002cf82 	.word	0x0002cf82

00019f2c <bt_att_connected>:
{
   19f2c:	b510      	push	{r4, lr}
   19f2e:	f100 0330 	add.w	r3, r0, #48	; 0x30
   19f32:	4604      	mov	r4, r0
   19f34:	f3bf 8f5b 	dmb	ish
   19f38:	e853 1f00 	ldrex	r1, [r3]
   19f3c:	f041 0104 	orr.w	r1, r1, #4
   19f40:	e843 1200 	strex	r2, r1, [r3]
   19f44:	2a00      	cmp	r2, #0
   19f46:	d1f7      	bne.n	19f38 <bt_att_connected+0xc>
   19f48:	f3bf 8f5b 	dmb	ish
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   19f4c:	2317      	movs	r3, #23
   19f4e:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   19f50:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   19f52:	1f20      	subs	r0, r4, #4
   19f54:	f00e f9a7 	bl	282a6 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   19f58:	f104 0054 	add.w	r0, r4, #84	; 0x54
   19f5c:	4903      	ldr	r1, [pc, #12]	; (19f6c <bt_att_connected+0x40>)
   19f5e:	f007 fb8b 	bl	21678 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   19f62:	6820      	ldr	r0, [r4, #0]
}
   19f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   19f68:	f001 bebc 	b.w	1bce4 <bt_gatt_connected>
   19f6c:	0001ac5d 	.word	0x0001ac5d

00019f70 <read_group_cb>:
{
   19f70:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   19f74:	4605      	mov	r5, r0
   19f76:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   19f78:	f04f 0800 	mov.w	r8, #0
   19f7c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   19f80:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   19f82:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   19f84:	f88d 8008 	strb.w	r8, [sp, #8]
   19f88:	a902      	add	r1, sp, #8
{
   19f8a:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   19f8c:	f8ad 300a 	strh.w	r3, [sp, #10]
   19f90:	f00d fd82 	bl	27a98 <bt_uuid_cmp>
   19f94:	b1a0      	cbz	r0, 19fc0 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   19f96:	f642 0301 	movw	r3, #10241	; 0x2801
   19f9a:	6828      	ldr	r0, [r5, #0]
   19f9c:	f88d 800c 	strb.w	r8, [sp, #12]
   19fa0:	a903      	add	r1, sp, #12
   19fa2:	f8ad 300e 	strh.w	r3, [sp, #14]
   19fa6:	f00d fd77 	bl	27a98 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   19faa:	b148      	cbz	r0, 19fc0 <read_group_cb+0x50>
		if (data->group &&
   19fac:	6923      	ldr	r3, [r4, #16]
   19fae:	b11b      	cbz	r3, 19fb8 <read_group_cb+0x48>
   19fb0:	885a      	ldrh	r2, [r3, #2]
   19fb2:	42b2      	cmp	r2, r6
   19fb4:	d200      	bcs.n	19fb8 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   19fb6:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   19fb8:	2001      	movs	r0, #1
}
   19fba:	b004      	add	sp, #16
   19fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   19fc0:	6861      	ldr	r1, [r4, #4]
   19fc2:	6828      	ldr	r0, [r5, #0]
   19fc4:	f00d fd68 	bl	27a98 <bt_uuid_cmp>
   19fc8:	b110      	cbz	r0, 19fd0 <read_group_cb+0x60>
		data->group = NULL;
   19fca:	2300      	movs	r3, #0
   19fcc:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   19fce:	e7f3      	b.n	19fb8 <read_group_cb+0x48>
	if (data->rsp->len &&
   19fd0:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   19fd2:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   19fd4:	781a      	ldrb	r2, [r3, #0]
   19fd6:	b132      	cbz	r2, 19fe6 <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   19fd8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   19fda:	8a01      	ldrh	r1, [r0, #16]
   19fdc:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   19fde:	4293      	cmp	r3, r2
   19fe0:	da01      	bge.n	19fe6 <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   19fe2:	2000      	movs	r0, #0
   19fe4:	e7e9      	b.n	19fba <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   19fe6:	2104      	movs	r1, #4
   19fe8:	300c      	adds	r0, #12
   19fea:	f002 fa41 	bl	1c470 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   19fee:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   19ff0:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   19ff2:	6923      	ldr	r3, [r4, #16]
   19ff4:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   19ff6:	4b08      	ldr	r3, [pc, #32]	; (1a018 <read_group_cb+0xa8>)
   19ff8:	9300      	str	r3, [sp, #0]
   19ffa:	9401      	str	r4, [sp, #4]
   19ffc:	68a2      	ldr	r2, [r4, #8]
   19ffe:	2300      	movs	r3, #0
   1a000:	4629      	mov	r1, r5
   1a002:	4638      	mov	r0, r7
   1a004:	f00e f9d4 	bl	283b0 <att_chan_read>
	if (read < 0) {
   1a008:	2800      	cmp	r0, #0
   1a00a:	dbea      	blt.n	19fe2 <read_group_cb+0x72>
	if (!data->group) {
   1a00c:	6920      	ldr	r0, [r4, #16]
   1a00e:	3800      	subs	r0, #0
   1a010:	bf18      	it	ne
   1a012:	2001      	movne	r0, #1
   1a014:	e7d1      	b.n	19fba <read_group_cb+0x4a>
   1a016:	bf00      	nop
   1a018:	0002830d 	.word	0x0002830d

0001a01c <read_type_cb>:
{
   1a01c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   1a020:	6817      	ldr	r7, [r2, #0]
{
   1a022:	4605      	mov	r5, r0
   1a024:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1a026:	6800      	ldr	r0, [r0, #0]
   1a028:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   1a02a:	687e      	ldr	r6, [r7, #4]
{
   1a02c:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1a02e:	f00d fd33 	bl	27a98 <bt_uuid_cmp>
   1a032:	4681      	mov	r9, r0
   1a034:	2800      	cmp	r0, #0
   1a036:	d13c      	bne.n	1a0b2 <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1a038:	4630      	mov	r0, r6
   1a03a:	2295      	movs	r2, #149	; 0x95
   1a03c:	4629      	mov	r1, r5
   1a03e:	f00e fe56 	bl	28cee <bt_gatt_check_perm>
   1a042:	4606      	mov	r6, r0
   1a044:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1a046:	b140      	cbz	r0, 1a05a <read_type_cb+0x3e>
		if (data->rsp->len) {
   1a048:	68e3      	ldr	r3, [r4, #12]
   1a04a:	781b      	ldrb	r3, [r3, #0]
   1a04c:	b10b      	cbz	r3, 1a052 <read_type_cb+0x36>
			data->err = 0x00;
   1a04e:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   1a052:	2000      	movs	r0, #0
}
   1a054:	b003      	add	sp, #12
   1a056:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1a05a:	68a0      	ldr	r0, [r4, #8]
   1a05c:	f002 f920 	bl	1c2a0 <net_buf_frag_last>
   1a060:	2102      	movs	r1, #2
   1a062:	300c      	adds	r0, #12
   1a064:	f002 fa04 	bl	1c470 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1a068:	4b13      	ldr	r3, [pc, #76]	; (1a0b8 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1a06a:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   1a06c:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1a070:	9300      	str	r3, [sp, #0]
   1a072:	9401      	str	r4, [sp, #4]
   1a074:	68a2      	ldr	r2, [r4, #8]
   1a076:	4633      	mov	r3, r6
   1a078:	4629      	mov	r1, r5
   1a07a:	4638      	mov	r0, r7
   1a07c:	f00e f998 	bl	283b0 <att_chan_read>
	if (read < 0) {
   1a080:	2800      	cmp	r0, #0
   1a082:	da07      	bge.n	1a094 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   1a084:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   1a088:	bf26      	itte	cs
   1a08a:	4240      	negcs	r0, r0
   1a08c:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   1a08e:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   1a090:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1a092:	e7de      	b.n	1a052 <read_type_cb+0x36>
	if (!data->item) {
   1a094:	6923      	ldr	r3, [r4, #16]
   1a096:	2b00      	cmp	r3, #0
   1a098:	d0db      	beq.n	1a052 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1a09a:	68a0      	ldr	r0, [r4, #8]
   1a09c:	f00e f858 	bl	28150 <net_buf_frags_len>
   1a0a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   1a0a2:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1a0a4:	68e3      	ldr	r3, [r4, #12]
   1a0a6:	781b      	ldrb	r3, [r3, #0]
   1a0a8:	4298      	cmp	r0, r3
   1a0aa:	bf94      	ite	ls
   1a0ac:	2000      	movls	r0, #0
   1a0ae:	2001      	movhi	r0, #1
   1a0b0:	e7d0      	b.n	1a054 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1a0b2:	2001      	movs	r0, #1
   1a0b4:	e7ce      	b.n	1a054 <read_type_cb+0x38>
   1a0b6:	bf00      	nop
   1a0b8:	00028161 	.word	0x00028161

0001a0bc <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1a0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a0c0:	b082      	sub	sp, #8
   1a0c2:	af00      	add	r7, sp, #0
   1a0c4:	4604      	mov	r4, r0
   1a0c6:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1a0c8:	483b      	ldr	r0, [pc, #236]	; (1a1b8 <bt_att_accept+0xfc>)
   1a0ca:	2200      	movs	r2, #0
   1a0cc:	2300      	movs	r3, #0
   1a0ce:	4639      	mov	r1, r7
   1a0d0:	f006 fa34 	bl	2053c <k_mem_slab_alloc>
   1a0d4:	4605      	mov	r5, r0
   1a0d6:	b1a8      	cbz	r0, 1a104 <bt_att_accept+0x48>
		LOG_ERR("No available ATT context for conn %p", conn);
   1a0d8:	466d      	mov	r5, sp
   1a0da:	b088      	sub	sp, #32
   1a0dc:	466a      	mov	r2, sp
   1a0de:	4b37      	ldr	r3, [pc, #220]	; (1a1bc <bt_att_accept+0x100>)
   1a0e0:	4837      	ldr	r0, [pc, #220]	; (1a1c0 <bt_att_accept+0x104>)
   1a0e2:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1a0e6:	2303      	movs	r3, #3
   1a0e8:	f842 3f10 	str.w	r3, [r2, #16]!
   1a0ec:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a0f0:	f00e f91c 	bl	2832c <z_log_msg_static_create.constprop.0>
   1a0f4:	46ad      	mov	sp, r5
		return -ENOMEM;
   1a0f6:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   1a0fa:	4628      	mov	r0, r5
   1a0fc:	3708      	adds	r7, #8
   1a0fe:	46bd      	mov	sp, r7
   1a100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_z_current_get();
   1a104:	f008 fd48 	bl	22b98 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   1a108:	4b2e      	ldr	r3, [pc, #184]	; (1a1c4 <bt_att_accept+0x108>)
	(void)memset(att, 0, sizeof(*att));
   1a10a:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   1a10c:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   1a10e:	2230      	movs	r2, #48	; 0x30
   1a110:	6838      	ldr	r0, [r7, #0]
   1a112:	f00d fc96 	bl	27a42 <memset>
	att->conn = conn;
   1a116:	683b      	ldr	r3, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1a118:	482b      	ldr	r0, [pc, #172]	; (1a1c8 <bt_att_accept+0x10c>)
	att->conn = conn;
   1a11a:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   1a11c:	683c      	ldr	r4, [r7, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1a11e:	607d      	str	r5, [r7, #4]
	list->tail = NULL;
   1a120:	e9c4 5501 	strd	r5, r5, [r4, #4]
   1a124:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1a128:	2200      	movs	r2, #0
   1a12a:	2300      	movs	r3, #0
   1a12c:	1d39      	adds	r1, r7, #4
   1a12e:	f006 fa05 	bl	2053c <k_mem_slab_alloc>
   1a132:	4605      	mov	r5, r0
   1a134:	b180      	cbz	r0, 1a158 <bt_att_accept+0x9c>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   1a136:	6823      	ldr	r3, [r4, #0]
   1a138:	466c      	mov	r4, sp
   1a13a:	b088      	sub	sp, #32
   1a13c:	466a      	mov	r2, sp
   1a13e:	4923      	ldr	r1, [pc, #140]	; (1a1cc <bt_att_accept+0x110>)
   1a140:	481f      	ldr	r0, [pc, #124]	; (1a1c0 <bt_att_accept+0x104>)
   1a142:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1a146:	2303      	movs	r3, #3
   1a148:	f842 3f10 	str.w	r3, [r2, #16]!
   1a14c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1a150:	f00e f8ec 	bl	2832c <z_log_msg_static_create.constprop.0>
   1a154:	46a5      	mov	sp, r4
	if (!chan) {
   1a156:	e7ce      	b.n	1a0f6 <bt_att_accept+0x3a>
	(void)memset(chan, 0, sizeof(*chan));
   1a158:	4601      	mov	r1, r0
   1a15a:	2290      	movs	r2, #144	; 0x90
   1a15c:	6878      	ldr	r0, [r7, #4]
   1a15e:	f00d fc70 	bl	27a42 <memset>
	chan->chan.chan.ops = &ops;
   1a162:	6878      	ldr	r0, [r7, #4]
   1a164:	4b1a      	ldr	r3, [pc, #104]	; (1a1d0 <bt_att_accept+0x114>)
   1a166:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   1a168:	303c      	adds	r0, #60	; 0x3c
   1a16a:	f00f fb77 	bl	2985c <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a16e:	687b      	ldr	r3, [r7, #4]
   1a170:	f3bf 8f5b 	dmb	ish
   1a174:	3334      	adds	r3, #52	; 0x34
   1a176:	e853 2f00 	ldrex	r2, [r3]
   1a17a:	e843 5100 	strex	r1, r5, [r3]
   1a17e:	2900      	cmp	r1, #0
   1a180:	d1f9      	bne.n	1a176 <bt_att_accept+0xba>
   1a182:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   1a186:	687b      	ldr	r3, [r7, #4]
   1a188:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   1a18a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	att_chan_attach(att, chan);
   1a18c:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
   1a190:	b91b      	cbnz	r3, 1a19a <bt_att_accept+0xde>
   1a192:	f104 000c 	add.w	r0, r4, #12
   1a196:	f00f fb61 	bl	2985c <z_impl_k_queue_init>
	return list->head;
   1a19a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	parent->next = child;
   1a19c:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
Z_GENLIST_PREPEND(slist, snode)
   1a1a0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	sys_slist_prepend(&att->chans, &chan->node);
   1a1a2:	f108 0388 	add.w	r3, r8, #136	; 0x88
	list->head = node;
   1a1a6:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   1a1a8:	b902      	cbnz	r2, 1a1ac <bt_att_accept+0xf0>
	list->tail = node;
   1a1aa:	62e3      	str	r3, [r4, #44]	; 0x2c
	return chan;
   1a1ac:	687b      	ldr	r3, [r7, #4]
	if (!chan) {
   1a1ae:	2b00      	cmp	r3, #0
   1a1b0:	d0a1      	beq.n	1a0f6 <bt_att_accept+0x3a>
	*ch = &chan->chan.chan;
   1a1b2:	3304      	adds	r3, #4
   1a1b4:	6033      	str	r3, [r6, #0]
	return 0;
   1a1b6:	e7a0      	b.n	1a0fa <bt_att_accept+0x3e>
   1a1b8:	20000950 	.word	0x20000950
   1a1bc:	0002d02e 	.word	0x0002d02e
   1a1c0:	00029fb8 	.word	0x00029fb8
   1a1c4:	20003578 	.word	0x20003578
   1a1c8:	20000970 	.word	0x20000970
   1a1cc:	0002d053 	.word	0x0002d053
   1a1d0:	2000068c 	.word	0x2000068c

0001a1d4 <bt_att_chan_create_pdu>:
{
   1a1d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   1a1d8:	b086      	sub	sp, #24
   1a1da:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a1dc:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1a1de:	1c53      	adds	r3, r2, #1
   1a1e0:	428b      	cmp	r3, r1
{
   1a1e2:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a1e4:	d915      	bls.n	1a212 <bt_att_chan_create_pdu+0x3e>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   1a1e6:	466c      	mov	r4, sp
   1a1e8:	b088      	sub	sp, #32
   1a1ea:	466a      	mov	r2, sp
   1a1ec:	482d      	ldr	r0, [pc, #180]	; (1a2a4 <bt_att_chan_create_pdu+0xd0>)
   1a1ee:	61d3      	str	r3, [r2, #28]
   1a1f0:	2304      	movs	r3, #4
   1a1f2:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1a1f6:	f842 3f10 	str.w	r3, [r2, #16]!
   1a1fa:	f44f 5102 	mov.w	r1, #8320	; 0x2080
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1a1fe:	482a      	ldr	r0, [pc, #168]	; (1a2a8 <bt_att_chan_create_pdu+0xd4>)
   1a200:	f00e f894 	bl	2832c <z_log_msg_static_create.constprop.0>
   1a204:	46a5      	mov	sp, r4
		return NULL;
   1a206:	2400      	movs	r4, #0
}
   1a208:	4620      	mov	r0, r4
   1a20a:	3718      	adds	r7, #24
   1a20c:	46bd      	mov	sp, r7
   1a20e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   1a212:	4628      	mov	r0, r5
   1a214:	f7ff fc62 	bl	19adc <att_op_get_type>
   1a218:	2802      	cmp	r0, #2
   1a21a:	d019      	beq.n	1a250 <bt_att_chan_create_pdu+0x7c>
   1a21c:	2804      	cmp	r0, #4
   1a21e:	d017      	beq.n	1a250 <bt_att_chan_create_pdu+0x7c>
		timeout = K_FOREVER;
   1a220:	f04f 38ff 	mov.w	r8, #4294967295
   1a224:	f04f 39ff 	mov.w	r9, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1a228:	2100      	movs	r1, #0
   1a22a:	4642      	mov	r2, r8
   1a22c:	464b      	mov	r3, r9
   1a22e:	4608      	mov	r0, r1
   1a230:	f00d ff5d 	bl	280ee <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1a234:	4604      	mov	r4, r0
   1a236:	b980      	cbnz	r0, 1a25a <bt_att_chan_create_pdu+0x86>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   1a238:	466c      	mov	r4, sp
   1a23a:	b088      	sub	sp, #32
   1a23c:	466a      	mov	r2, sp
   1a23e:	4b1b      	ldr	r3, [pc, #108]	; (1a2ac <bt_att_chan_create_pdu+0xd8>)
   1a240:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1a244:	2303      	movs	r3, #3
   1a246:	f842 3f10 	str.w	r3, [r2, #16]!
   1a24a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1a24e:	e7d6      	b.n	1a1fe <bt_att_chan_create_pdu+0x2a>
	switch (att_op_get_type(op)) {
   1a250:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   1a254:	f04f 0900 	mov.w	r9, #0
   1a258:	e7e6      	b.n	1a228 <bt_att_chan_create_pdu+0x54>
	return z_impl_z_current_get();
   1a25a:	f008 fc9d 	bl	22b98 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1a25e:	4b14      	ldr	r3, [pc, #80]	; (1a2b0 <bt_att_chan_create_pdu+0xdc>)
   1a260:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   1a262:	4814      	ldr	r0, [pc, #80]	; (1a2b4 <bt_att_chan_create_pdu+0xe0>)
   1a264:	bf07      	ittee	eq
   1a266:	2200      	moveq	r2, #0
   1a268:	2300      	moveq	r3, #0
   1a26a:	4642      	movne	r2, r8
   1a26c:	464b      	movne	r3, r9
   1a26e:	f006 fda3 	bl	20db8 <z_impl_k_queue_get>
	if (!data) {
   1a272:	b970      	cbnz	r0, 1a292 <bt_att_chan_create_pdu+0xbe>
		LOG_WRN("Unable to allocate ATT TX meta");
   1a274:	4b10      	ldr	r3, [pc, #64]	; (1a2b8 <bt_att_chan_create_pdu+0xe4>)
   1a276:	617b      	str	r3, [r7, #20]
   1a278:	480b      	ldr	r0, [pc, #44]	; (1a2a8 <bt_att_chan_create_pdu+0xd4>)
   1a27a:	2302      	movs	r3, #2
   1a27c:	f107 0210 	add.w	r2, r7, #16
   1a280:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a284:	613b      	str	r3, [r7, #16]
   1a286:	f00e f851 	bl	2832c <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   1a28a:	4620      	mov	r0, r4
   1a28c:	f001 ffac 	bl	1c1e8 <net_buf_unref>
		return NULL;
   1a290:	e7b9      	b.n	1a206 <bt_att_chan_create_pdu+0x32>
	bt_att_tx_meta_data(buf) = data;
   1a292:	61a0      	str	r0, [r4, #24]
   1a294:	2101      	movs	r1, #1
   1a296:	f104 000c 	add.w	r0, r4, #12
   1a29a:	f002 f8e9 	bl	1c470 <net_buf_simple_add>
	hdr->code = op;
   1a29e:	7005      	strb	r5, [r0, #0]
	return buf;
   1a2a0:	e7b2      	b.n	1a208 <bt_att_chan_create_pdu+0x34>
   1a2a2:	bf00      	nop
   1a2a4:	0002d078 	.word	0x0002d078
   1a2a8:	00029fb8 	.word	0x00029fb8
   1a2ac:	0002cd71 	.word	0x0002cd71
   1a2b0:	20002df0 	.word	0x20002df0
   1a2b4:	20000aa8 	.word	0x20000aa8
   1a2b8:	0002d09d 	.word	0x0002d09d

0001a2bc <bt_att_recv>:
{
   1a2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a2c0:	b087      	sub	sp, #28
	if (buf->len < sizeof(*hdr)) {
   1a2c2:	8a0b      	ldrh	r3, [r1, #16]
{
   1a2c4:	af00      	add	r7, sp, #0
   1a2c6:	4682      	mov	sl, r0
   1a2c8:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1a2ca:	b97b      	cbnz	r3, 1a2ec <bt_att_recv+0x30>
		LOG_ERR("Too small ATT PDU received");
   1a2cc:	4b4c      	ldr	r3, [pc, #304]	; (1a400 <bt_att_recv+0x144>)
   1a2ce:	617b      	str	r3, [r7, #20]
   1a2d0:	2302      	movs	r3, #2
   1a2d2:	613b      	str	r3, [r7, #16]
   1a2d4:	f107 0210 	add.w	r2, r7, #16
   1a2d8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			LOG_WRN("Ignoring unexpected request");
   1a2dc:	4849      	ldr	r0, [pc, #292]	; (1a404 <bt_att_recv+0x148>)
   1a2de:	f00e f825 	bl	2832c <z_log_msg_static_create.constprop.0>
}
   1a2e2:	2000      	movs	r0, #0
   1a2e4:	371c      	adds	r7, #28
   1a2e6:	46bd      	mov	sp, r7
   1a2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1a2ec:	2101      	movs	r1, #1
   1a2ee:	f104 000c 	add.w	r0, r4, #12
   1a2f2:	f002 f89f 	bl	1c434 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   1a2f6:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   1a2fa:	4605      	mov	r5, r0
   1a2fc:	2b00      	cmp	r3, #0
   1a2fe:	d0f0      	beq.n	1a2e2 <bt_att_recv+0x26>
		if (hdr->code == handlers[i].op) {
   1a300:	7801      	ldrb	r1, [r0, #0]
   1a302:	f8df 8114 	ldr.w	r8, [pc, #276]	; 1a418 <bt_att_recv+0x15c>
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1a306:	f1aa 0604 	sub.w	r6, sl, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1a30a:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   1a30c:	f818 0033 	ldrb.w	r0, [r8, r3, lsl #3]
   1a310:	4288      	cmp	r0, r1
   1a312:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   1a316:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   1a31a:	d114      	bne.n	1a346 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   1a31c:	f892 9002 	ldrb.w	r9, [r2, #2]
   1a320:	f1b9 0f01 	cmp.w	r9, #1
   1a324:	d131      	bne.n	1a38a <bt_att_recv+0xce>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   1a326:	2100      	movs	r1, #0
   1a328:	f10a 0030 	add.w	r0, sl, #48	; 0x30
   1a32c:	f00e f8f5 	bl	2851a <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   1a330:	2800      	cmp	r0, #0
   1a332:	d035      	beq.n	1a3a0 <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected request");
   1a334:	4b34      	ldr	r3, [pc, #208]	; (1a408 <bt_att_recv+0x14c>)
   1a336:	617b      	str	r3, [r7, #20]
   1a338:	2302      	movs	r3, #2
   1a33a:	613b      	str	r3, [r7, #16]
   1a33c:	f107 0210 	add.w	r2, r7, #16
   1a340:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a344:	e7ca      	b.n	1a2dc <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1a346:	3301      	adds	r3, #1
   1a348:	2b0e      	cmp	r3, #14
   1a34a:	d1df      	bne.n	1a30c <bt_att_recv+0x50>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   1a34c:	466c      	mov	r4, sp
   1a34e:	b088      	sub	sp, #32
   1a350:	466a      	mov	r2, sp
   1a352:	4b2e      	ldr	r3, [pc, #184]	; (1a40c <bt_att_recv+0x150>)
   1a354:	482b      	ldr	r0, [pc, #172]	; (1a404 <bt_att_recv+0x148>)
   1a356:	e9c2 3105 	strd	r3, r1, [r2, #20]
   1a35a:	2303      	movs	r3, #3
   1a35c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1a360:	f842 3f10 	str.w	r3, [r2, #16]!
   1a364:	f00d ffe2 	bl	2832c <z_log_msg_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1a368:	7829      	ldrb	r1, [r5, #0]
   1a36a:	46a5      	mov	sp, r4
   1a36c:	4608      	mov	r0, r1
   1a36e:	f7ff fbb5 	bl	19adc <att_op_get_type>
   1a372:	2800      	cmp	r0, #0
   1a374:	d0b5      	beq.n	1a2e2 <bt_att_recv+0x26>
   1a376:	2805      	cmp	r0, #5
   1a378:	d0b3      	beq.n	1a2e2 <bt_att_recv+0x26>
	if (!req) {
   1a37a:	2900      	cmp	r1, #0
   1a37c:	d0b1      	beq.n	1a2e2 <bt_att_recv+0x26>
   1a37e:	2306      	movs	r3, #6
   1a380:	2200      	movs	r2, #0
   1a382:	4630      	mov	r0, r6
   1a384:	f00e fa1d 	bl	287c2 <send_err_rsp.part.0>
   1a388:	e7ab      	b.n	1a2e2 <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
   1a38a:	f1b9 0f05 	cmp.w	r9, #5
   1a38e:	d107      	bne.n	1a3a0 <bt_att_recv+0xe4>
			   atomic_test_and_set_bit(att_chan->flags,
   1a390:	2101      	movs	r1, #1
   1a392:	f10a 0030 	add.w	r0, sl, #48	; 0x30
   1a396:	f00e f8c0 	bl	2851a <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   1a39a:	b108      	cbz	r0, 1a3a0 <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected indication");
   1a39c:	4b1c      	ldr	r3, [pc, #112]	; (1a410 <bt_att_recv+0x154>)
   1a39e:	e7ca      	b.n	1a336 <bt_att_recv+0x7a>
	if (buf->len < handler->expect_len) {
   1a3a0:	44d8      	add	r8, fp
   1a3a2:	8a23      	ldrh	r3, [r4, #16]
   1a3a4:	f898 2001 	ldrb.w	r2, [r8, #1]
   1a3a8:	429a      	cmp	r2, r3
   1a3aa:	d916      	bls.n	1a3da <bt_att_recv+0x11e>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1a3ac:	46e9      	mov	r9, sp
   1a3ae:	b088      	sub	sp, #32
   1a3b0:	7829      	ldrb	r1, [r5, #0]
   1a3b2:	466a      	mov	r2, sp
   1a3b4:	4817      	ldr	r0, [pc, #92]	; (1a414 <bt_att_recv+0x158>)
   1a3b6:	61d1      	str	r1, [r2, #28]
   1a3b8:	2404      	movs	r4, #4
   1a3ba:	e9c2 0305 	strd	r0, r3, [r2, #20]
   1a3be:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1a3c2:	f842 4f10 	str.w	r4, [r2, #16]!
   1a3c6:	480f      	ldr	r0, [pc, #60]	; (1a404 <bt_att_recv+0x148>)
   1a3c8:	f00d ffb0 	bl	2832c <z_log_msg_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   1a3cc:	f898 3002 	ldrb.w	r3, [r8, #2]
   1a3d0:	2b01      	cmp	r3, #1
   1a3d2:	46cd      	mov	sp, r9
   1a3d4:	d185      	bne.n	1a2e2 <bt_att_recv+0x26>
		err = BT_ATT_ERR_INVALID_PDU;
   1a3d6:	4623      	mov	r3, r4
   1a3d8:	e00c      	b.n	1a3f4 <bt_att_recv+0x138>
		err = handler->func(att_chan, buf);
   1a3da:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1a3de:	4621      	mov	r1, r4
   1a3e0:	4630      	mov	r0, r6
   1a3e2:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   1a3e4:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   1a3e8:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1a3ea:	f47f af7a 	bne.w	1a2e2 <bt_att_recv+0x26>
   1a3ee:	2800      	cmp	r0, #0
   1a3f0:	f43f af77 	beq.w	1a2e2 <bt_att_recv+0x26>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1a3f4:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   1a3f6:	2900      	cmp	r1, #0
   1a3f8:	f43f af73 	beq.w	1a2e2 <bt_att_recv+0x26>
   1a3fc:	e7c0      	b.n	1a380 <bt_att_recv+0xc4>
   1a3fe:	bf00      	nop
   1a400:	0002d0bc 	.word	0x0002d0bc
   1a404:	00029fb8 	.word	0x00029fb8
   1a408:	0002d0f1 	.word	0x0002d0f1
   1a40c:	0002d0d7 	.word	0x0002d0d7
   1a410:	0002d10d 	.word	0x0002d10d
   1a414:	0002d12c 	.word	0x0002d12c
   1a418:	0002a448 	.word	0x0002a448

0001a41c <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1a41c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a41e:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1a420:	6803      	ldr	r3, [r0, #0]
   1a422:	460d      	mov	r5, r1
   1a424:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1a426:	b087      	sub	sp, #28
   1a428:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1a42a:	bf18      	it	ne
   1a42c:	2101      	movne	r1, #1
   1a42e:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   1a430:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1a432:	f00e fc78 	bl	28d26 <bt_gatt_change_aware>
   1a436:	b948      	cbnz	r0, 1a44c <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1a438:	2105      	movs	r1, #5
   1a43a:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1a43e:	f00e f86c 	bl	2851a <atomic_test_and_set_bit>
   1a442:	2800      	cmp	r0, #0
   1a444:	d048      	beq.n	1a4d8 <att_write_rsp.constprop.0+0xbc>
			return 0;
   1a446:	2000      	movs	r0, #0
}
   1a448:	b007      	add	sp, #28
   1a44a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   1a44c:	2e00      	cmp	r6, #0
   1a44e:	d045      	beq.n	1a4dc <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   1a450:	2218      	movs	r2, #24
   1a452:	2100      	movs	r1, #0
   1a454:	4668      	mov	r0, sp
   1a456:	f00d faf4 	bl	27a42 <memset>
	if (rsp) {
   1a45a:	bb67      	cbnz	r7, 1a4b6 <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   1a45c:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1a45e:	4a20      	ldr	r2, [pc, #128]	; (1a4e0 <att_write_rsp.constprop.0+0xc4>)
	data.conn = chan->att->conn;
   1a460:	681b      	ldr	r3, [r3, #0]
   1a462:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   1a464:	2300      	movs	r3, #0
   1a466:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   1a46a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a46c:	9303      	str	r3, [sp, #12]
	data.len = len;
   1a46e:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1a472:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1a476:	2301      	movs	r3, #1
   1a478:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1a47c:	4631      	mov	r1, r6
   1a47e:	466b      	mov	r3, sp
   1a480:	4630      	mov	r0, r6
	data.req = req;
   1a482:	f88d 5008 	strb.w	r5, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1a486:	f00d feb7 	bl	281f8 <bt_gatt_foreach_attr>
	if (data.err) {
   1a48a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1a48e:	b1e3      	cbz	r3, 1a4ca <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   1a490:	2f00      	cmp	r7, #0
   1a492:	d0d8      	beq.n	1a446 <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1a494:	9b01      	ldr	r3, [sp, #4]
   1a496:	6998      	ldr	r0, [r3, #24]
   1a498:	f7ff fb66 	bl	19b68 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1a49c:	9801      	ldr	r0, [sp, #4]
   1a49e:	f001 fea3 	bl	1c1e8 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   1a4a2:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   1a4a6:	2d00      	cmp	r5, #0
   1a4a8:	d0cd      	beq.n	1a446 <att_write_rsp.constprop.0+0x2a>
   1a4aa:	4632      	mov	r2, r6
   1a4ac:	4629      	mov	r1, r5
   1a4ae:	4620      	mov	r0, r4
   1a4b0:	f00e f987 	bl	287c2 <send_err_rsp.part.0>
   1a4b4:	e7c7      	b.n	1a446 <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1a4b6:	2200      	movs	r2, #0
   1a4b8:	4639      	mov	r1, r7
   1a4ba:	4620      	mov	r0, r4
   1a4bc:	f7ff fe8a 	bl	1a1d4 <bt_att_chan_create_pdu>
   1a4c0:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1a4c2:	2800      	cmp	r0, #0
   1a4c4:	d1ca      	bne.n	1a45c <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   1a4c6:	200e      	movs	r0, #14
   1a4c8:	e7be      	b.n	1a448 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   1a4ca:	9901      	ldr	r1, [sp, #4]
   1a4cc:	2900      	cmp	r1, #0
   1a4ce:	d0ba      	beq.n	1a446 <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   1a4d0:	4620      	mov	r0, r4
   1a4d2:	f00d ff5f 	bl	28394 <bt_att_chan_send_rsp>
   1a4d6:	e7b6      	b.n	1a446 <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1a4d8:	2012      	movs	r0, #18
   1a4da:	e7b5      	b.n	1a448 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   1a4dc:	2001      	movs	r0, #1
   1a4de:	e7b3      	b.n	1a448 <att_write_rsp.constprop.0+0x2c>
   1a4e0:	00028197 	.word	0x00028197

0001a4e4 <bt_att_create_pdu>:
{
   1a4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a4e6:	af00      	add	r7, sp, #0
   1a4e8:	460e      	mov	r6, r1
   1a4ea:	4615      	mov	r5, r2
	att = att_get(conn);
   1a4ec:	f7ff fcea 	bl	19ec4 <att_get>
	if (!att) {
   1a4f0:	b1e0      	cbz	r0, 1a52c <bt_att_create_pdu+0x48>
	return list->head;
   1a4f2:	6a83      	ldr	r3, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a4f4:	4618      	mov	r0, r3
   1a4f6:	b11b      	cbz	r3, 1a500 <bt_att_create_pdu+0x1c>
	return node->next;
   1a4f8:	f850 3988 	ldr.w	r3, [r0], #-136
   1a4fc:	b103      	cbz	r3, 1a500 <bt_att_create_pdu+0x1c>
   1a4fe:	3b88      	subs	r3, #136	; 0x88
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a500:	1c6c      	adds	r4, r5, #1
   1a502:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a504:	b118      	cbz	r0, 1a50e <bt_att_create_pdu+0x2a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a506:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1a508:	42a1      	cmp	r1, r4
   1a50a:	d21a      	bcs.n	1a542 <bt_att_create_pdu+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a50c:	b983      	cbnz	r3, 1a530 <bt_att_create_pdu+0x4c>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   1a50e:	466d      	mov	r5, sp
   1a510:	b088      	sub	sp, #32
   1a512:	466a      	mov	r2, sp
   1a514:	4b0f      	ldr	r3, [pc, #60]	; (1a554 <bt_att_create_pdu+0x70>)
   1a516:	4810      	ldr	r0, [pc, #64]	; (1a558 <bt_att_create_pdu+0x74>)
   1a518:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1a51c:	2303      	movs	r3, #3
   1a51e:	f842 3f10 	str.w	r3, [r2, #16]!
   1a522:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1a526:	f00d ff01 	bl	2832c <z_log_msg_static_create.constprop.0>
   1a52a:	46ad      	mov	sp, r5
		return NULL;
   1a52c:	2000      	movs	r0, #0
   1a52e:	e00c      	b.n	1a54a <bt_att_create_pdu+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a530:	4618      	mov	r0, r3
   1a532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   1a536:	b153      	cbz	r3, 1a54e <bt_att_create_pdu+0x6a>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a538:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   1a53a:	428a      	cmp	r2, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a53c:	f1a3 0388 	sub.w	r3, r3, #136	; 0x88
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a540:	d8f6      	bhi.n	1a530 <bt_att_create_pdu+0x4c>
		return bt_att_chan_create_pdu(chan, op, len);
   1a542:	462a      	mov	r2, r5
   1a544:	4631      	mov	r1, r6
   1a546:	f7ff fe45 	bl	1a1d4 <bt_att_chan_create_pdu>
}
   1a54a:	46bd      	mov	sp, r7
   1a54c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1a54e:	4614      	mov	r4, r2
   1a550:	e7d9      	b.n	1a506 <bt_att_create_pdu+0x22>
   1a552:	bf00      	nop
   1a554:	0002d14b 	.word	0x0002d14b
   1a558:	00029fb8 	.word	0x00029fb8

0001a55c <att_read_group_req>:
{
   1a55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1a560:	8a0e      	ldrh	r6, [r1, #16]
   1a562:	3e04      	subs	r6, #4
   1a564:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   1a566:	2e02      	cmp	r6, #2
{
   1a568:	4604      	mov	r4, r0
   1a56a:	b08c      	sub	sp, #48	; 0x30
   1a56c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1a56e:	d001      	beq.n	1a574 <att_read_group_req+0x18>
   1a570:	2e10      	cmp	r6, #16
   1a572:	d16a      	bne.n	1a64a <att_read_group_req+0xee>
   1a574:	2104      	movs	r1, #4
   1a576:	300c      	adds	r0, #12
   1a578:	f001 ff5c 	bl	1c434 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1a57c:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   1a580:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1a582:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1a584:	1d01      	adds	r1, r0, #4
   1a586:	4632      	mov	r2, r6
   1a588:	4640      	mov	r0, r8
   1a58a:	f00d fab3 	bl	27af4 <bt_uuid_create>
   1a58e:	2800      	cmp	r0, #0
   1a590:	d05d      	beq.n	1a64e <att_read_group_req+0xf2>
	if (!start || !end) {
   1a592:	2d00      	cmp	r5, #0
   1a594:	d03a      	beq.n	1a60c <att_read_group_req+0xb0>
   1a596:	2600      	movs	r6, #0
   1a598:	2f00      	cmp	r7, #0
   1a59a:	d036      	beq.n	1a60a <att_read_group_req+0xae>
	if (start > end) {
   1a59c:	42bd      	cmp	r5, r7
   1a59e:	d835      	bhi.n	1a60c <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1a5a0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1a5a4:	a901      	add	r1, sp, #4
   1a5a6:	4640      	mov	r0, r8
   1a5a8:	f88d 6004 	strb.w	r6, [sp, #4]
   1a5ac:	f8ad 3006 	strh.w	r3, [sp, #6]
   1a5b0:	f00d fa72 	bl	27a98 <bt_uuid_cmp>
   1a5b4:	bb70      	cbnz	r0, 1a614 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   1a5b6:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   1a5b8:	2214      	movs	r2, #20
   1a5ba:	2100      	movs	r1, #0
   1a5bc:	a807      	add	r0, sp, #28
   1a5be:	f00d fa40 	bl	27a42 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1a5c2:	2201      	movs	r2, #1
   1a5c4:	2111      	movs	r1, #17
   1a5c6:	4630      	mov	r0, r6
   1a5c8:	f7ff ff8c 	bl	1a4e4 <bt_att_create_pdu>
   1a5cc:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   1a5ce:	2800      	cmp	r0, #0
   1a5d0:	d03d      	beq.n	1a64e <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   1a5d2:	2101      	movs	r1, #1
   1a5d4:	300c      	adds	r0, #12
	data.uuid = uuid;
   1a5d6:	e9cd 4807 	strd	r4, r8, [sp, #28]
   1a5da:	f001 ff49 	bl	1c470 <net_buf_simple_add>
	data.rsp->len = 0U;
   1a5de:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1a5e0:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1a5e2:	4a1c      	ldr	r2, [pc, #112]	; (1a654 <att_read_group_req+0xf8>)
	data.rsp->len = 0U;
   1a5e4:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1a5e6:	4639      	mov	r1, r7
	data.group = NULL;
   1a5e8:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1a5ea:	4628      	mov	r0, r5
   1a5ec:	ab07      	add	r3, sp, #28
   1a5ee:	f00d fe03 	bl	281f8 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1a5f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a5f4:	781b      	ldrb	r3, [r3, #0]
   1a5f6:	bb1b      	cbnz	r3, 1a640 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1a5f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a5fa:	6998      	ldr	r0, [r3, #24]
   1a5fc:	f7ff fab4 	bl	19b68 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1a600:	9809      	ldr	r0, [sp, #36]	; 0x24
   1a602:	f001 fdf1 	bl	1c1e8 <net_buf_unref>
	if (!req) {
   1a606:	230a      	movs	r3, #10
   1a608:	e001      	b.n	1a60e <att_read_group_req+0xb2>
			*err = 0U;
   1a60a:	463d      	mov	r5, r7
	if (!req) {
   1a60c:	2301      	movs	r3, #1
   1a60e:	462a      	mov	r2, r5
   1a610:	2110      	movs	r1, #16
   1a612:	e00e      	b.n	1a632 <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   1a614:	f642 0301 	movw	r3, #10241	; 0x2801
   1a618:	a907      	add	r1, sp, #28
   1a61a:	4640      	mov	r0, r8
   1a61c:	f88d 601c 	strb.w	r6, [sp, #28]
   1a620:	f8ad 301e 	strh.w	r3, [sp, #30]
   1a624:	f00d fa38 	bl	27a98 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1a628:	2800      	cmp	r0, #0
   1a62a:	d0c4      	beq.n	1a5b6 <att_read_group_req+0x5a>
	if (!req) {
   1a62c:	2310      	movs	r3, #16
   1a62e:	462a      	mov	r2, r5
   1a630:	4619      	mov	r1, r3
   1a632:	4620      	mov	r0, r4
   1a634:	f00e f8c5 	bl	287c2 <send_err_rsp.part.0>
		return 0;
   1a638:	2000      	movs	r0, #0
}
   1a63a:	b00c      	add	sp, #48	; 0x30
   1a63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   1a640:	9909      	ldr	r1, [sp, #36]	; 0x24
   1a642:	4620      	mov	r0, r4
   1a644:	f00d fea6 	bl	28394 <bt_att_chan_send_rsp>
	return 0;
   1a648:	e7f6      	b.n	1a638 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   1a64a:	2004      	movs	r0, #4
   1a64c:	e7f5      	b.n	1a63a <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   1a64e:	200e      	movs	r0, #14
   1a650:	e7f3      	b.n	1a63a <att_read_group_req+0xde>
   1a652:	bf00      	nop
   1a654:	00019f71 	.word	0x00019f71

0001a658 <att_read_mult_vl_req>:
{
   1a658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1a65c:	6846      	ldr	r6, [r0, #4]
{
   1a65e:	b085      	sub	sp, #20
   1a660:	4604      	mov	r4, r0
   1a662:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1a664:	4630      	mov	r0, r6
   1a666:	2101      	movs	r1, #1
   1a668:	f00e fb5d 	bl	28d26 <bt_gatt_change_aware>
   1a66c:	b950      	cbnz	r0, 1a684 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1a66e:	2105      	movs	r1, #5
   1a670:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1a674:	f00d ff51 	bl	2851a <atomic_test_and_set_bit>
   1a678:	2800      	cmp	r0, #0
   1a67a:	d13b      	bne.n	1a6f4 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1a67c:	2012      	movs	r0, #18
}
   1a67e:	b005      	add	sp, #20
   1a680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1a684:	2210      	movs	r2, #16
   1a686:	2100      	movs	r1, #0
   1a688:	4668      	mov	r0, sp
   1a68a:	f00d f9da 	bl	27a42 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   1a68e:	2200      	movs	r2, #0
   1a690:	2121      	movs	r1, #33	; 0x21
   1a692:	4630      	mov	r0, r6
   1a694:	f7ff ff26 	bl	1a4e4 <bt_att_create_pdu>
   1a698:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1a69a:	b368      	cbz	r0, 1a6f8 <att_read_mult_vl_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1a69c:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1a6fc <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   1a6a0:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   1a6a2:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1a6a6:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   1a6aa:	8a2b      	ldrh	r3, [r5, #16]
   1a6ac:	2b01      	cmp	r3, #1
   1a6ae:	d804      	bhi.n	1a6ba <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   1a6b0:	9902      	ldr	r1, [sp, #8]
   1a6b2:	4620      	mov	r0, r4
   1a6b4:	f00d fe6e 	bl	28394 <bt_att_chan_send_rsp>
	return 0;
   1a6b8:	e01c      	b.n	1a6f4 <att_read_mult_vl_req+0x9c>
   1a6ba:	4638      	mov	r0, r7
   1a6bc:	f00e fbab 	bl	28e16 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1a6c0:	466b      	mov	r3, sp
   1a6c2:	464a      	mov	r2, r9
   1a6c4:	4601      	mov	r1, r0
   1a6c6:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1a6c8:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1a6cc:	f00d fd94 	bl	281f8 <bt_gatt_foreach_attr>
		if (data.err) {
   1a6d0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1a6d4:	2b00      	cmp	r3, #0
   1a6d6:	d0e8      	beq.n	1a6aa <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1a6d8:	9b02      	ldr	r3, [sp, #8]
   1a6da:	6998      	ldr	r0, [r3, #24]
   1a6dc:	f7ff fa44 	bl	19b68 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1a6e0:	9802      	ldr	r0, [sp, #8]
   1a6e2:	f001 fd81 	bl	1c1e8 <net_buf_unref>
	if (!req) {
   1a6e6:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1a6ea:	4632      	mov	r2, r6
   1a6ec:	2120      	movs	r1, #32
   1a6ee:	4620      	mov	r0, r4
   1a6f0:	f00e f867 	bl	287c2 <send_err_rsp.part.0>
			return 0;
   1a6f4:	2000      	movs	r0, #0
   1a6f6:	e7c2      	b.n	1a67e <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   1a6f8:	200e      	movs	r0, #14
   1a6fa:	e7c0      	b.n	1a67e <att_read_mult_vl_req+0x26>
   1a6fc:	0002858b 	.word	0x0002858b

0001a700 <att_read_mult_req>:
{
   1a700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1a704:	6846      	ldr	r6, [r0, #4]
{
   1a706:	b085      	sub	sp, #20
   1a708:	4604      	mov	r4, r0
   1a70a:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1a70c:	4630      	mov	r0, r6
   1a70e:	2101      	movs	r1, #1
   1a710:	f00e fb09 	bl	28d26 <bt_gatt_change_aware>
   1a714:	b950      	cbnz	r0, 1a72c <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1a716:	2105      	movs	r1, #5
   1a718:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1a71c:	f00d fefd 	bl	2851a <atomic_test_and_set_bit>
   1a720:	2800      	cmp	r0, #0
   1a722:	d13b      	bne.n	1a79c <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1a724:	2012      	movs	r0, #18
}
   1a726:	b005      	add	sp, #20
   1a728:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1a72c:	2210      	movs	r2, #16
   1a72e:	2100      	movs	r1, #0
   1a730:	4668      	mov	r0, sp
   1a732:	f00d f986 	bl	27a42 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1a736:	2200      	movs	r2, #0
   1a738:	210f      	movs	r1, #15
   1a73a:	4630      	mov	r0, r6
   1a73c:	f7ff fed2 	bl	1a4e4 <bt_att_create_pdu>
   1a740:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1a742:	b368      	cbz	r0, 1a7a0 <att_read_mult_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1a744:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1a7a4 <att_read_mult_req+0xa4>
	data.chan = chan;
   1a748:	9400      	str	r4, [sp, #0]
   1a74a:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1a74e:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   1a752:	8a2b      	ldrh	r3, [r5, #16]
   1a754:	2b01      	cmp	r3, #1
   1a756:	d804      	bhi.n	1a762 <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   1a758:	9902      	ldr	r1, [sp, #8]
   1a75a:	4620      	mov	r0, r4
   1a75c:	f00d fe1a 	bl	28394 <bt_att_chan_send_rsp>
	return 0;
   1a760:	e01c      	b.n	1a79c <att_read_mult_req+0x9c>
   1a762:	4638      	mov	r0, r7
   1a764:	f00e fb57 	bl	28e16 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1a768:	466b      	mov	r3, sp
   1a76a:	464a      	mov	r2, r9
   1a76c:	4601      	mov	r1, r0
   1a76e:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1a770:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1a774:	f00d fd40 	bl	281f8 <bt_gatt_foreach_attr>
		if (data.err) {
   1a778:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1a77c:	2b00      	cmp	r3, #0
   1a77e:	d0e8      	beq.n	1a752 <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1a780:	9b02      	ldr	r3, [sp, #8]
   1a782:	6998      	ldr	r0, [r3, #24]
   1a784:	f7ff f9f0 	bl	19b68 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1a788:	9802      	ldr	r0, [sp, #8]
   1a78a:	f001 fd2d 	bl	1c1e8 <net_buf_unref>
	if (!req) {
   1a78e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1a792:	4632      	mov	r2, r6
   1a794:	210e      	movs	r1, #14
   1a796:	4620      	mov	r0, r4
   1a798:	f00e f813 	bl	287c2 <send_err_rsp.part.0>
			return 0;
   1a79c:	2000      	movs	r0, #0
   1a79e:	e7c2      	b.n	1a726 <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   1a7a0:	200e      	movs	r0, #14
   1a7a2:	e7c0      	b.n	1a726 <att_read_mult_req+0x26>
   1a7a4:	00028545 	.word	0x00028545

0001a7a8 <att_read_rsp>:
{
   1a7a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1a7ac:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   1a7b0:	4604      	mov	r4, r0
   1a7b2:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1a7b4:	4640      	mov	r0, r8
   1a7b6:	2101      	movs	r1, #1
{
   1a7b8:	4617      	mov	r7, r2
   1a7ba:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   1a7bc:	f00e fab3 	bl	28d26 <bt_gatt_change_aware>
   1a7c0:	b948      	cbnz	r0, 1a7d6 <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1a7c2:	2105      	movs	r1, #5
   1a7c4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1a7c8:	f00d fea7 	bl	2851a <atomic_test_and_set_bit>
   1a7cc:	bb78      	cbnz	r0, 1a82e <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1a7ce:	2012      	movs	r0, #18
}
   1a7d0:	b004      	add	sp, #16
   1a7d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   1a7d6:	b38d      	cbz	r5, 1a83c <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   1a7d8:	2210      	movs	r2, #16
   1a7da:	2100      	movs	r1, #0
   1a7dc:	4668      	mov	r0, sp
   1a7de:	f00d f930 	bl	27a42 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1a7e2:	2200      	movs	r2, #0
   1a7e4:	4639      	mov	r1, r7
   1a7e6:	4640      	mov	r0, r8
   1a7e8:	f7ff fe7c 	bl	1a4e4 <bt_att_create_pdu>
   1a7ec:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1a7ee:	b338      	cbz	r0, 1a840 <att_read_rsp+0x98>
	data.offset = offset;
   1a7f0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1a7f4:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1a7f8:	2301      	movs	r3, #1
   1a7fa:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1a7fe:	4a11      	ldr	r2, [pc, #68]	; (1a844 <att_read_rsp+0x9c>)
	data.chan = chan;
   1a800:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1a802:	466b      	mov	r3, sp
   1a804:	4629      	mov	r1, r5
   1a806:	4628      	mov	r0, r5
   1a808:	f00d fcf6 	bl	281f8 <bt_gatt_foreach_attr>
	if (data.err) {
   1a80c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1a810:	b17b      	cbz	r3, 1a832 <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1a812:	9b02      	ldr	r3, [sp, #8]
   1a814:	6998      	ldr	r0, [r3, #24]
   1a816:	f7ff f9a7 	bl	19b68 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1a81a:	9802      	ldr	r0, [sp, #8]
   1a81c:	f001 fce4 	bl	1c1e8 <net_buf_unref>
	if (!req) {
   1a820:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1a824:	462a      	mov	r2, r5
   1a826:	4631      	mov	r1, r6
   1a828:	4620      	mov	r0, r4
   1a82a:	f00d ffca 	bl	287c2 <send_err_rsp.part.0>
			return 0;
   1a82e:	2000      	movs	r0, #0
   1a830:	e7ce      	b.n	1a7d0 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   1a832:	9902      	ldr	r1, [sp, #8]
   1a834:	4620      	mov	r0, r4
   1a836:	f00d fdad 	bl	28394 <bt_att_chan_send_rsp>
	return 0;
   1a83a:	e7f8      	b.n	1a82e <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   1a83c:	2001      	movs	r0, #1
   1a83e:	e7c7      	b.n	1a7d0 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   1a840:	200e      	movs	r0, #14
   1a842:	e7c5      	b.n	1a7d0 <att_read_rsp+0x28>
   1a844:	00028545 	.word	0x00028545

0001a848 <att_read_type_req>:
{
   1a848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1a84c:	8a0d      	ldrh	r5, [r1, #16]
   1a84e:	3d04      	subs	r5, #4
   1a850:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   1a852:	2d02      	cmp	r5, #2
{
   1a854:	4604      	mov	r4, r0
   1a856:	b08c      	sub	sp, #48	; 0x30
   1a858:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1a85a:	d001      	beq.n	1a860 <att_read_type_req+0x18>
   1a85c:	2d10      	cmp	r5, #16
   1a85e:	d150      	bne.n	1a902 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   1a860:	2104      	movs	r1, #4
   1a862:	300c      	adds	r0, #12
   1a864:	f001 fde6 	bl	1c434 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1a868:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   1a86c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1a86e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1a870:	1d01      	adds	r1, r0, #4
   1a872:	462a      	mov	r2, r5
   1a874:	4640      	mov	r0, r8
   1a876:	f00d f93d 	bl	27af4 <bt_uuid_create>
   1a87a:	b188      	cbz	r0, 1a8a0 <att_read_type_req+0x58>
	if (!start || !end) {
   1a87c:	b19e      	cbz	r6, 1a8a6 <att_read_type_req+0x5e>
   1a87e:	b18f      	cbz	r7, 1a8a4 <att_read_type_req+0x5c>
	if (start > end) {
   1a880:	42b7      	cmp	r7, r6
   1a882:	d310      	bcc.n	1a8a6 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   1a884:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   1a886:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   1a888:	2100      	movs	r1, #0
   1a88a:	eb0d 0002 	add.w	r0, sp, r2
   1a88e:	f00d f8d8 	bl	27a42 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1a892:	2201      	movs	r2, #1
   1a894:	2109      	movs	r1, #9
   1a896:	4628      	mov	r0, r5
   1a898:	f7ff fe24 	bl	1a4e4 <bt_att_create_pdu>
   1a89c:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   1a89e:	b960      	cbnz	r0, 1a8ba <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   1a8a0:	200e      	movs	r0, #14
   1a8a2:	e007      	b.n	1a8b4 <att_read_type_req+0x6c>
			*err = 0U;
   1a8a4:	463e      	mov	r6, r7
	if (!req) {
   1a8a6:	2301      	movs	r3, #1
   1a8a8:	4632      	mov	r2, r6
   1a8aa:	2108      	movs	r1, #8
   1a8ac:	4620      	mov	r0, r4
   1a8ae:	f00d ff88 	bl	287c2 <send_err_rsp.part.0>
		return 0;
   1a8b2:	2000      	movs	r0, #0
}
   1a8b4:	b00c      	add	sp, #48	; 0x30
   1a8b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   1a8ba:	2101      	movs	r1, #1
   1a8bc:	300c      	adds	r0, #12
	data.uuid = uuid;
   1a8be:	e9cd 4806 	strd	r4, r8, [sp, #24]
   1a8c2:	f001 fdd5 	bl	1c470 <net_buf_simple_add>
	data.rsp->len = 0U;
   1a8c6:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1a8c8:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   1a8ca:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1a8cc:	230a      	movs	r3, #10
   1a8ce:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1a8d2:	4a0d      	ldr	r2, [pc, #52]	; (1a908 <att_read_type_req+0xc0>)
   1a8d4:	ab06      	add	r3, sp, #24
   1a8d6:	4639      	mov	r1, r7
   1a8d8:	4630      	mov	r0, r6
   1a8da:	f00d fc8d 	bl	281f8 <bt_gatt_foreach_attr>
	if (data.err) {
   1a8de:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1a8e2:	b14b      	cbz	r3, 1a8f8 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1a8e4:	9b08      	ldr	r3, [sp, #32]
   1a8e6:	6998      	ldr	r0, [r3, #24]
   1a8e8:	f7ff f93e 	bl	19b68 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1a8ec:	9808      	ldr	r0, [sp, #32]
   1a8ee:	f001 fc7b 	bl	1c1e8 <net_buf_unref>
	if (!req) {
   1a8f2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1a8f6:	e7d7      	b.n	1a8a8 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   1a8f8:	9908      	ldr	r1, [sp, #32]
   1a8fa:	4620      	mov	r0, r4
   1a8fc:	f00d fd4a 	bl	28394 <bt_att_chan_send_rsp>
	return 0;
   1a900:	e7d7      	b.n	1a8b2 <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   1a902:	2004      	movs	r0, #4
   1a904:	e7d6      	b.n	1a8b4 <att_read_type_req+0x6c>
   1a906:	bf00      	nop
   1a908:	0001a01d 	.word	0x0001a01d

0001a90c <att_find_type_req>:
{
   1a90c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a910:	460f      	mov	r7, r1
   1a912:	b086      	sub	sp, #24
   1a914:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1a916:	2106      	movs	r1, #6
   1a918:	f107 000c 	add.w	r0, r7, #12
   1a91c:	f001 fd8a 	bl	1c434 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1a920:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1a922:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   1a926:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   1a928:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   1a92c:	b1c5      	cbz	r5, 1a960 <att_find_type_req+0x54>
   1a92e:	2300      	movs	r3, #0
   1a930:	f1b8 0f00 	cmp.w	r8, #0
   1a934:	d013      	beq.n	1a95e <att_find_type_req+0x52>
	if (start > end) {
   1a936:	4545      	cmp	r5, r8
   1a938:	d812      	bhi.n	1a960 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1a93a:	f88d 3000 	strb.w	r3, [sp]
   1a93e:	f88d 3004 	strb.w	r3, [sp, #4]
   1a942:	a901      	add	r1, sp, #4
   1a944:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1a948:	4668      	mov	r0, sp
   1a94a:	f8ad 2002 	strh.w	r2, [sp, #2]
   1a94e:	f8ad 3006 	strh.w	r3, [sp, #6]
   1a952:	f00d f8a1 	bl	27a98 <bt_uuid_cmp>
   1a956:	4606      	mov	r6, r0
   1a958:	b160      	cbz	r0, 1a974 <att_find_type_req+0x68>
	if (!req) {
   1a95a:	230a      	movs	r3, #10
   1a95c:	e001      	b.n	1a962 <att_find_type_req+0x56>
			*err = 0U;
   1a95e:	4645      	mov	r5, r8
	if (!req) {
   1a960:	2301      	movs	r3, #1
   1a962:	462a      	mov	r2, r5
   1a964:	2106      	movs	r1, #6
   1a966:	4620      	mov	r0, r4
   1a968:	f00d ff2b 	bl	287c2 <send_err_rsp.part.0>
		return 0;
   1a96c:	2000      	movs	r0, #0
}
   1a96e:	b006      	add	sp, #24
   1a970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   1a974:	f8d4 a004 	ldr.w	sl, [r4, #4]
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1a978:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   1a97a:	4601      	mov	r1, r0
   1a97c:	2214      	movs	r2, #20
   1a97e:	a801      	add	r0, sp, #4
   1a980:	f00d f85f 	bl	27a42 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1a984:	4632      	mov	r2, r6
   1a986:	2107      	movs	r1, #7
   1a988:	4650      	mov	r0, sl
   1a98a:	f7ff fdab 	bl	1a4e4 <bt_att_create_pdu>
   1a98e:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1a990:	b1f8      	cbz	r0, 1a9d2 <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1a992:	230a      	movs	r3, #10
   1a994:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1a998:	4a0f      	ldr	r2, [pc, #60]	; (1a9d8 <att_find_type_req+0xcc>)
	data.chan = chan;
   1a99a:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1a99c:	ab01      	add	r3, sp, #4
   1a99e:	4641      	mov	r1, r8
   1a9a0:	4628      	mov	r0, r5
	data.value = value;
   1a9a2:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.value_len = value_len;
   1a9a6:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1a9aa:	f00d fc25 	bl	281f8 <bt_gatt_foreach_attr>
	if (data.err) {
   1a9ae:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1a9b2:	b14b      	cbz	r3, 1a9c8 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1a9b4:	9b02      	ldr	r3, [sp, #8]
   1a9b6:	6998      	ldr	r0, [r3, #24]
   1a9b8:	f7ff f8d6 	bl	19b68 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1a9bc:	9802      	ldr	r0, [sp, #8]
   1a9be:	f001 fc13 	bl	1c1e8 <net_buf_unref>
	if (!req) {
   1a9c2:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1a9c6:	e7cc      	b.n	1a962 <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   1a9c8:	9902      	ldr	r1, [sp, #8]
   1a9ca:	4620      	mov	r0, r4
   1a9cc:	f00d fce2 	bl	28394 <bt_att_chan_send_rsp>
	return 0;
   1a9d0:	e7cc      	b.n	1a96c <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   1a9d2:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1a9d4:	e7cb      	b.n	1a96e <att_find_type_req+0x62>
   1a9d6:	bf00      	nop
   1a9d8:	00019ba9 	.word	0x00019ba9

0001a9dc <att_find_info_req>:
{
   1a9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1a9de:	68cb      	ldr	r3, [r1, #12]
	start_handle = sys_le16_to_cpu(req->start_handle);
   1a9e0:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1a9e2:	885e      	ldrh	r6, [r3, #2]
{
   1a9e4:	b085      	sub	sp, #20
   1a9e6:	4604      	mov	r4, r0
	if (!start || !end) {
   1a9e8:	b195      	cbz	r5, 1aa10 <att_find_info_req+0x34>
   1a9ea:	b186      	cbz	r6, 1aa0e <att_find_info_req+0x32>
	if (start > end) {
   1a9ec:	42b5      	cmp	r5, r6
   1a9ee:	d80f      	bhi.n	1aa10 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   1a9f0:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1a9f2:	2210      	movs	r2, #16
   1a9f4:	2100      	movs	r1, #0
   1a9f6:	4668      	mov	r0, sp
   1a9f8:	f00d f823 	bl	27a42 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1a9fc:	2200      	movs	r2, #0
   1a9fe:	2105      	movs	r1, #5
   1aa00:	4638      	mov	r0, r7
   1aa02:	f7ff fd6f 	bl	1a4e4 <bt_att_create_pdu>
   1aa06:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   1aa08:	b958      	cbnz	r0, 1aa22 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   1aa0a:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   1aa0c:	e007      	b.n	1aa1e <att_find_info_req+0x42>
			*err = 0U;
   1aa0e:	4635      	mov	r5, r6
	if (!req) {
   1aa10:	2301      	movs	r3, #1
   1aa12:	462a      	mov	r2, r5
   1aa14:	2104      	movs	r1, #4
   1aa16:	4620      	mov	r0, r4
   1aa18:	f00d fed3 	bl	287c2 <send_err_rsp.part.0>
		return 0;
   1aa1c:	2000      	movs	r0, #0
}
   1aa1e:	b005      	add	sp, #20
   1aa20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1aa22:	466b      	mov	r3, sp
   1aa24:	4a0a      	ldr	r2, [pc, #40]	; (1aa50 <att_find_info_req+0x74>)
	data.chan = chan;
   1aa26:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1aa28:	4631      	mov	r1, r6
   1aa2a:	4628      	mov	r0, r5
   1aa2c:	f00d fbe4 	bl	281f8 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1aa30:	9b02      	ldr	r3, [sp, #8]
   1aa32:	b943      	cbnz	r3, 1aa46 <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1aa34:	9b01      	ldr	r3, [sp, #4]
   1aa36:	6998      	ldr	r0, [r3, #24]
   1aa38:	f7ff f896 	bl	19b68 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1aa3c:	9801      	ldr	r0, [sp, #4]
   1aa3e:	f001 fbd3 	bl	1c1e8 <net_buf_unref>
	if (!req) {
   1aa42:	230a      	movs	r3, #10
   1aa44:	e7e5      	b.n	1aa12 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   1aa46:	9901      	ldr	r1, [sp, #4]
   1aa48:	4620      	mov	r0, r4
   1aa4a:	f00d fca3 	bl	28394 <bt_att_chan_send_rsp>
	return 0;
   1aa4e:	e7e5      	b.n	1aa1c <att_find_info_req+0x40>
   1aa50:	0002820f 	.word	0x0002820f

0001aa54 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   1aa54:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   1aa56:	4c0b      	ldr	r4, [pc, #44]	; (1aa84 <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   1aa58:	4d0b      	ldr	r5, [pc, #44]	; (1aa88 <bt_att_init+0x34>)
   1aa5a:	4620      	mov	r0, r4
   1aa5c:	f00e fefe 	bl	2985c <z_impl_k_queue_init>
   1aa60:	4629      	mov	r1, r5
   1aa62:	4620      	mov	r0, r4
   1aa64:	f00e ff07 	bl	29876 <k_queue_append>
   1aa68:	f105 0114 	add.w	r1, r5, #20
   1aa6c:	4620      	mov	r0, r4
   1aa6e:	f00e ff02 	bl	29876 <k_queue_append>
   1aa72:	f105 0128 	add.w	r1, r5, #40	; 0x28
   1aa76:	4620      	mov	r0, r4
   1aa78:	f00e fefd 	bl	29876 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   1aa7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   1aa80:	f000 bbb6 	b.w	1b1f0 <bt_gatt_init>
   1aa84:	20000aa8 	.word	0x20000aa8
   1aa88:	2000353c 	.word	0x2000353c

0001aa8c <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1aa8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   1aa8e:	2300      	movs	r3, #0
{
   1aa90:	4605      	mov	r5, r0
   1aa92:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   1aa94:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   1aa96:	f008 f87f 	bl	22b98 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   1aa9a:	4b0b      	ldr	r3, [pc, #44]	; (1aac8 <bt_att_req_alloc+0x3c>)
   1aa9c:	681b      	ldr	r3, [r3, #0]
   1aa9e:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   1aaa0:	bf04      	itt	eq
   1aaa2:	2500      	moveq	r5, #0
   1aaa4:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1aaa6:	a901      	add	r1, sp, #4
   1aaa8:	4808      	ldr	r0, [pc, #32]	; (1aacc <bt_att_req_alloc+0x40>)
   1aaaa:	462a      	mov	r2, r5
   1aaac:	4623      	mov	r3, r4
   1aaae:	f005 fd45 	bl	2053c <k_mem_slab_alloc>
   1aab2:	4601      	mov	r1, r0
   1aab4:	b930      	cbnz	r0, 1aac4 <bt_att_req_alloc+0x38>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1aab6:	9801      	ldr	r0, [sp, #4]
   1aab8:	2210      	movs	r2, #16
   1aaba:	f00c ffc2 	bl	27a42 <memset>

	return req;
   1aabe:	9801      	ldr	r0, [sp, #4]
}
   1aac0:	b003      	add	sp, #12
   1aac2:	bd30      	pop	{r4, r5, pc}
		return NULL;
   1aac4:	2000      	movs	r0, #0
   1aac6:	e7fb      	b.n	1aac0 <bt_att_req_alloc+0x34>
   1aac8:	20003578 	.word	0x20003578
   1aacc:	20000990 	.word	0x20000990

0001aad0 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1aad0:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   1aad2:	6883      	ldr	r3, [r0, #8]
{
   1aad4:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   1aad6:	b14b      	cbz	r3, 1aaec <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   1aad8:	6998      	ldr	r0, [r3, #24]
   1aada:	f7ff f845 	bl	19b68 <tx_meta_data_free>
		net_buf_unref(req->buf);
   1aade:	9b01      	ldr	r3, [sp, #4]
   1aae0:	6898      	ldr	r0, [r3, #8]
   1aae2:	f001 fb81 	bl	1c1e8 <net_buf_unref>
		req->buf = NULL;
   1aae6:	9b01      	ldr	r3, [sp, #4]
   1aae8:	2200      	movs	r2, #0
   1aaea:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1aaec:	4803      	ldr	r0, [pc, #12]	; (1aafc <bt_att_req_free+0x2c>)
   1aaee:	a901      	add	r1, sp, #4
   1aaf0:	f005 fd8e 	bl	20610 <k_mem_slab_free>
}
   1aaf4:	b003      	add	sp, #12
   1aaf6:	f85d fb04 	ldr.w	pc, [sp], #4
   1aafa:	bf00      	nop
   1aafc:	20000990 	.word	0x20000990

0001ab00 <att_handle_rsp>:
{
   1ab00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ab04:	4604      	mov	r4, r0
   1ab06:	b088      	sub	sp, #32
	k_work_cancel_delayable(&chan->timeout_work);
   1ab08:	3058      	adds	r0, #88	; 0x58
{
   1ab0a:	460e      	mov	r6, r1
   1ab0c:	4617      	mov	r7, r2
   1ab0e:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1ab10:	f006 fed4 	bl	218bc <k_work_cancel_delayable>
	if (!chan->req) {
   1ab14:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1ab16:	b980      	cbnz	r0, 1ab3a <att_handle_rsp+0x3a>
		LOG_WRN("No pending ATT request");
   1ab18:	4b19      	ldr	r3, [pc, #100]	; (1ab80 <att_handle_rsp+0x80>)
   1ab1a:	9307      	str	r3, [sp, #28]
   1ab1c:	4819      	ldr	r0, [pc, #100]	; (1ab84 <att_handle_rsp+0x84>)
   1ab1e:	2302      	movs	r3, #2
   1ab20:	aa06      	add	r2, sp, #24
   1ab22:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1ab26:	9306      	str	r3, [sp, #24]
   1ab28:	f00d fc00 	bl	2832c <z_log_msg_static_create.constprop.0>
	att_req_send_process(chan->att);
   1ab2c:	6820      	ldr	r0, [r4, #0]
   1ab2e:	f00d fd8d 	bl	2864c <att_req_send_process>
}
   1ab32:	2000      	movs	r0, #0
   1ab34:	b008      	add	sp, #32
   1ab36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   1ab3a:	4b13      	ldr	r3, [pc, #76]	; (1ab88 <att_handle_rsp+0x88>)
   1ab3c:	4298      	cmp	r0, r3
   1ab3e:	f04f 0800 	mov.w	r8, #0
   1ab42:	d102      	bne.n	1ab4a <att_handle_rsp+0x4a>
		chan->req = NULL;
   1ab44:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
   1ab48:	e7f0      	b.n	1ab2c <att_handle_rsp+0x2c>
	func = chan->req->func;
   1ab4a:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   1ab4e:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   1ab52:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1ab54:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
   1ab58:	f7ff ffba 	bl	1aad0 <bt_att_req_free>
	att_req_send_process(chan->att);
   1ab5c:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   1ab5e:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
	att_req_send_process(chan->att);
   1ab62:	f00d fd73 	bl	2864c <att_req_send_process>
	if (func) {
   1ab66:	f1b9 0f00 	cmp.w	r9, #0
   1ab6a:	d0e2      	beq.n	1ab32 <att_handle_rsp+0x32>
		func(chan->att->conn, err, pdu, len, params);
   1ab6c:	6820      	ldr	r0, [r4, #0]
   1ab6e:	f8cd a000 	str.w	sl, [sp]
   1ab72:	6800      	ldr	r0, [r0, #0]
   1ab74:	463b      	mov	r3, r7
   1ab76:	4632      	mov	r2, r6
   1ab78:	4629      	mov	r1, r5
   1ab7a:	47c8      	blx	r9
   1ab7c:	e7d9      	b.n	1ab32 <att_handle_rsp+0x32>
   1ab7e:	bf00      	nop
   1ab80:	0002d166 	.word	0x0002d166
   1ab84:	00029fb8 	.word	0x00029fb8
   1ab88:	2000357c 	.word	0x2000357c

0001ab8c <bt_att_disconnected>:
{
   1ab8c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   1ab90:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   1ab94:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1ab96:	2e00      	cmp	r6, #0
   1ab98:	d05a      	beq.n	1ac50 <bt_att_disconnected+0xc4>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1ab9a:	f100 0184 	add.w	r1, r0, #132	; 0x84
   1ab9e:	f106 0028 	add.w	r0, r6, #40	; 0x28
   1aba2:	f00d fc90 	bl	284c6 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1aba6:	1f27      	subs	r7, r4, #4
   1aba8:	f104 0838 	add.w	r8, r4, #56	; 0x38
   1abac:	2200      	movs	r2, #0
   1abae:	2300      	movs	r3, #0
   1abb0:	4640      	mov	r0, r8
   1abb2:	f00e f92e 	bl	28e12 <net_buf_get>
   1abb6:	4605      	mov	r5, r0
   1abb8:	bb48      	cbnz	r0, 1ac0e <bt_att_disconnected+0x82>
	if (chan->req) {
   1abba:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1abbc:	b12b      	cbz	r3, 1abca <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1abbe:	4602      	mov	r2, r0
   1abc0:	4601      	mov	r1, r0
   1abc2:	230e      	movs	r3, #14
   1abc4:	4638      	mov	r0, r7
   1abc6:	f7ff ff9b 	bl	1ab00 <att_handle_rsp>
	chan->att = NULL;
   1abca:	2300      	movs	r3, #0
   1abcc:	f844 3c04 	str.w	r3, [r4, #-4]
	atomic_clear_bit(chan->flags, ATT_CONNECTED);
   1abd0:	2102      	movs	r1, #2
   1abd2:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1abd6:	f00d fc8f 	bl	284f8 <atomic_clear_bit>
	if (!sys_slist_is_empty(&att->chans)) {
   1abda:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1abdc:	2b00      	cmp	r3, #0
   1abde:	d137      	bne.n	1ac50 <bt_att_disconnected+0xc4>
	att_reset(att);
   1abe0:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1abe2:	9803      	ldr	r0, [sp, #12]
   1abe4:	2200      	movs	r2, #0
   1abe6:	2300      	movs	r3, #0
   1abe8:	300c      	adds	r0, #12
   1abea:	f00e f912 	bl	28e12 <net_buf_get>
   1abee:	4605      	mov	r5, r0
   1abf0:	b9a0      	cbnz	r0, 1ac1c <bt_att_disconnected+0x90>
	while (!sys_slist_is_empty(&att->reqs)) {
   1abf2:	9803      	ldr	r0, [sp, #12]
	return list->head;
   1abf4:	6845      	ldr	r5, [r0, #4]
   1abf6:	b9c5      	cbnz	r5, 1ac2a <bt_att_disconnected+0x9e>
	att->conn = NULL;
   1abf8:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   1abfa:	a903      	add	r1, sp, #12
   1abfc:	4816      	ldr	r0, [pc, #88]	; (1ac58 <bt_att_disconnected+0xcc>)
   1abfe:	f005 fd07 	bl	20610 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   1ac02:	6820      	ldr	r0, [r4, #0]
}
   1ac04:	b004      	add	sp, #16
   1ac06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   1ac0a:	f001 b88f 	b.w	1bd2c <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1ac0e:	69a8      	ldr	r0, [r5, #24]
   1ac10:	f7fe ffaa 	bl	19b68 <tx_meta_data_free>
		net_buf_unref(buf);
   1ac14:	4628      	mov	r0, r5
   1ac16:	f001 fae7 	bl	1c1e8 <net_buf_unref>
   1ac1a:	e7c7      	b.n	1abac <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1ac1c:	69a8      	ldr	r0, [r5, #24]
   1ac1e:	f7fe ffa3 	bl	19b68 <tx_meta_data_free>
		net_buf_unref(buf);
   1ac22:	4628      	mov	r0, r5
   1ac24:	f001 fae0 	bl	1c1e8 <net_buf_unref>
   1ac28:	e7db      	b.n	1abe2 <bt_att_disconnected+0x56>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ac2a:	6882      	ldr	r2, [r0, #8]
	return node->next;
   1ac2c:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1ac2e:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ac30:	4295      	cmp	r5, r2
	list->tail = node;
   1ac32:	bf08      	it	eq
   1ac34:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   1ac36:	686e      	ldr	r6, [r5, #4]
   1ac38:	b136      	cbz	r6, 1ac48 <bt_att_disconnected+0xbc>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1ac3a:	68eb      	ldr	r3, [r5, #12]
   1ac3c:	9300      	str	r3, [sp, #0]
   1ac3e:	2300      	movs	r3, #0
   1ac40:	6800      	ldr	r0, [r0, #0]
   1ac42:	461a      	mov	r2, r3
   1ac44:	210e      	movs	r1, #14
   1ac46:	47b0      	blx	r6
		bt_att_req_free(req);
   1ac48:	4628      	mov	r0, r5
   1ac4a:	f7ff ff41 	bl	1aad0 <bt_att_req_free>
   1ac4e:	e7d0      	b.n	1abf2 <bt_att_disconnected+0x66>
}
   1ac50:	b004      	add	sp, #16
   1ac52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ac56:	bf00      	nop
   1ac58:	20000950 	.word	0x20000950

0001ac5c <att_timeout>:
{
   1ac5c:	b510      	push	{r4, lr}
   1ac5e:	4604      	mov	r4, r0
   1ac60:	b086      	sub	sp, #24
	LOG_ERR("ATT Timeout");
   1ac62:	4b08      	ldr	r3, [pc, #32]	; (1ac84 <att_timeout+0x28>)
   1ac64:	9305      	str	r3, [sp, #20]
   1ac66:	4808      	ldr	r0, [pc, #32]	; (1ac88 <att_timeout+0x2c>)
   1ac68:	2302      	movs	r3, #2
   1ac6a:	aa04      	add	r2, sp, #16
   1ac6c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ac70:	9304      	str	r3, [sp, #16]
   1ac72:	f00d fb5b 	bl	2832c <z_log_msg_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   1ac76:	f1a4 0054 	sub.w	r0, r4, #84	; 0x54
}
   1ac7a:	b006      	add	sp, #24
   1ac7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   1ac80:	f7ff bf84 	b.w	1ab8c <bt_att_disconnected>
   1ac84:	0002d17d 	.word	0x0002d17d
   1ac88:	00029fb8 	.word	0x00029fb8

0001ac8c <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   1ac8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ac8e:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   1ac90:	b958      	cbnz	r0, 1acaa <bt_att_send+0x1e>
   1ac92:	4929      	ldr	r1, [pc, #164]	; (1ad38 <bt_att_send+0xac>)
   1ac94:	4a29      	ldr	r2, [pc, #164]	; (1ad3c <bt_att_send+0xb0>)
   1ac96:	482a      	ldr	r0, [pc, #168]	; (1ad40 <bt_att_send+0xb4>)
   1ac98:	f640 63ba 	movw	r3, #3770	; 0xeba
   1ac9c:	f00c fa9e 	bl	271dc <assert_print>
   1aca0:	f640 61ba 	movw	r1, #3770	; 0xeba
	__ASSERT_NO_MSG(buf);
   1aca4:	4825      	ldr	r0, [pc, #148]	; (1ad3c <bt_att_send+0xb0>)
   1aca6:	f00c fa92 	bl	271ce <assert_post_action>
   1acaa:	b949      	cbnz	r1, 1acc0 <bt_att_send+0x34>
   1acac:	4925      	ldr	r1, [pc, #148]	; (1ad44 <bt_att_send+0xb8>)
   1acae:	4a23      	ldr	r2, [pc, #140]	; (1ad3c <bt_att_send+0xb0>)
   1acb0:	4823      	ldr	r0, [pc, #140]	; (1ad40 <bt_att_send+0xb4>)
   1acb2:	f640 63bb 	movw	r3, #3771	; 0xebb
   1acb6:	f00c fa91 	bl	271dc <assert_print>
   1acba:	f640 61bb 	movw	r1, #3771	; 0xebb
   1acbe:	e7f1      	b.n	1aca4 <bt_att_send+0x18>

	att = att_get(conn);
   1acc0:	f7ff f900 	bl	19ec4 <att_get>
	if (!att) {
   1acc4:	4605      	mov	r5, r0
   1acc6:	b940      	cbnz	r0, 1acda <bt_att_send+0x4e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1acc8:	69a0      	ldr	r0, [r4, #24]
   1acca:	f7fe ff4d 	bl	19b68 <tx_meta_data_free>
		net_buf_unref(buf);
   1acce:	4620      	mov	r0, r4
   1acd0:	f001 fa8a 	bl	1c1e8 <net_buf_unref>
		return -ENOTCONN;
   1acd4:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   1acd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   1acda:	f100 060c 	add.w	r6, r0, #12
   1acde:	4621      	mov	r1, r4
   1ace0:	4630      	mov	r0, r6
   1ace2:	f001 fa5b 	bl	1c19c <net_buf_put>
	return list->head;
   1ace6:	6aad      	ldr	r5, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ace8:	b14d      	cbz	r5, 1acfe <bt_att_send+0x72>
	return node->next;
   1acea:	f855 4988 	ldr.w	r4, [r5], #-136
   1acee:	b104      	cbz	r4, 1acf2 <bt_att_send+0x66>
   1acf0:	3c88      	subs	r4, #136	; 0x88
		err = process_queue(chan, &att->tx_queue);
   1acf2:	4631      	mov	r1, r6
   1acf4:	4628      	mov	r0, r5
   1acf6:	f00d fb34 	bl	28362 <process_queue>
		if (!err) {
   1acfa:	4603      	mov	r3, r0
   1acfc:	b980      	cbnz	r0, 1ad20 <bt_att_send+0x94>
	return 0;
   1acfe:	2000      	movs	r0, #0
   1ad00:	e7ea      	b.n	1acd8 <bt_att_send+0x4c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   1ad02:	2103      	movs	r1, #3
   1ad04:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1ad08:	f00d fa3c 	bl	28184 <atomic_test_bit>
   1ad0c:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   1ad0e:	f105 0034 	add.w	r0, r5, #52	; 0x34
   1ad12:	f00d fa37 	bl	28184 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   1ad16:	4287      	cmp	r7, r0
   1ad18:	f06f 0301 	mvn.w	r3, #1
   1ad1c:	d107      	bne.n	1ad2e <bt_att_send+0xa2>
   1ad1e:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ad20:	2c00      	cmp	r4, #0
   1ad22:	d0ec      	beq.n	1acfe <bt_att_send+0x72>
   1ad24:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
   1ad28:	b922      	cbnz	r2, 1ad34 <bt_att_send+0xa8>
		if (err == -ENOENT && prev &&
   1ad2a:	3302      	adds	r3, #2
   1ad2c:	d0e9      	beq.n	1ad02 <bt_att_send+0x76>
{
   1ad2e:	4625      	mov	r5, r4
   1ad30:	4614      	mov	r4, r2
   1ad32:	e7de      	b.n	1acf2 <bt_att_send+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ad34:	3a88      	subs	r2, #136	; 0x88
   1ad36:	e7f8      	b.n	1ad2a <bt_att_send+0x9e>
   1ad38:	0002cd6c 	.word	0x0002cd6c
   1ad3c:	0002cf15 	.word	0x0002cf15
   1ad40:	0002ae37 	.word	0x0002ae37
   1ad44:	0002d4bb 	.word	0x0002d4bb

0001ad48 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1ad48:	b510      	push	{r4, lr}
   1ad4a:	460c      	mov	r4, r1
	struct bt_att *att;

	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   1ad4c:	b958      	cbnz	r0, 1ad66 <bt_att_req_send+0x1e>
   1ad4e:	4915      	ldr	r1, [pc, #84]	; (1ada4 <bt_att_req_send+0x5c>)
   1ad50:	4a15      	ldr	r2, [pc, #84]	; (1ada8 <bt_att_req_send+0x60>)
   1ad52:	4816      	ldr	r0, [pc, #88]	; (1adac <bt_att_req_send+0x64>)
   1ad54:	f44f 636d 	mov.w	r3, #3792	; 0xed0
   1ad58:	f00c fa40 	bl	271dc <assert_print>
   1ad5c:	f44f 616d 	mov.w	r1, #3792	; 0xed0
	__ASSERT_NO_MSG(req);
   1ad60:	4811      	ldr	r0, [pc, #68]	; (1ada8 <bt_att_req_send+0x60>)
   1ad62:	f00c fa34 	bl	271ce <assert_post_action>
   1ad66:	b949      	cbnz	r1, 1ad7c <bt_att_req_send+0x34>
   1ad68:	4911      	ldr	r1, [pc, #68]	; (1adb0 <bt_att_req_send+0x68>)
   1ad6a:	4a0f      	ldr	r2, [pc, #60]	; (1ada8 <bt_att_req_send+0x60>)
   1ad6c:	480f      	ldr	r0, [pc, #60]	; (1adac <bt_att_req_send+0x64>)
   1ad6e:	f640 63d1 	movw	r3, #3793	; 0xed1
   1ad72:	f00c fa33 	bl	271dc <assert_print>
   1ad76:	f640 61d1 	movw	r1, #3793	; 0xed1
   1ad7a:	e7f1      	b.n	1ad60 <bt_att_req_send+0x18>

	att = att_get(conn);
   1ad7c:	f7ff f8a2 	bl	19ec4 <att_get>
	if (!att) {
   1ad80:	b160      	cbz	r0, 1ad9c <bt_att_req_send+0x54>
	parent->next = child;
   1ad82:	2300      	movs	r3, #0
   1ad84:	6023      	str	r3, [r4, #0]
	return list->tail;
   1ad86:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   1ad88:	b92b      	cbnz	r3, 1ad96 <bt_att_req_send+0x4e>
	list->head = node;
   1ad8a:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1ad8e:	f00d fc5d 	bl	2864c <att_req_send_process>

	return 0;
   1ad92:	2000      	movs	r0, #0
}
   1ad94:	bd10      	pop	{r4, pc}
	parent->next = child;
   1ad96:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1ad98:	6084      	str	r4, [r0, #8]
}
   1ad9a:	e7f8      	b.n	1ad8e <bt_att_req_send+0x46>
		return -ENOTCONN;
   1ad9c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1ada0:	e7f8      	b.n	1ad94 <bt_att_req_send+0x4c>
   1ada2:	bf00      	nop
   1ada4:	0002cd6c 	.word	0x0002cd6c
   1ada8:	0002cf15 	.word	0x0002cf15
   1adac:	0002ae37 	.word	0x0002ae37
   1adb0:	0002d001 	.word	0x0002d001

0001adb4 <find_cf_cfg>:
	}
#endif	/* CONFIG_BT_SETTINGS */
}

static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   1adb4:	b570      	push	{r4, r5, r6, lr}
   1adb6:	4d14      	ldr	r5, [pc, #80]	; (1ae08 <find_cf_cfg+0x54>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   1adb8:	4606      	mov	r6, r0
   1adba:	b140      	cbz	r0, 1adce <find_cf_cfg+0x1a>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1adbc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1adc0:	462a      	mov	r2, r5
   1adc2:	1e6c      	subs	r4, r5, #1
   1adc4:	f00d f8fc 	bl	27fc0 <bt_conn_is_peer_addr_le>
   1adc8:	b198      	cbz	r0, 1adf2 <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1adca:	4620      	mov	r0, r4
   1adcc:	e00c      	b.n	1ade8 <find_cf_cfg+0x34>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1adce:	490f      	ldr	r1, [pc, #60]	; (1ae0c <find_cf_cfg+0x58>)
   1add0:	4628      	mov	r0, r5
   1add2:	f00d fe23 	bl	28a1c <bt_addr_le_eq>
   1add6:	b940      	cbnz	r0, 1adea <find_cf_cfg+0x36>
   1add8:	490c      	ldr	r1, [pc, #48]	; (1ae0c <find_cf_cfg+0x58>)
   1adda:	f105 0010 	add.w	r0, r5, #16
   1adde:	f00d fe1d 	bl	28a1c <bt_addr_le_eq>
   1ade2:	b120      	cbz	r0, 1adee <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1ade4:	f105 000f 	add.w	r0, r5, #15
			return cfg;
		}
	}

	return NULL;
}
   1ade8:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1adea:	1e68      	subs	r0, r5, #1
   1adec:	e7fc      	b.n	1ade8 <find_cf_cfg+0x34>
	return NULL;
   1adee:	2000      	movs	r0, #0
   1adf0:	e7fa      	b.n	1ade8 <find_cf_cfg+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1adf2:	7c21      	ldrb	r1, [r4, #16]
   1adf4:	f104 0211 	add.w	r2, r4, #17
   1adf8:	4630      	mov	r0, r6
   1adfa:	f00d f8e1 	bl	27fc0 <bt_conn_is_peer_addr_le>
   1adfe:	2800      	cmp	r0, #0
   1ae00:	d0f5      	beq.n	1adee <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1ae02:	f104 0010 	add.w	r0, r4, #16
   1ae06:	e7ef      	b.n	1ade8 <find_cf_cfg+0x34>
   1ae08:	200035a5 	.word	0x200035a5
   1ae0c:	0002bf88 	.word	0x0002bf88

0001ae10 <find_sc_cfg>:
{
   1ae10:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   1ae12:	4c0e      	ldr	r4, [pc, #56]	; (1ae4c <find_sc_cfg+0x3c>)
   1ae14:	7823      	ldrb	r3, [r4, #0]
   1ae16:	4283      	cmp	r3, r0
{
   1ae18:	4605      	mov	r5, r0
   1ae1a:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   1ae1c:	d00c      	beq.n	1ae38 <find_sc_cfg+0x28>
   1ae1e:	7b23      	ldrb	r3, [r4, #12]
   1ae20:	42ab      	cmp	r3, r5
   1ae22:	d110      	bne.n	1ae46 <find_sc_cfg+0x36>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   1ae24:	480a      	ldr	r0, [pc, #40]	; (1ae50 <find_sc_cfg+0x40>)
   1ae26:	4631      	mov	r1, r6
   1ae28:	f00d fdf8 	bl	28a1c <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   1ae2c:	b158      	cbz	r0, 1ae46 <find_sc_cfg+0x36>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1ae2e:	2301      	movs	r3, #1
			return &sc_cfg[i];
   1ae30:	220c      	movs	r2, #12
   1ae32:	fb02 4003 	mla	r0, r2, r3, r4
   1ae36:	e007      	b.n	1ae48 <find_sc_cfg+0x38>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   1ae38:	1c60      	adds	r0, r4, #1
   1ae3a:	f00d fdef 	bl	28a1c <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   1ae3e:	2800      	cmp	r0, #0
   1ae40:	d0ed      	beq.n	1ae1e <find_sc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1ae42:	2300      	movs	r3, #0
   1ae44:	e7f4      	b.n	1ae30 <find_sc_cfg+0x20>
	return NULL;
   1ae46:	2000      	movs	r0, #0
}
   1ae48:	bd70      	pop	{r4, r5, r6, pc}
   1ae4a:	bf00      	nop
   1ae4c:	200042fa 	.word	0x200042fa
   1ae50:	20004307 	.word	0x20004307

0001ae54 <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   1ae54:	b538      	push	{r3, r4, r5, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   1ae56:	1c4a      	adds	r2, r1, #1
{
   1ae58:	460c      	mov	r4, r1
		if (conn) {
   1ae5a:	4605      	mov	r5, r0
   1ae5c:	b968      	cbnz	r0, 1ae7a <find_ccc_cfg+0x26>
				return cfg;
			}
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1ae5e:	490e      	ldr	r1, [pc, #56]	; (1ae98 <find_ccc_cfg+0x44>)
   1ae60:	4610      	mov	r0, r2
   1ae62:	f00d fddb 	bl	28a1c <bt_addr_le_eq>
   1ae66:	b930      	cbnz	r0, 1ae76 <find_ccc_cfg+0x22>
   1ae68:	490b      	ldr	r1, [pc, #44]	; (1ae98 <find_ccc_cfg+0x44>)
   1ae6a:	f104 000b 	add.w	r0, r4, #11
   1ae6e:	f00d fdd5 	bl	28a1c <bt_addr_le_eq>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1ae72:	b170      	cbz	r0, 1ae92 <find_ccc_cfg+0x3e>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1ae74:	340a      	adds	r4, #10
   1ae76:	4620      	mov	r0, r4
   1ae78:	e00c      	b.n	1ae94 <find_ccc_cfg+0x40>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1ae7a:	7809      	ldrb	r1, [r1, #0]
   1ae7c:	f00d f8a0 	bl	27fc0 <bt_conn_is_peer_addr_le>
   1ae80:	2800      	cmp	r0, #0
   1ae82:	d1f8      	bne.n	1ae76 <find_ccc_cfg+0x22>
   1ae84:	7aa1      	ldrb	r1, [r4, #10]
   1ae86:	f104 020b 	add.w	r2, r4, #11
   1ae8a:	4628      	mov	r0, r5
   1ae8c:	f00d f898 	bl	27fc0 <bt_conn_is_peer_addr_le>
   1ae90:	e7ef      	b.n	1ae72 <find_ccc_cfg+0x1e>
			return cfg;
		}
	}

	return NULL;
   1ae92:	2000      	movs	r0, #0
}
   1ae94:	bd38      	pop	{r3, r4, r5, pc}
   1ae96:	bf00      	nop
   1ae98:	0002bf88 	.word	0x0002bf88

0001ae9c <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   1ae9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1aea0:	b087      	sub	sp, #28
   1aea2:	461e      	mov	r6, r3
   1aea4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1aea8:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1aeac:	4681      	mov	r9, r0
   1aeae:	460f      	mov	r7, r1
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   1aeb0:	2b00      	cmp	r3, #0
   1aeb2:	d14b      	bne.n	1af4c <bt_gatt_attr_write_ccc+0xb0>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   1aeb4:	1e73      	subs	r3, r6, #1
   1aeb6:	2b01      	cmp	r3, #1
   1aeb8:	d84b      	bhi.n	1af52 <bt_gatt_attr_write_ccc+0xb6>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   1aeba:	2e01      	cmp	r6, #1
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   1aebc:	4641      	mov	r1, r8
		value = *(uint8_t *)buf;
   1aebe:	7815      	ldrb	r5, [r2, #0]
   1aec0:	bf18      	it	ne
   1aec2:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   1aec4:	f7ff ffc6 	bl	1ae54 <find_ccc_cfg>
	if (!cfg) {
   1aec8:	4604      	mov	r4, r0
   1aeca:	b9f0      	cbnz	r0, 1af0a <bt_gatt_attr_write_ccc+0x6e>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
   1aecc:	b91d      	cbnz	r5, 1aed6 <bt_gatt_attr_write_ccc+0x3a>
			return len;
   1aece:	4630      	mov	r0, r6
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   1aed0:	b007      	add	sp, #28
   1aed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1aed6:	4641      	mov	r1, r8
   1aed8:	f7ff ffbc 	bl	1ae54 <find_ccc_cfg>
		if (!cfg) {
   1aedc:	4604      	mov	r4, r0
   1aede:	b960      	cbnz	r0, 1aefa <bt_gatt_attr_write_ccc+0x5e>
			LOG_WRN("No space to store CCC cfg");
   1aee0:	4b1d      	ldr	r3, [pc, #116]	; (1af58 <bt_gatt_attr_write_ccc+0xbc>)
   1aee2:	481e      	ldr	r0, [pc, #120]	; (1af5c <bt_gatt_attr_write_ccc+0xc0>)
   1aee4:	9305      	str	r3, [sp, #20]
   1aee6:	aa04      	add	r2, sp, #16
   1aee8:	2302      	movs	r3, #2
   1aeea:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1aeee:	9304      	str	r3, [sp, #16]
   1aef0:	f00d fdb4 	bl	28a5c <z_log_msg_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1aef4:	f06f 0010 	mvn.w	r0, #16
   1aef8:	e7ea      	b.n	1aed0 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1aefa:	f109 0190 	add.w	r1, r9, #144	; 0x90
   1aefe:	3001      	adds	r0, #1
   1af00:	f00d fda9 	bl	28a56 <bt_addr_le_copy>
		cfg->id = conn->id;
   1af04:	f899 3008 	ldrb.w	r3, [r9, #8]
   1af08:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1af0a:	f8d8 301c 	ldr.w	r3, [r8, #28]
   1af0e:	b98b      	cbnz	r3, 1af34 <bt_gatt_attr_write_ccc+0x98>
	cfg->value = value;
   1af10:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   1af12:	f8b8 3014 	ldrh.w	r3, [r8, #20]
   1af16:	42ab      	cmp	r3, r5
   1af18:	d003      	beq.n	1af22 <bt_gatt_attr_write_ccc+0x86>
		gatt_ccc_changed(attr, ccc);
   1af1a:	4641      	mov	r1, r8
   1af1c:	4638      	mov	r0, r7
   1af1e:	f00d fd05 	bl	2892c <gatt_ccc_changed>
	if (!value) {
   1af22:	2d00      	cmp	r5, #0
   1af24:	d1d3      	bne.n	1aece <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1af26:	490e      	ldr	r1, [pc, #56]	; (1af60 <bt_gatt_attr_write_ccc+0xc4>)
   1af28:	1c60      	adds	r0, r4, #1
   1af2a:	f00d fd94 	bl	28a56 <bt_addr_le_copy>
	cfg->id = 0U;
   1af2e:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1af30:	8125      	strh	r5, [r4, #8]
}
   1af32:	e7cc      	b.n	1aece <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1af34:	462a      	mov	r2, r5
   1af36:	4639      	mov	r1, r7
   1af38:	4648      	mov	r0, r9
   1af3a:	4798      	blx	r3
		if (write < 0) {
   1af3c:	2800      	cmp	r0, #0
   1af3e:	dbc7      	blt.n	1aed0 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   1af40:	3801      	subs	r0, #1
   1af42:	2801      	cmp	r0, #1
   1af44:	d9e4      	bls.n	1af10 <bt_gatt_attr_write_ccc+0x74>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1af46:	f06f 000d 	mvn.w	r0, #13
   1af4a:	e7c1      	b.n	1aed0 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1af4c:	f06f 0006 	mvn.w	r0, #6
   1af50:	e7be      	b.n	1aed0 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1af52:	f06f 000c 	mvn.w	r0, #12
   1af56:	e7bb      	b.n	1aed0 <bt_gatt_attr_write_ccc+0x34>
   1af58:	0002d190 	.word	0x0002d190
   1af5c:	00029fd0 	.word	0x00029fd0
   1af60:	0002bf88 	.word	0x0002bf88

0001af64 <clear_cf_cfg>:
{
   1af64:	b510      	push	{r4, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1af66:	490c      	ldr	r1, [pc, #48]	; (1af98 <clear_cf_cfg+0x34>)
{
   1af68:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1af6a:	3001      	adds	r0, #1
   1af6c:	f00d fd73 	bl	28a56 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1af70:	f104 0008 	add.w	r0, r4, #8
   1af74:	2201      	movs	r2, #1
   1af76:	2100      	movs	r1, #0
   1af78:	f00c fd63 	bl	27a42 <memset>
   1af7c:	f3bf 8f5b 	dmb	ish
   1af80:	340c      	adds	r4, #12
   1af82:	2300      	movs	r3, #0
   1af84:	e854 2f00 	ldrex	r2, [r4]
   1af88:	e844 3100 	strex	r1, r3, [r4]
   1af8c:	2900      	cmp	r1, #0
   1af8e:	d1f9      	bne.n	1af84 <clear_cf_cfg+0x20>
   1af90:	f3bf 8f5b 	dmb	ish
}
   1af94:	bd10      	pop	{r4, pc}
   1af96:	bf00      	nop
   1af98:	0002bf88 	.word	0x0002bf88

0001af9c <sc_save>:
{
   1af9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1afa0:	b086      	sub	sp, #24
   1afa2:	4680      	mov	r8, r0
   1afa4:	460f      	mov	r7, r1
   1afa6:	4616      	mov	r6, r2
   1afa8:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1afaa:	f7ff ff31 	bl	1ae10 <find_sc_cfg>
	if (!cfg) {
   1afae:	4604      	mov	r4, r0
   1afb0:	b9b0      	cbnz	r0, 1afe0 <sc_save+0x44>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1afb2:	4912      	ldr	r1, [pc, #72]	; (1affc <sc_save+0x60>)
   1afb4:	f7ff ff2c 	bl	1ae10 <find_sc_cfg>
		if (!cfg) {
   1afb8:	4604      	mov	r4, r0
   1afba:	b960      	cbnz	r0, 1afd6 <sc_save+0x3a>
			LOG_ERR("unable to save SC: no cfg left");
   1afbc:	4b10      	ldr	r3, [pc, #64]	; (1b000 <sc_save+0x64>)
   1afbe:	9305      	str	r3, [sp, #20]
   1afc0:	4810      	ldr	r0, [pc, #64]	; (1b004 <sc_save+0x68>)
   1afc2:	2302      	movs	r3, #2
   1afc4:	aa04      	add	r2, sp, #16
   1afc6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1afca:	9304      	str	r3, [sp, #16]
   1afcc:	f00d fd46 	bl	28a5c <z_log_msg_static_create.constprop.0>
}
   1afd0:	b006      	add	sp, #24
   1afd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   1afd6:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1afda:	4639      	mov	r1, r7
   1afdc:	f00d fd3b 	bl	28a56 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1afe0:	8922      	ldrh	r2, [r4, #8]
   1afe2:	8963      	ldrh	r3, [r4, #10]
   1afe4:	b91a      	cbnz	r2, 1afee <sc_save+0x52>
   1afe6:	b92b      	cbnz	r3, 1aff4 <sc_save+0x58>
		cfg->data.start = start;
   1afe8:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1afea:	8165      	strh	r5, [r4, #10]
   1afec:	e7f0      	b.n	1afd0 <sc_save+0x34>
	if (new_start >= *start && new_end <= *end) {
   1afee:	4296      	cmp	r6, r2
		*start = new_start;
   1aff0:	bf38      	it	cc
   1aff2:	8126      	strhcc	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
   1aff4:	429d      	cmp	r5, r3
   1aff6:	d9eb      	bls.n	1afd0 <sc_save+0x34>
   1aff8:	e7f7      	b.n	1afea <sc_save+0x4e>
   1affa:	bf00      	nop
   1affc:	0002bf88 	.word	0x0002bf88
   1b000:	0002d1aa 	.word	0x0002d1aa
   1b004:	00029fd0 	.word	0x00029fd0

0001b008 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   1b008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b00c:	4b28      	ldr	r3, [pc, #160]	; (1b0b0 <disconnected_cb+0xa8>)
{
   1b00e:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b010:	6882      	ldr	r2, [r0, #8]
   1b012:	429a      	cmp	r2, r3
{
   1b014:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b016:	d12b      	bne.n	1b070 <disconnected_cb+0x68>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   1b018:	68c5      	ldr	r5, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   1b01a:	8aab      	ldrh	r3, [r5, #20]
   1b01c:	b343      	cbz	r3, 1b070 <disconnected_cb+0x68>
   1b01e:	1c6c      	adds	r4, r5, #1
   1b020:	f105 0915 	add.w	r9, r5, #21
		return BT_GATT_ITER_CONTINUE;
	}

	/* Checking if all values are disabled */
	value_used = false;
   1b024:	f04f 0800 	mov.w	r8, #0

	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		/* Ignore configurations with disabled value */
		if (!cfg->value) {
   1b028:	f8b4 3007 	ldrh.w	r3, [r4, #7]
   1b02c:	b19b      	cbz	r3, 1b056 <disconnected_cb+0x4e>
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1b02e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   1b032:	4622      	mov	r2, r4
   1b034:	4630      	mov	r0, r6
   1b036:	f00c ffc3 	bl	27fc0 <bt_conn_is_peer_addr_le>
   1b03a:	b9e0      	cbnz	r0, 1b076 <disconnected_cb+0x6e>
			struct bt_conn *tmp;

			/* Skip if there is another peer connected */
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1b03c:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1b040:	4621      	mov	r1, r4
   1b042:	f7fe f953 	bl	192ec <bt_conn_lookup_addr_le>
			if (tmp) {
   1b046:	b130      	cbz	r0, 1b056 <disconnected_cb+0x4e>
				if (tmp->state == BT_CONN_CONNECTED) {
   1b048:	7a83      	ldrb	r3, [r0, #10]
					value_used = true;
   1b04a:	2b07      	cmp	r3, #7
   1b04c:	bf08      	it	eq
   1b04e:	f04f 0801 	moveq.w	r8, #1
				}

				bt_conn_unref(tmp);
   1b052:	f7fd fed5 	bl	18e00 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1b056:	340a      	adds	r4, #10
   1b058:	454c      	cmp	r4, r9
   1b05a:	d1e5      	bne.n	1b028 <disconnected_cb+0x20>
			}
		}
	}

	/* If all values are now disabled, reset value while disconnected */
	if (!value_used) {
   1b05c:	f1b8 0f00 	cmp.w	r8, #0
   1b060:	d106      	bne.n	1b070 <disconnected_cb+0x68>
		ccc->value = 0U;
		if (ccc->cfg_changed) {
   1b062:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
   1b064:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
   1b068:	b113      	cbz	r3, 1b070 <disconnected_cb+0x68>
			ccc->cfg_changed(attr, ccc->value);
   1b06a:	4641      	mov	r1, r8
   1b06c:	4638      	mov	r0, r7
   1b06e:	4798      	blx	r3

		LOG_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   1b070:	2001      	movs	r0, #1
   1b072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b076:	f106 0a90 	add.w	sl, r6, #144	; 0x90
   1b07a:	7a30      	ldrb	r0, [r6, #8]
   1b07c:	4651      	mov	r1, sl
   1b07e:	f00c fe44 	bl	27d0a <bt_addr_le_is_bonded>
   1b082:	b978      	cbnz	r0, 1b0a4 <disconnected_cb+0x9c>
				if (ccc == &sc_ccc) {
   1b084:	4b0b      	ldr	r3, [pc, #44]	; (1b0b4 <disconnected_cb+0xac>)
   1b086:	429d      	cmp	r5, r3
   1b088:	d102      	bne.n	1b090 <disconnected_cb+0x88>
					sc_clear(conn);
   1b08a:	4630      	mov	r0, r6
   1b08c:	f00d fce9 	bl	28a62 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1b090:	4909      	ldr	r1, [pc, #36]	; (1b0b8 <disconnected_cb+0xb0>)
   1b092:	4620      	mov	r0, r4
   1b094:	f00d fcdf 	bl	28a56 <bt_addr_le_copy>
	cfg->id = 0U;
   1b098:	2300      	movs	r3, #0
   1b09a:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
   1b09e:	f8a4 3007 	strh.w	r3, [r4, #7]
}
   1b0a2:	e7d8      	b.n	1b056 <disconnected_cb+0x4e>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1b0a4:	4651      	mov	r1, sl
   1b0a6:	4620      	mov	r0, r4
   1b0a8:	f00d fcd5 	bl	28a56 <bt_addr_le_copy>
   1b0ac:	e7d3      	b.n	1b056 <disconnected_cb+0x4e>
   1b0ae:	bf00      	nop
   1b0b0:	0001ae9d 	.word	0x0001ae9d
   1b0b4:	200006cc 	.word	0x200006cc
   1b0b8:	0002bf88 	.word	0x0002bf88

0001b0bc <read_ppcp>:
{
   1b0bc:	b513      	push	{r0, r1, r4, lr}
   1b0be:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1b0c2:	4c0b      	ldr	r4, [pc, #44]	; (1b0f0 <read_ppcp+0x34>)
{
   1b0c4:	4610      	mov	r0, r2
	if (offset > value_len) {
   1b0c6:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1b0c8:	f04f 72c8 	mov.w	r2, #26214400	; 0x1900000
   1b0cc:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   1b0d0:	d80b      	bhi.n	1b0ea <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
   1b0d2:	f1c1 0408 	rsb	r4, r1, #8
   1b0d6:	429c      	cmp	r4, r3
   1b0d8:	bfa8      	it	ge
   1b0da:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1b0dc:	4622      	mov	r2, r4
   1b0de:	4469      	add	r1, sp
   1b0e0:	f00c fca4 	bl	27a2c <memcpy>
}
   1b0e4:	4620      	mov	r0, r4
   1b0e6:	b002      	add	sp, #8
   1b0e8:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b0ea:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1b0ee:	e7f9      	b.n	1b0e4 <read_ppcp+0x28>
   1b0f0:	03200320 	.word	0x03200320

0001b0f4 <cf_write>:
{
   1b0f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b0f8:	b086      	sub	sp, #24
   1b0fa:	461f      	mov	r7, r3
   1b0fc:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	if (offset > sizeof(cfg->data)) {
   1b100:	2b01      	cmp	r3, #1
{
   1b102:	4606      	mov	r6, r0
   1b104:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   1b106:	d83a      	bhi.n	1b17e <cf_write+0x8a>
	if (offset + len > sizeof(cfg->data)) {
   1b108:	443b      	add	r3, r7
   1b10a:	2b01      	cmp	r3, #1
   1b10c:	463d      	mov	r5, r7
   1b10e:	dc39      	bgt.n	1b184 <cf_write+0x90>
	cfg = find_cf_cfg(conn);
   1b110:	f7ff fe50 	bl	1adb4 <find_cf_cfg>
	if (!cfg) {
   1b114:	4604      	mov	r4, r0
   1b116:	b998      	cbnz	r0, 1b140 <cf_write+0x4c>
		cfg = find_cf_cfg(NULL);
   1b118:	f7ff fe4c 	bl	1adb4 <find_cf_cfg>
	if (!cfg) {
   1b11c:	4604      	mov	r4, r0
   1b11e:	b978      	cbnz	r0, 1b140 <cf_write+0x4c>
		LOG_WRN("No space to store Client Supported Features");
   1b120:	4b1b      	ldr	r3, [pc, #108]	; (1b190 <cf_write+0x9c>)
   1b122:	9305      	str	r3, [sp, #20]
   1b124:	481b      	ldr	r0, [pc, #108]	; (1b194 <cf_write+0xa0>)
   1b126:	2302      	movs	r3, #2
   1b128:	aa04      	add	r2, sp, #16
   1b12a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1b12e:	f06f 0510 	mvn.w	r5, #16
		LOG_WRN("No space to store Client Supported Features");
   1b132:	9304      	str	r3, [sp, #16]
   1b134:	f00d fc92 	bl	28a5c <z_log_msg_static_create.constprop.0>
}
   1b138:	4628      	mov	r0, r5
   1b13a:	b006      	add	sp, #24
   1b13c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1b140:	b197      	cbz	r7, 1b168 <cf_write+0x74>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1b142:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   1b144:	f898 2000 	ldrb.w	r2, [r8]
   1b148:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1b14a:	fa21 f003 	lsr.w	r0, r1, r3
   1b14e:	07c7      	lsls	r7, r0, #31
   1b150:	d503      	bpl.n	1b15a <cf_write+0x66>
		    !(value[i / 8] & BIT(i % 8))) {
   1b152:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1b156:	07c0      	lsls	r0, r0, #31
   1b158:	d517      	bpl.n	1b18a <cf_write+0x96>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1b15a:	3301      	adds	r3, #1
   1b15c:	2b03      	cmp	r3, #3
   1b15e:	d1f4      	bne.n	1b14a <cf_write+0x56>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1b160:	f002 0207 	and.w	r2, r2, #7
   1b164:	4311      	orrs	r1, r2
   1b166:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1b168:	1c60      	adds	r0, r4, #1
   1b16a:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1b16e:	f00d fc72 	bl	28a56 <bt_addr_le_copy>
	cfg->id = conn->id;
   1b172:	7a33      	ldrb	r3, [r6, #8]
   1b174:	7023      	strb	r3, [r4, #0]
	bool changed = set_change_aware_no_store(cfg, aware);
   1b176:	4620      	mov	r0, r4
   1b178:	f00d fd3e 	bl	28bf8 <set_change_aware_no_store.constprop.0.isra.0>
	return len;
   1b17c:	e7dc      	b.n	1b138 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b17e:	f06f 0506 	mvn.w	r5, #6
   1b182:	e7d9      	b.n	1b138 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1b184:	f06f 050c 	mvn.w	r5, #12
   1b188:	e7d6      	b.n	1b138 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1b18a:	f06f 0512 	mvn.w	r5, #18
   1b18e:	e7d3      	b.n	1b138 <cf_write+0x44>
   1b190:	0002d1c9 	.word	0x0002d1c9
   1b194:	00029fd0 	.word	0x00029fd0

0001b198 <sc_indicate_rsp>:
{
   1b198:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b19a:	4914      	ldr	r1, [pc, #80]	; (1b1ec <sc_indicate_rsp+0x54>)
   1b19c:	f3bf 8f5b 	dmb	ish
   1b1a0:	4604      	mov	r4, r0
   1b1a2:	e851 3f00 	ldrex	r3, [r1]
   1b1a6:	f023 0302 	bic.w	r3, r3, #2
   1b1aa:	e841 3200 	strex	r2, r3, [r1]
   1b1ae:	2a00      	cmp	r2, #0
   1b1b0:	d1f7      	bne.n	1b1a2 <sc_indicate_rsp+0xa>
   1b1b2:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1b1b6:	4608      	mov	r0, r1
   1b1b8:	f00d fc38 	bl	28a2c <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1b1bc:	07c2      	lsls	r2, r0, #31
   1b1be:	d505      	bpl.n	1b1cc <sc_indicate_rsp+0x34>
	k_work_reschedule(&gatt_sc.work, timeout);
   1b1c0:	2200      	movs	r2, #0
   1b1c2:	2300      	movs	r3, #0
   1b1c4:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   1b1c8:	f006 fb72 	bl	218b0 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   1b1cc:	4620      	mov	r0, r4
   1b1ce:	f00d fb85 	bl	288dc <bt_att_fixed_chan_only>
   1b1d2:	b150      	cbz	r0, 1b1ea <sc_indicate_rsp+0x52>
		cfg = find_cf_cfg(conn);
   1b1d4:	4620      	mov	r0, r4
   1b1d6:	f7ff fded 	bl	1adb4 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1b1da:	b130      	cbz	r0, 1b1ea <sc_indicate_rsp+0x52>
   1b1dc:	7a03      	ldrb	r3, [r0, #8]
   1b1de:	07db      	lsls	r3, r3, #31
   1b1e0:	d503      	bpl.n	1b1ea <sc_indicate_rsp+0x52>
}
   1b1e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bool changed = set_change_aware_no_store(cfg, aware);
   1b1e6:	f00d bd07 	b.w	28bf8 <set_change_aware_no_store.constprop.0.isra.0>
}
   1b1ea:	bd10      	pop	{r4, pc}
   1b1ec:	20002288 	.word	0x20002288

0001b1f0 <bt_gatt_init>:
{
   1b1f0:	b510      	push	{r4, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b1f2:	4820      	ldr	r0, [pc, #128]	; (1b274 <bt_gatt_init+0x84>)
   1b1f4:	2101      	movs	r1, #1
   1b1f6:	f00d fc1f 	bl	28a38 <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_INITIALIZED)) {
   1b1fa:	07c3      	lsls	r3, r0, #31
   1b1fc:	d439      	bmi.n	1b272 <bt_gatt_init+0x82>
   1b1fe:	2102      	movs	r1, #2
   1b200:	481c      	ldr	r0, [pc, #112]	; (1b274 <bt_gatt_init+0x84>)
   1b202:	f00d fc19 	bl	28a38 <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_SERVICE_INITIALIZED)) {
   1b206:	4008      	ands	r0, r1
   1b208:	d11f      	bne.n	1b24a <bt_gatt_init+0x5a>
   1b20a:	491b      	ldr	r1, [pc, #108]	; (1b278 <bt_gatt_init+0x88>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1b20c:	4a1b      	ldr	r2, [pc, #108]	; (1b27c <bt_gatt_init+0x8c>)
   1b20e:	880b      	ldrh	r3, [r1, #0]
   1b210:	4c1b      	ldr	r4, [pc, #108]	; (1b280 <bt_gatt_init+0x90>)
   1b212:	42a2      	cmp	r2, r4
   1b214:	d916      	bls.n	1b244 <bt_gatt_init+0x54>
   1b216:	b100      	cbz	r0, 1b21a <bt_gatt_init+0x2a>
   1b218:	800b      	strh	r3, [r1, #0]
   1b21a:	491a      	ldr	r1, [pc, #104]	; (1b284 <bt_gatt_init+0x94>)
   1b21c:	4a1a      	ldr	r2, [pc, #104]	; (1b288 <bt_gatt_init+0x98>)
   1b21e:	481b      	ldr	r0, [pc, #108]	; (1b28c <bt_gatt_init+0x9c>)
   1b220:	f240 53c3 	movw	r3, #1475	; 0x5c3
   1b224:	f00b ffda 	bl	271dc <assert_print>
   1b228:	4819      	ldr	r0, [pc, #100]	; (1b290 <bt_gatt_init+0xa0>)
   1b22a:	f00b ffd7 	bl	271dc <assert_print>
   1b22e:	4816      	ldr	r0, [pc, #88]	; (1b288 <bt_gatt_init+0x98>)
   1b230:	f240 51c3 	movw	r1, #1475	; 0x5c3
   1b234:	f00b ffcb 	bl	271ce <assert_post_action>
		last_static_handle += svc->attr_count;
   1b238:	6850      	ldr	r0, [r2, #4]
   1b23a:	4403      	add	r3, r0
   1b23c:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1b23e:	3208      	adds	r2, #8
   1b240:	2001      	movs	r0, #1
   1b242:	e7e6      	b.n	1b212 <bt_gatt_init+0x22>
   1b244:	d3f8      	bcc.n	1b238 <bt_gatt_init+0x48>
   1b246:	b100      	cbz	r0, 1b24a <bt_gatt_init+0x5a>
   1b248:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   1b24a:	4b12      	ldr	r3, [pc, #72]	; (1b294 <bt_gatt_init+0xa4>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1b24c:	4912      	ldr	r1, [pc, #72]	; (1b298 <bt_gatt_init+0xa8>)
   1b24e:	4813      	ldr	r0, [pc, #76]	; (1b29c <bt_gatt_init+0xac>)
   1b250:	2200      	movs	r2, #0
	list->tail = NULL;
   1b252:	e9c3 2200 	strd	r2, r2, [r3]
   1b256:	f006 fa0f 	bl	21678 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1b25a:	4810      	ldr	r0, [pc, #64]	; (1b29c <bt_gatt_init+0xac>)
   1b25c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1b260:	2300      	movs	r3, #0
   1b262:	f7fa feff 	bl	16064 <bt_long_wq_schedule>
}
   1b266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1b26a:	490d      	ldr	r1, [pc, #52]	; (1b2a0 <bt_gatt_init+0xb0>)
   1b26c:	480d      	ldr	r0, [pc, #52]	; (1b2a4 <bt_gatt_init+0xb4>)
   1b26e:	f006 ba03 	b.w	21678 <k_work_init_delayable>
}
   1b272:	bd10      	pop	{r4, pc}
   1b274:	200035c4 	.word	0x200035c4
   1b278:	20004312 	.word	0x20004312
   1b27c:	00029f78 	.word	0x00029f78
   1b280:	00029f90 	.word	0x00029f90
   1b284:	0002d22c 	.word	0x0002d22c
   1b288:	0002d1f5 	.word	0x0002d1f5
   1b28c:	0002ae37 	.word	0x0002ae37
   1b290:	0002b3ac 	.word	0x0002b3ac
   1b294:	200035c8 	.word	0x200035c8
   1b298:	0001b519 	.word	0x0001b519
   1b29c:	200021e0 	.word	0x200021e0
   1b2a0:	0001b93d 	.word	0x0001b93d
   1b2a4:	20002258 	.word	0x20002258

0001b2a8 <bt_gatt_attr_get_handle>:
{
   1b2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1b2ac:	4603      	mov	r3, r0
   1b2ae:	b398      	cbz	r0, 1b318 <bt_gatt_attr_get_handle+0x70>
	if (attr->handle) {
   1b2b0:	8a00      	ldrh	r0, [r0, #16]
   1b2b2:	bb88      	cbnz	r0, 1b318 <bt_gatt_attr_get_handle+0x70>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b2b4:	491a      	ldr	r1, [pc, #104]	; (1b320 <bt_gatt_attr_get_handle+0x78>)
   1b2b6:	f8df e07c 	ldr.w	lr, [pc, #124]	; 1b334 <bt_gatt_attr_get_handle+0x8c>
	uint16_t handle = 1;
   1b2ba:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1b2bc:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b2c0:	4571      	cmp	r1, lr
   1b2c2:	d928      	bls.n	1b316 <bt_gatt_attr_get_handle+0x6e>
   1b2c4:	4917      	ldr	r1, [pc, #92]	; (1b324 <bt_gatt_attr_get_handle+0x7c>)
   1b2c6:	4a18      	ldr	r2, [pc, #96]	; (1b328 <bt_gatt_attr_get_handle+0x80>)
   1b2c8:	4818      	ldr	r0, [pc, #96]	; (1b32c <bt_gatt_attr_get_handle+0x84>)
   1b2ca:	f240 7329 	movw	r3, #1833	; 0x729
   1b2ce:	f00b ff85 	bl	271dc <assert_print>
   1b2d2:	4817      	ldr	r0, [pc, #92]	; (1b330 <bt_gatt_attr_get_handle+0x88>)
   1b2d4:	f00b ff82 	bl	271dc <assert_print>
   1b2d8:	4813      	ldr	r0, [pc, #76]	; (1b328 <bt_gatt_attr_get_handle+0x80>)
   1b2da:	f240 7129 	movw	r1, #1833	; 0x729
   1b2de:	f00b ff76 	bl	271ce <assert_post_action>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1b2e2:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   1b2e6:	42bb      	cmp	r3, r7
   1b2e8:	d304      	bcc.n	1b2f4 <bt_gatt_attr_get_handle+0x4c>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1b2ea:	fb0c 7206 	mla	r2, ip, r6, r7
   1b2ee:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   1b2f0:	4293      	cmp	r3, r2
   1b2f2:	d90e      	bls.n	1b312 <bt_gatt_attr_get_handle+0x6a>
			handle += static_svc->attr_count;
   1b2f4:	4434      	add	r4, r6
   1b2f6:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b2f8:	3108      	adds	r1, #8
   1b2fa:	4614      	mov	r4, r2
   1b2fc:	e7e0      	b.n	1b2c0 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   1b2fe:	fb0c 7805 	mla	r8, ip, r5, r7
   1b302:	4543      	cmp	r3, r8
   1b304:	d00a      	beq.n	1b31c <bt_gatt_attr_get_handle+0x74>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1b306:	3501      	adds	r5, #1
   1b308:	1962      	adds	r2, r4, r5
   1b30a:	42b5      	cmp	r5, r6
   1b30c:	b292      	uxth	r2, r2
   1b30e:	d1f6      	bne.n	1b2fe <bt_gatt_attr_get_handle+0x56>
   1b310:	e7f2      	b.n	1b2f8 <bt_gatt_attr_get_handle+0x50>
   1b312:	2500      	movs	r5, #0
   1b314:	e7f8      	b.n	1b308 <bt_gatt_attr_get_handle+0x60>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b316:	d3e4      	bcc.n	1b2e2 <bt_gatt_attr_get_handle+0x3a>
}
   1b318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b31c:	4610      	mov	r0, r2
   1b31e:	e7fb      	b.n	1b318 <bt_gatt_attr_get_handle+0x70>
   1b320:	00029f78 	.word	0x00029f78
   1b324:	0002d225 	.word	0x0002d225
   1b328:	0002d1f5 	.word	0x0002d1f5
   1b32c:	0002ae37 	.word	0x0002ae37
   1b330:	0002b3ac 	.word	0x0002b3ac
   1b334:	00029f90 	.word	0x00029f90

0001b338 <bt_gatt_foreach_attr_type>:
{
   1b338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b33c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   1b340:	9100      	str	r1, [sp, #0]
   1b342:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   1b344:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b348:	2d00      	cmp	r5, #0
   1b34a:	bf08      	it	eq
   1b34c:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1b34e:	4b2b      	ldr	r3, [pc, #172]	; (1b3fc <bt_gatt_foreach_attr_type+0xc4>)
   1b350:	881b      	ldrh	r3, [r3, #0]
   1b352:	4283      	cmp	r3, r0
{
   1b354:	4607      	mov	r7, r0
   1b356:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1b358:	d232      	bcs.n	1b3c0 <bt_gatt_foreach_attr_type+0x88>
}
   1b35a:	b003      	add	sp, #12
   1b35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1b360:	5889      	ldr	r1, [r1, r2]
   1b362:	9301      	str	r3, [sp, #4]
   1b364:	4640      	mov	r0, r8
   1b366:	f00c fb97 	bl	27a98 <bt_uuid_cmp>
   1b36a:	9b01      	ldr	r3, [sp, #4]
   1b36c:	b190      	cbz	r0, 1b394 <bt_gatt_foreach_attr_type+0x5c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1b36e:	3401      	adds	r4, #1
   1b370:	f10a 0a01 	add.w	sl, sl, #1
   1b374:	b2a4      	uxth	r4, r4
   1b376:	6873      	ldr	r3, [r6, #4]
   1b378:	4553      	cmp	r3, sl
   1b37a:	d92c      	bls.n	1b3d6 <bt_gatt_foreach_attr_type+0x9e>
	if (handle > end_handle) {
   1b37c:	9b00      	ldr	r3, [sp, #0]
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1b37e:	6831      	ldr	r1, [r6, #0]
	if (handle > end_handle) {
   1b380:	429c      	cmp	r4, r3
   1b382:	d8ea      	bhi.n	1b35a <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   1b384:	42bc      	cmp	r4, r7
   1b386:	d3f2      	bcc.n	1b36e <bt_gatt_foreach_attr_type+0x36>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1b388:	fb0b f20a 	mul.w	r2, fp, sl
   1b38c:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1b38e:	f1b8 0f00 	cmp.w	r8, #0
   1b392:	d1e5      	bne.n	1b360 <bt_gatt_foreach_attr_type+0x28>
	if (attr_data && attr_data != attr->user_data) {
   1b394:	f1b9 0f00 	cmp.w	r9, #0
   1b398:	d10b      	bne.n	1b3b2 <bt_gatt_foreach_attr_type+0x7a>
	*num_matches -= 1;
   1b39a:	3d01      	subs	r5, #1
   1b39c:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1b39e:	4618      	mov	r0, r3
   1b3a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1b3a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1b3a4:	4621      	mov	r1, r4
   1b3a6:	4798      	blx	r3
	if (!*num_matches) {
   1b3a8:	2d00      	cmp	r5, #0
   1b3aa:	d0d6      	beq.n	1b35a <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1b3ac:	2800      	cmp	r0, #0
   1b3ae:	d1de      	bne.n	1b36e <bt_gatt_foreach_attr_type+0x36>
   1b3b0:	e7d3      	b.n	1b35a <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   1b3b2:	68da      	ldr	r2, [r3, #12]
   1b3b4:	4591      	cmp	r9, r2
   1b3b6:	d1da      	bne.n	1b36e <bt_gatt_foreach_attr_type+0x36>
   1b3b8:	e7ef      	b.n	1b39a <bt_gatt_foreach_attr_type+0x62>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1b3ba:	f04f 0a00 	mov.w	sl, #0
   1b3be:	e7da      	b.n	1b376 <bt_gatt_foreach_attr_type+0x3e>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b3c0:	4e0f      	ldr	r6, [pc, #60]	; (1b400 <bt_gatt_foreach_attr_type+0xc8>)
		uint16_t handle = 1;
   1b3c2:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1b3c4:	f04f 0b14 	mov.w	fp, #20
   1b3c8:	e006      	b.n	1b3d8 <bt_gatt_foreach_attr_type+0xa0>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b3ca:	d2c6      	bcs.n	1b35a <bt_gatt_foreach_attr_type+0x22>
			if (handle + static_svc->attr_count < start_handle) {
   1b3cc:	6873      	ldr	r3, [r6, #4]
   1b3ce:	4423      	add	r3, r4
   1b3d0:	42bb      	cmp	r3, r7
   1b3d2:	d2f2      	bcs.n	1b3ba <bt_gatt_foreach_attr_type+0x82>
				handle += static_svc->attr_count;
   1b3d4:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1b3d6:	3608      	adds	r6, #8
   1b3d8:	4b0a      	ldr	r3, [pc, #40]	; (1b404 <bt_gatt_foreach_attr_type+0xcc>)
   1b3da:	429e      	cmp	r6, r3
   1b3dc:	d9f5      	bls.n	1b3ca <bt_gatt_foreach_attr_type+0x92>
   1b3de:	490a      	ldr	r1, [pc, #40]	; (1b408 <bt_gatt_foreach_attr_type+0xd0>)
   1b3e0:	4a0a      	ldr	r2, [pc, #40]	; (1b40c <bt_gatt_foreach_attr_type+0xd4>)
   1b3e2:	480b      	ldr	r0, [pc, #44]	; (1b410 <bt_gatt_foreach_attr_type+0xd8>)
   1b3e4:	f240 73ed 	movw	r3, #2029	; 0x7ed
   1b3e8:	f00b fef8 	bl	271dc <assert_print>
   1b3ec:	4809      	ldr	r0, [pc, #36]	; (1b414 <bt_gatt_foreach_attr_type+0xdc>)
   1b3ee:	f00b fef5 	bl	271dc <assert_print>
   1b3f2:	4806      	ldr	r0, [pc, #24]	; (1b40c <bt_gatt_foreach_attr_type+0xd4>)
   1b3f4:	f240 71ed 	movw	r1, #2029	; 0x7ed
   1b3f8:	f00b fee9 	bl	271ce <assert_post_action>
   1b3fc:	20004312 	.word	0x20004312
   1b400:	00029f78 	.word	0x00029f78
   1b404:	00029f90 	.word	0x00029f90
   1b408:	0002d225 	.word	0x0002d225
   1b40c:	0002d1f5 	.word	0x0002d1f5
   1b410:	0002ae37 	.word	0x0002ae37
   1b414:	0002b3ac 	.word	0x0002b3ac

0001b418 <db_hash_gen>:
{
   1b418:	b510      	push	{r4, lr}
   1b41a:	b0ce      	sub	sp, #312	; 0x138
	uint8_t key[16] = {};
   1b41c:	2400      	movs	r4, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1b41e:	aa22      	add	r2, sp, #136	; 0x88
   1b420:	4669      	mov	r1, sp
   1b422:	a80a      	add	r0, sp, #40	; 0x28
	uint8_t key[16] = {};
   1b424:	e9cd 4400 	strd	r4, r4, [sp]
   1b428:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1b42c:	f00c f9dd 	bl	277ea <tc_cmac_setup>
   1b430:	b958      	cbnz	r0, 1b44a <db_hash_gen+0x32>
		LOG_ERR("Unable to setup AES CMAC");
   1b432:	4b15      	ldr	r3, [pc, #84]	; (1b488 <db_hash_gen+0x70>)
		LOG_ERR("Unable to calculate hash");
   1b434:	9309      	str	r3, [sp, #36]	; 0x24
   1b436:	4815      	ldr	r0, [pc, #84]	; (1b48c <db_hash_gen+0x74>)
   1b438:	2302      	movs	r3, #2
   1b43a:	aa08      	add	r2, sp, #32
   1b43c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b440:	9308      	str	r3, [sp, #32]
   1b442:	f00d fb0b 	bl	28a5c <z_log_msg_static_create.constprop.0>
}
   1b446:	b04e      	add	sp, #312	; 0x138
   1b448:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1b44a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b44e:	2001      	movs	r0, #1
   1b450:	4a0f      	ldr	r2, [pc, #60]	; (1b490 <db_hash_gen+0x78>)
   1b452:	ab0a      	add	r3, sp, #40	; 0x28
   1b454:	f00d fc40 	bl	28cd8 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1b458:	480e      	ldr	r0, [pc, #56]	; (1b494 <db_hash_gen+0x7c>)
   1b45a:	a90a      	add	r1, sp, #40	; 0x28
   1b45c:	f00c fa5a 	bl	27914 <tc_cmac_final>
   1b460:	b908      	cbnz	r0, 1b466 <db_hash_gen+0x4e>
		LOG_ERR("Unable to calculate hash");
   1b462:	4b0d      	ldr	r3, [pc, #52]	; (1b498 <db_hash_gen+0x80>)
   1b464:	e7e6      	b.n	1b434 <db_hash_gen+0x1c>
   1b466:	4b0b      	ldr	r3, [pc, #44]	; (1b494 <db_hash_gen+0x7c>)
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   1b468:	4621      	mov	r1, r4
   1b46a:	f103 0210 	add.w	r2, r3, #16
   1b46e:	3101      	adds	r1, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
   1b470:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1b472:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1b476:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   1b47a:	2908      	cmp	r1, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1b47c:	7010      	strb	r0, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1b47e:	d1f6      	bne.n	1b46e <db_hash_gen+0x56>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b480:	4806      	ldr	r0, [pc, #24]	; (1b49c <db_hash_gen+0x84>)
   1b482:	f00d fad9 	bl	28a38 <atomic_or>
   1b486:	e7de      	b.n	1b446 <db_hash_gen+0x2e>
   1b488:	0002d254 	.word	0x0002d254
   1b48c:	00029fd0 	.word	0x00029fd0
   1b490:	00028977 	.word	0x00028977
   1b494:	200021d0 	.word	0x200021d0
   1b498:	0002d26d 	.word	0x0002d26d
   1b49c:	20002288 	.word	0x20002288

0001b4a0 <db_hash_read>:
{
   1b4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1b4a2:	491a      	ldr	r1, [pc, #104]	; (1b50c <db_hash_read+0x6c>)
{
   1b4a4:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1b4a8:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1b4aa:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1b4ae:	4615      	mov	r5, r2
   1b4b0:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1b4b2:	f006 fa5d 	bl	21970 <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1b4b6:	4816      	ldr	r0, [pc, #88]	; (1b510 <db_hash_read+0x70>)
   1b4b8:	f00d fab8 	bl	28a2c <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1b4bc:	0701      	lsls	r1, r0, #28
   1b4be:	d401      	bmi.n	1b4c4 <db_hash_read+0x24>
		db_hash_gen();
   1b4c0:	f7ff ffaa 	bl	1b418 <db_hash_gen>
	cfg = find_cf_cfg(conn);
   1b4c4:	4620      	mov	r0, r4
   1b4c6:	f7ff fc75 	bl	1adb4 <find_cf_cfg>
	if (cfg &&
   1b4ca:	b168      	cbz	r0, 1b4e8 <db_hash_read+0x48>
   1b4cc:	7a03      	ldrb	r3, [r0, #8]
   1b4ce:	07da      	lsls	r2, r3, #31
   1b4d0:	d50a      	bpl.n	1b4e8 <db_hash_read+0x48>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1b4d2:	f100 040c 	add.w	r4, r0, #12
   1b4d6:	4620      	mov	r0, r4
   1b4d8:	f00d faa8 	bl	28a2c <atomic_get>
	    CF_ROBUST_CACHING(cfg) &&
   1b4dc:	07c3      	lsls	r3, r0, #31
   1b4de:	d403      	bmi.n	1b4e8 <db_hash_read+0x48>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b4e0:	2102      	movs	r1, #2
   1b4e2:	4620      	mov	r0, r4
   1b4e4:	f00d faa8 	bl	28a38 <atomic_or>
	if (offset > value_len) {
   1b4e8:	2e10      	cmp	r6, #16
   1b4ea:	d80c      	bhi.n	1b506 <db_hash_read+0x66>
	len = MIN(buf_len, value_len - offset);
   1b4ec:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   1b4f0:	4908      	ldr	r1, [pc, #32]	; (1b514 <db_hash_read+0x74>)
	len = MIN(buf_len, value_len - offset);
   1b4f2:	42bc      	cmp	r4, r7
   1b4f4:	bfa8      	it	ge
   1b4f6:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1b4f8:	4622      	mov	r2, r4
   1b4fa:	4431      	add	r1, r6
   1b4fc:	4628      	mov	r0, r5
   1b4fe:	f00c fa95 	bl	27a2c <memcpy>
}
   1b502:	4620      	mov	r0, r4
   1b504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1b506:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1b50a:	e7fa      	b.n	1b502 <db_hash_read+0x62>
   1b50c:	20002210 	.word	0x20002210
   1b510:	20002288 	.word	0x20002288
   1b514:	200021d0 	.word	0x200021d0

0001b518 <db_hash_process>:
{
   1b518:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1b51a:	4805      	ldr	r0, [pc, #20]	; (1b530 <db_hash_process+0x18>)
   1b51c:	f00d fa86 	bl	28a2c <atomic_get>
	if (new_hash) {
   1b520:	0703      	lsls	r3, r0, #28
   1b522:	d403      	bmi.n	1b52c <db_hash_process+0x14>
}
   1b524:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		db_hash_gen();
   1b528:	f7ff bf76 	b.w	1b418 <db_hash_gen>
}
   1b52c:	bd08      	pop	{r3, pc}
   1b52e:	bf00      	nop
   1b530:	20002288 	.word	0x20002288

0001b534 <bt_gatt_attr_next>:
{
   1b534:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   1b536:	2300      	movs	r3, #0
   1b538:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1b53a:	f7ff feb5 	bl	1b2a8 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1b53e:	1c41      	adds	r1, r0, #1
   1b540:	b289      	uxth	r1, r1
   1b542:	4608      	mov	r0, r1
   1b544:	4a03      	ldr	r2, [pc, #12]	; (1b554 <bt_gatt_attr_next+0x20>)
   1b546:	ab01      	add	r3, sp, #4
   1b548:	f00d fbc6 	bl	28cd8 <bt_gatt_foreach_attr>
}
   1b54c:	9801      	ldr	r0, [sp, #4]
   1b54e:	b003      	add	sp, #12
   1b550:	f85d fb04 	ldr.w	pc, [sp], #4
   1b554:	00028927 	.word	0x00028927

0001b558 <bt_gatt_is_subscribed>:

bool bt_gatt_is_subscribed(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, uint16_t ccc_type)
{
   1b558:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1b55c:	460c      	mov	r4, r1
   1b55e:	4616      	mov	r6, r2
	const struct _bt_gatt_ccc *ccc;

	__ASSERT(conn, "invalid parameter\n");
   1b560:	4605      	mov	r5, r0
   1b562:	b970      	cbnz	r0, 1b582 <bt_gatt_is_subscribed+0x2a>
   1b564:	4960      	ldr	r1, [pc, #384]	; (1b6e8 <bt_gatt_is_subscribed+0x190>)
   1b566:	4a61      	ldr	r2, [pc, #388]	; (1b6ec <bt_gatt_is_subscribed+0x194>)
   1b568:	4861      	ldr	r0, [pc, #388]	; (1b6f0 <bt_gatt_is_subscribed+0x198>)
   1b56a:	f640 532e 	movw	r3, #3374	; 0xd2e
   1b56e:	f00b fe35 	bl	271dc <assert_print>
   1b572:	4860      	ldr	r0, [pc, #384]	; (1b6f4 <bt_gatt_is_subscribed+0x19c>)
   1b574:	f00b fe32 	bl	271dc <assert_print>
   1b578:	f640 512e 	movw	r1, #3374	; 0xd2e
	__ASSERT(attr, "invalid parameter\n");
   1b57c:	485b      	ldr	r0, [pc, #364]	; (1b6ec <bt_gatt_is_subscribed+0x194>)
   1b57e:	f00b fe26 	bl	271ce <assert_post_action>
   1b582:	b961      	cbnz	r1, 1b59e <bt_gatt_is_subscribed+0x46>
   1b584:	495c      	ldr	r1, [pc, #368]	; (1b6f8 <bt_gatt_is_subscribed+0x1a0>)
   1b586:	4a59      	ldr	r2, [pc, #356]	; (1b6ec <bt_gatt_is_subscribed+0x194>)
   1b588:	4859      	ldr	r0, [pc, #356]	; (1b6f0 <bt_gatt_is_subscribed+0x198>)
   1b58a:	f640 532f 	movw	r3, #3375	; 0xd2f
   1b58e:	f00b fe25 	bl	271dc <assert_print>
   1b592:	4858      	ldr	r0, [pc, #352]	; (1b6f4 <bt_gatt_is_subscribed+0x19c>)
   1b594:	f00b fe22 	bl	271dc <assert_print>
   1b598:	f640 512f 	movw	r1, #3375	; 0xd2f
   1b59c:	e7ee      	b.n	1b57c <bt_gatt_is_subscribed+0x24>

	if (conn->state != BT_CONN_CONNECTED) {
   1b59e:	7a83      	ldrb	r3, [r0, #10]
   1b5a0:	2b07      	cmp	r3, #7
   1b5a2:	d110      	bne.n	1b5c6 <bt_gatt_is_subscribed+0x6e>
		return false;
	}

	/* Check if attribute is a characteristic declaration */
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   1b5a4:	2300      	movs	r3, #0
   1b5a6:	f88d 300c 	strb.w	r3, [sp, #12]
   1b5aa:	6820      	ldr	r0, [r4, #0]
   1b5ac:	f642 0303 	movw	r3, #10243	; 0x2803
   1b5b0:	a903      	add	r1, sp, #12
   1b5b2:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b5b6:	f00c fa6f 	bl	27a98 <bt_uuid_cmp>
   1b5ba:	b9d0      	cbnz	r0, 1b5f2 <bt_gatt_is_subscribed+0x9a>
		struct bt_gatt_chrc *chrc = attr->user_data;

		if (!(chrc->properties &
   1b5bc:	68e3      	ldr	r3, [r4, #12]
   1b5be:	799b      	ldrb	r3, [r3, #6]
   1b5c0:	f013 0f30 	tst.w	r3, #48	; 0x30
   1b5c4:	d103      	bne.n	1b5ce <bt_gatt_is_subscribed+0x76>
		return false;
   1b5c6:	2000      	movs	r0, #0
			return true;
		}
	}

	return false;
}
   1b5c8:	b004      	add	sp, #16
   1b5ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   1b5ce:	4620      	mov	r0, r4
   1b5d0:	f7ff ffb0 	bl	1b534 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   1b5d4:	4604      	mov	r4, r0
   1b5d6:	b960      	cbnz	r0, 1b5f2 <bt_gatt_is_subscribed+0x9a>
   1b5d8:	4947      	ldr	r1, [pc, #284]	; (1b6f8 <bt_gatt_is_subscribed+0x1a0>)
   1b5da:	4a44      	ldr	r2, [pc, #272]	; (1b6ec <bt_gatt_is_subscribed+0x194>)
   1b5dc:	4844      	ldr	r0, [pc, #272]	; (1b6f0 <bt_gatt_is_subscribed+0x198>)
   1b5de:	f44f 6354 	mov.w	r3, #3392	; 0xd40
   1b5e2:	f00b fdfb 	bl	271dc <assert_print>
   1b5e6:	4845      	ldr	r0, [pc, #276]	; (1b6fc <bt_gatt_is_subscribed+0x1a4>)
   1b5e8:	f00b fdf8 	bl	271dc <assert_print>
   1b5ec:	f44f 6154 	mov.w	r1, #3392	; 0xd40
   1b5f0:	e7c4      	b.n	1b57c <bt_gatt_is_subscribed+0x24>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1b5f2:	2300      	movs	r3, #0
   1b5f4:	6820      	ldr	r0, [r4, #0]
   1b5f6:	f88d 300c 	strb.w	r3, [sp, #12]
   1b5fa:	a903      	add	r1, sp, #12
   1b5fc:	f642 1302 	movw	r3, #10498	; 0x2902
   1b600:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b604:	f00c fa48 	bl	27a98 <bt_uuid_cmp>
   1b608:	b188      	cbz	r0, 1b62e <bt_gatt_is_subscribed+0xd6>
		attr = bt_gatt_attr_next(attr);
   1b60a:	4620      	mov	r0, r4
   1b60c:	f7ff ff92 	bl	1b534 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   1b610:	4604      	mov	r4, r0
   1b612:	b960      	cbnz	r0, 1b62e <bt_gatt_is_subscribed+0xd6>
   1b614:	4938      	ldr	r1, [pc, #224]	; (1b6f8 <bt_gatt_is_subscribed+0x1a0>)
   1b616:	4a35      	ldr	r2, [pc, #212]	; (1b6ec <bt_gatt_is_subscribed+0x194>)
   1b618:	4835      	ldr	r0, [pc, #212]	; (1b6f0 <bt_gatt_is_subscribed+0x198>)
   1b61a:	f640 5346 	movw	r3, #3398	; 0xd46
   1b61e:	f00b fddd 	bl	271dc <assert_print>
   1b622:	4836      	ldr	r0, [pc, #216]	; (1b6fc <bt_gatt_is_subscribed+0x1a4>)
   1b624:	f00b fdda 	bl	271dc <assert_print>
   1b628:	f640 5146 	movw	r1, #3398	; 0xd46
   1b62c:	e7a6      	b.n	1b57c <bt_gatt_is_subscribed+0x24>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1b62e:	2700      	movs	r7, #0
   1b630:	f642 1802 	movw	r8, #10498	; 0x2902
   1b634:	6820      	ldr	r0, [r4, #0]
   1b636:	f88d 7000 	strb.w	r7, [sp]
   1b63a:	4669      	mov	r1, sp
   1b63c:	f8ad 8002 	strh.w	r8, [sp, #2]
   1b640:	f00c fa2a 	bl	27a98 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1b644:	bb20      	cbnz	r0, 1b690 <bt_gatt_is_subscribed+0x138>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1b646:	2300      	movs	r3, #0
   1b648:	6820      	ldr	r0, [r4, #0]
   1b64a:	f88d 300c 	strb.w	r3, [sp, #12]
   1b64e:	a903      	add	r1, sp, #12
   1b650:	f642 1302 	movw	r3, #10498	; 0x2902
   1b654:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b658:	f00c fa1e 	bl	27a98 <bt_uuid_cmp>
   1b65c:	2800      	cmp	r0, #0
   1b65e:	d1b2      	bne.n	1b5c6 <bt_gatt_is_subscribed+0x6e>
	ccc = attr->user_data;
   1b660:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   1b662:	4622      	mov	r2, r4
   1b664:	4628      	mov	r0, r5
   1b666:	f812 1b01 	ldrb.w	r1, [r2], #1
   1b66a:	f00c fca9 	bl	27fc0 <bt_conn_is_peer_addr_le>
   1b66e:	b110      	cbz	r0, 1b676 <bt_gatt_is_subscribed+0x11e>
   1b670:	8923      	ldrh	r3, [r4, #8]
   1b672:	421e      	tst	r6, r3
   1b674:	d10a      	bne.n	1b68c <bt_gatt_is_subscribed+0x134>
   1b676:	7aa1      	ldrb	r1, [r4, #10]
   1b678:	f104 020b 	add.w	r2, r4, #11
   1b67c:	4628      	mov	r0, r5
   1b67e:	f00c fc9f 	bl	27fc0 <bt_conn_is_peer_addr_le>
   1b682:	2800      	cmp	r0, #0
   1b684:	d09f      	beq.n	1b5c6 <bt_gatt_is_subscribed+0x6e>
   1b686:	8a63      	ldrh	r3, [r4, #18]
   1b688:	421e      	tst	r6, r3
   1b68a:	d09c      	beq.n	1b5c6 <bt_gatt_is_subscribed+0x6e>
			return true;
   1b68c:	2001      	movs	r0, #1
   1b68e:	e79b      	b.n	1b5c8 <bt_gatt_is_subscribed+0x70>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1b690:	6820      	ldr	r0, [r4, #0]
   1b692:	f88d 7004 	strb.w	r7, [sp, #4]
   1b696:	f642 0303 	movw	r3, #10243	; 0x2803
   1b69a:	a901      	add	r1, sp, #4
   1b69c:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b6a0:	f00c f9fa 	bl	27a98 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1b6a4:	2800      	cmp	r0, #0
   1b6a6:	d0ce      	beq.n	1b646 <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1b6a8:	6820      	ldr	r0, [r4, #0]
   1b6aa:	f88d 7008 	strb.w	r7, [sp, #8]
   1b6ae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1b6b2:	a902      	add	r1, sp, #8
   1b6b4:	f8ad 300a 	strh.w	r3, [sp, #10]
   1b6b8:	f00c f9ee 	bl	27a98 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1b6bc:	2800      	cmp	r0, #0
   1b6be:	d0c2      	beq.n	1b646 <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1b6c0:	6820      	ldr	r0, [r4, #0]
   1b6c2:	f88d 700c 	strb.w	r7, [sp, #12]
   1b6c6:	f642 0301 	movw	r3, #10241	; 0x2801
   1b6ca:	a903      	add	r1, sp, #12
   1b6cc:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b6d0:	f00c f9e2 	bl	27a98 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1b6d4:	2800      	cmp	r0, #0
   1b6d6:	d0b6      	beq.n	1b646 <bt_gatt_is_subscribed+0xee>
		attr = bt_gatt_attr_next(attr);
   1b6d8:	4620      	mov	r0, r4
   1b6da:	f7ff ff2b 	bl	1b534 <bt_gatt_attr_next>
		if (!attr) {
   1b6de:	4604      	mov	r4, r0
   1b6e0:	2800      	cmp	r0, #0
   1b6e2:	d1a7      	bne.n	1b634 <bt_gatt_is_subscribed+0xdc>
   1b6e4:	e76f      	b.n	1b5c6 <bt_gatt_is_subscribed+0x6e>
   1b6e6:	bf00      	nop
   1b6e8:	0002cd6c 	.word	0x0002cd6c
   1b6ec:	0002d1f5 	.word	0x0002d1f5
   1b6f0:	0002ae37 	.word	0x0002ae37
   1b6f4:	0002d286 	.word	0x0002d286
   1b6f8:	0002d29b 	.word	0x0002d29b
   1b6fc:	0002d2a0 	.word	0x0002d2a0

0001b700 <gatt_indicate>:
{
   1b700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b704:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1b706:	6851      	ldr	r1, [r2, #4]
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   1b708:	8a4f      	ldrh	r7, [r1, #18]
   1b70a:	f017 0714 	ands.w	r7, r7, #20
{
   1b70e:	b086      	sub	sp, #24
   1b710:	4680      	mov	r8, r0
   1b712:	4615      	mov	r5, r2
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   1b714:	d00f      	beq.n	1b736 <gatt_indicate+0x36>
		LOG_WRN("Link is not encrypted");
   1b716:	4b33      	ldr	r3, [pc, #204]	; (1b7e4 <gatt_indicate+0xe4>)
   1b718:	9305      	str	r3, [sp, #20]
   1b71a:	4833      	ldr	r0, [pc, #204]	; (1b7e8 <gatt_indicate+0xe8>)
   1b71c:	2302      	movs	r3, #2
   1b71e:	aa04      	add	r2, sp, #16
   1b720:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return -EPERM;
   1b724:	f04f 35ff 	mov.w	r5, #4294967295
		LOG_WRN("Link is not encrypted");
   1b728:	9304      	str	r3, [sp, #16]
   1b72a:	f00d f997 	bl	28a5c <z_log_msg_static_create.constprop.0>
}
   1b72e:	4628      	mov	r0, r5
   1b730:	b006      	add	sp, #24
   1b732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   1b736:	2202      	movs	r2, #2
   1b738:	f7ff ff0e 	bl	1b558 <bt_gatt_is_subscribed>
   1b73c:	b960      	cbnz	r0, 1b758 <gatt_indicate+0x58>
			LOG_WRN("Device is not subscribed to characteristic");
   1b73e:	4b2b      	ldr	r3, [pc, #172]	; (1b7ec <gatt_indicate+0xec>)
   1b740:	9305      	str	r3, [sp, #20]
   1b742:	4829      	ldr	r0, [pc, #164]	; (1b7e8 <gatt_indicate+0xe8>)
   1b744:	2302      	movs	r3, #2
   1b746:	aa04      	add	r2, sp, #16
   1b748:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1b74c:	9304      	str	r3, [sp, #16]
			return -EINVAL;
   1b74e:	f06f 0515 	mvn.w	r5, #21
			LOG_WRN("Device is not subscribed to characteristic");
   1b752:	f00d f983 	bl	28a5c <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1b756:	e7ea      	b.n	1b72e <gatt_indicate+0x2e>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1b758:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1b75c:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1b75e:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1b760:	f7ff f994 	bl	1aa8c <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1b764:	3602      	adds	r6, #2
	if (!req) {
   1b766:	4604      	mov	r4, r0
   1b768:	b1b0      	cbz	r0, 1b798 <gatt_indicate+0x98>
	req->func = func;
   1b76a:	4b21      	ldr	r3, [pc, #132]	; (1b7f0 <gatt_indicate+0xf0>)
   1b76c:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1b76e:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1b770:	4632      	mov	r2, r6
   1b772:	211d      	movs	r1, #29
   1b774:	4640      	mov	r0, r8
   1b776:	f7fe feb5 	bl	1a4e4 <bt_att_create_pdu>
	if (!buf) {
   1b77a:	4606      	mov	r6, r0
   1b77c:	b978      	cbnz	r0, 1b79e <gatt_indicate+0x9e>
		LOG_WRN("No buffer available to send indication");
   1b77e:	4b1d      	ldr	r3, [pc, #116]	; (1b7f4 <gatt_indicate+0xf4>)
   1b780:	4819      	ldr	r0, [pc, #100]	; (1b7e8 <gatt_indicate+0xe8>)
   1b782:	9305      	str	r3, [sp, #20]
   1b784:	aa04      	add	r2, sp, #16
   1b786:	2302      	movs	r3, #2
   1b788:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1b78c:	9304      	str	r3, [sp, #16]
   1b78e:	f00d f965 	bl	28a5c <z_log_msg_static_create.constprop.0>
		bt_att_req_free(req);
   1b792:	4620      	mov	r0, r4
   1b794:	f7ff f99c 	bl	1aad0 <bt_att_req_free>
		return -ENOMEM;
   1b798:	f06f 050b 	mvn.w	r5, #11
   1b79c:	e7c7      	b.n	1b72e <gatt_indicate+0x2e>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   1b79e:	2301      	movs	r3, #1
   1b7a0:	463a      	mov	r2, r7
   1b7a2:	4639      	mov	r1, r7
	return net_buf_simple_add(&buf->b, len);
   1b7a4:	f106 0a0c 	add.w	sl, r6, #12
   1b7a8:	f00d f8b6 	bl	28918 <bt_att_set_tx_meta_data>
   1b7ac:	2102      	movs	r1, #2
   1b7ae:	4650      	mov	r0, sl
   1b7b0:	f000 fe5e 	bl	1c470 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1b7b4:	4607      	mov	r7, r0
   1b7b6:	4650      	mov	r0, sl
   1b7b8:	f827 9b02 	strh.w	r9, [r7], #2
   1b7bc:	8aa9      	ldrh	r1, [r5, #20]
   1b7be:	f000 fe57 	bl	1c470 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1b7c2:	8aaa      	ldrh	r2, [r5, #20]
   1b7c4:	6929      	ldr	r1, [r5, #16]
   1b7c6:	4638      	mov	r0, r7
   1b7c8:	f00c f930 	bl	27a2c <memcpy>
	req->buf = buf;
   1b7cc:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   1b7ce:	4621      	mov	r1, r4
   1b7d0:	4640      	mov	r0, r8
   1b7d2:	f7ff fab9 	bl	1ad48 <bt_att_req_send>
	if (err) {
   1b7d6:	4605      	mov	r5, r0
   1b7d8:	2800      	cmp	r0, #0
   1b7da:	d0a8      	beq.n	1b72e <gatt_indicate+0x2e>
		bt_att_req_free(req);
   1b7dc:	4620      	mov	r0, r4
   1b7de:	f7ff f977 	bl	1aad0 <bt_att_req_free>
   1b7e2:	e7a4      	b.n	1b72e <gatt_indicate+0x2e>
   1b7e4:	0002d2b6 	.word	0x0002d2b6
   1b7e8:	00029fd0 	.word	0x00029fd0
   1b7ec:	0002d2cc 	.word	0x0002d2cc
   1b7f0:	00028949 	.word	0x00028949
   1b7f4:	0002d2f7 	.word	0x0002d2f7

0001b7f8 <bt_gatt_indicate>:
{
   1b7f8:	b530      	push	{r4, r5, lr}
   1b7fa:	4605      	mov	r5, r0
   1b7fc:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   1b7fe:	460c      	mov	r4, r1
   1b800:	b971      	cbnz	r1, 1b820 <bt_gatt_indicate+0x28>
   1b802:	4946      	ldr	r1, [pc, #280]	; (1b91c <bt_gatt_indicate+0x124>)
   1b804:	4a46      	ldr	r2, [pc, #280]	; (1b920 <bt_gatt_indicate+0x128>)
   1b806:	4847      	ldr	r0, [pc, #284]	; (1b924 <bt_gatt_indicate+0x12c>)
   1b808:	f640 33da 	movw	r3, #3034	; 0xbda
   1b80c:	f00b fce6 	bl	271dc <assert_print>
   1b810:	4845      	ldr	r0, [pc, #276]	; (1b928 <bt_gatt_indicate+0x130>)
   1b812:	f00b fce3 	bl	271dc <assert_print>
   1b816:	f640 31da 	movw	r1, #3034	; 0xbda
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1b81a:	4841      	ldr	r0, [pc, #260]	; (1b920 <bt_gatt_indicate+0x128>)
   1b81c:	f00b fcd7 	bl	271ce <assert_post_action>
   1b820:	684b      	ldr	r3, [r1, #4]
   1b822:	b973      	cbnz	r3, 1b842 <bt_gatt_indicate+0x4a>
   1b824:	680b      	ldr	r3, [r1, #0]
   1b826:	b963      	cbnz	r3, 1b842 <bt_gatt_indicate+0x4a>
   1b828:	4940      	ldr	r1, [pc, #256]	; (1b92c <bt_gatt_indicate+0x134>)
   1b82a:	4a3d      	ldr	r2, [pc, #244]	; (1b920 <bt_gatt_indicate+0x128>)
   1b82c:	483d      	ldr	r0, [pc, #244]	; (1b924 <bt_gatt_indicate+0x12c>)
   1b82e:	f640 33db 	movw	r3, #3035	; 0xbdb
   1b832:	f00b fcd3 	bl	271dc <assert_print>
   1b836:	483c      	ldr	r0, [pc, #240]	; (1b928 <bt_gatt_indicate+0x130>)
   1b838:	f00b fcd0 	bl	271dc <assert_print>
   1b83c:	f640 31db 	movw	r1, #3035	; 0xbdb
   1b840:	e7eb      	b.n	1b81a <bt_gatt_indicate+0x22>
   1b842:	483b      	ldr	r0, [pc, #236]	; (1b930 <bt_gatt_indicate+0x138>)
   1b844:	f00d f8f2 	bl	28a2c <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1b848:	0742      	lsls	r2, r0, #29
   1b84a:	d561      	bpl.n	1b910 <bt_gatt_indicate+0x118>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1b84c:	b115      	cbz	r5, 1b854 <bt_gatt_indicate+0x5c>
   1b84e:	7aab      	ldrb	r3, [r5, #10]
   1b850:	2b07      	cmp	r3, #7
   1b852:	d160      	bne.n	1b916 <bt_gatt_indicate+0x11e>
	data.attr = params->attr;
   1b854:	6860      	ldr	r0, [r4, #4]
   1b856:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1b858:	f7ff fd26 	bl	1b2a8 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1b85c:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1b85e:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1b862:	b33a      	cbz	r2, 1b8b4 <bt_gatt_indicate+0xbc>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1b864:	a905      	add	r1, sp, #20
   1b866:	9102      	str	r1, [sp, #8]
   1b868:	4932      	ldr	r1, [pc, #200]	; (1b934 <bt_gatt_indicate+0x13c>)
   1b86a:	9101      	str	r1, [sp, #4]
   1b86c:	2101      	movs	r1, #1
	found->attr = NULL;
   1b86e:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1b870:	9100      	str	r1, [sp, #0]
   1b872:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1b876:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1b878:	f7ff fd5e 	bl	1b338 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1b87c:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1b87e:	b91b      	cbnz	r3, 1b888 <bt_gatt_indicate+0x90>
			return -ENOENT;
   1b880:	f06f 0001 	mvn.w	r0, #1
}
   1b884:	b00b      	add	sp, #44	; 0x2c
   1b886:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1b888:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1b88a:	9b05      	ldr	r3, [sp, #20]
   1b88c:	6818      	ldr	r0, [r3, #0]
   1b88e:	2300      	movs	r3, #0
   1b890:	f88d 3010 	strb.w	r3, [sp, #16]
   1b894:	a904      	add	r1, sp, #16
   1b896:	f642 0303 	movw	r3, #10243	; 0x2803
   1b89a:	f8ad 3012 	strh.w	r3, [sp, #18]
   1b89e:	f00c f8fb 	bl	27a98 <bt_uuid_cmp>
   1b8a2:	b970      	cbnz	r0, 1b8c2 <bt_gatt_indicate+0xca>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1b8a4:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1b8a6:	68c3      	ldr	r3, [r0, #12]
   1b8a8:	799b      	ldrb	r3, [r3, #6]
   1b8aa:	069b      	lsls	r3, r3, #26
   1b8ac:	d405      	bmi.n	1b8ba <bt_gatt_indicate+0xc2>
			return -EINVAL;
   1b8ae:	f06f 0015 	mvn.w	r0, #21
   1b8b2:	e7e7      	b.n	1b884 <bt_gatt_indicate+0x8c>
		if (!data.handle) {
   1b8b4:	2800      	cmp	r0, #0
   1b8b6:	d1e8      	bne.n	1b88a <bt_gatt_indicate+0x92>
   1b8b8:	e7e2      	b.n	1b880 <bt_gatt_indicate+0x88>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1b8ba:	f00d f9bf 	bl	28c3c <bt_gatt_attr_value_handle>
   1b8be:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   1b8c2:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1b8c6:	b13d      	cbz	r5, 1b8d8 <bt_gatt_indicate+0xe0>
		params->_ref = 1;
   1b8c8:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1b8ca:	4601      	mov	r1, r0
		params->_ref = 1;
   1b8cc:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1b8ce:	4622      	mov	r2, r4
   1b8d0:	4628      	mov	r0, r5
   1b8d2:	f7ff ff15 	bl	1b700 <gatt_indicate>
   1b8d6:	e7d5      	b.n	1b884 <bt_gatt_indicate+0x8c>
	data.err = -ENOTCONN;
   1b8d8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1b8dc:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1b8de:	2302      	movs	r3, #2
   1b8e0:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b8e4:	f642 1302 	movw	r3, #10498	; 0x2902
   1b8e8:	f8ad 3012 	strh.w	r3, [sp, #18]
   1b8ec:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1b8ee:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b8f0:	9302      	str	r3, [sp, #8]
   1b8f2:	4b11      	ldr	r3, [pc, #68]	; (1b938 <bt_gatt_indicate+0x140>)
   1b8f4:	9301      	str	r3, [sp, #4]
   1b8f6:	2301      	movs	r3, #1
   1b8f8:	9300      	str	r3, [sp, #0]
   1b8fa:	aa04      	add	r2, sp, #16
   1b8fc:	462b      	mov	r3, r5
   1b8fe:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   1b902:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b904:	f88d 5010 	strb.w	r5, [sp, #16]
   1b908:	f7ff fd16 	bl	1b338 <bt_gatt_foreach_attr_type>
	return data.err;
   1b90c:	9807      	ldr	r0, [sp, #28]
   1b90e:	e7b9      	b.n	1b884 <bt_gatt_indicate+0x8c>
		return -EAGAIN;
   1b910:	f06f 000a 	mvn.w	r0, #10
   1b914:	e7b6      	b.n	1b884 <bt_gatt_indicate+0x8c>
		return -ENOTCONN;
   1b916:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1b91a:	e7b3      	b.n	1b884 <bt_gatt_indicate+0x8c>
   1b91c:	0002d31e 	.word	0x0002d31e
   1b920:	0002d1f5 	.word	0x0002d1f5
   1b924:	0002ae37 	.word	0x0002ae37
   1b928:	0002d325 	.word	0x0002d325
   1b92c:	0002d33b 	.word	0x0002d33b
   1b930:	2000045c 	.word	0x2000045c
   1b934:	0002896f 	.word	0x0002896f
   1b938:	0001bbb1 	.word	0x0001bbb1

0001b93c <sc_process>:
{
   1b93c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1b93e:	f100 0430 	add.w	r4, r0, #48	; 0x30
{
   1b942:	4603      	mov	r3, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1b944:	f1a0 0120 	sub.w	r1, r0, #32
   1b948:	4620      	mov	r0, r4
   1b94a:	f00d f86f 	bl	28a2c <atomic_get>
   1b94e:	f3c0 0240 	ubfx	r2, r0, #1, #1
   1b952:	0780      	lsls	r0, r0, #30
   1b954:	d50e      	bpl.n	1b974 <sc_process+0x38>
   1b956:	491c      	ldr	r1, [pc, #112]	; (1b9c8 <sc_process+0x8c>)
   1b958:	4a1c      	ldr	r2, [pc, #112]	; (1b9cc <sc_process+0x90>)
   1b95a:	481d      	ldr	r0, [pc, #116]	; (1b9d0 <sc_process+0x94>)
   1b95c:	f240 532c 	movw	r3, #1324	; 0x52c
   1b960:	f00b fc3c 	bl	271dc <assert_print>
   1b964:	481b      	ldr	r0, [pc, #108]	; (1b9d4 <sc_process+0x98>)
   1b966:	f00b fc39 	bl	271dc <assert_print>
   1b96a:	4818      	ldr	r0, [pc, #96]	; (1b9cc <sc_process+0x90>)
   1b96c:	f240 512c 	movw	r1, #1324	; 0x52c
   1b970:	f00b fc2d 	bl	271ce <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1b974:	f853 0c08 	ldr.w	r0, [r3, #-8]
   1b978:	9001      	str	r0, [sp, #4]
   1b97a:	f3bf 8f5b 	dmb	ish
   1b97e:	e854 0f00 	ldrex	r0, [r4]
   1b982:	f020 0001 	bic.w	r0, r0, #1
   1b986:	e844 0500 	strex	r5, r0, [r4]
   1b98a:	2d00      	cmp	r5, #0
   1b98c:	d1f7      	bne.n	1b97e <sc_process+0x42>
   1b98e:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1b992:	4811      	ldr	r0, [pc, #68]	; (1b9d8 <sc_process+0x9c>)
   1b994:	f843 0c1c 	str.w	r0, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   1b998:	4810      	ldr	r0, [pc, #64]	; (1b9dc <sc_process+0xa0>)
   1b99a:	f843 0c18 	str.w	r0, [r3, #-24]
	sc->params.data = &sc_range[0];
   1b99e:	a801      	add	r0, sp, #4
   1b9a0:	f843 0c10 	str.w	r0, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   1b9a4:	2004      	movs	r0, #4
   1b9a6:	f823 0c0c 	strh.w	r0, [r3, #-12]
	sc->start = 0U;
   1b9aa:	f823 2c08 	strh.w	r2, [r3, #-8]
	sc->end = 0U;
   1b9ae:	f823 2c06 	strh.w	r2, [r3, #-6]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1b9b2:	4610      	mov	r0, r2
   1b9b4:	f7ff ff20 	bl	1b7f8 <bt_gatt_indicate>
   1b9b8:	b918      	cbnz	r0, 1b9c2 <sc_process+0x86>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b9ba:	2102      	movs	r1, #2
   1b9bc:	4620      	mov	r0, r4
   1b9be:	f00d f83b 	bl	28a38 <atomic_or>
}
   1b9c2:	b003      	add	sp, #12
   1b9c4:	bd30      	pop	{r4, r5, pc}
   1b9c6:	bf00      	nop
   1b9c8:	0002d358 	.word	0x0002d358
   1b9cc:	0002d1f5 	.word	0x0002d1f5
   1b9d0:	0002ae37 	.word	0x0002ae37
   1b9d4:	0002d389 	.word	0x0002d389
   1b9d8:	0002a4e0 	.word	0x0002a4e0
   1b9dc:	0001b199 	.word	0x0001b199

0001b9e0 <update_ccc>:
{
   1b9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b9e4:	b088      	sub	sp, #32
	struct bt_conn *conn = data->conn;
   1b9e6:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b9e8:	4b35      	ldr	r3, [pc, #212]	; (1bac0 <update_ccc+0xe0>)
   1b9ea:	6882      	ldr	r2, [r0, #8]
   1b9ec:	429a      	cmp	r2, r3
{
   1b9ee:	af00      	add	r7, sp, #0
   1b9f0:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b9f2:	d160      	bne.n	1bab6 <update_ccc+0xd6>
	ccc = attr->user_data;
   1b9f4:	68c6      	ldr	r6, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1b9f6:	f106 0a01 	add.w	sl, r6, #1
   1b9fa:	f106 0815 	add.w	r8, r6, #21
		if (!cfg->value ||
   1b9fe:	f8ba 3007 	ldrh.w	r3, [sl, #7]
   1ba02:	b1e3      	cbz	r3, 1ba3e <update_ccc+0x5e>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1ba04:	f81a 1c01 	ldrb.w	r1, [sl, #-1]
   1ba08:	4652      	mov	r2, sl
   1ba0a:	4628      	mov	r0, r5
   1ba0c:	f00c fad8 	bl	27fc0 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1ba10:	b1a8      	cbz	r0, 1ba3e <update_ccc+0x5e>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1ba12:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1ba16:	4621      	mov	r1, r4
   1ba18:	4628      	mov	r0, r5
   1ba1a:	f00d f968 	bl	28cee <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1ba1e:	2803      	cmp	r0, #3
   1ba20:	d112      	bne.n	1ba48 <update_ccc+0x68>
				LOG_WRN("CCC %p not writable", attr);
   1ba22:	46e9      	mov	r9, sp
   1ba24:	b088      	sub	sp, #32
   1ba26:	466a      	mov	r2, sp
   1ba28:	4b26      	ldr	r3, [pc, #152]	; (1bac4 <update_ccc+0xe4>)
   1ba2a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1ba2e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1ba32:	f842 0f10 	str.w	r0, [r2, #16]!
   1ba36:	4824      	ldr	r0, [pc, #144]	; (1bac8 <update_ccc+0xe8>)
   1ba38:	f00d f810 	bl	28a5c <z_log_msg_static_create.constprop.0>
   1ba3c:	46cd      	mov	sp, r9
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1ba3e:	f10a 0a0a 	add.w	sl, sl, #10
   1ba42:	45c2      	cmp	sl, r8
   1ba44:	d1db      	bne.n	1b9fe <update_ccc+0x1e>
   1ba46:	e036      	b.n	1bab6 <update_ccc+0xd6>
		gatt_ccc_changed(attr, ccc);
   1ba48:	4631      	mov	r1, r6
   1ba4a:	4620      	mov	r0, r4
   1ba4c:	f00c ff6e 	bl	2892c <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1ba50:	4b1e      	ldr	r3, [pc, #120]	; (1bacc <update_ccc+0xec>)
   1ba52:	429e      	cmp	r6, r3
   1ba54:	d12f      	bne.n	1bab6 <update_ccc+0xd6>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1ba56:	7a28      	ldrb	r0, [r5, #8]
   1ba58:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1ba5c:	f7ff f9d8 	bl	1ae10 <find_sc_cfg>
	if (!cfg) {
   1ba60:	b348      	cbz	r0, 1bab6 <update_ccc+0xd6>
	if (!(cfg->data.start || cfg->data.end)) {
   1ba62:	8902      	ldrh	r2, [r0, #8]
   1ba64:	8943      	ldrh	r3, [r0, #10]
   1ba66:	ea52 0103 	orrs.w	r1, r2, r3
   1ba6a:	d024      	beq.n	1bab6 <update_ccc+0xd6>
	index = bt_conn_index(conn);
   1ba6c:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1ba6e:	80ba      	strh	r2, [r7, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1ba70:	80fb      	strh	r3, [r7, #6]
	index = bt_conn_index(conn);
   1ba72:	f7fd fb07 	bl	19084 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1ba76:	4916      	ldr	r1, [pc, #88]	; (1bad0 <update_ccc+0xf0>)
   1ba78:	4a16      	ldr	r2, [pc, #88]	; (1bad4 <update_ccc+0xf4>)
   1ba7a:	2318      	movs	r3, #24
   1ba7c:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1ba80:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1ba82:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1ba84:	4a14      	ldr	r2, [pc, #80]	; (1bad8 <update_ccc+0xf8>)
   1ba86:	609a      	str	r2, [r3, #8]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1ba88:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   1ba8c:	1d3a      	adds	r2, r7, #4
   1ba8e:	611a      	str	r2, [r3, #16]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1ba90:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   1ba94:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1ba96:	4628      	mov	r0, r5
	sc_restore_params[index].len = sizeof(sc_range);
   1ba98:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1ba9a:	f7ff fead 	bl	1b7f8 <bt_gatt_indicate>
   1ba9e:	b150      	cbz	r0, 1bab6 <update_ccc+0xd6>
		LOG_ERR("SC restore indication failed");
   1baa0:	4b0e      	ldr	r3, [pc, #56]	; (1badc <update_ccc+0xfc>)
   1baa2:	61fb      	str	r3, [r7, #28]
   1baa4:	4808      	ldr	r0, [pc, #32]	; (1bac8 <update_ccc+0xe8>)
   1baa6:	2302      	movs	r3, #2
   1baa8:	f107 0218 	add.w	r2, r7, #24
   1baac:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1bab0:	61bb      	str	r3, [r7, #24]
   1bab2:	f00c ffd3 	bl	28a5c <z_log_msg_static_create.constprop.0>
}
   1bab6:	2001      	movs	r0, #1
   1bab8:	3720      	adds	r7, #32
   1baba:	46bd      	mov	sp, r7
   1babc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1bac0:	0001ae9d 	.word	0x0001ae9d
   1bac4:	0002d3a4 	.word	0x0002d3a4
   1bac8:	00029fd0 	.word	0x00029fd0
   1bacc:	200006cc 	.word	0x200006cc
   1bad0:	2000358c 	.word	0x2000358c
   1bad4:	0002a4e0 	.word	0x0002a4e0
   1bad8:	00028c01 	.word	0x00028c01
   1badc:	0002d3b8 	.word	0x0002d3b8

0001bae0 <gatt_notify>:
{
   1bae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bae4:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1bae6:	6851      	ldr	r1, [r2, #4]
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   1bae8:	8a4b      	ldrh	r3, [r1, #18]
   1baea:	f003 0314 	and.w	r3, r3, #20
{
   1baee:	b087      	sub	sp, #28
   1baf0:	4607      	mov	r7, r0
   1baf2:	4614      	mov	r4, r2
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   1baf4:	b173      	cbz	r3, 1bb14 <gatt_notify+0x34>
		LOG_WRN("Link is not encrypted");
   1baf6:	4b2a      	ldr	r3, [pc, #168]	; (1bba0 <gatt_notify+0xc0>)
   1baf8:	482a      	ldr	r0, [pc, #168]	; (1bba4 <gatt_notify+0xc4>)
   1bafa:	9305      	str	r3, [sp, #20]
   1bafc:	aa04      	add	r2, sp, #16
   1bafe:	2302      	movs	r3, #2
   1bb00:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1bb04:	9304      	str	r3, [sp, #16]
   1bb06:	f00c ffa9 	bl	28a5c <z_log_msg_static_create.constprop.0>
		return -EPERM;
   1bb0a:	f04f 30ff 	mov.w	r0, #4294967295
}
   1bb0e:	b007      	add	sp, #28
   1bb10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1bb14:	2201      	movs	r2, #1
   1bb16:	f7ff fd1f 	bl	1b558 <bt_gatt_is_subscribed>
   1bb1a:	b960      	cbnz	r0, 1bb36 <gatt_notify+0x56>
			LOG_WRN("Device is not subscribed to characteristic");
   1bb1c:	4b22      	ldr	r3, [pc, #136]	; (1bba8 <gatt_notify+0xc8>)
   1bb1e:	4821      	ldr	r0, [pc, #132]	; (1bba4 <gatt_notify+0xc4>)
   1bb20:	9305      	str	r3, [sp, #20]
   1bb22:	aa04      	add	r2, sp, #16
   1bb24:	2302      	movs	r3, #2
   1bb26:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1bb2a:	9304      	str	r3, [sp, #16]
   1bb2c:	f00c ff96 	bl	28a5c <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1bb30:	f06f 0015 	mvn.w	r0, #21
   1bb34:	e7eb      	b.n	1bb0e <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   1bb36:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1bb38:	211b      	movs	r1, #27
   1bb3a:	3202      	adds	r2, #2
   1bb3c:	4638      	mov	r0, r7
   1bb3e:	f7fe fcd1 	bl	1a4e4 <bt_att_create_pdu>
	if (!buf) {
   1bb42:	4605      	mov	r5, r0
   1bb44:	b960      	cbnz	r0, 1bb60 <gatt_notify+0x80>
		LOG_WRN("No buffer available to send notification");
   1bb46:	4b19      	ldr	r3, [pc, #100]	; (1bbac <gatt_notify+0xcc>)
   1bb48:	4816      	ldr	r0, [pc, #88]	; (1bba4 <gatt_notify+0xc4>)
   1bb4a:	9305      	str	r3, [sp, #20]
   1bb4c:	aa04      	add	r2, sp, #16
   1bb4e:	2302      	movs	r3, #2
   1bb50:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1bb54:	9304      	str	r3, [sp, #16]
   1bb56:	f00c ff81 	bl	28a5c <z_log_msg_static_create.constprop.0>
		return -ENOMEM;
   1bb5a:	f06f 000b 	mvn.w	r0, #11
   1bb5e:	e7d6      	b.n	1bb0e <gatt_notify+0x2e>
   1bb60:	f100 090c 	add.w	r9, r0, #12
   1bb64:	2102      	movs	r1, #2
   1bb66:	4648      	mov	r0, r9
   1bb68:	f000 fc82 	bl	1c470 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1bb6c:	4606      	mov	r6, r0
   1bb6e:	4648      	mov	r0, r9
   1bb70:	f826 8b02 	strh.w	r8, [r6], #2
   1bb74:	89a1      	ldrh	r1, [r4, #12]
   1bb76:	f000 fc7b 	bl	1c470 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1bb7a:	89a2      	ldrh	r2, [r4, #12]
   1bb7c:	68a1      	ldr	r1, [r4, #8]
   1bb7e:	4630      	mov	r0, r6
   1bb80:	f00b ff54 	bl	27a2c <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1bb84:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1bb88:	4628      	mov	r0, r5
   1bb8a:	2301      	movs	r3, #1
   1bb8c:	f00c fec4 	bl	28918 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1bb90:	4629      	mov	r1, r5
   1bb92:	4638      	mov	r0, r7
}
   1bb94:	b007      	add	sp, #28
   1bb96:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   1bb9a:	f7ff b877 	b.w	1ac8c <bt_att_send>
   1bb9e:	bf00      	nop
   1bba0:	0002d2b6 	.word	0x0002d2b6
   1bba4:	00029fd0 	.word	0x00029fd0
   1bba8:	0002d2cc 	.word	0x0002d2cc
   1bbac:	0002d3d5 	.word	0x0002d3d5

0001bbb0 <notify_cb>:
{
   1bbb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1bbb4:	4b45      	ldr	r3, [pc, #276]	; (1bccc <notify_cb+0x11c>)
{
   1bbb6:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1bbb8:	6882      	ldr	r2, [r0, #8]
   1bbba:	429a      	cmp	r2, r3
{
   1bbbc:	b086      	sub	sp, #24
   1bbbe:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1bbc0:	d136      	bne.n	1bc30 <notify_cb+0x80>
	ccc = attr->user_data;
   1bbc2:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1bbc6:	4b42      	ldr	r3, [pc, #264]	; (1bcd0 <notify_cb+0x120>)
   1bbc8:	4599      	cmp	r9, r3
   1bbca:	d119      	bne.n	1bc00 <notify_cb+0x50>
   1bbcc:	4c41      	ldr	r4, [pc, #260]	; (1bcd4 <notify_cb+0x124>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1bbce:	4f42      	ldr	r7, [pc, #264]	; (1bcd8 <notify_cb+0x128>)
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1bbd0:	2600      	movs	r6, #0
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1bbd2:	4639      	mov	r1, r7
   1bbd4:	4620      	mov	r0, r4
   1bbd6:	f00c ff21 	bl	28a1c <bt_addr_le_eq>
   1bbda:	b978      	cbnz	r0, 1bbfc <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1bbdc:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1bbe0:	2207      	movs	r2, #7
   1bbe2:	4621      	mov	r1, r4
   1bbe4:	f7fd fbcc 	bl	19380 <bt_conn_lookup_state_le>
			if (!conn) {
   1bbe8:	bb40      	cbnz	r0, 1bc3c <notify_cb+0x8c>
				sc = (struct sc_data *)data->ind_params->data;
   1bbea:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   1bbec:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   1bbf0:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1bbf2:	4621      	mov	r1, r4
   1bbf4:	8853      	ldrh	r3, [r2, #2]
   1bbf6:	8812      	ldrh	r2, [r2, #0]
   1bbf8:	f7ff f9d0 	bl	1af9c <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1bbfc:	340c      	adds	r4, #12
   1bbfe:	b1de      	cbz	r6, 1bc38 <notify_cb+0x88>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1bc00:	f109 0601 	add.w	r6, r9, #1
   1bc04:	f109 0a15 	add.w	sl, r9, #21
		if (cfg->value != data->type) {
   1bc08:	f8b6 2007 	ldrh.w	r2, [r6, #7]
   1bc0c:	89ab      	ldrh	r3, [r5, #12]
   1bc0e:	429a      	cmp	r2, r3
   1bc10:	d10b      	bne.n	1bc2a <notify_cb+0x7a>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1bc12:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   1bc16:	4631      	mov	r1, r6
   1bc18:	f7fd fb68 	bl	192ec <bt_conn_lookup_addr_le>
		if (!conn) {
   1bc1c:	4604      	mov	r4, r0
   1bc1e:	b120      	cbz	r0, 1bc2a <notify_cb+0x7a>
		if (conn->state != BT_CONN_CONNECTED) {
   1bc20:	7a83      	ldrb	r3, [r0, #10]
   1bc22:	2b07      	cmp	r3, #7
   1bc24:	d00d      	beq.n	1bc42 <notify_cb+0x92>
			bt_conn_unref(conn);
   1bc26:	f7fd f8eb 	bl	18e00 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1bc2a:	360a      	adds	r6, #10
   1bc2c:	4556      	cmp	r6, sl
   1bc2e:	d1eb      	bne.n	1bc08 <notify_cb+0x58>
		return BT_GATT_ITER_CONTINUE;
   1bc30:	2001      	movs	r0, #1
}
   1bc32:	b006      	add	sp, #24
   1bc34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1bc38:	2601      	movs	r6, #1
   1bc3a:	e7ca      	b.n	1bbd2 <notify_cb+0x22>
			bt_conn_unref(conn);
   1bc3c:	f7fd f8e0 	bl	18e00 <bt_conn_unref>
   1bc40:	e7dc      	b.n	1bbfc <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1bc42:	f8d9 3020 	ldr.w	r3, [r9, #32]
   1bc46:	b123      	cbz	r3, 1bc52 <notify_cb+0xa2>
   1bc48:	4641      	mov	r1, r8
   1bc4a:	4798      	blx	r3
   1bc4c:	b908      	cbnz	r0, 1bc52 <notify_cb+0xa2>
			bt_conn_unref(conn);
   1bc4e:	4620      	mov	r0, r4
   1bc50:	e7e9      	b.n	1bc26 <notify_cb+0x76>
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   1bc52:	f8b8 3012 	ldrh.w	r3, [r8, #18]
   1bc56:	f003 0314 	and.w	r3, r3, #20
   1bc5a:	b153      	cbz	r3, 1bc72 <notify_cb+0xc2>
			LOG_WRN("Link is not encrypted");
   1bc5c:	4b1f      	ldr	r3, [pc, #124]	; (1bcdc <notify_cb+0x12c>)
   1bc5e:	9305      	str	r3, [sp, #20]
   1bc60:	481f      	ldr	r0, [pc, #124]	; (1bce0 <notify_cb+0x130>)
   1bc62:	2302      	movs	r3, #2
   1bc64:	aa04      	add	r2, sp, #16
   1bc66:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1bc6a:	9304      	str	r3, [sp, #16]
   1bc6c:	f00c fef6 	bl	28a5c <z_log_msg_static_create.constprop.0>
			bt_conn_unref(conn);
   1bc70:	e7ed      	b.n	1bc4e <notify_cb+0x9e>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1bc72:	89ab      	ldrh	r3, [r5, #12]
   1bc74:	2b02      	cmp	r3, #2
   1bc76:	d115      	bne.n	1bca4 <notify_cb+0xf4>
   1bc78:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1bc7c:	079a      	lsls	r2, r3, #30
   1bc7e:	d405      	bmi.n	1bc8c <notify_cb+0xdc>
		bt_conn_unref(conn);
   1bc80:	4620      	mov	r0, r4
   1bc82:	f7fd f8bd 	bl	18e00 <bt_conn_unref>
		data->err = 0;
   1bc86:	2300      	movs	r3, #0
   1bc88:	60ab      	str	r3, [r5, #8]
   1bc8a:	e7ce      	b.n	1bc2a <notify_cb+0x7a>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1bc8c:	692a      	ldr	r2, [r5, #16]
   1bc8e:	88a9      	ldrh	r1, [r5, #4]
   1bc90:	4620      	mov	r0, r4
   1bc92:	f7ff fd35 	bl	1b700 <gatt_indicate>
			if (err == 0) {
   1bc96:	4607      	mov	r7, r0
   1bc98:	b980      	cbnz	r0, 1bcbc <notify_cb+0x10c>
				data->ind_params->_ref++;
   1bc9a:	692a      	ldr	r2, [r5, #16]
   1bc9c:	7d93      	ldrb	r3, [r2, #22]
   1bc9e:	3301      	adds	r3, #1
   1bca0:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1bca2:	e7ed      	b.n	1bc80 <notify_cb+0xd0>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1bca4:	2b01      	cmp	r3, #1
   1bca6:	d1eb      	bne.n	1bc80 <notify_cb+0xd0>
   1bca8:	f8b6 3007 	ldrh.w	r3, [r6, #7]
   1bcac:	07db      	lsls	r3, r3, #31
   1bcae:	d5e7      	bpl.n	1bc80 <notify_cb+0xd0>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1bcb0:	692a      	ldr	r2, [r5, #16]
   1bcb2:	88a9      	ldrh	r1, [r5, #4]
   1bcb4:	4620      	mov	r0, r4
   1bcb6:	f7ff ff13 	bl	1bae0 <gatt_notify>
   1bcba:	4607      	mov	r7, r0
		bt_conn_unref(conn);
   1bcbc:	4620      	mov	r0, r4
   1bcbe:	f7fd f89f 	bl	18e00 <bt_conn_unref>
		if (err < 0) {
   1bcc2:	2f00      	cmp	r7, #0
   1bcc4:	dadf      	bge.n	1bc86 <notify_cb+0xd6>
			return BT_GATT_ITER_STOP;
   1bcc6:	2000      	movs	r0, #0
   1bcc8:	e7b3      	b.n	1bc32 <notify_cb+0x82>
   1bcca:	bf00      	nop
   1bccc:	0001ae9d 	.word	0x0001ae9d
   1bcd0:	200006cc 	.word	0x200006cc
   1bcd4:	200042fb 	.word	0x200042fb
   1bcd8:	0002bf88 	.word	0x0002bf88
   1bcdc:	0002d2b6 	.word	0x0002d2b6
   1bce0:	00029fd0 	.word	0x00029fd0

0001bce4 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   1bce4:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1bce6:	4a06      	ldr	r2, [pc, #24]	; (1bd00 <bt_gatt_connected+0x1c>)
	data.conn = conn;
   1bce8:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1bcea:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   1bcec:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1bcee:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   1bcf2:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1bcf6:	f00c ffef 	bl	28cd8 <bt_gatt_foreach_attr>
	err = bt_gatt_exchange_mtu(conn, &gatt_exchange_params);
	if (err) {
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
}
   1bcfa:	b003      	add	sp, #12
   1bcfc:	f85d fb04 	ldr.w	pc, [sp], #4
   1bd00:	0001b9e1 	.word	0x0001b9e1

0001bd04 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   1bd04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   1bd06:	4b08      	ldr	r3, [pc, #32]	; (1bd28 <bt_gatt_att_max_mtu_changed+0x24>)
   1bd08:	681c      	ldr	r4, [r3, #0]
   1bd0a:	4605      	mov	r5, r0
   1bd0c:	460e      	mov	r6, r1
   1bd0e:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1bd10:	b14c      	cbz	r4, 1bd26 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   1bd12:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1bd16:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1bd18:	b11b      	cbz	r3, 1bd22 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1bd1a:	463a      	mov	r2, r7
   1bd1c:	4631      	mov	r1, r6
   1bd1e:	4628      	mov	r0, r5
   1bd20:	4798      	blx	r3
	return node->next;
   1bd22:	6864      	ldr	r4, [r4, #4]
   1bd24:	e7f4      	b.n	1bd10 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   1bd26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bd28:	200035c8 	.word	0x200035c8

0001bd2c <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1bd2c:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1bd2e:	4603      	mov	r3, r0
   1bd30:	4a0f      	ldr	r2, [pc, #60]	; (1bd70 <bt_gatt_disconnected+0x44>)
{
   1bd32:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1bd34:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1bd38:	2001      	movs	r0, #1
   1bd3a:	f00c ffcd 	bl	28cd8 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   1bd3e:	4620      	mov	r0, r4
   1bd40:	f7ff f838 	bl	1adb4 <find_cf_cfg>
	if (!cfg) {
   1bd44:	4605      	mov	r5, r0
   1bd46:	b188      	cbz	r0, 1bd6c <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1bd48:	f104 0690 	add.w	r6, r4, #144	; 0x90
   1bd4c:	7a20      	ldrb	r0, [r4, #8]
   1bd4e:	4631      	mov	r1, r6
   1bd50:	f00b ffdb 	bl	27d0a <bt_addr_le_is_bonded>
   1bd54:	b920      	cbnz	r0, 1bd60 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   1bd56:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1bd58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   1bd5c:	f7ff b902 	b.w	1af64 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1bd60:	4631      	mov	r1, r6
   1bd62:	1c68      	adds	r0, r5, #1
}
   1bd64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1bd68:	f00c be75 	b.w	28a56 <bt_addr_le_copy>
}
   1bd6c:	bd70      	pop	{r4, r5, r6, pc}
   1bd6e:	bf00      	nop
   1bd70:	0001b009 	.word	0x0001b009

0001bd74 <bt_smp_accept.part.0>:
	}

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   1bd74:	b580      	push	{r7, lr}
   1bd76:	af00      	add	r7, sp, #0
		*chan = &smp->chan;

		return 0;
	}

	LOG_ERR("No available SMP context for conn %p", conn);
   1bd78:	b088      	sub	sp, #32
   1bd7a:	466a      	mov	r2, sp
   1bd7c:	4b07      	ldr	r3, [pc, #28]	; (1bd9c <bt_smp_accept.part.0+0x28>)
   1bd7e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1bd82:	2303      	movs	r3, #3
   1bd84:	f842 3f10 	str.w	r3, [r2, #16]!
   1bd88:	4805      	ldr	r0, [pc, #20]	; (1bda0 <bt_smp_accept.part.0+0x2c>)
   1bd8a:	2300      	movs	r3, #0
   1bd8c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1bd90:	f7f8 f978 	bl	14084 <z_impl_z_log_msg_static_create>

	return -ENOMEM;
}
   1bd94:	f06f 000b 	mvn.w	r0, #11
   1bd98:	46bd      	mov	sp, r7
   1bd9a:	bd80      	pop	{r7, pc}
   1bd9c:	0002d40d 	.word	0x0002d40d
   1bda0:	0002a010 	.word	0x0002a010

0001bda4 <bt_smp_accept>:
		if (smp->chan.conn) {
   1bda4:	4b04      	ldr	r3, [pc, #16]	; (1bdb8 <bt_smp_accept+0x14>)
   1bda6:	681a      	ldr	r2, [r3, #0]
   1bda8:	b10a      	cbz	r2, 1bdae <bt_smp_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1bdaa:	f7ff bfe3 	b.w	1bd74 <bt_smp_accept.part.0>
		smp->chan.ops = &ops;
   1bdae:	4803      	ldr	r0, [pc, #12]	; (1bdbc <bt_smp_accept+0x18>)
   1bdb0:	6058      	str	r0, [r3, #4]
		*chan = &smp->chan;
   1bdb2:	600b      	str	r3, [r1, #0]
}
   1bdb4:	4610      	mov	r0, r2
   1bdb6:	4770      	bx	lr
   1bdb8:	200035d0 	.word	0x200035d0
   1bdbc:	0002a5e4 	.word	0x0002a5e4

0001bdc0 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1bdc0:	4b02      	ldr	r3, [pc, #8]	; (1bdcc <net_buf_pool_get+0xc>)
   1bdc2:	2234      	movs	r2, #52	; 0x34
   1bdc4:	fb02 3000 	mla	r0, r2, r0, r3
   1bdc8:	4770      	bx	lr
   1bdca:	bf00      	nop
   1bdcc:	20000ae0 	.word	0x20000ae0

0001bdd0 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1bdd0:	7a82      	ldrb	r2, [r0, #10]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1bdd2:	4b07      	ldr	r3, [pc, #28]	; (1bdf0 <net_buf_id+0x20>)
   1bdd4:	2134      	movs	r1, #52	; 0x34
   1bdd6:	fb01 3302 	mla	r3, r1, r2, r3
   1bdda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1bddc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1bde0:	331b      	adds	r3, #27
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1bde2:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1bde4:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1bde8:	fbb0 f0f3 	udiv	r0, r0, r3
   1bdec:	4770      	bx	lr
   1bdee:	bf00      	nop
   1bdf0:	20000ae0 	.word	0x20000ae0

0001bdf4 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1bdf4:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1bdf6:	4b0a      	ldr	r3, [pc, #40]	; (1be20 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1bdf8:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1bdfa:	2434      	movs	r4, #52	; 0x34
   1bdfc:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1be00:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1be02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1be04:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1be06:	681a      	ldr	r2, [r3, #0]
   1be08:	4294      	cmp	r4, r2
   1be0a:	bf94      	ite	ls
   1be0c:	600c      	strls	r4, [r1, #0]
   1be0e:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1be10:	e9d3 5400 	ldrd	r5, r4, [r3]
   1be14:	f7ff ffdc 	bl	1bdd0 <net_buf_id>
}
   1be18:	fb05 4000 	mla	r0, r5, r0, r4
   1be1c:	bd38      	pop	{r3, r4, r5, pc}
   1be1e:	bf00      	nop
   1be20:	20000ae0 	.word	0x20000ae0

0001be24 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1be24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be28:	b085      	sub	sp, #20
   1be2a:	4605      	mov	r5, r0
   1be2c:	9103      	str	r1, [sp, #12]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1be2e:	4610      	mov	r0, r2
   1be30:	4619      	mov	r1, r3
{
   1be32:	4692      	mov	sl, r2
   1be34:	4699      	mov	r9, r3
   1be36:	4690      	mov	r8, r2
   1be38:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1be3a:	f00d fde9 	bl	29a10 <sys_clock_timeout_end_calc>
   1be3e:	e9cd 0101 	strd	r0, r1, [sp, #4]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   1be42:	b945      	cbnz	r5, 1be56 <net_buf_alloc_len+0x32>
   1be44:	4966      	ldr	r1, [pc, #408]	; (1bfe0 <net_buf_alloc_len+0x1bc>)
   1be46:	4a67      	ldr	r2, [pc, #412]	; (1bfe4 <net_buf_alloc_len+0x1c0>)
   1be48:	4867      	ldr	r0, [pc, #412]	; (1bfe8 <net_buf_alloc_len+0x1c4>)
   1be4a:	23f4      	movs	r3, #244	; 0xf4
   1be4c:	f00b f9c6 	bl	271dc <assert_print>
   1be50:	21f4      	movs	r1, #244	; 0xf4
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   1be52:	4864      	ldr	r0, [pc, #400]	; (1bfe4 <net_buf_alloc_len+0x1c0>)
   1be54:	e019      	b.n	1be8a <net_buf_alloc_len+0x66>
	key = k_spin_lock(&pool->lock);
   1be56:	f105 061c 	add.w	r6, r5, #28
	__asm__ volatile(
   1be5a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1be5e:	f3ef 8b11 	mrs	fp, BASEPRI
   1be62:	f383 8812 	msr	BASEPRI_MAX, r3
   1be66:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1be6a:	4630      	mov	r0, r6
   1be6c:	f004 fd54 	bl	20918 <z_spin_lock_valid>
   1be70:	b968      	cbnz	r0, 1be8e <net_buf_alloc_len+0x6a>
   1be72:	4a5e      	ldr	r2, [pc, #376]	; (1bfec <net_buf_alloc_len+0x1c8>)
   1be74:	495e      	ldr	r1, [pc, #376]	; (1bff0 <net_buf_alloc_len+0x1cc>)
   1be76:	485c      	ldr	r0, [pc, #368]	; (1bfe8 <net_buf_alloc_len+0x1c4>)
   1be78:	2394      	movs	r3, #148	; 0x94
   1be7a:	f00b f9af 	bl	271dc <assert_print>
   1be7e:	4631      	mov	r1, r6
   1be80:	485c      	ldr	r0, [pc, #368]	; (1bff4 <net_buf_alloc_len+0x1d0>)
   1be82:	f00b f9ab 	bl	271dc <assert_print>
   1be86:	2194      	movs	r1, #148	; 0x94
   1be88:	4858      	ldr	r0, [pc, #352]	; (1bfec <net_buf_alloc_len+0x1c8>)
   1be8a:	f00b f9a0 	bl	271ce <assert_post_action>
	z_spin_lock_set_owner(l);
   1be8e:	4630      	mov	r0, r6
   1be90:	f004 fd60 	bl	20954 <z_spin_lock_set_owner>
	if (pool->uninit_count) {
   1be94:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   1be96:	2b00      	cmp	r3, #0
   1be98:	d070      	beq.n	1bf7c <net_buf_alloc_len+0x158>
		if (pool->uninit_count < pool->buf_count) {
   1be9a:	8c2a      	ldrh	r2, [r5, #32]
   1be9c:	429a      	cmp	r2, r3
   1be9e:	d94d      	bls.n	1bf3c <net_buf_alloc_len+0x118>
	return z_impl_k_queue_get(queue, timeout);
   1bea0:	2200      	movs	r2, #0
   1bea2:	2300      	movs	r3, #0
   1bea4:	4628      	mov	r0, r5
   1bea6:	f004 ff87 	bl	20db8 <z_impl_k_queue_get>
			if (buf) {
   1beaa:	4604      	mov	r4, r0
   1beac:	2800      	cmp	r0, #0
   1beae:	d045      	beq.n	1bf3c <net_buf_alloc_len+0x118>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1beb0:	4630      	mov	r0, r6
   1beb2:	f004 fd3f 	bl	20934 <z_spin_unlock_valid>
   1beb6:	b958      	cbnz	r0, 1bed0 <net_buf_alloc_len+0xac>
   1beb8:	4a4c      	ldr	r2, [pc, #304]	; (1bfec <net_buf_alloc_len+0x1c8>)
   1beba:	494f      	ldr	r1, [pc, #316]	; (1bff8 <net_buf_alloc_len+0x1d4>)
   1bebc:	484a      	ldr	r0, [pc, #296]	; (1bfe8 <net_buf_alloc_len+0x1c4>)
   1bebe:	23c2      	movs	r3, #194	; 0xc2
   1bec0:	f00b f98c 	bl	271dc <assert_print>
   1bec4:	4631      	mov	r1, r6
   1bec6:	484d      	ldr	r0, [pc, #308]	; (1bffc <net_buf_alloc_len+0x1d8>)
   1bec8:	f00b f988 	bl	271dc <assert_print>
   1becc:	21c2      	movs	r1, #194	; 0xc2
   1bece:	e7db      	b.n	1be88 <net_buf_alloc_len+0x64>
	__asm__ volatile(
   1bed0:	f38b 8811 	msr	BASEPRI, fp
   1bed4:	f3bf 8f6f 	isb	sy
	if (size) {
   1bed8:	9d03      	ldr	r5, [sp, #12]
   1beda:	2d00      	cmp	r5, #0
   1bedc:	d074      	beq.n	1bfc8 <net_buf_alloc_len+0x1a4>
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1bede:	ea59 030a 	orrs.w	r3, r9, sl
   1bee2:	d012      	beq.n	1bf0a <net_buf_alloc_len+0xe6>
   1bee4:	f1b9 3fff 	cmp.w	r9, #4294967295
   1bee8:	bf08      	it	eq
   1beea:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   1beee:	d00c      	beq.n	1bf0a <net_buf_alloc_len+0xe6>
			int64_t remaining = end - sys_clock_tick_get();
   1bef0:	f007 f9f0 	bl	232d4 <sys_clock_tick_get>
   1bef4:	9b01      	ldr	r3, [sp, #4]
   1bef6:	ebb3 0800 	subs.w	r8, r3, r0
   1befa:	9b02      	ldr	r3, [sp, #8]
   1befc:	eb63 0701 	sbc.w	r7, r3, r1
			if (remaining <= 0) {
   1bf00:	2f00      	cmp	r7, #0
   1bf02:	bfbc      	itt	lt
   1bf04:	f04f 0800 	movlt.w	r8, #0
   1bf08:	4647      	movlt	r7, r8
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1bf0a:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1bf0c:	4e3c      	ldr	r6, [pc, #240]	; (1c000 <net_buf_alloc_len+0x1dc>)
   1bf0e:	f04f 0934 	mov.w	r9, #52	; 0x34
   1bf12:	fb09 6303 	mla	r3, r9, r3, r6
   1bf16:	4642      	mov	r2, r8
   1bf18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bf1a:	681b      	ldr	r3, [r3, #0]
   1bf1c:	a903      	add	r1, sp, #12
   1bf1e:	f8d3 a000 	ldr.w	sl, [r3]
   1bf22:	4620      	mov	r0, r4
   1bf24:	463b      	mov	r3, r7
   1bf26:	47d0      	blx	sl
		buf->__buf = data_alloc(buf, &size, timeout);
   1bf28:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   1bf2a:	2800      	cmp	r0, #0
   1bf2c:	d13c      	bne.n	1bfa8 <net_buf_alloc_len+0x184>
	k_lifo_put(&pool->free, buf);
   1bf2e:	7aa0      	ldrb	r0, [r4, #10]
   1bf30:	4621      	mov	r1, r4
   1bf32:	fb00 6009 	mla	r0, r0, r9, r6
   1bf36:	f00d fca9 	bl	2988c <k_queue_prepend>
}
   1bf3a:	e030      	b.n	1bf9e <net_buf_alloc_len+0x17a>
		uninit_count = pool->uninit_count--;
   1bf3c:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   1bf3e:	1e63      	subs	r3, r4, #1
   1bf40:	846b      	strh	r3, [r5, #34]	; 0x22
   1bf42:	4630      	mov	r0, r6
   1bf44:	f004 fcf6 	bl	20934 <z_spin_unlock_valid>
   1bf48:	2800      	cmp	r0, #0
   1bf4a:	d0b5      	beq.n	1beb8 <net_buf_alloc_len+0x94>
   1bf4c:	f38b 8811 	msr	BASEPRI, fp
   1bf50:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1bf54:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1bf58:	8c2a      	ldrh	r2, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1bf5a:	331b      	adds	r3, #27
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1bf5c:	1b12      	subs	r2, r2, r4
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1bf5e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1bf60:	f023 0303 	bic.w	r3, r3, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1bf64:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   1bf68:	4b25      	ldr	r3, [pc, #148]	; (1c000 <net_buf_alloc_len+0x1dc>)
   1bf6a:	4a26      	ldr	r2, [pc, #152]	; (1c004 <net_buf_alloc_len+0x1e0>)
   1bf6c:	1aeb      	subs	r3, r5, r3
   1bf6e:	109b      	asrs	r3, r3, #2
   1bf70:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   1bf72:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   1bf74:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1bf78:	72e3      	strb	r3, [r4, #11]
		goto success;
   1bf7a:	e7ad      	b.n	1bed8 <net_buf_alloc_len+0xb4>
   1bf7c:	4630      	mov	r0, r6
   1bf7e:	f004 fcd9 	bl	20934 <z_spin_unlock_valid>
   1bf82:	2800      	cmp	r0, #0
   1bf84:	d098      	beq.n	1beb8 <net_buf_alloc_len+0x94>
   1bf86:	f38b 8811 	msr	BASEPRI, fp
   1bf8a:	f3bf 8f6f 	isb	sy
   1bf8e:	4652      	mov	r2, sl
   1bf90:	464b      	mov	r3, r9
   1bf92:	4628      	mov	r0, r5
   1bf94:	f004 ff10 	bl	20db8 <z_impl_k_queue_get>
	if (!buf) {
   1bf98:	4604      	mov	r4, r0
   1bf9a:	2800      	cmp	r0, #0
   1bf9c:	d19c      	bne.n	1bed8 <net_buf_alloc_len+0xb4>
		return NULL;
   1bf9e:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1bfa0:	4620      	mov	r0, r4
   1bfa2:	b005      	add	sp, #20
   1bfa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   1bfa8:	9b03      	ldr	r3, [sp, #12]
   1bfaa:	429d      	cmp	r5, r3
   1bfac:	d90d      	bls.n	1bfca <net_buf_alloc_len+0x1a6>
   1bfae:	4916      	ldr	r1, [pc, #88]	; (1c008 <net_buf_alloc_len+0x1e4>)
   1bfb0:	4a0c      	ldr	r2, [pc, #48]	; (1bfe4 <net_buf_alloc_len+0x1c0>)
   1bfb2:	480d      	ldr	r0, [pc, #52]	; (1bfe8 <net_buf_alloc_len+0x1c4>)
   1bfb4:	f240 1355 	movw	r3, #341	; 0x155
   1bfb8:	f00b f910 	bl	271dc <assert_print>
   1bfbc:	4813      	ldr	r0, [pc, #76]	; (1c00c <net_buf_alloc_len+0x1e8>)
   1bfbe:	f00b f90d 	bl	271dc <assert_print>
   1bfc2:	f240 1155 	movw	r1, #341	; 0x155
   1bfc6:	e744      	b.n	1be52 <net_buf_alloc_len+0x2e>
		buf->__buf = NULL;
   1bfc8:	6165      	str	r5, [r4, #20]
	buf->frags = NULL;
   1bfca:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1bfcc:	2201      	movs	r2, #1
	buf->frags = NULL;
   1bfce:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   1bfd0:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   1bfd2:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   1bfd4:	9a03      	ldr	r2, [sp, #12]
	buf->data = buf->__buf;
   1bfd6:	6963      	ldr	r3, [r4, #20]
   1bfd8:	8262      	strh	r2, [r4, #18]
   1bfda:	60e3      	str	r3, [r4, #12]
}
   1bfdc:	e7e0      	b.n	1bfa0 <net_buf_alloc_len+0x17c>
   1bfde:	bf00      	nop
   1bfe0:	0002d488 	.word	0x0002d488
   1bfe4:	0002d439 	.word	0x0002d439
   1bfe8:	0002ae37 	.word	0x0002ae37
   1bfec:	0002b22b 	.word	0x0002b22b
   1bff0:	0002b284 	.word	0x0002b284
   1bff4:	0002b299 	.word	0x0002b299
   1bff8:	0002b258 	.word	0x0002b258
   1bffc:	0002b26f 	.word	0x0002b26f
   1c000:	20000ae0 	.word	0x20000ae0
   1c004:	c4ec4ec5 	.word	0xc4ec4ec5
   1c008:	0002d48d 	.word	0x0002d48d
   1c00c:	0002d49e 	.word	0x0002d49e

0001c010 <net_buf_slist_put>:
}

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   1c010:	b570      	push	{r4, r5, r6, lr}
   1c012:	460c      	mov	r4, r1
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1c014:	4605      	mov	r5, r0
   1c016:	b958      	cbnz	r0, 1c030 <net_buf_slist_put+0x20>
   1c018:	4928      	ldr	r1, [pc, #160]	; (1c0bc <net_buf_slist_put+0xac>)
   1c01a:	4a29      	ldr	r2, [pc, #164]	; (1c0c0 <net_buf_slist_put+0xb0>)
   1c01c:	4829      	ldr	r0, [pc, #164]	; (1c0c4 <net_buf_slist_put+0xb4>)
   1c01e:	f240 13b3 	movw	r3, #435	; 0x1b3
   1c022:	f00b f8db 	bl	271dc <assert_print>
   1c026:	f240 11b3 	movw	r1, #435	; 0x1b3
	__ASSERT_NO_MSG(buf);
   1c02a:	4825      	ldr	r0, [pc, #148]	; (1c0c0 <net_buf_slist_put+0xb0>)
   1c02c:	f00b f8cf 	bl	271ce <assert_post_action>
   1c030:	b949      	cbnz	r1, 1c046 <net_buf_slist_put+0x36>
   1c032:	4925      	ldr	r1, [pc, #148]	; (1c0c8 <net_buf_slist_put+0xb8>)
   1c034:	4a22      	ldr	r2, [pc, #136]	; (1c0c0 <net_buf_slist_put+0xb0>)
   1c036:	4823      	ldr	r0, [pc, #140]	; (1c0c4 <net_buf_slist_put+0xb4>)
   1c038:	f44f 73da 	mov.w	r3, #436	; 0x1b4
   1c03c:	f00b f8ce 	bl	271dc <assert_print>
   1c040:	f44f 71da 	mov.w	r1, #436	; 0x1b4
   1c044:	e7f1      	b.n	1c02a <net_buf_slist_put+0x1a>
	__asm__ volatile(
   1c046:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c04a:	f3ef 8611 	mrs	r6, BASEPRI
   1c04e:	f383 8812 	msr	BASEPRI_MAX, r3
   1c052:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c056:	481d      	ldr	r0, [pc, #116]	; (1c0cc <net_buf_slist_put+0xbc>)
   1c058:	f004 fc5e 	bl	20918 <z_spin_lock_valid>
   1c05c:	b960      	cbnz	r0, 1c078 <net_buf_slist_put+0x68>
   1c05e:	4a1c      	ldr	r2, [pc, #112]	; (1c0d0 <net_buf_slist_put+0xc0>)
   1c060:	491c      	ldr	r1, [pc, #112]	; (1c0d4 <net_buf_slist_put+0xc4>)
   1c062:	4818      	ldr	r0, [pc, #96]	; (1c0c4 <net_buf_slist_put+0xb4>)
   1c064:	2394      	movs	r3, #148	; 0x94
   1c066:	f00b f8b9 	bl	271dc <assert_print>
   1c06a:	4918      	ldr	r1, [pc, #96]	; (1c0cc <net_buf_slist_put+0xbc>)
   1c06c:	481a      	ldr	r0, [pc, #104]	; (1c0d8 <net_buf_slist_put+0xc8>)
   1c06e:	f00b f8b5 	bl	271dc <assert_print>
   1c072:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c074:	4816      	ldr	r0, [pc, #88]	; (1c0d0 <net_buf_slist_put+0xc0>)
   1c076:	e7d9      	b.n	1c02c <net_buf_slist_put+0x1c>
	z_spin_lock_set_owner(l);
   1c078:	4814      	ldr	r0, [pc, #80]	; (1c0cc <net_buf_slist_put+0xbc>)
   1c07a:	f004 fc6b 	bl	20954 <z_spin_lock_set_owner>
	parent->next = child;
   1c07e:	2300      	movs	r3, #0
   1c080:	6023      	str	r3, [r4, #0]
	return list->tail;
   1c082:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   1c084:	b98b      	cbnz	r3, 1c0aa <net_buf_slist_put+0x9a>
	list->head = node;
   1c086:	e9c5 4400 	strd	r4, r4, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c08a:	4810      	ldr	r0, [pc, #64]	; (1c0cc <net_buf_slist_put+0xbc>)
   1c08c:	f004 fc52 	bl	20934 <z_spin_unlock_valid>
   1c090:	b970      	cbnz	r0, 1c0b0 <net_buf_slist_put+0xa0>
   1c092:	4a0f      	ldr	r2, [pc, #60]	; (1c0d0 <net_buf_slist_put+0xc0>)
   1c094:	4911      	ldr	r1, [pc, #68]	; (1c0dc <net_buf_slist_put+0xcc>)
   1c096:	480b      	ldr	r0, [pc, #44]	; (1c0c4 <net_buf_slist_put+0xb4>)
   1c098:	23c2      	movs	r3, #194	; 0xc2
   1c09a:	f00b f89f 	bl	271dc <assert_print>
   1c09e:	490b      	ldr	r1, [pc, #44]	; (1c0cc <net_buf_slist_put+0xbc>)
   1c0a0:	480f      	ldr	r0, [pc, #60]	; (1c0e0 <net_buf_slist_put+0xd0>)
   1c0a2:	f00b f89b 	bl	271dc <assert_print>
   1c0a6:	21c2      	movs	r1, #194	; 0xc2
   1c0a8:	e7e4      	b.n	1c074 <net_buf_slist_put+0x64>
	parent->next = child;
   1c0aa:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c0ac:	606c      	str	r4, [r5, #4]
}
   1c0ae:	e7ec      	b.n	1c08a <net_buf_slist_put+0x7a>
	__asm__ volatile(
   1c0b0:	f386 8811 	msr	BASEPRI, r6
   1c0b4:	f3bf 8f6f 	isb	sy

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append(list, &buf->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   1c0b8:	bd70      	pop	{r4, r5, r6, pc}
   1c0ba:	bf00      	nop
   1c0bc:	0002d4a1 	.word	0x0002d4a1
   1c0c0:	0002d439 	.word	0x0002d439
   1c0c4:	0002ae37 	.word	0x0002ae37
   1c0c8:	0002d4bb 	.word	0x0002d4bb
   1c0cc:	20003600 	.word	0x20003600
   1c0d0:	0002b22b 	.word	0x0002b22b
   1c0d4:	0002b284 	.word	0x0002b284
   1c0d8:	0002b299 	.word	0x0002b299
   1c0dc:	0002b258 	.word	0x0002b258
   1c0e0:	0002b26f 	.word	0x0002b26f

0001c0e4 <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   1c0e4:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1c0e6:	4604      	mov	r4, r0
   1c0e8:	b958      	cbnz	r0, 1c102 <net_buf_slist_get+0x1e>
   1c0ea:	4923      	ldr	r1, [pc, #140]	; (1c178 <net_buf_slist_get+0x94>)
   1c0ec:	4823      	ldr	r0, [pc, #140]	; (1c17c <net_buf_slist_get+0x98>)
   1c0ee:	4a24      	ldr	r2, [pc, #144]	; (1c180 <net_buf_slist_get+0x9c>)
   1c0f0:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
   1c0f4:	f00b f872 	bl	271dc <assert_print>
   1c0f8:	4821      	ldr	r0, [pc, #132]	; (1c180 <net_buf_slist_get+0x9c>)
   1c0fa:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1c0fe:	f00b f866 	bl	271ce <assert_post_action>
	__asm__ volatile(
   1c102:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c106:	f3ef 8611 	mrs	r6, BASEPRI
   1c10a:	f383 8812 	msr	BASEPRI_MAX, r3
   1c10e:	f3bf 8f6f 	isb	sy
   1c112:	481c      	ldr	r0, [pc, #112]	; (1c184 <net_buf_slist_get+0xa0>)
   1c114:	f004 fc00 	bl	20918 <z_spin_lock_valid>
   1c118:	b960      	cbnz	r0, 1c134 <net_buf_slist_get+0x50>
   1c11a:	4a1b      	ldr	r2, [pc, #108]	; (1c188 <net_buf_slist_get+0xa4>)
   1c11c:	491b      	ldr	r1, [pc, #108]	; (1c18c <net_buf_slist_get+0xa8>)
   1c11e:	4817      	ldr	r0, [pc, #92]	; (1c17c <net_buf_slist_get+0x98>)
   1c120:	2394      	movs	r3, #148	; 0x94
   1c122:	f00b f85b 	bl	271dc <assert_print>
   1c126:	4917      	ldr	r1, [pc, #92]	; (1c184 <net_buf_slist_get+0xa0>)
   1c128:	4819      	ldr	r0, [pc, #100]	; (1c190 <net_buf_slist_get+0xac>)
   1c12a:	f00b f857 	bl	271dc <assert_print>
   1c12e:	2194      	movs	r1, #148	; 0x94
   1c130:	4815      	ldr	r0, [pc, #84]	; (1c188 <net_buf_slist_get+0xa4>)
   1c132:	e7e4      	b.n	1c0fe <net_buf_slist_get+0x1a>
	z_spin_lock_set_owner(l);
   1c134:	4813      	ldr	r0, [pc, #76]	; (1c184 <net_buf_slist_get+0xa0>)
   1c136:	f004 fc0d 	bl	20954 <z_spin_lock_set_owner>
	return list->head;
   1c13a:	6825      	ldr	r5, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1c13c:	b12d      	cbz	r5, 1c14a <net_buf_slist_get+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c13e:	6862      	ldr	r2, [r4, #4]
	return node->next;
   1c140:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1c142:	6023      	str	r3, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c144:	4295      	cmp	r5, r2
	list->tail = node;
   1c146:	bf08      	it	eq
   1c148:	6063      	streq	r3, [r4, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1c14a:	480e      	ldr	r0, [pc, #56]	; (1c184 <net_buf_slist_get+0xa0>)
   1c14c:	f004 fbf2 	bl	20934 <z_spin_unlock_valid>
   1c150:	b958      	cbnz	r0, 1c16a <net_buf_slist_get+0x86>
   1c152:	4a0d      	ldr	r2, [pc, #52]	; (1c188 <net_buf_slist_get+0xa4>)
   1c154:	490f      	ldr	r1, [pc, #60]	; (1c194 <net_buf_slist_get+0xb0>)
   1c156:	4809      	ldr	r0, [pc, #36]	; (1c17c <net_buf_slist_get+0x98>)
   1c158:	23c2      	movs	r3, #194	; 0xc2
   1c15a:	f00b f83f 	bl	271dc <assert_print>
   1c15e:	4909      	ldr	r1, [pc, #36]	; (1c184 <net_buf_slist_get+0xa0>)
   1c160:	480d      	ldr	r0, [pc, #52]	; (1c198 <net_buf_slist_get+0xb4>)
   1c162:	f00b f83b 	bl	271dc <assert_print>
   1c166:	21c2      	movs	r1, #194	; 0xc2
   1c168:	e7e2      	b.n	1c130 <net_buf_slist_get+0x4c>
	__asm__ volatile(
   1c16a:	f386 8811 	msr	BASEPRI, r6
   1c16e:	f3bf 8f6f 	isb	sy
	buf = (void *)sys_slist_get(list);

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   1c172:	4628      	mov	r0, r5
   1c174:	bd70      	pop	{r4, r5, r6, pc}
   1c176:	bf00      	nop
   1c178:	0002d4a1 	.word	0x0002d4a1
   1c17c:	0002ae37 	.word	0x0002ae37
   1c180:	0002d439 	.word	0x0002d439
   1c184:	20003600 	.word	0x20003600
   1c188:	0002b22b 	.word	0x0002b22b
   1c18c:	0002b284 	.word	0x0002b284
   1c190:	0002b299 	.word	0x0002b299
   1c194:	0002b258 	.word	0x0002b258
   1c198:	0002b26f 	.word	0x0002b26f

0001c19c <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1c19c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(fifo);
   1c19e:	b958      	cbnz	r0, 1c1b8 <net_buf_put+0x1c>
   1c1a0:	490d      	ldr	r1, [pc, #52]	; (1c1d8 <net_buf_put+0x3c>)
   1c1a2:	4a0e      	ldr	r2, [pc, #56]	; (1c1dc <net_buf_put+0x40>)
   1c1a4:	480e      	ldr	r0, [pc, #56]	; (1c1e0 <net_buf_put+0x44>)
   1c1a6:	f240 13cd 	movw	r3, #461	; 0x1cd
   1c1aa:	f00b f817 	bl	271dc <assert_print>
   1c1ae:	f240 11cd 	movw	r1, #461	; 0x1cd
	__ASSERT_NO_MSG(buf);
   1c1b2:	480a      	ldr	r0, [pc, #40]	; (1c1dc <net_buf_put+0x40>)
   1c1b4:	f00b f80b 	bl	271ce <assert_post_action>
   1c1b8:	b949      	cbnz	r1, 1c1ce <net_buf_put+0x32>
   1c1ba:	490a      	ldr	r1, [pc, #40]	; (1c1e4 <net_buf_put+0x48>)
   1c1bc:	4a07      	ldr	r2, [pc, #28]	; (1c1dc <net_buf_put+0x40>)
   1c1be:	4808      	ldr	r0, [pc, #32]	; (1c1e0 <net_buf_put+0x44>)
   1c1c0:	f44f 73e7 	mov.w	r3, #462	; 0x1ce
   1c1c4:	f00b f80a 	bl	271dc <assert_print>
   1c1c8:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
   1c1cc:	e7f1      	b.n	1c1b2 <net_buf_put+0x16>

	k_fifo_put(fifo, buf);
}
   1c1ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_fifo_put(fifo, buf);
   1c1d2:	f00d bb50 	b.w	29876 <k_queue_append>
   1c1d6:	bf00      	nop
   1c1d8:	0002d4a6 	.word	0x0002d4a6
   1c1dc:	0002d439 	.word	0x0002d439
   1c1e0:	0002ae37 	.word	0x0002ae37
   1c1e4:	0002d4bb 	.word	0x0002d4bb

0001c1e8 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1c1e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1c1ec:	4605      	mov	r5, r0
   1c1ee:	b328      	cbz	r0, 1c23c <net_buf_unref+0x54>
   1c1f0:	4e1b      	ldr	r6, [pc, #108]	; (1c260 <net_buf_unref+0x78>)
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1c1f2:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   1c1f4:	f04f 0834 	mov.w	r8, #52	; 0x34
		struct net_buf *frags = buf->frags;
   1c1f8:	462c      	mov	r4, r5
   1c1fa:	686d      	ldr	r5, [r5, #4]
		if (--buf->ref > 0) {
   1c1fc:	7a23      	ldrb	r3, [r4, #8]
   1c1fe:	3b01      	subs	r3, #1
   1c200:	b2db      	uxtb	r3, r3
   1c202:	7223      	strb	r3, [r4, #8]
   1c204:	b9c3      	cbnz	r3, 1c238 <net_buf_unref+0x50>
		if (buf->__buf) {
   1c206:	6961      	ldr	r1, [r4, #20]
   1c208:	b159      	cbz	r1, 1c222 <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1c20a:	7a63      	ldrb	r3, [r4, #9]
   1c20c:	07db      	lsls	r3, r3, #31
   1c20e:	d407      	bmi.n	1c220 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1c210:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   1c212:	fb08 6303 	mla	r3, r8, r3, r6
   1c216:	4620      	mov	r0, r4
   1c218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1c21a:	681b      	ldr	r3, [r3, #0]
   1c21c:	689b      	ldr	r3, [r3, #8]
   1c21e:	4798      	blx	r3
			buf->__buf = NULL;
   1c220:	6167      	str	r7, [r4, #20]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1c222:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   1c224:	60e7      	str	r7, [r4, #12]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1c226:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   1c22a:	6067      	str	r7, [r4, #4]
		if (pool->destroy) {
   1c22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1c22e:	b18b      	cbz	r3, 1c254 <net_buf_unref+0x6c>
			pool->destroy(buf);
   1c230:	4620      	mov	r0, r4
   1c232:	4798      	blx	r3
	while (buf) {
   1c234:	2d00      	cmp	r5, #0
   1c236:	d1df      	bne.n	1c1f8 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1c238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1c23c:	4909      	ldr	r1, [pc, #36]	; (1c264 <net_buf_unref+0x7c>)
   1c23e:	480a      	ldr	r0, [pc, #40]	; (1c268 <net_buf_unref+0x80>)
   1c240:	4a0a      	ldr	r2, [pc, #40]	; (1c26c <net_buf_unref+0x84>)
   1c242:	f240 13d9 	movw	r3, #473	; 0x1d9
   1c246:	f00a ffc9 	bl	271dc <assert_print>
   1c24a:	4808      	ldr	r0, [pc, #32]	; (1c26c <net_buf_unref+0x84>)
   1c24c:	f240 11d9 	movw	r1, #473	; 0x1d9
   1c250:	f00a ffbd 	bl	271ce <assert_post_action>
	k_lifo_put(&pool->free, buf);
   1c254:	4621      	mov	r1, r4
   1c256:	fb00 6008 	mla	r0, r0, r8, r6
   1c25a:	f00d fb17 	bl	2988c <k_queue_prepend>
}
   1c25e:	e7e9      	b.n	1c234 <net_buf_unref+0x4c>
   1c260:	20000ae0 	.word	0x20000ae0
   1c264:	0002d4bb 	.word	0x0002d4bb
   1c268:	0002ae37 	.word	0x0002ae37
   1c26c:	0002d439 	.word	0x0002d439

0001c270 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1c270:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1c272:	b958      	cbnz	r0, 1c28c <net_buf_ref+0x1c>
   1c274:	4907      	ldr	r1, [pc, #28]	; (1c294 <net_buf_ref+0x24>)
   1c276:	4808      	ldr	r0, [pc, #32]	; (1c298 <net_buf_ref+0x28>)
   1c278:	4a08      	ldr	r2, [pc, #32]	; (1c29c <net_buf_ref+0x2c>)
   1c27a:	f44f 7302 	mov.w	r3, #520	; 0x208
   1c27e:	f00a ffad 	bl	271dc <assert_print>
   1c282:	4806      	ldr	r0, [pc, #24]	; (1c29c <net_buf_ref+0x2c>)
   1c284:	f44f 7102 	mov.w	r1, #520	; 0x208
   1c288:	f00a ffa1 	bl	271ce <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1c28c:	7a02      	ldrb	r2, [r0, #8]
   1c28e:	3201      	adds	r2, #1
   1c290:	7202      	strb	r2, [r0, #8]
	return buf;
}
   1c292:	bd08      	pop	{r3, pc}
   1c294:	0002d4bb 	.word	0x0002d4bb
   1c298:	0002ae37 	.word	0x0002ae37
   1c29c:	0002d439 	.word	0x0002d439

0001c2a0 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1c2a0:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1c2a2:	4603      	mov	r3, r0
   1c2a4:	b958      	cbnz	r0, 1c2be <net_buf_frag_last+0x1e>
   1c2a6:	4908      	ldr	r1, [pc, #32]	; (1c2c8 <net_buf_frag_last+0x28>)
   1c2a8:	4808      	ldr	r0, [pc, #32]	; (1c2cc <net_buf_frag_last+0x2c>)
   1c2aa:	4a09      	ldr	r2, [pc, #36]	; (1c2d0 <net_buf_frag_last+0x30>)
   1c2ac:	f240 2345 	movw	r3, #581	; 0x245
   1c2b0:	f00a ff94 	bl	271dc <assert_print>
   1c2b4:	4806      	ldr	r0, [pc, #24]	; (1c2d0 <net_buf_frag_last+0x30>)
   1c2b6:	f240 2145 	movw	r1, #581	; 0x245
   1c2ba:	f00a ff88 	bl	271ce <assert_post_action>

	while (buf->frags) {
   1c2be:	4618      	mov	r0, r3
   1c2c0:	685b      	ldr	r3, [r3, #4]
   1c2c2:	2b00      	cmp	r3, #0
   1c2c4:	d1fb      	bne.n	1c2be <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
   1c2c6:	bd08      	pop	{r3, pc}
   1c2c8:	0002d4bb 	.word	0x0002d4bb
   1c2cc:	0002ae37 	.word	0x0002ae37
   1c2d0:	0002d439 	.word	0x0002d439

0001c2d4 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1c2d4:	b570      	push	{r4, r5, r6, lr}
   1c2d6:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1c2d8:	4604      	mov	r4, r0
   1c2da:	b958      	cbnz	r0, 1c2f4 <net_buf_frag_insert+0x20>
   1c2dc:	490f      	ldr	r1, [pc, #60]	; (1c31c <net_buf_frag_insert+0x48>)
   1c2de:	4a10      	ldr	r2, [pc, #64]	; (1c320 <net_buf_frag_insert+0x4c>)
   1c2e0:	4810      	ldr	r0, [pc, #64]	; (1c324 <net_buf_frag_insert+0x50>)
   1c2e2:	f44f 7314 	mov.w	r3, #592	; 0x250
   1c2e6:	f00a ff79 	bl	271dc <assert_print>
   1c2ea:	f44f 7114 	mov.w	r1, #592	; 0x250
	__ASSERT_NO_MSG(frag);
   1c2ee:	480c      	ldr	r0, [pc, #48]	; (1c320 <net_buf_frag_insert+0x4c>)
   1c2f0:	f00a ff6d 	bl	271ce <assert_post_action>
   1c2f4:	b949      	cbnz	r1, 1c30a <net_buf_frag_insert+0x36>
   1c2f6:	490c      	ldr	r1, [pc, #48]	; (1c328 <net_buf_frag_insert+0x54>)
   1c2f8:	4a09      	ldr	r2, [pc, #36]	; (1c320 <net_buf_frag_insert+0x4c>)
   1c2fa:	480a      	ldr	r0, [pc, #40]	; (1c324 <net_buf_frag_insert+0x50>)
   1c2fc:	f240 2351 	movw	r3, #593	; 0x251
   1c300:	f00a ff6c 	bl	271dc <assert_print>
   1c304:	f240 2151 	movw	r1, #593	; 0x251
   1c308:	e7f1      	b.n	1c2ee <net_buf_frag_insert+0x1a>

	if (parent->frags) {
   1c30a:	6846      	ldr	r6, [r0, #4]
   1c30c:	b11e      	cbz	r6, 1c316 <net_buf_frag_insert+0x42>
		net_buf_frag_last(frag)->frags = parent->frags;
   1c30e:	4608      	mov	r0, r1
   1c310:	f7ff ffc6 	bl	1c2a0 <net_buf_frag_last>
   1c314:	6046      	str	r6, [r0, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1c316:	6065      	str	r5, [r4, #4]
}
   1c318:	bd70      	pop	{r4, r5, r6, pc}
   1c31a:	bf00      	nop
   1c31c:	0002d4ab 	.word	0x0002d4ab
   1c320:	0002d439 	.word	0x0002d439
   1c324:	0002ae37 	.word	0x0002ae37
   1c328:	0002d4b2 	.word	0x0002d4b2

0001c32c <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1c32c:	b538      	push	{r3, r4, r5, lr}
   1c32e:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(frag);
   1c330:	460c      	mov	r4, r1
   1c332:	b959      	cbnz	r1, 1c34c <net_buf_frag_add+0x20>
   1c334:	490c      	ldr	r1, [pc, #48]	; (1c368 <net_buf_frag_add+0x3c>)
   1c336:	480d      	ldr	r0, [pc, #52]	; (1c36c <net_buf_frag_add+0x40>)
   1c338:	4a0d      	ldr	r2, [pc, #52]	; (1c370 <net_buf_frag_add+0x44>)
   1c33a:	f44f 7317 	mov.w	r3, #604	; 0x25c
   1c33e:	f00a ff4d 	bl	271dc <assert_print>
   1c342:	480b      	ldr	r0, [pc, #44]	; (1c370 <net_buf_frag_add+0x44>)
   1c344:	f44f 7117 	mov.w	r1, #604	; 0x25c
   1c348:	f00a ff41 	bl	271ce <assert_post_action>

	if (!head) {
   1c34c:	b920      	cbnz	r0, 1c358 <net_buf_frag_add+0x2c>
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1c34e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   1c352:	4608      	mov	r0, r1
   1c354:	f7ff bf8c 	b.w	1c270 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1c358:	f7ff ffa2 	bl	1c2a0 <net_buf_frag_last>
   1c35c:	4621      	mov	r1, r4
   1c35e:	f7ff ffb9 	bl	1c2d4 <net_buf_frag_insert>
}
   1c362:	4628      	mov	r0, r5
   1c364:	bd38      	pop	{r3, r4, r5, pc}
   1c366:	bf00      	nop
   1c368:	0002d4b2 	.word	0x0002d4b2
   1c36c:	0002ae37 	.word	0x0002ae37
   1c370:	0002d439 	.word	0x0002d439

0001c374 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1c374:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1c376:	b948      	cbnz	r0, 1c38c <net_buf_simple_reserve+0x18>
   1c378:	490b      	ldr	r1, [pc, #44]	; (1c3a8 <net_buf_simple_reserve+0x34>)
   1c37a:	4a0c      	ldr	r2, [pc, #48]	; (1c3ac <net_buf_simple_reserve+0x38>)
   1c37c:	480c      	ldr	r0, [pc, #48]	; (1c3b0 <net_buf_simple_reserve+0x3c>)
   1c37e:	232b      	movs	r3, #43	; 0x2b
   1c380:	f00a ff2c 	bl	271dc <assert_print>
   1c384:	212b      	movs	r1, #43	; 0x2b
	__ASSERT_NO_MSG(buf->len == 0U);
   1c386:	4809      	ldr	r0, [pc, #36]	; (1c3ac <net_buf_simple_reserve+0x38>)
   1c388:	f00a ff21 	bl	271ce <assert_post_action>
   1c38c:	8883      	ldrh	r3, [r0, #4]
   1c38e:	b13b      	cbz	r3, 1c3a0 <net_buf_simple_reserve+0x2c>
   1c390:	4908      	ldr	r1, [pc, #32]	; (1c3b4 <net_buf_simple_reserve+0x40>)
   1c392:	4a06      	ldr	r2, [pc, #24]	; (1c3ac <net_buf_simple_reserve+0x38>)
   1c394:	4806      	ldr	r0, [pc, #24]	; (1c3b0 <net_buf_simple_reserve+0x3c>)
   1c396:	232c      	movs	r3, #44	; 0x2c
   1c398:	f00a ff20 	bl	271dc <assert_print>
   1c39c:	212c      	movs	r1, #44	; 0x2c
   1c39e:	e7f2      	b.n	1c386 <net_buf_simple_reserve+0x12>
	NET_BUF_SIMPLE_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1c3a0:	6883      	ldr	r3, [r0, #8]
   1c3a2:	440b      	add	r3, r1
   1c3a4:	6003      	str	r3, [r0, #0]
}
   1c3a6:	bd08      	pop	{r3, pc}
   1c3a8:	0002d4bb 	.word	0x0002d4bb
   1c3ac:	0002d4bf 	.word	0x0002d4bf
   1c3b0:	0002ae37 	.word	0x0002ae37
   1c3b4:	0002d4ea 	.word	0x0002d4ea

0001c3b8 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1c3b8:	b508      	push	{r3, lr}
   1c3ba:	4603      	mov	r3, r0
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1c3bc:	6800      	ldr	r0, [r0, #0]
   1c3be:	689a      	ldr	r2, [r3, #8]
   1c3c0:	1a82      	subs	r2, r0, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1c3c2:	4291      	cmp	r1, r2
   1c3c4:	d90b      	bls.n	1c3de <net_buf_simple_push+0x26>
   1c3c6:	4909      	ldr	r1, [pc, #36]	; (1c3ec <net_buf_simple_push+0x34>)
   1c3c8:	4809      	ldr	r0, [pc, #36]	; (1c3f0 <net_buf_simple_push+0x38>)
   1c3ca:	4a0a      	ldr	r2, [pc, #40]	; (1c3f4 <net_buf_simple_push+0x3c>)
   1c3cc:	f240 132d 	movw	r3, #301	; 0x12d
   1c3d0:	f00a ff04 	bl	271dc <assert_print>
   1c3d4:	4807      	ldr	r0, [pc, #28]	; (1c3f4 <net_buf_simple_push+0x3c>)
   1c3d6:	f240 112d 	movw	r1, #301	; 0x12d
   1c3da:	f00a fef8 	bl	271ce <assert_post_action>
	buf->len += len;
   1c3de:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1c3e0:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1c3e2:	4411      	add	r1, r2
	buf->data -= len;
   1c3e4:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1c3e6:	8099      	strh	r1, [r3, #4]
}
   1c3e8:	bd08      	pop	{r3, pc}
   1c3ea:	bf00      	nop
   1c3ec:	0002d509 	.word	0x0002d509
   1c3f0:	0002ae37 	.word	0x0002ae37
   1c3f4:	0002d4bf 	.word	0x0002d4bf

0001c3f8 <net_buf_simple_pull>:
{
   1c3f8:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1c3fa:	8882      	ldrh	r2, [r0, #4]
   1c3fc:	428a      	cmp	r2, r1
{
   1c3fe:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   1c400:	d20b      	bcs.n	1c41a <net_buf_simple_pull+0x22>
   1c402:	4909      	ldr	r1, [pc, #36]	; (1c428 <net_buf_simple_pull+0x30>)
   1c404:	4809      	ldr	r0, [pc, #36]	; (1c42c <net_buf_simple_pull+0x34>)
   1c406:	4a0a      	ldr	r2, [pc, #40]	; (1c430 <net_buf_simple_pull+0x38>)
   1c408:	f240 138d 	movw	r3, #397	; 0x18d
   1c40c:	f00a fee6 	bl	271dc <assert_print>
   1c410:	4807      	ldr	r0, [pc, #28]	; (1c430 <net_buf_simple_pull+0x38>)
   1c412:	f240 118d 	movw	r1, #397	; 0x18d
   1c416:	f00a feda 	bl	271ce <assert_post_action>
	buf->len -= len;
   1c41a:	1a52      	subs	r2, r2, r1
   1c41c:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1c41e:	6800      	ldr	r0, [r0, #0]
   1c420:	4408      	add	r0, r1
   1c422:	6018      	str	r0, [r3, #0]
}
   1c424:	bd08      	pop	{r3, pc}
   1c426:	bf00      	nop
   1c428:	0002d4f9 	.word	0x0002d4f9
   1c42c:	0002ae37 	.word	0x0002ae37
   1c430:	0002d4bf 	.word	0x0002d4bf

0001c434 <net_buf_simple_pull_mem>:
{
   1c434:	b508      	push	{r3, lr}
   1c436:	4603      	mov	r3, r0
	void *data = buf->data;
   1c438:	6800      	ldr	r0, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   1c43a:	889a      	ldrh	r2, [r3, #4]
   1c43c:	428a      	cmp	r2, r1
   1c43e:	d20b      	bcs.n	1c458 <net_buf_simple_pull_mem+0x24>
   1c440:	4908      	ldr	r1, [pc, #32]	; (1c464 <net_buf_simple_pull_mem+0x30>)
   1c442:	4809      	ldr	r0, [pc, #36]	; (1c468 <net_buf_simple_pull_mem+0x34>)
   1c444:	4a09      	ldr	r2, [pc, #36]	; (1c46c <net_buf_simple_pull_mem+0x38>)
   1c446:	f240 1399 	movw	r3, #409	; 0x199
   1c44a:	f00a fec7 	bl	271dc <assert_print>
   1c44e:	4807      	ldr	r0, [pc, #28]	; (1c46c <net_buf_simple_pull_mem+0x38>)
   1c450:	f240 1199 	movw	r1, #409	; 0x199
   1c454:	f00a febb 	bl	271ce <assert_post_action>
	buf->len -= len;
   1c458:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1c45a:	4401      	add	r1, r0
	buf->len -= len;
   1c45c:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1c45e:	6019      	str	r1, [r3, #0]
}
   1c460:	bd08      	pop	{r3, pc}
   1c462:	bf00      	nop
   1c464:	0002d4f9 	.word	0x0002d4f9
   1c468:	0002ae37 	.word	0x0002ae37
   1c46c:	0002d4bf 	.word	0x0002d4bf

0001c470 <net_buf_simple_add>:
{
   1c470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return buf->data + buf->len;
   1c472:	8885      	ldrh	r5, [r0, #4]
   1c474:	6803      	ldr	r3, [r0, #0]
   1c476:	460e      	mov	r6, r1
   1c478:	4604      	mov	r4, r0
   1c47a:	195f      	adds	r7, r3, r5
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1c47c:	f00c fcd7 	bl	28e2e <net_buf_simple_tailroom>
   1c480:	42b0      	cmp	r0, r6
   1c482:	d209      	bcs.n	1c498 <net_buf_simple_add+0x28>
   1c484:	4906      	ldr	r1, [pc, #24]	; (1c4a0 <net_buf_simple_add+0x30>)
   1c486:	4807      	ldr	r0, [pc, #28]	; (1c4a4 <net_buf_simple_add+0x34>)
   1c488:	4a07      	ldr	r2, [pc, #28]	; (1c4a8 <net_buf_simple_add+0x38>)
   1c48a:	233e      	movs	r3, #62	; 0x3e
   1c48c:	f00a fea6 	bl	271dc <assert_print>
   1c490:	4805      	ldr	r0, [pc, #20]	; (1c4a8 <net_buf_simple_add+0x38>)
   1c492:	213e      	movs	r1, #62	; 0x3e
   1c494:	f00a fe9b 	bl	271ce <assert_post_action>
	buf->len += len;
   1c498:	4435      	add	r5, r6
   1c49a:	80a5      	strh	r5, [r4, #4]
}
   1c49c:	4638      	mov	r0, r7
   1c49e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c4a0:	0002d52d 	.word	0x0002d52d
   1c4a4:	0002ae37 	.word	0x0002ae37
   1c4a8:	0002d4bf 	.word	0x0002d4bf

0001c4ac <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1c4ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c4ae:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1c4b0:	490a      	ldr	r1, [pc, #40]	; (1c4dc <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1c4b2:	4a0b      	ldr	r2, [pc, #44]	; (1c4e0 <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
   1c4b4:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1c4b6:	2340      	movs	r3, #64	; 0x40
   1c4b8:	9300      	str	r3, [sp, #0]
   1c4ba:	1149      	asrs	r1, r1, #5
{
   1c4bc:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1c4be:	4623      	mov	r3, r4
   1c4c0:	4808      	ldr	r0, [pc, #32]	; (1c4e4 <onoff_start+0x38>)
   1c4c2:	f00c fce2 	bl	28e8a <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1c4c6:	1e01      	subs	r1, r0, #0
   1c4c8:	da05      	bge.n	1c4d6 <onoff_start+0x2a>
		notify(mgr, err);
   1c4ca:	4628      	mov	r0, r5
   1c4cc:	4623      	mov	r3, r4
	}
}
   1c4ce:	b003      	add	sp, #12
   1c4d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   1c4d4:	4718      	bx	r3
}
   1c4d6:	b003      	add	sp, #12
   1c4d8:	bd30      	pop	{r4, r5, pc}
   1c4da:	bf00      	nop
   1c4dc:	20003618 	.word	0x20003618
   1c4e0:	00028ef5 	.word	0x00028ef5
   1c4e4:	00029cc0 	.word	0x00029cc0

0001c4e8 <get_status>:
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1c4e8:	b2c9      	uxtb	r1, r1
   1c4ea:	2901      	cmp	r1, #1
{
   1c4ec:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1c4ee:	d909      	bls.n	1c504 <get_status+0x1c>
   1c4f0:	4908      	ldr	r1, [pc, #32]	; (1c514 <get_status+0x2c>)
   1c4f2:	4809      	ldr	r0, [pc, #36]	; (1c518 <get_status+0x30>)
   1c4f4:	4a09      	ldr	r2, [pc, #36]	; (1c51c <get_status+0x34>)
   1c4f6:	237a      	movs	r3, #122	; 0x7a
   1c4f8:	f00a fe70 	bl	271dc <assert_print>
   1c4fc:	4807      	ldr	r0, [pc, #28]	; (1c51c <get_status+0x34>)
   1c4fe:	217a      	movs	r1, #122	; 0x7a
   1c500:	f00a fe65 	bl	271ce <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1c504:	6903      	ldr	r3, [r0, #16]
   1c506:	220c      	movs	r2, #12
   1c508:	fb01 3302 	mla	r3, r1, r2, r3
   1c50c:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
   1c50e:	f000 0007 	and.w	r0, r0, #7
   1c512:	bd08      	pop	{r3, pc}
   1c514:	0002d59d 	.word	0x0002d59d
   1c518:	0002ae37 	.word	0x0002ae37
   1c51c:	0002d560 	.word	0x0002d560

0001c520 <stop>:
{
   1c520:	b570      	push	{r4, r5, r6, lr}
   1c522:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1c524:	2901      	cmp	r1, #1
	struct nrf_clock_control_data *data = dev->data;
   1c526:	6903      	ldr	r3, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1c528:	d90b      	bls.n	1c542 <stop+0x22>
   1c52a:	4919      	ldr	r1, [pc, #100]	; (1c590 <stop+0x70>)
   1c52c:	4819      	ldr	r0, [pc, #100]	; (1c594 <stop+0x74>)
   1c52e:	4a1a      	ldr	r2, [pc, #104]	; (1c598 <stop+0x78>)
   1c530:	f240 135d 	movw	r3, #349	; 0x15d
   1c534:	f00a fe52 	bl	271dc <assert_print>
   1c538:	4817      	ldr	r0, [pc, #92]	; (1c598 <stop+0x78>)
   1c53a:	f240 115d 	movw	r1, #349	; 0x15d
   1c53e:	f00a fe46 	bl	271ce <assert_post_action>
	__asm__ volatile(
   1c542:	f04f 0440 	mov.w	r4, #64	; 0x40
   1c546:	f3ef 8511 	mrs	r5, BASEPRI
   1c54a:	f384 8812 	msr	BASEPRI_MAX, r4
   1c54e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1c552:	260c      	movs	r6, #12
   1c554:	fb06 3401 	mla	r4, r6, r1, r3
   1c558:	6ca4      	ldr	r4, [r4, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1c55a:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1c55e:	d008      	beq.n	1c572 <stop+0x52>
   1c560:	42a2      	cmp	r2, r4
   1c562:	d006      	beq.n	1c572 <stop+0x52>
	__asm__ volatile(
   1c564:	f385 8811 	msr	BASEPRI, r5
   1c568:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   1c56c:	f04f 30ff 	mov.w	r0, #4294967295
}
   1c570:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1c572:	4371      	muls	r1, r6
   1c574:	440b      	add	r3, r1
   1c576:	2201      	movs	r2, #1
   1c578:	649a      	str	r2, [r3, #72]	; 0x48
   1c57a:	f385 8811 	msr	BASEPRI, r5
   1c57e:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   1c582:	6843      	ldr	r3, [r0, #4]
   1c584:	440b      	add	r3, r1
   1c586:	685b      	ldr	r3, [r3, #4]
   1c588:	4798      	blx	r3
	return 0;
   1c58a:	2000      	movs	r0, #0
   1c58c:	e7f0      	b.n	1c570 <stop+0x50>
   1c58e:	bf00      	nop
   1c590:	0002d59d 	.word	0x0002d59d
   1c594:	0002ae37 	.word	0x0002ae37
   1c598:	0002d560 	.word	0x0002d560

0001c59c <onoff_stop>:
{
   1c59c:	b570      	push	{r4, r5, r6, lr}
   1c59e:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1c5a0:	4906      	ldr	r1, [pc, #24]	; (1c5bc <onoff_stop+0x20>)
   1c5a2:	1a41      	subs	r1, r0, r1
{
   1c5a4:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1c5a6:	1149      	asrs	r1, r1, #5
   1c5a8:	4805      	ldr	r0, [pc, #20]	; (1c5c0 <onoff_stop+0x24>)
   1c5aa:	2240      	movs	r2, #64	; 0x40
   1c5ac:	f7ff ffb8 	bl	1c520 <stop>
	notify(mgr, res);
   1c5b0:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1c5b2:	4601      	mov	r1, r0
	notify(mgr, res);
   1c5b4:	4620      	mov	r0, r4
}
   1c5b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1c5ba:	4718      	bx	r3
   1c5bc:	20003618 	.word	0x20003618
   1c5c0:	00029cc0 	.word	0x00029cc0

0001c5c4 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1c5c4:	2200      	movs	r2, #0
{
   1c5c6:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1c5c8:	2101      	movs	r1, #1
{
   1c5ca:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1c5cc:	4610      	mov	r0, r2
   1c5ce:	f7f8 fd5b 	bl	15088 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1c5d2:	480f      	ldr	r0, [pc, #60]	; (1c610 <clk_init+0x4c>)
   1c5d4:	f002 ff12 	bl	1f3fc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1c5d8:	4b0e      	ldr	r3, [pc, #56]	; (1c614 <clk_init+0x50>)
   1c5da:	4298      	cmp	r0, r3
   1c5dc:	d115      	bne.n	1c60a <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1c5de:	f00d f840 	bl	29662 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1c5e2:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1c5e4:	490c      	ldr	r1, [pc, #48]	; (1c618 <clk_init+0x54>)
   1c5e6:	4630      	mov	r0, r6
   1c5e8:	f00a fd3e 	bl	27068 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1c5ec:	2800      	cmp	r0, #0
   1c5ee:	db0b      	blt.n	1c608 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1c5f0:	2501      	movs	r5, #1
   1c5f2:	64b5      	str	r5, [r6, #72]	; 0x48
	struct nrf_clock_control_data *data = dev->data;
   1c5f4:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1c5f6:	4908      	ldr	r1, [pc, #32]	; (1c618 <clk_init+0x54>)
   1c5f8:	f104 0020 	add.w	r0, r4, #32
   1c5fc:	f00a fd34 	bl	27068 <onoff_manager_init>
		if (err < 0) {
   1c600:	2800      	cmp	r0, #0
   1c602:	db01      	blt.n	1c608 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1c604:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
   1c606:	2000      	movs	r0, #0
}
   1c608:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1c60a:	f06f 0004 	mvn.w	r0, #4
   1c60e:	e7fb      	b.n	1c608 <clk_init+0x44>
   1c610:	0001c651 	.word	0x0001c651
   1c614:	0bad0000 	.word	0x0bad0000
   1c618:	0002a618 	.word	0x0002a618

0001c61c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1c61c:	b570      	push	{r4, r5, r6, lr}
   1c61e:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1c620:	230c      	movs	r3, #12
   1c622:	4809      	ldr	r0, [pc, #36]	; (1c648 <clkstarted_handle.constprop.0+0x2c>)
   1c624:	434b      	muls	r3, r1
   1c626:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1c628:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   1c62c:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
   1c62e:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1c630:	4418      	add	r0, r3
	sub_data->cb = NULL;
   1c632:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   1c634:	f00c fc16 	bl	28e64 <set_on_state>
	if (callback) {
   1c638:	b12d      	cbz	r5, 1c646 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1c63a:	4632      	mov	r2, r6
   1c63c:	462b      	mov	r3, r5
   1c63e:	4803      	ldr	r0, [pc, #12]	; (1c64c <clkstarted_handle.constprop.0+0x30>)
}
   1c640:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1c644:	4718      	bx	r3
}
   1c646:	bd70      	pop	{r4, r5, r6, pc}
   1c648:	20003618 	.word	0x20003618
   1c64c:	00029cc0 	.word	0x00029cc0

0001c650 <clock_event_handler>:
	switch (event) {
   1c650:	2801      	cmp	r0, #1
{
   1c652:	b508      	push	{r3, lr}
	switch (event) {
   1c654:	d006      	beq.n	1c664 <clock_event_handler+0x14>
   1c656:	2803      	cmp	r0, #3
   1c658:	d008      	beq.n	1c66c <clock_event_handler+0x1c>
   1c65a:	b998      	cbnz	r0, 1c684 <clock_event_handler+0x34>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1c65c:	4b0f      	ldr	r3, [pc, #60]	; (1c69c <clock_event_handler+0x4c>)
   1c65e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c660:	075b      	lsls	r3, r3, #29
   1c662:	d119      	bne.n	1c698 <clock_event_handler+0x48>
}
   1c664:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1c668:	f7ff bfd8 	b.w	1c61c <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   1c66c:	490c      	ldr	r1, [pc, #48]	; (1c6a0 <clock_event_handler+0x50>)
   1c66e:	4a0d      	ldr	r2, [pc, #52]	; (1c6a4 <clock_event_handler+0x54>)
   1c670:	480d      	ldr	r0, [pc, #52]	; (1c6a8 <clock_event_handler+0x58>)
   1c672:	f240 236e 	movw	r3, #622	; 0x26e
   1c676:	f00a fdb1 	bl	271dc <assert_print>
   1c67a:	f240 216e 	movw	r1, #622	; 0x26e
		__ASSERT_NO_MSG(0);
   1c67e:	4809      	ldr	r0, [pc, #36]	; (1c6a4 <clock_event_handler+0x54>)
   1c680:	f00a fda5 	bl	271ce <assert_post_action>
   1c684:	4906      	ldr	r1, [pc, #24]	; (1c6a0 <clock_event_handler+0x50>)
   1c686:	4a07      	ldr	r2, [pc, #28]	; (1c6a4 <clock_event_handler+0x54>)
   1c688:	4807      	ldr	r0, [pc, #28]	; (1c6a8 <clock_event_handler+0x58>)
   1c68a:	f240 2372 	movw	r3, #626	; 0x272
   1c68e:	f00a fda5 	bl	271dc <assert_print>
   1c692:	f240 2172 	movw	r1, #626	; 0x272
   1c696:	e7f2      	b.n	1c67e <clock_event_handler+0x2e>
}
   1c698:	bd08      	pop	{r3, pc}
   1c69a:	bf00      	nop
   1c69c:	20003618 	.word	0x20003618
   1c6a0:	0002dab5 	.word	0x0002dab5
   1c6a4:	0002d560 	.word	0x0002d560
   1c6a8:	0002ae37 	.word	0x0002ae37

0001c6ac <generic_hfclk_start>:
{
   1c6ac:	b508      	push	{r3, lr}
	__asm__ volatile(
   1c6ae:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c6b2:	f3ef 8111 	mrs	r1, BASEPRI
   1c6b6:	f383 8812 	msr	BASEPRI_MAX, r3
   1c6ba:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1c6be:	4a12      	ldr	r2, [pc, #72]	; (1c708 <generic_hfclk_start+0x5c>)
   1c6c0:	6813      	ldr	r3, [r2, #0]
   1c6c2:	f043 0002 	orr.w	r0, r3, #2
   1c6c6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1c6c8:	07da      	lsls	r2, r3, #31
   1c6ca:	d408      	bmi.n	1c6de <generic_hfclk_start+0x32>
	__asm__ volatile(
   1c6cc:	f381 8811 	msr	BASEPRI, r1
   1c6d0:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1c6d4:	2001      	movs	r0, #1
}
   1c6d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1c6da:	f002 be49 	b.w	1f370 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1c6de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c6e2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1c6e6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1c6ea:	07d3      	lsls	r3, r2, #31
   1c6ec:	d5ee      	bpl.n	1c6cc <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   1c6ee:	4807      	ldr	r0, [pc, #28]	; (1c70c <generic_hfclk_start+0x60>)
   1c6f0:	f00c fbb8 	bl	28e64 <set_on_state>
   1c6f4:	f381 8811 	msr	BASEPRI, r1
   1c6f8:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   1c6fc:	2000      	movs	r0, #0
}
   1c6fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1c702:	f7ff bf8b 	b.w	1c61c <clkstarted_handle.constprop.0>
   1c706:	bf00      	nop
   1c708:	20003670 	.word	0x20003670
   1c70c:	20003660 	.word	0x20003660

0001c710 <api_blocking_start>:
{
   1c710:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1c712:	2200      	movs	r2, #0
   1c714:	2301      	movs	r3, #1
   1c716:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1c71a:	ab04      	add	r3, sp, #16
   1c71c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1c720:	4a09      	ldr	r2, [pc, #36]	; (1c748 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1c722:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1c726:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1c728:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1c72c:	f00c fbdb 	bl	28ee6 <api_start>
	if (err < 0) {
   1c730:	2800      	cmp	r0, #0
   1c732:	db05      	blt.n	1c740 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1c734:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1c738:	2300      	movs	r3, #0
   1c73a:	4668      	mov	r0, sp
   1c73c:	f004 fbea 	bl	20f14 <z_impl_k_sem_take>
}
   1c740:	b007      	add	sp, #28
   1c742:	f85d fb04 	ldr.w	pc, [sp], #4
   1c746:	bf00      	nop
   1c748:	00028f0d 	.word	0x00028f0d

0001c74c <generic_hfclk_stop>:
{
   1c74c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1c74e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c752:	f3ef 8411 	mrs	r4, BASEPRI
   1c756:	f383 8812 	msr	BASEPRI_MAX, r3
   1c75a:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   1c75e:	4a07      	ldr	r2, [pc, #28]	; (1c77c <generic_hfclk_stop+0x30>)
   1c760:	6813      	ldr	r3, [r2, #0]
   1c762:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   1c766:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   1c768:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   1c76a:	d402      	bmi.n	1c772 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1c76c:	2001      	movs	r0, #1
   1c76e:	f002 fe27 	bl	1f3c0 <nrfx_clock_stop>
	__asm__ volatile(
   1c772:	f384 8811 	msr	BASEPRI, r4
   1c776:	f3bf 8f6f 	isb	sy
}
   1c77a:	bd10      	pop	{r4, pc}
   1c77c:	20003670 	.word	0x20003670

0001c780 <z_nrf_clock_control_lf_on>:
{
   1c780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1c784:	4945      	ldr	r1, [pc, #276]	; (1c89c <z_nrf_clock_control_lf_on+0x11c>)
   1c786:	f3bf 8f5b 	dmb	ish
   1c78a:	4606      	mov	r6, r0
   1c78c:	2201      	movs	r2, #1
   1c78e:	e851 3f00 	ldrex	r3, [r1]
   1c792:	e841 2000 	strex	r0, r2, [r1]
   1c796:	2800      	cmp	r0, #0
   1c798:	d1f9      	bne.n	1c78e <z_nrf_clock_control_lf_on+0xe>
   1c79a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1c79e:	b9a3      	cbnz	r3, 1c7ca <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1c7a0:	493f      	ldr	r1, [pc, #252]	; (1c8a0 <z_nrf_clock_control_lf_on+0x120>)
		err = onoff_request(mgr, &cli);
   1c7a2:	4840      	ldr	r0, [pc, #256]	; (1c8a4 <z_nrf_clock_control_lf_on+0x124>)
   1c7a4:	604b      	str	r3, [r1, #4]
   1c7a6:	60cb      	str	r3, [r1, #12]
   1c7a8:	608a      	str	r2, [r1, #8]
   1c7aa:	f7f6 fdd9 	bl	13360 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   1c7ae:	2800      	cmp	r0, #0
   1c7b0:	da0b      	bge.n	1c7ca <z_nrf_clock_control_lf_on+0x4a>
   1c7b2:	493d      	ldr	r1, [pc, #244]	; (1c8a8 <z_nrf_clock_control_lf_on+0x128>)
   1c7b4:	4a3d      	ldr	r2, [pc, #244]	; (1c8ac <z_nrf_clock_control_lf_on+0x12c>)
   1c7b6:	483e      	ldr	r0, [pc, #248]	; (1c8b0 <z_nrf_clock_control_lf_on+0x130>)
   1c7b8:	f44f 730c 	mov.w	r3, #560	; 0x230
   1c7bc:	f00a fd0e 	bl	271dc <assert_print>
   1c7c0:	f44f 710c 	mov.w	r1, #560	; 0x230
		__ASSERT_NO_MSG(false);
   1c7c4:	4839      	ldr	r0, [pc, #228]	; (1c8ac <z_nrf_clock_control_lf_on+0x12c>)
   1c7c6:	f00a fd02 	bl	271ce <assert_post_action>
	switch (start_mode) {
   1c7ca:	b376      	cbz	r6, 1c82a <z_nrf_clock_control_lf_on+0xaa>
   1c7cc:	1e73      	subs	r3, r6, #1
   1c7ce:	2b01      	cmp	r3, #1
   1c7d0:	d859      	bhi.n	1c886 <z_nrf_clock_control_lf_on+0x106>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1c7d2:	2e01      	cmp	r6, #1
   1c7d4:	d107      	bne.n	1c7e6 <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1c7d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c7da:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1c7de:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   1c7e2:	2b01      	cmp	r3, #1
   1c7e4:	d021      	beq.n	1c82a <z_nrf_clock_control_lf_on+0xaa>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1c7e6:	f00d f80a 	bl	297fe <k_is_in_isr>
   1c7ea:	4605      	mov	r5, r0
   1c7ec:	b9f8      	cbnz	r0, 1c82e <z_nrf_clock_control_lf_on+0xae>
	return !z_sys_post_kernel;
   1c7ee:	4b31      	ldr	r3, [pc, #196]	; (1c8b4 <z_nrf_clock_control_lf_on+0x134>)
   1c7f0:	781b      	ldrb	r3, [r3, #0]
   1c7f2:	b1e3      	cbz	r3, 1c82e <z_nrf_clock_control_lf_on+0xae>
    p_reg->INTENCLR = mask;
   1c7f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c7f8:	2202      	movs	r2, #2
   1c7fa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1c7fe:	4607      	mov	r7, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c800:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 1c8bc <z_nrf_clock_control_lf_on+0x13c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1c804:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   1c808:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1c80c:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   1c810:	03d2      	lsls	r2, r2, #15
   1c812:	d516      	bpl.n	1c842 <z_nrf_clock_control_lf_on+0xc2>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1c814:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1c818:	2b01      	cmp	r3, #1
   1c81a:	d001      	beq.n	1c820 <z_nrf_clock_control_lf_on+0xa0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1c81c:	2e01      	cmp	r6, #1
   1c81e:	d110      	bne.n	1c842 <z_nrf_clock_control_lf_on+0xc2>
	if (isr_mode) {
   1c820:	b35d      	cbz	r5, 1c87a <z_nrf_clock_control_lf_on+0xfa>
   1c822:	f387 8811 	msr	BASEPRI, r7
   1c826:	f3bf 8f6f 	isb	sy
}
   1c82a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1c82e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c832:	f3ef 8711 	mrs	r7, BASEPRI
   1c836:	f383 8812 	msr	BASEPRI_MAX, r3
   1c83a:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1c83e:	2501      	movs	r5, #1
   1c840:	e7de      	b.n	1c800 <z_nrf_clock_control_lf_on+0x80>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1c842:	b1ad      	cbz	r5, 1c870 <z_nrf_clock_control_lf_on+0xf0>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1c844:	4638      	mov	r0, r7
   1c846:	f7f8 fb33 	bl	14eb0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   1c84a:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1c84e:	2b00      	cmp	r3, #0
   1c850:	d1da      	bne.n	1c808 <z_nrf_clock_control_lf_on+0x88>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1c852:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1c856:	2a00      	cmp	r2, #0
   1c858:	d0d6      	beq.n	1c808 <z_nrf_clock_control_lf_on+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c85a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1c85e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   1c862:	2301      	movs	r3, #1
   1c864:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
   1c868:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c86c:	60a3      	str	r3, [r4, #8]
}
   1c86e:	e7cb      	b.n	1c808 <z_nrf_clock_control_lf_on+0x88>
	return z_impl_k_sleep(timeout);
   1c870:	2100      	movs	r1, #0
   1c872:	2021      	movs	r0, #33	; 0x21
   1c874:	f006 f95c 	bl	22b30 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1c878:	e7e7      	b.n	1c84a <z_nrf_clock_control_lf_on+0xca>
    p_reg->INTENSET = mask;
   1c87a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c87e:	2202      	movs	r2, #2
   1c880:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1c884:	e7d1      	b.n	1c82a <z_nrf_clock_control_lf_on+0xaa>
		__ASSERT_NO_MSG(false);
   1c886:	490c      	ldr	r1, [pc, #48]	; (1c8b8 <z_nrf_clock_control_lf_on+0x138>)
   1c888:	4a08      	ldr	r2, [pc, #32]	; (1c8ac <z_nrf_clock_control_lf_on+0x12c>)
   1c88a:	4809      	ldr	r0, [pc, #36]	; (1c8b0 <z_nrf_clock_control_lf_on+0x130>)
   1c88c:	f240 2342 	movw	r3, #578	; 0x242
   1c890:	f00a fca4 	bl	271dc <assert_print>
   1c894:	f240 2142 	movw	r1, #578	; 0x242
   1c898:	e794      	b.n	1c7c4 <z_nrf_clock_control_lf_on+0x44>
   1c89a:	bf00      	nop
   1c89c:	20003614 	.word	0x20003614
   1c8a0:	20003604 	.word	0x20003604
   1c8a4:	20003638 	.word	0x20003638
   1c8a8:	0002b59f 	.word	0x0002b59f
   1c8ac:	0002d560 	.word	0x0002d560
   1c8b0:	0002ae37 	.word	0x0002ae37
   1c8b4:	200048d3 	.word	0x200048d3
   1c8b8:	0002dab5 	.word	0x0002dab5
   1c8bc:	e000e100 	.word	0xe000e100

0001c8c0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
   1c8c0:	b508      	push	{r3, lr}
   1c8c2:	4807      	ldr	r0, [pc, #28]	; (1c8e0 <uart_console_init+0x20>)
   1c8c4:	f00c ff5e 	bl	29784 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   1c8c8:	b138      	cbz	r0, 1c8da <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   1c8ca:	4806      	ldr	r0, [pc, #24]	; (1c8e4 <uart_console_init+0x24>)
   1c8cc:	f7f9 fad2 	bl	15e74 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1c8d0:	4804      	ldr	r0, [pc, #16]	; (1c8e4 <uart_console_init+0x24>)
   1c8d2:	f7f6 f9cf 	bl	12c74 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1c8d6:	2000      	movs	r0, #0
}
   1c8d8:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1c8da:	f06f 0012 	mvn.w	r0, #18
   1c8de:	e7fb      	b.n	1c8d8 <uart_console_init+0x18>
   1c8e0:	00029d50 	.word	0x00029d50
   1c8e4:	0001c8e9 	.word	0x0001c8e9

0001c8e8 <console_out>:
	if ('\n' == c) {
   1c8e8:	280a      	cmp	r0, #10
{
   1c8ea:	b538      	push	{r3, r4, r5, lr}
   1c8ec:	4d07      	ldr	r5, [pc, #28]	; (1c90c <console_out+0x24>)
   1c8ee:	4604      	mov	r4, r0
	if ('\n' == c) {
   1c8f0:	d104      	bne.n	1c8fc <console_out+0x14>
   1c8f2:	68ab      	ldr	r3, [r5, #8]
   1c8f4:	210d      	movs	r1, #13
   1c8f6:	69db      	ldr	r3, [r3, #28]
   1c8f8:	4628      	mov	r0, r5
   1c8fa:	4798      	blx	r3
   1c8fc:	68ab      	ldr	r3, [r5, #8]
   1c8fe:	4803      	ldr	r0, [pc, #12]	; (1c90c <console_out+0x24>)
   1c900:	69db      	ldr	r3, [r3, #28]
   1c902:	b2e1      	uxtb	r1, r4
   1c904:	4798      	blx	r3
}
   1c906:	4620      	mov	r0, r4
   1c908:	bd38      	pop	{r3, r4, r5, pc}
   1c90a:	bf00      	nop
   1c90c:	00029d50 	.word	0x00029d50

0001c910 <random_byte_get>:
   1c910:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c914:	f3ef 8211 	mrs	r2, BASEPRI
   1c918:	f383 8812 	msr	BASEPRI_MAX, r3
   1c91c:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1c920:	4b09      	ldr	r3, [pc, #36]	; (1c948 <random_byte_get+0x38>)
   1c922:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1c926:	b161      	cbz	r1, 1c942 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c928:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1c92a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c92e:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1c932:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1c936:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1c938:	f382 8811 	msr	BASEPRI, r2
   1c93c:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1c940:	4770      	bx	lr
	int retval = -EAGAIN;
   1c942:	f06f 000a 	mvn.w	r0, #10
   1c946:	e7f7      	b.n	1c938 <random_byte_get+0x28>
   1c948:	4000d000 	.word	0x4000d000

0001c94c <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1c94c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c94e:	4603      	mov	r3, r0
   1c950:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
   1c952:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
   1c954:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
   1c958:	f04f 0540 	mov.w	r5, #64	; 0x40
   1c95c:	f3ef 8211 	mrs	r2, BASEPRI
   1c960:	f385 8812 	msr	BASEPRI_MAX, r5
   1c964:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1c968:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1c96a:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   1c96e:	1be4      	subs	r4, r4, r7
   1c970:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
   1c974:	42a0      	cmp	r0, r4
		len = available;
   1c976:	bf88      	it	hi
   1c978:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1c97a:	183e      	adds	r6, r7, r0
   1c97c:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
   1c980:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
   1c982:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
   1c984:	f382 8811 	msr	BASEPRI, r2
   1c988:	f3bf 8f6f 	isb	sy
   1c98c:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
   1c98e:	428a      	cmp	r2, r1
   1c990:	d117      	bne.n	1c9c2 <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1c992:	4577      	cmp	r7, lr
   1c994:	d10d      	bne.n	1c9b2 <rng_pool_get+0x66>
	__asm__ volatile(
   1c996:	f04f 0140 	mov.w	r1, #64	; 0x40
   1c99a:	f3ef 8211 	mrs	r2, BASEPRI
   1c99e:	f381 8812 	msr	BASEPRI_MAX, r1
   1c9a2:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1c9a6:	7819      	ldrb	r1, [r3, #0]
   1c9a8:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
   1c9aa:	f382 8811 	msr	BASEPRI, r2
   1c9ae:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
   1c9b2:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
   1c9b4:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
   1c9b6:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1c9b8:	bf22      	ittt	cs
   1c9ba:	4b06      	ldrcs	r3, [pc, #24]	; (1c9d4 <rng_pool_get+0x88>)
   1c9bc:	2201      	movcs	r2, #1
   1c9be:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1c9c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1c9c2:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
   1c9c4:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1c9c6:	7976      	ldrb	r6, [r6, #5]
   1c9c8:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
   1c9cc:	ea05 050c 	and.w	r5, r5, ip
   1c9d0:	e7dd      	b.n	1c98e <rng_pool_get+0x42>
   1c9d2:	bf00      	nop
   1c9d4:	4000d000 	.word	0x4000d000

0001c9d8 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   1c9d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1c9dc:	4d2e      	ldr	r5, [pc, #184]	; (1ca98 <entropy_nrf5_get_entropy_isr+0xc0>)
   1c9de:	6900      	ldr	r0, [r0, #16]
   1c9e0:	42a8      	cmp	r0, r5
{
   1c9e2:	460e      	mov	r6, r1
   1c9e4:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1c9e6:	d00b      	beq.n	1ca00 <entropy_nrf5_get_entropy_isr+0x28>
   1c9e8:	492c      	ldr	r1, [pc, #176]	; (1ca9c <entropy_nrf5_get_entropy_isr+0xc4>)
   1c9ea:	482d      	ldr	r0, [pc, #180]	; (1caa0 <entropy_nrf5_get_entropy_isr+0xc8>)
   1c9ec:	4a2d      	ldr	r2, [pc, #180]	; (1caa4 <entropy_nrf5_get_entropy_isr+0xcc>)
   1c9ee:	f240 1307 	movw	r3, #263	; 0x107
   1c9f2:	f00a fbf3 	bl	271dc <assert_print>
   1c9f6:	482b      	ldr	r0, [pc, #172]	; (1caa4 <entropy_nrf5_get_entropy_isr+0xcc>)
   1c9f8:	f240 1107 	movw	r1, #263	; 0x107
   1c9fc:	f00a fbe7 	bl	271ce <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1ca00:	43db      	mvns	r3, r3
   1ca02:	f013 0501 	ands.w	r5, r3, #1
   1ca06:	d004      	beq.n	1ca12 <entropy_nrf5_get_entropy_isr+0x3a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1ca08:	3030      	adds	r0, #48	; 0x30
   1ca0a:	f7ff ff9f 	bl	1c94c <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1ca0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1ca12:	b3a2      	cbz	r2, 1ca7e <entropy_nrf5_get_entropy_isr+0xa6>
	__asm__ volatile(
   1ca14:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ca18:	f3ef 8811 	mrs	r8, BASEPRI
   1ca1c:	f383 8812 	msr	BASEPRI_MAX, r3
   1ca20:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1ca24:	200d      	movs	r0, #13
   1ca26:	f7f8 fb21 	bl	1506c <arch_irq_is_enabled>
   1ca2a:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1ca2c:	200d      	movs	r0, #13
   1ca2e:	f7f8 fb09 	bl	15044 <arch_irq_disable>
	__asm__ volatile(
   1ca32:	f388 8811 	msr	BASEPRI, r8
   1ca36:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1ca3a:	f8df a06c 	ldr.w	sl, [pc, #108]	; 1caa8 <entropy_nrf5_get_entropy_isr+0xd0>
   1ca3e:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1caac <entropy_nrf5_get_entropy_isr+0xd4>
   1ca42:	f8ca 5100 	str.w	r5, [sl, #256]	; 0x100
   1ca46:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   1ca4a:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1ca4e:	2301      	movs	r3, #1
   1ca50:	f8ca 3000 	str.w	r3, [sl]
   1ca54:	4625      	mov	r5, r4
   1ca56:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1ca5a:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1ca5e:	b183      	cbz	r3, 1ca82 <entropy_nrf5_get_entropy_isr+0xaa>
			byte = random_byte_get();
   1ca60:	f7ff ff56 	bl	1c910 <random_byte_get>
			if (byte < 0) {
   1ca64:	1e03      	subs	r3, r0, #0
   1ca66:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
   1ca6a:	dbf6      	blt.n	1ca5a <entropy_nrf5_get_entropy_isr+0x82>
			buf[--len] = byte;
   1ca6c:	3d01      	subs	r5, #1
   1ca6e:	b2ad      	uxth	r5, r5
   1ca70:	5573      	strb	r3, [r6, r5]
		} while (len);
   1ca72:	2d00      	cmp	r5, #0
   1ca74:	d1f1      	bne.n	1ca5a <entropy_nrf5_get_entropy_isr+0x82>
		if (irq_enabled) {
   1ca76:	b117      	cbz	r7, 1ca7e <entropy_nrf5_get_entropy_isr+0xa6>
			irq_enable(IRQN);
   1ca78:	200d      	movs	r0, #13
   1ca7a:	f7f8 fad5 	bl	15028 <arch_irq_enable>
	return cnt;
   1ca7e:	4620      	mov	r0, r4
   1ca80:	e7c5      	b.n	1ca0e <entropy_nrf5_get_entropy_isr+0x36>
	__asm__ volatile(
   1ca82:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ca86:	f3ef 8011 	mrs	r0, BASEPRI
   1ca8a:	f383 8812 	msr	BASEPRI_MAX, r3
   1ca8e:	f3bf 8f6f 	isb	sy
	arch_cpu_atomic_idle(key);
   1ca92:	f7f8 fa0d 	bl	14eb0 <arch_cpu_atomic_idle>
}
   1ca96:	e7e0      	b.n	1ca5a <entropy_nrf5_get_entropy_isr+0x82>
   1ca98:	20003674 	.word	0x20003674
   1ca9c:	0002d61c 	.word	0x0002d61c
   1caa0:	0002ae37 	.word	0x0002ae37
   1caa4:	0002d5ea 	.word	0x0002d5ea
   1caa8:	4000d000 	.word	0x4000d000
   1caac:	e000e100 	.word	0xe000e100

0001cab0 <entropy_nrf5_get_entropy>:
{
   1cab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1cab4:	4b19      	ldr	r3, [pc, #100]	; (1cb1c <entropy_nrf5_get_entropy+0x6c>)
   1cab6:	6907      	ldr	r7, [r0, #16]
   1cab8:	429f      	cmp	r7, r3
{
   1caba:	460d      	mov	r5, r1
   1cabc:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1cabe:	d105      	bne.n	1cacc <entropy_nrf5_get_entropy+0x1c>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1cac0:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
   1cac4:	b964      	cbnz	r4, 1cae0 <entropy_nrf5_get_entropy+0x30>
}
   1cac6:	4620      	mov	r0, r4
   1cac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1cacc:	4914      	ldr	r1, [pc, #80]	; (1cb20 <entropy_nrf5_get_entropy+0x70>)
   1cace:	4815      	ldr	r0, [pc, #84]	; (1cb24 <entropy_nrf5_get_entropy+0x74>)
   1cad0:	4a15      	ldr	r2, [pc, #84]	; (1cb28 <entropy_nrf5_get_entropy+0x78>)
   1cad2:	23e9      	movs	r3, #233	; 0xe9
   1cad4:	f00a fb82 	bl	271dc <assert_print>
   1cad8:	4813      	ldr	r0, [pc, #76]	; (1cb28 <entropy_nrf5_get_entropy+0x78>)
   1cada:	21e9      	movs	r1, #233	; 0xe9
   1cadc:	f00a fb77 	bl	271ce <assert_post_action>
	return z_impl_k_sem_take(sem, timeout);
   1cae0:	f04f 33ff 	mov.w	r3, #4294967295
   1cae4:	f04f 32ff 	mov.w	r2, #4294967295
   1cae8:	4638      	mov	r0, r7
   1caea:	f004 fa13 	bl	20f14 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1caee:	4622      	mov	r2, r4
   1caf0:	4629      	mov	r1, r5
   1caf2:	4640      	mov	r0, r8
   1caf4:	f7ff ff2a 	bl	1c94c <rng_pool_get>
   1caf8:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1cafa:	4638      	mov	r0, r7
   1cafc:	f004 f9c6 	bl	20e8c <z_impl_k_sem_give>
		if (bytes == 0U) {
   1cb00:	b93e      	cbnz	r6, 1cb12 <entropy_nrf5_get_entropy+0x62>
	return z_impl_k_sem_take(sem, timeout);
   1cb02:	f04f 32ff 	mov.w	r2, #4294967295
   1cb06:	f04f 33ff 	mov.w	r3, #4294967295
   1cb0a:	4808      	ldr	r0, [pc, #32]	; (1cb2c <entropy_nrf5_get_entropy+0x7c>)
   1cb0c:	f004 fa02 	bl	20f14 <z_impl_k_sem_take>
	while (len) {
   1cb10:	e7e6      	b.n	1cae0 <entropy_nrf5_get_entropy+0x30>
		len -= bytes;
   1cb12:	1ba4      	subs	r4, r4, r6
   1cb14:	b2a4      	uxth	r4, r4
		buf += bytes;
   1cb16:	4435      	add	r5, r6
   1cb18:	e7d4      	b.n	1cac4 <entropy_nrf5_get_entropy+0x14>
   1cb1a:	bf00      	nop
   1cb1c:	20003674 	.word	0x20003674
   1cb20:	0002d61c 	.word	0x0002d61c
   1cb24:	0002ae37 	.word	0x0002ae37
   1cb28:	0002d5ea 	.word	0x0002d5ea
   1cb2c:	2000368c 	.word	0x2000368c

0001cb30 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1cb30:	b538      	push	{r3, r4, r5, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1cb32:	4b21      	ldr	r3, [pc, #132]	; (1cbb8 <entropy_nrf5_init+0x88>)
   1cb34:	6904      	ldr	r4, [r0, #16]
   1cb36:	429c      	cmp	r4, r3
   1cb38:	d00b      	beq.n	1cb52 <entropy_nrf5_init+0x22>
   1cb3a:	4920      	ldr	r1, [pc, #128]	; (1cbbc <entropy_nrf5_init+0x8c>)
   1cb3c:	4820      	ldr	r0, [pc, #128]	; (1cbc0 <entropy_nrf5_init+0x90>)
   1cb3e:	4a21      	ldr	r2, [pc, #132]	; (1cbc4 <entropy_nrf5_init+0x94>)
   1cb40:	f240 134b 	movw	r3, #331	; 0x14b
   1cb44:	f00a fb4a 	bl	271dc <assert_print>
   1cb48:	481e      	ldr	r0, [pc, #120]	; (1cbc4 <entropy_nrf5_init+0x94>)
   1cb4a:	f240 114b 	movw	r1, #331	; 0x14b
   1cb4e:	f00a fb3e 	bl	271ce <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1cb52:	2201      	movs	r2, #1
   1cb54:	4611      	mov	r1, r2
   1cb56:	4620      	mov	r0, r4
   1cb58:	f00c fea6 	bl	298a8 <z_impl_k_sem_init>
   1cb5c:	2201      	movs	r2, #1
   1cb5e:	2100      	movs	r1, #0
   1cb60:	f104 0018 	add.w	r0, r4, #24
   1cb64:	f00c fea0 	bl	298a8 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1cb68:	f240 4307 	movw	r3, #1031	; 0x407
   1cb6c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1cb70:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1cb74:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1cb76:	230c      	movs	r3, #12
   1cb78:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1cb7c:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1cb7e:	4b12      	ldr	r3, [pc, #72]	; (1cbc8 <entropy_nrf5_init+0x98>)
   1cb80:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1cb84:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1cb88:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1cb8c:	f022 0201 	bic.w	r2, r2, #1
   1cb90:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   1cb94:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1cb96:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   1cb9a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1cb9e:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1cba2:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1cba4:	6019      	str	r1, [r3, #0]
   1cba6:	200d      	movs	r0, #13
   1cba8:	f7f8 fa6e 	bl	15088 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1cbac:	200d      	movs	r0, #13
   1cbae:	f7f8 fa3b 	bl	15028 <arch_irq_enable>

	return 0;
}
   1cbb2:	4628      	mov	r0, r5
   1cbb4:	bd38      	pop	{r3, r4, r5, pc}
   1cbb6:	bf00      	nop
   1cbb8:	20003674 	.word	0x20003674
   1cbbc:	0002d61c 	.word	0x0002d61c
   1cbc0:	0002ae37 	.word	0x0002ae37
   1cbc4:	0002d5ea 	.word	0x0002d5ea
   1cbc8:	4000d000 	.word	0x4000d000

0001cbcc <isr>:
{
   1cbcc:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1cbce:	f7ff fe9f 	bl	1c910 <random_byte_get>
	if (byte < 0) {
   1cbd2:	2800      	cmp	r0, #0
   1cbd4:	db20      	blt.n	1cc18 <isr+0x4c>
	uint8_t last  = rngp->last;
   1cbd6:	4b17      	ldr	r3, [pc, #92]	; (1cc34 <isr+0x68>)
   1cbd8:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1cbdc:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1cbe0:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1cbe4:	1b14      	subs	r4, r2, r4
   1cbe6:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1cbea:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1cbec:	d10d      	bne.n	1cc0a <isr+0x3e>
	uint8_t last  = rngp->last;
   1cbee:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1cbf2:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1cbf6:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1cbfa:	1b14      	subs	r4, r2, r4
   1cbfc:	ea31 0404 	bics.w	r4, r1, r4
   1cc00:	d10b      	bne.n	1cc1a <isr+0x4e>
   1cc02:	4b0d      	ldr	r3, [pc, #52]	; (1cc38 <isr+0x6c>)
   1cc04:	2201      	movs	r2, #1
   1cc06:	605a      	str	r2, [r3, #4]
}
   1cc08:	e00e      	b.n	1cc28 <isr+0x5c>
	rngp->buffer[last] = byte;
   1cc0a:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   1cc0c:	3201      	adds	r2, #1
   1cc0e:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   1cc10:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1cc14:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
   1cc18:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1cc1a:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   1cc1c:	3201      	adds	r2, #1
   1cc1e:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   1cc20:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1cc24:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1cc28:	4804      	ldr	r0, [pc, #16]	; (1cc3c <isr+0x70>)
}
   1cc2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1cc2e:	f004 b92d 	b.w	20e8c <z_impl_k_sem_give>
   1cc32:	bf00      	nop
   1cc34:	20003674 	.word	0x20003674
   1cc38:	4000d000 	.word	0x4000d000
   1cc3c:	2000368c 	.word	0x2000368c

0001cc40 <entropy_cc3xx_rng_get_entropy>:

#define CTR_DRBG_MAX_REQUEST 1024

static int entropy_cc3xx_rng_get_entropy(const struct device *dev,
					 uint8_t *buffer, uint16_t length)
{
   1cc40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cc42:	460f      	mov	r7, r1
   1cc44:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(dev != NULL);
   1cc46:	b948      	cbnz	r0, 1cc5c <entropy_cc3xx_rng_get_entropy+0x1c>
   1cc48:	4918      	ldr	r1, [pc, #96]	; (1ccac <entropy_cc3xx_rng_get_entropy+0x6c>)
   1cc4a:	4a19      	ldr	r2, [pc, #100]	; (1ccb0 <entropy_cc3xx_rng_get_entropy+0x70>)
   1cc4c:	4819      	ldr	r0, [pc, #100]	; (1ccb4 <entropy_cc3xx_rng_get_entropy+0x74>)
   1cc4e:	2318      	movs	r3, #24
   1cc50:	f00a fac4 	bl	271dc <assert_print>
   1cc54:	2118      	movs	r1, #24
	__ASSERT_NO_MSG(buffer != NULL);
   1cc56:	4816      	ldr	r0, [pc, #88]	; (1ccb0 <entropy_cc3xx_rng_get_entropy+0x70>)
   1cc58:	f00a fab9 	bl	271ce <assert_post_action>
   1cc5c:	b9e9      	cbnz	r1, 1cc9a <entropy_cc3xx_rng_get_entropy+0x5a>
   1cc5e:	4916      	ldr	r1, [pc, #88]	; (1ccb8 <entropy_cc3xx_rng_get_entropy+0x78>)
   1cc60:	4a13      	ldr	r2, [pc, #76]	; (1ccb0 <entropy_cc3xx_rng_get_entropy+0x70>)
   1cc62:	4814      	ldr	r0, [pc, #80]	; (1ccb4 <entropy_cc3xx_rng_get_entropy+0x74>)
   1cc64:	2319      	movs	r3, #25
   1cc66:	f00a fab9 	bl	271dc <assert_print>
   1cc6a:	2119      	movs	r1, #25
   1cc6c:	e7f3      	b.n	1cc56 <entropy_cc3xx_rng_get_entropy+0x16>
	/* This is a call from a secure app, in which case entropy is
	 * gathered using CC3xx HW using the CTR_DRBG features of the
	 * nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   1cc6e:	1b33      	subs	r3, r6, r4
   1cc70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1cc74:	bf38      	it	cc
   1cc76:	461d      	movcc	r5, r3
		 * gathered using CC3xx HW using the CTR_DRBG features of the
		 * nrf_cc310_platform/nrf_cc312_platform library.
		 * When the given context is NULL, a global internal ctr_drbg
		 * context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_get(NULL, buffer + offset,
   1cc78:	462a      	mov	r2, r5
   1cc7a:	ab01      	add	r3, sp, #4
   1cc7c:	1939      	adds	r1, r7, r4
   1cc7e:	2000      	movs	r0, #0
   1cc80:	f007 fc22 	bl	244c8 <nrf_cc3xx_platform_ctr_drbg_get>
						      chunk_size, &olen);
		if (ret != 0) {
   1cc84:	b968      	cbnz	r0, 1cca2 <entropy_cc3xx_rng_get_entropy+0x62>
			return -EINVAL;
		}

		if (olen != chunk_size) {
   1cc86:	9b01      	ldr	r3, [sp, #4]
   1cc88:	42ab      	cmp	r3, r5
   1cc8a:	d10a      	bne.n	1cca2 <entropy_cc3xx_rng_get_entropy+0x62>
			return -EINVAL;
		}

		offset += chunk_size;
   1cc8c:	442c      	add	r4, r5
	while (offset < length) {
   1cc8e:	42a6      	cmp	r6, r4
   1cc90:	d8ed      	bhi.n	1cc6e <entropy_cc3xx_rng_get_entropy+0x2e>
	}

	if (offset == length) {
   1cc92:	d009      	beq.n	1cca8 <entropy_cc3xx_rng_get_entropy+0x68>
	int err = EINVAL;
   1cc94:	2016      	movs	r0, #22
		err = 0;
	}

	return err;
}
   1cc96:	b003      	add	sp, #12
   1cc98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	size_t chunk_size = CTR_DRBG_MAX_REQUEST;
   1cc9a:	f44f 6580 	mov.w	r5, #1024	; 0x400
	size_t offset = 0;
   1cc9e:	2400      	movs	r4, #0
   1cca0:	e7f5      	b.n	1cc8e <entropy_cc3xx_rng_get_entropy+0x4e>
			return -EINVAL;
   1cca2:	f06f 0015 	mvn.w	r0, #21
   1cca6:	e7f6      	b.n	1cc96 <entropy_cc3xx_rng_get_entropy+0x56>
		err = 0;
   1cca8:	2000      	movs	r0, #0
   1ccaa:	e7f4      	b.n	1cc96 <entropy_cc3xx_rng_get_entropy+0x56>
   1ccac:	0002d68b 	.word	0x0002d68b
   1ccb0:	0002d65b 	.word	0x0002d65b
   1ccb4:	0002ae37 	.word	0x0002ae37
   1ccb8:	0002d69e 	.word	0x0002d69e

0001ccbc <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1ccbc:	b510      	push	{r4, lr}
	return port->data;
   1ccbe:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1ccc0:	b961      	cbnz	r1, 1ccdc <gpio_nrfx_manage_callback+0x20>
   1ccc2:	4920      	ldr	r1, [pc, #128]	; (1cd44 <gpio_nrfx_manage_callback+0x88>)
   1ccc4:	4a20      	ldr	r2, [pc, #128]	; (1cd48 <gpio_nrfx_manage_callback+0x8c>)
   1ccc6:	4821      	ldr	r0, [pc, #132]	; (1cd4c <gpio_nrfx_manage_callback+0x90>)
   1ccc8:	232a      	movs	r3, #42	; 0x2a
   1ccca:	f00a fa87 	bl	271dc <assert_print>
   1ccce:	4820      	ldr	r0, [pc, #128]	; (1cd50 <gpio_nrfx_manage_callback+0x94>)
   1ccd0:	f00a fa84 	bl	271dc <assert_print>
   1ccd4:	212a      	movs	r1, #42	; 0x2a
	__ASSERT(callback->handler, "No callback handler!");
   1ccd6:	481c      	ldr	r0, [pc, #112]	; (1cd48 <gpio_nrfx_manage_callback+0x8c>)
   1ccd8:	f00a fa79 	bl	271ce <assert_post_action>
   1ccdc:	6848      	ldr	r0, [r1, #4]
   1ccde:	b950      	cbnz	r0, 1ccf6 <gpio_nrfx_manage_callback+0x3a>
   1cce0:	491c      	ldr	r1, [pc, #112]	; (1cd54 <gpio_nrfx_manage_callback+0x98>)
   1cce2:	4a19      	ldr	r2, [pc, #100]	; (1cd48 <gpio_nrfx_manage_callback+0x8c>)
   1cce4:	4819      	ldr	r0, [pc, #100]	; (1cd4c <gpio_nrfx_manage_callback+0x90>)
   1cce6:	232b      	movs	r3, #43	; 0x2b
   1cce8:	f00a fa78 	bl	271dc <assert_print>
   1ccec:	481a      	ldr	r0, [pc, #104]	; (1cd58 <gpio_nrfx_manage_callback+0x9c>)
   1ccee:	f00a fa75 	bl	271dc <assert_print>
   1ccf2:	212b      	movs	r1, #43	; 0x2b
   1ccf4:	e7ef      	b.n	1ccd6 <gpio_nrfx_manage_callback+0x1a>
	return list->head;
   1ccf6:	6858      	ldr	r0, [r3, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1ccf8:	b1f8      	cbz	r0, 1cd3a <gpio_nrfx_manage_callback+0x7e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ccfa:	4288      	cmp	r0, r1
   1ccfc:	d119      	bne.n	1cd32 <gpio_nrfx_manage_callback+0x76>
Z_GENLIST_REMOVE(slist, snode)
   1ccfe:	689c      	ldr	r4, [r3, #8]
	return node->next;
   1cd00:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   1cd02:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1cd04:	42a1      	cmp	r1, r4
   1cd06:	d100      	bne.n	1cd0a <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   1cd08:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1cd0a:	2000      	movs	r0, #0
   1cd0c:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
   1cd0e:	b12a      	cbz	r2, 1cd1c <gpio_nrfx_manage_callback+0x60>
	return list->head;
   1cd10:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1cd12:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1cd14:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1cd16:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1cd18:	b902      	cbnz	r2, 1cd1c <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   1cd1a:	6099      	str	r1, [r3, #8]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1cd1c:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1cd1e:	e010      	b.n	1cd42 <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1cd20:	4281      	cmp	r1, r0
   1cd22:	d106      	bne.n	1cd32 <gpio_nrfx_manage_callback+0x76>
	return node->next;
   1cd24:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   1cd26:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1cd28:	6898      	ldr	r0, [r3, #8]
   1cd2a:	4281      	cmp	r1, r0
   1cd2c:	d1ed      	bne.n	1cd0a <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   1cd2e:	609c      	str	r4, [r3, #8]
}
   1cd30:	e7eb      	b.n	1cd0a <gpio_nrfx_manage_callback+0x4e>
	return node->next;
   1cd32:	4604      	mov	r4, r0
   1cd34:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1cd36:	2800      	cmp	r0, #0
   1cd38:	d1f2      	bne.n	1cd20 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   1cd3a:	2a00      	cmp	r2, #0
   1cd3c:	d1e8      	bne.n	1cd10 <gpio_nrfx_manage_callback+0x54>
				return -EINVAL;
   1cd3e:	f06f 0015 	mvn.w	r0, #21
				     callback, set);
}
   1cd42:	bd10      	pop	{r4, pc}
   1cd44:	0002ad21 	.word	0x0002ad21
   1cd48:	0002d6c4 	.word	0x0002d6c4
   1cd4c:	0002ae37 	.word	0x0002ae37
   1cd50:	0002d700 	.word	0x0002d700
   1cd54:	0002d70f 	.word	0x0002d70f
   1cd58:	0002d721 	.word	0x0002d721

0001cd5c <gpio_nrfx_pin_interrupt_configure>:
{
   1cd5c:	b530      	push	{r4, r5, lr}
	return port->config;
   1cd5e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1cd60:	7b05      	ldrb	r5, [r0, #12]
   1cd62:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
   1cd66:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   1cd6a:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1cd6c:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1cd70:	d105      	bne.n	1cd7e <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1cd72:	4620      	mov	r0, r4
   1cd74:	f002 ff52 	bl	1fc1c <nrfx_gpiote_trigger_disable>
		return 0;
   1cd78:	2000      	movs	r0, #0
}
   1cd7a:	b005      	add	sp, #20
   1cd7c:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   1cd7e:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   1cd80:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1cd84:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1cd88:	d114      	bne.n	1cdb4 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1cd8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1cd8e:	bf0c      	ite	eq
   1cd90:	2304      	moveq	r3, #4
   1cd92:	2305      	movne	r3, #5
   1cd94:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1cd98:	2300      	movs	r3, #0
   1cd9a:	4619      	mov	r1, r3
   1cd9c:	aa02      	add	r2, sp, #8
   1cd9e:	4620      	mov	r0, r4
   1cda0:	f002 fd46 	bl	1f830 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1cda4:	4b2b      	ldr	r3, [pc, #172]	; (1ce54 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   1cda6:	4298      	cmp	r0, r3
   1cda8:	d151      	bne.n	1ce4e <gpio_nrfx_pin_interrupt_configure+0xf2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1cdaa:	2101      	movs	r1, #1
   1cdac:	4620      	mov	r0, r4
   1cdae:	f002 fec9 	bl	1fb44 <nrfx_gpiote_trigger_enable>
	return 0;
   1cdb2:	e7e1      	b.n	1cd78 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1cdb4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1cdb8:	d024      	beq.n	1ce04 <gpio_nrfx_pin_interrupt_configure+0xa8>
   1cdba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1cdbe:	bf14      	ite	ne
   1cdc0:	2301      	movne	r3, #1
   1cdc2:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1cdc4:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1cdc8:	6883      	ldr	r3, [r0, #8]
   1cdca:	40cb      	lsrs	r3, r1
   1cdcc:	07d8      	lsls	r0, r3, #31
   1cdce:	d4e3      	bmi.n	1cd98 <gpio_nrfx_pin_interrupt_configure+0x3c>
   1cdd0:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1cdd4:	d1e0      	bne.n	1cd98 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   1cdd6:	0962      	lsrs	r2, r4, #5
   1cdd8:	f004 031f 	and.w	r3, r4, #31
   1cddc:	d014      	beq.n	1ce08 <gpio_nrfx_pin_interrupt_configure+0xac>
   1cdde:	2a01      	cmp	r2, #1
   1cde0:	d104      	bne.n	1cdec <gpio_nrfx_pin_interrupt_configure+0x90>
#endif
    }

    pin_number &= 0x1F;

    return (mask & (1UL << pin_number)) ? true : false;
   1cde2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1cde6:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1cde8:	07d1      	lsls	r1, r2, #31
   1cdea:	d415      	bmi.n	1ce18 <gpio_nrfx_pin_interrupt_configure+0xbc>
   1cdec:	491a      	ldr	r1, [pc, #104]	; (1ce58 <gpio_nrfx_pin_interrupt_configure+0xfc>)
   1cdee:	481b      	ldr	r0, [pc, #108]	; (1ce5c <gpio_nrfx_pin_interrupt_configure+0x100>)
   1cdf0:	4a1b      	ldr	r2, [pc, #108]	; (1ce60 <gpio_nrfx_pin_interrupt_configure+0x104>)
   1cdf2:	f240 2347 	movw	r3, #583	; 0x247
   1cdf6:	f00a f9f1 	bl	271dc <assert_print>
   1cdfa:	4819      	ldr	r0, [pc, #100]	; (1ce60 <gpio_nrfx_pin_interrupt_configure+0x104>)
   1cdfc:	f240 2147 	movw	r1, #583	; 0x247
   1ce00:	f00a f9e5 	bl	271ce <assert_post_action>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1ce04:	2303      	movs	r3, #3
   1ce06:	e7dd      	b.n	1cdc4 <gpio_nrfx_pin_interrupt_configure+0x68>
    return (mask & (1UL << pin_number)) ? true : false;
   1ce08:	f04f 32ff 	mov.w	r2, #4294967295
   1ce0c:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ce0e:	07d2      	lsls	r2, r2, #31
   1ce10:	d5ec      	bpl.n	1cdec <gpio_nrfx_pin_interrupt_configure+0x90>
        case 0: return NRF_P0;
   1ce12:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1ce16:	e000      	b.n	1ce1a <gpio_nrfx_pin_interrupt_configure+0xbe>
        case 1: return NRF_P1;
   1ce18:	4a12      	ldr	r2, [pc, #72]	; (1ce64 <gpio_nrfx_pin_interrupt_configure+0x108>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1ce1a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1ce1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1ce22:	07db      	lsls	r3, r3, #31
   1ce24:	d4b8      	bmi.n	1cd98 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1ce26:	f10d 0507 	add.w	r5, sp, #7
   1ce2a:	4629      	mov	r1, r5
   1ce2c:	4620      	mov	r0, r4
   1ce2e:	f002 fe23 	bl	1fa78 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1ce32:	4b0d      	ldr	r3, [pc, #52]	; (1ce68 <gpio_nrfx_pin_interrupt_configure+0x10c>)
   1ce34:	4298      	cmp	r0, r3
   1ce36:	d001      	beq.n	1ce3c <gpio_nrfx_pin_interrupt_configure+0xe0>
		trigger_config.p_in_channel = &ch;
   1ce38:	9503      	str	r5, [sp, #12]
   1ce3a:	e7ad      	b.n	1cd98 <gpio_nrfx_pin_interrupt_configure+0x3c>
			err = nrfx_gpiote_channel_alloc(&ch);
   1ce3c:	4628      	mov	r0, r5
   1ce3e:	f002 fe7b 	bl	1fb38 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1ce42:	4b04      	ldr	r3, [pc, #16]	; (1ce54 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   1ce44:	4298      	cmp	r0, r3
   1ce46:	d0f7      	beq.n	1ce38 <gpio_nrfx_pin_interrupt_configure+0xdc>
				return -ENOMEM;
   1ce48:	f06f 000b 	mvn.w	r0, #11
   1ce4c:	e795      	b.n	1cd7a <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   1ce4e:	f06f 0015 	mvn.w	r0, #21
   1ce52:	e792      	b.n	1cd7a <gpio_nrfx_pin_interrupt_configure+0x1e>
   1ce54:	0bad0000 	.word	0x0bad0000
   1ce58:	0002d76b 	.word	0x0002d76b
   1ce5c:	0002ae37 	.word	0x0002ae37
   1ce60:	0002d738 	.word	0x0002d738
   1ce64:	50000300 	.word	0x50000300
   1ce68:	0bad0004 	.word	0x0bad0004

0001ce6c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1ce6c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1ce6e:	f002 fe53 	bl	1fb18 <nrfx_gpiote_is_init>
   1ce72:	4604      	mov	r4, r0
   1ce74:	b968      	cbnz	r0, 1ce92 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1ce76:	f002 fe27 	bl	1fac8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1ce7a:	4b08      	ldr	r3, [pc, #32]	; (1ce9c <gpio_nrfx_init+0x30>)
   1ce7c:	4298      	cmp	r0, r3
   1ce7e:	d10a      	bne.n	1ce96 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1ce80:	4807      	ldr	r0, [pc, #28]	; (1cea0 <gpio_nrfx_init+0x34>)
   1ce82:	4621      	mov	r1, r4
   1ce84:	f002 fdf2 	bl	1fa6c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1ce88:	4622      	mov	r2, r4
   1ce8a:	2105      	movs	r1, #5
   1ce8c:	2006      	movs	r0, #6
   1ce8e:	f7f8 f8fb 	bl	15088 <z_arm_irq_priority_set>
		return 0;
   1ce92:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1ce94:	bd10      	pop	{r4, pc}
		return -EIO;
   1ce96:	f06f 0004 	mvn.w	r0, #4
   1ce9a:	e7fb      	b.n	1ce94 <gpio_nrfx_init+0x28>
   1ce9c:	0bad0000 	.word	0x0bad0000
   1cea0:	0001cea5 	.word	0x0001cea5

0001cea4 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1cea4:	0942      	lsrs	r2, r0, #5
{
   1cea6:	b570      	push	{r4, r5, r6, lr}
   1cea8:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1ceaa:	d002      	beq.n	1ceb2 <nrfx_gpio_handler+0xe>
   1ceac:	2a01      	cmp	r2, #1
   1ceae:	d01e      	beq.n	1ceee <nrfx_gpio_handler+0x4a>
}
   1ceb0:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1ceb2:	4e14      	ldr	r6, [pc, #80]	; (1cf04 <nrfx_gpio_handler+0x60>)
	gpio_fire_callbacks(list, port, BIT(pin));
   1ceb4:	6932      	ldr	r2, [r6, #16]
   1ceb6:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1ceb8:	2900      	cmp	r1, #0
   1ceba:	d0f9      	beq.n	1ceb0 <nrfx_gpio_handler+0xc>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1cebc:	f003 031f 	and.w	r3, r3, #31
   1cec0:	2501      	movs	r5, #1
	return node->next;
   1cec2:	680c      	ldr	r4, [r1, #0]
   1cec4:	409d      	lsls	r5, r3
   1cec6:	2900      	cmp	r1, #0
   1cec8:	d0f2      	beq.n	1ceb0 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   1ceca:	688a      	ldr	r2, [r1, #8]
   1cecc:	402a      	ands	r2, r5
   1cece:	d012      	beq.n	1cef6 <nrfx_gpio_handler+0x52>
			__ASSERT(cb->handler, "No callback handler!");
   1ced0:	684b      	ldr	r3, [r1, #4]
   1ced2:	b973      	cbnz	r3, 1cef2 <nrfx_gpio_handler+0x4e>
   1ced4:	490c      	ldr	r1, [pc, #48]	; (1cf08 <nrfx_gpio_handler+0x64>)
   1ced6:	4a0d      	ldr	r2, [pc, #52]	; (1cf0c <nrfx_gpio_handler+0x68>)
   1ced8:	480d      	ldr	r0, [pc, #52]	; (1cf10 <nrfx_gpio_handler+0x6c>)
   1ceda:	234d      	movs	r3, #77	; 0x4d
   1cedc:	f00a f97e 	bl	271dc <assert_print>
   1cee0:	480c      	ldr	r0, [pc, #48]	; (1cf14 <nrfx_gpio_handler+0x70>)
   1cee2:	f00a f97b 	bl	271dc <assert_print>
   1cee6:	4809      	ldr	r0, [pc, #36]	; (1cf0c <nrfx_gpio_handler+0x68>)
   1cee8:	214d      	movs	r1, #77	; 0x4d
   1ceea:	f00a f970 	bl	271ce <assert_post_action>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1ceee:	4e0a      	ldr	r6, [pc, #40]	; (1cf18 <nrfx_gpio_handler+0x74>)
   1cef0:	e7e0      	b.n	1ceb4 <nrfx_gpio_handler+0x10>
			cb->handler(port, cb, cb->pin_mask & pins);
   1cef2:	4630      	mov	r0, r6
   1cef4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1cef6:	b11c      	cbz	r4, 1cf00 <nrfx_gpio_handler+0x5c>
   1cef8:	6823      	ldr	r3, [r4, #0]
   1cefa:	4621      	mov	r1, r4
   1cefc:	461c      	mov	r4, r3
   1cefe:	e7e2      	b.n	1cec6 <nrfx_gpio_handler+0x22>
   1cf00:	4623      	mov	r3, r4
   1cf02:	e7fa      	b.n	1cefa <nrfx_gpio_handler+0x56>
   1cf04:	00029cf0 	.word	0x00029cf0
   1cf08:	0002d78e 	.word	0x0002d78e
   1cf0c:	0002d6c4 	.word	0x0002d6c4
   1cf10:	0002ae37 	.word	0x0002ae37
   1cf14:	0002d721 	.word	0x0002d721
   1cf18:	00029cd8 	.word	0x00029cd8

0001cf1c <gpio_nrfx_pin_configure>:
{
   1cf1c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   1cf20:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1cf24:	f898 300c 	ldrb.w	r3, [r8, #12]
   1cf28:	f001 051f 	and.w	r5, r1, #31
   1cf2c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   1cf30:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1cf32:	4628      	mov	r0, r5
   1cf34:	f10d 0103 	add.w	r1, sp, #3
{
   1cf38:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1cf3a:	f002 fd9d 	bl	1fa78 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1cf3e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1cf42:	4606      	mov	r6, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1cf44:	d115      	bne.n	1cf72 <gpio_nrfx_pin_configure+0x56>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1cf46:	4628      	mov	r0, r5
   1cf48:	f002 fe92 	bl	1fc70 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1cf4c:	4b49      	ldr	r3, [pc, #292]	; (1d074 <gpio_nrfx_pin_configure+0x158>)
   1cf4e:	429e      	cmp	r6, r3
   1cf50:	d171      	bne.n	1d036 <gpio_nrfx_pin_configure+0x11a>
			err = nrfx_gpiote_channel_free(ch);
   1cf52:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1cf56:	f002 fde9 	bl	1fb2c <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1cf5a:	42b0      	cmp	r0, r6
   1cf5c:	d06b      	beq.n	1d036 <gpio_nrfx_pin_configure+0x11a>
   1cf5e:	4946      	ldr	r1, [pc, #280]	; (1d078 <gpio_nrfx_pin_configure+0x15c>)
   1cf60:	4a46      	ldr	r2, [pc, #280]	; (1d07c <gpio_nrfx_pin_configure+0x160>)
   1cf62:	4847      	ldr	r0, [pc, #284]	; (1d080 <gpio_nrfx_pin_configure+0x164>)
   1cf64:	236a      	movs	r3, #106	; 0x6a
   1cf66:	f00a f939 	bl	271dc <assert_print>
   1cf6a:	216a      	movs	r1, #106	; 0x6a
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1cf6c:	4843      	ldr	r0, [pc, #268]	; (1d07c <gpio_nrfx_pin_configure+0x160>)
   1cf6e:	f00a f92e 	bl	271ce <assert_post_action>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1cf72:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1cf74:	4619      	mov	r1, r3
   1cf76:	aa02      	add	r2, sp, #8
   1cf78:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1cf7a:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1cf7e:	f002 fc57 	bl	1f830 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1cf82:	4b3c      	ldr	r3, [pc, #240]	; (1d074 <gpio_nrfx_pin_configure+0x158>)
   1cf84:	4298      	cmp	r0, r3
   1cf86:	d004      	beq.n	1cf92 <gpio_nrfx_pin_configure+0x76>
		return NRF_GPIO_PIN_PULLUP;
   1cf88:	f06f 0015 	mvn.w	r0, #21
}
   1cf8c:	b004      	add	sp, #16
   1cf8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   1cf92:	4286      	cmp	r6, r0
   1cf94:	d10d      	bne.n	1cfb2 <gpio_nrfx_pin_configure+0x96>
		err = nrfx_gpiote_channel_free(ch);
   1cf96:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1cf9a:	f002 fdc7 	bl	1fb2c <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1cf9e:	42b0      	cmp	r0, r6
   1cfa0:	d007      	beq.n	1cfb2 <gpio_nrfx_pin_configure+0x96>
   1cfa2:	4935      	ldr	r1, [pc, #212]	; (1d078 <gpio_nrfx_pin_configure+0x15c>)
   1cfa4:	4a35      	ldr	r2, [pc, #212]	; (1d07c <gpio_nrfx_pin_configure+0x160>)
   1cfa6:	4836      	ldr	r0, [pc, #216]	; (1d080 <gpio_nrfx_pin_configure+0x164>)
   1cfa8:	237c      	movs	r3, #124	; 0x7c
   1cfaa:	f00a f917 	bl	271dc <assert_print>
   1cfae:	217c      	movs	r1, #124	; 0x7c
   1cfb0:	e7dc      	b.n	1cf6c <gpio_nrfx_pin_configure+0x50>
	if (flags & GPIO_OUTPUT) {
   1cfb2:	03a6      	lsls	r6, r4, #14
   1cfb4:	d54e      	bpl.n	1d054 <gpio_nrfx_pin_configure+0x138>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1cfb6:	f240 3306 	movw	r3, #774	; 0x306
   1cfba:	4023      	ands	r3, r4
   1cfbc:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1cfc0:	d019      	beq.n	1cff6 <gpio_nrfx_pin_configure+0xda>
   1cfc2:	d80c      	bhi.n	1cfde <gpio_nrfx_pin_configure+0xc2>
   1cfc4:	2b06      	cmp	r3, #6
   1cfc6:	d017      	beq.n	1cff8 <gpio_nrfx_pin_configure+0xdc>
   1cfc8:	d804      	bhi.n	1cfd4 <gpio_nrfx_pin_configure+0xb8>
   1cfca:	b1ab      	cbz	r3, 1cff8 <gpio_nrfx_pin_configure+0xdc>
   1cfcc:	2b02      	cmp	r3, #2
   1cfce:	d1db      	bne.n	1cf88 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_D0S1;
   1cfd0:	2304      	movs	r3, #4
   1cfd2:	e011      	b.n	1cff8 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1cfd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1cfd8:	d1d6      	bne.n	1cf88 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_H0S1;
   1cfda:	2301      	movs	r3, #1
   1cfdc:	e00c      	b.n	1cff8 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1cfde:	f240 2202 	movw	r2, #514	; 0x202
   1cfe2:	4293      	cmp	r3, r2
   1cfe4:	d029      	beq.n	1d03a <gpio_nrfx_pin_configure+0x11e>
   1cfe6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1cfea:	d028      	beq.n	1d03e <gpio_nrfx_pin_configure+0x122>
   1cfec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1cff0:	d1ca      	bne.n	1cf88 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_S0H1;
   1cff2:	2302      	movs	r3, #2
   1cff4:	e000      	b.n	1cff8 <gpio_nrfx_pin_configure+0xdc>
		*drive = NRF_GPIO_PIN_H0D1;
   1cff6:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   1cff8:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1cffc:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1d000:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1d004:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1d006:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   1d00a:	bf54      	ite	pl
   1d00c:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1d010:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1d012:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1d014:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1d018:	d513      	bpl.n	1d042 <gpio_nrfx_pin_configure+0x126>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1d01a:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1d01e:	2301      	movs	r3, #1
   1d020:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   1d022:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1d026:	2200      	movs	r2, #0
   1d028:	a901      	add	r1, sp, #4
   1d02a:	4628      	mov	r0, r5
   1d02c:	f002 fcaa 	bl	1f984 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1d030:	4b10      	ldr	r3, [pc, #64]	; (1d074 <gpio_nrfx_pin_configure+0x158>)
   1d032:	4298      	cmp	r0, r3
   1d034:	d1a8      	bne.n	1cf88 <gpio_nrfx_pin_configure+0x6c>
   1d036:	2000      	movs	r0, #0
   1d038:	e7a8      	b.n	1cf8c <gpio_nrfx_pin_configure+0x70>
		*drive = NRF_GPIO_PIN_D0H1;
   1d03a:	2305      	movs	r3, #5
   1d03c:	e7dc      	b.n	1cff8 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1d03e:	2303      	movs	r3, #3
   1d040:	e7da      	b.n	1cff8 <gpio_nrfx_pin_configure+0xdc>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1d042:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1d044:	bf41      	itttt	mi
   1d046:	2301      	movmi	r3, #1
   1d048:	f8d8 2004 	ldrmi.w	r2, [r8, #4]
   1d04c:	40bb      	lslmi	r3, r7
    p_reg->OUTCLR = clr_mask;
   1d04e:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   1d052:	e7e8      	b.n	1d026 <gpio_nrfx_pin_configure+0x10a>
	if (flags & GPIO_PULL_UP) {
   1d054:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1d056:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   1d05a:	bf54      	ite	pl
   1d05c:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1d060:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1d062:	461a      	mov	r2, r3
   1d064:	a901      	add	r1, sp, #4
   1d066:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   1d068:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1d06c:	f002 fbe0 	bl	1f830 <nrfx_gpiote_input_configure>
   1d070:	e7de      	b.n	1d030 <gpio_nrfx_pin_configure+0x114>
   1d072:	bf00      	nop
   1d074:	0bad0000 	.word	0x0bad0000
   1d078:	0002d7c6 	.word	0x0002d7c6
   1d07c:	0002d79a 	.word	0x0002d79a
   1d080:	0002ae37 	.word	0x0002ae37

0001d084 <nrf_gpio_pin_port_decode>:
{
   1d084:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d086:	6803      	ldr	r3, [r0, #0]
    switch (port)
   1d088:	095a      	lsrs	r2, r3, #5
   1d08a:	d00d      	beq.n	1d0a8 <nrf_gpio_pin_port_decode+0x24>
   1d08c:	2a01      	cmp	r2, #1
   1d08e:	d014      	beq.n	1d0ba <nrf_gpio_pin_port_decode+0x36>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d090:	490f      	ldr	r1, [pc, #60]	; (1d0d0 <nrf_gpio_pin_port_decode+0x4c>)
   1d092:	4810      	ldr	r0, [pc, #64]	; (1d0d4 <nrf_gpio_pin_port_decode+0x50>)
   1d094:	4a10      	ldr	r2, [pc, #64]	; (1d0d8 <nrf_gpio_pin_port_decode+0x54>)
   1d096:	f240 2347 	movw	r3, #583	; 0x247
   1d09a:	f00a f89f 	bl	271dc <assert_print>
   1d09e:	480e      	ldr	r0, [pc, #56]	; (1d0d8 <nrf_gpio_pin_port_decode+0x54>)
   1d0a0:	f240 2147 	movw	r1, #583	; 0x247
   1d0a4:	f00a f893 	bl	271ce <assert_post_action>
    return (mask & (1UL << pin_number)) ? true : false;
   1d0a8:	f04f 32ff 	mov.w	r2, #4294967295
   1d0ac:	fa22 f303 	lsr.w	r3, r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d0b0:	07d9      	lsls	r1, r3, #31
   1d0b2:	d5ed      	bpl.n	1d090 <nrf_gpio_pin_port_decode+0xc>
        case 0: return NRF_P0;
   1d0b4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1d0b8:	e008      	b.n	1d0cc <nrf_gpio_pin_port_decode+0x48>
    pin_number &= 0x1F;
   1d0ba:	f003 031f 	and.w	r3, r3, #31
    return (mask & (1UL << pin_number)) ? true : false;
   1d0be:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1d0c2:	40da      	lsrs	r2, r3
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1d0c4:	07d2      	lsls	r2, r2, #31
   1d0c6:	d5e3      	bpl.n	1d090 <nrf_gpio_pin_port_decode+0xc>
    *p_pin = pin_number & 0x1F;
   1d0c8:	6003      	str	r3, [r0, #0]
        case 1: return NRF_P1;
   1d0ca:	4804      	ldr	r0, [pc, #16]	; (1d0dc <nrf_gpio_pin_port_decode+0x58>)
}
   1d0cc:	bd08      	pop	{r3, pc}
   1d0ce:	bf00      	nop
   1d0d0:	0002d76b 	.word	0x0002d76b
   1d0d4:	0002ae37 	.word	0x0002ae37
   1d0d8:	0002d738 	.word	0x0002d738
   1d0dc:	50000300 	.word	0x50000300

0001d0e0 <uarte_nrfx_tx>:
}

static int uarte_nrfx_tx(const struct device *dev, const uint8_t *buf,
			 size_t len,
			 int32_t timeout)
{
   1d0e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d0e2:	461d      	mov	r5, r3
	return config->uarte_regs;
   1d0e4:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   1d0e6:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1d0e8:	f8d3 c000 	ldr.w	ip, [r3]
{
   1d0ec:	4606      	mov	r6, r0
   1d0ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d0f2:	f3ef 8711 	mrs	r7, BASEPRI
   1d0f6:	f383 8812 	msr	BASEPRI_MAX, r3
   1d0fa:	f3bf 8f6f 	isb	sy
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	unsigned int key = irq_lock();

	if (data->async->tx_size) {
   1d0fe:	68e3      	ldr	r3, [r4, #12]
   1d100:	68d8      	ldr	r0, [r3, #12]
   1d102:	b138      	cbz	r0, 1d114 <uarte_nrfx_tx+0x34>
	__asm__ volatile(
   1d104:	f387 8811 	msr	BASEPRI, r7
   1d108:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
		return -EBUSY;
   1d10c:	f06f 000f 	mvn.w	r0, #15
	    && timeout != SYS_FOREVER_US) {
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
			      K_NO_WAIT);
	}
	return 0;
}
   1d110:	b003      	add	sp, #12
   1d112:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->async->tx_size = len;
   1d114:	60da      	str	r2, [r3, #12]
	data->async->tx_buf = buf;
   1d116:	68e3      	ldr	r3, [r4, #12]
   1d118:	6099      	str	r1, [r3, #8]
    p_reg->INTENSET = mask;
   1d11a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1d11e:	f8cc 3304 	str.w	r3, [ip, #772]	; 0x304
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1d122:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
   1d126:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1d12a:	68e3      	ldr	r3, [r4, #12]
   1d12c:	d111      	bne.n	1d152 <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
   1d12e:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
   1d130:	68e3      	ldr	r3, [r4, #12]
   1d132:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
   1d134:	4621      	mov	r1, r4
   1d136:	4630      	mov	r0, r6
   1d138:	f00c f970 	bl	2941c <start_tx_locked>
   1d13c:	f387 8811 	msr	BASEPRI, r7
   1d140:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   1d144:	7ae3      	ldrb	r3, [r4, #11]
   1d146:	2b01      	cmp	r3, #1
   1d148:	d101      	bne.n	1d14e <uarte_nrfx_tx+0x6e>
	    && timeout != SYS_FOREVER_US) {
   1d14a:	1c6b      	adds	r3, r5, #1
   1d14c:	d106      	bne.n	1d15c <uarte_nrfx_tx+0x7c>
	return 0;
   1d14e:	2000      	movs	r0, #0
   1d150:	e7de      	b.n	1d110 <uarte_nrfx_tx+0x30>
		data->async->tx_cache_offset = 0;
   1d152:	61d8      	str	r0, [r3, #28]
		(void)setup_tx_cache(data);
   1d154:	4620      	mov	r0, r4
   1d156:	f00c f8db 	bl	29310 <setup_tx_cache>
   1d15a:	e7eb      	b.n	1d134 <uarte_nrfx_tx+0x54>
			return ((t * to_hz + off) / from_hz);
   1d15c:	480b      	ldr	r0, [pc, #44]	; (1d18c <uarte_nrfx_tx+0xac>)
   1d15e:	4a0c      	ldr	r2, [pc, #48]	; (1d190 <uarte_nrfx_tx+0xb0>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
   1d160:	68e4      	ldr	r4, [r4, #12]
   1d162:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   1d166:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1d16a:	2100      	movs	r1, #0
   1d16c:	2300      	movs	r3, #0
   1d16e:	fbc5 0106 	smlal	r0, r1, r5, r6
   1d172:	f7e3 fb93 	bl	89c <__aeabi_uldivmod>
   1d176:	3420      	adds	r4, #32
   1d178:	4602      	mov	r2, r0
   1d17a:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1d17c:	2000      	movs	r0, #0
   1d17e:	2100      	movs	r1, #0
   1d180:	e9cd 0100 	strd	r0, r1, [sp]
   1d184:	4620      	mov	r0, r4
   1d186:	f006 f9ab 	bl	234e0 <z_impl_k_timer_start>
   1d18a:	e7e0      	b.n	1d14e <uarte_nrfx_tx+0x6e>
   1d18c:	000f423f 	.word	0x000f423f
   1d190:	000f4240 	.word	0x000f4240

0001d194 <uarte_nrfx_configure>:
{
   1d194:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
   1d196:	794b      	ldrb	r3, [r1, #5]
   1d198:	2b01      	cmp	r3, #1
   1d19a:	d026      	beq.n	1d1ea <uarte_nrfx_configure+0x56>
   1d19c:	2b03      	cmp	r3, #3
   1d19e:	d121      	bne.n	1d1e4 <uarte_nrfx_configure+0x50>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1d1a0:	2510      	movs	r5, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1d1a2:	798b      	ldrb	r3, [r1, #6]
   1d1a4:	2b03      	cmp	r3, #3
   1d1a6:	d11d      	bne.n	1d1e4 <uarte_nrfx_configure+0x50>
	switch (cfg->flow_ctrl) {
   1d1a8:	79ce      	ldrb	r6, [r1, #7]
   1d1aa:	b10e      	cbz	r6, 1d1b0 <uarte_nrfx_configure+0x1c>
   1d1ac:	2e01      	cmp	r6, #1
   1d1ae:	d119      	bne.n	1d1e4 <uarte_nrfx_configure+0x50>
	switch (cfg->parity) {
   1d1b0:	790a      	ldrb	r2, [r1, #4]
   1d1b2:	b112      	cbz	r2, 1d1ba <uarte_nrfx_configure+0x26>
   1d1b4:	2a02      	cmp	r2, #2
   1d1b6:	d115      	bne.n	1d1e4 <uarte_nrfx_configure+0x50>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1d1b8:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1d1ba:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1d1bc:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   1d1be:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1d1c2:	6827      	ldr	r7, [r4, #0]
	switch (baudrate) {
   1d1c4:	d067      	beq.n	1d296 <uarte_nrfx_configure+0x102>
   1d1c6:	d82d      	bhi.n	1d224 <uarte_nrfx_configure+0x90>
   1d1c8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1d1cc:	d066      	beq.n	1d29c <uarte_nrfx_configure+0x108>
   1d1ce:	d816      	bhi.n	1d1fe <uarte_nrfx_configure+0x6a>
   1d1d0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1d1d4:	d064      	beq.n	1d2a0 <uarte_nrfx_configure+0x10c>
   1d1d6:	d80a      	bhi.n	1d1ee <uarte_nrfx_configure+0x5a>
   1d1d8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1d1dc:	d063      	beq.n	1d2a6 <uarte_nrfx_configure+0x112>
   1d1de:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1d1e2:	d063      	beq.n	1d2ac <uarte_nrfx_configure+0x118>
		return -ENOTSUP;
   1d1e4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1d1e8:	e054      	b.n	1d294 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   1d1ea:	2500      	movs	r5, #0
   1d1ec:	e7d9      	b.n	1d1a2 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1d1ee:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1d1f2:	d05e      	beq.n	1d2b2 <uarte_nrfx_configure+0x11e>
   1d1f4:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1d1f8:	d1f4      	bne.n	1d1e4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1d1fa:	4b38      	ldr	r3, [pc, #224]	; (1d2dc <uarte_nrfx_configure+0x148>)
   1d1fc:	e03c      	b.n	1d278 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1d1fe:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1d202:	d059      	beq.n	1d2b8 <uarte_nrfx_configure+0x124>
   1d204:	d807      	bhi.n	1d216 <uarte_nrfx_configure+0x82>
   1d206:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1d20a:	d057      	beq.n	1d2bc <uarte_nrfx_configure+0x128>
   1d20c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1d210:	d1e8      	bne.n	1d1e4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1d212:	4b33      	ldr	r3, [pc, #204]	; (1d2e0 <uarte_nrfx_configure+0x14c>)
   1d214:	e030      	b.n	1d278 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1d216:	f647 2412 	movw	r4, #31250	; 0x7a12
   1d21a:	42a3      	cmp	r3, r4
   1d21c:	d1e2      	bne.n	1d1e4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1d21e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1d222:	e029      	b.n	1d278 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1d224:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1d228:	d04a      	beq.n	1d2c0 <uarte_nrfx_configure+0x12c>
   1d22a:	d813      	bhi.n	1d254 <uarte_nrfx_configure+0xc0>
   1d22c:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1d230:	d049      	beq.n	1d2c6 <uarte_nrfx_configure+0x132>
   1d232:	d809      	bhi.n	1d248 <uarte_nrfx_configure+0xb4>
   1d234:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   1d238:	42a3      	cmp	r3, r4
   1d23a:	d046      	beq.n	1d2ca <uarte_nrfx_configure+0x136>
   1d23c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1d240:	d1d0      	bne.n	1d1e4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1d242:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1d246:	e017      	b.n	1d278 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1d248:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1d24c:	d1ca      	bne.n	1d1e4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1d24e:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1d252:	e011      	b.n	1d278 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1d254:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1d258:	d03a      	beq.n	1d2d0 <uarte_nrfx_configure+0x13c>
   1d25a:	d808      	bhi.n	1d26e <uarte_nrfx_configure+0xda>
   1d25c:	4c21      	ldr	r4, [pc, #132]	; (1d2e4 <uarte_nrfx_configure+0x150>)
   1d25e:	42a3      	cmp	r3, r4
   1d260:	d039      	beq.n	1d2d6 <uarte_nrfx_configure+0x142>
   1d262:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1d266:	d1bd      	bne.n	1d1e4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1d268:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1d26c:	e004      	b.n	1d278 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1d26e:	4c1e      	ldr	r4, [pc, #120]	; (1d2e8 <uarte_nrfx_configure+0x154>)
   1d270:	42a3      	cmp	r3, r4
   1d272:	d1b7      	bne.n	1d1e4 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1d274:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1d278:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1d27a:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
	return config->uarte_regs;
   1d27e:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->hwfc;
   1d280:	4335      	orrs	r5, r6
   1d282:	681b      	ldr	r3, [r3, #0]
   1d284:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1d286:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
	data->uart_config = *cfg;
   1d28a:	c903      	ldmia	r1, {r0, r1}
   1d28c:	1d23      	adds	r3, r4, #4
   1d28e:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   1d292:	2000      	movs	r0, #0
}
   1d294:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1d296:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1d29a:	e7ed      	b.n	1d278 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1d29c:	4b13      	ldr	r3, [pc, #76]	; (1d2ec <uarte_nrfx_configure+0x158>)
   1d29e:	e7eb      	b.n	1d278 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1d2a0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1d2a4:	e7e8      	b.n	1d278 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   1d2a6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1d2aa:	e7e5      	b.n	1d278 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   1d2ac:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1d2b0:	e7e2      	b.n	1d278 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1d2b2:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1d2b6:	e7df      	b.n	1d278 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1d2b8:	4b0d      	ldr	r3, [pc, #52]	; (1d2f0 <uarte_nrfx_configure+0x15c>)
   1d2ba:	e7dd      	b.n	1d278 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1d2bc:	4b0d      	ldr	r3, [pc, #52]	; (1d2f4 <uarte_nrfx_configure+0x160>)
   1d2be:	e7db      	b.n	1d278 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1d2c0:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1d2c4:	e7d8      	b.n	1d278 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1d2c6:	4b0c      	ldr	r3, [pc, #48]	; (1d2f8 <uarte_nrfx_configure+0x164>)
   1d2c8:	e7d6      	b.n	1d278 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1d2ca:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1d2ce:	e7d3      	b.n	1d278 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1d2d0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1d2d4:	e7d0      	b.n	1d278 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1d2d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1d2da:	e7cd      	b.n	1d278 <uarte_nrfx_configure+0xe4>
   1d2dc:	0013b000 	.word	0x0013b000
   1d2e0:	004ea000 	.word	0x004ea000
   1d2e4:	0003d090 	.word	0x0003d090
   1d2e8:	000f4240 	.word	0x000f4240
   1d2ec:	00275000 	.word	0x00275000
   1d2f0:	0075c000 	.word	0x0075c000
   1d2f4:	003af000 	.word	0x003af000
   1d2f8:	013a9000 	.word	0x013a9000

0001d2fc <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1d2fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d300:	2200      	movs	r2, #0
   1d302:	b087      	sub	sp, #28
   1d304:	4607      	mov	r7, r0
   1d306:	2101      	movs	r1, #1
   1d308:	2002      	movs	r0, #2
   1d30a:	f7f7 febd 	bl	15088 <z_arm_irq_priority_set>
   1d30e:	2002      	movs	r0, #2
   1d310:	f7f7 fe8a 	bl	15028 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
   1d314:	f8d7 8004 	ldr.w	r8, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   1d318:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
   1d31a:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1d31e:	2100      	movs	r1, #0
   1d320:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   1d324:	6037      	str	r7, [r6, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1d326:	f8d8 900c 	ldr.w	r9, [r8, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1d32a:	466a      	mov	r2, sp
   1d32c:	4648      	mov	r0, r9
   1d32e:	f00b fe3b 	bl	28fa8 <pinctrl_lookup_state>
	if (ret < 0) {
   1d332:	1e05      	subs	r5, r0, #0
   1d334:	db26      	blt.n	1d384 <uarte_0_init+0x88>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1d336:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1d338:	f8d9 2000 	ldr.w	r2, [r9]
   1d33c:	7919      	ldrb	r1, [r3, #4]
   1d33e:	6818      	ldr	r0, [r3, #0]
   1d340:	f00b fe45 	bl	28fce <pinctrl_configure_pins>
	if (err < 0) {
   1d344:	1e05      	subs	r5, r0, #0
   1d346:	db1d      	blt.n	1d384 <uarte_0_init+0x88>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   1d348:	1d31      	adds	r1, r6, #4
   1d34a:	4638      	mov	r0, r7
   1d34c:	f7ff ff22 	bl	1d194 <uarte_nrfx_configure>
	if (err) {
   1d350:	4605      	mov	r5, r0
   1d352:	b9b8      	cbnz	r0, 1d384 <uarte_0_init+0x88>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1d354:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1d358:	0799      	lsls	r1, r3, #30
   1d35a:	d52b      	bpl.n	1d3b4 <uarte_0_init+0xb8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1d35c:	f106 001c 	add.w	r0, r6, #28
   1d360:	f002 fd8a 	bl	1fe78 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1d364:	4b4b      	ldr	r3, [pc, #300]	; (1d494 <uarte_0_init+0x198>)
   1d366:	4298      	cmp	r0, r3
   1d368:	d010      	beq.n	1d38c <uarte_0_init+0x90>
		LOG_ERR("Failed to allocate PPI Channel");
   1d36a:	4b4b      	ldr	r3, [pc, #300]	; (1d498 <uarte_0_init+0x19c>)
   1d36c:	9305      	str	r3, [sp, #20]
   1d36e:	2302      	movs	r3, #2
   1d370:	9304      	str	r3, [sp, #16]
   1d372:	484a      	ldr	r0, [pc, #296]	; (1d49c <uarte_0_init+0x1a0>)
   1d374:	462b      	mov	r3, r5
   1d376:	aa04      	add	r2, sp, #16
   1d378:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
   1d37c:	f06f 0504 	mvn.w	r5, #4
   1d380:	f7f6 fe80 	bl	14084 <z_impl_z_log_msg_static_create>
UART_NRF_UARTE_DEVICE(0);
   1d384:	4628      	mov	r0, r5
   1d386:	b007      	add	sp, #28
   1d388:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1d38c:	7f33      	ldrb	r3, [r6, #28]
   1d38e:	00db      	lsls	r3, r3, #3
   1d390:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d394:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1d398:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1d39c:	f504 7190 	add.w	r1, r4, #288	; 0x120
   1d3a0:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1d3a4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1d3a8:	7f32      	ldrb	r2, [r6, #28]
   1d3aa:	2301      	movs	r3, #1
   1d3ac:	4093      	lsls	r3, r2
    p_reg->CHENSET = mask;
   1d3ae:	4a3c      	ldr	r2, [pc, #240]	; (1d4a0 <uarte_0_init+0x1a4>)
   1d3b0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
   1d3b4:	68f3      	ldr	r3, [r6, #12]
   1d3b6:	2b00      	cmp	r3, #0
   1d3b8:	d059      	beq.n	1d46e <uarte_0_init+0x172>
	return config->uarte_regs;
   1d3ba:	687b      	ldr	r3, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   1d3bc:	f8d7 9010 	ldr.w	r9, [r7, #16]
	return config->uarte_regs;
   1d3c0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1d3c2:	2204      	movs	r2, #4
   1d3c4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   1d3c8:	f8d9 100c 	ldr.w	r1, [r9, #12]
   1d3cc:	2201      	movs	r2, #1
   1d3ce:	f8c1 20c0 	str.w	r2, [r1, #192]	; 0xc0
   1d3d2:	4934      	ldr	r1, [pc, #208]	; (1d4a4 <uarte_0_init+0x1a8>)
   1d3d4:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1d3d8:	2108      	movs	r1, #8
   1d3da:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d3de:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1d3e2:	b1a1      	cbz	r1, 1d40e <uarte_0_init+0x112>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d3e4:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d3e6:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1d3ea:	b91a      	cbnz	r2, 1d3f4 <uarte_0_init+0xf8>
   1d3ec:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   1d3f0:	2a00      	cmp	r2, #0
   1d3f2:	d0f8      	beq.n	1d3e6 <uarte_0_init+0xea>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d3f4:	2200      	movs	r2, #0
   1d3f6:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
   1d3fa:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
   1d3fe:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1d402:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   1d406:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   1d40a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   1d40e:	f8d9 000c 	ldr.w	r0, [r9, #12]
   1d412:	4925      	ldr	r1, [pc, #148]	; (1d4a8 <uarte_0_init+0x1ac>)
   1d414:	2200      	movs	r2, #0
   1d416:	3080      	adds	r0, #128	; 0x80
   1d418:	f00c fb1c 	bl	29a54 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   1d41c:	f8d9 300c 	ldr.w	r3, [r9, #12]
	timer->user_data = user_data;
   1d420:	f8c3 90b4 	str.w	r9, [r3, #180]	; 0xb4
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   1d424:	f8d9 000c 	ldr.w	r0, [r9, #12]
   1d428:	4920      	ldr	r1, [pc, #128]	; (1d4ac <uarte_0_init+0x1b0>)
   1d42a:	2200      	movs	r2, #0
   1d42c:	3020      	adds	r0, #32
   1d42e:	f00c fb11 	bl	29a54 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   1d432:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1d436:	f8c3 9054 	str.w	r9, [r3, #84]	; 0x54
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1d43a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1d43e:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1d440:	bf5c      	itt	pl
   1d442:	f44f 7380 	movpl.w	r3, #256	; 0x100
   1d446:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d44a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1d44e:	06db      	lsls	r3, r3, #27
   1d450:	bf44      	itt	mi
   1d452:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1d456:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1d45a:	6973      	ldr	r3, [r6, #20]
   1d45c:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1d460:	2300      	movs	r3, #0
   1d462:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d466:	2301      	movs	r3, #1
   1d468:	60a3      	str	r3, [r4, #8]
   1d46a:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   1d46c:	e78a      	b.n	1d384 <uarte_0_init+0x88>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1d46e:	2308      	movs	r3, #8
   1d470:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1d474:	f898 3008 	ldrb.w	r3, [r8, #8]
   1d478:	2b00      	cmp	r3, #0
   1d47a:	d1de      	bne.n	1d43a <uarte_0_init+0x13e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d47c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1d480:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1d484:	69b3      	ldr	r3, [r6, #24]
   1d486:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1d48a:	2301      	movs	r3, #1
   1d48c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d490:	6023      	str	r3, [r4, #0]
}
   1d492:	e7d2      	b.n	1d43a <uarte_0_init+0x13e>
   1d494:	0bad0000 	.word	0x0bad0000
   1d498:	0002d7f6 	.word	0x0002d7f6
   1d49c:	0002a088 	.word	0x0002a088
   1d4a0:	4001f000 	.word	0x4001f000
   1d4a4:	000a0210 	.word	0x000a0210
   1d4a8:	00029453 	.word	0x00029453
   1d4ac:	00029523 	.word	0x00029523

0001d4b0 <uarte_nrfx_poll_out>:
{
   1d4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d4b4:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   1d4b6:	6905      	ldr	r5, [r0, #16]
{
   1d4b8:	460e      	mov	r6, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1d4ba:	f00c f9a0 	bl	297fe <k_is_in_isr>
   1d4be:	b9b0      	cbnz	r0, 1d4ee <uarte_nrfx_poll_out+0x3e>
	return !z_sys_post_kernel;
   1d4c0:	4b2a      	ldr	r3, [pc, #168]	; (1d56c <uarte_nrfx_poll_out+0xbc>)
   1d4c2:	781b      	ldrb	r3, [r3, #0]
   1d4c4:	b19b      	cbz	r3, 1d4ee <uarte_nrfx_poll_out+0x3e>
{
   1d4c6:	2764      	movs	r7, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1d4c8:	6860      	ldr	r0, [r4, #4]
   1d4ca:	f00b ff97 	bl	293fc <is_tx_ready.isra.0>
   1d4ce:	2800      	cmp	r0, #0
   1d4d0:	d138      	bne.n	1d544 <uarte_nrfx_poll_out+0x94>
   1d4d2:	2001      	movs	r0, #1
   1d4d4:	f00c f8d4 	bl	29680 <nrfx_busy_wait>
   1d4d8:	3f01      	subs	r7, #1
   1d4da:	d1f5      	bne.n	1d4c8 <uarte_nrfx_poll_out+0x18>
	return z_impl_k_sleep(timeout);
   1d4dc:	2100      	movs	r1, #0
   1d4de:	2021      	movs	r0, #33	; 0x21
   1d4e0:	f005 fb26 	bl	22b30 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1d4e4:	e7ef      	b.n	1d4c6 <uarte_nrfx_poll_out+0x16>
   1d4e6:	f381 8811 	msr	BASEPRI, r1
   1d4ea:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1d4ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d4f2:	f3ef 8111 	mrs	r1, BASEPRI
   1d4f6:	f383 8812 	msr	BASEPRI_MAX, r3
   1d4fa:	f3bf 8f6f 	isb	sy
   1d4fe:	f8d4 8004 	ldr.w	r8, [r4, #4]
			if (is_tx_ready(dev)) {
   1d502:	4640      	mov	r0, r8
   1d504:	460f      	mov	r7, r1
   1d506:	f00b ff79 	bl	293fc <is_tx_ready.isra.0>
   1d50a:	2800      	cmp	r0, #0
   1d50c:	d0eb      	beq.n	1d4e6 <uarte_nrfx_poll_out+0x36>
				if (data->async && data->async->tx_size &&
   1d50e:	68eb      	ldr	r3, [r5, #12]
   1d510:	b15b      	cbz	r3, 1d52a <uarte_nrfx_poll_out+0x7a>
   1d512:	68da      	ldr	r2, [r3, #12]
   1d514:	b14a      	cbz	r2, 1d52a <uarte_nrfx_poll_out+0x7a>
					data->async->tx_amount < 0) {
   1d516:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
				if (data->async && data->async->tx_size &&
   1d51a:	2a00      	cmp	r2, #0
   1d51c:	da05      	bge.n	1d52a <uarte_nrfx_poll_out+0x7a>
	return config->uarte_regs;
   1d51e:	f8d8 2000 	ldr.w	r2, [r8]
    return p_reg->TXD.AMOUNT;
   1d522:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   1d526:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	*data->char_out = c;
   1d52a:	696b      	ldr	r3, [r5, #20]
   1d52c:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   1d52e:	6969      	ldr	r1, [r5, #20]
   1d530:	2201      	movs	r2, #1
   1d532:	4620      	mov	r0, r4
   1d534:	f00b fe09 	bl	2914a <tx_start>
	__asm__ volatile(
   1d538:	f387 8811 	msr	BASEPRI, r7
   1d53c:	f3bf 8f6f 	isb	sy
}
   1d540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1d544:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d548:	f3ef 8111 	mrs	r1, BASEPRI
   1d54c:	f383 8812 	msr	BASEPRI_MAX, r3
   1d550:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1d554:	6860      	ldr	r0, [r4, #4]
   1d556:	460f      	mov	r7, r1
   1d558:	f00b ff50 	bl	293fc <is_tx_ready.isra.0>
   1d55c:	2800      	cmp	r0, #0
   1d55e:	d1e4      	bne.n	1d52a <uarte_nrfx_poll_out+0x7a>
	__asm__ volatile(
   1d560:	f381 8811 	msr	BASEPRI, r1
   1d564:	f3bf 8f6f 	isb	sy
}
   1d568:	e7b8      	b.n	1d4dc <uarte_nrfx_poll_out+0x2c>
   1d56a:	bf00      	nop
   1d56c:	200048d3 	.word	0x200048d3

0001d570 <uarte_nrfx_rx_enable>:
{
   1d570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct uarte_nrfx_config *cfg = dev->config;
   1d574:	f8d0 a004 	ldr.w	sl, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   1d578:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1d57a:	f8da 9000 	ldr.w	r9, [sl]
{
   1d57e:	4617      	mov	r7, r2
	if (cfg->disable_rx) {
   1d580:	f89a 2008 	ldrb.w	r2, [sl, #8]
{
   1d584:	4605      	mov	r5, r0
   1d586:	4688      	mov	r8, r1
	if (cfg->disable_rx) {
   1d588:	b172      	cbz	r2, 1d5a8 <uarte_nrfx_rx_enable+0x38>
		__ASSERT(false, "TX only UARTE instance");
   1d58a:	4946      	ldr	r1, [pc, #280]	; (1d6a4 <uarte_nrfx_rx_enable+0x134>)
   1d58c:	4a46      	ldr	r2, [pc, #280]	; (1d6a8 <uarte_nrfx_rx_enable+0x138>)
   1d58e:	4847      	ldr	r0, [pc, #284]	; (1d6ac <uarte_nrfx_rx_enable+0x13c>)
   1d590:	f240 3341 	movw	r3, #833	; 0x341
   1d594:	f009 fe22 	bl	271dc <assert_print>
   1d598:	4845      	ldr	r0, [pc, #276]	; (1d6b0 <uarte_nrfx_rx_enable+0x140>)
   1d59a:	f009 fe1f 	bl	271dc <assert_print>
   1d59e:	4842      	ldr	r0, [pc, #264]	; (1d6a8 <uarte_nrfx_rx_enable+0x138>)
   1d5a0:	f240 3141 	movw	r1, #833	; 0x341
   1d5a4:	f009 fe13 	bl	271ce <assert_post_action>
	if (data->async->rx_enabled || data->async->discard_rx_fifo) {
   1d5a8:	68e2      	ldr	r2, [r4, #12]
   1d5aa:	f892 10ca 	ldrb.w	r1, [r2, #202]	; 0xca
   1d5ae:	2900      	cmp	r1, #0
   1d5b0:	d175      	bne.n	1d69e <uarte_nrfx_rx_enable+0x12e>
   1d5b2:	f892 10cb 	ldrb.w	r1, [r2, #203]	; 0xcb
   1d5b6:	2900      	cmp	r1, #0
   1d5b8:	d171      	bne.n	1d69e <uarte_nrfx_rx_enable+0x12e>
	data->async->rx_timeout = timeout;
   1d5ba:	6753      	str	r3, [r2, #116]	; 0x74
		MAX(timeout / RX_TIMEOUT_DIV,
   1d5bc:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
   1d5c0:	bfc4      	itt	gt
   1d5c2:	2205      	movgt	r2, #5
   1d5c4:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
   1d5c8:	68e2      	ldr	r2, [r4, #12]
		MAX(timeout / RX_TIMEOUT_DIV,
   1d5ca:	bfd8      	it	le
   1d5cc:	235c      	movle	r3, #92	; 0x5c
	data->async->rx_timeout_slab =
   1d5ce:	6793      	str	r3, [r2, #120]	; 0x78
	data->async->rx_buf = buf;
   1d5d0:	68e3      	ldr	r3, [r4, #12]
   1d5d2:	f8c3 8058 	str.w	r8, [r3, #88]	; 0x58
	data->async->rx_buf_len = len;
   1d5d6:	68e3      	ldr	r3, [r4, #12]
   1d5d8:	65df      	str	r7, [r3, #92]	; 0x5c
	data->async->rx_offset = 0;
   1d5da:	68e2      	ldr	r2, [r4, #12]
   1d5dc:	2300      	movs	r3, #0
   1d5de:	6613      	str	r3, [r2, #96]	; 0x60
	data->async->rx_next_buf = NULL;
   1d5e0:	68e2      	ldr	r2, [r4, #12]
   1d5e2:	6653      	str	r3, [r2, #100]	; 0x64
	data->async->rx_next_buf_len = 0;
   1d5e4:	68e2      	ldr	r2, [r4, #12]
   1d5e6:	6693      	str	r3, [r2, #104]	; 0x68
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d5e8:	f8da 3004 	ldr.w	r3, [sl, #4]
   1d5ec:	06da      	lsls	r2, r3, #27
   1d5ee:	d523      	bpl.n	1d638 <uarte_nrfx_rx_enable+0xc8>
		if (data->async->rx_flush_cnt) {
   1d5f0:	68e1      	ldr	r1, [r4, #12]
   1d5f2:	f891 60c9 	ldrb.w	r6, [r1, #201]	; 0xc9
   1d5f6:	b1fe      	cbz	r6, 1d638 <uarte_nrfx_rx_enable+0xc8>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   1d5f8:	42be      	cmp	r6, r7
   1d5fa:	bf28      	it	cs
   1d5fc:	463e      	movcs	r6, r7
			memcpy(buf, data->async->rx_flush_buffer, cpy_len);
   1d5fe:	4640      	mov	r0, r8
   1d600:	4632      	mov	r2, r6
   1d602:	31c4      	adds	r1, #196	; 0xc4
   1d604:	f00a fa12 	bl	27a2c <memcpy>
			if (!len) {
   1d608:	1bbf      	subs	r7, r7, r6
			buf += cpy_len;
   1d60a:	44b0      	add	r8, r6
			if (!len) {
   1d60c:	d114      	bne.n	1d638 <uarte_nrfx_rx_enable+0xc8>
				data->async->rx_flush_cnt -= cpy_len;
   1d60e:	68e2      	ldr	r2, [r4, #12]
   1d610:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
   1d614:	1b9b      	subs	r3, r3, r6
   1d616:	f882 30c9 	strb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   1d61a:	4631      	mov	r1, r6
   1d61c:	4628      	mov	r0, r5
   1d61e:	f00b fdc3 	bl	291a8 <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
   1d622:	68e1      	ldr	r1, [r4, #12]
   1d624:	4628      	mov	r0, r5
   1d626:	3158      	adds	r1, #88	; 0x58
   1d628:	f00b fdd7 	bl	291da <rx_buf_release>
				notify_rx_disable(dev);
   1d62c:	4628      	mov	r0, r5
   1d62e:	f00b fdec 	bl	2920a <notify_rx_disable>
	return 0;
   1d632:	2000      	movs	r0, #0
}
   1d634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d638:	2300      	movs	r3, #0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1d63a:	f8c9 8534 	str.w	r8, [r9, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1d63e:	f8c9 7538 	str.w	r7, [r9, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d642:	f8c9 3110 	str.w	r3, [r9, #272]	; 0x110
   1d646:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
   1d64a:	f8c9 314c 	str.w	r3, [r9, #332]	; 0x14c
   1d64e:	f8d9 314c 	ldr.w	r3, [r9, #332]	; 0x14c
	data->async->rx_enabled = true;
   1d652:	68e3      	ldr	r3, [r4, #12]
   1d654:	2201      	movs	r2, #1
   1d656:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d65a:	f8da 3004 	ldr.w	r3, [sl, #4]
   1d65e:	06db      	lsls	r3, r3, #27
   1d660:	d519      	bpl.n	1d696 <uarte_nrfx_rx_enable+0x126>
	__asm__ volatile(
   1d662:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d666:	f3ef 8111 	mrs	r1, BASEPRI
   1d66a:	f383 8812 	msr	BASEPRI_MAX, r3
   1d66e:	f3bf 8f6f 	isb	sy
	if (data->async) {
   1d672:	692b      	ldr	r3, [r5, #16]
   1d674:	68db      	ldr	r3, [r3, #12]
   1d676:	b12b      	cbz	r3, 1d684 <uarte_nrfx_rx_enable+0x114>
		data->async->low_power_mask |= mask;
   1d678:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   1d67c:	f042 0202 	orr.w	r2, r2, #2
   1d680:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	return config->uarte_regs;
   1d684:	686b      	ldr	r3, [r5, #4]
   1d686:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1d688:	2208      	movs	r2, #8
   1d68a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   1d68e:	f381 8811 	msr	BASEPRI, r1
   1d692:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d696:	2301      	movs	r3, #1
   1d698:	f8c9 3000 	str.w	r3, [r9]
	return 0;
   1d69c:	e7c9      	b.n	1d632 <uarte_nrfx_rx_enable+0xc2>
		return -EBUSY;
   1d69e:	f06f 000f 	mvn.w	r0, #15
   1d6a2:	e7c7      	b.n	1d634 <uarte_nrfx_rx_enable+0xc4>
   1d6a4:	0002dab5 	.word	0x0002dab5
   1d6a8:	0002d815 	.word	0x0002d815
   1d6ac:	0002ae37 	.word	0x0002ae37
   1d6b0:	0002d849 	.word	0x0002d849

0001d6b4 <uarte_nrfx_isr_async>:
{
   1d6b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   1d6b8:	6843      	ldr	r3, [r0, #4]
   1d6ba:	681d      	ldr	r5, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
   1d6bc:	6903      	ldr	r3, [r0, #16]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d6be:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
{
   1d6c2:	b088      	sub	sp, #32
   1d6c4:	4604      	mov	r4, r0
	if (!HW_RX_COUNTING_ENABLED(data)
   1d6c6:	b169      	cbz	r1, 1d6e4 <uarte_nrfx_isr_async+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d6c8:	2200      	movs	r2, #0
   1d6ca:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   1d6ce:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   1d6d2:	68da      	ldr	r2, [r3, #12]
   1d6d4:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   1d6d8:	3301      	adds	r3, #1
   1d6da:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
}
   1d6de:	b008      	add	sp, #32
   1d6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d6e4:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1d6e8:	b323      	cbz	r3, 1d734 <uarte_nrfx_isr_async+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d6ea:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   1d6ee:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	return config->uarte_regs;
   1d6f2:	6843      	ldr	r3, [r0, #4]
   1d6f4:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1d6f6:	f8d3 6480 	ldr.w	r6, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1d6fa:	f8c3 6480 	str.w	r6, [r3, #1152]	; 0x480
	struct uart_event evt = {
   1d6fe:	2214      	movs	r2, #20
   1d700:	a803      	add	r0, sp, #12
   1d702:	f00a f99e 	bl	27a42 <memset>
   1d706:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1d708:	07f2      	lsls	r2, r6, #31
	struct uart_event evt = {
   1d70a:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1d70e:	f100 810c 	bmi.w	1d92a <uarte_nrfx_isr_async+0x276>
   1d712:	07b3      	lsls	r3, r6, #30
   1d714:	f100 810b 	bmi.w	1d92e <uarte_nrfx_isr_async+0x27a>
   1d718:	0777      	lsls	r7, r6, #29
   1d71a:	f100 810a 	bmi.w	1d932 <uarte_nrfx_isr_async+0x27e>
   1d71e:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   1d722:	4620      	mov	r0, r4
   1d724:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   1d726:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   1d72a:	f00b fd36 	bl	2919a <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   1d72e:	4620      	mov	r0, r4
   1d730:	f00b fdc9 	bl	292c6 <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d734:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   1d738:	2b00      	cmp	r3, #0
   1d73a:	d033      	beq.n	1d7a4 <uarte_nrfx_isr_async+0xf0>
    return p_reg->INTENSET & mask;
   1d73c:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   1d740:	06d8      	lsls	r0, r3, #27
   1d742:	d52f      	bpl.n	1d7a4 <uarte_nrfx_isr_async+0xf0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d744:	f04f 0800 	mov.w	r8, #0
   1d748:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
	struct uarte_nrfx_data *data = dev->data;
   1d74c:	6926      	ldr	r6, [r4, #16]
   1d74e:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
   1d752:	6863      	ldr	r3, [r4, #4]
   1d754:	681f      	ldr	r7, [r3, #0]
	data->async->is_in_irq = true;
   1d756:	68f3      	ldr	r3, [r6, #12]
   1d758:	2201      	movs	r2, #1
   1d75a:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	k_timer_stop(&data->async->rx_timeout_timer);
   1d75e:	68f0      	ldr	r0, [r6, #12]
   1d760:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   1d762:	f00c f983 	bl	29a6c <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
   1d766:	68f2      	ldr	r2, [r6, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
   1d768:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
   1d76c:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
	data->async->rx_flush_cnt = 0;
   1d770:	f882 80c9 	strb.w	r8, [r2, #201]	; 0xc9
	int rx_len = rx_amount - data->async->rx_offset;
   1d774:	68f2      	ldr	r2, [r6, #12]
   1d776:	6e10      	ldr	r0, [r2, #96]	; 0x60
   1d778:	1a1b      	subs	r3, r3, r0
   1d77a:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
   1d77c:	6f10      	ldr	r0, [r2, #112]	; 0x70
	if (rx_len < 0) {
   1d77e:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
	data->async->rx_total_user_byte_cnt += rx_len;
   1d782:	4408      	add	r0, r1
	if (rx_len > 0) {
   1d784:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
   1d786:	6710      	str	r0, [r2, #112]	; 0x70
	if (rx_len > 0) {
   1d788:	dd02      	ble.n	1d790 <uarte_nrfx_isr_async+0xdc>
		notify_uart_rx_rdy(dev, rx_len);
   1d78a:	4620      	mov	r0, r4
   1d78c:	f00b fd0c 	bl	291a8 <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   1d790:	68f1      	ldr	r1, [r6, #12]
   1d792:	f891 30ca 	ldrb.w	r3, [r1, #202]	; 0xca
   1d796:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   1d79a:	2b00      	cmp	r3, #0
   1d79c:	f040 80cb 	bne.w	1d936 <uarte_nrfx_isr_async+0x282>
		data->async->is_in_irq = false;
   1d7a0:	f881 20ce 	strb.w	r2, [r1, #206]	; 0xce
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d7a4:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   1d7a8:	b383      	cbz	r3, 1d80c <uarte_nrfx_isr_async+0x158>
   1d7aa:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1d7ae:	bb6e      	cbnz	r6, 1d80c <uarte_nrfx_isr_async+0x158>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d7b0:	f8c5 614c 	str.w	r6, [r5, #332]	; 0x14c
	struct uart_event evt = {
   1d7b4:	2214      	movs	r2, #20
	struct uarte_nrfx_data *data = dev->data;
   1d7b6:	6927      	ldr	r7, [r4, #16]
   1d7b8:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uart_event evt = {
   1d7bc:	4631      	mov	r1, r6
   1d7be:	a803      	add	r0, sp, #12
   1d7c0:	f00a f93f 	bl	27a42 <memset>
   1d7c4:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   1d7c6:	a903      	add	r1, sp, #12
   1d7c8:	4620      	mov	r0, r4
	struct uart_event evt = {
   1d7ca:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   1d7ce:	f00b fce4 	bl	2919a <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
   1d7d2:	68fb      	ldr	r3, [r7, #12]
   1d7d4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   1d7d6:	1c51      	adds	r1, r2, #1
   1d7d8:	d018      	beq.n	1d80c <uarte_nrfx_isr_async+0x158>
		data->async->rx_timeout_left = data->async->rx_timeout;
   1d7da:	67da      	str	r2, [r3, #124]	; 0x7c
		k_timer_start(&data->async->rx_timeout_timer,
   1d7dc:	68ff      	ldr	r7, [r7, #12]
   1d7de:	498f      	ldr	r1, [pc, #572]	; (1da1c <uarte_nrfx_isr_async+0x368>)
			      K_USEC(data->async->rx_timeout_slab),
   1d7e0:	6fb8      	ldr	r0, [r7, #120]	; 0x78
   1d7e2:	4a8f      	ldr	r2, [pc, #572]	; (1da20 <uarte_nrfx_isr_async+0x36c>)
   1d7e4:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
   1d7e8:	468e      	mov	lr, r1
   1d7ea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1d7ee:	4631      	mov	r1, r6
   1d7f0:	fbcc e100 	smlal	lr, r1, ip, r0
   1d7f4:	2300      	movs	r3, #0
   1d7f6:	4670      	mov	r0, lr
   1d7f8:	f7e3 f850 	bl	89c <__aeabi_uldivmod>
   1d7fc:	4602      	mov	r2, r0
   1d7fe:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1d800:	e9cd 0100 	strd	r0, r1, [sp]
   1d804:	f107 0080 	add.w	r0, r7, #128	; 0x80
   1d808:	f005 fe6a 	bl	234e0 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d80c:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1d810:	b363      	cbz	r3, 1d86c <uarte_nrfx_isr_async+0x1b8>
   1d812:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1d816:	bb4e      	cbnz	r6, 1d86c <uarte_nrfx_isr_async+0x1b8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d818:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	struct uarte_nrfx_data *data = dev->data;
   1d81c:	6927      	ldr	r7, [r4, #16]
   1d81e:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	rx_buf_release(dev, &data->async->rx_buf);
   1d822:	68f9      	ldr	r1, [r7, #12]
	const struct uarte_nrfx_config *config = dev->config;
   1d824:	f8d4 8004 	ldr.w	r8, [r4, #4]
	rx_buf_release(dev, &data->async->rx_buf);
   1d828:	3158      	adds	r1, #88	; 0x58
   1d82a:	4620      	mov	r0, r4
   1d82c:	f00b fcd5 	bl	291da <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
   1d830:	68f9      	ldr	r1, [r7, #12]
   1d832:	4620      	mov	r0, r4
   1d834:	3164      	adds	r1, #100	; 0x64
   1d836:	f00b fcd0 	bl	291da <rx_buf_release>
	data->async->rx_enabled = false;
   1d83a:	68fb      	ldr	r3, [r7, #12]
   1d83c:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
	if (data->async->discard_rx_fifo) {
   1d840:	68fb      	ldr	r3, [r7, #12]
   1d842:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
   1d846:	b132      	cbz	r2, 1d856 <uarte_nrfx_isr_async+0x1a2>
		data->async->discard_rx_fifo = false;
   1d848:	f883 60cb 	strb.w	r6, [r3, #203]	; 0xcb
		(void)rx_flush(dev, NULL, 0);
   1d84c:	6860      	ldr	r0, [r4, #4]
   1d84e:	4632      	mov	r2, r6
   1d850:	4631      	mov	r1, r6
   1d852:	f00b fd75 	bl	29340 <rx_flush.isra.0>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d856:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1d85a:	06d8      	lsls	r0, r3, #27
   1d85c:	d503      	bpl.n	1d866 <uarte_nrfx_isr_async+0x1b2>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   1d85e:	2102      	movs	r1, #2
   1d860:	4620      	mov	r0, r4
   1d862:	f00b fda1 	bl	293a8 <async_uart_release>
	notify_rx_disable(dev);
   1d866:	4620      	mov	r0, r4
   1d868:	f00b fccf 	bl	2920a <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d86c:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   1d870:	b1db      	cbz	r3, 1d8aa <uarte_nrfx_isr_async+0x1f6>
    return p_reg->INTENSET & mask;
   1d872:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   1d876:	05d9      	lsls	r1, r3, #23
   1d878:	d517      	bpl.n	1d8aa <uarte_nrfx_isr_async+0x1f6>
	return config->uarte_regs;
   1d87a:	6863      	ldr	r3, [r4, #4]
   1d87c:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   1d87e:	f04f 0140 	mov.w	r1, #64	; 0x40
   1d882:	f3ef 8211 	mrs	r2, BASEPRI
   1d886:	f381 8812 	msr	BASEPRI_MAX, r1
   1d88a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d88e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1d892:	b131      	cbz	r1, 1d8a2 <uarte_nrfx_isr_async+0x1ee>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d894:	2100      	movs	r1, #0
   1d896:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1d89a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d89e:	2101      	movs	r1, #1
   1d8a0:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1d8a2:	f382 8811 	msr	BASEPRI, r2
   1d8a6:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d8aa:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   1d8ae:	2b00      	cmp	r3, #0
   1d8b0:	f43f af15 	beq.w	1d6de <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
   1d8b4:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   1d8b8:	025a      	lsls	r2, r3, #9
   1d8ba:	f57f af10 	bpl.w	1d6de <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = dev->config;
   1d8be:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = dev->data;
   1d8c0:	6925      	ldr	r5, [r4, #16]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d8c2:	e9d3 7300 	ldrd	r7, r3, [r3]
   1d8c6:	06db      	lsls	r3, r3, #27
   1d8c8:	d466      	bmi.n	1d998 <uarte_nrfx_isr_async+0x2e4>
	if (!data->async->tx_buf) {
   1d8ca:	68eb      	ldr	r3, [r5, #12]
   1d8cc:	689b      	ldr	r3, [r3, #8]
   1d8ce:	2b00      	cmp	r3, #0
   1d8d0:	f43f af05 	beq.w	1d6de <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
   1d8d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d8d8:	f3ef 8211 	mrs	r2, BASEPRI
   1d8dc:	f383 8812 	msr	BASEPRI_MAX, r3
   1d8e0:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   1d8e4:	68eb      	ldr	r3, [r5, #12]
   1d8e6:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   1d8ea:	2900      	cmp	r1, #0
   1d8ec:	bfac      	ite	ge
   1d8ee:	f8d3 60bc 	ldrge.w	r6, [r3, #188]	; 0xbc
    return p_reg->TXD.AMOUNT;
   1d8f2:	f8d7 654c 	ldrlt.w	r6, [r7, #1356]	; 0x54c
	__asm__ volatile(
   1d8f6:	f382 8811 	msr	BASEPRI, r2
   1d8fa:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
   1d8fe:	68eb      	ldr	r3, [r5, #12]
   1d900:	f893 20cd 	ldrb.w	r2, [r3, #205]	; 0xcd
   1d904:	2a00      	cmp	r2, #0
   1d906:	d054      	beq.n	1d9b2 <uarte_nrfx_isr_async+0x2fe>
	__asm__ volatile(
   1d908:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d90c:	f3ef 8611 	mrs	r6, BASEPRI
   1d910:	f383 8812 	msr	BASEPRI_MAX, r3
   1d914:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
   1d918:	4629      	mov	r1, r5
   1d91a:	4620      	mov	r0, r4
   1d91c:	f00b fd7e 	bl	2941c <start_tx_locked>
	__asm__ volatile(
   1d920:	f386 8811 	msr	BASEPRI, r6
   1d924:	f3bf 8f6f 	isb	sy
				return;
   1d928:	e6d9      	b.n	1d6de <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1d92a:	2601      	movs	r6, #1
   1d92c:	e6f9      	b.n	1d722 <uarte_nrfx_isr_async+0x6e>
   1d92e:	2602      	movs	r6, #2
   1d930:	e6f7      	b.n	1d722 <uarte_nrfx_isr_async+0x6e>
   1d932:	2604      	movs	r6, #4
   1d934:	e6f5      	b.n	1d722 <uarte_nrfx_isr_async+0x6e>
	rx_buf_release(dev, &data->async->rx_buf);
   1d936:	3158      	adds	r1, #88	; 0x58
   1d938:	4620      	mov	r0, r4
   1d93a:	f00b fc4e 	bl	291da <rx_buf_release>
	__asm__ volatile(
   1d93e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d942:	f3ef 8111 	mrs	r1, BASEPRI
   1d946:	f383 8812 	msr	BASEPRI_MAX, r3
   1d94a:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   1d94e:	68f3      	ldr	r3, [r6, #12]
   1d950:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   1d952:	b1f2      	cbz	r2, 1d992 <uarte_nrfx_isr_async+0x2de>
		data->async->rx_buf = data->async->rx_next_buf;
   1d954:	659a      	str	r2, [r3, #88]	; 0x58
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   1d956:	68f3      	ldr	r3, [r6, #12]
   1d958:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   1d95a:	65da      	str	r2, [r3, #92]	; 0x5c
		data->async->rx_next_buf = NULL;
   1d95c:	68f2      	ldr	r2, [r6, #12]
   1d95e:	2300      	movs	r3, #0
   1d960:	6653      	str	r3, [r2, #100]	; 0x64
		data->async->rx_next_buf_len = 0;
   1d962:	68f2      	ldr	r2, [r6, #12]
   1d964:	6693      	str	r3, [r2, #104]	; 0x68
		data->async->rx_offset = 0;
   1d966:	68f2      	ldr	r2, [r6, #12]
   1d968:	6613      	str	r3, [r2, #96]	; 0x60
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d96a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1d96e:	b90b      	cbnz	r3, 1d974 <uarte_nrfx_isr_async+0x2c0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d970:	2301      	movs	r3, #1
   1d972:	603b      	str	r3, [r7, #0]
    p_reg->SHORTS &= ~(mask);
   1d974:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
   1d978:	f023 0320 	bic.w	r3, r3, #32
   1d97c:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	__asm__ volatile(
   1d980:	f381 8811 	msr	BASEPRI, r1
   1d984:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   1d988:	68f3      	ldr	r3, [r6, #12]
   1d98a:	2200      	movs	r2, #0
   1d98c:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
   1d990:	e708      	b.n	1d7a4 <uarte_nrfx_isr_async+0xf0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d992:	2301      	movs	r3, #1
   1d994:	607b      	str	r3, [r7, #4]
}
   1d996:	e7f3      	b.n	1d980 <uarte_nrfx_isr_async+0x2cc>
    p_reg->INTENCLR = mask;
   1d998:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1d99c:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   1d9a0:	2101      	movs	r1, #1
   1d9a2:	4620      	mov	r0, r4
   1d9a4:	f00b fd00 	bl	293a8 <async_uart_release>
		if (!data->async->tx_size) {
   1d9a8:	68eb      	ldr	r3, [r5, #12]
   1d9aa:	68db      	ldr	r3, [r3, #12]
   1d9ac:	2b00      	cmp	r3, #0
   1d9ae:	d18c      	bne.n	1d8ca <uarte_nrfx_isr_async+0x216>
   1d9b0:	e695      	b.n	1d6de <uarte_nrfx_isr_async+0x2a>
	if (data->async->tx_buf != data->async->xfer_buf) {
   1d9b2:	6899      	ldr	r1, [r3, #8]
   1d9b4:	691a      	ldr	r2, [r3, #16]
   1d9b6:	4291      	cmp	r1, r2
   1d9b8:	d00c      	beq.n	1d9d4 <uarte_nrfx_isr_async+0x320>
		if (amount == data->async->xfer_len) {
   1d9ba:	6959      	ldr	r1, [r3, #20]
			data->async->tx_cache_offset += amount;
   1d9bc:	69da      	ldr	r2, [r3, #28]
		if (amount == data->async->xfer_len) {
   1d9be:	42b1      	cmp	r1, r6
			data->async->tx_cache_offset += amount;
   1d9c0:	4432      	add	r2, r6
		if (amount == data->async->xfer_len) {
   1d9c2:	d128      	bne.n	1da16 <uarte_nrfx_isr_async+0x362>
			data->async->tx_cache_offset += amount;
   1d9c4:	61da      	str	r2, [r3, #28]
			if (setup_tx_cache(data)) {
   1d9c6:	4628      	mov	r0, r5
   1d9c8:	f00b fca2 	bl	29310 <setup_tx_cache>
   1d9cc:	2800      	cmp	r0, #0
   1d9ce:	d19b      	bne.n	1d908 <uarte_nrfx_isr_async+0x254>
			amount = data->async->tx_cache_offset;
   1d9d0:	68eb      	ldr	r3, [r5, #12]
   1d9d2:	69de      	ldr	r6, [r3, #28]
	k_timer_stop(&data->async->tx_timeout_timer);
   1d9d4:	68e8      	ldr	r0, [r5, #12]
   1d9d6:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   1d9d8:	f00c f848 	bl	29a6c <z_impl_k_timer_stop>
	struct uart_event evt = {
   1d9dc:	2214      	movs	r2, #20
   1d9de:	2100      	movs	r1, #0
   1d9e0:	a803      	add	r0, sp, #12
   1d9e2:	f00a f82e 	bl	27a42 <memset>
		.data.tx.buf = data->async->tx_buf,
   1d9e6:	68eb      	ldr	r3, [r5, #12]
	struct uart_event evt = {
   1d9e8:	689a      	ldr	r2, [r3, #8]
   1d9ea:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
   1d9ee:	68db      	ldr	r3, [r3, #12]
   1d9f0:	429e      	cmp	r6, r3
		evt.type = UART_TX_ABORTED;
   1d9f2:	bf1c      	itt	ne
   1d9f4:	2301      	movne	r3, #1
   1d9f6:	f88d 300c 	strbne.w	r3, [sp, #12]
   1d9fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1d9fe:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   1da02:	68ea      	ldr	r2, [r5, #12]
   1da04:	2300      	movs	r3, #0
   1da06:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
   1da08:	68ea      	ldr	r2, [r5, #12]
	user_callback(dev, &evt);
   1da0a:	a903      	add	r1, sp, #12
	data->async->tx_size = 0;
   1da0c:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
   1da0e:	4620      	mov	r0, r4
   1da10:	f00b fbc3 	bl	2919a <user_callback>
   1da14:	e663      	b.n	1d6de <uarte_nrfx_isr_async+0x2a>
			amount += data->async->tx_cache_offset;
   1da16:	4616      	mov	r6, r2
   1da18:	e7dc      	b.n	1d9d4 <uarte_nrfx_isr_async+0x320>
   1da1a:	bf00      	nop
   1da1c:	000f423f 	.word	0x000f423f
   1da20:	000f4240 	.word	0x000f4240

0001da24 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   1da24:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   1da26:	490e      	ldr	r1, [pc, #56]	; (1da60 <sys_clock_timeout_handler+0x3c>)
   1da28:	e9d1 3400 	ldrd	r3, r4, [r1]
   1da2c:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   1da2e:	18c3      	adds	r3, r0, r3
   1da30:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
   1da34:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
   1da38:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1da3c:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   1da40:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1da44:	d209      	bcs.n	1da5a <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1da46:	4b07      	ldr	r3, [pc, #28]	; (1da64 <sys_clock_timeout_handler+0x40>)
   1da48:	681b      	ldr	r3, [r3, #0]
   1da4a:	0a1a      	lsrs	r2, r3, #8
   1da4c:	061b      	lsls	r3, r3, #24
   1da4e:	199c      	adds	r4, r3, r6
   1da50:	4b05      	ldr	r3, [pc, #20]	; (1da68 <sys_clock_timeout_handler+0x44>)
   1da52:	f142 0500 	adc.w	r5, r2, #0
   1da56:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   1da5a:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   1da5c:	f005 bb8c 	b.w	23178 <sys_clock_announce>
   1da60:	200022a0 	.word	0x200022a0
   1da64:	200036e8 	.word	0x200036e8
   1da68:	200022a8 	.word	0x200022a8

0001da6c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1da6c:	4b0d      	ldr	r3, [pc, #52]	; (1daa4 <z_nrf_rtc_timer_read+0x38>)
   1da6e:	6818      	ldr	r0, [r3, #0]
   1da70:	0a01      	lsrs	r1, r0, #8
   1da72:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   1da74:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   1da78:	4b0b      	ldr	r3, [pc, #44]	; (1daa8 <z_nrf_rtc_timer_read+0x3c>)
   1da7a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1da7e:	1818      	adds	r0, r3, r0
   1da80:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1da84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1da88:	d20a      	bcs.n	1daa0 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1da8a:	4b08      	ldr	r3, [pc, #32]	; (1daac <z_nrf_rtc_timer_read+0x40>)
   1da8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   1da90:	4290      	cmp	r0, r2
   1da92:	eb71 0303 	sbcs.w	r3, r1, r3
   1da96:	d203      	bcs.n	1daa0 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1da98:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1da9c:	f141 0100 	adc.w	r1, r1, #0
}
   1daa0:	4770      	bx	lr
   1daa2:	bf00      	nop
   1daa4:	200036e8 	.word	0x200036e8
   1daa8:	40011000 	.word	0x40011000
   1daac:	200022a8 	.word	0x200022a8

0001dab0 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   1dab0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   1dab4:	4c2b      	ldr	r4, [pc, #172]	; (1db64 <rtc_nrf_isr+0xb4>)
   1dab6:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1daba:	0799      	lsls	r1, r3, #30
   1dabc:	d50b      	bpl.n	1dad6 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dabe:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1dac2:	b143      	cbz	r3, 1dad6 <rtc_nrf_isr+0x26>
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
   1dac4:	4a28      	ldr	r2, [pc, #160]	; (1db68 <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1dac6:	2300      	movs	r3, #0
   1dac8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1dacc:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1dad0:	6813      	ldr	r3, [r2, #0]
   1dad2:	3301      	adds	r3, #1
   1dad4:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1dad6:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   1dada:	03da      	lsls	r2, r3, #15
   1dadc:	d523      	bpl.n	1db26 <rtc_nrf_isr+0x76>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1dade:	f3bf 8f5b 	dmb	ish
   1dae2:	4b22      	ldr	r3, [pc, #136]	; (1db6c <rtc_nrf_isr+0xbc>)
   1dae4:	e853 2f00 	ldrex	r2, [r3]
   1dae8:	f022 0101 	bic.w	r1, r2, #1
   1daec:	e843 1000 	strex	r0, r1, [r3]
   1daf0:	2800      	cmp	r0, #0
   1daf2:	d1f7      	bne.n	1dae4 <rtc_nrf_isr+0x34>
   1daf4:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   1daf8:	07d3      	lsls	r3, r2, #31
   1dafa:	d402      	bmi.n	1db02 <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dafc:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1db00:	b18b      	cbz	r3, 1db26 <rtc_nrf_isr+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1db02:	2500      	movs	r5, #0
   1db04:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1db08:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   1db0c:	f7ff ffae 	bl	1da6c <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1db10:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1db14:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   1db16:	4b16      	ldr	r3, [pc, #88]	; (1db70 <rtc_nrf_isr+0xc0>)
   1db18:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   1db1c:	42b0      	cmp	r0, r6
   1db1e:	41b9      	sbcs	r1, r7
   1db20:	d204      	bcs.n	1db2c <rtc_nrf_isr+0x7c>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1db22:	f382 8810 	msr	PRIMASK, r2
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		process_channel(chan);
	}
}
   1db26:	b003      	add	sp, #12
   1db28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1db2c:	f04f 38ff 	mov.w	r8, #4294967295
   1db30:	f04f 39ff 	mov.w	r9, #4294967295
   1db34:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
   1db38:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
   1db3c:	601d      	str	r5, [r3, #0]
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1db3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1db42:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1db46:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1db4a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1db4e:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   1db52:	2900      	cmp	r1, #0
   1db54:	d0e7      	beq.n	1db26 <rtc_nrf_isr+0x76>
			handler(chan, expire_time, user_context);
   1db56:	9000      	str	r0, [sp, #0]
   1db58:	4632      	mov	r2, r6
   1db5a:	463b      	mov	r3, r7
   1db5c:	4628      	mov	r0, r5
   1db5e:	4788      	blx	r1
   1db60:	e7e1      	b.n	1db26 <rtc_nrf_isr+0x76>
   1db62:	bf00      	nop
   1db64:	40011000 	.word	0x40011000
   1db68:	200036e8 	.word	0x200036e8
   1db6c:	200036e0 	.word	0x200036e0
   1db70:	20002290 	.word	0x20002290

0001db74 <compare_set.constprop.0.isra.0>:
static int compare_set(int32_t chan, uint64_t target_time,
   1db74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1db78:	4d4b      	ldr	r5, [pc, #300]	; (1dca8 <compare_set.constprop.0.isra.0+0x134>)
   1db7a:	f3bf 8f5b 	dmb	ish
   1db7e:	4606      	mov	r6, r0
   1db80:	460f      	mov	r7, r1
   1db82:	e855 8f00 	ldrex	r8, [r5]
   1db86:	f028 0301 	bic.w	r3, r8, #1
   1db8a:	e845 3200 	strex	r2, r3, [r5]
   1db8e:	2a00      	cmp	r2, #0
   1db90:	d1f7      	bne.n	1db82 <compare_set.constprop.0.isra.0+0xe>
   1db92:	f3bf 8f5b 	dmb	ish
    p_reg->INTENCLR = mask;
   1db96:	4c45      	ldr	r4, [pc, #276]	; (1dcac <compare_set.constprop.0.isra.0+0x138>)
   1db98:	f44f 3980 	mov.w	r9, #65536	; 0x10000
   1db9c:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1dba0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1dba4:	f3bf 8f6f 	isb	sy
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1dba8:	f7ff ff60 	bl	1da6c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1dbac:	42b0      	cmp	r0, r6
   1dbae:	eb71 0307 	sbcs.w	r3, r1, r7
	return prev & BIT(chan);
   1dbb2:	f008 0801 	and.w	r8, r8, #1
	if (curr_time < target_time) {
   1dbb6:	d240      	bcs.n	1dc3a <compare_set.constprop.0.isra.0+0xc6>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   1dbb8:	4b3d      	ldr	r3, [pc, #244]	; (1dcb0 <compare_set.constprop.0.isra.0+0x13c>)
   1dbba:	1a30      	subs	r0, r6, r0
   1dbbc:	eb67 0101 	sbc.w	r1, r7, r1
   1dbc0:	4298      	cmp	r0, r3
   1dbc2:	f171 0100 	sbcs.w	r1, r1, #0
   1dbc6:	d24c      	bcs.n	1dc62 <compare_set.constprop.0.isra.0+0xee>
		if (target_time != cc_data[chan].target_time) {
   1dbc8:	4b3a      	ldr	r3, [pc, #232]	; (1dcb4 <compare_set.constprop.0.isra.0+0x140>)
   1dbca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1dbce:	429f      	cmp	r7, r3
   1dbd0:	bf08      	it	eq
   1dbd2:	4296      	cmpeq	r6, r2
   1dbd4:	d03e      	beq.n	1dc54 <compare_set.constprop.0.isra.0+0xe0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1dbd6:	f04f 0c00 	mov.w	ip, #0
    p_reg->EVTENCLR = mask;
   1dbda:	f8c4 9348 	str.w	r9, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1dbde:	f8c4 c140 	str.w	ip, [r4, #320]	; 0x140
	return absolute_time & COUNTER_MAX;
   1dbe2:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
   1dbe6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1dbea:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 1dcc4 <compare_set.constprop.0.isra.0+0x150>
	uint32_t cc_val = req_cc;
   1dbee:	4683      	mov	fp, r0
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   1dbf0:	2103      	movs	r1, #3
	return (a - b) & COUNTER_MAX;
   1dbf2:	f06f 0e02 	mvn.w	lr, #2
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1dbf6:	f02b 437f 	bic.w	r3, fp, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1dbfa:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   1dbfe:	f8c4 9344 	str.w	r9, [r4, #836]	; 0x344
     return p_reg->COUNTER;
   1dc02:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1dc06:	ebae 0302 	sub.w	r3, lr, r2
   1dc0a:	445b      	add	r3, fp
   1dc0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1dc10:	4553      	cmp	r3, sl
   1dc12:	d91f      	bls.n	1dc54 <compare_set.constprop.0.isra.0+0xe0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1dc14:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
			if (event_check(chan)) {
   1dc18:	b15b      	cbz	r3, 1dc32 <compare_set.constprop.0.isra.0+0xbe>
     return p_reg->COUNTER;
   1dc1a:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1dc1e:	1a13      	subs	r3, r2, r0
   1dc20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   1dc24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1dc28:	d914      	bls.n	1dc54 <compare_set.constprop.0.isra.0+0xe0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1dc2a:	f8c4 c140 	str.w	ip, [r4, #320]	; 0x140
   1dc2e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
			cc_val = now + cc_inc;
   1dc32:	eb01 0b02 	add.w	fp, r1, r2
			cc_inc++;
   1dc36:	3101      	adds	r1, #1
	for (;;) {
   1dc38:	e7dd      	b.n	1dbf6 <compare_set.constprop.0.isra.0+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1dc3a:	4b1f      	ldr	r3, [pc, #124]	; (1dcb8 <compare_set.constprop.0.isra.0+0x144>)
   1dc3c:	f3bf 8f5b 	dmb	ish
   1dc40:	e853 1f00 	ldrex	r1, [r3]
   1dc44:	f041 0101 	orr.w	r1, r1, #1
   1dc48:	e843 1200 	strex	r2, r1, [r3]
   1dc4c:	2a00      	cmp	r2, #0
   1dc4e:	d1f7      	bne.n	1dc40 <compare_set.constprop.0.isra.0+0xcc>
   1dc50:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   1dc54:	4b17      	ldr	r3, [pc, #92]	; (1dcb4 <compare_set.constprop.0.isra.0+0x140>)
	cc_data[chan].callback = handler;
   1dc56:	4a19      	ldr	r2, [pc, #100]	; (1dcbc <compare_set.constprop.0.isra.0+0x148>)
   1dc58:	601a      	str	r2, [r3, #0]
	cc_data[chan].target_time = target_time;
   1dc5a:	e9c3 6702 	strd	r6, r7, [r3, #8]
	cc_data[chan].user_context = user_data;
   1dc5e:	2200      	movs	r2, #0
   1dc60:	605a      	str	r2, [r3, #4]
	if (key) {
   1dc62:	f1b8 0f00 	cmp.w	r8, #0
   1dc66:	d01c      	beq.n	1dca2 <compare_set.constprop.0.isra.0+0x12e>
   1dc68:	f3bf 8f5b 	dmb	ish
   1dc6c:	e855 3f00 	ldrex	r3, [r5]
   1dc70:	f043 0301 	orr.w	r3, r3, #1
   1dc74:	e845 3200 	strex	r2, r3, [r5]
   1dc78:	2a00      	cmp	r2, #0
   1dc7a:	d1f7      	bne.n	1dc6c <compare_set.constprop.0.isra.0+0xf8>
   1dc7c:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   1dc80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1dc84:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1dc88:	4b0b      	ldr	r3, [pc, #44]	; (1dcb8 <compare_set.constprop.0.isra.0+0x144>)
   1dc8a:	f3bf 8f5b 	dmb	ish
   1dc8e:	681b      	ldr	r3, [r3, #0]
   1dc90:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1dc94:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1dc96:	bf42      	ittt	mi
   1dc98:	4b09      	ldrmi	r3, [pc, #36]	; (1dcc0 <compare_set.constprop.0.isra.0+0x14c>)
   1dc9a:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   1dc9e:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1dca2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dca6:	bf00      	nop
   1dca8:	200036e4 	.word	0x200036e4
   1dcac:	40011000 	.word	0x40011000
   1dcb0:	00800001 	.word	0x00800001
   1dcb4:	20002290 	.word	0x20002290
   1dcb8:	200036e0 	.word	0x200036e0
   1dcbc:	0001da25 	.word	0x0001da25
   1dcc0:	e000e100 	.word	0xe000e100
   1dcc4:	007ffffd 	.word	0x007ffffd

0001dcc8 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
   1dcc8:	b570      	push	{r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
   1dcca:	4c19      	ldr	r4, [pc, #100]	; (1dd30 <sys_clock_driver_init+0x68>)
   1dccc:	4b19      	ldr	r3, [pc, #100]	; (1dd34 <sys_clock_driver_init+0x6c>)
   1dcce:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   1dcd2:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1dcd6:	4b18      	ldr	r3, [pc, #96]	; (1dd38 <sys_clock_driver_init+0x70>)
    p_reg->PRESCALER = val;
   1dcd8:	2500      	movs	r5, #0
   1dcda:	f04f 30ff 	mov.w	r0, #4294967295
   1dcde:	f04f 31ff 	mov.w	r1, #4294967295
   1dce2:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   1dce6:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1dcea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1dcee:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1dcf2:	4b12      	ldr	r3, [pc, #72]	; (1dd3c <sys_clock_driver_init+0x74>)
   1dcf4:	2602      	movs	r6, #2
   1dcf6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1dcfa:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1dcfe:	2101      	movs	r1, #1
   1dd00:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1dd04:	2011      	movs	r0, #17
   1dd06:	462a      	mov	r2, r5
   1dd08:	f7f7 f9be 	bl	15088 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1dd0c:	2011      	movs	r0, #17
   1dd0e:	f7f7 f98b 	bl	15028 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1dd12:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1dd14:	4a0a      	ldr	r2, [pc, #40]	; (1dd40 <sys_clock_driver_init+0x78>)
   1dd16:	60a3      	str	r3, [r4, #8]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1dd18:	2100      	movs	r1, #0
   1dd1a:	6023      	str	r3, [r4, #0]
   1dd1c:	4809      	ldr	r0, [pc, #36]	; (1dd44 <sys_clock_driver_init+0x7c>)
	int_mask = BIT_MASK(CHAN_COUNT);
   1dd1e:	6013      	str	r3, [r2, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   1dd20:	f7ff ff28 	bl	1db74 <compare_set.constprop.0.isra.0>

	z_nrf_clock_control_lf_on(mode);
   1dd24:	4630      	mov	r0, r6
   1dd26:	f7fe fd2b 	bl	1c780 <z_nrf_clock_control_lf_on>

	return 0;
}
   1dd2a:	4628      	mov	r0, r5
   1dd2c:	bd70      	pop	{r4, r5, r6, pc}
   1dd2e:	bf00      	nop
   1dd30:	40011000 	.word	0x40011000
   1dd34:	000f0003 	.word	0x000f0003
   1dd38:	20002290 	.word	0x20002290
   1dd3c:	e000e100 	.word	0xe000e100
   1dd40:	200036e4 	.word	0x200036e4
   1dd44:	007fffff 	.word	0x007fffff

0001dd48 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   1dd48:	1c43      	adds	r3, r0, #1
{
   1dd4a:	b510      	push	{r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   1dd4c:	d01d      	beq.n	1dd8a <sys_clock_set_timeout+0x42>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1dd4e:	2801      	cmp	r0, #1
   1dd50:	dd1d      	ble.n	1dd8e <sys_clock_set_timeout+0x46>
   1dd52:	4a10      	ldr	r2, [pc, #64]	; (1dd94 <sys_clock_set_timeout+0x4c>)
   1dd54:	4b10      	ldr	r3, [pc, #64]	; (1dd98 <sys_clock_set_timeout+0x50>)
   1dd56:	4290      	cmp	r0, r2
   1dd58:	bfd4      	ite	le
   1dd5a:	4604      	movle	r4, r0
   1dd5c:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1dd5e:	f7ff fe85 	bl	1da6c <z_nrf_rtc_timer_read>
   1dd62:	4a0e      	ldr	r2, [pc, #56]	; (1dd9c <sys_clock_set_timeout+0x54>)
   1dd64:	e9d2 3100 	ldrd	r3, r1, [r2]
   1dd68:	1ac0      	subs	r0, r0, r3
		cyc = 0;
   1dd6a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
	if (cyc > MAX_CYCLES) {
   1dd6e:	4a0a      	ldr	r2, [pc, #40]	; (1dd98 <sys_clock_set_timeout+0x50>)
		cyc = 0;
   1dd70:	bf28      	it	cs
   1dd72:	2400      	movcs	r4, #0
	cyc += unannounced;
   1dd74:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   1dd76:	4294      	cmp	r4, r2
   1dd78:	bf28      	it	cs
   1dd7a:	4614      	movcs	r4, r2
	uint64_t target_time = cyc + last_count;
   1dd7c:	18e0      	adds	r0, r4, r3
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1dd7e:	f141 0100 	adc.w	r1, r1, #0
}
   1dd82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   1dd86:	f7ff bef5 	b.w	1db74 <compare_set.constprop.0.isra.0>
		cyc = MAX_TICKS * CYC_PER_TICK;
   1dd8a:	4c03      	ldr	r4, [pc, #12]	; (1dd98 <sys_clock_set_timeout+0x50>)
   1dd8c:	e7e7      	b.n	1dd5e <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1dd8e:	2401      	movs	r4, #1
   1dd90:	e7e5      	b.n	1dd5e <sys_clock_set_timeout+0x16>
   1dd92:	bf00      	nop
   1dd94:	007ffffe 	.word	0x007ffffe
   1dd98:	007fffff 	.word	0x007fffff
   1dd9c:	200022a0 	.word	0x200022a0

0001dda0 <sys_clock_elapsed>:
{
   1dda0:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1dda2:	f7ff fe63 	bl	1da6c <z_nrf_rtc_timer_read>
   1dda6:	4b02      	ldr	r3, [pc, #8]	; (1ddb0 <sys_clock_elapsed+0x10>)
   1dda8:	681b      	ldr	r3, [r3, #0]
}
   1ddaa:	1ac0      	subs	r0, r0, r3
   1ddac:	bd08      	pop	{r3, pc}
   1ddae:	bf00      	nop
   1ddb0:	200022a0 	.word	0x200022a0

0001ddb4 <sys_clock_disable>:
{
   1ddb4:	b510      	push	{r4, lr}
   1ddb6:	4c08      	ldr	r4, [pc, #32]	; (1ddd8 <sys_clock_disable+0x24>)
   1ddb8:	2301      	movs	r3, #1
   1ddba:	6063      	str	r3, [r4, #4]
	irq_disable(RTC_IRQn);
   1ddbc:	2011      	movs	r0, #17
   1ddbe:	f7f7 f941 	bl	15044 <arch_irq_disable>
    p_reg->INTENCLR = mask;
   1ddc2:	4b06      	ldr	r3, [pc, #24]	; (1dddc <sys_clock_disable+0x28>)
   1ddc4:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   1ddc8:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
   1ddcc:	4b04      	ldr	r3, [pc, #16]	; (1dde0 <sys_clock_disable+0x2c>)
   1ddce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1ddd2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1ddd6:	bd10      	pop	{r4, pc}
   1ddd8:	40011000 	.word	0x40011000
   1dddc:	000f0003 	.word	0x000f0003
   1dde0:	e000e100 	.word	0xe000e100

0001dde4 <z_impl_gpio_pin_configure>:
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
   1dde4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
		(struct gpio_driver_data *)port->data;

	__ASSERT((flags & GPIO_INT_MASK) == 0,
   1dde8:	f012 6ffc 	tst.w	r2, #132120576	; 0x7e00000
	__unused const struct gpio_driver_config *const cfg =
   1ddec:	e9d0 4701 	ldrd	r4, r7, [r0, #4]
	struct gpio_driver_data *data =
   1ddf0:	6906      	ldr	r6, [r0, #16]
{
   1ddf2:	4613      	mov	r3, r2
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   1ddf4:	d00e      	beq.n	1de14 <z_impl_gpio_pin_configure+0x30>
   1ddf6:	4942      	ldr	r1, [pc, #264]	; (1df00 <z_impl_gpio_pin_configure+0x11c>)
   1ddf8:	4a42      	ldr	r2, [pc, #264]	; (1df04 <z_impl_gpio_pin_configure+0x120>)
   1ddfa:	4843      	ldr	r0, [pc, #268]	; (1df08 <z_impl_gpio_pin_configure+0x124>)
   1ddfc:	f44f 7335 	mov.w	r3, #724	; 0x2d4
   1de00:	f009 f9ec 	bl	271dc <assert_print>
   1de04:	4841      	ldr	r0, [pc, #260]	; (1df0c <z_impl_gpio_pin_configure+0x128>)
   1de06:	f009 f9e9 	bl	271dc <assert_print>
   1de0a:	f44f 7135 	mov.w	r1, #724	; 0x2d4
		 "Interrupt flags are not supported");

	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1de0e:	483d      	ldr	r0, [pc, #244]	; (1df04 <z_impl_gpio_pin_configure+0x120>)
   1de10:	f009 f9dd 	bl	271ce <assert_post_action>
   1de14:	f002 0230 	and.w	r2, r2, #48	; 0x30
   1de18:	2a30      	cmp	r2, #48	; 0x30
   1de1a:	d10c      	bne.n	1de36 <z_impl_gpio_pin_configure+0x52>
   1de1c:	493c      	ldr	r1, [pc, #240]	; (1df10 <z_impl_gpio_pin_configure+0x12c>)
   1de1e:	4a39      	ldr	r2, [pc, #228]	; (1df04 <z_impl_gpio_pin_configure+0x120>)
   1de20:	4839      	ldr	r0, [pc, #228]	; (1df08 <z_impl_gpio_pin_configure+0x124>)
   1de22:	f240 23d7 	movw	r3, #727	; 0x2d7
   1de26:	f009 f9d9 	bl	271dc <assert_print>
   1de2a:	483a      	ldr	r0, [pc, #232]	; (1df14 <z_impl_gpio_pin_configure+0x130>)
   1de2c:	f009 f9d6 	bl	271dc <assert_print>
   1de30:	f240 21d7 	movw	r1, #727	; 0x2d7
   1de34:	e7eb      	b.n	1de0e <z_impl_gpio_pin_configure+0x2a>
		 (GPIO_PULL_UP | GPIO_PULL_DOWN),
		 "Pull Up and Pull Down should not be enabled simultaneously");

	__ASSERT(!((flags & GPIO_INPUT) && !(flags & GPIO_OUTPUT) && (flags & GPIO_SINGLE_ENDED)),
   1de36:	4a38      	ldr	r2, [pc, #224]	; (1df18 <z_impl_gpio_pin_configure+0x134>)
   1de38:	4d38      	ldr	r5, [pc, #224]	; (1df1c <z_impl_gpio_pin_configure+0x138>)
   1de3a:	401a      	ands	r2, r3
   1de3c:	42aa      	cmp	r2, r5
   1de3e:	d10c      	bne.n	1de5a <z_impl_gpio_pin_configure+0x76>
   1de40:	4937      	ldr	r1, [pc, #220]	; (1df20 <z_impl_gpio_pin_configure+0x13c>)
   1de42:	4a30      	ldr	r2, [pc, #192]	; (1df04 <z_impl_gpio_pin_configure+0x120>)
   1de44:	4830      	ldr	r0, [pc, #192]	; (1df08 <z_impl_gpio_pin_configure+0x124>)
   1de46:	f240 23db 	movw	r3, #731	; 0x2db
   1de4a:	f009 f9c7 	bl	271dc <assert_print>
   1de4e:	4835      	ldr	r0, [pc, #212]	; (1df24 <z_impl_gpio_pin_configure+0x140>)
   1de50:	f009 f9c4 	bl	271dc <assert_print>
   1de54:	f240 21db 	movw	r1, #731	; 0x2db
   1de58:	e7d9      	b.n	1de0e <z_impl_gpio_pin_configure+0x2a>
		 "Input cannot be enabled for 'Open Drain', 'Open Source' modes without Output");

	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   1de5a:	f003 0206 	and.w	r2, r3, #6
   1de5e:	2a04      	cmp	r2, #4
   1de60:	d109      	bne.n	1de76 <z_impl_gpio_pin_configure+0x92>
   1de62:	4931      	ldr	r1, [pc, #196]	; (1df28 <z_impl_gpio_pin_configure+0x144>)
   1de64:	4a27      	ldr	r2, [pc, #156]	; (1df04 <z_impl_gpio_pin_configure+0x120>)
   1de66:	4828      	ldr	r0, [pc, #160]	; (1df08 <z_impl_gpio_pin_configure+0x124>)
   1de68:	f240 23de 	movw	r3, #734	; 0x2de
   1de6c:	f009 f9b6 	bl	271dc <assert_print>
   1de70:	f240 21de 	movw	r1, #734	; 0x2de
   1de74:	e7cb      	b.n	1de0e <z_impl_gpio_pin_configure+0x2a>
			(flags & GPIO_LINE_OPEN_DRAIN) == 0);

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
   1de76:	f413 2240 	ands.w	r2, r3, #786432	; 0xc0000
   1de7a:	d016      	beq.n	1deaa <z_impl_gpio_pin_configure+0xc6>
   1de7c:	039d      	lsls	r5, r3, #14
   1de7e:	d40c      	bmi.n	1de9a <z_impl_gpio_pin_configure+0xb6>
   1de80:	492a      	ldr	r1, [pc, #168]	; (1df2c <z_impl_gpio_pin_configure+0x148>)
   1de82:	4a20      	ldr	r2, [pc, #128]	; (1df04 <z_impl_gpio_pin_configure+0x120>)
   1de84:	4820      	ldr	r0, [pc, #128]	; (1df08 <z_impl_gpio_pin_configure+0x124>)
   1de86:	f240 23e1 	movw	r3, #737	; 0x2e1
   1de8a:	f009 f9a7 	bl	271dc <assert_print>
   1de8e:	4828      	ldr	r0, [pc, #160]	; (1df30 <z_impl_gpio_pin_configure+0x14c>)
   1de90:	f009 f9a4 	bl	271dc <assert_print>
   1de94:	f240 21e1 	movw	r1, #737	; 0x2e1
   1de98:	e7b9      	b.n	1de0e <z_impl_gpio_pin_configure+0x2a>
		 || (flags & GPIO_OUTPUT) != 0,
		 "Output needs to be enabled to be initialized low or high");

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   1de9a:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
   1de9e:	d018      	beq.n	1ded2 <z_impl_gpio_pin_configure+0xee>
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1dea0:	4a24      	ldr	r2, [pc, #144]	; (1df34 <z_impl_gpio_pin_configure+0x150>)
   1dea2:	439a      	bics	r2, r3
   1dea4:	d101      	bne.n	1deaa <z_impl_gpio_pin_configure+0xc6>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1dea6:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1deaa:	6824      	ldr	r4, [r4, #0]
   1deac:	2501      	movs	r5, #1
   1deae:	408d      	lsls	r5, r1
   1deb0:	4225      	tst	r5, r4
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1deb2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1deb6:	d119      	bne.n	1deec <z_impl_gpio_pin_configure+0x108>
   1deb8:	491f      	ldr	r1, [pc, #124]	; (1df38 <z_impl_gpio_pin_configure+0x154>)
   1deba:	4a12      	ldr	r2, [pc, #72]	; (1df04 <z_impl_gpio_pin_configure+0x120>)
   1debc:	4812      	ldr	r0, [pc, #72]	; (1df08 <z_impl_gpio_pin_configure+0x124>)
   1debe:	f240 23f1 	movw	r3, #753	; 0x2f1
   1dec2:	f009 f98b 	bl	271dc <assert_print>
   1dec6:	481d      	ldr	r0, [pc, #116]	; (1df3c <z_impl_gpio_pin_configure+0x158>)
   1dec8:	f009 f988 	bl	271dc <assert_print>
   1decc:	f240 21f1 	movw	r1, #753	; 0x2f1
   1ded0:	e79d      	b.n	1de0e <z_impl_gpio_pin_configure+0x2a>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   1ded2:	491b      	ldr	r1, [pc, #108]	; (1df40 <z_impl_gpio_pin_configure+0x15c>)
   1ded4:	4a0b      	ldr	r2, [pc, #44]	; (1df04 <z_impl_gpio_pin_configure+0x120>)
   1ded6:	480c      	ldr	r0, [pc, #48]	; (1df08 <z_impl_gpio_pin_configure+0x124>)
   1ded8:	f240 23e5 	movw	r3, #741	; 0x2e5
   1dedc:	f009 f97e 	bl	271dc <assert_print>
   1dee0:	4818      	ldr	r0, [pc, #96]	; (1df44 <z_impl_gpio_pin_configure+0x160>)
   1dee2:	f009 f97b 	bl	271dc <assert_print>
   1dee6:	f240 21e5 	movw	r1, #741	; 0x2e5
   1deea:	e790      	b.n	1de0e <z_impl_gpio_pin_configure+0x2a>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1deec:	6834      	ldr	r4, [r6, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1deee:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1def0:	bf4c      	ite	mi
   1def2:	432c      	orrmi	r4, r5
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1def4:	43ac      	bicpl	r4, r5
   1def6:	6034      	str	r4, [r6, #0]
	}

	return api->pin_configure(port, pin, flags);
   1def8:	683b      	ldr	r3, [r7, #0]
}
   1defa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_configure(port, pin, flags);
   1defe:	4718      	bx	r3
   1df00:	0002d8b1 	.word	0x0002d8b1
   1df04:	0002d880 	.word	0x0002d880
   1df08:	0002ae37 	.word	0x0002ae37
   1df0c:	0002d90e 	.word	0x0002d90e
   1df10:	0002d932 	.word	0x0002d932
   1df14:	0002d96b 	.word	0x0002d96b
   1df18:	00030002 	.word	0x00030002
   1df1c:	00010002 	.word	0x00010002
   1df20:	0002d9a8 	.word	0x0002d9a8
   1df24:	0002d9ef 	.word	0x0002d9ef
   1df28:	0002da3e 	.word	0x0002da3e
   1df2c:	0002da71 	.word	0x0002da71
   1df30:	0002dab7 	.word	0x0002dab7
   1df34:	00100001 	.word	0x00100001
   1df38:	0002db5f 	.word	0x0002db5f
   1df3c:	0002db9d 	.word	0x0002db9d
   1df40:	0002daf2 	.word	0x0002daf2
   1df44:	0002db33 	.word	0x0002db33

0001df48 <gpio_pin_set>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
			       int value)
{
   1df48:	b510      	push	{r4, lr}
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1df4a:	2301      	movs	r3, #1
   1df4c:	fa03 f101 	lsl.w	r1, r3, r1
   1df50:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
   1df52:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1df54:	681b      	ldr	r3, [r3, #0]
   1df56:	4219      	tst	r1, r3
   1df58:	d10e      	bne.n	1df78 <gpio_pin_set+0x30>
   1df5a:	490e      	ldr	r1, [pc, #56]	; (1df94 <gpio_pin_set+0x4c>)
   1df5c:	4a0e      	ldr	r2, [pc, #56]	; (1df98 <gpio_pin_set+0x50>)
   1df5e:	480f      	ldr	r0, [pc, #60]	; (1df9c <gpio_pin_set+0x54>)
   1df60:	f240 535c 	movw	r3, #1372	; 0x55c
   1df64:	f009 f93a 	bl	271dc <assert_print>
   1df68:	480d      	ldr	r0, [pc, #52]	; (1dfa0 <gpio_pin_set+0x58>)
   1df6a:	f009 f937 	bl	271dc <assert_print>
   1df6e:	480a      	ldr	r0, [pc, #40]	; (1df98 <gpio_pin_set+0x50>)
   1df70:	f240 515c 	movw	r1, #1372	; 0x55c
   1df74:	f009 f92b 	bl	271ce <assert_post_action>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1df78:	6823      	ldr	r3, [r4, #0]
   1df7a:	4219      	tst	r1, r3
   1df7c:	d003      	beq.n	1df86 <gpio_pin_set+0x3e>
	if (value != 0)	{
   1df7e:	b122      	cbz	r2, 1df8a <gpio_pin_set+0x42>
	return api->port_clear_bits_raw(port, pins);
   1df80:	6883      	ldr	r3, [r0, #8]
   1df82:	691b      	ldr	r3, [r3, #16]
   1df84:	e003      	b.n	1df8e <gpio_pin_set+0x46>
	if (value != 0)	{
   1df86:	2a00      	cmp	r2, #0
   1df88:	d0fa      	beq.n	1df80 <gpio_pin_set+0x38>
	return api->port_set_bits_raw(port, pins);
   1df8a:	6883      	ldr	r3, [r0, #8]
   1df8c:	68db      	ldr	r3, [r3, #12]
		value = (value != 0) ? 0 : 1;
	}

	return gpio_pin_set_raw(port, pin, value);
}
   1df8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
   1df92:	4718      	bx	r3
   1df94:	0002db5f 	.word	0x0002db5f
   1df98:	0002d880 	.word	0x0002d880
   1df9c:	0002ae37 	.word	0x0002ae37
   1dfa0:	0002db9d 	.word	0x0002db9d

0001dfa4 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   1dfa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dfa8:	4e15      	ldr	r6, [pc, #84]	; (1e000 <dk_set_leds_state.part.0+0x5c>)
   1dfaa:	b086      	sub	sp, #24
   1dfac:	4607      	mov	r7, r0
   1dfae:	4688      	mov	r8, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1dfb0:	2500      	movs	r5, #0
		int val, err;

		if (BIT(i) & leds_on_mask) {
   1dfb2:	fa27 f205 	lsr.w	r2, r7, r5
   1dfb6:	f012 0201 	ands.w	r2, r2, #1
   1dfba:	d117      	bne.n	1dfec <dk_set_leds_state.part.0+0x48>
			val = 1;
		} else if (BIT(i) & leds_off_mask) {
   1dfbc:	fa28 f305 	lsr.w	r3, r8, r5
   1dfc0:	07db      	lsls	r3, r3, #31
   1dfc2:	d515      	bpl.n	1dff0 <dk_set_leds_state.part.0+0x4c>
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
   1dfc4:	7931      	ldrb	r1, [r6, #4]
   1dfc6:	6830      	ldr	r0, [r6, #0]
   1dfc8:	f7ff ffbe 	bl	1df48 <gpio_pin_set>
		} else {
			continue;
		}

		err = gpio_pin_set_dt(&leds[i], val);
		if (err) {
   1dfcc:	4604      	mov	r4, r0
   1dfce:	b178      	cbz	r0, 1dff0 <dk_set_leds_state.part.0+0x4c>
			LOG_ERR("Cannot write LED gpio");
   1dfd0:	4b0c      	ldr	r3, [pc, #48]	; (1e004 <dk_set_leds_state.part.0+0x60>)
   1dfd2:	9305      	str	r3, [sp, #20]
   1dfd4:	480c      	ldr	r0, [pc, #48]	; (1e008 <dk_set_leds_state.part.0+0x64>)
   1dfd6:	2302      	movs	r3, #2
   1dfd8:	aa04      	add	r2, sp, #16
   1dfda:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1dfde:	9304      	str	r3, [sp, #16]
   1dfe0:	f00b faa8 	bl	29534 <z_log_msg_static_create.constprop.0>
			return err;
		}
	}

	return 0;
}
   1dfe4:	4620      	mov	r0, r4
   1dfe6:	b006      	add	sp, #24
   1dfe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			val = 1;
   1dfec:	2201      	movs	r2, #1
   1dfee:	e7e9      	b.n	1dfc4 <dk_set_leds_state.part.0+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1dff0:	3501      	adds	r5, #1
   1dff2:	2d04      	cmp	r5, #4
   1dff4:	f106 0608 	add.w	r6, r6, #8
   1dff8:	d1db      	bne.n	1dfb2 <dk_set_leds_state.part.0+0xe>
	return 0;
   1dffa:	2400      	movs	r4, #0
   1dffc:	e7f2      	b.n	1dfe4 <dk_set_leds_state.part.0+0x40>
   1dffe:	bf00      	nop
   1e000:	0002a71c 	.word	0x0002a71c
   1e004:	0002dbaf 	.word	0x0002dbaf
   1e008:	0002a028 	.word	0x0002a028

0001e00c <dk_leds_init>:
{
   1e00c:	b570      	push	{r4, r5, r6, lr}
   1e00e:	4c12      	ldr	r4, [pc, #72]	; (1e058 <dk_leds_init+0x4c>)
   1e010:	b086      	sub	sp, #24
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1e012:	2600      	movs	r6, #0
				  spec->dt_flags | extra_flags);
   1e014:	88e2      	ldrh	r2, [r4, #6]
	return gpio_pin_configure(spec->port,
   1e016:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   1e018:	7921      	ldrb	r1, [r4, #4]
	return gpio_pin_configure(spec->port,
   1e01a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   1e01e:	f7ff fee1 	bl	1dde4 <z_impl_gpio_pin_configure>
		if (err) {
   1e022:	4605      	mov	r5, r0
   1e024:	b950      	cbnz	r0, 1e03c <dk_leds_init+0x30>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1e026:	3601      	adds	r6, #1
   1e028:	2e04      	cmp	r6, #4
   1e02a:	f104 0408 	add.w	r4, r4, #8
   1e02e:	d1f1      	bne.n	1e014 <dk_leds_init+0x8>
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   1e030:	210f      	movs	r1, #15
}
   1e032:	b006      	add	sp, #24
   1e034:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e038:	f7ff bfb4 	b.w	1dfa4 <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   1e03c:	4b07      	ldr	r3, [pc, #28]	; (1e05c <dk_leds_init+0x50>)
   1e03e:	9305      	str	r3, [sp, #20]
   1e040:	4807      	ldr	r0, [pc, #28]	; (1e060 <dk_leds_init+0x54>)
   1e042:	2302      	movs	r3, #2
   1e044:	aa04      	add	r2, sp, #16
   1e046:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e04a:	9304      	str	r3, [sp, #16]
   1e04c:	f00b fa72 	bl	29534 <z_log_msg_static_create.constprop.0>
}
   1e050:	4628      	mov	r0, r5
   1e052:	b006      	add	sp, #24
   1e054:	bd70      	pop	{r4, r5, r6, pc}
   1e056:	bf00      	nop
   1e058:	0002a71c 	.word	0x0002a71c
   1e05c:	0002dbc5 	.word	0x0002dbc5
   1e060:	0002a028 	.word	0x0002a028

0001e064 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
   1e064:	b510      	push	{r4, lr}
	int err;

	if (led_idx >= ARRAY_SIZE(leds)) {
   1e066:	2803      	cmp	r0, #3
{
   1e068:	b086      	sub	sp, #24
   1e06a:	460a      	mov	r2, r1
	if (led_idx >= ARRAY_SIZE(leds)) {
   1e06c:	d90e      	bls.n	1e08c <dk_set_led+0x28>
		LOG_ERR("LED index out of the range");
   1e06e:	4b12      	ldr	r3, [pc, #72]	; (1e0b8 <dk_set_led+0x54>)
   1e070:	9305      	str	r3, [sp, #20]
   1e072:	4812      	ldr	r0, [pc, #72]	; (1e0bc <dk_set_led+0x58>)
   1e074:	2302      	movs	r3, #2
   1e076:	aa04      	add	r2, sp, #16
   1e078:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EINVAL;
   1e07c:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("LED index out of the range");
   1e080:	9304      	str	r3, [sp, #16]
   1e082:	f00b fa57 	bl	29534 <z_log_msg_static_create.constprop.0>
	err = gpio_pin_set_dt(&leds[led_idx], val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   1e086:	4620      	mov	r0, r4
   1e088:	b006      	add	sp, #24
   1e08a:	bd10      	pop	{r4, pc}
	return gpio_pin_set(spec->port, spec->pin, value);
   1e08c:	4b0c      	ldr	r3, [pc, #48]	; (1e0c0 <dk_set_led+0x5c>)
   1e08e:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   1e092:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
   1e096:	7909      	ldrb	r1, [r1, #4]
   1e098:	f7ff ff56 	bl	1df48 <gpio_pin_set>
	if (err) {
   1e09c:	4604      	mov	r4, r0
   1e09e:	2800      	cmp	r0, #0
   1e0a0:	d0f1      	beq.n	1e086 <dk_set_led+0x22>
		LOG_ERR("Cannot write LED gpio");
   1e0a2:	4b08      	ldr	r3, [pc, #32]	; (1e0c4 <dk_set_led+0x60>)
   1e0a4:	9305      	str	r3, [sp, #20]
   1e0a6:	4805      	ldr	r0, [pc, #20]	; (1e0bc <dk_set_led+0x58>)
   1e0a8:	2302      	movs	r3, #2
   1e0aa:	aa04      	add	r2, sp, #16
   1e0ac:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e0b0:	9304      	str	r3, [sp, #16]
   1e0b2:	f00b fa3f 	bl	29534 <z_log_msg_static_create.constprop.0>
   1e0b6:	e7e6      	b.n	1e086 <dk_set_led+0x22>
   1e0b8:	0002dbdf 	.word	0x0002dbdf
   1e0bc:	0002a028 	.word	0x0002a028
   1e0c0:	0002a71c 	.word	0x0002a71c
   1e0c4:	0002dbaf 	.word	0x0002dbaf

0001e0c8 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1e0c8:	4602      	mov	r2, r0
   1e0ca:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1e0cc:	4801      	ldr	r0, [pc, #4]	; (1e0d4 <multithreading_lock_acquire+0xc>)
   1e0ce:	f002 bc7b 	b.w	209c8 <z_impl_k_mutex_lock>
   1e0d2:	bf00      	nop
   1e0d4:	200009dc 	.word	0x200009dc

0001e0d8 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   1e0d8:	4801      	ldr	r0, [pc, #4]	; (1e0e0 <multithreading_lock_release+0x8>)
   1e0da:	f002 bd45 	b.w	20b68 <z_impl_k_mutex_unlock>
   1e0de:	bf00      	nop
   1e0e0:	200009dc 	.word	0x200009dc

0001e0e4 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1e0e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
   1e0e6:	f7f5 fe67 	bl	13db8 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1e0ea:	4b07      	ldr	r3, [pc, #28]	; (1e108 <k_sys_fatal_error_handler+0x24>)
   1e0ec:	9305      	str	r3, [sp, #20]
   1e0ee:	2302      	movs	r3, #2
   1e0f0:	9304      	str	r3, [sp, #16]
   1e0f2:	4806      	ldr	r0, [pc, #24]	; (1e10c <k_sys_fatal_error_handler+0x28>)
   1e0f4:	2300      	movs	r3, #0
   1e0f6:	aa04      	add	r2, sp, #16
   1e0f8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e0fc:	f7f5 ffc2 	bl	14084 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   1e100:	2000      	movs	r0, #0
   1e102:	f7f7 ff07 	bl	15f14 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1e106:	bf00      	nop
   1e108:	0002dc0e 	.word	0x0002dc0e
   1e10c:	0002a030 	.word	0x0002a030

0001e110 <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   1e110:	b598      	push	{r3, r4, r7, lr}
   1e112:	af00      	add	r7, sp, #0
	LOG_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   1e114:	466c      	mov	r4, sp
   1e116:	b08a      	sub	sp, #40	; 0x28
   1e118:	466a      	mov	r2, sp
   1e11a:	4b0c      	ldr	r3, [pc, #48]	; (1e14c <sdc_assertion_handler+0x3c>)
   1e11c:	61d1      	str	r1, [r2, #28]
   1e11e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e122:	f44f 7300 	mov.w	r3, #512	; 0x200
   1e126:	8413      	strh	r3, [r2, #32]
   1e128:	4b09      	ldr	r3, [pc, #36]	; (1e150 <sdc_assertion_handler+0x40>)
   1e12a:	f842 3f10 	str.w	r3, [r2, #16]!
   1e12e:	4809      	ldr	r0, [pc, #36]	; (1e154 <sdc_assertion_handler+0x44>)
   1e130:	2300      	movs	r3, #0
   1e132:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1e136:	f7f5 ffa5 	bl	14084 <z_impl_z_log_msg_static_create>
   1e13a:	46a5      	mov	sp, r4
	k_oops();
   1e13c:	4040      	eors	r0, r0
   1e13e:	f380 8811 	msr	BASEPRI, r0
   1e142:	f04f 0003 	mov.w	r0, #3
   1e146:	df02      	svc	2
}
   1e148:	46bd      	mov	sp, r7
   1e14a:	bd98      	pop	{r3, r4, r7, pc}
   1e14c:	0002dc2b 	.word	0x0002dc2b
   1e150:	01000004 	.word	0x01000004
   1e154:	0002a008 	.word	0x0002a008

0001e158 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   1e158:	b510      	push	{r4, lr}
   1e15a:	4603      	mov	r3, r0
   1e15c:	460a      	mov	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   1e15e:	4811      	ldr	r0, [pc, #68]	; (1e1a4 <rand_prio_low_vector_get_blocking+0x4c>)
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   1e160:	6881      	ldr	r1, [r0, #8]
   1e162:	680c      	ldr	r4, [r1, #0]
   1e164:	b964      	cbnz	r4, 1e180 <rand_prio_low_vector_get_blocking+0x28>
   1e166:	4910      	ldr	r1, [pc, #64]	; (1e1a8 <rand_prio_low_vector_get_blocking+0x50>)
   1e168:	4a10      	ldr	r2, [pc, #64]	; (1e1ac <rand_prio_low_vector_get_blocking+0x54>)
   1e16a:	4811      	ldr	r0, [pc, #68]	; (1e1b0 <rand_prio_low_vector_get_blocking+0x58>)
   1e16c:	234d      	movs	r3, #77	; 0x4d
   1e16e:	f009 f835 	bl	271dc <assert_print>
   1e172:	4810      	ldr	r0, [pc, #64]	; (1e1b4 <rand_prio_low_vector_get_blocking+0x5c>)
   1e174:	f009 f832 	bl	271dc <assert_print>
   1e178:	480c      	ldr	r0, [pc, #48]	; (1e1ac <rand_prio_low_vector_get_blocking+0x54>)
   1e17a:	214d      	movs	r1, #77	; 0x4d
	int err = entropy_get_entropy(entropy_source, p_buff, length);

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   1e17c:	f009 f827 	bl	271ce <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1e180:	4619      	mov	r1, r3
   1e182:	47a0      	blx	r4
   1e184:	b168      	cbz	r0, 1e1a2 <rand_prio_low_vector_get_blocking+0x4a>
   1e186:	490c      	ldr	r1, [pc, #48]	; (1e1b8 <rand_prio_low_vector_get_blocking+0x60>)
   1e188:	4a0c      	ldr	r2, [pc, #48]	; (1e1bc <rand_prio_low_vector_get_blocking+0x64>)
   1e18a:	4809      	ldr	r0, [pc, #36]	; (1e1b0 <rand_prio_low_vector_get_blocking+0x58>)
   1e18c:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
   1e190:	f009 f824 	bl	271dc <assert_print>
   1e194:	480a      	ldr	r0, [pc, #40]	; (1e1c0 <rand_prio_low_vector_get_blocking+0x68>)
   1e196:	f009 f821 	bl	271dc <assert_print>
   1e19a:	4808      	ldr	r0, [pc, #32]	; (1e1bc <rand_prio_low_vector_get_blocking+0x64>)
   1e19c:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
   1e1a0:	e7ec      	b.n	1e17c <rand_prio_low_vector_get_blocking+0x24>
	(void) err;
}
   1e1a2:	bd10      	pop	{r4, pc}
   1e1a4:	00029d08 	.word	0x00029d08
   1e1a8:	0002dc84 	.word	0x0002dc84
   1e1ac:	0002dc50 	.word	0x0002dc50
   1e1b0:	0002ae37 	.word	0x0002ae37
   1e1b4:	0002dca4 	.word	0x0002dca4
   1e1b8:	0002b300 	.word	0x0002b300
   1e1bc:	0002dcca 	.word	0x0002dcca
   1e1c0:	0002dd03 	.word	0x0002dd03

0001e1c4 <rand_prio_low_vector_get>:
{
   1e1c4:	b538      	push	{r3, r4, r5, lr}
   1e1c6:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   1e1c8:	480d      	ldr	r0, [pc, #52]	; (1e200 <rand_prio_low_vector_get+0x3c>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1e1ca:	6883      	ldr	r3, [r0, #8]
   1e1cc:	685d      	ldr	r5, [r3, #4]
   1e1ce:	460a      	mov	r2, r1
   1e1d0:	b975      	cbnz	r5, 1e1f0 <rand_prio_low_vector_get+0x2c>
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   1e1d2:	490c      	ldr	r1, [pc, #48]	; (1e204 <rand_prio_low_vector_get+0x40>)
   1e1d4:	4a0c      	ldr	r2, [pc, #48]	; (1e208 <rand_prio_low_vector_get+0x44>)
   1e1d6:	480d      	ldr	r0, [pc, #52]	; (1e20c <rand_prio_low_vector_get+0x48>)
   1e1d8:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
   1e1dc:	f008 fffe 	bl	271dc <assert_print>
   1e1e0:	480b      	ldr	r0, [pc, #44]	; (1e210 <rand_prio_low_vector_get+0x4c>)
   1e1e2:	f008 fffb 	bl	271dc <assert_print>
   1e1e6:	4808      	ldr	r0, [pc, #32]	; (1e208 <rand_prio_low_vector_get+0x44>)
   1e1e8:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
   1e1ec:	f008 ffef 	bl	271ce <assert_post_action>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1e1f0:	2300      	movs	r3, #0
   1e1f2:	4621      	mov	r1, r4
   1e1f4:	47a8      	blx	r5
   1e1f6:	2800      	cmp	r0, #0
   1e1f8:	dbeb      	blt.n	1e1d2 <rand_prio_low_vector_get+0xe>
}
   1e1fa:	b2c0      	uxtb	r0, r0
   1e1fc:	bd38      	pop	{r3, r4, r5, pc}
   1e1fe:	bf00      	nop
   1e200:	00029d08 	.word	0x00029d08
   1e204:	0002dd3d 	.word	0x0002dd3d
   1e208:	0002dcca 	.word	0x0002dcca
   1e20c:	0002ae37 	.word	0x0002ae37
   1e210:	0002dd46 	.word	0x0002dd46

0001e214 <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   1e214:	4901      	ldr	r1, [pc, #4]	; (1e21c <receive_signal_raise+0x8>)
   1e216:	4802      	ldr	r0, [pc, #8]	; (1e220 <receive_signal_raise+0xc>)
   1e218:	f00b bbaa 	b.w	29970 <k_work_submit_to_queue>
   1e21c:	200036ec 	.word	0x200036ec
   1e220:	20002b78 	.word	0x20002b78

0001e224 <rand_prio_high_vector_get>:
{
   1e224:	b538      	push	{r3, r4, r5, lr}
   1e226:	4604      	mov	r4, r0
	const struct entropy_driver_api *api =
   1e228:	480d      	ldr	r0, [pc, #52]	; (1e260 <rand_prio_high_vector_get+0x3c>)
	if (unlikely(!api->get_entropy_isr)) {
   1e22a:	6883      	ldr	r3, [r0, #8]
   1e22c:	685d      	ldr	r5, [r3, #4]
   1e22e:	460a      	mov	r2, r1
   1e230:	b975      	cbnz	r5, 1e250 <rand_prio_high_vector_get+0x2c>
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   1e232:	490c      	ldr	r1, [pc, #48]	; (1e264 <rand_prio_high_vector_get+0x40>)
   1e234:	4a0c      	ldr	r2, [pc, #48]	; (1e268 <rand_prio_high_vector_get+0x44>)
   1e236:	480d      	ldr	r0, [pc, #52]	; (1e26c <rand_prio_high_vector_get+0x48>)
   1e238:	f44f 73e5 	mov.w	r3, #458	; 0x1ca
   1e23c:	f008 ffce 	bl	271dc <assert_print>
   1e240:	480b      	ldr	r0, [pc, #44]	; (1e270 <rand_prio_high_vector_get+0x4c>)
   1e242:	f008 ffcb 	bl	271dc <assert_print>
   1e246:	4808      	ldr	r0, [pc, #32]	; (1e268 <rand_prio_high_vector_get+0x44>)
   1e248:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
   1e24c:	f008 ffbf 	bl	271ce <assert_post_action>
	return api->get_entropy_isr(dev, buffer, length, flags);
   1e250:	2300      	movs	r3, #0
   1e252:	4621      	mov	r1, r4
   1e254:	47a8      	blx	r5
   1e256:	2800      	cmp	r0, #0
   1e258:	dbeb      	blt.n	1e232 <rand_prio_high_vector_get+0xe>
}
   1e25a:	b2c0      	uxtb	r0, r0
   1e25c:	bd38      	pop	{r3, r4, r5, pc}
   1e25e:	bf00      	nop
   1e260:	00029d08 	.word	0x00029d08
   1e264:	0002dd3d 	.word	0x0002dd3d
   1e268:	0002dcca 	.word	0x0002dcca
   1e26c:	0002ae37 	.word	0x0002ae37
   1e270:	0002dd89 	.word	0x0002dd89

0001e274 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(void)
{
   1e274:	b5b0      	push	{r4, r5, r7, lr}
   1e276:	b082      	sub	sp, #8
	int err = 0;

	bt_hci_driver_register(&drv);
   1e278:	4839      	ldr	r0, [pc, #228]	; (1e360 <hci_driver_init+0xec>)
{
   1e27a:	af00      	add	r7, sp, #0
	bt_hci_driver_register(&drv);
   1e27c:	f7f9 f8e0 	bl	17440 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   1e280:	4838      	ldr	r0, [pc, #224]	; (1e364 <hci_driver_init+0xf0>)
   1e282:	f7e2 ff29 	bl	10d8 <sdc_init>
		err = sdc_support_adv();
   1e286:	f7e2 ffa1 	bl	11cc <sdc_support_adv>
		if (err) {
   1e28a:	b120      	cbz	r0, 1e296 <hci_driver_init+0x22>
			return -ENOTSUP;
   1e28c:	f06f 0085 	mvn.w	r0, #133	; 0x85
	if (err) {
		return err;
	}

	return err;
}
   1e290:	3708      	adds	r7, #8
   1e292:	46bd      	mov	sp, r7
   1e294:	bdb0      	pop	{r4, r5, r7, pc}
		err = sdc_support_peripheral();
   1e296:	f7e2 ffc9 	bl	122c <sdc_support_peripheral>
		if (err) {
   1e29a:	2800      	cmp	r0, #0
   1e29c:	d1f6      	bne.n	1e28c <hci_driver_init+0x18>
			err = sdc_support_dle_peripheral();
   1e29e:	f7e2 ffa5 	bl	11ec <sdc_support_dle_peripheral>
			if (err) {
   1e2a2:	2800      	cmp	r0, #0
   1e2a4:	d1f2      	bne.n	1e28c <hci_driver_init+0x18>
		err = sdc_support_le_2m_phy();
   1e2a6:	f7e2 ffb1 	bl	120c <sdc_support_le_2m_phy>
		if (err) {
   1e2aa:	2800      	cmp	r0, #0
   1e2ac:	d1ee      	bne.n	1e28c <hci_driver_init+0x18>
			err = sdc_support_phy_update_peripheral();
   1e2ae:	f7e2 ffcd 	bl	124c <sdc_support_phy_update_peripheral>
			if (err) {
   1e2b2:	4604      	mov	r4, r0
   1e2b4:	2800      	cmp	r0, #0
   1e2b6:	d1e9      	bne.n	1e28c <hci_driver_init+0x18>
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1e2b8:	2501      	movs	r5, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e2ba:	1d3a      	adds	r2, r7, #4
   1e2bc:	2102      	movs	r1, #2
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1e2be:	713d      	strb	r5, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e2c0:	f7e2 fe80 	bl	fc4 <sdc_cfg_set>
	if (required_memory < 0) {
   1e2c4:	2800      	cmp	r0, #0
   1e2c6:	dbe3      	blt.n	1e290 <hci_driver_init+0x1c>
	cfg.fal_size = CONFIG_BT_CTLR_FAL_SIZE;
   1e2c8:	2108      	movs	r1, #8
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e2ca:	1d3a      	adds	r2, r7, #4
   1e2cc:	4620      	mov	r0, r4
	cfg.fal_size = CONFIG_BT_CTLR_FAL_SIZE;
   1e2ce:	80b9      	strh	r1, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e2d0:	f7e2 fe78 	bl	fc4 <sdc_cfg_set>
	if (required_memory < 0) {
   1e2d4:	2800      	cmp	r0, #0
   1e2d6:	dbdb      	blt.n	1e290 <hci_driver_init+0x1c>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1e2d8:	4b23      	ldr	r3, [pc, #140]	; (1e368 <hci_driver_init+0xf4>)
   1e2da:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e2dc:	1d3a      	adds	r2, r7, #4
   1e2de:	2103      	movs	r1, #3
   1e2e0:	4620      	mov	r0, r4
   1e2e2:	f7e2 fe6f 	bl	fc4 <sdc_cfg_set>
	if (required_memory < 0) {
   1e2e6:	2800      	cmp	r0, #0
   1e2e8:	dbd2      	blt.n	1e290 <hci_driver_init+0x1c>
	cfg.event_length.event_length_us =
   1e2ea:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e2ee:	1d3a      	adds	r2, r7, #4
   1e2f0:	2104      	movs	r1, #4
   1e2f2:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
   1e2f4:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e2f6:	f7e2 fe65 	bl	fc4 <sdc_cfg_set>
	if (required_memory < 0) {
   1e2fa:	2800      	cmp	r0, #0
   1e2fc:	dbc8      	blt.n	1e290 <hci_driver_init+0x1c>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e2fe:	1d3a      	adds	r2, r7, #4
   1e300:	2105      	movs	r1, #5
   1e302:	4620      	mov	r0, r4
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1e304:	713d      	strb	r5, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e306:	f7e2 fe5d 	bl	fc4 <sdc_cfg_set>
	if (required_memory < 0) {
   1e30a:	2800      	cmp	r0, #0
   1e30c:	dbc0      	blt.n	1e290 <hci_driver_init+0x1c>
	cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1e30e:	231f      	movs	r3, #31
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e310:	1d3a      	adds	r2, r7, #4
   1e312:	2107      	movs	r1, #7
   1e314:	2000      	movs	r0, #0
	cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1e316:	80bb      	strh	r3, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1e318:	f7e2 fe54 	bl	fc4 <sdc_cfg_set>
	if (required_memory < 0) {
   1e31c:	2800      	cmp	r0, #0
   1e31e:	dbb7      	blt.n	1e290 <hci_driver_init+0x1c>
	if (required_memory > sizeof(sdc_mempool)) {
   1e320:	f240 73fa 	movw	r3, #2042	; 0x7fa
   1e324:	4298      	cmp	r0, r3
   1e326:	dd19      	ble.n	1e35c <hci_driver_init+0xe8>
		LOG_ERR("Allocated memory too low: %u < %u",
   1e328:	466c      	mov	r4, sp
   1e32a:	b088      	sub	sp, #32
   1e32c:	466a      	mov	r2, sp
   1e32e:	490f      	ldr	r1, [pc, #60]	; (1e36c <hci_driver_init+0xf8>)
   1e330:	61d0      	str	r0, [r2, #28]
   1e332:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1e336:	2304      	movs	r3, #4
   1e338:	f842 3f10 	str.w	r3, [r2, #16]!
   1e33c:	480c      	ldr	r0, [pc, #48]	; (1e370 <hci_driver_init+0xfc>)
   1e33e:	2300      	movs	r3, #0
   1e340:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1e344:	f7f5 fe9e 	bl	14084 <z_impl_z_log_msg_static_create>
   1e348:	46a5      	mov	sp, r4
		k_panic();
   1e34a:	4040      	eors	r0, r0
   1e34c:	f380 8811 	msr	BASEPRI, r0
   1e350:	f04f 0004 	mov.w	r0, #4
   1e354:	df02      	svc	2
		return -ENOMEM;
   1e356:	f06f 000b 	mvn.w	r0, #11
   1e35a:	e799      	b.n	1e290 <hci_driver_init+0x1c>
	return 0;
   1e35c:	2000      	movs	r0, #0
	if (err) {
   1e35e:	e797      	b.n	1e290 <hci_driver_init+0x1c>
   1e360:	0002a73c 	.word	0x0002a73c
   1e364:	0001e111 	.word	0x0001e111
   1e368:	02031b1b 	.word	0x02031b1b
   1e36c:	0002ddcd 	.word	0x0002ddcd
   1e370:	0002a008 	.word	0x0002a008

0001e374 <hci_driver_open>:
{
   1e374:	b590      	push	{r4, r7, lr}
   1e376:	b08d      	sub	sp, #52	; 0x34
	k_work_init(&receive_work, receive_work_handler);
   1e378:	492f      	ldr	r1, [pc, #188]	; (1e438 <hci_driver_open+0xc4>)
   1e37a:	4830      	ldr	r0, [pc, #192]	; (1e43c <hci_driver_open+0xc8>)
{
   1e37c:	af00      	add	r7, sp, #0
	k_work_init(&receive_work, receive_work_handler);
   1e37e:	f003 f82d 	bl	213dc <k_work_init>
		hci_ecdh_init();
   1e382:	f000 fedd 	bl	1f140 <hci_ecdh_init>
	sdc_build_revision_get(build_revision);
   1e386:	1d38      	adds	r0, r7, #4
   1e388:	f7e2 fe0e 	bl	fa8 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1e38c:	466c      	mov	r4, sp
   1e38e:	b088      	sub	sp, #32
   1e390:	466a      	mov	r2, sp
   1e392:	4b2b      	ldr	r3, [pc, #172]	; (1e440 <hci_driver_open+0xcc>)
   1e394:	6153      	str	r3, [r2, #20]
   1e396:	4b2b      	ldr	r3, [pc, #172]	; (1e444 <hci_driver_open+0xd0>)
   1e398:	6193      	str	r3, [r2, #24]
   1e39a:	f44f 7300 	mov.w	r3, #512	; 0x200
   1e39e:	8393      	strh	r3, [r2, #28]
   1e3a0:	4b29      	ldr	r3, [pc, #164]	; (1e448 <hci_driver_open+0xd4>)
   1e3a2:	f842 3f10 	str.w	r3, [r2, #16]!
   1e3a6:	4929      	ldr	r1, [pc, #164]	; (1e44c <hci_driver_open+0xd8>)
   1e3a8:	4829      	ldr	r0, [pc, #164]	; (1e450 <hci_driver_open+0xdc>)
   1e3aa:	1d3b      	adds	r3, r7, #4
   1e3ac:	f7f5 fe6a 	bl	14084 <z_impl_z_log_msg_static_create>
   1e3b0:	46a5      	mov	sp, r4
   1e3b2:	4828      	ldr	r0, [pc, #160]	; (1e454 <hci_driver_open+0xe0>)
   1e3b4:	f00b f9e6 	bl	29784 <z_device_is_ready>
	if (!device_is_ready(entropy_source)) {
   1e3b8:	4603      	mov	r3, r0
   1e3ba:	b980      	cbnz	r0, 1e3de <hci_driver_open+0x6a>
		LOG_ERR("Entropy source device not ready");
   1e3bc:	4a26      	ldr	r2, [pc, #152]	; (1e458 <hci_driver_open+0xe4>)
   1e3be:	62fa      	str	r2, [r7, #44]	; 0x2c
   1e3c0:	2202      	movs	r2, #2
   1e3c2:	62ba      	str	r2, [r7, #40]	; 0x28
   1e3c4:	4822      	ldr	r0, [pc, #136]	; (1e450 <hci_driver_open+0xdc>)
   1e3c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1e3ca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   1e3ce:	f06f 0412 	mvn.w	r4, #18
   1e3d2:	f7f5 fe57 	bl	14084 <z_impl_z_log_msg_static_create>
}
   1e3d6:	4620      	mov	r0, r4
   1e3d8:	3734      	adds	r7, #52	; 0x34
   1e3da:	46bd      	mov	sp, r7
   1e3dc:	bd90      	pop	{r4, r7, pc}
	sdc_rand_source_t rand_functions = {
   1e3de:	4a1f      	ldr	r2, [pc, #124]	; (1e45c <hci_driver_open+0xe8>)
   1e3e0:	ca07      	ldmia	r2, {r0, r1, r2}
   1e3e2:	f107 0318 	add.w	r3, r7, #24
   1e3e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1e3ea:	4618      	mov	r0, r3
   1e3ec:	f7e2 ff86 	bl	12fc <sdc_rand_source_register>
	if (err) {
   1e3f0:	b188      	cbz	r0, 1e416 <hci_driver_open+0xa2>
		LOG_ERR("Failed to register rand source (%d)", err);
   1e3f2:	b088      	sub	sp, #32
   1e3f4:	466a      	mov	r2, sp
   1e3f6:	4b1a      	ldr	r3, [pc, #104]	; (1e460 <hci_driver_open+0xec>)
   1e3f8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e3fc:	2303      	movs	r3, #3
   1e3fe:	f842 3f10 	str.w	r3, [r2, #16]!
   1e402:	4813      	ldr	r0, [pc, #76]	; (1e450 <hci_driver_open+0xdc>)
   1e404:	2300      	movs	r3, #0
   1e406:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e40a:	f7f5 fe3b 	bl	14084 <z_impl_z_log_msg_static_create>
   1e40e:	46a5      	mov	sp, r4
		return -EINVAL;
   1e410:	f06f 0415 	mvn.w	r4, #21
   1e414:	e7df      	b.n	1e3d6 <hci_driver_open+0x62>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1e416:	f04f 30ff 	mov.w	r0, #4294967295
   1e41a:	f04f 31ff 	mov.w	r1, #4294967295
   1e41e:	f7ff fe53 	bl	1e0c8 <multithreading_lock_acquire>
	if (err) {
   1e422:	4604      	mov	r4, r0
   1e424:	2800      	cmp	r0, #0
   1e426:	d1d6      	bne.n	1e3d6 <hci_driver_open+0x62>
	err = sdc_enable(receive_signal_raise, sdc_mempool);
   1e428:	490e      	ldr	r1, [pc, #56]	; (1e464 <hci_driver_open+0xf0>)
   1e42a:	480f      	ldr	r0, [pc, #60]	; (1e468 <hci_driver_open+0xf4>)
   1e42c:	f7e2 fe2a 	bl	1084 <sdc_enable>
	if (err) {
   1e430:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   1e432:	f7ff fe51 	bl	1e0d8 <multithreading_lock_release>
	return 0;
   1e436:	e7ce      	b.n	1e3d6 <hci_driver_open+0x62>
   1e438:	000295e9 	.word	0x000295e9
   1e43c:	200036ec 	.word	0x200036ec
   1e440:	0002c4d1 	.word	0x0002c4d1
   1e444:	0002ddef 	.word	0x0002ddef
   1e448:	01000003 	.word	0x01000003
   1e44c:	01401cc0 	.word	0x01401cc0
   1e450:	0002a008 	.word	0x0002a008
   1e454:	00029d08 	.word	0x00029d08
   1e458:	0002de16 	.word	0x0002de16
   1e45c:	0002a128 	.word	0x0002a128
   1e460:	0002de36 	.word	0x0002de36
   1e464:	200022b0 	.word	0x200022b0
   1e468:	0001e215 	.word	0x0001e215

0001e46c <hci_driver_receive_process>:
{
   1e46c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e46e:	b089      	sub	sp, #36	; 0x24
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1e470:	f04f 30ff 	mov.w	r0, #4294967295
{
   1e474:	af00      	add	r7, sp, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1e476:	f04f 31ff 	mov.w	r1, #4294967295
   1e47a:	f7ff fe25 	bl	1e0c8 <multithreading_lock_acquire>
	if (!errcode) {
   1e47e:	bb40      	cbnz	r0, 1e4d2 <hci_driver_receive_process+0x66>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   1e480:	4d33      	ldr	r5, [pc, #204]	; (1e550 <hci_driver_receive_process+0xe4>)
   1e482:	1df9      	adds	r1, r7, #7
   1e484:	4628      	mov	r0, r5
   1e486:	f000 fce5 	bl	1ee54 <hci_internal_msg_get>
   1e48a:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1e48c:	f7ff fe24 	bl	1e0d8 <multithreading_lock_release>
	if (errcode) {
   1e490:	b9fc      	cbnz	r4, 1e4d2 <hci_driver_receive_process+0x66>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   1e492:	79fe      	ldrb	r6, [r7, #7]
   1e494:	2e04      	cmp	r6, #4
   1e496:	d133      	bne.n	1e500 <hci_driver_receive_process+0x94>
	switch (hdr->evt) {
   1e498:	7828      	ldrb	r0, [r5, #0]
   1e49a:	283e      	cmp	r0, #62	; 0x3e
   1e49c:	d01c      	beq.n	1e4d8 <hci_driver_receive_process+0x6c>
   1e49e:	28ff      	cmp	r0, #255	; 0xff
   1e4a0:	d021      	beq.n	1e4e6 <hci_driver_receive_process+0x7a>
		switch (subevent) {
   1e4a2:	f04f 32ff 	mov.w	r2, #4294967295
   1e4a6:	f04f 33ff 	mov.w	r3, #4294967295
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1e4aa:	4621      	mov	r1, r4
   1e4ac:	f7f7 fe62 	bl	16174 <bt_buf_get_evt>
	if (!evt_buf) {
   1e4b0:	4606      	mov	r6, r0
   1e4b2:	b9d8      	cbnz	r0, 1e4ec <hci_driver_receive_process+0x80>
		if (discardable) {
   1e4b4:	b95c      	cbnz	r4, 1e4ce <hci_driver_receive_process+0x62>
		LOG_ERR("No event buffer available");
   1e4b6:	4b27      	ldr	r3, [pc, #156]	; (1e554 <hci_driver_receive_process+0xe8>)
   1e4b8:	61fb      	str	r3, [r7, #28]
   1e4ba:	2302      	movs	r3, #2
   1e4bc:	61bb      	str	r3, [r7, #24]
   1e4be:	4826      	ldr	r0, [pc, #152]	; (1e558 <hci_driver_receive_process+0xec>)
   1e4c0:	4623      	mov	r3, r4
   1e4c2:	f107 0218 	add.w	r2, r7, #24
   1e4c6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1e4ca:	f7f5 fddb 	bl	14084 <z_impl_z_log_msg_static_create>
		receive_signal_raise();
   1e4ce:	f7ff fea1 	bl	1e214 <receive_signal_raise>
}
   1e4d2:	3724      	adds	r7, #36	; 0x24
   1e4d4:	46bd      	mov	sp, r7
   1e4d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (me->subevent) {
   1e4d8:	78ab      	ldrb	r3, [r5, #2]
   1e4da:	2b02      	cmp	r3, #2
		switch (subevent) {
   1e4dc:	d1e1      	bne.n	1e4a2 <hci_driver_receive_process+0x36>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1e4de:	2200      	movs	r2, #0
   1e4e0:	2300      	movs	r3, #0
			return true;
   1e4e2:	2401      	movs	r4, #1
   1e4e4:	e7e1      	b.n	1e4aa <hci_driver_receive_process+0x3e>
		switch (subevent) {
   1e4e6:	78ab      	ldrb	r3, [r5, #2]
   1e4e8:	2b80      	cmp	r3, #128	; 0x80
   1e4ea:	e7f7      	b.n	1e4dc <hci_driver_receive_process+0x70>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1e4ec:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1e4ee:	4918      	ldr	r1, [pc, #96]	; (1e550 <hci_driver_receive_process+0xe4>)
   1e4f0:	3202      	adds	r2, #2
   1e4f2:	300c      	adds	r0, #12
   1e4f4:	f00a fca3 	bl	28e3e <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1e4f8:	4630      	mov	r0, r6
	bt_recv(data_buf);
   1e4fa:	f7f8 ff6d 	bl	173d8 <bt_recv>
   1e4fe:	e7e6      	b.n	1e4ce <hci_driver_receive_process+0x62>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   1e500:	2e02      	cmp	r6, #2
   1e502:	d114      	bne.n	1e52e <hci_driver_receive_process+0xc2>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1e504:	f04f 32ff 	mov.w	r2, #4294967295
   1e508:	f04f 33ff 	mov.w	r3, #4294967295
   1e50c:	2003      	movs	r0, #3
   1e50e:	f7f7 fde5 	bl	160dc <bt_buf_get_rx>
	if (!data_buf) {
   1e512:	4604      	mov	r4, r0
   1e514:	b918      	cbnz	r0, 1e51e <hci_driver_receive_process+0xb2>
		LOG_ERR("No data buffer available");
   1e516:	4b11      	ldr	r3, [pc, #68]	; (1e55c <hci_driver_receive_process+0xf0>)
   1e518:	e9c7 6306 	strd	r6, r3, [r7, #24]
   1e51c:	e7cf      	b.n	1e4be <hci_driver_receive_process+0x52>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1e51e:	886a      	ldrh	r2, [r5, #2]
   1e520:	4629      	mov	r1, r5
   1e522:	3204      	adds	r2, #4
   1e524:	300c      	adds	r0, #12
   1e526:	f00a fc8a 	bl	28e3e <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1e52a:	4620      	mov	r0, r4
   1e52c:	e7e5      	b.n	1e4fa <hci_driver_receive_process+0x8e>
		LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch", msg_type);
   1e52e:	466d      	mov	r5, sp
   1e530:	b088      	sub	sp, #32
   1e532:	466a      	mov	r2, sp
   1e534:	4b0a      	ldr	r3, [pc, #40]	; (1e560 <hci_driver_receive_process+0xf4>)
   1e536:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1e53a:	2303      	movs	r3, #3
   1e53c:	f842 3f10 	str.w	r3, [r2, #16]!
   1e540:	4805      	ldr	r0, [pc, #20]	; (1e558 <hci_driver_receive_process+0xec>)
   1e542:	4623      	mov	r3, r4
   1e544:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e548:	f7f5 fd9c 	bl	14084 <z_impl_z_log_msg_static_create>
   1e54c:	46ad      	mov	sp, r5
   1e54e:	e7be      	b.n	1e4ce <hci_driver_receive_process+0x62>
   1e550:	200043d6 	.word	0x200043d6
   1e554:	0002de5a 	.word	0x0002de5a
   1e558:	0002a008 	.word	0x0002a008
   1e55c:	0002de74 	.word	0x0002de74
   1e560:	0002de8d 	.word	0x0002de8d

0001e564 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   1e564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1e566:	4cc7      	ldr	r4, [pc, #796]	; (1e884 <hci_internal_cmd_put+0x320>)
   1e568:	8806      	ldrh	r6, [r0, #0]
   1e56a:	7823      	ldrb	r3, [r4, #0]
{
   1e56c:	4605      	mov	r5, r0
	if (cmd_complete_or_status.occurred) {
   1e56e:	2b00      	cmp	r3, #0
   1e570:	f040 8468 	bne.w	1ee44 <hci_internal_cmd_put+0x8e0>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1e574:	2304      	movs	r3, #4
   1e576:	f88d 3007 	strb.w	r3, [sp, #7]
	if (user_cmd_handler) {
   1e57a:	4bc3      	ldr	r3, [pc, #780]	; (1e888 <hci_internal_cmd_put+0x324>)
   1e57c:	681f      	ldr	r7, [r3, #0]
   1e57e:	b1bf      	cbz	r7, 1e5b0 <hci_internal_cmd_put+0x4c>
		status = user_cmd_handler(cmd_in,
   1e580:	f10d 0306 	add.w	r3, sp, #6
   1e584:	f10d 0207 	add.w	r2, sp, #7
   1e588:	1c61      	adds	r1, r4, #1
   1e58a:	47b8      	blx	r7
	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   1e58c:	2801      	cmp	r0, #1
   1e58e:	d00f      	beq.n	1e5b0 <hci_internal_cmd_put+0x4c>
	if (generate_command_status_event ||
   1e590:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1e594:	2b00      	cmp	r3, #0
   1e596:	f040 8431 	bne.w	1edfc <hci_internal_cmd_put+0x898>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   1e59a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   1e59e:	70a3      	strb	r3, [r4, #2]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1e5a0:	220e      	movs	r2, #14
	evt_data->ncmd = 1;
   1e5a2:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1e5a4:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   1e5a6:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1e5a8:	80a6      	strh	r6, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1e5aa:	71a0      	strb	r0, [r4, #6]
}
   1e5ac:	f000 bc2f 	b.w	1ee0e <hci_internal_cmd_put+0x8aa>
		switch (BT_OGF(opcode)) {
   1e5b0:	f5b6 5f10 	cmp.w	r6, #9216	; 0x2400
   1e5b4:	ea4f 2396 	mov.w	r3, r6, lsr #10
   1e5b8:	d20f      	bcs.n	1e5da <hci_internal_cmd_put+0x76>
   1e5ba:	2b00      	cmp	r3, #0
   1e5bc:	d079      	beq.n	1e6b2 <hci_internal_cmd_put+0x14e>
   1e5be:	3b01      	subs	r3, #1
   1e5c0:	2b07      	cmp	r3, #7
   1e5c2:	f200 8411 	bhi.w	1ede8 <hci_internal_cmd_put+0x884>
   1e5c6:	e8df f013 	tbh	[pc, r3, lsl #1]
   1e5ca:	000d      	.short	0x000d
   1e5cc:	003f040f 	.word	0x003f040f
   1e5d0:	040f008e 	.word	0x040f008e
   1e5d4:	040f040f 	.word	0x040f040f
   1e5d8:	0163      	.short	0x0163
   1e5da:	2b3f      	cmp	r3, #63	; 0x3f
   1e5dc:	f000 8339 	beq.w	1ec52 <hci_internal_cmd_put+0x6ee>
	switch (opcode)	{
   1e5e0:	2001      	movs	r0, #1
   1e5e2:	e391      	b.n	1ed08 <hci_internal_cmd_put+0x7a4>
	return ((uint16_t)src[1] << 8) | src[0];
   1e5e4:	4628      	mov	r0, r5
	switch (opcode)	{
   1e5e6:	f240 4206 	movw	r2, #1030	; 0x406
   1e5ea:	f930 3b03 	ldrsh.w	r3, [r0], #3
   1e5ee:	4293      	cmp	r3, r2
   1e5f0:	d010      	beq.n	1e614 <hci_internal_cmd_put+0xb0>
   1e5f2:	f240 421d 	movw	r2, #1053	; 0x41d
   1e5f6:	4293      	cmp	r3, r2
   1e5f8:	d023      	beq.n	1e642 <hci_internal_cmd_put+0xde>
   1e5fa:	2001      	movs	r0, #1
	switch (hci_opcode) {
   1e5fc:	f240 4306 	movw	r3, #1030	; 0x406
   1e600:	429e      	cmp	r6, r3
   1e602:	f040 83eb 	bne.w	1eddc <hci_internal_cmd_put+0x878>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1e606:	230f      	movs	r3, #15
   1e608:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1e60a:	2304      	movs	r3, #4
   1e60c:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   1e60e:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1e610:	2301      	movs	r3, #1
   1e612:	e033      	b.n	1e67c <hci_internal_cmd_put+0x118>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1e614:	f7ee ff0e 	bl	d434 <sdc_hci_cmd_lc_disconnect>
	switch (hci_opcode) {
   1e618:	f242 0332 	movw	r3, #8242	; 0x2032
   1e61c:	429e      	cmp	r6, r3
   1e61e:	f240 83d5 	bls.w	1edcc <hci_internal_cmd_put+0x868>
   1e622:	f242 0385 	movw	r3, #8325	; 0x2085
   1e626:	429e      	cmp	r6, r3
   1e628:	d840      	bhi.n	1e6ac <hci_internal_cmd_put+0x148>
   1e62a:	f242 036c 	movw	r3, #8300	; 0x206c
   1e62e:	429e      	cmp	r6, r3
   1e630:	f5a6 5301 	sub.w	r3, r6, #8256	; 0x2040
   1e634:	f200 83da 	bhi.w	1edec <hci_internal_cmd_put+0x888>
   1e638:	3b03      	subs	r3, #3
   1e63a:	b29b      	uxth	r3, r3
   1e63c:	2b01      	cmp	r3, #1
   1e63e:	d835      	bhi.n	1e6ac <hci_internal_cmd_put+0x148>
   1e640:	e7e1      	b.n	1e606 <hci_internal_cmd_put+0xa2>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   1e642:	f7ee fef9 	bl	d438 <sdc_hci_cmd_lc_read_remote_version_information>
	switch (hci_opcode) {
   1e646:	e7e7      	b.n	1e618 <hci_internal_cmd_put+0xb4>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1e648:	4628      	mov	r0, r5
	switch (opcode)	{
   1e64a:	f640 4263 	movw	r2, #3171	; 0xc63
   1e64e:	f930 3b03 	ldrsh.w	r3, [r0], #3
   1e652:	4293      	cmp	r3, r2
   1e654:	d03b      	beq.n	1e6ce <hci_internal_cmd_put+0x16a>
   1e656:	dc16      	bgt.n	1e686 <hci_internal_cmd_put+0x122>
   1e658:	f640 4203 	movw	r2, #3075	; 0xc03
   1e65c:	4293      	cmp	r3, r2
   1e65e:	d02a      	beq.n	1e6b6 <hci_internal_cmd_put+0x152>
   1e660:	f640 422d 	movw	r2, #3117	; 0xc2d
   1e664:	4293      	cmp	r3, r2
   1e666:	d029      	beq.n	1e6bc <hci_internal_cmd_put+0x158>
   1e668:	f640 4201 	movw	r2, #3073	; 0xc01
   1e66c:	4293      	cmp	r3, r2
   1e66e:	d01b      	beq.n	1e6a8 <hci_internal_cmd_put+0x144>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1e670:	230f      	movs	r3, #15
   1e672:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1e674:	2304      	movs	r3, #4
   1e676:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   1e678:	2301      	movs	r3, #1
   1e67a:	70e3      	strb	r3, [r4, #3]
	evt_data->ncmd = 1;
   1e67c:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1e67e:	f8a4 6005 	strh.w	r6, [r4, #5]
		cmd_complete_or_status.raw_event[0] == BT_HCI_EVT_CMD_COMPLETE) {
		/* SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
		 * will generate command complete at a later time (unless unsupported)
		 */

		cmd_complete_or_status.occurred = false;
   1e682:	7023      	strb	r3, [r4, #0]
   1e684:	e0d5      	b.n	1e832 <hci_internal_cmd_put+0x2ce>
	switch (opcode)	{
   1e686:	f640 427b 	movw	r2, #3195	; 0xc7b
   1e68a:	4293      	cmp	r3, r2
   1e68c:	d022      	beq.n	1e6d4 <hci_internal_cmd_put+0x170>
   1e68e:	f640 427c 	movw	r2, #3196	; 0xc7c
   1e692:	4293      	cmp	r3, r2
   1e694:	d1ec      	bne.n	1e670 <hci_internal_cmd_put+0x10c>
		*param_length_out +=
   1e696:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1e69a:	497c      	ldr	r1, [pc, #496]	; (1e88c <hci_internal_cmd_put+0x328>)
		*param_length_out +=
   1e69c:	3302      	adds	r3, #2
   1e69e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1e6a2:	f7ee fe55 	bl	d350 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
	if (generate_command_status_event ||
   1e6a6:	e001      	b.n	1e6ac <hci_internal_cmd_put+0x148>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1e6a8:	f7ee fe48 	bl	d33c <sdc_hci_cmd_cb_set_event_mask>
	if (generate_command_status_event ||
   1e6ac:	2801      	cmp	r0, #1
   1e6ae:	f47f af74 	bne.w	1e59a <hci_internal_cmd_put+0x36>
	switch (hci_opcode) {
   1e6b2:	2001      	movs	r0, #1
   1e6b4:	e3a2      	b.n	1edfc <hci_internal_cmd_put+0x898>
		return sdc_hci_cmd_cb_reset();
   1e6b6:	f7e2 ff21 	bl	14fc <sdc_hci_cmd_cb_reset>
	if (generate_command_status_event ||
   1e6ba:	e7f7      	b.n	1e6ac <hci_internal_cmd_put+0x148>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   1e6bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1e6c0:	4972      	ldr	r1, [pc, #456]	; (1e88c <hci_internal_cmd_put+0x328>)
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   1e6c2:	3303      	adds	r3, #3
   1e6c4:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1e6c8:	f7ee fe36 	bl	d338 <sdc_hci_cmd_cb_read_transmit_power_level>
	if (generate_command_status_event ||
   1e6cc:	e7ee      	b.n	1e6ac <hci_internal_cmd_put+0x148>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   1e6ce:	f7ee fe3a 	bl	d346 <sdc_hci_cmd_cb_set_event_mask_page_2>
	if (generate_command_status_event ||
   1e6d2:	e7eb      	b.n	1e6ac <hci_internal_cmd_put+0x148>
		*param_length_out +=
   1e6d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1e6d8:	496c      	ldr	r1, [pc, #432]	; (1e88c <hci_internal_cmd_put+0x328>)
		*param_length_out +=
   1e6da:	3304      	adds	r3, #4
   1e6dc:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1e6e0:	f7ee fe28 	bl	d334 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
	if (generate_command_status_event ||
   1e6e4:	e7e2      	b.n	1e6ac <hci_internal_cmd_put+0x148>
	switch (opcode)	{
   1e6e6:	882b      	ldrh	r3, [r5, #0]
   1e6e8:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   1e6ec:	3b01      	subs	r3, #1
   1e6ee:	2b08      	cmp	r3, #8
   1e6f0:	d8be      	bhi.n	1e670 <hci_internal_cmd_put+0x10c>
   1e6f2:	a201      	add	r2, pc, #4	; (adr r2, 1e6f8 <hci_internal_cmd_put+0x194>)
   1e6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e6f8:	0001e71d 	.word	0x0001e71d
   1e6fc:	0001e72f 	.word	0x0001e72f
   1e700:	0001e839 	.word	0x0001e839
   1e704:	0001e671 	.word	0x0001e671
   1e708:	0001e671 	.word	0x0001e671
   1e70c:	0001e671 	.word	0x0001e671
   1e710:	0001e671 	.word	0x0001e671
   1e714:	0001e671 	.word	0x0001e671
   1e718:	0001e871 	.word	0x0001e871
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   1e71c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1e720:	485a      	ldr	r0, [pc, #360]	; (1e88c <hci_internal_cmd_put+0x328>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   1e722:	3308      	adds	r3, #8
   1e724:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1e728:	f7ee fe45 	bl	d3b6 <sdc_hci_cmd_ip_read_local_version_information>
	if (generate_command_status_event ||
   1e72c:	e7be      	b.n	1e6ac <hci_internal_cmd_put+0x148>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1e72e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1e732:	4d56      	ldr	r5, [pc, #344]	; (1e88c <hci_internal_cmd_put+0x328>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1e734:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1e736:	2230      	movs	r2, #48	; 0x30
   1e738:	2100      	movs	r1, #0
   1e73a:	4628      	mov	r0, r5
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1e73c:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1e740:	f009 f97f 	bl	27a42 <memset>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   1e744:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   1e748:	70a3      	strb	r3, [r4, #2]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1e74a:	2300      	movs	r3, #0
   1e74c:	71a3      	strb	r3, [r4, #6]
	cmds->hci_disconnect = 1;
   1e74e:	79e3      	ldrb	r3, [r4, #7]
	evt_data->opcode = hci_opcode;
   1e750:	80a6      	strh	r6, [r4, #4]
	cmds->hci_disconnect = 1;
   1e752:	f043 0320 	orr.w	r3, r3, #32
   1e756:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   1e758:	7a63      	ldrb	r3, [r4, #9]
   1e75a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1e75e:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   1e760:	7b23      	ldrb	r3, [r4, #12]
   1e762:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1e766:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   1e768:	7c63      	ldrb	r3, [r4, #17]
   1e76a:	f043 0304 	orr.w	r3, r3, #4
   1e76e:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   1e770:	7d63      	ldrb	r3, [r4, #21]
   1e772:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   1e776:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1e77a:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   1e77c:	7da3      	ldrb	r3, [r4, #22]
   1e77e:	f043 0302 	orr.w	r3, r3, #2
   1e782:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   1e784:	7f63      	ldrb	r3, [r4, #29]
   1e786:	f043 0304 	orr.w	r3, r3, #4
   1e78a:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   1e78c:	f894 3020 	ldrb.w	r3, [r4, #32]
   1e790:	f063 0308 	orn	r3, r3, #8
   1e794:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_response_data = 1;
   1e798:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   1e79c:	f063 033c 	orn	r3, r3, #60	; 0x3c
   1e7a0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   1e7a4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   1e7a8:	f063 030c 	orn	r3, r3, #12
   1e7ac:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_long_term_key_request_reply = 1;
   1e7b0:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1e7b4:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
   1e7b8:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
   1e7bc:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   1e7c0:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1e7c4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1e7c8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   1e7cc:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   1e7d0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1e7d4:	220e      	movs	r2, #14
   1e7d6:	7062      	strb	r2, [r4, #1]
	cmds->hci_le_set_data_length = 1;
   1e7d8:	f063 033f 	orn	r3, r3, #63	; 0x3f
	evt_data->ncmd = 1;
   1e7dc:	2201      	movs	r2, #1
   1e7de:	70e2      	strb	r2, [r4, #3]
	cmds->hci_le_set_data_length = 1;
   1e7e0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   1e7e4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1e7e8:	f023 0307 	bic.w	r3, r3, #7
   1e7ec:	f043 0307 	orr.w	r3, r3, #7
   1e7f0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_read_maximum_data_length = 1;
   1e7f4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1e7f8:	f063 0307 	orn	r3, r3, #7
   1e7fc:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   1e800:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   1e804:	4313      	orrs	r3, r2
   1e806:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1e80a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1e80e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1e812:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_generate_dhkey_v2 = 1;
   1e816:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   1e81a:	f043 0304 	orr.w	r3, r3, #4
   1e81e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	cmds->hci_le_set_data_related_address_changes = 1;
   1e822:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   1e826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1e82a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	cmd_complete_or_status.occurred = true;
   1e82e:	f805 2c07 	strb.w	r2, [r5, #-7]
	}

	return 0;
   1e832:	2000      	movs	r0, #0
}
   1e834:	b003      	add	sp, #12
   1e836:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1e838:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1e83c:	4d13      	ldr	r5, [pc, #76]	; (1e88c <hci_internal_cmd_put+0x328>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1e83e:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   1e840:	2208      	movs	r2, #8
   1e842:	2100      	movs	r1, #0
   1e844:	4628      	mov	r0, r5
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1e846:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1e84a:	f009 f8fa 	bl	27a42 <memset>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   1e84e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   1e852:	70a3      	strb	r3, [r4, #2]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1e854:	2300      	movs	r3, #0
   1e856:	71a3      	strb	r3, [r4, #6]
	features->bdedr_not_supported = 1;
   1e858:	7ae3      	ldrb	r3, [r4, #11]
	evt_data->opcode = hci_opcode;
   1e85a:	80a6      	strh	r6, [r4, #4]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1e85c:	220e      	movs	r2, #14
	features->bdedr_not_supported = 1;
   1e85e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1e862:	7062      	strb	r2, [r4, #1]
	features->bdedr_not_supported = 1;
   1e864:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	evt_data->ncmd = 1;
   1e868:	2201      	movs	r2, #1
   1e86a:	70e2      	strb	r2, [r4, #3]
	features->bdedr_not_supported = 1;
   1e86c:	72e3      	strb	r3, [r4, #11]
   1e86e:	e7de      	b.n	1e82e <hci_internal_cmd_put+0x2ca>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1e870:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1e874:	4805      	ldr	r0, [pc, #20]	; (1e88c <hci_internal_cmd_put+0x328>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1e876:	3306      	adds	r3, #6
   1e878:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1e87c:	f7ee fd99 	bl	d3b2 <sdc_hci_cmd_ip_read_bd_addr>
	if (generate_command_status_event ||
   1e880:	e714      	b.n	1e6ac <hci_internal_cmd_put+0x148>
   1e882:	bf00      	nop
   1e884:	2000441c 	.word	0x2000441c
   1e888:	200036fc 	.word	0x200036fc
   1e88c:	20004423 	.word	0x20004423
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1e890:	4628      	mov	r0, r5
	switch (opcode)	{
   1e892:	f242 014b 	movw	r1, #8267	; 0x204b
   1e896:	f830 3b03 	ldrh.w	r3, [r0], #3
   1e89a:	b21a      	sxth	r2, r3
   1e89c:	428a      	cmp	r2, r1
   1e89e:	f300 80bf 	bgt.w	1ea20 <hci_internal_cmd_put+0x4bc>
   1e8a2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1e8a6:	f242 0232 	movw	r2, #8242	; 0x2032
   1e8aa:	dc1a      	bgt.n	1e8e2 <hci_internal_cmd_put+0x37e>
	switch (hci_opcode) {
   1e8ac:	4296      	cmp	r6, r2
   1e8ae:	f000 80c4 	beq.w	1ea3a <hci_internal_cmd_put+0x4d6>
   1e8b2:	f200 82bf 	bhi.w	1ee34 <hci_internal_cmd_put+0x8d0>
   1e8b6:	f242 0326 	movw	r3, #8230	; 0x2026
   1e8ba:	429e      	cmp	r6, r3
   1e8bc:	f63f aef9 	bhi.w	1e6b2 <hci_internal_cmd_put+0x14e>
   1e8c0:	2001      	movs	r0, #1
   1e8c2:	f242 030c 	movw	r3, #8204	; 0x200c
   1e8c6:	429e      	cmp	r6, r3
   1e8c8:	f67f ae98 	bls.w	1e5fc <hci_internal_cmd_put+0x98>
   1e8cc:	f5a6 5300 	sub.w	r3, r6, #8192	; 0x2000
   1e8d0:	4ad9      	ldr	r2, [pc, #868]	; (1ec38 <hci_internal_cmd_put+0x6d4>)
   1e8d2:	3b0d      	subs	r3, #13
   1e8d4:	b29b      	uxth	r3, r3
   1e8d6:	fa22 f303 	lsr.w	r3, r2, r3
   1e8da:	07db      	lsls	r3, r3, #31
   1e8dc:	f57f aee6 	bpl.w	1e6ac <hci_internal_cmd_put+0x148>
   1e8e0:	e691      	b.n	1e606 <hci_internal_cmd_put+0xa2>
	switch (opcode)	{
   1e8e2:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   1e8e6:	3b01      	subs	r3, #1
   1e8e8:	2b4a      	cmp	r3, #74	; 0x4a
   1e8ea:	d8df      	bhi.n	1e8ac <hci_internal_cmd_put+0x348>
   1e8ec:	a101      	add	r1, pc, #4	; (adr r1, 1e8f4 <hci_internal_cmd_put+0x390>)
   1e8ee:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1e8f2:	bf00      	nop
   1e8f4:	0001ea53 	.word	0x0001ea53
   1e8f8:	0001ea6d 	.word	0x0001ea6d
   1e8fc:	0001ea7f 	.word	0x0001ea7f
   1e900:	0001e8ad 	.word	0x0001e8ad
   1e904:	0001eae5 	.word	0x0001eae5
   1e908:	0001eaeb 	.word	0x0001eaeb
   1e90c:	0001eaf1 	.word	0x0001eaf1
   1e910:	0001eb03 	.word	0x0001eb03
   1e914:	0001eb09 	.word	0x0001eb09
   1e918:	0001eb0f 	.word	0x0001eb0f
   1e91c:	0001e8ad 	.word	0x0001e8ad
   1e920:	0001e8ad 	.word	0x0001e8ad
   1e924:	0001e8ad 	.word	0x0001e8ad
   1e928:	0001e8ad 	.word	0x0001e8ad
   1e92c:	0001eb1b 	.word	0x0001eb1b
   1e930:	0001eb2d 	.word	0x0001eb2d
   1e934:	0001eb33 	.word	0x0001eb33
   1e938:	0001eb39 	.word	0x0001eb39
   1e93c:	0001e8ad 	.word	0x0001e8ad
   1e940:	0001e8ad 	.word	0x0001e8ad
   1e944:	0001eb3f 	.word	0x0001eb3f
   1e948:	0001eb51 	.word	0x0001eb51
   1e94c:	0001eb57 	.word	0x0001eb57
   1e950:	0001eb69 	.word	0x0001eb69
   1e954:	0001e8ad 	.word	0x0001e8ad
   1e958:	0001eb7b 	.word	0x0001eb7b
   1e95c:	0001eb8d 	.word	0x0001eb8d
   1e960:	0001eb9f 	.word	0x0001eb9f
   1e964:	0001e8ad 	.word	0x0001e8ad
   1e968:	0001e8ad 	.word	0x0001e8ad
   1e96c:	0001e8ad 	.word	0x0001e8ad
   1e970:	0001e8ad 	.word	0x0001e8ad
   1e974:	0001e8ad 	.word	0x0001e8ad
   1e978:	0001ebcb 	.word	0x0001ebcb
   1e97c:	0001ebdd 	.word	0x0001ebdd
   1e980:	0001ebef 	.word	0x0001ebef
   1e984:	0001ebf5 	.word	0x0001ebf5
   1e988:	0001ebfb 	.word	0x0001ebfb
   1e98c:	0001e8ad 	.word	0x0001e8ad
   1e990:	0001e8ad 	.word	0x0001e8ad
   1e994:	0001e8ad 	.word	0x0001e8ad
   1e998:	0001e8ad 	.word	0x0001e8ad
   1e99c:	0001e8ad 	.word	0x0001e8ad
   1e9a0:	0001e8ad 	.word	0x0001e8ad
   1e9a4:	0001e8ad 	.word	0x0001e8ad
   1e9a8:	0001e8ad 	.word	0x0001e8ad
   1e9ac:	0001ec07 	.word	0x0001ec07
   1e9b0:	0001ec19 	.word	0x0001ec19
   1e9b4:	0001ec2b 	.word	0x0001ec2b
   1e9b8:	0001ec31 	.word	0x0001ec31
   1e9bc:	0001e8ad 	.word	0x0001e8ad
   1e9c0:	0001e8ad 	.word	0x0001e8ad
   1e9c4:	0001e8ad 	.word	0x0001e8ad
   1e9c8:	0001e8ad 	.word	0x0001e8ad
   1e9cc:	0001e8ad 	.word	0x0001e8ad
   1e9d0:	0001e8ad 	.word	0x0001e8ad
   1e9d4:	0001e8ad 	.word	0x0001e8ad
   1e9d8:	0001e8ad 	.word	0x0001e8ad
   1e9dc:	0001e8ad 	.word	0x0001e8ad
   1e9e0:	0001e8ad 	.word	0x0001e8ad
   1e9e4:	0001e8ad 	.word	0x0001e8ad
   1e9e8:	0001e8ad 	.word	0x0001e8ad
   1e9ec:	0001e8ad 	.word	0x0001e8ad
   1e9f0:	0001e8ad 	.word	0x0001e8ad
   1e9f4:	0001e8ad 	.word	0x0001e8ad
   1e9f8:	0001e8ad 	.word	0x0001e8ad
   1e9fc:	0001e8ad 	.word	0x0001e8ad
   1ea00:	0001e8ad 	.word	0x0001e8ad
   1ea04:	0001e8ad 	.word	0x0001e8ad
   1ea08:	0001e8ad 	.word	0x0001e8ad
   1ea0c:	0001e8ad 	.word	0x0001e8ad
   1ea10:	0001e8ad 	.word	0x0001e8ad
   1ea14:	0001e8ad 	.word	0x0001e8ad
   1ea18:	0001e8ad 	.word	0x0001e8ad
   1ea1c:	0001ec41 	.word	0x0001ec41
   1ea20:	f242 035e 	movw	r3, #8286	; 0x205e
   1ea24:	429a      	cmp	r2, r3
   1ea26:	f000 80eb 	beq.w	1ec00 <hci_internal_cmd_put+0x69c>
   1ea2a:	f242 037c 	movw	r3, #8316	; 0x207c
   1ea2e:	429a      	cmp	r2, r3
   1ea30:	d070      	beq.n	1eb14 <hci_internal_cmd_put+0x5b0>
	switch (hci_opcode) {
   1ea32:	f242 0332 	movw	r3, #8242	; 0x2032
   1ea36:	429e      	cmp	r6, r3
   1ea38:	e739      	b.n	1e8ae <hci_internal_cmd_put+0x34a>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1ea3a:	230f      	movs	r3, #15
   1ea3c:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1ea3e:	2304      	movs	r3, #4
   1ea40:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   1ea42:	2301      	movs	r3, #1
   1ea44:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1ea46:	2232      	movs	r2, #50	; 0x32
   1ea48:	7162      	strb	r2, [r4, #5]
   1ea4a:	2220      	movs	r2, #32
	evt_data->ncmd = 1;
   1ea4c:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1ea4e:	71a2      	strb	r2, [r4, #6]
	cmd_complete_or_status.occurred = true;
   1ea50:	e617      	b.n	1e682 <hci_internal_cmd_put+0x11e>
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1ea52:	f7ee fce2 	bl	d41a <sdc_hci_cmd_le_set_event_mask>
	switch (hci_opcode) {
   1ea56:	f242 0332 	movw	r3, #8242	; 0x2032
   1ea5a:	429e      	cmp	r6, r3
   1ea5c:	f47f addc 	bne.w	1e618 <hci_internal_cmd_put+0xb4>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1ea60:	230f      	movs	r3, #15
   1ea62:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1ea64:	2304      	movs	r3, #4
   1ea66:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   1ea68:	70e0      	strb	r0, [r4, #3]
   1ea6a:	e0ac      	b.n	1ebc6 <hci_internal_cmd_put+0x662>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1ea6c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1ea70:	4872      	ldr	r0, [pc, #456]	; (1ec3c <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1ea72:	3303      	adds	r3, #3
   1ea74:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1ea78:	f7ee fcb1 	bl	d3de <sdc_hci_cmd_le_read_buffer_size>
   1ea7c:	e7eb      	b.n	1ea56 <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1ea7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1ea82:	4d6e      	ldr	r5, [pc, #440]	; (1ec3c <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1ea84:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   1ea86:	2208      	movs	r2, #8
   1ea88:	2100      	movs	r1, #0
   1ea8a:	4628      	mov	r0, r5
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1ea8c:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1ea90:	f008 ffd7 	bl	27a42 <memset>
	features->params.le_encryption = 1;
   1ea94:	79e3      	ldrb	r3, [r4, #7]
   1ea96:	f023 033d 	bic.w	r3, r3, #61	; 0x3d
   1ea9a:	f043 033d 	orr.w	r3, r3, #61	; 0x3d
   1ea9e:	71e3      	strb	r3, [r4, #7]
	features->params.le_2m_phy = 1;
   1eaa0:	7a23      	ldrb	r3, [r4, #8]
   1eaa2:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   1eaa6:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   1eaaa:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   1eaac:	f242 0332 	movw	r3, #8242	; 0x2032
   1eab0:	429e      	cmp	r6, r3
   1eab2:	d008      	beq.n	1eac6 <hci_internal_cmd_put+0x562>
   1eab4:	f200 81b8 	bhi.w	1ee28 <hci_internal_cmd_put+0x8c4>
   1eab8:	f242 0326 	movw	r3, #8230	; 0x2026
   1eabc:	429e      	cmp	r6, r3
   1eabe:	f240 818b 	bls.w	1edd8 <hci_internal_cmd_put+0x874>
		return 0;
   1eac2:	2000      	movs	r0, #0
   1eac4:	e569      	b.n	1e59a <hci_internal_cmd_put+0x36>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1eac6:	230f      	movs	r3, #15
   1eac8:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1eaca:	2304      	movs	r3, #4
	evt_data->opcode = hci_opcode;
   1eacc:	2232      	movs	r2, #50	; 0x32
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1eace:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   1ead0:	2300      	movs	r3, #0
   1ead2:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1ead4:	7162      	strb	r2, [r4, #5]
	evt_data->ncmd = 1;
   1ead6:	2301      	movs	r3, #1
	evt_data->opcode = hci_opcode;
   1ead8:	2220      	movs	r2, #32
	evt_data->ncmd = 1;
   1eada:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1eadc:	71a2      	strb	r2, [r4, #6]
	cmd_complete_or_status.occurred = true;
   1eade:	f805 3c07 	strb.w	r3, [r5, #-7]
	if (opcode == SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
   1eae2:	e6a6      	b.n	1e832 <hci_internal_cmd_put+0x2ce>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1eae4:	f7ee fca0 	bl	d428 <sdc_hci_cmd_le_set_random_address>
   1eae8:	e7b5      	b.n	1ea56 <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   1eaea:	f7ee fc8e 	bl	d40a <sdc_hci_cmd_le_set_adv_params>
   1eaee:	e7b2      	b.n	1ea56 <hci_internal_cmd_put+0x4f2>
		*param_length_out +=
   1eaf0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1eaf4:	4851      	ldr	r0, [pc, #324]	; (1ec3c <hci_internal_cmd_put+0x6d8>)
		*param_length_out +=
   1eaf6:	3301      	adds	r3, #1
   1eaf8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1eafc:	f7ee fc6d 	bl	d3da <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
   1eb00:	e7a9      	b.n	1ea56 <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   1eb02:	f7ee fc7e 	bl	d402 <sdc_hci_cmd_le_set_adv_data>
   1eb06:	e7a6      	b.n	1ea56 <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   1eb08:	f7ee fc90 	bl	d42c <sdc_hci_cmd_le_set_scan_response_data>
   1eb0c:	e7a3      	b.n	1ea56 <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   1eb0e:	f7ee fc7a 	bl	d406 <sdc_hci_cmd_le_set_adv_enable>
   1eb12:	e7a0      	b.n	1ea56 <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_set_data_related_address_changes((void *)cmd_params);
   1eb14:	f7ee fc7d 	bl	d412 <sdc_hci_cmd_le_set_data_related_address_changes>
   1eb18:	e79d      	b.n	1ea56 <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   1eb1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1eb1e:	4847      	ldr	r0, [pc, #284]	; (1ec3c <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   1eb20:	3301      	adds	r3, #1
   1eb22:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1eb26:	f7ee fc5e 	bl	d3e6 <sdc_hci_cmd_le_read_filter_accept_list_size>
   1eb2a:	e794      	b.n	1ea56 <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   1eb2c:	f7ee fc47 	bl	d3be <sdc_hci_cmd_le_clear_filter_accept_list>
   1eb30:	e791      	b.n	1ea56 <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   1eb32:	f7ee fc42 	bl	d3ba <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   1eb36:	e78e      	b.n	1ea56 <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   1eb38:	f7ee fc61 	bl	d3fe <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   1eb3c:	e78b      	b.n	1ea56 <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1eb3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1eb42:	493e      	ldr	r1, [pc, #248]	; (1ec3c <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1eb44:	3307      	adds	r3, #7
   1eb46:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1eb4a:	f7ee fc4a 	bl	d3e2 <sdc_hci_cmd_le_read_channel_map>
   1eb4e:	e782      	b.n	1ea56 <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   1eb50:	f7ee fc4f 	bl	d3f2 <sdc_hci_cmd_le_read_remote_features>
   1eb54:	e77f      	b.n	1ea56 <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1eb56:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1eb5a:	4938      	ldr	r1, [pc, #224]	; (1ec3c <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1eb5c:	3310      	adds	r3, #16
   1eb5e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1eb62:	f7ee fc2e 	bl	d3c2 <sdc_hci_cmd_le_encrypt>
   1eb66:	e776      	b.n	1ea56 <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   1eb68:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1eb6c:	4833      	ldr	r0, [pc, #204]	; (1ec3c <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   1eb6e:	3308      	adds	r3, #8
   1eb70:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1eb74:	f7ee fc2f 	bl	d3d6 <sdc_hci_cmd_le_rand>
   1eb78:	e76d      	b.n	1ea56 <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   1eb7a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1eb7e:	492f      	ldr	r1, [pc, #188]	; (1ec3c <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   1eb80:	3302      	adds	r3, #2
   1eb82:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1eb86:	f7ee fc22 	bl	d3ce <sdc_hci_cmd_le_long_term_key_request_reply>
   1eb8a:	e764      	b.n	1ea56 <hci_internal_cmd_put+0x4f2>
		*param_length_out +=
   1eb8c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1eb90:	492a      	ldr	r1, [pc, #168]	; (1ec3c <hci_internal_cmd_put+0x6d8>)
		*param_length_out +=
   1eb92:	3302      	adds	r3, #2
   1eb94:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1eb98:	f7ee fc15 	bl	d3c6 <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   1eb9c:	e75b      	b.n	1ea56 <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1eb9e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1eba2:	3308      	adds	r3, #8
   1eba4:	f88d 3007 	strb.w	r3, [sp, #7]
	*buf = states1;
   1eba8:	238f      	movs	r3, #143	; 0x8f
   1ebaa:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   1ebac:	23c0      	movs	r3, #192	; 0xc0
   1ebae:	72e3      	strb	r3, [r4, #11]
	switch (hci_opcode) {
   1ebb0:	f242 0332 	movw	r3, #8242	; 0x2032
   1ebb4:	429e      	cmp	r6, r3
   1ebb6:	f47f af7d 	bne.w	1eab4 <hci_internal_cmd_put+0x550>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1ebba:	230f      	movs	r3, #15
   1ebbc:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1ebbe:	2304      	movs	r3, #4
   1ebc0:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   1ebc2:	2300      	movs	r3, #0
   1ebc4:	70e3      	strb	r3, [r4, #3]
	evt_data->ncmd = 1;
   1ebc6:	2301      	movs	r3, #1
   1ebc8:	e73d      	b.n	1ea46 <hci_internal_cmd_put+0x4e2>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   1ebca:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1ebce:	491b      	ldr	r1, [pc, #108]	; (1ec3c <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   1ebd0:	3302      	adds	r3, #2
   1ebd2:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1ebd6:	f7ee fc1a 	bl	d40e <sdc_hci_cmd_le_set_data_length>
   1ebda:	e73c      	b.n	1ea56 <hci_internal_cmd_put+0x4f2>
		*param_length_out +=
   1ebdc:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1ebe0:	4816      	ldr	r0, [pc, #88]	; (1ec3c <hci_internal_cmd_put+0x6d8>)
		*param_length_out +=
   1ebe2:	3304      	adds	r3, #4
   1ebe4:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1ebe8:	f7ee fc05 	bl	d3f6 <sdc_hci_cmd_le_read_suggested_default_data_length>
   1ebec:	e733      	b.n	1ea56 <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   1ebee:	f7ee fc1f 	bl	d430 <sdc_hci_cmd_le_write_suggested_default_data_length>
   1ebf2:	e730      	b.n	1ea56 <hci_internal_cmd_put+0x4f2>
		return hci_cmd_le_read_local_p256_public_key();
   1ebf4:	f000 fad4 	bl	1f1a0 <hci_cmd_le_read_local_p256_public_key>
   1ebf8:	e72d      	b.n	1ea56 <hci_internal_cmd_put+0x4f2>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   1ebfa:	f00a fcf7 	bl	295ec <hci_cmd_le_generate_dhkey>
   1ebfe:	e72a      	b.n	1ea56 <hci_internal_cmd_put+0x4f2>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   1ec00:	f00a fcf7 	bl	295f2 <hci_cmd_le_generate_dhkey_v2>
   1ec04:	e727      	b.n	1ea56 <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1ec06:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1ec0a:	480c      	ldr	r0, [pc, #48]	; (1ec3c <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1ec0c:	3308      	adds	r3, #8
   1ec0e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1ec12:	f7ee fbea 	bl	d3ea <sdc_hci_cmd_le_read_max_data_length>
   1ec16:	e71e      	b.n	1ea56 <hci_internal_cmd_put+0x4f2>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1ec18:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1ec1c:	4907      	ldr	r1, [pc, #28]	; (1ec3c <hci_internal_cmd_put+0x6d8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1ec1e:	3304      	adds	r3, #4
   1ec20:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1ec24:	f7ee fbe3 	bl	d3ee <sdc_hci_cmd_le_read_phy>
   1ec28:	e715      	b.n	1ea56 <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   1ec2a:	f7ee fbf4 	bl	d416 <sdc_hci_cmd_le_set_default_phy>
   1ec2e:	e712      	b.n	1ea56 <hci_internal_cmd_put+0x4f2>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   1ec30:	f7ee fbf8 	bl	d424 <sdc_hci_cmd_le_set_phy>
   1ec34:	e70f      	b.n	1ea56 <hci_internal_cmd_put+0x4f2>
   1ec36:	bf00      	nop
   1ec38:	03001241 	.word	0x03001241
   1ec3c:	20004423 	.word	0x20004423
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1ec40:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1ec44:	4881      	ldr	r0, [pc, #516]	; (1ee4c <hci_internal_cmd_put+0x8e8>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1ec46:	3302      	adds	r3, #2
   1ec48:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1ec4c:	f7ee fbd5 	bl	d3fa <sdc_hci_cmd_le_read_transmit_power>
   1ec50:	e701      	b.n	1ea56 <hci_internal_cmd_put+0x4f2>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1ec52:	4628      	mov	r0, r5
	switch (opcode)	{
   1ec54:	f64f 420b 	movw	r2, #64523	; 0xfc0b
   1ec58:	f830 3b03 	ldrh.w	r3, [r0], #3
   1ec5c:	4293      	cmp	r3, r2
   1ec5e:	d823      	bhi.n	1eca8 <hci_internal_cmd_put+0x744>
   1ec60:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   1ec64:	f67f acbc 	bls.w	1e5e0 <hci_internal_cmd_put+0x7c>
   1ec68:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   1ec6c:	3b01      	subs	r3, #1
   1ec6e:	2b0a      	cmp	r3, #10
   1ec70:	f63f acb6 	bhi.w	1e5e0 <hci_internal_cmd_put+0x7c>
   1ec74:	a201      	add	r2, pc, #4	; (adr r2, 1ec7c <hci_internal_cmd_put+0x718>)
   1ec76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1ec7a:	bf00      	nop
   1ec7c:	0001ecf9 	.word	0x0001ecf9
   1ec80:	0001ed15 	.word	0x0001ed15
   1ec84:	0001e5e1 	.word	0x0001e5e1
   1ec88:	0001e5e1 	.word	0x0001e5e1
   1ec8c:	0001e5e1 	.word	0x0001e5e1
   1ec90:	0001ed69 	.word	0x0001ed69
   1ec94:	0001e5e1 	.word	0x0001e5e1
   1ec98:	0001e5e1 	.word	0x0001e5e1
   1ec9c:	0001ed45 	.word	0x0001ed45
   1eca0:	0001ed57 	.word	0x0001ed57
   1eca4:	0001ed6f 	.word	0x0001ed6f
   1eca8:	f503 7240 	add.w	r2, r3, #768	; 0x300
   1ecac:	b292      	uxth	r2, r2
   1ecae:	2a0c      	cmp	r2, #12
   1ecb0:	f63f ac96 	bhi.w	1e5e0 <hci_internal_cmd_put+0x7c>
   1ecb4:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   1ecb8:	2b0c      	cmp	r3, #12
   1ecba:	f63f ac91 	bhi.w	1e5e0 <hci_internal_cmd_put+0x7c>
   1ecbe:	a201      	add	r2, pc, #4	; (adr r2, 1ecc4 <hci_internal_cmd_put+0x760>)
   1ecc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1ecc4:	0001ed81 	.word	0x0001ed81
   1ecc8:	0001eda3 	.word	0x0001eda3
   1eccc:	0001eda9 	.word	0x0001eda9
   1ecd0:	0001edaf 	.word	0x0001edaf
   1ecd4:	0001edb5 	.word	0x0001edb5
   1ecd8:	0001edbb 	.word	0x0001edbb
   1ecdc:	0001e5e1 	.word	0x0001e5e1
   1ece0:	0001e5e1 	.word	0x0001e5e1
   1ece4:	0001e5e1 	.word	0x0001e5e1
   1ece8:	0001edc1 	.word	0x0001edc1
   1ecec:	0001e5e1 	.word	0x0001e5e1
   1ecf0:	0001e5e1 	.word	0x0001e5e1
   1ecf4:	0001edc7 	.word	0x0001edc7
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1ecf8:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1ecfc:	4853      	ldr	r0, [pc, #332]	; (1ee4c <hci_internal_cmd_put+0x8e8>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1ecfe:	330c      	adds	r3, #12
   1ed00:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1ed04:	f7e2 fca2 	bl	164c <sdc_hci_cmd_vs_zephyr_read_version_info>
	switch (hci_opcode) {
   1ed08:	f026 0308 	bic.w	r3, r6, #8
   1ed0c:	f64f 5202 	movw	r2, #64770	; 0xfd02
   1ed10:	4293      	cmp	r3, r2
   1ed12:	e066      	b.n	1ede2 <hci_internal_cmd_put+0x87e>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1ed14:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1ed18:	484c      	ldr	r0, [pc, #304]	; (1ee4c <hci_internal_cmd_put+0x8e8>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1ed1a:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1ed1c:	2202      	movs	r2, #2
   1ed1e:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1ed20:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1ed24:	f008 fe8d 	bl	27a42 <memset>
	cmds->read_version_info = 1;
   1ed28:	79e3      	ldrb	r3, [r4, #7]
   1ed2a:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   1ed2e:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1ed32:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   1ed34:	7a23      	ldrb	r3, [r4, #8]
   1ed36:	f023 0307 	bic.w	r3, r3, #7
   1ed3a:	f043 0307 	orr.w	r3, r3, #7
   1ed3e:	7223      	strb	r3, [r4, #8]
		return 0;
   1ed40:	2000      	movs	r0, #0
   1ed42:	e7e1      	b.n	1ed08 <hci_internal_cmd_put+0x7a4>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1ed44:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1ed48:	4840      	ldr	r0, [pc, #256]	; (1ee4c <hci_internal_cmd_put+0x8e8>)
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1ed4a:	3317      	adds	r3, #23
   1ed4c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1ed50:	f7e2 fc30 	bl	15b4 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   1ed54:	e7d8      	b.n	1ed08 <hci_internal_cmd_put+0x7a4>
		*param_length_out +=
   1ed56:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1ed5a:	483c      	ldr	r0, [pc, #240]	; (1ee4c <hci_internal_cmd_put+0x8e8>)
		*param_length_out +=
   1ed5c:	3320      	adds	r3, #32
   1ed5e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1ed62:	f7e2 fbdf 	bl	1524 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   1ed66:	e7cf      	b.n	1ed08 <hci_internal_cmd_put+0x7a4>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1ed68:	f7ee fb21 	bl	d3ae <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   1ed6c:	e7cc      	b.n	1ed08 <hci_internal_cmd_put+0x7a4>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   1ed6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   1ed72:	4836      	ldr	r0, [pc, #216]	; (1ee4c <hci_internal_cmd_put+0x8e8>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   1ed74:	3301      	adds	r3, #1
   1ed76:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   1ed7a:	f7ee fb04 	bl	d386 <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   1ed7e:	e7c3      	b.n	1ed08 <hci_internal_cmd_put+0x7a4>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1ed80:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1ed84:	4831      	ldr	r0, [pc, #196]	; (1ee4c <hci_internal_cmd_put+0x8e8>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1ed86:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1ed88:	2202      	movs	r2, #2
   1ed8a:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1ed8c:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1ed90:	f008 fe57 	bl	27a42 <memset>
	cmds->read_supported_vs_commands = 1;
   1ed94:	79e3      	ldrb	r3, [r4, #7]
   1ed96:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1ed9a:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   1ed9e:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
   1eda0:	e7ce      	b.n	1ed40 <hci_internal_cmd_put+0x7dc>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1eda2:	f7ee fae3 	bl	d36c <sdc_hci_cmd_vs_llpm_mode_set>
   1eda6:	e7af      	b.n	1ed08 <hci_internal_cmd_put+0x7a4>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1eda8:	f7ee fadc 	bl	d364 <sdc_hci_cmd_vs_conn_update>
   1edac:	e7ac      	b.n	1ed08 <hci_internal_cmd_put+0x7a4>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1edae:	f7ee fad1 	bl	d354 <sdc_hci_cmd_vs_conn_event_extend>
   1edb2:	e7a9      	b.n	1ed08 <hci_internal_cmd_put+0x7a4>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1edb4:	f7ee fae0 	bl	d378 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1edb8:	e7a6      	b.n	1ed08 <hci_internal_cmd_put+0x7a4>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1edba:	f7ee fad5 	bl	d368 <sdc_hci_cmd_vs_event_length_set>
   1edbe:	e7a3      	b.n	1ed08 <hci_internal_cmd_put+0x7a4>
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   1edc0:	f7ee fad6 	bl	d370 <sdc_hci_cmd_vs_peripheral_latency_mode_set>
   1edc4:	e7a0      	b.n	1ed08 <hci_internal_cmd_put+0x7a4>
		return sdc_hci_cmd_vs_set_adv_randomness((void *)cmd_params);
   1edc6:	f7ee fadc 	bl	d382 <sdc_hci_cmd_vs_set_adv_randomness>
   1edca:	e79d      	b.n	1ed08 <hci_internal_cmd_put+0x7a4>
	switch (hci_opcode) {
   1edcc:	f242 0326 	movw	r3, #8230	; 0x2026
   1edd0:	429e      	cmp	r6, r3
   1edd2:	f67f ad76 	bls.w	1e8c2 <hci_internal_cmd_put+0x35e>
   1edd6:	e469      	b.n	1e6ac <hci_internal_cmd_put+0x148>
		return 0;
   1edd8:	2000      	movs	r0, #0
   1edda:	e572      	b.n	1e8c2 <hci_internal_cmd_put+0x35e>
	switch (hci_opcode) {
   1eddc:	f240 431d 	movw	r3, #1053	; 0x41d
   1ede0:	429e      	cmp	r6, r3
   1ede2:	f43f ac10 	beq.w	1e606 <hci_internal_cmd_put+0xa2>
   1ede6:	e461      	b.n	1e6ac <hci_internal_cmd_put+0x148>
		switch (BT_OGF(opcode)) {
   1ede8:	2001      	movs	r0, #1
	if (generate_command_status_event ||
   1edea:	e45f      	b.n	1e6ac <hci_internal_cmd_put+0x148>
	switch (hci_opcode) {
   1edec:	4a18      	ldr	r2, [pc, #96]	; (1ee50 <hci_internal_cmd_put+0x8ec>)
   1edee:	3b2d      	subs	r3, #45	; 0x2d
   1edf0:	b29b      	uxth	r3, r3
   1edf2:	fa22 f303 	lsr.w	r3, r2, r3
   1edf6:	07da      	lsls	r2, r3, #31
   1edf8:	f57f ac58 	bpl.w	1e6ac <hci_internal_cmd_put+0x148>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1edfc:	230f      	movs	r3, #15
   1edfe:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1ee00:	2304      	movs	r3, #4
   1ee02:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1ee04:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1ee06:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1ee08:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1ee0a:	f8a4 6005 	strh.w	r6, [r4, #5]
	cmd_complete_or_status.occurred = true;
   1ee0e:	2301      	movs	r3, #1
   1ee10:	7023      	strb	r3, [r4, #0]
	if (opcode == SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
   1ee12:	f242 0383 	movw	r3, #8323	; 0x2083
   1ee16:	429e      	cmp	r6, r3
   1ee18:	f47f ad0b 	bne.w	1e832 <hci_internal_cmd_put+0x2ce>
		&&
   1ee1c:	7863      	ldrb	r3, [r4, #1]
   1ee1e:	2b0e      	cmp	r3, #14
   1ee20:	f47f ad07 	bne.w	1e832 <hci_internal_cmd_put+0x2ce>
		cmd_complete_or_status.occurred = false;
   1ee24:	2300      	movs	r3, #0
   1ee26:	e42c      	b.n	1e682 <hci_internal_cmd_put+0x11e>
	switch (hci_opcode) {
   1ee28:	f242 0385 	movw	r3, #8325	; 0x2085
   1ee2c:	429e      	cmp	r6, r3
   1ee2e:	d906      	bls.n	1ee3e <hci_internal_cmd_put+0x8da>
		return 0;
   1ee30:	2000      	movs	r0, #0
   1ee32:	e43b      	b.n	1e6ac <hci_internal_cmd_put+0x148>
	switch (hci_opcode) {
   1ee34:	f242 0385 	movw	r3, #8325	; 0x2085
   1ee38:	2001      	movs	r0, #1
   1ee3a:	f7ff bbf4 	b.w	1e626 <hci_internal_cmd_put+0xc2>
		return 0;
   1ee3e:	2000      	movs	r0, #0
   1ee40:	f7ff bbf3 	b.w	1e62a <hci_internal_cmd_put+0xc6>
		return -NRF_EPERM;
   1ee44:	f04f 30ff 	mov.w	r0, #4294967295
   1ee48:	e4f4      	b.n	1e834 <hci_internal_cmd_put+0x2d0>
   1ee4a:	bf00      	nop
   1ee4c:	20004423 	.word	0x20004423
   1ee50:	01000401 	.word	0x01000401

0001ee54 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   1ee54:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
   1ee56:	4c09      	ldr	r4, [pc, #36]	; (1ee7c <hci_internal_msg_get+0x28>)
   1ee58:	7823      	ldrb	r3, [r4, #0]
{
   1ee5a:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
   1ee5c:	b91b      	cbnz	r3, 1ee66 <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   1ee5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
   1ee62:	f7ee ba57 	b.w	d314 <sdc_hci_get>
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1ee66:	78a2      	ldrb	r2, [r4, #2]
		memcpy(msg_out,
   1ee68:	1c61      	adds	r1, r4, #1
   1ee6a:	3202      	adds	r2, #2
   1ee6c:	f008 fdde 	bl	27a2c <memcpy>
		cmd_complete_or_status.occurred = false;
   1ee70:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1ee72:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
   1ee74:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1ee76:	702b      	strb	r3, [r5, #0]
}
   1ee78:	bd38      	pop	{r3, r4, r5, pc}
   1ee7a:	bf00      	nop
   1ee7c:	2000441c 	.word	0x2000441c

0001ee80 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   1ee80:	b570      	push	{r4, r5, r6, lr}
   1ee82:	4606      	mov	r6, r0
   1ee84:	460c      	mov	r4, r1
   1ee86:	4d0f      	ldr	r5, [pc, #60]	; (1eec4 <bt_rand+0x44>)
   1ee88:	4628      	mov	r0, r5
   1ee8a:	f00a fc7b 	bl	29784 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   1ee8e:	b1a8      	cbz	r0, 1eebc <bt_rand+0x3c>
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   1ee90:	b2a2      	uxth	r2, r4
	__ASSERT(api->get_entropy != NULL,
   1ee92:	68ab      	ldr	r3, [r5, #8]
   1ee94:	681b      	ldr	r3, [r3, #0]
   1ee96:	b963      	cbnz	r3, 1eeb2 <bt_rand+0x32>
   1ee98:	490b      	ldr	r1, [pc, #44]	; (1eec8 <bt_rand+0x48>)
   1ee9a:	4a0c      	ldr	r2, [pc, #48]	; (1eecc <bt_rand+0x4c>)
   1ee9c:	480c      	ldr	r0, [pc, #48]	; (1eed0 <bt_rand+0x50>)
   1ee9e:	234d      	movs	r3, #77	; 0x4d
   1eea0:	f008 f99c 	bl	271dc <assert_print>
   1eea4:	480b      	ldr	r0, [pc, #44]	; (1eed4 <bt_rand+0x54>)
   1eea6:	f008 f999 	bl	271dc <assert_print>
   1eeaa:	4808      	ldr	r0, [pc, #32]	; (1eecc <bt_rand+0x4c>)
   1eeac:	214d      	movs	r1, #77	; 0x4d
   1eeae:	f008 f98e 	bl	271ce <assert_post_action>
	return api->get_entropy(dev, buffer, length);
   1eeb2:	4631      	mov	r1, r6
   1eeb4:	4628      	mov	r0, r5
}
   1eeb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1eeba:	4718      	bx	r3
   1eebc:	f06f 0012 	mvn.w	r0, #18
   1eec0:	bd70      	pop	{r4, r5, r6, pc}
   1eec2:	bf00      	nop
   1eec4:	00029d08 	.word	0x00029d08
   1eec8:	0002dc84 	.word	0x0002dc84
   1eecc:	0002dc50 	.word	0x0002dc50
   1eed0:	0002ae37 	.word	0x0002ae37
   1eed4:	0002dca4 	.word	0x0002dca4

0001eed8 <sys_memcpy_swap.constprop.0>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1eed8:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   1eeda:	b508      	push	{r3, lr}
   1eedc:	f101 0320 	add.w	r3, r1, #32
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1eee0:	d910      	bls.n	1ef04 <sys_memcpy_swap.constprop.0+0x2c>
   1eee2:	4298      	cmp	r0, r3
   1eee4:	d213      	bcs.n	1ef0e <sys_memcpy_swap.constprop.0+0x36>
   1eee6:	490e      	ldr	r1, [pc, #56]	; (1ef20 <sys_memcpy_swap.constprop.0+0x48>)
   1eee8:	4a0e      	ldr	r2, [pc, #56]	; (1ef24 <sys_memcpy_swap.constprop.0+0x4c>)
   1eeea:	480f      	ldr	r0, [pc, #60]	; (1ef28 <sys_memcpy_swap.constprop.0+0x50>)
   1eeec:	f240 2315 	movw	r3, #533	; 0x215
   1eef0:	f008 f974 	bl	271dc <assert_print>
   1eef4:	480d      	ldr	r0, [pc, #52]	; (1ef2c <sys_memcpy_swap.constprop.0+0x54>)
   1eef6:	f008 f971 	bl	271dc <assert_print>
   1eefa:	480a      	ldr	r0, [pc, #40]	; (1ef24 <sys_memcpy_swap.constprop.0+0x4c>)
   1eefc:	f240 2115 	movw	r1, #533	; 0x215
   1ef00:	f008 f965 	bl	271ce <assert_post_action>
   1ef04:	d0ef      	beq.n	1eee6 <sys_memcpy_swap.constprop.0+0xe>
   1ef06:	f100 0220 	add.w	r2, r0, #32
   1ef0a:	4291      	cmp	r1, r2
   1ef0c:	e7ea      	b.n	1eee4 <sys_memcpy_swap.constprop.0+0xc>
	for (; length > 0; length--) {
   1ef0e:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   1ef10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1ef14:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   1ef18:	428b      	cmp	r3, r1
   1ef1a:	d1f9      	bne.n	1ef10 <sys_memcpy_swap.constprop.0+0x38>
}
   1ef1c:	bd08      	pop	{r3, pc}
   1ef1e:	bf00      	nop
   1ef20:	0002df20 	.word	0x0002df20
   1ef24:	0002deee 	.word	0x0002deee
   1ef28:	0002ae37 	.word	0x0002ae37
   1ef2c:	0002df77 	.word	0x0002df77

0001ef30 <ecdh_p256_common_secret>:

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   1ef30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1ef32:	4b24      	ldr	r3, [pc, #144]	; (1efc4 <ecdh_p256_common_secret+0x94>)
   1ef34:	4924      	ldr	r1, [pc, #144]	; (1efc8 <ecdh_p256_common_secret+0x98>)
   1ef36:	f103 0220 	add.w	r2, r3, #32
   1ef3a:	2800      	cmp	r0, #0
   1ef3c:	bf08      	it	eq
   1ef3e:	4619      	moveq	r1, r3
{
   1ef40:	af00      	add	r7, sp, #0
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1ef42:	4610      	mov	r0, r2
   1ef44:	f004 fee6 	bl	23d14 <ocrypto_ecdh_p256_common_secret>
	if (err) {
   1ef48:	4604      	mov	r4, r0
   1ef4a:	b180      	cbz	r0, 1ef6e <ecdh_p256_common_secret+0x3e>
		LOG_ERR("public key is not valid (err %d)", err);
   1ef4c:	466d      	mov	r5, sp
   1ef4e:	b088      	sub	sp, #32
   1ef50:	466a      	mov	r2, sp
   1ef52:	4b1e      	ldr	r3, [pc, #120]	; (1efcc <ecdh_p256_common_secret+0x9c>)
   1ef54:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1ef58:	2303      	movs	r3, #3
   1ef5a:	f842 3f10 	str.w	r3, [r2, #16]!
   1ef5e:	481c      	ldr	r0, [pc, #112]	; (1efd0 <ecdh_p256_common_secret+0xa0>)
   1ef60:	2300      	movs	r3, #0
   1ef62:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1ef66:	f7f5 f88d 	bl	14084 <z_impl_z_log_msg_static_create>
		return BT_HCI_ERR_INVALID_PARAM;
   1ef6a:	2412      	movs	r4, #18
   1ef6c:	46ad      	mov	sp, r5
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1ef6e:	f04f 32ff 	mov.w	r2, #4294967295
   1ef72:	f04f 33ff 	mov.w	r3, #4294967295
   1ef76:	2001      	movs	r0, #1
   1ef78:	f7f7 f8b0 	bl	160dc <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   1ef7c:	f100 060c 	add.w	r6, r0, #12
   1ef80:	2102      	movs	r1, #2
   1ef82:	4605      	mov	r5, r0
   1ef84:	4630      	mov	r0, r6
   1ef86:	f7fd fa73 	bl	1c470 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1ef8a:	233e      	movs	r3, #62	; 0x3e
   1ef8c:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1ef8e:	2322      	movs	r3, #34	; 0x22
   1ef90:	7043      	strb	r3, [r0, #1]
   1ef92:	2101      	movs	r1, #1
   1ef94:	4630      	mov	r0, r6
   1ef96:	f7fd fa6b 	bl	1c470 <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   1ef9a:	2309      	movs	r3, #9
   1ef9c:	7003      	strb	r3, [r0, #0]
   1ef9e:	2121      	movs	r1, #33	; 0x21
   1efa0:	4630      	mov	r0, r6
   1efa2:	f7fd fa65 	bl	1c470 <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   1efa6:	f800 4b01 	strb.w	r4, [r0], #1

	if (status) {
   1efaa:	b134      	cbz	r4, 1efba <ecdh_p256_common_secret+0x8a>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   1efac:	2220      	movs	r2, #32
   1efae:	21ff      	movs	r1, #255	; 0xff
   1efb0:	f008 fd47 	bl	27a42 <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   1efb4:	4628      	mov	r0, r5
   1efb6:	46bd      	mov	sp, r7
   1efb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   1efba:	4906      	ldr	r1, [pc, #24]	; (1efd4 <ecdh_p256_common_secret+0xa4>)
   1efbc:	f7ff ff8c 	bl	1eed8 <sys_memcpy_swap.constprop.0>
   1efc0:	e7f8      	b.n	1efb4 <ecdh_p256_common_secret+0x84>
   1efc2:	bf00      	nop
   1efc4:	20004463 	.word	0x20004463
   1efc8:	0002dff5 	.word	0x0002dff5
   1efcc:	0002dfb7 	.word	0x0002dfb7
   1efd0:	0002a000 	.word	0x0002a000
   1efd4:	20004483 	.word	0x20004483

0001efd8 <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   1efd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1efda:	4c42      	ldr	r4, [pc, #264]	; (1f0e4 <ecdh_cmd_process+0x10c>)
   1efdc:	f3bf 8f5b 	dmb	ish
   1efe0:	6823      	ldr	r3, [r4, #0]
   1efe2:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   1efe6:	2b02      	cmp	r3, #2
{
   1efe8:	b087      	sub	sp, #28
   1efea:	4627      	mov	r7, r4
	switch (atomic_get(&cmd)) {
   1efec:	d05a      	beq.n	1f0a4 <ecdh_cmd_process+0xcc>
   1efee:	2b04      	cmp	r3, #4
   1eff0:	d05d      	beq.n	1f0ae <ecdh_cmd_process+0xd6>
   1eff2:	2b01      	cmp	r3, #1
   1eff4:	d15d      	bne.n	1f0b2 <ecdh_cmd_process+0xda>
		err = bt_rand(ecdh.private_key_be, 32);
   1eff6:	4c3c      	ldr	r4, [pc, #240]	; (1f0e8 <ecdh_cmd_process+0x110>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1eff8:	4e3c      	ldr	r6, [pc, #240]	; (1f0ec <ecdh_cmd_process+0x114>)
		err = bt_rand(ecdh.private_key_be, 32);
   1effa:	2120      	movs	r1, #32
   1effc:	4620      	mov	r0, r4
   1effe:	f7ff ff3f 	bl	1ee80 <bt_rand>
		if (err) {
   1f002:	2800      	cmp	r0, #0
   1f004:	d143      	bne.n	1f08e <ecdh_cmd_process+0xb6>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1f006:	2220      	movs	r2, #32
   1f008:	4631      	mov	r1, r6
   1f00a:	4620      	mov	r0, r4
   1f00c:	f008 fce7 	bl	279de <memcmp>
   1f010:	2800      	cmp	r0, #0
   1f012:	d0f2      	beq.n	1effa <ecdh_cmd_process+0x22>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   1f014:	4836      	ldr	r0, [pc, #216]	; (1f0f0 <ecdh_cmd_process+0x118>)
   1f016:	4621      	mov	r1, r4
   1f018:	f004 fe68 	bl	23cec <ocrypto_ecdh_p256_public_key>
	} while (err);
   1f01c:	4605      	mov	r5, r0
   1f01e:	2800      	cmp	r0, #0
   1f020:	d1eb      	bne.n	1effa <ecdh_cmd_process+0x22>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1f022:	f04f 32ff 	mov.w	r2, #4294967295
   1f026:	f04f 33ff 	mov.w	r3, #4294967295
   1f02a:	2001      	movs	r0, #1
   1f02c:	f7f7 f856 	bl	160dc <bt_buf_get_rx>
   1f030:	f100 060c 	add.w	r6, r0, #12
   1f034:	2102      	movs	r1, #2
   1f036:	4604      	mov	r4, r0
   1f038:	4630      	mov	r0, r6
   1f03a:	f7fd fa19 	bl	1c470 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1f03e:	233e      	movs	r3, #62	; 0x3e
   1f040:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1f042:	2342      	movs	r3, #66	; 0x42
   1f044:	7043      	strb	r3, [r0, #1]
   1f046:	2101      	movs	r1, #1
   1f048:	4630      	mov	r0, r6
   1f04a:	f7fd fa11 	bl	1c470 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   1f04e:	2308      	movs	r3, #8
   1f050:	7003      	strb	r3, [r0, #0]
   1f052:	2141      	movs	r1, #65	; 0x41
   1f054:	4630      	mov	r0, r6
   1f056:	f7fd fa0b 	bl	1c470 <net_buf_simple_add>
   1f05a:	4606      	mov	r6, r0
	evt->status = status;
   1f05c:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   1f060:	b1bd      	cbz	r5, 1f092 <ecdh_cmd_process+0xba>
		(void)memset(evt->key, 0, sizeof(evt->key));
   1f062:	2240      	movs	r2, #64	; 0x40
   1f064:	2100      	movs	r1, #0
   1f066:	f008 fcec 	bl	27a42 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f06a:	f3bf 8f5b 	dmb	ish
   1f06e:	2300      	movs	r3, #0
   1f070:	e857 2f00 	ldrex	r2, [r7]
   1f074:	e847 3100 	strex	r1, r3, [r7]
   1f078:	2900      	cmp	r1, #0
   1f07a:	d1f9      	bne.n	1f070 <ecdh_cmd_process+0x98>
   1f07c:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   1f080:	b36c      	cbz	r4, 1f0de <ecdh_cmd_process+0x106>
		bt_recv(buf);
   1f082:	4620      	mov	r0, r4
	}
}
   1f084:	b007      	add	sp, #28
   1f086:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_recv(buf);
   1f08a:	f7f8 b9a5 	b.w	173d8 <bt_recv>
			return BT_HCI_ERR_UNSPECIFIED;
   1f08e:	251f      	movs	r5, #31
   1f090:	e7c7      	b.n	1f022 <ecdh_cmd_process+0x4a>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   1f092:	4917      	ldr	r1, [pc, #92]	; (1f0f0 <ecdh_cmd_process+0x118>)
   1f094:	f7ff ff20 	bl	1eed8 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   1f098:	4916      	ldr	r1, [pc, #88]	; (1f0f4 <ecdh_cmd_process+0x11c>)
   1f09a:	f106 0021 	add.w	r0, r6, #33	; 0x21
   1f09e:	f7ff ff1b 	bl	1eed8 <sys_memcpy_swap.constprop.0>
		break;
   1f0a2:	e7e2      	b.n	1f06a <ecdh_cmd_process+0x92>
		buf = ecdh_p256_common_secret(false);
   1f0a4:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   1f0a6:	f7ff ff43 	bl	1ef30 <ecdh_p256_common_secret>
   1f0aa:	4604      	mov	r4, r0
		break;
   1f0ac:	e7dd      	b.n	1f06a <ecdh_cmd_process+0x92>
		buf = ecdh_p256_common_secret(true);
   1f0ae:	2001      	movs	r0, #1
   1f0b0:	e7f9      	b.n	1f0a6 <ecdh_cmd_process+0xce>
		LOG_WRN("Unknown command");
   1f0b2:	4b11      	ldr	r3, [pc, #68]	; (1f0f8 <ecdh_cmd_process+0x120>)
   1f0b4:	9305      	str	r3, [sp, #20]
   1f0b6:	2302      	movs	r3, #2
   1f0b8:	9304      	str	r3, [sp, #16]
   1f0ba:	2300      	movs	r3, #0
   1f0bc:	480f      	ldr	r0, [pc, #60]	; (1f0fc <ecdh_cmd_process+0x124>)
   1f0be:	aa04      	add	r2, sp, #16
   1f0c0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1f0c4:	f7f4 ffde 	bl	14084 <z_impl_z_log_msg_static_create>
   1f0c8:	f3bf 8f5b 	dmb	ish
   1f0cc:	2300      	movs	r3, #0
   1f0ce:	e854 2f00 	ldrex	r2, [r4]
   1f0d2:	e844 3100 	strex	r1, r3, [r4]
   1f0d6:	2900      	cmp	r1, #0
   1f0d8:	d1f9      	bne.n	1f0ce <ecdh_cmd_process+0xf6>
   1f0da:	f3bf 8f5b 	dmb	ish
}
   1f0de:	b007      	add	sp, #28
   1f0e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f0e2:	bf00      	nop
   1f0e4:	20003710 	.word	0x20003710
   1f0e8:	20004463 	.word	0x20004463
   1f0ec:	0002dff5 	.word	0x0002dff5
   1f0f0:	20004483 	.word	0x20004483
   1f0f4:	200044a3 	.word	0x200044a3
   1f0f8:	0002dfd8 	.word	0x0002dfd8
   1f0fc:	0002a000 	.word	0x0002a000

0001f100 <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   1f100:	b510      	push	{r4, lr}
   1f102:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   1f104:	2210      	movs	r2, #16
   1f106:	2100      	movs	r1, #0
   1f108:	a801      	add	r0, sp, #4
   1f10a:	f008 fc9a 	bl	27a42 <memset>
   1f10e:	4c0b      	ldr	r4, [pc, #44]	; (1f13c <ecdh_thread+0x3c>)
   1f110:	9405      	str	r4, [sp, #20]
   1f112:	2301      	movs	r3, #1
   1f114:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   1f118:	f04f 32ff 	mov.w	r2, #4294967295
   1f11c:	f04f 33ff 	mov.w	r3, #4294967295
   1f120:	2101      	movs	r1, #1
   1f122:	a801      	add	r0, sp, #4
   1f124:	f004 fc1e 	bl	23964 <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   1f128:	4620      	mov	r0, r4
   1f12a:	f00a fd5a 	bl	29be2 <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   1f12e:	9b04      	ldr	r3, [sp, #16]
   1f130:	f36f 3394 	bfc	r3, #14, #7
   1f134:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   1f136:	f7ff ff4f 	bl	1efd8 <ecdh_cmd_process>
	while (true) {
   1f13a:	e7ed      	b.n	1f118 <ecdh_thread+0x18>
   1f13c:	20003700 	.word	0x20003700

0001f140 <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   1f140:	b510      	push	{r4, lr}
   1f142:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   1f144:	480e      	ldr	r0, [pc, #56]	; (1f180 <hci_ecdh_init+0x40>)
   1f146:	f00a fd47 	bl	29bd8 <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1f14a:	4c0e      	ldr	r4, [pc, #56]	; (1f184 <hci_ecdh_init+0x44>)
   1f14c:	490e      	ldr	r1, [pc, #56]	; (1f188 <hci_ecdh_init+0x48>)
   1f14e:	2200      	movs	r2, #0
   1f150:	2300      	movs	r3, #0
   1f152:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1f156:	2300      	movs	r3, #0
   1f158:	220a      	movs	r2, #10
   1f15a:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1f15e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1f162:	9300      	str	r3, [sp, #0]
   1f164:	f44f 7262 	mov.w	r2, #904	; 0x388
   1f168:	4b08      	ldr	r3, [pc, #32]	; (1f18c <hci_ecdh_init+0x4c>)
   1f16a:	4620      	mov	r0, r4
   1f16c:	f001 fb0a 	bl	20784 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1f170:	4907      	ldr	r1, [pc, #28]	; (1f190 <hci_ecdh_init+0x50>)
   1f172:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   1f174:	b008      	add	sp, #32
   1f176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1f17a:	f00a bb46 	b.w	2980a <z_impl_k_thread_name_set>
   1f17e:	bf00      	nop
   1f180:	20003700 	.word	0x20003700
   1f184:	20002ab0 	.word	0x20002ab0
   1f188:	20006a80 	.word	0x20006a80
   1f18c:	0001f101 	.word	0x0001f101
   1f190:	0002dfe8 	.word	0x0002dfe8

0001f194 <hci_ecdh_uninit>:
	z_impl_k_thread_abort(thread);
   1f194:	4801      	ldr	r0, [pc, #4]	; (1f19c <hci_ecdh_uninit+0x8>)
   1f196:	f7f6 bd03 	b.w	15ba0 <z_impl_k_thread_abort>
   1f19a:	bf00      	nop
   1f19c:	20002ab0 	.word	0x20002ab0

0001f1a0 <hci_cmd_le_read_local_p256_public_key>:
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}


uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   1f1a0:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1f1a2:	4b0b      	ldr	r3, [pc, #44]	; (1f1d0 <hci_cmd_le_read_local_p256_public_key+0x30>)
   1f1a4:	f3bf 8f5b 	dmb	ish
   1f1a8:	2201      	movs	r2, #1
   1f1aa:	e853 1f00 	ldrex	r1, [r3]
   1f1ae:	2900      	cmp	r1, #0
   1f1b0:	d103      	bne.n	1f1ba <hci_cmd_le_read_local_p256_public_key+0x1a>
   1f1b2:	e843 2000 	strex	r0, r2, [r3]
   1f1b6:	2800      	cmp	r0, #0
   1f1b8:	d1f7      	bne.n	1f1aa <hci_cmd_le_read_local_p256_public_key+0xa>
   1f1ba:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   1f1be:	d105      	bne.n	1f1cc <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   1f1c0:	4804      	ldr	r0, [pc, #16]	; (1f1d4 <hci_cmd_le_read_local_p256_public_key+0x34>)
   1f1c2:	2100      	movs	r1, #0
   1f1c4:	f004 fcaa 	bl	23b1c <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   1f1c8:	2000      	movs	r0, #0
}
   1f1ca:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1f1cc:	200c      	movs	r0, #12
   1f1ce:	e7fc      	b.n	1f1ca <hci_cmd_le_read_local_p256_public_key+0x2a>
   1f1d0:	20003710 	.word	0x20003710
   1f1d4:	20003700 	.word	0x20003700

0001f1d8 <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   1f1d8:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1f1da:	2900      	cmp	r1, #0
   1f1dc:	4b11      	ldr	r3, [pc, #68]	; (1f224 <cmd_le_generate_dhkey+0x4c>)
   1f1de:	f3bf 8f5b 	dmb	ish
{
   1f1e2:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1f1e4:	bf0c      	ite	eq
   1f1e6:	2202      	moveq	r2, #2
   1f1e8:	2204      	movne	r2, #4
   1f1ea:	e853 1f00 	ldrex	r1, [r3]
   1f1ee:	2900      	cmp	r1, #0
   1f1f0:	d103      	bne.n	1f1fa <cmd_le_generate_dhkey+0x22>
   1f1f2:	e843 2000 	strex	r0, r2, [r3]
   1f1f6:	2800      	cmp	r0, #0
   1f1f8:	d1f7      	bne.n	1f1ea <cmd_le_generate_dhkey+0x12>
   1f1fa:	f3bf 8f5b 	dmb	ish
   1f1fe:	d10e      	bne.n	1f21e <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   1f200:	4621      	mov	r1, r4
   1f202:	4809      	ldr	r0, [pc, #36]	; (1f228 <cmd_le_generate_dhkey+0x50>)
   1f204:	f7ff fe68 	bl	1eed8 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   1f208:	4808      	ldr	r0, [pc, #32]	; (1f22c <cmd_le_generate_dhkey+0x54>)
   1f20a:	f104 0120 	add.w	r1, r4, #32
   1f20e:	f7ff fe63 	bl	1eed8 <sys_memcpy_swap.constprop.0>
   1f212:	4807      	ldr	r0, [pc, #28]	; (1f230 <cmd_le_generate_dhkey+0x58>)
   1f214:	2100      	movs	r1, #0
   1f216:	f004 fc81 	bl	23b1c <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   1f21a:	2000      	movs	r0, #0
}
   1f21c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1f21e:	200c      	movs	r0, #12
   1f220:	e7fc      	b.n	1f21c <cmd_le_generate_dhkey+0x44>
   1f222:	bf00      	nop
   1f224:	20003710 	.word	0x20003710
   1f228:	20004483 	.word	0x20004483
   1f22c:	200044a3 	.word	0x200044a3
   1f230:	20003700 	.word	0x20003700

0001f234 <mpsl_low_prio_irq_handler>:
static uint8_t __aligned(4) timeslot_context[TIMESLOT_MEM_SIZE];
#endif

static void mpsl_low_prio_irq_handler(const void *arg)
{
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   1f234:	4901      	ldr	r1, [pc, #4]	; (1f23c <mpsl_low_prio_irq_handler+0x8>)
   1f236:	4802      	ldr	r0, [pc, #8]	; (1f240 <mpsl_low_prio_irq_handler+0xc>)
   1f238:	f00a bb9a 	b.w	29970 <k_work_submit_to_queue>
   1f23c:	20003714 	.word	0x20003714
   1f240:	20002b78 	.word	0x20002b78

0001f244 <mpsl_lib_init_sys>:

	return 0;
}

static int mpsl_lib_init_sys(void)
{
   1f244:	b537      	push	{r0, r1, r2, r4, r5, lr}
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1f246:	2332      	movs	r3, #50	; 0x32
   1f248:	f8ad 3004 	strh.w	r3, [sp, #4]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1f24c:	4a10      	ldr	r2, [pc, #64]	; (1f290 <mpsl_lib_init_sys+0x4c>)
	clock_cfg.skip_wait_lfclk_started =
   1f24e:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   1f250:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1f252:	2119      	movs	r1, #25
   1f254:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   1f256:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   1f25a:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   1f25e:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1f262:	f7ed fa3d 	bl	c6e0 <mpsl_init>
	int err = 0;

	err = mpsl_lib_init_internal();
	if (err) {
   1f266:	4604      	mov	r4, r0
   1f268:	b970      	cbnz	r0, 1f288 <mpsl_lib_init_sys+0x44>
	ARM_IRQ_DIRECT_DYNAMIC_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			IRQ_CONNECT_FLAGS, reschedule);

	mpsl_lib_irq_connect();
#else /* !IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1f26a:	4601      	mov	r1, r0
   1f26c:	462a      	mov	r2, r5
   1f26e:	2008      	movs	r0, #8
   1f270:	f7f5 ff0a 	bl	15088 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1f274:	462a      	mov	r2, r5
   1f276:	4621      	mov	r1, r4
   1f278:	200b      	movs	r0, #11
   1f27a:	f7f5 ff05 	bl	15088 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1f27e:	462a      	mov	r2, r5
   1f280:	4621      	mov	r1, r4
   1f282:	4628      	mov	r0, r5
   1f284:	f7f5 ff00 	bl	15088 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);
#endif /* IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */

	return 0;
}
   1f288:	4620      	mov	r0, r4
   1f28a:	b003      	add	sp, #12
   1f28c:	bd30      	pop	{r4, r5, pc}
   1f28e:	bf00      	nop
   1f290:	0001f2d1 	.word	0x0001f2d1

0001f294 <mpsl_low_prio_work_handler>:
{
   1f294:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1f296:	f04f 30ff 	mov.w	r0, #4294967295
   1f29a:	f04f 31ff 	mov.w	r1, #4294967295
   1f29e:	f7fe ff13 	bl	1e0c8 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   1f2a2:	b148      	cbz	r0, 1f2b8 <mpsl_low_prio_work_handler+0x24>
   1f2a4:	4907      	ldr	r1, [pc, #28]	; (1f2c4 <mpsl_low_prio_work_handler+0x30>)
   1f2a6:	4808      	ldr	r0, [pc, #32]	; (1f2c8 <mpsl_low_prio_work_handler+0x34>)
   1f2a8:	4a08      	ldr	r2, [pc, #32]	; (1f2cc <mpsl_low_prio_work_handler+0x38>)
   1f2aa:	2347      	movs	r3, #71	; 0x47
   1f2ac:	f007 ff96 	bl	271dc <assert_print>
   1f2b0:	4806      	ldr	r0, [pc, #24]	; (1f2cc <mpsl_low_prio_work_handler+0x38>)
   1f2b2:	2147      	movs	r1, #71	; 0x47
   1f2b4:	f007 ff8b 	bl	271ce <assert_post_action>
	mpsl_low_priority_process();
   1f2b8:	f7f1 fc30 	bl	10b1c <mpsl_low_priority_process>
}
   1f2bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   1f2c0:	f7fe bf0a 	b.w	1e0d8 <multithreading_lock_release>
   1f2c4:	0002e04e 	.word	0x0002e04e
   1f2c8:	0002ae37 	.word	0x0002ae37
   1f2cc:	0002e021 	.word	0x0002e021

0001f2d0 <m_assert_handler>:
{
   1f2d0:	b598      	push	{r3, r4, r7, lr}
   1f2d2:	af00      	add	r7, sp, #0
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   1f2d4:	466c      	mov	r4, sp
   1f2d6:	b08a      	sub	sp, #40	; 0x28
   1f2d8:	466a      	mov	r2, sp
   1f2da:	4b0c      	ldr	r3, [pc, #48]	; (1f30c <m_assert_handler+0x3c>)
   1f2dc:	61d1      	str	r1, [r2, #28]
   1f2de:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1f2e2:	f44f 7300 	mov.w	r3, #512	; 0x200
   1f2e6:	8413      	strh	r3, [r2, #32]
   1f2e8:	4b09      	ldr	r3, [pc, #36]	; (1f310 <m_assert_handler+0x40>)
   1f2ea:	f842 3f10 	str.w	r3, [r2, #16]!
   1f2ee:	4809      	ldr	r0, [pc, #36]	; (1f314 <m_assert_handler+0x44>)
   1f2f0:	2300      	movs	r3, #0
   1f2f2:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1f2f6:	f7f4 fec5 	bl	14084 <z_impl_z_log_msg_static_create>
   1f2fa:	46a5      	mov	sp, r4
	k_oops();
   1f2fc:	4040      	eors	r0, r0
   1f2fe:	f380 8811 	msr	BASEPRI, r0
   1f302:	f04f 0003 	mov.w	r0, #3
   1f306:	df02      	svc	2
}
   1f308:	46bd      	mov	sp, r7
   1f30a:	bd98      	pop	{r3, r4, r7, pc}
   1f30c:	0002e05b 	.word	0x0002e05b
   1f310:	01000004 	.word	0x01000004
   1f314:	0002a050 	.word	0x0002a050

0001f318 <mpsl_low_prio_init>:

static int mpsl_low_prio_init(void)
{
   1f318:	b537      	push	{r0, r1, r2, r4, r5, lr}

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   1f31a:	4d0d      	ldr	r5, [pc, #52]	; (1f350 <mpsl_low_prio_init+0x38>)
   1f31c:	490d      	ldr	r1, [pc, #52]	; (1f354 <mpsl_low_prio_init+0x3c>)
   1f31e:	2400      	movs	r4, #0
   1f320:	9400      	str	r4, [sp, #0]
   1f322:	f06f 0309 	mvn.w	r3, #9
   1f326:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1f32a:	4628      	mov	r0, r5
   1f32c:	f002 f93c 	bl	215a8 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   1f330:	4909      	ldr	r1, [pc, #36]	; (1f358 <mpsl_low_prio_init+0x40>)
   1f332:	4628      	mov	r0, r5
   1f334:	f00a fa69 	bl	2980a <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   1f338:	4908      	ldr	r1, [pc, #32]	; (1f35c <mpsl_low_prio_init+0x44>)
   1f33a:	4809      	ldr	r0, [pc, #36]	; (1f360 <mpsl_low_prio_init+0x48>)
   1f33c:	f002 f84e 	bl	213dc <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1f340:	4622      	mov	r2, r4
   1f342:	2104      	movs	r1, #4
   1f344:	2019      	movs	r0, #25
   1f346:	f7f5 fe9f 	bl	15088 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1f34a:	4620      	mov	r0, r4
   1f34c:	b003      	add	sp, #12
   1f34e:	bd30      	pop	{r4, r5, pc}
   1f350:	20002b78 	.word	0x20002b78
   1f354:	20006e80 	.word	0x20006e80
   1f358:	0002e06f 	.word	0x0002e06f
   1f35c:	0001f295 	.word	0x0001f295
   1f360:	20003714 	.word	0x20003714

0001f364 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1f364:	4b01      	ldr	r3, [pc, #4]	; (1f36c <mpsl_hfclk_callback+0x8>)
   1f366:	2000      	movs	r0, #0
   1f368:	681b      	ldr	r3, [r3, #0]
   1f36a:	4718      	bx	r3
   1f36c:	20003724 	.word	0x20003724

0001f370 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1f370:	b510      	push	{r4, lr}
	switch (domain) {
   1f372:	b130      	cbz	r0, 1f382 <nrfx_clock_start+0x12>
   1f374:	2801      	cmp	r0, #1
   1f376:	d10a      	bne.n	1f38e <nrfx_clock_start+0x1e>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1f378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1f37c:	480a      	ldr	r0, [pc, #40]	; (1f3a8 <nrfx_clock_start+0x38>)
   1f37e:	f7ed b811 	b.w	c3a4 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1f382:	4b0a      	ldr	r3, [pc, #40]	; (1f3ac <nrfx_clock_start+0x3c>)
}
   1f384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1f388:	681b      	ldr	r3, [r3, #0]
   1f38a:	2001      	movs	r0, #1
   1f38c:	4718      	bx	r3
		__ASSERT(0, "Not supported");
   1f38e:	4908      	ldr	r1, [pc, #32]	; (1f3b0 <nrfx_clock_start+0x40>)
   1f390:	4a08      	ldr	r2, [pc, #32]	; (1f3b4 <nrfx_clock_start+0x44>)
   1f392:	4809      	ldr	r0, [pc, #36]	; (1f3b8 <nrfx_clock_start+0x48>)
   1f394:	231c      	movs	r3, #28
   1f396:	f007 ff21 	bl	271dc <assert_print>
   1f39a:	4808      	ldr	r0, [pc, #32]	; (1f3bc <nrfx_clock_start+0x4c>)
   1f39c:	f007 ff1e 	bl	271dc <assert_print>
   1f3a0:	4804      	ldr	r0, [pc, #16]	; (1f3b4 <nrfx_clock_start+0x44>)
   1f3a2:	211c      	movs	r1, #28
   1f3a4:	f007 ff13 	bl	271ce <assert_post_action>
   1f3a8:	0001f365 	.word	0x0001f365
   1f3ac:	20003724 	.word	0x20003724
   1f3b0:	0002dab5 	.word	0x0002dab5
   1f3b4:	0002e083 	.word	0x0002e083
   1f3b8:	0002ae37 	.word	0x0002ae37
   1f3bc:	0002e0c0 	.word	0x0002e0c0

0001f3c0 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1f3c0:	b508      	push	{r3, lr}
	switch (domain) {
   1f3c2:	b190      	cbz	r0, 1f3ea <nrfx_clock_stop+0x2a>
   1f3c4:	2801      	cmp	r0, #1
   1f3c6:	d103      	bne.n	1f3d0 <nrfx_clock_stop+0x10>
		/* empty */
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1f3c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mpsl_clock_hfclk_release();
   1f3cc:	f7ec bfdc 	b.w	c388 <mpsl_clock_hfclk_release>
		__ASSERT(0, "Not supported");
   1f3d0:	4906      	ldr	r1, [pc, #24]	; (1f3ec <nrfx_clock_stop+0x2c>)
   1f3d2:	4a07      	ldr	r2, [pc, #28]	; (1f3f0 <nrfx_clock_stop+0x30>)
   1f3d4:	4807      	ldr	r0, [pc, #28]	; (1f3f4 <nrfx_clock_stop+0x34>)
   1f3d6:	232a      	movs	r3, #42	; 0x2a
   1f3d8:	f007 ff00 	bl	271dc <assert_print>
   1f3dc:	4806      	ldr	r0, [pc, #24]	; (1f3f8 <nrfx_clock_stop+0x38>)
   1f3de:	f007 fefd 	bl	271dc <assert_print>
   1f3e2:	4803      	ldr	r0, [pc, #12]	; (1f3f0 <nrfx_clock_stop+0x30>)
   1f3e4:	212a      	movs	r1, #42	; 0x2a
   1f3e6:	f007 fef2 	bl	271ce <assert_post_action>
}
   1f3ea:	bd08      	pop	{r3, pc}
   1f3ec:	0002dab5 	.word	0x0002dab5
   1f3f0:	0002e083 	.word	0x0002e083
   1f3f4:	0002ae37 	.word	0x0002ae37
   1f3f8:	0002e0c0 	.word	0x0002e0c0

0001f3fc <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1f3fc:	4b01      	ldr	r3, [pc, #4]	; (1f404 <nrfx_clock_init+0x8>)
   1f3fe:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1f400:	4801      	ldr	r0, [pc, #4]	; (1f408 <nrfx_clock_init+0xc>)
   1f402:	4770      	bx	lr
   1f404:	20003724 	.word	0x20003724
   1f408:	0bad0000 	.word	0x0bad0000

0001f40c <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f40c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1f410:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1f414:	2a08      	cmp	r2, #8
   1f416:	d106      	bne.n	1f426 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1f418:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
   1f41c:	2b05      	cmp	r3, #5
   1f41e:	d802      	bhi.n	1f426 <nrf52_errata_103+0x1a>
   1f420:	4a02      	ldr	r2, [pc, #8]	; (1f42c <nrf52_errata_103+0x20>)
   1f422:	5cd0      	ldrb	r0, [r2, r3]
   1f424:	4770      	bx	lr
                        return false;
   1f426:	2000      	movs	r0, #0
}
   1f428:	4770      	bx	lr
   1f42a:	bf00      	nop
   1f42c:	0002e0d6 	.word	0x0002e0d6

0001f430 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1f430:	4a02      	ldr	r2, [pc, #8]	; (1f43c <nvmc_wait+0xc>)
   1f432:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1f436:	2b00      	cmp	r3, #0
   1f438:	d0fb      	beq.n	1f432 <nvmc_wait+0x2>
}
   1f43a:	4770      	bx	lr
   1f43c:	4001e000 	.word	0x4001e000

0001f440 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
   1f440:	b510      	push	{r4, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f442:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1f446:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1f44a:	2a08      	cmp	r2, #8
   1f44c:	d14e      	bne.n	1f4ec <SystemInit+0xac>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
   1f44e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1f452:	2100      	movs	r1, #0
   1f454:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1f458:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1f45c:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1f460:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
   1f464:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
   1f468:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1f46c:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
   1f470:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1f474:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
   1f478:	f8c2 1528 	str.w	r1, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1f47c:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
   1f480:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1f484:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
   1f488:	f8c2 1530 	str.w	r1, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1f48c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1f490:	f8c2 1534 	str.w	r1, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1f494:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
   1f498:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1f49c:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
   1f4a0:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1f4a4:	f8d3 1424 	ldr.w	r1, [r3, #1060]	; 0x424
   1f4a8:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1f4ac:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
   1f4b0:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1f4b4:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
   1f4b8:	f8c2 1550 	str.w	r1, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1f4bc:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
   1f4c0:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1f4c4:	f8d3 1434 	ldr.w	r1, [r3, #1076]	; 0x434
   1f4c8:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1f4cc:	f8d3 1438 	ldr.w	r1, [r3, #1080]	; 0x438
   1f4d0:	f8c2 1564 	str.w	r1, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1f4d4:	f8d3 143c 	ldr.w	r1, [r3, #1084]	; 0x43c
   1f4d8:	f8c2 1568 	str.w	r1, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1f4dc:	f8d3 1440 	ldr.w	r1, [r3, #1088]	; 0x440
   1f4e0:	f8c2 156c 	str.w	r1, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1f4e4:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
   1f4e8:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   1f4ec:	f7ff ff8e 	bl	1f40c <nrf52_errata_103>
   1f4f0:	b118      	cbz	r0, 1f4fa <SystemInit+0xba>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1f4f2:	4b41      	ldr	r3, [pc, #260]	; (1f5f8 <SystemInit+0x1b8>)
   1f4f4:	4a41      	ldr	r2, [pc, #260]	; (1f5fc <SystemInit+0x1bc>)
   1f4f6:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1f4fa:	f7ff ff87 	bl	1f40c <nrf52_errata_103>
   1f4fe:	b118      	cbz	r0, 1f508 <SystemInit+0xc8>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1f500:	4b3f      	ldr	r3, [pc, #252]	; (1f600 <SystemInit+0x1c0>)
   1f502:	22fb      	movs	r2, #251	; 0xfb
   1f504:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1f508:	f7ff ff80 	bl	1f40c <nrf52_errata_103>
   1f50c:	b170      	cbz	r0, 1f52c <SystemInit+0xec>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1f50e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1f512:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1f516:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   1f51a:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1f51e:	f022 020f 	bic.w	r2, r2, #15
   1f522:	f003 030f 	and.w	r3, r3, #15
   1f526:	4313      	orrs	r3, r2
   1f528:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   1f52c:	f7ff ff6e 	bl	1f40c <nrf52_errata_103>
   1f530:	b120      	cbz	r0, 1f53c <SystemInit+0xfc>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1f532:	4b34      	ldr	r3, [pc, #208]	; (1f604 <SystemInit+0x1c4>)
   1f534:	f44f 7200 	mov.w	r2, #512	; 0x200
   1f538:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f53c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1f540:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1f544:	2b08      	cmp	r3, #8
   1f546:	d109      	bne.n	1f55c <SystemInit+0x11c>

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1f548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f54c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1f550:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1f552:	bf44      	itt	mi
   1f554:	f06f 0201 	mvnmi.w	r2, #1
   1f558:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
     * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
     * operations are not used in your code. */
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
   1f55c:	4a2a      	ldr	r2, [pc, #168]	; (1f608 <SystemInit+0x1c8>)
   1f55e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1f562:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   1f566:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   1f56a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1f56e:	f3bf 8f6f 	isb	sy
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1f572:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1f576:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1f57a:	2a08      	cmp	r2, #8
   1f57c:	d10e      	bne.n	1f59c <SystemInit+0x15c>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1f57e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   1f582:	2b05      	cmp	r3, #5
   1f584:	d802      	bhi.n	1f58c <SystemInit+0x14c>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   1f586:	4a21      	ldr	r2, [pc, #132]	; (1f60c <SystemInit+0x1cc>)
   1f588:	5cd3      	ldrb	r3, [r2, r3]
   1f58a:	b13b      	cbz	r3, 1f59c <SystemInit+0x15c>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1f58c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1f590:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1f594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1f598:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1f59c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1f5a0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1f5a4:	2a00      	cmp	r2, #0
   1f5a6:	db03      	blt.n	1f5b0 <SystemInit+0x170>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1f5a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1f5ac:	2b00      	cmp	r3, #0
   1f5ae:	da22      	bge.n	1f5f6 <SystemInit+0x1b6>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1f5b0:	4917      	ldr	r1, [pc, #92]	; (1f610 <SystemInit+0x1d0>)
   1f5b2:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1f5b4:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1f5b8:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1f5bc:	2412      	movs	r4, #18
    nvmc_wait();
   1f5be:	f7ff ff37 	bl	1f430 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1f5c2:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1f5c6:	f7ff ff33 	bl	1f430 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1f5ca:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1f5ce:	f7ff ff2f 	bl	1f430 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1f5d2:	2300      	movs	r3, #0
   1f5d4:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1f5d8:	f7ff ff2a 	bl	1f430 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   1f5dc:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1f5e0:	4909      	ldr	r1, [pc, #36]	; (1f608 <SystemInit+0x1c8>)
   1f5e2:	4b0c      	ldr	r3, [pc, #48]	; (1f614 <SystemInit+0x1d4>)
   1f5e4:	68ca      	ldr	r2, [r1, #12]
   1f5e6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1f5ea:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1f5ec:	60cb      	str	r3, [r1, #12]
   1f5ee:	f3bf 8f4f 	dsb	sy
    __NOP();
   1f5f2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1f5f4:	e7fd      	b.n	1f5f2 <SystemInit+0x1b2>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
   1f5f6:	bd10      	pop	{r4, pc}
   1f5f8:	40005000 	.word	0x40005000
   1f5fc:	00038148 	.word	0x00038148
   1f600:	4000f000 	.word	0x4000f000
   1f604:	40029000 	.word	0x40029000
   1f608:	e000ed00 	.word	0xe000ed00
   1f60c:	0002e0d0 	.word	0x0002e0d0
   1f610:	4001e000 	.word	0x4001e000
   1f614:	05fa0004 	.word	0x05fa0004

0001f618 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1f618:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1f61a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1f61c:	6802      	ldr	r2, [r0, #0]
   1f61e:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   1f622:	fab2 f382 	clz	r3, r2
   1f626:	f1c3 031f 	rsb	r3, r3, #31
   1f62a:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1f62c:	fa05 f403 	lsl.w	r4, r5, r3
   1f630:	ea22 0404 	bic.w	r4, r2, r4
   1f634:	e850 6f00 	ldrex	r6, [r0]
   1f638:	4296      	cmp	r6, r2
   1f63a:	d104      	bne.n	1f646 <nrfx_flag32_alloc+0x2e>
   1f63c:	e840 4c00 	strex	ip, r4, [r0]
   1f640:	f1bc 0f00 	cmp.w	ip, #0
   1f644:	d1f6      	bne.n	1f634 <nrfx_flag32_alloc+0x1c>
   1f646:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1f64a:	d1e7      	bne.n	1f61c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   1f64c:	4801      	ldr	r0, [pc, #4]	; (1f654 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   1f64e:	700b      	strb	r3, [r1, #0]
}
   1f650:	bd70      	pop	{r4, r5, r6, pc}
   1f652:	bf00      	nop
   1f654:	0bad0000 	.word	0x0bad0000

0001f658 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   1f658:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1f65a:	6803      	ldr	r3, [r0, #0]
   1f65c:	40cb      	lsrs	r3, r1
   1f65e:	07db      	lsls	r3, r3, #31
   1f660:	d414      	bmi.n	1f68c <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1f662:	2301      	movs	r3, #1
   1f664:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   1f666:	6802      	ldr	r2, [r0, #0]
   1f668:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   1f66c:	ea43 0102 	orr.w	r1, r3, r2
   1f670:	e850 4f00 	ldrex	r4, [r0]
   1f674:	4294      	cmp	r4, r2
   1f676:	d104      	bne.n	1f682 <nrfx_flag32_free+0x2a>
   1f678:	e840 1c00 	strex	ip, r1, [r0]
   1f67c:	f1bc 0f00 	cmp.w	ip, #0
   1f680:	d1f6      	bne.n	1f670 <nrfx_flag32_free+0x18>
   1f682:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1f686:	d1ee      	bne.n	1f666 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   1f688:	4801      	ldr	r0, [pc, #4]	; (1f690 <nrfx_flag32_free+0x38>)
}
   1f68a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1f68c:	4801      	ldr	r0, [pc, #4]	; (1f694 <nrfx_flag32_free+0x3c>)
   1f68e:	e7fc      	b.n	1f68a <nrfx_flag32_free+0x32>
   1f690:	0bad0000 	.word	0x0bad0000
   1f694:	0bad0004 	.word	0x0bad0004

0001f698 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1f698:	4b03      	ldr	r3, [pc, #12]	; (1f6a8 <pin_in_use_by_te+0x10>)
   1f69a:	3008      	adds	r0, #8
   1f69c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1f6a0:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1f6a4:	4770      	bx	lr
   1f6a6:	bf00      	nop
   1f6a8:	20000728 	.word	0x20000728

0001f6ac <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   1f6ac:	4b04      	ldr	r3, [pc, #16]	; (1f6c0 <pin_has_trigger+0x14>)
   1f6ae:	3008      	adds	r0, #8
   1f6b0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1f6b4:	f010 001c 	ands.w	r0, r0, #28
   1f6b8:	bf18      	it	ne
   1f6ba:	2001      	movne	r0, #1
   1f6bc:	4770      	bx	lr
   1f6be:	bf00      	nop
   1f6c0:	20000728 	.word	0x20000728

0001f6c4 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1f6c4:	4b03      	ldr	r3, [pc, #12]	; (1f6d4 <pin_is_output+0x10>)
   1f6c6:	3008      	adds	r0, #8
   1f6c8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1f6cc:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1f6d0:	4770      	bx	lr
   1f6d2:	bf00      	nop
   1f6d4:	20000728 	.word	0x20000728

0001f6d8 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1f6d8:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f6da:	f100 0308 	add.w	r3, r0, #8
   1f6de:	4c0c      	ldr	r4, [pc, #48]	; (1f710 <call_handler+0x38>)
   1f6e0:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   1f6e4:	05da      	lsls	r2, r3, #23
{
   1f6e6:	4605      	mov	r5, r0
   1f6e8:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f6ea:	d507      	bpl.n	1f6fc <call_handler+0x24>
   1f6ec:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1f6f0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1f6f4:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1f6f8:	6852      	ldr	r2, [r2, #4]
   1f6fa:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1f6fc:	68a3      	ldr	r3, [r4, #8]
   1f6fe:	b12b      	cbz	r3, 1f70c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1f700:	68e2      	ldr	r2, [r4, #12]
   1f702:	4631      	mov	r1, r6
   1f704:	4628      	mov	r0, r5
    }
}
   1f706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1f70a:	4718      	bx	r3
}
   1f70c:	bd70      	pop	{r4, r5, r6, pc}
   1f70e:	bf00      	nop
   1f710:	20000728 	.word	0x20000728

0001f714 <release_handler>:
{
   1f714:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1f716:	4a18      	ldr	r2, [pc, #96]	; (1f778 <release_handler+0x64>)
   1f718:	3008      	adds	r0, #8
   1f71a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1f71e:	05d9      	lsls	r1, r3, #23
   1f720:	d51d      	bpl.n	1f75e <release_handler+0x4a>
   1f722:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1f726:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1f72a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1f72e:	f102 040e 	add.w	r4, r2, #14
   1f732:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1f734:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   1f738:	f413 7f80 	tst.w	r3, #256	; 0x100
   1f73c:	d003      	beq.n	1f746 <release_handler+0x32>
   1f73e:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1f742:	4299      	cmp	r1, r3
   1f744:	d00b      	beq.n	1f75e <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1f746:	3001      	adds	r0, #1
   1f748:	2830      	cmp	r0, #48	; 0x30
   1f74a:	d1f3      	bne.n	1f734 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1f74c:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1f74e:	480b      	ldr	r0, [pc, #44]	; (1f77c <release_handler+0x68>)
        m_cb.handlers[handler_id].handler = NULL;
   1f750:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1f754:	f7ff ff80 	bl	1f658 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1f758:	4b09      	ldr	r3, [pc, #36]	; (1f780 <release_handler+0x6c>)
   1f75a:	4298      	cmp	r0, r3
   1f75c:	d100      	bne.n	1f760 <release_handler+0x4c>
}
   1f75e:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1f760:	4908      	ldr	r1, [pc, #32]	; (1f784 <release_handler+0x70>)
   1f762:	4809      	ldr	r0, [pc, #36]	; (1f788 <release_handler+0x74>)
   1f764:	4a09      	ldr	r2, [pc, #36]	; (1f78c <release_handler+0x78>)
   1f766:	f44f 7399 	mov.w	r3, #306	; 0x132
   1f76a:	f007 fd37 	bl	271dc <assert_print>
   1f76e:	4807      	ldr	r0, [pc, #28]	; (1f78c <release_handler+0x78>)
   1f770:	f44f 7199 	mov.w	r1, #306	; 0x132
   1f774:	f007 fd2b 	bl	271ce <assert_post_action>
   1f778:	20000728 	.word	0x20000728
   1f77c:	2000079c 	.word	0x2000079c
   1f780:	0bad0000 	.word	0x0bad0000
   1f784:	0002d7c6 	.word	0x0002d7c6
   1f788:	0002ae37 	.word	0x0002ae37
   1f78c:	0002e0dc 	.word	0x0002e0dc

0001f790 <pin_handler_trigger_uninit>:
{
   1f790:	b538      	push	{r3, r4, r5, lr}
   1f792:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1f794:	f7ff ff80 	bl	1f698 <pin_in_use_by_te>
   1f798:	4c09      	ldr	r4, [pc, #36]	; (1f7c0 <pin_handler_trigger_uninit+0x30>)
   1f79a:	f102 0508 	add.w	r5, r2, #8
   1f79e:	b140      	cbz	r0, 1f7b2 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1f7a0:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1f7a4:	4907      	ldr	r1, [pc, #28]	; (1f7c4 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1f7a6:	0b5b      	lsrs	r3, r3, #13
   1f7a8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1f7ac:	2000      	movs	r0, #0
   1f7ae:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   1f7b2:	4610      	mov	r0, r2
   1f7b4:	f7ff ffae 	bl	1f714 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1f7b8:	2300      	movs	r3, #0
   1f7ba:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1f7be:	bd38      	pop	{r3, r4, r5, pc}
   1f7c0:	20000728 	.word	0x20000728
   1f7c4:	40006000 	.word	0x40006000

0001f7c8 <nrf_gpio_pin_port_decode>:
{
   1f7c8:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f7ca:	6802      	ldr	r2, [r0, #0]
{
   1f7cc:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f7ce:	4610      	mov	r0, r2
   1f7d0:	f009 ff58 	bl	29684 <nrf_gpio_pin_present_check>
   1f7d4:	b958      	cbnz	r0, 1f7ee <nrf_gpio_pin_port_decode+0x26>
   1f7d6:	4911      	ldr	r1, [pc, #68]	; (1f81c <nrf_gpio_pin_port_decode+0x54>)
   1f7d8:	4a11      	ldr	r2, [pc, #68]	; (1f820 <nrf_gpio_pin_port_decode+0x58>)
   1f7da:	4812      	ldr	r0, [pc, #72]	; (1f824 <nrf_gpio_pin_port_decode+0x5c>)
   1f7dc:	f240 2347 	movw	r3, #583	; 0x247
   1f7e0:	f007 fcfc 	bl	271dc <assert_print>
   1f7e4:	f240 2147 	movw	r1, #583	; 0x247
            NRFX_ASSERT(0);
   1f7e8:	480d      	ldr	r0, [pc, #52]	; (1f820 <nrf_gpio_pin_port_decode+0x58>)
   1f7ea:	f007 fcf0 	bl	271ce <assert_post_action>
    *p_pin = pin_number & 0x1F;
   1f7ee:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f7f2:	0952      	lsrs	r2, r2, #5
    *p_pin = pin_number & 0x1F;
   1f7f4:	600b      	str	r3, [r1, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f7f6:	d00b      	beq.n	1f810 <nrf_gpio_pin_port_decode+0x48>
   1f7f8:	2a01      	cmp	r2, #1
   1f7fa:	d00c      	beq.n	1f816 <nrf_gpio_pin_port_decode+0x4e>
            NRFX_ASSERT(0);
   1f7fc:	490a      	ldr	r1, [pc, #40]	; (1f828 <nrf_gpio_pin_port_decode+0x60>)
   1f7fe:	4a08      	ldr	r2, [pc, #32]	; (1f820 <nrf_gpio_pin_port_decode+0x58>)
   1f800:	4808      	ldr	r0, [pc, #32]	; (1f824 <nrf_gpio_pin_port_decode+0x5c>)
   1f802:	f44f 7313 	mov.w	r3, #588	; 0x24c
   1f806:	f007 fce9 	bl	271dc <assert_print>
   1f80a:	f44f 7113 	mov.w	r1, #588	; 0x24c
   1f80e:	e7eb      	b.n	1f7e8 <nrf_gpio_pin_port_decode+0x20>
        case 0: return NRF_P0;
   1f810:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   1f814:	bd08      	pop	{r3, pc}
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f816:	4805      	ldr	r0, [pc, #20]	; (1f82c <nrf_gpio_pin_port_decode+0x64>)
   1f818:	e7fc      	b.n	1f814 <nrf_gpio_pin_port_decode+0x4c>
   1f81a:	bf00      	nop
   1f81c:	0002d76b 	.word	0x0002d76b
   1f820:	0002d738 	.word	0x0002d738
   1f824:	0002ae37 	.word	0x0002ae37
   1f828:	0002dab5 	.word	0x0002dab5
   1f82c:	50000300 	.word	0x50000300

0001f830 <nrfx_gpiote_input_configure>:
{
   1f830:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f832:	4604      	mov	r4, r0
   1f834:	b085      	sub	sp, #20
   1f836:	4617      	mov	r7, r2
   1f838:	461d      	mov	r5, r3
    if (p_input_config)
   1f83a:	b1d9      	cbz	r1, 1f874 <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
   1f83c:	f009 ff33 	bl	296a6 <pin_is_task_output>
   1f840:	bb00      	cbnz	r0, 1f884 <nrfx_gpiote_input_configure+0x54>
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1f842:	460b      	mov	r3, r1
   1f844:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1f848:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1f84c:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1f850:	f10d 020f 	add.w	r2, sp, #15
   1f854:	f10d 010e 	add.w	r1, sp, #14
   1f858:	4620      	mov	r0, r4
   1f85a:	f009 ff2f 	bl	296bc <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1f85e:	4a44      	ldr	r2, [pc, #272]	; (1f970 <nrfx_gpiote_input_configure+0x140>)
   1f860:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1f864:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1f868:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1f86c:	f043 0301 	orr.w	r3, r3, #1
   1f870:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   1f874:	b34f      	cbz	r7, 1f8ca <nrfx_gpiote_input_configure+0x9a>
        if (pin_is_output(pin))
   1f876:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1f878:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1f87a:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   1f87c:	f7ff ff22 	bl	1f6c4 <pin_is_output>
   1f880:	b110      	cbz	r0, 1f888 <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
   1f882:	b1ba      	cbz	r2, 1f8b4 <nrfx_gpiote_input_configure+0x84>
            return NRFX_ERROR_INVALID_PARAM;
   1f884:	483b      	ldr	r0, [pc, #236]	; (1f974 <nrfx_gpiote_input_configure+0x144>)
   1f886:	e022      	b.n	1f8ce <nrfx_gpiote_input_configure+0x9e>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1f888:	4b39      	ldr	r3, [pc, #228]	; (1f970 <nrfx_gpiote_input_configure+0x140>)
   1f88a:	f104 0c08 	add.w	ip, r4, #8
   1f88e:	f833 101c 	ldrh.w	r1, [r3, ip, lsl #1]
   1f892:	f021 0120 	bic.w	r1, r1, #32
   1f896:	04c9      	lsls	r1, r1, #19
   1f898:	0cc9      	lsrs	r1, r1, #19
   1f89a:	f823 101c 	strh.w	r1, [r3, ip, lsl #1]
            if (use_evt)
   1f89e:	b14a      	cbz	r2, 1f8b4 <nrfx_gpiote_input_configure+0x84>
                if (!edge)
   1f8a0:	2e03      	cmp	r6, #3
   1f8a2:	d8ef      	bhi.n	1f884 <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1f8a4:	687a      	ldr	r2, [r7, #4]
   1f8a6:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1f8a8:	b99e      	cbnz	r6, 1f8d2 <nrfx_gpiote_input_configure+0xa2>
   1f8aa:	4b33      	ldr	r3, [pc, #204]	; (1f978 <nrfx_gpiote_input_configure+0x148>)
   1f8ac:	f507 77a2 	add.w	r7, r7, #324	; 0x144
   1f8b0:	f843 6027 	str.w	r6, [r3, r7, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1f8b4:	4a2e      	ldr	r2, [pc, #184]	; (1f970 <nrfx_gpiote_input_configure+0x140>)
   1f8b6:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1f8ba:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1f8be:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1f8c2:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
   1f8c6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
   1f8ca:	bb3d      	cbnz	r5, 1f91c <nrfx_gpiote_input_configure+0xec>
        err = NRFX_SUCCESS;
   1f8cc:	482b      	ldr	r0, [pc, #172]	; (1f97c <nrfx_gpiote_input_configure+0x14c>)
}
   1f8ce:	b005      	add	sp, #20
   1f8d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1f8d2:	00ba      	lsls	r2, r7, #2
   1f8d4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1f8d8:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1f8dc:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   1f8e0:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1f8e4:	f020 0003 	bic.w	r0, r0, #3
   1f8e8:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1f8ec:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1f8f0:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   1f8f4:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   1f8f8:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f8fc:	0220      	lsls	r0, r4, #8
   1f8fe:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1f902:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
   1f906:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   1f90a:	ea40 000e 	orr.w	r0, r0, lr
   1f90e:	f041 0120 	orr.w	r1, r1, #32
   1f912:	f823 101c 	strh.w	r1, [r3, ip, lsl #1]
   1f916:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   1f91a:	e7cb      	b.n	1f8b4 <nrfx_gpiote_input_configure+0x84>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1f91c:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1f920:	4620      	mov	r0, r4
   1f922:	f7ff fef7 	bl	1f714 <release_handler>
    if (!handler)
   1f926:	2e00      	cmp	r6, #0
   1f928:	d0d0      	beq.n	1f8cc <nrfx_gpiote_input_configure+0x9c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1f92a:	4d11      	ldr	r5, [pc, #68]	; (1f970 <nrfx_gpiote_input_configure+0x140>)
   1f92c:	e9d5 2300 	ldrd	r2, r3, [r5]
   1f930:	4296      	cmp	r6, r2
   1f932:	d101      	bne.n	1f938 <nrfx_gpiote_input_configure+0x108>
   1f934:	429f      	cmp	r7, r3
   1f936:	d018      	beq.n	1f96a <nrfx_gpiote_input_configure+0x13a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1f938:	4811      	ldr	r0, [pc, #68]	; (1f980 <nrfx_gpiote_input_configure+0x150>)
   1f93a:	f10d 010f 	add.w	r1, sp, #15
   1f93e:	f7ff fe6b 	bl	1f618 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1f942:	4b0e      	ldr	r3, [pc, #56]	; (1f97c <nrfx_gpiote_input_configure+0x14c>)
   1f944:	4298      	cmp	r0, r3
   1f946:	d1c2      	bne.n	1f8ce <nrfx_gpiote_input_configure+0x9e>
        handler_id = (int32_t)id;
   1f948:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   1f94c:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1f950:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1f954:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1f956:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1f958:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   1f95c:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1f960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1f964:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   1f968:	e7b0      	b.n	1f8cc <nrfx_gpiote_input_configure+0x9c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1f96a:	2200      	movs	r2, #0
   1f96c:	e7ee      	b.n	1f94c <nrfx_gpiote_input_configure+0x11c>
   1f96e:	bf00      	nop
   1f970:	20000728 	.word	0x20000728
   1f974:	0bad0004 	.word	0x0bad0004
   1f978:	40006000 	.word	0x40006000
   1f97c:	0bad0000 	.word	0x0bad0000
   1f980:	2000079c 	.word	0x2000079c

0001f984 <nrfx_gpiote_output_configure>:
{
   1f984:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f986:	4604      	mov	r4, r0
   1f988:	b085      	sub	sp, #20
   1f98a:	4615      	mov	r5, r2
    if (p_config)
   1f98c:	b321      	cbz	r1, 1f9d8 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
   1f98e:	f7ff fe99 	bl	1f6c4 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1f992:	b920      	cbnz	r0, 1f99e <nrfx_gpiote_output_configure+0x1a>
   1f994:	4620      	mov	r0, r4
   1f996:	f7ff fe7f 	bl	1f698 <pin_in_use_by_te>
   1f99a:	2800      	cmp	r0, #0
   1f99c:	d15e      	bne.n	1fa5c <nrfx_gpiote_output_configure+0xd8>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1f99e:	4620      	mov	r0, r4
   1f9a0:	f7ff fe84 	bl	1f6ac <pin_has_trigger>
   1f9a4:	b110      	cbz	r0, 1f9ac <nrfx_gpiote_output_configure+0x28>
   1f9a6:	784b      	ldrb	r3, [r1, #1]
   1f9a8:	2b01      	cmp	r3, #1
   1f9aa:	d057      	beq.n	1fa5c <nrfx_gpiote_output_configure+0xd8>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1f9ac:	2301      	movs	r3, #1
   1f9ae:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1f9b2:	2300      	movs	r3, #0
   1f9b4:	e9cd 1300 	strd	r1, r3, [sp]
   1f9b8:	1c4a      	adds	r2, r1, #1
   1f9ba:	1c8b      	adds	r3, r1, #2
   1f9bc:	4620      	mov	r0, r4
   1f9be:	f10d 010f 	add.w	r1, sp, #15
   1f9c2:	f009 fe7b 	bl	296bc <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1f9c6:	4a26      	ldr	r2, [pc, #152]	; (1fa60 <nrfx_gpiote_output_configure+0xdc>)
   1f9c8:	f104 0108 	add.w	r1, r4, #8
   1f9cc:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   1f9d0:	f043 0303 	orr.w	r3, r3, #3
   1f9d4:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
   1f9d8:	b915      	cbnz	r5, 1f9e0 <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
   1f9da:	4822      	ldr	r0, [pc, #136]	; (1fa64 <nrfx_gpiote_output_configure+0xe0>)
}
   1f9dc:	b005      	add	sp, #20
   1f9de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   1f9e0:	4620      	mov	r0, r4
   1f9e2:	f7ff fe6f 	bl	1f6c4 <pin_is_output>
        if (pin_is_input(pin))
   1f9e6:	b3c8      	cbz	r0, 1fa5c <nrfx_gpiote_output_configure+0xd8>
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1f9e8:	4e1d      	ldr	r6, [pc, #116]	; (1fa60 <nrfx_gpiote_output_configure+0xdc>)
        uint32_t ch = p_task_config->task_ch;
   1f9ea:	f895 c000 	ldrb.w	ip, [r5]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1f9ee:	f104 0708 	add.w	r7, r4, #8
   1f9f2:	4661      	mov	r1, ip
   1f9f4:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
   1f9f8:	0089      	lsls	r1, r1, #2
   1f9fa:	f020 0020 	bic.w	r0, r0, #32
   1f9fe:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1fa02:	04c0      	lsls	r0, r0, #19
   1fa04:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   1fa08:	0cc0      	lsrs	r0, r0, #19
   1fa0a:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
   1fa0e:	2300      	movs	r3, #0
   1fa10:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1fa14:	786a      	ldrb	r2, [r5, #1]
   1fa16:	2a00      	cmp	r2, #0
   1fa18:	d0df      	beq.n	1f9da <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1fa1a:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   1fa1e:	78ad      	ldrb	r5, [r5, #2]
   1fa20:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   1fa24:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1fa28:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1fa2c:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1fa30:	0223      	lsls	r3, r4, #8
   1fa32:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1fa36:	0412      	lsls	r2, r2, #16
   1fa38:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1fa3c:	ea43 030e 	orr.w	r3, r3, lr
   1fa40:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1fa42:	052a      	lsls	r2, r5, #20
   1fa44:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1fa48:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1fa4c:	4313      	orrs	r3, r2
   1fa4e:	f040 0020 	orr.w	r0, r0, #32
   1fa52:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1fa56:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1fa5a:	e7be      	b.n	1f9da <nrfx_gpiote_output_configure+0x56>
{
   1fa5c:	4802      	ldr	r0, [pc, #8]	; (1fa68 <nrfx_gpiote_output_configure+0xe4>)
   1fa5e:	e7bd      	b.n	1f9dc <nrfx_gpiote_output_configure+0x58>
   1fa60:	20000728 	.word	0x20000728
   1fa64:	0bad0000 	.word	0x0bad0000
   1fa68:	0bad0004 	.word	0x0bad0004

0001fa6c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1fa6c:	4b01      	ldr	r3, [pc, #4]	; (1fa74 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1fa6e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1fa72:	4770      	bx	lr
   1fa74:	20000728 	.word	0x20000728

0001fa78 <nrfx_gpiote_channel_get>:
{
   1fa78:	b508      	push	{r3, lr}
   1fa7a:	4602      	mov	r2, r0
    NRFX_ASSERT(p_channel);
   1fa7c:	b959      	cbnz	r1, 1fa96 <nrfx_gpiote_channel_get+0x1e>
   1fa7e:	490c      	ldr	r1, [pc, #48]	; (1fab0 <nrfx_gpiote_channel_get+0x38>)
   1fa80:	480c      	ldr	r0, [pc, #48]	; (1fab4 <nrfx_gpiote_channel_get+0x3c>)
   1fa82:	4a0d      	ldr	r2, [pc, #52]	; (1fab8 <nrfx_gpiote_channel_get+0x40>)
   1fa84:	f240 2335 	movw	r3, #565	; 0x235
   1fa88:	f007 fba8 	bl	271dc <assert_print>
   1fa8c:	480a      	ldr	r0, [pc, #40]	; (1fab8 <nrfx_gpiote_channel_get+0x40>)
   1fa8e:	f240 2135 	movw	r1, #565	; 0x235
   1fa92:	f007 fb9c 	bl	271ce <assert_post_action>
    if (pin_in_use_by_te(pin))
   1fa96:	f7ff fdff 	bl	1f698 <pin_in_use_by_te>
   1fa9a:	b138      	cbz	r0, 1faac <nrfx_gpiote_channel_get+0x34>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1fa9c:	4b07      	ldr	r3, [pc, #28]	; (1fabc <nrfx_gpiote_channel_get+0x44>)
        return NRFX_SUCCESS;
   1fa9e:	4808      	ldr	r0, [pc, #32]	; (1fac0 <nrfx_gpiote_channel_get+0x48>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1faa0:	3208      	adds	r2, #8
   1faa2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   1faa6:	0b5b      	lsrs	r3, r3, #13
   1faa8:	700b      	strb	r3, [r1, #0]
}
   1faaa:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1faac:	4805      	ldr	r0, [pc, #20]	; (1fac4 <nrfx_gpiote_channel_get+0x4c>)
   1faae:	e7fc      	b.n	1faaa <nrfx_gpiote_channel_get+0x32>
   1fab0:	0002e11a 	.word	0x0002e11a
   1fab4:	0002ae37 	.word	0x0002ae37
   1fab8:	0002e0dc 	.word	0x0002e0dc
   1fabc:	20000728 	.word	0x20000728
   1fac0:	0bad0000 	.word	0x0bad0000
   1fac4:	0bad0004 	.word	0x0bad0004

0001fac8 <nrfx_gpiote_init>:
{
   1fac8:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1faca:	4c0f      	ldr	r4, [pc, #60]	; (1fb08 <nrfx_gpiote_init+0x40>)
   1facc:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   1fad0:	b9bd      	cbnz	r5, 1fb02 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1fad2:	2260      	movs	r2, #96	; 0x60
   1fad4:	4629      	mov	r1, r5
   1fad6:	f104 0010 	add.w	r0, r4, #16
   1fada:	f007 ffb2 	bl	27a42 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1fade:	2006      	movs	r0, #6
   1fae0:	f7f5 faa2 	bl	15028 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1fae4:	4b09      	ldr	r3, [pc, #36]	; (1fb0c <nrfx_gpiote_init+0x44>)
    return err_code;
   1fae6:	480a      	ldr	r0, [pc, #40]	; (1fb10 <nrfx_gpiote_init+0x48>)
   1fae8:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   1faec:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   1faf0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1faf4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1faf8:	2301      	movs	r3, #1
   1fafa:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1fafe:	6763      	str	r3, [r4, #116]	; 0x74
}
   1fb00:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1fb02:	4804      	ldr	r0, [pc, #16]	; (1fb14 <nrfx_gpiote_init+0x4c>)
   1fb04:	e7fc      	b.n	1fb00 <nrfx_gpiote_init+0x38>
   1fb06:	bf00      	nop
   1fb08:	20000728 	.word	0x20000728
   1fb0c:	40006000 	.word	0x40006000
   1fb10:	0bad0000 	.word	0x0bad0000
   1fb14:	0bad0005 	.word	0x0bad0005

0001fb18 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1fb18:	4b03      	ldr	r3, [pc, #12]	; (1fb28 <nrfx_gpiote_is_init+0x10>)
   1fb1a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   1fb1e:	3800      	subs	r0, #0
   1fb20:	bf18      	it	ne
   1fb22:	2001      	movne	r0, #1
   1fb24:	4770      	bx	lr
   1fb26:	bf00      	nop
   1fb28:	20000728 	.word	0x20000728

0001fb2c <nrfx_gpiote_channel_free>:
{
   1fb2c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1fb2e:	4801      	ldr	r0, [pc, #4]	; (1fb34 <nrfx_gpiote_channel_free+0x8>)
   1fb30:	f7ff bd92 	b.w	1f658 <nrfx_flag32_free>
   1fb34:	20000798 	.word	0x20000798

0001fb38 <nrfx_gpiote_channel_alloc>:
{
   1fb38:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1fb3a:	4801      	ldr	r0, [pc, #4]	; (1fb40 <nrfx_gpiote_channel_alloc+0x8>)
   1fb3c:	f7ff bd6c 	b.w	1f618 <nrfx_flag32_alloc>
   1fb40:	20000798 	.word	0x20000798

0001fb44 <nrfx_gpiote_trigger_enable>:
{
   1fb44:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1fb46:	4604      	mov	r4, r0
    NRFX_ASSERT(pin_has_trigger(pin));
   1fb48:	f7ff fdb0 	bl	1f6ac <pin_has_trigger>
   1fb4c:	b958      	cbnz	r0, 1fb66 <nrfx_gpiote_trigger_enable+0x22>
   1fb4e:	492d      	ldr	r1, [pc, #180]	; (1fc04 <nrfx_gpiote_trigger_enable+0xc0>)
   1fb50:	4a2d      	ldr	r2, [pc, #180]	; (1fc08 <nrfx_gpiote_trigger_enable+0xc4>)
   1fb52:	482e      	ldr	r0, [pc, #184]	; (1fc0c <nrfx_gpiote_trigger_enable+0xc8>)
   1fb54:	f240 33df 	movw	r3, #991	; 0x3df
   1fb58:	f007 fb40 	bl	271dc <assert_print>
   1fb5c:	f240 31df 	movw	r1, #991	; 0x3df
        NRFX_ASSERT(int_enable);
   1fb60:	4829      	ldr	r0, [pc, #164]	; (1fc08 <nrfx_gpiote_trigger_enable+0xc4>)
   1fb62:	f007 fb34 	bl	271ce <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1fb66:	4620      	mov	r0, r4
   1fb68:	f7ff fd96 	bl	1f698 <pin_in_use_by_te>
   1fb6c:	4a28      	ldr	r2, [pc, #160]	; (1fc10 <nrfx_gpiote_trigger_enable+0xcc>)
   1fb6e:	f104 0508 	add.w	r5, r4, #8
   1fb72:	b1f8      	cbz	r0, 1fbb4 <nrfx_gpiote_trigger_enable+0x70>
    return !pin_is_output(pin);
   1fb74:	4620      	mov	r0, r4
   1fb76:	f7ff fda5 	bl	1f6c4 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1fb7a:	b9d8      	cbnz	r0, 1fbb4 <nrfx_gpiote_trigger_enable+0x70>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1fb7c:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
   1fb80:	0b52      	lsrs	r2, r2, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1fb82:	0093      	lsls	r3, r2, #2
    return ((uint32_t)p_reg + event);
   1fb84:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
   1fb88:	f504 44c2 	add.w	r4, r4, #24832	; 0x6100
   1fb8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1fb90:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1fb94:	6020      	str	r0, [r4, #0]
   1fb96:	6820      	ldr	r0, [r4, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1fb98:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   1fb9c:	f040 0001 	orr.w	r0, r0, #1
   1fba0:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
        if (int_enable)
   1fba4:	b121      	cbz	r1, 1fbb0 <nrfx_gpiote_trigger_enable+0x6c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1fba6:	2301      	movs	r3, #1
   1fba8:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
   1fbaa:	4a1a      	ldr	r2, [pc, #104]	; (1fc14 <nrfx_gpiote_trigger_enable+0xd0>)
   1fbac:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1fbb0:	b003      	add	sp, #12
   1fbb2:	bd30      	pop	{r4, r5, pc}
        NRFX_ASSERT(int_enable);
   1fbb4:	b949      	cbnz	r1, 1fbca <nrfx_gpiote_trigger_enable+0x86>
   1fbb6:	4918      	ldr	r1, [pc, #96]	; (1fc18 <nrfx_gpiote_trigger_enable+0xd4>)
   1fbb8:	4a13      	ldr	r2, [pc, #76]	; (1fc08 <nrfx_gpiote_trigger_enable+0xc4>)
   1fbba:	4814      	ldr	r0, [pc, #80]	; (1fc0c <nrfx_gpiote_trigger_enable+0xc8>)
   1fbbc:	f240 33ee 	movw	r3, #1006	; 0x3ee
   1fbc0:	f007 fb0c 	bl	271dc <assert_print>
   1fbc4:	f240 31ee 	movw	r1, #1006	; 0x3ee
   1fbc8:	e7ca      	b.n	1fb60 <nrfx_gpiote_trigger_enable+0x1c>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1fbca:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
   1fbce:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1fbd2:	2b04      	cmp	r3, #4
   1fbd4:	d012      	beq.n	1fbfc <nrfx_gpiote_trigger_enable+0xb8>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1fbd6:	2b05      	cmp	r3, #5
   1fbd8:	d012      	beq.n	1fc00 <nrfx_gpiote_trigger_enable+0xbc>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1fbda:	a801      	add	r0, sp, #4
   1fbdc:	9401      	str	r4, [sp, #4]
   1fbde:	f7ff fdf3 	bl	1f7c8 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1fbe2:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1fbe4:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1fbe8:	40d9      	lsrs	r1, r3
   1fbea:	f001 0101 	and.w	r1, r1, #1
   1fbee:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1fbf0:	4620      	mov	r0, r4
}
   1fbf2:	b003      	add	sp, #12
   1fbf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1fbf8:	f009 bdad 	b.w	29756 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1fbfc:	2103      	movs	r1, #3
   1fbfe:	e7f7      	b.n	1fbf0 <nrfx_gpiote_trigger_enable+0xac>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1fc00:	2102      	movs	r1, #2
   1fc02:	e7f5      	b.n	1fbf0 <nrfx_gpiote_trigger_enable+0xac>
   1fc04:	0002e124 	.word	0x0002e124
   1fc08:	0002e0dc 	.word	0x0002e0dc
   1fc0c:	0002ae37 	.word	0x0002ae37
   1fc10:	20000728 	.word	0x20000728
   1fc14:	40006000 	.word	0x40006000
   1fc18:	0002e139 	.word	0x0002e139

0001fc1c <nrfx_gpiote_trigger_disable>:
{
   1fc1c:	b508      	push	{r3, lr}
   1fc1e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1fc20:	f7ff fd3a 	bl	1f698 <pin_in_use_by_te>
   1fc24:	b1c8      	cbz	r0, 1fc5a <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
   1fc26:	4610      	mov	r0, r2
   1fc28:	f7ff fd4c 	bl	1f6c4 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1fc2c:	b9a8      	cbnz	r0, 1fc5a <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1fc2e:	3208      	adds	r2, #8
   1fc30:	4b0d      	ldr	r3, [pc, #52]	; (1fc68 <nrfx_gpiote_trigger_disable+0x4c>)
    p_reg->INTENCLR = mask;
   1fc32:	490e      	ldr	r1, [pc, #56]	; (1fc6c <nrfx_gpiote_trigger_disable+0x50>)
   1fc34:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1fc38:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1fc3a:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1fc3c:	409a      	lsls	r2, r3
   1fc3e:	009b      	lsls	r3, r3, #2
   1fc40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1fc44:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1fc48:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1fc4c:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1fc50:	f022 0203 	bic.w	r2, r2, #3
   1fc54:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1fc58:	bd08      	pop	{r3, pc}
   1fc5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1fc5e:	2100      	movs	r1, #0
   1fc60:	4610      	mov	r0, r2
   1fc62:	f009 bd78 	b.w	29756 <nrf_gpio_cfg_sense_set>
   1fc66:	bf00      	nop
   1fc68:	20000728 	.word	0x20000728
   1fc6c:	40006000 	.word	0x40006000

0001fc70 <nrfx_gpiote_pin_uninit>:
{
   1fc70:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1fc72:	4b0e      	ldr	r3, [pc, #56]	; (1fcac <nrfx_gpiote_pin_uninit+0x3c>)
   1fc74:	f100 0208 	add.w	r2, r0, #8
{
   1fc78:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1fc7a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   1fc7e:	07db      	lsls	r3, r3, #31
   1fc80:	d511      	bpl.n	1fca6 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   1fc82:	f7ff ffcb 	bl	1fc1c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1fc86:	4620      	mov	r0, r4
   1fc88:	f7ff fd82 	bl	1f790 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1fc8c:	a801      	add	r0, sp, #4
   1fc8e:	9401      	str	r4, [sp, #4]
   1fc90:	f7ff fd9a 	bl	1f7c8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1fc94:	9b01      	ldr	r3, [sp, #4]
   1fc96:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1fc9a:	2202      	movs	r2, #2
   1fc9c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   1fca0:	4803      	ldr	r0, [pc, #12]	; (1fcb0 <nrfx_gpiote_pin_uninit+0x40>)
}
   1fca2:	b002      	add	sp, #8
   1fca4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1fca6:	4803      	ldr	r0, [pc, #12]	; (1fcb4 <nrfx_gpiote_pin_uninit+0x44>)
   1fca8:	e7fb      	b.n	1fca2 <nrfx_gpiote_pin_uninit+0x32>
   1fcaa:	bf00      	nop
   1fcac:	20000728 	.word	0x20000728
   1fcb0:	0bad0000 	.word	0x0bad0000
   1fcb4:	0bad0004 	.word	0x0bad0004

0001fcb8 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1fcb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fcbc:	4b69      	ldr	r3, [pc, #420]	; (1fe64 <nrfx_gpiote_irq_handler+0x1ac>)
    return p_reg->INTENSET & mask;
   1fcbe:	486a      	ldr	r0, [pc, #424]	; (1fe68 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1fcc0:	496a      	ldr	r1, [pc, #424]	; (1fe6c <nrfx_gpiote_irq_handler+0x1b4>)
    uint32_t status = 0;
   1fcc2:	2600      	movs	r6, #0
{
   1fcc4:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1fcc6:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1fcc8:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fcca:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1fccc:	b135      	cbz	r5, 1fcdc <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   1fcce:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1fcd2:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1fcd4:	bf1e      	ittt	ne
   1fcd6:	601c      	strne	r4, [r3, #0]
   1fcd8:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1fcda:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1fcdc:	3304      	adds	r3, #4
   1fcde:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1fce0:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1fce4:	d1f1      	bne.n	1fcca <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fce6:	f8df 9180 	ldr.w	r9, [pc, #384]	; 1fe68 <nrfx_gpiote_irq_handler+0x1b0>
   1fcea:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1fcee:	2b00      	cmp	r3, #0
   1fcf0:	f000 809b 	beq.w	1fe2a <nrfx_gpiote_irq_handler+0x172>
        *p_masks = gpio_regs[i]->LATCH;
   1fcf4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1fcf8:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   1fcfc:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1fcfe:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1fd02:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   1fd06:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1fd08:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1fd0c:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
   1fd10:	f10d 0a10 	add.w	sl, sp, #16
   1fd14:	ea4f 1348 	mov.w	r3, r8, lsl #5
   1fd18:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1fd1a:	f04f 0b01 	mov.w	fp, #1
   1fd1e:	e04b      	b.n	1fdb8 <nrfx_gpiote_irq_handler+0x100>
                pin += 32 * i;
   1fd20:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1fd22:	4a53      	ldr	r2, [pc, #332]	; (1fe70 <nrfx_gpiote_irq_handler+0x1b8>)
                uint32_t pin = NRF_CTZ(latch[i]);
   1fd24:	fa94 f4a4 	rbit	r4, r4
   1fd28:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   1fd2c:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1fd2e:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1fd30:	f104 0308 	add.w	r3, r4, #8
    bit = BITMASK_RELBIT_GET(bit);
   1fd34:	f004 0107 	and.w	r1, r4, #7
   1fd38:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   1fd3c:	f81a 3000 	ldrb.w	r3, [sl, r0]
   1fd40:	9403      	str	r4, [sp, #12]
   1fd42:	fa0b f101 	lsl.w	r1, fp, r1
   1fd46:	ea23 0301 	bic.w	r3, r3, r1
   1fd4a:	08ba      	lsrs	r2, r7, #2
   1fd4c:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1fd50:	a803      	add	r0, sp, #12
   1fd52:	9201      	str	r2, [sp, #4]
   1fd54:	f7ff fd38 	bl	1f7c8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1fd58:	9b03      	ldr	r3, [sp, #12]
    if (is_level(trigger))
   1fd5a:	9a01      	ldr	r2, [sp, #4]
   1fd5c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1fd60:	f3c7 0582 	ubfx	r5, r7, #2, #3
   1fd64:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    if (is_level(trigger))
   1fd68:	0752      	lsls	r2, r2, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1fd6a:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1fd6c:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   1fd70:	d52c      	bpl.n	1fdcc <nrfx_gpiote_irq_handler+0x114>
        call_handler(pin, trigger);
   1fd72:	4639      	mov	r1, r7
   1fd74:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1fd76:	b2dd      	uxtb	r5, r3
   1fd78:	f7ff fcae 	bl	1f6d8 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1fd7c:	a803      	add	r0, sp, #12
   1fd7e:	9403      	str	r4, [sp, #12]
   1fd80:	f7ff fd22 	bl	1f7c8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1fd84:	9b03      	ldr	r3, [sp, #12]
   1fd86:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1fd8a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1fd8e:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1fd92:	429d      	cmp	r5, r3
   1fd94:	d107      	bne.n	1fda6 <nrfx_gpiote_irq_handler+0xee>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1fd96:	2100      	movs	r1, #0
   1fd98:	4620      	mov	r0, r4
   1fd9a:	f009 fcdc 	bl	29756 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1fd9e:	4629      	mov	r1, r5
   1fda0:	4620      	mov	r0, r4
   1fda2:	f009 fcd8 	bl	29756 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1fda6:	a803      	add	r0, sp, #12
   1fda8:	9403      	str	r4, [sp, #12]
   1fdaa:	f7ff fd0d 	bl	1f7c8 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1fdae:	9b03      	ldr	r3, [sp, #12]
   1fdb0:	fa0b f303 	lsl.w	r3, fp, r3
   1fdb4:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   1fdb8:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
   1fdbc:	2c00      	cmp	r4, #0
   1fdbe:	d1af      	bne.n	1fd20 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1fdc0:	f1b8 0f00 	cmp.w	r8, #0
   1fdc4:	d11d      	bne.n	1fe02 <nrfx_gpiote_irq_handler+0x14a>
   1fdc6:	f04f 0801 	mov.w	r8, #1
   1fdca:	e7a3      	b.n	1fd14 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1fdcc:	2b02      	cmp	r3, #2
   1fdce:	d10c      	bne.n	1fdea <nrfx_gpiote_irq_handler+0x132>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1fdd0:	2103      	movs	r1, #3
   1fdd2:	4620      	mov	r0, r4
   1fdd4:	f009 fcbf 	bl	29756 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1fdd8:	f005 0305 	and.w	r3, r5, #5
   1fddc:	2b01      	cmp	r3, #1
   1fdde:	d1e2      	bne.n	1fda6 <nrfx_gpiote_irq_handler+0xee>
            call_handler(pin, trigger);
   1fde0:	4639      	mov	r1, r7
   1fde2:	4620      	mov	r0, r4
   1fde4:	f7ff fc78 	bl	1f6d8 <call_handler>
   1fde8:	e7dd      	b.n	1fda6 <nrfx_gpiote_irq_handler+0xee>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1fdea:	2102      	movs	r1, #2
   1fdec:	4620      	mov	r0, r4
   1fdee:	9301      	str	r3, [sp, #4]
   1fdf0:	f009 fcb1 	bl	29756 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1fdf4:	2d03      	cmp	r5, #3
   1fdf6:	d0f3      	beq.n	1fde0 <nrfx_gpiote_irq_handler+0x128>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1fdf8:	9b01      	ldr	r3, [sp, #4]
   1fdfa:	2b03      	cmp	r3, #3
   1fdfc:	d1d3      	bne.n	1fda6 <nrfx_gpiote_irq_handler+0xee>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1fdfe:	2d02      	cmp	r5, #2
   1fe00:	e7ed      	b.n	1fdde <nrfx_gpiote_irq_handler+0x126>
        *p_masks = gpio_regs[i]->LATCH;
   1fe02:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1fe06:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
   1fe0a:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
   1fe0e:	4919      	ldr	r1, [pc, #100]	; (1fe74 <nrfx_gpiote_irq_handler+0x1bc>)
   1fe10:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   1fe14:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1fe16:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1fe1a:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
   1fe1e:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
   1fe20:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
   1fe22:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
   1fe26:	f47f af71 	bne.w	1fd0c <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   1fe2a:	2401      	movs	r4, #1
    while (mask)
   1fe2c:	b916      	cbnz	r6, 1fe34 <nrfx_gpiote_irq_handler+0x17c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1fe2e:	b007      	add	sp, #28
   1fe30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   1fe34:	fa96 f3a6 	rbit	r3, r6
   1fe38:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1fe3c:	fa04 f203 	lsl.w	r2, r4, r3
   1fe40:	009b      	lsls	r3, r3, #2
   1fe42:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1fe46:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1fe4a:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1fe4e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1fe52:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1fe56:	f3c0 2005 	ubfx	r0, r0, #8, #6
   1fe5a:	f3c1 4101 	ubfx	r1, r1, #16, #2
   1fe5e:	f7ff fc3b 	bl	1f6d8 <call_handler>
   1fe62:	e7e3      	b.n	1fe2c <nrfx_gpiote_irq_handler+0x174>
   1fe64:	40006100 	.word	0x40006100
   1fe68:	40006000 	.word	0x40006000
   1fe6c:	40006120 	.word	0x40006120
   1fe70:	20000728 	.word	0x20000728
   1fe74:	50000300 	.word	0x50000300

0001fe78 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   1fe78:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   1fe7a:	4801      	ldr	r0, [pc, #4]	; (1fe80 <nrfx_ppi_channel_alloc+0x8>)
   1fe7c:	f7ff bbcc 	b.w	1f618 <nrfx_flag32_alloc>
   1fe80:	200007a4 	.word	0x200007a4

0001fe84 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   1fe84:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1fe86:	4c11      	ldr	r4, [pc, #68]	; (1fecc <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1fe88:	4a11      	ldr	r2, [pc, #68]	; (1fed0 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1fe8a:	4912      	ldr	r1, [pc, #72]	; (1fed4 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1fe8c:	2303      	movs	r3, #3
   1fe8e:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1fe90:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1fe92:	4b11      	ldr	r3, [pc, #68]	; (1fed8 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   1fe94:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1fe96:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1fe98:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1fe9c:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   1fe9e:	2300      	movs	r3, #0
   1fea0:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1fea2:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1fea4:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   1fea6:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1fea8:	4a0c      	ldr	r2, [pc, #48]	; (1fedc <_DoInit+0x58>)
   1feaa:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   1feac:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1feae:	2210      	movs	r2, #16
   1feb0:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1feb2:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1feb4:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1feb6:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   1feb8:	f007 fd77 	bl	279aa <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   1febc:	4908      	ldr	r1, [pc, #32]	; (1fee0 <_DoInit+0x5c>)
   1febe:	4620      	mov	r0, r4
   1fec0:	f007 fd73 	bl	279aa <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   1fec4:	2320      	movs	r3, #32
   1fec6:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   1fec8:	bd10      	pop	{r4, pc}
   1feca:	bf00      	nop
   1fecc:	20003728 	.word	0x20003728
   1fed0:	0002e164 	.word	0x0002e164
   1fed4:	0002e16d 	.word	0x0002e16d
   1fed8:	200044d3 	.word	0x200044d3
   1fedc:	200044c3 	.word	0x200044c3
   1fee0:	0002e171 	.word	0x0002e171

0001fee4 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1fee4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   1fee8:	4f21      	ldr	r7, [pc, #132]	; (1ff70 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
   1feea:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1feee:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   1fef0:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1fef4:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   1fef6:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   1fef8:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1fefa:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1fefc:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1fefe:	d831      	bhi.n	1ff64 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   1ff00:	f8d2 a020 	ldr.w	sl, [r2, #32]
   1ff04:	ebaa 0905 	sub.w	r9, sl, r5
   1ff08:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   1ff0c:	4294      	cmp	r4, r2
   1ff0e:	d811      	bhi.n	1ff34 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1ff10:	2318      	movs	r3, #24
   1ff12:	fb06 3303 	mla	r3, r6, r3, r3
   1ff16:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
   1ff18:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1ff1a:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   1ff1c:	4641      	mov	r1, r8
   1ff1e:	4428      	add	r0, r5
   1ff20:	f007 fd84 	bl	27a2c <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   1ff24:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   1ff26:	2318      	movs	r3, #24
   1ff28:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
   1ff2c:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   1ff2e:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   1ff30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   1ff34:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   1ff36:	429c      	cmp	r4, r3
   1ff38:	d818      	bhi.n	1ff6c <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1ff3a:	fb00 bb0b 	mla	fp, r0, fp, fp
   1ff3e:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   1ff40:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1ff42:	f8db 0004 	ldr.w	r0, [fp, #4]
   1ff46:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   1ff48:	4428      	add	r0, r5
   1ff4a:	f007 fd6f 	bl	27a2c <memcpy>
      if (NumBytes) {
   1ff4e:	ebb4 040a 	subs.w	r4, r4, sl
   1ff52:	d0e8      	beq.n	1ff26 <SEGGER_RTT_WriteSkipNoLock+0x42>
        memcpy((void*)pDst, pData + Rem, NumBytes);
   1ff54:	f8db 0004 	ldr.w	r0, [fp, #4]
   1ff58:	4622      	mov	r2, r4
   1ff5a:	eb08 0109 	add.w	r1, r8, r9
   1ff5e:	f007 fd65 	bl	27a2c <memcpy>
      return 1;
   1ff62:	e7e0      	b.n	1ff26 <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
   1ff64:	3b01      	subs	r3, #1
   1ff66:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   1ff68:	42a3      	cmp	r3, r4
   1ff6a:	d2d1      	bcs.n	1ff10 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   1ff6c:	2000      	movs	r0, #0
   1ff6e:	e7df      	b.n	1ff30 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   1ff70:	20003728 	.word	0x20003728

0001ff74 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   1ff74:	4b03      	ldr	r3, [pc, #12]	; (1ff84 <SEGGER_RTT_HasDataUp+0x10>)
   1ff76:	2218      	movs	r2, #24
   1ff78:	fb02 3300 	mla	r3, r2, r0, r3
   1ff7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   1ff7e:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   1ff80:	1a80      	subs	r0, r0, r2
   1ff82:	4770      	bx	lr
   1ff84:	20003728 	.word	0x20003728

0001ff88 <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   1ff88:	4803      	ldr	r0, [pc, #12]	; (1ff98 <zephyr_rtt_mutex_lock+0x10>)
   1ff8a:	f04f 32ff 	mov.w	r2, #4294967295
   1ff8e:	f04f 33ff 	mov.w	r3, #4294967295
   1ff92:	f000 bd19 	b.w	209c8 <z_impl_k_mutex_lock>
   1ff96:	bf00      	nop
   1ff98:	20000a18 	.word	0x20000a18

0001ff9c <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   1ff9c:	4801      	ldr	r0, [pc, #4]	; (1ffa4 <zephyr_rtt_mutex_unlock+0x8>)
   1ff9e:	f000 bde3 	b.w	20b68 <z_impl_k_mutex_unlock>
   1ffa2:	bf00      	nop
   1ffa4:	20000a18 	.word	0x20000a18

0001ffa8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1ffa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ffac:	b086      	sub	sp, #24
   1ffae:	4604      	mov	r4, r0
   1ffb0:	af00      	add	r7, sp, #0
   1ffb2:	460e      	mov	r6, r1
	__asm__ volatile(
   1ffb4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ffb8:	f3ef 8811 	mrs	r8, BASEPRI
   1ffbc:	f383 8812 	msr	BASEPRI_MAX, r3
   1ffc0:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1ffc4:	f002 fde8 	bl	22b98 <z_impl_z_current_get>
   1ffc8:	2c04      	cmp	r4, #4
   1ffca:	bf96      	itet	ls
   1ffcc:	4b33      	ldrls	r3, [pc, #204]	; (2009c <z_fatal_error+0xf4>)
   1ffce:	4b34      	ldrhi	r3, [pc, #208]	; (200a0 <z_fatal_error+0xf8>)
   1ffd0:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1ffd4:	46e9      	mov	r9, sp
   1ffd6:	b08a      	sub	sp, #40	; 0x28
   1ffd8:	4605      	mov	r5, r0
   1ffda:	466a      	mov	r2, sp
   1ffdc:	4931      	ldr	r1, [pc, #196]	; (200a4 <z_fatal_error+0xfc>)
   1ffde:	61d3      	str	r3, [r2, #28]
   1ffe0:	f240 3301 	movw	r3, #769	; 0x301
   1ffe4:	8493      	strh	r3, [r2, #36]	; 0x24
   1ffe6:	f04f 0a00 	mov.w	sl, #0
   1ffea:	4b2f      	ldr	r3, [pc, #188]	; (200a8 <z_fatal_error+0x100>)
   1ffec:	f8c2 a020 	str.w	sl, [r2, #32]
   1fff0:	e9c2 1405 	strd	r1, r4, [r2, #20]
   1fff4:	f842 3f10 	str.w	r3, [r2, #16]!
   1fff8:	482c      	ldr	r0, [pc, #176]	; (200ac <z_fatal_error+0x104>)
   1fffa:	4653      	mov	r3, sl
   1fffc:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   20000:	f7f4 f840 	bl	14084 <z_impl_z_log_msg_static_create>
   20004:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   20006:	b17e      	cbz	r6, 20028 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   20008:	69f3      	ldr	r3, [r6, #28]
   2000a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   2000e:	b15b      	cbz	r3, 20028 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
   20010:	4b27      	ldr	r3, [pc, #156]	; (200b0 <z_fatal_error+0x108>)
   20012:	617b      	str	r3, [r7, #20]
   20014:	2302      	movs	r3, #2
   20016:	613b      	str	r3, [r7, #16]
   20018:	4824      	ldr	r0, [pc, #144]	; (200ac <z_fatal_error+0x104>)
   2001a:	4653      	mov	r3, sl
   2001c:	f107 0210 	add.w	r2, r7, #16
   20020:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   20024:	f7f4 f82e 	bl	14084 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   20028:	b12d      	cbz	r5, 20036 <z_fatal_error+0x8e>
   2002a:	4628      	mov	r0, r5
   2002c:	f009 fbf0 	bl	29810 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   20030:	b108      	cbz	r0, 20036 <z_fatal_error+0x8e>
   20032:	7803      	ldrb	r3, [r0, #0]
   20034:	b903      	cbnz	r3, 20038 <z_fatal_error+0x90>
		thread_name = "unknown";
   20036:	481f      	ldr	r0, [pc, #124]	; (200b4 <z_fatal_error+0x10c>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   20038:	46e9      	mov	r9, sp
   2003a:	b08a      	sub	sp, #40	; 0x28
   2003c:	466a      	mov	r2, sp
   2003e:	4b1e      	ldr	r3, [pc, #120]	; (200b8 <z_fatal_error+0x110>)
   20040:	61d0      	str	r0, [r2, #28]
   20042:	e9c2 3505 	strd	r3, r5, [r2, #20]
   20046:	f240 3301 	movw	r3, #769	; 0x301
   2004a:	8413      	strh	r3, [r2, #32]
   2004c:	4b1b      	ldr	r3, [pc, #108]	; (200bc <z_fatal_error+0x114>)
   2004e:	f842 3f10 	str.w	r3, [r2, #16]!
   20052:	4816      	ldr	r0, [pc, #88]	; (200ac <z_fatal_error+0x104>)
   20054:	2300      	movs	r3, #0
   20056:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   2005a:	f7f4 f813 	bl	14084 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   2005e:	4631      	mov	r1, r6
   20060:	46cd      	mov	sp, r9
   20062:	4620      	mov	r0, r4
   20064:	f7fe f83e 	bl	1e0e4 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   20068:	2c04      	cmp	r4, #4
   2006a:	d10c      	bne.n	20086 <z_fatal_error+0xde>
   2006c:	4914      	ldr	r1, [pc, #80]	; (200c0 <z_fatal_error+0x118>)
   2006e:	4a15      	ldr	r2, [pc, #84]	; (200c4 <z_fatal_error+0x11c>)
   20070:	4815      	ldr	r0, [pc, #84]	; (200c8 <z_fatal_error+0x120>)
   20072:	2393      	movs	r3, #147	; 0x93
   20074:	f007 f8b2 	bl	271dc <assert_print>
   20078:	4814      	ldr	r0, [pc, #80]	; (200cc <z_fatal_error+0x124>)
   2007a:	f007 f8af 	bl	271dc <assert_print>
   2007e:	4811      	ldr	r0, [pc, #68]	; (200c4 <z_fatal_error+0x11c>)
   20080:	2193      	movs	r1, #147	; 0x93
   20082:	f007 f8a4 	bl	271ce <assert_post_action>
	__asm__ volatile(
   20086:	f388 8811 	msr	BASEPRI, r8
   2008a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   2008e:	4628      	mov	r0, r5
   20090:	f7f5 fd86 	bl	15ba0 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   20094:	3718      	adds	r7, #24
   20096:	46bd      	mov	sp, r7
   20098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2009c:	0002a758 	.word	0x0002a758
   200a0:	0002e178 	.word	0x0002e178
   200a4:	0002e186 	.word	0x0002e186
   200a8:	01000005 	.word	0x01000005
   200ac:	0002a070 	.word	0x0002a070
   200b0:	0002e1ae 	.word	0x0002e1ae
   200b4:	0002c062 	.word	0x0002c062
   200b8:	0002e1cf 	.word	0x0002e1cf
   200bc:	01000004 	.word	0x01000004
   200c0:	0002e209 	.word	0x0002e209
   200c4:	0002e1e7 	.word	0x0002e1e7
   200c8:	0002ae37 	.word	0x0002ae37
   200cc:	0002e226 	.word	0x0002e226

000200d0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   200d0:	4b10      	ldr	r3, [pc, #64]	; (20114 <z_sys_init_run_level+0x44>)
{
   200d2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   200d4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   200d8:	3001      	adds	r0, #1
   200da:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   200de:	42a6      	cmp	r6, r4
   200e0:	d800      	bhi.n	200e4 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
   200e2:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
   200e4:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
   200e8:	b18d      	cbz	r5, 2010e <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
   200ea:	4628      	mov	r0, r5
   200ec:	4798      	blx	r3
			if (rc != 0) {
   200ee:	b138      	cbz	r0, 20100 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   200f0:	2800      	cmp	r0, #0
   200f2:	bfb8      	it	lt
   200f4:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   200f6:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
   200f8:	28ff      	cmp	r0, #255	; 0xff
   200fa:	bfa8      	it	ge
   200fc:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   200fe:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   20100:	68ea      	ldr	r2, [r5, #12]
   20102:	7853      	ldrb	r3, [r2, #1]
   20104:	f043 0301 	orr.w	r3, r3, #1
   20108:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2010a:	3408      	adds	r4, #8
   2010c:	e7e7      	b.n	200de <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
   2010e:	4798      	blx	r3
   20110:	e7fb      	b.n	2010a <z_sys_init_run_level+0x3a>
   20112:	bf00      	nop
   20114:	0002a76c 	.word	0x0002a76c

00020118 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   20118:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   2011a:	4b0a      	ldr	r3, [pc, #40]	; (20144 <bg_thread_main+0x2c>)
   2011c:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   2011e:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   20120:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   20122:	f7ff ffd5 	bl	200d0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   20126:	f003 fddb 	bl	23ce0 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   2012a:	2004      	movs	r0, #4
   2012c:	f7ff ffd0 	bl	200d0 <z_sys_init_run_level>

	z_init_static_threads();
   20130:	f000 fb6e 	bl	20810 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
   20134:	f7f2 f852 	bl	121dc <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   20138:	4a03      	ldr	r2, [pc, #12]	; (20148 <bg_thread_main+0x30>)
   2013a:	7b13      	ldrb	r3, [r2, #12]
   2013c:	f023 0301 	bic.w	r3, r3, #1
   20140:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   20142:	bd08      	pop	{r3, pc}
   20144:	200048d3 	.word	0x200048d3
   20148:	20002d28 	.word	0x20002d28

0002014c <z_bss_zero>:
{
   2014c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   2014e:	4803      	ldr	r0, [pc, #12]	; (2015c <z_bss_zero+0x10>)
   20150:	4a03      	ldr	r2, [pc, #12]	; (20160 <z_bss_zero+0x14>)
   20152:	2100      	movs	r1, #0
   20154:	1a12      	subs	r2, r2, r0
   20156:	f009 fb20 	bl	2979a <z_early_memset>
}
   2015a:	bd08      	pop	{r3, pc}
   2015c:	20000c18 	.word	0x20000c18
   20160:	200048d8 	.word	0x200048d8

00020164 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   20164:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   20166:	4e16      	ldr	r6, [pc, #88]	; (201c0 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   20168:	4d16      	ldr	r5, [pc, #88]	; (201c4 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   2016a:	4917      	ldr	r1, [pc, #92]	; (201c8 <z_init_cpu+0x64>)
	struct k_thread *thread = &z_idle_threads[i];
   2016c:	23c8      	movs	r3, #200	; 0xc8
{
   2016e:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   20170:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
   20174:	2201      	movs	r2, #1
   20176:	2300      	movs	r3, #0
   20178:	e9cd 2304 	strd	r2, r3, [sp, #16]
   2017c:	220f      	movs	r2, #15
   2017e:	e9cd 3202 	strd	r3, r2, [sp, #8]
   20182:	9301      	str	r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   20184:	2318      	movs	r3, #24
   20186:	fb03 5500 	mla	r5, r3, r0, r5
{
   2018a:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   2018c:	f44f 70c0 	mov.w	r0, #384	; 0x180
   20190:	fb00 1104 	mla	r1, r0, r4, r1
   20194:	4b0d      	ldr	r3, [pc, #52]	; (201cc <z_init_cpu+0x68>)
   20196:	9500      	str	r5, [sp, #0]
   20198:	f44f 72a0 	mov.w	r2, #320	; 0x140
   2019c:	4630      	mov	r0, r6
   2019e:	f000 fa99 	bl	206d4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   201a2:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   201a4:	4a0a      	ldr	r2, [pc, #40]	; (201d0 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   201a6:	60ee      	str	r6, [r5, #12]
   201a8:	f023 0304 	bic.w	r3, r3, #4
   201ac:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   201ae:	f44f 6308 	mov.w	r3, #2176	; 0x880
   201b2:	fb04 3303 	mla	r3, r4, r3, r3
   201b6:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
   201b8:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].irq_stack =
   201ba:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   201bc:	b006      	add	sp, #24
   201be:	bd70      	pop	{r4, r5, r6, pc}
   201c0:	20002c60 	.word	0x20002c60
   201c4:	200037d0 	.word	0x200037d0
   201c8:	20007b80 	.word	0x20007b80
   201cc:	00020965 	.word	0x00020965
   201d0:	20007300 	.word	0x20007300

000201d4 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   201d4:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   201d6:	2000      	movs	r0, #0
{
   201d8:	b0b8      	sub	sp, #224	; 0xe0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   201da:	f7ff ff79 	bl	200d0 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   201de:	4b2f      	ldr	r3, [pc, #188]	; (2029c <z_cstart+0xc8>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   201e0:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   201e4:	4c2e      	ldr	r4, [pc, #184]	; (202a0 <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   201e6:	4e2f      	ldr	r6, [pc, #188]	; (202a4 <z_cstart+0xd0>)
   201e8:	6963      	ldr	r3, [r4, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   201ea:	4f2f      	ldr	r7, [pc, #188]	; (202a8 <z_cstart+0xd4>)
   201ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   201f0:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   201f2:	23e0      	movs	r3, #224	; 0xe0
   201f4:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   201f8:	2500      	movs	r5, #0
   201fa:	2320      	movs	r3, #32
   201fc:	77e3      	strb	r3, [r4, #31]
   201fe:	7625      	strb	r5, [r4, #24]
   20200:	7665      	strb	r5, [r4, #25]
   20202:	76a5      	strb	r5, [r4, #26]
   20204:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   20208:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2020a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   2020e:	6263      	str	r3, [r4, #36]	; 0x24
   20210:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   20214:	f7f5 fc38 	bl	15a88 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   20218:	f7f4 fe36 	bl	14e88 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   2021c:	f04f 33ff 	mov.w	r3, #4294967295
   20220:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   20222:	62e3      	str	r3, [r4, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
   20224:	ac06      	add	r4, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   20226:	f7f5 fdc7 	bl	15db8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   2022a:	f7f5 fccf 	bl	15bcc <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   2022e:	f7f3 fd17 	bl	13c60 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   20232:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   20236:	4620      	mov	r0, r4
	dummy_thread->base.user_options = K_ESSENTIAL;
   20238:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   2023c:	e9cd 5520 	strd	r5, r5, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   20240:	f003 fd30 	bl	23ca4 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   20244:	60b4      	str	r4, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   20246:	f009 fa9c 	bl	29782 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   2024a:	2001      	movs	r0, #1
   2024c:	f7ff ff40 	bl	200d0 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   20250:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   20252:	4c16      	ldr	r4, [pc, #88]	; (202ac <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   20254:	f7ff ff3c 	bl	200d0 <z_sys_init_run_level>
	z_sched_init();
   20258:	f002 fb28 	bl	228ac <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2025c:	4b14      	ldr	r3, [pc, #80]	; (202b0 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   2025e:	61f4      	str	r4, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   20260:	9305      	str	r3, [sp, #20]
   20262:	2301      	movs	r3, #1
   20264:	4913      	ldr	r1, [pc, #76]	; (202b4 <z_cstart+0xe0>)
   20266:	9500      	str	r5, [sp, #0]
   20268:	e9cd 5303 	strd	r5, r3, [sp, #12]
   2026c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   20270:	463b      	mov	r3, r7
   20272:	e9cd 5501 	strd	r5, r5, [sp, #4]
   20276:	4620      	mov	r0, r4
   20278:	f000 fa2c 	bl	206d4 <z_setup_new_thread>
   2027c:	7b62      	ldrb	r2, [r4, #13]
   2027e:	4606      	mov	r6, r0
   20280:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   20284:	4620      	mov	r0, r4
   20286:	7362      	strb	r2, [r4, #13]
   20288:	f001 fcf6 	bl	21c78 <z_ready_thread>
	z_init_cpu(0);
   2028c:	4628      	mov	r0, r5
   2028e:	f7ff ff69 	bl	20164 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   20292:	463a      	mov	r2, r7
   20294:	4631      	mov	r1, r6
   20296:	4620      	mov	r0, r4
   20298:	f7f5 f862 	bl	15360 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   2029c:	20007b80 	.word	0x20007b80
   202a0:	e000ed00 	.word	0xe000ed00
   202a4:	200037d0 	.word	0x200037d0
   202a8:	00020119 	.word	0x00020119
   202ac:	20002d28 	.word	0x20002d28
   202b0:	0002e2a5 	.word	0x0002e2a5
   202b4:	20007d00 	.word	0x20007d00

000202b8 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
   202b8:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   202ba:	4c0d      	ldr	r4, [pc, #52]	; (202f0 <statics_init+0x38>)
   202bc:	4d0d      	ldr	r5, [pc, #52]	; (202f4 <statics_init+0x3c>)
   202be:	42ac      	cmp	r4, r5
   202c0:	d913      	bls.n	202ea <statics_init+0x32>
   202c2:	490d      	ldr	r1, [pc, #52]	; (202f8 <statics_init+0x40>)
   202c4:	4a0d      	ldr	r2, [pc, #52]	; (202fc <statics_init+0x44>)
   202c6:	480e      	ldr	r0, [pc, #56]	; (20300 <statics_init+0x48>)
   202c8:	2317      	movs	r3, #23
   202ca:	f006 ff87 	bl	271dc <assert_print>
   202ce:	480d      	ldr	r0, [pc, #52]	; (20304 <statics_init+0x4c>)
   202d0:	f006 ff84 	bl	271dc <assert_print>
   202d4:	4809      	ldr	r0, [pc, #36]	; (202fc <statics_init+0x44>)
   202d6:	2117      	movs	r1, #23
   202d8:	f006 ff79 	bl	271ce <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   202dc:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   202e0:	4620      	mov	r0, r4
   202e2:	f009 fa5e 	bl	297a2 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   202e6:	3418      	adds	r4, #24
   202e8:	e7e9      	b.n	202be <statics_init+0x6>
   202ea:	d3f7      	bcc.n	202dc <statics_init+0x24>
		}
	}
	return 0;
}
   202ec:	2000      	movs	r0, #0
   202ee:	bd38      	pop	{r3, r4, r5, pc}
   202f0:	200009b0 	.word	0x200009b0
   202f4:	200009c8 	.word	0x200009c8
   202f8:	0002e2cf 	.word	0x0002e2cf
   202fc:	0002e2ad 	.word	0x0002e2ad
   20300:	0002ae37 	.word	0x0002ae37
   20304:	0002b3ac 	.word	0x0002b3ac

00020308 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   20308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2030c:	b085      	sub	sp, #20
   2030e:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   20312:	4680      	mov	r8, r0
   20314:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   20316:	4648      	mov	r0, r9
   20318:	4659      	mov	r1, fp
{
   2031a:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2031c:	f009 fb78 	bl	29a10 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   20320:	f1bb 3fff 	cmp.w	fp, #4294967295
   20324:	bf08      	it	eq
   20326:	f1b9 3fff 	cmpeq.w	r9, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2032a:	4606      	mov	r6, r0
   2032c:	460f      	mov	r7, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   2032e:	bf04      	itt	eq
   20330:	f04f 36ff 	moveq.w	r6, #4294967295
   20334:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   20338:	f108 0414 	add.w	r4, r8, #20
	__asm__ volatile(
   2033c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20340:	f3ef 8511 	mrs	r5, BASEPRI
   20344:	f383 8812 	msr	BASEPRI_MAX, r3
   20348:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2034c:	4620      	mov	r0, r4
   2034e:	f000 fae3 	bl	20918 <z_spin_lock_valid>
   20352:	b960      	cbnz	r0, 2036e <k_heap_aligned_alloc+0x66>
   20354:	4a33      	ldr	r2, [pc, #204]	; (20424 <k_heap_aligned_alloc+0x11c>)
   20356:	4934      	ldr	r1, [pc, #208]	; (20428 <k_heap_aligned_alloc+0x120>)
   20358:	4834      	ldr	r0, [pc, #208]	; (2042c <k_heap_aligned_alloc+0x124>)
   2035a:	2394      	movs	r3, #148	; 0x94
   2035c:	f006 ff3e 	bl	271dc <assert_print>
   20360:	4621      	mov	r1, r4
   20362:	4833      	ldr	r0, [pc, #204]	; (20430 <k_heap_aligned_alloc+0x128>)
   20364:	f006 ff3a 	bl	271dc <assert_print>
   20368:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2036a:	482e      	ldr	r0, [pc, #184]	; (20424 <k_heap_aligned_alloc+0x11c>)
   2036c:	e031      	b.n	203d2 <k_heap_aligned_alloc+0xca>
	z_spin_lock_set_owner(l);
   2036e:	4620      	mov	r0, r4
   20370:	f000 faf0 	bl	20954 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   20374:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   20378:	b113      	cbz	r3, 20380 <k_heap_aligned_alloc+0x78>
   2037a:	ea5b 0909 	orrs.w	r9, fp, r9
   2037e:	d11d      	bne.n	203bc <k_heap_aligned_alloc+0xb4>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   20380:	f108 0b0c 	add.w	fp, r8, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   20384:	9903      	ldr	r1, [sp, #12]
   20386:	4652      	mov	r2, sl
   20388:	4640      	mov	r0, r8
   2038a:	f7f2 fcd5 	bl	12d38 <sys_heap_aligned_alloc>
   2038e:	4681      	mov	r9, r0
		now = sys_clock_tick_get();
   20390:	f002 ffa0 	bl	232d4 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   20394:	f1b9 0f00 	cmp.w	r9, #0
   20398:	d01d      	beq.n	203d6 <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2039a:	4620      	mov	r0, r4
   2039c:	f000 faca 	bl	20934 <z_spin_unlock_valid>
   203a0:	2800      	cmp	r0, #0
   203a2:	d137      	bne.n	20414 <k_heap_aligned_alloc+0x10c>
   203a4:	4a1f      	ldr	r2, [pc, #124]	; (20424 <k_heap_aligned_alloc+0x11c>)
   203a6:	4923      	ldr	r1, [pc, #140]	; (20434 <k_heap_aligned_alloc+0x12c>)
   203a8:	4820      	ldr	r0, [pc, #128]	; (2042c <k_heap_aligned_alloc+0x124>)
   203aa:	23c2      	movs	r3, #194	; 0xc2
   203ac:	f006 ff16 	bl	271dc <assert_print>
   203b0:	4621      	mov	r1, r4
   203b2:	4821      	ldr	r0, [pc, #132]	; (20438 <k_heap_aligned_alloc+0x130>)
   203b4:	f006 ff12 	bl	271dc <assert_print>
   203b8:	21c2      	movs	r1, #194	; 0xc2
   203ba:	e7d6      	b.n	2036a <k_heap_aligned_alloc+0x62>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   203bc:	491f      	ldr	r1, [pc, #124]	; (2043c <k_heap_aligned_alloc+0x134>)
   203be:	4a20      	ldr	r2, [pc, #128]	; (20440 <k_heap_aligned_alloc+0x138>)
   203c0:	481a      	ldr	r0, [pc, #104]	; (2042c <k_heap_aligned_alloc+0x124>)
   203c2:	234b      	movs	r3, #75	; 0x4b
   203c4:	f006 ff0a 	bl	271dc <assert_print>
   203c8:	481e      	ldr	r0, [pc, #120]	; (20444 <k_heap_aligned_alloc+0x13c>)
   203ca:	f006 ff07 	bl	271dc <assert_print>
   203ce:	481c      	ldr	r0, [pc, #112]	; (20440 <k_heap_aligned_alloc+0x138>)
   203d0:	214b      	movs	r1, #75	; 0x4b
   203d2:	f006 fefc 	bl	271ce <assert_post_action>
		    (ret != NULL) || ((end - now) <= 0)) {
   203d6:	1a30      	subs	r0, r6, r0
   203d8:	eb67 0101 	sbc.w	r1, r7, r1
   203dc:	2801      	cmp	r0, #1
   203de:	f171 0300 	sbcs.w	r3, r1, #0
   203e2:	dbda      	blt.n	2039a <k_heap_aligned_alloc+0x92>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   203e4:	e9cd 0100 	strd	r0, r1, [sp]
   203e8:	465a      	mov	r2, fp
   203ea:	4629      	mov	r1, r5
   203ec:	4620      	mov	r0, r4
   203ee:	f001 ff8d 	bl	2230c <z_pend_curr>
   203f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   203f6:	f3ef 8511 	mrs	r5, BASEPRI
   203fa:	f383 8812 	msr	BASEPRI_MAX, r3
   203fe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20402:	4620      	mov	r0, r4
   20404:	f000 fa88 	bl	20918 <z_spin_lock_valid>
   20408:	2800      	cmp	r0, #0
   2040a:	d0a3      	beq.n	20354 <k_heap_aligned_alloc+0x4c>
	z_spin_lock_set_owner(l);
   2040c:	4620      	mov	r0, r4
   2040e:	f000 faa1 	bl	20954 <z_spin_lock_set_owner>
	return k;
   20412:	e7b7      	b.n	20384 <k_heap_aligned_alloc+0x7c>
	__asm__ volatile(
   20414:	f385 8811 	msr	BASEPRI, r5
   20418:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2041c:	4648      	mov	r0, r9
   2041e:	b005      	add	sp, #20
   20420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20424:	0002b22b 	.word	0x0002b22b
   20428:	0002b284 	.word	0x0002b284
   2042c:	0002ae37 	.word	0x0002ae37
   20430:	0002b299 	.word	0x0002b299
   20434:	0002b258 	.word	0x0002b258
   20438:	0002b26f 	.word	0x0002b26f
   2043c:	0002e2e5 	.word	0x0002e2e5
   20440:	0002e2ad 	.word	0x0002e2ad
   20444:	0002d49e 	.word	0x0002d49e

00020448 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   20448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2044a:	4605      	mov	r5, r0
   2044c:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2044e:	f100 0414 	add.w	r4, r0, #20
	__asm__ volatile(
   20452:	f04f 0340 	mov.w	r3, #64	; 0x40
   20456:	f3ef 8711 	mrs	r7, BASEPRI
   2045a:	f383 8812 	msr	BASEPRI_MAX, r3
   2045e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20462:	4620      	mov	r0, r4
   20464:	f000 fa58 	bl	20918 <z_spin_lock_valid>
   20468:	b968      	cbnz	r0, 20486 <k_heap_free+0x3e>
   2046a:	4a1a      	ldr	r2, [pc, #104]	; (204d4 <k_heap_free+0x8c>)
   2046c:	491a      	ldr	r1, [pc, #104]	; (204d8 <k_heap_free+0x90>)
   2046e:	481b      	ldr	r0, [pc, #108]	; (204dc <k_heap_free+0x94>)
   20470:	2394      	movs	r3, #148	; 0x94
   20472:	f006 feb3 	bl	271dc <assert_print>
   20476:	4621      	mov	r1, r4
   20478:	4819      	ldr	r0, [pc, #100]	; (204e0 <k_heap_free+0x98>)
   2047a:	f006 feaf 	bl	271dc <assert_print>
   2047e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20480:	4814      	ldr	r0, [pc, #80]	; (204d4 <k_heap_free+0x8c>)
   20482:	f006 fea4 	bl	271ce <assert_post_action>
	z_spin_lock_set_owner(l);
   20486:	4620      	mov	r0, r4
   20488:	f000 fa64 	bl	20954 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   2048c:	4628      	mov	r0, r5
   2048e:	4631      	mov	r1, r6
   20490:	f7f2 fc0c 	bl	12cac <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   20494:	f105 000c 	add.w	r0, r5, #12
   20498:	f009 faa0 	bl	299dc <z_unpend_all>
   2049c:	b128      	cbz	r0, 204aa <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   2049e:	4639      	mov	r1, r7
   204a0:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   204a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   204a6:	f001 bc75 	b.w	21d94 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   204aa:	4620      	mov	r0, r4
   204ac:	f000 fa42 	bl	20934 <z_spin_unlock_valid>
   204b0:	b958      	cbnz	r0, 204ca <k_heap_free+0x82>
   204b2:	4a08      	ldr	r2, [pc, #32]	; (204d4 <k_heap_free+0x8c>)
   204b4:	490b      	ldr	r1, [pc, #44]	; (204e4 <k_heap_free+0x9c>)
   204b6:	4809      	ldr	r0, [pc, #36]	; (204dc <k_heap_free+0x94>)
   204b8:	23c2      	movs	r3, #194	; 0xc2
   204ba:	f006 fe8f 	bl	271dc <assert_print>
   204be:	4621      	mov	r1, r4
   204c0:	4809      	ldr	r0, [pc, #36]	; (204e8 <k_heap_free+0xa0>)
   204c2:	f006 fe8b 	bl	271dc <assert_print>
   204c6:	21c2      	movs	r1, #194	; 0xc2
   204c8:	e7da      	b.n	20480 <k_heap_free+0x38>
	__asm__ volatile(
   204ca:	f387 8811 	msr	BASEPRI, r7
   204ce:	f3bf 8f6f 	isb	sy
}
   204d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   204d4:	0002b22b 	.word	0x0002b22b
   204d8:	0002b284 	.word	0x0002b284
   204dc:	0002ae37 	.word	0x0002ae37
   204e0:	0002b299 	.word	0x0002b299
   204e4:	0002b258 	.word	0x0002b258
   204e8:	0002b26f 	.word	0x0002b26f

000204ec <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
   204ec:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   204ee:	4c0d      	ldr	r4, [pc, #52]	; (20524 <init_mem_slab_module+0x38>)
   204f0:	4d0d      	ldr	r5, [pc, #52]	; (20528 <init_mem_slab_module+0x3c>)
	int rc = 0;
   204f2:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   204f4:	42ac      	cmp	r4, r5
   204f6:	d913      	bls.n	20520 <init_mem_slab_module+0x34>
   204f8:	490c      	ldr	r1, [pc, #48]	; (2052c <init_mem_slab_module+0x40>)
   204fa:	4a0d      	ldr	r2, [pc, #52]	; (20530 <init_mem_slab_module+0x44>)
   204fc:	480d      	ldr	r0, [pc, #52]	; (20534 <init_mem_slab_module+0x48>)
   204fe:	233c      	movs	r3, #60	; 0x3c
   20500:	f006 fe6c 	bl	271dc <assert_print>
   20504:	480c      	ldr	r0, [pc, #48]	; (20538 <init_mem_slab_module+0x4c>)
   20506:	f006 fe69 	bl	271dc <assert_print>
   2050a:	4809      	ldr	r0, [pc, #36]	; (20530 <init_mem_slab_module+0x44>)
   2050c:	213c      	movs	r1, #60	; 0x3c
   2050e:	f006 fe5e 	bl	271ce <assert_post_action>
		rc = create_free_list(slab);
   20512:	4620      	mov	r0, r4
   20514:	f009 f94e 	bl	297b4 <create_free_list>
		if (rc < 0) {
   20518:	2800      	cmp	r0, #0
   2051a:	db02      	blt.n	20522 <init_mem_slab_module+0x36>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2051c:	3420      	adds	r4, #32
   2051e:	e7e9      	b.n	204f4 <init_mem_slab_module+0x8>
   20520:	d3f7      	bcc.n	20512 <init_mem_slab_module+0x26>
		z_object_init(slab);
	}

out:
	return rc;
}
   20522:	bd38      	pop	{r3, r4, r5, pc}
   20524:	20000950 	.word	0x20000950
   20528:	200009b0 	.word	0x200009b0
   2052c:	0002e350 	.word	0x0002e350
   20530:	0002e32b 	.word	0x0002e32b
   20534:	0002ae37 	.word	0x0002ae37
   20538:	0002b3ac 	.word	0x0002b3ac

0002053c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   2053c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   20540:	4604      	mov	r4, r0
   20542:	460e      	mov	r6, r1
   20544:	4690      	mov	r8, r2
   20546:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   20548:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2054c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20550:	f3ef 8911 	mrs	r9, BASEPRI
   20554:	f383 8812 	msr	BASEPRI_MAX, r3
   20558:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2055c:	4628      	mov	r0, r5
   2055e:	f000 f9db 	bl	20918 <z_spin_lock_valid>
   20562:	b968      	cbnz	r0, 20580 <k_mem_slab_alloc+0x44>
   20564:	4a23      	ldr	r2, [pc, #140]	; (205f4 <k_mem_slab_alloc+0xb8>)
   20566:	4924      	ldr	r1, [pc, #144]	; (205f8 <k_mem_slab_alloc+0xbc>)
   20568:	4824      	ldr	r0, [pc, #144]	; (205fc <k_mem_slab_alloc+0xc0>)
   2056a:	2394      	movs	r3, #148	; 0x94
   2056c:	f006 fe36 	bl	271dc <assert_print>
   20570:	4629      	mov	r1, r5
   20572:	4823      	ldr	r0, [pc, #140]	; (20600 <k_mem_slab_alloc+0xc4>)
   20574:	f006 fe32 	bl	271dc <assert_print>
   20578:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2057a:	481e      	ldr	r0, [pc, #120]	; (205f4 <k_mem_slab_alloc+0xb8>)
   2057c:	f006 fe27 	bl	271ce <assert_post_action>
	z_spin_lock_set_owner(l);
   20580:	4628      	mov	r0, r5
   20582:	f000 f9e7 	bl	20954 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   20586:	69a3      	ldr	r3, [r4, #24]
   20588:	b1b3      	cbz	r3, 205b8 <k_mem_slab_alloc+0x7c>
		/* take a free block */
		*mem = slab->free_list;
   2058a:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   2058c:	681b      	ldr	r3, [r3, #0]
   2058e:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   20590:	69e3      	ldr	r3, [r4, #28]
   20592:	3301      	adds	r3, #1
   20594:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   20596:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20598:	4628      	mov	r0, r5
   2059a:	f000 f9cb 	bl	20934 <z_spin_unlock_valid>
   2059e:	bb18      	cbnz	r0, 205e8 <k_mem_slab_alloc+0xac>
   205a0:	4a14      	ldr	r2, [pc, #80]	; (205f4 <k_mem_slab_alloc+0xb8>)
   205a2:	4918      	ldr	r1, [pc, #96]	; (20604 <k_mem_slab_alloc+0xc8>)
   205a4:	4815      	ldr	r0, [pc, #84]	; (205fc <k_mem_slab_alloc+0xc0>)
   205a6:	23c2      	movs	r3, #194	; 0xc2
   205a8:	f006 fe18 	bl	271dc <assert_print>
   205ac:	4629      	mov	r1, r5
   205ae:	4816      	ldr	r0, [pc, #88]	; (20608 <k_mem_slab_alloc+0xcc>)
   205b0:	f006 fe14 	bl	271dc <assert_print>
   205b4:	21c2      	movs	r1, #194	; 0xc2
   205b6:	e7e0      	b.n	2057a <k_mem_slab_alloc+0x3e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   205b8:	ea58 0207 	orrs.w	r2, r8, r7
   205bc:	d103      	bne.n	205c6 <k_mem_slab_alloc+0x8a>
		   !IS_ENABLED(CONFIG_MULTITHREADING)) {
		/* don't wait for a free block to become available */
		*mem = NULL;
   205be:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   205c0:	f06f 040b 	mvn.w	r4, #11
   205c4:	e7e8      	b.n	20598 <k_mem_slab_alloc+0x5c>
	} else {
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mem_slab, alloc, slab, timeout);

		/* wait for a free block or timeout */
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   205c6:	4622      	mov	r2, r4
   205c8:	e9cd 8700 	strd	r8, r7, [sp]
   205cc:	4649      	mov	r1, r9
   205ce:	4628      	mov	r0, r5
   205d0:	f001 fe9c 	bl	2230c <z_pend_curr>
		if (result == 0) {
   205d4:	4604      	mov	r4, r0
   205d6:	b918      	cbnz	r0, 205e0 <k_mem_slab_alloc+0xa4>
			*mem = _current->base.swap_data;
   205d8:	4b0c      	ldr	r3, [pc, #48]	; (2060c <k_mem_slab_alloc+0xd0>)
   205da:	689b      	ldr	r3, [r3, #8]
   205dc:	695b      	ldr	r3, [r3, #20]
   205de:	6033      	str	r3, [r6, #0]
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   205e0:	4620      	mov	r0, r4
   205e2:	b003      	add	sp, #12
   205e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
   205e8:	f389 8811 	msr	BASEPRI, r9
   205ec:	f3bf 8f6f 	isb	sy
	return result;
   205f0:	e7f6      	b.n	205e0 <k_mem_slab_alloc+0xa4>
   205f2:	bf00      	nop
   205f4:	0002b22b 	.word	0x0002b22b
   205f8:	0002b284 	.word	0x0002b284
   205fc:	0002ae37 	.word	0x0002ae37
   20600:	0002b299 	.word	0x0002b299
   20604:	0002b258 	.word	0x0002b258
   20608:	0002b26f 	.word	0x0002b26f
   2060c:	200037d0 	.word	0x200037d0

00020610 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   20610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20614:	4604      	mov	r4, r0
   20616:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   20618:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2061c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20620:	f3ef 8711 	mrs	r7, BASEPRI
   20624:	f383 8812 	msr	BASEPRI_MAX, r3
   20628:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2062c:	4628      	mov	r0, r5
   2062e:	f000 f973 	bl	20918 <z_spin_lock_valid>
   20632:	b968      	cbnz	r0, 20650 <k_mem_slab_free+0x40>
   20634:	4a21      	ldr	r2, [pc, #132]	; (206bc <k_mem_slab_free+0xac>)
   20636:	4922      	ldr	r1, [pc, #136]	; (206c0 <k_mem_slab_free+0xb0>)
   20638:	4822      	ldr	r0, [pc, #136]	; (206c4 <k_mem_slab_free+0xb4>)
   2063a:	2394      	movs	r3, #148	; 0x94
   2063c:	f006 fdce 	bl	271dc <assert_print>
   20640:	4629      	mov	r1, r5
   20642:	4821      	ldr	r0, [pc, #132]	; (206c8 <k_mem_slab_free+0xb8>)
   20644:	f006 fdca 	bl	271dc <assert_print>
   20648:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2064a:	481c      	ldr	r0, [pc, #112]	; (206bc <k_mem_slab_free+0xac>)
   2064c:	f006 fdbf 	bl	271ce <assert_post_action>
	z_spin_lock_set_owner(l);
   20650:	4628      	mov	r0, r5
   20652:	f000 f97f 	bl	20954 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   20656:	f8d4 8018 	ldr.w	r8, [r4, #24]
   2065a:	f1b8 0f00 	cmp.w	r8, #0
   2065e:	d10f      	bne.n	20680 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   20660:	4620      	mov	r0, r4
   20662:	f002 f8d3 	bl	2280c <z_unpend_first_thread>

		if (pending_thread != NULL) {
   20666:	b158      	cbz	r0, 20680 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   20668:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2066a:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   2066c:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   20670:	f001 fb02 	bl	21c78 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   20674:	4639      	mov	r1, r7
   20676:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   20678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   2067c:	f001 bb8a 	b.w	21d94 <z_reschedule>
	**(char ***) mem = slab->free_list;
   20680:	6833      	ldr	r3, [r6, #0]
   20682:	69a2      	ldr	r2, [r4, #24]
   20684:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   20686:	6833      	ldr	r3, [r6, #0]
   20688:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   2068a:	69e3      	ldr	r3, [r4, #28]
   2068c:	3b01      	subs	r3, #1
   2068e:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20690:	4628      	mov	r0, r5
   20692:	f000 f94f 	bl	20934 <z_spin_unlock_valid>
   20696:	b958      	cbnz	r0, 206b0 <k_mem_slab_free+0xa0>
   20698:	4a08      	ldr	r2, [pc, #32]	; (206bc <k_mem_slab_free+0xac>)
   2069a:	490c      	ldr	r1, [pc, #48]	; (206cc <k_mem_slab_free+0xbc>)
   2069c:	4809      	ldr	r0, [pc, #36]	; (206c4 <k_mem_slab_free+0xb4>)
   2069e:	23c2      	movs	r3, #194	; 0xc2
   206a0:	f006 fd9c 	bl	271dc <assert_print>
   206a4:	4629      	mov	r1, r5
   206a6:	480a      	ldr	r0, [pc, #40]	; (206d0 <k_mem_slab_free+0xc0>)
   206a8:	f006 fd98 	bl	271dc <assert_print>
   206ac:	21c2      	movs	r1, #194	; 0xc2
   206ae:	e7cc      	b.n	2064a <k_mem_slab_free+0x3a>
	__asm__ volatile(
   206b0:	f387 8811 	msr	BASEPRI, r7
   206b4:	f3bf 8f6f 	isb	sy
}
   206b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   206bc:	0002b22b 	.word	0x0002b22b
   206c0:	0002b284 	.word	0x0002b284
   206c4:	0002ae37 	.word	0x0002ae37
   206c8:	0002b299 	.word	0x0002b299
   206cc:	0002b258 	.word	0x0002b258
   206d0:	0002b26f 	.word	0x0002b26f

000206d4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   206d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   206d6:	b085      	sub	sp, #20
   206d8:	4604      	mov	r4, r0
   206da:	9d0d      	ldr	r5, [sp, #52]	; 0x34
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   206dc:	2d0f      	cmp	r5, #15
   206de:	d12e      	bne.n	2073e <z_setup_new_thread+0x6a>
   206e0:	4822      	ldr	r0, [pc, #136]	; (2076c <z_setup_new_thread+0x98>)
   206e2:	4283      	cmp	r3, r0
   206e4:	d12f      	bne.n	20746 <z_setup_new_thread+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   206e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   206ea:	3207      	adds	r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   206ec:	e9c4 0016 	strd	r0, r0, [r4, #88]	; 0x58
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
   206f0:	73a5      	strb	r5, [r4, #14]
	thread_base->user_options = (uint8_t)options;
   206f2:	980e      	ldr	r0, [sp, #56]	; 0x38
   206f4:	7320      	strb	r0, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   206f6:	f022 0507 	bic.w	r5, r2, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   206fa:	f101 0240 	add.w	r2, r1, #64	; 0x40
	new_thread->stack_info.size = stack_buf_size;
   206fe:	e9c4 251a 	strd	r2, r5, [r4, #104]	; 0x68
	thread_base->pended_on = NULL;
   20702:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   20704:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   20706:	60a6      	str	r6, [r4, #8]
	thread_base->thread_state = (uint8_t)initial_state;
   20708:	2004      	movs	r0, #4
   2070a:	7360      	strb	r0, [r4, #13]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   2070c:	e9c4 6606 	strd	r6, r6, [r4, #24]

	thread_base->sched_locked = 0U;
   20710:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   20712:	6726      	str	r6, [r4, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   20714:	f105 0740 	add.w	r7, r5, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   20718:	9202      	str	r2, [sp, #8]
   2071a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2071c:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   2071e:	440f      	add	r7, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   20720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20722:	9200      	str	r2, [sp, #0]
   20724:	4620      	mov	r0, r4
   20726:	463a      	mov	r2, r7
   20728:	f7f4 fd96 	bl	15258 <arch_new_thread>
	if (!_current) {
   2072c:	4b10      	ldr	r3, [pc, #64]	; (20770 <z_setup_new_thread+0x9c>)
	new_thread->init_data = NULL;
   2072e:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   20730:	689b      	ldr	r3, [r3, #8]
   20732:	b103      	cbz	r3, 20736 <z_setup_new_thread+0x62>
	new_thread->resource_pool = _current->resource_pool;
   20734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   20736:	6763      	str	r3, [r4, #116]	; 0x74
}
   20738:	4638      	mov	r0, r7
   2073a:	b005      	add	sp, #20
   2073c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   2073e:	f105 0010 	add.w	r0, r5, #16
   20742:	281e      	cmp	r0, #30
   20744:	d9cf      	bls.n	206e6 <z_setup_new_thread+0x12>
   20746:	4a0b      	ldr	r2, [pc, #44]	; (20774 <z_setup_new_thread+0xa0>)
   20748:	490b      	ldr	r1, [pc, #44]	; (20778 <z_setup_new_thread+0xa4>)
   2074a:	480c      	ldr	r0, [pc, #48]	; (2077c <z_setup_new_thread+0xa8>)
   2074c:	f44f 7306 	mov.w	r3, #536	; 0x218
   20750:	f006 fd44 	bl	271dc <assert_print>
   20754:	480a      	ldr	r0, [pc, #40]	; (20780 <z_setup_new_thread+0xac>)
   20756:	4629      	mov	r1, r5
   20758:	f06f 030f 	mvn.w	r3, #15
   2075c:	220e      	movs	r2, #14
   2075e:	f006 fd3d 	bl	271dc <assert_print>
   20762:	4804      	ldr	r0, [pc, #16]	; (20774 <z_setup_new_thread+0xa0>)
   20764:	f44f 7106 	mov.w	r1, #536	; 0x218
   20768:	f006 fd31 	bl	271ce <assert_post_action>
   2076c:	00020965 	.word	0x00020965
   20770:	200037d0 	.word	0x200037d0
   20774:	0002e36d 	.word	0x0002e36d
   20778:	0002e390 	.word	0x0002e390
   2077c:	0002ae37 	.word	0x0002ae37
   20780:	0002e410 	.word	0x0002e410

00020784 <z_impl_k_thread_create>:
{
   20784:	b5f0      	push	{r4, r5, r6, r7, lr}
   20786:	b087      	sub	sp, #28
   20788:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
   2078c:	4604      	mov	r4, r0
   2078e:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   20792:	b175      	cbz	r5, 207b2 <z_impl_k_thread_create+0x2e>
   20794:	4919      	ldr	r1, [pc, #100]	; (207fc <z_impl_k_thread_create+0x78>)
   20796:	4a1a      	ldr	r2, [pc, #104]	; (20800 <z_impl_k_thread_create+0x7c>)
   20798:	481a      	ldr	r0, [pc, #104]	; (20804 <z_impl_k_thread_create+0x80>)
   2079a:	f240 238a 	movw	r3, #650	; 0x28a
   2079e:	f006 fd1d 	bl	271dc <assert_print>
   207a2:	4819      	ldr	r0, [pc, #100]	; (20808 <z_impl_k_thread_create+0x84>)
   207a4:	f006 fd1a 	bl	271dc <assert_print>
   207a8:	4815      	ldr	r0, [pc, #84]	; (20800 <z_impl_k_thread_create+0x7c>)
   207aa:	f240 218a 	movw	r1, #650	; 0x28a
   207ae:	f006 fd0e 	bl	271ce <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   207b2:	9505      	str	r5, [sp, #20]
   207b4:	9d10      	ldr	r5, [sp, #64]	; 0x40
   207b6:	9504      	str	r5, [sp, #16]
   207b8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   207ba:	9503      	str	r5, [sp, #12]
   207bc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   207be:	9502      	str	r5, [sp, #8]
   207c0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   207c2:	9501      	str	r5, [sp, #4]
   207c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   207c6:	9500      	str	r5, [sp, #0]
   207c8:	f7ff ff84 	bl	206d4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   207cc:	f1b6 3fff 	cmp.w	r6, #4294967295
   207d0:	bf08      	it	eq
   207d2:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   207d6:	d005      	beq.n	207e4 <z_impl_k_thread_create+0x60>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   207d8:	ea56 0307 	orrs.w	r3, r6, r7
   207dc:	d105      	bne.n	207ea <z_impl_k_thread_create+0x66>
	z_sched_start(thread);
   207de:	4620      	mov	r0, r4
   207e0:	f001 fb1a 	bl	21e18 <z_sched_start>
}
   207e4:	4620      	mov	r0, r4
   207e6:	b007      	add	sp, #28
   207e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   207ea:	4908      	ldr	r1, [pc, #32]	; (2080c <z_impl_k_thread_create+0x88>)
   207ec:	463a      	mov	r2, r7
   207ee:	4633      	mov	r3, r6
   207f0:	f104 0018 	add.w	r0, r4, #24
   207f4:	f002 fb6e 	bl	22ed4 <z_add_timeout>
   207f8:	e7f4      	b.n	207e4 <z_impl_k_thread_create+0x60>
   207fa:	bf00      	nop
   207fc:	0002e441 	.word	0x0002e441
   20800:	0002e36d 	.word	0x0002e36d
   20804:	0002ae37 	.word	0x0002ae37
   20808:	0002e453 	.word	0x0002e453
   2080c:	000299d5 	.word	0x000299d5

00020810 <z_init_static_threads>:
{
   20810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20814:	4c39      	ldr	r4, [pc, #228]	; (208fc <z_init_static_threads+0xec>)
	_FOREACH_STATIC_THREAD(thread_data) {
   20816:	4d3a      	ldr	r5, [pc, #232]	; (20900 <z_init_static_threads+0xf0>)
{
   20818:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   2081a:	42ac      	cmp	r4, r5
   2081c:	4626      	mov	r6, r4
   2081e:	d92a      	bls.n	20876 <z_init_static_threads+0x66>
   20820:	4938      	ldr	r1, [pc, #224]	; (20904 <z_init_static_threads+0xf4>)
   20822:	4a39      	ldr	r2, [pc, #228]	; (20908 <z_init_static_threads+0xf8>)
   20824:	4839      	ldr	r0, [pc, #228]	; (2090c <z_init_static_threads+0xfc>)
   20826:	f240 23f1 	movw	r3, #753	; 0x2f1
   2082a:	f006 fcd7 	bl	271dc <assert_print>
   2082e:	4838      	ldr	r0, [pc, #224]	; (20910 <z_init_static_threads+0x100>)
   20830:	f006 fcd4 	bl	271dc <assert_print>
   20834:	f240 21f1 	movw	r1, #753	; 0x2f1
	_FOREACH_STATIC_THREAD(thread_data) {
   20838:	4833      	ldr	r0, [pc, #204]	; (20908 <z_init_static_threads+0xf8>)
   2083a:	f006 fcc8 	bl	271ce <assert_post_action>
		z_setup_new_thread(
   2083e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   20842:	9305      	str	r3, [sp, #20]
   20844:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   20848:	9304      	str	r3, [sp, #16]
   2084a:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2084e:	9303      	str	r3, [sp, #12]
   20850:	f854 3c14 	ldr.w	r3, [r4, #-20]
   20854:	9302      	str	r3, [sp, #8]
   20856:	f854 3c18 	ldr.w	r3, [r4, #-24]
   2085a:	9301      	str	r3, [sp, #4]
   2085c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   20860:	9300      	str	r3, [sp, #0]
   20862:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
   20866:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
   2086a:	f7ff ff33 	bl	206d4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   2086e:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   20872:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   20874:	e7d1      	b.n	2081a <z_init_static_threads+0xa>
   20876:	42ae      	cmp	r6, r5
   20878:	f104 042c 	add.w	r4, r4, #44	; 0x2c
   2087c:	d3df      	bcc.n	2083e <z_init_static_threads+0x2e>
	k_sched_lock();
   2087e:	f001 fb1d 	bl	21ebc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   20882:	4c1e      	ldr	r4, [pc, #120]	; (208fc <z_init_static_threads+0xec>)
   20884:	f8df 908c 	ldr.w	r9, [pc, #140]	; 20914 <z_init_static_threads+0x104>
   20888:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2088c:	f240 37e7 	movw	r7, #999	; 0x3e7
   20890:	42ac      	cmp	r4, r5
   20892:	d92c      	bls.n	208ee <z_init_static_threads+0xde>
   20894:	491b      	ldr	r1, [pc, #108]	; (20904 <z_init_static_threads+0xf4>)
   20896:	4a1c      	ldr	r2, [pc, #112]	; (20908 <z_init_static_threads+0xf8>)
   20898:	481c      	ldr	r0, [pc, #112]	; (2090c <z_init_static_threads+0xfc>)
   2089a:	f44f 7344 	mov.w	r3, #784	; 0x310
   2089e:	f006 fc9d 	bl	271dc <assert_print>
   208a2:	481b      	ldr	r0, [pc, #108]	; (20910 <z_init_static_threads+0x100>)
   208a4:	f006 fc9a 	bl	271dc <assert_print>
   208a8:	f44f 7144 	mov.w	r1, #784	; 0x310
   208ac:	e7c4      	b.n	20838 <z_init_static_threads+0x28>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   208ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
   208b0:	1c5a      	adds	r2, r3, #1
   208b2:	d00d      	beq.n	208d0 <z_init_static_threads+0xc0>
					    K_MSEC(thread_data->init_delay));
   208b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   208b8:	2100      	movs	r1, #0
   208ba:	4638      	mov	r0, r7
   208bc:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   208c0:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   208c4:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   208c8:	d104      	bne.n	208d4 <z_init_static_threads+0xc4>
	z_sched_start(thread);
   208ca:	4640      	mov	r0, r8
   208cc:	f001 faa4 	bl	21e18 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   208d0:	342c      	adds	r4, #44	; 0x2c
   208d2:	e7dd      	b.n	20890 <z_init_static_threads+0x80>
   208d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   208d8:	2300      	movs	r3, #0
   208da:	f7df ffdf 	bl	89c <__aeabi_uldivmod>
   208de:	4602      	mov	r2, r0
   208e0:	460b      	mov	r3, r1
   208e2:	f108 0018 	add.w	r0, r8, #24
   208e6:	4649      	mov	r1, r9
   208e8:	f002 faf4 	bl	22ed4 <z_add_timeout>
   208ec:	e7f0      	b.n	208d0 <z_init_static_threads+0xc0>
   208ee:	d3de      	bcc.n	208ae <z_init_static_threads+0x9e>
}
   208f0:	b007      	add	sp, #28
   208f2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   208f6:	f001 bb4d 	b.w	21f94 <k_sched_unlock>
   208fa:	bf00      	nop
   208fc:	00029ee8 	.word	0x00029ee8
   20900:	00029f14 	.word	0x00029f14
   20904:	0002e478 	.word	0x0002e478
   20908:	0002e36d 	.word	0x0002e36d
   2090c:	0002ae37 	.word	0x0002ae37
   20910:	0002b3ac 	.word	0x0002b3ac
   20914:	000299d5 	.word	0x000299d5

00020918 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   20918:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   2091a:	b138      	cbz	r0, 2092c <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   2091c:	4b04      	ldr	r3, [pc, #16]	; (20930 <z_spin_lock_valid+0x18>)
   2091e:	7c1b      	ldrb	r3, [r3, #16]
   20920:	f000 0003 	and.w	r0, r0, #3
   20924:	1ac0      	subs	r0, r0, r3
   20926:	bf18      	it	ne
   20928:	2001      	movne	r0, #1
   2092a:	4770      	bx	lr
			return false;
		}
	}
	return true;
   2092c:	2001      	movs	r0, #1
}
   2092e:	4770      	bx	lr
   20930:	200037d0 	.word	0x200037d0

00020934 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   20934:	4a06      	ldr	r2, [pc, #24]	; (20950 <z_spin_unlock_valid+0x1c>)
   20936:	7c11      	ldrb	r1, [r2, #16]
   20938:	6892      	ldr	r2, [r2, #8]
   2093a:	430a      	orrs	r2, r1
   2093c:	6801      	ldr	r1, [r0, #0]
{
   2093e:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   20940:	4291      	cmp	r1, r2
   20942:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
   20946:	bf04      	itt	eq
   20948:	6018      	streq	r0, [r3, #0]
	return true;
   2094a:	2001      	moveq	r0, #1
}
   2094c:	4770      	bx	lr
   2094e:	bf00      	nop
   20950:	200037d0 	.word	0x200037d0

00020954 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   20954:	4b02      	ldr	r3, [pc, #8]	; (20960 <z_spin_lock_set_owner+0xc>)
   20956:	7c1a      	ldrb	r2, [r3, #16]
   20958:	689b      	ldr	r3, [r3, #8]
   2095a:	4313      	orrs	r3, r2
   2095c:	6003      	str	r3, [r0, #0]
}
   2095e:	4770      	bx	lr
   20960:	200037d0 	.word	0x200037d0

00020964 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   20964:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   20966:	4c13      	ldr	r4, [pc, #76]	; (209b4 <idle+0x50>)
   20968:	68a3      	ldr	r3, [r4, #8]
   2096a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2096e:	2b00      	cmp	r3, #0
   20970:	db10      	blt.n	20994 <idle+0x30>
	return !z_sys_post_kernel;
   20972:	4d11      	ldr	r5, [pc, #68]	; (209b8 <idle+0x54>)
	__asm__ volatile(
   20974:	f04f 0240 	mov.w	r2, #64	; 0x40
   20978:	f3ef 8311 	mrs	r3, BASEPRI
   2097c:	f382 8812 	msr	BASEPRI_MAX, r2
   20980:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   20984:	f002 fbb2 	bl	230ec <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   20988:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   2098a:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   2098c:	b963      	cbnz	r3, 209a8 <idle+0x44>
	arch_cpu_idle();
   2098e:	f7f4 fa81 	bl	14e94 <arch_cpu_idle>
}
   20992:	e7ef      	b.n	20974 <idle+0x10>
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   20994:	4909      	ldr	r1, [pc, #36]	; (209bc <idle+0x58>)
   20996:	480a      	ldr	r0, [pc, #40]	; (209c0 <idle+0x5c>)
   20998:	4a0a      	ldr	r2, [pc, #40]	; (209c4 <idle+0x60>)
   2099a:	2327      	movs	r3, #39	; 0x27
   2099c:	f006 fc1e 	bl	271dc <assert_print>
   209a0:	4808      	ldr	r0, [pc, #32]	; (209c4 <idle+0x60>)
   209a2:	2127      	movs	r1, #39	; 0x27
   209a4:	f006 fc13 	bl	271ce <assert_post_action>
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   209a8:	f7f4 f802 	bl	149b0 <pm_system_suspend>
   209ac:	2800      	cmp	r0, #0
   209ae:	d1e1      	bne.n	20974 <idle+0x10>
   209b0:	e7ed      	b.n	2098e <idle+0x2a>
   209b2:	bf00      	nop
   209b4:	200037d0 	.word	0x200037d0
   209b8:	200048d3 	.word	0x200048d3
   209bc:	0002e4c6 	.word	0x0002e4c6
   209c0:	0002ae37 	.word	0x0002ae37
   209c4:	0002e4a5 	.word	0x0002e4a5

000209c8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   209c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   209cc:	4604      	mov	r4, r0
   209ce:	4617      	mov	r7, r2
   209d0:	461e      	mov	r6, r3
   209d2:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   209d6:	b165      	cbz	r5, 209f2 <z_impl_k_mutex_lock+0x2a>
   209d8:	4958      	ldr	r1, [pc, #352]	; (20b3c <z_impl_k_mutex_lock+0x174>)
   209da:	4a59      	ldr	r2, [pc, #356]	; (20b40 <z_impl_k_mutex_lock+0x178>)
   209dc:	4859      	ldr	r0, [pc, #356]	; (20b44 <z_impl_k_mutex_lock+0x17c>)
   209de:	2365      	movs	r3, #101	; 0x65
   209e0:	f006 fbfc 	bl	271dc <assert_print>
   209e4:	4858      	ldr	r0, [pc, #352]	; (20b48 <z_impl_k_mutex_lock+0x180>)
   209e6:	f006 fbf9 	bl	271dc <assert_print>
   209ea:	4855      	ldr	r0, [pc, #340]	; (20b40 <z_impl_k_mutex_lock+0x178>)
   209ec:	2165      	movs	r1, #101	; 0x65
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   209ee:	f006 fbee 	bl	271ce <assert_post_action>
   209f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   209f6:	f3ef 8811 	mrs	r8, BASEPRI
   209fa:	f383 8812 	msr	BASEPRI_MAX, r3
   209fe:	f3bf 8f6f 	isb	sy
   20a02:	4852      	ldr	r0, [pc, #328]	; (20b4c <z_impl_k_mutex_lock+0x184>)
   20a04:	f7ff ff88 	bl	20918 <z_spin_lock_valid>
   20a08:	b960      	cbnz	r0, 20a24 <z_impl_k_mutex_lock+0x5c>
   20a0a:	4a51      	ldr	r2, [pc, #324]	; (20b50 <z_impl_k_mutex_lock+0x188>)
   20a0c:	4951      	ldr	r1, [pc, #324]	; (20b54 <z_impl_k_mutex_lock+0x18c>)
   20a0e:	484d      	ldr	r0, [pc, #308]	; (20b44 <z_impl_k_mutex_lock+0x17c>)
   20a10:	2394      	movs	r3, #148	; 0x94
   20a12:	f006 fbe3 	bl	271dc <assert_print>
   20a16:	494d      	ldr	r1, [pc, #308]	; (20b4c <z_impl_k_mutex_lock+0x184>)
   20a18:	484f      	ldr	r0, [pc, #316]	; (20b58 <z_impl_k_mutex_lock+0x190>)
   20a1a:	f006 fbdf 	bl	271dc <assert_print>
   20a1e:	2194      	movs	r1, #148	; 0x94
   20a20:	484b      	ldr	r0, [pc, #300]	; (20b50 <z_impl_k_mutex_lock+0x188>)
   20a22:	e7e4      	b.n	209ee <z_impl_k_mutex_lock+0x26>
	z_spin_lock_set_owner(l);
   20a24:	4849      	ldr	r0, [pc, #292]	; (20b4c <z_impl_k_mutex_lock+0x184>)
   20a26:	f7ff ff95 	bl	20954 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   20a2a:	68e3      	ldr	r3, [r4, #12]
   20a2c:	4a4b      	ldr	r2, [pc, #300]	; (20b5c <z_impl_k_mutex_lock+0x194>)
   20a2e:	b19b      	cbz	r3, 20a58 <z_impl_k_mutex_lock+0x90>
   20a30:	68a0      	ldr	r0, [r4, #8]
   20a32:	6891      	ldr	r1, [r2, #8]
   20a34:	4288      	cmp	r0, r1
   20a36:	d027      	beq.n	20a88 <z_impl_k_mutex_lock+0xc0>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   20a38:	ea57 0306 	orrs.w	r3, r7, r6
   20a3c:	d12c      	bne.n	20a98 <z_impl_k_mutex_lock+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20a3e:	4843      	ldr	r0, [pc, #268]	; (20b4c <z_impl_k_mutex_lock+0x184>)
   20a40:	f7ff ff78 	bl	20934 <z_spin_unlock_valid>
   20a44:	b1a0      	cbz	r0, 20a70 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   20a46:	f388 8811 	msr	BASEPRI, r8
   20a4a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   20a4e:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   20a52:	b002      	add	sp, #8
   20a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   20a58:	6891      	ldr	r1, [r2, #8]
   20a5a:	f991 100e 	ldrsb.w	r1, [r1, #14]
   20a5e:	483b      	ldr	r0, [pc, #236]	; (20b4c <z_impl_k_mutex_lock+0x184>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   20a60:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   20a62:	3301      	adds	r3, #1
   20a64:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   20a66:	6893      	ldr	r3, [r2, #8]
   20a68:	60a3      	str	r3, [r4, #8]
   20a6a:	f7ff ff63 	bl	20934 <z_spin_unlock_valid>
   20a6e:	b968      	cbnz	r0, 20a8c <z_impl_k_mutex_lock+0xc4>
   20a70:	4a37      	ldr	r2, [pc, #220]	; (20b50 <z_impl_k_mutex_lock+0x188>)
   20a72:	493b      	ldr	r1, [pc, #236]	; (20b60 <z_impl_k_mutex_lock+0x198>)
   20a74:	4833      	ldr	r0, [pc, #204]	; (20b44 <z_impl_k_mutex_lock+0x17c>)
   20a76:	23c2      	movs	r3, #194	; 0xc2
   20a78:	f006 fbb0 	bl	271dc <assert_print>
   20a7c:	4933      	ldr	r1, [pc, #204]	; (20b4c <z_impl_k_mutex_lock+0x184>)
   20a7e:	4839      	ldr	r0, [pc, #228]	; (20b64 <z_impl_k_mutex_lock+0x19c>)
   20a80:	f006 fbac 	bl	271dc <assert_print>
   20a84:	21c2      	movs	r1, #194	; 0xc2
   20a86:	e7cb      	b.n	20a20 <z_impl_k_mutex_lock+0x58>
					_current->base.prio :
   20a88:	6921      	ldr	r1, [r4, #16]
   20a8a:	e7e8      	b.n	20a5e <z_impl_k_mutex_lock+0x96>
   20a8c:	f388 8811 	msr	BASEPRI, r8
   20a90:	f3bf 8f6f 	isb	sy
		return 0;
   20a94:	2000      	movs	r0, #0
   20a96:	e7dc      	b.n	20a52 <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   20a98:	f991 100e 	ldrsb.w	r1, [r1, #14]
   20a9c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   20aa0:	4299      	cmp	r1, r3
   20aa2:	bfa8      	it	ge
   20aa4:	4619      	movge	r1, r3
   20aa6:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   20aaa:	4291      	cmp	r1, r2
   20aac:	bfb8      	it	lt
   20aae:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   20ab0:	428b      	cmp	r3, r1
   20ab2:	dd02      	ble.n	20aba <z_impl_k_mutex_lock+0xf2>
		resched = adjust_owner_prio(mutex, new_prio);
   20ab4:	f008 feb7 	bl	29826 <adjust_owner_prio.isra.0>
   20ab8:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   20aba:	e9cd 7600 	strd	r7, r6, [sp]
   20abe:	4823      	ldr	r0, [pc, #140]	; (20b4c <z_impl_k_mutex_lock+0x184>)
   20ac0:	4622      	mov	r2, r4
   20ac2:	4641      	mov	r1, r8
   20ac4:	f001 fc22 	bl	2230c <z_pend_curr>
	if (got_mutex == 0) {
   20ac8:	2800      	cmp	r0, #0
   20aca:	d0e3      	beq.n	20a94 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   20acc:	f04f 0340 	mov.w	r3, #64	; 0x40
   20ad0:	f3ef 8611 	mrs	r6, BASEPRI
   20ad4:	f383 8812 	msr	BASEPRI_MAX, r3
   20ad8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20adc:	481b      	ldr	r0, [pc, #108]	; (20b4c <z_impl_k_mutex_lock+0x184>)
   20ade:	f7ff ff1b 	bl	20918 <z_spin_lock_valid>
   20ae2:	2800      	cmp	r0, #0
   20ae4:	d091      	beq.n	20a0a <z_impl_k_mutex_lock+0x42>
	z_spin_lock_set_owner(l);
   20ae6:	4819      	ldr	r0, [pc, #100]	; (20b4c <z_impl_k_mutex_lock+0x184>)
   20ae8:	f7ff ff34 	bl	20954 <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
   20aec:	68a0      	ldr	r0, [r4, #8]
   20aee:	b1c0      	cbz	r0, 20b22 <z_impl_k_mutex_lock+0x15a>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   20af0:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   20af2:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20af4:	429c      	cmp	r4, r3
   20af6:	d00a      	beq.n	20b0e <z_impl_k_mutex_lock+0x146>
   20af8:	b14b      	cbz	r3, 20b0e <z_impl_k_mutex_lock+0x146>
   20afa:	f993 300e 	ldrsb.w	r3, [r3, #14]
   20afe:	4299      	cmp	r1, r3
   20b00:	bfa8      	it	ge
   20b02:	4619      	movge	r1, r3
   20b04:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   20b08:	4299      	cmp	r1, r3
   20b0a:	bfb8      	it	lt
   20b0c:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   20b0e:	f008 fe8a 	bl	29826 <adjust_owner_prio.isra.0>
   20b12:	b130      	cbz	r0, 20b22 <z_impl_k_mutex_lock+0x15a>
		z_reschedule(&lock, key);
   20b14:	480d      	ldr	r0, [pc, #52]	; (20b4c <z_impl_k_mutex_lock+0x184>)
   20b16:	4631      	mov	r1, r6
   20b18:	f001 f93c 	bl	21d94 <z_reschedule>
	return -EAGAIN;
   20b1c:	f06f 000a 	mvn.w	r0, #10
   20b20:	e797      	b.n	20a52 <z_impl_k_mutex_lock+0x8a>
	if (resched) {
   20b22:	2d00      	cmp	r5, #0
   20b24:	d1f6      	bne.n	20b14 <z_impl_k_mutex_lock+0x14c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20b26:	4809      	ldr	r0, [pc, #36]	; (20b4c <z_impl_k_mutex_lock+0x184>)
   20b28:	f7ff ff04 	bl	20934 <z_spin_unlock_valid>
   20b2c:	2800      	cmp	r0, #0
   20b2e:	d09f      	beq.n	20a70 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   20b30:	f386 8811 	msr	BASEPRI, r6
   20b34:	f3bf 8f6f 	isb	sy
   20b38:	e7f0      	b.n	20b1c <z_impl_k_mutex_lock+0x154>
   20b3a:	bf00      	nop
   20b3c:	0002e441 	.word	0x0002e441
   20b40:	0002e4ee 	.word	0x0002e4ee
   20b44:	0002ae37 	.word	0x0002ae37
   20b48:	0002e510 	.word	0x0002e510
   20b4c:	200037fc 	.word	0x200037fc
   20b50:	0002b22b 	.word	0x0002b22b
   20b54:	0002b284 	.word	0x0002b284
   20b58:	0002b299 	.word	0x0002b299
   20b5c:	200037d0 	.word	0x200037d0
   20b60:	0002b258 	.word	0x0002b258
   20b64:	0002b26f 	.word	0x0002b26f

00020b68 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   20b68:	b570      	push	{r4, r5, r6, lr}
   20b6a:	4604      	mov	r4, r0
   20b6c:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   20b70:	b166      	cbz	r6, 20b8c <z_impl_k_mutex_unlock+0x24>
   20b72:	4938      	ldr	r1, [pc, #224]	; (20c54 <z_impl_k_mutex_unlock+0xec>)
   20b74:	4a38      	ldr	r2, [pc, #224]	; (20c58 <z_impl_k_mutex_unlock+0xf0>)
   20b76:	4839      	ldr	r0, [pc, #228]	; (20c5c <z_impl_k_mutex_unlock+0xf4>)
   20b78:	23cd      	movs	r3, #205	; 0xcd
   20b7a:	f006 fb2f 	bl	271dc <assert_print>
   20b7e:	4838      	ldr	r0, [pc, #224]	; (20c60 <z_impl_k_mutex_unlock+0xf8>)
   20b80:	f006 fb2c 	bl	271dc <assert_print>
   20b84:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   20b86:	4834      	ldr	r0, [pc, #208]	; (20c58 <z_impl_k_mutex_unlock+0xf0>)
   20b88:	f006 fb21 	bl	271ce <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
   20b8c:	6883      	ldr	r3, [r0, #8]
   20b8e:	2b00      	cmp	r3, #0
   20b90:	d059      	beq.n	20c46 <z_impl_k_mutex_unlock+0xde>
	CHECKIF(mutex->owner != _current) {
   20b92:	4a34      	ldr	r2, [pc, #208]	; (20c64 <z_impl_k_mutex_unlock+0xfc>)
   20b94:	6892      	ldr	r2, [r2, #8]
   20b96:	4293      	cmp	r3, r2
   20b98:	d158      	bne.n	20c4c <z_impl_k_mutex_unlock+0xe4>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   20b9a:	68c3      	ldr	r3, [r0, #12]
   20b9c:	b93b      	cbnz	r3, 20bae <z_impl_k_mutex_unlock+0x46>
   20b9e:	4932      	ldr	r1, [pc, #200]	; (20c68 <z_impl_k_mutex_unlock+0x100>)
   20ba0:	4a2d      	ldr	r2, [pc, #180]	; (20c58 <z_impl_k_mutex_unlock+0xf0>)
   20ba2:	482e      	ldr	r0, [pc, #184]	; (20c5c <z_impl_k_mutex_unlock+0xf4>)
   20ba4:	23e5      	movs	r3, #229	; 0xe5
   20ba6:	f006 fb19 	bl	271dc <assert_print>
   20baa:	21e5      	movs	r1, #229	; 0xe5
   20bac:	e7eb      	b.n	20b86 <z_impl_k_mutex_unlock+0x1e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   20bae:	2b01      	cmp	r3, #1
   20bb0:	d003      	beq.n	20bba <z_impl_k_mutex_unlock+0x52>
		mutex->lock_count--;
   20bb2:	3b01      	subs	r3, #1
   20bb4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   20bb6:	2000      	movs	r0, #0
}
   20bb8:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   20bba:	f04f 0340 	mov.w	r3, #64	; 0x40
   20bbe:	f3ef 8511 	mrs	r5, BASEPRI
   20bc2:	f383 8812 	msr	BASEPRI_MAX, r3
   20bc6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20bca:	4828      	ldr	r0, [pc, #160]	; (20c6c <z_impl_k_mutex_unlock+0x104>)
   20bcc:	f7ff fea4 	bl	20918 <z_spin_lock_valid>
   20bd0:	b960      	cbnz	r0, 20bec <z_impl_k_mutex_unlock+0x84>
   20bd2:	4a27      	ldr	r2, [pc, #156]	; (20c70 <z_impl_k_mutex_unlock+0x108>)
   20bd4:	4927      	ldr	r1, [pc, #156]	; (20c74 <z_impl_k_mutex_unlock+0x10c>)
   20bd6:	4821      	ldr	r0, [pc, #132]	; (20c5c <z_impl_k_mutex_unlock+0xf4>)
   20bd8:	2394      	movs	r3, #148	; 0x94
   20bda:	f006 faff 	bl	271dc <assert_print>
   20bde:	4923      	ldr	r1, [pc, #140]	; (20c6c <z_impl_k_mutex_unlock+0x104>)
   20be0:	4825      	ldr	r0, [pc, #148]	; (20c78 <z_impl_k_mutex_unlock+0x110>)
   20be2:	f006 fafb 	bl	271dc <assert_print>
   20be6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20be8:	4821      	ldr	r0, [pc, #132]	; (20c70 <z_impl_k_mutex_unlock+0x108>)
   20bea:	e7cd      	b.n	20b88 <z_impl_k_mutex_unlock+0x20>
	z_spin_lock_set_owner(l);
   20bec:	481f      	ldr	r0, [pc, #124]	; (20c6c <z_impl_k_mutex_unlock+0x104>)
   20bee:	f7ff feb1 	bl	20954 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   20bf2:	6921      	ldr	r1, [r4, #16]
   20bf4:	68a0      	ldr	r0, [r4, #8]
   20bf6:	f008 fe16 	bl	29826 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   20bfa:	4620      	mov	r0, r4
   20bfc:	f001 fe06 	bl	2280c <z_unpend_first_thread>
	mutex->owner = new_owner;
   20c00:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   20c02:	b150      	cbz	r0, 20c1a <z_impl_k_mutex_unlock+0xb2>
		mutex->owner_orig_prio = new_owner->base.prio;
   20c04:	f990 200e 	ldrsb.w	r2, [r0, #14]
   20c08:	6122      	str	r2, [r4, #16]
   20c0a:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   20c0c:	f001 f834 	bl	21c78 <z_ready_thread>
		z_reschedule(&lock, key);
   20c10:	4816      	ldr	r0, [pc, #88]	; (20c6c <z_impl_k_mutex_unlock+0x104>)
   20c12:	4629      	mov	r1, r5
   20c14:	f001 f8be 	bl	21d94 <z_reschedule>
   20c18:	e7cd      	b.n	20bb6 <z_impl_k_mutex_unlock+0x4e>
		mutex->lock_count = 0U;
   20c1a:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20c1c:	4813      	ldr	r0, [pc, #76]	; (20c6c <z_impl_k_mutex_unlock+0x104>)
   20c1e:	f7ff fe89 	bl	20934 <z_spin_unlock_valid>
   20c22:	b958      	cbnz	r0, 20c3c <z_impl_k_mutex_unlock+0xd4>
   20c24:	4a12      	ldr	r2, [pc, #72]	; (20c70 <z_impl_k_mutex_unlock+0x108>)
   20c26:	4915      	ldr	r1, [pc, #84]	; (20c7c <z_impl_k_mutex_unlock+0x114>)
   20c28:	480c      	ldr	r0, [pc, #48]	; (20c5c <z_impl_k_mutex_unlock+0xf4>)
   20c2a:	23c2      	movs	r3, #194	; 0xc2
   20c2c:	f006 fad6 	bl	271dc <assert_print>
   20c30:	490e      	ldr	r1, [pc, #56]	; (20c6c <z_impl_k_mutex_unlock+0x104>)
   20c32:	4813      	ldr	r0, [pc, #76]	; (20c80 <z_impl_k_mutex_unlock+0x118>)
   20c34:	f006 fad2 	bl	271dc <assert_print>
   20c38:	21c2      	movs	r1, #194	; 0xc2
   20c3a:	e7d5      	b.n	20be8 <z_impl_k_mutex_unlock+0x80>
	__asm__ volatile(
   20c3c:	f385 8811 	msr	BASEPRI, r5
   20c40:	f3bf 8f6f 	isb	sy
   20c44:	e7b7      	b.n	20bb6 <z_impl_k_mutex_unlock+0x4e>
		return -EINVAL;
   20c46:	f06f 0015 	mvn.w	r0, #21
   20c4a:	e7b5      	b.n	20bb8 <z_impl_k_mutex_unlock+0x50>
		return -EPERM;
   20c4c:	f04f 30ff 	mov.w	r0, #4294967295
   20c50:	e7b2      	b.n	20bb8 <z_impl_k_mutex_unlock+0x50>
   20c52:	bf00      	nop
   20c54:	0002e441 	.word	0x0002e441
   20c58:	0002e4ee 	.word	0x0002e4ee
   20c5c:	0002ae37 	.word	0x0002ae37
   20c60:	0002e510 	.word	0x0002e510
   20c64:	200037d0 	.word	0x200037d0
   20c68:	0002e535 	.word	0x0002e535
   20c6c:	200037fc 	.word	0x200037fc
   20c70:	0002b22b 	.word	0x0002b22b
   20c74:	0002b284 	.word	0x0002b284
   20c78:	0002b299 	.word	0x0002b299
   20c7c:	0002b258 	.word	0x0002b258
   20c80:	0002b26f 	.word	0x0002b26f

00020c84 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   20c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20c88:	4604      	mov	r4, r0
   20c8a:	f89d a020 	ldrb.w	sl, [sp, #32]
   20c8e:	460e      	mov	r6, r1
   20c90:	4690      	mov	r8, r2
   20c92:	4699      	mov	r9, r3
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   20c94:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   20c98:	f04f 0340 	mov.w	r3, #64	; 0x40
   20c9c:	f3ef 8711 	mrs	r7, BASEPRI
   20ca0:	f383 8812 	msr	BASEPRI_MAX, r3
   20ca4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20ca8:	4628      	mov	r0, r5
   20caa:	f7ff fe35 	bl	20918 <z_spin_lock_valid>
   20cae:	b968      	cbnz	r0, 20ccc <queue_insert+0x48>
   20cb0:	4a3b      	ldr	r2, [pc, #236]	; (20da0 <queue_insert+0x11c>)
   20cb2:	493c      	ldr	r1, [pc, #240]	; (20da4 <queue_insert+0x120>)
   20cb4:	483c      	ldr	r0, [pc, #240]	; (20da8 <queue_insert+0x124>)
   20cb6:	2394      	movs	r3, #148	; 0x94
   20cb8:	f006 fa90 	bl	271dc <assert_print>
   20cbc:	4629      	mov	r1, r5
   20cbe:	483b      	ldr	r0, [pc, #236]	; (20dac <queue_insert+0x128>)
   20cc0:	f006 fa8c 	bl	271dc <assert_print>
   20cc4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20cc6:	4836      	ldr	r0, [pc, #216]	; (20da0 <queue_insert+0x11c>)
   20cc8:	f006 fa81 	bl	271ce <assert_post_action>
	z_spin_lock_set_owner(l);
   20ccc:	4628      	mov	r0, r5
   20cce:	f7ff fe41 	bl	20954 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   20cd2:	f1ba 0f00 	cmp.w	sl, #0
   20cd6:	d000      	beq.n	20cda <queue_insert+0x56>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   20cd8:	6866      	ldr	r6, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   20cda:	f104 000c 	add.w	r0, r4, #12
   20cde:	f001 fd95 	bl	2280c <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   20ce2:	b158      	cbz	r0, 20cfc <queue_insert+0x78>
   20ce4:	2300      	movs	r3, #0
   20ce6:	67c3      	str	r3, [r0, #124]	; 0x7c
   20ce8:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   20cec:	f000 ffc4 	bl	21c78 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   20cf0:	4628      	mov	r0, r5
   20cf2:	4639      	mov	r1, r7
   20cf4:	f001 f84e 	bl	21d94 <z_reschedule>
		return 0;
   20cf8:	2000      	movs	r0, #0
   20cfa:	e01c      	b.n	20d36 <queue_insert+0xb2>
	if (alloc) {
   20cfc:	f1b9 0f00 	cmp.w	r9, #0
   20d00:	d02b      	beq.n	20d5a <queue_insert+0xd6>
	return z_thread_aligned_alloc(0, size);
   20d02:	2108      	movs	r1, #8
   20d04:	f002 ffd4 	bl	23cb0 <z_thread_aligned_alloc>
		if (anode == NULL) {
   20d08:	b9b8      	cbnz	r0, 20d3a <queue_insert+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20d0a:	4628      	mov	r0, r5
   20d0c:	f7ff fe12 	bl	20934 <z_spin_unlock_valid>
   20d10:	b958      	cbnz	r0, 20d2a <queue_insert+0xa6>
   20d12:	4a23      	ldr	r2, [pc, #140]	; (20da0 <queue_insert+0x11c>)
   20d14:	4926      	ldr	r1, [pc, #152]	; (20db0 <queue_insert+0x12c>)
   20d16:	4824      	ldr	r0, [pc, #144]	; (20da8 <queue_insert+0x124>)
   20d18:	23c2      	movs	r3, #194	; 0xc2
   20d1a:	f006 fa5f 	bl	271dc <assert_print>
   20d1e:	4629      	mov	r1, r5
   20d20:	4824      	ldr	r0, [pc, #144]	; (20db4 <queue_insert+0x130>)
   20d22:	f006 fa5b 	bl	271dc <assert_print>
   20d26:	21c2      	movs	r1, #194	; 0xc2
   20d28:	e7cd      	b.n	20cc6 <queue_insert+0x42>
	__asm__ volatile(
   20d2a:	f387 8811 	msr	BASEPRI, r7
   20d2e:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   20d32:	f06f 000b 	mvn.w	r0, #11

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
}
   20d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   20d3a:	2201      	movs	r2, #1
		anode->data = data;
   20d3c:	f8c0 8004 	str.w	r8, [r0, #4]
   20d40:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20d42:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20d44:	f001 0103 	and.w	r1, r1, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   20d48:	b95e      	cbnz	r6, 20d62 <queue_insert+0xde>
	parent->next_and_flags = cur_flags | (unative_t)child;
   20d4a:	6822      	ldr	r2, [r4, #0]
   20d4c:	430a      	orrs	r2, r1
   20d4e:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20d50:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   20d52:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20d54:	b96a      	cbnz	r2, 20d72 <queue_insert+0xee>
	list->tail = node;
   20d56:	6060      	str	r0, [r4, #4]
}
   20d58:	e00b      	b.n	20d72 <queue_insert+0xee>
	node->next_and_flags = flags;
   20d5a:	f8c8 9000 	str.w	r9, [r8]
}
   20d5e:	4640      	mov	r0, r8
   20d60:	e7ef      	b.n	20d42 <queue_insert+0xbe>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20d62:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   20d64:	2a03      	cmp	r2, #3
   20d66:	d810      	bhi.n	20d8a <queue_insert+0x106>
	parent->next_and_flags = cur_flags | (unative_t)child;
   20d68:	6001      	str	r1, [r0, #0]
	return list->tail;
   20d6a:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   20d6c:	b939      	cbnz	r1, 20d7e <queue_insert+0xfa>
	list->head = node;
   20d6e:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   20d72:	2104      	movs	r1, #4
   20d74:	f104 0014 	add.w	r0, r4, #20
   20d78:	f008 ff20 	bl	29bbc <z_handle_obj_poll_events>
   20d7c:	e7b8      	b.n	20cf0 <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20d7e:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20d80:	f002 0203 	and.w	r2, r2, #3
   20d84:	4302      	orrs	r2, r0
   20d86:	600a      	str	r2, [r1, #0]
   20d88:	e7e5      	b.n	20d56 <queue_insert+0xd2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20d8a:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   20d8e:	430a      	orrs	r2, r1
   20d90:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20d92:	6832      	ldr	r2, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20d94:	f002 0203 	and.w	r2, r2, #3
   20d98:	ea40 0302 	orr.w	r3, r0, r2
   20d9c:	6033      	str	r3, [r6, #0]
}
   20d9e:	e7e8      	b.n	20d72 <queue_insert+0xee>
   20da0:	0002b22b 	.word	0x0002b22b
   20da4:	0002b284 	.word	0x0002b284
   20da8:	0002ae37 	.word	0x0002ae37
   20dac:	0002b299 	.word	0x0002b299
   20db0:	0002b258 	.word	0x0002b258
   20db4:	0002b26f 	.word	0x0002b26f

00020db8 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   20db8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   20dbc:	4606      	mov	r6, r0
   20dbe:	4691      	mov	r9, r2
   20dc0:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   20dc2:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   20dc6:	f04f 0340 	mov.w	r3, #64	; 0x40
   20dca:	f3ef 8811 	mrs	r8, BASEPRI
   20dce:	f383 8812 	msr	BASEPRI_MAX, r3
   20dd2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20dd6:	4628      	mov	r0, r5
   20dd8:	f7ff fd9e 	bl	20918 <z_spin_lock_valid>
   20ddc:	b968      	cbnz	r0, 20dfa <z_impl_k_queue_get+0x42>
   20dde:	4a24      	ldr	r2, [pc, #144]	; (20e70 <z_impl_k_queue_get+0xb8>)
   20de0:	4924      	ldr	r1, [pc, #144]	; (20e74 <z_impl_k_queue_get+0xbc>)
   20de2:	4825      	ldr	r0, [pc, #148]	; (20e78 <z_impl_k_queue_get+0xc0>)
   20de4:	2394      	movs	r3, #148	; 0x94
   20de6:	f006 f9f9 	bl	271dc <assert_print>
   20dea:	4629      	mov	r1, r5
   20dec:	4823      	ldr	r0, [pc, #140]	; (20e7c <z_impl_k_queue_get+0xc4>)
   20dee:	f006 f9f5 	bl	271dc <assert_print>
   20df2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20df4:	481e      	ldr	r0, [pc, #120]	; (20e70 <z_impl_k_queue_get+0xb8>)
   20df6:	f006 f9ea 	bl	271ce <assert_post_action>
	z_spin_lock_set_owner(l);
   20dfa:	4628      	mov	r0, r5
   20dfc:	f7ff fdaa 	bl	20954 <z_spin_lock_set_owner>
	return list->head;
   20e00:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   20e02:	b1e4      	cbz	r4, 20e3e <z_impl_k_queue_get+0x86>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20e04:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   20e06:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20e08:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   20e0c:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   20e0e:	4620      	mov	r0, r4
	list->head = node;
   20e10:	6033      	str	r3, [r6, #0]
	list->tail = node;
   20e12:	bf08      	it	eq
   20e14:	6073      	streq	r3, [r6, #4]
   20e16:	2101      	movs	r1, #1
   20e18:	f008 fd14 	bl	29844 <z_queue_node_peek>
   20e1c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20e1e:	4628      	mov	r0, r5
   20e20:	f7ff fd88 	bl	20934 <z_spin_unlock_valid>
   20e24:	b9d8      	cbnz	r0, 20e5e <z_impl_k_queue_get+0xa6>
   20e26:	4a12      	ldr	r2, [pc, #72]	; (20e70 <z_impl_k_queue_get+0xb8>)
   20e28:	4915      	ldr	r1, [pc, #84]	; (20e80 <z_impl_k_queue_get+0xc8>)
   20e2a:	4813      	ldr	r0, [pc, #76]	; (20e78 <z_impl_k_queue_get+0xc0>)
   20e2c:	23c2      	movs	r3, #194	; 0xc2
   20e2e:	f006 f9d5 	bl	271dc <assert_print>
   20e32:	4629      	mov	r1, r5
   20e34:	4813      	ldr	r0, [pc, #76]	; (20e84 <z_impl_k_queue_get+0xcc>)
   20e36:	f006 f9d1 	bl	271dc <assert_print>
   20e3a:	21c2      	movs	r1, #194	; 0xc2
   20e3c:	e7da      	b.n	20df4 <z_impl_k_queue_get+0x3c>
		return data;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, get, queue, timeout);

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20e3e:	ea59 0307 	orrs.w	r3, r9, r7
   20e42:	d0ec      	beq.n	20e1e <z_impl_k_queue_get+0x66>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout, NULL);

		return NULL;
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   20e44:	e9cd 9700 	strd	r9, r7, [sp]
   20e48:	f106 020c 	add.w	r2, r6, #12
   20e4c:	4641      	mov	r1, r8
   20e4e:	4628      	mov	r0, r5
   20e50:	f001 fa5c 	bl	2230c <z_pend_curr>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
   20e54:	b938      	cbnz	r0, 20e66 <z_impl_k_queue_get+0xae>
   20e56:	4b0c      	ldr	r3, [pc, #48]	; (20e88 <z_impl_k_queue_get+0xd0>)
   20e58:	689b      	ldr	r3, [r3, #8]
   20e5a:	695c      	ldr	r4, [r3, #20]
   20e5c:	e003      	b.n	20e66 <z_impl_k_queue_get+0xae>
	__asm__ volatile(
   20e5e:	f388 8811 	msr	BASEPRI, r8
   20e62:	f3bf 8f6f 	isb	sy
}
   20e66:	4620      	mov	r0, r4
   20e68:	b003      	add	sp, #12
   20e6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20e6e:	bf00      	nop
   20e70:	0002b22b 	.word	0x0002b22b
   20e74:	0002b284 	.word	0x0002b284
   20e78:	0002ae37 	.word	0x0002ae37
   20e7c:	0002b299 	.word	0x0002b299
   20e80:	0002b258 	.word	0x0002b258
   20e84:	0002b26f 	.word	0x0002b26f
   20e88:	200037d0 	.word	0x200037d0

00020e8c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   20e8c:	b538      	push	{r3, r4, r5, lr}
   20e8e:	4604      	mov	r4, r0
	__asm__ volatile(
   20e90:	f04f 0340 	mov.w	r3, #64	; 0x40
   20e94:	f3ef 8511 	mrs	r5, BASEPRI
   20e98:	f383 8812 	msr	BASEPRI_MAX, r3
   20e9c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20ea0:	4817      	ldr	r0, [pc, #92]	; (20f00 <z_impl_k_sem_give+0x74>)
   20ea2:	f7ff fd39 	bl	20918 <z_spin_lock_valid>
   20ea6:	b968      	cbnz	r0, 20ec4 <z_impl_k_sem_give+0x38>
   20ea8:	4a16      	ldr	r2, [pc, #88]	; (20f04 <z_impl_k_sem_give+0x78>)
   20eaa:	4917      	ldr	r1, [pc, #92]	; (20f08 <z_impl_k_sem_give+0x7c>)
   20eac:	4817      	ldr	r0, [pc, #92]	; (20f0c <z_impl_k_sem_give+0x80>)
   20eae:	2394      	movs	r3, #148	; 0x94
   20eb0:	f006 f994 	bl	271dc <assert_print>
   20eb4:	4912      	ldr	r1, [pc, #72]	; (20f00 <z_impl_k_sem_give+0x74>)
   20eb6:	4816      	ldr	r0, [pc, #88]	; (20f10 <z_impl_k_sem_give+0x84>)
   20eb8:	f006 f990 	bl	271dc <assert_print>
   20ebc:	4811      	ldr	r0, [pc, #68]	; (20f04 <z_impl_k_sem_give+0x78>)
   20ebe:	2194      	movs	r1, #148	; 0x94
   20ec0:	f006 f985 	bl	271ce <assert_post_action>
	z_spin_lock_set_owner(l);
   20ec4:	480e      	ldr	r0, [pc, #56]	; (20f00 <z_impl_k_sem_give+0x74>)
   20ec6:	f7ff fd45 	bl	20954 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   20eca:	4620      	mov	r0, r4
   20ecc:	f001 fc9e 	bl	2280c <z_unpend_first_thread>

	if (thread != NULL) {
   20ed0:	b148      	cbz	r0, 20ee6 <z_impl_k_sem_give+0x5a>
   20ed2:	2200      	movs	r2, #0
   20ed4:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   20ed6:	f000 fecf 	bl	21c78 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   20eda:	4629      	mov	r1, r5
   20edc:	4808      	ldr	r0, [pc, #32]	; (20f00 <z_impl_k_sem_give+0x74>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   20ede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   20ee2:	f000 bf57 	b.w	21d94 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   20ee6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   20eea:	429a      	cmp	r2, r3
   20eec:	bf18      	it	ne
   20eee:	3301      	addne	r3, #1
   20ef0:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   20ef2:	2102      	movs	r1, #2
   20ef4:	f104 0010 	add.w	r0, r4, #16
   20ef8:	f008 fe60 	bl	29bbc <z_handle_obj_poll_events>
}
   20efc:	e7ed      	b.n	20eda <z_impl_k_sem_give+0x4e>
   20efe:	bf00      	nop
   20f00:	20003800 	.word	0x20003800
   20f04:	0002b22b 	.word	0x0002b22b
   20f08:	0002b284 	.word	0x0002b284
   20f0c:	0002ae37 	.word	0x0002ae37
   20f10:	0002b299 	.word	0x0002b299

00020f14 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   20f14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20f16:	4604      	mov	r4, r0
   20f18:	4616      	mov	r6, r2
   20f1a:	461d      	mov	r5, r3
   20f1c:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   20f20:	b17b      	cbz	r3, 20f42 <z_impl_k_sem_take+0x2e>
   20f22:	ea52 0305 	orrs.w	r3, r2, r5
   20f26:	d00c      	beq.n	20f42 <z_impl_k_sem_take+0x2e>
   20f28:	492d      	ldr	r1, [pc, #180]	; (20fe0 <z_impl_k_sem_take+0xcc>)
   20f2a:	4a2e      	ldr	r2, [pc, #184]	; (20fe4 <z_impl_k_sem_take+0xd0>)
   20f2c:	482e      	ldr	r0, [pc, #184]	; (20fe8 <z_impl_k_sem_take+0xd4>)
   20f2e:	2379      	movs	r3, #121	; 0x79
   20f30:	f006 f954 	bl	271dc <assert_print>
   20f34:	482d      	ldr	r0, [pc, #180]	; (20fec <z_impl_k_sem_take+0xd8>)
   20f36:	f006 f951 	bl	271dc <assert_print>
   20f3a:	482a      	ldr	r0, [pc, #168]	; (20fe4 <z_impl_k_sem_take+0xd0>)
   20f3c:	2179      	movs	r1, #121	; 0x79
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20f3e:	f006 f946 	bl	271ce <assert_post_action>
   20f42:	f04f 0340 	mov.w	r3, #64	; 0x40
   20f46:	f3ef 8711 	mrs	r7, BASEPRI
   20f4a:	f383 8812 	msr	BASEPRI_MAX, r3
   20f4e:	f3bf 8f6f 	isb	sy
   20f52:	4827      	ldr	r0, [pc, #156]	; (20ff0 <z_impl_k_sem_take+0xdc>)
   20f54:	f7ff fce0 	bl	20918 <z_spin_lock_valid>
   20f58:	b960      	cbnz	r0, 20f74 <z_impl_k_sem_take+0x60>
   20f5a:	4a26      	ldr	r2, [pc, #152]	; (20ff4 <z_impl_k_sem_take+0xe0>)
   20f5c:	4926      	ldr	r1, [pc, #152]	; (20ff8 <z_impl_k_sem_take+0xe4>)
   20f5e:	4822      	ldr	r0, [pc, #136]	; (20fe8 <z_impl_k_sem_take+0xd4>)
   20f60:	2394      	movs	r3, #148	; 0x94
   20f62:	f006 f93b 	bl	271dc <assert_print>
   20f66:	4922      	ldr	r1, [pc, #136]	; (20ff0 <z_impl_k_sem_take+0xdc>)
   20f68:	4824      	ldr	r0, [pc, #144]	; (20ffc <z_impl_k_sem_take+0xe8>)
   20f6a:	f006 f937 	bl	271dc <assert_print>
   20f6e:	2194      	movs	r1, #148	; 0x94
   20f70:	4820      	ldr	r0, [pc, #128]	; (20ff4 <z_impl_k_sem_take+0xe0>)
   20f72:	e7e4      	b.n	20f3e <z_impl_k_sem_take+0x2a>
	z_spin_lock_set_owner(l);
   20f74:	481e      	ldr	r0, [pc, #120]	; (20ff0 <z_impl_k_sem_take+0xdc>)
   20f76:	f7ff fced 	bl	20954 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   20f7a:	68a3      	ldr	r3, [r4, #8]
   20f7c:	b1c3      	cbz	r3, 20fb0 <z_impl_k_sem_take+0x9c>
		sem->count--;
   20f7e:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20f80:	481b      	ldr	r0, [pc, #108]	; (20ff0 <z_impl_k_sem_take+0xdc>)
   20f82:	60a3      	str	r3, [r4, #8]
   20f84:	f7ff fcd6 	bl	20934 <z_spin_unlock_valid>
   20f88:	b958      	cbnz	r0, 20fa2 <z_impl_k_sem_take+0x8e>
   20f8a:	4a1a      	ldr	r2, [pc, #104]	; (20ff4 <z_impl_k_sem_take+0xe0>)
   20f8c:	491c      	ldr	r1, [pc, #112]	; (21000 <z_impl_k_sem_take+0xec>)
   20f8e:	4816      	ldr	r0, [pc, #88]	; (20fe8 <z_impl_k_sem_take+0xd4>)
   20f90:	23c2      	movs	r3, #194	; 0xc2
   20f92:	f006 f923 	bl	271dc <assert_print>
   20f96:	4916      	ldr	r1, [pc, #88]	; (20ff0 <z_impl_k_sem_take+0xdc>)
   20f98:	481a      	ldr	r0, [pc, #104]	; (21004 <z_impl_k_sem_take+0xf0>)
   20f9a:	f006 f91f 	bl	271dc <assert_print>
   20f9e:	21c2      	movs	r1, #194	; 0xc2
   20fa0:	e7e6      	b.n	20f70 <z_impl_k_sem_take+0x5c>
	__asm__ volatile(
   20fa2:	f387 8811 	msr	BASEPRI, r7
   20fa6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   20faa:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   20fac:	b003      	add	sp, #12
   20fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20fb0:	ea56 0305 	orrs.w	r3, r6, r5
   20fb4:	d10b      	bne.n	20fce <z_impl_k_sem_take+0xba>
   20fb6:	480e      	ldr	r0, [pc, #56]	; (20ff0 <z_impl_k_sem_take+0xdc>)
   20fb8:	f7ff fcbc 	bl	20934 <z_spin_unlock_valid>
   20fbc:	2800      	cmp	r0, #0
   20fbe:	d0e4      	beq.n	20f8a <z_impl_k_sem_take+0x76>
   20fc0:	f387 8811 	msr	BASEPRI, r7
   20fc4:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   20fc8:	f06f 000f 	mvn.w	r0, #15
   20fcc:	e7ee      	b.n	20fac <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   20fce:	e9cd 6500 	strd	r6, r5, [sp]
   20fd2:	4622      	mov	r2, r4
   20fd4:	4639      	mov	r1, r7
   20fd6:	4806      	ldr	r0, [pc, #24]	; (20ff0 <z_impl_k_sem_take+0xdc>)
   20fd8:	f001 f998 	bl	2230c <z_pend_curr>
	return ret;
   20fdc:	e7e6      	b.n	20fac <z_impl_k_sem_take+0x98>
   20fde:	bf00      	nop
   20fe0:	0002e56c 	.word	0x0002e56c
   20fe4:	0002e54c 	.word	0x0002e54c
   20fe8:	0002ae37 	.word	0x0002ae37
   20fec:	0002d49e 	.word	0x0002d49e
   20ff0:	20003800 	.word	0x20003800
   20ff4:	0002b22b 	.word	0x0002b22b
   20ff8:	0002b284 	.word	0x0002b284
   20ffc:	0002b299 	.word	0x0002b299
   21000:	0002b258 	.word	0x0002b258
   21004:	0002b26f 	.word	0x0002b26f

00021008 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
   21008:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
   2100a:	4b09      	ldr	r3, [pc, #36]	; (21030 <k_sys_work_q_init+0x28>)
   2100c:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   2100e:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   21010:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   21012:	9300      	str	r3, [sp, #0]
   21014:	4907      	ldr	r1, [pc, #28]	; (21034 <k_sys_work_q_init+0x2c>)
   21016:	4808      	ldr	r0, [pc, #32]	; (21038 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   21018:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   2101c:	f04f 33ff 	mov.w	r3, #4294967295
   21020:	f44f 6200 	mov.w	r2, #2048	; 0x800
   21024:	f000 fac0 	bl	215a8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   21028:	4620      	mov	r0, r4
   2102a:	b004      	add	sp, #16
   2102c:	bd10      	pop	{r4, pc}
   2102e:	bf00      	nop
   21030:	0002e5ba 	.word	0x0002e5ba
   21034:	20008d80 	.word	0x20008d80
   21038:	20002df0 	.word	0x20002df0

0002103c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   2103c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21040:	4e6e      	ldr	r6, [pc, #440]	; (211fc <work_queue_main+0x1c0>)
	return list->head;
   21042:	4f6f      	ldr	r7, [pc, #444]	; (21200 <work_queue_main+0x1c4>)
   21044:	b085      	sub	sp, #20
   21046:	4604      	mov	r4, r0
	__asm__ volatile(
   21048:	f04f 0340 	mov.w	r3, #64	; 0x40
   2104c:	f3ef 8811 	mrs	r8, BASEPRI
   21050:	f383 8812 	msr	BASEPRI_MAX, r3
   21054:	f3bf 8f6f 	isb	sy
   21058:	4630      	mov	r0, r6
   2105a:	f7ff fc5d 	bl	20918 <z_spin_lock_valid>
   2105e:	b968      	cbnz	r0, 2107c <work_queue_main+0x40>
   21060:	4a68      	ldr	r2, [pc, #416]	; (21204 <work_queue_main+0x1c8>)
   21062:	4969      	ldr	r1, [pc, #420]	; (21208 <work_queue_main+0x1cc>)
   21064:	4869      	ldr	r0, [pc, #420]	; (2120c <work_queue_main+0x1d0>)
   21066:	2394      	movs	r3, #148	; 0x94
   21068:	f006 f8b8 	bl	271dc <assert_print>
   2106c:	4963      	ldr	r1, [pc, #396]	; (211fc <work_queue_main+0x1c0>)
   2106e:	4868      	ldr	r0, [pc, #416]	; (21210 <work_queue_main+0x1d4>)
   21070:	f006 f8b4 	bl	271dc <assert_print>
   21074:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21076:	4863      	ldr	r0, [pc, #396]	; (21204 <work_queue_main+0x1c8>)
   21078:	f006 f8a9 	bl	271ce <assert_post_action>
	z_spin_lock_set_owner(l);
   2107c:	4630      	mov	r0, r6
   2107e:	f7ff fc69 	bl	20954 <z_spin_lock_set_owner>
   21082:	f8d4 50c8 	ldr.w	r5, [r4, #200]	; 0xc8
Z_GENLIST_GET(slist, snode)
   21086:	b9a5      	cbnz	r5, 210b2 <work_queue_main+0x76>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   21088:	2102      	movs	r1, #2
   2108a:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   2108e:	f008 fc1b 	bl	298c8 <flag_test_and_clear>
   21092:	bba8      	cbnz	r0, 21100 <work_queue_main+0xc4>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   21094:	2300      	movs	r3, #0
   21096:	9302      	str	r3, [sp, #8]
   21098:	f04f 32ff 	mov.w	r2, #4294967295
   2109c:	f04f 33ff 	mov.w	r3, #4294967295
   210a0:	e9cd 2300 	strd	r2, r3, [sp]
   210a4:	4641      	mov	r1, r8
   210a6:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
   210aa:	4630      	mov	r0, r6
   210ac:	f001 fea0 	bl	22df0 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   210b0:	e7ca      	b.n	21048 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   210b2:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
	return node->next;
   210b6:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   210b8:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   210bc:	4295      	cmp	r5, r2
	list->tail = node;
   210be:	bf08      	it	eq
   210c0:	f8c4 30cc 	streq.w	r3, [r4, #204]	; 0xcc
	*flagp |= BIT(bit);
   210c4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
   210c8:	f043 0302 	orr.w	r3, r3, #2
   210cc:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	*flagp &= ~BIT(bit);
   210d0:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   210d2:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   210d6:	f023 0304 	bic.w	r3, r3, #4
   210da:	f043 0301 	orr.w	r3, r3, #1
   210de:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   210e0:	4630      	mov	r0, r6
   210e2:	f7ff fc27 	bl	20934 <z_spin_unlock_valid>
   210e6:	b9a8      	cbnz	r0, 21114 <work_queue_main+0xd8>
   210e8:	4a46      	ldr	r2, [pc, #280]	; (21204 <work_queue_main+0x1c8>)
   210ea:	494a      	ldr	r1, [pc, #296]	; (21214 <work_queue_main+0x1d8>)
   210ec:	4847      	ldr	r0, [pc, #284]	; (2120c <work_queue_main+0x1d0>)
   210ee:	23c2      	movs	r3, #194	; 0xc2
   210f0:	f006 f874 	bl	271dc <assert_print>
   210f4:	4941      	ldr	r1, [pc, #260]	; (211fc <work_queue_main+0x1c0>)
   210f6:	4848      	ldr	r0, [pc, #288]	; (21218 <work_queue_main+0x1dc>)
   210f8:	f006 f870 	bl	271dc <assert_print>
   210fc:	21c2      	movs	r1, #194	; 0xc2
   210fe:	e7ba      	b.n	21076 <work_queue_main+0x3a>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   21100:	f104 05d8 	add.w	r5, r4, #216	; 0xd8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   21104:	2200      	movs	r2, #0
   21106:	2101      	movs	r1, #1
   21108:	4628      	mov	r0, r5
   2110a:	f001 fe13 	bl	22d34 <z_sched_wake>
   2110e:	2800      	cmp	r0, #0
   21110:	d1f8      	bne.n	21104 <work_queue_main+0xc8>
   21112:	e7bf      	b.n	21094 <work_queue_main+0x58>
	__asm__ volatile(
   21114:	f388 8811 	msr	BASEPRI, r8
   21118:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   2111c:	f1b9 0f00 	cmp.w	r9, #0
   21120:	d10a      	bne.n	21138 <work_queue_main+0xfc>
   21122:	493e      	ldr	r1, [pc, #248]	; (2121c <work_queue_main+0x1e0>)
   21124:	4839      	ldr	r0, [pc, #228]	; (2120c <work_queue_main+0x1d0>)
   21126:	4a3e      	ldr	r2, [pc, #248]	; (21220 <work_queue_main+0x1e4>)
   21128:	f240 239b 	movw	r3, #667	; 0x29b
   2112c:	f006 f856 	bl	271dc <assert_print>
   21130:	483b      	ldr	r0, [pc, #236]	; (21220 <work_queue_main+0x1e4>)
   21132:	f240 219b 	movw	r1, #667	; 0x29b
   21136:	e79f      	b.n	21078 <work_queue_main+0x3c>
		handler(work);
   21138:	4628      	mov	r0, r5
   2113a:	47c8      	blx	r9
	__asm__ volatile(
   2113c:	f04f 0340 	mov.w	r3, #64	; 0x40
   21140:	f3ef 8a11 	mrs	sl, BASEPRI
   21144:	f383 8812 	msr	BASEPRI_MAX, r3
   21148:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2114c:	4630      	mov	r0, r6
   2114e:	f7ff fbe3 	bl	20918 <z_spin_lock_valid>
   21152:	2800      	cmp	r0, #0
   21154:	d084      	beq.n	21060 <work_queue_main+0x24>
	z_spin_lock_set_owner(l);
   21156:	4630      	mov	r0, r6
   21158:	f7ff fbfc 	bl	20954 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   2115c:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2115e:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   21160:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   21164:	d417      	bmi.n	21196 <work_queue_main+0x15a>
	*flagp &= ~BIT(bit);
   21166:	60ea      	str	r2, [r5, #12]
   21168:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
   2116c:	f023 0302 	bic.w	r3, r3, #2
   21170:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21174:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
   21176:	f3c3 2500 	ubfx	r5, r3, #8, #1
   2117a:	f7ff fbdb 	bl	20934 <z_spin_unlock_valid>
   2117e:	2800      	cmp	r0, #0
   21180:	d0b2      	beq.n	210e8 <work_queue_main+0xac>
	__asm__ volatile(
   21182:	f38a 8811 	msr	BASEPRI, sl
   21186:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   2118a:	2d00      	cmp	r5, #0
   2118c:	f47f af5c 	bne.w	21048 <work_queue_main+0xc>
	z_impl_k_yield();
   21190:	f001 fb94 	bl	228bc <z_impl_k_yield>
}
   21194:	e758      	b.n	21048 <work_queue_main+0xc>
	return list->head;
   21196:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   21198:	f023 0303 	bic.w	r3, r3, #3
   2119c:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2119e:	2800      	cmp	r0, #0
   211a0:	d0e2      	beq.n	21168 <work_queue_main+0x12c>
	return node->next;
   211a2:	f04f 0800 	mov.w	r8, #0
   211a6:	f8d0 9000 	ldr.w	r9, [r0]
	parent->next = child;
   211aa:	46c3      	mov	fp, r8
   211ac:	2800      	cmp	r0, #0
   211ae:	d0db      	beq.n	21168 <work_queue_main+0x12c>
		if (wc->work == work) {
   211b0:	6843      	ldr	r3, [r0, #4]
   211b2:	429d      	cmp	r5, r3
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   211b4:	4602      	mov	r2, r0
		if (wc->work == work) {
   211b6:	d10d      	bne.n	211d4 <work_queue_main+0x198>
	return node->next;
   211b8:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   211ba:	f1b8 0f00 	cmp.w	r8, #0
   211be:	d112      	bne.n	211e6 <work_queue_main+0x1aa>
   211c0:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   211c2:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   211c4:	4283      	cmp	r3, r0
   211c6:	d100      	bne.n	211ca <work_queue_main+0x18e>
	list->tail = node;
   211c8:	607a      	str	r2, [r7, #4]
	parent->next = child;
   211ca:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   211ce:	f7ff fe5d 	bl	20e8c <z_impl_k_sem_give>
}
   211d2:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   211d4:	f1b9 0f00 	cmp.w	r9, #0
   211d8:	d00d      	beq.n	211f6 <work_queue_main+0x1ba>
	return node->next;
   211da:	f8d9 3000 	ldr.w	r3, [r9]
   211de:	4648      	mov	r0, r9
   211e0:	4690      	mov	r8, r2
   211e2:	4699      	mov	r9, r3
   211e4:	e7e2      	b.n	211ac <work_queue_main+0x170>
	parent->next = child;
   211e6:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   211ea:	687b      	ldr	r3, [r7, #4]
   211ec:	4283      	cmp	r3, r0
	list->tail = node;
   211ee:	bf08      	it	eq
   211f0:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   211f4:	e7e9      	b.n	211ca <work_queue_main+0x18e>
   211f6:	464b      	mov	r3, r9
   211f8:	e7f1      	b.n	211de <work_queue_main+0x1a2>
   211fa:	bf00      	nop
   211fc:	2000380c 	.word	0x2000380c
   21200:	20003804 	.word	0x20003804
   21204:	0002b22b 	.word	0x0002b22b
   21208:	0002b284 	.word	0x0002b284
   2120c:	0002ae37 	.word	0x0002ae37
   21210:	0002b299 	.word	0x0002b299
   21214:	0002b258 	.word	0x0002b258
   21218:	0002b26f 	.word	0x0002b26f
   2121c:	0002e5e4 	.word	0x0002e5e4
   21220:	0002e5c3 	.word	0x0002e5c3

00021224 <cancel_sync_locked>:
{
   21224:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   21226:	68c3      	ldr	r3, [r0, #12]
   21228:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   2122c:	079b      	lsls	r3, r3, #30
{
   2122e:	4605      	mov	r5, r0
   21230:	460c      	mov	r4, r1
	if (ret) {
   21232:	d50d      	bpl.n	21250 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   21234:	2201      	movs	r2, #1
   21236:	2100      	movs	r1, #0
   21238:	f104 0008 	add.w	r0, r4, #8
   2123c:	f008 fb34 	bl	298a8 <z_impl_k_sem_init>
	parent->next = child;
   21240:	2300      	movs	r3, #0
   21242:	6023      	str	r3, [r4, #0]
	return list->tail;
   21244:	4b05      	ldr	r3, [pc, #20]	; (2125c <cancel_sync_locked+0x38>)
	canceler->work = work;
   21246:	6065      	str	r5, [r4, #4]
   21248:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   2124a:	b91a      	cbnz	r2, 21254 <cancel_sync_locked+0x30>
	list->head = node;
   2124c:	e9c3 4400 	strd	r4, r4, [r3]
}
   21250:	4630      	mov	r0, r6
   21252:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   21254:	6014      	str	r4, [r2, #0]
	list->tail = node;
   21256:	605c      	str	r4, [r3, #4]
}
   21258:	e7fa      	b.n	21250 <cancel_sync_locked+0x2c>
   2125a:	bf00      	nop
   2125c:	20003804 	.word	0x20003804

00021260 <submit_to_queue_locked>:
{
   21260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   21262:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   21264:	079a      	lsls	r2, r3, #30
{
   21266:	4604      	mov	r4, r0
   21268:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2126a:	f3c3 0640 	ubfx	r6, r3, #1, #1
   2126e:	d439      	bmi.n	212e4 <submit_to_queue_locked+0x84>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   21270:	075b      	lsls	r3, r3, #29
   21272:	d425      	bmi.n	212c0 <submit_to_queue_locked+0x60>
		if (*queuep == NULL) {
   21274:	680b      	ldr	r3, [r1, #0]
   21276:	b90b      	cbnz	r3, 2127c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   21278:	6883      	ldr	r3, [r0, #8]
   2127a:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   2127c:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   2127e:	07dd      	lsls	r5, r3, #31
   21280:	d521      	bpl.n	212c6 <submit_to_queue_locked+0x66>
			__ASSERT_NO_MSG(work->queue != NULL);
   21282:	68a3      	ldr	r3, [r4, #8]
   21284:	b95b      	cbnz	r3, 2129e <submit_to_queue_locked+0x3e>
   21286:	4928      	ldr	r1, [pc, #160]	; (21328 <submit_to_queue_locked+0xc8>)
   21288:	4828      	ldr	r0, [pc, #160]	; (2132c <submit_to_queue_locked+0xcc>)
   2128a:	4a29      	ldr	r2, [pc, #164]	; (21330 <submit_to_queue_locked+0xd0>)
   2128c:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   21290:	f005 ffa4 	bl	271dc <assert_print>
   21294:	4826      	ldr	r0, [pc, #152]	; (21330 <submit_to_queue_locked+0xd0>)
   21296:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   2129a:	f005 ff98 	bl	271ce <assert_post_action>
			*queuep = work->queue;
   2129e:	603b      	str	r3, [r7, #0]
			ret = 2;
   212a0:	2602      	movs	r6, #2
		int rc = queue_submit_locked(*queuep, work);
   212a2:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
   212a4:	2d00      	cmp	r5, #0
   212a6:	d03c      	beq.n	21322 <submit_to_queue_locked+0xc2>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   212a8:	4b22      	ldr	r3, [pc, #136]	; (21334 <submit_to_queue_locked+0xd4>)
   212aa:	689b      	ldr	r3, [r3, #8]
   212ac:	42ab      	cmp	r3, r5
   212ae:	d00c      	beq.n	212ca <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   212b0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   212b4:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   212b6:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   212ba:	d416      	bmi.n	212ea <submit_to_queue_locked+0x8a>
		ret = -EBUSY;
   212bc:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   212c0:	2300      	movs	r3, #0
   212c2:	603b      	str	r3, [r7, #0]
	return ret;
   212c4:	e027      	b.n	21316 <submit_to_queue_locked+0xb6>
		ret = 1;
   212c6:	2601      	movs	r6, #1
   212c8:	e7eb      	b.n	212a2 <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   212ca:	f008 fa98 	bl	297fe <k_is_in_isr>
   212ce:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
   212d2:	2800      	cmp	r0, #0
   212d4:	d1ee      	bne.n	212b4 <submit_to_queue_locked+0x54>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   212d6:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   212d8:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   212dc:	d5ee      	bpl.n	212bc <submit_to_queue_locked+0x5c>
	} else if (plugged && !draining) {
   212de:	b152      	cbz	r2, 212f6 <submit_to_queue_locked+0x96>
   212e0:	075b      	lsls	r3, r3, #29
   212e2:	d408      	bmi.n	212f6 <submit_to_queue_locked+0x96>
		ret = -EBUSY;
   212e4:	f06f 060f 	mvn.w	r6, #15
   212e8:	e7ea      	b.n	212c0 <submit_to_queue_locked+0x60>
	} else if (draining && !chained) {
   212ea:	2a00      	cmp	r2, #0
   212ec:	d1fa      	bne.n	212e4 <submit_to_queue_locked+0x84>
	return (*flagp & BIT(bit)) != 0U;
   212ee:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   212f2:	2b00      	cmp	r3, #0
   212f4:	d1f6      	bne.n	212e4 <submit_to_queue_locked+0x84>
	parent->next = child;
   212f6:	2300      	movs	r3, #0
   212f8:	6023      	str	r3, [r4, #0]
	return list->tail;
   212fa:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
Z_GENLIST_APPEND(slist, snode)
   212fe:	b963      	cbnz	r3, 2131a <submit_to_queue_locked+0xba>
	list->head = node;
   21300:	e9c5 4432 	strd	r4, r4, [r5, #200]	; 0xc8
		(void)notify_queue_locked(queue);
   21304:	4628      	mov	r0, r5
   21306:	f008 faf9 	bl	298fc <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   2130a:	68e3      	ldr	r3, [r4, #12]
   2130c:	f043 0304 	orr.w	r3, r3, #4
   21310:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   21312:	683b      	ldr	r3, [r7, #0]
   21314:	60a3      	str	r3, [r4, #8]
}
   21316:	4630      	mov	r0, r6
   21318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   2131a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2131c:	f8c5 40cc 	str.w	r4, [r5, #204]	; 0xcc
}
   21320:	e7f0      	b.n	21304 <submit_to_queue_locked+0xa4>
		return -EINVAL;
   21322:	f06f 0615 	mvn.w	r6, #21
   21326:	e7cb      	b.n	212c0 <submit_to_queue_locked+0x60>
   21328:	0002e5fb 	.word	0x0002e5fb
   2132c:	0002ae37 	.word	0x0002ae37
   21330:	0002e5c3 	.word	0x0002e5c3
   21334:	200037d0 	.word	0x200037d0

00021338 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   21338:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2133a:	4604      	mov	r4, r0
	__asm__ volatile(
   2133c:	f04f 0340 	mov.w	r3, #64	; 0x40
   21340:	f3ef 8511 	mrs	r5, BASEPRI
   21344:	f383 8812 	msr	BASEPRI_MAX, r3
   21348:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2134c:	481c      	ldr	r0, [pc, #112]	; (213c0 <work_timeout+0x88>)
   2134e:	f7ff fae3 	bl	20918 <z_spin_lock_valid>
   21352:	b968      	cbnz	r0, 21370 <work_timeout+0x38>
   21354:	4a1b      	ldr	r2, [pc, #108]	; (213c4 <work_timeout+0x8c>)
   21356:	491c      	ldr	r1, [pc, #112]	; (213c8 <work_timeout+0x90>)
   21358:	481c      	ldr	r0, [pc, #112]	; (213cc <work_timeout+0x94>)
   2135a:	2394      	movs	r3, #148	; 0x94
   2135c:	f005 ff3e 	bl	271dc <assert_print>
   21360:	4917      	ldr	r1, [pc, #92]	; (213c0 <work_timeout+0x88>)
   21362:	481b      	ldr	r0, [pc, #108]	; (213d0 <work_timeout+0x98>)
   21364:	f005 ff3a 	bl	271dc <assert_print>
   21368:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2136a:	4816      	ldr	r0, [pc, #88]	; (213c4 <work_timeout+0x8c>)
   2136c:	f005 ff2f 	bl	271ce <assert_post_action>
	z_spin_lock_set_owner(l);
   21370:	4813      	ldr	r0, [pc, #76]	; (213c0 <work_timeout+0x88>)
   21372:	f7ff faef 	bl	20954 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   21376:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   21378:	2103      	movs	r1, #3
   2137a:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   2137c:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2137e:	f1a4 0610 	sub.w	r6, r4, #16
   21382:	f008 faa1 	bl	298c8 <flag_test_and_clear>
   21386:	b128      	cbz	r0, 21394 <work_timeout+0x5c>
		queue = dw->queue;
   21388:	69a3      	ldr	r3, [r4, #24]
   2138a:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2138c:	a901      	add	r1, sp, #4
   2138e:	4630      	mov	r0, r6
   21390:	f7ff ff66 	bl	21260 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21394:	480a      	ldr	r0, [pc, #40]	; (213c0 <work_timeout+0x88>)
   21396:	f7ff facd 	bl	20934 <z_spin_unlock_valid>
   2139a:	b958      	cbnz	r0, 213b4 <work_timeout+0x7c>
   2139c:	4a09      	ldr	r2, [pc, #36]	; (213c4 <work_timeout+0x8c>)
   2139e:	490d      	ldr	r1, [pc, #52]	; (213d4 <work_timeout+0x9c>)
   213a0:	480a      	ldr	r0, [pc, #40]	; (213cc <work_timeout+0x94>)
   213a2:	23c2      	movs	r3, #194	; 0xc2
   213a4:	f005 ff1a 	bl	271dc <assert_print>
   213a8:	4905      	ldr	r1, [pc, #20]	; (213c0 <work_timeout+0x88>)
   213aa:	480b      	ldr	r0, [pc, #44]	; (213d8 <work_timeout+0xa0>)
   213ac:	f005 ff16 	bl	271dc <assert_print>
   213b0:	21c2      	movs	r1, #194	; 0xc2
   213b2:	e7da      	b.n	2136a <work_timeout+0x32>
	__asm__ volatile(
   213b4:	f385 8811 	msr	BASEPRI, r5
   213b8:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   213bc:	b002      	add	sp, #8
   213be:	bd70      	pop	{r4, r5, r6, pc}
   213c0:	2000380c 	.word	0x2000380c
   213c4:	0002b22b 	.word	0x0002b22b
   213c8:	0002b284 	.word	0x0002b284
   213cc:	0002ae37 	.word	0x0002ae37
   213d0:	0002b299 	.word	0x0002b299
   213d4:	0002b258 	.word	0x0002b258
   213d8:	0002b26f 	.word	0x0002b26f

000213dc <k_work_init>:
{
   213dc:	b538      	push	{r3, r4, r5, lr}
   213de:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   213e0:	4604      	mov	r4, r0
   213e2:	b948      	cbnz	r0, 213f8 <k_work_init+0x1c>
   213e4:	490c      	ldr	r1, [pc, #48]	; (21418 <k_work_init+0x3c>)
   213e6:	4a0d      	ldr	r2, [pc, #52]	; (2141c <k_work_init+0x40>)
   213e8:	480d      	ldr	r0, [pc, #52]	; (21420 <k_work_init+0x44>)
   213ea:	2389      	movs	r3, #137	; 0x89
   213ec:	f005 fef6 	bl	271dc <assert_print>
   213f0:	2189      	movs	r1, #137	; 0x89
	__ASSERT_NO_MSG(handler != NULL);
   213f2:	480a      	ldr	r0, [pc, #40]	; (2141c <k_work_init+0x40>)
   213f4:	f005 feeb 	bl	271ce <assert_post_action>
   213f8:	b939      	cbnz	r1, 2140a <k_work_init+0x2e>
   213fa:	490a      	ldr	r1, [pc, #40]	; (21424 <k_work_init+0x48>)
   213fc:	4a07      	ldr	r2, [pc, #28]	; (2141c <k_work_init+0x40>)
   213fe:	4808      	ldr	r0, [pc, #32]	; (21420 <k_work_init+0x44>)
   21400:	238a      	movs	r3, #138	; 0x8a
   21402:	f005 feeb 	bl	271dc <assert_print>
   21406:	218a      	movs	r1, #138	; 0x8a
   21408:	e7f3      	b.n	213f2 <k_work_init+0x16>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2140a:	2210      	movs	r2, #16
   2140c:	2100      	movs	r1, #0
   2140e:	f006 fb18 	bl	27a42 <memset>
   21412:	6065      	str	r5, [r4, #4]
}
   21414:	bd38      	pop	{r3, r4, r5, pc}
   21416:	bf00      	nop
   21418:	0002e69a 	.word	0x0002e69a
   2141c:	0002e5c3 	.word	0x0002e5c3
   21420:	0002ae37 	.word	0x0002ae37
   21424:	0002e5e4 	.word	0x0002e5e4

00021428 <k_work_busy_get>:
{
   21428:	b538      	push	{r3, r4, r5, lr}
   2142a:	4604      	mov	r4, r0
	__asm__ volatile(
   2142c:	f04f 0340 	mov.w	r3, #64	; 0x40
   21430:	f3ef 8511 	mrs	r5, BASEPRI
   21434:	f383 8812 	msr	BASEPRI_MAX, r3
   21438:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2143c:	4816      	ldr	r0, [pc, #88]	; (21498 <k_work_busy_get+0x70>)
   2143e:	f7ff fa6b 	bl	20918 <z_spin_lock_valid>
   21442:	b968      	cbnz	r0, 21460 <k_work_busy_get+0x38>
   21444:	4a15      	ldr	r2, [pc, #84]	; (2149c <k_work_busy_get+0x74>)
   21446:	4916      	ldr	r1, [pc, #88]	; (214a0 <k_work_busy_get+0x78>)
   21448:	4816      	ldr	r0, [pc, #88]	; (214a4 <k_work_busy_get+0x7c>)
   2144a:	2394      	movs	r3, #148	; 0x94
   2144c:	f005 fec6 	bl	271dc <assert_print>
   21450:	4911      	ldr	r1, [pc, #68]	; (21498 <k_work_busy_get+0x70>)
   21452:	4815      	ldr	r0, [pc, #84]	; (214a8 <k_work_busy_get+0x80>)
   21454:	f005 fec2 	bl	271dc <assert_print>
   21458:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2145a:	4810      	ldr	r0, [pc, #64]	; (2149c <k_work_busy_get+0x74>)
   2145c:	f005 feb7 	bl	271ce <assert_post_action>
	z_spin_lock_set_owner(l);
   21460:	480d      	ldr	r0, [pc, #52]	; (21498 <k_work_busy_get+0x70>)
   21462:	f7ff fa77 	bl	20954 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   21466:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21468:	480b      	ldr	r0, [pc, #44]	; (21498 <k_work_busy_get+0x70>)
   2146a:	f004 040f 	and.w	r4, r4, #15
   2146e:	f7ff fa61 	bl	20934 <z_spin_unlock_valid>
   21472:	b958      	cbnz	r0, 2148c <k_work_busy_get+0x64>
   21474:	4a09      	ldr	r2, [pc, #36]	; (2149c <k_work_busy_get+0x74>)
   21476:	490d      	ldr	r1, [pc, #52]	; (214ac <k_work_busy_get+0x84>)
   21478:	480a      	ldr	r0, [pc, #40]	; (214a4 <k_work_busy_get+0x7c>)
   2147a:	23c2      	movs	r3, #194	; 0xc2
   2147c:	f005 feae 	bl	271dc <assert_print>
   21480:	4905      	ldr	r1, [pc, #20]	; (21498 <k_work_busy_get+0x70>)
   21482:	480b      	ldr	r0, [pc, #44]	; (214b0 <k_work_busy_get+0x88>)
   21484:	f005 feaa 	bl	271dc <assert_print>
   21488:	21c2      	movs	r1, #194	; 0xc2
   2148a:	e7e6      	b.n	2145a <k_work_busy_get+0x32>
	__asm__ volatile(
   2148c:	f385 8811 	msr	BASEPRI, r5
   21490:	f3bf 8f6f 	isb	sy
}
   21494:	4620      	mov	r0, r4
   21496:	bd38      	pop	{r3, r4, r5, pc}
   21498:	2000380c 	.word	0x2000380c
   2149c:	0002b22b 	.word	0x0002b22b
   214a0:	0002b284 	.word	0x0002b284
   214a4:	0002ae37 	.word	0x0002ae37
   214a8:	0002b299 	.word	0x0002b299
   214ac:	0002b258 	.word	0x0002b258
   214b0:	0002b26f 	.word	0x0002b26f

000214b4 <z_work_submit_to_queue>:
{
   214b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   214b6:	460c      	mov	r4, r1
{
   214b8:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   214ba:	b959      	cbnz	r1, 214d4 <z_work_submit_to_queue+0x20>
   214bc:	4921      	ldr	r1, [pc, #132]	; (21544 <z_work_submit_to_queue+0x90>)
   214be:	4822      	ldr	r0, [pc, #136]	; (21548 <z_work_submit_to_queue+0x94>)
   214c0:	4a22      	ldr	r2, [pc, #136]	; (2154c <z_work_submit_to_queue+0x98>)
   214c2:	f44f 73ba 	mov.w	r3, #372	; 0x174
   214c6:	f005 fe89 	bl	271dc <assert_print>
   214ca:	4820      	ldr	r0, [pc, #128]	; (2154c <z_work_submit_to_queue+0x98>)
   214cc:	f44f 71ba 	mov.w	r1, #372	; 0x174
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   214d0:	f005 fe7d 	bl	271ce <assert_post_action>
	__asm__ volatile(
   214d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   214d8:	f3ef 8511 	mrs	r5, BASEPRI
   214dc:	f383 8812 	msr	BASEPRI_MAX, r3
   214e0:	f3bf 8f6f 	isb	sy
   214e4:	481a      	ldr	r0, [pc, #104]	; (21550 <z_work_submit_to_queue+0x9c>)
   214e6:	f7ff fa17 	bl	20918 <z_spin_lock_valid>
   214ea:	b960      	cbnz	r0, 21506 <z_work_submit_to_queue+0x52>
   214ec:	4a19      	ldr	r2, [pc, #100]	; (21554 <z_work_submit_to_queue+0xa0>)
   214ee:	491a      	ldr	r1, [pc, #104]	; (21558 <z_work_submit_to_queue+0xa4>)
   214f0:	4815      	ldr	r0, [pc, #84]	; (21548 <z_work_submit_to_queue+0x94>)
   214f2:	2394      	movs	r3, #148	; 0x94
   214f4:	f005 fe72 	bl	271dc <assert_print>
   214f8:	4915      	ldr	r1, [pc, #84]	; (21550 <z_work_submit_to_queue+0x9c>)
   214fa:	4818      	ldr	r0, [pc, #96]	; (2155c <z_work_submit_to_queue+0xa8>)
   214fc:	f005 fe6e 	bl	271dc <assert_print>
   21500:	2194      	movs	r1, #148	; 0x94
   21502:	4814      	ldr	r0, [pc, #80]	; (21554 <z_work_submit_to_queue+0xa0>)
   21504:	e7e4      	b.n	214d0 <z_work_submit_to_queue+0x1c>
	z_spin_lock_set_owner(l);
   21506:	4812      	ldr	r0, [pc, #72]	; (21550 <z_work_submit_to_queue+0x9c>)
   21508:	f7ff fa24 	bl	20954 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   2150c:	4620      	mov	r0, r4
   2150e:	a901      	add	r1, sp, #4
   21510:	f7ff fea6 	bl	21260 <submit_to_queue_locked>
   21514:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21516:	480e      	ldr	r0, [pc, #56]	; (21550 <z_work_submit_to_queue+0x9c>)
   21518:	f7ff fa0c 	bl	20934 <z_spin_unlock_valid>
   2151c:	b958      	cbnz	r0, 21536 <z_work_submit_to_queue+0x82>
   2151e:	4a0d      	ldr	r2, [pc, #52]	; (21554 <z_work_submit_to_queue+0xa0>)
   21520:	490f      	ldr	r1, [pc, #60]	; (21560 <z_work_submit_to_queue+0xac>)
   21522:	4809      	ldr	r0, [pc, #36]	; (21548 <z_work_submit_to_queue+0x94>)
   21524:	23c2      	movs	r3, #194	; 0xc2
   21526:	f005 fe59 	bl	271dc <assert_print>
   2152a:	4909      	ldr	r1, [pc, #36]	; (21550 <z_work_submit_to_queue+0x9c>)
   2152c:	480d      	ldr	r0, [pc, #52]	; (21564 <z_work_submit_to_queue+0xb0>)
   2152e:	f005 fe55 	bl	271dc <assert_print>
   21532:	21c2      	movs	r1, #194	; 0xc2
   21534:	e7e5      	b.n	21502 <z_work_submit_to_queue+0x4e>
	__asm__ volatile(
   21536:	f385 8811 	msr	BASEPRI, r5
   2153a:	f3bf 8f6f 	isb	sy
}
   2153e:	4620      	mov	r0, r4
   21540:	b003      	add	sp, #12
   21542:	bd30      	pop	{r4, r5, pc}
   21544:	0002e69a 	.word	0x0002e69a
   21548:	0002ae37 	.word	0x0002ae37
   2154c:	0002e5c3 	.word	0x0002e5c3
   21550:	2000380c 	.word	0x2000380c
   21554:	0002b22b 	.word	0x0002b22b
   21558:	0002b284 	.word	0x0002b284
   2155c:	0002b299 	.word	0x0002b299
   21560:	0002b258 	.word	0x0002b258
   21564:	0002b26f 	.word	0x0002b26f

00021568 <k_work_submit>:
{
   21568:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   2156a:	4801      	ldr	r0, [pc, #4]	; (21570 <k_work_submit+0x8>)
   2156c:	f008 ba00 	b.w	29970 <k_work_submit_to_queue>
   21570:	20002df0 	.word	0x20002df0

00021574 <k_work_queue_init>:
{
   21574:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(queue != NULL);
   21576:	b958      	cbnz	r0, 21590 <k_work_queue_init+0x1c>
   21578:	4908      	ldr	r1, [pc, #32]	; (2159c <k_work_queue_init+0x28>)
   2157a:	4809      	ldr	r0, [pc, #36]	; (215a0 <k_work_queue_init+0x2c>)
   2157c:	4a09      	ldr	r2, [pc, #36]	; (215a4 <k_work_queue_init+0x30>)
   2157e:	f240 23b9 	movw	r3, #697	; 0x2b9
   21582:	f005 fe2b 	bl	271dc <assert_print>
   21586:	4807      	ldr	r0, [pc, #28]	; (215a4 <k_work_queue_init+0x30>)
   21588:	f240 21b9 	movw	r1, #697	; 0x2b9
   2158c:	f005 fe1f 	bl	271ce <assert_post_action>
	*queue = (struct k_work_q) {
   21590:	22e8      	movs	r2, #232	; 0xe8
   21592:	2100      	movs	r1, #0
   21594:	f006 fa55 	bl	27a42 <memset>
}
   21598:	bd08      	pop	{r3, pc}
   2159a:	bf00      	nop
   2159c:	0002e601 	.word	0x0002e601
   215a0:	0002ae37 	.word	0x0002ae37
   215a4:	0002e5c3 	.word	0x0002e5c3

000215a8 <k_work_queue_start>:
{
   215a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   215aa:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(queue);
   215ac:	4604      	mov	r4, r0
{
   215ae:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   215b0:	b958      	cbnz	r0, 215ca <k_work_queue_start+0x22>
   215b2:	492b      	ldr	r1, [pc, #172]	; (21660 <k_work_queue_start+0xb8>)
   215b4:	4a2b      	ldr	r2, [pc, #172]	; (21664 <k_work_queue_start+0xbc>)
   215b6:	482c      	ldr	r0, [pc, #176]	; (21668 <k_work_queue_start+0xc0>)
   215b8:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   215bc:	f005 fe0e 	bl	271dc <assert_print>
   215c0:	f44f 7132 	mov.w	r1, #712	; 0x2c8
	__ASSERT_NO_MSG(stack);
   215c4:	4827      	ldr	r0, [pc, #156]	; (21664 <k_work_queue_start+0xbc>)
   215c6:	f005 fe02 	bl	271ce <assert_post_action>
   215ca:	b949      	cbnz	r1, 215e0 <k_work_queue_start+0x38>
   215cc:	4927      	ldr	r1, [pc, #156]	; (2166c <k_work_queue_start+0xc4>)
   215ce:	4a25      	ldr	r2, [pc, #148]	; (21664 <k_work_queue_start+0xbc>)
   215d0:	4825      	ldr	r0, [pc, #148]	; (21668 <k_work_queue_start+0xc0>)
   215d2:	f240 23c9 	movw	r3, #713	; 0x2c9
   215d6:	f005 fe01 	bl	271dc <assert_print>
   215da:	f240 21c9 	movw	r1, #713	; 0x2c9
   215de:	e7f1      	b.n	215c4 <k_work_queue_start+0x1c>
	return (*flagp & BIT(bit)) != 0U;
   215e0:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   215e4:	f010 0001 	ands.w	r0, r0, #1
   215e8:	d009      	beq.n	215fe <k_work_queue_start+0x56>
   215ea:	4921      	ldr	r1, [pc, #132]	; (21670 <k_work_queue_start+0xc8>)
   215ec:	4a1d      	ldr	r2, [pc, #116]	; (21664 <k_work_queue_start+0xbc>)
   215ee:	481e      	ldr	r0, [pc, #120]	; (21668 <k_work_queue_start+0xc0>)
   215f0:	f240 23ca 	movw	r3, #714	; 0x2ca
   215f4:	f005 fdf2 	bl	271dc <assert_print>
   215f8:	f240 21ca 	movw	r1, #714	; 0x2ca
   215fc:	e7e2      	b.n	215c4 <k_work_queue_start+0x1c>
	list->tail = NULL;
   215fe:	e9c4 0032 	strd	r0, r0, [r4, #200]	; 0xc8
   21602:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
	list->tail = (sys_dnode_t *)list;
   21606:	e9c4 0034 	strd	r0, r0, [r4, #208]	; 0xd0
   2160a:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   2160e:	e9c4 0036 	strd	r0, r0, [r4, #216]	; 0xd8
	if ((cfg != NULL) && cfg->no_yield) {
   21612:	b31d      	cbz	r5, 2165c <k_work_queue_start+0xb4>
   21614:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   21616:	2800      	cmp	r0, #0
   21618:	f240 1001 	movw	r0, #257	; 0x101
   2161c:	bf08      	it	eq
   2161e:	2001      	moveq	r0, #1
	*flagp = flags;
   21620:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   21624:	2000      	movs	r0, #0
   21626:	f04f 36ff 	mov.w	r6, #4294967295
   2162a:	f04f 37ff 	mov.w	r7, #4294967295
   2162e:	e9cd 3003 	strd	r3, r0, [sp, #12]
   21632:	e9cd 0001 	strd	r0, r0, [sp, #4]
   21636:	e9cd 6706 	strd	r6, r7, [sp, #24]
   2163a:	4b0e      	ldr	r3, [pc, #56]	; (21674 <k_work_queue_start+0xcc>)
   2163c:	9400      	str	r4, [sp, #0]
   2163e:	4620      	mov	r0, r4
   21640:	f7ff f8a0 	bl	20784 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   21644:	b125      	cbz	r5, 21650 <k_work_queue_start+0xa8>
   21646:	6829      	ldr	r1, [r5, #0]
   21648:	b111      	cbz	r1, 21650 <k_work_queue_start+0xa8>
	return z_impl_k_thread_name_set(thread, str);
   2164a:	4620      	mov	r0, r4
   2164c:	f008 f8dd 	bl	2980a <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   21650:	4620      	mov	r0, r4
}
   21652:	b009      	add	sp, #36	; 0x24
   21654:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   21658:	f008 b8dc 	b.w	29814 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   2165c:	2001      	movs	r0, #1
   2165e:	e7df      	b.n	21620 <k_work_queue_start+0x78>
   21660:	0002e659 	.word	0x0002e659
   21664:	0002e5c3 	.word	0x0002e5c3
   21668:	0002ae37 	.word	0x0002ae37
   2166c:	0002e65f 	.word	0x0002e65f
   21670:	0002e665 	.word	0x0002e665
   21674:	0002103d 	.word	0x0002103d

00021678 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   21678:	b538      	push	{r3, r4, r5, lr}
   2167a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   2167c:	4604      	mov	r4, r0
   2167e:	b958      	cbnz	r0, 21698 <k_work_init_delayable+0x20>
   21680:	490f      	ldr	r1, [pc, #60]	; (216c0 <k_work_init_delayable+0x48>)
   21682:	4a10      	ldr	r2, [pc, #64]	; (216c4 <k_work_init_delayable+0x4c>)
   21684:	4810      	ldr	r0, [pc, #64]	; (216c8 <k_work_init_delayable+0x50>)
   21686:	f44f 7350 	mov.w	r3, #832	; 0x340
   2168a:	f005 fda7 	bl	271dc <assert_print>
   2168e:	f44f 7150 	mov.w	r1, #832	; 0x340
	__ASSERT_NO_MSG(handler != NULL);
   21692:	480c      	ldr	r0, [pc, #48]	; (216c4 <k_work_init_delayable+0x4c>)
   21694:	f005 fd9b 	bl	271ce <assert_post_action>
   21698:	b949      	cbnz	r1, 216ae <k_work_init_delayable+0x36>
   2169a:	490c      	ldr	r1, [pc, #48]	; (216cc <k_work_init_delayable+0x54>)
   2169c:	4a09      	ldr	r2, [pc, #36]	; (216c4 <k_work_init_delayable+0x4c>)
   2169e:	480a      	ldr	r0, [pc, #40]	; (216c8 <k_work_init_delayable+0x50>)
   216a0:	f240 3341 	movw	r3, #833	; 0x341
   216a4:	f005 fd9a 	bl	271dc <assert_print>
   216a8:	f240 3141 	movw	r1, #833	; 0x341
   216ac:	e7f1      	b.n	21692 <k_work_init_delayable+0x1a>

	*dwork = (struct k_work_delayable){
   216ae:	2230      	movs	r2, #48	; 0x30
   216b0:	2100      	movs	r1, #0
   216b2:	f006 f9c6 	bl	27a42 <memset>
   216b6:	f44f 7380 	mov.w	r3, #256	; 0x100
   216ba:	6065      	str	r5, [r4, #4]
   216bc:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   216be:	bd38      	pop	{r3, r4, r5, pc}
   216c0:	0002e699 	.word	0x0002e699
   216c4:	0002e5c3 	.word	0x0002e5c3
   216c8:	0002ae37 	.word	0x0002ae37
   216cc:	0002e5e4 	.word	0x0002e5e4

000216d0 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   216d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   216d2:	4616      	mov	r6, r2
   216d4:	9001      	str	r0, [sp, #4]
   216d6:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   216d8:	460c      	mov	r4, r1
   216da:	b959      	cbnz	r1, 216f4 <k_work_schedule_for_queue+0x24>
   216dc:	492d      	ldr	r1, [pc, #180]	; (21794 <k_work_schedule_for_queue+0xc4>)
   216de:	482e      	ldr	r0, [pc, #184]	; (21798 <k_work_schedule_for_queue+0xc8>)
   216e0:	4a2e      	ldr	r2, [pc, #184]	; (2179c <k_work_schedule_for_queue+0xcc>)
   216e2:	f240 33ba 	movw	r3, #954	; 0x3ba
   216e6:	f005 fd79 	bl	271dc <assert_print>
   216ea:	482c      	ldr	r0, [pc, #176]	; (2179c <k_work_schedule_for_queue+0xcc>)
   216ec:	f240 31ba 	movw	r1, #954	; 0x3ba
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   216f0:	f005 fd6d 	bl	271ce <assert_post_action>
	__asm__ volatile(
   216f4:	f04f 0340 	mov.w	r3, #64	; 0x40
   216f8:	f3ef 8711 	mrs	r7, BASEPRI
   216fc:	f383 8812 	msr	BASEPRI_MAX, r3
   21700:	f3bf 8f6f 	isb	sy
   21704:	4826      	ldr	r0, [pc, #152]	; (217a0 <k_work_schedule_for_queue+0xd0>)
   21706:	f7ff f907 	bl	20918 <z_spin_lock_valid>
   2170a:	b960      	cbnz	r0, 21726 <k_work_schedule_for_queue+0x56>
   2170c:	4a25      	ldr	r2, [pc, #148]	; (217a4 <k_work_schedule_for_queue+0xd4>)
   2170e:	4926      	ldr	r1, [pc, #152]	; (217a8 <k_work_schedule_for_queue+0xd8>)
   21710:	4821      	ldr	r0, [pc, #132]	; (21798 <k_work_schedule_for_queue+0xc8>)
   21712:	2394      	movs	r3, #148	; 0x94
   21714:	f005 fd62 	bl	271dc <assert_print>
   21718:	4921      	ldr	r1, [pc, #132]	; (217a0 <k_work_schedule_for_queue+0xd0>)
   2171a:	4824      	ldr	r0, [pc, #144]	; (217ac <k_work_schedule_for_queue+0xdc>)
   2171c:	f005 fd5e 	bl	271dc <assert_print>
   21720:	2194      	movs	r1, #148	; 0x94
   21722:	4820      	ldr	r0, [pc, #128]	; (217a4 <k_work_schedule_for_queue+0xd4>)
   21724:	e7e4      	b.n	216f0 <k_work_schedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   21726:	481e      	ldr	r0, [pc, #120]	; (217a0 <k_work_schedule_for_queue+0xd0>)
   21728:	f7ff f914 	bl	20954 <z_spin_lock_set_owner>
	return *flagp;
   2172c:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   2172e:	f013 0f0e 	tst.w	r3, #14
   21732:	d125      	bne.n	21780 <k_work_schedule_for_queue+0xb0>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   21734:	ea55 0206 	orrs.w	r2, r5, r6
   21738:	d114      	bne.n	21764 <k_work_schedule_for_queue+0x94>
		return submit_to_queue_locked(work, queuep);
   2173a:	4620      	mov	r0, r4
   2173c:	a901      	add	r1, sp, #4
   2173e:	f7ff fd8f 	bl	21260 <submit_to_queue_locked>
   21742:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21744:	4816      	ldr	r0, [pc, #88]	; (217a0 <k_work_schedule_for_queue+0xd0>)
   21746:	f7ff f8f5 	bl	20934 <z_spin_unlock_valid>
   2174a:	b9d8      	cbnz	r0, 21784 <k_work_schedule_for_queue+0xb4>
   2174c:	4a15      	ldr	r2, [pc, #84]	; (217a4 <k_work_schedule_for_queue+0xd4>)
   2174e:	4918      	ldr	r1, [pc, #96]	; (217b0 <k_work_schedule_for_queue+0xe0>)
   21750:	4811      	ldr	r0, [pc, #68]	; (21798 <k_work_schedule_for_queue+0xc8>)
   21752:	23c2      	movs	r3, #194	; 0xc2
   21754:	f005 fd42 	bl	271dc <assert_print>
   21758:	4911      	ldr	r1, [pc, #68]	; (217a0 <k_work_schedule_for_queue+0xd0>)
   2175a:	4816      	ldr	r0, [pc, #88]	; (217b4 <k_work_schedule_for_queue+0xe4>)
   2175c:	f005 fd3e 	bl	271dc <assert_print>
   21760:	21c2      	movs	r1, #194	; 0xc2
   21762:	e7de      	b.n	21722 <k_work_schedule_for_queue+0x52>
	*flagp |= BIT(bit);
   21764:	f043 0308 	orr.w	r3, r3, #8
   21768:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   2176a:	9b01      	ldr	r3, [sp, #4]
   2176c:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2176e:	f104 0010 	add.w	r0, r4, #16
   21772:	4911      	ldr	r1, [pc, #68]	; (217b8 <k_work_schedule_for_queue+0xe8>)
   21774:	4632      	mov	r2, r6
   21776:	462b      	mov	r3, r5
   21778:	f001 fbac 	bl	22ed4 <z_add_timeout>
	return ret;
   2177c:	2401      	movs	r4, #1
   2177e:	e7e1      	b.n	21744 <k_work_schedule_for_queue+0x74>
	int ret = 0;
   21780:	2400      	movs	r4, #0
   21782:	e7df      	b.n	21744 <k_work_schedule_for_queue+0x74>
	__asm__ volatile(
   21784:	f387 8811 	msr	BASEPRI, r7
   21788:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   2178c:	4620      	mov	r0, r4
   2178e:	b003      	add	sp, #12
   21790:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21792:	bf00      	nop
   21794:	0002e699 	.word	0x0002e699
   21798:	0002ae37 	.word	0x0002ae37
   2179c:	0002e5c3 	.word	0x0002e5c3
   217a0:	2000380c 	.word	0x2000380c
   217a4:	0002b22b 	.word	0x0002b22b
   217a8:	0002b284 	.word	0x0002b284
   217ac:	0002b299 	.word	0x0002b299
   217b0:	0002b258 	.word	0x0002b258
   217b4:	0002b26f 	.word	0x0002b26f
   217b8:	00021339 	.word	0x00021339

000217bc <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   217bc:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   217be:	4801      	ldr	r0, [pc, #4]	; (217c4 <k_work_schedule+0x8>)
   217c0:	f7ff bf86 	b.w	216d0 <k_work_schedule_for_queue>
   217c4:	20002df0 	.word	0x20002df0

000217c8 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   217c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   217ca:	4616      	mov	r6, r2
   217cc:	9001      	str	r0, [sp, #4]
   217ce:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   217d0:	460c      	mov	r4, r1
   217d2:	b959      	cbnz	r1, 217ec <k_work_reschedule_for_queue+0x24>
   217d4:	492c      	ldr	r1, [pc, #176]	; (21888 <k_work_reschedule_for_queue+0xc0>)
   217d6:	482d      	ldr	r0, [pc, #180]	; (2188c <k_work_reschedule_for_queue+0xc4>)
   217d8:	4a2d      	ldr	r2, [pc, #180]	; (21890 <k_work_reschedule_for_queue+0xc8>)
   217da:	f240 33de 	movw	r3, #990	; 0x3de
   217de:	f005 fcfd 	bl	271dc <assert_print>
   217e2:	482b      	ldr	r0, [pc, #172]	; (21890 <k_work_reschedule_for_queue+0xc8>)
   217e4:	f240 31de 	movw	r1, #990	; 0x3de
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   217e8:	f005 fcf1 	bl	271ce <assert_post_action>
	__asm__ volatile(
   217ec:	f04f 0340 	mov.w	r3, #64	; 0x40
   217f0:	f3ef 8711 	mrs	r7, BASEPRI
   217f4:	f383 8812 	msr	BASEPRI_MAX, r3
   217f8:	f3bf 8f6f 	isb	sy
   217fc:	4825      	ldr	r0, [pc, #148]	; (21894 <k_work_reschedule_for_queue+0xcc>)
   217fe:	f7ff f88b 	bl	20918 <z_spin_lock_valid>
   21802:	b960      	cbnz	r0, 2181e <k_work_reschedule_for_queue+0x56>
   21804:	4a24      	ldr	r2, [pc, #144]	; (21898 <k_work_reschedule_for_queue+0xd0>)
   21806:	4925      	ldr	r1, [pc, #148]	; (2189c <k_work_reschedule_for_queue+0xd4>)
   21808:	4820      	ldr	r0, [pc, #128]	; (2188c <k_work_reschedule_for_queue+0xc4>)
   2180a:	2394      	movs	r3, #148	; 0x94
   2180c:	f005 fce6 	bl	271dc <assert_print>
   21810:	4920      	ldr	r1, [pc, #128]	; (21894 <k_work_reschedule_for_queue+0xcc>)
   21812:	4823      	ldr	r0, [pc, #140]	; (218a0 <k_work_reschedule_for_queue+0xd8>)
   21814:	f005 fce2 	bl	271dc <assert_print>
   21818:	2194      	movs	r1, #148	; 0x94
   2181a:	481f      	ldr	r0, [pc, #124]	; (21898 <k_work_reschedule_for_queue+0xd0>)
   2181c:	e7e4      	b.n	217e8 <k_work_reschedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   2181e:	481d      	ldr	r0, [pc, #116]	; (21894 <k_work_reschedule_for_queue+0xcc>)
   21820:	f7ff f898 	bl	20954 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   21824:	4620      	mov	r0, r4
   21826:	f008 f85a 	bl	298de <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2182a:	ea55 0306 	orrs.w	r3, r5, r6
   2182e:	d114      	bne.n	2185a <k_work_reschedule_for_queue+0x92>
		return submit_to_queue_locked(work, queuep);
   21830:	4620      	mov	r0, r4
   21832:	a901      	add	r1, sp, #4
   21834:	f7ff fd14 	bl	21260 <submit_to_queue_locked>
   21838:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2183a:	4816      	ldr	r0, [pc, #88]	; (21894 <k_work_reschedule_for_queue+0xcc>)
   2183c:	f7ff f87a 	bl	20934 <z_spin_unlock_valid>
   21840:	b9d0      	cbnz	r0, 21878 <k_work_reschedule_for_queue+0xb0>
   21842:	4a15      	ldr	r2, [pc, #84]	; (21898 <k_work_reschedule_for_queue+0xd0>)
   21844:	4917      	ldr	r1, [pc, #92]	; (218a4 <k_work_reschedule_for_queue+0xdc>)
   21846:	4811      	ldr	r0, [pc, #68]	; (2188c <k_work_reschedule_for_queue+0xc4>)
   21848:	23c2      	movs	r3, #194	; 0xc2
   2184a:	f005 fcc7 	bl	271dc <assert_print>
   2184e:	4911      	ldr	r1, [pc, #68]	; (21894 <k_work_reschedule_for_queue+0xcc>)
   21850:	4815      	ldr	r0, [pc, #84]	; (218a8 <k_work_reschedule_for_queue+0xe0>)
   21852:	f005 fcc3 	bl	271dc <assert_print>
   21856:	21c2      	movs	r1, #194	; 0xc2
   21858:	e7df      	b.n	2181a <k_work_reschedule_for_queue+0x52>
	*flagp |= BIT(bit);
   2185a:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   2185c:	4913      	ldr	r1, [pc, #76]	; (218ac <k_work_reschedule_for_queue+0xe4>)
	*flagp |= BIT(bit);
   2185e:	f043 0308 	orr.w	r3, r3, #8
   21862:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   21864:	9b01      	ldr	r3, [sp, #4]
   21866:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   21868:	f104 0010 	add.w	r0, r4, #16
   2186c:	4632      	mov	r2, r6
   2186e:	462b      	mov	r3, r5
   21870:	f001 fb30 	bl	22ed4 <z_add_timeout>
	return ret;
   21874:	2401      	movs	r4, #1
   21876:	e7e0      	b.n	2183a <k_work_reschedule_for_queue+0x72>
	__asm__ volatile(
   21878:	f387 8811 	msr	BASEPRI, r7
   2187c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   21880:	4620      	mov	r0, r4
   21882:	b003      	add	sp, #12
   21884:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21886:	bf00      	nop
   21888:	0002e699 	.word	0x0002e699
   2188c:	0002ae37 	.word	0x0002ae37
   21890:	0002e5c3 	.word	0x0002e5c3
   21894:	2000380c 	.word	0x2000380c
   21898:	0002b22b 	.word	0x0002b22b
   2189c:	0002b284 	.word	0x0002b284
   218a0:	0002b299 	.word	0x0002b299
   218a4:	0002b258 	.word	0x0002b258
   218a8:	0002b26f 	.word	0x0002b26f
   218ac:	00021339 	.word	0x00021339

000218b0 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   218b0:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   218b2:	4801      	ldr	r0, [pc, #4]	; (218b8 <k_work_reschedule+0x8>)
   218b4:	f7ff bf88 	b.w	217c8 <k_work_reschedule_for_queue>
   218b8:	20002df0 	.word	0x20002df0

000218bc <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   218bc:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   218be:	4604      	mov	r4, r0
   218c0:	b958      	cbnz	r0, 218da <k_work_cancel_delayable+0x1e>
   218c2:	4922      	ldr	r1, [pc, #136]	; (2194c <k_work_cancel_delayable+0x90>)
   218c4:	4822      	ldr	r0, [pc, #136]	; (21950 <k_work_cancel_delayable+0x94>)
   218c6:	4a23      	ldr	r2, [pc, #140]	; (21954 <k_work_cancel_delayable+0x98>)
   218c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   218cc:	f005 fc86 	bl	271dc <assert_print>
   218d0:	4820      	ldr	r0, [pc, #128]	; (21954 <k_work_cancel_delayable+0x98>)
   218d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   218d6:	f005 fc7a 	bl	271ce <assert_post_action>
	__asm__ volatile(
   218da:	f04f 0340 	mov.w	r3, #64	; 0x40
   218de:	f3ef 8511 	mrs	r5, BASEPRI
   218e2:	f383 8812 	msr	BASEPRI_MAX, r3
   218e6:	f3bf 8f6f 	isb	sy
   218ea:	481b      	ldr	r0, [pc, #108]	; (21958 <k_work_cancel_delayable+0x9c>)
   218ec:	f7ff f814 	bl	20918 <z_spin_lock_valid>
   218f0:	b960      	cbnz	r0, 2190c <k_work_cancel_delayable+0x50>
   218f2:	4a1a      	ldr	r2, [pc, #104]	; (2195c <k_work_cancel_delayable+0xa0>)
   218f4:	491a      	ldr	r1, [pc, #104]	; (21960 <k_work_cancel_delayable+0xa4>)
   218f6:	4816      	ldr	r0, [pc, #88]	; (21950 <k_work_cancel_delayable+0x94>)
   218f8:	2394      	movs	r3, #148	; 0x94
   218fa:	f005 fc6f 	bl	271dc <assert_print>
   218fe:	4916      	ldr	r1, [pc, #88]	; (21958 <k_work_cancel_delayable+0x9c>)
   21900:	4818      	ldr	r0, [pc, #96]	; (21964 <k_work_cancel_delayable+0xa8>)
   21902:	f005 fc6b 	bl	271dc <assert_print>
   21906:	2194      	movs	r1, #148	; 0x94
   21908:	4814      	ldr	r0, [pc, #80]	; (2195c <k_work_cancel_delayable+0xa0>)
   2190a:	e7e4      	b.n	218d6 <k_work_cancel_delayable+0x1a>
	z_spin_lock_set_owner(l);
   2190c:	4812      	ldr	r0, [pc, #72]	; (21958 <k_work_cancel_delayable+0x9c>)
   2190e:	f7ff f821 	bl	20954 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   21912:	4620      	mov	r0, r4
   21914:	f007 ffe3 	bl	298de <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   21918:	4620      	mov	r0, r4
   2191a:	f007 fff6 	bl	2990a <cancel_async_locked>
   2191e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21920:	480d      	ldr	r0, [pc, #52]	; (21958 <k_work_cancel_delayable+0x9c>)
   21922:	f7ff f807 	bl	20934 <z_spin_unlock_valid>
   21926:	b958      	cbnz	r0, 21940 <k_work_cancel_delayable+0x84>
   21928:	4a0c      	ldr	r2, [pc, #48]	; (2195c <k_work_cancel_delayable+0xa0>)
   2192a:	490f      	ldr	r1, [pc, #60]	; (21968 <k_work_cancel_delayable+0xac>)
   2192c:	4808      	ldr	r0, [pc, #32]	; (21950 <k_work_cancel_delayable+0x94>)
   2192e:	23c2      	movs	r3, #194	; 0xc2
   21930:	f005 fc54 	bl	271dc <assert_print>
   21934:	4908      	ldr	r1, [pc, #32]	; (21958 <k_work_cancel_delayable+0x9c>)
   21936:	480d      	ldr	r0, [pc, #52]	; (2196c <k_work_cancel_delayable+0xb0>)
   21938:	f005 fc50 	bl	271dc <assert_print>
   2193c:	21c2      	movs	r1, #194	; 0xc2
   2193e:	e7e3      	b.n	21908 <k_work_cancel_delayable+0x4c>
	__asm__ volatile(
   21940:	f385 8811 	msr	BASEPRI, r5
   21944:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   21948:	4620      	mov	r0, r4
   2194a:	bd38      	pop	{r3, r4, r5, pc}
   2194c:	0002e699 	.word	0x0002e699
   21950:	0002ae37 	.word	0x0002ae37
   21954:	0002e5c3 	.word	0x0002e5c3
   21958:	2000380c 	.word	0x2000380c
   2195c:	0002b22b 	.word	0x0002b22b
   21960:	0002b284 	.word	0x0002b284
   21964:	0002b299 	.word	0x0002b299
   21968:	0002b258 	.word	0x0002b258
   2196c:	0002b26f 	.word	0x0002b26f

00021970 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   21970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21974:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   21976:	4605      	mov	r5, r0
   21978:	b958      	cbnz	r0, 21992 <k_work_cancel_delayable_sync+0x22>
   2197a:	493a      	ldr	r1, [pc, #232]	; (21a64 <k_work_cancel_delayable_sync+0xf4>)
   2197c:	4a3a      	ldr	r2, [pc, #232]	; (21a68 <k_work_cancel_delayable_sync+0xf8>)
   2197e:	483b      	ldr	r0, [pc, #236]	; (21a6c <k_work_cancel_delayable_sync+0xfc>)
   21980:	f240 4311 	movw	r3, #1041	; 0x411
   21984:	f005 fc2a 	bl	271dc <assert_print>
   21988:	f240 4111 	movw	r1, #1041	; 0x411
	__ASSERT_NO_MSG(sync != NULL);
   2198c:	4836      	ldr	r0, [pc, #216]	; (21a68 <k_work_cancel_delayable_sync+0xf8>)
   2198e:	f005 fc1e 	bl	271ce <assert_post_action>
   21992:	b949      	cbnz	r1, 219a8 <k_work_cancel_delayable_sync+0x38>
   21994:	4936      	ldr	r1, [pc, #216]	; (21a70 <k_work_cancel_delayable_sync+0x100>)
   21996:	4a34      	ldr	r2, [pc, #208]	; (21a68 <k_work_cancel_delayable_sync+0xf8>)
   21998:	4834      	ldr	r0, [pc, #208]	; (21a6c <k_work_cancel_delayable_sync+0xfc>)
   2199a:	f240 4312 	movw	r3, #1042	; 0x412
   2199e:	f005 fc1d 	bl	271dc <assert_print>
   219a2:	f240 4112 	movw	r1, #1042	; 0x412
   219a6:	e7f1      	b.n	2198c <k_work_cancel_delayable_sync+0x1c>
	__ASSERT_NO_MSG(!k_is_in_isr());
   219a8:	f007 ff29 	bl	297fe <k_is_in_isr>
   219ac:	4604      	mov	r4, r0
   219ae:	b148      	cbz	r0, 219c4 <k_work_cancel_delayable_sync+0x54>
   219b0:	4930      	ldr	r1, [pc, #192]	; (21a74 <k_work_cancel_delayable_sync+0x104>)
   219b2:	4a2d      	ldr	r2, [pc, #180]	; (21a68 <k_work_cancel_delayable_sync+0xf8>)
   219b4:	482d      	ldr	r0, [pc, #180]	; (21a6c <k_work_cancel_delayable_sync+0xfc>)
   219b6:	f240 4313 	movw	r3, #1043	; 0x413
   219ba:	f005 fc0f 	bl	271dc <assert_print>
   219be:	f240 4113 	movw	r1, #1043	; 0x413
   219c2:	e7e3      	b.n	2198c <k_work_cancel_delayable_sync+0x1c>
	__asm__ volatile(
   219c4:	f04f 0340 	mov.w	r3, #64	; 0x40
   219c8:	f3ef 8811 	mrs	r8, BASEPRI
   219cc:	f383 8812 	msr	BASEPRI_MAX, r3
   219d0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   219d4:	4828      	ldr	r0, [pc, #160]	; (21a78 <k_work_cancel_delayable_sync+0x108>)
   219d6:	f7fe ff9f 	bl	20918 <z_spin_lock_valid>
   219da:	b960      	cbnz	r0, 219f6 <k_work_cancel_delayable_sync+0x86>
   219dc:	4a27      	ldr	r2, [pc, #156]	; (21a7c <k_work_cancel_delayable_sync+0x10c>)
   219de:	4928      	ldr	r1, [pc, #160]	; (21a80 <k_work_cancel_delayable_sync+0x110>)
   219e0:	4822      	ldr	r0, [pc, #136]	; (21a6c <k_work_cancel_delayable_sync+0xfc>)
   219e2:	2394      	movs	r3, #148	; 0x94
   219e4:	f005 fbfa 	bl	271dc <assert_print>
   219e8:	4923      	ldr	r1, [pc, #140]	; (21a78 <k_work_cancel_delayable_sync+0x108>)
   219ea:	4826      	ldr	r0, [pc, #152]	; (21a84 <k_work_cancel_delayable_sync+0x114>)
   219ec:	f005 fbf6 	bl	271dc <assert_print>
   219f0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   219f2:	4822      	ldr	r0, [pc, #136]	; (21a7c <k_work_cancel_delayable_sync+0x10c>)
   219f4:	e7cb      	b.n	2198e <k_work_cancel_delayable_sync+0x1e>
	z_spin_lock_set_owner(l);
   219f6:	4820      	ldr	r0, [pc, #128]	; (21a78 <k_work_cancel_delayable_sync+0x108>)
   219f8:	f7fe ffac 	bl	20954 <z_spin_lock_set_owner>
	return *flagp;
   219fc:	68eb      	ldr	r3, [r5, #12]
   219fe:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   21a02:	2b00      	cmp	r3, #0
   21a04:	bf14      	ite	ne
   21a06:	2701      	movne	r7, #1
   21a08:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   21a0a:	d00a      	beq.n	21a22 <k_work_cancel_delayable_sync+0xb2>
	(void)unschedule_locked(dwork);
   21a0c:	4628      	mov	r0, r5
   21a0e:	f007 ff66 	bl	298de <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   21a12:	4628      	mov	r0, r5
   21a14:	f007 ff79 	bl	2990a <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   21a18:	4631      	mov	r1, r6
   21a1a:	4628      	mov	r0, r5
   21a1c:	f7ff fc02 	bl	21224 <cancel_sync_locked>
   21a20:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21a22:	4815      	ldr	r0, [pc, #84]	; (21a78 <k_work_cancel_delayable_sync+0x108>)
   21a24:	f7fe ff86 	bl	20934 <z_spin_unlock_valid>
   21a28:	b958      	cbnz	r0, 21a42 <k_work_cancel_delayable_sync+0xd2>
   21a2a:	4a14      	ldr	r2, [pc, #80]	; (21a7c <k_work_cancel_delayable_sync+0x10c>)
   21a2c:	4916      	ldr	r1, [pc, #88]	; (21a88 <k_work_cancel_delayable_sync+0x118>)
   21a2e:	480f      	ldr	r0, [pc, #60]	; (21a6c <k_work_cancel_delayable_sync+0xfc>)
   21a30:	23c2      	movs	r3, #194	; 0xc2
   21a32:	f005 fbd3 	bl	271dc <assert_print>
   21a36:	4910      	ldr	r1, [pc, #64]	; (21a78 <k_work_cancel_delayable_sync+0x108>)
   21a38:	4814      	ldr	r0, [pc, #80]	; (21a8c <k_work_cancel_delayable_sync+0x11c>)
   21a3a:	f005 fbcf 	bl	271dc <assert_print>
   21a3e:	21c2      	movs	r1, #194	; 0xc2
   21a40:	e7d7      	b.n	219f2 <k_work_cancel_delayable_sync+0x82>
	__asm__ volatile(
   21a42:	f388 8811 	msr	BASEPRI, r8
   21a46:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   21a4a:	b13c      	cbz	r4, 21a5c <k_work_cancel_delayable_sync+0xec>
	return z_impl_k_sem_take(sem, timeout);
   21a4c:	f04f 32ff 	mov.w	r2, #4294967295
   21a50:	f04f 33ff 	mov.w	r3, #4294967295
   21a54:	f106 0008 	add.w	r0, r6, #8
   21a58:	f7ff fa5c 	bl	20f14 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   21a5c:	4638      	mov	r0, r7
   21a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21a62:	bf00      	nop
   21a64:	0002e699 	.word	0x0002e699
   21a68:	0002e5c3 	.word	0x0002e5c3
   21a6c:	0002ae37 	.word	0x0002ae37
   21a70:	0002e645 	.word	0x0002e645
   21a74:	0002cc2d 	.word	0x0002cc2d
   21a78:	2000380c 	.word	0x2000380c
   21a7c:	0002b22b 	.word	0x0002b22b
   21a80:	0002b284 	.word	0x0002b284
   21a84:	0002b299 	.word	0x0002b299
   21a88:	0002b258 	.word	0x0002b258
   21a8c:	0002b26f 	.word	0x0002b26f

00021a90 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   21a90:	89c3      	ldrh	r3, [r0, #14]
   21a92:	2b7f      	cmp	r3, #127	; 0x7f
   21a94:	d812      	bhi.n	21abc <sliceable+0x2c>
	int ret = slice_ticks;
   21a96:	4b0a      	ldr	r3, [pc, #40]	; (21ac0 <sliceable+0x30>)
   21a98:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   21a9a:	b163      	cbz	r3, 21ab6 <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   21a9c:	4b09      	ldr	r3, [pc, #36]	; (21ac4 <sliceable+0x34>)
   21a9e:	f990 200e 	ldrsb.w	r2, [r0, #14]
   21aa2:	681b      	ldr	r3, [r3, #0]
   21aa4:	429a      	cmp	r2, r3
   21aa6:	db09      	blt.n	21abc <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
   21aa8:	7b43      	ldrb	r3, [r0, #13]
   21aaa:	06db      	lsls	r3, r3, #27
   21aac:	d106      	bne.n	21abc <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   21aae:	4b06      	ldr	r3, [pc, #24]	; (21ac8 <sliceable+0x38>)
   21ab0:	1ac3      	subs	r3, r0, r3
   21ab2:	bf18      	it	ne
   21ab4:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   21ab6:	f003 0001 	and.w	r0, r3, #1
   21aba:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   21abc:	2300      	movs	r3, #0
   21abe:	e7fa      	b.n	21ab6 <sliceable+0x26>
   21ac0:	20003818 	.word	0x20003818
   21ac4:	20003814 	.word	0x20003814
   21ac8:	20002c60 	.word	0x20002c60

00021acc <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
   21acc:	b508      	push	{r3, lr}
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   21ace:	b168      	cbz	r0, 21aec <slice_timeout+0x20>
   21ad0:	4b10      	ldr	r3, [pc, #64]	; (21b14 <slice_timeout+0x48>)
   21ad2:	4298      	cmp	r0, r3
   21ad4:	d30a      	bcc.n	21aec <slice_timeout+0x20>
   21ad6:	f103 0218 	add.w	r2, r3, #24
   21ada:	4290      	cmp	r0, r2
   21adc:	d206      	bcs.n	21aec <slice_timeout+0x20>
   21ade:	1ac0      	subs	r0, r0, r3
   21ae0:	2218      	movs	r2, #24
   21ae2:	fbb0 f3f2 	udiv	r3, r0, r2
   21ae6:	fb02 0313 	mls	r3, r2, r3, r0
   21aea:	b15b      	cbz	r3, 21b04 <slice_timeout+0x38>
   21aec:	490a      	ldr	r1, [pc, #40]	; (21b18 <slice_timeout+0x4c>)
   21aee:	480b      	ldr	r0, [pc, #44]	; (21b1c <slice_timeout+0x50>)
   21af0:	4a0b      	ldr	r2, [pc, #44]	; (21b20 <slice_timeout+0x54>)
   21af2:	f240 13cb 	movw	r3, #459	; 0x1cb
   21af6:	f005 fb71 	bl	271dc <assert_print>
   21afa:	4809      	ldr	r0, [pc, #36]	; (21b20 <slice_timeout+0x54>)
   21afc:	f240 11cb 	movw	r1, #459	; 0x1cb
   21b00:	f005 fb65 	bl	271ce <assert_post_action>
   21b04:	4b07      	ldr	r3, [pc, #28]	; (21b24 <slice_timeout+0x58>)
   21b06:	10c0      	asrs	r0, r0, #3
   21b08:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
   21b0a:	4b07      	ldr	r3, [pc, #28]	; (21b28 <slice_timeout+0x5c>)
   21b0c:	2201      	movs	r2, #1
   21b0e:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   21b10:	bd08      	pop	{r3, pc}
   21b12:	bf00      	nop
   21b14:	20002ed8 	.word	0x20002ed8
   21b18:	0002e6d0 	.word	0x0002e6d0
   21b1c:	0002ae37 	.word	0x0002ae37
   21b20:	0002e6ae 	.word	0x0002e6ae
   21b24:	aaaaaaab 	.word	0xaaaaaaab
   21b28:	200048d4 	.word	0x200048d4

00021b2c <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
   21b2c:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
   21b2e:	4b0e      	ldr	r3, [pc, #56]	; (21b68 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
   21b30:	4c0e      	ldr	r4, [pc, #56]	; (21b6c <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
   21b32:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
   21b34:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   21b38:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
   21b3c:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
   21b3e:	4620      	mov	r0, r4
   21b40:	f001 fa88 	bl	23054 <z_abort_timeout>
	slice_expired[cpu] = false;
   21b44:	4b0a      	ldr	r3, [pc, #40]	; (21b70 <z_reset_time_slice+0x44>)
   21b46:	2200      	movs	r2, #0
	if (sliceable(curr)) {
   21b48:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
   21b4a:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   21b4c:	f7ff ffa0 	bl	21a90 <sliceable>
   21b50:	b148      	cbz	r0, 21b66 <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
   21b52:	4b08      	ldr	r3, [pc, #32]	; (21b74 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   21b54:	4908      	ldr	r1, [pc, #32]	; (21b78 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
   21b56:	681a      	ldr	r2, [r3, #0]
   21b58:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   21b5a:	4620      	mov	r0, r4
   21b5c:	17d3      	asrs	r3, r2, #31
	}
}
   21b5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   21b62:	f001 b9b7 	b.w	22ed4 <z_add_timeout>
}
   21b66:	bd70      	pop	{r4, r5, r6, pc}
   21b68:	200037d0 	.word	0x200037d0
   21b6c:	20002ed8 	.word	0x20002ed8
   21b70:	200048d4 	.word	0x200048d4
   21b74:	20003818 	.word	0x20003818
   21b78:	00021acd 	.word	0x00021acd

00021b7c <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   21b7c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   21b7e:	4d14      	ldr	r5, [pc, #80]	; (21bd0 <update_cache+0x54>)
   21b80:	462b      	mov	r3, r5
   21b82:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21b86:	429c      	cmp	r4, r3
   21b88:	d000      	beq.n	21b8c <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   21b8a:	b904      	cbnz	r4, 21b8e <update_cache+0x12>
   21b8c:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
   21b8e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   21b90:	b9a8      	cbnz	r0, 21bbe <update_cache+0x42>
	__ASSERT(_current != NULL, "");
   21b92:	b963      	cbnz	r3, 21bae <update_cache+0x32>
   21b94:	490f      	ldr	r1, [pc, #60]	; (21bd4 <update_cache+0x58>)
   21b96:	4a10      	ldr	r2, [pc, #64]	; (21bd8 <update_cache+0x5c>)
   21b98:	4810      	ldr	r0, [pc, #64]	; (21bdc <update_cache+0x60>)
   21b9a:	238a      	movs	r3, #138	; 0x8a
   21b9c:	f005 fb1e 	bl	271dc <assert_print>
   21ba0:	480f      	ldr	r0, [pc, #60]	; (21be0 <update_cache+0x64>)
   21ba2:	f005 fb1b 	bl	271dc <assert_print>
   21ba6:	480c      	ldr	r0, [pc, #48]	; (21bd8 <update_cache+0x5c>)
   21ba8:	218a      	movs	r1, #138	; 0x8a
   21baa:	f005 fb10 	bl	271ce <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   21bae:	7b5a      	ldrb	r2, [r3, #13]
   21bb0:	06d2      	lsls	r2, r2, #27
   21bb2:	d104      	bne.n	21bbe <update_cache+0x42>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   21bb4:	69a2      	ldr	r2, [r4, #24]
   21bb6:	b912      	cbnz	r2, 21bbe <update_cache+0x42>
	if (is_preempt(_current) || is_metairq(thread)) {
   21bb8:	89da      	ldrh	r2, [r3, #14]
   21bba:	2a7f      	cmp	r2, #127	; 0x7f
   21bbc:	d805      	bhi.n	21bca <update_cache+0x4e>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   21bbe:	429c      	cmp	r4, r3
   21bc0:	d002      	beq.n	21bc8 <update_cache+0x4c>
			z_reset_time_slice(thread);
   21bc2:	4620      	mov	r0, r4
   21bc4:	f7ff ffb2 	bl	21b2c <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   21bc8:	4623      	mov	r3, r4
   21bca:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   21bcc:	bd38      	pop	{r3, r4, r5, pc}
   21bce:	bf00      	nop
   21bd0:	200037d0 	.word	0x200037d0
   21bd4:	0002e869 	.word	0x0002e869
   21bd8:	0002e6ae 	.word	0x0002e6ae
   21bdc:	0002ae37 	.word	0x0002ae37
   21be0:	0002d49e 	.word	0x0002d49e

00021be4 <ready_thread>:
#endif
	return false;
}

static void ready_thread(struct k_thread *thread)
{
   21be4:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   21be6:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   21bea:	7b42      	ldrb	r2, [r0, #13]
   21bec:	2b00      	cmp	r3, #0
   21bee:	db38      	blt.n	21c62 <ready_thread+0x7e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   21bf0:	06d3      	lsls	r3, r2, #27
   21bf2:	d136      	bne.n	21c62 <ready_thread+0x7e>
	return node->next != NULL;
   21bf4:	6983      	ldr	r3, [r0, #24]
   21bf6:	2b00      	cmp	r3, #0
   21bf8:	d133      	bne.n	21c62 <ready_thread+0x7e>
	thread->base.thread_state |= _THREAD_QUEUED;
   21bfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
   21bfe:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21c00:	4a18      	ldr	r2, [pc, #96]	; (21c64 <ready_thread+0x80>)
   21c02:	4290      	cmp	r0, r2
   21c04:	d109      	bne.n	21c1a <ready_thread+0x36>
   21c06:	4918      	ldr	r1, [pc, #96]	; (21c68 <ready_thread+0x84>)
   21c08:	4818      	ldr	r0, [pc, #96]	; (21c6c <ready_thread+0x88>)
   21c0a:	4a19      	ldr	r2, [pc, #100]	; (21c70 <ready_thread+0x8c>)
   21c0c:	23bc      	movs	r3, #188	; 0xbc
   21c0e:	f005 fae5 	bl	271dc <assert_print>
   21c12:	4817      	ldr	r0, [pc, #92]	; (21c70 <ready_thread+0x8c>)
   21c14:	21bc      	movs	r1, #188	; 0xbc
   21c16:	f005 fada 	bl	271ce <assert_post_action>
	return list->head == list;
   21c1a:	4916      	ldr	r1, [pc, #88]	; (21c74 <ready_thread+0x90>)
   21c1c:	460a      	mov	r2, r1
   21c1e:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21c22:	4294      	cmp	r4, r2
   21c24:	bf18      	it	ne
   21c26:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   21c28:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21c2a:	b923      	cbnz	r3, 21c36 <ready_thread+0x52>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   21c2c:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
   21c30:	6020      	str	r0, [r4, #0]
	list->tail = node;
   21c32:	6248      	str	r0, [r1, #36]	; 0x24
}
   21c34:	e00c      	b.n	21c50 <ready_thread+0x6c>
	int32_t b1 = thread_1->base.prio;
   21c36:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   21c3a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   21c3e:	42b5      	cmp	r5, r6
   21c40:	d00b      	beq.n	21c5a <ready_thread+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
   21c42:	42ae      	cmp	r6, r5
   21c44:	dd09      	ble.n	21c5a <ready_thread+0x76>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   21c46:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
   21c48:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   21c4c:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   21c4e:	6058      	str	r0, [r3, #4]

		queue_thread(thread);
		update_cache(0);
		flag_ipi();
	}
}
   21c50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   21c54:	2000      	movs	r0, #0
   21c56:	f7ff bf91 	b.w	21b7c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   21c5a:	42a3      	cmp	r3, r4
   21c5c:	d0e6      	beq.n	21c2c <ready_thread+0x48>
   21c5e:	681b      	ldr	r3, [r3, #0]
   21c60:	e7e3      	b.n	21c2a <ready_thread+0x46>
}
   21c62:	bd70      	pop	{r4, r5, r6, pc}
   21c64:	20002c60 	.word	0x20002c60
   21c68:	0002e890 	.word	0x0002e890
   21c6c:	0002ae37 	.word	0x0002ae37
   21c70:	0002e6ae 	.word	0x0002e6ae
   21c74:	200037d0 	.word	0x200037d0

00021c78 <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
   21c78:	b538      	push	{r3, r4, r5, lr}
   21c7a:	4604      	mov	r4, r0
	__asm__ volatile(
   21c7c:	f04f 0340 	mov.w	r3, #64	; 0x40
   21c80:	f3ef 8511 	mrs	r5, BASEPRI
   21c84:	f383 8812 	msr	BASEPRI_MAX, r3
   21c88:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21c8c:	4816      	ldr	r0, [pc, #88]	; (21ce8 <z_ready_thread+0x70>)
   21c8e:	f7fe fe43 	bl	20918 <z_spin_lock_valid>
   21c92:	b968      	cbnz	r0, 21cb0 <z_ready_thread+0x38>
   21c94:	4a15      	ldr	r2, [pc, #84]	; (21cec <z_ready_thread+0x74>)
   21c96:	4916      	ldr	r1, [pc, #88]	; (21cf0 <z_ready_thread+0x78>)
   21c98:	4816      	ldr	r0, [pc, #88]	; (21cf4 <z_ready_thread+0x7c>)
   21c9a:	2394      	movs	r3, #148	; 0x94
   21c9c:	f005 fa9e 	bl	271dc <assert_print>
   21ca0:	4911      	ldr	r1, [pc, #68]	; (21ce8 <z_ready_thread+0x70>)
   21ca2:	4815      	ldr	r0, [pc, #84]	; (21cf8 <z_ready_thread+0x80>)
   21ca4:	f005 fa9a 	bl	271dc <assert_print>
   21ca8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21caa:	4810      	ldr	r0, [pc, #64]	; (21cec <z_ready_thread+0x74>)
   21cac:	f005 fa8f 	bl	271ce <assert_post_action>
	z_spin_lock_set_owner(l);
   21cb0:	480d      	ldr	r0, [pc, #52]	; (21ce8 <z_ready_thread+0x70>)
   21cb2:	f7fe fe4f 	bl	20954 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
   21cb6:	4620      	mov	r0, r4
   21cb8:	f7ff ff94 	bl	21be4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21cbc:	480a      	ldr	r0, [pc, #40]	; (21ce8 <z_ready_thread+0x70>)
   21cbe:	f7fe fe39 	bl	20934 <z_spin_unlock_valid>
   21cc2:	b958      	cbnz	r0, 21cdc <z_ready_thread+0x64>
   21cc4:	4a09      	ldr	r2, [pc, #36]	; (21cec <z_ready_thread+0x74>)
   21cc6:	490d      	ldr	r1, [pc, #52]	; (21cfc <z_ready_thread+0x84>)
   21cc8:	480a      	ldr	r0, [pc, #40]	; (21cf4 <z_ready_thread+0x7c>)
   21cca:	23c2      	movs	r3, #194	; 0xc2
   21ccc:	f005 fa86 	bl	271dc <assert_print>
   21cd0:	4905      	ldr	r1, [pc, #20]	; (21ce8 <z_ready_thread+0x70>)
   21cd2:	480b      	ldr	r0, [pc, #44]	; (21d00 <z_ready_thread+0x88>)
   21cd4:	f005 fa82 	bl	271dc <assert_print>
   21cd8:	21c2      	movs	r1, #194	; 0xc2
   21cda:	e7e6      	b.n	21caa <z_ready_thread+0x32>
	__asm__ volatile(
   21cdc:	f385 8811 	msr	BASEPRI, r5
   21ce0:	f3bf 8f6f 	isb	sy
		}
	}
}
   21ce4:	bd38      	pop	{r3, r4, r5, pc}
   21ce6:	bf00      	nop
   21ce8:	2000381c 	.word	0x2000381c
   21cec:	0002b22b 	.word	0x0002b22b
   21cf0:	0002b284 	.word	0x0002b284
   21cf4:	0002ae37 	.word	0x0002ae37
   21cf8:	0002b299 	.word	0x0002b299
   21cfc:	0002b258 	.word	0x0002b258
   21d00:	0002b26f 	.word	0x0002b26f

00021d04 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   21d04:	b538      	push	{r3, r4, r5, lr}
   21d06:	4604      	mov	r4, r0
	__asm__ volatile(
   21d08:	f04f 0340 	mov.w	r3, #64	; 0x40
   21d0c:	f3ef 8511 	mrs	r5, BASEPRI
   21d10:	f383 8812 	msr	BASEPRI_MAX, r3
   21d14:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21d18:	4817      	ldr	r0, [pc, #92]	; (21d78 <z_unpend_thread_no_timeout+0x74>)
   21d1a:	f7fe fdfd 	bl	20918 <z_spin_lock_valid>
   21d1e:	b968      	cbnz	r0, 21d3c <z_unpend_thread_no_timeout+0x38>
   21d20:	4a16      	ldr	r2, [pc, #88]	; (21d7c <z_unpend_thread_no_timeout+0x78>)
   21d22:	4917      	ldr	r1, [pc, #92]	; (21d80 <z_unpend_thread_no_timeout+0x7c>)
   21d24:	4817      	ldr	r0, [pc, #92]	; (21d84 <z_unpend_thread_no_timeout+0x80>)
   21d26:	2394      	movs	r3, #148	; 0x94
   21d28:	f005 fa58 	bl	271dc <assert_print>
   21d2c:	4912      	ldr	r1, [pc, #72]	; (21d78 <z_unpend_thread_no_timeout+0x74>)
   21d2e:	4816      	ldr	r0, [pc, #88]	; (21d88 <z_unpend_thread_no_timeout+0x84>)
   21d30:	f005 fa54 	bl	271dc <assert_print>
   21d34:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21d36:	4811      	ldr	r0, [pc, #68]	; (21d7c <z_unpend_thread_no_timeout+0x78>)
   21d38:	f005 fa49 	bl	271ce <assert_post_action>
	z_spin_lock_set_owner(l);
   21d3c:	480e      	ldr	r0, [pc, #56]	; (21d78 <z_unpend_thread_no_timeout+0x74>)
   21d3e:	f7fe fe09 	bl	20954 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (thread->base.pended_on != NULL) {
   21d42:	68a3      	ldr	r3, [r4, #8]
   21d44:	b113      	cbz	r3, 21d4c <z_unpend_thread_no_timeout+0x48>
			unpend_thread_no_timeout(thread);
   21d46:	4620      	mov	r0, r4
   21d48:	f000 fc50 	bl	225ec <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21d4c:	480a      	ldr	r0, [pc, #40]	; (21d78 <z_unpend_thread_no_timeout+0x74>)
   21d4e:	f7fe fdf1 	bl	20934 <z_spin_unlock_valid>
   21d52:	b958      	cbnz	r0, 21d6c <z_unpend_thread_no_timeout+0x68>
   21d54:	4a09      	ldr	r2, [pc, #36]	; (21d7c <z_unpend_thread_no_timeout+0x78>)
   21d56:	490d      	ldr	r1, [pc, #52]	; (21d8c <z_unpend_thread_no_timeout+0x88>)
   21d58:	480a      	ldr	r0, [pc, #40]	; (21d84 <z_unpend_thread_no_timeout+0x80>)
   21d5a:	23c2      	movs	r3, #194	; 0xc2
   21d5c:	f005 fa3e 	bl	271dc <assert_print>
   21d60:	4905      	ldr	r1, [pc, #20]	; (21d78 <z_unpend_thread_no_timeout+0x74>)
   21d62:	480b      	ldr	r0, [pc, #44]	; (21d90 <z_unpend_thread_no_timeout+0x8c>)
   21d64:	f005 fa3a 	bl	271dc <assert_print>
   21d68:	21c2      	movs	r1, #194	; 0xc2
   21d6a:	e7e4      	b.n	21d36 <z_unpend_thread_no_timeout+0x32>
	__asm__ volatile(
   21d6c:	f385 8811 	msr	BASEPRI, r5
   21d70:	f3bf 8f6f 	isb	sy
		}
	}
}
   21d74:	bd38      	pop	{r3, r4, r5, pc}
   21d76:	bf00      	nop
   21d78:	2000381c 	.word	0x2000381c
   21d7c:	0002b22b 	.word	0x0002b22b
   21d80:	0002b284 	.word	0x0002b284
   21d84:	0002ae37 	.word	0x0002ae37
   21d88:	0002b299 	.word	0x0002b299
   21d8c:	0002b258 	.word	0x0002b258
   21d90:	0002b26f 	.word	0x0002b26f

00021d94 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   21d94:	b570      	push	{r4, r5, r6, lr}
   21d96:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   21d98:	460d      	mov	r5, r1
   21d9a:	b9e9      	cbnz	r1, 21dd8 <z_reschedule+0x44>
   21d9c:	f3ef 8605 	mrs	r6, IPSR
   21da0:	b9d6      	cbnz	r6, 21dd8 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   21da2:	4b18      	ldr	r3, [pc, #96]	; (21e04 <z_reschedule+0x70>)
	if (resched(key.key) && need_swap()) {
   21da4:	69da      	ldr	r2, [r3, #28]
   21da6:	689b      	ldr	r3, [r3, #8]
   21da8:	429a      	cmp	r2, r3
   21daa:	d015      	beq.n	21dd8 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21dac:	f7fe fdc2 	bl	20934 <z_spin_unlock_valid>
   21db0:	b968      	cbnz	r0, 21dce <z_reschedule+0x3a>
   21db2:	4a15      	ldr	r2, [pc, #84]	; (21e08 <z_reschedule+0x74>)
   21db4:	4915      	ldr	r1, [pc, #84]	; (21e0c <z_reschedule+0x78>)
   21db6:	4816      	ldr	r0, [pc, #88]	; (21e10 <z_reschedule+0x7c>)
   21db8:	23e1      	movs	r3, #225	; 0xe1
   21dba:	f005 fa0f 	bl	271dc <assert_print>
   21dbe:	4621      	mov	r1, r4
   21dc0:	4814      	ldr	r0, [pc, #80]	; (21e14 <z_reschedule+0x80>)
   21dc2:	f005 fa0b 	bl	271dc <assert_print>
   21dc6:	21e1      	movs	r1, #225	; 0xe1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21dc8:	480f      	ldr	r0, [pc, #60]	; (21e08 <z_reschedule+0x74>)
   21dca:	f005 fa00 	bl	271ce <assert_post_action>
	ret = arch_swap(key);
   21dce:	4630      	mov	r0, r6
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   21dd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21dd4:	f7f3 b9ce 	b.w	15174 <arch_swap>
   21dd8:	4620      	mov	r0, r4
   21dda:	f7fe fdab 	bl	20934 <z_spin_unlock_valid>
   21dde:	b958      	cbnz	r0, 21df8 <z_reschedule+0x64>
   21de0:	4a09      	ldr	r2, [pc, #36]	; (21e08 <z_reschedule+0x74>)
   21de2:	490a      	ldr	r1, [pc, #40]	; (21e0c <z_reschedule+0x78>)
   21de4:	480a      	ldr	r0, [pc, #40]	; (21e10 <z_reschedule+0x7c>)
   21de6:	23c2      	movs	r3, #194	; 0xc2
   21de8:	f005 f9f8 	bl	271dc <assert_print>
   21dec:	4621      	mov	r1, r4
   21dee:	4809      	ldr	r0, [pc, #36]	; (21e14 <z_reschedule+0x80>)
   21df0:	f005 f9f4 	bl	271dc <assert_print>
   21df4:	21c2      	movs	r1, #194	; 0xc2
   21df6:	e7e7      	b.n	21dc8 <z_reschedule+0x34>
   21df8:	f385 8811 	msr	BASEPRI, r5
   21dfc:	f3bf 8f6f 	isb	sy
   21e00:	bd70      	pop	{r4, r5, r6, pc}
   21e02:	bf00      	nop
   21e04:	200037d0 	.word	0x200037d0
   21e08:	0002b22b 	.word	0x0002b22b
   21e0c:	0002b258 	.word	0x0002b258
   21e10:	0002ae37 	.word	0x0002ae37
   21e14:	0002b26f 	.word	0x0002b26f

00021e18 <z_sched_start>:
{
   21e18:	b538      	push	{r3, r4, r5, lr}
   21e1a:	4604      	mov	r4, r0
	__asm__ volatile(
   21e1c:	f04f 0340 	mov.w	r3, #64	; 0x40
   21e20:	f3ef 8511 	mrs	r5, BASEPRI
   21e24:	f383 8812 	msr	BASEPRI_MAX, r3
   21e28:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21e2c:	481c      	ldr	r0, [pc, #112]	; (21ea0 <z_sched_start+0x88>)
   21e2e:	f7fe fd73 	bl	20918 <z_spin_lock_valid>
   21e32:	b968      	cbnz	r0, 21e50 <z_sched_start+0x38>
   21e34:	4a1b      	ldr	r2, [pc, #108]	; (21ea4 <z_sched_start+0x8c>)
   21e36:	491c      	ldr	r1, [pc, #112]	; (21ea8 <z_sched_start+0x90>)
   21e38:	481c      	ldr	r0, [pc, #112]	; (21eac <z_sched_start+0x94>)
   21e3a:	2394      	movs	r3, #148	; 0x94
   21e3c:	f005 f9ce 	bl	271dc <assert_print>
   21e40:	4917      	ldr	r1, [pc, #92]	; (21ea0 <z_sched_start+0x88>)
   21e42:	481b      	ldr	r0, [pc, #108]	; (21eb0 <z_sched_start+0x98>)
   21e44:	f005 f9ca 	bl	271dc <assert_print>
   21e48:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21e4a:	4816      	ldr	r0, [pc, #88]	; (21ea4 <z_sched_start+0x8c>)
   21e4c:	f005 f9bf 	bl	271ce <assert_post_action>
	z_spin_lock_set_owner(l);
   21e50:	4813      	ldr	r0, [pc, #76]	; (21ea0 <z_sched_start+0x88>)
   21e52:	f7fe fd7f 	bl	20954 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   21e56:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   21e58:	075a      	lsls	r2, r3, #29
   21e5a:	d414      	bmi.n	21e86 <z_sched_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21e5c:	4810      	ldr	r0, [pc, #64]	; (21ea0 <z_sched_start+0x88>)
   21e5e:	f7fe fd69 	bl	20934 <z_spin_unlock_valid>
   21e62:	b958      	cbnz	r0, 21e7c <z_sched_start+0x64>
   21e64:	4a0f      	ldr	r2, [pc, #60]	; (21ea4 <z_sched_start+0x8c>)
   21e66:	4913      	ldr	r1, [pc, #76]	; (21eb4 <z_sched_start+0x9c>)
   21e68:	4810      	ldr	r0, [pc, #64]	; (21eac <z_sched_start+0x94>)
   21e6a:	23c2      	movs	r3, #194	; 0xc2
   21e6c:	f005 f9b6 	bl	271dc <assert_print>
   21e70:	490b      	ldr	r1, [pc, #44]	; (21ea0 <z_sched_start+0x88>)
   21e72:	4811      	ldr	r0, [pc, #68]	; (21eb8 <z_sched_start+0xa0>)
   21e74:	f005 f9b2 	bl	271dc <assert_print>
   21e78:	21c2      	movs	r1, #194	; 0xc2
   21e7a:	e7e6      	b.n	21e4a <z_sched_start+0x32>
	__asm__ volatile(
   21e7c:	f385 8811 	msr	BASEPRI, r5
   21e80:	f3bf 8f6f 	isb	sy
}
   21e84:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21e86:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   21e8a:	4620      	mov	r0, r4
   21e8c:	7363      	strb	r3, [r4, #13]
   21e8e:	f7ff fea9 	bl	21be4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   21e92:	4629      	mov	r1, r5
   21e94:	4802      	ldr	r0, [pc, #8]	; (21ea0 <z_sched_start+0x88>)
}
   21e96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   21e9a:	f7ff bf7b 	b.w	21d94 <z_reschedule>
   21e9e:	bf00      	nop
   21ea0:	2000381c 	.word	0x2000381c
   21ea4:	0002b22b 	.word	0x0002b22b
   21ea8:	0002b284 	.word	0x0002b284
   21eac:	0002ae37 	.word	0x0002ae37
   21eb0:	0002b299 	.word	0x0002b299
   21eb4:	0002b258 	.word	0x0002b258
   21eb8:	0002b26f 	.word	0x0002b26f

00021ebc <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   21ebc:	b510      	push	{r4, lr}
	__asm__ volatile(
   21ebe:	f04f 0340 	mov.w	r3, #64	; 0x40
   21ec2:	f3ef 8411 	mrs	r4, BASEPRI
   21ec6:	f383 8812 	msr	BASEPRI_MAX, r3
   21eca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21ece:	4825      	ldr	r0, [pc, #148]	; (21f64 <k_sched_lock+0xa8>)
   21ed0:	f7fe fd22 	bl	20918 <z_spin_lock_valid>
   21ed4:	b960      	cbnz	r0, 21ef0 <k_sched_lock+0x34>
   21ed6:	4a24      	ldr	r2, [pc, #144]	; (21f68 <k_sched_lock+0xac>)
   21ed8:	4924      	ldr	r1, [pc, #144]	; (21f6c <k_sched_lock+0xb0>)
   21eda:	4825      	ldr	r0, [pc, #148]	; (21f70 <k_sched_lock+0xb4>)
   21edc:	2394      	movs	r3, #148	; 0x94
   21ede:	f005 f97d 	bl	271dc <assert_print>
   21ee2:	4920      	ldr	r1, [pc, #128]	; (21f64 <k_sched_lock+0xa8>)
   21ee4:	4823      	ldr	r0, [pc, #140]	; (21f74 <k_sched_lock+0xb8>)
   21ee6:	f005 f979 	bl	271dc <assert_print>
   21eea:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21eec:	481e      	ldr	r0, [pc, #120]	; (21f68 <k_sched_lock+0xac>)
   21eee:	e010      	b.n	21f12 <k_sched_lock+0x56>
	z_spin_lock_set_owner(l);
   21ef0:	481c      	ldr	r0, [pc, #112]	; (21f64 <k_sched_lock+0xa8>)
   21ef2:	f7fe fd2f 	bl	20954 <z_spin_lock_set_owner>
   21ef6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   21efa:	b163      	cbz	r3, 21f16 <k_sched_lock+0x5a>
   21efc:	491e      	ldr	r1, [pc, #120]	; (21f78 <k_sched_lock+0xbc>)
   21efe:	4a1f      	ldr	r2, [pc, #124]	; (21f7c <k_sched_lock+0xc0>)
   21f00:	481b      	ldr	r0, [pc, #108]	; (21f70 <k_sched_lock+0xb4>)
   21f02:	23fd      	movs	r3, #253	; 0xfd
   21f04:	f005 f96a 	bl	271dc <assert_print>
   21f08:	481d      	ldr	r0, [pc, #116]	; (21f80 <k_sched_lock+0xc4>)
   21f0a:	f005 f967 	bl	271dc <assert_print>
   21f0e:	21fd      	movs	r1, #253	; 0xfd
   21f10:	481a      	ldr	r0, [pc, #104]	; (21f7c <k_sched_lock+0xc0>)
   21f12:	f005 f95c 	bl	271ce <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   21f16:	4b1b      	ldr	r3, [pc, #108]	; (21f84 <k_sched_lock+0xc8>)
   21f18:	689a      	ldr	r2, [r3, #8]
   21f1a:	7bd3      	ldrb	r3, [r2, #15]
   21f1c:	2b01      	cmp	r3, #1
   21f1e:	d10a      	bne.n	21f36 <k_sched_lock+0x7a>
   21f20:	4919      	ldr	r1, [pc, #100]	; (21f88 <k_sched_lock+0xcc>)
   21f22:	4a16      	ldr	r2, [pc, #88]	; (21f7c <k_sched_lock+0xc0>)
   21f24:	4812      	ldr	r0, [pc, #72]	; (21f70 <k_sched_lock+0xb4>)
   21f26:	23fe      	movs	r3, #254	; 0xfe
   21f28:	f005 f958 	bl	271dc <assert_print>
   21f2c:	4814      	ldr	r0, [pc, #80]	; (21f80 <k_sched_lock+0xc4>)
   21f2e:	f005 f955 	bl	271dc <assert_print>
   21f32:	21fe      	movs	r1, #254	; 0xfe
   21f34:	e7ec      	b.n	21f10 <k_sched_lock+0x54>
	--_current->base.sched_locked;
   21f36:	3b01      	subs	r3, #1
   21f38:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21f3a:	480a      	ldr	r0, [pc, #40]	; (21f64 <k_sched_lock+0xa8>)
   21f3c:	f7fe fcfa 	bl	20934 <z_spin_unlock_valid>
   21f40:	b958      	cbnz	r0, 21f5a <k_sched_lock+0x9e>
   21f42:	4a09      	ldr	r2, [pc, #36]	; (21f68 <k_sched_lock+0xac>)
   21f44:	4911      	ldr	r1, [pc, #68]	; (21f8c <k_sched_lock+0xd0>)
   21f46:	480a      	ldr	r0, [pc, #40]	; (21f70 <k_sched_lock+0xb4>)
   21f48:	23c2      	movs	r3, #194	; 0xc2
   21f4a:	f005 f947 	bl	271dc <assert_print>
   21f4e:	4905      	ldr	r1, [pc, #20]	; (21f64 <k_sched_lock+0xa8>)
   21f50:	480f      	ldr	r0, [pc, #60]	; (21f90 <k_sched_lock+0xd4>)
   21f52:	f005 f943 	bl	271dc <assert_print>
   21f56:	21c2      	movs	r1, #194	; 0xc2
   21f58:	e7c8      	b.n	21eec <k_sched_lock+0x30>
	__asm__ volatile(
   21f5a:	f384 8811 	msr	BASEPRI, r4
   21f5e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   21f62:	bd10      	pop	{r4, pc}
   21f64:	2000381c 	.word	0x2000381c
   21f68:	0002b22b 	.word	0x0002b22b
   21f6c:	0002b284 	.word	0x0002b284
   21f70:	0002ae37 	.word	0x0002ae37
   21f74:	0002b299 	.word	0x0002b299
   21f78:	0002e441 	.word	0x0002e441
   21f7c:	0002e8b1 	.word	0x0002e8b1
   21f80:	0002d49e 	.word	0x0002d49e
   21f84:	200037d0 	.word	0x200037d0
   21f88:	0002e8dc 	.word	0x0002e8dc
   21f8c:	0002b258 	.word	0x0002b258
   21f90:	0002b26f 	.word	0x0002b26f

00021f94 <k_sched_unlock>:

void k_sched_unlock(void)
{
   21f94:	b510      	push	{r4, lr}
	__asm__ volatile(
   21f96:	f04f 0340 	mov.w	r3, #64	; 0x40
   21f9a:	f3ef 8411 	mrs	r4, BASEPRI
   21f9e:	f383 8812 	msr	BASEPRI_MAX, r3
   21fa2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21fa6:	4829      	ldr	r0, [pc, #164]	; (2204c <k_sched_unlock+0xb8>)
   21fa8:	f7fe fcb6 	bl	20918 <z_spin_lock_valid>
   21fac:	b960      	cbnz	r0, 21fc8 <k_sched_unlock+0x34>
   21fae:	4a28      	ldr	r2, [pc, #160]	; (22050 <k_sched_unlock+0xbc>)
   21fb0:	4928      	ldr	r1, [pc, #160]	; (22054 <k_sched_unlock+0xc0>)
   21fb2:	4829      	ldr	r0, [pc, #164]	; (22058 <k_sched_unlock+0xc4>)
   21fb4:	2394      	movs	r3, #148	; 0x94
   21fb6:	f005 f911 	bl	271dc <assert_print>
   21fba:	4924      	ldr	r1, [pc, #144]	; (2204c <k_sched_unlock+0xb8>)
   21fbc:	4827      	ldr	r0, [pc, #156]	; (2205c <k_sched_unlock+0xc8>)
   21fbe:	f005 f90d 	bl	271dc <assert_print>
   21fc2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21fc4:	4822      	ldr	r0, [pc, #136]	; (22050 <k_sched_unlock+0xbc>)
   21fc6:	e013      	b.n	21ff0 <k_sched_unlock+0x5c>
	z_spin_lock_set_owner(l);
   21fc8:	4820      	ldr	r0, [pc, #128]	; (2204c <k_sched_unlock+0xb8>)
   21fca:	f7fe fcc3 	bl	20954 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
   21fce:	4b24      	ldr	r3, [pc, #144]	; (22060 <k_sched_unlock+0xcc>)
   21fd0:	689a      	ldr	r2, [r3, #8]
   21fd2:	7bd3      	ldrb	r3, [r2, #15]
   21fd4:	b973      	cbnz	r3, 21ff4 <k_sched_unlock+0x60>
   21fd6:	4923      	ldr	r1, [pc, #140]	; (22064 <k_sched_unlock+0xd0>)
   21fd8:	4a23      	ldr	r2, [pc, #140]	; (22068 <k_sched_unlock+0xd4>)
   21fda:	481f      	ldr	r0, [pc, #124]	; (22058 <k_sched_unlock+0xc4>)
   21fdc:	f240 33ef 	movw	r3, #1007	; 0x3ef
   21fe0:	f005 f8fc 	bl	271dc <assert_print>
   21fe4:	4821      	ldr	r0, [pc, #132]	; (2206c <k_sched_unlock+0xd8>)
   21fe6:	f005 f8f9 	bl	271dc <assert_print>
   21fea:	f240 31ef 	movw	r1, #1007	; 0x3ef
   21fee:	481e      	ldr	r0, [pc, #120]	; (22068 <k_sched_unlock+0xd4>)
   21ff0:	f005 f8ed 	bl	271ce <assert_post_action>
   21ff4:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   21ff8:	b160      	cbz	r0, 22014 <k_sched_unlock+0x80>
   21ffa:	491d      	ldr	r1, [pc, #116]	; (22070 <k_sched_unlock+0xdc>)
   21ffc:	4a1a      	ldr	r2, [pc, #104]	; (22068 <k_sched_unlock+0xd4>)
   21ffe:	4816      	ldr	r0, [pc, #88]	; (22058 <k_sched_unlock+0xc4>)
   22000:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
   22004:	f005 f8ea 	bl	271dc <assert_print>
   22008:	4818      	ldr	r0, [pc, #96]	; (2206c <k_sched_unlock+0xd8>)
   2200a:	f005 f8e7 	bl	271dc <assert_print>
   2200e:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
   22012:	e7ec      	b.n	21fee <k_sched_unlock+0x5a>

		++_current->base.sched_locked;
   22014:	3301      	adds	r3, #1
   22016:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   22018:	f7ff fdb0 	bl	21b7c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2201c:	480b      	ldr	r0, [pc, #44]	; (2204c <k_sched_unlock+0xb8>)
   2201e:	f7fe fc89 	bl	20934 <z_spin_unlock_valid>
   22022:	b958      	cbnz	r0, 2203c <k_sched_unlock+0xa8>
   22024:	4a0a      	ldr	r2, [pc, #40]	; (22050 <k_sched_unlock+0xbc>)
   22026:	4913      	ldr	r1, [pc, #76]	; (22074 <k_sched_unlock+0xe0>)
   22028:	480b      	ldr	r0, [pc, #44]	; (22058 <k_sched_unlock+0xc4>)
   2202a:	23c2      	movs	r3, #194	; 0xc2
   2202c:	f005 f8d6 	bl	271dc <assert_print>
   22030:	4906      	ldr	r1, [pc, #24]	; (2204c <k_sched_unlock+0xb8>)
   22032:	4811      	ldr	r0, [pc, #68]	; (22078 <k_sched_unlock+0xe4>)
   22034:	f005 f8d2 	bl	271dc <assert_print>
   22038:	21c2      	movs	r1, #194	; 0xc2
   2203a:	e7c3      	b.n	21fc4 <k_sched_unlock+0x30>
	__asm__ volatile(
   2203c:	f384 8811 	msr	BASEPRI, r4
   22040:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   22044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   22048:	f007 bcba 	b.w	299c0 <z_reschedule_unlocked>
   2204c:	2000381c 	.word	0x2000381c
   22050:	0002b22b 	.word	0x0002b22b
   22054:	0002b284 	.word	0x0002b284
   22058:	0002ae37 	.word	0x0002ae37
   2205c:	0002b299 	.word	0x0002b299
   22060:	200037d0 	.word	0x200037d0
   22064:	0002e90d 	.word	0x0002e90d
   22068:	0002e6ae 	.word	0x0002e6ae
   2206c:	0002d49e 	.word	0x0002d49e
   22070:	0002e441 	.word	0x0002e441
   22074:	0002b258 	.word	0x0002b258
   22078:	0002b26f 	.word	0x0002b26f

0002207c <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   2207c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2207e:	4b0b      	ldr	r3, [pc, #44]	; (220ac <z_priq_dumb_remove+0x30>)
   22080:	4299      	cmp	r1, r3
   22082:	d10b      	bne.n	2209c <z_priq_dumb_remove+0x20>
   22084:	490a      	ldr	r1, [pc, #40]	; (220b0 <z_priq_dumb_remove+0x34>)
   22086:	480b      	ldr	r0, [pc, #44]	; (220b4 <z_priq_dumb_remove+0x38>)
   22088:	4a0b      	ldr	r2, [pc, #44]	; (220b8 <z_priq_dumb_remove+0x3c>)
   2208a:	f240 437b 	movw	r3, #1147	; 0x47b
   2208e:	f005 f8a5 	bl	271dc <assert_print>
   22092:	4809      	ldr	r0, [pc, #36]	; (220b8 <z_priq_dumb_remove+0x3c>)
   22094:	f240 417b 	movw	r1, #1147	; 0x47b
   22098:	f005 f899 	bl	271ce <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   2209c:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
   220a0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   220a2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   220a4:	2300      	movs	r3, #0
	node->prev = NULL;
   220a6:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   220aa:	bd08      	pop	{r3, pc}
   220ac:	20002c60 	.word	0x20002c60
   220b0:	0002e890 	.word	0x0002e890
   220b4:	0002ae37 	.word	0x0002ae37
   220b8:	0002e6ae 	.word	0x0002e6ae

000220bc <move_thread_to_end_of_prio_q>:
{
   220bc:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   220be:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   220c2:	7b43      	ldrb	r3, [r0, #13]
   220c4:	2a00      	cmp	r2, #0
{
   220c6:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   220c8:	da06      	bge.n	220d8 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   220ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   220ce:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   220d0:	4601      	mov	r1, r0
   220d2:	481d      	ldr	r0, [pc, #116]	; (22148 <move_thread_to_end_of_prio_q+0x8c>)
   220d4:	f7ff ffd2 	bl	2207c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   220d8:	7b63      	ldrb	r3, [r4, #13]
   220da:	f063 037f 	orn	r3, r3, #127	; 0x7f
   220de:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   220e0:	4b1a      	ldr	r3, [pc, #104]	; (2214c <move_thread_to_end_of_prio_q+0x90>)
   220e2:	429c      	cmp	r4, r3
   220e4:	d109      	bne.n	220fa <move_thread_to_end_of_prio_q+0x3e>
   220e6:	491a      	ldr	r1, [pc, #104]	; (22150 <move_thread_to_end_of_prio_q+0x94>)
   220e8:	481a      	ldr	r0, [pc, #104]	; (22154 <move_thread_to_end_of_prio_q+0x98>)
   220ea:	4a1b      	ldr	r2, [pc, #108]	; (22158 <move_thread_to_end_of_prio_q+0x9c>)
   220ec:	23bc      	movs	r3, #188	; 0xbc
   220ee:	f005 f875 	bl	271dc <assert_print>
   220f2:	4819      	ldr	r0, [pc, #100]	; (22158 <move_thread_to_end_of_prio_q+0x9c>)
   220f4:	21bc      	movs	r1, #188	; 0xbc
   220f6:	f005 f86a 	bl	271ce <assert_post_action>
	return list->head == list;
   220fa:	4a18      	ldr	r2, [pc, #96]	; (2215c <move_thread_to_end_of_prio_q+0xa0>)
   220fc:	4611      	mov	r1, r2
	return (node == list->tail) ? NULL : node->next;
   220fe:	6a50      	ldr	r0, [r2, #36]	; 0x24
	return list->head == list;
   22100:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22104:	428b      	cmp	r3, r1
   22106:	bf08      	it	eq
   22108:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2210a:	b923      	cbnz	r3, 22116 <move_thread_to_end_of_prio_q+0x5a>
	node->prev = tail;
   2210c:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
   22110:	6004      	str	r4, [r0, #0]
	list->tail = node;
   22112:	6254      	str	r4, [r2, #36]	; 0x24
}
   22114:	e00c      	b.n	22130 <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
   22116:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2211a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   2211e:	42b5      	cmp	r5, r6
   22120:	d00e      	beq.n	22140 <move_thread_to_end_of_prio_q+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
   22122:	42ae      	cmp	r6, r5
   22124:	dd0c      	ble.n	22140 <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
   22126:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   22128:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   2212c:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   2212e:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   22130:	6890      	ldr	r0, [r2, #8]
   22132:	1b03      	subs	r3, r0, r4
   22134:	4258      	negs	r0, r3
}
   22136:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   2213a:	4158      	adcs	r0, r3
   2213c:	f7ff bd1e 	b.w	21b7c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   22140:	4298      	cmp	r0, r3
   22142:	d0e3      	beq.n	2210c <move_thread_to_end_of_prio_q+0x50>
   22144:	681b      	ldr	r3, [r3, #0]
   22146:	e7e0      	b.n	2210a <move_thread_to_end_of_prio_q+0x4e>
   22148:	200037f0 	.word	0x200037f0
   2214c:	20002c60 	.word	0x20002c60
   22150:	0002e890 	.word	0x0002e890
   22154:	0002ae37 	.word	0x0002ae37
   22158:	0002e6ae 	.word	0x0002e6ae
   2215c:	200037d0 	.word	0x200037d0

00022160 <z_time_slice>:
{
   22160:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   22162:	f04f 0340 	mov.w	r3, #64	; 0x40
   22166:	f3ef 8511 	mrs	r5, BASEPRI
   2216a:	f383 8812 	msr	BASEPRI_MAX, r3
   2216e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22172:	4823      	ldr	r0, [pc, #140]	; (22200 <z_time_slice+0xa0>)
   22174:	f7fe fbd0 	bl	20918 <z_spin_lock_valid>
   22178:	b968      	cbnz	r0, 22196 <z_time_slice+0x36>
   2217a:	4a22      	ldr	r2, [pc, #136]	; (22204 <z_time_slice+0xa4>)
   2217c:	4922      	ldr	r1, [pc, #136]	; (22208 <z_time_slice+0xa8>)
   2217e:	4823      	ldr	r0, [pc, #140]	; (2220c <z_time_slice+0xac>)
   22180:	2394      	movs	r3, #148	; 0x94
   22182:	f005 f82b 	bl	271dc <assert_print>
   22186:	491e      	ldr	r1, [pc, #120]	; (22200 <z_time_slice+0xa0>)
   22188:	4821      	ldr	r0, [pc, #132]	; (22210 <z_time_slice+0xb0>)
   2218a:	f005 f827 	bl	271dc <assert_print>
   2218e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22190:	481c      	ldr	r0, [pc, #112]	; (22204 <z_time_slice+0xa4>)
   22192:	f005 f81c 	bl	271ce <assert_post_action>
	z_spin_lock_set_owner(l);
   22196:	481a      	ldr	r0, [pc, #104]	; (22200 <z_time_slice+0xa0>)
   22198:	f7fe fbdc 	bl	20954 <z_spin_lock_set_owner>
	struct k_thread *curr = _current;
   2219c:	4b1d      	ldr	r3, [pc, #116]	; (22214 <z_time_slice+0xb4>)
	if (pending_current == curr) {
   2219e:	4a1e      	ldr	r2, [pc, #120]	; (22218 <z_time_slice+0xb8>)
	struct k_thread *curr = _current;
   221a0:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   221a2:	6810      	ldr	r0, [r2, #0]
   221a4:	42a0      	cmp	r0, r4
   221a6:	d111      	bne.n	221cc <z_time_slice+0x6c>
		z_reset_time_slice(curr);
   221a8:	f7ff fcc0 	bl	21b2c <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   221ac:	4814      	ldr	r0, [pc, #80]	; (22200 <z_time_slice+0xa0>)
   221ae:	f7fe fbc1 	bl	20934 <z_spin_unlock_valid>
   221b2:	b9f8      	cbnz	r0, 221f4 <z_time_slice+0x94>
   221b4:	4a13      	ldr	r2, [pc, #76]	; (22204 <z_time_slice+0xa4>)
   221b6:	4919      	ldr	r1, [pc, #100]	; (2221c <z_time_slice+0xbc>)
   221b8:	4814      	ldr	r0, [pc, #80]	; (2220c <z_time_slice+0xac>)
   221ba:	23c2      	movs	r3, #194	; 0xc2
   221bc:	f005 f80e 	bl	271dc <assert_print>
   221c0:	490f      	ldr	r1, [pc, #60]	; (22200 <z_time_slice+0xa0>)
   221c2:	4817      	ldr	r0, [pc, #92]	; (22220 <z_time_slice+0xc0>)
   221c4:	f005 f80a 	bl	271dc <assert_print>
   221c8:	21c2      	movs	r1, #194	; 0xc2
   221ca:	e7e1      	b.n	22190 <z_time_slice+0x30>
	pending_current = NULL;
   221cc:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   221ce:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
   221d0:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   221d2:	4a14      	ldr	r2, [pc, #80]	; (22224 <z_time_slice+0xc4>)
   221d4:	5cd3      	ldrb	r3, [r2, r3]
   221d6:	2b00      	cmp	r3, #0
   221d8:	d0e8      	beq.n	221ac <z_time_slice+0x4c>
   221da:	4620      	mov	r0, r4
   221dc:	f7ff fc58 	bl	21a90 <sliceable>
   221e0:	2800      	cmp	r0, #0
   221e2:	d0e3      	beq.n	221ac <z_time_slice+0x4c>
		if (!z_is_thread_prevented_from_running(curr)) {
   221e4:	7b63      	ldrb	r3, [r4, #13]
   221e6:	06db      	lsls	r3, r3, #27
   221e8:	d102      	bne.n	221f0 <z_time_slice+0x90>
			move_thread_to_end_of_prio_q(curr);
   221ea:	4620      	mov	r0, r4
   221ec:	f7ff ff66 	bl	220bc <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
   221f0:	4620      	mov	r0, r4
   221f2:	e7d9      	b.n	221a8 <z_time_slice+0x48>
	__asm__ volatile(
   221f4:	f385 8811 	msr	BASEPRI, r5
   221f8:	f3bf 8f6f 	isb	sy
}
   221fc:	bd38      	pop	{r3, r4, r5, pc}
   221fe:	bf00      	nop
   22200:	2000381c 	.word	0x2000381c
   22204:	0002b22b 	.word	0x0002b22b
   22208:	0002b284 	.word	0x0002b284
   2220c:	0002ae37 	.word	0x0002ae37
   22210:	0002b299 	.word	0x0002b299
   22214:	200037d0 	.word	0x200037d0
   22218:	20003810 	.word	0x20003810
   2221c:	0002b258 	.word	0x0002b258
   22220:	0002b26f 	.word	0x0002b26f
   22224:	200048d4 	.word	0x200048d4

00022228 <unready_thread>:
{
   22228:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   2222a:	f990 200d 	ldrsb.w	r2, [r0, #13]
   2222e:	7b43      	ldrb	r3, [r0, #13]
   22230:	2a00      	cmp	r2, #0
{
   22232:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   22234:	da06      	bge.n	22244 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2223a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2223c:	4601      	mov	r1, r0
   2223e:	4806      	ldr	r0, [pc, #24]	; (22258 <unready_thread+0x30>)
   22240:	f7ff ff1c 	bl	2207c <z_priq_dumb_remove>
	update_cache(thread == _current);
   22244:	4b05      	ldr	r3, [pc, #20]	; (2225c <unready_thread+0x34>)
   22246:	6898      	ldr	r0, [r3, #8]
   22248:	1b03      	subs	r3, r0, r4
   2224a:	4258      	negs	r0, r3
}
   2224c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   22250:	4158      	adcs	r0, r3
   22252:	f7ff bc93 	b.w	21b7c <update_cache>
   22256:	bf00      	nop
   22258:	200037f0 	.word	0x200037f0
   2225c:	200037d0 	.word	0x200037d0

00022260 <add_to_waitq_locked>:
{
   22260:	b538      	push	{r3, r4, r5, lr}
   22262:	4604      	mov	r4, r0
   22264:	460d      	mov	r5, r1
	unready_thread(thread);
   22266:	f7ff ffdf 	bl	22228 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2226a:	7b63      	ldrb	r3, [r4, #13]
   2226c:	f043 0302 	orr.w	r3, r3, #2
   22270:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   22272:	b34d      	cbz	r5, 222c8 <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   22274:	4b15      	ldr	r3, [pc, #84]	; (222cc <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   22276:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   22278:	429c      	cmp	r4, r3
   2227a:	d109      	bne.n	22290 <add_to_waitq_locked+0x30>
   2227c:	4914      	ldr	r1, [pc, #80]	; (222d0 <add_to_waitq_locked+0x70>)
   2227e:	4815      	ldr	r0, [pc, #84]	; (222d4 <add_to_waitq_locked+0x74>)
   22280:	4a15      	ldr	r2, [pc, #84]	; (222d8 <add_to_waitq_locked+0x78>)
   22282:	23bc      	movs	r3, #188	; 0xbc
   22284:	f004 ffaa 	bl	271dc <assert_print>
   22288:	4813      	ldr	r0, [pc, #76]	; (222d8 <add_to_waitq_locked+0x78>)
   2228a:	21bc      	movs	r1, #188	; 0xbc
   2228c:	f004 ff9f 	bl	271ce <assert_post_action>
	return list->head == list;
   22290:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22292:	429d      	cmp	r5, r3
   22294:	d109      	bne.n	222aa <add_to_waitq_locked+0x4a>
	sys_dnode_t *const tail = list->tail;
   22296:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   22298:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   2229c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2229e:	606c      	str	r4, [r5, #4]
}
   222a0:	e012      	b.n	222c8 <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
   222a2:	686a      	ldr	r2, [r5, #4]
   222a4:	4293      	cmp	r3, r2
   222a6:	d0f6      	beq.n	22296 <add_to_waitq_locked+0x36>
   222a8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   222aa:	2b00      	cmp	r3, #0
   222ac:	d0f3      	beq.n	22296 <add_to_waitq_locked+0x36>
	int32_t b1 = thread_1->base.prio;
   222ae:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   222b2:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   222b6:	428a      	cmp	r2, r1
   222b8:	d0f3      	beq.n	222a2 <add_to_waitq_locked+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
   222ba:	4291      	cmp	r1, r2
   222bc:	ddf1      	ble.n	222a2 <add_to_waitq_locked+0x42>
	sys_dnode_t *const prev = successor->prev;
   222be:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   222c0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   222c4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   222c6:	605c      	str	r4, [r3, #4]
}
   222c8:	bd38      	pop	{r3, r4, r5, pc}
   222ca:	bf00      	nop
   222cc:	20002c60 	.word	0x20002c60
   222d0:	0002e890 	.word	0x0002e890
   222d4:	0002ae37 	.word	0x0002ae37
   222d8:	0002e6ae 	.word	0x0002e6ae

000222dc <pend_locked>:
{
   222dc:	b570      	push	{r4, r5, r6, lr}
   222de:	4615      	mov	r5, r2
   222e0:	461c      	mov	r4, r3
   222e2:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   222e4:	f7ff ffbc 	bl	22260 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   222e8:	f1b4 3fff 	cmp.w	r4, #4294967295
   222ec:	bf08      	it	eq
   222ee:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   222f2:	d008      	beq.n	22306 <pend_locked+0x2a>
   222f4:	462a      	mov	r2, r5
   222f6:	4623      	mov	r3, r4
   222f8:	f106 0018 	add.w	r0, r6, #24
   222fc:	4902      	ldr	r1, [pc, #8]	; (22308 <pend_locked+0x2c>)
}
   222fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   22302:	f000 bde7 	b.w	22ed4 <z_add_timeout>
   22306:	bd70      	pop	{r4, r5, r6, pc}
   22308:	000299d5 	.word	0x000299d5

0002230c <z_pend_curr>:
{
   2230c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	pending_current = _current;
   22310:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 223f4 <z_pend_curr+0xe8>
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   22314:	4c2d      	ldr	r4, [pc, #180]	; (223cc <z_pend_curr+0xc0>)
	pending_current = _current;
   22316:	4b2e      	ldr	r3, [pc, #184]	; (223d0 <z_pend_curr+0xc4>)
{
   22318:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   2231a:	42a0      	cmp	r0, r4
	pending_current = _current;
   2231c:	f8da 2008 	ldr.w	r2, [sl, #8]
   22320:	601a      	str	r2, [r3, #0]
{
   22322:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   22326:	4605      	mov	r5, r0
   22328:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   2232a:	d10b      	bne.n	22344 <z_pend_curr+0x38>
   2232c:	4929      	ldr	r1, [pc, #164]	; (223d4 <z_pend_curr+0xc8>)
   2232e:	482a      	ldr	r0, [pc, #168]	; (223d8 <z_pend_curr+0xcc>)
   22330:	4a2a      	ldr	r2, [pc, #168]	; (223dc <z_pend_curr+0xd0>)
   22332:	f240 3356 	movw	r3, #854	; 0x356
   22336:	f004 ff51 	bl	271dc <assert_print>
   2233a:	4828      	ldr	r0, [pc, #160]	; (223dc <z_pend_curr+0xd0>)
   2233c:	f240 3156 	movw	r1, #854	; 0x356
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22340:	f004 ff45 	bl	271ce <assert_post_action>
	__asm__ volatile(
   22344:	f04f 0240 	mov.w	r2, #64	; 0x40
   22348:	f3ef 8311 	mrs	r3, BASEPRI
   2234c:	f382 8812 	msr	BASEPRI_MAX, r2
   22350:	f3bf 8f6f 	isb	sy
   22354:	4620      	mov	r0, r4
   22356:	f7fe fadf 	bl	20918 <z_spin_lock_valid>
   2235a:	b960      	cbnz	r0, 22376 <z_pend_curr+0x6a>
   2235c:	4a20      	ldr	r2, [pc, #128]	; (223e0 <z_pend_curr+0xd4>)
   2235e:	4921      	ldr	r1, [pc, #132]	; (223e4 <z_pend_curr+0xd8>)
   22360:	481d      	ldr	r0, [pc, #116]	; (223d8 <z_pend_curr+0xcc>)
   22362:	2394      	movs	r3, #148	; 0x94
   22364:	f004 ff3a 	bl	271dc <assert_print>
   22368:	4621      	mov	r1, r4
   2236a:	481f      	ldr	r0, [pc, #124]	; (223e8 <z_pend_curr+0xdc>)
   2236c:	f004 ff36 	bl	271dc <assert_print>
   22370:	2194      	movs	r1, #148	; 0x94
   22372:	481b      	ldr	r0, [pc, #108]	; (223e0 <z_pend_curr+0xd4>)
   22374:	e7e4      	b.n	22340 <z_pend_curr+0x34>
	z_spin_lock_set_owner(l);
   22376:	4620      	mov	r0, r4
   22378:	f7fe faec 	bl	20954 <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
   2237c:	f8da 0008 	ldr.w	r0, [sl, #8]
   22380:	4642      	mov	r2, r8
   22382:	464b      	mov	r3, r9
   22384:	4639      	mov	r1, r7
   22386:	f7ff ffa9 	bl	222dc <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2238a:	4628      	mov	r0, r5
   2238c:	f7fe fad2 	bl	20934 <z_spin_unlock_valid>
   22390:	b958      	cbnz	r0, 223aa <z_pend_curr+0x9e>
   22392:	4916      	ldr	r1, [pc, #88]	; (223ec <z_pend_curr+0xe0>)
   22394:	4a12      	ldr	r2, [pc, #72]	; (223e0 <z_pend_curr+0xd4>)
   22396:	4810      	ldr	r0, [pc, #64]	; (223d8 <z_pend_curr+0xcc>)
   22398:	23e1      	movs	r3, #225	; 0xe1
   2239a:	f004 ff1f 	bl	271dc <assert_print>
   2239e:	4629      	mov	r1, r5
   223a0:	4813      	ldr	r0, [pc, #76]	; (223f0 <z_pend_curr+0xe4>)
   223a2:	f004 ff1b 	bl	271dc <assert_print>
   223a6:	21e1      	movs	r1, #225	; 0xe1
   223a8:	e7e3      	b.n	22372 <z_pend_curr+0x66>
   223aa:	4620      	mov	r0, r4
   223ac:	f7fe fac2 	bl	20934 <z_spin_unlock_valid>
   223b0:	b938      	cbnz	r0, 223c2 <z_pend_curr+0xb6>
   223b2:	490e      	ldr	r1, [pc, #56]	; (223ec <z_pend_curr+0xe0>)
   223b4:	4a0a      	ldr	r2, [pc, #40]	; (223e0 <z_pend_curr+0xd4>)
   223b6:	4808      	ldr	r0, [pc, #32]	; (223d8 <z_pend_curr+0xcc>)
   223b8:	23e1      	movs	r3, #225	; 0xe1
   223ba:	f004 ff0f 	bl	271dc <assert_print>
   223be:	4621      	mov	r1, r4
   223c0:	e7ee      	b.n	223a0 <z_pend_curr+0x94>
   223c2:	4630      	mov	r0, r6
}
   223c4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   223c8:	f7f2 bed4 	b.w	15174 <arch_swap>
   223cc:	2000381c 	.word	0x2000381c
   223d0:	20003810 	.word	0x20003810
   223d4:	0002e93e 	.word	0x0002e93e
   223d8:	0002ae37 	.word	0x0002ae37
   223dc:	0002e6ae 	.word	0x0002e6ae
   223e0:	0002b22b 	.word	0x0002b22b
   223e4:	0002b284 	.word	0x0002b284
   223e8:	0002b299 	.word	0x0002b299
   223ec:	0002b258 	.word	0x0002b258
   223f0:	0002b26f 	.word	0x0002b26f
   223f4:	200037d0 	.word	0x200037d0

000223f8 <z_set_prio>:
{
   223f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   223fc:	4604      	mov	r4, r0
   223fe:	460e      	mov	r6, r1
   22400:	f04f 0340 	mov.w	r3, #64	; 0x40
   22404:	f3ef 8911 	mrs	r9, BASEPRI
   22408:	f383 8812 	msr	BASEPRI_MAX, r3
   2240c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22410:	4837      	ldr	r0, [pc, #220]	; (224f0 <z_set_prio+0xf8>)
   22412:	f7fe fa81 	bl	20918 <z_spin_lock_valid>
   22416:	4607      	mov	r7, r0
   22418:	b960      	cbnz	r0, 22434 <z_set_prio+0x3c>
   2241a:	4a36      	ldr	r2, [pc, #216]	; (224f4 <z_set_prio+0xfc>)
   2241c:	4936      	ldr	r1, [pc, #216]	; (224f8 <z_set_prio+0x100>)
   2241e:	4837      	ldr	r0, [pc, #220]	; (224fc <z_set_prio+0x104>)
   22420:	2394      	movs	r3, #148	; 0x94
   22422:	f004 fedb 	bl	271dc <assert_print>
   22426:	4932      	ldr	r1, [pc, #200]	; (224f0 <z_set_prio+0xf8>)
   22428:	4835      	ldr	r0, [pc, #212]	; (22500 <z_set_prio+0x108>)
   2242a:	f004 fed7 	bl	271dc <assert_print>
   2242e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22430:	4830      	ldr	r0, [pc, #192]	; (224f4 <z_set_prio+0xfc>)
   22432:	e021      	b.n	22478 <z_set_prio+0x80>
	z_spin_lock_set_owner(l);
   22434:	482e      	ldr	r0, [pc, #184]	; (224f0 <z_set_prio+0xf8>)
   22436:	f7fe fa8d 	bl	20954 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   2243a:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2243c:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   2243e:	b276      	sxtb	r6, r6
   22440:	d11c      	bne.n	2247c <z_set_prio+0x84>
	return node->next != NULL;
   22442:	69a5      	ldr	r5, [r4, #24]
   22444:	b9d5      	cbnz	r5, 2247c <z_set_prio+0x84>
	_priq_run_remove(thread_runq(thread), thread);
   22446:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 22518 <z_set_prio+0x120>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2244a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2244e:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   22450:	4621      	mov	r1, r4
   22452:	4640      	mov	r0, r8
   22454:	f7ff fe12 	bl	2207c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   22458:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   2245a:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   2245c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   22460:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   22462:	4b28      	ldr	r3, [pc, #160]	; (22504 <z_set_prio+0x10c>)
   22464:	429c      	cmp	r4, r3
   22466:	d11b      	bne.n	224a0 <z_set_prio+0xa8>
   22468:	4927      	ldr	r1, [pc, #156]	; (22508 <z_set_prio+0x110>)
   2246a:	4824      	ldr	r0, [pc, #144]	; (224fc <z_set_prio+0x104>)
   2246c:	4a27      	ldr	r2, [pc, #156]	; (2250c <z_set_prio+0x114>)
   2246e:	23bc      	movs	r3, #188	; 0xbc
   22470:	f004 feb4 	bl	271dc <assert_print>
   22474:	4825      	ldr	r0, [pc, #148]	; (2250c <z_set_prio+0x114>)
   22476:	21bc      	movs	r1, #188	; 0xbc
   22478:	f004 fea9 	bl	271ce <assert_post_action>
			thread->base.prio = prio;
   2247c:	73a6      	strb	r6, [r4, #14]
   2247e:	2700      	movs	r7, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22480:	481b      	ldr	r0, [pc, #108]	; (224f0 <z_set_prio+0xf8>)
   22482:	f7fe fa57 	bl	20934 <z_spin_unlock_valid>
   22486:	bb58      	cbnz	r0, 224e0 <z_set_prio+0xe8>
   22488:	4a1a      	ldr	r2, [pc, #104]	; (224f4 <z_set_prio+0xfc>)
   2248a:	4921      	ldr	r1, [pc, #132]	; (22510 <z_set_prio+0x118>)
   2248c:	481b      	ldr	r0, [pc, #108]	; (224fc <z_set_prio+0x104>)
   2248e:	23c2      	movs	r3, #194	; 0xc2
   22490:	f004 fea4 	bl	271dc <assert_print>
   22494:	4916      	ldr	r1, [pc, #88]	; (224f0 <z_set_prio+0xf8>)
   22496:	481f      	ldr	r0, [pc, #124]	; (22514 <z_set_prio+0x11c>)
   22498:	f004 fea0 	bl	271dc <assert_print>
   2249c:	21c2      	movs	r1, #194	; 0xc2
   2249e:	e7c7      	b.n	22430 <z_set_prio+0x38>
	return list->head == list;
   224a0:	4643      	mov	r3, r8
   224a2:	f853 2920 	ldr.w	r2, [r3], #-32
	return sys_dlist_is_empty(list) ? NULL : list->head;
   224a6:	4542      	cmp	r2, r8
   224a8:	bf18      	it	ne
   224aa:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
   224ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   224ae:	b925      	cbnz	r5, 224ba <z_set_prio+0xc2>
	node->prev = tail;
   224b0:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
   224b4:	6014      	str	r4, [r2, #0]
	list->tail = node;
   224b6:	625c      	str	r4, [r3, #36]	; 0x24
}
   224b8:	e00a      	b.n	224d0 <z_set_prio+0xd8>
	int32_t b2 = thread_2->base.prio;
   224ba:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
   224be:	428e      	cmp	r6, r1
   224c0:	d00a      	beq.n	224d8 <z_set_prio+0xe0>
		if (z_sched_prio_cmp(thread, t) > 0) {
   224c2:	42b1      	cmp	r1, r6
   224c4:	dd08      	ble.n	224d8 <z_set_prio+0xe0>
	sys_dnode_t *const prev = successor->prev;
   224c6:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   224c8:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   224cc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   224ce:	606c      	str	r4, [r5, #4]
			update_cache(1);
   224d0:	2001      	movs	r0, #1
   224d2:	f7ff fb53 	bl	21b7c <update_cache>
   224d6:	e7d3      	b.n	22480 <z_set_prio+0x88>
	return (node == list->tail) ? NULL : node->next;
   224d8:	42aa      	cmp	r2, r5
   224da:	d0e9      	beq.n	224b0 <z_set_prio+0xb8>
   224dc:	682d      	ldr	r5, [r5, #0]
   224de:	e7e6      	b.n	224ae <z_set_prio+0xb6>
	__asm__ volatile(
   224e0:	f389 8811 	msr	BASEPRI, r9
   224e4:	f3bf 8f6f 	isb	sy
}
   224e8:	4638      	mov	r0, r7
   224ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   224ee:	bf00      	nop
   224f0:	2000381c 	.word	0x2000381c
   224f4:	0002b22b 	.word	0x0002b22b
   224f8:	0002b284 	.word	0x0002b284
   224fc:	0002ae37 	.word	0x0002ae37
   22500:	0002b299 	.word	0x0002b299
   22504:	20002c60 	.word	0x20002c60
   22508:	0002e890 	.word	0x0002e890
   2250c:	0002e6ae 	.word	0x0002e6ae
   22510:	0002b258 	.word	0x0002b258
   22514:	0002b26f 	.word	0x0002b26f
   22518:	200037f0 	.word	0x200037f0

0002251c <z_impl_k_thread_suspend>:
{
   2251c:	b570      	push	{r4, r5, r6, lr}
   2251e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   22520:	3018      	adds	r0, #24
   22522:	f000 fd97 	bl	23054 <z_abort_timeout>
	__asm__ volatile(
   22526:	f04f 0340 	mov.w	r3, #64	; 0x40
   2252a:	f3ef 8611 	mrs	r6, BASEPRI
   2252e:	f383 8812 	msr	BASEPRI_MAX, r3
   22532:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22536:	4824      	ldr	r0, [pc, #144]	; (225c8 <z_impl_k_thread_suspend+0xac>)
   22538:	f7fe f9ee 	bl	20918 <z_spin_lock_valid>
   2253c:	b968      	cbnz	r0, 2255a <z_impl_k_thread_suspend+0x3e>
   2253e:	4a23      	ldr	r2, [pc, #140]	; (225cc <z_impl_k_thread_suspend+0xb0>)
   22540:	4923      	ldr	r1, [pc, #140]	; (225d0 <z_impl_k_thread_suspend+0xb4>)
   22542:	4824      	ldr	r0, [pc, #144]	; (225d4 <z_impl_k_thread_suspend+0xb8>)
   22544:	2394      	movs	r3, #148	; 0x94
   22546:	f004 fe49 	bl	271dc <assert_print>
   2254a:	491f      	ldr	r1, [pc, #124]	; (225c8 <z_impl_k_thread_suspend+0xac>)
   2254c:	4822      	ldr	r0, [pc, #136]	; (225d8 <z_impl_k_thread_suspend+0xbc>)
   2254e:	f004 fe45 	bl	271dc <assert_print>
   22552:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22554:	481d      	ldr	r0, [pc, #116]	; (225cc <z_impl_k_thread_suspend+0xb0>)
   22556:	f004 fe3a 	bl	271ce <assert_post_action>
	z_spin_lock_set_owner(l);
   2255a:	481b      	ldr	r0, [pc, #108]	; (225c8 <z_impl_k_thread_suspend+0xac>)
   2255c:	f7fe f9fa 	bl	20954 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   22560:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   22564:	7b63      	ldrb	r3, [r4, #13]
   22566:	2a00      	cmp	r2, #0
   22568:	da06      	bge.n	22578 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2256a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   2256e:	481b      	ldr	r0, [pc, #108]	; (225dc <z_impl_k_thread_suspend+0xc0>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22570:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   22572:	4621      	mov	r1, r4
   22574:	f7ff fd82 	bl	2207c <z_priq_dumb_remove>
		update_cache(thread == _current);
   22578:	4d19      	ldr	r5, [pc, #100]	; (225e0 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2257a:	7b63      	ldrb	r3, [r4, #13]
   2257c:	68a8      	ldr	r0, [r5, #8]
   2257e:	f043 0310 	orr.w	r3, r3, #16
   22582:	7363      	strb	r3, [r4, #13]
   22584:	1b03      	subs	r3, r0, r4
   22586:	4258      	negs	r0, r3
   22588:	4158      	adcs	r0, r3
   2258a:	f7ff faf7 	bl	21b7c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2258e:	480e      	ldr	r0, [pc, #56]	; (225c8 <z_impl_k_thread_suspend+0xac>)
   22590:	f7fe f9d0 	bl	20934 <z_spin_unlock_valid>
   22594:	b958      	cbnz	r0, 225ae <z_impl_k_thread_suspend+0x92>
   22596:	4a0d      	ldr	r2, [pc, #52]	; (225cc <z_impl_k_thread_suspend+0xb0>)
   22598:	4912      	ldr	r1, [pc, #72]	; (225e4 <z_impl_k_thread_suspend+0xc8>)
   2259a:	480e      	ldr	r0, [pc, #56]	; (225d4 <z_impl_k_thread_suspend+0xb8>)
   2259c:	23c2      	movs	r3, #194	; 0xc2
   2259e:	f004 fe1d 	bl	271dc <assert_print>
   225a2:	4909      	ldr	r1, [pc, #36]	; (225c8 <z_impl_k_thread_suspend+0xac>)
   225a4:	4810      	ldr	r0, [pc, #64]	; (225e8 <z_impl_k_thread_suspend+0xcc>)
   225a6:	f004 fe19 	bl	271dc <assert_print>
   225aa:	21c2      	movs	r1, #194	; 0xc2
   225ac:	e7d2      	b.n	22554 <z_impl_k_thread_suspend+0x38>
	__asm__ volatile(
   225ae:	f386 8811 	msr	BASEPRI, r6
   225b2:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   225b6:	68ab      	ldr	r3, [r5, #8]
   225b8:	42a3      	cmp	r3, r4
   225ba:	d103      	bne.n	225c4 <z_impl_k_thread_suspend+0xa8>
}
   225bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   225c0:	f007 b9fe 	b.w	299c0 <z_reschedule_unlocked>
}
   225c4:	bd70      	pop	{r4, r5, r6, pc}
   225c6:	bf00      	nop
   225c8:	2000381c 	.word	0x2000381c
   225cc:	0002b22b 	.word	0x0002b22b
   225d0:	0002b284 	.word	0x0002b284
   225d4:	0002ae37 	.word	0x0002ae37
   225d8:	0002b299 	.word	0x0002b299
   225dc:	200037f0 	.word	0x200037f0
   225e0:	200037d0 	.word	0x200037d0
   225e4:	0002b258 	.word	0x0002b258
   225e8:	0002b26f 	.word	0x0002b26f

000225ec <unpend_thread_no_timeout>:
{
   225ec:	b510      	push	{r4, lr}
   225ee:	4604      	mov	r4, r0
   225f0:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
   225f2:	b958      	cbnz	r0, 2260c <unpend_thread_no_timeout+0x20>
   225f4:	490a      	ldr	r1, [pc, #40]	; (22620 <unpend_thread_no_timeout+0x34>)
   225f6:	480b      	ldr	r0, [pc, #44]	; (22624 <unpend_thread_no_timeout+0x38>)
   225f8:	4a0b      	ldr	r2, [pc, #44]	; (22628 <unpend_thread_no_timeout+0x3c>)
   225fa:	f240 23c9 	movw	r3, #713	; 0x2c9
   225fe:	f004 fded 	bl	271dc <assert_print>
   22602:	4809      	ldr	r0, [pc, #36]	; (22628 <unpend_thread_no_timeout+0x3c>)
   22604:	f240 21c9 	movw	r1, #713	; 0x2c9
   22608:	f004 fde1 	bl	271ce <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   2260c:	4621      	mov	r1, r4
   2260e:	f7ff fd35 	bl	2207c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   22612:	7b63      	ldrb	r3, [r4, #13]
   22614:	f023 0302 	bic.w	r3, r3, #2
   22618:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   2261a:	2300      	movs	r3, #0
   2261c:	60a3      	str	r3, [r4, #8]
}
   2261e:	bd10      	pop	{r4, pc}
   22620:	0002e975 	.word	0x0002e975
   22624:	0002ae37 	.word	0x0002ae37
   22628:	0002e6ae 	.word	0x0002e6ae

0002262c <z_unpend_thread>:
{
   2262c:	b538      	push	{r3, r4, r5, lr}
   2262e:	4604      	mov	r4, r0
	__asm__ volatile(
   22630:	f04f 0340 	mov.w	r3, #64	; 0x40
   22634:	f3ef 8511 	mrs	r5, BASEPRI
   22638:	f383 8812 	msr	BASEPRI_MAX, r3
   2263c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22640:	4819      	ldr	r0, [pc, #100]	; (226a8 <z_unpend_thread+0x7c>)
   22642:	f7fe f969 	bl	20918 <z_spin_lock_valid>
   22646:	b968      	cbnz	r0, 22664 <z_unpend_thread+0x38>
   22648:	4a18      	ldr	r2, [pc, #96]	; (226ac <z_unpend_thread+0x80>)
   2264a:	4919      	ldr	r1, [pc, #100]	; (226b0 <z_unpend_thread+0x84>)
   2264c:	4819      	ldr	r0, [pc, #100]	; (226b4 <z_unpend_thread+0x88>)
   2264e:	2394      	movs	r3, #148	; 0x94
   22650:	f004 fdc4 	bl	271dc <assert_print>
   22654:	4914      	ldr	r1, [pc, #80]	; (226a8 <z_unpend_thread+0x7c>)
   22656:	4818      	ldr	r0, [pc, #96]	; (226b8 <z_unpend_thread+0x8c>)
   22658:	f004 fdc0 	bl	271dc <assert_print>
   2265c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2265e:	4813      	ldr	r0, [pc, #76]	; (226ac <z_unpend_thread+0x80>)
   22660:	f004 fdb5 	bl	271ce <assert_post_action>
	z_spin_lock_set_owner(l);
   22664:	4810      	ldr	r0, [pc, #64]	; (226a8 <z_unpend_thread+0x7c>)
   22666:	f7fe f975 	bl	20954 <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
   2266a:	68a3      	ldr	r3, [r4, #8]
   2266c:	b113      	cbz	r3, 22674 <z_unpend_thread+0x48>
			unpend_thread_no_timeout(thread);
   2266e:	4620      	mov	r0, r4
   22670:	f7ff ffbc 	bl	225ec <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22674:	480c      	ldr	r0, [pc, #48]	; (226a8 <z_unpend_thread+0x7c>)
   22676:	f7fe f95d 	bl	20934 <z_spin_unlock_valid>
   2267a:	b958      	cbnz	r0, 22694 <z_unpend_thread+0x68>
   2267c:	4a0b      	ldr	r2, [pc, #44]	; (226ac <z_unpend_thread+0x80>)
   2267e:	490f      	ldr	r1, [pc, #60]	; (226bc <z_unpend_thread+0x90>)
   22680:	480c      	ldr	r0, [pc, #48]	; (226b4 <z_unpend_thread+0x88>)
   22682:	23c2      	movs	r3, #194	; 0xc2
   22684:	f004 fdaa 	bl	271dc <assert_print>
   22688:	4907      	ldr	r1, [pc, #28]	; (226a8 <z_unpend_thread+0x7c>)
   2268a:	480d      	ldr	r0, [pc, #52]	; (226c0 <z_unpend_thread+0x94>)
   2268c:	f004 fda6 	bl	271dc <assert_print>
   22690:	21c2      	movs	r1, #194	; 0xc2
   22692:	e7e4      	b.n	2265e <z_unpend_thread+0x32>
	__asm__ volatile(
   22694:	f385 8811 	msr	BASEPRI, r5
   22698:	f3bf 8f6f 	isb	sy
   2269c:	f104 0018 	add.w	r0, r4, #24
}
   226a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   226a4:	f000 bcd6 	b.w	23054 <z_abort_timeout>
   226a8:	2000381c 	.word	0x2000381c
   226ac:	0002b22b 	.word	0x0002b22b
   226b0:	0002b284 	.word	0x0002b284
   226b4:	0002ae37 	.word	0x0002ae37
   226b8:	0002b299 	.word	0x0002b299
   226bc:	0002b258 	.word	0x0002b258
   226c0:	0002b26f 	.word	0x0002b26f

000226c4 <z_sched_wake_thread>:
{
   226c4:	b570      	push	{r4, r5, r6, lr}
   226c6:	4604      	mov	r4, r0
   226c8:	460d      	mov	r5, r1
	__asm__ volatile(
   226ca:	f04f 0340 	mov.w	r3, #64	; 0x40
   226ce:	f3ef 8611 	mrs	r6, BASEPRI
   226d2:	f383 8812 	msr	BASEPRI_MAX, r3
   226d6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   226da:	481f      	ldr	r0, [pc, #124]	; (22758 <z_sched_wake_thread+0x94>)
   226dc:	f7fe f91c 	bl	20918 <z_spin_lock_valid>
   226e0:	b968      	cbnz	r0, 226fe <z_sched_wake_thread+0x3a>
   226e2:	4a1e      	ldr	r2, [pc, #120]	; (2275c <z_sched_wake_thread+0x98>)
   226e4:	491e      	ldr	r1, [pc, #120]	; (22760 <z_sched_wake_thread+0x9c>)
   226e6:	481f      	ldr	r0, [pc, #124]	; (22764 <z_sched_wake_thread+0xa0>)
   226e8:	2394      	movs	r3, #148	; 0x94
   226ea:	f004 fd77 	bl	271dc <assert_print>
   226ee:	491a      	ldr	r1, [pc, #104]	; (22758 <z_sched_wake_thread+0x94>)
   226f0:	481d      	ldr	r0, [pc, #116]	; (22768 <z_sched_wake_thread+0xa4>)
   226f2:	f004 fd73 	bl	271dc <assert_print>
   226f6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   226f8:	4818      	ldr	r0, [pc, #96]	; (2275c <z_sched_wake_thread+0x98>)
   226fa:	f004 fd68 	bl	271ce <assert_post_action>
	z_spin_lock_set_owner(l);
   226fe:	4816      	ldr	r0, [pc, #88]	; (22758 <z_sched_wake_thread+0x94>)
   22700:	f7fe f928 	bl	20954 <z_spin_lock_set_owner>
		if (!killed) {
   22704:	7b63      	ldrb	r3, [r4, #13]
   22706:	f013 0f28 	tst.w	r3, #40	; 0x28
   2270a:	d10c      	bne.n	22726 <z_sched_wake_thread+0x62>
			if (thread->base.pended_on != NULL) {
   2270c:	68a3      	ldr	r3, [r4, #8]
   2270e:	b113      	cbz	r3, 22716 <z_sched_wake_thread+0x52>
				unpend_thread_no_timeout(thread);
   22710:	4620      	mov	r0, r4
   22712:	f7ff ff6b 	bl	225ec <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   22716:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
   22718:	b9ad      	cbnz	r5, 22746 <z_sched_wake_thread+0x82>
   2271a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2271e:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
   22720:	4620      	mov	r0, r4
   22722:	f7ff fa5f 	bl	21be4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22726:	480c      	ldr	r0, [pc, #48]	; (22758 <z_sched_wake_thread+0x94>)
   22728:	f7fe f904 	bl	20934 <z_spin_unlock_valid>
   2272c:	b970      	cbnz	r0, 2274c <z_sched_wake_thread+0x88>
   2272e:	4a0b      	ldr	r2, [pc, #44]	; (2275c <z_sched_wake_thread+0x98>)
   22730:	490e      	ldr	r1, [pc, #56]	; (2276c <z_sched_wake_thread+0xa8>)
   22732:	480c      	ldr	r0, [pc, #48]	; (22764 <z_sched_wake_thread+0xa0>)
   22734:	23c2      	movs	r3, #194	; 0xc2
   22736:	f004 fd51 	bl	271dc <assert_print>
   2273a:	4907      	ldr	r1, [pc, #28]	; (22758 <z_sched_wake_thread+0x94>)
   2273c:	480c      	ldr	r0, [pc, #48]	; (22770 <z_sched_wake_thread+0xac>)
   2273e:	f004 fd4d 	bl	271dc <assert_print>
   22742:	21c2      	movs	r1, #194	; 0xc2
   22744:	e7d8      	b.n	226f8 <z_sched_wake_thread+0x34>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   22746:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
   2274a:	e7e8      	b.n	2271e <z_sched_wake_thread+0x5a>
	__asm__ volatile(
   2274c:	f386 8811 	msr	BASEPRI, r6
   22750:	f3bf 8f6f 	isb	sy
}
   22754:	bd70      	pop	{r4, r5, r6, pc}
   22756:	bf00      	nop
   22758:	2000381c 	.word	0x2000381c
   2275c:	0002b22b 	.word	0x0002b22b
   22760:	0002b284 	.word	0x0002b284
   22764:	0002ae37 	.word	0x0002ae37
   22768:	0002b299 	.word	0x0002b299
   2276c:	0002b258 	.word	0x0002b258
   22770:	0002b26f 	.word	0x0002b26f

00022774 <z_unpend1_no_timeout>:
{
   22774:	b570      	push	{r4, r5, r6, lr}
   22776:	4605      	mov	r5, r0
	__asm__ volatile(
   22778:	f04f 0340 	mov.w	r3, #64	; 0x40
   2277c:	f3ef 8611 	mrs	r6, BASEPRI
   22780:	f383 8812 	msr	BASEPRI_MAX, r3
   22784:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22788:	4819      	ldr	r0, [pc, #100]	; (227f0 <z_unpend1_no_timeout+0x7c>)
   2278a:	f7fe f8c5 	bl	20918 <z_spin_lock_valid>
   2278e:	b968      	cbnz	r0, 227ac <z_unpend1_no_timeout+0x38>
   22790:	4a18      	ldr	r2, [pc, #96]	; (227f4 <z_unpend1_no_timeout+0x80>)
   22792:	4919      	ldr	r1, [pc, #100]	; (227f8 <z_unpend1_no_timeout+0x84>)
   22794:	4819      	ldr	r0, [pc, #100]	; (227fc <z_unpend1_no_timeout+0x88>)
   22796:	2394      	movs	r3, #148	; 0x94
   22798:	f004 fd20 	bl	271dc <assert_print>
   2279c:	4914      	ldr	r1, [pc, #80]	; (227f0 <z_unpend1_no_timeout+0x7c>)
   2279e:	4818      	ldr	r0, [pc, #96]	; (22800 <z_unpend1_no_timeout+0x8c>)
   227a0:	f004 fd1c 	bl	271dc <assert_print>
   227a4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   227a6:	4813      	ldr	r0, [pc, #76]	; (227f4 <z_unpend1_no_timeout+0x80>)
   227a8:	f004 fd11 	bl	271ce <assert_post_action>
	z_spin_lock_set_owner(l);
   227ac:	4810      	ldr	r0, [pc, #64]	; (227f0 <z_unpend1_no_timeout+0x7c>)
   227ae:	f7fe f8d1 	bl	20954 <z_spin_lock_set_owner>
	return list->head == list;
   227b2:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   227b4:	42a5      	cmp	r5, r4
   227b6:	d013      	beq.n	227e0 <z_unpend1_no_timeout+0x6c>
		if (thread != NULL) {
   227b8:	b114      	cbz	r4, 227c0 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
   227ba:	4620      	mov	r0, r4
   227bc:	f7ff ff16 	bl	225ec <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   227c0:	480b      	ldr	r0, [pc, #44]	; (227f0 <z_unpend1_no_timeout+0x7c>)
   227c2:	f7fe f8b7 	bl	20934 <z_spin_unlock_valid>
   227c6:	b968      	cbnz	r0, 227e4 <z_unpend1_no_timeout+0x70>
   227c8:	4a0a      	ldr	r2, [pc, #40]	; (227f4 <z_unpend1_no_timeout+0x80>)
   227ca:	490e      	ldr	r1, [pc, #56]	; (22804 <z_unpend1_no_timeout+0x90>)
   227cc:	480b      	ldr	r0, [pc, #44]	; (227fc <z_unpend1_no_timeout+0x88>)
   227ce:	23c2      	movs	r3, #194	; 0xc2
   227d0:	f004 fd04 	bl	271dc <assert_print>
   227d4:	4906      	ldr	r1, [pc, #24]	; (227f0 <z_unpend1_no_timeout+0x7c>)
   227d6:	480c      	ldr	r0, [pc, #48]	; (22808 <z_unpend1_no_timeout+0x94>)
   227d8:	f004 fd00 	bl	271dc <assert_print>
   227dc:	21c2      	movs	r1, #194	; 0xc2
   227de:	e7e2      	b.n	227a6 <z_unpend1_no_timeout+0x32>
   227e0:	2400      	movs	r4, #0
   227e2:	e7ed      	b.n	227c0 <z_unpend1_no_timeout+0x4c>
	__asm__ volatile(
   227e4:	f386 8811 	msr	BASEPRI, r6
   227e8:	f3bf 8f6f 	isb	sy
}
   227ec:	4620      	mov	r0, r4
   227ee:	bd70      	pop	{r4, r5, r6, pc}
   227f0:	2000381c 	.word	0x2000381c
   227f4:	0002b22b 	.word	0x0002b22b
   227f8:	0002b284 	.word	0x0002b284
   227fc:	0002ae37 	.word	0x0002ae37
   22800:	0002b299 	.word	0x0002b299
   22804:	0002b258 	.word	0x0002b258
   22808:	0002b26f 	.word	0x0002b26f

0002280c <z_unpend_first_thread>:
{
   2280c:	b570      	push	{r4, r5, r6, lr}
   2280e:	4605      	mov	r5, r0
	__asm__ volatile(
   22810:	f04f 0340 	mov.w	r3, #64	; 0x40
   22814:	f3ef 8611 	mrs	r6, BASEPRI
   22818:	f383 8812 	msr	BASEPRI_MAX, r3
   2281c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22820:	481b      	ldr	r0, [pc, #108]	; (22890 <z_unpend_first_thread+0x84>)
   22822:	f7fe f879 	bl	20918 <z_spin_lock_valid>
   22826:	b968      	cbnz	r0, 22844 <z_unpend_first_thread+0x38>
   22828:	4a1a      	ldr	r2, [pc, #104]	; (22894 <z_unpend_first_thread+0x88>)
   2282a:	491b      	ldr	r1, [pc, #108]	; (22898 <z_unpend_first_thread+0x8c>)
   2282c:	481b      	ldr	r0, [pc, #108]	; (2289c <z_unpend_first_thread+0x90>)
   2282e:	2394      	movs	r3, #148	; 0x94
   22830:	f004 fcd4 	bl	271dc <assert_print>
   22834:	4916      	ldr	r1, [pc, #88]	; (22890 <z_unpend_first_thread+0x84>)
   22836:	481a      	ldr	r0, [pc, #104]	; (228a0 <z_unpend_first_thread+0x94>)
   22838:	f004 fcd0 	bl	271dc <assert_print>
   2283c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2283e:	4815      	ldr	r0, [pc, #84]	; (22894 <z_unpend_first_thread+0x88>)
   22840:	f004 fcc5 	bl	271ce <assert_post_action>
	z_spin_lock_set_owner(l);
   22844:	4812      	ldr	r0, [pc, #72]	; (22890 <z_unpend_first_thread+0x84>)
   22846:	f7fe f885 	bl	20954 <z_spin_lock_set_owner>
	return list->head == list;
   2284a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2284c:	42a5      	cmp	r5, r4
   2284e:	d017      	beq.n	22880 <z_unpend_first_thread+0x74>
		if (thread != NULL) {
   22850:	b134      	cbz	r4, 22860 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   22852:	4620      	mov	r0, r4
   22854:	f7ff feca 	bl	225ec <unpend_thread_no_timeout>
   22858:	f104 0018 	add.w	r0, r4, #24
   2285c:	f000 fbfa 	bl	23054 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22860:	480b      	ldr	r0, [pc, #44]	; (22890 <z_unpend_first_thread+0x84>)
   22862:	f7fe f867 	bl	20934 <z_spin_unlock_valid>
   22866:	b968      	cbnz	r0, 22884 <z_unpend_first_thread+0x78>
   22868:	4a0a      	ldr	r2, [pc, #40]	; (22894 <z_unpend_first_thread+0x88>)
   2286a:	490e      	ldr	r1, [pc, #56]	; (228a4 <z_unpend_first_thread+0x98>)
   2286c:	480b      	ldr	r0, [pc, #44]	; (2289c <z_unpend_first_thread+0x90>)
   2286e:	23c2      	movs	r3, #194	; 0xc2
   22870:	f004 fcb4 	bl	271dc <assert_print>
   22874:	4906      	ldr	r1, [pc, #24]	; (22890 <z_unpend_first_thread+0x84>)
   22876:	480c      	ldr	r0, [pc, #48]	; (228a8 <z_unpend_first_thread+0x9c>)
   22878:	f004 fcb0 	bl	271dc <assert_print>
   2287c:	21c2      	movs	r1, #194	; 0xc2
   2287e:	e7de      	b.n	2283e <z_unpend_first_thread+0x32>
   22880:	2400      	movs	r4, #0
   22882:	e7ed      	b.n	22860 <z_unpend_first_thread+0x54>
	__asm__ volatile(
   22884:	f386 8811 	msr	BASEPRI, r6
   22888:	f3bf 8f6f 	isb	sy
}
   2288c:	4620      	mov	r0, r4
   2288e:	bd70      	pop	{r4, r5, r6, pc}
   22890:	2000381c 	.word	0x2000381c
   22894:	0002b22b 	.word	0x0002b22b
   22898:	0002b284 	.word	0x0002b284
   2289c:	0002ae37 	.word	0x0002ae37
   228a0:	0002b299 	.word	0x0002b299
   228a4:	0002b258 	.word	0x0002b258
   228a8:	0002b26f 	.word	0x0002b26f

000228ac <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   228ac:	4b02      	ldr	r3, [pc, #8]	; (228b8 <z_sched_init+0xc>)
   228ae:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   228b2:	e9c3 2208 	strd	r2, r2, [r3, #32]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
   228b6:	4770      	bx	lr
   228b8:	200037d0 	.word	0x200037d0

000228bc <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   228bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   228be:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   228c2:	b16b      	cbz	r3, 228e0 <z_impl_k_yield+0x24>
   228c4:	493c      	ldr	r1, [pc, #240]	; (229b8 <z_impl_k_yield+0xfc>)
   228c6:	4a3d      	ldr	r2, [pc, #244]	; (229bc <z_impl_k_yield+0x100>)
   228c8:	483d      	ldr	r0, [pc, #244]	; (229c0 <z_impl_k_yield+0x104>)
   228ca:	f240 5371 	movw	r3, #1393	; 0x571
   228ce:	f004 fc85 	bl	271dc <assert_print>
   228d2:	483c      	ldr	r0, [pc, #240]	; (229c4 <z_impl_k_yield+0x108>)
   228d4:	f004 fc82 	bl	271dc <assert_print>
   228d8:	f240 5171 	movw	r1, #1393	; 0x571
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   228dc:	4837      	ldr	r0, [pc, #220]	; (229bc <z_impl_k_yield+0x100>)
   228de:	e017      	b.n	22910 <z_impl_k_yield+0x54>
	__asm__ volatile(
   228e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   228e4:	f3ef 8611 	mrs	r6, BASEPRI
   228e8:	f383 8812 	msr	BASEPRI_MAX, r3
   228ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   228f0:	4835      	ldr	r0, [pc, #212]	; (229c8 <z_impl_k_yield+0x10c>)
   228f2:	f7fe f811 	bl	20918 <z_spin_lock_valid>
   228f6:	b968      	cbnz	r0, 22914 <z_impl_k_yield+0x58>
   228f8:	4a34      	ldr	r2, [pc, #208]	; (229cc <z_impl_k_yield+0x110>)
   228fa:	4935      	ldr	r1, [pc, #212]	; (229d0 <z_impl_k_yield+0x114>)
   228fc:	4830      	ldr	r0, [pc, #192]	; (229c0 <z_impl_k_yield+0x104>)
   228fe:	2394      	movs	r3, #148	; 0x94
   22900:	f004 fc6c 	bl	271dc <assert_print>
   22904:	4930      	ldr	r1, [pc, #192]	; (229c8 <z_impl_k_yield+0x10c>)
   22906:	4833      	ldr	r0, [pc, #204]	; (229d4 <z_impl_k_yield+0x118>)
   22908:	f004 fc68 	bl	271dc <assert_print>
   2290c:	2194      	movs	r1, #148	; 0x94
   2290e:	482f      	ldr	r0, [pc, #188]	; (229cc <z_impl_k_yield+0x110>)
   22910:	f004 fc5d 	bl	271ce <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   22914:	4c30      	ldr	r4, [pc, #192]	; (229d8 <z_impl_k_yield+0x11c>)
	z_spin_lock_set_owner(l);
   22916:	482c      	ldr	r0, [pc, #176]	; (229c8 <z_impl_k_yield+0x10c>)
   22918:	f7fe f81c 	bl	20954 <z_spin_lock_set_owner>
   2291c:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2291e:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   22920:	f104 0520 	add.w	r5, r4, #32
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   22928:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2292a:	4628      	mov	r0, r5
   2292c:	f7ff fba6 	bl	2207c <z_priq_dumb_remove>
	}
	queue_thread(_current);
   22930:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   22932:	7b5a      	ldrb	r2, [r3, #13]
   22934:	f062 027f 	orn	r2, r2, #127	; 0x7f
   22938:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2293a:	4a28      	ldr	r2, [pc, #160]	; (229dc <z_impl_k_yield+0x120>)
   2293c:	4293      	cmp	r3, r2
   2293e:	d107      	bne.n	22950 <z_impl_k_yield+0x94>
   22940:	4927      	ldr	r1, [pc, #156]	; (229e0 <z_impl_k_yield+0x124>)
   22942:	4a1e      	ldr	r2, [pc, #120]	; (229bc <z_impl_k_yield+0x100>)
   22944:	481e      	ldr	r0, [pc, #120]	; (229c0 <z_impl_k_yield+0x104>)
   22946:	23bc      	movs	r3, #188	; 0xbc
   22948:	f004 fc48 	bl	271dc <assert_print>
   2294c:	21bc      	movs	r1, #188	; 0xbc
   2294e:	e7c5      	b.n	228dc <z_impl_k_yield+0x20>
	return list->head == list;
   22950:	6a22      	ldr	r2, [r4, #32]
	return (node == list->tail) ? NULL : node->next;
   22952:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22954:	42aa      	cmp	r2, r5
   22956:	bf08      	it	eq
   22958:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2295a:	b922      	cbnz	r2, 22966 <z_impl_k_yield+0xaa>
	node->prev = tail;
   2295c:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
   22960:	600b      	str	r3, [r1, #0]
	list->tail = node;
   22962:	6263      	str	r3, [r4, #36]	; 0x24
}
   22964:	e00c      	b.n	22980 <z_impl_k_yield+0xc4>
	int32_t b1 = thread_1->base.prio;
   22966:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   2296a:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   2296e:	42b8      	cmp	r0, r7
   22970:	d019      	beq.n	229a6 <z_impl_k_yield+0xea>
		if (z_sched_prio_cmp(thread, t) > 0) {
   22972:	4287      	cmp	r7, r0
   22974:	dd17      	ble.n	229a6 <z_impl_k_yield+0xea>
	sys_dnode_t *const prev = successor->prev;
   22976:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   22978:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   2297c:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   2297e:	6053      	str	r3, [r2, #4]
	update_cache(1);
   22980:	2001      	movs	r0, #1
   22982:	f7ff f8fb 	bl	21b7c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22986:	4810      	ldr	r0, [pc, #64]	; (229c8 <z_impl_k_yield+0x10c>)
   22988:	f7fd ffd4 	bl	20934 <z_spin_unlock_valid>
   2298c:	b978      	cbnz	r0, 229ae <z_impl_k_yield+0xf2>
   2298e:	4a0f      	ldr	r2, [pc, #60]	; (229cc <z_impl_k_yield+0x110>)
   22990:	4914      	ldr	r1, [pc, #80]	; (229e4 <z_impl_k_yield+0x128>)
   22992:	480b      	ldr	r0, [pc, #44]	; (229c0 <z_impl_k_yield+0x104>)
   22994:	23e1      	movs	r3, #225	; 0xe1
   22996:	f004 fc21 	bl	271dc <assert_print>
   2299a:	490b      	ldr	r1, [pc, #44]	; (229c8 <z_impl_k_yield+0x10c>)
   2299c:	4812      	ldr	r0, [pc, #72]	; (229e8 <z_impl_k_yield+0x12c>)
   2299e:	f004 fc1d 	bl	271dc <assert_print>
   229a2:	21e1      	movs	r1, #225	; 0xe1
   229a4:	e7b3      	b.n	2290e <z_impl_k_yield+0x52>
	return (node == list->tail) ? NULL : node->next;
   229a6:	428a      	cmp	r2, r1
   229a8:	d0d8      	beq.n	2295c <z_impl_k_yield+0xa0>
   229aa:	6812      	ldr	r2, [r2, #0]
   229ac:	e7d5      	b.n	2295a <z_impl_k_yield+0x9e>
   229ae:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   229b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   229b4:	f7f2 bbde 	b.w	15174 <arch_swap>
   229b8:	0002e441 	.word	0x0002e441
   229bc:	0002e6ae 	.word	0x0002e6ae
   229c0:	0002ae37 	.word	0x0002ae37
   229c4:	0002d49e 	.word	0x0002d49e
   229c8:	2000381c 	.word	0x2000381c
   229cc:	0002b22b 	.word	0x0002b22b
   229d0:	0002b284 	.word	0x0002b284
   229d4:	0002b299 	.word	0x0002b299
   229d8:	200037d0 	.word	0x200037d0
   229dc:	20002c60 	.word	0x20002c60
   229e0:	0002e890 	.word	0x0002e890
   229e4:	0002b258 	.word	0x0002b258
   229e8:	0002b26f 	.word	0x0002b26f

000229ec <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   229ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   229f0:	4605      	mov	r5, r0
   229f2:	460e      	mov	r6, r1
   229f4:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   229f8:	b16b      	cbz	r3, 22a16 <z_tick_sleep+0x2a>
   229fa:	493f      	ldr	r1, [pc, #252]	; (22af8 <z_tick_sleep+0x10c>)
   229fc:	4a3f      	ldr	r2, [pc, #252]	; (22afc <z_tick_sleep+0x110>)
   229fe:	4840      	ldr	r0, [pc, #256]	; (22b00 <z_tick_sleep+0x114>)
   22a00:	f240 538d 	movw	r3, #1421	; 0x58d
   22a04:	f004 fbea 	bl	271dc <assert_print>
   22a08:	483e      	ldr	r0, [pc, #248]	; (22b04 <z_tick_sleep+0x118>)
   22a0a:	f004 fbe7 	bl	271dc <assert_print>
   22a0e:	f240 518d 	movw	r1, #1421	; 0x58d
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   22a12:	483a      	ldr	r0, [pc, #232]	; (22afc <z_tick_sleep+0x110>)
   22a14:	e025      	b.n	22a62 <z_tick_sleep+0x76>
	if (ticks == 0) {
   22a16:	ea50 0301 	orrs.w	r3, r0, r1
   22a1a:	d103      	bne.n	22a24 <z_tick_sleep+0x38>
	z_impl_k_yield();
   22a1c:	f7ff ff4e 	bl	228bc <z_impl_k_yield>
		return 0;
   22a20:	2000      	movs	r0, #0
   22a22:	e066      	b.n	22af2 <z_tick_sleep+0x106>
	if (Z_TICK_ABS(ticks) <= 0) {
   22a24:	1c82      	adds	r2, r0, #2
   22a26:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   22a2a:	db1c      	blt.n	22a66 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   22a2c:	f006 ffe6 	bl	299fc <sys_clock_tick_get_32>
   22a30:	182c      	adds	r4, r5, r0
   22a32:	f04f 0340 	mov.w	r3, #64	; 0x40
   22a36:	f3ef 8811 	mrs	r8, BASEPRI
   22a3a:	f383 8812 	msr	BASEPRI_MAX, r3
   22a3e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22a42:	4831      	ldr	r0, [pc, #196]	; (22b08 <z_tick_sleep+0x11c>)
   22a44:	f7fd ff68 	bl	20918 <z_spin_lock_valid>
   22a48:	b988      	cbnz	r0, 22a6e <z_tick_sleep+0x82>
   22a4a:	4a30      	ldr	r2, [pc, #192]	; (22b0c <z_tick_sleep+0x120>)
   22a4c:	4930      	ldr	r1, [pc, #192]	; (22b10 <z_tick_sleep+0x124>)
   22a4e:	482c      	ldr	r0, [pc, #176]	; (22b00 <z_tick_sleep+0x114>)
   22a50:	2394      	movs	r3, #148	; 0x94
   22a52:	f004 fbc3 	bl	271dc <assert_print>
   22a56:	492c      	ldr	r1, [pc, #176]	; (22b08 <z_tick_sleep+0x11c>)
   22a58:	482e      	ldr	r0, [pc, #184]	; (22b14 <z_tick_sleep+0x128>)
   22a5a:	f004 fbbf 	bl	271dc <assert_print>
   22a5e:	2194      	movs	r1, #148	; 0x94
   22a60:	482a      	ldr	r0, [pc, #168]	; (22b0c <z_tick_sleep+0x120>)
   22a62:	f004 fbb4 	bl	271ce <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   22a66:	f06f 0401 	mvn.w	r4, #1
   22a6a:	1a24      	subs	r4, r4, r0
   22a6c:	e7e1      	b.n	22a32 <z_tick_sleep+0x46>
	pending_current = _current;
   22a6e:	4f2a      	ldr	r7, [pc, #168]	; (22b18 <z_tick_sleep+0x12c>)
	z_spin_lock_set_owner(l);
   22a70:	4825      	ldr	r0, [pc, #148]	; (22b08 <z_tick_sleep+0x11c>)
   22a72:	f7fd ff6f 	bl	20954 <z_spin_lock_set_owner>
   22a76:	4b29      	ldr	r3, [pc, #164]	; (22b1c <z_tick_sleep+0x130>)
   22a78:	68b8      	ldr	r0, [r7, #8]
   22a7a:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   22a7c:	f7ff fbd4 	bl	22228 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   22a80:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   22a82:	4927      	ldr	r1, [pc, #156]	; (22b20 <z_tick_sleep+0x134>)
   22a84:	462a      	mov	r2, r5
   22a86:	4633      	mov	r3, r6
   22a88:	3018      	adds	r0, #24
   22a8a:	f000 fa23 	bl	22ed4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   22a8e:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22a90:	481d      	ldr	r0, [pc, #116]	; (22b08 <z_tick_sleep+0x11c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   22a92:	7b53      	ldrb	r3, [r2, #13]
   22a94:	f043 0310 	orr.w	r3, r3, #16
   22a98:	7353      	strb	r3, [r2, #13]
   22a9a:	f7fd ff4b 	bl	20934 <z_spin_unlock_valid>
   22a9e:	b958      	cbnz	r0, 22ab8 <z_tick_sleep+0xcc>
   22aa0:	4a1a      	ldr	r2, [pc, #104]	; (22b0c <z_tick_sleep+0x120>)
   22aa2:	4920      	ldr	r1, [pc, #128]	; (22b24 <z_tick_sleep+0x138>)
   22aa4:	4816      	ldr	r0, [pc, #88]	; (22b00 <z_tick_sleep+0x114>)
   22aa6:	23e1      	movs	r3, #225	; 0xe1
   22aa8:	f004 fb98 	bl	271dc <assert_print>
   22aac:	4916      	ldr	r1, [pc, #88]	; (22b08 <z_tick_sleep+0x11c>)
   22aae:	481e      	ldr	r0, [pc, #120]	; (22b28 <z_tick_sleep+0x13c>)
   22ab0:	f004 fb94 	bl	271dc <assert_print>
   22ab4:	21e1      	movs	r1, #225	; 0xe1
   22ab6:	e7d3      	b.n	22a60 <z_tick_sleep+0x74>
   22ab8:	4640      	mov	r0, r8
   22aba:	f7f2 fb5b 	bl	15174 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   22abe:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   22ac0:	7b5b      	ldrb	r3, [r3, #13]
   22ac2:	06db      	lsls	r3, r3, #27
   22ac4:	d50c      	bpl.n	22ae0 <z_tick_sleep+0xf4>
   22ac6:	4919      	ldr	r1, [pc, #100]	; (22b2c <z_tick_sleep+0x140>)
   22ac8:	4a0c      	ldr	r2, [pc, #48]	; (22afc <z_tick_sleep+0x110>)
   22aca:	480d      	ldr	r0, [pc, #52]	; (22b00 <z_tick_sleep+0x114>)
   22acc:	f240 53a9 	movw	r3, #1449	; 0x5a9
   22ad0:	f004 fb84 	bl	271dc <assert_print>
   22ad4:	480b      	ldr	r0, [pc, #44]	; (22b04 <z_tick_sleep+0x118>)
   22ad6:	f004 fb81 	bl	271dc <assert_print>
   22ada:	f240 51a9 	movw	r1, #1449	; 0x5a9
   22ade:	e798      	b.n	22a12 <z_tick_sleep+0x26>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   22ae0:	f006 ff8c 	bl	299fc <sys_clock_tick_get_32>
   22ae4:	1a20      	subs	r0, r4, r0
   22ae6:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   22aea:	2801      	cmp	r0, #1
   22aec:	f173 0300 	sbcs.w	r3, r3, #0
   22af0:	db96      	blt.n	22a20 <z_tick_sleep+0x34>
		return ticks;
	}
#endif

	return 0;
}
   22af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22af6:	bf00      	nop
   22af8:	0002e441 	.word	0x0002e441
   22afc:	0002e6ae 	.word	0x0002e6ae
   22b00:	0002ae37 	.word	0x0002ae37
   22b04:	0002d49e 	.word	0x0002d49e
   22b08:	2000381c 	.word	0x2000381c
   22b0c:	0002b22b 	.word	0x0002b22b
   22b10:	0002b284 	.word	0x0002b284
   22b14:	0002b299 	.word	0x0002b299
   22b18:	200037d0 	.word	0x200037d0
   22b1c:	20003810 	.word	0x20003810
   22b20:	000299d5 	.word	0x000299d5
   22b24:	0002b258 	.word	0x0002b258
   22b28:	0002b26f 	.word	0x0002b26f
   22b2c:	0002e98c 	.word	0x0002e98c

00022b30 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   22b30:	b508      	push	{r3, lr}
   22b32:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   22b36:	b173      	cbz	r3, 22b56 <z_impl_k_sleep+0x26>
   22b38:	4912      	ldr	r1, [pc, #72]	; (22b84 <z_impl_k_sleep+0x54>)
   22b3a:	4a13      	ldr	r2, [pc, #76]	; (22b88 <z_impl_k_sleep+0x58>)
   22b3c:	4813      	ldr	r0, [pc, #76]	; (22b8c <z_impl_k_sleep+0x5c>)
   22b3e:	f44f 63b7 	mov.w	r3, #1464	; 0x5b8
   22b42:	f004 fb4b 	bl	271dc <assert_print>
   22b46:	4812      	ldr	r0, [pc, #72]	; (22b90 <z_impl_k_sleep+0x60>)
   22b48:	f004 fb48 	bl	271dc <assert_print>
   22b4c:	480e      	ldr	r0, [pc, #56]	; (22b88 <z_impl_k_sleep+0x58>)
   22b4e:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
   22b52:	f004 fb3c 	bl	271ce <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22b56:	f1b1 3fff 	cmp.w	r1, #4294967295
   22b5a:	bf08      	it	eq
   22b5c:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   22b60:	d106      	bne.n	22b70 <z_impl_k_sleep+0x40>
		k_thread_suspend(_current);
   22b62:	4b0c      	ldr	r3, [pc, #48]	; (22b94 <z_impl_k_sleep+0x64>)
   22b64:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   22b66:	f7ff fcd9 	bl	2251c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   22b6a:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   22b6e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   22b70:	f7ff ff3c 	bl	229ec <z_tick_sleep>
   22b74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   22b78:	fb80 0303 	smull	r0, r3, r0, r3
   22b7c:	0bc0      	lsrs	r0, r0, #15
   22b7e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   22b82:	e7f4      	b.n	22b6e <z_impl_k_sleep+0x3e>
   22b84:	0002e441 	.word	0x0002e441
   22b88:	0002e6ae 	.word	0x0002e6ae
   22b8c:	0002ae37 	.word	0x0002ae37
   22b90:	0002d49e 	.word	0x0002d49e
   22b94:	200037d0 	.word	0x200037d0

00022b98 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   22b98:	4b01      	ldr	r3, [pc, #4]	; (22ba0 <z_impl_z_current_get+0x8>)
   22b9a:	6898      	ldr	r0, [r3, #8]
   22b9c:	4770      	bx	lr
   22b9e:	bf00      	nop
   22ba0:	200037d0 	.word	0x200037d0

00022ba4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   22ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22ba8:	4604      	mov	r4, r0
   22baa:	f04f 0340 	mov.w	r3, #64	; 0x40
   22bae:	f3ef 8611 	mrs	r6, BASEPRI
   22bb2:	f383 8812 	msr	BASEPRI_MAX, r3
   22bb6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22bba:	4851      	ldr	r0, [pc, #324]	; (22d00 <z_thread_abort+0x15c>)
   22bbc:	f7fd feac 	bl	20918 <z_spin_lock_valid>
   22bc0:	b968      	cbnz	r0, 22bde <z_thread_abort+0x3a>
   22bc2:	4a50      	ldr	r2, [pc, #320]	; (22d04 <z_thread_abort+0x160>)
   22bc4:	4950      	ldr	r1, [pc, #320]	; (22d08 <z_thread_abort+0x164>)
   22bc6:	4851      	ldr	r0, [pc, #324]	; (22d0c <z_thread_abort+0x168>)
   22bc8:	2394      	movs	r3, #148	; 0x94
   22bca:	f004 fb07 	bl	271dc <assert_print>
   22bce:	494c      	ldr	r1, [pc, #304]	; (22d00 <z_thread_abort+0x15c>)
   22bd0:	484f      	ldr	r0, [pc, #316]	; (22d10 <z_thread_abort+0x16c>)
   22bd2:	f004 fb03 	bl	271dc <assert_print>
   22bd6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22bd8:	484a      	ldr	r0, [pc, #296]	; (22d04 <z_thread_abort+0x160>)
   22bda:	f004 faf8 	bl	271ce <assert_post_action>
	z_spin_lock_set_owner(l);
   22bde:	4848      	ldr	r0, [pc, #288]	; (22d00 <z_thread_abort+0x15c>)
   22be0:	f7fd feb8 	bl	20954 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   22be4:	7b23      	ldrb	r3, [r4, #12]
   22be6:	07d9      	lsls	r1, r3, #31
   22be8:	d522      	bpl.n	22c30 <z_thread_abort+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22bea:	4845      	ldr	r0, [pc, #276]	; (22d00 <z_thread_abort+0x15c>)
   22bec:	f7fd fea2 	bl	20934 <z_spin_unlock_valid>
   22bf0:	b958      	cbnz	r0, 22c0a <z_thread_abort+0x66>
   22bf2:	4a44      	ldr	r2, [pc, #272]	; (22d04 <z_thread_abort+0x160>)
   22bf4:	4947      	ldr	r1, [pc, #284]	; (22d14 <z_thread_abort+0x170>)
   22bf6:	4845      	ldr	r0, [pc, #276]	; (22d0c <z_thread_abort+0x168>)
   22bf8:	23c2      	movs	r3, #194	; 0xc2
   22bfa:	f004 faef 	bl	271dc <assert_print>
   22bfe:	4940      	ldr	r1, [pc, #256]	; (22d00 <z_thread_abort+0x15c>)
   22c00:	4845      	ldr	r0, [pc, #276]	; (22d18 <z_thread_abort+0x174>)
   22c02:	f004 faeb 	bl	271dc <assert_print>
   22c06:	21c2      	movs	r1, #194	; 0xc2
   22c08:	e7e6      	b.n	22bd8 <z_thread_abort+0x34>
	__asm__ volatile(
   22c0a:	f386 8811 	msr	BASEPRI, r6
   22c0e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   22c12:	4a42      	ldr	r2, [pc, #264]	; (22d1c <z_thread_abort+0x178>)
   22c14:	4942      	ldr	r1, [pc, #264]	; (22d20 <z_thread_abort+0x17c>)
   22c16:	483d      	ldr	r0, [pc, #244]	; (22d0c <z_thread_abort+0x168>)
   22c18:	f240 63ca 	movw	r3, #1738	; 0x6ca
   22c1c:	f004 fade 	bl	271dc <assert_print>
   22c20:	4621      	mov	r1, r4
   22c22:	4840      	ldr	r0, [pc, #256]	; (22d24 <z_thread_abort+0x180>)
   22c24:	f004 fada 	bl	271dc <assert_print>
   22c28:	f240 61ca 	movw	r1, #1738	; 0x6ca
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
   22c2c:	483b      	ldr	r0, [pc, #236]	; (22d1c <z_thread_abort+0x178>)
   22c2e:	e7d4      	b.n	22bda <z_thread_abort+0x36>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   22c30:	7b63      	ldrb	r3, [r4, #13]
   22c32:	071a      	lsls	r2, r3, #28
   22c34:	d50a      	bpl.n	22c4c <z_thread_abort+0xa8>
   22c36:	4832      	ldr	r0, [pc, #200]	; (22d00 <z_thread_abort+0x15c>)
   22c38:	f7fd fe7c 	bl	20934 <z_spin_unlock_valid>
   22c3c:	2800      	cmp	r0, #0
   22c3e:	d0d8      	beq.n	22bf2 <z_thread_abort+0x4e>
   22c40:	f386 8811 	msr	BASEPRI, r6
   22c44:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
   22c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   22c4c:	f023 0220 	bic.w	r2, r3, #32
   22c50:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   22c54:	09d2      	lsrs	r2, r2, #7
   22c56:	d12c      	bne.n	22cb2 <z_thread_abort+0x10e>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   22c58:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   22c5a:	68a3      	ldr	r3, [r4, #8]
   22c5c:	b113      	cbz	r3, 22c64 <z_thread_abort+0xc0>
			unpend_thread_no_timeout(thread);
   22c5e:	4620      	mov	r0, r4
   22c60:	f7ff fcc4 	bl	225ec <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   22c64:	f104 0018 	add.w	r0, r4, #24
   22c68:	f000 f9f4 	bl	23054 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   22c6c:	f104 0758 	add.w	r7, r4, #88	; 0x58
   22c70:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   22c74:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22c76:	42bd      	cmp	r5, r7
   22c78:	d000      	beq.n	22c7c <z_thread_abort+0xd8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   22c7a:	bb25      	cbnz	r5, 22cc6 <z_thread_abort+0x122>
		update_cache(1);
   22c7c:	2001      	movs	r0, #1
   22c7e:	f7fe ff7d 	bl	21b7c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   22c82:	4b29      	ldr	r3, [pc, #164]	; (22d28 <z_thread_abort+0x184>)
   22c84:	689b      	ldr	r3, [r3, #8]
   22c86:	42a3      	cmp	r3, r4
   22c88:	d1d5      	bne.n	22c36 <z_thread_abort+0x92>
   22c8a:	f3ef 8305 	mrs	r3, IPSR
   22c8e:	2b00      	cmp	r3, #0
   22c90:	d1d1      	bne.n	22c36 <z_thread_abort+0x92>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22c92:	481b      	ldr	r0, [pc, #108]	; (22d00 <z_thread_abort+0x15c>)
   22c94:	f7fd fe4e 	bl	20934 <z_spin_unlock_valid>
   22c98:	bb10      	cbnz	r0, 22ce0 <z_thread_abort+0x13c>
   22c9a:	4a1a      	ldr	r2, [pc, #104]	; (22d04 <z_thread_abort+0x160>)
   22c9c:	491d      	ldr	r1, [pc, #116]	; (22d14 <z_thread_abort+0x170>)
   22c9e:	481b      	ldr	r0, [pc, #108]	; (22d0c <z_thread_abort+0x168>)
   22ca0:	23e1      	movs	r3, #225	; 0xe1
   22ca2:	f004 fa9b 	bl	271dc <assert_print>
   22ca6:	4916      	ldr	r1, [pc, #88]	; (22d00 <z_thread_abort+0x15c>)
   22ca8:	481b      	ldr	r0, [pc, #108]	; (22d18 <z_thread_abort+0x174>)
   22caa:	f004 fa97 	bl	271dc <assert_print>
   22cae:	21e1      	movs	r1, #225	; 0xe1
   22cb0:	e792      	b.n	22bd8 <z_thread_abort+0x34>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22cb2:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   22cb6:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   22cba:	481c      	ldr	r0, [pc, #112]	; (22d2c <z_thread_abort+0x188>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22cbc:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   22cbe:	4621      	mov	r1, r4
   22cc0:	f7ff f9dc 	bl	2207c <z_priq_dumb_remove>
}
   22cc4:	e7c9      	b.n	22c5a <z_thread_abort+0xb6>
		unpend_thread_no_timeout(thread);
   22cc6:	4628      	mov	r0, r5
   22cc8:	f7ff fc90 	bl	225ec <unpend_thread_no_timeout>
   22ccc:	f105 0018 	add.w	r0, r5, #24
   22cd0:	f000 f9c0 	bl	23054 <z_abort_timeout>
   22cd4:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   22cd8:	4628      	mov	r0, r5
   22cda:	f7fe ff83 	bl	21be4 <ready_thread>
   22cde:	e7c9      	b.n	22c74 <z_thread_abort+0xd0>
   22ce0:	4630      	mov	r0, r6
   22ce2:	f7f2 fa47 	bl	15174 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   22ce6:	490e      	ldr	r1, [pc, #56]	; (22d20 <z_thread_abort+0x17c>)
   22ce8:	4a0c      	ldr	r2, [pc, #48]	; (22d1c <z_thread_abort+0x178>)
   22cea:	4808      	ldr	r0, [pc, #32]	; (22d0c <z_thread_abort+0x168>)
   22cec:	f240 63f9 	movw	r3, #1785	; 0x6f9
   22cf0:	f004 fa74 	bl	271dc <assert_print>
   22cf4:	480e      	ldr	r0, [pc, #56]	; (22d30 <z_thread_abort+0x18c>)
   22cf6:	f004 fa71 	bl	271dc <assert_print>
   22cfa:	f240 61f9 	movw	r1, #1785	; 0x6f9
   22cfe:	e795      	b.n	22c2c <z_thread_abort+0x88>
   22d00:	2000381c 	.word	0x2000381c
   22d04:	0002b22b 	.word	0x0002b22b
   22d08:	0002b284 	.word	0x0002b284
   22d0c:	0002ae37 	.word	0x0002ae37
   22d10:	0002b299 	.word	0x0002b299
   22d14:	0002b258 	.word	0x0002b258
   22d18:	0002b26f 	.word	0x0002b26f
   22d1c:	0002e6ae 	.word	0x0002e6ae
   22d20:	0002dab5 	.word	0x0002dab5
   22d24:	0002e9cc 	.word	0x0002e9cc
   22d28:	200037d0 	.word	0x200037d0
   22d2c:	200037f0 	.word	0x200037f0
   22d30:	0002e9eb 	.word	0x0002e9eb

00022d34 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   22d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22d38:	4606      	mov	r6, r0
   22d3a:	4688      	mov	r8, r1
   22d3c:	4617      	mov	r7, r2
	__asm__ volatile(
   22d3e:	f04f 0340 	mov.w	r3, #64	; 0x40
   22d42:	f3ef 8911 	mrs	r9, BASEPRI
   22d46:	f383 8812 	msr	BASEPRI_MAX, r3
   22d4a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22d4e:	4821      	ldr	r0, [pc, #132]	; (22dd4 <z_sched_wake+0xa0>)
   22d50:	f7fd fde2 	bl	20918 <z_spin_lock_valid>
   22d54:	4605      	mov	r5, r0
   22d56:	b968      	cbnz	r0, 22d74 <z_sched_wake+0x40>
   22d58:	4a1f      	ldr	r2, [pc, #124]	; (22dd8 <z_sched_wake+0xa4>)
   22d5a:	4920      	ldr	r1, [pc, #128]	; (22ddc <z_sched_wake+0xa8>)
   22d5c:	4820      	ldr	r0, [pc, #128]	; (22de0 <z_sched_wake+0xac>)
   22d5e:	2394      	movs	r3, #148	; 0x94
   22d60:	f004 fa3c 	bl	271dc <assert_print>
   22d64:	491b      	ldr	r1, [pc, #108]	; (22dd4 <z_sched_wake+0xa0>)
   22d66:	481f      	ldr	r0, [pc, #124]	; (22de4 <z_sched_wake+0xb0>)
   22d68:	f004 fa38 	bl	271dc <assert_print>
   22d6c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22d6e:	481a      	ldr	r0, [pc, #104]	; (22dd8 <z_sched_wake+0xa4>)
   22d70:	f004 fa2d 	bl	271ce <assert_post_action>
	z_spin_lock_set_owner(l);
   22d74:	4817      	ldr	r0, [pc, #92]	; (22dd4 <z_sched_wake+0xa0>)
   22d76:	f7fd fded 	bl	20954 <z_spin_lock_set_owner>
	return list->head == list;
   22d7a:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22d7c:	42a6      	cmp	r6, r4
   22d7e:	d01d      	beq.n	22dbc <z_sched_wake+0x88>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
   22d80:	b1f4      	cbz	r4, 22dc0 <z_sched_wake+0x8c>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   22d82:	4620      	mov	r0, r4
   22d84:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   22d88:	6167      	str	r7, [r4, #20]
   22d8a:	f7ff fc2f 	bl	225ec <unpend_thread_no_timeout>
   22d8e:	f104 0018 	add.w	r0, r4, #24
   22d92:	f000 f95f 	bl	23054 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   22d96:	4620      	mov	r0, r4
   22d98:	f7fe ff24 	bl	21be4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22d9c:	480d      	ldr	r0, [pc, #52]	; (22dd4 <z_sched_wake+0xa0>)
   22d9e:	f7fd fdc9 	bl	20934 <z_spin_unlock_valid>
   22da2:	b978      	cbnz	r0, 22dc4 <z_sched_wake+0x90>
   22da4:	4a0c      	ldr	r2, [pc, #48]	; (22dd8 <z_sched_wake+0xa4>)
   22da6:	4910      	ldr	r1, [pc, #64]	; (22de8 <z_sched_wake+0xb4>)
   22da8:	480d      	ldr	r0, [pc, #52]	; (22de0 <z_sched_wake+0xac>)
   22daa:	23c2      	movs	r3, #194	; 0xc2
   22dac:	f004 fa16 	bl	271dc <assert_print>
   22db0:	4908      	ldr	r1, [pc, #32]	; (22dd4 <z_sched_wake+0xa0>)
   22db2:	480e      	ldr	r0, [pc, #56]	; (22dec <z_sched_wake+0xb8>)
   22db4:	f004 fa12 	bl	271dc <assert_print>
   22db8:	21c2      	movs	r1, #194	; 0xc2
   22dba:	e7d8      	b.n	22d6e <z_sched_wake+0x3a>
	bool ret = false;
   22dbc:	2500      	movs	r5, #0
   22dbe:	e7ed      	b.n	22d9c <z_sched_wake+0x68>
   22dc0:	4625      	mov	r5, r4
   22dc2:	e7eb      	b.n	22d9c <z_sched_wake+0x68>
	__asm__ volatile(
   22dc4:	f389 8811 	msr	BASEPRI, r9
   22dc8:	f3bf 8f6f 	isb	sy
			ret = true;
		}
	}

	return ret;
}
   22dcc:	4628      	mov	r0, r5
   22dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22dd2:	bf00      	nop
   22dd4:	2000381c 	.word	0x2000381c
   22dd8:	0002b22b 	.word	0x0002b22b
   22ddc:	0002b284 	.word	0x0002b284
   22de0:	0002ae37 	.word	0x0002ae37
   22de4:	0002b299 	.word	0x0002b299
   22de8:	0002b258 	.word	0x0002b258
   22dec:	0002b26f 	.word	0x0002b26f

00022df0 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   22df0:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   22df2:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   22df6:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   22df8:	e9cd 6700 	strd	r6, r7, [sp]
   22dfc:	f7ff fa86 	bl	2230c <z_pend_curr>

	if (data != NULL) {
   22e00:	b11c      	cbz	r4, 22e0a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   22e02:	4b03      	ldr	r3, [pc, #12]	; (22e10 <z_sched_wait+0x20>)
   22e04:	689b      	ldr	r3, [r3, #8]
   22e06:	695b      	ldr	r3, [r3, #20]
   22e08:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   22e0a:	b002      	add	sp, #8
   22e0c:	bdd0      	pop	{r4, r6, r7, pc}
   22e0e:	bf00      	nop
   22e10:	200037d0 	.word	0x200037d0

00022e14 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   22e14:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   22e16:	4806      	ldr	r0, [pc, #24]	; (22e30 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   22e18:	4a06      	ldr	r2, [pc, #24]	; (22e34 <z_data_copy+0x20>)
   22e1a:	4907      	ldr	r1, [pc, #28]	; (22e38 <z_data_copy+0x24>)
   22e1c:	1a12      	subs	r2, r2, r0
   22e1e:	f006 fcbe 	bl	2979e <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   22e22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   22e26:	4a05      	ldr	r2, [pc, #20]	; (22e3c <z_data_copy+0x28>)
   22e28:	4905      	ldr	r1, [pc, #20]	; (22e40 <z_data_copy+0x2c>)
   22e2a:	4806      	ldr	r0, [pc, #24]	; (22e44 <z_data_copy+0x30>)
   22e2c:	f006 bcb7 	b.w	2979e <z_early_memcpy>
   22e30:	20000000 	.word	0x20000000
   22e34:	20000c18 	.word	0x20000c18
   22e38:	0002ed68 	.word	0x0002ed68
   22e3c:	00000000 	.word	0x00000000
   22e40:	0002ed68 	.word	0x0002ed68
   22e44:	20000000 	.word	0x20000000

00022e48 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   22e48:	4b03      	ldr	r3, [pc, #12]	; (22e58 <elapsed+0x10>)
   22e4a:	681b      	ldr	r3, [r3, #0]
   22e4c:	b90b      	cbnz	r3, 22e52 <elapsed+0xa>
   22e4e:	f7fa bfa7 	b.w	1dda0 <sys_clock_elapsed>
}
   22e52:	2000      	movs	r0, #0
   22e54:	4770      	bx	lr
   22e56:	bf00      	nop
   22e58:	20003820 	.word	0x20003820

00022e5c <next_timeout>:

static int32_t next_timeout(void)
{
   22e5c:	b510      	push	{r4, lr}
	return list->head == list;
   22e5e:	4b0e      	ldr	r3, [pc, #56]	; (22e98 <next_timeout+0x3c>)
   22e60:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22e62:	429c      	cmp	r4, r3
   22e64:	d104      	bne.n	22e70 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   22e66:	f7ff ffef 	bl	22e48 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   22e6a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
   22e6e:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   22e70:	f7ff ffea 	bl	22e48 <elapsed>
	if ((to == NULL) ||
   22e74:	2c00      	cmp	r4, #0
   22e76:	d0f8      	beq.n	22e6a <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   22e78:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   22e7c:	1a1b      	subs	r3, r3, r0
   22e7e:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   22e82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   22e86:	f172 0100 	sbcs.w	r1, r2, #0
   22e8a:	daee      	bge.n	22e6a <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   22e8c:	2a00      	cmp	r2, #0
   22e8e:	bfac      	ite	ge
   22e90:	4618      	movge	r0, r3
   22e92:	2000      	movlt	r0, #0
	return ret;
   22e94:	e7eb      	b.n	22e6e <next_timeout+0x12>
   22e96:	bf00      	nop
   22e98:	200007a8 	.word	0x200007a8

00022e9c <remove_timeout>:
{
   22e9c:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   22e9e:	b170      	cbz	r0, 22ebe <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   22ea0:	4b0b      	ldr	r3, [pc, #44]	; (22ed0 <remove_timeout+0x34>)
   22ea2:	685b      	ldr	r3, [r3, #4]
   22ea4:	4298      	cmp	r0, r3
   22ea6:	d00a      	beq.n	22ebe <remove_timeout+0x22>
   22ea8:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   22eaa:	b143      	cbz	r3, 22ebe <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   22eac:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   22eb0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   22eb4:	1912      	adds	r2, r2, r4
   22eb6:	eb41 0105 	adc.w	r1, r1, r5
   22eba:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
   22ebe:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   22ec2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   22ec4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22ec6:	2300      	movs	r3, #0
	node->prev = NULL;
   22ec8:	e9c0 3300 	strd	r3, r3, [r0]
}
   22ecc:	bd30      	pop	{r4, r5, pc}
   22ece:	bf00      	nop
   22ed0:	200007a8 	.word	0x200007a8

00022ed4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
   22ed8:	bf08      	it	eq
   22eda:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   22ede:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22ee2:	4604      	mov	r4, r0
   22ee4:	4692      	mov	sl, r2
   22ee6:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22ee8:	f000 8099 	beq.w	2301e <z_add_timeout+0x14a>
	return node->next != NULL;
   22eec:	6806      	ldr	r6, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   22eee:	b166      	cbz	r6, 22f0a <z_add_timeout+0x36>
   22ef0:	494c      	ldr	r1, [pc, #304]	; (23024 <z_add_timeout+0x150>)
   22ef2:	4a4d      	ldr	r2, [pc, #308]	; (23028 <z_add_timeout+0x154>)
   22ef4:	484d      	ldr	r0, [pc, #308]	; (2302c <z_add_timeout+0x158>)
   22ef6:	235e      	movs	r3, #94	; 0x5e
   22ef8:	f004 f970 	bl	271dc <assert_print>
   22efc:	484c      	ldr	r0, [pc, #304]	; (23030 <z_add_timeout+0x15c>)
   22efe:	f004 f96d 	bl	271dc <assert_print>
   22f02:	4849      	ldr	r0, [pc, #292]	; (23028 <z_add_timeout+0x154>)
   22f04:	215e      	movs	r1, #94	; 0x5e
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22f06:	f004 f962 	bl	271ce <assert_post_action>
	to->fn = fn;
   22f0a:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   22f0c:	f04f 0340 	mov.w	r3, #64	; 0x40
   22f10:	f3ef 8711 	mrs	r7, BASEPRI
   22f14:	f383 8812 	msr	BASEPRI_MAX, r3
   22f18:	f3bf 8f6f 	isb	sy
   22f1c:	4845      	ldr	r0, [pc, #276]	; (23034 <z_add_timeout+0x160>)
   22f1e:	f7fd fcfb 	bl	20918 <z_spin_lock_valid>
   22f22:	b960      	cbnz	r0, 22f3e <z_add_timeout+0x6a>
   22f24:	4a44      	ldr	r2, [pc, #272]	; (23038 <z_add_timeout+0x164>)
   22f26:	4945      	ldr	r1, [pc, #276]	; (2303c <z_add_timeout+0x168>)
   22f28:	4840      	ldr	r0, [pc, #256]	; (2302c <z_add_timeout+0x158>)
   22f2a:	2394      	movs	r3, #148	; 0x94
   22f2c:	f004 f956 	bl	271dc <assert_print>
   22f30:	4940      	ldr	r1, [pc, #256]	; (23034 <z_add_timeout+0x160>)
   22f32:	4843      	ldr	r0, [pc, #268]	; (23040 <z_add_timeout+0x16c>)
   22f34:	f004 f952 	bl	271dc <assert_print>
   22f38:	2194      	movs	r1, #148	; 0x94
   22f3a:	483f      	ldr	r0, [pc, #252]	; (23038 <z_add_timeout+0x164>)
   22f3c:	e7e3      	b.n	22f06 <z_add_timeout+0x32>
	z_spin_lock_set_owner(l);
   22f3e:	483d      	ldr	r0, [pc, #244]	; (23034 <z_add_timeout+0x160>)
   22f40:	f7fd fd08 	bl	20954 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   22f44:	f1ba 3fff 	cmp.w	sl, #4294967295
   22f48:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   22f4c:	da23      	bge.n	22f96 <z_add_timeout+0xc2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   22f4e:	493d      	ldr	r1, [pc, #244]	; (23044 <z_add_timeout+0x170>)
   22f50:	e9d1 2000 	ldrd	r2, r0, [r1]
   22f54:	f06f 0301 	mvn.w	r3, #1
   22f58:	1a9b      	subs	r3, r3, r2
   22f5a:	f04f 32ff 	mov.w	r2, #4294967295
   22f5e:	eb62 0000 	sbc.w	r0, r2, r0
   22f62:	ebb3 030a 	subs.w	r3, r3, sl
   22f66:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   22f6a:	2b01      	cmp	r3, #1
   22f6c:	f170 0200 	sbcs.w	r2, r0, #0
   22f70:	da01      	bge.n	22f76 <z_add_timeout+0xa2>
   22f72:	2301      	movs	r3, #1
   22f74:	4630      	mov	r0, r6
   22f76:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
   22f7a:	4b33      	ldr	r3, [pc, #204]	; (23048 <z_add_timeout+0x174>)
   22f7c:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
   22f7e:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22f82:	429a      	cmp	r2, r3
   22f84:	bf18      	it	ne
   22f86:	4616      	movne	r6, r2
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   22f88:	b986      	cbnz	r6, 22fac <z_add_timeout+0xd8>
	node->prev = tail;
   22f8a:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
   22f8e:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   22f92:	605c      	str	r4, [r3, #4]
}
   22f94:	e01c      	b.n	22fd0 <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
   22f96:	f7ff ff57 	bl	22e48 <elapsed>
   22f9a:	f11a 0801 	adds.w	r8, sl, #1
   22f9e:	f145 0500 	adc.w	r5, r5, #0
   22fa2:	eb18 0300 	adds.w	r3, r8, r0
   22fa6:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   22faa:	e7e4      	b.n	22f76 <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
   22fac:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
   22fb0:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   22fb4:	428a      	cmp	r2, r1
   22fb6:	eb70 0e05 	sbcs.w	lr, r0, r5
   22fba:	da23      	bge.n	23004 <z_add_timeout+0x130>
				t->dticks -= to->dticks;
   22fbc:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
   22fbe:	6872      	ldr	r2, [r6, #4]
   22fc0:	eb65 0500 	sbc.w	r5, r5, r0
   22fc4:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
   22fc8:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
   22fcc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   22fce:	6074      	str	r4, [r6, #4]
	return list->head == list;
   22fd0:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22fd2:	429a      	cmp	r2, r3
   22fd4:	d006      	beq.n	22fe4 <z_add_timeout+0x110>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   22fd6:	4294      	cmp	r4, r2
   22fd8:	d104      	bne.n	22fe4 <z_add_timeout+0x110>
			sys_clock_set_timeout(next_timeout(), false);
   22fda:	f7ff ff3f 	bl	22e5c <next_timeout>
   22fde:	2100      	movs	r1, #0
   22fe0:	f7fa feb2 	bl	1dd48 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22fe4:	4813      	ldr	r0, [pc, #76]	; (23034 <z_add_timeout+0x160>)
   22fe6:	f7fd fca5 	bl	20934 <z_spin_unlock_valid>
   22fea:	b9a0      	cbnz	r0, 23016 <z_add_timeout+0x142>
   22fec:	4a12      	ldr	r2, [pc, #72]	; (23038 <z_add_timeout+0x164>)
   22fee:	4917      	ldr	r1, [pc, #92]	; (2304c <z_add_timeout+0x178>)
   22ff0:	480e      	ldr	r0, [pc, #56]	; (2302c <z_add_timeout+0x158>)
   22ff2:	23c2      	movs	r3, #194	; 0xc2
   22ff4:	f004 f8f2 	bl	271dc <assert_print>
   22ff8:	490e      	ldr	r1, [pc, #56]	; (23034 <z_add_timeout+0x160>)
   22ffa:	4815      	ldr	r0, [pc, #84]	; (23050 <z_add_timeout+0x17c>)
   22ffc:	f004 f8ee 	bl	271dc <assert_print>
   23000:	21c2      	movs	r1, #194	; 0xc2
   23002:	e79a      	b.n	22f3a <z_add_timeout+0x66>
			to->dticks -= t->dticks;
   23004:	1a52      	subs	r2, r2, r1
   23006:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   2300a:	4566      	cmp	r6, ip
   2300c:	e9c4 2004 	strd	r2, r0, [r4, #16]
   23010:	d0bb      	beq.n	22f8a <z_add_timeout+0xb6>
   23012:	6836      	ldr	r6, [r6, #0]
   23014:	e7b8      	b.n	22f88 <z_add_timeout+0xb4>
	__asm__ volatile(
   23016:	f387 8811 	msr	BASEPRI, r7
   2301a:	f3bf 8f6f 	isb	sy
		}
	}
}
   2301e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23022:	bf00      	nop
   23024:	0002ea31 	.word	0x0002ea31
   23028:	0002ea0d 	.word	0x0002ea0d
   2302c:	0002ae37 	.word	0x0002ae37
   23030:	0002d49e 	.word	0x0002d49e
   23034:	20003824 	.word	0x20003824
   23038:	0002b22b 	.word	0x0002b22b
   2303c:	0002b284 	.word	0x0002b284
   23040:	0002b299 	.word	0x0002b299
   23044:	20002ef0 	.word	0x20002ef0
   23048:	200007a8 	.word	0x200007a8
   2304c:	0002b258 	.word	0x0002b258
   23050:	0002b26f 	.word	0x0002b26f

00023054 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   23054:	b538      	push	{r3, r4, r5, lr}
   23056:	4604      	mov	r4, r0
	__asm__ volatile(
   23058:	f04f 0340 	mov.w	r3, #64	; 0x40
   2305c:	f3ef 8511 	mrs	r5, BASEPRI
   23060:	f383 8812 	msr	BASEPRI_MAX, r3
   23064:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23068:	4819      	ldr	r0, [pc, #100]	; (230d0 <z_abort_timeout+0x7c>)
   2306a:	f7fd fc55 	bl	20918 <z_spin_lock_valid>
   2306e:	b968      	cbnz	r0, 2308c <z_abort_timeout+0x38>
   23070:	4a18      	ldr	r2, [pc, #96]	; (230d4 <z_abort_timeout+0x80>)
   23072:	4919      	ldr	r1, [pc, #100]	; (230d8 <z_abort_timeout+0x84>)
   23074:	4819      	ldr	r0, [pc, #100]	; (230dc <z_abort_timeout+0x88>)
   23076:	2394      	movs	r3, #148	; 0x94
   23078:	f004 f8b0 	bl	271dc <assert_print>
   2307c:	4914      	ldr	r1, [pc, #80]	; (230d0 <z_abort_timeout+0x7c>)
   2307e:	4818      	ldr	r0, [pc, #96]	; (230e0 <z_abort_timeout+0x8c>)
   23080:	f004 f8ac 	bl	271dc <assert_print>
   23084:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23086:	4813      	ldr	r0, [pc, #76]	; (230d4 <z_abort_timeout+0x80>)
   23088:	f004 f8a1 	bl	271ce <assert_post_action>
	z_spin_lock_set_owner(l);
   2308c:	4810      	ldr	r0, [pc, #64]	; (230d0 <z_abort_timeout+0x7c>)
   2308e:	f7fd fc61 	bl	20954 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   23092:	6823      	ldr	r3, [r4, #0]
   23094:	b19b      	cbz	r3, 230be <z_abort_timeout+0x6a>
			remove_timeout(to);
   23096:	4620      	mov	r0, r4
   23098:	f7ff ff00 	bl	22e9c <remove_timeout>
			ret = 0;
   2309c:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2309e:	480c      	ldr	r0, [pc, #48]	; (230d0 <z_abort_timeout+0x7c>)
   230a0:	f7fd fc48 	bl	20934 <z_spin_unlock_valid>
   230a4:	b970      	cbnz	r0, 230c4 <z_abort_timeout+0x70>
   230a6:	4a0b      	ldr	r2, [pc, #44]	; (230d4 <z_abort_timeout+0x80>)
   230a8:	490e      	ldr	r1, [pc, #56]	; (230e4 <z_abort_timeout+0x90>)
   230aa:	480c      	ldr	r0, [pc, #48]	; (230dc <z_abort_timeout+0x88>)
   230ac:	23c2      	movs	r3, #194	; 0xc2
   230ae:	f004 f895 	bl	271dc <assert_print>
   230b2:	4907      	ldr	r1, [pc, #28]	; (230d0 <z_abort_timeout+0x7c>)
   230b4:	480c      	ldr	r0, [pc, #48]	; (230e8 <z_abort_timeout+0x94>)
   230b6:	f004 f891 	bl	271dc <assert_print>
   230ba:	21c2      	movs	r1, #194	; 0xc2
   230bc:	e7e3      	b.n	23086 <z_abort_timeout+0x32>
	int ret = -EINVAL;
   230be:	f06f 0415 	mvn.w	r4, #21
   230c2:	e7ec      	b.n	2309e <z_abort_timeout+0x4a>
	__asm__ volatile(
   230c4:	f385 8811 	msr	BASEPRI, r5
   230c8:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   230cc:	4620      	mov	r0, r4
   230ce:	bd38      	pop	{r3, r4, r5, pc}
   230d0:	20003824 	.word	0x20003824
   230d4:	0002b22b 	.word	0x0002b22b
   230d8:	0002b284 	.word	0x0002b284
   230dc:	0002ae37 	.word	0x0002ae37
   230e0:	0002b299 	.word	0x0002b299
   230e4:	0002b258 	.word	0x0002b258
   230e8:	0002b26f 	.word	0x0002b26f

000230ec <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   230ec:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   230ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   230f2:	f3ef 8511 	mrs	r5, BASEPRI
   230f6:	f383 8812 	msr	BASEPRI_MAX, r3
   230fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   230fe:	4817      	ldr	r0, [pc, #92]	; (2315c <z_get_next_timeout_expiry+0x70>)
   23100:	f7fd fc0a 	bl	20918 <z_spin_lock_valid>
   23104:	b968      	cbnz	r0, 23122 <z_get_next_timeout_expiry+0x36>
   23106:	4a16      	ldr	r2, [pc, #88]	; (23160 <z_get_next_timeout_expiry+0x74>)
   23108:	4916      	ldr	r1, [pc, #88]	; (23164 <z_get_next_timeout_expiry+0x78>)
   2310a:	4817      	ldr	r0, [pc, #92]	; (23168 <z_get_next_timeout_expiry+0x7c>)
   2310c:	2394      	movs	r3, #148	; 0x94
   2310e:	f004 f865 	bl	271dc <assert_print>
   23112:	4912      	ldr	r1, [pc, #72]	; (2315c <z_get_next_timeout_expiry+0x70>)
   23114:	4815      	ldr	r0, [pc, #84]	; (2316c <z_get_next_timeout_expiry+0x80>)
   23116:	f004 f861 	bl	271dc <assert_print>
   2311a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2311c:	4810      	ldr	r0, [pc, #64]	; (23160 <z_get_next_timeout_expiry+0x74>)
   2311e:	f004 f856 	bl	271ce <assert_post_action>
	z_spin_lock_set_owner(l);
   23122:	480e      	ldr	r0, [pc, #56]	; (2315c <z_get_next_timeout_expiry+0x70>)
   23124:	f7fd fc16 	bl	20954 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   23128:	f7ff fe98 	bl	22e5c <next_timeout>
   2312c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2312e:	480b      	ldr	r0, [pc, #44]	; (2315c <z_get_next_timeout_expiry+0x70>)
   23130:	f7fd fc00 	bl	20934 <z_spin_unlock_valid>
   23134:	b958      	cbnz	r0, 2314e <z_get_next_timeout_expiry+0x62>
   23136:	4a0a      	ldr	r2, [pc, #40]	; (23160 <z_get_next_timeout_expiry+0x74>)
   23138:	490d      	ldr	r1, [pc, #52]	; (23170 <z_get_next_timeout_expiry+0x84>)
   2313a:	480b      	ldr	r0, [pc, #44]	; (23168 <z_get_next_timeout_expiry+0x7c>)
   2313c:	23c2      	movs	r3, #194	; 0xc2
   2313e:	f004 f84d 	bl	271dc <assert_print>
   23142:	4906      	ldr	r1, [pc, #24]	; (2315c <z_get_next_timeout_expiry+0x70>)
   23144:	480b      	ldr	r0, [pc, #44]	; (23174 <z_get_next_timeout_expiry+0x88>)
   23146:	f004 f849 	bl	271dc <assert_print>
   2314a:	21c2      	movs	r1, #194	; 0xc2
   2314c:	e7e6      	b.n	2311c <z_get_next_timeout_expiry+0x30>
	__asm__ volatile(
   2314e:	f385 8811 	msr	BASEPRI, r5
   23152:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   23156:	4620      	mov	r0, r4
   23158:	bd38      	pop	{r3, r4, r5, pc}
   2315a:	bf00      	nop
   2315c:	20003824 	.word	0x20003824
   23160:	0002b22b 	.word	0x0002b22b
   23164:	0002b284 	.word	0x0002b284
   23168:	0002ae37 	.word	0x0002ae37
   2316c:	0002b299 	.word	0x0002b299
   23170:	0002b258 	.word	0x0002b258
   23174:	0002b26f 	.word	0x0002b26f

00023178 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   23178:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2317c:	4604      	mov	r4, r0
	__asm__ volatile(
   2317e:	f04f 0340 	mov.w	r3, #64	; 0x40
   23182:	f3ef 8711 	mrs	r7, BASEPRI
   23186:	f383 8812 	msr	BASEPRI_MAX, r3
   2318a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2318e:	4847      	ldr	r0, [pc, #284]	; (232ac <sys_clock_announce+0x134>)
   23190:	f7fd fbc2 	bl	20918 <z_spin_lock_valid>
   23194:	b968      	cbnz	r0, 231b2 <sys_clock_announce+0x3a>
   23196:	4a46      	ldr	r2, [pc, #280]	; (232b0 <sys_clock_announce+0x138>)
   23198:	4946      	ldr	r1, [pc, #280]	; (232b4 <sys_clock_announce+0x13c>)
   2319a:	4847      	ldr	r0, [pc, #284]	; (232b8 <sys_clock_announce+0x140>)
   2319c:	2394      	movs	r3, #148	; 0x94
   2319e:	f004 f81d 	bl	271dc <assert_print>
   231a2:	4942      	ldr	r1, [pc, #264]	; (232ac <sys_clock_announce+0x134>)
   231a4:	4845      	ldr	r0, [pc, #276]	; (232bc <sys_clock_announce+0x144>)
   231a6:	f004 f819 	bl	271dc <assert_print>
   231aa:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   231ac:	4840      	ldr	r0, [pc, #256]	; (232b0 <sys_clock_announce+0x138>)
   231ae:	f004 f80e 	bl	271ce <assert_post_action>
	return list->head == list;
   231b2:	f8df 9118 	ldr.w	r9, [pc, #280]	; 232cc <sys_clock_announce+0x154>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   231b6:	f8df 8118 	ldr.w	r8, [pc, #280]	; 232d0 <sys_clock_announce+0x158>
	z_spin_lock_set_owner(l);
   231ba:	483c      	ldr	r0, [pc, #240]	; (232ac <sys_clock_announce+0x134>)
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
   231bc:	4e40      	ldr	r6, [pc, #256]	; (232c0 <sys_clock_announce+0x148>)
   231be:	f7fd fbc9 	bl	20954 <z_spin_lock_set_owner>
	announce_remaining = ticks;
   231c2:	f8c8 4000 	str.w	r4, [r8]
   231c6:	f8d9 4000 	ldr.w	r4, [r9]
		t->dticks = 0;
   231ca:	f04f 0a00 	mov.w	sl, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   231ce:	454c      	cmp	r4, r9
   231d0:	bf08      	it	eq
   231d2:	2400      	moveq	r4, #0
   231d4:	f04f 0b00 	mov.w	fp, #0
		curr_tick += dt;
   231d8:	e9d6 2c00 	ldrd	r2, ip, [r6]
	     (t != NULL) && (t->dticks <= announce_remaining);
   231dc:	f8d8 3000 	ldr.w	r3, [r8]
   231e0:	2c00      	cmp	r4, #0
   231e2:	d048      	beq.n	23276 <sys_clock_announce+0xfe>
   231e4:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
   231e8:	17d8      	asrs	r0, r3, #31
   231ea:	42ab      	cmp	r3, r5
   231ec:	eb70 0e01 	sbcs.w	lr, r0, r1
   231f0:	da05      	bge.n	231fe <sys_clock_announce+0x86>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
   231f2:	1aed      	subs	r5, r5, r3
   231f4:	eb61 0100 	sbc.w	r1, r1, r0
   231f8:	e9c4 5104 	strd	r5, r1, [r4, #16]
   231fc:	e03b      	b.n	23276 <sys_clock_announce+0xfe>
		curr_tick += dt;
   231fe:	18aa      	adds	r2, r5, r2
   23200:	eb4c 73e5 	adc.w	r3, ip, r5, asr #31
		remove_timeout(t);
   23204:	4620      	mov	r0, r4
		t->dticks = 0;
   23206:	e9c4 ab04 	strd	sl, fp, [r4, #16]
		curr_tick += dt;
   2320a:	e9c6 2300 	strd	r2, r3, [r6]
		remove_timeout(t);
   2320e:	f7ff fe45 	bl	22e9c <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23212:	4826      	ldr	r0, [pc, #152]	; (232ac <sys_clock_announce+0x134>)
   23214:	f7fd fb8e 	bl	20934 <z_spin_unlock_valid>
   23218:	b958      	cbnz	r0, 23232 <sys_clock_announce+0xba>
   2321a:	4a25      	ldr	r2, [pc, #148]	; (232b0 <sys_clock_announce+0x138>)
   2321c:	4929      	ldr	r1, [pc, #164]	; (232c4 <sys_clock_announce+0x14c>)
   2321e:	4826      	ldr	r0, [pc, #152]	; (232b8 <sys_clock_announce+0x140>)
   23220:	23c2      	movs	r3, #194	; 0xc2
   23222:	f003 ffdb 	bl	271dc <assert_print>
   23226:	4921      	ldr	r1, [pc, #132]	; (232ac <sys_clock_announce+0x134>)
   23228:	4827      	ldr	r0, [pc, #156]	; (232c8 <sys_clock_announce+0x150>)
   2322a:	f003 ffd7 	bl	271dc <assert_print>
   2322e:	21c2      	movs	r1, #194	; 0xc2
   23230:	e7bc      	b.n	231ac <sys_clock_announce+0x34>
	__asm__ volatile(
   23232:	f387 8811 	msr	BASEPRI, r7
   23236:	f3bf 8f6f 	isb	sy
		t->fn(t);
   2323a:	68a3      	ldr	r3, [r4, #8]
   2323c:	4620      	mov	r0, r4
   2323e:	4798      	blx	r3
	__asm__ volatile(
   23240:	f04f 0340 	mov.w	r3, #64	; 0x40
   23244:	f3ef 8711 	mrs	r7, BASEPRI
   23248:	f383 8812 	msr	BASEPRI_MAX, r3
   2324c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23250:	4816      	ldr	r0, [pc, #88]	; (232ac <sys_clock_announce+0x134>)
   23252:	f7fd fb61 	bl	20918 <z_spin_lock_valid>
   23256:	2800      	cmp	r0, #0
   23258:	d09d      	beq.n	23196 <sys_clock_announce+0x1e>
	z_spin_lock_set_owner(l);
   2325a:	4814      	ldr	r0, [pc, #80]	; (232ac <sys_clock_announce+0x134>)
   2325c:	f7fd fb7a 	bl	20954 <z_spin_lock_set_owner>
		announce_remaining -= dt;
   23260:	f8d8 3000 	ldr.w	r3, [r8]
	return list->head == list;
   23264:	f8d9 4000 	ldr.w	r4, [r9]
   23268:	1b5b      	subs	r3, r3, r5
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2326a:	454c      	cmp	r4, r9
   2326c:	f8c8 3000 	str.w	r3, [r8]
   23270:	d1b2      	bne.n	231d8 <sys_clock_announce+0x60>
		curr_tick += dt;
   23272:	e9d6 2c00 	ldrd	r2, ip, [r6]
	}

	curr_tick += announce_remaining;
   23276:	189a      	adds	r2, r3, r2
   23278:	eb4c 73e3 	adc.w	r3, ip, r3, asr #31
	announce_remaining = 0;
   2327c:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   2327e:	e9c6 2300 	strd	r2, r3, [r6]
	announce_remaining = 0;
   23282:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
   23286:	f7ff fde9 	bl	22e5c <next_timeout>
   2328a:	4621      	mov	r1, r4
   2328c:	f7fa fd5c 	bl	1dd48 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23290:	4806      	ldr	r0, [pc, #24]	; (232ac <sys_clock_announce+0x134>)
   23292:	f7fd fb4f 	bl	20934 <z_spin_unlock_valid>
   23296:	2800      	cmp	r0, #0
   23298:	d0bf      	beq.n	2321a <sys_clock_announce+0xa2>
	__asm__ volatile(
   2329a:	f387 8811 	msr	BASEPRI, r7
   2329e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
   232a2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
   232a6:	f7fe bf5b 	b.w	22160 <z_time_slice>
   232aa:	bf00      	nop
   232ac:	20003824 	.word	0x20003824
   232b0:	0002b22b 	.word	0x0002b22b
   232b4:	0002b284 	.word	0x0002b284
   232b8:	0002ae37 	.word	0x0002ae37
   232bc:	0002b299 	.word	0x0002b299
   232c0:	20002ef0 	.word	0x20002ef0
   232c4:	0002b258 	.word	0x0002b258
   232c8:	0002b26f 	.word	0x0002b26f
   232cc:	200007a8 	.word	0x200007a8
   232d0:	20003820 	.word	0x20003820

000232d4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   232d4:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   232d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   232da:	f3ef 8611 	mrs	r6, BASEPRI
   232de:	f383 8812 	msr	BASEPRI_MAX, r3
   232e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   232e6:	481a      	ldr	r0, [pc, #104]	; (23350 <sys_clock_tick_get+0x7c>)
   232e8:	f7fd fb16 	bl	20918 <z_spin_lock_valid>
   232ec:	b968      	cbnz	r0, 2330a <sys_clock_tick_get+0x36>
   232ee:	4a19      	ldr	r2, [pc, #100]	; (23354 <sys_clock_tick_get+0x80>)
   232f0:	4919      	ldr	r1, [pc, #100]	; (23358 <sys_clock_tick_get+0x84>)
   232f2:	481a      	ldr	r0, [pc, #104]	; (2335c <sys_clock_tick_get+0x88>)
   232f4:	2394      	movs	r3, #148	; 0x94
   232f6:	f003 ff71 	bl	271dc <assert_print>
   232fa:	4915      	ldr	r1, [pc, #84]	; (23350 <sys_clock_tick_get+0x7c>)
   232fc:	4818      	ldr	r0, [pc, #96]	; (23360 <sys_clock_tick_get+0x8c>)
   232fe:	f003 ff6d 	bl	271dc <assert_print>
   23302:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23304:	4813      	ldr	r0, [pc, #76]	; (23354 <sys_clock_tick_get+0x80>)
   23306:	f003 ff62 	bl	271ce <assert_post_action>
	z_spin_lock_set_owner(l);
   2330a:	4811      	ldr	r0, [pc, #68]	; (23350 <sys_clock_tick_get+0x7c>)
   2330c:	f7fd fb22 	bl	20954 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   23310:	f7ff fd9a 	bl	22e48 <elapsed>
   23314:	4a13      	ldr	r2, [pc, #76]	; (23364 <sys_clock_tick_get+0x90>)
   23316:	e9d2 4500 	ldrd	r4, r5, [r2]
   2331a:	1904      	adds	r4, r0, r4
   2331c:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23320:	480b      	ldr	r0, [pc, #44]	; (23350 <sys_clock_tick_get+0x7c>)
   23322:	f7fd fb07 	bl	20934 <z_spin_unlock_valid>
   23326:	b958      	cbnz	r0, 23340 <sys_clock_tick_get+0x6c>
   23328:	4a0a      	ldr	r2, [pc, #40]	; (23354 <sys_clock_tick_get+0x80>)
   2332a:	490f      	ldr	r1, [pc, #60]	; (23368 <sys_clock_tick_get+0x94>)
   2332c:	480b      	ldr	r0, [pc, #44]	; (2335c <sys_clock_tick_get+0x88>)
   2332e:	23c2      	movs	r3, #194	; 0xc2
   23330:	f003 ff54 	bl	271dc <assert_print>
   23334:	4906      	ldr	r1, [pc, #24]	; (23350 <sys_clock_tick_get+0x7c>)
   23336:	480d      	ldr	r0, [pc, #52]	; (2336c <sys_clock_tick_get+0x98>)
   23338:	f003 ff50 	bl	271dc <assert_print>
   2333c:	21c2      	movs	r1, #194	; 0xc2
   2333e:	e7e1      	b.n	23304 <sys_clock_tick_get+0x30>
	__asm__ volatile(
   23340:	f386 8811 	msr	BASEPRI, r6
   23344:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   23348:	4620      	mov	r0, r4
   2334a:	4629      	mov	r1, r5
   2334c:	bd70      	pop	{r4, r5, r6, pc}
   2334e:	bf00      	nop
   23350:	20003824 	.word	0x20003824
   23354:	0002b22b 	.word	0x0002b22b
   23358:	0002b284 	.word	0x0002b284
   2335c:	0002ae37 	.word	0x0002ae37
   23360:	0002b299 	.word	0x0002b299
   23364:	20002ef0 	.word	0x20002ef0
   23368:	0002b258 	.word	0x0002b258
   2336c:	0002b26f 	.word	0x0002b26f

00023370 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   23370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23372:	4604      	mov	r4, r0
	__asm__ volatile(
   23374:	f04f 0340 	mov.w	r3, #64	; 0x40
   23378:	f3ef 8711 	mrs	r7, BASEPRI
   2337c:	f383 8812 	msr	BASEPRI_MAX, r3
   23380:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23384:	484e      	ldr	r0, [pc, #312]	; (234c0 <z_timer_expiration_handler+0x150>)
   23386:	f7fd fac7 	bl	20918 <z_spin_lock_valid>
   2338a:	b968      	cbnz	r0, 233a8 <z_timer_expiration_handler+0x38>
   2338c:	4a4d      	ldr	r2, [pc, #308]	; (234c4 <z_timer_expiration_handler+0x154>)
   2338e:	494e      	ldr	r1, [pc, #312]	; (234c8 <z_timer_expiration_handler+0x158>)
   23390:	484e      	ldr	r0, [pc, #312]	; (234cc <z_timer_expiration_handler+0x15c>)
   23392:	2394      	movs	r3, #148	; 0x94
   23394:	f003 ff22 	bl	271dc <assert_print>
   23398:	4949      	ldr	r1, [pc, #292]	; (234c0 <z_timer_expiration_handler+0x150>)
   2339a:	484d      	ldr	r0, [pc, #308]	; (234d0 <z_timer_expiration_handler+0x160>)
   2339c:	f003 ff1e 	bl	271dc <assert_print>
   233a0:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   233a2:	4848      	ldr	r0, [pc, #288]	; (234c4 <z_timer_expiration_handler+0x154>)
   233a4:	f003 ff13 	bl	271ce <assert_post_action>
	z_spin_lock_set_owner(l);
   233a8:	4845      	ldr	r0, [pc, #276]	; (234c0 <z_timer_expiration_handler+0x150>)
   233aa:	f7fd fad3 	bl	20954 <z_spin_lock_set_owner>
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
   233ae:	6822      	ldr	r2, [r4, #0]
   233b0:	b182      	cbz	r2, 233d4 <z_timer_expiration_handler+0x64>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   233b2:	4843      	ldr	r0, [pc, #268]	; (234c0 <z_timer_expiration_handler+0x150>)
   233b4:	f7fd fabe 	bl	20934 <z_spin_unlock_valid>
   233b8:	2800      	cmp	r0, #0
   233ba:	d17b      	bne.n	234b4 <z_timer_expiration_handler+0x144>
   233bc:	4a41      	ldr	r2, [pc, #260]	; (234c4 <z_timer_expiration_handler+0x154>)
   233be:	4945      	ldr	r1, [pc, #276]	; (234d4 <z_timer_expiration_handler+0x164>)
   233c0:	4842      	ldr	r0, [pc, #264]	; (234cc <z_timer_expiration_handler+0x15c>)
   233c2:	23c2      	movs	r3, #194	; 0xc2
   233c4:	f003 ff0a 	bl	271dc <assert_print>
   233c8:	493d      	ldr	r1, [pc, #244]	; (234c0 <z_timer_expiration_handler+0x150>)
   233ca:	4843      	ldr	r0, [pc, #268]	; (234d8 <z_timer_expiration_handler+0x168>)
   233cc:	f003 ff06 	bl	271dc <assert_print>
   233d0:	21c2      	movs	r1, #194	; 0xc2
   233d2:	e7e6      	b.n	233a2 <z_timer_expiration_handler+0x32>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   233d4:	e9d4 360a 	ldrd	r3, r6, [r4, #40]	; 0x28
   233d8:	1c58      	adds	r0, r3, #1
   233da:	f146 0100 	adc.w	r1, r6, #0
   233de:	2802      	cmp	r0, #2
   233e0:	f171 0100 	sbcs.w	r1, r1, #0
   233e4:	d327      	bcc.n	23436 <z_timer_expiration_handler+0xc6>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		k_timeout_t next = timer->period;

		/* see note about z_add_timeout() in z_impl_k_timer_start() */
		next.ticks = MAX(next.ticks - 1, 0);
   233e6:	2b01      	cmp	r3, #1
   233e8:	f176 0100 	sbcs.w	r1, r6, #0
   233ec:	bfbc      	itt	lt
   233ee:	2301      	movlt	r3, #1
   233f0:	4616      	movlt	r6, r2
   233f2:	1e5d      	subs	r5, r3, #1
   233f4:	f146 36ff 	adc.w	r6, r6, #4294967295
	return z_impl_k_uptime_ticks();
   233f8:	f006 fb04 	bl	29a04 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   233fc:	3001      	adds	r0, #1
   233fe:	f141 0100 	adc.w	r1, r1, #0
   23402:	1940      	adds	r0, r0, r5
   23404:	eb46 0101 	adc.w	r1, r6, r1
   23408:	2801      	cmp	r0, #1
   2340a:	f171 0100 	sbcs.w	r1, r1, #0
   2340e:	db4c      	blt.n	234aa <z_timer_expiration_handler+0x13a>
   23410:	f006 faf8 	bl	29a04 <z_impl_k_uptime_ticks>
   23414:	3001      	adds	r0, #1
   23416:	f141 0100 	adc.w	r1, r1, #0
   2341a:	f06f 0201 	mvn.w	r2, #1
   2341e:	1940      	adds	r0, r0, r5
   23420:	eb46 0301 	adc.w	r3, r6, r1
   23424:	1a12      	subs	r2, r2, r0
   23426:	f04f 31ff 	mov.w	r1, #4294967295
   2342a:	eb61 0303 	sbc.w	r3, r1, r3
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2342e:	492b      	ldr	r1, [pc, #172]	; (234dc <z_timer_expiration_handler+0x16c>)
   23430:	4620      	mov	r0, r4
   23432:	f7ff fd4f 	bl	22ed4 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   23436:	6b23      	ldr	r3, [r4, #48]	; 0x30
   23438:	3301      	adds	r3, #1
   2343a:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   2343c:	6a23      	ldr	r3, [r4, #32]
   2343e:	b1db      	cbz	r3, 23478 <z_timer_expiration_handler+0x108>
   23440:	481f      	ldr	r0, [pc, #124]	; (234c0 <z_timer_expiration_handler+0x150>)
   23442:	f7fd fa77 	bl	20934 <z_spin_unlock_valid>
   23446:	2800      	cmp	r0, #0
   23448:	d0b8      	beq.n	233bc <z_timer_expiration_handler+0x4c>
	__asm__ volatile(
   2344a:	f387 8811 	msr	BASEPRI, r7
   2344e:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   23452:	6a23      	ldr	r3, [r4, #32]
   23454:	4620      	mov	r0, r4
   23456:	4798      	blx	r3
	__asm__ volatile(
   23458:	f04f 0340 	mov.w	r3, #64	; 0x40
   2345c:	f3ef 8711 	mrs	r7, BASEPRI
   23460:	f383 8812 	msr	BASEPRI_MAX, r3
   23464:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23468:	4815      	ldr	r0, [pc, #84]	; (234c0 <z_timer_expiration_handler+0x150>)
   2346a:	f7fd fa55 	bl	20918 <z_spin_lock_valid>
   2346e:	2800      	cmp	r0, #0
   23470:	d08c      	beq.n	2338c <z_timer_expiration_handler+0x1c>
	z_spin_lock_set_owner(l);
   23472:	4813      	ldr	r0, [pc, #76]	; (234c0 <z_timer_expiration_handler+0x150>)
   23474:	f7fd fa6e 	bl	20954 <z_spin_lock_set_owner>
	return list->head == list;
   23478:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2347c:	42a5      	cmp	r5, r4
   2347e:	d098      	beq.n	233b2 <z_timer_expiration_handler+0x42>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   23480:	2d00      	cmp	r5, #0
   23482:	d096      	beq.n	233b2 <z_timer_expiration_handler+0x42>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
   23484:	4628      	mov	r0, r5
   23486:	f7fe fc3d 	bl	21d04 <z_unpend_thread_no_timeout>
   2348a:	2300      	movs	r3, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2348c:	480c      	ldr	r0, [pc, #48]	; (234c0 <z_timer_expiration_handler+0x150>)
   2348e:	67eb      	str	r3, [r5, #124]	; 0x7c
   23490:	f7fd fa50 	bl	20934 <z_spin_unlock_valid>
   23494:	2800      	cmp	r0, #0
   23496:	d091      	beq.n	233bc <z_timer_expiration_handler+0x4c>
	__asm__ volatile(
   23498:	f387 8811 	msr	BASEPRI, r7
   2349c:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
   234a0:	4628      	mov	r0, r5
}
   234a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   234a6:	f7fe bbe7 	b.w	21c78 <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   234aa:	f06f 0201 	mvn.w	r2, #1
   234ae:	f04f 33ff 	mov.w	r3, #4294967295
   234b2:	e7bc      	b.n	2342e <z_timer_expiration_handler+0xbe>
   234b4:	f387 8811 	msr	BASEPRI, r7
   234b8:	f3bf 8f6f 	isb	sy
}
   234bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   234be:	bf00      	nop
   234c0:	20003828 	.word	0x20003828
   234c4:	0002b22b 	.word	0x0002b22b
   234c8:	0002b284 	.word	0x0002b284
   234cc:	0002ae37 	.word	0x0002ae37
   234d0:	0002b299 	.word	0x0002b299
   234d4:	0002b258 	.word	0x0002b258
   234d8:	0002b26f 	.word	0x0002b26f
   234dc:	00023371 	.word	0x00023371

000234e0 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   234e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   234e4:	f1b3 3fff 	cmp.w	r3, #4294967295
   234e8:	bf08      	it	eq
   234ea:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   234ee:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   234f2:	4605      	mov	r5, r0
   234f4:	461c      	mov	r4, r3
   234f6:	4617      	mov	r7, r2
   234f8:	461e      	mov	r6, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   234fa:	d01b      	beq.n	23534 <z_impl_k_timer_start+0x54>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
   234fc:	1c53      	adds	r3, r2, #1
   234fe:	f174 33ff 	sbcs.w	r3, r4, #4294967295
   23502:	db08      	blt.n	23516 <z_impl_k_timer_start+0x36>
		duration.ticks = MAX(duration.ticks - 1, 0);
   23504:	2a01      	cmp	r2, #1
   23506:	f174 0300 	sbcs.w	r3, r4, #0
   2350a:	bfbc      	itt	lt
   2350c:	2201      	movlt	r2, #1
   2350e:	2400      	movlt	r4, #0
   23510:	1e57      	subs	r7, r2, #1
   23512:	f144 36ff 	adc.w	r6, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   23516:	4628      	mov	r0, r5
   23518:	f7ff fd9c 	bl	23054 <z_abort_timeout>
	timer->period = period;
   2351c:	e9c5 890a 	strd	r8, r9, [r5, #40]	; 0x28
	timer->status = 0U;
   23520:	2300      	movs	r3, #0
   23522:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   23524:	463a      	mov	r2, r7
   23526:	4633      	mov	r3, r6
   23528:	4628      	mov	r0, r5
   2352a:	4903      	ldr	r1, [pc, #12]	; (23538 <z_impl_k_timer_start+0x58>)
		     duration);
}
   2352c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   23530:	f7ff bcd0 	b.w	22ed4 <z_add_timeout>
}
   23534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23538:	00023371 	.word	0x00023371

0002353c <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   2353c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   23540:	2600      	movs	r6, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23542:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 23718 <register_events+0x1dc>
{
   23546:	9301      	str	r3, [sp, #4]
   23548:	4688      	mov	r8, r1
   2354a:	4615      	mov	r5, r2
	for (int ii = 0; ii < num_events; ii++) {
   2354c:	4604      	mov	r4, r0
	int events_registered = 0;
   2354e:	4637      	mov	r7, r6
	event->poller = NULL;
   23550:	46b2      	mov	sl, r6
	for (int ii = 0; ii < num_events; ii++) {
   23552:	4546      	cmp	r6, r8
   23554:	db03      	blt.n	2355e <register_events+0x22>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   23556:	4638      	mov	r0, r7
   23558:	b003      	add	sp, #12
   2355a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   2355e:	f04f 0340 	mov.w	r3, #64	; 0x40
   23562:	f3ef 8b11 	mrs	fp, BASEPRI
   23566:	f383 8812 	msr	BASEPRI_MAX, r3
   2356a:	f3bf 8f6f 	isb	sy
   2356e:	4648      	mov	r0, r9
   23570:	f7fd f9d2 	bl	20918 <z_spin_lock_valid>
   23574:	b960      	cbnz	r0, 23590 <register_events+0x54>
   23576:	4a65      	ldr	r2, [pc, #404]	; (2370c <register_events+0x1d0>)
   23578:	4965      	ldr	r1, [pc, #404]	; (23710 <register_events+0x1d4>)
   2357a:	4866      	ldr	r0, [pc, #408]	; (23714 <register_events+0x1d8>)
   2357c:	2394      	movs	r3, #148	; 0x94
   2357e:	f003 fe2d 	bl	271dc <assert_print>
   23582:	4965      	ldr	r1, [pc, #404]	; (23718 <register_events+0x1dc>)
   23584:	4865      	ldr	r0, [pc, #404]	; (2371c <register_events+0x1e0>)
   23586:	f003 fe29 	bl	271dc <assert_print>
   2358a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2358c:	485f      	ldr	r0, [pc, #380]	; (2370c <register_events+0x1d0>)
   2358e:	e060      	b.n	23652 <register_events+0x116>
	z_spin_lock_set_owner(l);
   23590:	4648      	mov	r0, r9
   23592:	f7fd f9df 	bl	20954 <z_spin_lock_set_owner>
	switch (event->type) {
   23596:	7b63      	ldrb	r3, [r4, #13]
   23598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2359c:	2b08      	cmp	r3, #8
   2359e:	d84a      	bhi.n	23636 <register_events+0xfa>
   235a0:	e8df f003 	tbb	[pc, r3]
   235a4:	49053d2b 	.word	0x49053d2b
   235a8:	49494927 	.word	0x49494927
   235ac:	43          	.byte	0x43
   235ad:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   235ae:	6923      	ldr	r3, [r4, #16]
   235b0:	689b      	ldr	r3, [r3, #8]
   235b2:	b313      	cbz	r3, 235fa <register_events+0xbe>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   235b4:	2302      	movs	r3, #2
	event->state |= state;
   235b6:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   235b8:	f8c4 a008 	str.w	sl, [r4, #8]
	event->state |= state;
   235bc:	f3c2 3186 	ubfx	r1, r2, #14, #7
   235c0:	430b      	orrs	r3, r1
   235c2:	f363 3294 	bfi	r2, r3, #14, #7
   235c6:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   235c8:	f885 a000 	strb.w	sl, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   235cc:	4648      	mov	r0, r9
   235ce:	f7fd f9b1 	bl	20934 <z_spin_unlock_valid>
   235d2:	3414      	adds	r4, #20
   235d4:	2800      	cmp	r0, #0
   235d6:	f040 8092 	bne.w	236fe <register_events+0x1c2>
   235da:	4a4c      	ldr	r2, [pc, #304]	; (2370c <register_events+0x1d0>)
   235dc:	4950      	ldr	r1, [pc, #320]	; (23720 <register_events+0x1e4>)
   235de:	484d      	ldr	r0, [pc, #308]	; (23714 <register_events+0x1d8>)
   235e0:	23c2      	movs	r3, #194	; 0xc2
   235e2:	f003 fdfb 	bl	271dc <assert_print>
   235e6:	494c      	ldr	r1, [pc, #304]	; (23718 <register_events+0x1dc>)
   235e8:	484e      	ldr	r0, [pc, #312]	; (23724 <register_events+0x1e8>)
   235ea:	f003 fdf7 	bl	271dc <assert_print>
   235ee:	21c2      	movs	r1, #194	; 0xc2
   235f0:	e7cc      	b.n	2358c <register_events+0x50>
		if (!k_queue_is_empty(event->queue)) {
   235f2:	6923      	ldr	r3, [r4, #16]
   235f4:	681b      	ldr	r3, [r3, #0]
   235f6:	2b00      	cmp	r3, #0
   235f8:	d12d      	bne.n	23656 <register_events+0x11a>
		} else if (!just_check && poller->is_polling) {
   235fa:	9b01      	ldr	r3, [sp, #4]
   235fc:	2b00      	cmp	r3, #0
   235fe:	d1e5      	bne.n	235cc <register_events+0x90>
   23600:	782b      	ldrb	r3, [r5, #0]
   23602:	2b00      	cmp	r3, #0
   23604:	d0e2      	beq.n	235cc <register_events+0x90>
	switch (event->type) {
   23606:	7b63      	ldrb	r3, [r4, #13]
   23608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2360c:	2b08      	cmp	r3, #8
   2360e:	d86b      	bhi.n	236e8 <register_events+0x1ac>
   23610:	e8df f003 	tbb	[pc, r3]
   23614:	6a234935 	.word	0x6a234935
   23618:	6a6a6a38 	.word	0x6a6a6a38
   2361c:	59          	.byte	0x59
   2361d:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   2361e:	6923      	ldr	r3, [r4, #16]
   23620:	689b      	ldr	r3, [r3, #8]
   23622:	2b00      	cmp	r3, #0
   23624:	d0e9      	beq.n	235fa <register_events+0xbe>
			*state = K_POLL_STATE_SIGNALED;
   23626:	2301      	movs	r3, #1
   23628:	e7c5      	b.n	235b6 <register_events+0x7a>
		if (event->msgq->used_msgs > 0) {
   2362a:	6923      	ldr	r3, [r4, #16]
   2362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2362e:	2b00      	cmp	r3, #0
   23630:	d0e3      	beq.n	235fa <register_events+0xbe>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   23632:	2310      	movs	r3, #16
   23634:	e7bf      	b.n	235b6 <register_events+0x7a>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   23636:	4a3c      	ldr	r2, [pc, #240]	; (23728 <register_events+0x1ec>)
   23638:	493c      	ldr	r1, [pc, #240]	; (2372c <register_events+0x1f0>)
   2363a:	4836      	ldr	r0, [pc, #216]	; (23714 <register_events+0x1d8>)
   2363c:	2363      	movs	r3, #99	; 0x63
   2363e:	f003 fdcd 	bl	271dc <assert_print>
   23642:	7b61      	ldrb	r1, [r4, #13]
   23644:	483a      	ldr	r0, [pc, #232]	; (23730 <register_events+0x1f4>)
   23646:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   2364a:	f003 fdc7 	bl	271dc <assert_print>
   2364e:	2163      	movs	r1, #99	; 0x63
   23650:	4835      	ldr	r0, [pc, #212]	; (23728 <register_events+0x1ec>)
   23652:	f003 fdbc 	bl	271ce <assert_post_action>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   23656:	2304      	movs	r3, #4
   23658:	e7ad      	b.n	235b6 <register_events+0x7a>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2365a:	6920      	ldr	r0, [r4, #16]
   2365c:	b950      	cbnz	r0, 23674 <register_events+0x138>
   2365e:	4935      	ldr	r1, [pc, #212]	; (23734 <register_events+0x1f8>)
   23660:	4a31      	ldr	r2, [pc, #196]	; (23728 <register_events+0x1ec>)
   23662:	482c      	ldr	r0, [pc, #176]	; (23714 <register_events+0x1d8>)
   23664:	238d      	movs	r3, #141	; 0x8d
   23666:	f003 fdb9 	bl	271dc <assert_print>
   2366a:	4833      	ldr	r0, [pc, #204]	; (23738 <register_events+0x1fc>)
   2366c:	f003 fdb6 	bl	271dc <assert_print>
   23670:	218d      	movs	r1, #141	; 0x8d
   23672:	e7ed      	b.n	23650 <register_events+0x114>
		add_event(&event->sem->poll_events, event, poller);
   23674:	462a      	mov	r2, r5
   23676:	4621      	mov	r1, r4
   23678:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   2367a:	f006 fa14 	bl	29aa6 <add_event>
	event->poller = poller;
   2367e:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   23680:	3701      	adds	r7, #1
   23682:	e7a3      	b.n	235cc <register_events+0x90>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   23684:	6920      	ldr	r0, [r4, #16]
   23686:	b950      	cbnz	r0, 2369e <register_events+0x162>
   23688:	492c      	ldr	r1, [pc, #176]	; (2373c <register_events+0x200>)
   2368a:	4a27      	ldr	r2, [pc, #156]	; (23728 <register_events+0x1ec>)
   2368c:	4821      	ldr	r0, [pc, #132]	; (23714 <register_events+0x1d8>)
   2368e:	2391      	movs	r3, #145	; 0x91
   23690:	f003 fda4 	bl	271dc <assert_print>
   23694:	482a      	ldr	r0, [pc, #168]	; (23740 <register_events+0x204>)
   23696:	f003 fda1 	bl	271dc <assert_print>
   2369a:	2191      	movs	r1, #145	; 0x91
   2369c:	e7d8      	b.n	23650 <register_events+0x114>
		add_event(&event->queue->poll_events, event, poller);
   2369e:	462a      	mov	r2, r5
   236a0:	4621      	mov	r1, r4
   236a2:	3014      	adds	r0, #20
   236a4:	e7e9      	b.n	2367a <register_events+0x13e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   236a6:	6920      	ldr	r0, [r4, #16]
   236a8:	b950      	cbnz	r0, 236c0 <register_events+0x184>
   236aa:	4926      	ldr	r1, [pc, #152]	; (23744 <register_events+0x208>)
   236ac:	4a1e      	ldr	r2, [pc, #120]	; (23728 <register_events+0x1ec>)
   236ae:	4819      	ldr	r0, [pc, #100]	; (23714 <register_events+0x1d8>)
   236b0:	2395      	movs	r3, #149	; 0x95
   236b2:	f003 fd93 	bl	271dc <assert_print>
   236b6:	4824      	ldr	r0, [pc, #144]	; (23748 <register_events+0x20c>)
   236b8:	f003 fd90 	bl	271dc <assert_print>
   236bc:	2195      	movs	r1, #149	; 0x95
   236be:	e7c7      	b.n	23650 <register_events+0x114>
		add_event(&event->signal->poll_events, event, poller);
   236c0:	462a      	mov	r2, r5
   236c2:	4621      	mov	r1, r4
   236c4:	e7d9      	b.n	2367a <register_events+0x13e>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   236c6:	6920      	ldr	r0, [r4, #16]
   236c8:	b950      	cbnz	r0, 236e0 <register_events+0x1a4>
   236ca:	4920      	ldr	r1, [pc, #128]	; (2374c <register_events+0x210>)
   236cc:	4a16      	ldr	r2, [pc, #88]	; (23728 <register_events+0x1ec>)
   236ce:	4811      	ldr	r0, [pc, #68]	; (23714 <register_events+0x1d8>)
   236d0:	2399      	movs	r3, #153	; 0x99
   236d2:	f003 fd83 	bl	271dc <assert_print>
   236d6:	481e      	ldr	r0, [pc, #120]	; (23750 <register_events+0x214>)
   236d8:	f003 fd80 	bl	271dc <assert_print>
   236dc:	2199      	movs	r1, #153	; 0x99
   236de:	e7b7      	b.n	23650 <register_events+0x114>
		add_event(&event->msgq->poll_events, event, poller);
   236e0:	462a      	mov	r2, r5
   236e2:	4621      	mov	r1, r4
   236e4:	3028      	adds	r0, #40	; 0x28
   236e6:	e7c8      	b.n	2367a <register_events+0x13e>
		__ASSERT(false, "invalid event type\n");
   236e8:	4910      	ldr	r1, [pc, #64]	; (2372c <register_events+0x1f0>)
   236ea:	4a0f      	ldr	r2, [pc, #60]	; (23728 <register_events+0x1ec>)
   236ec:	4809      	ldr	r0, [pc, #36]	; (23714 <register_events+0x1d8>)
   236ee:	23a6      	movs	r3, #166	; 0xa6
   236f0:	f003 fd74 	bl	271dc <assert_print>
   236f4:	4817      	ldr	r0, [pc, #92]	; (23754 <register_events+0x218>)
   236f6:	f003 fd71 	bl	271dc <assert_print>
   236fa:	21a6      	movs	r1, #166	; 0xa6
   236fc:	e7a8      	b.n	23650 <register_events+0x114>
	__asm__ volatile(
   236fe:	f38b 8811 	msr	BASEPRI, fp
   23702:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   23706:	3601      	adds	r6, #1
   23708:	e723      	b.n	23552 <register_events+0x16>
   2370a:	bf00      	nop
   2370c:	0002b22b 	.word	0x0002b22b
   23710:	0002b284 	.word	0x0002b284
   23714:	0002ae37 	.word	0x0002ae37
   23718:	2000382c 	.word	0x2000382c
   2371c:	0002b299 	.word	0x0002b299
   23720:	0002b258 	.word	0x0002b258
   23724:	0002b26f 	.word	0x0002b26f
   23728:	0002ea51 	.word	0x0002ea51
   2372c:	0002dab5 	.word	0x0002dab5
   23730:	0002ea72 	.word	0x0002ea72
   23734:	0002ea8f 	.word	0x0002ea8f
   23738:	0002eaa9 	.word	0x0002eaa9
   2373c:	0002eabe 	.word	0x0002eabe
   23740:	0002eada 	.word	0x0002eada
   23744:	0002eaeb 	.word	0x0002eaeb
   23748:	0002eb08 	.word	0x0002eb08
   2374c:	0002eb1f 	.word	0x0002eb1f
   23750:	0002eb3a 	.word	0x0002eb3a
   23754:	0002eb53 	.word	0x0002eb53

00023758 <clear_event_registrations>:
{
   23758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2375c:	2314      	movs	r3, #20
   2375e:	4f4e      	ldr	r7, [pc, #312]	; (23898 <clear_event_registrations+0x140>)
   23760:	4615      	mov	r5, r2
	while (num_events--) {
   23762:	460c      	mov	r4, r1
   23764:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   23768:	2600      	movs	r6, #0
	while (num_events--) {
   2376a:	b90c      	cbnz	r4, 23770 <clear_event_registrations+0x18>
}
   2376c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (event->type) {
   23770:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   23774:	f840 6c0c 	str.w	r6, [r0, #-12]
	switch (event->type) {
   23778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2377c:	f1a0 0814 	sub.w	r8, r0, #20
   23780:	2b08      	cmp	r3, #8
   23782:	d842      	bhi.n	2380a <clear_event_registrations+0xb2>
   23784:	e8df f003 	tbb	[pc, r3]
   23788:	41052555 	.word	0x41052555
   2378c:	41414116 	.word	0x41414116
   23790:	33          	.byte	0x33
   23791:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   23792:	f850 3c04 	ldr.w	r3, [r0, #-4]
   23796:	2b00      	cmp	r3, #0
   23798:	d142      	bne.n	23820 <clear_event_registrations+0xc8>
   2379a:	4940      	ldr	r1, [pc, #256]	; (2389c <clear_event_registrations+0x144>)
   2379c:	4a40      	ldr	r2, [pc, #256]	; (238a0 <clear_event_registrations+0x148>)
   2379e:	4841      	ldr	r0, [pc, #260]	; (238a4 <clear_event_registrations+0x14c>)
   237a0:	23b6      	movs	r3, #182	; 0xb6
   237a2:	f003 fd1b 	bl	271dc <assert_print>
   237a6:	4840      	ldr	r0, [pc, #256]	; (238a8 <clear_event_registrations+0x150>)
   237a8:	f003 fd18 	bl	271dc <assert_print>
   237ac:	21b6      	movs	r1, #182	; 0xb6
		__ASSERT(event->queue != NULL, "invalid queue\n");
   237ae:	483c      	ldr	r0, [pc, #240]	; (238a0 <clear_event_registrations+0x148>)
   237b0:	f003 fd0d 	bl	271ce <assert_post_action>
   237b4:	f850 3c04 	ldr.w	r3, [r0, #-4]
   237b8:	2b00      	cmp	r3, #0
   237ba:	d131      	bne.n	23820 <clear_event_registrations+0xc8>
   237bc:	493b      	ldr	r1, [pc, #236]	; (238ac <clear_event_registrations+0x154>)
   237be:	4a38      	ldr	r2, [pc, #224]	; (238a0 <clear_event_registrations+0x148>)
   237c0:	4838      	ldr	r0, [pc, #224]	; (238a4 <clear_event_registrations+0x14c>)
   237c2:	23ba      	movs	r3, #186	; 0xba
   237c4:	f003 fd0a 	bl	271dc <assert_print>
   237c8:	4839      	ldr	r0, [pc, #228]	; (238b0 <clear_event_registrations+0x158>)
   237ca:	f003 fd07 	bl	271dc <assert_print>
   237ce:	21ba      	movs	r1, #186	; 0xba
   237d0:	e7ed      	b.n	237ae <clear_event_registrations+0x56>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   237d2:	f850 3c04 	ldr.w	r3, [r0, #-4]
   237d6:	bb1b      	cbnz	r3, 23820 <clear_event_registrations+0xc8>
   237d8:	4936      	ldr	r1, [pc, #216]	; (238b4 <clear_event_registrations+0x15c>)
   237da:	4a31      	ldr	r2, [pc, #196]	; (238a0 <clear_event_registrations+0x148>)
   237dc:	4831      	ldr	r0, [pc, #196]	; (238a4 <clear_event_registrations+0x14c>)
   237de:	23be      	movs	r3, #190	; 0xbe
   237e0:	f003 fcfc 	bl	271dc <assert_print>
   237e4:	4834      	ldr	r0, [pc, #208]	; (238b8 <clear_event_registrations+0x160>)
   237e6:	f003 fcf9 	bl	271dc <assert_print>
   237ea:	21be      	movs	r1, #190	; 0xbe
   237ec:	e7df      	b.n	237ae <clear_event_registrations+0x56>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   237ee:	f850 3c04 	ldr.w	r3, [r0, #-4]
   237f2:	b9ab      	cbnz	r3, 23820 <clear_event_registrations+0xc8>
   237f4:	4931      	ldr	r1, [pc, #196]	; (238bc <clear_event_registrations+0x164>)
   237f6:	4a2a      	ldr	r2, [pc, #168]	; (238a0 <clear_event_registrations+0x148>)
   237f8:	482a      	ldr	r0, [pc, #168]	; (238a4 <clear_event_registrations+0x14c>)
   237fa:	23c2      	movs	r3, #194	; 0xc2
   237fc:	f003 fcee 	bl	271dc <assert_print>
   23800:	482f      	ldr	r0, [pc, #188]	; (238c0 <clear_event_registrations+0x168>)
   23802:	f003 fceb 	bl	271dc <assert_print>
   23806:	21c2      	movs	r1, #194	; 0xc2
   23808:	e7d1      	b.n	237ae <clear_event_registrations+0x56>
		__ASSERT(false, "invalid event type\n");
   2380a:	492e      	ldr	r1, [pc, #184]	; (238c4 <clear_event_registrations+0x16c>)
   2380c:	4a24      	ldr	r2, [pc, #144]	; (238a0 <clear_event_registrations+0x148>)
   2380e:	4825      	ldr	r0, [pc, #148]	; (238a4 <clear_event_registrations+0x14c>)
   23810:	23cf      	movs	r3, #207	; 0xcf
   23812:	f003 fce3 	bl	271dc <assert_print>
   23816:	482c      	ldr	r0, [pc, #176]	; (238c8 <clear_event_registrations+0x170>)
   23818:	f003 fce0 	bl	271dc <assert_print>
   2381c:	21cf      	movs	r1, #207	; 0xcf
   2381e:	e7c6      	b.n	237ae <clear_event_registrations+0x56>
	return node->next != NULL;
   23820:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   23824:	b12b      	cbz	r3, 23832 <clear_event_registrations+0xda>
	sys_dnode_t *const prev = node->prev;
   23826:	f850 2c10 	ldr.w	r2, [r0, #-16]
	prev->next = next;
   2382a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2382c:	605a      	str	r2, [r3, #4]
	node->prev = NULL;
   2382e:	e940 6605 	strd	r6, r6, [r0, #-20]
   23832:	4638      	mov	r0, r7
   23834:	f7fd f87e 	bl	20934 <z_spin_unlock_valid>
   23838:	b960      	cbnz	r0, 23854 <clear_event_registrations+0xfc>
   2383a:	4a24      	ldr	r2, [pc, #144]	; (238cc <clear_event_registrations+0x174>)
   2383c:	4924      	ldr	r1, [pc, #144]	; (238d0 <clear_event_registrations+0x178>)
   2383e:	4819      	ldr	r0, [pc, #100]	; (238a4 <clear_event_registrations+0x14c>)
   23840:	23c2      	movs	r3, #194	; 0xc2
   23842:	f003 fccb 	bl	271dc <assert_print>
   23846:	4914      	ldr	r1, [pc, #80]	; (23898 <clear_event_registrations+0x140>)
   23848:	4822      	ldr	r0, [pc, #136]	; (238d4 <clear_event_registrations+0x17c>)
   2384a:	f003 fcc7 	bl	271dc <assert_print>
   2384e:	21c2      	movs	r1, #194	; 0xc2
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23850:	481e      	ldr	r0, [pc, #120]	; (238cc <clear_event_registrations+0x174>)
   23852:	e7ad      	b.n	237b0 <clear_event_registrations+0x58>
   23854:	f385 8811 	msr	BASEPRI, r5
   23858:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2385c:	f04f 0340 	mov.w	r3, #64	; 0x40
   23860:	f3ef 8511 	mrs	r5, BASEPRI
   23864:	f383 8812 	msr	BASEPRI_MAX, r3
   23868:	f3bf 8f6f 	isb	sy
   2386c:	4638      	mov	r0, r7
   2386e:	f7fd f853 	bl	20918 <z_spin_lock_valid>
   23872:	3c01      	subs	r4, #1
   23874:	b958      	cbnz	r0, 2388e <clear_event_registrations+0x136>
   23876:	4a15      	ldr	r2, [pc, #84]	; (238cc <clear_event_registrations+0x174>)
   23878:	4917      	ldr	r1, [pc, #92]	; (238d8 <clear_event_registrations+0x180>)
   2387a:	480a      	ldr	r0, [pc, #40]	; (238a4 <clear_event_registrations+0x14c>)
   2387c:	2394      	movs	r3, #148	; 0x94
   2387e:	f003 fcad 	bl	271dc <assert_print>
   23882:	4905      	ldr	r1, [pc, #20]	; (23898 <clear_event_registrations+0x140>)
   23884:	4815      	ldr	r0, [pc, #84]	; (238dc <clear_event_registrations+0x184>)
   23886:	f003 fca9 	bl	271dc <assert_print>
   2388a:	2194      	movs	r1, #148	; 0x94
   2388c:	e7e0      	b.n	23850 <clear_event_registrations+0xf8>
	z_spin_lock_set_owner(l);
   2388e:	4638      	mov	r0, r7
   23890:	f7fd f860 	bl	20954 <z_spin_lock_set_owner>
	return k;
   23894:	4640      	mov	r0, r8
   23896:	e768      	b.n	2376a <clear_event_registrations+0x12>
   23898:	2000382c 	.word	0x2000382c
   2389c:	0002ea8f 	.word	0x0002ea8f
   238a0:	0002ea51 	.word	0x0002ea51
   238a4:	0002ae37 	.word	0x0002ae37
   238a8:	0002eaa9 	.word	0x0002eaa9
   238ac:	0002eabe 	.word	0x0002eabe
   238b0:	0002eada 	.word	0x0002eada
   238b4:	0002eaeb 	.word	0x0002eaeb
   238b8:	0002eb08 	.word	0x0002eb08
   238bc:	0002eb1f 	.word	0x0002eb1f
   238c0:	0002eb3a 	.word	0x0002eb3a
   238c4:	0002dab5 	.word	0x0002dab5
   238c8:	0002eb53 	.word	0x0002eb53
   238cc:	0002b22b 	.word	0x0002b22b
   238d0:	0002b258 	.word	0x0002b258
   238d4:	0002b26f 	.word	0x0002b26f
   238d8:	0002b284 	.word	0x0002b284
   238dc:	0002b299 	.word	0x0002b299

000238e0 <k_poll_event_init>:
{
   238e0:	b508      	push	{r3, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   238e2:	b162      	cbz	r2, 238fe <k_poll_event_init+0x1e>
   238e4:	4917      	ldr	r1, [pc, #92]	; (23944 <k_poll_event_init+0x64>)
   238e6:	4a18      	ldr	r2, [pc, #96]	; (23948 <k_poll_event_init+0x68>)
   238e8:	4818      	ldr	r0, [pc, #96]	; (2394c <k_poll_event_init+0x6c>)
   238ea:	232d      	movs	r3, #45	; 0x2d
   238ec:	f003 fc76 	bl	271dc <assert_print>
   238f0:	4817      	ldr	r0, [pc, #92]	; (23950 <k_poll_event_init+0x70>)
   238f2:	f003 fc73 	bl	271dc <assert_print>
   238f6:	212d      	movs	r1, #45	; 0x2d
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   238f8:	4813      	ldr	r0, [pc, #76]	; (23948 <k_poll_event_init+0x68>)
   238fa:	f003 fc68 	bl	271ce <assert_post_action>
   238fe:	293f      	cmp	r1, #63	; 0x3f
   23900:	d90a      	bls.n	23918 <k_poll_event_init+0x38>
   23902:	4914      	ldr	r1, [pc, #80]	; (23954 <k_poll_event_init+0x74>)
   23904:	4a10      	ldr	r2, [pc, #64]	; (23948 <k_poll_event_init+0x68>)
   23906:	4811      	ldr	r0, [pc, #68]	; (2394c <k_poll_event_init+0x6c>)
   23908:	232f      	movs	r3, #47	; 0x2f
   2390a:	f003 fc67 	bl	271dc <assert_print>
   2390e:	4812      	ldr	r0, [pc, #72]	; (23958 <k_poll_event_init+0x78>)
   23910:	f003 fc64 	bl	271dc <assert_print>
   23914:	212f      	movs	r1, #47	; 0x2f
   23916:	e7ef      	b.n	238f8 <k_poll_event_init+0x18>
	__ASSERT(obj != NULL, "must provide an object\n");
   23918:	b953      	cbnz	r3, 23930 <k_poll_event_init+0x50>
   2391a:	4910      	ldr	r1, [pc, #64]	; (2395c <k_poll_event_init+0x7c>)
   2391c:	4a0a      	ldr	r2, [pc, #40]	; (23948 <k_poll_event_init+0x68>)
   2391e:	480b      	ldr	r0, [pc, #44]	; (2394c <k_poll_event_init+0x6c>)
   23920:	2330      	movs	r3, #48	; 0x30
   23922:	f003 fc5b 	bl	271dc <assert_print>
   23926:	480e      	ldr	r0, [pc, #56]	; (23960 <k_poll_event_init+0x80>)
   23928:	f003 fc58 	bl	271dc <assert_print>
   2392c:	2130      	movs	r1, #48	; 0x30
   2392e:	e7e3      	b.n	238f8 <k_poll_event_init+0x18>
	event->poller = NULL;
   23930:	6082      	str	r2, [r0, #8]
	event->type = type;
   23932:	0209      	lsls	r1, r1, #8
   23934:	7b02      	ldrb	r2, [r0, #12]
   23936:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   2393a:	4311      	orrs	r1, r2
	event->obj = obj;
   2393c:	e9c0 1303 	strd	r1, r3, [r0, #12]
}
   23940:	bd08      	pop	{r3, pc}
   23942:	bf00      	nop
   23944:	0002eb69 	.word	0x0002eb69
   23948:	0002ea51 	.word	0x0002ea51
   2394c:	0002ae37 	.word	0x0002ae37
   23950:	0002eb89 	.word	0x0002eb89
   23954:	0002ebaf 	.word	0x0002ebaf
   23958:	0002ebd3 	.word	0x0002ebd3
   2395c:	0002ebe3 	.word	0x0002ebe3
   23960:	0002ebf6 	.word	0x0002ebf6

00023964 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   23964:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23968:	461e      	mov	r6, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   2396a:	4b5c      	ldr	r3, [pc, #368]	; (23adc <z_impl_k_poll+0x178>)
   2396c:	f8d3 8008 	ldr.w	r8, [r3, #8]

	poller->is_polling = true;
   23970:	2301      	movs	r3, #1
{
   23972:	4617      	mov	r7, r2
   23974:	4605      	mov	r5, r0
	struct z_poller *poller = &_current->poller;
   23976:	f108 0260 	add.w	r2, r8, #96	; 0x60
	poller->is_polling = true;
   2397a:	f888 3060 	strb.w	r3, [r8, #96]	; 0x60
	poller->mode = MODE_POLL;
   2397e:	f888 3061 	strb.w	r3, [r8, #97]	; 0x61
   23982:	f3ef 8b05 	mrs	fp, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   23986:	f1bb 0f00 	cmp.w	fp, #0
   2398a:	d00e      	beq.n	239aa <z_impl_k_poll+0x46>
   2398c:	4954      	ldr	r1, [pc, #336]	; (23ae0 <z_impl_k_poll+0x17c>)
   2398e:	4a55      	ldr	r2, [pc, #340]	; (23ae4 <z_impl_k_poll+0x180>)
   23990:	4855      	ldr	r0, [pc, #340]	; (23ae8 <z_impl_k_poll+0x184>)
   23992:	f240 132d 	movw	r3, #301	; 0x12d
   23996:	f003 fc21 	bl	271dc <assert_print>
   2399a:	4854      	ldr	r0, [pc, #336]	; (23aec <z_impl_k_poll+0x188>)
   2399c:	f003 fc1e 	bl	271dc <assert_print>
   239a0:	f240 112d 	movw	r1, #301	; 0x12d
	__ASSERT(events != NULL, "NULL events\n");
   239a4:	484f      	ldr	r0, [pc, #316]	; (23ae4 <z_impl_k_poll+0x180>)
   239a6:	f003 fc12 	bl	271ce <assert_post_action>
   239aa:	b960      	cbnz	r0, 239c6 <z_impl_k_poll+0x62>
   239ac:	4950      	ldr	r1, [pc, #320]	; (23af0 <z_impl_k_poll+0x18c>)
   239ae:	4a4d      	ldr	r2, [pc, #308]	; (23ae4 <z_impl_k_poll+0x180>)
   239b0:	484d      	ldr	r0, [pc, #308]	; (23ae8 <z_impl_k_poll+0x184>)
   239b2:	f44f 7397 	mov.w	r3, #302	; 0x12e
   239b6:	f003 fc11 	bl	271dc <assert_print>
   239ba:	484e      	ldr	r0, [pc, #312]	; (23af4 <z_impl_k_poll+0x190>)
   239bc:	f003 fc0e 	bl	271dc <assert_print>
   239c0:	f44f 7197 	mov.w	r1, #302	; 0x12e
   239c4:	e7ee      	b.n	239a4 <z_impl_k_poll+0x40>
	__ASSERT(num_events >= 0, "<0 events\n");
   239c6:	2900      	cmp	r1, #0
   239c8:	da0c      	bge.n	239e4 <z_impl_k_poll+0x80>
   239ca:	494b      	ldr	r1, [pc, #300]	; (23af8 <z_impl_k_poll+0x194>)
   239cc:	4a45      	ldr	r2, [pc, #276]	; (23ae4 <z_impl_k_poll+0x180>)
   239ce:	4846      	ldr	r0, [pc, #280]	; (23ae8 <z_impl_k_poll+0x184>)
   239d0:	f240 132f 	movw	r3, #303	; 0x12f
   239d4:	f003 fc02 	bl	271dc <assert_print>
   239d8:	4848      	ldr	r0, [pc, #288]	; (23afc <z_impl_k_poll+0x198>)
   239da:	f003 fbff 	bl	271dc <assert_print>
   239de:	f240 112f 	movw	r1, #303	; 0x12f
   239e2:	e7df      	b.n	239a4 <z_impl_k_poll+0x40>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   239e4:	ea57 0306 	orrs.w	r3, r7, r6
   239e8:	bf0c      	ite	eq
   239ea:	2301      	moveq	r3, #1
   239ec:	2300      	movne	r3, #0
   239ee:	f7ff fda5 	bl	2353c <register_events>
   239f2:	4681      	mov	r9, r0
   239f4:	f04f 0340 	mov.w	r3, #64	; 0x40
   239f8:	f3ef 8a11 	mrs	sl, BASEPRI
   239fc:	f383 8812 	msr	BASEPRI_MAX, r3
   23a00:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23a04:	483e      	ldr	r0, [pc, #248]	; (23b00 <z_impl_k_poll+0x19c>)
   23a06:	f7fc ff87 	bl	20918 <z_spin_lock_valid>
   23a0a:	b960      	cbnz	r0, 23a26 <z_impl_k_poll+0xc2>
   23a0c:	4a3d      	ldr	r2, [pc, #244]	; (23b04 <z_impl_k_poll+0x1a0>)
   23a0e:	493e      	ldr	r1, [pc, #248]	; (23b08 <z_impl_k_poll+0x1a4>)
   23a10:	4835      	ldr	r0, [pc, #212]	; (23ae8 <z_impl_k_poll+0x184>)
   23a12:	2394      	movs	r3, #148	; 0x94
   23a14:	f003 fbe2 	bl	271dc <assert_print>
   23a18:	4939      	ldr	r1, [pc, #228]	; (23b00 <z_impl_k_poll+0x19c>)
   23a1a:	483c      	ldr	r0, [pc, #240]	; (23b0c <z_impl_k_poll+0x1a8>)
   23a1c:	f003 fbde 	bl	271dc <assert_print>
   23a20:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23a22:	4838      	ldr	r0, [pc, #224]	; (23b04 <z_impl_k_poll+0x1a0>)
   23a24:	e7bf      	b.n	239a6 <z_impl_k_poll+0x42>
	z_spin_lock_set_owner(l);
   23a26:	4836      	ldr	r0, [pc, #216]	; (23b00 <z_impl_k_poll+0x19c>)
   23a28:	f7fc ff94 	bl	20954 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   23a2c:	f898 4060 	ldrb.w	r4, [r8, #96]	; 0x60
   23a30:	b9e4      	cbnz	r4, 23a6c <z_impl_k_poll+0x108>
		clear_event_registrations(events, events_registered, key);
   23a32:	4628      	mov	r0, r5
   23a34:	4652      	mov	r2, sl
   23a36:	4649      	mov	r1, r9
   23a38:	f7ff fe8e 	bl	23758 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23a3c:	4830      	ldr	r0, [pc, #192]	; (23b00 <z_impl_k_poll+0x19c>)
   23a3e:	f7fc ff79 	bl	20934 <z_spin_unlock_valid>
   23a42:	b958      	cbnz	r0, 23a5c <z_impl_k_poll+0xf8>
   23a44:	4a2f      	ldr	r2, [pc, #188]	; (23b04 <z_impl_k_poll+0x1a0>)
   23a46:	4932      	ldr	r1, [pc, #200]	; (23b10 <z_impl_k_poll+0x1ac>)
   23a48:	4827      	ldr	r0, [pc, #156]	; (23ae8 <z_impl_k_poll+0x184>)
   23a4a:	23c2      	movs	r3, #194	; 0xc2
   23a4c:	f003 fbc6 	bl	271dc <assert_print>
   23a50:	492b      	ldr	r1, [pc, #172]	; (23b00 <z_impl_k_poll+0x19c>)
   23a52:	4830      	ldr	r0, [pc, #192]	; (23b14 <z_impl_k_poll+0x1b0>)
   23a54:	f003 fbc2 	bl	271dc <assert_print>
   23a58:	21c2      	movs	r1, #194	; 0xc2
   23a5a:	e7e2      	b.n	23a22 <z_impl_k_poll+0xbe>
	__asm__ volatile(
   23a5c:	f38a 8811 	msr	BASEPRI, sl
   23a60:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   23a64:	4620      	mov	r0, r4
   23a66:	b003      	add	sp, #12
   23a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23a6c:	ea57 0306 	orrs.w	r3, r7, r6
	poller->is_polling = false;
   23a70:	f888 b060 	strb.w	fp, [r8, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23a74:	d10b      	bne.n	23a8e <z_impl_k_poll+0x12a>
   23a76:	4822      	ldr	r0, [pc, #136]	; (23b00 <z_impl_k_poll+0x19c>)
   23a78:	f7fc ff5c 	bl	20934 <z_spin_unlock_valid>
   23a7c:	2800      	cmp	r0, #0
   23a7e:	d0e1      	beq.n	23a44 <z_impl_k_poll+0xe0>
   23a80:	f38a 8811 	msr	BASEPRI, sl
   23a84:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   23a88:	f06f 040a 	mvn.w	r4, #10
   23a8c:	e7ea      	b.n	23a64 <z_impl_k_poll+0x100>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   23a8e:	e9cd 7600 	strd	r7, r6, [sp]
   23a92:	4a21      	ldr	r2, [pc, #132]	; (23b18 <z_impl_k_poll+0x1b4>)
   23a94:	481a      	ldr	r0, [pc, #104]	; (23b00 <z_impl_k_poll+0x19c>)
   23a96:	4651      	mov	r1, sl
   23a98:	f7fe fc38 	bl	2230c <z_pend_curr>
   23a9c:	4604      	mov	r4, r0
	__asm__ volatile(
   23a9e:	f04f 0340 	mov.w	r3, #64	; 0x40
   23aa2:	f3ef 8611 	mrs	r6, BASEPRI
   23aa6:	f383 8812 	msr	BASEPRI_MAX, r3
   23aaa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23aae:	4814      	ldr	r0, [pc, #80]	; (23b00 <z_impl_k_poll+0x19c>)
   23ab0:	f7fc ff32 	bl	20918 <z_spin_lock_valid>
   23ab4:	2800      	cmp	r0, #0
   23ab6:	d0a9      	beq.n	23a0c <z_impl_k_poll+0xa8>
	z_spin_lock_set_owner(l);
   23ab8:	4811      	ldr	r0, [pc, #68]	; (23b00 <z_impl_k_poll+0x19c>)
   23aba:	f7fc ff4b 	bl	20954 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   23abe:	4628      	mov	r0, r5
   23ac0:	4632      	mov	r2, r6
   23ac2:	4649      	mov	r1, r9
   23ac4:	f7ff fe48 	bl	23758 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23ac8:	480d      	ldr	r0, [pc, #52]	; (23b00 <z_impl_k_poll+0x19c>)
   23aca:	f7fc ff33 	bl	20934 <z_spin_unlock_valid>
   23ace:	2800      	cmp	r0, #0
   23ad0:	d0b8      	beq.n	23a44 <z_impl_k_poll+0xe0>
	__asm__ volatile(
   23ad2:	f386 8811 	msr	BASEPRI, r6
   23ad6:	f3bf 8f6f 	isb	sy
	return swap_rc;
   23ada:	e7c3      	b.n	23a64 <z_impl_k_poll+0x100>
   23adc:	200037d0 	.word	0x200037d0
   23ae0:	0002e441 	.word	0x0002e441
   23ae4:	0002ea51 	.word	0x0002ea51
   23ae8:	0002ae37 	.word	0x0002ae37
   23aec:	0002d49e 	.word	0x0002d49e
   23af0:	0002ec10 	.word	0x0002ec10
   23af4:	0002ec26 	.word	0x0002ec26
   23af8:	0002ec35 	.word	0x0002ec35
   23afc:	0002ec45 	.word	0x0002ec45
   23b00:	2000382c 	.word	0x2000382c
   23b04:	0002b22b 	.word	0x0002b22b
   23b08:	0002b284 	.word	0x0002b284
   23b0c:	0002b299 	.word	0x0002b299
   23b10:	0002b258 	.word	0x0002b258
   23b14:	0002b26f 	.word	0x0002b26f
   23b18:	200007b0 	.word	0x200007b0

00023b1c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   23b1c:	b570      	push	{r4, r5, r6, lr}
   23b1e:	4604      	mov	r4, r0
   23b20:	460d      	mov	r5, r1
	__asm__ volatile(
   23b22:	f04f 0340 	mov.w	r3, #64	; 0x40
   23b26:	f3ef 8611 	mrs	r6, BASEPRI
   23b2a:	f383 8812 	msr	BASEPRI_MAX, r3
   23b2e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23b32:	4820      	ldr	r0, [pc, #128]	; (23bb4 <z_impl_k_poll_signal_raise+0x98>)
   23b34:	f7fc fef0 	bl	20918 <z_spin_lock_valid>
   23b38:	b968      	cbnz	r0, 23b56 <z_impl_k_poll_signal_raise+0x3a>
   23b3a:	4a1f      	ldr	r2, [pc, #124]	; (23bb8 <z_impl_k_poll_signal_raise+0x9c>)
   23b3c:	491f      	ldr	r1, [pc, #124]	; (23bbc <z_impl_k_poll_signal_raise+0xa0>)
   23b3e:	4820      	ldr	r0, [pc, #128]	; (23bc0 <z_impl_k_poll_signal_raise+0xa4>)
   23b40:	2394      	movs	r3, #148	; 0x94
   23b42:	f003 fb4b 	bl	271dc <assert_print>
   23b46:	491b      	ldr	r1, [pc, #108]	; (23bb4 <z_impl_k_poll_signal_raise+0x98>)
   23b48:	481e      	ldr	r0, [pc, #120]	; (23bc4 <z_impl_k_poll_signal_raise+0xa8>)
   23b4a:	f003 fb47 	bl	271dc <assert_print>
   23b4e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23b50:	4819      	ldr	r0, [pc, #100]	; (23bb8 <z_impl_k_poll_signal_raise+0x9c>)
   23b52:	f003 fb3c 	bl	271ce <assert_post_action>
	z_spin_lock_set_owner(l);
   23b56:	4817      	ldr	r0, [pc, #92]	; (23bb4 <z_impl_k_poll_signal_raise+0x98>)
   23b58:	f7fc fefc 	bl	20954 <z_spin_lock_set_owner>
	return list->head == list;
   23b5c:	6820      	ldr	r0, [r4, #0]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   23b5e:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
   23b60:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   23b62:	4284      	cmp	r4, r0
   23b64:	60a1      	str	r1, [r4, #8]
   23b66:	d10f      	bne.n	23b88 <z_impl_k_poll_signal_raise+0x6c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23b68:	4812      	ldr	r0, [pc, #72]	; (23bb4 <z_impl_k_poll_signal_raise+0x98>)
   23b6a:	f7fc fee3 	bl	20934 <z_spin_unlock_valid>
   23b6e:	b9d8      	cbnz	r0, 23ba8 <z_impl_k_poll_signal_raise+0x8c>
   23b70:	4a11      	ldr	r2, [pc, #68]	; (23bb8 <z_impl_k_poll_signal_raise+0x9c>)
   23b72:	4915      	ldr	r1, [pc, #84]	; (23bc8 <z_impl_k_poll_signal_raise+0xac>)
   23b74:	4812      	ldr	r0, [pc, #72]	; (23bc0 <z_impl_k_poll_signal_raise+0xa4>)
   23b76:	23c2      	movs	r3, #194	; 0xc2
   23b78:	f003 fb30 	bl	271dc <assert_print>
   23b7c:	490d      	ldr	r1, [pc, #52]	; (23bb4 <z_impl_k_poll_signal_raise+0x98>)
   23b7e:	4813      	ldr	r0, [pc, #76]	; (23bcc <z_impl_k_poll_signal_raise+0xb0>)
   23b80:	f003 fb2c 	bl	271dc <assert_print>
   23b84:	21c2      	movs	r1, #194	; 0xc2
   23b86:	e7e3      	b.n	23b50 <z_impl_k_poll_signal_raise+0x34>
	sys_dnode_t *const next = node->next;
   23b88:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   23b8c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   23b8e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   23b90:	2300      	movs	r3, #0
	node->prev = NULL;
   23b92:	e9c0 3300 	strd	r3, r3, [r0]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   23b96:	f005 ffb7 	bl	29b08 <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   23b9a:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   23b9c:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   23b9e:	4805      	ldr	r0, [pc, #20]	; (23bb4 <z_impl_k_poll_signal_raise+0x98>)
   23ba0:	f7fe f8f8 	bl	21d94 <z_reschedule>
	return rc;
}
   23ba4:	4620      	mov	r0, r4
   23ba6:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   23ba8:	f386 8811 	msr	BASEPRI, r6
   23bac:	f3bf 8f6f 	isb	sy
		return 0;
   23bb0:	2400      	movs	r4, #0
   23bb2:	e7f7      	b.n	23ba4 <z_impl_k_poll_signal_raise+0x88>
   23bb4:	2000382c 	.word	0x2000382c
   23bb8:	0002b22b 	.word	0x0002b22b
   23bbc:	0002b284 	.word	0x0002b284
   23bc0:	0002ae37 	.word	0x0002ae37
   23bc4:	0002b299 	.word	0x0002b299
   23bc8:	0002b258 	.word	0x0002b258
   23bcc:	0002b26f 	.word	0x0002b26f

00023bd0 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   23bd0:	3204      	adds	r2, #4
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   23bd2:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   23bd6:	4606      	mov	r6, r0
   23bd8:	460d      	mov	r5, r1
   23bda:	d220      	bcs.n	23c1e <z_heap_aligned_alloc+0x4e>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   23bdc:	f04f 0800 	mov.w	r8, #0
   23be0:	f04f 0900 	mov.w	r9, #0
   23be4:	e9cd 8900 	strd	r8, r9, [sp]
   23be8:	f041 0104 	orr.w	r1, r1, #4
   23bec:	f7fc fb8c 	bl	20308 <k_heap_aligned_alloc>
	if (mem == NULL) {
   23bf0:	4604      	mov	r4, r0
   23bf2:	b1a0      	cbz	r0, 23c1e <z_heap_aligned_alloc+0x4e>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
   23bf4:	f844 6b04 	str.w	r6, [r4], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   23bf8:	b195      	cbz	r5, 23c20 <z_heap_aligned_alloc+0x50>
   23bfa:	1e6b      	subs	r3, r5, #1
   23bfc:	421c      	tst	r4, r3
   23bfe:	d00f      	beq.n	23c20 <z_heap_aligned_alloc+0x50>
   23c00:	4a09      	ldr	r2, [pc, #36]	; (23c28 <z_heap_aligned_alloc+0x58>)
   23c02:	490a      	ldr	r1, [pc, #40]	; (23c2c <z_heap_aligned_alloc+0x5c>)
   23c04:	480a      	ldr	r0, [pc, #40]	; (23c30 <z_heap_aligned_alloc+0x60>)
   23c06:	2325      	movs	r3, #37	; 0x25
   23c08:	f003 fae8 	bl	271dc <assert_print>
   23c0c:	4809      	ldr	r0, [pc, #36]	; (23c34 <z_heap_aligned_alloc+0x64>)
   23c0e:	4621      	mov	r1, r4
   23c10:	462a      	mov	r2, r5
   23c12:	f003 fae3 	bl	271dc <assert_print>
   23c16:	4804      	ldr	r0, [pc, #16]	; (23c28 <z_heap_aligned_alloc+0x58>)
   23c18:	2125      	movs	r1, #37	; 0x25
   23c1a:	f003 fad8 	bl	271ce <assert_post_action>
		return NULL;
   23c1e:	2400      	movs	r4, #0
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   23c20:	4620      	mov	r0, r4
   23c22:	b002      	add	sp, #8
   23c24:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   23c28:	0002ec52 	.word	0x0002ec52
   23c2c:	0002ec76 	.word	0x0002ec76
   23c30:	0002ae37 	.word	0x0002ae37
   23c34:	0002eca8 	.word	0x0002eca8

00023c38 <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   23c38:	2803      	cmp	r0, #3
{
   23c3a:	b508      	push	{r3, lr}
   23c3c:	460a      	mov	r2, r1
	__ASSERT(align / sizeof(void *) >= 1
   23c3e:	d901      	bls.n	23c44 <k_aligned_alloc+0xc>
   23c40:	0783      	lsls	r3, r0, #30
   23c42:	d00c      	beq.n	23c5e <k_aligned_alloc+0x26>
   23c44:	4910      	ldr	r1, [pc, #64]	; (23c88 <k_aligned_alloc+0x50>)
   23c46:	4a11      	ldr	r2, [pc, #68]	; (23c8c <k_aligned_alloc+0x54>)
   23c48:	4811      	ldr	r0, [pc, #68]	; (23c90 <k_aligned_alloc+0x58>)
   23c4a:	2342      	movs	r3, #66	; 0x42
   23c4c:	f003 fac6 	bl	271dc <assert_print>
   23c50:	4810      	ldr	r0, [pc, #64]	; (23c94 <k_aligned_alloc+0x5c>)
   23c52:	f003 fac3 	bl	271dc <assert_print>
   23c56:	2142      	movs	r1, #66	; 0x42
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   23c58:	480c      	ldr	r0, [pc, #48]	; (23c8c <k_aligned_alloc+0x54>)
   23c5a:	f003 fab8 	bl	271ce <assert_post_action>
   23c5e:	1e43      	subs	r3, r0, #1
   23c60:	4203      	tst	r3, r0
   23c62:	d00a      	beq.n	23c7a <k_aligned_alloc+0x42>
   23c64:	490c      	ldr	r1, [pc, #48]	; (23c98 <k_aligned_alloc+0x60>)
   23c66:	4a09      	ldr	r2, [pc, #36]	; (23c8c <k_aligned_alloc+0x54>)
   23c68:	4809      	ldr	r0, [pc, #36]	; (23c90 <k_aligned_alloc+0x58>)
   23c6a:	2346      	movs	r3, #70	; 0x46
   23c6c:	f003 fab6 	bl	271dc <assert_print>
   23c70:	480a      	ldr	r0, [pc, #40]	; (23c9c <k_aligned_alloc+0x64>)
   23c72:	f003 fab3 	bl	271dc <assert_print>
   23c76:	2146      	movs	r1, #70	; 0x46
   23c78:	e7ee      	b.n	23c58 <k_aligned_alloc+0x20>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   23c7a:	4601      	mov	r1, r0

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   23c7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   23c80:	4807      	ldr	r0, [pc, #28]	; (23ca0 <k_aligned_alloc+0x68>)
   23c82:	f7ff bfa5 	b.w	23bd0 <z_heap_aligned_alloc>
   23c86:	bf00      	nop
   23c88:	0002ecd0 	.word	0x0002ecd0
   23c8c:	0002ec52 	.word	0x0002ec52
   23c90:	0002ae37 	.word	0x0002ae37
   23c94:	0002ed0d 	.word	0x0002ed0d
   23c98:	0002b095 	.word	0x0002b095
   23c9c:	0002b0b0 	.word	0x0002b0b0
   23ca0:	200009b0 	.word	0x200009b0

00023ca4 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   23ca4:	4b01      	ldr	r3, [pc, #4]	; (23cac <k_thread_system_pool_assign+0x8>)
   23ca6:	6743      	str	r3, [r0, #116]	; 0x74
}
   23ca8:	4770      	bx	lr
   23caa:	bf00      	nop
   23cac:	200009b0 	.word	0x200009b0

00023cb0 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   23cb0:	b538      	push	{r3, r4, r5, lr}
   23cb2:	4604      	mov	r4, r0
   23cb4:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   23cb6:	f005 fda2 	bl	297fe <k_is_in_isr>
   23cba:	b920      	cbnz	r0, 23cc6 <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   23cbc:	4b06      	ldr	r3, [pc, #24]	; (23cd8 <z_thread_aligned_alloc+0x28>)
   23cbe:	689b      	ldr	r3, [r3, #8]
   23cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   23cc2:	b90b      	cbnz	r3, 23cc8 <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   23cc4:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   23cc6:	4b05      	ldr	r3, [pc, #20]	; (23cdc <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   23cc8:	462a      	mov	r2, r5
   23cca:	4621      	mov	r1, r4
   23ccc:	4618      	mov	r0, r3
}
   23cce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   23cd2:	f7ff bf7d 	b.w	23bd0 <z_heap_aligned_alloc>
   23cd6:	bf00      	nop
   23cd8:	200037d0 	.word	0x200037d0
   23cdc:	200009b0 	.word	0x200009b0

00023ce0 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   23ce0:	4801      	ldr	r0, [pc, #4]	; (23ce8 <boot_banner+0x8>)
   23ce2:	f003 b844 	b.w	26d6e <printk>
   23ce6:	bf00      	nop
   23ce8:	0002ed3a 	.word	0x0002ed3a

00023cec <ocrypto_ecdh_p256_public_key>:
   23cec:	b530      	push	{r4, r5, lr}
   23cee:	b099      	sub	sp, #100	; 0x64
   23cf0:	4605      	mov	r5, r0
   23cf2:	4668      	mov	r0, sp
   23cf4:	f000 f828 	bl	23d48 <ocrypto_sc_p256_from32bytes>
   23cf8:	4669      	mov	r1, sp
   23cfa:	4604      	mov	r4, r0
   23cfc:	a808      	add	r0, sp, #32
   23cfe:	f000 fa53 	bl	241a8 <ocrypto_curve_p256_scalarmult_base>
   23d02:	a908      	add	r1, sp, #32
   23d04:	4304      	orrs	r4, r0
   23d06:	4628      	mov	r0, r5
   23d08:	f000 f98a 	bl	24020 <ocrypto_curve_p256_to64bytes>
   23d0c:	4620      	mov	r0, r4
   23d0e:	b019      	add	sp, #100	; 0x64
   23d10:	bd30      	pop	{r4, r5, pc}
   23d12:	bf00      	nop

00023d14 <ocrypto_ecdh_p256_common_secret>:
   23d14:	b570      	push	{r4, r5, r6, lr}
   23d16:	b098      	sub	sp, #96	; 0x60
   23d18:	4605      	mov	r5, r0
   23d1a:	4668      	mov	r0, sp
   23d1c:	4616      	mov	r6, r2
   23d1e:	f000 f813 	bl	23d48 <ocrypto_sc_p256_from32bytes>
   23d22:	4631      	mov	r1, r6
   23d24:	4604      	mov	r4, r0
   23d26:	a808      	add	r0, sp, #32
   23d28:	f000 f946 	bl	23fb8 <ocrypto_curve_p256_from64bytes>
   23d2c:	a908      	add	r1, sp, #32
   23d2e:	466a      	mov	r2, sp
   23d30:	4304      	orrs	r4, r0
   23d32:	4608      	mov	r0, r1
   23d34:	f000 f982 	bl	2403c <ocrypto_curve_p256_scalarmult>
   23d38:	a908      	add	r1, sp, #32
   23d3a:	4304      	orrs	r4, r0
   23d3c:	4628      	mov	r0, r5
   23d3e:	f000 f96d 	bl	2401c <ocrypto_curve_p256_to32bytes>
   23d42:	4620      	mov	r0, r4
   23d44:	b018      	add	sp, #96	; 0x60
   23d46:	bd70      	pop	{r4, r5, r6, pc}

00023d48 <ocrypto_sc_p256_from32bytes>:
   23d48:	b570      	push	{r4, r5, r6, lr}
   23d4a:	680b      	ldr	r3, [r1, #0]
   23d4c:	4e12      	ldr	r6, [pc, #72]	; (23d98 <ocrypto_sc_p256_from32bytes+0x50>)
   23d4e:	ba1b      	rev	r3, r3
   23d50:	61c3      	str	r3, [r0, #28]
   23d52:	684b      	ldr	r3, [r1, #4]
   23d54:	ba1b      	rev	r3, r3
   23d56:	6183      	str	r3, [r0, #24]
   23d58:	688b      	ldr	r3, [r1, #8]
   23d5a:	ba1b      	rev	r3, r3
   23d5c:	6143      	str	r3, [r0, #20]
   23d5e:	68cb      	ldr	r3, [r1, #12]
   23d60:	ba1b      	rev	r3, r3
   23d62:	6103      	str	r3, [r0, #16]
   23d64:	690b      	ldr	r3, [r1, #16]
   23d66:	ba1b      	rev	r3, r3
   23d68:	60c3      	str	r3, [r0, #12]
   23d6a:	694b      	ldr	r3, [r1, #20]
   23d6c:	ba1b      	rev	r3, r3
   23d6e:	6083      	str	r3, [r0, #8]
   23d70:	698b      	ldr	r3, [r1, #24]
   23d72:	ba1b      	rev	r3, r3
   23d74:	6043      	str	r3, [r0, #4]
   23d76:	69cb      	ldr	r3, [r1, #28]
   23d78:	ba1b      	rev	r3, r3
   23d7a:	4632      	mov	r2, r6
   23d7c:	6003      	str	r3, [r0, #0]
   23d7e:	4601      	mov	r1, r0
   23d80:	4604      	mov	r4, r0
   23d82:	f7dc fdc5 	bl	910 <ocrypto_bigint_sub256>
   23d86:	4631      	mov	r1, r6
   23d88:	4605      	mov	r5, r0
   23d8a:	4602      	mov	r2, r0
   23d8c:	4620      	mov	r0, r4
   23d8e:	f7dc fddf 	bl	950 <ocrypto_bigint_cadd256>
   23d92:	1e68      	subs	r0, r5, #1
   23d94:	bd70      	pop	{r4, r5, r6, pc}
   23d96:	bf00      	nop
   23d98:	0002a784 	.word	0x0002a784

00023d9c <p256_zdblu>:
   23d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23da0:	b088      	sub	sp, #32
   23da2:	460c      	mov	r4, r1
   23da4:	4606      	mov	r6, r0
   23da6:	f102 0120 	add.w	r1, r2, #32
   23daa:	4668      	mov	r0, sp
   23dac:	f106 0720 	add.w	r7, r6, #32
   23db0:	4690      	mov	r8, r2
   23db2:	f7dd f8b3 	bl	f1c <ocrypto_mod_p256_sqr>
   23db6:	466a      	mov	r2, sp
   23db8:	4669      	mov	r1, sp
   23dba:	4668      	mov	r0, sp
   23dbc:	f7dc ffd0 	bl	d60 <ocrypto_mod_p256_add>
   23dc0:	4669      	mov	r1, sp
   23dc2:	4638      	mov	r0, r7
   23dc4:	f7dd f8aa 	bl	f1c <ocrypto_mod_p256_sqr>
   23dc8:	463a      	mov	r2, r7
   23dca:	4639      	mov	r1, r7
   23dcc:	4638      	mov	r0, r7
   23dce:	f104 0520 	add.w	r5, r4, #32
   23dd2:	f7dc ffc5 	bl	d60 <ocrypto_mod_p256_add>
   23dd6:	466a      	mov	r2, sp
   23dd8:	4669      	mov	r1, sp
   23dda:	4668      	mov	r0, sp
   23ddc:	f7dc ffc0 	bl	d60 <ocrypto_mod_p256_add>
   23de0:	4641      	mov	r1, r8
   23de2:	4628      	mov	r0, r5
   23de4:	f7dd f89a 	bl	f1c <ocrypto_mod_p256_sqr>
   23de8:	466a      	mov	r2, sp
   23dea:	4641      	mov	r1, r8
   23dec:	4630      	mov	r0, r6
   23dee:	f7dd f87d 	bl	eec <ocrypto_mod_p256_mul>
   23df2:	462a      	mov	r2, r5
   23df4:	4629      	mov	r1, r5
   23df6:	4668      	mov	r0, sp
   23df8:	f7dc ffb2 	bl	d60 <ocrypto_mod_p256_add>
   23dfc:	462a      	mov	r2, r5
   23dfe:	4669      	mov	r1, sp
   23e00:	4668      	mov	r0, sp
   23e02:	f7dc ffad 	bl	d60 <ocrypto_mod_p256_add>
   23e06:	4a12      	ldr	r2, [pc, #72]	; (23e50 <p256_zdblu+0xb4>)
   23e08:	4669      	mov	r1, sp
   23e0a:	4668      	mov	r0, sp
   23e0c:	f7dc ffa8 	bl	d60 <ocrypto_mod_p256_add>
   23e10:	4669      	mov	r1, sp
   23e12:	4620      	mov	r0, r4
   23e14:	f7dd f882 	bl	f1c <ocrypto_mod_p256_sqr>
   23e18:	4632      	mov	r2, r6
   23e1a:	4621      	mov	r1, r4
   23e1c:	4620      	mov	r0, r4
   23e1e:	f7dc ffdd 	bl	ddc <ocrypto_mod_p256_sub>
   23e22:	4632      	mov	r2, r6
   23e24:	4621      	mov	r1, r4
   23e26:	4620      	mov	r0, r4
   23e28:	f7dc ffd8 	bl	ddc <ocrypto_mod_p256_sub>
   23e2c:	4622      	mov	r2, r4
   23e2e:	4631      	mov	r1, r6
   23e30:	4628      	mov	r0, r5
   23e32:	f7dc ffd3 	bl	ddc <ocrypto_mod_p256_sub>
   23e36:	466a      	mov	r2, sp
   23e38:	4629      	mov	r1, r5
   23e3a:	4628      	mov	r0, r5
   23e3c:	f7dd f856 	bl	eec <ocrypto_mod_p256_mul>
   23e40:	463a      	mov	r2, r7
   23e42:	4629      	mov	r1, r5
   23e44:	4628      	mov	r0, r5
   23e46:	f7dc ffc9 	bl	ddc <ocrypto_mod_p256_sub>
   23e4a:	b008      	add	sp, #32
   23e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23e50:	0002a864 	.word	0x0002a864

00023e54 <p256_zaddc>:
   23e54:	b5f0      	push	{r4, r5, r6, r7, lr}
   23e56:	b099      	sub	sp, #100	; 0x64
   23e58:	4604      	mov	r4, r0
   23e5a:	460d      	mov	r5, r1
   23e5c:	460a      	mov	r2, r1
   23e5e:	4601      	mov	r1, r0
   23e60:	4668      	mov	r0, sp
   23e62:	f7dc ffbb 	bl	ddc <ocrypto_mod_p256_sub>
   23e66:	4669      	mov	r1, sp
   23e68:	4668      	mov	r0, sp
   23e6a:	f7dd f857 	bl	f1c <ocrypto_mod_p256_sqr>
   23e6e:	466a      	mov	r2, sp
   23e70:	4621      	mov	r1, r4
   23e72:	a808      	add	r0, sp, #32
   23e74:	f105 0620 	add.w	r6, r5, #32
   23e78:	f104 0720 	add.w	r7, r4, #32
   23e7c:	f7dd f836 	bl	eec <ocrypto_mod_p256_mul>
   23e80:	466a      	mov	r2, sp
   23e82:	4629      	mov	r1, r5
   23e84:	4668      	mov	r0, sp
   23e86:	f7dd f831 	bl	eec <ocrypto_mod_p256_mul>
   23e8a:	4632      	mov	r2, r6
   23e8c:	4639      	mov	r1, r7
   23e8e:	a810      	add	r0, sp, #64	; 0x40
   23e90:	f7dc ff66 	bl	d60 <ocrypto_mod_p256_add>
   23e94:	4632      	mov	r2, r6
   23e96:	4639      	mov	r1, r7
   23e98:	4630      	mov	r0, r6
   23e9a:	f7dc ff9f 	bl	ddc <ocrypto_mod_p256_sub>
   23e9e:	4631      	mov	r1, r6
   23ea0:	4628      	mov	r0, r5
   23ea2:	f7dd f83b 	bl	f1c <ocrypto_mod_p256_sqr>
   23ea6:	466a      	mov	r2, sp
   23ea8:	a908      	add	r1, sp, #32
   23eaa:	4620      	mov	r0, r4
   23eac:	f7dc ff58 	bl	d60 <ocrypto_mod_p256_add>
   23eb0:	4622      	mov	r2, r4
   23eb2:	4629      	mov	r1, r5
   23eb4:	4628      	mov	r0, r5
   23eb6:	f7dc ff91 	bl	ddc <ocrypto_mod_p256_sub>
   23eba:	466a      	mov	r2, sp
   23ebc:	a908      	add	r1, sp, #32
   23ebe:	4668      	mov	r0, sp
   23ec0:	f7dc ff8c 	bl	ddc <ocrypto_mod_p256_sub>
   23ec4:	466a      	mov	r2, sp
   23ec6:	4639      	mov	r1, r7
   23ec8:	4638      	mov	r0, r7
   23eca:	f7dd f80f 	bl	eec <ocrypto_mod_p256_mul>
   23ece:	462a      	mov	r2, r5
   23ed0:	a908      	add	r1, sp, #32
   23ed2:	4668      	mov	r0, sp
   23ed4:	f7dc ff82 	bl	ddc <ocrypto_mod_p256_sub>
   23ed8:	466a      	mov	r2, sp
   23eda:	4631      	mov	r1, r6
   23edc:	4630      	mov	r0, r6
   23ede:	f7dd f805 	bl	eec <ocrypto_mod_p256_mul>
   23ee2:	463a      	mov	r2, r7
   23ee4:	4631      	mov	r1, r6
   23ee6:	4630      	mov	r0, r6
   23ee8:	f7dc ff78 	bl	ddc <ocrypto_mod_p256_sub>
   23eec:	a910      	add	r1, sp, #64	; 0x40
   23eee:	4668      	mov	r0, sp
   23ef0:	f7dd f814 	bl	f1c <ocrypto_mod_p256_sqr>
   23ef4:	4622      	mov	r2, r4
   23ef6:	4669      	mov	r1, sp
   23ef8:	4620      	mov	r0, r4
   23efa:	f7dc ff6f 	bl	ddc <ocrypto_mod_p256_sub>
   23efe:	a908      	add	r1, sp, #32
   23f00:	4622      	mov	r2, r4
   23f02:	4608      	mov	r0, r1
   23f04:	f7dc ff6a 	bl	ddc <ocrypto_mod_p256_sub>
   23f08:	a910      	add	r1, sp, #64	; 0x40
   23f0a:	aa08      	add	r2, sp, #32
   23f0c:	4608      	mov	r0, r1
   23f0e:	f7dc ffed 	bl	eec <ocrypto_mod_p256_mul>
   23f12:	463a      	mov	r2, r7
   23f14:	a910      	add	r1, sp, #64	; 0x40
   23f16:	4638      	mov	r0, r7
   23f18:	f7dc ff60 	bl	ddc <ocrypto_mod_p256_sub>
   23f1c:	b019      	add	sp, #100	; 0x64
   23f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023f20 <p256_zaddu>:
   23f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23f24:	b088      	sub	sp, #32
   23f26:	460c      	mov	r4, r1
   23f28:	4605      	mov	r5, r0
   23f2a:	4690      	mov	r8, r2
   23f2c:	460a      	mov	r2, r1
   23f2e:	4601      	mov	r1, r0
   23f30:	4668      	mov	r0, sp
   23f32:	f7dc ff53 	bl	ddc <ocrypto_mod_p256_sub>
   23f36:	4669      	mov	r1, sp
   23f38:	4668      	mov	r0, sp
   23f3a:	f7dc ffef 	bl	f1c <ocrypto_mod_p256_sqr>
   23f3e:	466a      	mov	r2, sp
   23f40:	4629      	mov	r1, r5
   23f42:	4628      	mov	r0, r5
   23f44:	f104 0620 	add.w	r6, r4, #32
   23f48:	f7dc ffd0 	bl	eec <ocrypto_mod_p256_mul>
   23f4c:	f105 0720 	add.w	r7, r5, #32
   23f50:	466a      	mov	r2, sp
   23f52:	4621      	mov	r1, r4
   23f54:	4668      	mov	r0, sp
   23f56:	f7dc ffc9 	bl	eec <ocrypto_mod_p256_mul>
   23f5a:	4632      	mov	r2, r6
   23f5c:	4639      	mov	r1, r7
   23f5e:	4630      	mov	r0, r6
   23f60:	f7dc ff3c 	bl	ddc <ocrypto_mod_p256_sub>
   23f64:	4631      	mov	r1, r6
   23f66:	4620      	mov	r0, r4
   23f68:	f7dc ffd8 	bl	f1c <ocrypto_mod_p256_sqr>
   23f6c:	462a      	mov	r2, r5
   23f6e:	4621      	mov	r1, r4
   23f70:	4620      	mov	r0, r4
   23f72:	f7dc ff33 	bl	ddc <ocrypto_mod_p256_sub>
   23f76:	466a      	mov	r2, sp
   23f78:	4621      	mov	r1, r4
   23f7a:	4620      	mov	r0, r4
   23f7c:	f7dc ff2e 	bl	ddc <ocrypto_mod_p256_sub>
   23f80:	466a      	mov	r2, sp
   23f82:	4629      	mov	r1, r5
   23f84:	4640      	mov	r0, r8
   23f86:	f7dc ff29 	bl	ddc <ocrypto_mod_p256_sub>
   23f8a:	4642      	mov	r2, r8
   23f8c:	4639      	mov	r1, r7
   23f8e:	4638      	mov	r0, r7
   23f90:	f7dc ffac 	bl	eec <ocrypto_mod_p256_mul>
   23f94:	4622      	mov	r2, r4
   23f96:	4629      	mov	r1, r5
   23f98:	4668      	mov	r0, sp
   23f9a:	f7dc ff1f 	bl	ddc <ocrypto_mod_p256_sub>
   23f9e:	466a      	mov	r2, sp
   23fa0:	4631      	mov	r1, r6
   23fa2:	4630      	mov	r0, r6
   23fa4:	f7dc ffa2 	bl	eec <ocrypto_mod_p256_mul>
   23fa8:	463a      	mov	r2, r7
   23faa:	4631      	mov	r1, r6
   23fac:	4630      	mov	r0, r6
   23fae:	f7dc ff15 	bl	ddc <ocrypto_mod_p256_sub>
   23fb2:	b008      	add	sp, #32
   23fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023fb8 <ocrypto_curve_p256_from64bytes>:
   23fb8:	b570      	push	{r4, r5, r6, lr}
   23fba:	f100 0620 	add.w	r6, r0, #32
   23fbe:	b090      	sub	sp, #64	; 0x40
   23fc0:	460d      	mov	r5, r1
   23fc2:	4604      	mov	r4, r0
   23fc4:	f000 f914 	bl	241f0 <ocrypto_mod_p256_from_bytes>
   23fc8:	f105 0120 	add.w	r1, r5, #32
   23fcc:	4630      	mov	r0, r6
   23fce:	f000 f90f 	bl	241f0 <ocrypto_mod_p256_from_bytes>
   23fd2:	4621      	mov	r1, r4
   23fd4:	a808      	add	r0, sp, #32
   23fd6:	f7dc ffa1 	bl	f1c <ocrypto_mod_p256_sqr>
   23fda:	a908      	add	r1, sp, #32
   23fdc:	4608      	mov	r0, r1
   23fde:	4a0d      	ldr	r2, [pc, #52]	; (24014 <ocrypto_curve_p256_from64bytes+0x5c>)
   23fe0:	f7dc febe 	bl	d60 <ocrypto_mod_p256_add>
   23fe4:	a908      	add	r1, sp, #32
   23fe6:	4622      	mov	r2, r4
   23fe8:	4608      	mov	r0, r1
   23fea:	f7dc ff7f 	bl	eec <ocrypto_mod_p256_mul>
   23fee:	a908      	add	r1, sp, #32
   23ff0:	4a09      	ldr	r2, [pc, #36]	; (24018 <ocrypto_curve_p256_from64bytes+0x60>)
   23ff2:	4608      	mov	r0, r1
   23ff4:	f7dc feb4 	bl	d60 <ocrypto_mod_p256_add>
   23ff8:	4631      	mov	r1, r6
   23ffa:	4668      	mov	r0, sp
   23ffc:	f7dc ff8e 	bl	f1c <ocrypto_mod_p256_sqr>
   24000:	2220      	movs	r2, #32
   24002:	4669      	mov	r1, sp
   24004:	eb0d 0002 	add.w	r0, sp, r2
   24008:	f7dc fe7c 	bl	d04 <ocrypto_constant_time_equal>
   2400c:	3801      	subs	r0, #1
   2400e:	b010      	add	sp, #64	; 0x40
   24010:	bd70      	pop	{r4, r5, r6, pc}
   24012:	bf00      	nop
   24014:	0002a864 	.word	0x0002a864
   24018:	0002a844 	.word	0x0002a844

0002401c <ocrypto_curve_p256_to32bytes>:
   2401c:	f000 b902 	b.w	24224 <ocrypto_mod_p256_to_bytes>

00024020 <ocrypto_curve_p256_to64bytes>:
   24020:	b538      	push	{r3, r4, r5, lr}
   24022:	4604      	mov	r4, r0
   24024:	460d      	mov	r5, r1
   24026:	f000 f8fd 	bl	24224 <ocrypto_mod_p256_to_bytes>
   2402a:	f105 0120 	add.w	r1, r5, #32
   2402e:	f104 0020 	add.w	r0, r4, #32
   24032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   24036:	f000 b8f5 	b.w	24224 <ocrypto_mod_p256_to_bytes>
   2403a:	bf00      	nop

0002403c <ocrypto_curve_p256_scalarmult>:
   2403c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24040:	4613      	mov	r3, r2
   24042:	b0b8      	sub	sp, #224	; 0xe0
   24044:	4a54      	ldr	r2, [pc, #336]	; (24198 <ocrypto_curve_p256_scalarmult+0x15c>)
   24046:	4689      	mov	r9, r1
   24048:	4680      	mov	r8, r0
   2404a:	4619      	mov	r1, r3
   2404c:	a810      	add	r0, sp, #64	; 0x40
   2404e:	f7dc fc5f 	bl	910 <ocrypto_bigint_sub256>
   24052:	4952      	ldr	r1, [pc, #328]	; (2419c <ocrypto_curve_p256_scalarmult+0x160>)
   24054:	4602      	mov	r2, r0
   24056:	a810      	add	r0, sp, #64	; 0x40
   24058:	f7dc fc7a 	bl	950 <ocrypto_bigint_cadd256>
   2405c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   2405e:	494e      	ldr	r1, [pc, #312]	; (24198 <ocrypto_curve_p256_scalarmult+0x15c>)
   24060:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   24064:	4607      	mov	r7, r0
   24066:	f1c6 0201 	rsb	r2, r6, #1
   2406a:	a810      	add	r0, sp, #64	; 0x40
   2406c:	f7dc fc70 	bl	950 <ocrypto_bigint_cadd256>
   24070:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   24072:	464a      	mov	r2, r9
   24074:	ea6f 0a03 	mvn.w	sl, r3
   24078:	a928      	add	r1, sp, #160	; 0xa0
   2407a:	a818      	add	r0, sp, #96	; 0x60
   2407c:	f7ff fe8e 	bl	23d9c <p256_zdblu>
   24080:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   24084:	a920      	add	r1, sp, #128	; 0x80
   24086:	f1ca 0201 	rsb	r2, sl, #1
   2408a:	4608      	mov	r0, r1
   2408c:	f000 f892 	bl	241b4 <ocrypto_mod_p256_cneg>
   24090:	f1c7 0701 	rsb	r7, r7, #1
   24094:	24fe      	movs	r4, #254	; 0xfe
   24096:	466a      	mov	r2, sp
   24098:	a918      	add	r1, sp, #96	; 0x60
   2409a:	a828      	add	r0, sp, #160	; 0xa0
   2409c:	f7ff ff40 	bl	23f20 <p256_zaddu>
   240a0:	1163      	asrs	r3, r4, #5
   240a2:	aa38      	add	r2, sp, #224	; 0xe0
   240a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   240a8:	f004 021f 	and.w	r2, r4, #31
   240ac:	f853 3ca0 	ldr.w	r3, [r3, #-160]
   240b0:	40d3      	lsrs	r3, r2
   240b2:	4655      	mov	r5, sl
   240b4:	f003 0a01 	and.w	sl, r3, #1
   240b8:	ea8a 0505 	eor.w	r5, sl, r5
   240bc:	462a      	mov	r2, r5
   240be:	a928      	add	r1, sp, #160	; 0xa0
   240c0:	a818      	add	r0, sp, #96	; 0x60
   240c2:	f7dc fca1 	bl	a08 <ocrypto_bigint_cswap256>
   240c6:	462a      	mov	r2, r5
   240c8:	a930      	add	r1, sp, #192	; 0xc0
   240ca:	a820      	add	r0, sp, #128	; 0x80
   240cc:	f7dc fc9c 	bl	a08 <ocrypto_bigint_cswap256>
   240d0:	3c01      	subs	r4, #1
   240d2:	a928      	add	r1, sp, #160	; 0xa0
   240d4:	a818      	add	r0, sp, #96	; 0x60
   240d6:	f7ff febd 	bl	23e54 <p256_zaddc>
   240da:	1c63      	adds	r3, r4, #1
   240dc:	d1db      	bne.n	24096 <ocrypto_curve_p256_scalarmult+0x5a>
   240de:	f1ca 0201 	rsb	r2, sl, #1
   240e2:	a920      	add	r1, sp, #128	; 0x80
   240e4:	a808      	add	r0, sp, #32
   240e6:	f000 f865 	bl	241b4 <ocrypto_mod_p256_cneg>
   240ea:	ea86 060a 	eor.w	r6, r6, sl
   240ee:	466a      	mov	r2, sp
   240f0:	a918      	add	r1, sp, #96	; 0x60
   240f2:	a828      	add	r0, sp, #160	; 0xa0
   240f4:	f7ff ff14 	bl	23f20 <p256_zaddu>
   240f8:	a928      	add	r1, sp, #160	; 0xa0
   240fa:	4632      	mov	r2, r6
   240fc:	a818      	add	r0, sp, #96	; 0x60
   240fe:	f7dc fc83 	bl	a08 <ocrypto_bigint_cswap256>
   24102:	4632      	mov	r2, r6
   24104:	a930      	add	r1, sp, #192	; 0xc0
   24106:	a820      	add	r0, sp, #128	; 0x80
   24108:	f7dc fc7e 	bl	a08 <ocrypto_bigint_cswap256>
   2410c:	a908      	add	r1, sp, #32
   2410e:	466a      	mov	r2, sp
   24110:	4608      	mov	r0, r1
   24112:	f7dc feeb 	bl	eec <ocrypto_mod_p256_mul>
   24116:	a908      	add	r1, sp, #32
   24118:	4608      	mov	r0, r1
   2411a:	f000 f89d 	bl	24258 <ocrypto_mod_p256_inv>
   2411e:	a908      	add	r1, sp, #32
   24120:	f108 0420 	add.w	r4, r8, #32
   24124:	f109 0220 	add.w	r2, r9, #32
   24128:	4608      	mov	r0, r1
   2412a:	f7dc fedf 	bl	eec <ocrypto_mod_p256_mul>
   2412e:	a920      	add	r1, sp, #128	; 0x80
   24130:	aa08      	add	r2, sp, #32
   24132:	4620      	mov	r0, r4
   24134:	f7dc feda 	bl	eec <ocrypto_mod_p256_mul>
   24138:	aa08      	add	r2, sp, #32
   2413a:	a918      	add	r1, sp, #96	; 0x60
   2413c:	4668      	mov	r0, sp
   2413e:	f7dc fed5 	bl	eec <ocrypto_mod_p256_mul>
   24142:	4669      	mov	r1, sp
   24144:	4668      	mov	r0, sp
   24146:	f7dc fee9 	bl	f1c <ocrypto_mod_p256_sqr>
   2414a:	aa18      	add	r2, sp, #96	; 0x60
   2414c:	4669      	mov	r1, sp
   2414e:	a808      	add	r0, sp, #32
   24150:	f7dc fecc 	bl	eec <ocrypto_mod_p256_mul>
   24154:	4621      	mov	r1, r4
   24156:	4668      	mov	r0, sp
   24158:	f7dc fee0 	bl	f1c <ocrypto_mod_p256_sqr>
   2415c:	aa08      	add	r2, sp, #32
   2415e:	4669      	mov	r1, sp
   24160:	4610      	mov	r0, r2
   24162:	f7dc fe3b 	bl	ddc <ocrypto_mod_p256_sub>
   24166:	4a0e      	ldr	r2, [pc, #56]	; (241a0 <ocrypto_curve_p256_scalarmult+0x164>)
   24168:	a908      	add	r1, sp, #32
   2416a:	4668      	mov	r0, sp
   2416c:	f7dc fe36 	bl	ddc <ocrypto_mod_p256_sub>
   24170:	4620      	mov	r0, r4
   24172:	2120      	movs	r1, #32
   24174:	f7dc fdda 	bl	d2c <ocrypto_constant_time_is_zero>
   24178:	a908      	add	r1, sp, #32
   2417a:	4602      	mov	r2, r0
   2417c:	4244      	negs	r4, r0
   2417e:	4668      	mov	r0, sp
   24180:	f7dc fc42 	bl	a08 <ocrypto_bigint_cswap256>
   24184:	4640      	mov	r0, r8
   24186:	4a07      	ldr	r2, [pc, #28]	; (241a4 <ocrypto_curve_p256_scalarmult+0x168>)
   24188:	4669      	mov	r1, sp
   2418a:	f7dc feaf 	bl	eec <ocrypto_mod_p256_mul>
   2418e:	433c      	orrs	r4, r7
   24190:	4620      	mov	r0, r4
   24192:	b038      	add	sp, #224	; 0xe0
   24194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24198:	0002a7c4 	.word	0x0002a7c4
   2419c:	0002a7e4 	.word	0x0002a7e4
   241a0:	0002a844 	.word	0x0002a844
   241a4:	0002a7a4 	.word	0x0002a7a4

000241a8 <ocrypto_curve_p256_scalarmult_base>:
   241a8:	460a      	mov	r2, r1
   241aa:	4901      	ldr	r1, [pc, #4]	; (241b0 <ocrypto_curve_p256_scalarmult_base+0x8>)
   241ac:	f7ff bf46 	b.w	2403c <ocrypto_curve_p256_scalarmult>
   241b0:	0002a804 	.word	0x0002a804

000241b4 <ocrypto_mod_p256_cneg>:
   241b4:	b570      	push	{r4, r5, r6, lr}
   241b6:	b088      	sub	sp, #32
   241b8:	4604      	mov	r4, r0
   241ba:	460d      	mov	r5, r1
   241bc:	4616      	mov	r6, r2
   241be:	2100      	movs	r1, #0
   241c0:	2220      	movs	r2, #32
   241c2:	4668      	mov	r0, sp
   241c4:	f003 fc3d 	bl	27a42 <memset>
   241c8:	2300      	movs	r3, #0
   241ca:	4629      	mov	r1, r5
   241cc:	2220      	movs	r2, #32
   241ce:	4620      	mov	r0, r4
   241d0:	9300      	str	r3, [sp, #0]
   241d2:	f003 fc2b 	bl	27a2c <memcpy>
   241d6:	462a      	mov	r2, r5
   241d8:	4669      	mov	r1, sp
   241da:	4668      	mov	r0, sp
   241dc:	f7dc fdfe 	bl	ddc <ocrypto_mod_p256_sub>
   241e0:	4632      	mov	r2, r6
   241e2:	4669      	mov	r1, sp
   241e4:	4620      	mov	r0, r4
   241e6:	f7dc fc0f 	bl	a08 <ocrypto_bigint_cswap256>
   241ea:	b008      	add	sp, #32
   241ec:	bd70      	pop	{r4, r5, r6, pc}
   241ee:	bf00      	nop

000241f0 <ocrypto_mod_p256_from_bytes>:
   241f0:	680b      	ldr	r3, [r1, #0]
   241f2:	ba1b      	rev	r3, r3
   241f4:	61c3      	str	r3, [r0, #28]
   241f6:	684b      	ldr	r3, [r1, #4]
   241f8:	ba1b      	rev	r3, r3
   241fa:	6183      	str	r3, [r0, #24]
   241fc:	688b      	ldr	r3, [r1, #8]
   241fe:	ba1b      	rev	r3, r3
   24200:	6143      	str	r3, [r0, #20]
   24202:	68cb      	ldr	r3, [r1, #12]
   24204:	ba1b      	rev	r3, r3
   24206:	6103      	str	r3, [r0, #16]
   24208:	690b      	ldr	r3, [r1, #16]
   2420a:	ba1b      	rev	r3, r3
   2420c:	60c3      	str	r3, [r0, #12]
   2420e:	694b      	ldr	r3, [r1, #20]
   24210:	ba1b      	rev	r3, r3
   24212:	6083      	str	r3, [r0, #8]
   24214:	698b      	ldr	r3, [r1, #24]
   24216:	ba1b      	rev	r3, r3
   24218:	6043      	str	r3, [r0, #4]
   2421a:	69cb      	ldr	r3, [r1, #28]
   2421c:	ba1b      	rev	r3, r3
   2421e:	6003      	str	r3, [r0, #0]
   24220:	4770      	bx	lr
   24222:	bf00      	nop

00024224 <ocrypto_mod_p256_to_bytes>:
   24224:	69cb      	ldr	r3, [r1, #28]
   24226:	ba1b      	rev	r3, r3
   24228:	6003      	str	r3, [r0, #0]
   2422a:	698b      	ldr	r3, [r1, #24]
   2422c:	ba1b      	rev	r3, r3
   2422e:	6043      	str	r3, [r0, #4]
   24230:	694b      	ldr	r3, [r1, #20]
   24232:	ba1b      	rev	r3, r3
   24234:	6083      	str	r3, [r0, #8]
   24236:	690b      	ldr	r3, [r1, #16]
   24238:	ba1b      	rev	r3, r3
   2423a:	60c3      	str	r3, [r0, #12]
   2423c:	68cb      	ldr	r3, [r1, #12]
   2423e:	ba1b      	rev	r3, r3
   24240:	6103      	str	r3, [r0, #16]
   24242:	688b      	ldr	r3, [r1, #8]
   24244:	ba1b      	rev	r3, r3
   24246:	6143      	str	r3, [r0, #20]
   24248:	684b      	ldr	r3, [r1, #4]
   2424a:	ba1b      	rev	r3, r3
   2424c:	6183      	str	r3, [r0, #24]
   2424e:	680b      	ldr	r3, [r1, #0]
   24250:	ba1b      	rev	r3, r3
   24252:	61c3      	str	r3, [r0, #28]
   24254:	4770      	bx	lr
   24256:	bf00      	nop

00024258 <ocrypto_mod_p256_inv>:
   24258:	b570      	push	{r4, r5, r6, lr}
   2425a:	b098      	sub	sp, #96	; 0x60
   2425c:	460d      	mov	r5, r1
   2425e:	4606      	mov	r6, r0
   24260:	a810      	add	r0, sp, #64	; 0x40
   24262:	f7dc fe5b 	bl	f1c <ocrypto_mod_p256_sqr>
   24266:	462a      	mov	r2, r5
   24268:	a910      	add	r1, sp, #64	; 0x40
   2426a:	4668      	mov	r0, sp
   2426c:	f7dc fe3e 	bl	eec <ocrypto_mod_p256_mul>
   24270:	4669      	mov	r1, sp
   24272:	a810      	add	r0, sp, #64	; 0x40
   24274:	f7dc fe52 	bl	f1c <ocrypto_mod_p256_sqr>
   24278:	a910      	add	r1, sp, #64	; 0x40
   2427a:	4608      	mov	r0, r1
   2427c:	f7dc fe4e 	bl	f1c <ocrypto_mod_p256_sqr>
   24280:	466a      	mov	r2, sp
   24282:	a910      	add	r1, sp, #64	; 0x40
   24284:	a808      	add	r0, sp, #32
   24286:	f7dc fe31 	bl	eec <ocrypto_mod_p256_mul>
   2428a:	a908      	add	r1, sp, #32
   2428c:	a810      	add	r0, sp, #64	; 0x40
   2428e:	f7dc fe45 	bl	f1c <ocrypto_mod_p256_sqr>
   24292:	a910      	add	r1, sp, #64	; 0x40
   24294:	4608      	mov	r0, r1
   24296:	f7dc fe41 	bl	f1c <ocrypto_mod_p256_sqr>
   2429a:	a910      	add	r1, sp, #64	; 0x40
   2429c:	4608      	mov	r0, r1
   2429e:	f7dc fe3d 	bl	f1c <ocrypto_mod_p256_sqr>
   242a2:	a910      	add	r1, sp, #64	; 0x40
   242a4:	4608      	mov	r0, r1
   242a6:	f7dc fe39 	bl	f1c <ocrypto_mod_p256_sqr>
   242aa:	a910      	add	r1, sp, #64	; 0x40
   242ac:	aa08      	add	r2, sp, #32
   242ae:	4608      	mov	r0, r1
   242b0:	f7dc fe1c 	bl	eec <ocrypto_mod_p256_mul>
   242b4:	a910      	add	r1, sp, #64	; 0x40
   242b6:	4608      	mov	r0, r1
   242b8:	f7dc fe30 	bl	f1c <ocrypto_mod_p256_sqr>
   242bc:	a910      	add	r1, sp, #64	; 0x40
   242be:	4608      	mov	r0, r1
   242c0:	f7dc fe2c 	bl	f1c <ocrypto_mod_p256_sqr>
   242c4:	a910      	add	r1, sp, #64	; 0x40
   242c6:	466a      	mov	r2, sp
   242c8:	a808      	add	r0, sp, #32
   242ca:	f7dc fe0f 	bl	eec <ocrypto_mod_p256_mul>
   242ce:	2405      	movs	r4, #5
   242d0:	a908      	add	r1, sp, #32
   242d2:	a810      	add	r0, sp, #64	; 0x40
   242d4:	f7dc fe22 	bl	f1c <ocrypto_mod_p256_sqr>
   242d8:	a910      	add	r1, sp, #64	; 0x40
   242da:	4608      	mov	r0, r1
   242dc:	f7dc fe1e 	bl	f1c <ocrypto_mod_p256_sqr>
   242e0:	3c01      	subs	r4, #1
   242e2:	a910      	add	r1, sp, #64	; 0x40
   242e4:	d1f5      	bne.n	242d2 <ocrypto_mod_p256_inv+0x7a>
   242e6:	aa08      	add	r2, sp, #32
   242e8:	4608      	mov	r0, r1
   242ea:	f7dc fdff 	bl	eec <ocrypto_mod_p256_mul>
   242ee:	2405      	movs	r4, #5
   242f0:	a910      	add	r1, sp, #64	; 0x40
   242f2:	4608      	mov	r0, r1
   242f4:	f7dc fe12 	bl	f1c <ocrypto_mod_p256_sqr>
   242f8:	a910      	add	r1, sp, #64	; 0x40
   242fa:	4608      	mov	r0, r1
   242fc:	f7dc fe0e 	bl	f1c <ocrypto_mod_p256_sqr>
   24300:	3c01      	subs	r4, #1
   24302:	d1f5      	bne.n	242f0 <ocrypto_mod_p256_inv+0x98>
   24304:	a910      	add	r1, sp, #64	; 0x40
   24306:	aa08      	add	r2, sp, #32
   24308:	4608      	mov	r0, r1
   2430a:	f7dc fdef 	bl	eec <ocrypto_mod_p256_mul>
   2430e:	a910      	add	r1, sp, #64	; 0x40
   24310:	a808      	add	r0, sp, #32
   24312:	f7dc fe03 	bl	f1c <ocrypto_mod_p256_sqr>
   24316:	a908      	add	r1, sp, #32
   24318:	4608      	mov	r0, r1
   2431a:	f7dc fdff 	bl	f1c <ocrypto_mod_p256_sqr>
   2431e:	a908      	add	r1, sp, #32
   24320:	466a      	mov	r2, sp
   24322:	4668      	mov	r0, sp
   24324:	f7dc fde2 	bl	eec <ocrypto_mod_p256_mul>
   24328:	2410      	movs	r4, #16
   2432a:	4669      	mov	r1, sp
   2432c:	a810      	add	r0, sp, #64	; 0x40
   2432e:	f7dc fdf5 	bl	f1c <ocrypto_mod_p256_sqr>
   24332:	a910      	add	r1, sp, #64	; 0x40
   24334:	4608      	mov	r0, r1
   24336:	f7dc fdf1 	bl	f1c <ocrypto_mod_p256_sqr>
   2433a:	3c01      	subs	r4, #1
   2433c:	a910      	add	r1, sp, #64	; 0x40
   2433e:	d1f5      	bne.n	2432c <ocrypto_mod_p256_inv+0xd4>
   24340:	462a      	mov	r2, r5
   24342:	4608      	mov	r0, r1
   24344:	f7dc fdd2 	bl	eec <ocrypto_mod_p256_mul>
   24348:	2440      	movs	r4, #64	; 0x40
   2434a:	a910      	add	r1, sp, #64	; 0x40
   2434c:	4608      	mov	r0, r1
   2434e:	f7dc fde5 	bl	f1c <ocrypto_mod_p256_sqr>
   24352:	a910      	add	r1, sp, #64	; 0x40
   24354:	4608      	mov	r0, r1
   24356:	f7dc fde1 	bl	f1c <ocrypto_mod_p256_sqr>
   2435a:	3c01      	subs	r4, #1
   2435c:	d1f5      	bne.n	2434a <ocrypto_mod_p256_inv+0xf2>
   2435e:	a910      	add	r1, sp, #64	; 0x40
   24360:	466a      	mov	r2, sp
   24362:	4608      	mov	r0, r1
   24364:	f7dc fdc2 	bl	eec <ocrypto_mod_p256_mul>
   24368:	2410      	movs	r4, #16
   2436a:	a910      	add	r1, sp, #64	; 0x40
   2436c:	4608      	mov	r0, r1
   2436e:	f7dc fdd5 	bl	f1c <ocrypto_mod_p256_sqr>
   24372:	a910      	add	r1, sp, #64	; 0x40
   24374:	4608      	mov	r0, r1
   24376:	f7dc fdd1 	bl	f1c <ocrypto_mod_p256_sqr>
   2437a:	3c01      	subs	r4, #1
   2437c:	d1f5      	bne.n	2436a <ocrypto_mod_p256_inv+0x112>
   2437e:	a910      	add	r1, sp, #64	; 0x40
   24380:	466a      	mov	r2, sp
   24382:	4608      	mov	r0, r1
   24384:	f7dc fdb2 	bl	eec <ocrypto_mod_p256_mul>
   24388:	2410      	movs	r4, #16
   2438a:	a910      	add	r1, sp, #64	; 0x40
   2438c:	4608      	mov	r0, r1
   2438e:	f7dc fdc5 	bl	f1c <ocrypto_mod_p256_sqr>
   24392:	a910      	add	r1, sp, #64	; 0x40
   24394:	4608      	mov	r0, r1
   24396:	f7dc fdc1 	bl	f1c <ocrypto_mod_p256_sqr>
   2439a:	3c01      	subs	r4, #1
   2439c:	d1f5      	bne.n	2438a <ocrypto_mod_p256_inv+0x132>
   2439e:	a910      	add	r1, sp, #64	; 0x40
   243a0:	aa08      	add	r2, sp, #32
   243a2:	4608      	mov	r0, r1
   243a4:	f7dc fda2 	bl	eec <ocrypto_mod_p256_mul>
   243a8:	462a      	mov	r2, r5
   243aa:	a910      	add	r1, sp, #64	; 0x40
   243ac:	4630      	mov	r0, r6
   243ae:	f7dc fd9d 	bl	eec <ocrypto_mod_p256_mul>
   243b2:	b018      	add	sp, #96	; 0x60
   243b4:	bd70      	pop	{r4, r5, r6, pc}
   243b6:	bf00      	nop

000243b8 <nrf_cc3xx_platform_init>:
   243b8:	b510      	push	{r4, lr}
   243ba:	4c0c      	ldr	r4, [pc, #48]	; (243ec <nrf_cc3xx_platform_init+0x34>)
   243bc:	6823      	ldr	r3, [r4, #0]
   243be:	b113      	cbz	r3, 243c6 <nrf_cc3xx_platform_init+0xe>
   243c0:	4b0b      	ldr	r3, [pc, #44]	; (243f0 <nrf_cc3xx_platform_init+0x38>)
   243c2:	681b      	ldr	r3, [r3, #0]
   243c4:	b92b      	cbnz	r3, 243d2 <nrf_cc3xx_platform_init+0x1a>
   243c6:	f000 fe27 	bl	25018 <CC_LibInit>
   243ca:	b930      	cbnz	r0, 243da <nrf_cc3xx_platform_init+0x22>
   243cc:	4b08      	ldr	r3, [pc, #32]	; (243f0 <nrf_cc3xx_platform_init+0x38>)
   243ce:	2201      	movs	r2, #1
   243d0:	601a      	str	r2, [r3, #0]
   243d2:	2301      	movs	r3, #1
   243d4:	6023      	str	r3, [r4, #0]
   243d6:	2000      	movs	r0, #0
   243d8:	bd10      	pop	{r4, pc}
   243da:	3801      	subs	r0, #1
   243dc:	2806      	cmp	r0, #6
   243de:	d901      	bls.n	243e4 <nrf_cc3xx_platform_init+0x2c>
   243e0:	4804      	ldr	r0, [pc, #16]	; (243f4 <nrf_cc3xx_platform_init+0x3c>)
   243e2:	bd10      	pop	{r4, pc}
   243e4:	4b04      	ldr	r3, [pc, #16]	; (243f8 <nrf_cc3xx_platform_init+0x40>)
   243e6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   243ea:	bd10      	pop	{r4, pc}
   243ec:	20003834 	.word	0x20003834
   243f0:	20003830 	.word	0x20003830
   243f4:	ffff8ffe 	.word	0xffff8ffe
   243f8:	0002a884 	.word	0x0002a884

000243fc <nrf_cc3xx_platform_abort>:
   243fc:	f3bf 8f4f 	dsb	sy
   24400:	4905      	ldr	r1, [pc, #20]	; (24418 <nrf_cc3xx_platform_abort+0x1c>)
   24402:	4b06      	ldr	r3, [pc, #24]	; (2441c <nrf_cc3xx_platform_abort+0x20>)
   24404:	68ca      	ldr	r2, [r1, #12]
   24406:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2440a:	4313      	orrs	r3, r2
   2440c:	60cb      	str	r3, [r1, #12]
   2440e:	f3bf 8f4f 	dsb	sy
   24412:	bf00      	nop
   24414:	e7fd      	b.n	24412 <nrf_cc3xx_platform_abort+0x16>
   24416:	bf00      	nop
   24418:	e000ed00 	.word	0xe000ed00
   2441c:	05fa0004 	.word	0x05fa0004

00024420 <CC_PalAbort>:
   24420:	b410      	push	{r4}
   24422:	4b0a      	ldr	r3, [pc, #40]	; (2444c <CC_PalAbort+0x2c>)
   24424:	490a      	ldr	r1, [pc, #40]	; (24450 <CC_PalAbort+0x30>)
   24426:	4c0b      	ldr	r4, [pc, #44]	; (24454 <CC_PalAbort+0x34>)
   24428:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
   2442c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   24430:	6849      	ldr	r1, [r1, #4]
   24432:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   24436:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   2443a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   2443e:	2300      	movs	r3, #0
   24440:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   24444:	f85d 4b04 	ldr.w	r4, [sp], #4
   24448:	4708      	bx	r1
   2444a:	bf00      	nop
   2444c:	5002b000 	.word	0x5002b000
   24450:	200007b8 	.word	0x200007b8
   24454:	5002a000 	.word	0x5002a000

00024458 <nrf_cc3xx_platform_set_abort>:
   24458:	e9d0 1200 	ldrd	r1, r2, [r0]
   2445c:	4b01      	ldr	r3, [pc, #4]	; (24464 <nrf_cc3xx_platform_set_abort+0xc>)
   2445e:	e9c3 1200 	strd	r1, r2, [r3]
   24462:	4770      	bx	lr
   24464:	200007b8 	.word	0x200007b8

00024468 <nrf_cc3xx_platform_ctr_drbg_init>:
   24468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2446c:	4b13      	ldr	r3, [pc, #76]	; (244bc <nrf_cc3xx_platform_ctr_drbg_init+0x54>)
   2446e:	4e14      	ldr	r6, [pc, #80]	; (244c0 <nrf_cc3xx_platform_ctr_drbg_init+0x58>)
   24470:	2800      	cmp	r0, #0
   24472:	bf14      	ite	ne
   24474:	4604      	movne	r4, r0
   24476:	461c      	moveq	r4, r3
   24478:	b083      	sub	sp, #12
   2447a:	6823      	ldr	r3, [r4, #0]
   2447c:	42b3      	cmp	r3, r6
   2447e:	d019      	beq.n	244b4 <nrf_cc3xx_platform_ctr_drbg_init+0x4c>
   24480:	460d      	mov	r5, r1
   24482:	4620      	mov	r0, r4
   24484:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   24488:	f104 0904 	add.w	r9, r4, #4
   2448c:	4617      	mov	r7, r2
   2448e:	f504 788e 	add.w	r8, r4, #284	; 0x11c
   24492:	f000 f8e5 	bl	24660 <mbedtls_platform_zeroize>
   24496:	4648      	mov	r0, r9
   24498:	f000 fca8 	bl	24dec <cc_mbedtls_entropy_init>
   2449c:	4640      	mov	r0, r8
   2449e:	f000 fad7 	bl	24a50 <cc_mbedtls_ctr_drbg_init>
   244a2:	4908      	ldr	r1, [pc, #32]	; (244c4 <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   244a4:	9700      	str	r7, [sp, #0]
   244a6:	462b      	mov	r3, r5
   244a8:	464a      	mov	r2, r9
   244aa:	4640      	mov	r0, r8
   244ac:	f000 fae6 	bl	24a7c <cc_mbedtls_ctr_drbg_seed>
   244b0:	b908      	cbnz	r0, 244b6 <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   244b2:	6026      	str	r6, [r4, #0]
   244b4:	2000      	movs	r0, #0
   244b6:	b003      	add	sp, #12
   244b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   244bc:	20003838 	.word	0x20003838
   244c0:	5ac9bca5 	.word	0x5ac9bca5
   244c4:	00024e75 	.word	0x00024e75

000244c8 <nrf_cc3xx_platform_ctr_drbg_get>:
   244c8:	b570      	push	{r4, r5, r6, lr}
   244ca:	461d      	mov	r5, r3
   244cc:	4b0c      	ldr	r3, [pc, #48]	; (24500 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   244ce:	2800      	cmp	r0, #0
   244d0:	bf18      	it	ne
   244d2:	4603      	movne	r3, r0
   244d4:	480b      	ldr	r0, [pc, #44]	; (24504 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   244d6:	681e      	ldr	r6, [r3, #0]
   244d8:	4286      	cmp	r6, r0
   244da:	b082      	sub	sp, #8
   244dc:	d10d      	bne.n	244fa <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   244de:	2600      	movs	r6, #0
   244e0:	f503 708e 	add.w	r0, r3, #284	; 0x11c
   244e4:	9600      	str	r6, [sp, #0]
   244e6:	4633      	mov	r3, r6
   244e8:	4614      	mov	r4, r2
   244ea:	f000 fb13 	bl	24b14 <cc_mbedtls_ctr_drbg_random_with_add>
   244ee:	2800      	cmp	r0, #0
   244f0:	bf18      	it	ne
   244f2:	4634      	movne	r4, r6
   244f4:	602c      	str	r4, [r5, #0]
   244f6:	b002      	add	sp, #8
   244f8:	bd70      	pop	{r4, r5, r6, pc}
   244fa:	4803      	ldr	r0, [pc, #12]	; (24508 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   244fc:	e7fb      	b.n	244f6 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   244fe:	bf00      	nop
   24500:	20003838 	.word	0x20003838
   24504:	5ac9bca5 	.word	0x5ac9bca5
   24508:	ffff8fe8 	.word	0xffff8fe8

0002450c <mutex_free>:
   2450c:	b510      	push	{r4, lr}
   2450e:	4604      	mov	r4, r0
   24510:	b150      	cbz	r0, 24528 <mutex_free+0x1c>
   24512:	6863      	ldr	r3, [r4, #4]
   24514:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   24518:	d005      	beq.n	24526 <mutex_free+0x1a>
   2451a:	4a06      	ldr	r2, [pc, #24]	; (24534 <mutex_free+0x28>)
   2451c:	4293      	cmp	r3, r2
   2451e:	d002      	beq.n	24526 <mutex_free+0x1a>
   24520:	2300      	movs	r3, #0
   24522:	6023      	str	r3, [r4, #0]
   24524:	6062      	str	r2, [r4, #4]
   24526:	bd10      	pop	{r4, pc}
   24528:	4b03      	ldr	r3, [pc, #12]	; (24538 <mutex_free+0x2c>)
   2452a:	4804      	ldr	r0, [pc, #16]	; (2453c <mutex_free+0x30>)
   2452c:	685b      	ldr	r3, [r3, #4]
   2452e:	4798      	blx	r3
   24530:	e7ef      	b.n	24512 <mutex_free+0x6>
   24532:	bf00      	nop
   24534:	a95c5f2c 	.word	0xa95c5f2c
   24538:	200007b8 	.word	0x200007b8
   2453c:	0002a8a0 	.word	0x0002a8a0

00024540 <mutex_lock>:
   24540:	b1c8      	cbz	r0, 24576 <mutex_lock+0x36>
   24542:	6843      	ldr	r3, [r0, #4]
   24544:	4a0d      	ldr	r2, [pc, #52]	; (2457c <mutex_lock+0x3c>)
   24546:	4293      	cmp	r3, r2
   24548:	d013      	beq.n	24572 <mutex_lock+0x32>
   2454a:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   2454e:	d00e      	beq.n	2456e <mutex_lock+0x2e>
   24550:	2301      	movs	r3, #1
   24552:	e850 2f00 	ldrex	r2, [r0]
   24556:	4619      	mov	r1, r3
   24558:	e840 1c00 	strex	ip, r1, [r0]
   2455c:	f09c 0f00 	teq	ip, #0
   24560:	d1f7      	bne.n	24552 <mutex_lock+0x12>
   24562:	2a01      	cmp	r2, #1
   24564:	d0f5      	beq.n	24552 <mutex_lock+0x12>
   24566:	f3bf 8f5f 	dmb	sy
   2456a:	2000      	movs	r0, #0
   2456c:	4770      	bx	lr
   2456e:	4804      	ldr	r0, [pc, #16]	; (24580 <mutex_lock+0x40>)
   24570:	4770      	bx	lr
   24572:	4804      	ldr	r0, [pc, #16]	; (24584 <mutex_lock+0x44>)
   24574:	4770      	bx	lr
   24576:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   2457a:	4770      	bx	lr
   2457c:	a95c5f2c 	.word	0xa95c5f2c
   24580:	ffff8fe9 	.word	0xffff8fe9
   24584:	ffff8fea 	.word	0xffff8fea

00024588 <mutex_unlock>:
   24588:	b180      	cbz	r0, 245ac <mutex_unlock+0x24>
   2458a:	6843      	ldr	r3, [r0, #4]
   2458c:	4a09      	ldr	r2, [pc, #36]	; (245b4 <mutex_unlock+0x2c>)
   2458e:	4293      	cmp	r3, r2
   24590:	d00a      	beq.n	245a8 <mutex_unlock+0x20>
   24592:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
   24596:	d005      	beq.n	245a4 <mutex_unlock+0x1c>
   24598:	f3bf 8f5f 	dmb	sy
   2459c:	2300      	movs	r3, #0
   2459e:	6003      	str	r3, [r0, #0]
   245a0:	4618      	mov	r0, r3
   245a2:	4770      	bx	lr
   245a4:	4804      	ldr	r0, [pc, #16]	; (245b8 <mutex_unlock+0x30>)
   245a6:	4770      	bx	lr
   245a8:	4804      	ldr	r0, [pc, #16]	; (245bc <mutex_unlock+0x34>)
   245aa:	4770      	bx	lr
   245ac:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   245b0:	4770      	bx	lr
   245b2:	bf00      	nop
   245b4:	a95c5f2c 	.word	0xa95c5f2c
   245b8:	ffff8fe9 	.word	0xffff8fe9
   245bc:	ffff8fea 	.word	0xffff8fea

000245c0 <mutex_init>:
   245c0:	b510      	push	{r4, lr}
   245c2:	4604      	mov	r4, r0
   245c4:	b120      	cbz	r0, 245d0 <mutex_init+0x10>
   245c6:	4b04      	ldr	r3, [pc, #16]	; (245d8 <mutex_init+0x18>)
   245c8:	6063      	str	r3, [r4, #4]
   245ca:	2200      	movs	r2, #0
   245cc:	6022      	str	r2, [r4, #0]
   245ce:	bd10      	pop	{r4, pc}
   245d0:	4802      	ldr	r0, [pc, #8]	; (245dc <mutex_init+0x1c>)
   245d2:	f7ff ff25 	bl	24420 <CC_PalAbort>
   245d6:	e7f6      	b.n	245c6 <mutex_init+0x6>
   245d8:	3a00003a 	.word	0x3a00003a
   245dc:	0002a8c8 	.word	0x0002a8c8

000245e0 <nrf_cc3xx_platform_set_mutexes>:
   245e0:	b570      	push	{r4, r5, r6, lr}
   245e2:	e9d0 2300 	ldrd	r2, r3, [r0]
   245e6:	4c15      	ldr	r4, [pc, #84]	; (2463c <nrf_cc3xx_platform_set_mutexes+0x5c>)
   245e8:	4d15      	ldr	r5, [pc, #84]	; (24640 <nrf_cc3xx_platform_set_mutexes+0x60>)
   245ea:	6063      	str	r3, [r4, #4]
   245ec:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
   245f0:	e9c4 3002 	strd	r3, r0, [r4, #8]
   245f4:	6022      	str	r2, [r4, #0]
   245f6:	6848      	ldr	r0, [r1, #4]
   245f8:	680e      	ldr	r6, [r1, #0]
   245fa:	4b12      	ldr	r3, [pc, #72]	; (24644 <nrf_cc3xx_platform_set_mutexes+0x64>)
   245fc:	e9c3 6000 	strd	r6, r0, [r3]
   24600:	f8d5 0118 	ldr.w	r0, [r5, #280]	; 0x118
   24604:	688e      	ldr	r6, [r1, #8]
   24606:	609e      	str	r6, [r3, #8]
   24608:	f010 5f68 	tst.w	r0, #973078528	; 0x3a000000
   2460c:	68ce      	ldr	r6, [r1, #12]
   2460e:	6909      	ldr	r1, [r1, #16]
   24610:	60de      	str	r6, [r3, #12]
   24612:	6119      	str	r1, [r3, #16]
   24614:	d010      	beq.n	24638 <nrf_cc3xx_platform_set_mutexes+0x58>
   24616:	490c      	ldr	r1, [pc, #48]	; (24648 <nrf_cc3xx_platform_set_mutexes+0x68>)
   24618:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
   2461c:	2300      	movs	r3, #0
   2461e:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
   24622:	f505 708a 	add.w	r0, r5, #276	; 0x114
   24626:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
   2462a:	4790      	blx	r2
   2462c:	6823      	ldr	r3, [r4, #0]
   2462e:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
   24632:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   24636:	4718      	bx	r3
   24638:	bd70      	pop	{r4, r5, r6, pc}
   2463a:	bf00      	nop
   2463c:	200007d4 	.word	0x200007d4
   24640:	20003838 	.word	0x20003838
   24644:	200007c0 	.word	0x200007c0
   24648:	a95c5f2c 	.word	0xa95c5f2c

0002464c <mbedtls_zeroize_internal>:
   2464c:	b138      	cbz	r0, 2465e <mbedtls_zeroize_internal+0x12>
   2464e:	b131      	cbz	r1, 2465e <mbedtls_zeroize_internal+0x12>
   24650:	4401      	add	r1, r0
   24652:	2200      	movs	r2, #0
   24654:	4603      	mov	r3, r0
   24656:	3001      	adds	r0, #1
   24658:	4281      	cmp	r1, r0
   2465a:	701a      	strb	r2, [r3, #0]
   2465c:	d1fa      	bne.n	24654 <mbedtls_zeroize_internal+0x8>
   2465e:	4770      	bx	lr

00024660 <mbedtls_platform_zeroize>:
   24660:	b138      	cbz	r0, 24672 <mbedtls_platform_zeroize+0x12>
   24662:	b131      	cbz	r1, 24672 <mbedtls_platform_zeroize+0x12>
   24664:	4401      	add	r1, r0
   24666:	2200      	movs	r2, #0
   24668:	4603      	mov	r3, r0
   2466a:	3001      	adds	r0, #1
   2466c:	4288      	cmp	r0, r1
   2466e:	701a      	strb	r2, [r3, #0]
   24670:	d1fa      	bne.n	24668 <mbedtls_platform_zeroize+0x8>
   24672:	4770      	bx	lr

00024674 <block_cipher_df>:
   24674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24678:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   2467c:	b0b5      	sub	sp, #212	; 0xd4
   2467e:	f200 80d7 	bhi.w	24830 <block_cipher_df+0x1bc>
   24682:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 2483c <block_cipher_df+0x1c8>
   24686:	4614      	mov	r4, r2
   24688:	460d      	mov	r5, r1
   2468a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   2468e:	2100      	movs	r1, #0
   24690:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
   24694:	4607      	mov	r7, r0
   24696:	4648      	mov	r0, r9
   24698:	f003 f9d3 	bl	27a42 <memset>
   2469c:	4640      	mov	r0, r8
   2469e:	f001 f951 	bl	25944 <cc_mbedtls_aes_init>
   246a2:	2300      	movs	r3, #0
   246a4:	f8a9 3010 	strh.w	r3, [r9, #16]
   246a8:	ba63      	rev16	r3, r4
   246aa:	f109 0618 	add.w	r6, r9, #24
   246ae:	f8a9 3012 	strh.w	r3, [r9, #18]
   246b2:	2320      	movs	r3, #32
   246b4:	4629      	mov	r1, r5
   246b6:	4622      	mov	r2, r4
   246b8:	f889 3017 	strb.w	r3, [r9, #23]
   246bc:	4630      	mov	r0, r6
   246be:	f003 f9b5 	bl	27a2c <memcpy>
   246c2:	4b5d      	ldr	r3, [pc, #372]	; (24838 <block_cipher_df+0x1c4>)
   246c4:	9307      	str	r3, [sp, #28]
   246c6:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   246ca:	2280      	movs	r2, #128	; 0x80
   246cc:	9308      	str	r3, [sp, #32]
   246ce:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   246d2:	9309      	str	r3, [sp, #36]	; 0x24
   246d4:	5532      	strb	r2, [r6, r4]
   246d6:	f103 3304 	add.w	r3, r3, #67372036	; 0x4040404
   246da:	a907      	add	r1, sp, #28
   246dc:	4640      	mov	r0, r8
   246de:	930a      	str	r3, [sp, #40]	; 0x28
   246e0:	f001 f946 	bl	25970 <cc_mbedtls_aes_setkey_enc>
   246e4:	4682      	mov	sl, r0
   246e6:	2800      	cmp	r0, #0
   246e8:	d17f      	bne.n	247ea <block_cipher_df+0x176>
   246ea:	f104 0319 	add.w	r3, r4, #25
   246ee:	ae0b      	add	r6, sp, #44	; 0x2c
   246f0:	ac0f      	add	r4, sp, #60	; 0x3c
   246f2:	9302      	str	r3, [sp, #8]
   246f4:	9703      	str	r7, [sp, #12]
   246f6:	9601      	str	r6, [sp, #4]
   246f8:	9404      	str	r4, [sp, #16]
   246fa:	9801      	ldr	r0, [sp, #4]
   246fc:	f8df b140 	ldr.w	fp, [pc, #320]	; 24840 <block_cipher_df+0x1cc>
   24700:	2210      	movs	r2, #16
   24702:	2100      	movs	r1, #0
   24704:	f003 f99d 	bl	27a42 <memset>
   24708:	f8dd a008 	ldr.w	sl, [sp, #8]
   2470c:	9405      	str	r4, [sp, #20]
   2470e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24710:	f85b 4c04 	ldr.w	r4, [fp, #-4]
   24714:	f85b 7c0c 	ldr.w	r7, [fp, #-12]
   24718:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2471a:	f85b 0c10 	ldr.w	r0, [fp, #-16]
   2471e:	f85b 5c08 	ldr.w	r5, [fp, #-8]
   24722:	e9dd 620c 	ldrd	r6, r2, [sp, #48]	; 0x30
   24726:	405c      	eors	r4, r3
   24728:	9b01      	ldr	r3, [sp, #4]
   2472a:	407e      	eors	r6, r7
   2472c:	4055      	eors	r5, r2
   2472e:	ea81 0700 	eor.w	r7, r1, r0
   24732:	461a      	mov	r2, r3
   24734:	2101      	movs	r1, #1
   24736:	4640      	mov	r0, r8
   24738:	e9cd 760b 	strd	r7, r6, [sp, #44]	; 0x2c
   2473c:	e9cd 540d 	strd	r5, r4, [sp, #52]	; 0x34
   24740:	f001 f930 	bl	259a4 <cc_mbedtls_aes_crypt_ecb>
   24744:	f1ba 0f10 	cmp.w	sl, #16
   24748:	bf94      	ite	ls
   2474a:	ebaa 0a0a 	subls.w	sl, sl, sl
   2474e:	f1aa 0a10 	subhi.w	sl, sl, #16
   24752:	f10b 0b10 	add.w	fp, fp, #16
   24756:	2800      	cmp	r0, #0
   24758:	d165      	bne.n	24826 <block_cipher_df+0x1b2>
   2475a:	f1ba 0f00 	cmp.w	sl, #0
   2475e:	d1d6      	bne.n	2470e <block_cipher_df+0x9a>
   24760:	9c05      	ldr	r4, [sp, #20]
   24762:	9901      	ldr	r1, [sp, #4]
   24764:	4620      	mov	r0, r4
   24766:	2210      	movs	r2, #16
   24768:	f003 f960 	bl	27a2c <memcpy>
   2476c:	f899 3003 	ldrb.w	r3, [r9, #3]
   24770:	3410      	adds	r4, #16
   24772:	3301      	adds	r3, #1
   24774:	45a0      	cmp	r8, r4
   24776:	f889 3003 	strb.w	r3, [r9, #3]
   2477a:	d1be      	bne.n	246fa <block_cipher_df+0x86>
   2477c:	9c04      	ldr	r4, [sp, #16]
   2477e:	9f03      	ldr	r7, [sp, #12]
   24780:	9e01      	ldr	r6, [sp, #4]
   24782:	2280      	movs	r2, #128	; 0x80
   24784:	4621      	mov	r1, r4
   24786:	4640      	mov	r0, r8
   24788:	f001 f8f2 	bl	25970 <cc_mbedtls_aes_setkey_enc>
   2478c:	4682      	mov	sl, r0
   2478e:	bb70      	cbnz	r0, 247ee <block_cipher_df+0x17a>
   24790:	f107 0920 	add.w	r9, r7, #32
   24794:	463d      	mov	r5, r7
   24796:	ab13      	add	r3, sp, #76	; 0x4c
   24798:	461a      	mov	r2, r3
   2479a:	2101      	movs	r1, #1
   2479c:	4640      	mov	r0, r8
   2479e:	f001 f901 	bl	259a4 <cc_mbedtls_aes_crypt_ecb>
   247a2:	2210      	movs	r2, #16
   247a4:	4682      	mov	sl, r0
   247a6:	a913      	add	r1, sp, #76	; 0x4c
   247a8:	4628      	mov	r0, r5
   247aa:	4415      	add	r5, r2
   247ac:	f1ba 0f00 	cmp.w	sl, #0
   247b0:	d11d      	bne.n	247ee <block_cipher_df+0x17a>
   247b2:	f003 f93b 	bl	27a2c <memcpy>
   247b6:	454d      	cmp	r5, r9
   247b8:	d1ed      	bne.n	24796 <block_cipher_df+0x122>
   247ba:	4640      	mov	r0, r8
   247bc:	f001 f8d2 	bl	25964 <cc_mbedtls_aes_free>
   247c0:	481e      	ldr	r0, [pc, #120]	; (2483c <block_cipher_df+0x1c8>)
   247c2:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   247c6:	f7ff ff4b 	bl	24660 <mbedtls_platform_zeroize>
   247ca:	4620      	mov	r0, r4
   247cc:	2120      	movs	r1, #32
   247ce:	f7ff ff47 	bl	24660 <mbedtls_platform_zeroize>
   247d2:	a807      	add	r0, sp, #28
   247d4:	2110      	movs	r1, #16
   247d6:	f7ff ff43 	bl	24660 <mbedtls_platform_zeroize>
   247da:	4630      	mov	r0, r6
   247dc:	2110      	movs	r1, #16
   247de:	f7ff ff3f 	bl	24660 <mbedtls_platform_zeroize>
   247e2:	4650      	mov	r0, sl
   247e4:	b035      	add	sp, #212	; 0xd4
   247e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   247ea:	ac0f      	add	r4, sp, #60	; 0x3c
   247ec:	ae0b      	add	r6, sp, #44	; 0x2c
   247ee:	4640      	mov	r0, r8
   247f0:	f001 f8b8 	bl	25964 <cc_mbedtls_aes_free>
   247f4:	4811      	ldr	r0, [pc, #68]	; (2483c <block_cipher_df+0x1c8>)
   247f6:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   247fa:	f7ff ff31 	bl	24660 <mbedtls_platform_zeroize>
   247fe:	4620      	mov	r0, r4
   24800:	2120      	movs	r1, #32
   24802:	f7ff ff2d 	bl	24660 <mbedtls_platform_zeroize>
   24806:	a807      	add	r0, sp, #28
   24808:	2110      	movs	r1, #16
   2480a:	f7ff ff29 	bl	24660 <mbedtls_platform_zeroize>
   2480e:	2110      	movs	r1, #16
   24810:	4630      	mov	r0, r6
   24812:	f7ff ff25 	bl	24660 <mbedtls_platform_zeroize>
   24816:	2120      	movs	r1, #32
   24818:	4638      	mov	r0, r7
   2481a:	f7ff ff21 	bl	24660 <mbedtls_platform_zeroize>
   2481e:	4650      	mov	r0, sl
   24820:	b035      	add	sp, #212	; 0xd4
   24822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24826:	9f03      	ldr	r7, [sp, #12]
   24828:	9e01      	ldr	r6, [sp, #4]
   2482a:	9c04      	ldr	r4, [sp, #16]
   2482c:	4682      	mov	sl, r0
   2482e:	e7de      	b.n	247ee <block_cipher_df+0x17a>
   24830:	f06f 0a37 	mvn.w	sl, #55	; 0x37
   24834:	e7f3      	b.n	2481e <block_cipher_df+0x1aa>
   24836:	bf00      	nop
   24838:	03020100 	.word	0x03020100
   2483c:	20003a08 	.word	0x20003a08
   24840:	20003a18 	.word	0x20003a18

00024844 <ctr_drbg_update_internal>:
   24844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24848:	b088      	sub	sp, #32
   2484a:	4604      	mov	r4, r0
   2484c:	460d      	mov	r5, r1
   2484e:	2220      	movs	r2, #32
   24850:	2100      	movs	r1, #0
   24852:	4668      	mov	r0, sp
   24854:	f003 f8f5 	bl	27a42 <memset>
   24858:	f104 0620 	add.w	r6, r4, #32
   2485c:	466f      	mov	r7, sp
   2485e:	7be2      	ldrb	r2, [r4, #15]
   24860:	3201      	adds	r2, #1
   24862:	b2d2      	uxtb	r2, r2
   24864:	73e2      	strb	r2, [r4, #15]
   24866:	2a00      	cmp	r2, #0
   24868:	d14d      	bne.n	24906 <ctr_drbg_update_internal+0xc2>
   2486a:	7ba2      	ldrb	r2, [r4, #14]
   2486c:	3201      	adds	r2, #1
   2486e:	b2d2      	uxtb	r2, r2
   24870:	73a2      	strb	r2, [r4, #14]
   24872:	2a00      	cmp	r2, #0
   24874:	d147      	bne.n	24906 <ctr_drbg_update_internal+0xc2>
   24876:	7b63      	ldrb	r3, [r4, #13]
   24878:	3301      	adds	r3, #1
   2487a:	b2db      	uxtb	r3, r3
   2487c:	7363      	strb	r3, [r4, #13]
   2487e:	2b00      	cmp	r3, #0
   24880:	d141      	bne.n	24906 <ctr_drbg_update_internal+0xc2>
   24882:	7b23      	ldrb	r3, [r4, #12]
   24884:	3301      	adds	r3, #1
   24886:	b2db      	uxtb	r3, r3
   24888:	7323      	strb	r3, [r4, #12]
   2488a:	2b00      	cmp	r3, #0
   2488c:	d13b      	bne.n	24906 <ctr_drbg_update_internal+0xc2>
   2488e:	7ae3      	ldrb	r3, [r4, #11]
   24890:	3301      	adds	r3, #1
   24892:	b2db      	uxtb	r3, r3
   24894:	72e3      	strb	r3, [r4, #11]
   24896:	2b00      	cmp	r3, #0
   24898:	d135      	bne.n	24906 <ctr_drbg_update_internal+0xc2>
   2489a:	7aa3      	ldrb	r3, [r4, #10]
   2489c:	3301      	adds	r3, #1
   2489e:	b2db      	uxtb	r3, r3
   248a0:	72a3      	strb	r3, [r4, #10]
   248a2:	2b00      	cmp	r3, #0
   248a4:	d12f      	bne.n	24906 <ctr_drbg_update_internal+0xc2>
   248a6:	7a63      	ldrb	r3, [r4, #9]
   248a8:	3301      	adds	r3, #1
   248aa:	b2db      	uxtb	r3, r3
   248ac:	7263      	strb	r3, [r4, #9]
   248ae:	bb53      	cbnz	r3, 24906 <ctr_drbg_update_internal+0xc2>
   248b0:	7a23      	ldrb	r3, [r4, #8]
   248b2:	3301      	adds	r3, #1
   248b4:	b2db      	uxtb	r3, r3
   248b6:	7223      	strb	r3, [r4, #8]
   248b8:	bb2b      	cbnz	r3, 24906 <ctr_drbg_update_internal+0xc2>
   248ba:	79e3      	ldrb	r3, [r4, #7]
   248bc:	3301      	adds	r3, #1
   248be:	b2db      	uxtb	r3, r3
   248c0:	71e3      	strb	r3, [r4, #7]
   248c2:	bb03      	cbnz	r3, 24906 <ctr_drbg_update_internal+0xc2>
   248c4:	79a3      	ldrb	r3, [r4, #6]
   248c6:	3301      	adds	r3, #1
   248c8:	b2db      	uxtb	r3, r3
   248ca:	71a3      	strb	r3, [r4, #6]
   248cc:	b9db      	cbnz	r3, 24906 <ctr_drbg_update_internal+0xc2>
   248ce:	7963      	ldrb	r3, [r4, #5]
   248d0:	3301      	adds	r3, #1
   248d2:	b2db      	uxtb	r3, r3
   248d4:	7163      	strb	r3, [r4, #5]
   248d6:	b9b3      	cbnz	r3, 24906 <ctr_drbg_update_internal+0xc2>
   248d8:	7923      	ldrb	r3, [r4, #4]
   248da:	3301      	adds	r3, #1
   248dc:	b2db      	uxtb	r3, r3
   248de:	7123      	strb	r3, [r4, #4]
   248e0:	b98b      	cbnz	r3, 24906 <ctr_drbg_update_internal+0xc2>
   248e2:	78e3      	ldrb	r3, [r4, #3]
   248e4:	3301      	adds	r3, #1
   248e6:	b2db      	uxtb	r3, r3
   248e8:	70e3      	strb	r3, [r4, #3]
   248ea:	b963      	cbnz	r3, 24906 <ctr_drbg_update_internal+0xc2>
   248ec:	78a3      	ldrb	r3, [r4, #2]
   248ee:	3301      	adds	r3, #1
   248f0:	b2db      	uxtb	r3, r3
   248f2:	70a3      	strb	r3, [r4, #2]
   248f4:	b93b      	cbnz	r3, 24906 <ctr_drbg_update_internal+0xc2>
   248f6:	7863      	ldrb	r3, [r4, #1]
   248f8:	3301      	adds	r3, #1
   248fa:	b2db      	uxtb	r3, r3
   248fc:	7063      	strb	r3, [r4, #1]
   248fe:	b913      	cbnz	r3, 24906 <ctr_drbg_update_internal+0xc2>
   24900:	7823      	ldrb	r3, [r4, #0]
   24902:	3301      	adds	r3, #1
   24904:	7023      	strb	r3, [r4, #0]
   24906:	463b      	mov	r3, r7
   24908:	4622      	mov	r2, r4
   2490a:	2101      	movs	r1, #1
   2490c:	4630      	mov	r0, r6
   2490e:	f001 f849 	bl	259a4 <cc_mbedtls_aes_crypt_ecb>
   24912:	4680      	mov	r8, r0
   24914:	bb50      	cbnz	r0, 2496c <ctr_drbg_update_internal+0x128>
   24916:	3710      	adds	r7, #16
   24918:	ab08      	add	r3, sp, #32
   2491a:	429f      	cmp	r7, r3
   2491c:	d19f      	bne.n	2485e <ctr_drbg_update_internal+0x1a>
   2491e:	9a02      	ldr	r2, [sp, #8]
   24920:	68ab      	ldr	r3, [r5, #8]
   24922:	9f03      	ldr	r7, [sp, #12]
   24924:	9907      	ldr	r1, [sp, #28]
   24926:	4053      	eors	r3, r2
   24928:	9302      	str	r3, [sp, #8]
   2492a:	4630      	mov	r0, r6
   2492c:	68ee      	ldr	r6, [r5, #12]
   2492e:	9b00      	ldr	r3, [sp, #0]
   24930:	407e      	eors	r6, r7
   24932:	9603      	str	r6, [sp, #12]
   24934:	9f04      	ldr	r7, [sp, #16]
   24936:	692e      	ldr	r6, [r5, #16]
   24938:	407e      	eors	r6, r7
   2493a:	9604      	str	r6, [sp, #16]
   2493c:	696e      	ldr	r6, [r5, #20]
   2493e:	9f05      	ldr	r7, [sp, #20]
   24940:	407e      	eors	r6, r7
   24942:	9605      	str	r6, [sp, #20]
   24944:	9f06      	ldr	r7, [sp, #24]
   24946:	69ae      	ldr	r6, [r5, #24]
   24948:	407e      	eors	r6, r7
   2494a:	9606      	str	r6, [sp, #24]
   2494c:	69ee      	ldr	r6, [r5, #28]
   2494e:	4071      	eors	r1, r6
   24950:	9107      	str	r1, [sp, #28]
   24952:	6829      	ldr	r1, [r5, #0]
   24954:	404b      	eors	r3, r1
   24956:	9300      	str	r3, [sp, #0]
   24958:	9901      	ldr	r1, [sp, #4]
   2495a:	686b      	ldr	r3, [r5, #4]
   2495c:	2280      	movs	r2, #128	; 0x80
   2495e:	404b      	eors	r3, r1
   24960:	4669      	mov	r1, sp
   24962:	9301      	str	r3, [sp, #4]
   24964:	f001 f804 	bl	25970 <cc_mbedtls_aes_setkey_enc>
   24968:	4680      	mov	r8, r0
   2496a:	b138      	cbz	r0, 2497c <ctr_drbg_update_internal+0x138>
   2496c:	4668      	mov	r0, sp
   2496e:	2120      	movs	r1, #32
   24970:	f7ff fe76 	bl	24660 <mbedtls_platform_zeroize>
   24974:	4640      	mov	r0, r8
   24976:	b008      	add	sp, #32
   24978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2497c:	2210      	movs	r2, #16
   2497e:	eb0d 0102 	add.w	r1, sp, r2
   24982:	4620      	mov	r0, r4
   24984:	f003 f852 	bl	27a2c <memcpy>
   24988:	e7f0      	b.n	2496c <ctr_drbg_update_internal+0x128>
   2498a:	bf00      	nop

0002498c <mbedtls_ctr_drbg_reseed_internal>:
   2498c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24990:	4604      	mov	r4, r0
   24992:	6980      	ldr	r0, [r0, #24]
   24994:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   24998:	d852      	bhi.n	24a40 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   2499a:	461d      	mov	r5, r3
   2499c:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   249a0:	42ab      	cmp	r3, r5
   249a2:	d34d      	bcc.n	24a40 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   249a4:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   249a8:	1a1b      	subs	r3, r3, r0
   249aa:	4293      	cmp	r3, r2
   249ac:	4616      	mov	r6, r2
   249ae:	d347      	bcc.n	24a40 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   249b0:	f8df 9098 	ldr.w	r9, [pc, #152]	; 24a4c <mbedtls_ctr_drbg_reseed_internal+0xc0>
   249b4:	f44f 72c0 	mov.w	r2, #384	; 0x180
   249b8:	460f      	mov	r7, r1
   249ba:	4648      	mov	r0, r9
   249bc:	2100      	movs	r1, #0
   249be:	f003 f840 	bl	27a42 <memset>
   249c2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   249c6:	69a2      	ldr	r2, [r4, #24]
   249c8:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   249cc:	4649      	mov	r1, r9
   249ce:	4798      	blx	r3
   249d0:	2800      	cmp	r0, #0
   249d2:	d138      	bne.n	24a46 <mbedtls_ctr_drbg_reseed_internal+0xba>
   249d4:	f8d4 8018 	ldr.w	r8, [r4, #24]
   249d8:	b13d      	cbz	r5, 249ea <mbedtls_ctr_drbg_reseed_internal+0x5e>
   249da:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   249de:	462a      	mov	r2, r5
   249e0:	eb09 0108 	add.w	r1, r9, r8
   249e4:	4798      	blx	r3
   249e6:	bb70      	cbnz	r0, 24a46 <mbedtls_ctr_drbg_reseed_internal+0xba>
   249e8:	44a8      	add	r8, r5
   249ea:	b107      	cbz	r7, 249ee <mbedtls_ctr_drbg_reseed_internal+0x62>
   249ec:	b9c6      	cbnz	r6, 24a20 <mbedtls_ctr_drbg_reseed_internal+0x94>
   249ee:	4917      	ldr	r1, [pc, #92]	; (24a4c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   249f0:	4642      	mov	r2, r8
   249f2:	4608      	mov	r0, r1
   249f4:	f7ff fe3e 	bl	24674 <block_cipher_df>
   249f8:	4605      	mov	r5, r0
   249fa:	b138      	cbz	r0, 24a0c <mbedtls_ctr_drbg_reseed_internal+0x80>
   249fc:	4813      	ldr	r0, [pc, #76]	; (24a4c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   249fe:	f44f 71c0 	mov.w	r1, #384	; 0x180
   24a02:	f7ff fe2d 	bl	24660 <mbedtls_platform_zeroize>
   24a06:	4628      	mov	r0, r5
   24a08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24a0c:	490f      	ldr	r1, [pc, #60]	; (24a4c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   24a0e:	4620      	mov	r0, r4
   24a10:	f7ff ff18 	bl	24844 <ctr_drbg_update_internal>
   24a14:	4605      	mov	r5, r0
   24a16:	2800      	cmp	r0, #0
   24a18:	d1f0      	bne.n	249fc <mbedtls_ctr_drbg_reseed_internal+0x70>
   24a1a:	2301      	movs	r3, #1
   24a1c:	6123      	str	r3, [r4, #16]
   24a1e:	e7ed      	b.n	249fc <mbedtls_ctr_drbg_reseed_internal+0x70>
   24a20:	eb09 0008 	add.w	r0, r9, r8
   24a24:	4639      	mov	r1, r7
   24a26:	4632      	mov	r2, r6
   24a28:	f003 f800 	bl	27a2c <memcpy>
   24a2c:	4907      	ldr	r1, [pc, #28]	; (24a4c <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   24a2e:	44b0      	add	r8, r6
   24a30:	4642      	mov	r2, r8
   24a32:	4608      	mov	r0, r1
   24a34:	f7ff fe1e 	bl	24674 <block_cipher_df>
   24a38:	4605      	mov	r5, r0
   24a3a:	2800      	cmp	r0, #0
   24a3c:	d1de      	bne.n	249fc <mbedtls_ctr_drbg_reseed_internal+0x70>
   24a3e:	e7e5      	b.n	24a0c <mbedtls_ctr_drbg_reseed_internal+0x80>
   24a40:	f06f 0537 	mvn.w	r5, #55	; 0x37
   24a44:	e7df      	b.n	24a06 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   24a46:	f06f 0533 	mvn.w	r5, #51	; 0x33
   24a4a:	e7dc      	b.n	24a06 <mbedtls_ctr_drbg_reseed_internal+0x7a>
   24a4c:	20003ba8 	.word	0x20003ba8

00024a50 <cc_mbedtls_ctr_drbg_init>:
   24a50:	b510      	push	{r4, lr}
   24a52:	22a4      	movs	r2, #164	; 0xa4
   24a54:	4604      	mov	r4, r0
   24a56:	2100      	movs	r1, #0
   24a58:	f002 fff3 	bl	27a42 <memset>
   24a5c:	4b06      	ldr	r3, [pc, #24]	; (24a78 <cc_mbedtls_ctr_drbg_init+0x28>)
   24a5e:	f04f 31ff 	mov.w	r1, #4294967295
   24a62:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   24a66:	6121      	str	r1, [r4, #16]
   24a68:	61e2      	str	r2, [r4, #28]
   24a6a:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   24a6e:	681b      	ldr	r3, [r3, #0]
   24a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24a74:	4718      	bx	r3
   24a76:	bf00      	nop
   24a78:	20000824 	.word	0x20000824

00024a7c <cc_mbedtls_ctr_drbg_seed>:
   24a7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24a80:	b085      	sub	sp, #20
   24a82:	4605      	mov	r5, r0
   24a84:	460f      	mov	r7, r1
   24a86:	4616      	mov	r6, r2
   24a88:	2100      	movs	r1, #0
   24a8a:	2210      	movs	r2, #16
   24a8c:	4668      	mov	r0, sp
   24a8e:	4699      	mov	r9, r3
   24a90:	f002 ffd7 	bl	27a42 <memset>
   24a94:	4b1d      	ldr	r3, [pc, #116]	; (24b0c <cc_mbedtls_ctr_drbg_seed+0x90>)
   24a96:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   24a9a:	681b      	ldr	r3, [r3, #0]
   24a9c:	4640      	mov	r0, r8
   24a9e:	4798      	blx	r3
   24aa0:	b120      	cbz	r0, 24aac <cc_mbedtls_ctr_drbg_seed+0x30>
   24aa2:	4604      	mov	r4, r0
   24aa4:	4620      	mov	r0, r4
   24aa6:	b005      	add	sp, #20
   24aa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24aac:	f105 0420 	add.w	r4, r5, #32
   24ab0:	4620      	mov	r0, r4
   24ab2:	f000 ff47 	bl	25944 <cc_mbedtls_aes_init>
   24ab6:	69aa      	ldr	r2, [r5, #24]
   24ab8:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   24abc:	692e      	ldr	r6, [r5, #16]
   24abe:	b9e2      	cbnz	r2, 24afa <cc_mbedtls_ctr_drbg_seed+0x7e>
   24ac0:	2220      	movs	r2, #32
   24ac2:	2e00      	cmp	r6, #0
   24ac4:	61aa      	str	r2, [r5, #24]
   24ac6:	db1f      	blt.n	24b08 <cc_mbedtls_ctr_drbg_seed+0x8c>
   24ac8:	4620      	mov	r0, r4
   24aca:	4669      	mov	r1, sp
   24acc:	2280      	movs	r2, #128	; 0x80
   24ace:	f000 ff4f 	bl	25970 <cc_mbedtls_aes_setkey_enc>
   24ad2:	4604      	mov	r4, r0
   24ad4:	b930      	cbnz	r0, 24ae4 <cc_mbedtls_ctr_drbg_seed+0x68>
   24ad6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   24ad8:	4633      	mov	r3, r6
   24ada:	4649      	mov	r1, r9
   24adc:	4628      	mov	r0, r5
   24ade:	f7ff ff55 	bl	2498c <mbedtls_ctr_drbg_reseed_internal>
   24ae2:	4604      	mov	r4, r0
   24ae4:	4b0a      	ldr	r3, [pc, #40]	; (24b10 <cc_mbedtls_ctr_drbg_seed+0x94>)
   24ae6:	4640      	mov	r0, r8
   24ae8:	681b      	ldr	r3, [r3, #0]
   24aea:	4798      	blx	r3
   24aec:	2800      	cmp	r0, #0
   24aee:	bf18      	it	ne
   24af0:	4604      	movne	r4, r0
   24af2:	4620      	mov	r0, r4
   24af4:	b005      	add	sp, #20
   24af6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24afa:	2e00      	cmp	r6, #0
   24afc:	dae4      	bge.n	24ac8 <cc_mbedtls_ctr_drbg_seed+0x4c>
   24afe:	2a17      	cmp	r2, #23
   24b00:	d802      	bhi.n	24b08 <cc_mbedtls_ctr_drbg_seed+0x8c>
   24b02:	3201      	adds	r2, #1
   24b04:	0856      	lsrs	r6, r2, #1
   24b06:	e7df      	b.n	24ac8 <cc_mbedtls_ctr_drbg_seed+0x4c>
   24b08:	2600      	movs	r6, #0
   24b0a:	e7dd      	b.n	24ac8 <cc_mbedtls_ctr_drbg_seed+0x4c>
   24b0c:	20000820 	.word	0x20000820
   24b10:	2000081c 	.word	0x2000081c

00024b14 <cc_mbedtls_ctr_drbg_random_with_add>:
   24b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24b18:	b08d      	sub	sp, #52	; 0x34
   24b1a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   24b1e:	9f16      	ldr	r7, [sp, #88]	; 0x58
   24b20:	f200 80e3 	bhi.w	24cea <cc_mbedtls_ctr_drbg_random_with_add+0x1d6>
   24b24:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
   24b28:	f200 80dc 	bhi.w	24ce4 <cc_mbedtls_ctr_drbg_random_with_add+0x1d0>
   24b2c:	4604      	mov	r4, r0
   24b2e:	4615      	mov	r5, r2
   24b30:	460e      	mov	r6, r1
   24b32:	2220      	movs	r2, #32
   24b34:	2100      	movs	r1, #0
   24b36:	a804      	add	r0, sp, #16
   24b38:	4698      	mov	r8, r3
   24b3a:	f002 ff82 	bl	27a42 <memset>
   24b3e:	4b6c      	ldr	r3, [pc, #432]	; (24cf0 <cc_mbedtls_ctr_drbg_random_with_add+0x1dc>)
   24b40:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   24b44:	681b      	ldr	r3, [r3, #0]
   24b46:	4648      	mov	r0, r9
   24b48:	4798      	blx	r3
   24b4a:	4683      	mov	fp, r0
   24b4c:	2800      	cmp	r0, #0
   24b4e:	f040 8092 	bne.w	24c76 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   24b52:	6922      	ldr	r2, [r4, #16]
   24b54:	69e3      	ldr	r3, [r4, #28]
   24b56:	429a      	cmp	r2, r3
   24b58:	f300 8091 	bgt.w	24c7e <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   24b5c:	6963      	ldr	r3, [r4, #20]
   24b5e:	2b00      	cmp	r3, #0
   24b60:	f040 808d 	bne.w	24c7e <cc_mbedtls_ctr_drbg_random_with_add+0x16a>
   24b64:	2f00      	cmp	r7, #0
   24b66:	f040 80a9 	bne.w	24cbc <cc_mbedtls_ctr_drbg_random_with_add+0x1a8>
   24b6a:	f8df a188 	ldr.w	sl, [pc, #392]	; 24cf4 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   24b6e:	466f      	mov	r7, sp
   24b70:	2d00      	cmp	r5, #0
   24b72:	f000 8098 	beq.w	24ca6 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   24b76:	f104 0820 	add.w	r8, r4, #32
   24b7a:	466f      	mov	r7, sp
   24b7c:	e00e      	b.n	24b9c <cc_mbedtls_ctr_drbg_random_with_add+0x88>
   24b7e:	2d10      	cmp	r5, #16
   24b80:	46ab      	mov	fp, r5
   24b82:	bf28      	it	cs
   24b84:	f04f 0b10 	movcs.w	fp, #16
   24b88:	4630      	mov	r0, r6
   24b8a:	465a      	mov	r2, fp
   24b8c:	4639      	mov	r1, r7
   24b8e:	f002 ff4d 	bl	27a2c <memcpy>
   24b92:	ebb5 050b 	subs.w	r5, r5, fp
   24b96:	445e      	add	r6, fp
   24b98:	f000 8085 	beq.w	24ca6 <cc_mbedtls_ctr_drbg_random_with_add+0x192>
   24b9c:	7be3      	ldrb	r3, [r4, #15]
   24b9e:	3301      	adds	r3, #1
   24ba0:	b2db      	uxtb	r3, r3
   24ba2:	73e3      	strb	r3, [r4, #15]
   24ba4:	2b00      	cmp	r3, #0
   24ba6:	d14d      	bne.n	24c44 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   24ba8:	7ba3      	ldrb	r3, [r4, #14]
   24baa:	3301      	adds	r3, #1
   24bac:	b2db      	uxtb	r3, r3
   24bae:	73a3      	strb	r3, [r4, #14]
   24bb0:	2b00      	cmp	r3, #0
   24bb2:	d147      	bne.n	24c44 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   24bb4:	7b63      	ldrb	r3, [r4, #13]
   24bb6:	3301      	adds	r3, #1
   24bb8:	b2db      	uxtb	r3, r3
   24bba:	7363      	strb	r3, [r4, #13]
   24bbc:	2b00      	cmp	r3, #0
   24bbe:	d141      	bne.n	24c44 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   24bc0:	7b23      	ldrb	r3, [r4, #12]
   24bc2:	3301      	adds	r3, #1
   24bc4:	b2db      	uxtb	r3, r3
   24bc6:	7323      	strb	r3, [r4, #12]
   24bc8:	2b00      	cmp	r3, #0
   24bca:	d13b      	bne.n	24c44 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   24bcc:	7ae3      	ldrb	r3, [r4, #11]
   24bce:	3301      	adds	r3, #1
   24bd0:	b2db      	uxtb	r3, r3
   24bd2:	72e3      	strb	r3, [r4, #11]
   24bd4:	2b00      	cmp	r3, #0
   24bd6:	d135      	bne.n	24c44 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   24bd8:	7aa3      	ldrb	r3, [r4, #10]
   24bda:	3301      	adds	r3, #1
   24bdc:	b2db      	uxtb	r3, r3
   24bde:	72a3      	strb	r3, [r4, #10]
   24be0:	2b00      	cmp	r3, #0
   24be2:	d12f      	bne.n	24c44 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   24be4:	7a63      	ldrb	r3, [r4, #9]
   24be6:	3301      	adds	r3, #1
   24be8:	b2db      	uxtb	r3, r3
   24bea:	7263      	strb	r3, [r4, #9]
   24bec:	bb53      	cbnz	r3, 24c44 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   24bee:	7a23      	ldrb	r3, [r4, #8]
   24bf0:	3301      	adds	r3, #1
   24bf2:	b2db      	uxtb	r3, r3
   24bf4:	7223      	strb	r3, [r4, #8]
   24bf6:	bb2b      	cbnz	r3, 24c44 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   24bf8:	79e3      	ldrb	r3, [r4, #7]
   24bfa:	3301      	adds	r3, #1
   24bfc:	b2db      	uxtb	r3, r3
   24bfe:	71e3      	strb	r3, [r4, #7]
   24c00:	bb03      	cbnz	r3, 24c44 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   24c02:	79a3      	ldrb	r3, [r4, #6]
   24c04:	3301      	adds	r3, #1
   24c06:	b2db      	uxtb	r3, r3
   24c08:	71a3      	strb	r3, [r4, #6]
   24c0a:	b9db      	cbnz	r3, 24c44 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   24c0c:	7963      	ldrb	r3, [r4, #5]
   24c0e:	3301      	adds	r3, #1
   24c10:	b2db      	uxtb	r3, r3
   24c12:	7163      	strb	r3, [r4, #5]
   24c14:	b9b3      	cbnz	r3, 24c44 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   24c16:	7923      	ldrb	r3, [r4, #4]
   24c18:	3301      	adds	r3, #1
   24c1a:	b2db      	uxtb	r3, r3
   24c1c:	7123      	strb	r3, [r4, #4]
   24c1e:	b98b      	cbnz	r3, 24c44 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   24c20:	78e3      	ldrb	r3, [r4, #3]
   24c22:	3301      	adds	r3, #1
   24c24:	b2db      	uxtb	r3, r3
   24c26:	70e3      	strb	r3, [r4, #3]
   24c28:	b963      	cbnz	r3, 24c44 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   24c2a:	78a3      	ldrb	r3, [r4, #2]
   24c2c:	3301      	adds	r3, #1
   24c2e:	b2db      	uxtb	r3, r3
   24c30:	70a3      	strb	r3, [r4, #2]
   24c32:	b93b      	cbnz	r3, 24c44 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   24c34:	7863      	ldrb	r3, [r4, #1]
   24c36:	3301      	adds	r3, #1
   24c38:	b2db      	uxtb	r3, r3
   24c3a:	7063      	strb	r3, [r4, #1]
   24c3c:	b913      	cbnz	r3, 24c44 <cc_mbedtls_ctr_drbg_random_with_add+0x130>
   24c3e:	7823      	ldrb	r3, [r4, #0]
   24c40:	3301      	adds	r3, #1
   24c42:	7023      	strb	r3, [r4, #0]
   24c44:	463b      	mov	r3, r7
   24c46:	4622      	mov	r2, r4
   24c48:	2101      	movs	r1, #1
   24c4a:	4640      	mov	r0, r8
   24c4c:	f000 feaa 	bl	259a4 <cc_mbedtls_aes_crypt_ecb>
   24c50:	4683      	mov	fp, r0
   24c52:	2800      	cmp	r0, #0
   24c54:	d093      	beq.n	24b7e <cc_mbedtls_ctr_drbg_random_with_add+0x6a>
   24c56:	f8da 3000 	ldr.w	r3, [sl]
   24c5a:	4648      	mov	r0, r9
   24c5c:	4798      	blx	r3
   24c5e:	2120      	movs	r1, #32
   24c60:	4603      	mov	r3, r0
   24c62:	a804      	add	r0, sp, #16
   24c64:	2b00      	cmp	r3, #0
   24c66:	bf18      	it	ne
   24c68:	469b      	movne	fp, r3
   24c6a:	f7ff fcf9 	bl	24660 <mbedtls_platform_zeroize>
   24c6e:	2110      	movs	r1, #16
   24c70:	4638      	mov	r0, r7
   24c72:	f7ff fcf5 	bl	24660 <mbedtls_platform_zeroize>
   24c76:	4658      	mov	r0, fp
   24c78:	b00d      	add	sp, #52	; 0x34
   24c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24c7e:	463a      	mov	r2, r7
   24c80:	4641      	mov	r1, r8
   24c82:	2300      	movs	r3, #0
   24c84:	4620      	mov	r0, r4
   24c86:	f7ff fe81 	bl	2498c <mbedtls_ctr_drbg_reseed_internal>
   24c8a:	f8df a068 	ldr.w	sl, [pc, #104]	; 24cf4 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   24c8e:	2800      	cmp	r0, #0
   24c90:	f43f af6d 	beq.w	24b6e <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   24c94:	f8da 3000 	ldr.w	r3, [sl]
   24c98:	4648      	mov	r0, r9
   24c9a:	4798      	blx	r3
   24c9c:	4683      	mov	fp, r0
   24c9e:	2800      	cmp	r0, #0
   24ca0:	f43f af65 	beq.w	24b6e <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   24ca4:	e7e7      	b.n	24c76 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   24ca6:	a904      	add	r1, sp, #16
   24ca8:	4620      	mov	r0, r4
   24caa:	f7ff fdcb 	bl	24844 <ctr_drbg_update_internal>
   24cae:	4683      	mov	fp, r0
   24cb0:	2800      	cmp	r0, #0
   24cb2:	d1d0      	bne.n	24c56 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   24cb4:	6923      	ldr	r3, [r4, #16]
   24cb6:	3301      	adds	r3, #1
   24cb8:	6123      	str	r3, [r4, #16]
   24cba:	e7cc      	b.n	24c56 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   24cbc:	463a      	mov	r2, r7
   24cbe:	4641      	mov	r1, r8
   24cc0:	a804      	add	r0, sp, #16
   24cc2:	f7ff fcd7 	bl	24674 <block_cipher_df>
   24cc6:	4683      	mov	fp, r0
   24cc8:	b118      	cbz	r0, 24cd2 <cc_mbedtls_ctr_drbg_random_with_add+0x1be>
   24cca:	f8df a028 	ldr.w	sl, [pc, #40]	; 24cf4 <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>
   24cce:	466f      	mov	r7, sp
   24cd0:	e7c1      	b.n	24c56 <cc_mbedtls_ctr_drbg_random_with_add+0x142>
   24cd2:	a904      	add	r1, sp, #16
   24cd4:	4620      	mov	r0, r4
   24cd6:	f7ff fdb5 	bl	24844 <ctr_drbg_update_internal>
   24cda:	4683      	mov	fp, r0
   24cdc:	2800      	cmp	r0, #0
   24cde:	f43f af44 	beq.w	24b6a <cc_mbedtls_ctr_drbg_random_with_add+0x56>
   24ce2:	e7f2      	b.n	24cca <cc_mbedtls_ctr_drbg_random_with_add+0x1b6>
   24ce4:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   24ce8:	e7c5      	b.n	24c76 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   24cea:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   24cee:	e7c2      	b.n	24c76 <cc_mbedtls_ctr_drbg_random_with_add+0x162>
   24cf0:	20000820 	.word	0x20000820
   24cf4:	2000081c 	.word	0x2000081c

00024cf8 <entropy_update>:
   24cf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24cfc:	2b20      	cmp	r3, #32
   24cfe:	b08b      	sub	sp, #44	; 0x2c
   24d00:	461d      	mov	r5, r3
   24d02:	4606      	mov	r6, r0
   24d04:	4688      	mov	r8, r1
   24d06:	4691      	mov	r9, r2
   24d08:	d826      	bhi.n	24d58 <entropy_update+0x60>
   24d0a:	b2db      	uxtb	r3, r3
   24d0c:	af02      	add	r7, sp, #8
   24d0e:	f88d 8004 	strb.w	r8, [sp, #4]
   24d12:	46b0      	mov	r8, r6
   24d14:	f88d 3005 	strb.w	r3, [sp, #5]
   24d18:	f858 1b04 	ldr.w	r1, [r8], #4
   24d1c:	b921      	cbnz	r1, 24d28 <entropy_update+0x30>
   24d1e:	4640      	mov	r0, r8
   24d20:	f000 fe84 	bl	25a2c <cc_mbedtls_sha256_starts>
   24d24:	4604      	mov	r4, r0
   24d26:	b940      	cbnz	r0, 24d3a <entropy_update+0x42>
   24d28:	2301      	movs	r3, #1
   24d2a:	6033      	str	r3, [r6, #0]
   24d2c:	2202      	movs	r2, #2
   24d2e:	a901      	add	r1, sp, #4
   24d30:	4640      	mov	r0, r8
   24d32:	f000 fe8f 	bl	25a54 <cc_mbedtls_sha256_update>
   24d36:	4604      	mov	r4, r0
   24d38:	b138      	cbz	r0, 24d4a <entropy_update+0x52>
   24d3a:	4638      	mov	r0, r7
   24d3c:	2120      	movs	r1, #32
   24d3e:	f7ff fc8f 	bl	24660 <mbedtls_platform_zeroize>
   24d42:	4620      	mov	r0, r4
   24d44:	b00b      	add	sp, #44	; 0x2c
   24d46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24d4a:	462a      	mov	r2, r5
   24d4c:	4649      	mov	r1, r9
   24d4e:	4640      	mov	r0, r8
   24d50:	f000 fe80 	bl	25a54 <cc_mbedtls_sha256_update>
   24d54:	4604      	mov	r4, r0
   24d56:	e7f0      	b.n	24d3a <entropy_update+0x42>
   24d58:	af02      	add	r7, sp, #8
   24d5a:	4619      	mov	r1, r3
   24d5c:	4610      	mov	r0, r2
   24d5e:	2300      	movs	r3, #0
   24d60:	463a      	mov	r2, r7
   24d62:	f000 fffd 	bl	25d60 <cc_mbedtls_sha256>
   24d66:	4604      	mov	r4, r0
   24d68:	2800      	cmp	r0, #0
   24d6a:	d1e6      	bne.n	24d3a <entropy_update+0x42>
   24d6c:	2320      	movs	r3, #32
   24d6e:	46b9      	mov	r9, r7
   24d70:	461d      	mov	r5, r3
   24d72:	e7cc      	b.n	24d0e <entropy_update+0x16>

00024d74 <entropy_gather_internal.part.0>:
   24d74:	b5f0      	push	{r4, r5, r6, r7, lr}
   24d76:	f8d0 30f8 	ldr.w	r3, [r0, #248]	; 0xf8
   24d7a:	b0a7      	sub	sp, #156	; 0x9c
   24d7c:	2b00      	cmp	r3, #0
   24d7e:	bfd8      	it	le
   24d80:	ae02      	addle	r6, sp, #8
   24d82:	dd2c      	ble.n	24dde <entropy_gather_internal.part.0+0x6a>
   24d84:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
   24d88:	4605      	mov	r5, r0
   24d8a:	2300      	movs	r3, #0
   24d8c:	ae02      	add	r6, sp, #8
   24d8e:	9301      	str	r3, [sp, #4]
   24d90:	f1a4 0701 	sub.w	r7, r4, #1
   24d94:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
   24d98:	f8d5 40fc 	ldr.w	r4, [r5, #252]	; 0xfc
   24d9c:	ab01      	add	r3, sp, #4
   24d9e:	2290      	movs	r2, #144	; 0x90
   24da0:	4631      	mov	r1, r6
   24da2:	47a0      	blx	r4
   24da4:	fab7 f787 	clz	r7, r7
   24da8:	097f      	lsrs	r7, r7, #5
   24daa:	4604      	mov	r4, r0
   24dac:	b910      	cbnz	r0, 24db4 <entropy_gather_internal.part.0+0x40>
   24dae:	9b01      	ldr	r3, [sp, #4]
   24db0:	b93b      	cbnz	r3, 24dc2 <entropy_gather_internal.part.0+0x4e>
   24db2:	b1a7      	cbz	r7, 24dde <entropy_gather_internal.part.0+0x6a>
   24db4:	4630      	mov	r0, r6
   24db6:	2190      	movs	r1, #144	; 0x90
   24db8:	f7ff fc52 	bl	24660 <mbedtls_platform_zeroize>
   24dbc:	4620      	mov	r0, r4
   24dbe:	b027      	add	sp, #156	; 0x9c
   24dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24dc2:	4601      	mov	r1, r0
   24dc4:	4632      	mov	r2, r6
   24dc6:	4628      	mov	r0, r5
   24dc8:	f7ff ff96 	bl	24cf8 <entropy_update>
   24dcc:	b950      	cbnz	r0, 24de4 <entropy_gather_internal.part.0+0x70>
   24dce:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
   24dd2:	9a01      	ldr	r2, [sp, #4]
   24dd4:	4413      	add	r3, r2
   24dd6:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   24dda:	2f00      	cmp	r7, #0
   24ddc:	d1ea      	bne.n	24db4 <entropy_gather_internal.part.0+0x40>
   24dde:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   24de2:	e7e7      	b.n	24db4 <entropy_gather_internal.part.0+0x40>
   24de4:	4604      	mov	r4, r0
   24de6:	4620      	mov	r0, r4
   24de8:	b027      	add	sp, #156	; 0x9c
   24dea:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024dec <cc_mbedtls_entropy_init>:
   24dec:	b570      	push	{r4, r5, r6, lr}
   24dee:	2500      	movs	r5, #0
   24df0:	4604      	mov	r4, r0
   24df2:	f504 7688 	add.w	r6, r4, #272	; 0x110
   24df6:	2214      	movs	r2, #20
   24df8:	4629      	mov	r1, r5
   24dfa:	f8c0 50f8 	str.w	r5, [r0, #248]	; 0xf8
   24dfe:	30fc      	adds	r0, #252	; 0xfc
   24e00:	f002 fe1f 	bl	27a42 <memset>
   24e04:	2208      	movs	r2, #8
   24e06:	4629      	mov	r1, r5
   24e08:	4630      	mov	r0, r6
   24e0a:	f002 fe1a 	bl	27a42 <memset>
   24e0e:	4b15      	ldr	r3, [pc, #84]	; (24e64 <cc_mbedtls_entropy_init+0x78>)
   24e10:	4630      	mov	r0, r6
   24e12:	681b      	ldr	r3, [r3, #0]
   24e14:	4798      	blx	r3
   24e16:	4620      	mov	r0, r4
   24e18:	f840 5b04 	str.w	r5, [r0], #4
   24e1c:	f000 fdec 	bl	259f8 <cc_mbedtls_sha256_init>
   24e20:	4b11      	ldr	r3, [pc, #68]	; (24e68 <cc_mbedtls_entropy_init+0x7c>)
   24e22:	4630      	mov	r0, r6
   24e24:	681b      	ldr	r3, [r3, #0]
   24e26:	4798      	blx	r3
   24e28:	b9d8      	cbnz	r0, 24e62 <cc_mbedtls_entropy_init+0x76>
   24e2a:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   24e2e:	42ab      	cmp	r3, r5
   24e30:	dc11      	bgt.n	24e56 <cc_mbedtls_entropy_init+0x6a>
   24e32:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   24e36:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   24e3a:	2120      	movs	r1, #32
   24e3c:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
   24e40:	2101      	movs	r1, #1
   24e42:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
   24e46:	3301      	adds	r3, #1
   24e48:	4908      	ldr	r1, [pc, #32]	; (24e6c <cc_mbedtls_entropy_init+0x80>)
   24e4a:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
   24e4e:	f8c2 10fc 	str.w	r1, [r2, #252]	; 0xfc
   24e52:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
   24e56:	4b06      	ldr	r3, [pc, #24]	; (24e70 <cc_mbedtls_entropy_init+0x84>)
   24e58:	4630      	mov	r0, r6
   24e5a:	681b      	ldr	r3, [r3, #0]
   24e5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   24e60:	4718      	bx	r3
   24e62:	bd70      	pop	{r4, r5, r6, pc}
   24e64:	20000824 	.word	0x20000824
   24e68:	20000820 	.word	0x20000820
   24e6c:	00025849 	.word	0x00025849
   24e70:	2000081c 	.word	0x2000081c

00024e74 <cc_mbedtls_entropy_func>:
   24e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24e78:	2a20      	cmp	r2, #32
   24e7a:	b088      	sub	sp, #32
   24e7c:	d879      	bhi.n	24f72 <cc_mbedtls_entropy_func+0xfe>
   24e7e:	4b3e      	ldr	r3, [pc, #248]	; (24f78 <cc_mbedtls_entropy_func+0x104>)
   24e80:	f500 7988 	add.w	r9, r0, #272	; 0x110
   24e84:	681b      	ldr	r3, [r3, #0]
   24e86:	4604      	mov	r4, r0
   24e88:	4648      	mov	r0, r9
   24e8a:	4617      	mov	r7, r2
   24e8c:	4688      	mov	r8, r1
   24e8e:	4798      	blx	r3
   24e90:	4605      	mov	r5, r0
   24e92:	b9f8      	cbnz	r0, 24ed4 <cc_mbedtls_entropy_func+0x60>
   24e94:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   24e98:	f240 1601 	movw	r6, #257	; 0x101
   24e9c:	2b00      	cmp	r3, #0
   24e9e:	d064      	beq.n	24f6a <cc_mbedtls_entropy_func+0xf6>
   24ea0:	4620      	mov	r0, r4
   24ea2:	f7ff ff67 	bl	24d74 <entropy_gather_internal.part.0>
   24ea6:	4605      	mov	r5, r0
   24ea8:	b938      	cbnz	r0, 24eba <cc_mbedtls_entropy_func+0x46>
   24eaa:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   24eae:	2b00      	cmp	r3, #0
   24eb0:	dc14      	bgt.n	24edc <cc_mbedtls_entropy_func+0x68>
   24eb2:	3e01      	subs	r6, #1
   24eb4:	d1f2      	bne.n	24e9c <cc_mbedtls_entropy_func+0x28>
   24eb6:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   24eba:	466e      	mov	r6, sp
   24ebc:	2120      	movs	r1, #32
   24ebe:	4630      	mov	r0, r6
   24ec0:	f7ff fbce 	bl	24660 <mbedtls_platform_zeroize>
   24ec4:	4b2d      	ldr	r3, [pc, #180]	; (24f7c <cc_mbedtls_entropy_func+0x108>)
   24ec6:	4648      	mov	r0, r9
   24ec8:	681b      	ldr	r3, [r3, #0]
   24eca:	4798      	blx	r3
   24ecc:	2800      	cmp	r0, #0
   24ece:	bf18      	it	ne
   24ed0:	f06f 051d 	mvnne.w	r5, #29
   24ed4:	4628      	mov	r0, r5
   24ed6:	b008      	add	sp, #32
   24ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24edc:	e9d4 3241 	ldrd	r3, r2, [r4, #260]	; 0x104
   24ee0:	4293      	cmp	r3, r2
   24ee2:	d303      	bcc.n	24eec <cc_mbedtls_entropy_func+0x78>
   24ee4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   24ee8:	2a01      	cmp	r2, #1
   24eea:	d002      	beq.n	24ef2 <cc_mbedtls_entropy_func+0x7e>
   24eec:	3e01      	subs	r6, #1
   24eee:	d1d7      	bne.n	24ea0 <cc_mbedtls_entropy_func+0x2c>
   24ef0:	e7e1      	b.n	24eb6 <cc_mbedtls_entropy_func+0x42>
   24ef2:	2b1f      	cmp	r3, #31
   24ef4:	d9fa      	bls.n	24eec <cc_mbedtls_entropy_func+0x78>
   24ef6:	466e      	mov	r6, sp
   24ef8:	4601      	mov	r1, r0
   24efa:	2220      	movs	r2, #32
   24efc:	4630      	mov	r0, r6
   24efe:	f104 0a04 	add.w	sl, r4, #4
   24f02:	f002 fd9e 	bl	27a42 <memset>
   24f06:	4631      	mov	r1, r6
   24f08:	4650      	mov	r0, sl
   24f0a:	f000 fdcd 	bl	25aa8 <cc_mbedtls_sha256_finish>
   24f0e:	4605      	mov	r5, r0
   24f10:	2800      	cmp	r0, #0
   24f12:	d1d3      	bne.n	24ebc <cc_mbedtls_entropy_func+0x48>
   24f14:	4650      	mov	r0, sl
   24f16:	f000 fd83 	bl	25a20 <cc_mbedtls_sha256_free>
   24f1a:	4650      	mov	r0, sl
   24f1c:	f000 fd6c 	bl	259f8 <cc_mbedtls_sha256_init>
   24f20:	4629      	mov	r1, r5
   24f22:	4650      	mov	r0, sl
   24f24:	f000 fd82 	bl	25a2c <cc_mbedtls_sha256_starts>
   24f28:	4605      	mov	r5, r0
   24f2a:	2800      	cmp	r0, #0
   24f2c:	d1c6      	bne.n	24ebc <cc_mbedtls_entropy_func+0x48>
   24f2e:	4650      	mov	r0, sl
   24f30:	2220      	movs	r2, #32
   24f32:	4631      	mov	r1, r6
   24f34:	f000 fd8e 	bl	25a54 <cc_mbedtls_sha256_update>
   24f38:	4605      	mov	r5, r0
   24f3a:	2800      	cmp	r0, #0
   24f3c:	d1be      	bne.n	24ebc <cc_mbedtls_entropy_func+0x48>
   24f3e:	4603      	mov	r3, r0
   24f40:	4632      	mov	r2, r6
   24f42:	2120      	movs	r1, #32
   24f44:	4630      	mov	r0, r6
   24f46:	f000 ff0b 	bl	25d60 <cc_mbedtls_sha256>
   24f4a:	4605      	mov	r5, r0
   24f4c:	2800      	cmp	r0, #0
   24f4e:	d1b5      	bne.n	24ebc <cc_mbedtls_entropy_func+0x48>
   24f50:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   24f54:	2b00      	cmp	r3, #0
   24f56:	bfc4      	itt	gt
   24f58:	2300      	movgt	r3, #0
   24f5a:	f8c4 3104 	strgt.w	r3, [r4, #260]	; 0x104
   24f5e:	463a      	mov	r2, r7
   24f60:	4640      	mov	r0, r8
   24f62:	4631      	mov	r1, r6
   24f64:	f002 fd62 	bl	27a2c <memcpy>
   24f68:	e7a8      	b.n	24ebc <cc_mbedtls_entropy_func+0x48>
   24f6a:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   24f6e:	466e      	mov	r6, sp
   24f70:	e7a4      	b.n	24ebc <cc_mbedtls_entropy_func+0x48>
   24f72:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   24f76:	e7ad      	b.n	24ed4 <cc_mbedtls_entropy_func+0x60>
   24f78:	20000820 	.word	0x20000820
   24f7c:	2000081c 	.word	0x2000081c

00024f80 <RndStartupTest.constprop.0>:
   24f80:	b530      	push	{r4, r5, lr}
   24f82:	b08d      	sub	sp, #52	; 0x34
   24f84:	2100      	movs	r1, #0
   24f86:	2228      	movs	r2, #40	; 0x28
   24f88:	a802      	add	r0, sp, #8
   24f8a:	9101      	str	r1, [sp, #4]
   24f8c:	f002 fd59 	bl	27a42 <memset>
   24f90:	a802      	add	r0, sp, #8
   24f92:	f000 ff0d 	bl	25db0 <RNG_PLAT_SetUserRngParameters>
   24f96:	4604      	mov	r4, r0
   24f98:	b110      	cbz	r0, 24fa0 <RndStartupTest.constprop.0+0x20>
   24f9a:	4620      	mov	r0, r4
   24f9c:	b00d      	add	sp, #52	; 0x34
   24f9e:	bd30      	pop	{r4, r5, pc}
   24fa0:	4d17      	ldr	r5, [pc, #92]	; (25000 <RndStartupTest.constprop.0+0x80>)
   24fa2:	f04f 31ff 	mov.w	r1, #4294967295
   24fa6:	6828      	ldr	r0, [r5, #0]
   24fa8:	f000 f944 	bl	25234 <CC_PalMutexLock>
   24fac:	4604      	mov	r4, r0
   24fae:	b120      	cbz	r0, 24fba <RndStartupTest.constprop.0+0x3a>
   24fb0:	4814      	ldr	r0, [pc, #80]	; (25004 <RndStartupTest.constprop.0+0x84>)
   24fb2:	f7ff fa35 	bl	24420 <CC_PalAbort>
   24fb6:	2c01      	cmp	r4, #1
   24fb8:	d018      	beq.n	24fec <RndStartupTest.constprop.0+0x6c>
   24fba:	2000      	movs	r0, #0
   24fbc:	f000 f96a 	bl	25294 <CC_PalPowerSaveModeSelect>
   24fc0:	b9d0      	cbnz	r0, 24ff8 <RndStartupTest.constprop.0+0x78>
   24fc2:	4a11      	ldr	r2, [pc, #68]	; (25008 <RndStartupTest.constprop.0+0x88>)
   24fc4:	a902      	add	r1, sp, #8
   24fc6:	a801      	add	r0, sp, #4
   24fc8:	f000 fc30 	bl	2582c <LLF_RND_RunTrngStartupTest>
   24fcc:	4604      	mov	r4, r0
   24fce:	2001      	movs	r0, #1
   24fd0:	f000 f960 	bl	25294 <CC_PalPowerSaveModeSelect>
   24fd4:	b960      	cbnz	r0, 24ff0 <RndStartupTest.constprop.0+0x70>
   24fd6:	6828      	ldr	r0, [r5, #0]
   24fd8:	f000 f934 	bl	25244 <CC_PalMutexUnlock>
   24fdc:	2800      	cmp	r0, #0
   24fde:	d0dc      	beq.n	24f9a <RndStartupTest.constprop.0+0x1a>
   24fe0:	480a      	ldr	r0, [pc, #40]	; (2500c <RndStartupTest.constprop.0+0x8c>)
   24fe2:	f7ff fa1d 	bl	24420 <CC_PalAbort>
   24fe6:	4620      	mov	r0, r4
   24fe8:	b00d      	add	sp, #52	; 0x34
   24fea:	bd30      	pop	{r4, r5, pc}
   24fec:	2405      	movs	r4, #5
   24fee:	e7f2      	b.n	24fd6 <RndStartupTest.constprop.0+0x56>
   24ff0:	4807      	ldr	r0, [pc, #28]	; (25010 <RndStartupTest.constprop.0+0x90>)
   24ff2:	f7ff fa15 	bl	24420 <CC_PalAbort>
   24ff6:	e7ee      	b.n	24fd6 <RndStartupTest.constprop.0+0x56>
   24ff8:	4806      	ldr	r0, [pc, #24]	; (25014 <RndStartupTest.constprop.0+0x94>)
   24ffa:	f7ff fa11 	bl	24420 <CC_PalAbort>
   24ffe:	e7e0      	b.n	24fc2 <RndStartupTest.constprop.0+0x42>
   25000:	20000808 	.word	0x20000808
   25004:	0002a8ec 	.word	0x0002a8ec
   25008:	20003d28 	.word	0x20003d28
   2500c:	0002a944 	.word	0x0002a944
   25010:	0002a924 	.word	0x0002a924
   25014:	0002a904 	.word	0x0002a904

00025018 <CC_LibInit>:
   25018:	b530      	push	{r4, r5, lr}
   2501a:	b083      	sub	sp, #12
   2501c:	f000 f85c 	bl	250d8 <CC_HalInit>
   25020:	b128      	cbz	r0, 2502e <CC_LibInit+0x16>
   25022:	f000 f8ab 	bl	2517c <CC_PalTerminate>
   25026:	2403      	movs	r4, #3
   25028:	4620      	mov	r0, r4
   2502a:	b003      	add	sp, #12
   2502c:	bd30      	pop	{r4, r5, pc}
   2502e:	f000 f877 	bl	25120 <CC_PalInit>
   25032:	b9d8      	cbnz	r0, 2506c <CC_LibInit+0x54>
   25034:	f000 f92e 	bl	25294 <CC_PalPowerSaveModeSelect>
   25038:	b9e0      	cbnz	r0, 25074 <CC_LibInit+0x5c>
   2503a:	4c22      	ldr	r4, [pc, #136]	; (250c4 <CC_LibInit+0xac>)
   2503c:	f8d4 3928 	ldr.w	r3, [r4, #2344]	; 0x928
   25040:	0e1b      	lsrs	r3, r3, #24
   25042:	2bf0      	cmp	r3, #240	; 0xf0
   25044:	d10a      	bne.n	2505c <CC_LibInit+0x44>
   25046:	f8d4 2a24 	ldr.w	r2, [r4, #2596]	; 0xa24
   2504a:	4b1f      	ldr	r3, [pc, #124]	; (250c8 <CC_LibInit+0xb0>)
   2504c:	429a      	cmp	r2, r3
   2504e:	d031      	beq.n	250b4 <CC_LibInit+0x9c>
   25050:	f000 f844 	bl	250dc <CC_HalTerminate>
   25054:	2407      	movs	r4, #7
   25056:	f000 f891 	bl	2517c <CC_PalTerminate>
   2505a:	e7e5      	b.n	25028 <CC_LibInit+0x10>
   2505c:	f000 f83e 	bl	250dc <CC_HalTerminate>
   25060:	f000 f88c 	bl	2517c <CC_PalTerminate>
   25064:	2406      	movs	r4, #6
   25066:	4620      	mov	r0, r4
   25068:	b003      	add	sp, #12
   2506a:	bd30      	pop	{r4, r5, pc}
   2506c:	2404      	movs	r4, #4
   2506e:	4620      	mov	r0, r4
   25070:	b003      	add	sp, #12
   25072:	bd30      	pop	{r4, r5, pc}
   25074:	f000 f832 	bl	250dc <CC_HalTerminate>
   25078:	f000 f880 	bl	2517c <CC_PalTerminate>
   2507c:	f7ff ff80 	bl	24f80 <RndStartupTest.constprop.0>
   25080:	4604      	mov	r4, r0
   25082:	b998      	cbnz	r0, 250ac <CC_LibInit+0x94>
   25084:	4d11      	ldr	r5, [pc, #68]	; (250cc <CC_LibInit+0xb4>)
   25086:	682b      	ldr	r3, [r5, #0]
   25088:	2b00      	cmp	r3, #0
   2508a:	d1cd      	bne.n	25028 <CC_LibInit+0x10>
   2508c:	4602      	mov	r2, r0
   2508e:	4601      	mov	r1, r0
   25090:	f7ff f9ea 	bl	24468 <nrf_cc3xx_platform_ctr_drbg_init>
   25094:	b950      	cbnz	r0, 250ac <CC_LibInit+0x94>
   25096:	490e      	ldr	r1, [pc, #56]	; (250d0 <CC_LibInit+0xb8>)
   25098:	ab01      	add	r3, sp, #4
   2509a:	2268      	movs	r2, #104	; 0x68
   2509c:	f7ff fa14 	bl	244c8 <nrf_cc3xx_platform_ctr_drbg_get>
   250a0:	b920      	cbnz	r0, 250ac <CC_LibInit+0x94>
   250a2:	4b0c      	ldr	r3, [pc, #48]	; (250d4 <CC_LibInit+0xbc>)
   250a4:	602b      	str	r3, [r5, #0]
   250a6:	4620      	mov	r0, r4
   250a8:	b003      	add	sp, #12
   250aa:	bd30      	pop	{r4, r5, pc}
   250ac:	2405      	movs	r4, #5
   250ae:	4620      	mov	r0, r4
   250b0:	b003      	add	sp, #12
   250b2:	bd30      	pop	{r4, r5, pc}
   250b4:	2001      	movs	r0, #1
   250b6:	f000 f8ed 	bl	25294 <CC_PalPowerSaveModeSelect>
   250ba:	2800      	cmp	r0, #0
   250bc:	d1da      	bne.n	25074 <CC_LibInit+0x5c>
   250be:	f8c4 0a0c 	str.w	r0, [r4, #2572]	; 0xa0c
   250c2:	e7db      	b.n	2507c <CC_LibInit+0x64>
   250c4:	5002b000 	.word	0x5002b000
   250c8:	20e00000 	.word	0x20e00000
   250cc:	20003f48 	.word	0x20003f48
   250d0:	20003f4c 	.word	0x20003f4c
   250d4:	5a5aea5a 	.word	0x5a5aea5a

000250d8 <CC_HalInit>:
   250d8:	2000      	movs	r0, #0
   250da:	4770      	bx	lr

000250dc <CC_HalTerminate>:
   250dc:	2000      	movs	r0, #0
   250de:	4770      	bx	lr

000250e0 <CC_HalClearInterruptBit>:
   250e0:	0543      	lsls	r3, r0, #21
   250e2:	d504      	bpl.n	250ee <CC_HalClearInterruptBit+0xe>
   250e4:	4b04      	ldr	r3, [pc, #16]	; (250f8 <CC_HalClearInterruptBit+0x18>)
   250e6:	f04f 32ff 	mov.w	r2, #4294967295
   250ea:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   250ee:	4b02      	ldr	r3, [pc, #8]	; (250f8 <CC_HalClearInterruptBit+0x18>)
   250f0:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
   250f4:	4770      	bx	lr
   250f6:	bf00      	nop
   250f8:	5002b000 	.word	0x5002b000

000250fc <CC_HalMaskInterrupt>:
   250fc:	4b01      	ldr	r3, [pc, #4]	; (25104 <CC_HalMaskInterrupt+0x8>)
   250fe:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
   25102:	4770      	bx	lr
   25104:	5002b000 	.word	0x5002b000

00025108 <CC_HalWaitInterrupt>:
   25108:	b108      	cbz	r0, 2510e <CC_HalWaitInterrupt+0x6>
   2510a:	f000 b86b 	b.w	251e4 <CC_PalWaitInterrupt>
   2510e:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   25112:	4770      	bx	lr

00025114 <CC_HalWaitInterruptRND>:
   25114:	b108      	cbz	r0, 2511a <CC_HalWaitInterruptRND+0x6>
   25116:	f000 b84f 	b.w	251b8 <CC_PalWaitInterruptRND>
   2511a:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   2511e:	4770      	bx	lr

00025120 <CC_PalInit>:
   25120:	b510      	push	{r4, lr}
   25122:	4811      	ldr	r0, [pc, #68]	; (25168 <CC_PalInit+0x48>)
   25124:	f000 f872 	bl	2520c <CC_PalMutexCreate>
   25128:	b100      	cbz	r0, 2512c <CC_PalInit+0xc>
   2512a:	bd10      	pop	{r4, pc}
   2512c:	480f      	ldr	r0, [pc, #60]	; (2516c <CC_PalInit+0x4c>)
   2512e:	f000 f86d 	bl	2520c <CC_PalMutexCreate>
   25132:	2800      	cmp	r0, #0
   25134:	d1f9      	bne.n	2512a <CC_PalInit+0xa>
   25136:	4c0e      	ldr	r4, [pc, #56]	; (25170 <CC_PalInit+0x50>)
   25138:	4620      	mov	r0, r4
   2513a:	f000 f867 	bl	2520c <CC_PalMutexCreate>
   2513e:	2800      	cmp	r0, #0
   25140:	d1f3      	bne.n	2512a <CC_PalInit+0xa>
   25142:	4b0c      	ldr	r3, [pc, #48]	; (25174 <CC_PalInit+0x54>)
   25144:	480c      	ldr	r0, [pc, #48]	; (25178 <CC_PalInit+0x58>)
   25146:	601c      	str	r4, [r3, #0]
   25148:	f000 f860 	bl	2520c <CC_PalMutexCreate>
   2514c:	4601      	mov	r1, r0
   2514e:	2800      	cmp	r0, #0
   25150:	d1eb      	bne.n	2512a <CC_PalInit+0xa>
   25152:	f000 f82d 	bl	251b0 <CC_PalDmaInit>
   25156:	4604      	mov	r4, r0
   25158:	b108      	cbz	r0, 2515e <CC_PalInit+0x3e>
   2515a:	4620      	mov	r0, r4
   2515c:	bd10      	pop	{r4, pc}
   2515e:	f000 f87b 	bl	25258 <CC_PalPowerSaveModeInit>
   25162:	4620      	mov	r0, r4
   25164:	e7fa      	b.n	2515c <CC_PalInit+0x3c>
   25166:	bf00      	nop
   25168:	20000818 	.word	0x20000818
   2516c:	20000814 	.word	0x20000814
   25170:	20000810 	.word	0x20000810
   25174:	20000808 	.word	0x20000808
   25178:	2000080c 	.word	0x2000080c

0002517c <CC_PalTerminate>:
   2517c:	b508      	push	{r3, lr}
   2517e:	4808      	ldr	r0, [pc, #32]	; (251a0 <CC_PalTerminate+0x24>)
   25180:	f000 f84e 	bl	25220 <CC_PalMutexDestroy>
   25184:	4807      	ldr	r0, [pc, #28]	; (251a4 <CC_PalTerminate+0x28>)
   25186:	f000 f84b 	bl	25220 <CC_PalMutexDestroy>
   2518a:	4807      	ldr	r0, [pc, #28]	; (251a8 <CC_PalTerminate+0x2c>)
   2518c:	f000 f848 	bl	25220 <CC_PalMutexDestroy>
   25190:	4806      	ldr	r0, [pc, #24]	; (251ac <CC_PalTerminate+0x30>)
   25192:	f000 f845 	bl	25220 <CC_PalMutexDestroy>
   25196:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2519a:	f000 b80b 	b.w	251b4 <CC_PalDmaTerminate>
   2519e:	bf00      	nop
   251a0:	20000818 	.word	0x20000818
   251a4:	20000814 	.word	0x20000814
   251a8:	20000810 	.word	0x20000810
   251ac:	2000080c 	.word	0x2000080c

000251b0 <CC_PalDmaInit>:
   251b0:	2000      	movs	r0, #0
   251b2:	4770      	bx	lr

000251b4 <CC_PalDmaTerminate>:
   251b4:	4770      	bx	lr
   251b6:	bf00      	nop

000251b8 <CC_PalWaitInterruptRND>:
   251b8:	b410      	push	{r4}
   251ba:	4c09      	ldr	r4, [pc, #36]	; (251e0 <CC_PalWaitInterruptRND+0x28>)
   251bc:	4602      	mov	r2, r0
   251be:	f8d4 3a00 	ldr.w	r3, [r4, #2560]	; 0xa00
   251c2:	4213      	tst	r3, r2
   251c4:	d0fb      	beq.n	251be <CC_PalWaitInterruptRND+0x6>
   251c6:	b121      	cbz	r1, 251d2 <CC_PalWaitInterruptRND+0x1a>
   251c8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   251cc:	600b      	str	r3, [r1, #0]
   251ce:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   251d2:	4b03      	ldr	r3, [pc, #12]	; (251e0 <CC_PalWaitInterruptRND+0x28>)
   251d4:	f8c3 2a08 	str.w	r2, [r3, #2568]	; 0xa08
   251d8:	2000      	movs	r0, #0
   251da:	f85d 4b04 	ldr.w	r4, [sp], #4
   251de:	4770      	bx	lr
   251e0:	5002b000 	.word	0x5002b000

000251e4 <CC_PalWaitInterrupt>:
   251e4:	4a04      	ldr	r2, [pc, #16]	; (251f8 <CC_PalWaitInterrupt+0x14>)
   251e6:	f8d2 3a00 	ldr.w	r3, [r2, #2560]	; 0xa00
   251ea:	4218      	tst	r0, r3
   251ec:	d0fb      	beq.n	251e6 <CC_PalWaitInterrupt+0x2>
   251ee:	f8c2 0a08 	str.w	r0, [r2, #2568]	; 0xa08
   251f2:	2000      	movs	r0, #0
   251f4:	4770      	bx	lr
   251f6:	bf00      	nop
   251f8:	5002b000 	.word	0x5002b000

000251fc <CC_PalMemCopyPlat>:
   251fc:	f002 bbff 	b.w	279fe <memmove>

00025200 <CC_PalMemSetPlat>:
   25200:	f002 bc1f 	b.w	27a42 <memset>

00025204 <CC_PalMemSetZeroPlat>:
   25204:	460a      	mov	r2, r1
   25206:	2100      	movs	r1, #0
   25208:	f002 bc1b 	b.w	27a42 <memset>

0002520c <CC_PalMutexCreate>:
   2520c:	b508      	push	{r3, lr}
   2520e:	4b03      	ldr	r3, [pc, #12]	; (2521c <CC_PalMutexCreate+0x10>)
   25210:	6802      	ldr	r2, [r0, #0]
   25212:	681b      	ldr	r3, [r3, #0]
   25214:	6810      	ldr	r0, [r2, #0]
   25216:	4798      	blx	r3
   25218:	2000      	movs	r0, #0
   2521a:	bd08      	pop	{r3, pc}
   2521c:	200007d4 	.word	0x200007d4

00025220 <CC_PalMutexDestroy>:
   25220:	b508      	push	{r3, lr}
   25222:	4b03      	ldr	r3, [pc, #12]	; (25230 <CC_PalMutexDestroy+0x10>)
   25224:	6802      	ldr	r2, [r0, #0]
   25226:	685b      	ldr	r3, [r3, #4]
   25228:	6810      	ldr	r0, [r2, #0]
   2522a:	4798      	blx	r3
   2522c:	2000      	movs	r0, #0
   2522e:	bd08      	pop	{r3, pc}
   25230:	200007d4 	.word	0x200007d4

00025234 <CC_PalMutexLock>:
   25234:	4b02      	ldr	r3, [pc, #8]	; (25240 <CC_PalMutexLock+0xc>)
   25236:	6802      	ldr	r2, [r0, #0]
   25238:	689b      	ldr	r3, [r3, #8]
   2523a:	6810      	ldr	r0, [r2, #0]
   2523c:	4718      	bx	r3
   2523e:	bf00      	nop
   25240:	200007d4 	.word	0x200007d4

00025244 <CC_PalMutexUnlock>:
   25244:	b508      	push	{r3, lr}
   25246:	4b03      	ldr	r3, [pc, #12]	; (25254 <CC_PalMutexUnlock+0x10>)
   25248:	6802      	ldr	r2, [r0, #0]
   2524a:	68db      	ldr	r3, [r3, #12]
   2524c:	6810      	ldr	r0, [r2, #0]
   2524e:	4798      	blx	r3
   25250:	2000      	movs	r0, #0
   25252:	bd08      	pop	{r3, pc}
   25254:	200007d4 	.word	0x200007d4

00025258 <CC_PalPowerSaveModeInit>:
   25258:	b570      	push	{r4, r5, r6, lr}
   2525a:	4c09      	ldr	r4, [pc, #36]	; (25280 <CC_PalPowerSaveModeInit+0x28>)
   2525c:	4d09      	ldr	r5, [pc, #36]	; (25284 <CC_PalPowerSaveModeInit+0x2c>)
   2525e:	6920      	ldr	r0, [r4, #16]
   25260:	68ab      	ldr	r3, [r5, #8]
   25262:	4798      	blx	r3
   25264:	b118      	cbz	r0, 2526e <CC_PalPowerSaveModeInit+0x16>
   25266:	4b08      	ldr	r3, [pc, #32]	; (25288 <CC_PalPowerSaveModeInit+0x30>)
   25268:	4808      	ldr	r0, [pc, #32]	; (2528c <CC_PalPowerSaveModeInit+0x34>)
   2526a:	685b      	ldr	r3, [r3, #4]
   2526c:	4798      	blx	r3
   2526e:	4a08      	ldr	r2, [pc, #32]	; (25290 <CC_PalPowerSaveModeInit+0x38>)
   25270:	68eb      	ldr	r3, [r5, #12]
   25272:	6920      	ldr	r0, [r4, #16]
   25274:	2100      	movs	r1, #0
   25276:	6011      	str	r1, [r2, #0]
   25278:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2527c:	4718      	bx	r3
   2527e:	bf00      	nop
   25280:	200007c0 	.word	0x200007c0
   25284:	200007d4 	.word	0x200007d4
   25288:	200007b8 	.word	0x200007b8
   2528c:	0002a95c 	.word	0x0002a95c
   25290:	20003fb4 	.word	0x20003fb4

00025294 <CC_PalPowerSaveModeSelect>:
   25294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25296:	4d1a      	ldr	r5, [pc, #104]	; (25300 <CC_PalPowerSaveModeSelect+0x6c>)
   25298:	4e1a      	ldr	r6, [pc, #104]	; (25304 <CC_PalPowerSaveModeSelect+0x70>)
   2529a:	4604      	mov	r4, r0
   2529c:	68b2      	ldr	r2, [r6, #8]
   2529e:	6928      	ldr	r0, [r5, #16]
   252a0:	4790      	blx	r2
   252a2:	b9e8      	cbnz	r0, 252e0 <CC_PalPowerSaveModeSelect+0x4c>
   252a4:	4f18      	ldr	r7, [pc, #96]	; (25308 <CC_PalPowerSaveModeSelect+0x74>)
   252a6:	683b      	ldr	r3, [r7, #0]
   252a8:	b14c      	cbz	r4, 252be <CC_PalPowerSaveModeSelect+0x2a>
   252aa:	b1a3      	cbz	r3, 252d6 <CC_PalPowerSaveModeSelect+0x42>
   252ac:	2b01      	cmp	r3, #1
   252ae:	d019      	beq.n	252e4 <CC_PalPowerSaveModeSelect+0x50>
   252b0:	3b01      	subs	r3, #1
   252b2:	603b      	str	r3, [r7, #0]
   252b4:	6928      	ldr	r0, [r5, #16]
   252b6:	68f3      	ldr	r3, [r6, #12]
   252b8:	4798      	blx	r3
   252ba:	2000      	movs	r0, #0
   252bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   252be:	b943      	cbnz	r3, 252d2 <CC_PalPowerSaveModeSelect+0x3e>
   252c0:	4a12      	ldr	r2, [pc, #72]	; (2530c <CC_PalPowerSaveModeSelect+0x78>)
   252c2:	2101      	movs	r1, #1
   252c4:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
   252c8:	4911      	ldr	r1, [pc, #68]	; (25310 <CC_PalPowerSaveModeSelect+0x7c>)
   252ca:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
   252ce:	2a00      	cmp	r2, #0
   252d0:	d1fb      	bne.n	252ca <CC_PalPowerSaveModeSelect+0x36>
   252d2:	3301      	adds	r3, #1
   252d4:	603b      	str	r3, [r7, #0]
   252d6:	68f3      	ldr	r3, [r6, #12]
   252d8:	6928      	ldr	r0, [r5, #16]
   252da:	4798      	blx	r3
   252dc:	2000      	movs	r0, #0
   252de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   252e0:	480c      	ldr	r0, [pc, #48]	; (25314 <CC_PalPowerSaveModeSelect+0x80>)
   252e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   252e4:	4a0a      	ldr	r2, [pc, #40]	; (25310 <CC_PalPowerSaveModeSelect+0x7c>)
   252e6:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   252ea:	2b00      	cmp	r3, #0
   252ec:	d1fb      	bne.n	252e6 <CC_PalPowerSaveModeSelect+0x52>
   252ee:	4a07      	ldr	r2, [pc, #28]	; (2530c <CC_PalPowerSaveModeSelect+0x78>)
   252f0:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   252f4:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   252f8:	f7ff ff00 	bl	250fc <CC_HalMaskInterrupt>
   252fc:	683b      	ldr	r3, [r7, #0]
   252fe:	e7d7      	b.n	252b0 <CC_PalPowerSaveModeSelect+0x1c>
   25300:	200007c0 	.word	0x200007c0
   25304:	200007d4 	.word	0x200007d4
   25308:	20003fb4 	.word	0x20003fb4
   2530c:	5002a000 	.word	0x5002a000
   25310:	5002b000 	.word	0x5002b000
   25314:	ffff8fe9 	.word	0xffff8fe9

00025318 <mutex_init>:
   25318:	4b01      	ldr	r3, [pc, #4]	; (25320 <mutex_init+0x8>)
   2531a:	681b      	ldr	r3, [r3, #0]
   2531c:	4718      	bx	r3
   2531e:	bf00      	nop
   25320:	200007d4 	.word	0x200007d4

00025324 <mutex_lock>:
   25324:	4b01      	ldr	r3, [pc, #4]	; (2532c <mutex_lock+0x8>)
   25326:	689b      	ldr	r3, [r3, #8]
   25328:	4718      	bx	r3
   2532a:	bf00      	nop
   2532c:	200007d4 	.word	0x200007d4

00025330 <mutex_unlock>:
   25330:	4b01      	ldr	r3, [pc, #4]	; (25338 <mutex_unlock+0x8>)
   25332:	68db      	ldr	r3, [r3, #12]
   25334:	4718      	bx	r3
   25336:	bf00      	nop
   25338:	200007d4 	.word	0x200007d4

0002533c <startTrngHW>:
   2533c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25340:	2800      	cmp	r0, #0
   25342:	d078      	beq.n	25436 <startTrngHW+0xfa>
   25344:	460c      	mov	r4, r1
   25346:	2900      	cmp	r1, #0
   25348:	d075      	beq.n	25436 <startTrngHW+0xfa>
   2534a:	461d      	mov	r5, r3
   2534c:	2b00      	cmp	r3, #0
   2534e:	d072      	beq.n	25436 <startTrngHW+0xfa>
   25350:	4607      	mov	r7, r0
   25352:	b11a      	cbz	r2, 2535c <startTrngHW+0x20>
   25354:	2201      	movs	r2, #1
   25356:	2300      	movs	r3, #0
   25358:	602a      	str	r2, [r5, #0]
   2535a:	6003      	str	r3, [r0, #0]
   2535c:	682b      	ldr	r3, [r5, #0]
   2535e:	2b00      	cmp	r3, #0
   25360:	d064      	beq.n	2542c <startTrngHW+0xf0>
   25362:	4629      	mov	r1, r5
   25364:	4620      	mov	r0, r4
   25366:	f000 fddb 	bl	25f20 <LLF_RND_GetFastestRosc>
   2536a:	4680      	mov	r8, r0
   2536c:	2800      	cmp	r0, #0
   2536e:	d15f      	bne.n	25430 <startTrngHW+0xf4>
   25370:	6828      	ldr	r0, [r5, #0]
   25372:	4621      	mov	r1, r4
   25374:	f000 fdba 	bl	25eec <LLF_RND_GetRoscSampleCnt>
   25378:	4680      	mov	r8, r0
   2537a:	2800      	cmp	r0, #0
   2537c:	d158      	bne.n	25430 <startTrngHW+0xf4>
   2537e:	682b      	ldr	r3, [r5, #0]
   25380:	2b08      	cmp	r3, #8
   25382:	d06c      	beq.n	2545e <startTrngHW+0x122>
   25384:	2b04      	cmp	r3, #4
   25386:	d06d      	beq.n	25464 <startTrngHW+0x128>
   25388:	f1a3 0902 	sub.w	r9, r3, #2
   2538c:	fab9 f989 	clz	r9, r9
   25390:	ea4f 1959 	mov.w	r9, r9, lsr #5
   25394:	4e35      	ldr	r6, [pc, #212]	; (2546c <startTrngHW+0x130>)
   25396:	2101      	movs	r1, #1
   25398:	f8c6 11c4 	str.w	r1, [r6, #452]	; 0x1c4
   2539c:	f8c6 1140 	str.w	r1, [r6, #320]	; 0x140
   253a0:	f8c6 11c4 	str.w	r1, [r6, #452]	; 0x1c4
   253a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   253a6:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
   253aa:	f8d6 2130 	ldr.w	r2, [r6, #304]	; 0x130
   253ae:	4293      	cmp	r3, r2
   253b0:	d1f6      	bne.n	253a0 <startTrngHW+0x64>
   253b2:	f04f 0a00 	mov.w	sl, #0
   253b6:	f04f 30ff 	mov.w	r0, #4294967295
   253ba:	f8c6 a12c 	str.w	sl, [r6, #300]	; 0x12c
   253be:	f7ff fe8f 	bl	250e0 <CC_HalClearInterruptBit>
   253c2:	f06f 031b 	mvn.w	r3, #27
   253c6:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
   253ca:	4650      	mov	r0, sl
   253cc:	f7ff fe96 	bl	250fc <CC_HalMaskInterrupt>
   253d0:	f8c6 910c 	str.w	r9, [r6, #268]	; 0x10c
   253d4:	f8d6 0a04 	ldr.w	r0, [r6, #2564]	; 0xa04
   253d8:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   253dc:	f7ff fe8e 	bl	250fc <CC_HalMaskInterrupt>
   253e0:	230a      	movs	r3, #10
   253e2:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
   253e6:	9b08      	ldr	r3, [sp, #32]
   253e8:	2b01      	cmp	r3, #1
   253ea:	d029      	beq.n	25440 <startTrngHW+0x104>
   253ec:	6923      	ldr	r3, [r4, #16]
   253ee:	4a20      	ldr	r2, [pc, #128]	; (25470 <startTrngHW+0x134>)
   253f0:	fba2 2303 	umull	r2, r3, r2, r3
   253f4:	091b      	lsrs	r3, r3, #4
   253f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
   253f8:	fb02 f303 	mul.w	r3, r2, r3
   253fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   25400:	4a1a      	ldr	r2, [pc, #104]	; (2546c <startTrngHW+0x130>)
   25402:	03db      	lsls	r3, r3, #15
   25404:	099b      	lsrs	r3, r3, #6
   25406:	f8c2 31d8 	str.w	r3, [r2, #472]	; 0x1d8
   2540a:	2301      	movs	r3, #1
   2540c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
   25410:	683b      	ldr	r3, [r7, #0]
   25412:	682a      	ldr	r2, [r5, #0]
   25414:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   25418:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   2541c:	603b      	str	r3, [r7, #0]
   2541e:	682a      	ldr	r2, [r5, #0]
   25420:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25424:	603b      	str	r3, [r7, #0]
   25426:	4640      	mov	r0, r8
   25428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2542c:	f8df 8044 	ldr.w	r8, [pc, #68]	; 25474 <startTrngHW+0x138>
   25430:	4640      	mov	r0, r8
   25432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25436:	f8df 8040 	ldr.w	r8, [pc, #64]	; 25478 <startTrngHW+0x13c>
   2543a:	4640      	mov	r0, r8
   2543c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25440:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25444:	f8d3 2c0c 	ldr.w	r2, [r3, #3084]	; 0xc0c
   25448:	3201      	adds	r2, #1
   2544a:	d006      	beq.n	2545a <startTrngHW+0x11e>
   2544c:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   25450:	4a07      	ldr	r2, [pc, #28]	; (25470 <startTrngHW+0x134>)
   25452:	fba2 2303 	umull	r2, r3, r2, r3
   25456:	091b      	lsrs	r3, r3, #4
   25458:	e7cd      	b.n	253f6 <startTrngHW+0xba>
   2545a:	2316      	movs	r3, #22
   2545c:	e7cb      	b.n	253f6 <startTrngHW+0xba>
   2545e:	f04f 0903 	mov.w	r9, #3
   25462:	e797      	b.n	25394 <startTrngHW+0x58>
   25464:	f04f 0902 	mov.w	r9, #2
   25468:	e794      	b.n	25394 <startTrngHW+0x58>
   2546a:	bf00      	nop
   2546c:	5002b000 	.word	0x5002b000
   25470:	aaaaaaab 	.word	0xaaaaaaab
   25474:	00f10c31 	.word	0x00f10c31
   25478:	00f10c35 	.word	0x00f10c35

0002547c <LLF_RND_RepetitionCounterTest>:
   2547c:	b350      	cbz	r0, 254d4 <LLF_RND_RepetitionCounterTest+0x58>
   2547e:	1e4b      	subs	r3, r1, #1
   25480:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
   25484:	d226      	bcs.n	254d4 <LLF_RND_RepetitionCounterTest+0x58>
   25486:	f04f 0c00 	mov.w	ip, #0
   2548a:	b530      	push	{r4, r5, lr}
   2548c:	00cd      	lsls	r5, r1, #3
   2548e:	46e6      	mov	lr, ip
   25490:	4664      	mov	r4, ip
   25492:	0963      	lsrs	r3, r4, #5
   25494:	f004 011f 	and.w	r1, r4, #31
   25498:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   2549c:	291f      	cmp	r1, #31
   2549e:	fa23 f301 	lsr.w	r3, r3, r1
   254a2:	d006      	beq.n	254b2 <LLF_RND_RepetitionCounterTest+0x36>
   254a4:	f003 0301 	and.w	r3, r3, #1
   254a8:	b91c      	cbnz	r4, 254b2 <LLF_RND_RepetitionCounterTest+0x36>
   254aa:	2401      	movs	r4, #1
   254ac:	469e      	mov	lr, r3
   254ae:	46a4      	mov	ip, r4
   254b0:	e7ef      	b.n	25492 <LLF_RND_RepetitionCounterTest+0x16>
   254b2:	459e      	cmp	lr, r3
   254b4:	f104 0401 	add.w	r4, r4, #1
   254b8:	d006      	beq.n	254c8 <LLF_RND_RepetitionCounterTest+0x4c>
   254ba:	469e      	mov	lr, r3
   254bc:	f04f 0c01 	mov.w	ip, #1
   254c0:	42ac      	cmp	r4, r5
   254c2:	d1e6      	bne.n	25492 <LLF_RND_RepetitionCounterTest+0x16>
   254c4:	2000      	movs	r0, #0
   254c6:	bd30      	pop	{r4, r5, pc}
   254c8:	f10c 0c01 	add.w	ip, ip, #1
   254cc:	4594      	cmp	ip, r2
   254ce:	d1f7      	bne.n	254c0 <LLF_RND_RepetitionCounterTest+0x44>
   254d0:	4801      	ldr	r0, [pc, #4]	; (254d8 <LLF_RND_RepetitionCounterTest+0x5c>)
   254d2:	bd30      	pop	{r4, r5, pc}
   254d4:	4800      	ldr	r0, [pc, #0]	; (254d8 <LLF_RND_RepetitionCounterTest+0x5c>)
   254d6:	4770      	bx	lr
   254d8:	00f10c36 	.word	0x00f10c36

000254dc <LLF_RND_AdaptiveProportionTest>:
   254dc:	b3c8      	cbz	r0, 25552 <LLF_RND_AdaptiveProportionTest+0x76>
   254de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   254e2:	1e4c      	subs	r4, r1, #1
   254e4:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   254e8:	d21c      	bcs.n	25524 <LLF_RND_AdaptiveProportionTest+0x48>
   254ea:	b1db      	cbz	r3, 25524 <LLF_RND_AdaptiveProportionTest+0x48>
   254ec:	b1d2      	cbz	r2, 25524 <LLF_RND_AdaptiveProportionTest+0x48>
   254ee:	f04f 0e00 	mov.w	lr, #0
   254f2:	00cf      	lsls	r7, r1, #3
   254f4:	4676      	mov	r6, lr
   254f6:	46f0      	mov	r8, lr
   254f8:	4675      	mov	r5, lr
   254fa:	f103 39ff 	add.w	r9, r3, #4294967295
   254fe:	096c      	lsrs	r4, r5, #5
   25500:	f005 011f 	and.w	r1, r5, #31
   25504:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   25508:	291f      	cmp	r1, #31
   2550a:	fa24 fc01 	lsr.w	ip, r4, r1
   2550e:	d00c      	beq.n	2552a <LLF_RND_AdaptiveProportionTest+0x4e>
   25510:	f00c 0c01 	and.w	ip, ip, #1
   25514:	b94d      	cbnz	r5, 2552a <LLF_RND_AdaptiveProportionTest+0x4e>
   25516:	2601      	movs	r6, #1
   25518:	46e0      	mov	r8, ip
   2551a:	4635      	mov	r5, r6
   2551c:	46b6      	mov	lr, r6
   2551e:	e7ee      	b.n	254fe <LLF_RND_AdaptiveProportionTest+0x22>
   25520:	4296      	cmp	r6, r2
   25522:	d918      	bls.n	25556 <LLF_RND_AdaptiveProportionTest+0x7a>
   25524:	480d      	ldr	r0, [pc, #52]	; (2555c <LLF_RND_AdaptiveProportionTest+0x80>)
   25526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2552a:	4573      	cmp	r3, lr
   2552c:	d00c      	beq.n	25548 <LLF_RND_AdaptiveProportionTest+0x6c>
   2552e:	45c4      	cmp	ip, r8
   25530:	bf08      	it	eq
   25532:	3601      	addeq	r6, #1
   25534:	45f1      	cmp	r9, lr
   25536:	d0f3      	beq.n	25520 <LLF_RND_AdaptiveProportionTest+0x44>
   25538:	f10e 0e01 	add.w	lr, lr, #1
   2553c:	3501      	adds	r5, #1
   2553e:	42bd      	cmp	r5, r7
   25540:	d1dd      	bne.n	254fe <LLF_RND_AdaptiveProportionTest+0x22>
   25542:	2000      	movs	r0, #0
   25544:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25548:	f04f 0e01 	mov.w	lr, #1
   2554c:	46e0      	mov	r8, ip
   2554e:	4676      	mov	r6, lr
   25550:	e7f4      	b.n	2553c <LLF_RND_AdaptiveProportionTest+0x60>
   25552:	4802      	ldr	r0, [pc, #8]	; (2555c <LLF_RND_AdaptiveProportionTest+0x80>)
   25554:	4770      	bx	lr
   25556:	469e      	mov	lr, r3
   25558:	e7f0      	b.n	2553c <LLF_RND_AdaptiveProportionTest+0x60>
   2555a:	bf00      	nop
   2555c:	00f10c37 	.word	0x00f10c37

00025560 <getTrngSource>:
   25560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25564:	b091      	sub	sp, #68	; 0x44
   25566:	460d      	mov	r5, r1
   25568:	e9dd 411b 	ldrd	r4, r1, [sp, #108]	; 0x6c
   2556c:	4682      	mov	sl, r0
   2556e:	2900      	cmp	r1, #0
   25570:	d16e      	bne.n	25650 <getTrngSource+0xf0>
   25572:	6928      	ldr	r0, [r5, #16]
   25574:	9006      	str	r0, [sp, #24]
   25576:	981a      	ldr	r0, [sp, #104]	; 0x68
   25578:	601c      	str	r4, [r3, #0]
   2557a:	2300      	movs	r3, #0
   2557c:	6003      	str	r3, [r0, #0]
   2557e:	2a00      	cmp	r2, #0
   25580:	f000 812e 	beq.w	257e0 <getTrngSource+0x280>
   25584:	4b9c      	ldr	r3, [pc, #624]	; (257f8 <getTrngSource+0x298>)
   25586:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   25588:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   2558c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   25590:	429a      	cmp	r2, r3
   25592:	d169      	bne.n	25668 <getTrngSource+0x108>
   25594:	290a      	cmp	r1, #10
   25596:	d167      	bne.n	25668 <getTrngSource+0x108>
   25598:	f89a 3003 	ldrb.w	r3, [sl, #3]
   2559c:	9308      	str	r3, [sp, #32]
   2559e:	f104 0308 	add.w	r3, r4, #8
   255a2:	9906      	ldr	r1, [sp, #24]
   255a4:	9307      	str	r3, [sp, #28]
   255a6:	4b95      	ldr	r3, [pc, #596]	; (257fc <getTrngSource+0x29c>)
   255a8:	4c93      	ldr	r4, [pc, #588]	; (257f8 <getTrngSource+0x298>)
   255aa:	fba3 2301 	umull	r2, r3, r3, r1
   255ae:	089b      	lsrs	r3, r3, #2
   255b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   255b4:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
   255b8:	9303      	str	r3, [sp, #12]
   255ba:	2304      	movs	r3, #4
   255bc:	9305      	str	r3, [sp, #20]
   255be:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   255c0:	9e06      	ldr	r6, [sp, #24]
   255c2:	601e      	str	r6, [r3, #0]
   255c4:	2e00      	cmp	r6, #0
   255c6:	f000 80e9 	beq.w	2579c <getTrngSource+0x23c>
   255ca:	2700      	movs	r7, #0
   255cc:	f000 fcb8 	bl	25f40 <LLF_RND_TurnOffTrng>
   255d0:	9709      	str	r7, [sp, #36]	; 0x24
   255d2:	f1ba 0f00 	cmp.w	sl, #0
   255d6:	f000 80d5 	beq.w	25784 <getTrngSource+0x224>
   255da:	f8dd 801c 	ldr.w	r8, [sp, #28]
   255de:	f04f 0901 	mov.w	r9, #1
   255e2:	2d00      	cmp	r5, #0
   255e4:	f000 80ce 	beq.w	25784 <getTrngSource+0x224>
   255e8:	9b08      	ldr	r3, [sp, #32]
   255ea:	2b00      	cmp	r3, #0
   255ec:	d03e      	beq.n	2566c <getTrngSource+0x10c>
   255ee:	a908      	add	r1, sp, #32
   255f0:	4628      	mov	r0, r5
   255f2:	f000 fc95 	bl	25f20 <LLF_RND_GetFastestRosc>
   255f6:	2800      	cmp	r0, #0
   255f8:	d03a      	beq.n	25670 <getTrngSource+0x110>
   255fa:	4b81      	ldr	r3, [pc, #516]	; (25800 <getTrngSource+0x2a0>)
   255fc:	4298      	cmp	r0, r3
   255fe:	d020      	beq.n	25642 <getTrngSource+0xe2>
   25600:	9b08      	ldr	r3, [sp, #32]
   25602:	2b08      	cmp	r3, #8
   25604:	f000 80e4 	beq.w	257d0 <getTrngSource+0x270>
   25608:	005b      	lsls	r3, r3, #1
   2560a:	2200      	movs	r2, #0
   2560c:	9308      	str	r3, [sp, #32]
   2560e:	9200      	str	r2, [sp, #0]
   25610:	ab08      	add	r3, sp, #32
   25612:	4629      	mov	r1, r5
   25614:	4650      	mov	r0, sl
   25616:	f7ff fe91 	bl	2533c <startTrngHW>
   2561a:	4b7a      	ldr	r3, [pc, #488]	; (25804 <getTrngSource+0x2a4>)
   2561c:	4298      	cmp	r0, r3
   2561e:	f000 80d3 	beq.w	257c8 <getTrngSource+0x268>
   25622:	b970      	cbnz	r0, 25642 <getTrngSource+0xe2>
   25624:	f8da 2000 	ldr.w	r2, [sl]
   25628:	0a13      	lsrs	r3, r2, #8
   2562a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   2562e:	4313      	orrs	r3, r2
   25630:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   25634:	f8ca 3000 	str.w	r3, [sl]
   25638:	9b05      	ldr	r3, [sp, #20]
   2563a:	3b01      	subs	r3, #1
   2563c:	9305      	str	r3, [sp, #20]
   2563e:	d1be      	bne.n	255be <getTrngSource+0x5e>
   25640:	2000      	movs	r0, #0
   25642:	9003      	str	r0, [sp, #12]
   25644:	f000 fc7c 	bl	25f40 <LLF_RND_TurnOffTrng>
   25648:	9803      	ldr	r0, [sp, #12]
   2564a:	b011      	add	sp, #68	; 0x44
   2564c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25650:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   25654:	f8d0 6c0c 	ldr.w	r6, [r0, #3084]	; 0xc0c
   25658:	3601      	adds	r6, #1
   2565a:	bf14      	ite	ne
   2565c:	f8d0 0c0c 	ldrne.w	r0, [r0, #3084]	; 0xc0c
   25660:	f44f 7004 	moveq.w	r0, #528	; 0x210
   25664:	9006      	str	r0, [sp, #24]
   25666:	e786      	b.n	25576 <getTrngSource+0x16>
   25668:	4867      	ldr	r0, [pc, #412]	; (25808 <getTrngSource+0x2a8>)
   2566a:	e7ea      	b.n	25642 <getTrngSource+0xe2>
   2566c:	4865      	ldr	r0, [pc, #404]	; (25804 <getTrngSource+0x2a4>)
   2566e:	e7c4      	b.n	255fa <getTrngSource+0x9a>
   25670:	9808      	ldr	r0, [sp, #32]
   25672:	4629      	mov	r1, r5
   25674:	f000 fc3a 	bl	25eec <LLF_RND_GetRoscSampleCnt>
   25678:	2800      	cmp	r0, #0
   2567a:	d1be      	bne.n	255fa <getTrngSource+0x9a>
   2567c:	9b08      	ldr	r3, [sp, #32]
   2567e:	2b08      	cmp	r3, #8
   25680:	f000 80a8 	beq.w	257d4 <getTrngSource+0x274>
   25684:	2b04      	cmp	r3, #4
   25686:	f000 80a8 	beq.w	257da <getTrngSource+0x27a>
   2568a:	f1a3 0302 	sub.w	r3, r3, #2
   2568e:	fab3 f383 	clz	r3, r3
   25692:	095b      	lsrs	r3, r3, #5
   25694:	9304      	str	r3, [sp, #16]
   25696:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   2569a:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
   2569e:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   256a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   256a4:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
   256a8:	f8d4 2130 	ldr.w	r2, [r4, #304]	; 0x130
   256ac:	4293      	cmp	r3, r2
   256ae:	d1f6      	bne.n	2569e <getTrngSource+0x13e>
   256b0:	f04f 0b00 	mov.w	fp, #0
   256b4:	f8c4 b12c 	str.w	fp, [r4, #300]	; 0x12c
   256b8:	f04f 30ff 	mov.w	r0, #4294967295
   256bc:	f7ff fd10 	bl	250e0 <CC_HalClearInterruptBit>
   256c0:	f06f 031b 	mvn.w	r3, #27
   256c4:	4658      	mov	r0, fp
   256c6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   256ca:	f7ff fd17 	bl	250fc <CC_HalMaskInterrupt>
   256ce:	9b04      	ldr	r3, [sp, #16]
   256d0:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
   256d4:	f8d4 0a04 	ldr.w	r0, [r4, #2564]	; 0xa04
   256d8:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   256dc:	f7ff fd0e 	bl	250fc <CC_HalMaskInterrupt>
   256e0:	230a      	movs	r3, #10
   256e2:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
   256e6:	692b      	ldr	r3, [r5, #16]
   256e8:	f1ab 3b55 	sub.w	fp, fp, #1431655765	; 0x55555555
   256ec:	fbab 2303 	umull	r2, r3, fp, r3
   256f0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   256f2:	091b      	lsrs	r3, r3, #4
   256f4:	fb02 f303 	mul.w	r3, r2, r3
   256f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   256fc:	03db      	lsls	r3, r3, #15
   256fe:	099b      	lsrs	r3, r3, #6
   25700:	f8c4 31d8 	str.w	r3, [r4, #472]	; 0x1d8
   25704:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
   25708:	f8da 3000 	ldr.w	r3, [sl]
   2570c:	9908      	ldr	r1, [sp, #32]
   2570e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
   25712:	020b      	lsls	r3, r1, #8
   25714:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   25718:	4313      	orrs	r3, r2
   2571a:	f8ca 3000 	str.w	r3, [sl]
   2571e:	a809      	add	r0, sp, #36	; 0x24
   25720:	f000 fbd4 	bl	25ecc <LLF_RND_WaitRngInterrupt>
   25724:	9b09      	ldr	r3, [sp, #36]	; 0x24
   25726:	f003 031a 	and.w	r3, r3, #26
   2572a:	4303      	orrs	r3, r0
   2572c:	f47f af68 	bne.w	25600 <getTrngSource+0xa0>
   25730:	fbab 3b06 	umull	r3, fp, fp, r6
   25734:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   25738:	930a      	str	r3, [sp, #40]	; 0x28
   2573a:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   2573e:	930b      	str	r3, [sp, #44]	; 0x2c
   25740:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   25744:	930c      	str	r3, [sp, #48]	; 0x30
   25746:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   2574a:	930d      	str	r3, [sp, #52]	; 0x34
   2574c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   25750:	930e      	str	r3, [sp, #56]	; 0x38
   25752:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   25756:	930f      	str	r3, [sp, #60]	; 0x3c
   25758:	ebb7 0f9b 	cmp.w	r7, fp, lsr #2
   2575c:	d101      	bne.n	25762 <getTrngSource+0x202>
   2575e:	9b03      	ldr	r3, [sp, #12]
   25760:	b993      	cbnz	r3, 25788 <getTrngSource+0x228>
   25762:	4640      	mov	r0, r8
   25764:	2218      	movs	r2, #24
   25766:	a90a      	add	r1, sp, #40	; 0x28
   25768:	3e18      	subs	r6, #24
   2576a:	f7ff fd47 	bl	251fc <CC_PalMemCopyPlat>
   2576e:	f108 0818 	add.w	r8, r8, #24
   25772:	3701      	adds	r7, #1
   25774:	b196      	cbz	r6, 2579c <getTrngSource+0x23c>
   25776:	f000 fbe3 	bl	25f40 <LLF_RND_TurnOffTrng>
   2577a:	2300      	movs	r3, #0
   2577c:	9309      	str	r3, [sp, #36]	; 0x24
   2577e:	2d00      	cmp	r5, #0
   25780:	f47f af32 	bne.w	255e8 <getTrngSource+0x88>
   25784:	4821      	ldr	r0, [pc, #132]	; (2580c <getTrngSource+0x2ac>)
   25786:	e738      	b.n	255fa <getTrngSource+0x9a>
   25788:	4640      	mov	r0, r8
   2578a:	1af6      	subs	r6, r6, r3
   2578c:	461a      	mov	r2, r3
   2578e:	a90a      	add	r1, sp, #40	; 0x28
   25790:	4498      	add	r8, r3
   25792:	3701      	adds	r7, #1
   25794:	f7ff fd32 	bl	251fc <CC_PalMemCopyPlat>
   25798:	2e00      	cmp	r6, #0
   2579a:	d1ec      	bne.n	25776 <getTrngSource+0x216>
   2579c:	9f06      	ldr	r7, [sp, #24]
   2579e:	9e07      	ldr	r6, [sp, #28]
   257a0:	696a      	ldr	r2, [r5, #20]
   257a2:	4639      	mov	r1, r7
   257a4:	4630      	mov	r0, r6
   257a6:	f7ff fe69 	bl	2547c <LLF_RND_RepetitionCounterTest>
   257aa:	69aa      	ldr	r2, [r5, #24]
   257ac:	b940      	cbnz	r0, 257c0 <getTrngSource+0x260>
   257ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
   257b2:	4639      	mov	r1, r7
   257b4:	4630      	mov	r0, r6
   257b6:	f7ff fe91 	bl	254dc <LLF_RND_AdaptiveProportionTest>
   257ba:	2800      	cmp	r0, #0
   257bc:	f43f af40 	beq.w	25640 <getTrngSource+0xe0>
   257c0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   257c2:	2300      	movs	r3, #0
   257c4:	6013      	str	r3, [r2, #0]
   257c6:	e718      	b.n	255fa <getTrngSource+0x9a>
   257c8:	6a2b      	ldr	r3, [r5, #32]
   257ca:	2b00      	cmp	r3, #0
   257cc:	f43f af39 	beq.w	25642 <getTrngSource+0xe2>
   257d0:	480f      	ldr	r0, [pc, #60]	; (25810 <getTrngSource+0x2b0>)
   257d2:	e736      	b.n	25642 <getTrngSource+0xe2>
   257d4:	2303      	movs	r3, #3
   257d6:	9304      	str	r3, [sp, #16]
   257d8:	e75d      	b.n	25696 <getTrngSource+0x136>
   257da:	2302      	movs	r3, #2
   257dc:	9304      	str	r3, [sp, #16]
   257de:	e75a      	b.n	25696 <getTrngSource+0x136>
   257e0:	9100      	str	r1, [sp, #0]
   257e2:	ab08      	add	r3, sp, #32
   257e4:	2201      	movs	r2, #1
   257e6:	4629      	mov	r1, r5
   257e8:	4650      	mov	r0, sl
   257ea:	f7ff fda7 	bl	2533c <startTrngHW>
   257ee:	2800      	cmp	r0, #0
   257f0:	f43f aed5 	beq.w	2559e <getTrngSource+0x3e>
   257f4:	e725      	b.n	25642 <getTrngSource+0xe2>
   257f6:	bf00      	nop
   257f8:	5002b000 	.word	0x5002b000
   257fc:	aaaaaaab 	.word	0xaaaaaaab
   25800:	00f10c02 	.word	0x00f10c02
   25804:	00f10c31 	.word	0x00f10c31
   25808:	00f10c30 	.word	0x00f10c30
   2580c:	00f10c35 	.word	0x00f10c35
   25810:	00f10c32 	.word	0x00f10c32

00025814 <LLF_RND_GetTrngSource>:
   25814:	b410      	push	{r4}
   25816:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
   2581a:	9401      	str	r4, [sp, #4]
   2581c:	9c03      	ldr	r4, [sp, #12]
   2581e:	9402      	str	r4, [sp, #8]
   25820:	2400      	movs	r4, #0
   25822:	9403      	str	r4, [sp, #12]
   25824:	f85d 4b04 	ldr.w	r4, [sp], #4
   25828:	f7ff be9a 	b.w	25560 <getTrngSource>

0002582c <LLF_RND_RunTrngStartupTest>:
   2582c:	b510      	push	{r4, lr}
   2582e:	b086      	sub	sp, #24
   25830:	ab05      	add	r3, sp, #20
   25832:	2401      	movs	r4, #1
   25834:	e9cd 2401 	strd	r2, r4, [sp, #4]
   25838:	9300      	str	r3, [sp, #0]
   2583a:	2200      	movs	r2, #0
   2583c:	ab04      	add	r3, sp, #16
   2583e:	f7ff fe8f 	bl	25560 <getTrngSource>
   25842:	b006      	add	sp, #24
   25844:	bd10      	pop	{r4, pc}
   25846:	bf00      	nop

00025848 <mbedtls_hardware_poll>:
   25848:	b5f0      	push	{r4, r5, r6, r7, lr}
   2584a:	b087      	sub	sp, #28
   2584c:	2900      	cmp	r1, #0
   2584e:	d066      	beq.n	2591e <mbedtls_hardware_poll+0xd6>
   25850:	461e      	mov	r6, r3
   25852:	2b00      	cmp	r3, #0
   25854:	d063      	beq.n	2591e <mbedtls_hardware_poll+0xd6>
   25856:	4614      	mov	r4, r2
   25858:	2a00      	cmp	r2, #0
   2585a:	d060      	beq.n	2591e <mbedtls_hardware_poll+0xd6>
   2585c:	4f31      	ldr	r7, [pc, #196]	; (25924 <mbedtls_hardware_poll+0xdc>)
   2585e:	460d      	mov	r5, r1
   25860:	6838      	ldr	r0, [r7, #0]
   25862:	f04f 31ff 	mov.w	r1, #4294967295
   25866:	f7ff fce5 	bl	25234 <CC_PalMutexLock>
   2586a:	2800      	cmp	r0, #0
   2586c:	d14d      	bne.n	2590a <mbedtls_hardware_poll+0xc2>
   2586e:	2000      	movs	r0, #0
   25870:	f7ff fd10 	bl	25294 <CC_PalPowerSaveModeSelect>
   25874:	2800      	cmp	r0, #0
   25876:	d144      	bne.n	25902 <mbedtls_hardware_poll+0xba>
   25878:	482b      	ldr	r0, [pc, #172]	; (25928 <mbedtls_hardware_poll+0xe0>)
   2587a:	f000 fa99 	bl	25db0 <RNG_PLAT_SetUserRngParameters>
   2587e:	4603      	mov	r3, r0
   25880:	b1d8      	cbz	r0, 258ba <mbedtls_hardware_poll+0x72>
   25882:	2001      	movs	r0, #1
   25884:	f04f 35ff 	mov.w	r5, #4294967295
   25888:	f7ff fd04 	bl	25294 <CC_PalPowerSaveModeSelect>
   2588c:	2800      	cmp	r0, #0
   2588e:	d134      	bne.n	258fa <mbedtls_hardware_poll+0xb2>
   25890:	4826      	ldr	r0, [pc, #152]	; (2592c <mbedtls_hardware_poll+0xe4>)
   25892:	f44f 7108 	mov.w	r1, #544	; 0x220
   25896:	f7fe fed9 	bl	2464c <mbedtls_zeroize_internal>
   2589a:	4825      	ldr	r0, [pc, #148]	; (25930 <mbedtls_hardware_poll+0xe8>)
   2589c:	2104      	movs	r1, #4
   2589e:	f7fe fed5 	bl	2464c <mbedtls_zeroize_internal>
   258a2:	4821      	ldr	r0, [pc, #132]	; (25928 <mbedtls_hardware_poll+0xe0>)
   258a4:	2128      	movs	r1, #40	; 0x28
   258a6:	f7fe fed1 	bl	2464c <mbedtls_zeroize_internal>
   258aa:	6838      	ldr	r0, [r7, #0]
   258ac:	f7ff fcca 	bl	25244 <CC_PalMutexUnlock>
   258b0:	2800      	cmp	r0, #0
   258b2:	d12e      	bne.n	25912 <mbedtls_hardware_poll+0xca>
   258b4:	4628      	mov	r0, r5
   258b6:	b007      	add	sp, #28
   258b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   258ba:	4a1c      	ldr	r2, [pc, #112]	; (2592c <mbedtls_hardware_poll+0xe4>)
   258bc:	9202      	str	r2, [sp, #8]
   258be:	aa05      	add	r2, sp, #20
   258c0:	9201      	str	r2, [sp, #4]
   258c2:	aa04      	add	r2, sp, #16
   258c4:	9003      	str	r0, [sp, #12]
   258c6:	9200      	str	r2, [sp, #0]
   258c8:	4917      	ldr	r1, [pc, #92]	; (25928 <mbedtls_hardware_poll+0xe0>)
   258ca:	4819      	ldr	r0, [pc, #100]	; (25930 <mbedtls_hardware_poll+0xe8>)
   258cc:	461a      	mov	r2, r3
   258ce:	f7ff ffa1 	bl	25814 <LLF_RND_GetTrngSource>
   258d2:	4603      	mov	r3, r0
   258d4:	2800      	cmp	r0, #0
   258d6:	d1d4      	bne.n	25882 <mbedtls_hardware_poll+0x3a>
   258d8:	4628      	mov	r0, r5
   258da:	461d      	mov	r5, r3
   258dc:	9b05      	ldr	r3, [sp, #20]
   258de:	9904      	ldr	r1, [sp, #16]
   258e0:	429c      	cmp	r4, r3
   258e2:	4622      	mov	r2, r4
   258e4:	bf28      	it	cs
   258e6:	461a      	movcs	r2, r3
   258e8:	6032      	str	r2, [r6, #0]
   258ea:	3108      	adds	r1, #8
   258ec:	f7ff fc86 	bl	251fc <CC_PalMemCopyPlat>
   258f0:	2001      	movs	r0, #1
   258f2:	f7ff fccf 	bl	25294 <CC_PalPowerSaveModeSelect>
   258f6:	2800      	cmp	r0, #0
   258f8:	d0ca      	beq.n	25890 <mbedtls_hardware_poll+0x48>
   258fa:	480e      	ldr	r0, [pc, #56]	; (25934 <mbedtls_hardware_poll+0xec>)
   258fc:	f7fe fd90 	bl	24420 <CC_PalAbort>
   25900:	e7c6      	b.n	25890 <mbedtls_hardware_poll+0x48>
   25902:	480d      	ldr	r0, [pc, #52]	; (25938 <mbedtls_hardware_poll+0xf0>)
   25904:	f7fe fd8c 	bl	24420 <CC_PalAbort>
   25908:	e7b6      	b.n	25878 <mbedtls_hardware_poll+0x30>
   2590a:	480c      	ldr	r0, [pc, #48]	; (2593c <mbedtls_hardware_poll+0xf4>)
   2590c:	f7fe fd88 	bl	24420 <CC_PalAbort>
   25910:	e7ad      	b.n	2586e <mbedtls_hardware_poll+0x26>
   25912:	480b      	ldr	r0, [pc, #44]	; (25940 <mbedtls_hardware_poll+0xf8>)
   25914:	f7fe fd84 	bl	24420 <CC_PalAbort>
   25918:	4628      	mov	r0, r5
   2591a:	b007      	add	sp, #28
   2591c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2591e:	f04f 35ff 	mov.w	r5, #4294967295
   25922:	e7c7      	b.n	258b4 <mbedtls_hardware_poll+0x6c>
   25924:	20000808 	.word	0x20000808
   25928:	20003fbc 	.word	0x20003fbc
   2592c:	20003fe4 	.word	0x20003fe4
   25930:	20003fb8 	.word	0x20003fb8
   25934:	0002a924 	.word	0x0002a924
   25938:	0002a904 	.word	0x0002a904
   2593c:	0002a8ec 	.word	0x0002a8ec
   25940:	0002a97c 	.word	0x0002a97c

00025944 <cc_mbedtls_aes_init>:
   25944:	b510      	push	{r4, lr}
   25946:	4604      	mov	r4, r0
   25948:	b130      	cbz	r0, 25958 <cc_mbedtls_aes_init+0x14>
   2594a:	2200      	movs	r2, #0
   2594c:	2301      	movs	r3, #1
   2594e:	6562      	str	r2, [r4, #84]	; 0x54
   25950:	65a2      	str	r2, [r4, #88]	; 0x58
   25952:	65e3      	str	r3, [r4, #92]	; 0x5c
   25954:	6623      	str	r3, [r4, #96]	; 0x60
   25956:	bd10      	pop	{r4, pc}
   25958:	4801      	ldr	r0, [pc, #4]	; (25960 <cc_mbedtls_aes_init+0x1c>)
   2595a:	f7fe fd61 	bl	24420 <CC_PalAbort>
   2595e:	e7f4      	b.n	2594a <cc_mbedtls_aes_init+0x6>
   25960:	0002a994 	.word	0x0002a994

00025964 <cc_mbedtls_aes_free>:
   25964:	b118      	cbz	r0, 2596e <cc_mbedtls_aes_free+0xa>
   25966:	2274      	movs	r2, #116	; 0x74
   25968:	2100      	movs	r1, #0
   2596a:	f7ff bc49 	b.w	25200 <CC_PalMemSetPlat>
   2596e:	4770      	bx	lr

00025970 <cc_mbedtls_aes_setkey_enc>:
   25970:	b190      	cbz	r0, 25998 <cc_mbedtls_aes_setkey_enc+0x28>
   25972:	b1a1      	cbz	r1, 2599e <cc_mbedtls_aes_setkey_enc+0x2e>
   25974:	b510      	push	{r4, lr}
   25976:	2a80      	cmp	r2, #128	; 0x80
   25978:	f04f 0400 	mov.w	r4, #0
   2597c:	6384      	str	r4, [r0, #56]	; 0x38
   2597e:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   25982:	d106      	bne.n	25992 <cc_mbedtls_aes_setkey_enc+0x22>
   25984:	2210      	movs	r2, #16
   25986:	6304      	str	r4, [r0, #48]	; 0x30
   25988:	4410      	add	r0, r2
   2598a:	f7ff fc37 	bl	251fc <CC_PalMemCopyPlat>
   2598e:	4620      	mov	r0, r4
   25990:	bd10      	pop	{r4, pc}
   25992:	f06f 001f 	mvn.w	r0, #31
   25996:	bd10      	pop	{r4, pc}
   25998:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2599c:	4770      	bx	lr
   2599e:	f06f 001f 	mvn.w	r0, #31
   259a2:	4770      	bx	lr

000259a4 <cc_mbedtls_aes_crypt_ecb>:
   259a4:	b328      	cbz	r0, 259f2 <cc_mbedtls_aes_crypt_ecb+0x4e>
   259a6:	b322      	cbz	r2, 259f2 <cc_mbedtls_aes_crypt_ecb+0x4e>
   259a8:	b31b      	cbz	r3, 259f2 <cc_mbedtls_aes_crypt_ecb+0x4e>
   259aa:	2901      	cmp	r1, #1
   259ac:	d821      	bhi.n	259f2 <cc_mbedtls_aes_crypt_ecb+0x4e>
   259ae:	b570      	push	{r4, r5, r6, lr}
   259b0:	4604      	mov	r4, r0
   259b2:	6b81      	ldr	r1, [r0, #56]	; 0x38
   259b4:	b086      	sub	sp, #24
   259b6:	d017      	beq.n	259e8 <cc_mbedtls_aes_crypt_ecb+0x44>
   259b8:	2901      	cmp	r1, #1
   259ba:	d117      	bne.n	259ec <cc_mbedtls_aes_crypt_ecb+0x48>
   259bc:	2510      	movs	r5, #16
   259be:	2100      	movs	r1, #0
   259c0:	eb0d 0605 	add.w	r6, sp, r5
   259c4:	6361      	str	r1, [r4, #52]	; 0x34
   259c6:	4610      	mov	r0, r2
   259c8:	9500      	str	r5, [sp, #0]
   259ca:	9601      	str	r6, [sp, #4]
   259cc:	aa02      	add	r2, sp, #8
   259ce:	4629      	mov	r1, r5
   259d0:	f000 fac2 	bl	25f58 <SetDataBuffersInfo>
   259d4:	b950      	cbnz	r0, 259ec <cc_mbedtls_aes_crypt_ecb+0x48>
   259d6:	462b      	mov	r3, r5
   259d8:	4632      	mov	r2, r6
   259da:	a902      	add	r1, sp, #8
   259dc:	4620      	mov	r0, r4
   259de:	f000 fd43 	bl	26468 <ProcessAesDrv>
   259e2:	b918      	cbnz	r0, 259ec <cc_mbedtls_aes_crypt_ecb+0x48>
   259e4:	b006      	add	sp, #24
   259e6:	bd70      	pop	{r4, r5, r6, pc}
   259e8:	2900      	cmp	r1, #0
   259ea:	d0e7      	beq.n	259bc <cc_mbedtls_aes_crypt_ecb+0x18>
   259ec:	f06f 0021 	mvn.w	r0, #33	; 0x21
   259f0:	e7f8      	b.n	259e4 <cc_mbedtls_aes_crypt_ecb+0x40>
   259f2:	f06f 0021 	mvn.w	r0, #33	; 0x21
   259f6:	4770      	bx	lr

000259f8 <cc_mbedtls_sha256_init>:
   259f8:	b510      	push	{r4, lr}
   259fa:	4604      	mov	r4, r0
   259fc:	b128      	cbz	r0, 25a0a <cc_mbedtls_sha256_init+0x12>
   259fe:	4620      	mov	r0, r4
   25a00:	21f4      	movs	r1, #244	; 0xf4
   25a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25a06:	f7ff bbfd 	b.w	25204 <CC_PalMemSetZeroPlat>
   25a0a:	4804      	ldr	r0, [pc, #16]	; (25a1c <cc_mbedtls_sha256_init+0x24>)
   25a0c:	f7fe fd08 	bl	24420 <CC_PalAbort>
   25a10:	4620      	mov	r0, r4
   25a12:	21f4      	movs	r1, #244	; 0xf4
   25a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25a18:	f7ff bbf4 	b.w	25204 <CC_PalMemSetZeroPlat>
   25a1c:	0002a9a8 	.word	0x0002a9a8

00025a20 <cc_mbedtls_sha256_free>:
   25a20:	b110      	cbz	r0, 25a28 <cc_mbedtls_sha256_free+0x8>
   25a22:	21f4      	movs	r1, #244	; 0xf4
   25a24:	f7fe be12 	b.w	2464c <mbedtls_zeroize_internal>
   25a28:	4770      	bx	lr
   25a2a:	bf00      	nop

00025a2c <cc_mbedtls_sha256_starts>:
   25a2c:	b508      	push	{r3, lr}
   25a2e:	b121      	cbz	r1, 25a3a <cc_mbedtls_sha256_starts+0xe>
   25a30:	2901      	cmp	r1, #1
   25a32:	d008      	beq.n	25a46 <cc_mbedtls_sha256_starts+0x1a>
   25a34:	f06f 0036 	mvn.w	r0, #54	; 0x36
   25a38:	bd08      	pop	{r3, pc}
   25a3a:	2101      	movs	r1, #1
   25a3c:	f000 f858 	bl	25af0 <mbedtls_sha_starts_internal>
   25a40:	2800      	cmp	r0, #0
   25a42:	d1f7      	bne.n	25a34 <cc_mbedtls_sha256_starts+0x8>
   25a44:	bd08      	pop	{r3, pc}
   25a46:	2102      	movs	r1, #2
   25a48:	f000 f852 	bl	25af0 <mbedtls_sha_starts_internal>
   25a4c:	2800      	cmp	r0, #0
   25a4e:	d0f9      	beq.n	25a44 <cc_mbedtls_sha256_starts+0x18>
   25a50:	e7f0      	b.n	25a34 <cc_mbedtls_sha256_starts+0x8>
   25a52:	bf00      	nop

00025a54 <cc_mbedtls_sha256_update>:
   25a54:	b530      	push	{r4, r5, lr}
   25a56:	4605      	mov	r5, r0
   25a58:	1888      	adds	r0, r1, r2
   25a5a:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
   25a5e:	b0a1      	sub	sp, #132	; 0x84
   25a60:	460b      	mov	r3, r1
   25a62:	4614      	mov	r4, r2
   25a64:	d801      	bhi.n	25a6a <cc_mbedtls_sha256_update+0x16>
   25a66:	2a80      	cmp	r2, #128	; 0x80
   25a68:	d90c      	bls.n	25a84 <cc_mbedtls_sha256_update+0x30>
   25a6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   25a6e:	d917      	bls.n	25aa0 <cc_mbedtls_sha256_update+0x4c>
   25a70:	4622      	mov	r2, r4
   25a72:	4619      	mov	r1, r3
   25a74:	4628      	mov	r0, r5
   25a76:	f000 f87d 	bl	25b74 <mbedtls_sha_update_internal>
   25a7a:	4604      	mov	r4, r0
   25a7c:	b984      	cbnz	r4, 25aa0 <cc_mbedtls_sha256_update+0x4c>
   25a7e:	4620      	mov	r0, r4
   25a80:	b021      	add	sp, #132	; 0x84
   25a82:	bd30      	pop	{r4, r5, pc}
   25a84:	4668      	mov	r0, sp
   25a86:	f7ff fbb9 	bl	251fc <CC_PalMemCopyPlat>
   25a8a:	4622      	mov	r2, r4
   25a8c:	4669      	mov	r1, sp
   25a8e:	4628      	mov	r0, r5
   25a90:	f000 f870 	bl	25b74 <mbedtls_sha_update_internal>
   25a94:	2180      	movs	r1, #128	; 0x80
   25a96:	4604      	mov	r4, r0
   25a98:	4668      	mov	r0, sp
   25a9a:	f7ff fbb3 	bl	25204 <CC_PalMemSetZeroPlat>
   25a9e:	e7ed      	b.n	25a7c <cc_mbedtls_sha256_update+0x28>
   25aa0:	f06f 0436 	mvn.w	r4, #54	; 0x36
   25aa4:	e7eb      	b.n	25a7e <cc_mbedtls_sha256_update+0x2a>
   25aa6:	bf00      	nop

00025aa8 <cc_mbedtls_sha256_finish>:
   25aa8:	b570      	push	{r4, r5, r6, lr}
   25aaa:	b1e8      	cbz	r0, 25ae8 <cc_mbedtls_sha256_finish+0x40>
   25aac:	460e      	mov	r6, r1
   25aae:	b1d9      	cbz	r1, 25ae8 <cc_mbedtls_sha256_finish+0x40>
   25ab0:	4604      	mov	r4, r0
   25ab2:	f000 f831 	bl	25b18 <mbedtls_sha_finish_internal>
   25ab6:	4605      	mov	r5, r0
   25ab8:	b9b0      	cbnz	r0, 25ae8 <cc_mbedtls_sha256_finish+0x40>
   25aba:	6823      	ldr	r3, [r4, #0]
   25abc:	2b01      	cmp	r3, #1
   25abe:	d00b      	beq.n	25ad8 <cc_mbedtls_sha256_finish+0x30>
   25ac0:	2b02      	cmp	r3, #2
   25ac2:	d001      	beq.n	25ac8 <cc_mbedtls_sha256_finish+0x20>
   25ac4:	4628      	mov	r0, r5
   25ac6:	bd70      	pop	{r4, r5, r6, pc}
   25ac8:	221c      	movs	r2, #28
   25aca:	f104 0108 	add.w	r1, r4, #8
   25ace:	4630      	mov	r0, r6
   25ad0:	f7ff fb94 	bl	251fc <CC_PalMemCopyPlat>
   25ad4:	4628      	mov	r0, r5
   25ad6:	bd70      	pop	{r4, r5, r6, pc}
   25ad8:	2220      	movs	r2, #32
   25ada:	f104 0108 	add.w	r1, r4, #8
   25ade:	4630      	mov	r0, r6
   25ae0:	f7ff fb8c 	bl	251fc <CC_PalMemCopyPlat>
   25ae4:	4628      	mov	r0, r5
   25ae6:	bd70      	pop	{r4, r5, r6, pc}
   25ae8:	f06f 0536 	mvn.w	r5, #54	; 0x36
   25aec:	e7ea      	b.n	25ac4 <cc_mbedtls_sha256_finish+0x1c>
   25aee:	bf00      	nop

00025af0 <mbedtls_sha_starts_internal>:
   25af0:	b178      	cbz	r0, 25b12 <mbedtls_sha_starts_internal+0x22>
   25af2:	b538      	push	{r3, r4, r5, lr}
   25af4:	4604      	mov	r4, r0
   25af6:	460d      	mov	r5, r1
   25af8:	21f0      	movs	r1, #240	; 0xf0
   25afa:	f7ff fb83 	bl	25204 <CC_PalMemSetZeroPlat>
   25afe:	2340      	movs	r3, #64	; 0x40
   25b00:	6025      	str	r5, [r4, #0]
   25b02:	65e3      	str	r3, [r4, #92]	; 0x5c
   25b04:	4620      	mov	r0, r4
   25b06:	f000 fa5b 	bl	25fc0 <InitHashDrv>
   25b0a:	3800      	subs	r0, #0
   25b0c:	bf18      	it	ne
   25b0e:	2001      	movne	r0, #1
   25b10:	bd38      	pop	{r3, r4, r5, pc}
   25b12:	2001      	movs	r0, #1
   25b14:	4770      	bx	lr
   25b16:	bf00      	nop

00025b18 <mbedtls_sha_finish_internal>:
   25b18:	b570      	push	{r4, r5, r6, lr}
   25b1a:	6e05      	ldr	r5, [r0, #96]	; 0x60
   25b1c:	b0a4      	sub	sp, #144	; 0x90
   25b1e:	4604      	mov	r4, r0
   25b20:	ae04      	add	r6, sp, #16
   25b22:	b9e5      	cbnz	r5, 25b5e <mbedtls_sha_finish_internal+0x46>
   25b24:	2201      	movs	r2, #1
   25b26:	2300      	movs	r3, #0
   25b28:	6062      	str	r2, [r4, #4]
   25b2a:	4630      	mov	r0, r6
   25b2c:	e9cd 3300 	strd	r3, r3, [sp]
   25b30:	aa02      	add	r2, sp, #8
   25b32:	4629      	mov	r1, r5
   25b34:	f000 fa10 	bl	25f58 <SetDataBuffersInfo>
   25b38:	b110      	cbz	r0, 25b40 <mbedtls_sha_finish_internal+0x28>
   25b3a:	2001      	movs	r0, #1
   25b3c:	b024      	add	sp, #144	; 0x90
   25b3e:	bd70      	pop	{r4, r5, r6, pc}
   25b40:	462a      	mov	r2, r5
   25b42:	a902      	add	r1, sp, #8
   25b44:	4620      	mov	r0, r4
   25b46:	f000 fa63 	bl	26010 <ProcessHashDrv>
   25b4a:	2800      	cmp	r0, #0
   25b4c:	d1f5      	bne.n	25b3a <mbedtls_sha_finish_internal+0x22>
   25b4e:	4620      	mov	r0, r4
   25b50:	f000 fb74 	bl	2623c <FinishHashDrv>
   25b54:	2800      	cmp	r0, #0
   25b56:	d1f0      	bne.n	25b3a <mbedtls_sha_finish_internal+0x22>
   25b58:	6620      	str	r0, [r4, #96]	; 0x60
   25b5a:	b024      	add	sp, #144	; 0x90
   25b5c:	bd70      	pop	{r4, r5, r6, pc}
   25b5e:	2d80      	cmp	r5, #128	; 0x80
   25b60:	462a      	mov	r2, r5
   25b62:	f100 0164 	add.w	r1, r0, #100	; 0x64
   25b66:	bf28      	it	cs
   25b68:	2280      	movcs	r2, #128	; 0x80
   25b6a:	4630      	mov	r0, r6
   25b6c:	f7ff fb46 	bl	251fc <CC_PalMemCopyPlat>
   25b70:	6e25      	ldr	r5, [r4, #96]	; 0x60
   25b72:	e7d7      	b.n	25b24 <mbedtls_sha_finish_internal+0xc>

00025b74 <mbedtls_sha_update_internal>:
   25b74:	2800      	cmp	r0, #0
   25b76:	f000 80ae 	beq.w	25cd6 <mbedtls_sha_update_internal+0x162>
   25b7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25b7e:	4614      	mov	r4, r2
   25b80:	b0a5      	sub	sp, #148	; 0x94
   25b82:	2a00      	cmp	r2, #0
   25b84:	d03d      	beq.n	25c02 <mbedtls_sha_update_internal+0x8e>
   25b86:	460f      	mov	r7, r1
   25b88:	2900      	cmp	r1, #0
   25b8a:	d049      	beq.n	25c20 <mbedtls_sha_update_internal+0xac>
   25b8c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   25b90:	4605      	mov	r5, r0
   25b92:	6e00      	ldr	r0, [r0, #96]	; 0x60
   25b94:	d320      	bcc.n	25bd8 <mbedtls_sha_update_internal+0x64>
   25b96:	f64f 78ff 	movw	r8, #65535	; 0xffff
   25b9a:	f105 0a64 	add.w	sl, r5, #100	; 0x64
   25b9e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   25ba0:	1a1a      	subs	r2, r3, r0
   25ba2:	fbb2 f1f3 	udiv	r1, r2, r3
   25ba6:	fb03 2211 	mls	r2, r3, r1, r2
   25baa:	2a00      	cmp	r2, #0
   25bac:	d165      	bne.n	25c7a <mbedtls_sha_update_internal+0x106>
   25bae:	4283      	cmp	r3, r0
   25bb0:	46b9      	mov	r9, r7
   25bb2:	f64f 76ff 	movw	r6, #65535	; 0xffff
   25bb6:	d072      	beq.n	25c9e <mbedtls_sha_update_internal+0x12a>
   25bb8:	fbb6 fbf3 	udiv	fp, r6, r3
   25bbc:	fb03 fb0b 	mul.w	fp, r3, fp
   25bc0:	f1bb 0f00 	cmp.w	fp, #0
   25bc4:	d130      	bne.n	25c28 <mbedtls_sha_update_internal+0xb4>
   25bc6:	2e00      	cmp	r6, #0
   25bc8:	d145      	bne.n	25c56 <mbedtls_sha_update_internal+0xe2>
   25bca:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
   25bce:	3cff      	subs	r4, #255	; 0xff
   25bd0:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   25bd4:	4447      	add	r7, r8
   25bd6:	d2e2      	bcs.n	25b9e <mbedtls_sha_update_internal+0x2a>
   25bd8:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   25bda:	1a16      	subs	r6, r2, r0
   25bdc:	fbb6 f3f2 	udiv	r3, r6, r2
   25be0:	fb02 6613 	mls	r6, r2, r3, r6
   25be4:	42a6      	cmp	r6, r4
   25be6:	bf28      	it	cs
   25be8:	4626      	movcs	r6, r4
   25bea:	2e00      	cmp	r6, #0
   25bec:	d175      	bne.n	25cda <mbedtls_sha_update_internal+0x166>
   25bee:	4282      	cmp	r2, r0
   25bf0:	f000 808d 	beq.w	25d0e <mbedtls_sha_update_internal+0x19a>
   25bf4:	fbb4 f6f2 	udiv	r6, r4, r2
   25bf8:	fb02 f606 	mul.w	r6, r2, r6
   25bfc:	b92e      	cbnz	r6, 25c0a <mbedtls_sha_update_internal+0x96>
   25bfe:	2c00      	cmp	r4, #0
   25c00:	d179      	bne.n	25cf6 <mbedtls_sha_update_internal+0x182>
   25c02:	2000      	movs	r0, #0
   25c04:	b025      	add	sp, #148	; 0x94
   25c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c0a:	2300      	movs	r3, #0
   25c0c:	e9cd 3300 	strd	r3, r3, [sp]
   25c10:	aa02      	add	r2, sp, #8
   25c12:	4631      	mov	r1, r6
   25c14:	4638      	mov	r0, r7
   25c16:	f000 f99f 	bl	25f58 <SetDataBuffersInfo>
   25c1a:	2800      	cmp	r0, #0
   25c1c:	f000 8095 	beq.w	25d4a <mbedtls_sha_update_internal+0x1d6>
   25c20:	2001      	movs	r0, #1
   25c22:	b025      	add	sp, #148	; 0x94
   25c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c28:	2300      	movs	r3, #0
   25c2a:	e9cd 3300 	strd	r3, r3, [sp]
   25c2e:	aa02      	add	r2, sp, #8
   25c30:	4659      	mov	r1, fp
   25c32:	4648      	mov	r0, r9
   25c34:	f000 f990 	bl	25f58 <SetDataBuffersInfo>
   25c38:	2800      	cmp	r0, #0
   25c3a:	d1f1      	bne.n	25c20 <mbedtls_sha_update_internal+0xac>
   25c3c:	a902      	add	r1, sp, #8
   25c3e:	465a      	mov	r2, fp
   25c40:	4628      	mov	r0, r5
   25c42:	f000 f9e5 	bl	26010 <ProcessHashDrv>
   25c46:	2800      	cmp	r0, #0
   25c48:	d1ea      	bne.n	25c20 <mbedtls_sha_update_internal+0xac>
   25c4a:	eba6 060b 	sub.w	r6, r6, fp
   25c4e:	6e28      	ldr	r0, [r5, #96]	; 0x60
   25c50:	44d9      	add	r9, fp
   25c52:	2e00      	cmp	r6, #0
   25c54:	d0b9      	beq.n	25bca <mbedtls_sha_update_internal+0x56>
   25c56:	3019      	adds	r0, #25
   25c58:	4649      	mov	r1, r9
   25c5a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   25c5e:	4632      	mov	r2, r6
   25c60:	f7ff facc 	bl	251fc <CC_PalMemCopyPlat>
   25c64:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
   25c68:	6e28      	ldr	r0, [r5, #96]	; 0x60
   25c6a:	3cff      	subs	r4, #255	; 0xff
   25c6c:	4430      	add	r0, r6
   25c6e:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   25c72:	4447      	add	r7, r8
   25c74:	6628      	str	r0, [r5, #96]	; 0x60
   25c76:	d292      	bcs.n	25b9e <mbedtls_sha_update_internal+0x2a>
   25c78:	e7ae      	b.n	25bd8 <mbedtls_sha_update_internal+0x64>
   25c7a:	4542      	cmp	r2, r8
   25c7c:	bf28      	it	cs
   25c7e:	4642      	movcs	r2, r8
   25c80:	4450      	add	r0, sl
   25c82:	4639      	mov	r1, r7
   25c84:	4616      	mov	r6, r2
   25c86:	f7ff fab9 	bl	251fc <CC_PalMemCopyPlat>
   25c8a:	6e28      	ldr	r0, [r5, #96]	; 0x60
   25c8c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   25c8e:	4430      	add	r0, r6
   25c90:	4283      	cmp	r3, r0
   25c92:	eb07 0906 	add.w	r9, r7, r6
   25c96:	6628      	str	r0, [r5, #96]	; 0x60
   25c98:	eba8 0606 	sub.w	r6, r8, r6
   25c9c:	d18c      	bne.n	25bb8 <mbedtls_sha_update_internal+0x44>
   25c9e:	2b80      	cmp	r3, #128	; 0x80
   25ca0:	bf28      	it	cs
   25ca2:	2380      	movcs	r3, #128	; 0x80
   25ca4:	461a      	mov	r2, r3
   25ca6:	4651      	mov	r1, sl
   25ca8:	a804      	add	r0, sp, #16
   25caa:	f7ff faa7 	bl	251fc <CC_PalMemCopyPlat>
   25cae:	2300      	movs	r3, #0
   25cb0:	e9cd 3300 	strd	r3, r3, [sp]
   25cb4:	aa02      	add	r2, sp, #8
   25cb6:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   25cb8:	a804      	add	r0, sp, #16
   25cba:	f000 f94d 	bl	25f58 <SetDataBuffersInfo>
   25cbe:	2800      	cmp	r0, #0
   25cc0:	d1ae      	bne.n	25c20 <mbedtls_sha_update_internal+0xac>
   25cc2:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   25cc4:	a902      	add	r1, sp, #8
   25cc6:	4628      	mov	r0, r5
   25cc8:	f000 f9a2 	bl	26010 <ProcessHashDrv>
   25ccc:	2800      	cmp	r0, #0
   25cce:	d1a7      	bne.n	25c20 <mbedtls_sha_update_internal+0xac>
   25cd0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   25cd2:	6628      	str	r0, [r5, #96]	; 0x60
   25cd4:	e770      	b.n	25bb8 <mbedtls_sha_update_internal+0x44>
   25cd6:	2001      	movs	r0, #1
   25cd8:	4770      	bx	lr
   25cda:	f105 0364 	add.w	r3, r5, #100	; 0x64
   25cde:	4639      	mov	r1, r7
   25ce0:	4632      	mov	r2, r6
   25ce2:	4418      	add	r0, r3
   25ce4:	f7ff fa8a 	bl	251fc <CC_PalMemCopyPlat>
   25ce8:	6e28      	ldr	r0, [r5, #96]	; 0x60
   25cea:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   25cec:	4430      	add	r0, r6
   25cee:	1ba4      	subs	r4, r4, r6
   25cf0:	4437      	add	r7, r6
   25cf2:	6628      	str	r0, [r5, #96]	; 0x60
   25cf4:	e77b      	b.n	25bee <mbedtls_sha_update_internal+0x7a>
   25cf6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   25cf8:	3319      	adds	r3, #25
   25cfa:	eb05 0083 	add.w	r0, r5, r3, lsl #2
   25cfe:	4622      	mov	r2, r4
   25d00:	4639      	mov	r1, r7
   25d02:	f7ff fa7b 	bl	251fc <CC_PalMemCopyPlat>
   25d06:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   25d08:	4423      	add	r3, r4
   25d0a:	662b      	str	r3, [r5, #96]	; 0x60
   25d0c:	e779      	b.n	25c02 <mbedtls_sha_update_internal+0x8e>
   25d0e:	2a80      	cmp	r2, #128	; 0x80
   25d10:	bf28      	it	cs
   25d12:	2280      	movcs	r2, #128	; 0x80
   25d14:	f105 0164 	add.w	r1, r5, #100	; 0x64
   25d18:	a804      	add	r0, sp, #16
   25d1a:	f7ff fa6f 	bl	251fc <CC_PalMemCopyPlat>
   25d1e:	2300      	movs	r3, #0
   25d20:	e9cd 3300 	strd	r3, r3, [sp]
   25d24:	a804      	add	r0, sp, #16
   25d26:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   25d28:	aa02      	add	r2, sp, #8
   25d2a:	f000 f915 	bl	25f58 <SetDataBuffersInfo>
   25d2e:	2800      	cmp	r0, #0
   25d30:	f47f af76 	bne.w	25c20 <mbedtls_sha_update_internal+0xac>
   25d34:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   25d36:	a902      	add	r1, sp, #8
   25d38:	4628      	mov	r0, r5
   25d3a:	f000 f969 	bl	26010 <ProcessHashDrv>
   25d3e:	2800      	cmp	r0, #0
   25d40:	f47f af6e 	bne.w	25c20 <mbedtls_sha_update_internal+0xac>
   25d44:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   25d46:	6628      	str	r0, [r5, #96]	; 0x60
   25d48:	e754      	b.n	25bf4 <mbedtls_sha_update_internal+0x80>
   25d4a:	a902      	add	r1, sp, #8
   25d4c:	4632      	mov	r2, r6
   25d4e:	4628      	mov	r0, r5
   25d50:	f000 f95e 	bl	26010 <ProcessHashDrv>
   25d54:	2800      	cmp	r0, #0
   25d56:	f47f af63 	bne.w	25c20 <mbedtls_sha_update_internal+0xac>
   25d5a:	4437      	add	r7, r6
   25d5c:	1ba4      	subs	r4, r4, r6
   25d5e:	e74e      	b.n	25bfe <mbedtls_sha_update_internal+0x8a>

00025d60 <cc_mbedtls_sha256>:
   25d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25d62:	461c      	mov	r4, r3
   25d64:	4605      	mov	r5, r0
   25d66:	4811      	ldr	r0, [pc, #68]	; (25dac <cc_mbedtls_sha256+0x4c>)
   25d68:	460e      	mov	r6, r1
   25d6a:	4617      	mov	r7, r2
   25d6c:	f7ff fe44 	bl	259f8 <cc_mbedtls_sha256_init>
   25d70:	4621      	mov	r1, r4
   25d72:	480e      	ldr	r0, [pc, #56]	; (25dac <cc_mbedtls_sha256+0x4c>)
   25d74:	f7ff fe5a 	bl	25a2c <cc_mbedtls_sha256_starts>
   25d78:	4604      	mov	r4, r0
   25d7a:	b120      	cbz	r0, 25d86 <cc_mbedtls_sha256+0x26>
   25d7c:	480b      	ldr	r0, [pc, #44]	; (25dac <cc_mbedtls_sha256+0x4c>)
   25d7e:	f7ff fe4f 	bl	25a20 <cc_mbedtls_sha256_free>
   25d82:	4620      	mov	r0, r4
   25d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25d86:	4809      	ldr	r0, [pc, #36]	; (25dac <cc_mbedtls_sha256+0x4c>)
   25d88:	4632      	mov	r2, r6
   25d8a:	4629      	mov	r1, r5
   25d8c:	f7ff fe62 	bl	25a54 <cc_mbedtls_sha256_update>
   25d90:	4604      	mov	r4, r0
   25d92:	2800      	cmp	r0, #0
   25d94:	d1f2      	bne.n	25d7c <cc_mbedtls_sha256+0x1c>
   25d96:	4639      	mov	r1, r7
   25d98:	4804      	ldr	r0, [pc, #16]	; (25dac <cc_mbedtls_sha256+0x4c>)
   25d9a:	f7ff fe85 	bl	25aa8 <cc_mbedtls_sha256_finish>
   25d9e:	4604      	mov	r4, r0
   25da0:	4802      	ldr	r0, [pc, #8]	; (25dac <cc_mbedtls_sha256+0x4c>)
   25da2:	f7ff fe3d 	bl	25a20 <cc_mbedtls_sha256_free>
   25da6:	4620      	mov	r0, r4
   25da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25daa:	bf00      	nop
   25dac:	20004204 	.word	0x20004204

00025db0 <RNG_PLAT_SetUserRngParameters>:
   25db0:	b530      	push	{r4, r5, lr}
   25db2:	b083      	sub	sp, #12
   25db4:	231c      	movs	r3, #28
   25db6:	a901      	add	r1, sp, #4
   25db8:	4605      	mov	r5, r0
   25dba:	9301      	str	r3, [sp, #4]
   25dbc:	f000 f832 	bl	25e24 <CC_PalTrngParamGet>
   25dc0:	4604      	mov	r4, r0
   25dc2:	b938      	cbnz	r0, 25dd4 <RNG_PLAT_SetUserRngParameters+0x24>
   25dc4:	9b01      	ldr	r3, [sp, #4]
   25dc6:	2b1c      	cmp	r3, #28
   25dc8:	d007      	beq.n	25dda <RNG_PLAT_SetUserRngParameters+0x2a>
   25dca:	4c14      	ldr	r4, [pc, #80]	; (25e1c <RNG_PLAT_SetUserRngParameters+0x6c>)
   25dcc:	211c      	movs	r1, #28
   25dce:	4628      	mov	r0, r5
   25dd0:	f7ff fa18 	bl	25204 <CC_PalMemSetZeroPlat>
   25dd4:	4620      	mov	r0, r4
   25dd6:	b003      	add	sp, #12
   25dd8:	bd30      	pop	{r4, r5, pc}
   25dda:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
   25dde:	1e13      	subs	r3, r2, #0
   25de0:	bf18      	it	ne
   25de2:	2301      	movne	r3, #1
   25de4:	3900      	subs	r1, #0
   25de6:	682a      	ldr	r2, [r5, #0]
   25de8:	bf18      	it	ne
   25dea:	2101      	movne	r1, #1
   25dec:	009b      	lsls	r3, r3, #2
   25dee:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
   25df2:	2a00      	cmp	r2, #0
   25df4:	bf18      	it	ne
   25df6:	f043 0301 	orrne.w	r3, r3, #1
   25dfa:	68ea      	ldr	r2, [r5, #12]
   25dfc:	2001      	movs	r0, #1
   25dfe:	61e8      	str	r0, [r5, #28]
   25e00:	b92a      	cbnz	r2, 25e0e <RNG_PLAT_SetUserRngParameters+0x5e>
   25e02:	e9c5 3408 	strd	r3, r4, [r5, #32]
   25e06:	2b00      	cmp	r3, #0
   25e08:	d1e4      	bne.n	25dd4 <RNG_PLAT_SetUserRngParameters+0x24>
   25e0a:	4c05      	ldr	r4, [pc, #20]	; (25e20 <RNG_PLAT_SetUserRngParameters+0x70>)
   25e0c:	e7de      	b.n	25dcc <RNG_PLAT_SetUserRngParameters+0x1c>
   25e0e:	f043 0308 	orr.w	r3, r3, #8
   25e12:	4620      	mov	r0, r4
   25e14:	e9c5 3408 	strd	r3, r4, [r5, #32]
   25e18:	b003      	add	sp, #12
   25e1a:	bd30      	pop	{r4, r5, pc}
   25e1c:	00f00c37 	.word	0x00f00c37
   25e20:	00f00c0e 	.word	0x00f00c0e

00025e24 <CC_PalTrngParamGet>:
   25e24:	b118      	cbz	r0, 25e2e <CC_PalTrngParamGet+0xa>
   25e26:	b111      	cbz	r1, 25e2e <CC_PalTrngParamGet+0xa>
   25e28:	680b      	ldr	r3, [r1, #0]
   25e2a:	2b1c      	cmp	r3, #28
   25e2c:	d001      	beq.n	25e32 <CC_PalTrngParamGet+0xe>
   25e2e:	2001      	movs	r0, #1
   25e30:	4770      	bx	lr
   25e32:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25e36:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   25e3a:	3201      	adds	r2, #1
   25e3c:	bf14      	ite	ne
   25e3e:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   25e42:	f241 225c 	movweq	r2, #4700	; 0x125c
   25e46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25e4a:	6002      	str	r2, [r0, #0]
   25e4c:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   25e50:	3201      	adds	r2, #1
   25e52:	bf14      	ite	ne
   25e54:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   25e58:	f641 1264 	movweq	r2, #6500	; 0x1964
   25e5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25e60:	6042      	str	r2, [r0, #4]
   25e62:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   25e66:	3201      	adds	r2, #1
   25e68:	bf14      	ite	ne
   25e6a:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   25e6e:	f640 62d8 	movweq	r2, #3800	; 0xed8
   25e72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25e76:	6082      	str	r2, [r0, #8]
   25e78:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   25e7c:	3201      	adds	r2, #1
   25e7e:	bf14      	ite	ne
   25e80:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   25e84:	f241 3288 	movweq	r2, #5000	; 0x1388
   25e88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25e8c:	60c2      	str	r2, [r0, #12]
   25e8e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   25e92:	3201      	adds	r2, #1
   25e94:	bf14      	ite	ne
   25e96:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   25e9a:	2290      	moveq	r2, #144	; 0x90
   25e9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25ea0:	6102      	str	r2, [r0, #16]
   25ea2:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   25ea6:	3201      	adds	r2, #1
   25ea8:	bf14      	ite	ne
   25eaa:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   25eae:	2251      	moveq	r2, #81	; 0x51
   25eb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25eb4:	6142      	str	r2, [r0, #20]
   25eb6:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   25eba:	3201      	adds	r2, #1
   25ebc:	bf14      	ite	ne
   25ebe:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   25ec2:	f240 3337 	movweq	r3, #823	; 0x337
   25ec6:	6183      	str	r3, [r0, #24]
   25ec8:	2000      	movs	r0, #0
   25eca:	4770      	bx	lr

00025ecc <LLF_RND_WaitRngInterrupt>:
   25ecc:	b508      	push	{r3, lr}
   25ece:	4601      	mov	r1, r0
   25ed0:	f44f 6080 	mov.w	r0, #1024	; 0x400
   25ed4:	f7ff f91e 	bl	25114 <CC_HalWaitInterruptRND>
   25ed8:	4b03      	ldr	r3, [pc, #12]	; (25ee8 <LLF_RND_WaitRngInterrupt+0x1c>)
   25eda:	2200      	movs	r2, #0
   25edc:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
   25ee0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   25ee4:	bd08      	pop	{r3, pc}
   25ee6:	bf00      	nop
   25ee8:	5002b000 	.word	0x5002b000

00025eec <LLF_RND_GetRoscSampleCnt>:
   25eec:	3801      	subs	r0, #1
   25eee:	2807      	cmp	r0, #7
   25ef0:	d805      	bhi.n	25efe <LLF_RND_GetRoscSampleCnt+0x12>
   25ef2:	e8df f000 	tbb	[pc, r0]
   25ef6:	0e10      	.short	0x0e10
   25ef8:	04040a04 	.word	0x04040a04
   25efc:	0604      	.short	0x0604
   25efe:	4807      	ldr	r0, [pc, #28]	; (25f1c <LLF_RND_GetRoscSampleCnt+0x30>)
   25f00:	4770      	bx	lr
   25f02:	68cb      	ldr	r3, [r1, #12]
   25f04:	624b      	str	r3, [r1, #36]	; 0x24
   25f06:	2000      	movs	r0, #0
   25f08:	4770      	bx	lr
   25f0a:	688b      	ldr	r3, [r1, #8]
   25f0c:	624b      	str	r3, [r1, #36]	; 0x24
   25f0e:	2000      	movs	r0, #0
   25f10:	4770      	bx	lr
   25f12:	684b      	ldr	r3, [r1, #4]
   25f14:	e7f6      	b.n	25f04 <LLF_RND_GetRoscSampleCnt+0x18>
   25f16:	680b      	ldr	r3, [r1, #0]
   25f18:	e7f4      	b.n	25f04 <LLF_RND_GetRoscSampleCnt+0x18>
   25f1a:	bf00      	nop
   25f1c:	00f10c31 	.word	0x00f10c31

00025f20 <LLF_RND_GetFastestRosc>:
   25f20:	680b      	ldr	r3, [r1, #0]
   25f22:	e002      	b.n	25f2a <LLF_RND_GetFastestRosc+0xa>
   25f24:	2b08      	cmp	r3, #8
   25f26:	600b      	str	r3, [r1, #0]
   25f28:	d806      	bhi.n	25f38 <LLF_RND_GetFastestRosc+0x18>
   25f2a:	6a02      	ldr	r2, [r0, #32]
   25f2c:	4213      	tst	r3, r2
   25f2e:	ea4f 0343 	mov.w	r3, r3, lsl #1
   25f32:	d0f7      	beq.n	25f24 <LLF_RND_GetFastestRosc+0x4>
   25f34:	2000      	movs	r0, #0
   25f36:	4770      	bx	lr
   25f38:	4800      	ldr	r0, [pc, #0]	; (25f3c <LLF_RND_GetFastestRosc+0x1c>)
   25f3a:	4770      	bx	lr
   25f3c:	00f10c31 	.word	0x00f10c31

00025f40 <LLF_RND_TurnOffTrng>:
   25f40:	4b04      	ldr	r3, [pc, #16]	; (25f54 <LLF_RND_TurnOffTrng+0x14>)
   25f42:	2200      	movs	r2, #0
   25f44:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
   25f48:	f44f 6080 	mov.w	r0, #1024	; 0x400
   25f4c:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
   25f50:	f7ff b8c6 	b.w	250e0 <CC_HalClearInterruptBit>
   25f54:	5002b000 	.word	0x5002b000

00025f58 <SetDataBuffersInfo>:
   25f58:	b5f0      	push	{r4, r5, r6, r7, lr}
   25f5a:	b083      	sub	sp, #12
   25f5c:	461d      	mov	r5, r3
   25f5e:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   25f62:	f04f 0300 	mov.w	r3, #0
   25f66:	f88d 3007 	strb.w	r3, [sp, #7]
   25f6a:	d324      	bcc.n	25fb6 <SetDataBuffersInfo+0x5e>
   25f6c:	468c      	mov	ip, r1
   25f6e:	4484      	add	ip, r0
   25f70:	f1bc 4f80 	cmp.w	ip, #1073741824	; 0x40000000
   25f74:	4604      	mov	r4, r0
   25f76:	d81e      	bhi.n	25fb6 <SetDataBuffersInfo+0x5e>
   25f78:	4617      	mov	r7, r2
   25f7a:	f10d 0307 	add.w	r3, sp, #7
   25f7e:	2201      	movs	r2, #1
   25f80:	f000 fe64 	bl	26c4c <CC_PalDataBufferAttrGet>
   25f84:	4606      	mov	r6, r0
   25f86:	b9b0      	cbnz	r0, 25fb6 <SetDataBuffersInfo+0x5e>
   25f88:	9a09      	ldr	r2, [sp, #36]	; 0x24
   25f8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   25f8e:	603c      	str	r4, [r7, #0]
   25f90:	713b      	strb	r3, [r7, #4]
   25f92:	b192      	cbz	r2, 25fba <SetDataBuffersInfo+0x62>
   25f94:	b14d      	cbz	r5, 25faa <SetDataBuffersInfo+0x52>
   25f96:	4602      	mov	r2, r0
   25f98:	9908      	ldr	r1, [sp, #32]
   25f9a:	f10d 0307 	add.w	r3, sp, #7
   25f9e:	4628      	mov	r0, r5
   25fa0:	f000 fe54 	bl	26c4c <CC_PalDataBufferAttrGet>
   25fa4:	b938      	cbnz	r0, 25fb6 <SetDataBuffersInfo+0x5e>
   25fa6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   25faa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   25fac:	4630      	mov	r0, r6
   25fae:	6015      	str	r5, [r2, #0]
   25fb0:	7113      	strb	r3, [r2, #4]
   25fb2:	b003      	add	sp, #12
   25fb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25fb6:	f44f 0675 	mov.w	r6, #16056320	; 0xf50000
   25fba:	4630      	mov	r0, r6
   25fbc:	b003      	add	sp, #12
   25fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00025fc0 <InitHashDrv>:
   25fc0:	b1d8      	cbz	r0, 25ffa <InitHashDrv+0x3a>
   25fc2:	b508      	push	{r3, lr}
   25fc4:	6803      	ldr	r3, [r0, #0]
   25fc6:	2b01      	cmp	r3, #1
   25fc8:	d004      	beq.n	25fd4 <InitHashDrv+0x14>
   25fca:	2b02      	cmp	r3, #2
   25fcc:	d00f      	beq.n	25fee <InitHashDrv+0x2e>
   25fce:	b143      	cbz	r3, 25fe2 <InitHashDrv+0x22>
   25fd0:	480b      	ldr	r0, [pc, #44]	; (26000 <InitHashDrv+0x40>)
   25fd2:	bd08      	pop	{r3, pc}
   25fd4:	490b      	ldr	r1, [pc, #44]	; (26004 <InitHashDrv+0x44>)
   25fd6:	2220      	movs	r2, #32
   25fd8:	3008      	adds	r0, #8
   25fda:	f7ff f90f 	bl	251fc <CC_PalMemCopyPlat>
   25fde:	2000      	movs	r0, #0
   25fe0:	bd08      	pop	{r3, pc}
   25fe2:	4909      	ldr	r1, [pc, #36]	; (26008 <InitHashDrv+0x48>)
   25fe4:	2214      	movs	r2, #20
   25fe6:	3008      	adds	r0, #8
   25fe8:	f7ff f908 	bl	251fc <CC_PalMemCopyPlat>
   25fec:	e7f7      	b.n	25fde <InitHashDrv+0x1e>
   25fee:	4907      	ldr	r1, [pc, #28]	; (2600c <InitHashDrv+0x4c>)
   25ff0:	2220      	movs	r2, #32
   25ff2:	3008      	adds	r0, #8
   25ff4:	f7ff f902 	bl	251fc <CC_PalMemCopyPlat>
   25ff8:	e7f1      	b.n	25fde <InitHashDrv+0x1e>
   25ffa:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   25ffe:	4770      	bx	lr
   26000:	00f30001 	.word	0x00f30001
   26004:	0002a9b8 	.word	0x0002a9b8
   26008:	0002a9f8 	.word	0x0002a9f8
   2600c:	0002a9d8 	.word	0x0002a9d8

00026010 <ProcessHashDrv>:
   26010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26014:	2900      	cmp	r1, #0
   26016:	f000 80f9 	beq.w	2620c <ProcessHashDrv+0x1fc>
   2601a:	4604      	mov	r4, r0
   2601c:	2800      	cmp	r0, #0
   2601e:	f000 80f9 	beq.w	26214 <ProcessHashDrv+0x204>
   26022:	6803      	ldr	r3, [r0, #0]
   26024:	4690      	mov	r8, r2
   26026:	460f      	mov	r7, r1
   26028:	2b00      	cmp	r3, #0
   2602a:	f000 80c3 	beq.w	261b4 <ProcessHashDrv+0x1a4>
   2602e:	3b01      	subs	r3, #1
   26030:	2b01      	cmp	r3, #1
   26032:	f200 80d7 	bhi.w	261e4 <ProcessHashDrv+0x1d4>
   26036:	4879      	ldr	r0, [pc, #484]	; (2621c <ProcessHashDrv+0x20c>)
   26038:	f04f 31ff 	mov.w	r1, #4294967295
   2603c:	f04f 0902 	mov.w	r9, #2
   26040:	f7ff f8f8 	bl	25234 <CC_PalMutexLock>
   26044:	2800      	cmp	r0, #0
   26046:	f040 80bf 	bne.w	261c8 <ProcessHashDrv+0x1b8>
   2604a:	2000      	movs	r0, #0
   2604c:	f7ff f922 	bl	25294 <CC_PalPowerSaveModeSelect>
   26050:	4606      	mov	r6, r0
   26052:	2800      	cmp	r0, #0
   26054:	f040 80c2 	bne.w	261dc <ProcessHashDrv+0x1cc>
   26058:	4a71      	ldr	r2, [pc, #452]	; (26220 <ProcessHashDrv+0x210>)
   2605a:	f8d2 391c 	ldr.w	r3, [r2, #2332]	; 0x91c
   2605e:	2b00      	cmp	r3, #0
   26060:	d1fb      	bne.n	2605a <ProcessHashDrv+0x4a>
   26062:	4d6f      	ldr	r5, [pc, #444]	; (26220 <ProcessHashDrv+0x210>)
   26064:	f8d5 3c20 	ldr.w	r3, [r5, #3104]	; 0xc20
   26068:	2b00      	cmp	r3, #0
   2606a:	d1fb      	bne.n	26064 <ProcessHashDrv+0x54>
   2606c:	f04f 30ff 	mov.w	r0, #4294967295
   26070:	f7ff f836 	bl	250e0 <CC_HalClearInterruptBit>
   26074:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   26078:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   2607c:	f7ff f83e 	bl	250fc <CC_HalMaskInterrupt>
   26080:	2301      	movs	r3, #1
   26082:	2207      	movs	r2, #7
   26084:	f8c5 3818 	str.w	r3, [r5, #2072]	; 0x818
   26088:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
   2608c:	f8c5 37c4 	str.w	r3, [r5, #1988]	; 0x7c4
   26090:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   26092:	f8c5 37cc 	str.w	r3, [r5, #1996]	; 0x7cc
   26096:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   26098:	f8c5 37d0 	str.w	r3, [r5, #2000]	; 0x7d0
   2609c:	f8c5 97c0 	str.w	r9, [r5, #1984]	; 0x7c0
   260a0:	6823      	ldr	r3, [r4, #0]
   260a2:	b15b      	cbz	r3, 260bc <ProcessHashDrv+0xac>
   260a4:	3b01      	subs	r3, #1
   260a6:	2b01      	cmp	r3, #1
   260a8:	d818      	bhi.n	260dc <ProcessHashDrv+0xcc>
   260aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   260ac:	f8c5 365c 	str.w	r3, [r5, #1628]	; 0x65c
   260b0:	6a23      	ldr	r3, [r4, #32]
   260b2:	f8c5 3658 	str.w	r3, [r5, #1624]	; 0x658
   260b6:	69e3      	ldr	r3, [r4, #28]
   260b8:	f8c5 3654 	str.w	r3, [r5, #1620]	; 0x654
   260bc:	4b58      	ldr	r3, [pc, #352]	; (26220 <ProcessHashDrv+0x210>)
   260be:	69a2      	ldr	r2, [r4, #24]
   260c0:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
   260c4:	6962      	ldr	r2, [r4, #20]
   260c6:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
   260ca:	6922      	ldr	r2, [r4, #16]
   260cc:	f8c3 2648 	str.w	r2, [r3, #1608]	; 0x648
   260d0:	68e2      	ldr	r2, [r4, #12]
   260d2:	f8c3 2644 	str.w	r2, [r3, #1604]	; 0x644
   260d6:	68a2      	ldr	r2, [r4, #8]
   260d8:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
   260dc:	4a50      	ldr	r2, [pc, #320]	; (26220 <ProcessHashDrv+0x210>)
   260de:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   260e2:	2b00      	cmp	r3, #0
   260e4:	d1fb      	bne.n	260de <ProcessHashDrv+0xce>
   260e6:	f1b8 0f00 	cmp.w	r8, #0
   260ea:	d05f      	beq.n	261ac <ProcessHashDrv+0x19c>
   260ec:	6863      	ldr	r3, [r4, #4]
   260ee:	2b01      	cmp	r3, #1
   260f0:	bf08      	it	eq
   260f2:	f8c2 3684 	streq.w	r3, [r2, #1668]	; 0x684
   260f6:	4b4a      	ldr	r3, [pc, #296]	; (26220 <ProcessHashDrv+0x210>)
   260f8:	683a      	ldr	r2, [r7, #0]
   260fa:	f8c3 2c28 	str.w	r2, [r3, #3112]	; 0xc28
   260fe:	2040      	movs	r0, #64	; 0x40
   26100:	f8c3 8c2c 	str.w	r8, [r3, #3116]	; 0xc2c
   26104:	f7ff f800 	bl	25108 <CC_HalWaitInterrupt>
   26108:	4606      	mov	r6, r0
   2610a:	4a45      	ldr	r2, [pc, #276]	; (26220 <ProcessHashDrv+0x210>)
   2610c:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   26110:	2b00      	cmp	r3, #0
   26112:	d1fb      	bne.n	2610c <ProcessHashDrv+0xfc>
   26114:	4a42      	ldr	r2, [pc, #264]	; (26220 <ProcessHashDrv+0x210>)
   26116:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   2611a:	2b00      	cmp	r3, #0
   2611c:	d1fb      	bne.n	26116 <ProcessHashDrv+0x106>
   2611e:	6823      	ldr	r3, [r4, #0]
   26120:	b15b      	cbz	r3, 2613a <ProcessHashDrv+0x12a>
   26122:	3b01      	subs	r3, #1
   26124:	2b01      	cmp	r3, #1
   26126:	d818      	bhi.n	2615a <ProcessHashDrv+0x14a>
   26128:	f8d2 365c 	ldr.w	r3, [r2, #1628]	; 0x65c
   2612c:	6263      	str	r3, [r4, #36]	; 0x24
   2612e:	f8d2 3658 	ldr.w	r3, [r2, #1624]	; 0x658
   26132:	6223      	str	r3, [r4, #32]
   26134:	f8d2 3654 	ldr.w	r3, [r2, #1620]	; 0x654
   26138:	61e3      	str	r3, [r4, #28]
   2613a:	4b39      	ldr	r3, [pc, #228]	; (26220 <ProcessHashDrv+0x210>)
   2613c:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   26140:	61a2      	str	r2, [r4, #24]
   26142:	f8d3 264c 	ldr.w	r2, [r3, #1612]	; 0x64c
   26146:	6162      	str	r2, [r4, #20]
   26148:	f8d3 2648 	ldr.w	r2, [r3, #1608]	; 0x648
   2614c:	6122      	str	r2, [r4, #16]
   2614e:	f8d3 2644 	ldr.w	r2, [r3, #1604]	; 0x644
   26152:	60e2      	str	r2, [r4, #12]
   26154:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
   26158:	60a3      	str	r3, [r4, #8]
   2615a:	4a31      	ldr	r2, [pc, #196]	; (26220 <ProcessHashDrv+0x210>)
   2615c:	f8d2 17cc 	ldr.w	r1, [r2, #1996]	; 0x7cc
   26160:	64a1      	str	r1, [r4, #72]	; 0x48
   26162:	f8d2 17d0 	ldr.w	r1, [r2, #2000]	; 0x7d0
   26166:	64e1      	str	r1, [r4, #76]	; 0x4c
   26168:	2300      	movs	r3, #0
   2616a:	2101      	movs	r1, #1
   2616c:	f8c2 17c4 	str.w	r1, [r2, #1988]	; 0x7c4
   26170:	f8c2 3684 	str.w	r3, [r2, #1668]	; 0x684
   26174:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   26178:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   2617c:	2b00      	cmp	r3, #0
   2617e:	d1fb      	bne.n	26178 <ProcessHashDrv+0x168>
   26180:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
   26184:	2e00      	cmp	r6, #0
   26186:	d13b      	bne.n	26200 <ProcessHashDrv+0x1f0>
   26188:	4b25      	ldr	r3, [pc, #148]	; (26220 <ProcessHashDrv+0x210>)
   2618a:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   2618e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   26192:	f7fe ffb3 	bl	250fc <CC_HalMaskInterrupt>
   26196:	2001      	movs	r0, #1
   26198:	f7ff f87c 	bl	25294 <CC_PalPowerSaveModeSelect>
   2619c:	bb60      	cbnz	r0, 261f8 <ProcessHashDrv+0x1e8>
   2619e:	481f      	ldr	r0, [pc, #124]	; (2621c <ProcessHashDrv+0x20c>)
   261a0:	f7ff f850 	bl	25244 <CC_PalMutexUnlock>
   261a4:	bb10      	cbnz	r0, 261ec <ProcessHashDrv+0x1dc>
   261a6:	4630      	mov	r0, r6
   261a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   261ac:	2304      	movs	r3, #4
   261ae:	f8c2 37c8 	str.w	r3, [r2, #1992]	; 0x7c8
   261b2:	e7aa      	b.n	2610a <ProcessHashDrv+0xfa>
   261b4:	4819      	ldr	r0, [pc, #100]	; (2621c <ProcessHashDrv+0x20c>)
   261b6:	f04f 31ff 	mov.w	r1, #4294967295
   261ba:	f04f 0901 	mov.w	r9, #1
   261be:	f7ff f839 	bl	25234 <CC_PalMutexLock>
   261c2:	2800      	cmp	r0, #0
   261c4:	f43f af41 	beq.w	2604a <ProcessHashDrv+0x3a>
   261c8:	4816      	ldr	r0, [pc, #88]	; (26224 <ProcessHashDrv+0x214>)
   261ca:	f7fe f929 	bl	24420 <CC_PalAbort>
   261ce:	2000      	movs	r0, #0
   261d0:	f7ff f860 	bl	25294 <CC_PalPowerSaveModeSelect>
   261d4:	4606      	mov	r6, r0
   261d6:	2800      	cmp	r0, #0
   261d8:	f43f af3e 	beq.w	26058 <ProcessHashDrv+0x48>
   261dc:	4812      	ldr	r0, [pc, #72]	; (26228 <ProcessHashDrv+0x218>)
   261de:	f7fe f91f 	bl	24420 <CC_PalAbort>
   261e2:	e739      	b.n	26058 <ProcessHashDrv+0x48>
   261e4:	4e11      	ldr	r6, [pc, #68]	; (2622c <ProcessHashDrv+0x21c>)
   261e6:	4630      	mov	r0, r6
   261e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   261ec:	4810      	ldr	r0, [pc, #64]	; (26230 <ProcessHashDrv+0x220>)
   261ee:	f7fe f917 	bl	24420 <CC_PalAbort>
   261f2:	4630      	mov	r0, r6
   261f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   261f8:	480e      	ldr	r0, [pc, #56]	; (26234 <ProcessHashDrv+0x224>)
   261fa:	f7fe f911 	bl	24420 <CC_PalAbort>
   261fe:	e7ce      	b.n	2619e <ProcessHashDrv+0x18e>
   26200:	2110      	movs	r1, #16
   26202:	f104 0008 	add.w	r0, r4, #8
   26206:	f7fe fffd 	bl	25204 <CC_PalMemSetZeroPlat>
   2620a:	e7bd      	b.n	26188 <ProcessHashDrv+0x178>
   2620c:	4e0a      	ldr	r6, [pc, #40]	; (26238 <ProcessHashDrv+0x228>)
   2620e:	4630      	mov	r0, r6
   26210:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26214:	f44f 0673 	mov.w	r6, #15925248	; 0xf30000
   26218:	e7c5      	b.n	261a6 <ProcessHashDrv+0x196>
   2621a:	bf00      	nop
   2621c:	20000818 	.word	0x20000818
   26220:	5002b000 	.word	0x5002b000
   26224:	0002a8ec 	.word	0x0002a8ec
   26228:	0002a904 	.word	0x0002a904
   2622c:	00f30001 	.word	0x00f30001
   26230:	0002a944 	.word	0x0002a944
   26234:	0002a924 	.word	0x0002a924
   26238:	00f30003 	.word	0x00f30003

0002623c <FinishHashDrv>:
   2623c:	b398      	cbz	r0, 262a6 <FinishHashDrv+0x6a>
   2623e:	b470      	push	{r4, r5, r6}
   26240:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
   26244:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
   26248:	ba26      	rev	r6, r4
   2624a:	ba0d      	rev	r5, r1
   2624c:	ba14      	rev	r4, r2
   2624e:	ba19      	rev	r1, r3
   26250:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
   26254:	ba12      	rev	r2, r2
   26256:	e9c0 4104 	strd	r4, r1, [r0, #16]
   2625a:	6182      	str	r2, [r0, #24]
   2625c:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
   26260:	e9c0 6502 	strd	r6, r5, [r0, #8]
   26264:	ba1b      	rev	r3, r3
   26266:	ba25      	rev	r5, r4
   26268:	e9c0 3507 	strd	r3, r5, [r0, #28]
   2626c:	ba14      	rev	r4, r2
   2626e:	e9d0 230b 	ldrd	r2, r3, [r0, #44]	; 0x2c
   26272:	6a81      	ldr	r1, [r0, #40]	; 0x28
   26274:	ba12      	rev	r2, r2
   26276:	ba09      	rev	r1, r1
   26278:	e9c0 4109 	strd	r4, r1, [r0, #36]	; 0x24
   2627c:	62c2      	str	r2, [r0, #44]	; 0x2c
   2627e:	e9d0 420d 	ldrd	r4, r2, [r0, #52]	; 0x34
   26282:	ba1b      	rev	r3, r3
   26284:	ba25      	rev	r5, r4
   26286:	e9c0 350c 	strd	r3, r5, [r0, #48]	; 0x30
   2628a:	ba14      	rev	r4, r2
   2628c:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
   26290:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
   26292:	ba12      	rev	r2, r2
   26294:	ba09      	rev	r1, r1
   26296:	ba1b      	rev	r3, r3
   26298:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   2629c:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   262a0:	2000      	movs	r0, #0
   262a2:	bc70      	pop	{r4, r5, r6}
   262a4:	4770      	bx	lr
   262a6:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   262aa:	4770      	bx	lr

000262ac <LoadAesKey>:
   262ac:	2800      	cmp	r0, #0
   262ae:	d047      	beq.n	26340 <LoadAesKey+0x94>
   262b0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   262b4:	2b00      	cmp	r3, #0
   262b6:	d034      	beq.n	26322 <LoadAesKey+0x76>
   262b8:	2b03      	cmp	r3, #3
   262ba:	b510      	push	{r4, lr}
   262bc:	d013      	beq.n	262e6 <LoadAesKey+0x3a>
   262be:	4822      	ldr	r0, [pc, #136]	; (26348 <LoadAesKey+0x9c>)
   262c0:	4c22      	ldr	r4, [pc, #136]	; (2634c <LoadAesKey+0xa0>)
   262c2:	6822      	ldr	r2, [r4, #0]
   262c4:	4b22      	ldr	r3, [pc, #136]	; (26350 <LoadAesKey+0xa4>)
   262c6:	6812      	ldr	r2, [r2, #0]
   262c8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   262cc:	6822      	ldr	r2, [r4, #0]
   262ce:	6852      	ldr	r2, [r2, #4]
   262d0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   262d4:	6822      	ldr	r2, [r4, #0]
   262d6:	6892      	ldr	r2, [r2, #8]
   262d8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   262dc:	6822      	ldr	r2, [r4, #0]
   262de:	68d2      	ldr	r2, [r2, #12]
   262e0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   262e4:	bd10      	pop	{r4, pc}
   262e6:	6b01      	ldr	r1, [r0, #48]	; 0x30
   262e8:	6c00      	ldr	r0, [r0, #64]	; 0x40
   262ea:	4c18      	ldr	r4, [pc, #96]	; (2634c <LoadAesKey+0xa0>)
   262ec:	f000 fba8 	bl	26a40 <kmu_validate_kdr_slot_and_size>
   262f0:	2800      	cmp	r0, #0
   262f2:	d1e6      	bne.n	262c2 <LoadAesKey+0x16>
   262f4:	6822      	ldr	r2, [r4, #0]
   262f6:	4b16      	ldr	r3, [pc, #88]	; (26350 <LoadAesKey+0xa4>)
   262f8:	6812      	ldr	r2, [r2, #0]
   262fa:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   262fe:	6822      	ldr	r2, [r4, #0]
   26300:	6852      	ldr	r2, [r2, #4]
   26302:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   26306:	6822      	ldr	r2, [r4, #0]
   26308:	6892      	ldr	r2, [r2, #8]
   2630a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   2630e:	6822      	ldr	r2, [r4, #0]
   26310:	68d2      	ldr	r2, [r2, #12]
   26312:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   26316:	f000 fba1 	bl	26a5c <kmu_use_kdr_key>
   2631a:	2800      	cmp	r0, #0
   2631c:	d1d1      	bne.n	262c2 <LoadAesKey+0x16>
   2631e:	2000      	movs	r0, #0
   26320:	bd10      	pop	{r4, pc}
   26322:	4b0b      	ldr	r3, [pc, #44]	; (26350 <LoadAesKey+0xa4>)
   26324:	6902      	ldr	r2, [r0, #16]
   26326:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
   2632a:	6942      	ldr	r2, [r0, #20]
   2632c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
   26330:	6982      	ldr	r2, [r0, #24]
   26332:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
   26336:	69c2      	ldr	r2, [r0, #28]
   26338:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   2633c:	2000      	movs	r0, #0
   2633e:	4770      	bx	lr
   26340:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   26344:	4770      	bx	lr
   26346:	bf00      	nop
   26348:	00f10009 	.word	0x00f10009
   2634c:	20000804 	.word	0x20000804
   26350:	5002b000 	.word	0x5002b000

00026354 <InitAes.part.0>:
   26354:	4a37      	ldr	r2, [pc, #220]	; (26434 <InitAes.part.0+0xe0>)
   26356:	b538      	push	{r3, r4, r5, lr}
   26358:	4604      	mov	r4, r0
   2635a:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   2635e:	2b00      	cmp	r3, #0
   26360:	d1fb      	bne.n	2635a <InitAes.part.0+0x6>
   26362:	4a34      	ldr	r2, [pc, #208]	; (26434 <InitAes.part.0+0xe0>)
   26364:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   26368:	2b00      	cmp	r3, #0
   2636a:	d1fb      	bne.n	26364 <InitAes.part.0+0x10>
   2636c:	4a31      	ldr	r2, [pc, #196]	; (26434 <InitAes.part.0+0xe0>)
   2636e:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
   26372:	2b00      	cmp	r3, #0
   26374:	d1fb      	bne.n	2636e <InitAes.part.0+0x1a>
   26376:	4a2f      	ldr	r2, [pc, #188]	; (26434 <InitAes.part.0+0xe0>)
   26378:	f8d2 3c20 	ldr.w	r3, [r2, #3104]	; 0xc20
   2637c:	2b00      	cmp	r3, #0
   2637e:	d1fb      	bne.n	26378 <InitAes.part.0+0x24>
   26380:	4a2c      	ldr	r2, [pc, #176]	; (26434 <InitAes.part.0+0xe0>)
   26382:	f8d2 3d38 	ldr.w	r3, [r2, #3384]	; 0xd38
   26386:	2b00      	cmp	r3, #0
   26388:	d1fb      	bne.n	26382 <InitAes.part.0+0x2e>
   2638a:	4d2a      	ldr	r5, [pc, #168]	; (26434 <InitAes.part.0+0xe0>)
   2638c:	f8d5 3c38 	ldr.w	r3, [r5, #3128]	; 0xc38
   26390:	2b00      	cmp	r3, #0
   26392:	d1fb      	bne.n	2638c <InitAes.part.0+0x38>
   26394:	f04f 30ff 	mov.w	r0, #4294967295
   26398:	f7fe fea2 	bl	250e0 <CC_HalClearInterruptBit>
   2639c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2639e:	f8d5 0a04 	ldr.w	r0, [r5, #2564]	; 0xa04
   263a2:	f023 0304 	bic.w	r3, r3, #4
   263a6:	2b03      	cmp	r3, #3
   263a8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   263aa:	d039      	beq.n	26420 <InitAes.part.0+0xcc>
   263ac:	2b01      	cmp	r3, #1
   263ae:	bf0c      	ite	eq
   263b0:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   263b4:	f020 0020 	bicne.w	r0, r0, #32
   263b8:	f7fe fea0 	bl	250fc <CC_HalMaskInterrupt>
   263bc:	4a1d      	ldr	r2, [pc, #116]	; (26434 <InitAes.part.0+0xe0>)
   263be:	2301      	movs	r3, #1
   263c0:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
   263c4:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   263c8:	2b00      	cmp	r3, #0
   263ca:	d1fb      	bne.n	263c4 <InitAes.part.0+0x70>
   263cc:	4a19      	ldr	r2, [pc, #100]	; (26434 <InitAes.part.0+0xe0>)
   263ce:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   263d2:	2b00      	cmp	r3, #0
   263d4:	d1fb      	bne.n	263ce <InitAes.part.0+0x7a>
   263d6:	4917      	ldr	r1, [pc, #92]	; (26434 <InitAes.part.0+0xe0>)
   263d8:	f8c2 34bc 	str.w	r3, [r2, #1212]	; 0x4bc
   263dc:	f8d1 3910 	ldr.w	r3, [r1, #2320]	; 0x910
   263e0:	2b00      	cmp	r3, #0
   263e2:	d1fb      	bne.n	263dc <InitAes.part.0+0x88>
   263e4:	4a13      	ldr	r2, [pc, #76]	; (26434 <InitAes.part.0+0xe0>)
   263e6:	f8d2 3470 	ldr.w	r3, [r2, #1136]	; 0x470
   263ea:	2b00      	cmp	r3, #0
   263ec:	d1fb      	bne.n	263e6 <InitAes.part.0+0x92>
   263ee:	6b62      	ldr	r2, [r4, #52]	; 0x34
   263f0:	f022 0104 	bic.w	r1, r2, #4
   263f4:	2903      	cmp	r1, #3
   263f6:	bf18      	it	ne
   263f8:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   263fa:	490e      	ldr	r1, [pc, #56]	; (26434 <InitAes.part.0+0xe0>)
   263fc:	ea4f 0282 	mov.w	r2, r2, lsl #2
   26400:	bf18      	it	ne
   26402:	f003 0301 	andne.w	r3, r3, #1
   26406:	f002 021c 	and.w	r2, r2, #28
   2640a:	431a      	orrs	r2, r3
   2640c:	f8c1 24c0 	str.w	r2, [r1, #1216]	; 0x4c0
   26410:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26412:	2b07      	cmp	r3, #7
   26414:	bf04      	itt	eq
   26416:	2301      	moveq	r3, #1
   26418:	f8c1 347c 	streq.w	r3, [r1, #1148]	; 0x47c
   2641c:	2000      	movs	r0, #0
   2641e:	bd38      	pop	{r3, r4, r5, pc}
   26420:	2b01      	cmp	r3, #1
   26422:	bf0c      	ite	eq
   26424:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   26428:	f020 0010 	bicne.w	r0, r0, #16
   2642c:	f7fe fe66 	bl	250fc <CC_HalMaskInterrupt>
   26430:	e7c4      	b.n	263bc <InitAes.part.0+0x68>
   26432:	bf00      	nop
   26434:	5002b000 	.word	0x5002b000

00026438 <write_invalid_key>:
   26438:	4a09      	ldr	r2, [pc, #36]	; (26460 <write_invalid_key+0x28>)
   2643a:	4b0a      	ldr	r3, [pc, #40]	; (26464 <write_invalid_key+0x2c>)
   2643c:	6811      	ldr	r1, [r2, #0]
   2643e:	6809      	ldr	r1, [r1, #0]
   26440:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
   26444:	6811      	ldr	r1, [r2, #0]
   26446:	6849      	ldr	r1, [r1, #4]
   26448:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
   2644c:	6811      	ldr	r1, [r2, #0]
   2644e:	6889      	ldr	r1, [r1, #8]
   26450:	f8c3 1408 	str.w	r1, [r3, #1032]	; 0x408
   26454:	6812      	ldr	r2, [r2, #0]
   26456:	68d2      	ldr	r2, [r2, #12]
   26458:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
   2645c:	4770      	bx	lr
   2645e:	bf00      	nop
   26460:	20000804 	.word	0x20000804
   26464:	5002b000 	.word	0x5002b000

00026468 <ProcessAesDrv>:
   26468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2646c:	b085      	sub	sp, #20
   2646e:	2900      	cmp	r1, #0
   26470:	f000 80ec 	beq.w	2664c <ProcessAesDrv+0x1e4>
   26474:	4690      	mov	r8, r2
   26476:	2a00      	cmp	r2, #0
   26478:	f000 80e8 	beq.w	2664c <ProcessAesDrv+0x1e4>
   2647c:	4605      	mov	r5, r0
   2647e:	2800      	cmp	r0, #0
   26480:	f000 8129 	beq.w	266d6 <ProcessAesDrv+0x26e>
   26484:	4699      	mov	r9, r3
   26486:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   26488:	460e      	mov	r6, r1
   2648a:	2b00      	cmp	r3, #0
   2648c:	d152      	bne.n	26534 <ProcessAesDrv+0xcc>
   2648e:	f5b9 5f80 	cmp.w	r9, #4096	; 0x1000
   26492:	d254      	bcs.n	2653e <ProcessAesDrv+0xd6>
   26494:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   26498:	2b04      	cmp	r3, #4
   2649a:	f000 80ff 	beq.w	2669c <ProcessAesDrv+0x234>
   2649e:	2700      	movs	r7, #0
   264a0:	48ad      	ldr	r0, [pc, #692]	; (26758 <ProcessAesDrv+0x2f0>)
   264a2:	f04f 31ff 	mov.w	r1, #4294967295
   264a6:	f7fe fec5 	bl	25234 <CC_PalMutexLock>
   264aa:	2800      	cmp	r0, #0
   264ac:	f040 80d5 	bne.w	2665a <ProcessAesDrv+0x1f2>
   264b0:	2000      	movs	r0, #0
   264b2:	f7fe feef 	bl	25294 <CC_PalPowerSaveModeSelect>
   264b6:	2800      	cmp	r0, #0
   264b8:	f040 80d8 	bne.w	2666c <ProcessAesDrv+0x204>
   264bc:	48a7      	ldr	r0, [pc, #668]	; (2675c <ProcessAesDrv+0x2f4>)
   264be:	2301      	movs	r3, #1
   264c0:	f8c0 3810 	str.w	r3, [r0, #2064]	; 0x810
   264c4:	f8d0 4910 	ldr.w	r4, [r0, #2320]	; 0x910
   264c8:	2c00      	cmp	r4, #0
   264ca:	d1fb      	bne.n	264c4 <ProcessAesDrv+0x5c>
   264cc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   264ce:	2b03      	cmp	r3, #3
   264d0:	dc3a      	bgt.n	26548 <ProcessAesDrv+0xe0>
   264d2:	2b00      	cmp	r3, #0
   264d4:	da3b      	bge.n	2654e <ProcessAesDrv+0xe6>
   264d6:	4ca2      	ldr	r4, [pc, #648]	; (26760 <ProcessAesDrv+0x2f8>)
   264d8:	4aa0      	ldr	r2, [pc, #640]	; (2675c <ProcessAesDrv+0x2f4>)
   264da:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   264de:	2b00      	cmp	r3, #0
   264e0:	d1fb      	bne.n	264da <ProcessAesDrv+0x72>
   264e2:	2f00      	cmp	r7, #0
   264e4:	f040 80d1 	bne.w	2668a <ProcessAesDrv+0x222>
   264e8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   264ea:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   264ec:	f023 0304 	bic.w	r3, r3, #4
   264f0:	2b03      	cmp	r3, #3
   264f2:	4b9a      	ldr	r3, [pc, #616]	; (2675c <ProcessAesDrv+0x2f4>)
   264f4:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
   264f8:	f000 809f 	beq.w	2663a <ProcessAesDrv+0x1d2>
   264fc:	2a01      	cmp	r2, #1
   264fe:	bf0c      	ite	eq
   26500:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   26504:	f040 0020 	orrne.w	r0, r0, #32
   26508:	f7fe fdf8 	bl	250fc <CC_HalMaskInterrupt>
   2650c:	4b93      	ldr	r3, [pc, #588]	; (2675c <ProcessAesDrv+0x2f4>)
   2650e:	2200      	movs	r2, #0
   26510:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
   26514:	2001      	movs	r0, #1
   26516:	f7fe febd 	bl	25294 <CC_PalPowerSaveModeSelect>
   2651a:	2800      	cmp	r0, #0
   2651c:	f040 80b1 	bne.w	26682 <ProcessAesDrv+0x21a>
   26520:	488d      	ldr	r0, [pc, #564]	; (26758 <ProcessAesDrv+0x2f0>)
   26522:	f7fe fe8f 	bl	25244 <CC_PalMutexUnlock>
   26526:	2800      	cmp	r0, #0
   26528:	f040 80a4 	bne.w	26674 <ProcessAesDrv+0x20c>
   2652c:	4620      	mov	r0, r4
   2652e:	b005      	add	sp, #20
   26530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26534:	2b01      	cmp	r3, #1
   26536:	d1ad      	bne.n	26494 <ProcessAesDrv+0x2c>
   26538:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
   2653c:	d3aa      	bcc.n	26494 <ProcessAesDrv+0x2c>
   2653e:	4c89      	ldr	r4, [pc, #548]	; (26764 <ProcessAesDrv+0x2fc>)
   26540:	4620      	mov	r0, r4
   26542:	b005      	add	sp, #20
   26544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26548:	3b06      	subs	r3, #6
   2654a:	2b01      	cmp	r3, #1
   2654c:	d8c3      	bhi.n	264d6 <ProcessAesDrv+0x6e>
   2654e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   26550:	2b01      	cmp	r3, #1
   26552:	f200 80be 	bhi.w	266d2 <ProcessAesDrv+0x26a>
   26556:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   26558:	2b01      	cmp	r3, #1
   2655a:	d87c      	bhi.n	26656 <ProcessAesDrv+0x1ee>
   2655c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   2655e:	2b01      	cmp	r3, #1
   26560:	f200 80e8 	bhi.w	26734 <ProcessAesDrv+0x2cc>
   26564:	4628      	mov	r0, r5
   26566:	f7ff fef5 	bl	26354 <InitAes.part.0>
   2656a:	4604      	mov	r4, r0
   2656c:	2800      	cmp	r0, #0
   2656e:	d1b3      	bne.n	264d8 <ProcessAesDrv+0x70>
   26570:	4628      	mov	r0, r5
   26572:	f7ff fe9b 	bl	262ac <LoadAesKey>
   26576:	4604      	mov	r4, r0
   26578:	2800      	cmp	r0, #0
   2657a:	d1ad      	bne.n	264d8 <ProcessAesDrv+0x70>
   2657c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2657e:	2b07      	cmp	r3, #7
   26580:	d8a9      	bhi.n	264d6 <ProcessAesDrv+0x6e>
   26582:	2201      	movs	r2, #1
   26584:	409a      	lsls	r2, r3
   26586:	f012 0f8a 	tst.w	r2, #138	; 0x8a
   2658a:	f040 80d5 	bne.w	26738 <ProcessAesDrv+0x2d0>
   2658e:	f012 0f44 	tst.w	r2, #68	; 0x44
   26592:	f040 80ba 	bne.w	2670a <ProcessAesDrv+0x2a2>
   26596:	07d2      	lsls	r2, r2, #31
   26598:	d59d      	bpl.n	264d6 <ProcessAesDrv+0x6e>
   2659a:	f023 0304 	bic.w	r3, r3, #4
   2659e:	2b03      	cmp	r3, #3
   265a0:	6832      	ldr	r2, [r6, #0]
   265a2:	d00d      	beq.n	265c0 <ProcessAesDrv+0x158>
   265a4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   265a6:	f8d8 1000 	ldr.w	r1, [r8]
   265aa:	2b01      	cmp	r3, #1
   265ac:	4b6b      	ldr	r3, [pc, #428]	; (2675c <ProcessAesDrv+0x2f4>)
   265ae:	bf0b      	itete	eq
   265b0:	f8c3 1d28 	streq.w	r1, [r3, #3368]	; 0xd28
   265b4:	f8c3 1d30 	strne.w	r1, [r3, #3376]	; 0xd30
   265b8:	f8c3 9d2c 	streq.w	r9, [r3, #3372]	; 0xd2c
   265bc:	f8c3 9d34 	strne.w	r9, [r3, #3380]	; 0xd34
   265c0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   265c2:	2b01      	cmp	r3, #1
   265c4:	4b65      	ldr	r3, [pc, #404]	; (2675c <ProcessAesDrv+0x2f4>)
   265c6:	bf0b      	itete	eq
   265c8:	f8c3 2c28 	streq.w	r2, [r3, #3112]	; 0xc28
   265cc:	f8c3 2c30 	strne.w	r2, [r3, #3120]	; 0xc30
   265d0:	f8c3 9c2c 	streq.w	r9, [r3, #3116]	; 0xc2c
   265d4:	f8c3 9c34 	strne.w	r9, [r3, #3124]	; 0xc34
   265d8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   265da:	f023 0304 	bic.w	r3, r3, #4
   265de:	2b03      	cmp	r3, #3
   265e0:	f000 80a2 	beq.w	26728 <ProcessAesDrv+0x2c0>
   265e4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   265e6:	2b01      	cmp	r3, #1
   265e8:	bf14      	ite	ne
   265ea:	2020      	movne	r0, #32
   265ec:	2080      	moveq	r0, #128	; 0x80
   265ee:	f7fe fd8b 	bl	25108 <CC_HalWaitInterrupt>
   265f2:	4604      	mov	r4, r0
   265f4:	2800      	cmp	r0, #0
   265f6:	f47f af6f 	bne.w	264d8 <ProcessAesDrv+0x70>
   265fa:	4b58      	ldr	r3, [pc, #352]	; (2675c <ProcessAesDrv+0x2f4>)
   265fc:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
   26600:	2c00      	cmp	r4, #0
   26602:	d1fb      	bne.n	265fc <ProcessAesDrv+0x194>
   26604:	6b69      	ldr	r1, [r5, #52]	; 0x34
   26606:	2907      	cmp	r1, #7
   26608:	d814      	bhi.n	26634 <ProcessAesDrv+0x1cc>
   2660a:	2201      	movs	r2, #1
   2660c:	408a      	lsls	r2, r1
   2660e:	f012 0f8a 	tst.w	r2, #138	; 0x8a
   26612:	f040 80bb 	bne.w	2678c <ProcessAesDrv+0x324>
   26616:	f012 0f44 	tst.w	r2, #68	; 0x44
   2661a:	d00b      	beq.n	26634 <ProcessAesDrv+0x1cc>
   2661c:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   26620:	602a      	str	r2, [r5, #0]
   26622:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   26626:	606a      	str	r2, [r5, #4]
   26628:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   2662c:	60aa      	str	r2, [r5, #8]
   2662e:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   26632:	60eb      	str	r3, [r5, #12]
   26634:	2301      	movs	r3, #1
   26636:	65ab      	str	r3, [r5, #88]	; 0x58
   26638:	e74e      	b.n	264d8 <ProcessAesDrv+0x70>
   2663a:	2a01      	cmp	r2, #1
   2663c:	bf0c      	ite	eq
   2663e:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   26642:	f040 0010 	orrne.w	r0, r0, #16
   26646:	f7fe fd59 	bl	250fc <CC_HalMaskInterrupt>
   2664a:	e75f      	b.n	2650c <ProcessAesDrv+0xa4>
   2664c:	4c46      	ldr	r4, [pc, #280]	; (26768 <ProcessAesDrv+0x300>)
   2664e:	4620      	mov	r0, r4
   26650:	b005      	add	sp, #20
   26652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26656:	4c45      	ldr	r4, [pc, #276]	; (2676c <ProcessAesDrv+0x304>)
   26658:	e73e      	b.n	264d8 <ProcessAesDrv+0x70>
   2665a:	4845      	ldr	r0, [pc, #276]	; (26770 <ProcessAesDrv+0x308>)
   2665c:	f7fd fee0 	bl	24420 <CC_PalAbort>
   26660:	2000      	movs	r0, #0
   26662:	f7fe fe17 	bl	25294 <CC_PalPowerSaveModeSelect>
   26666:	2800      	cmp	r0, #0
   26668:	f43f af28 	beq.w	264bc <ProcessAesDrv+0x54>
   2666c:	4841      	ldr	r0, [pc, #260]	; (26774 <ProcessAesDrv+0x30c>)
   2666e:	f7fd fed7 	bl	24420 <CC_PalAbort>
   26672:	e723      	b.n	264bc <ProcessAesDrv+0x54>
   26674:	4840      	ldr	r0, [pc, #256]	; (26778 <ProcessAesDrv+0x310>)
   26676:	f7fd fed3 	bl	24420 <CC_PalAbort>
   2667a:	4620      	mov	r0, r4
   2667c:	b005      	add	sp, #20
   2667e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26682:	483e      	ldr	r0, [pc, #248]	; (2677c <ProcessAesDrv+0x314>)
   26684:	f7fd fecc 	bl	24420 <CC_PalAbort>
   26688:	e74a      	b.n	26520 <ProcessAesDrv+0xb8>
   2668a:	2304      	movs	r3, #4
   2668c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   26690:	2120      	movs	r1, #32
   26692:	f105 0010 	add.w	r0, r5, #16
   26696:	f7fe fdb5 	bl	25204 <CC_PalMemSetZeroPlat>
   2669a:	e725      	b.n	264e8 <ProcessAesDrv+0x80>
   2669c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   2669e:	6c28      	ldr	r0, [r5, #64]	; 0x40
   266a0:	f000 f9c0 	bl	26a24 <kmu_validate_slot_and_size>
   266a4:	b998      	cbnz	r0, 266ce <ProcessAesDrv+0x266>
   266a6:	4f36      	ldr	r7, [pc, #216]	; (26780 <ProcessAesDrv+0x318>)
   266a8:	4c2c      	ldr	r4, [pc, #176]	; (2675c <ProcessAesDrv+0x2f4>)
   266aa:	683b      	ldr	r3, [r7, #0]
   266ac:	681b      	ldr	r3, [r3, #0]
   266ae:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   266b2:	683b      	ldr	r3, [r7, #0]
   266b4:	685b      	ldr	r3, [r3, #4]
   266b6:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   266ba:	683b      	ldr	r3, [r7, #0]
   266bc:	689b      	ldr	r3, [r3, #8]
   266be:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   266c2:	683b      	ldr	r3, [r7, #0]
   266c4:	68db      	ldr	r3, [r3, #12]
   266c6:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   266ca:	6b29      	ldr	r1, [r5, #48]	; 0x30
   266cc:	b131      	cbz	r1, 266dc <ProcessAesDrv+0x274>
   266ce:	2701      	movs	r7, #1
   266d0:	e6e6      	b.n	264a0 <ProcessAesDrv+0x38>
   266d2:	4c2c      	ldr	r4, [pc, #176]	; (26784 <ProcessAesDrv+0x31c>)
   266d4:	e700      	b.n	264d8 <ProcessAesDrv+0x70>
   266d6:	f44f 0471 	mov.w	r4, #15794176	; 0xf10000
   266da:	e727      	b.n	2652c <ProcessAesDrv+0xc4>
   266dc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   266de:	9301      	str	r3, [sp, #4]
   266e0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
   266e2:	9300      	str	r3, [sp, #0]
   266e4:	f105 0a10 	add.w	sl, r5, #16
   266e8:	f04f 0b10 	mov.w	fp, #16
   266ec:	f8cd a008 	str.w	sl, [sp, #8]
   266f0:	f8cd b00c 	str.w	fp, [sp, #12]
   266f4:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
   266f8:	6c28      	ldr	r0, [r5, #64]	; 0x40
   266fa:	f000 f9b9 	bl	26a70 <kmu_derive_cmac>
   266fe:	2800      	cmp	r0, #0
   26700:	d151      	bne.n	267a6 <ProcessAesDrv+0x33e>
   26702:	2300      	movs	r3, #0
   26704:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
   26708:	e7e1      	b.n	266ce <ProcessAesDrv+0x266>
   2670a:	4b14      	ldr	r3, [pc, #80]	; (2675c <ProcessAesDrv+0x2f4>)
   2670c:	682a      	ldr	r2, [r5, #0]
   2670e:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   26712:	686a      	ldr	r2, [r5, #4]
   26714:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   26718:	68aa      	ldr	r2, [r5, #8]
   2671a:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   2671e:	68ea      	ldr	r2, [r5, #12]
   26720:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   26724:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   26726:	e738      	b.n	2659a <ProcessAesDrv+0x132>
   26728:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   2672a:	2b01      	cmp	r3, #1
   2672c:	bf14      	ite	ne
   2672e:	2010      	movne	r0, #16
   26730:	2040      	moveq	r0, #64	; 0x40
   26732:	e75c      	b.n	265ee <ProcessAesDrv+0x186>
   26734:	4c14      	ldr	r4, [pc, #80]	; (26788 <ProcessAesDrv+0x320>)
   26736:	e6cf      	b.n	264d8 <ProcessAesDrv+0x70>
   26738:	4b08      	ldr	r3, [pc, #32]	; (2675c <ProcessAesDrv+0x2f4>)
   2673a:	682a      	ldr	r2, [r5, #0]
   2673c:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   26740:	686a      	ldr	r2, [r5, #4]
   26742:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   26746:	68aa      	ldr	r2, [r5, #8]
   26748:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   2674c:	68ea      	ldr	r2, [r5, #12]
   2674e:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   26752:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   26754:	e721      	b.n	2659a <ProcessAesDrv+0x132>
   26756:	bf00      	nop
   26758:	20000818 	.word	0x20000818
   2675c:	5002b000 	.word	0x5002b000
   26760:	00f10001 	.word	0x00f10001
   26764:	00f10005 	.word	0x00f10005
   26768:	00f1000b 	.word	0x00f1000b
   2676c:	00f10003 	.word	0x00f10003
   26770:	0002a8ec 	.word	0x0002a8ec
   26774:	0002a904 	.word	0x0002a904
   26778:	0002a944 	.word	0x0002a944
   2677c:	0002a924 	.word	0x0002a924
   26780:	20000804 	.word	0x20000804
   26784:	00f10002 	.word	0x00f10002
   26788:	00f10004 	.word	0x00f10004
   2678c:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   26790:	602a      	str	r2, [r5, #0]
   26792:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   26796:	606a      	str	r2, [r5, #4]
   26798:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   2679c:	60aa      	str	r2, [r5, #8]
   2679e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   267a2:	60eb      	str	r3, [r5, #12]
   267a4:	e746      	b.n	26634 <ProcessAesDrv+0x1cc>
   267a6:	683b      	ldr	r3, [r7, #0]
   267a8:	681b      	ldr	r3, [r3, #0]
   267aa:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
   267ae:	683b      	ldr	r3, [r7, #0]
   267b0:	685b      	ldr	r3, [r3, #4]
   267b2:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
   267b6:	683b      	ldr	r3, [r7, #0]
   267b8:	689b      	ldr	r3, [r3, #8]
   267ba:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
   267be:	683b      	ldr	r3, [r7, #0]
   267c0:	68db      	ldr	r3, [r3, #12]
   267c2:	f8c4 340c 	str.w	r3, [r4, #1036]	; 0x40c
   267c6:	4659      	mov	r1, fp
   267c8:	4650      	mov	r0, sl
   267ca:	f7fe fd1b 	bl	25204 <CC_PalMemSetZeroPlat>
   267ce:	e798      	b.n	26702 <ProcessAesDrv+0x29a>

000267d0 <FinishAesDrv>:
   267d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   267d4:	b309      	cbz	r1, 2681a <FinishAesDrv+0x4a>
   267d6:	b302      	cbz	r2, 2681a <FinishAesDrv+0x4a>
   267d8:	4604      	mov	r4, r0
   267da:	2800      	cmp	r0, #0
   267dc:	f000 80af 	beq.w	2693e <FinishAesDrv+0x16e>
   267e0:	461d      	mov	r5, r3
   267e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   267e4:	2b07      	cmp	r3, #7
   267e6:	460e      	mov	r6, r1
   267e8:	d01b      	beq.n	26822 <FinishAesDrv+0x52>
   267ea:	b95d      	cbnz	r5, 26804 <FinishAesDrv+0x34>
   267ec:	2b03      	cmp	r3, #3
   267ee:	d110      	bne.n	26812 <FinishAesDrv+0x42>
   267f0:	6d83      	ldr	r3, [r0, #88]	; 0x58
   267f2:	b973      	cbnz	r3, 26812 <FinishAesDrv+0x42>
   267f4:	f100 0364 	add.w	r3, r0, #100	; 0x64
   267f8:	6645      	str	r5, [r0, #100]	; 0x64
   267fa:	6685      	str	r5, [r0, #104]	; 0x68
   267fc:	66c5      	str	r5, [r0, #108]	; 0x6c
   267fe:	6705      	str	r5, [r0, #112]	; 0x70
   26800:	600b      	str	r3, [r1, #0]
   26802:	2510      	movs	r5, #16
   26804:	462b      	mov	r3, r5
   26806:	4631      	mov	r1, r6
   26808:	4620      	mov	r0, r4
   2680a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2680e:	f7ff be2b 	b.w	26468 <ProcessAesDrv>
   26812:	462f      	mov	r7, r5
   26814:	4638      	mov	r0, r7
   26816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2681a:	4f76      	ldr	r7, [pc, #472]	; (269f4 <FinishAesDrv+0x224>)
   2681c:	4638      	mov	r0, r7
   2681e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26822:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   26824:	2b00      	cmp	r3, #0
   26826:	f040 808d 	bne.w	26944 <FinishAesDrv+0x174>
   2682a:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   2682e:	f080 8090 	bcs.w	26952 <FinishAesDrv+0x182>
   26832:	b91d      	cbnz	r5, 2683c <FinishAesDrv+0x6c>
   26834:	6da3      	ldr	r3, [r4, #88]	; 0x58
   26836:	2b00      	cmp	r3, #0
   26838:	f040 808b 	bne.w	26952 <FinishAesDrv+0x182>
   2683c:	486e      	ldr	r0, [pc, #440]	; (269f8 <FinishAesDrv+0x228>)
   2683e:	f04f 31ff 	mov.w	r1, #4294967295
   26842:	f7fe fcf7 	bl	25234 <CC_PalMutexLock>
   26846:	2800      	cmp	r0, #0
   26848:	f040 808f 	bne.w	2696a <FinishAesDrv+0x19a>
   2684c:	2000      	movs	r0, #0
   2684e:	f7fe fd21 	bl	25294 <CC_PalPowerSaveModeSelect>
   26852:	2800      	cmp	r0, #0
   26854:	f040 8085 	bne.w	26962 <FinishAesDrv+0x192>
   26858:	4a68      	ldr	r2, [pc, #416]	; (269fc <FinishAesDrv+0x22c>)
   2685a:	2301      	movs	r3, #1
   2685c:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   26860:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   26864:	2b00      	cmp	r3, #0
   26866:	d1fb      	bne.n	26860 <FinishAesDrv+0x90>
   26868:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2686a:	2b03      	cmp	r3, #3
   2686c:	dd4f      	ble.n	2690e <FinishAesDrv+0x13e>
   2686e:	3b06      	subs	r3, #6
   26870:	2b01      	cmp	r3, #1
   26872:	d84e      	bhi.n	26912 <FinishAesDrv+0x142>
   26874:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   26876:	2b01      	cmp	r3, #1
   26878:	d86d      	bhi.n	26956 <FinishAesDrv+0x186>
   2687a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2687c:	2b01      	cmp	r3, #1
   2687e:	d878      	bhi.n	26972 <FinishAesDrv+0x1a2>
   26880:	6e23      	ldr	r3, [r4, #96]	; 0x60
   26882:	2b01      	cmp	r3, #1
   26884:	d877      	bhi.n	26976 <FinishAesDrv+0x1a6>
   26886:	4620      	mov	r0, r4
   26888:	f7ff fd64 	bl	26354 <InitAes.part.0>
   2688c:	4607      	mov	r7, r0
   2688e:	2800      	cmp	r0, #0
   26890:	d140      	bne.n	26914 <FinishAesDrv+0x144>
   26892:	4620      	mov	r0, r4
   26894:	f7ff fd0a 	bl	262ac <LoadAesKey>
   26898:	4607      	mov	r7, r0
   2689a:	2800      	cmp	r0, #0
   2689c:	d13a      	bne.n	26914 <FinishAesDrv+0x144>
   2689e:	6b62      	ldr	r2, [r4, #52]	; 0x34
   268a0:	2a07      	cmp	r2, #7
   268a2:	d836      	bhi.n	26912 <FinishAesDrv+0x142>
   268a4:	2301      	movs	r3, #1
   268a6:	4093      	lsls	r3, r2
   268a8:	f013 0f8a 	tst.w	r3, #138	; 0x8a
   268ac:	f040 8081 	bne.w	269b2 <FinishAesDrv+0x1e2>
   268b0:	f013 0f44 	tst.w	r3, #68	; 0x44
   268b4:	d16f      	bne.n	26996 <FinishAesDrv+0x1c6>
   268b6:	07db      	lsls	r3, r3, #31
   268b8:	d52b      	bpl.n	26912 <FinishAesDrv+0x142>
   268ba:	4b50      	ldr	r3, [pc, #320]	; (269fc <FinishAesDrv+0x22c>)
   268bc:	2201      	movs	r2, #1
   268be:	f8c3 247c 	str.w	r2, [r3, #1148]	; 0x47c
   268c2:	f8c3 54bc 	str.w	r5, [r3, #1212]	; 0x4bc
   268c6:	6831      	ldr	r1, [r6, #0]
   268c8:	2d00      	cmp	r5, #0
   268ca:	d156      	bne.n	2697a <FinishAesDrv+0x1aa>
   268cc:	6da1      	ldr	r1, [r4, #88]	; 0x58
   268ce:	b909      	cbnz	r1, 268d4 <FinishAesDrv+0x104>
   268d0:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
   268d4:	4b49      	ldr	r3, [pc, #292]	; (269fc <FinishAesDrv+0x22c>)
   268d6:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
   268da:	2f00      	cmp	r7, #0
   268dc:	d1fb      	bne.n	268d6 <FinishAesDrv+0x106>
   268de:	6b61      	ldr	r1, [r4, #52]	; 0x34
   268e0:	2907      	cmp	r1, #7
   268e2:	d817      	bhi.n	26914 <FinishAesDrv+0x144>
   268e4:	2201      	movs	r2, #1
   268e6:	408a      	lsls	r2, r1
   268e8:	f012 0f8a 	tst.w	r2, #138	; 0x8a
   268ec:	d16f      	bne.n	269ce <FinishAesDrv+0x1fe>
   268ee:	f012 0f44 	tst.w	r2, #68	; 0x44
   268f2:	d00f      	beq.n	26914 <FinishAesDrv+0x144>
   268f4:	f8d3 2460 	ldr.w	r2, [r3, #1120]	; 0x460
   268f8:	6022      	str	r2, [r4, #0]
   268fa:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
   268fe:	6062      	str	r2, [r4, #4]
   26900:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
   26904:	60a2      	str	r2, [r4, #8]
   26906:	f8d3 346c 	ldr.w	r3, [r3, #1132]	; 0x46c
   2690a:	60e3      	str	r3, [r4, #12]
   2690c:	e002      	b.n	26914 <FinishAesDrv+0x144>
   2690e:	2b00      	cmp	r3, #0
   26910:	dab0      	bge.n	26874 <FinishAesDrv+0xa4>
   26912:	4f3b      	ldr	r7, [pc, #236]	; (26a00 <FinishAesDrv+0x230>)
   26914:	4a39      	ldr	r2, [pc, #228]	; (269fc <FinishAesDrv+0x22c>)
   26916:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
   2691a:	2b00      	cmp	r3, #0
   2691c:	d1fb      	bne.n	26916 <FinishAesDrv+0x146>
   2691e:	f8c2 3810 	str.w	r3, [r2, #2064]	; 0x810
   26922:	2001      	movs	r0, #1
   26924:	f7fe fcb6 	bl	25294 <CC_PalPowerSaveModeSelect>
   26928:	b9b8      	cbnz	r0, 2695a <FinishAesDrv+0x18a>
   2692a:	4833      	ldr	r0, [pc, #204]	; (269f8 <FinishAesDrv+0x228>)
   2692c:	f7fe fc8a 	bl	25244 <CC_PalMutexUnlock>
   26930:	2800      	cmp	r0, #0
   26932:	f43f af6f 	beq.w	26814 <FinishAesDrv+0x44>
   26936:	4833      	ldr	r0, [pc, #204]	; (26a04 <FinishAesDrv+0x234>)
   26938:	f7fd fd72 	bl	24420 <CC_PalAbort>
   2693c:	e76a      	b.n	26814 <FinishAesDrv+0x44>
   2693e:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   26942:	e767      	b.n	26814 <FinishAesDrv+0x44>
   26944:	2b01      	cmp	r3, #1
   26946:	f47f af74 	bne.w	26832 <FinishAesDrv+0x62>
   2694a:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   2694e:	f4ff af70 	bcc.w	26832 <FinishAesDrv+0x62>
   26952:	4f2d      	ldr	r7, [pc, #180]	; (26a08 <FinishAesDrv+0x238>)
   26954:	e75e      	b.n	26814 <FinishAesDrv+0x44>
   26956:	4f2d      	ldr	r7, [pc, #180]	; (26a0c <FinishAesDrv+0x23c>)
   26958:	e7dc      	b.n	26914 <FinishAesDrv+0x144>
   2695a:	482d      	ldr	r0, [pc, #180]	; (26a10 <FinishAesDrv+0x240>)
   2695c:	f7fd fd60 	bl	24420 <CC_PalAbort>
   26960:	e7e3      	b.n	2692a <FinishAesDrv+0x15a>
   26962:	482c      	ldr	r0, [pc, #176]	; (26a14 <FinishAesDrv+0x244>)
   26964:	f7fd fd5c 	bl	24420 <CC_PalAbort>
   26968:	e776      	b.n	26858 <FinishAesDrv+0x88>
   2696a:	482b      	ldr	r0, [pc, #172]	; (26a18 <FinishAesDrv+0x248>)
   2696c:	f7fd fd58 	bl	24420 <CC_PalAbort>
   26970:	e76c      	b.n	2684c <FinishAesDrv+0x7c>
   26972:	4f2a      	ldr	r7, [pc, #168]	; (26a1c <FinishAesDrv+0x24c>)
   26974:	e7ce      	b.n	26914 <FinishAesDrv+0x144>
   26976:	4f2a      	ldr	r7, [pc, #168]	; (26a20 <FinishAesDrv+0x250>)
   26978:	e7cc      	b.n	26914 <FinishAesDrv+0x144>
   2697a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   2697c:	2a01      	cmp	r2, #1
   2697e:	d033      	beq.n	269e8 <FinishAesDrv+0x218>
   26980:	f8c3 1c30 	str.w	r1, [r3, #3120]	; 0xc30
   26984:	2010      	movs	r0, #16
   26986:	f8c3 5c34 	str.w	r5, [r3, #3124]	; 0xc34
   2698a:	f7fe fbbd 	bl	25108 <CC_HalWaitInterrupt>
   2698e:	4607      	mov	r7, r0
   26990:	2800      	cmp	r0, #0
   26992:	d09f      	beq.n	268d4 <FinishAesDrv+0x104>
   26994:	e7be      	b.n	26914 <FinishAesDrv+0x144>
   26996:	4b19      	ldr	r3, [pc, #100]	; (269fc <FinishAesDrv+0x22c>)
   26998:	6822      	ldr	r2, [r4, #0]
   2699a:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
   2699e:	6862      	ldr	r2, [r4, #4]
   269a0:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
   269a4:	68a2      	ldr	r2, [r4, #8]
   269a6:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468
   269aa:	68e2      	ldr	r2, [r4, #12]
   269ac:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   269b0:	e783      	b.n	268ba <FinishAesDrv+0xea>
   269b2:	4b12      	ldr	r3, [pc, #72]	; (269fc <FinishAesDrv+0x22c>)
   269b4:	6822      	ldr	r2, [r4, #0]
   269b6:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
   269ba:	6862      	ldr	r2, [r4, #4]
   269bc:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
   269c0:	68a2      	ldr	r2, [r4, #8]
   269c2:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
   269c6:	68e2      	ldr	r2, [r4, #12]
   269c8:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
   269cc:	e775      	b.n	268ba <FinishAesDrv+0xea>
   269ce:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
   269d2:	6022      	str	r2, [r4, #0]
   269d4:	f8d3 2444 	ldr.w	r2, [r3, #1092]	; 0x444
   269d8:	6062      	str	r2, [r4, #4]
   269da:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
   269de:	60a2      	str	r2, [r4, #8]
   269e0:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
   269e4:	60e3      	str	r3, [r4, #12]
   269e6:	e795      	b.n	26914 <FinishAesDrv+0x144>
   269e8:	f8c3 1c28 	str.w	r1, [r3, #3112]	; 0xc28
   269ec:	2040      	movs	r0, #64	; 0x40
   269ee:	f8c3 5c2c 	str.w	r5, [r3, #3116]	; 0xc2c
   269f2:	e7ca      	b.n	2698a <FinishAesDrv+0x1ba>
   269f4:	00f1000b 	.word	0x00f1000b
   269f8:	20000818 	.word	0x20000818
   269fc:	5002b000 	.word	0x5002b000
   26a00:	00f10001 	.word	0x00f10001
   26a04:	0002a944 	.word	0x0002a944
   26a08:	00f10005 	.word	0x00f10005
   26a0c:	00f10002 	.word	0x00f10002
   26a10:	0002a924 	.word	0x0002a924
   26a14:	0002a904 	.word	0x0002a904
   26a18:	0002a8ec 	.word	0x0002a8ec
   26a1c:	00f10003 	.word	0x00f10003
   26a20:	00f10004 	.word	0x00f10004

00026a24 <kmu_validate_slot_and_size>:
   26a24:	b929      	cbnz	r1, 26a32 <kmu_validate_slot_and_size+0xe>
   26a26:	4b04      	ldr	r3, [pc, #16]	; (26a38 <kmu_validate_slot_and_size+0x14>)
   26a28:	2800      	cmp	r0, #0
   26a2a:	bf14      	ite	ne
   26a2c:	4618      	movne	r0, r3
   26a2e:	2000      	moveq	r0, #0
   26a30:	4770      	bx	lr
   26a32:	4802      	ldr	r0, [pc, #8]	; (26a3c <kmu_validate_slot_and_size+0x18>)
   26a34:	4770      	bx	lr
   26a36:	bf00      	nop
   26a38:	00f70001 	.word	0x00f70001
   26a3c:	00f70003 	.word	0x00f70003

00026a40 <kmu_validate_kdr_slot_and_size>:
   26a40:	b929      	cbnz	r1, 26a4e <kmu_validate_kdr_slot_and_size+0xe>
   26a42:	4b04      	ldr	r3, [pc, #16]	; (26a54 <kmu_validate_kdr_slot_and_size+0x14>)
   26a44:	2800      	cmp	r0, #0
   26a46:	bf14      	ite	ne
   26a48:	4618      	movne	r0, r3
   26a4a:	2000      	moveq	r0, #0
   26a4c:	4770      	bx	lr
   26a4e:	4802      	ldr	r0, [pc, #8]	; (26a58 <kmu_validate_kdr_slot_and_size+0x18>)
   26a50:	4770      	bx	lr
   26a52:	bf00      	nop
   26a54:	00f70001 	.word	0x00f70001
   26a58:	00f70003 	.word	0x00f70003

00026a5c <kmu_use_kdr_key>:
   26a5c:	4b03      	ldr	r3, [pc, #12]	; (26a6c <kmu_use_kdr_key+0x10>)
   26a5e:	2000      	movs	r0, #0
   26a60:	2201      	movs	r2, #1
   26a62:	f8c3 0a38 	str.w	r0, [r3, #2616]	; 0xa38
   26a66:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   26a6a:	4770      	bx	lr
   26a6c:	5002b000 	.word	0x5002b000

00026a70 <kmu_derive_cmac>:
   26a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26a74:	b0cc      	sub	sp, #304	; 0x130
   26a76:	2400      	movs	r4, #0
   26a78:	9d57      	ldr	r5, [sp, #348]	; 0x15c
   26a7a:	f8dd 8158 	ldr.w	r8, [sp, #344]	; 0x158
   26a7e:	4682      	mov	sl, r0
   26a80:	4689      	mov	r9, r1
   26a82:	4616      	mov	r6, r2
   26a84:	4621      	mov	r1, r4
   26a86:	2274      	movs	r2, #116	; 0x74
   26a88:	a80e      	add	r0, sp, #56	; 0x38
   26a8a:	461f      	mov	r7, r3
   26a8c:	f000 ffd9 	bl	27a42 <memset>
   26a90:	2280      	movs	r2, #128	; 0x80
   26a92:	4621      	mov	r1, r4
   26a94:	a82c      	add	r0, sp, #176	; 0xb0
   26a96:	942b      	str	r4, [sp, #172]	; 0xac
   26a98:	f000 ffd3 	bl	27a42 <memset>
   26a9c:	2384      	movs	r3, #132	; 0x84
   26a9e:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   26aa2:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   26aa6:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   26aaa:	9305      	str	r3, [sp, #20]
   26aac:	d863      	bhi.n	26b76 <kmu_derive_cmac+0x106>
   26aae:	f7ff fcc3 	bl	26438 <write_invalid_key>
   26ab2:	ab05      	add	r3, sp, #20
   26ab4:	4630      	mov	r0, r6
   26ab6:	ae2b      	add	r6, sp, #172	; 0xac
   26ab8:	9301      	str	r3, [sp, #4]
   26aba:	9502      	str	r5, [sp, #8]
   26abc:	e9dd 2354 	ldrd	r2, r3, [sp, #336]	; 0x150
   26ac0:	4639      	mov	r1, r7
   26ac2:	9600      	str	r6, [sp, #0]
   26ac4:	f000 f862 	bl	26b8c <UtilCmacBuildDataForDerivation>
   26ac8:	2800      	cmp	r0, #0
   26aca:	d14f      	bne.n	26b6c <kmu_derive_cmac+0xfc>
   26acc:	2303      	movs	r3, #3
   26ace:	f88d 3013 	strb.w	r3, [sp, #19]
   26ad2:	f89d 3013 	ldrb.w	r3, [sp, #19]
   26ad6:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   26ada:	2307      	movs	r3, #7
   26adc:	2200      	movs	r2, #0
   26ade:	901c      	str	r0, [sp, #112]	; 0x70
   26ae0:	2110      	movs	r1, #16
   26ae2:	a80e      	add	r0, sp, #56	; 0x38
   26ae4:	931b      	str	r3, [sp, #108]	; 0x6c
   26ae6:	2401      	movs	r4, #1
   26ae8:	2301      	movs	r3, #1
   26aea:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   26aee:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
   26af2:	f8cd a078 	str.w	sl, [sp, #120]	; 0x78
   26af6:	9426      	str	r4, [sp, #152]	; 0x98
   26af8:	f10d 0920 	add.w	r9, sp, #32
   26afc:	f7fe fb82 	bl	25204 <CC_PalMemSetZeroPlat>
   26b00:	2210      	movs	r2, #16
   26b02:	9200      	str	r2, [sp, #0]
   26b04:	9905      	ldr	r1, [sp, #20]
   26b06:	f8cd 9004 	str.w	r9, [sp, #4]
   26b0a:	ab0a      	add	r3, sp, #40	; 0x28
   26b0c:	4630      	mov	r0, r6
   26b0e:	aa06      	add	r2, sp, #24
   26b10:	f7ff fa22 	bl	25f58 <SetDataBuffersInfo>
   26b14:	4607      	mov	r7, r0
   26b16:	b170      	cbz	r0, 26b36 <kmu_derive_cmac+0xc6>
   26b18:	e01d      	b.n	26b56 <kmu_derive_cmac+0xe6>
   26b1a:	a90e      	add	r1, sp, #56	; 0x38
   26b1c:	eb08 0007 	add.w	r0, r8, r7
   26b20:	f7fe fb6c 	bl	251fc <CC_PalMemCopyPlat>
   26b24:	2110      	movs	r1, #16
   26b26:	a80e      	add	r0, sp, #56	; 0x38
   26b28:	f7fe fb6c 	bl	25204 <CC_PalMemSetZeroPlat>
   26b2c:	3401      	adds	r4, #1
   26b2e:	1bad      	subs	r5, r5, r6
   26b30:	4437      	add	r7, r6
   26b32:	b2e4      	uxtb	r4, r4
   26b34:	d024      	beq.n	26b80 <kmu_derive_cmac+0x110>
   26b36:	2d10      	cmp	r5, #16
   26b38:	464a      	mov	r2, r9
   26b3a:	9b05      	ldr	r3, [sp, #20]
   26b3c:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   26b40:	a906      	add	r1, sp, #24
   26b42:	a80e      	add	r0, sp, #56	; 0x38
   26b44:	462e      	mov	r6, r5
   26b46:	bf28      	it	cs
   26b48:	2610      	movcs	r6, #16
   26b4a:	f7ff fe41 	bl	267d0 <FinishAesDrv>
   26b4e:	4632      	mov	r2, r6
   26b50:	2800      	cmp	r0, #0
   26b52:	d0e2      	beq.n	26b1a <kmu_derive_cmac+0xaa>
   26b54:	4607      	mov	r7, r0
   26b56:	a80e      	add	r0, sp, #56	; 0x38
   26b58:	2274      	movs	r2, #116	; 0x74
   26b5a:	2100      	movs	r1, #0
   26b5c:	f7fe fb50 	bl	25200 <CC_PalMemSetPlat>
   26b60:	f7ff fc6a 	bl	26438 <write_invalid_key>
   26b64:	4638      	mov	r0, r7
   26b66:	b04c      	add	sp, #304	; 0x130
   26b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26b6c:	4f05      	ldr	r7, [pc, #20]	; (26b84 <kmu_derive_cmac+0x114>)
   26b6e:	4638      	mov	r0, r7
   26b70:	b04c      	add	sp, #304	; 0x130
   26b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26b76:	4f04      	ldr	r7, [pc, #16]	; (26b88 <kmu_derive_cmac+0x118>)
   26b78:	4638      	mov	r0, r7
   26b7a:	b04c      	add	sp, #304	; 0x130
   26b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26b80:	462f      	mov	r7, r5
   26b82:	e7e8      	b.n	26b56 <kmu_derive_cmac+0xe6>
   26b84:	00f1000e 	.word	0x00f1000e
   26b88:	00f1000f 	.word	0x00f1000f

00026b8c <UtilCmacBuildDataForDerivation>:
   26b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26b90:	b082      	sub	sp, #8
   26b92:	461e      	mov	r6, r3
   26b94:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   26b96:	2300      	movs	r3, #0
   26b98:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   26b9c:	9301      	str	r3, [sp, #4]
   26b9e:	d83e      	bhi.n	26c1e <UtilCmacBuildDataForDerivation+0x92>
   26ba0:	00ed      	lsls	r5, r5, #3
   26ba2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
   26ba6:	4617      	mov	r7, r2
   26ba8:	f101 32ff 	add.w	r2, r1, #4294967295
   26bac:	bf34      	ite	cc
   26bae:	2303      	movcc	r3, #3
   26bb0:	2304      	movcs	r3, #4
   26bb2:	2a3f      	cmp	r2, #63	; 0x3f
   26bb4:	460c      	mov	r4, r1
   26bb6:	9300      	str	r3, [sp, #0]
   26bb8:	d831      	bhi.n	26c1e <UtilCmacBuildDataForDerivation+0x92>
   26bba:	b380      	cbz	r0, 26c1e <UtilCmacBuildDataForDerivation+0x92>
   26bbc:	bb66      	cbnz	r6, 26c18 <UtilCmacBuildDataForDerivation+0x8c>
   26bbe:	9a08      	ldr	r2, [sp, #32]
   26bc0:	b36a      	cbz	r2, 26c1e <UtilCmacBuildDataForDerivation+0x92>
   26bc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   26bc4:	6811      	ldr	r1, [r2, #0]
   26bc6:	b351      	cbz	r1, 26c1e <UtilCmacBuildDataForDerivation+0x92>
   26bc8:	19a2      	adds	r2, r4, r6
   26bca:	4413      	add	r3, r2
   26bcc:	4299      	cmp	r1, r3
   26bce:	d326      	bcc.n	26c1e <UtilCmacBuildDataForDerivation+0x92>
   26bd0:	9b08      	ldr	r3, [sp, #32]
   26bd2:	4601      	mov	r1, r0
   26bd4:	4622      	mov	r2, r4
   26bd6:	1c58      	adds	r0, r3, #1
   26bd8:	f7fe fb10 	bl	251fc <CC_PalMemCopyPlat>
   26bdc:	9b08      	ldr	r3, [sp, #32]
   26bde:	f104 0802 	add.w	r8, r4, #2
   26be2:	441c      	add	r4, r3
   26be4:	2300      	movs	r3, #0
   26be6:	7063      	strb	r3, [r4, #1]
   26be8:	bb26      	cbnz	r6, 26c34 <UtilCmacBuildDataForDerivation+0xa8>
   26bea:	9b08      	ldr	r3, [sp, #32]
   26bec:	9500      	str	r5, [sp, #0]
   26bee:	2dff      	cmp	r5, #255	; 0xff
   26bf0:	eb03 0008 	add.w	r0, r3, r8
   26bf4:	d917      	bls.n	26c26 <UtilCmacBuildDataForDerivation+0x9a>
   26bf6:	022b      	lsls	r3, r5, #8
   26bf8:	b29b      	uxth	r3, r3
   26bfa:	ea43 2315 	orr.w	r3, r3, r5, lsr #8
   26bfe:	2202      	movs	r2, #2
   26c00:	a901      	add	r1, sp, #4
   26c02:	9301      	str	r3, [sp, #4]
   26c04:	f7fe fafa 	bl	251fc <CC_PalMemCopyPlat>
   26c08:	f108 0302 	add.w	r3, r8, #2
   26c0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   26c0e:	2000      	movs	r0, #0
   26c10:	6013      	str	r3, [r2, #0]
   26c12:	b002      	add	sp, #8
   26c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26c18:	b10f      	cbz	r7, 26c1e <UtilCmacBuildDataForDerivation+0x92>
   26c1a:	2e40      	cmp	r6, #64	; 0x40
   26c1c:	d9cf      	bls.n	26bbe <UtilCmacBuildDataForDerivation+0x32>
   26c1e:	480a      	ldr	r0, [pc, #40]	; (26c48 <UtilCmacBuildDataForDerivation+0xbc>)
   26c20:	b002      	add	sp, #8
   26c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26c26:	2201      	movs	r2, #1
   26c28:	4669      	mov	r1, sp
   26c2a:	f7fe fae7 	bl	251fc <CC_PalMemCopyPlat>
   26c2e:	f108 0301 	add.w	r3, r8, #1
   26c32:	e7eb      	b.n	26c0c <UtilCmacBuildDataForDerivation+0x80>
   26c34:	9b08      	ldr	r3, [sp, #32]
   26c36:	4632      	mov	r2, r6
   26c38:	eb03 0008 	add.w	r0, r3, r8
   26c3c:	4639      	mov	r1, r7
   26c3e:	f7fe fadd 	bl	251fc <CC_PalMemCopyPlat>
   26c42:	44b0      	add	r8, r6
   26c44:	e7d1      	b.n	26bea <UtilCmacBuildDataForDerivation+0x5e>
   26c46:	bf00      	nop
   26c48:	80000006 	.word	0x80000006

00026c4c <CC_PalDataBufferAttrGet>:
   26c4c:	2000      	movs	r0, #0
   26c4e:	7018      	strb	r0, [r3, #0]
   26c50:	4770      	bx	lr
   26c52:	bf00      	nop

00026c54 <z_log_msg_static_create.constprop.0>:
   26c54:	2300      	movs	r3, #0
   26c56:	f7ed ba15 	b.w	14084 <z_impl_z_log_msg_static_create>

00026c5a <uart_rx_enable.constprop.0>:


extern int z_impl_uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout);

__pinned_func
static inline int uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout)
   26c5a:	b410      	push	{r4}
	return api->rx_enable(dev, buf, len, timeout);
   26c5c:	6883      	ldr	r3, [r0, #8]
   26c5e:	68dc      	ldr	r4, [r3, #12]
   26c60:	2214      	movs	r2, #20
   26c62:	46a4      	mov	ip, r4
   26c64:	2332      	movs	r3, #50	; 0x32
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_UART_RX_ENABLE);
	}
#endif
	compiler_barrier();
	return z_impl_uart_rx_enable(dev, buf, len, timeout);
}
   26c66:	f85d 4b04 	ldr.w	r4, [sp], #4
   26c6a:	4760      	bx	ip

00026c6c <uart_tx.constprop.0>:
static inline int uart_tx(const struct device * dev, const uint8_t * buf, size_t len, int32_t timeout)
   26c6c:	b410      	push	{r4}
	return api->tx(dev, buf, len, timeout);
   26c6e:	6883      	ldr	r3, [r0, #8]
   26c70:	685c      	ldr	r4, [r3, #4]
   26c72:	f04f 33ff 	mov.w	r3, #4294967295
   26c76:	46a4      	mov	ip, r4
}
   26c78:	f85d 4b04 	ldr.w	r4, [sp], #4
   26c7c:	4760      	bx	ip

00026c7e <error>:
{
   26c7e:	b508      	push	{r3, lr}
	dk_set_leds_state(DK_ALL_LEDS_MSK, DK_NO_LEDS_MSK);
   26c80:	2100      	movs	r1, #0
   26c82:	200f      	movs	r0, #15
   26c84:	f002 fc59 	bl	2953a <dk_set_leds_state>
	return z_impl_k_sleep(timeout);
   26c88:	2100      	movs	r1, #0
   26c8a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   26c8e:	f7fb ff4f 	bl	22b30 <z_impl_k_sleep>
	while (true) {
   26c92:	e7f9      	b.n	26c88 <error+0xa>

00026c94 <cbpprintf_external>:
{
   26c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26c98:	4606      	mov	r6, r0
   26c9a:	460d      	mov	r5, r1
   26c9c:	4617      	mov	r7, r2
	if (buf == NULL) {
   26c9e:	4698      	mov	r8, r3
   26ca0:	b32b      	cbz	r3, 26cee <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
   26ca2:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   26ca6:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   26caa:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   26cac:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   26cae:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   26cb2:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   26cb6:	441c      	add	r4, r3
   26cb8:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   26cba:	f04f 0a00 	mov.w	sl, #0
   26cbe:	45ca      	cmp	sl, r9
   26cc0:	d309      	bcc.n	26cd6 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   26cc2:	f8d8 2004 	ldr.w	r2, [r8, #4]
   26cc6:	f108 0308 	add.w	r3, r8, #8
   26cca:	4639      	mov	r1, r7
   26ccc:	4630      	mov	r0, r6
   26cce:	46ac      	mov	ip, r5
}
   26cd0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   26cd4:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   26cd6:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   26cda:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   26cde:	4620      	mov	r0, r4
   26ce0:	f000 fe6d 	bl	279be <strlen>
   26ce4:	3001      	adds	r0, #1
   26ce6:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   26ce8:	f10a 0a01 	add.w	sl, sl, #1
   26cec:	e7e7      	b.n	26cbe <cbpprintf_external+0x2a>
}
   26cee:	f06f 0015 	mvn.w	r0, #21
   26cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00026cf6 <is_ptr>:
{
   26cf6:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   26cf8:	2500      	movs	r5, #0
{
   26cfa:	4602      	mov	r2, r0
	bool mod = false;
   26cfc:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   26cfe:	4614      	mov	r4, r2
   26d00:	f814 3b01 	ldrb.w	r3, [r4], #1
   26d04:	b90b      	cbnz	r3, 26d0a <is_ptr+0x14>
					return false;
   26d06:	4618      	mov	r0, r3
   26d08:	e009      	b.n	26d1e <is_ptr+0x28>
		if (mod) {
   26d0a:	b198      	cbz	r0, 26d34 <is_ptr+0x3e>
			if (cnt == n) {
   26d0c:	428d      	cmp	r5, r1
   26d0e:	d107      	bne.n	26d20 <is_ptr+0x2a>
				if (c == 'p') {
   26d10:	2b70      	cmp	r3, #112	; 0x70
   26d12:	d004      	beq.n	26d1e <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   26d14:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   26d18:	2a3a      	cmp	r2, #58	; 0x3a
   26d1a:	d80b      	bhi.n	26d34 <is_ptr+0x3e>
					return false;
   26d1c:	2000      	movs	r0, #0
}
   26d1e:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   26d20:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   26d24:	2e3a      	cmp	r6, #58	; 0x3a
   26d26:	d805      	bhi.n	26d34 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   26d28:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   26d2a:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   26d2c:	1c94      	adds	r4, r2, #2
   26d2e:	2b00      	cmp	r3, #0
   26d30:	d0e9      	beq.n	26d06 <is_ptr+0x10>
   26d32:	2000      	movs	r0, #0
		if (c == '%') {
   26d34:	2b25      	cmp	r3, #37	; 0x25
			mod = !mod;
   26d36:	bf08      	it	eq
   26d38:	f080 0001 	eoreq.w	r0, r0, #1
	while ((c = *fmt++) != '\0') {
   26d3c:	4622      	mov	r2, r4
   26d3e:	e7de      	b.n	26cfe <is_ptr+0x8>

00026d40 <arch_printk_char_out>:
}
   26d40:	2000      	movs	r0, #0
   26d42:	4770      	bx	lr

00026d44 <str_out>:
{
   26d44:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   26d46:	688a      	ldr	r2, [r1, #8]
   26d48:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   26d4a:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   26d4c:	b114      	cbz	r4, 26d54 <str_out+0x10>
   26d4e:	684b      	ldr	r3, [r1, #4]
   26d50:	4293      	cmp	r3, r2
   26d52:	dc01      	bgt.n	26d58 <str_out+0x14>
		ctx->count++;
   26d54:	608d      	str	r5, [r1, #8]
}
   26d56:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   26d58:	3b01      	subs	r3, #1
   26d5a:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   26d5c:	bf08      	it	eq
   26d5e:	2200      	moveq	r2, #0
   26d60:	608d      	str	r5, [r1, #8]
   26d62:	bf0c      	ite	eq
   26d64:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   26d66:	54a0      	strbne	r0, [r4, r2]
   26d68:	e7f5      	b.n	26d56 <str_out+0x12>

00026d6a <vprintk>:
		z_log_vprintk(fmt, ap);
   26d6a:	f000 bb6d 	b.w	27448 <z_log_vprintk>

00026d6e <printk>:
{
   26d6e:	b40f      	push	{r0, r1, r2, r3}
   26d70:	b507      	push	{r0, r1, r2, lr}
   26d72:	a904      	add	r1, sp, #16
   26d74:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   26d78:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   26d7a:	f000 fb65 	bl	27448 <z_log_vprintk>
}
   26d7e:	b003      	add	sp, #12
   26d80:	f85d eb04 	ldr.w	lr, [sp], #4
   26d84:	b004      	add	sp, #16
   26d86:	4770      	bx	lr

00026d88 <snprintk>:
{
   26d88:	b40c      	push	{r2, r3}
   26d8a:	b507      	push	{r0, r1, r2, lr}
   26d8c:	ab04      	add	r3, sp, #16
   26d8e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   26d92:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   26d94:	f7eb ff74 	bl	12c80 <vsnprintk>
}
   26d98:	b003      	add	sp, #12
   26d9a:	f85d eb04 	ldr.w	lr, [sp], #4
   26d9e:	b002      	add	sp, #8
   26da0:	4770      	bx	lr

00026da2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   26da2:	4604      	mov	r4, r0
   26da4:	b508      	push	{r3, lr}
   26da6:	4608      	mov	r0, r1
   26da8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   26daa:	461a      	mov	r2, r3
   26dac:	47a0      	blx	r4
	return z_impl_z_current_get();
   26dae:	f7fb fef3 	bl	22b98 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   26db2:	f7ee fef5 	bl	15ba0 <z_impl_k_thread_abort>

00026db6 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   26db6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   26dba:	8840      	ldrh	r0, [r0, #2]
}
   26dbc:	0840      	lsrs	r0, r0, #1
   26dbe:	4770      	bx	lr

00026dc0 <free_list_add>:
{
   26dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26dc2:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   26dc4:	f7ff fff7 	bl	26db6 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   26dc8:	fab0 f080 	clz	r0, r0
   26dcc:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   26dd0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   26dd4:	00ca      	lsls	r2, r1, #3
   26dd6:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   26dda:	1d17      	adds	r7, r2, #4
{
   26ddc:	460c      	mov	r4, r1
   26dde:	3206      	adds	r2, #6
   26de0:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   26de2:	b956      	cbnz	r6, 26dfa <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   26de4:	2101      	movs	r1, #1
   26de6:	fa01 f000 	lsl.w	r0, r1, r0
   26dea:	68d9      	ldr	r1, [r3, #12]
   26dec:	4301      	orrs	r1, r0
   26dee:	60d9      	str	r1, [r3, #12]
		b->next = c;
   26df0:	f8cc 4010 	str.w	r4, [ip, #16]
   26df4:	53dd      	strh	r5, [r3, r7]
   26df6:	529d      	strh	r5, [r3, r2]
}
   26df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   26dfa:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   26dfc:	3104      	adds	r1, #4
   26dfe:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   26e00:	53d8      	strh	r0, [r3, r7]
   26e02:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   26e06:	529e      	strh	r6, [r3, r2]
   26e08:	80c5      	strh	r5, [r0, #6]
   26e0a:	525d      	strh	r5, [r3, r1]
   26e0c:	e7f4      	b.n	26df8 <free_list_add+0x38>

00026e0e <free_list_remove_bidx>:
{
   26e0e:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   26e10:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   26e14:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   26e16:	4299      	cmp	r1, r3
   26e18:	f102 0104 	add.w	r1, r2, #4
   26e1c:	d10a      	bne.n	26e34 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   26e1e:	2301      	movs	r3, #1
   26e20:	fa03 f202 	lsl.w	r2, r3, r2
   26e24:	68c3      	ldr	r3, [r0, #12]
   26e26:	ea23 0302 	bic.w	r3, r3, r2
   26e2a:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   26e2c:	2300      	movs	r3, #0
   26e2e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   26e32:	bd10      	pop	{r4, pc}
   26e34:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   26e36:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   26e3a:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   26e3e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   26e42:	80cb      	strh	r3, [r1, #6]
   26e44:	8082      	strh	r2, [r0, #4]
}
   26e46:	e7f4      	b.n	26e32 <free_list_remove_bidx+0x24>

00026e48 <free_list_remove>:
{
   26e48:	b508      	push	{r3, lr}
   26e4a:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   26e4c:	f7ff ffb3 	bl	26db6 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   26e50:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   26e54:	f1c2 021f 	rsb	r2, r2, #31
   26e58:	4618      	mov	r0, r3
}
   26e5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   26e5e:	f7ff bfd6 	b.w	26e0e <free_list_remove_bidx>

00026e62 <alloc_chunk>:
{
   26e62:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26e66:	fab1 f581 	clz	r5, r1
   26e6a:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   26e6e:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   26e72:	4603      	mov	r3, r0
	if (b->next) {
   26e74:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   26e78:	460e      	mov	r6, r1
	if (b->next) {
   26e7a:	b1c2      	cbz	r2, 26eae <alloc_chunk+0x4c>
   26e7c:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   26e7e:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   26e82:	4618      	mov	r0, r3
   26e84:	4621      	mov	r1, r4
   26e86:	f7ff ff96 	bl	26db6 <chunk_size>
   26e8a:	42b0      	cmp	r0, r6
   26e8c:	d306      	bcc.n	26e9c <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   26e8e:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   26e90:	4618      	mov	r0, r3
   26e92:	f7ff ffbc 	bl	26e0e <free_list_remove_bidx>
}
   26e96:	4620      	mov	r0, r4
   26e98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   26e9c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   26ea0:	3f01      	subs	r7, #1
   26ea2:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   26ea4:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   26ea8:	d001      	beq.n	26eae <alloc_chunk+0x4c>
   26eaa:	4282      	cmp	r2, r0
   26eac:	d1e7      	bne.n	26e7e <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   26eae:	f1c5 0220 	rsb	r2, r5, #32
   26eb2:	f04f 34ff 	mov.w	r4, #4294967295
   26eb6:	4094      	lsls	r4, r2
   26eb8:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   26eba:	4014      	ands	r4, r2
   26ebc:	d0eb      	beq.n	26e96 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   26ebe:	fa94 f2a4 	rbit	r2, r4
   26ec2:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   26ec6:	1d11      	adds	r1, r2, #4
   26ec8:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   26ecc:	4621      	mov	r1, r4
   26ece:	e7df      	b.n	26e90 <alloc_chunk+0x2e>

00026ed0 <merge_chunks>:
{
   26ed0:	b538      	push	{r3, r4, r5, lr}
   26ed2:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   26ed4:	f7ff ff6f 	bl	26db6 <chunk_size>
{
   26ed8:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   26eda:	4604      	mov	r4, r0
   26edc:	4611      	mov	r1, r2
   26ede:	4618      	mov	r0, r3
   26ee0:	f7ff ff69 	bl	26db6 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   26ee4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   26ee8:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   26eea:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   26eec:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   26eee:	4618      	mov	r0, r3
   26ef0:	f7ff ff61 	bl	26db6 <chunk_size>
	void *cmem = &buf[c];
   26ef4:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   26ef6:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   26efa:	bd38      	pop	{r3, r4, r5, pc}

00026efc <split_chunks>:
{
   26efc:	b538      	push	{r3, r4, r5, lr}
   26efe:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   26f00:	f7ff ff59 	bl	26db6 <chunk_size>
{
   26f04:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   26f06:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   26f08:	1a51      	subs	r1, r2, r1
   26f0a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   26f0e:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   26f10:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   26f12:	8060      	strh	r0, [r4, #2]
   26f14:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   26f18:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   26f1a:	8044      	strh	r4, [r0, #2]
   26f1c:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   26f20:	4618      	mov	r0, r3
   26f22:	4611      	mov	r1, r2
   26f24:	f7ff ff47 	bl	26db6 <chunk_size>
	void *cmem = &buf[c];
   26f28:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   26f2a:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   26f2e:	bd38      	pop	{r3, r4, r5, pc}

00026f30 <free_chunk>:
{
   26f30:	b538      	push	{r3, r4, r5, lr}
   26f32:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   26f34:	f7ff ff3f 	bl	26db6 <chunk_size>
   26f38:	460c      	mov	r4, r1
   26f3a:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   26f3c:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   26f40:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   26f42:	07da      	lsls	r2, r3, #31
   26f44:	d40a      	bmi.n	26f5c <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   26f46:	4628      	mov	r0, r5
   26f48:	f7ff ff7e 	bl	26e48 <free_list_remove>
	return c + chunk_size(h, c);
   26f4c:	4621      	mov	r1, r4
   26f4e:	4628      	mov	r0, r5
   26f50:	f7ff ff31 	bl	26db6 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   26f54:	1822      	adds	r2, r4, r0
   26f56:	4628      	mov	r0, r5
   26f58:	f7ff ffba 	bl	26ed0 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   26f5c:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   26f60:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   26f62:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   26f66:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   26f68:	07db      	lsls	r3, r3, #31
   26f6a:	d40c      	bmi.n	26f86 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   26f6c:	4628      	mov	r0, r5
   26f6e:	f7ff ff6b 	bl	26e48 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   26f72:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   26f76:	4622      	mov	r2, r4
   26f78:	1a61      	subs	r1, r4, r1
   26f7a:	4628      	mov	r0, r5
   26f7c:	f7ff ffa8 	bl	26ed0 <merge_chunks>
   26f80:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   26f84:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   26f86:	4621      	mov	r1, r4
   26f88:	4628      	mov	r0, r5
}
   26f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   26f8e:	f7ff bf17 	b.w	26dc0 <free_list_add>

00026f92 <sys_heap_alloc>:
{
   26f92:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   26f94:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   26f96:	b909      	cbnz	r1, 26f9c <sys_heap_alloc+0xa>
		return NULL;
   26f98:	2000      	movs	r0, #0
}
   26f9a:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   26f9c:	68ab      	ldr	r3, [r5, #8]
   26f9e:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   26fa2:	d9f9      	bls.n	26f98 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   26fa4:	310b      	adds	r1, #11
   26fa6:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   26fa8:	4621      	mov	r1, r4
   26faa:	4628      	mov	r0, r5
   26fac:	f7ff ff59 	bl	26e62 <alloc_chunk>
	if (c == 0U) {
   26fb0:	4606      	mov	r6, r0
   26fb2:	2800      	cmp	r0, #0
   26fb4:	d0f0      	beq.n	26f98 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   26fb6:	4601      	mov	r1, r0
   26fb8:	4628      	mov	r0, r5
   26fba:	f7ff fefc 	bl	26db6 <chunk_size>
   26fbe:	42a0      	cmp	r0, r4
   26fc0:	d907      	bls.n	26fd2 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   26fc2:	1932      	adds	r2, r6, r4
   26fc4:	4628      	mov	r0, r5
   26fc6:	f7ff ff99 	bl	26efc <split_chunks>
		free_list_add(h, c + chunk_sz);
   26fca:	4611      	mov	r1, r2
   26fcc:	4628      	mov	r0, r5
   26fce:	f7ff fef7 	bl	26dc0 <free_list_add>
	void *cmem = &buf[c];
   26fd2:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   26fd6:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   26fd8:	8853      	ldrh	r3, [r2, #2]
   26fda:	f043 0301 	orr.w	r3, r3, #1
   26fde:	8053      	strh	r3, [r2, #2]
   26fe0:	3004      	adds	r0, #4
	return mem;
   26fe2:	e7da      	b.n	26f9a <sys_heap_alloc+0x8>

00026fe4 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   26fe4:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   26fe6:	f013 0307 	ands.w	r3, r3, #7
   26fea:	d105      	bne.n	26ff8 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   26fec:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   26fee:	2b00      	cmp	r3, #0
   26ff0:	bf0c      	ite	eq
   26ff2:	2000      	moveq	r0, #0
   26ff4:	2003      	movne	r0, #3
   26ff6:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   26ff8:	2b02      	cmp	r3, #2
   26ffa:	d105      	bne.n	27008 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   26ffc:	8bc0      	ldrh	r0, [r0, #30]
   26ffe:	fab0 f080 	clz	r0, r0
   27002:	0940      	lsrs	r0, r0, #5
   27004:	0080      	lsls	r0, r0, #2
   27006:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   27008:	2b01      	cmp	r3, #1
   2700a:	d105      	bne.n	27018 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2700c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   2700e:	2b00      	cmp	r3, #0
   27010:	bf0c      	ite	eq
   27012:	2000      	moveq	r0, #0
   27014:	2005      	movne	r0, #5
   27016:	4770      	bx	lr
	int evt = EVT_NOP;
   27018:	2000      	movs	r0, #0
}
   2701a:	4770      	bx	lr

0002701c <validate_args>:
{
   2701c:	b510      	push	{r4, lr}
   2701e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   27020:	b100      	cbz	r0, 27024 <validate_args+0x8>
   27022:	b911      	cbnz	r1, 2702a <validate_args+0xe>
		return -EINVAL;
   27024:	f06f 0015 	mvn.w	r0, #21
}
   27028:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   2702a:	1d08      	adds	r0, r1, #4
   2702c:	f000 f82f 	bl	2708e <sys_notify_validate>
	if ((rv == 0)
   27030:	2800      	cmp	r0, #0
   27032:	d1f9      	bne.n	27028 <validate_args+0xc>
	    && ((cli->notify.flags
   27034:	68a3      	ldr	r3, [r4, #8]
   27036:	2b03      	cmp	r3, #3
   27038:	d9f6      	bls.n	27028 <validate_args+0xc>
   2703a:	e7f3      	b.n	27024 <validate_args+0x8>

0002703c <notify_one>:
{
   2703c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27040:	460d      	mov	r5, r1
   27042:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   27044:	4619      	mov	r1, r3
   27046:	1d28      	adds	r0, r5, #4
{
   27048:	4690      	mov	r8, r2
   2704a:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2704c:	f7ec fa20 	bl	13490 <sys_notify_finalize>
	if (cb) {
   27050:	4604      	mov	r4, r0
   27052:	b138      	cbz	r0, 27064 <notify_one+0x28>
		cb(mgr, cli, state, res);
   27054:	4633      	mov	r3, r6
   27056:	4642      	mov	r2, r8
   27058:	4629      	mov	r1, r5
   2705a:	4638      	mov	r0, r7
   2705c:	46a4      	mov	ip, r4
}
   2705e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   27062:	4760      	bx	ip
}
   27064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027068 <onoff_manager_init>:
{
   27068:	b538      	push	{r3, r4, r5, lr}
   2706a:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2706c:	4605      	mov	r5, r0
   2706e:	b158      	cbz	r0, 27088 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   27070:	b151      	cbz	r1, 27088 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   27072:	680b      	ldr	r3, [r1, #0]
   27074:	b143      	cbz	r3, 27088 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   27076:	684b      	ldr	r3, [r1, #4]
   27078:	b133      	cbz	r3, 27088 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2707a:	2220      	movs	r2, #32
   2707c:	2100      	movs	r1, #0
   2707e:	f000 fce0 	bl	27a42 <memset>
   27082:	612c      	str	r4, [r5, #16]
	return 0;
   27084:	2000      	movs	r0, #0
}
   27086:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   27088:	f06f 0015 	mvn.w	r0, #21
   2708c:	e7fb      	b.n	27086 <onoff_manager_init+0x1e>

0002708e <sys_notify_validate>:
	if (notify == NULL) {
   2708e:	4603      	mov	r3, r0
   27090:	b140      	cbz	r0, 270a4 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   27092:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   27094:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   27098:	2a02      	cmp	r2, #2
   2709a:	d006      	beq.n	270aa <sys_notify_validate+0x1c>
   2709c:	2a03      	cmp	r2, #3
   2709e:	d004      	beq.n	270aa <sys_notify_validate+0x1c>
   270a0:	2a01      	cmp	r2, #1
   270a2:	d005      	beq.n	270b0 <sys_notify_validate+0x22>
   270a4:	f06f 0015 	mvn.w	r0, #21
}
   270a8:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   270aa:	681a      	ldr	r2, [r3, #0]
   270ac:	2a00      	cmp	r2, #0
   270ae:	d0f9      	beq.n	270a4 <sys_notify_validate+0x16>
		notify->result = 0;
   270b0:	2000      	movs	r0, #0
   270b2:	6098      	str	r0, [r3, #8]
   270b4:	4770      	bx	lr

000270b6 <_ldiv5>:
	uint32_t v_lo = *v;
   270b6:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   270ba:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   270bc:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   270c0:	fba2 2403 	umull	r2, r4, r2, r3
   270c4:	18d5      	adds	r5, r2, r3
   270c6:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   270ca:	fba1 1303 	umull	r1, r3, r1, r3
   270ce:	1852      	adds	r2, r2, r1
   270d0:	eb44 0403 	adc.w	r4, r4, r3
   270d4:	1952      	adds	r2, r2, r5
   270d6:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   270da:	1889      	adds	r1, r1, r2
   270dc:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   270e0:	e9c0 1300 	strd	r1, r3, [r0]
}
   270e4:	bd30      	pop	{r4, r5, pc}

000270e6 <_get_digit>:
{
   270e6:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
   270e8:	680a      	ldr	r2, [r1, #0]
   270ea:	2a00      	cmp	r2, #0
{
   270ec:	4603      	mov	r3, r0
	if (*digit_count > 0) {
   270ee:	dd0f      	ble.n	27110 <_get_digit+0x2a>
		--*digit_count;
   270f0:	3a01      	subs	r2, #1
   270f2:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
   270f4:	681a      	ldr	r2, [r3, #0]
   270f6:	6844      	ldr	r4, [r0, #4]
   270f8:	200a      	movs	r0, #10
   270fa:	fba2 1200 	umull	r1, r2, r2, r0
   270fe:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   27102:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
   27104:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   27108:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
   2710c:	3030      	adds	r0, #48	; 0x30
}
   2710e:	bd10      	pop	{r4, pc}
		rval = '0';
   27110:	2030      	movs	r0, #48	; 0x30
   27112:	e7fc      	b.n	2710e <_get_digit+0x28>

00027114 <encode_uint>:
{
   27114:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27118:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
   2711a:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   2711c:	2b6f      	cmp	r3, #111	; 0x6f
{
   2711e:	4680      	mov	r8, r0
   27120:	460f      	mov	r7, r1
   27122:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   27124:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   27128:	d029      	beq.n	2717e <encode_uint+0x6a>
   2712a:	d824      	bhi.n	27176 <encode_uint+0x62>
		return 10;
   2712c:	2b58      	cmp	r3, #88	; 0x58
   2712e:	bf0c      	ite	eq
   27130:	2610      	moveq	r6, #16
   27132:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   27134:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   27138:	4632      	mov	r2, r6
   2713a:	2300      	movs	r3, #0
   2713c:	4640      	mov	r0, r8
   2713e:	4639      	mov	r1, r7
   27140:	f7d9 fbac 	bl	89c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   27144:	2a09      	cmp	r2, #9
   27146:	b2d4      	uxtb	r4, r2
   27148:	d81e      	bhi.n	27188 <encode_uint+0x74>
   2714a:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   2714c:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2714e:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   27150:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   27154:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   27158:	d301      	bcc.n	2715e <encode_uint+0x4a>
   2715a:	45d1      	cmp	r9, sl
   2715c:	d811      	bhi.n	27182 <encode_uint+0x6e>
	if (conv->flag_hash) {
   2715e:	782b      	ldrb	r3, [r5, #0]
   27160:	069b      	lsls	r3, r3, #26
   27162:	d505      	bpl.n	27170 <encode_uint+0x5c>
		if (radix == 8) {
   27164:	2e08      	cmp	r6, #8
   27166:	d115      	bne.n	27194 <encode_uint+0x80>
			conv->altform_0 = true;
   27168:	78ab      	ldrb	r3, [r5, #2]
   2716a:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   2716e:	70ab      	strb	r3, [r5, #2]
}
   27170:	4648      	mov	r0, r9
   27172:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   27176:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   2717a:	2b70      	cmp	r3, #112	; 0x70
   2717c:	e7d7      	b.n	2712e <encode_uint+0x1a>
	switch (specifier) {
   2717e:	2608      	movs	r6, #8
   27180:	e7d8      	b.n	27134 <encode_uint+0x20>
		value /= radix;
   27182:	4680      	mov	r8, r0
   27184:	460f      	mov	r7, r1
   27186:	e7d7      	b.n	27138 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   27188:	f1bb 0f19 	cmp.w	fp, #25
   2718c:	bf94      	ite	ls
   2718e:	3437      	addls	r4, #55	; 0x37
   27190:	3457      	addhi	r4, #87	; 0x57
   27192:	e7db      	b.n	2714c <encode_uint+0x38>
		} else if (radix == 16) {
   27194:	2e10      	cmp	r6, #16
   27196:	d1eb      	bne.n	27170 <encode_uint+0x5c>
			conv->altform_0c = true;
   27198:	78ab      	ldrb	r3, [r5, #2]
   2719a:	f043 0310 	orr.w	r3, r3, #16
   2719e:	e7e6      	b.n	2716e <encode_uint+0x5a>

000271a0 <outs>:
{
   271a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   271a4:	4607      	mov	r7, r0
   271a6:	4688      	mov	r8, r1
   271a8:	4615      	mov	r5, r2
   271aa:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   271ac:	4614      	mov	r4, r2
   271ae:	42b4      	cmp	r4, r6
   271b0:	d305      	bcc.n	271be <outs+0x1e>
   271b2:	b10e      	cbz	r6, 271b8 <outs+0x18>
	return (int)count;
   271b4:	1b60      	subs	r0, r4, r5
   271b6:	e008      	b.n	271ca <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   271b8:	7823      	ldrb	r3, [r4, #0]
   271ba:	2b00      	cmp	r3, #0
   271bc:	d0fa      	beq.n	271b4 <outs+0x14>
		int rc = out((int)*sp++, ctx);
   271be:	f814 0b01 	ldrb.w	r0, [r4], #1
   271c2:	4641      	mov	r1, r8
   271c4:	47b8      	blx	r7
		if (rc < 0) {
   271c6:	2800      	cmp	r0, #0
   271c8:	daf1      	bge.n	271ae <outs+0xe>
}
   271ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000271ce <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   271ce:	4040      	eors	r0, r0
   271d0:	f380 8811 	msr	BASEPRI, r0
   271d4:	f04f 0004 	mov.w	r0, #4
   271d8:	df02      	svc	2
}
   271da:	4770      	bx	lr

000271dc <assert_print>:

void assert_print(const char *fmt, ...)
{
   271dc:	b40f      	push	{r0, r1, r2, r3}
   271de:	b507      	push	{r0, r1, r2, lr}
   271e0:	a904      	add	r1, sp, #16
   271e2:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   271e6:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   271e8:	f7ff fdbf 	bl	26d6a <vprintk>

	va_end(ap);
}
   271ec:	b003      	add	sp, #12
   271ee:	f85d eb04 	ldr.w	lr, [sp], #4
   271f2:	b004      	add	sp, #16
   271f4:	4770      	bx	lr

000271f6 <free_space>:
{
   271f6:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
   271f8:	6903      	ldr	r3, [r0, #16]
{
   271fa:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
   271fc:	f013 0008 	ands.w	r0, r3, #8
   27200:	d109      	bne.n	27216 <free_space+0x20>
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   27202:	6813      	ldr	r3, [r2, #0]
   27204:	68d4      	ldr	r4, [r2, #12]
   27206:	429c      	cmp	r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
   27208:	bf97      	itett	ls
   2720a:	6a52      	ldrls	r2, [r2, #36]	; 0x24
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   2720c:	1ae3      	subhi	r3, r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
   2720e:	1ad3      	subls	r3, r2, r3
	return true;
   27210:	2001      	movls	r0, #1
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   27212:	600b      	str	r3, [r1, #0]
}
   27214:	bd10      	pop	{r4, pc}
   27216:	2300      	movs	r3, #0
		return false;
   27218:	4618      	mov	r0, r3
   2721a:	e7fa      	b.n	27212 <free_space+0x1c>

0002721c <get_usage>:
{
   2721c:	b513      	push	{r0, r1, r4, lr}
	if (free_space(buffer, &f)) {
   2721e:	a901      	add	r1, sp, #4
{
   27220:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   27222:	f7ff ffe8 	bl	271f6 <free_space>
   27226:	b120      	cbz	r0, 27232 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   27228:	9b01      	ldr	r3, [sp, #4]
   2722a:	68e2      	ldr	r2, [r4, #12]
   2722c:	3b01      	subs	r3, #1
   2722e:	4413      	add	r3, r2
   27230:	9301      	str	r3, [sp, #4]
	return buffer->size - 1 - f;
   27232:	6a60      	ldr	r0, [r4, #36]	; 0x24
   27234:	9b01      	ldr	r3, [sp, #4]
   27236:	1ac0      	subs	r0, r0, r3
}
   27238:	3801      	subs	r0, #1
   2723a:	b002      	add	sp, #8
   2723c:	bd10      	pop	{r4, pc}

0002723e <idx_inc>:
{
   2723e:	b510      	push	{r4, lr}
   27240:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   27242:	1850      	adds	r0, r2, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   27244:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   27246:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   27248:	07d2      	lsls	r2, r2, #31
   2724a:	d502      	bpl.n	27252 <idx_inc+0x14>
		return i & (buffer->size - 1);
   2724c:	3b01      	subs	r3, #1
   2724e:	4018      	ands	r0, r3
}
   27250:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   27252:	4298      	cmp	r0, r3
   27254:	bf28      	it	cs
   27256:	1ac0      	subcs	r0, r0, r3
   27258:	e7fa      	b.n	27250 <idx_inc+0x12>

0002725a <rd_idx_inc>:
{
   2725a:	b510      	push	{r4, lr}
   2725c:	4604      	mov	r4, r0
   2725e:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   27260:	68c1      	ldr	r1, [r0, #12]
   27262:	f7ff ffec 	bl	2723e <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
   27266:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   27268:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
   2726a:	f023 0308 	bic.w	r3, r3, #8
   2726e:	6123      	str	r3, [r4, #16]
}
   27270:	bd10      	pop	{r4, pc}

00027272 <add_skip_item>:
{
   27272:	b538      	push	{r3, r4, r5, lr}
   27274:	460d      	mov	r5, r1
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   27276:	6a02      	ldr	r2, [r0, #32]
	union mpsc_pbuf_generic skip = {
   27278:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2727a:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   2727c:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   27280:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
{
   27284:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   27286:	6801      	ldr	r1, [r0, #0]
   27288:	462a      	mov	r2, r5
   2728a:	f7ff ffd8 	bl	2723e <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   2728e:	68e3      	ldr	r3, [r4, #12]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   27290:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   27292:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   27294:	4298      	cmp	r0, r3
		buffer->flags |= MPSC_PBUF_FULL;
   27296:	bf02      	ittt	eq
   27298:	6923      	ldreq	r3, [r4, #16]
   2729a:	f043 0308 	orreq.w	r3, r3, #8
   2729e:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   272a0:	462a      	mov	r2, r5
   272a2:	4620      	mov	r0, r4
   272a4:	f7ff ffcb 	bl	2723e <idx_inc>
   272a8:	6060      	str	r0, [r4, #4]
}
   272aa:	bd38      	pop	{r3, r4, r5, pc}

000272ac <drop_item_locked>:
{
   272ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   272b0:	68c7      	ldr	r7, [r0, #12]
   272b2:	6a06      	ldr	r6, [r0, #32]
{
   272b4:	469b      	mov	fp, r3
	if (item->hdr.busy && !item->hdr.valid) {
   272b6:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
   272ba:	f003 0303 	and.w	r3, r3, #3
   272be:	2b02      	cmp	r3, #2
{
   272c0:	4604      	mov	r4, r0
   272c2:	4688      	mov	r8, r1
   272c4:	4691      	mov	r9, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   272c6:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   272ca:	f04f 0300 	mov.w	r3, #0
   272ce:	d009      	beq.n	272e4 <drop_item_locked+0x38>
	*item_to_drop = NULL;
   272d0:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
   272d2:	f8cb 3000 	str.w	r3, [fp]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
   272d6:	6923      	ldr	r3, [r4, #16]
   272d8:	0799      	lsls	r1, r3, #30
   272da:	d410      	bmi.n	272fe <drop_item_locked+0x52>
		return false;
   272dc:	2000      	movs	r0, #0
}
   272de:	b003      	add	sp, #12
   272e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
   272e4:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
   272e8:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
   272ea:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
   272ec:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
   272f0:	d0f1      	beq.n	272d6 <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
   272f2:	f7ff ffb2 	bl	2725a <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   272f6:	68e3      	ldr	r3, [r4, #12]
   272f8:	60a3      	str	r3, [r4, #8]
		return true;
   272fa:	2001      	movs	r0, #1
   272fc:	e7ef      	b.n	272de <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
   272fe:	69e3      	ldr	r3, [r4, #28]
   27300:	4650      	mov	r0, sl
   27302:	4798      	blx	r3
	return item->hdr.valid;
   27304:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	if (!is_valid(item)) {
   27308:	07da      	lsls	r2, r3, #31
	uint32_t rd_wlen = buffer->get_wlen(item);
   2730a:	4605      	mov	r5, r0
	if (!is_valid(item)) {
   2730c:	d5e6      	bpl.n	272dc <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
   2730e:	f013 0302 	ands.w	r3, r3, #2
   27312:	d01d      	beq.n	27350 <drop_item_locked+0xa4>
		if (free_wlen) {
   27314:	f1b8 0f00 	cmp.w	r8, #0
   27318:	d003      	beq.n	27322 <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
   2731a:	4641      	mov	r1, r8
   2731c:	4620      	mov	r0, r4
   2731e:	f7ff ffa8 	bl	27272 <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   27322:	6861      	ldr	r1, [r4, #4]
   27324:	462a      	mov	r2, r5
   27326:	4620      	mov	r0, r4
   27328:	f7ff ff89 	bl	2723e <idx_inc>
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   2732c:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   27330:	4299      	cmp	r1, r3
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   27332:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   27334:	d104      	bne.n	27340 <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
   27336:	462a      	mov	r2, r5
   27338:	4620      	mov	r0, r4
   2733a:	f7ff ff80 	bl	2723e <idx_inc>
   2733e:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
   27340:	68a3      	ldr	r3, [r4, #8]
   27342:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
   27344:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
   27346:	6923      	ldr	r3, [r4, #16]
   27348:	f043 0308 	orr.w	r3, r3, #8
   2734c:	6123      	str	r3, [r4, #16]
   2734e:	e7d4      	b.n	272fa <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
   27350:	4601      	mov	r1, r0
   27352:	4620      	mov	r0, r4
   27354:	9301      	str	r3, [sp, #4]
   27356:	f7ff ff80 	bl	2725a <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   2735a:	68e2      	ldr	r2, [r4, #12]
   2735c:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
   2735e:	f1b8 0f00 	cmp.w	r8, #0
   27362:	d004      	beq.n	2736e <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
   27364:	6821      	ldr	r1, [r4, #0]
   27366:	6a22      	ldr	r2, [r4, #32]
   27368:	9b01      	ldr	r3, [sp, #4]
   2736a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
   2736e:	eb05 0208 	add.w	r2, r5, r8
   27372:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   27376:	6821      	ldr	r1, [r4, #0]
   27378:	4620      	mov	r0, r4
   2737a:	f7ff ff60 	bl	2723e <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
   2737e:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   27380:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
   27382:	f043 0308 	orr.w	r3, r3, #8
   27386:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
   27388:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
   2738c:	f36f 0300 	bfc	r3, #0, #1
   27390:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
   27394:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
   27398:	e7af      	b.n	272fa <drop_item_locked+0x4e>

0002739a <post_drop_action>:
{
   2739a:	b570      	push	{r4, r5, r6, lr}
   2739c:	4604      	mov	r4, r0
   2739e:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
   273a0:	f7ff ff4d 	bl	2723e <idx_inc>
	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
   273a4:	6823      	ldr	r3, [r4, #0]
   273a6:	4283      	cmp	r3, r0
   273a8:	d105      	bne.n	273b6 <post_drop_action+0x1c>
		buffer->flags &= ~MPSC_PBUF_FULL;
   273aa:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
   273ac:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
   273ae:	f023 0308 	bic.w	r3, r3, #8
   273b2:	6123      	str	r3, [r4, #16]
}
   273b4:	bd70      	pop	{r4, r5, r6, pc}
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   273b6:	6a22      	ldr	r2, [r4, #32]
	union mpsc_pbuf_generic skip = {
   273b8:	00ab      	lsls	r3, r5, #2
   273ba:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   273be:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
   273c2:	4620      	mov	r0, r4
   273c4:	6861      	ldr	r1, [r4, #4]
   273c6:	462a      	mov	r2, r5
   273c8:	f7ff ff39 	bl	2723e <idx_inc>
   273cc:	6060      	str	r0, [r4, #4]
   273ce:	e7f1      	b.n	273b4 <post_drop_action+0x1a>

000273d0 <max_utilization_update>:
{
   273d0:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   273d2:	6903      	ldr	r3, [r0, #16]
   273d4:	075b      	lsls	r3, r3, #29
{
   273d6:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   273d8:	d506      	bpl.n	273e8 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   273da:	6a85      	ldr	r5, [r0, #40]	; 0x28
   273dc:	f7ff ff1e 	bl	2721c <get_usage>
   273e0:	4285      	cmp	r5, r0
   273e2:	bf2c      	ite	cs
   273e4:	62a5      	strcs	r5, [r4, #40]	; 0x28
   273e6:	62a0      	strcc	r0, [r4, #40]	; 0x28
}
   273e8:	bd38      	pop	{r3, r4, r5, pc}

000273ea <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   273ea:	6902      	ldr	r2, [r0, #16]
   273ec:	6883      	ldr	r3, [r0, #8]
   273ee:	0712      	lsls	r2, r2, #28
   273f0:	d402      	bmi.n	273f8 <mpsc_pbuf_is_pending+0xe>
   273f2:	6842      	ldr	r2, [r0, #4]
   273f4:	429a      	cmp	r2, r3
   273f6:	d200      	bcs.n	273fa <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
   273f8:	6a42      	ldr	r2, [r0, #36]	; 0x24
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   273fa:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   273fc:	1e18      	subs	r0, r3, #0
   273fe:	bf18      	it	ne
   27400:	2001      	movne	r0, #1
   27402:	4770      	bx	lr

00027404 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_THREAD_STACK_SIZE, 1024);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_BUFFER_SIZE, 20);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_RX_WAIT_TIME, 50);

GEN_ABS_SYM_END
   27404:	4770      	bx	lr

00027406 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
   27406:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   27408:	075b      	lsls	r3, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   2740a:	bf5f      	itttt	pl
   2740c:	6803      	ldrpl	r3, [r0, #0]
   2740e:	8842      	ldrhpl	r2, [r0, #2]
   27410:	f3c3 234a 	ubfxpl	r3, r3, #9, #11
   27414:	eb03 1012 	addpl.w	r0, r3, r2, lsr #4
   27418:	bf5d      	ittte	pl
   2741a:	3017      	addpl	r0, #23
   2741c:	f020 0007 	bicpl.w	r0, r0, #7
   27420:	0880      	lsrpl	r0, r0, #2
	return 0;
   27422:	2000      	movmi	r0, #0
}
   27424:	4770      	bx	lr

00027426 <dummy_timestamp>:
}
   27426:	2000      	movs	r0, #0
   27428:	4770      	bx	lr

0002742a <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   2742a:	f002 b87f 	b.w	2952c <sys_clock_cycle_get_32>

0002742e <atomic_inc>:
{
   2742e:	4603      	mov	r3, r0
}
   27430:	f3bf 8f5b 	dmb	ish
   27434:	e853 0f00 	ldrex	r0, [r3]
   27438:	1c42      	adds	r2, r0, #1
   2743a:	e843 2100 	strex	r1, r2, [r3]
   2743e:	2900      	cmp	r1, #0
   27440:	d1f8      	bne.n	27434 <atomic_inc+0x6>
   27442:	f3bf 8f5b 	dmb	ish
   27446:	4770      	bx	lr

00027448 <z_log_vprintk>:
{
   27448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   2744a:	2300      	movs	r3, #0
   2744c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   27450:	e9cd 3300 	strd	r3, r3, [sp]
   27454:	461a      	mov	r2, r3
   27456:	4619      	mov	r1, r3
   27458:	4618      	mov	r0, r3
   2745a:	f7ec fea7 	bl	141ac <z_impl_z_log_msg_runtime_vcreate>
}
   2745e:	b005      	add	sp, #20
   27460:	f85d fb04 	ldr.w	pc, [sp], #4

00027464 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   27464:	2001      	movs	r0, #1
   27466:	f7ec bb93 	b.w	13b90 <z_log_dropped>

0002746a <z_log_get_tag>:
}
   2746a:	2000      	movs	r0, #0
   2746c:	4770      	bx	lr

0002746e <z_cbprintf_cpy>:
{
   2746e:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   27470:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   27474:	1b9b      	subs	r3, r3, r6
   27476:	428b      	cmp	r3, r1
{
   27478:	460c      	mov	r4, r1
   2747a:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   2747c:	d30a      	bcc.n	27494 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   2747e:	6813      	ldr	r3, [r2, #0]
   27480:	460a      	mov	r2, r1
   27482:	4601      	mov	r1, r0
   27484:	1998      	adds	r0, r3, r6
   27486:	f000 fad1 	bl	27a2c <memcpy>
	desc->off += len;
   2748a:	68ab      	ldr	r3, [r5, #8]
   2748c:	4423      	add	r3, r4
   2748e:	60ab      	str	r3, [r5, #8]
	return len;
   27490:	4620      	mov	r0, r4
}
   27492:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   27494:	f06f 001b 	mvn.w	r0, #27
   27498:	e7fb      	b.n	27492 <z_cbprintf_cpy+0x24>

0002749a <z_log_msg_finalize>:
{
   2749a:	b570      	push	{r4, r5, r6, lr}
   2749c:	460e      	mov	r6, r1
   2749e:	4615      	mov	r5, r2
   274a0:	4619      	mov	r1, r3
	if (!msg) {
   274a2:	4604      	mov	r4, r0
   274a4:	b918      	cbnz	r0, 274ae <z_log_msg_finalize+0x14>
}
   274a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   274aa:	f7ec bb71 	b.w	13b90 <z_log_dropped>
	if (data) {
   274ae:	b133      	cbz	r3, 274be <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
   274b0:	f3c2 234a 	ubfx	r3, r2, #9, #11
   274b4:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
   274b6:	0d12      	lsrs	r2, r2, #20
   274b8:	4418      	add	r0, r3
   274ba:	f000 fab7 	bl	27a2c <memcpy>
	msg->hdr.source = source;
   274be:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   274c2:	4620      	mov	r0, r4
}
   274c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   274c8:	f7ec bd96 	b.w	13ff8 <z_log_msg_commit>

000274cc <buffer_write>:
{
   274cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   274ce:	4606      	mov	r6, r0
   274d0:	460d      	mov	r5, r1
   274d2:	4614      	mov	r4, r2
   274d4:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   274d6:	4621      	mov	r1, r4
   274d8:	4628      	mov	r0, r5
   274da:	463a      	mov	r2, r7
   274dc:	47b0      	blx	r6
	} while (len != 0);
   274de:	1a24      	subs	r4, r4, r0
		buf += processed;
   274e0:	4405      	add	r5, r0
	} while (len != 0);
   274e2:	d1f8      	bne.n	274d6 <buffer_write+0xa>
}
   274e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000274e6 <cbvprintf>:
{
   274e6:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   274e8:	2400      	movs	r4, #0
   274ea:	9400      	str	r4, [sp, #0]
   274ec:	f7e9 fd54 	bl	10f98 <z_cbvprintf_impl>
}
   274f0:	b002      	add	sp, #8
   274f2:	bd10      	pop	{r4, pc}

000274f4 <log_output_flush>:
{
   274f4:	b510      	push	{r4, lr}
		     output->control_block->offset,
   274f6:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   274f8:	6881      	ldr	r1, [r0, #8]
{
   274fa:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   274fc:	e9d2 2300 	ldrd	r2, r3, [r2]
   27500:	6800      	ldr	r0, [r0, #0]
   27502:	f7ff ffe3 	bl	274cc <buffer_write>
	output->control_block->offset = 0;
   27506:	6863      	ldr	r3, [r4, #4]
   27508:	2200      	movs	r2, #0
   2750a:	601a      	str	r2, [r3, #0]
}
   2750c:	bd10      	pop	{r4, pc}

0002750e <cr_out_func>:
	if (c == '\n') {
   2750e:	280a      	cmp	r0, #10
{
   27510:	b538      	push	{r3, r4, r5, lr}
   27512:	4604      	mov	r4, r0
   27514:	460d      	mov	r5, r1
	if (c == '\n') {
   27516:	d102      	bne.n	2751e <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   27518:	200d      	movs	r0, #13
   2751a:	f7ec fec7 	bl	142ac <out_func>
	out_func(c, ctx);
   2751e:	4629      	mov	r1, r5
   27520:	4620      	mov	r0, r4
   27522:	f7ec fec3 	bl	142ac <out_func>
}
   27526:	2000      	movs	r0, #0
   27528:	bd38      	pop	{r3, r4, r5, pc}

0002752a <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   2752a:	b538      	push	{r3, r4, r5, lr}
   2752c:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   2752e:	42ab      	cmp	r3, r5
{
   27530:	4611      	mov	r1, r2
   27532:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   27534:	d804      	bhi.n	27540 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   27536:	461a      	mov	r2, r3
   27538:	f000 fa78 	bl	27a2c <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2753c:	4620      	mov	r0, r4
   2753e:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   27540:	2400      	movs	r4, #0
   27542:	e7fb      	b.n	2753c <_copy+0x12>

00027544 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   27544:	f000 ba7d 	b.w	27a42 <memset>

00027548 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   27548:	09c3      	lsrs	r3, r0, #7
   2754a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2754e:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   27552:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   27556:	b2c0      	uxtb	r0, r0
   27558:	4770      	bx	lr

0002755a <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2755a:	78cb      	ldrb	r3, [r1, #3]
   2755c:	7802      	ldrb	r2, [r0, #0]
   2755e:	4053      	eors	r3, r2
   27560:	7003      	strb	r3, [r0, #0]
   27562:	884b      	ldrh	r3, [r1, #2]
   27564:	7842      	ldrb	r2, [r0, #1]
   27566:	4053      	eors	r3, r2
   27568:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2756a:	680a      	ldr	r2, [r1, #0]
   2756c:	7883      	ldrb	r3, [r0, #2]
   2756e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   27572:	7083      	strb	r3, [r0, #2]
   27574:	680a      	ldr	r2, [r1, #0]
   27576:	78c3      	ldrb	r3, [r0, #3]
   27578:	4053      	eors	r3, r2
   2757a:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2757c:	79cb      	ldrb	r3, [r1, #7]
   2757e:	7902      	ldrb	r2, [r0, #4]
   27580:	4053      	eors	r3, r2
   27582:	7103      	strb	r3, [r0, #4]
   27584:	88cb      	ldrh	r3, [r1, #6]
   27586:	7942      	ldrb	r2, [r0, #5]
   27588:	4053      	eors	r3, r2
   2758a:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2758c:	684a      	ldr	r2, [r1, #4]
   2758e:	7983      	ldrb	r3, [r0, #6]
   27590:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   27594:	7183      	strb	r3, [r0, #6]
   27596:	684a      	ldr	r2, [r1, #4]
   27598:	79c3      	ldrb	r3, [r0, #7]
   2759a:	4053      	eors	r3, r2
   2759c:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2759e:	7acb      	ldrb	r3, [r1, #11]
   275a0:	7a02      	ldrb	r2, [r0, #8]
   275a2:	4053      	eors	r3, r2
   275a4:	7203      	strb	r3, [r0, #8]
   275a6:	7a42      	ldrb	r2, [r0, #9]
   275a8:	894b      	ldrh	r3, [r1, #10]
   275aa:	4053      	eors	r3, r2
   275ac:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   275ae:	688a      	ldr	r2, [r1, #8]
   275b0:	7a83      	ldrb	r3, [r0, #10]
   275b2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   275b6:	7283      	strb	r3, [r0, #10]
   275b8:	688a      	ldr	r2, [r1, #8]
   275ba:	7ac3      	ldrb	r3, [r0, #11]
   275bc:	4053      	eors	r3, r2
   275be:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   275c0:	7bcb      	ldrb	r3, [r1, #15]
   275c2:	7b02      	ldrb	r2, [r0, #12]
   275c4:	4053      	eors	r3, r2
   275c6:	7303      	strb	r3, [r0, #12]
   275c8:	89cb      	ldrh	r3, [r1, #14]
   275ca:	7b42      	ldrb	r2, [r0, #13]
   275cc:	4053      	eors	r3, r2
   275ce:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   275d0:	68ca      	ldr	r2, [r1, #12]
   275d2:	7b83      	ldrb	r3, [r0, #14]
   275d4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   275d8:	7383      	strb	r3, [r0, #14]
   275da:	68ca      	ldr	r2, [r1, #12]
   275dc:	7bc3      	ldrb	r3, [r0, #15]
   275de:	4053      	eors	r3, r2
   275e0:	73c3      	strb	r3, [r0, #15]
}
   275e2:	4770      	bx	lr

000275e4 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   275e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   275e6:	7802      	ldrb	r2, [r0, #0]
   275e8:	f88d 2000 	strb.w	r2, [sp]
   275ec:	7942      	ldrb	r2, [r0, #5]
   275ee:	f88d 2001 	strb.w	r2, [sp, #1]
   275f2:	7a82      	ldrb	r2, [r0, #10]
   275f4:	f88d 2002 	strb.w	r2, [sp, #2]
   275f8:	7bc2      	ldrb	r2, [r0, #15]
   275fa:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   275fe:	7902      	ldrb	r2, [r0, #4]
   27600:	f88d 2004 	strb.w	r2, [sp, #4]
   27604:	7a42      	ldrb	r2, [r0, #9]
   27606:	f88d 2005 	strb.w	r2, [sp, #5]
   2760a:	7b82      	ldrb	r2, [r0, #14]
   2760c:	f88d 2006 	strb.w	r2, [sp, #6]
   27610:	78c2      	ldrb	r2, [r0, #3]
   27612:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   27616:	7a02      	ldrb	r2, [r0, #8]
   27618:	f88d 2008 	strb.w	r2, [sp, #8]
   2761c:	7b42      	ldrb	r2, [r0, #13]
   2761e:	f88d 2009 	strb.w	r2, [sp, #9]
   27622:	7882      	ldrb	r2, [r0, #2]
   27624:	f88d 200a 	strb.w	r2, [sp, #10]
   27628:	79c2      	ldrb	r2, [r0, #7]
   2762a:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2762e:	7b02      	ldrb	r2, [r0, #12]
   27630:	f88d 200c 	strb.w	r2, [sp, #12]
   27634:	7842      	ldrb	r2, [r0, #1]
   27636:	7ac3      	ldrb	r3, [r0, #11]
   27638:	f88d 200d 	strb.w	r2, [sp, #13]
   2763c:	7982      	ldrb	r2, [r0, #6]
   2763e:	f88d 200e 	strb.w	r2, [sp, #14]
   27642:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   27646:	2310      	movs	r3, #16
   27648:	466a      	mov	r2, sp
   2764a:	4619      	mov	r1, r3
   2764c:	f7ff ff6d 	bl	2752a <_copy>
}
   27650:	b005      	add	sp, #20
   27652:	f85d fb04 	ldr.w	pc, [sp], #4

00027656 <mult_row_column>:
{
   27656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27658:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2765a:	7808      	ldrb	r0, [r1, #0]
{
   2765c:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2765e:	f7ff ff73 	bl	27548 <_double_byte>
   27662:	4605      	mov	r5, r0
   27664:	7860      	ldrb	r0, [r4, #1]
   27666:	f7ff ff6f 	bl	27548 <_double_byte>
   2766a:	78a2      	ldrb	r2, [r4, #2]
   2766c:	7863      	ldrb	r3, [r4, #1]
   2766e:	4053      	eors	r3, r2
   27670:	78e2      	ldrb	r2, [r4, #3]
   27672:	4053      	eors	r3, r2
   27674:	405d      	eors	r5, r3
   27676:	4068      	eors	r0, r5
   27678:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2767a:	7860      	ldrb	r0, [r4, #1]
   2767c:	7827      	ldrb	r7, [r4, #0]
   2767e:	f7ff ff63 	bl	27548 <_double_byte>
   27682:	4605      	mov	r5, r0
   27684:	78a0      	ldrb	r0, [r4, #2]
   27686:	f7ff ff5f 	bl	27548 <_double_byte>
   2768a:	78a3      	ldrb	r3, [r4, #2]
   2768c:	405f      	eors	r7, r3
   2768e:	78e3      	ldrb	r3, [r4, #3]
   27690:	405f      	eors	r7, r3
   27692:	407d      	eors	r5, r7
   27694:	4068      	eors	r0, r5
   27696:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   27698:	7863      	ldrb	r3, [r4, #1]
   2769a:	7827      	ldrb	r7, [r4, #0]
   2769c:	78a0      	ldrb	r0, [r4, #2]
   2769e:	405f      	eors	r7, r3
   276a0:	f7ff ff52 	bl	27548 <_double_byte>
   276a4:	4605      	mov	r5, r0
   276a6:	78e0      	ldrb	r0, [r4, #3]
   276a8:	f7ff ff4e 	bl	27548 <_double_byte>
   276ac:	78e3      	ldrb	r3, [r4, #3]
   276ae:	405f      	eors	r7, r3
   276b0:	407d      	eors	r5, r7
   276b2:	4068      	eors	r0, r5
   276b4:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   276b6:	7820      	ldrb	r0, [r4, #0]
   276b8:	f7ff ff46 	bl	27548 <_double_byte>
   276bc:	7862      	ldrb	r2, [r4, #1]
   276be:	7823      	ldrb	r3, [r4, #0]
   276c0:	4053      	eors	r3, r2
   276c2:	78a2      	ldrb	r2, [r4, #2]
   276c4:	4053      	eors	r3, r2
   276c6:	ea80 0503 	eor.w	r5, r0, r3
   276ca:	78e0      	ldrb	r0, [r4, #3]
   276cc:	f7ff ff3c 	bl	27548 <_double_byte>
   276d0:	b2ed      	uxtb	r5, r5
   276d2:	4045      	eors	r5, r0
   276d4:	70f5      	strb	r5, [r6, #3]
}
   276d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000276d8 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   276d8:	b570      	push	{r4, r5, r6, lr}
   276da:	4614      	mov	r4, r2
   276dc:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   276de:	4605      	mov	r5, r0
   276e0:	2800      	cmp	r0, #0
   276e2:	d049      	beq.n	27778 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   276e4:	2900      	cmp	r1, #0
   276e6:	d049      	beq.n	2777c <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   276e8:	2a00      	cmp	r2, #0
   276ea:	d049      	beq.n	27780 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   276ec:	2310      	movs	r3, #16
   276ee:	460a      	mov	r2, r1
   276f0:	4668      	mov	r0, sp
   276f2:	4619      	mov	r1, r3
   276f4:	f7ff ff19 	bl	2752a <_copy>
	add_round_key(state, s->words);
   276f8:	4621      	mov	r1, r4
   276fa:	4668      	mov	r0, sp
   276fc:	f7ff ff2d 	bl	2755a <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   27700:	3410      	adds	r4, #16
   27702:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   27706:	4668      	mov	r0, sp
   27708:	f7ed fa74 	bl	14bf4 <sub_bytes>
		shift_rows(state);
   2770c:	4668      	mov	r0, sp
   2770e:	f7ff ff69 	bl	275e4 <shift_rows>
	mult_row_column(t, s);
   27712:	4669      	mov	r1, sp
   27714:	a804      	add	r0, sp, #16
   27716:	f7ff ff9e 	bl	27656 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   2771a:	a901      	add	r1, sp, #4
   2771c:	a805      	add	r0, sp, #20
   2771e:	f7ff ff9a 	bl	27656 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   27722:	a902      	add	r1, sp, #8
   27724:	a806      	add	r0, sp, #24
   27726:	f7ff ff96 	bl	27656 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   2772a:	a903      	add	r1, sp, #12
   2772c:	a807      	add	r0, sp, #28
   2772e:	f7ff ff92 	bl	27656 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   27732:	2310      	movs	r3, #16
   27734:	4619      	mov	r1, r3
   27736:	eb0d 0203 	add.w	r2, sp, r3
   2773a:	4668      	mov	r0, sp
   2773c:	f7ff fef5 	bl	2752a <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   27740:	4621      	mov	r1, r4
   27742:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   27744:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   27746:	f7ff ff08 	bl	2755a <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   2774a:	42b4      	cmp	r4, r6
   2774c:	d1db      	bne.n	27706 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   2774e:	f7ed fa51 	bl	14bf4 <sub_bytes>
	shift_rows(state);
   27752:	4668      	mov	r0, sp
   27754:	f7ff ff46 	bl	275e4 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   27758:	4621      	mov	r1, r4
   2775a:	4668      	mov	r0, sp
   2775c:	f7ff fefd 	bl	2755a <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   27760:	2310      	movs	r3, #16
   27762:	4619      	mov	r1, r3
   27764:	466a      	mov	r2, sp
   27766:	4628      	mov	r0, r5
   27768:	f7ff fedf 	bl	2752a <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   2776c:	4668      	mov	r0, sp
   2776e:	2210      	movs	r2, #16
   27770:	2100      	movs	r1, #0
   27772:	f7ff fee7 	bl	27544 <_set>

	return TC_CRYPTO_SUCCESS;
   27776:	2001      	movs	r0, #1
}
   27778:	b008      	add	sp, #32
   2777a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2777c:	4608      	mov	r0, r1
   2777e:	e7fb      	b.n	27778 <tc_aes_encrypt+0xa0>
   27780:	4610      	mov	r0, r2
   27782:	e7f9      	b.n	27778 <tc_aes_encrypt+0xa0>

00027784 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   27784:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   27786:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   27788:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2778a:	f912 3b10 	ldrsb.w	r3, [r2], #16
   2778e:	2b00      	cmp	r3, #0
   27790:	bfac      	ite	ge
   27792:	2300      	movge	r3, #0
   27794:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   27796:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2779a:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2779e:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   277a0:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   277a4:	d002      	beq.n	277ac <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   277a6:	7813      	ldrb	r3, [r2, #0]
   277a8:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   277aa:	e7f4      	b.n	27796 <gf_double+0x12>
	}
}
   277ac:	bd10      	pop	{r4, pc}

000277ae <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   277ae:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   277b0:	b120      	cbz	r0, 277bc <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   277b2:	2258      	movs	r2, #88	; 0x58
   277b4:	2100      	movs	r1, #0
   277b6:	f7ff fec5 	bl	27544 <_set>
   277ba:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   277bc:	bd08      	pop	{r3, pc}

000277be <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   277be:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   277c0:	4604      	mov	r4, r0
   277c2:	b188      	cbz	r0, 277e8 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   277c4:	2210      	movs	r2, #16
   277c6:	2100      	movs	r1, #0
   277c8:	f7ff febc 	bl	27544 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   277cc:	2210      	movs	r2, #16
   277ce:	f104 0030 	add.w	r0, r4, #48	; 0x30
   277d2:	2100      	movs	r1, #0
   277d4:	f7ff feb6 	bl	27544 <_set>
	s->leftover_offset = 0;
   277d8:	2300      	movs	r3, #0
   277da:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   277dc:	2200      	movs	r2, #0
   277de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   277e2:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   277e6:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   277e8:	bd10      	pop	{r4, pc}

000277ea <tc_cmac_setup>:
{
   277ea:	b570      	push	{r4, r5, r6, lr}
   277ec:	4604      	mov	r4, r0
   277ee:	460d      	mov	r5, r1
   277f0:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   277f2:	b310      	cbz	r0, 2783a <tc_cmac_setup+0x50>
   277f4:	b311      	cbz	r1, 2783c <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   277f6:	2258      	movs	r2, #88	; 0x58
   277f8:	2100      	movs	r1, #0
   277fa:	f7ff fea3 	bl	27544 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   277fe:	4629      	mov	r1, r5
	s->sched = sched;
   27800:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   27802:	4630      	mov	r0, r6
   27804:	f7ed fa02 	bl	14c0c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   27808:	2210      	movs	r2, #16
   2780a:	2100      	movs	r1, #0
   2780c:	4620      	mov	r0, r4
   2780e:	f7ff fe99 	bl	27544 <_set>
	gf_double (s->K1, s->iv);
   27812:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   27816:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   27818:	4621      	mov	r1, r4
   2781a:	4620      	mov	r0, r4
   2781c:	f7ff ff5c 	bl	276d8 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   27820:	4621      	mov	r1, r4
   27822:	4628      	mov	r0, r5
   27824:	f7ff ffae 	bl	27784 <gf_double>
	gf_double (s->K2, s->K1);
   27828:	4629      	mov	r1, r5
   2782a:	f104 0020 	add.w	r0, r4, #32
   2782e:	f7ff ffa9 	bl	27784 <gf_double>
	tc_cmac_init(s);
   27832:	4620      	mov	r0, r4
   27834:	f7ff ffc3 	bl	277be <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   27838:	2001      	movs	r0, #1
}
   2783a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2783c:	4608      	mov	r0, r1
   2783e:	e7fc      	b.n	2783a <tc_cmac_setup+0x50>

00027840 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   27840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27844:	460e      	mov	r6, r1
   27846:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   27848:	4604      	mov	r4, r0
   2784a:	2800      	cmp	r0, #0
   2784c:	d060      	beq.n	27910 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2784e:	b1fa      	cbz	r2, 27890 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   27850:	2900      	cmp	r1, #0
   27852:	d05d      	beq.n	27910 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   27854:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   27858:	ea53 0102 	orrs.w	r1, r3, r2
   2785c:	d058      	beq.n	27910 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   2785e:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   27860:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   27864:	f142 32ff 	adc.w	r2, r2, #4294967295
   27868:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   2786c:	f1b8 0f00 	cmp.w	r8, #0
   27870:	d02c      	beq.n	278cc <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   27872:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   27876:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   2787a:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2787c:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   2787e:	d20a      	bcs.n	27896 <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   27880:	462b      	mov	r3, r5
   27882:	4632      	mov	r2, r6
   27884:	4629      	mov	r1, r5
   27886:	f7ff fe50 	bl	2752a <_copy>
			s->leftover_offset += data_length;
   2788a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2788c:	442b      	add	r3, r5
   2788e:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   27890:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   27892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   27896:	463b      	mov	r3, r7
   27898:	4632      	mov	r2, r6
   2789a:	4639      	mov	r1, r7
   2789c:	f7ff fe45 	bl	2752a <_copy>
		data_length -= remaining_space;
   278a0:	3d10      	subs	r5, #16
		s->leftover_offset = 0;
   278a2:	2300      	movs	r3, #0
   278a4:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   278a6:	4445      	add	r5, r8
		data += remaining_space;
   278a8:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   278aa:	1e63      	subs	r3, r4, #1
   278ac:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   278b0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   278b4:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   278b8:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   278ba:	ea82 0200 	eor.w	r2, r2, r0
   278be:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   278c0:	d1f6      	bne.n	278b0 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   278c2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   278c4:	4621      	mov	r1, r4
   278c6:	4620      	mov	r0, r4
   278c8:	f7ff ff06 	bl	276d8 <tc_aes_encrypt>
   278cc:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   278d0:	2d10      	cmp	r5, #16
   278d2:	d80a      	bhi.n	278ea <tc_cmac_update+0xaa>
	if (data_length > 0) {
   278d4:	2d00      	cmp	r5, #0
   278d6:	d0db      	beq.n	27890 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   278d8:	462b      	mov	r3, r5
   278da:	4632      	mov	r2, r6
   278dc:	4629      	mov	r1, r5
   278de:	f104 0030 	add.w	r0, r4, #48	; 0x30
   278e2:	f7ff fe22 	bl	2752a <_copy>
		s->leftover_offset = data_length;
   278e6:	6465      	str	r5, [r4, #68]	; 0x44
   278e8:	e7d2      	b.n	27890 <tc_cmac_update+0x50>
   278ea:	1e63      	subs	r3, r4, #1
   278ec:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   278ee:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   278f2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   278f6:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   278f8:	ea82 0200 	eor.w	r2, r2, r0
   278fc:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   278fe:	d1f6      	bne.n	278ee <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   27900:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   27902:	4621      	mov	r1, r4
   27904:	4620      	mov	r0, r4
   27906:	f7ff fee7 	bl	276d8 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2790a:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2790c:	3d10      	subs	r5, #16
   2790e:	e7df      	b.n	278d0 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   27910:	2000      	movs	r0, #0
   27912:	e7be      	b.n	27892 <tc_cmac_update+0x52>

00027914 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   27914:	b570      	push	{r4, r5, r6, lr}
   27916:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   27918:	4605      	mov	r5, r0
   2791a:	b1e8      	cbz	r0, 27958 <tc_cmac_final+0x44>
   2791c:	b369      	cbz	r1, 2797a <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2791e:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   27920:	2a10      	cmp	r2, #16
   27922:	d11a      	bne.n	2795a <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   27924:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27926:	1e63      	subs	r3, r4, #1
   27928:	3901      	subs	r1, #1
   2792a:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2792e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   27932:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   27936:	4072      	eors	r2, r6
   27938:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2793c:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2793e:	ea82 0206 	eor.w	r2, r2, r6
   27942:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   27944:	d1f3      	bne.n	2792e <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   27946:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   27948:	4621      	mov	r1, r4
   2794a:	4628      	mov	r0, r5
   2794c:	f7ff fec4 	bl	276d8 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   27950:	4620      	mov	r0, r4
   27952:	f7ff ff2c 	bl	277ae <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   27956:	2001      	movs	r0, #1
}
   27958:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2795a:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2795e:	2100      	movs	r1, #0
   27960:	f1c2 0210 	rsb	r2, r2, #16
   27964:	4420      	add	r0, r4
   27966:	f7ff fded 	bl	27544 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2796a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2796c:	4423      	add	r3, r4
   2796e:	2280      	movs	r2, #128	; 0x80
   27970:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   27974:	f104 0120 	add.w	r1, r4, #32
   27978:	e7d5      	b.n	27926 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   2797a:	4608      	mov	r0, r1
   2797c:	e7ec      	b.n	27958 <tc_cmac_final+0x44>

0002797e <abort_function>:
{
   2797e:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   27980:	2000      	movs	r0, #0
   27982:	f7eb fff1 	bl	13968 <sys_reboot>

00027986 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   27986:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   27988:	6800      	ldr	r0, [r0, #0]
   2798a:	f7ed ba9d 	b.w	14ec8 <z_arm_fatal_error>

0002798e <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2798e:	2100      	movs	r1, #0
   27990:	2001      	movs	r0, #1
   27992:	f7ed ba99 	b.w	14ec8 <z_arm_fatal_error>

00027996 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   27996:	b508      	push	{r3, lr}
	handler();
   27998:	f7ed fbba 	bl	15110 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2799c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   279a0:	f7ed bd22 	b.w	153e8 <z_arm_exc_exit>

000279a4 <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
   279a4:	2300      	movs	r3, #0
   279a6:	f7ec bb6d 	b.w	14084 <z_impl_z_log_msg_static_create>

000279aa <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   279aa:	3901      	subs	r1, #1
   279ac:	4603      	mov	r3, r0
   279ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   279b2:	b90a      	cbnz	r2, 279b8 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   279b4:	701a      	strb	r2, [r3, #0]

	return dest;
}
   279b6:	4770      	bx	lr
		*d = *s;
   279b8:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   279bc:	e7f7      	b.n	279ae <strcpy+0x4>

000279be <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   279be:	4603      	mov	r3, r0
	size_t n = 0;
   279c0:	2000      	movs	r0, #0

	while (*s != '\0') {
   279c2:	5c1a      	ldrb	r2, [r3, r0]
   279c4:	b902      	cbnz	r2, 279c8 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   279c6:	4770      	bx	lr
		n++;
   279c8:	3001      	adds	r0, #1
   279ca:	e7fa      	b.n	279c2 <strlen+0x4>

000279cc <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   279cc:	4603      	mov	r3, r0
	size_t n = 0;
   279ce:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   279d0:	5c1a      	ldrb	r2, [r3, r0]
   279d2:	b10a      	cbz	r2, 279d8 <strnlen+0xc>
   279d4:	4288      	cmp	r0, r1
   279d6:	d100      	bne.n	279da <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   279d8:	4770      	bx	lr
		n++;
   279da:	3001      	adds	r0, #1
   279dc:	e7f8      	b.n	279d0 <strnlen+0x4>

000279de <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   279de:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   279e0:	b15a      	cbz	r2, 279fa <memcmp+0x1c>
   279e2:	3901      	subs	r1, #1
   279e4:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   279e6:	f810 2b01 	ldrb.w	r2, [r0], #1
   279ea:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   279ee:	42a0      	cmp	r0, r4
   279f0:	d001      	beq.n	279f6 <memcmp+0x18>
   279f2:	429a      	cmp	r2, r3
   279f4:	d0f7      	beq.n	279e6 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   279f6:	1ad0      	subs	r0, r2, r3
}
   279f8:	bd10      	pop	{r4, pc}
		return 0;
   279fa:	4610      	mov	r0, r2
   279fc:	e7fc      	b.n	279f8 <memcmp+0x1a>

000279fe <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
   279fe:	1a43      	subs	r3, r0, r1
   27a00:	4293      	cmp	r3, r2
{
   27a02:	b510      	push	{r4, lr}
   27a04:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
   27a08:	d308      	bcc.n	27a1c <memmove+0x1e>
   27a0a:	3901      	subs	r1, #1
	char *dest = d;
   27a0c:	4602      	mov	r2, r0
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
   27a0e:	429a      	cmp	r2, r3
   27a10:	d00b      	beq.n	27a2a <memmove+0x2c>
			*dest = *src;
   27a12:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   27a16:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
   27a1a:	e7f8      	b.n	27a0e <memmove+0x10>
   27a1c:	440a      	add	r2, r1
			dest[n] = src[n];
   27a1e:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   27a22:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
   27a26:	428a      	cmp	r2, r1
   27a28:	d1f9      	bne.n	27a1e <memmove+0x20>
		}
	}

	return d;
}
   27a2a:	bd10      	pop	{r4, pc}

00027a2c <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   27a2c:	b510      	push	{r4, lr}
   27a2e:	1e43      	subs	r3, r0, #1
   27a30:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   27a32:	4291      	cmp	r1, r2
   27a34:	d100      	bne.n	27a38 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   27a36:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   27a38:	f811 4b01 	ldrb.w	r4, [r1], #1
   27a3c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   27a40:	e7f7      	b.n	27a32 <memcpy+0x6>

00027a42 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   27a42:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   27a44:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   27a46:	4603      	mov	r3, r0
	while (n > 0) {
   27a48:	4293      	cmp	r3, r2
   27a4a:	d100      	bne.n	27a4e <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   27a4c:	4770      	bx	lr
		*(d_byte++) = c_byte;
   27a4e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   27a52:	e7f9      	b.n	27a48 <memset+0x6>

00027a54 <_stdout_hook_default>:
}
   27a54:	f04f 30ff 	mov.w	r0, #4294967295
   27a58:	4770      	bx	lr

00027a5a <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   27a5a:	684b      	ldr	r3, [r1, #4]
   27a5c:	2b01      	cmp	r3, #1
   27a5e:	dd07      	ble.n	27a70 <sprintf_out+0x16>
		*(p->ptr) = c;
   27a60:	680b      	ldr	r3, [r1, #0]
   27a62:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   27a64:	680b      	ldr	r3, [r1, #0]
   27a66:	3301      	adds	r3, #1
   27a68:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   27a6a:	684b      	ldr	r3, [r1, #4]
   27a6c:	3b01      	subs	r3, #1
   27a6e:	604b      	str	r3, [r1, #4]
}
   27a70:	2000      	movs	r0, #0
   27a72:	4770      	bx	lr

00027a74 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   27a74:	2806      	cmp	r0, #6
   27a76:	d108      	bne.n	27a8a <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   27a78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   27a7c:	2201      	movs	r2, #1
   27a7e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   27a82:	f3bf 8f4f 	dsb	sy
        __WFE();
   27a86:	bf20      	wfe
    while (true)
   27a88:	e7fd      	b.n	27a86 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   27a8a:	4770      	bx	lr

00027a8c <pm_state_exit_post_ops>:
   27a8c:	2300      	movs	r3, #0
   27a8e:	f383 8811 	msr	BASEPRI, r3
   27a92:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   27a96:	4770      	bx	lr

00027a98 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   27a98:	b510      	push	{r4, lr}
   27a9a:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   27a9c:	7801      	ldrb	r1, [r0, #0]
   27a9e:	7822      	ldrb	r2, [r4, #0]
   27aa0:	428a      	cmp	r2, r1
{
   27aa2:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   27aa4:	d00f      	beq.n	27ac6 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   27aa6:	4669      	mov	r1, sp
   27aa8:	f7ee fae2 	bl	16070 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   27aac:	a905      	add	r1, sp, #20
   27aae:	4620      	mov	r0, r4
   27ab0:	f7ee fade 	bl	16070 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   27ab4:	2210      	movs	r2, #16
   27ab6:	f10d 0115 	add.w	r1, sp, #21
   27aba:	f10d 0001 	add.w	r0, sp, #1
   27abe:	f7ff ff8e 	bl	279de <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   27ac2:	b00a      	add	sp, #40	; 0x28
   27ac4:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   27ac6:	2a01      	cmp	r2, #1
   27ac8:	d006      	beq.n	27ad8 <bt_uuid_cmp+0x40>
   27aca:	2a02      	cmp	r2, #2
   27acc:	d007      	beq.n	27ade <bt_uuid_cmp+0x46>
   27ace:	b972      	cbnz	r2, 27aee <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   27ad0:	8840      	ldrh	r0, [r0, #2]
   27ad2:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   27ad4:	1ac0      	subs	r0, r0, r3
   27ad6:	e7f4      	b.n	27ac2 <bt_uuid_cmp+0x2a>
   27ad8:	6840      	ldr	r0, [r0, #4]
   27ada:	6863      	ldr	r3, [r4, #4]
   27adc:	e7fa      	b.n	27ad4 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   27ade:	2210      	movs	r2, #16
   27ae0:	1c61      	adds	r1, r4, #1
   27ae2:	3001      	adds	r0, #1
}
   27ae4:	b00a      	add	sp, #40	; 0x28
   27ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   27aea:	f7ff bf78 	b.w	279de <memcmp>
	switch (u1->type) {
   27aee:	f06f 0015 	mvn.w	r0, #21
   27af2:	e7e6      	b.n	27ac2 <bt_uuid_cmp+0x2a>

00027af4 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   27af4:	2a04      	cmp	r2, #4
{
   27af6:	b510      	push	{r4, lr}
	switch (data_len) {
   27af8:	d00a      	beq.n	27b10 <bt_uuid_create+0x1c>
   27afa:	2a10      	cmp	r2, #16
   27afc:	d00d      	beq.n	27b1a <bt_uuid_create+0x26>
   27afe:	2a02      	cmp	r2, #2
   27b00:	f04f 0300 	mov.w	r3, #0
   27b04:	d10f      	bne.n	27b26 <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   27b06:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   27b08:	880b      	ldrh	r3, [r1, #0]
   27b0a:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   27b0c:	2001      	movs	r0, #1
}
   27b0e:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   27b10:	2301      	movs	r3, #1
   27b12:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   27b14:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   27b16:	6043      	str	r3, [r0, #4]
		break;
   27b18:	e7f8      	b.n	27b0c <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   27b1a:	2302      	movs	r3, #2
   27b1c:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   27b20:	f7ff ff84 	bl	27a2c <memcpy>
		break;
   27b24:	e7f2      	b.n	27b0c <bt_uuid_create+0x18>
	switch (data_len) {
   27b26:	4618      	mov	r0, r3
   27b28:	e7f1      	b.n	27b0e <bt_uuid_create+0x1a>

00027b2a <bt_addr_le_create_static>:

#define ADDR_RESOLVED_BITMASK (0x02)

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   27b2a:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   27b2c:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   27b2e:	2106      	movs	r1, #6
{
   27b30:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   27b32:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   27b36:	f7f7 f9a3 	bl	1ee80 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   27b3a:	b918      	cbnz	r0, 27b44 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   27b3c:	79a3      	ldrb	r3, [r4, #6]
   27b3e:	f063 033f 	orn	r3, r3, #63	; 0x3f
   27b42:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   27b44:	bd10      	pop	{r4, pc}

00027b46 <bt_addr_le_copy_resolved>:

	return 0;
}

void bt_addr_le_copy_resolved(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
   27b46:	b510      	push	{r4, lr}
   27b48:	4604      	mov	r4, r0
   27b4a:	2207      	movs	r2, #7
   27b4c:	f7ff ff6e 	bl	27a2c <memcpy>
	bt_addr_le_copy(dst, src);
	/* translate to "regular" address type */
	dst->type &= ~ADDR_RESOLVED_BITMASK;
   27b50:	7823      	ldrb	r3, [r4, #0]
   27b52:	f023 0302 	bic.w	r3, r3, #2
   27b56:	7023      	strb	r3, [r4, #0]
}
   27b58:	bd10      	pop	{r4, pc}

00027b5a <bt_addr_le_is_resolved>:

bool bt_addr_le_is_resolved(const bt_addr_le_t *addr)
{
	return (addr->type & ADDR_RESOLVED_BITMASK) != 0;
   27b5a:	7800      	ldrb	r0, [r0, #0]
}
   27b5c:	f3c0 0040 	ubfx	r0, r0, #1, #1
   27b60:	4770      	bx	lr

00027b62 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   27b62:	280f      	cmp	r0, #15
   27b64:	d807      	bhi.n	27b76 <bt_hci_evt_get_flags+0x14>
   27b66:	280d      	cmp	r0, #13
   27b68:	d80b      	bhi.n	27b82 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   27b6a:	2805      	cmp	r0, #5
   27b6c:	bf08      	it	eq
   27b6e:	2003      	moveq	r0, #3
   27b70:	bf18      	it	ne
   27b72:	2002      	movne	r0, #2
   27b74:	4770      	bx	lr
	switch (evt) {
   27b76:	2813      	cmp	r0, #19
   27b78:	d003      	beq.n	27b82 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   27b7a:	281a      	cmp	r0, #26
   27b7c:	bf08      	it	eq
   27b7e:	2001      	moveq	r0, #1
   27b80:	e7f6      	b.n	27b70 <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   27b82:	2001      	movs	r0, #1
	}
}
   27b84:	4770      	bx	lr

00027b86 <hci_vendor_event>:
}
   27b86:	4770      	bx	lr

00027b88 <atomic_or>:
{
   27b88:	b510      	push	{r4, lr}
   27b8a:	4603      	mov	r3, r0
}
   27b8c:	f3bf 8f5b 	dmb	ish
   27b90:	e853 0f00 	ldrex	r0, [r3]
   27b94:	ea40 0201 	orr.w	r2, r0, r1
   27b98:	e843 2400 	strex	r4, r2, [r3]
   27b9c:	2c00      	cmp	r4, #0
   27b9e:	d1f7      	bne.n	27b90 <atomic_or+0x8>
   27ba0:	f3bf 8f5b 	dmb	ish
   27ba4:	bd10      	pop	{r4, pc}

00027ba6 <z_log_msg_static_create.constprop.0>:
   27ba6:	2300      	movs	r3, #0
   27ba8:	f7ec ba6c 	b.w	14084 <z_impl_z_log_msg_static_create>

00027bac <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27bac:	f3bf 8f5b 	dmb	ish
   27bb0:	e850 3f00 	ldrex	r3, [r0]
   27bb4:	400b      	ands	r3, r1
   27bb6:	e840 3200 	strex	r2, r3, [r0]
   27bba:	2a00      	cmp	r2, #0
   27bbc:	d1f8      	bne.n	27bb0 <atomic_and.isra.0+0x4>
   27bbe:	f3bf 8f5b 	dmb	ish
}
   27bc2:	4770      	bx	lr

00027bc4 <bt_hci_disconnect>:
{
   27bc4:	b570      	push	{r4, r5, r6, lr}
   27bc6:	4606      	mov	r6, r0
   27bc8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   27bca:	f240 4006 	movw	r0, #1030	; 0x406
   27bce:	2103      	movs	r1, #3
   27bd0:	f7ee ff72 	bl	16ab8 <bt_hci_cmd_create>
	if (!buf) {
   27bd4:	4604      	mov	r4, r0
   27bd6:	b168      	cbz	r0, 27bf4 <bt_hci_disconnect+0x30>
   27bd8:	2103      	movs	r1, #3
   27bda:	300c      	adds	r0, #12
   27bdc:	f7f4 fc48 	bl	1c470 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   27be0:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   27be2:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   27be4:	4621      	mov	r1, r4
   27be6:	2200      	movs	r2, #0
}
   27be8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   27bec:	f240 4006 	movw	r0, #1030	; 0x406
   27bf0:	f7ee bfb0 	b.w	16b54 <bt_hci_cmd_send_sync>
}
   27bf4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27bf8:	bd70      	pop	{r4, r5, r6, pc}

00027bfa <bt_le_set_data_len>:
{
   27bfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27bfc:	4607      	mov	r7, r0
   27bfe:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   27c00:	f242 0022 	movw	r0, #8226	; 0x2022
   27c04:	2106      	movs	r1, #6
{
   27c06:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   27c08:	f7ee ff56 	bl	16ab8 <bt_hci_cmd_create>
	if (!buf) {
   27c0c:	4604      	mov	r4, r0
   27c0e:	b178      	cbz	r0, 27c30 <bt_le_set_data_len+0x36>
   27c10:	2106      	movs	r1, #6
   27c12:	300c      	adds	r0, #12
   27c14:	f7f4 fc2c 	bl	1c470 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   27c18:	883b      	ldrh	r3, [r7, #0]
   27c1a:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   27c1c:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   27c1e:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   27c20:	4621      	mov	r1, r4
   27c22:	2200      	movs	r2, #0
}
   27c24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   27c28:	f242 0022 	movw	r0, #8226	; 0x2022
   27c2c:	f7ee bf92 	b.w	16b54 <bt_hci_cmd_send_sync>
}
   27c30:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027c36 <bt_le_set_phy>:
{
   27c36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27c3a:	4681      	mov	r9, r0
   27c3c:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   27c3e:	f242 0032 	movw	r0, #8242	; 0x2032
   27c42:	2107      	movs	r1, #7
{
   27c44:	f89d a020 	ldrb.w	sl, [sp, #32]
   27c48:	4617      	mov	r7, r2
   27c4a:	461e      	mov	r6, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   27c4c:	f7ee ff34 	bl	16ab8 <bt_hci_cmd_create>
	if (!buf) {
   27c50:	4605      	mov	r5, r0
   27c52:	b1a0      	cbz	r0, 27c7e <bt_le_set_phy+0x48>
   27c54:	2107      	movs	r1, #7
   27c56:	300c      	adds	r0, #12
   27c58:	f7f4 fc0a 	bl	1c470 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   27c5c:	f8b9 3000 	ldrh.w	r3, [r9]
   27c60:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   27c62:	f880 8002 	strb.w	r8, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   27c66:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   27c68:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   27c6a:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   27c6e:	4629      	mov	r1, r5
   27c70:	2200      	movs	r2, #0
}
   27c72:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   27c76:	f242 0032 	movw	r0, #8242	; 0x2032
   27c7a:	f7ee bf6b 	b.w	16b54 <bt_hci_cmd_send_sync>
}
   27c7e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00027c86 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   27c86:	68c0      	ldr	r0, [r0, #12]
   27c88:	f7ef b838 	b.w	16cfc <bt_hci_le_enh_conn_complete>

00027c8c <bt_le_conn_params_valid>:
{
   27c8c:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   27c8e:	8803      	ldrh	r3, [r0, #0]
   27c90:	8842      	ldrh	r2, [r0, #2]
   27c92:	4293      	cmp	r3, r2
   27c94:	d819      	bhi.n	27cca <bt_le_conn_params_valid+0x3e>
   27c96:	2b05      	cmp	r3, #5
   27c98:	d917      	bls.n	27cca <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   27c9a:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   27c9e:	d814      	bhi.n	27cca <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   27ca0:	8883      	ldrh	r3, [r0, #4]
   27ca2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   27ca6:	d210      	bcs.n	27cca <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   27ca8:	88c0      	ldrh	r0, [r0, #6]
   27caa:	f1a0 010a 	sub.w	r1, r0, #10
   27cae:	b289      	uxth	r1, r1
   27cb0:	f640 4476 	movw	r4, #3190	; 0xc76
   27cb4:	42a1      	cmp	r1, r4
   27cb6:	d808      	bhi.n	27cca <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   27cb8:	3301      	adds	r3, #1
   27cba:	b29b      	uxth	r3, r3
   27cbc:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   27cbe:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   27cc2:	bf34      	ite	cc
   27cc4:	2001      	movcc	r0, #1
   27cc6:	2000      	movcs	r0, #0
}
   27cc8:	bd10      	pop	{r4, pc}
		return false;
   27cca:	2000      	movs	r0, #0
   27ccc:	e7fc      	b.n	27cc8 <bt_le_conn_params_valid+0x3c>

00027cce <le_conn_param_neg_reply>:
{
   27cce:	b570      	push	{r4, r5, r6, lr}
   27cd0:	4606      	mov	r6, r0
   27cd2:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   27cd4:	f242 0021 	movw	r0, #8225	; 0x2021
   27cd8:	2103      	movs	r1, #3
   27cda:	f7ee feed 	bl	16ab8 <bt_hci_cmd_create>
	if (!buf) {
   27cde:	4604      	mov	r4, r0
   27ce0:	b918      	cbnz	r0, 27cea <le_conn_param_neg_reply+0x1c>
}
   27ce2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   27ce6:	f7ee badb 	b.w	162a0 <le_conn_param_neg_reply.part.0>
   27cea:	2103      	movs	r1, #3
   27cec:	300c      	adds	r0, #12
   27cee:	f7f4 fbbf 	bl	1c470 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   27cf2:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   27cf4:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   27cf6:	4621      	mov	r1, r4
   27cf8:	f242 0021 	movw	r0, #8225	; 0x2021
}
   27cfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   27d00:	f7ef b9ae 	b.w	17060 <bt_hci_cmd_send>

00027d04 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   27d04:	f240 3041 	movw	r0, #833	; 0x341
   27d08:	4770      	bx	lr

00027d0a <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   27d0a:	2000      	movs	r0, #0
   27d0c:	4770      	bx	lr

00027d0e <bt_addr_le_eq>:
{
   27d0e:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   27d10:	2207      	movs	r2, #7
   27d12:	f7ff fe64 	bl	279de <memcmp>
}
   27d16:	fab0 f080 	clz	r0, r0
   27d1a:	0940      	lsrs	r0, r0, #5
   27d1c:	bd08      	pop	{r3, pc}

00027d1e <z_log_msg_static_create.constprop.0>:
   27d1e:	2300      	movs	r3, #0
   27d20:	f7ec b9b0 	b.w	14084 <z_impl_z_log_msg_static_create>

00027d24 <bt_lookup_id_addr>:
	return addr;
   27d24:	2800      	cmp	r0, #0
}
   27d26:	bf0c      	ite	eq
   27d28:	4608      	moveq	r0, r1
   27d2a:	2000      	movne	r0, #0
   27d2c:	4770      	bx	lr

00027d2e <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   27d2e:	b118      	cbz	r0, 27d38 <bt_id_set_adv_random_addr+0xa>
   27d30:	b111      	cbz	r1, 27d38 <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   27d32:	4608      	mov	r0, r1
   27d34:	f7ef bf88 	b.w	17c48 <set_random_address>
}
   27d38:	f06f 0015 	mvn.w	r0, #21
   27d3c:	4770      	bx	lr

00027d3e <bt_id_set_adv_private_addr>:
{
   27d3e:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   27d40:	4604      	mov	r4, r0
   27d42:	b180      	cbz	r0, 27d66 <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   27d44:	2106      	movs	r1, #6
   27d46:	4668      	mov	r0, sp
   27d48:	f7f7 f89a 	bl	1ee80 <bt_rand>
	if (err) {
   27d4c:	b948      	cbnz	r0, 27d62 <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   27d4e:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   27d52:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   27d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   27d58:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   27d5a:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   27d5e:	f7ff ffe6 	bl	27d2e <bt_id_set_adv_random_addr>
}
   27d62:	b002      	add	sp, #8
   27d64:	bd10      	pop	{r4, pc}
		return -EINVAL;
   27d66:	f06f 0015 	mvn.w	r0, #21
   27d6a:	e7fa      	b.n	27d62 <bt_id_set_adv_private_addr+0x24>

00027d6c <bt_id_adv_random_addr_check>:
}
   27d6c:	3800      	subs	r0, #0
   27d6e:	bf18      	it	ne
   27d70:	2001      	movne	r0, #1
   27d72:	4770      	bx	lr

00027d74 <get_adv_channel_map>:
{
   27d74:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   27d76:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   27d7a:	bf0c      	ite	eq
   27d7c:	2007      	moveq	r0, #7
   27d7e:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   27d80:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   27d82:	bf48      	it	mi
   27d84:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   27d88:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   27d8a:	bf48      	it	mi
   27d8c:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   27d90:	4770      	bx	lr

00027d92 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27d92:	f3bf 8f5b 	dmb	ish
   27d96:	6800      	ldr	r0, [r0, #0]
   27d98:	f3bf 8f5b 	dmb	ish
}
   27d9c:	4770      	bx	lr

00027d9e <atomic_and>:
{
   27d9e:	b510      	push	{r4, lr}
   27da0:	4603      	mov	r3, r0
}
   27da2:	f3bf 8f5b 	dmb	ish
   27da6:	e853 0f00 	ldrex	r0, [r3]
   27daa:	ea00 0201 	and.w	r2, r0, r1
   27dae:	e843 2400 	strex	r4, r2, [r3]
   27db2:	2c00      	cmp	r4, #0
   27db4:	d1f7      	bne.n	27da6 <atomic_and+0x8>
   27db6:	f3bf 8f5b 	dmb	ish
   27dba:	bd10      	pop	{r4, pc}

00027dbc <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   27dbc:	2301      	movs	r3, #1
{
   27dbe:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   27dc0:	fa03 f101 	lsl.w	r1, r3, r1
{
   27dc4:	4604      	mov	r4, r0
	if (val) {
   27dc6:	b16a      	cbz	r2, 27de4 <atomic_set_bit_to+0x28>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27dc8:	f3bf 8f5b 	dmb	ish
   27dcc:	e854 3f00 	ldrex	r3, [r4]
   27dd0:	430b      	orrs	r3, r1
   27dd2:	e844 3200 	strex	r2, r3, [r4]
   27dd6:	2a00      	cmp	r2, #0
   27dd8:	d1f8      	bne.n	27dcc <atomic_set_bit_to+0x10>
   27dda:	f3bf 8f5b 	dmb	ish
	}
}
   27dde:	f85d 4b04 	ldr.w	r4, [sp], #4
   27de2:	4770      	bx	lr
   27de4:	f85d 4b04 	ldr.w	r4, [sp], #4
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   27de8:	43c9      	mvns	r1, r1
   27dea:	f7ff bfd8 	b.w	27d9e <atomic_and>

00027dee <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   27dee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27df2:	b087      	sub	sp, #28
   27df4:	4605      	mov	r5, r0
   27df6:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   27dfa:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   27dfe:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   27e02:	460c      	mov	r4, r1
   27e04:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   27e06:	2100      	movs	r1, #0
   27e08:	2210      	movs	r2, #16
   27e0a:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   27e0c:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   27e0e:	f7ff fe18 	bl	27a42 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   27e12:	b9ee      	cbnz	r6, 27e50 <le_adv_update.constprop.0+0x62>
		d[0].len = ad_len;
   27e14:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   27e18:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   27e1a:	a902      	add	r1, sp, #8
   27e1c:	f242 0008 	movw	r0, #8200	; 0x2008
   27e20:	f7f0 f924 	bl	1806c <hci_set_ad>
		if (err) {
   27e24:	4604      	mov	r4, r0
   27e26:	b978      	cbnz	r0, 27e48 <le_adv_update.constprop.0+0x5a>
	if (scannable) {
   27e28:	f1ba 0f00 	cmp.w	sl, #0
   27e2c:	d13e      	bne.n	27eac <le_adv_update.constprop.0+0xbe>
   27e2e:	3510      	adds	r5, #16
   27e30:	f3bf 8f5b 	dmb	ish
   27e34:	e855 3f00 	ldrex	r3, [r5]
   27e38:	f043 0304 	orr.w	r3, r3, #4
   27e3c:	e845 3200 	strex	r2, r3, [r5]
   27e40:	2a00      	cmp	r2, #0
   27e42:	d1f7      	bne.n	27e34 <le_adv_update.constprop.0+0x46>
   27e44:	f3bf 8f5b 	dmb	ish
}
   27e48:	4620      	mov	r0, r4
   27e4a:	b007      	add	sp, #28
   27e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   27e50:	f7ef fede 	bl	17c10 <bt_get_name>
   27e54:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   27e56:	b9e4      	cbnz	r4, 27e92 <le_adv_update.constprop.0+0xa4>
   27e58:	bb37      	cbnz	r7, 27ea8 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   27e5a:	4658      	mov	r0, fp
   27e5c:	f7ff fdaf 	bl	279be <strlen>
   27e60:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   27e62:	2e01      	cmp	r6, #1
		d[0].data = ad;
   27e64:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   27e68:	f88d 3000 	strb.w	r3, [sp]
   27e6c:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   27e70:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   27e74:	d1d0      	bne.n	27e18 <le_adv_update.constprop.0+0x2a>
			d[1].data = &data;
   27e76:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   27e7a:	9605      	str	r6, [sp, #20]
			d_len = 2;
   27e7c:	2202      	movs	r2, #2
   27e7e:	e7cc      	b.n	27e1a <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   27e80:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   27e84:	3a08      	subs	r2, #8
   27e86:	2a01      	cmp	r2, #1
   27e88:	d925      	bls.n	27ed6 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   27e8a:	3301      	adds	r3, #1
   27e8c:	4598      	cmp	r8, r3
   27e8e:	d1f7      	bne.n	27e80 <le_adv_update.constprop.0+0x92>
   27e90:	e7e2      	b.n	27e58 <le_adv_update.constprop.0+0x6a>
   27e92:	2300      	movs	r3, #0
   27e94:	e7fa      	b.n	27e8c <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   27e96:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   27e9a:	3a08      	subs	r2, #8
   27e9c:	2a01      	cmp	r2, #1
   27e9e:	d91a      	bls.n	27ed6 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   27ea0:	3301      	adds	r3, #1
   27ea2:	4599      	cmp	r9, r3
   27ea4:	d1f7      	bne.n	27e96 <le_adv_update.constprop.0+0xa8>
   27ea6:	e7d8      	b.n	27e5a <le_adv_update.constprop.0+0x6c>
   27ea8:	2300      	movs	r3, #0
   27eaa:	e7fa      	b.n	27ea2 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   27eac:	2e02      	cmp	r6, #2
   27eae:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   27eb2:	bf08      	it	eq
   27eb4:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   27eb6:	a902      	add	r1, sp, #8
			d_len = 2;
   27eb8:	bf08      	it	eq
   27eba:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   27ebc:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   27ec0:	bf08      	it	eq
   27ec2:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   27ec6:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   27eca:	f7f0 f8cf 	bl	1806c <hci_set_ad>
		if (err) {
   27ece:	2800      	cmp	r0, #0
   27ed0:	d0ad      	beq.n	27e2e <le_adv_update.constprop.0+0x40>
   27ed2:	4604      	mov	r4, r0
   27ed4:	e7b8      	b.n	27e48 <le_adv_update.constprop.0+0x5a>
			return -EINVAL;
   27ed6:	f06f 0415 	mvn.w	r4, #21
   27eda:	e7b5      	b.n	27e48 <le_adv_update.constprop.0+0x5a>

00027edc <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   27edc:	6843      	ldr	r3, [r0, #4]
   27ede:	f013 0008 	ands.w	r0, r3, #8
   27ee2:	d00a      	beq.n	27efa <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   27ee4:	035a      	lsls	r2, r3, #13
   27ee6:	d407      	bmi.n	27ef8 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   27ee8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   27eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   27ef0:	bf14      	ite	ne
   27ef2:	2002      	movne	r0, #2
   27ef4:	2001      	moveq	r0, #1
   27ef6:	4770      	bx	lr
   27ef8:	2001      	movs	r0, #1
}
   27efa:	4770      	bx	lr

00027efc <bt_le_adv_set_enable_legacy>:
{
   27efc:	b570      	push	{r4, r5, r6, lr}
   27efe:	4606      	mov	r6, r0
   27f00:	b086      	sub	sp, #24
   27f02:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   27f04:	f242 000a 	movw	r0, #8202	; 0x200a
   27f08:	2101      	movs	r1, #1
   27f0a:	f7ee fdd5 	bl	16ab8 <bt_hci_cmd_create>
	if (!buf) {
   27f0e:	4604      	mov	r4, r0
   27f10:	b1b0      	cbz	r0, 27f40 <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   27f12:	300c      	adds	r0, #12
	if (enable) {
   27f14:	b195      	cbz	r5, 27f3c <bt_le_adv_set_enable_legacy+0x40>
   27f16:	2101      	movs	r1, #1
   27f18:	f000 ff9d 	bl	28e56 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   27f1c:	f106 0210 	add.w	r2, r6, #16
   27f20:	a903      	add	r1, sp, #12
   27f22:	4620      	mov	r0, r4
   27f24:	9500      	str	r5, [sp, #0]
   27f26:	2307      	movs	r3, #7
   27f28:	f7ee fdb4 	bl	16a94 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   27f2c:	2200      	movs	r2, #0
   27f2e:	4621      	mov	r1, r4
   27f30:	f242 000a 	movw	r0, #8202	; 0x200a
   27f34:	f7ee fe0e 	bl	16b54 <bt_hci_cmd_send_sync>
}
   27f38:	b006      	add	sp, #24
   27f3a:	bd70      	pop	{r4, r5, r6, pc}
   27f3c:	4629      	mov	r1, r5
   27f3e:	e7eb      	b.n	27f18 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   27f40:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27f44:	e7f8      	b.n	27f38 <bt_le_adv_set_enable_legacy+0x3c>

00027f46 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   27f46:	3018      	adds	r0, #24
   27f48:	f7f9 bcb8 	b.w	218bc <k_work_cancel_delayable>

00027f4c <z_log_msg_static_create.constprop.0>:
   27f4c:	2300      	movs	r3, #0
   27f4e:	f7ec b899 	b.w	14084 <z_impl_z_log_msg_static_create>

00027f52 <tx_complete_work>:
	tx_notify(conn);
   27f52:	3828      	subs	r0, #40	; 0x28
   27f54:	f7f0 bbf4 	b.w	18740 <tx_notify>

00027f58 <bt_conn_reset_rx_state>:
{
   27f58:	b510      	push	{r4, lr}
   27f5a:	4604      	mov	r4, r0
	if (!conn->rx) {
   27f5c:	6900      	ldr	r0, [r0, #16]
   27f5e:	b118      	cbz	r0, 27f68 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   27f60:	f7f4 f942 	bl	1c1e8 <net_buf_unref>
	conn->rx = NULL;
   27f64:	2300      	movs	r3, #0
   27f66:	6123      	str	r3, [r4, #16]
}
   27f68:	bd10      	pop	{r4, pc}

00027f6a <conn_lookup_handle>:
{
   27f6a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27f6e:	4607      	mov	r7, r0
   27f70:	460e      	mov	r6, r1
   27f72:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   27f74:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   27f76:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   27f7a:	42b4      	cmp	r4, r6
   27f7c:	d103      	bne.n	27f86 <conn_lookup_handle+0x1c>
	return NULL;
   27f7e:	2300      	movs	r3, #0
}
   27f80:	4618      	mov	r0, r3
   27f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   27f86:	fb09 7004 	mla	r0, r9, r4, r7
   27f8a:	f7f0 ff09 	bl	18da0 <bt_conn_ref>
   27f8e:	4603      	mov	r3, r0
		if (!conn) {
   27f90:	b158      	cbz	r0, 27faa <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   27f92:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   27f94:	2d01      	cmp	r5, #1
   27f96:	d002      	beq.n	27f9e <conn_lookup_handle+0x34>
   27f98:	3d07      	subs	r5, #7
   27f9a:	2d01      	cmp	r5, #1
   27f9c:	d803      	bhi.n	27fa6 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   27f9e:	881a      	ldrh	r2, [r3, #0]
   27fa0:	4542      	cmp	r2, r8
   27fa2:	d0ed      	beq.n	27f80 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   27fa4:	4618      	mov	r0, r3
   27fa6:	f7f0 ff2b 	bl	18e00 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   27faa:	3401      	adds	r4, #1
   27fac:	e7e5      	b.n	27f7a <conn_lookup_handle+0x10>

00027fae <bt_conn_connected>:
{
   27fae:	b510      	push	{r4, lr}
   27fb0:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   27fb2:	f7f1 fc47 	bl	19844 <bt_l2cap_connected>
	notify_connected(conn);
   27fb6:	4620      	mov	r0, r4
}
   27fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   27fbc:	f7f0 bb8a 	b.w	186d4 <notify_connected>

00027fc0 <bt_conn_is_peer_addr_le>:
{
   27fc0:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   27fc2:	7a03      	ldrb	r3, [r0, #8]
   27fc4:	428b      	cmp	r3, r1
{
   27fc6:	4604      	mov	r4, r0
   27fc8:	4615      	mov	r5, r2
	if (id != conn->id) {
   27fca:	d115      	bne.n	27ff8 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   27fcc:	f100 0190 	add.w	r1, r0, #144	; 0x90
   27fd0:	2207      	movs	r2, #7
   27fd2:	4628      	mov	r0, r5
   27fd4:	f7ff fd03 	bl	279de <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   27fd8:	b180      	cbz	r0, 27ffc <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   27fda:	78e3      	ldrb	r3, [r4, #3]
   27fdc:	2207      	movs	r2, #7
   27fde:	b943      	cbnz	r3, 27ff2 <bt_conn_is_peer_addr_le+0x32>
   27fe0:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   27fe4:	4628      	mov	r0, r5
   27fe6:	f7ff fcfa 	bl	279de <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   27fea:	fab0 f080 	clz	r0, r0
   27fee:	0940      	lsrs	r0, r0, #5
}
   27ff0:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   27ff2:	f104 0197 	add.w	r1, r4, #151	; 0x97
   27ff6:	e7f5      	b.n	27fe4 <bt_conn_is_peer_addr_le+0x24>
		return false;
   27ff8:	2000      	movs	r0, #0
   27ffa:	e7f9      	b.n	27ff0 <bt_conn_is_peer_addr_le+0x30>
		return true;
   27ffc:	2001      	movs	r0, #1
   27ffe:	e7f7      	b.n	27ff0 <bt_conn_is_peer_addr_le+0x30>

00028000 <bt_conn_get_dst>:
}
   28000:	3090      	adds	r0, #144	; 0x90
   28002:	4770      	bx	lr

00028004 <bt_conn_le_conn_update>:
{
   28004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28006:	4607      	mov	r7, r0
   28008:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2800a:	f242 0013 	movw	r0, #8211	; 0x2013
   2800e:	210e      	movs	r1, #14
   28010:	f7ee fd52 	bl	16ab8 <bt_hci_cmd_create>
	if (!buf) {
   28014:	4606      	mov	r6, r0
   28016:	b1d0      	cbz	r0, 2804e <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   28018:	210e      	movs	r1, #14
   2801a:	300c      	adds	r0, #12
   2801c:	f7f4 fa28 	bl	1c470 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   28020:	220e      	movs	r2, #14
   28022:	4604      	mov	r4, r0
   28024:	2100      	movs	r1, #0
   28026:	f7ff fd0c 	bl	27a42 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2802a:	883b      	ldrh	r3, [r7, #0]
   2802c:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2802e:	882b      	ldrh	r3, [r5, #0]
   28030:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   28032:	886b      	ldrh	r3, [r5, #2]
   28034:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   28036:	88ab      	ldrh	r3, [r5, #4]
   28038:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2803a:	88eb      	ldrh	r3, [r5, #6]
   2803c:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2803e:	4631      	mov	r1, r6
   28040:	2200      	movs	r2, #0
}
   28042:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   28046:	f242 0013 	movw	r0, #8211	; 0x2013
   2804a:	f7ee bd83 	b.w	16b54 <bt_hci_cmd_send_sync>
}
   2804e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028054 <l2cap_connected>:
}
   28054:	4770      	bx	lr

00028056 <z_log_msg_static_create.constprop.0>:
   28056:	2300      	movs	r3, #0
   28058:	f7ec b814 	b.w	14084 <z_impl_z_log_msg_static_create>

0002805c <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   2805c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2805e:	4605      	mov	r5, r0
   28060:	460f      	mov	r7, r1
   28062:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   28064:	2300      	movs	r3, #0
   28066:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2806a:	2104      	movs	r1, #4
   2806c:	2000      	movs	r0, #0
   2806e:	f7f1 f82f 	bl	190d0 <bt_conn_create_pdu_timeout>
	if (!buf) {
   28072:	4604      	mov	r4, r0
   28074:	b920      	cbnz	r0, 28080 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   28076:	4628      	mov	r0, r5
}
   28078:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2807c:	f7f1 bba6 	b.w	197cc <l2cap_create_le_sig_pdu.part.0>
   28080:	2104      	movs	r1, #4
   28082:	300c      	adds	r0, #12
   28084:	f7f4 f9f4 	bl	1c470 <net_buf_simple_add>
	hdr->code = code;
   28088:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   2808a:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   2808c:	8046      	strh	r6, [r0, #2]
}
   2808e:	4620      	mov	r0, r4
   28090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028092 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   28092:	4770      	bx	lr

00028094 <bt_l2cap_chan_del>:
{
   28094:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   28096:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   2809a:	4604      	mov	r4, r0
	if (!chan->conn) {
   2809c:	b123      	cbz	r3, 280a8 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2809e:	686b      	ldr	r3, [r5, #4]
   280a0:	b103      	cbz	r3, 280a4 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   280a2:	4798      	blx	r3
	chan->conn = NULL;
   280a4:	2300      	movs	r3, #0
   280a6:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   280a8:	68e3      	ldr	r3, [r4, #12]
   280aa:	b10b      	cbz	r3, 280b0 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   280ac:	4620      	mov	r0, r4
   280ae:	4798      	blx	r3
	if (ops->released) {
   280b0:	6a2b      	ldr	r3, [r5, #32]
   280b2:	b11b      	cbz	r3, 280bc <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   280b4:	4620      	mov	r0, r4
}
   280b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   280ba:	4718      	bx	r3
}
   280bc:	bd70      	pop	{r4, r5, r6, pc}

000280be <bt_l2cap_disconnected>:
{
   280be:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   280c0:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   280c2:	b130      	cbz	r0, 280d2 <bt_l2cap_disconnected+0x14>
	return node->next;
   280c4:	f850 4908 	ldr.w	r4, [r0], #-8
   280c8:	b104      	cbz	r4, 280cc <bt_l2cap_disconnected+0xe>
   280ca:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   280cc:	f7ff ffe2 	bl	28094 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   280d0:	b904      	cbnz	r4, 280d4 <bt_l2cap_disconnected+0x16>
}
   280d2:	bd38      	pop	{r3, r4, r5, pc}
   280d4:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   280d6:	b12d      	cbz	r5, 280e4 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   280d8:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   280da:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   280dc:	f7ff ffda 	bl	28094 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   280e0:	462c      	mov	r4, r5
   280e2:	e7f7      	b.n	280d4 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   280e4:	4620      	mov	r0, r4
}
   280e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   280ea:	f7ff bfd3 	b.w	28094 <bt_l2cap_chan_del>

000280ee <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   280ee:	3104      	adds	r1, #4
   280f0:	f7f0 bfee 	b.w	190d0 <bt_conn_create_pdu_timeout>

000280f4 <bt_l2cap_send_cb>:
{
   280f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   280f8:	4614      	mov	r4, r2
   280fa:	4605      	mov	r5, r0
   280fc:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   280fe:	f102 000c 	add.w	r0, r2, #12
   28102:	2104      	movs	r1, #4
   28104:	461e      	mov	r6, r3
   28106:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2810a:	f7f4 f955 	bl	1c3b8 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2810e:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   28110:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   28112:	3a04      	subs	r2, #4
   28114:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   28116:	4643      	mov	r3, r8
   28118:	4632      	mov	r2, r6
   2811a:	4621      	mov	r1, r4
   2811c:	4628      	mov	r0, r5
}
   2811e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   28122:	f7f0 bd7b 	b.w	18c1c <bt_conn_send_cb>

00028126 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   28126:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   28128:	b130      	cbz	r0, 28138 <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2812a:	8983      	ldrh	r3, [r0, #12]
   2812c:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2812e:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   28132:	d001      	beq.n	28138 <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   28134:	6880      	ldr	r0, [r0, #8]
   28136:	e7f7      	b.n	28128 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   28138:	4770      	bx	lr

0002813a <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   2813a:	4770      	bx	lr

0002813c <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2813c:	4603      	mov	r3, r0
	return list->head;
   2813e:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   28140:	b128      	cbz	r0, 2814e <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28142:	6859      	ldr	r1, [r3, #4]
	return node->next;
   28144:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   28146:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   28148:	4288      	cmp	r0, r1
	list->tail = node;
   2814a:	bf08      	it	eq
   2814c:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2814e:	4770      	bx	lr

00028150 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   28150:	4603      	mov	r3, r0
	size_t bytes = 0;
   28152:	2000      	movs	r0, #0

	while (buf) {
   28154:	b903      	cbnz	r3, 28158 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   28156:	4770      	bx	lr
		bytes += buf->len;
   28158:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   2815a:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   2815c:	4410      	add	r0, r2
		buf = buf->frags;
   2815e:	e7f9      	b.n	28154 <net_buf_frags_len+0x4>

00028160 <attr_read_type_cb>:
{
   28160:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   28162:	68d4      	ldr	r4, [r2, #12]
   28164:	7823      	ldrb	r3, [r4, #0]
   28166:	3102      	adds	r1, #2
   28168:	b913      	cbnz	r3, 28170 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   2816a:	7021      	strb	r1, [r4, #0]
	return true;
   2816c:	2001      	movs	r0, #1
}
   2816e:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   28170:	428b      	cmp	r3, r1
   28172:	d0fb      	beq.n	2816c <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   28174:	8a03      	ldrh	r3, [r0, #16]
   28176:	3b02      	subs	r3, #2
   28178:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   2817a:	2000      	movs	r0, #0
   2817c:	6110      	str	r0, [r2, #16]
		return false;
   2817e:	e7f6      	b.n	2816e <attr_read_type_cb+0xe>

00028180 <att_prepare_write_req>:
}
   28180:	2006      	movs	r0, #6
   28182:	4770      	bx	lr

00028184 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28184:	f3bf 8f5b 	dmb	ish
   28188:	6800      	ldr	r0, [r0, #0]
   2818a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2818e:	4108      	asrs	r0, r1
}
   28190:	f000 0001 	and.w	r0, r0, #1
   28194:	4770      	bx	lr

00028196 <write_cb>:
{
   28196:	b573      	push	{r0, r1, r4, r5, r6, lr}
   28198:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2819a:	4601      	mov	r1, r0
{
   2819c:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   2819e:	f44f 7295 	mov.w	r2, #298	; 0x12a
   281a2:	6820      	ldr	r0, [r4, #0]
   281a4:	f000 fda3 	bl	28cee <bt_gatt_check_perm>
   281a8:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   281aa:	bb00      	cbnz	r0, 281ee <write_cb+0x58>
	if (!data->req) {
   281ac:	7a23      	ldrb	r3, [r4, #8]
   281ae:	b1b3      	cbz	r3, 281de <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   281b0:	f1a3 0218 	sub.w	r2, r3, #24
   281b4:	4253      	negs	r3, r2
   281b6:	4153      	adcs	r3, r2
   281b8:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   281ba:	9301      	str	r3, [sp, #4]
   281bc:	8a63      	ldrh	r3, [r4, #18]
   281be:	9300      	str	r3, [sp, #0]
   281c0:	68ae      	ldr	r6, [r5, #8]
   281c2:	8a23      	ldrh	r3, [r4, #16]
   281c4:	68e2      	ldr	r2, [r4, #12]
   281c6:	6820      	ldr	r0, [r4, #0]
   281c8:	4629      	mov	r1, r5
   281ca:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   281cc:	2800      	cmp	r0, #0
   281ce:	db08      	blt.n	281e2 <write_cb+0x4c>
   281d0:	8a23      	ldrh	r3, [r4, #16]
   281d2:	4298      	cmp	r0, r3
   281d4:	d10e      	bne.n	281f4 <write_cb+0x5e>
	data->err = 0U;
   281d6:	2300      	movs	r3, #0
   281d8:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   281da:	2001      	movs	r0, #1
   281dc:	e008      	b.n	281f0 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   281de:	2302      	movs	r3, #2
   281e0:	e7eb      	b.n	281ba <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   281e2:	f110 0fff 	cmn.w	r0, #255	; 0xff
   281e6:	d305      	bcc.n	281f4 <write_cb+0x5e>
		return -err;
   281e8:	4240      	negs	r0, r0
   281ea:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   281ec:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   281ee:	2000      	movs	r0, #0
}
   281f0:	b002      	add	sp, #8
   281f2:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   281f4:	200e      	movs	r0, #14
   281f6:	e7f9      	b.n	281ec <write_cb+0x56>

000281f8 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   281f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   281fa:	e9cd 2301 	strd	r2, r3, [sp, #4]
   281fe:	2300      	movs	r3, #0
   28200:	9300      	str	r3, [sp, #0]
   28202:	461a      	mov	r2, r3
   28204:	f7f3 f898 	bl	1b338 <bt_gatt_foreach_attr_type>
				  user_data);
}
   28208:	b005      	add	sp, #20
   2820a:	f85d fb04 	ldr.w	pc, [sp], #4

0002820e <find_info_cb>:
{
   2820e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   28210:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   28212:	6817      	ldr	r7, [r2, #0]
{
   28214:	4605      	mov	r5, r0
   28216:	460e      	mov	r6, r1
   28218:	4614      	mov	r4, r2
	if (!data->rsp) {
   2821a:	b963      	cbnz	r3, 28236 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   2821c:	6850      	ldr	r0, [r2, #4]
   2821e:	2101      	movs	r1, #1
   28220:	300c      	adds	r0, #12
   28222:	f7f4 f925 	bl	1c470 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   28226:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   28228:	682b      	ldr	r3, [r5, #0]
   2822a:	781b      	ldrb	r3, [r3, #0]
   2822c:	2b00      	cmp	r3, #0
   2822e:	bf14      	ite	ne
   28230:	2302      	movne	r3, #2
   28232:	2301      	moveq	r3, #1
   28234:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   28236:	68a3      	ldr	r3, [r4, #8]
   28238:	781b      	ldrb	r3, [r3, #0]
   2823a:	2b01      	cmp	r3, #1
   2823c:	d003      	beq.n	28246 <find_info_cb+0x38>
   2823e:	2b02      	cmp	r3, #2
   28240:	d019      	beq.n	28276 <find_info_cb+0x68>
   28242:	2000      	movs	r0, #0
   28244:	e016      	b.n	28274 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   28246:	682b      	ldr	r3, [r5, #0]
   28248:	781b      	ldrb	r3, [r3, #0]
   2824a:	2b00      	cmp	r3, #0
   2824c:	d1f9      	bne.n	28242 <find_info_cb+0x34>
   2824e:	6860      	ldr	r0, [r4, #4]
   28250:	2104      	movs	r1, #4
   28252:	300c      	adds	r0, #12
   28254:	f7f4 f90c 	bl	1c470 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   28258:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   2825a:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2825c:	682a      	ldr	r2, [r5, #0]
   2825e:	68e3      	ldr	r3, [r4, #12]
   28260:	8852      	ldrh	r2, [r2, #2]
   28262:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   28264:	6863      	ldr	r3, [r4, #4]
   28266:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   28268:	8a1b      	ldrh	r3, [r3, #16]
   2826a:	1ac0      	subs	r0, r0, r3
   2826c:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   2826e:	bf94      	ite	ls
   28270:	2000      	movls	r0, #0
   28272:	2001      	movhi	r0, #1
}
   28274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   28276:	682b      	ldr	r3, [r5, #0]
   28278:	781b      	ldrb	r3, [r3, #0]
   2827a:	2b02      	cmp	r3, #2
   2827c:	d1e1      	bne.n	28242 <find_info_cb+0x34>
   2827e:	6860      	ldr	r0, [r4, #4]
   28280:	2112      	movs	r1, #18
   28282:	300c      	adds	r0, #12
   28284:	f7f4 f8f4 	bl	1c470 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   28288:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   2828a:	8006      	strh	r6, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2828c:	6829      	ldr	r1, [r5, #0]
   2828e:	68e0      	ldr	r0, [r4, #12]
   28290:	2210      	movs	r2, #16
   28292:	3101      	adds	r1, #1
   28294:	3002      	adds	r0, #2
   28296:	f7ff fbc9 	bl	27a2c <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   2829a:	6863      	ldr	r3, [r4, #4]
   2829c:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   2829e:	8a1b      	ldrh	r3, [r3, #16]
   282a0:	1ac0      	subs	r0, r0, r3
   282a2:	2812      	cmp	r0, #18
   282a4:	e7e3      	b.n	2826e <find_info_cb+0x60>

000282a6 <att_chan_mtu_updated>:
{
   282a6:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   282a8:	6805      	ldr	r5, [r0, #0]
	return list->head;
   282aa:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   282ac:	b352      	cbz	r2, 28304 <att_chan_mtu_updated+0x5e>
	return node->next;
   282ae:	6813      	ldr	r3, [r2, #0]
   282b0:	b103      	cbz	r3, 282b4 <att_chan_mtu_updated+0xe>
   282b2:	3b88      	subs	r3, #136	; 0x88
   282b4:	f1a2 0488 	sub.w	r4, r2, #136	; 0x88
   282b8:	2200      	movs	r2, #0
   282ba:	4611      	mov	r1, r2
   282bc:	e000      	b.n	282c0 <att_chan_mtu_updated+0x1a>
   282be:	3b88      	subs	r3, #136	; 0x88
		if (chan == updated_chan) {
   282c0:	4284      	cmp	r4, r0
   282c2:	d007      	beq.n	282d4 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   282c4:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   282c6:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   282c8:	42b1      	cmp	r1, r6
   282ca:	bf38      	it	cc
   282cc:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   282ce:	42a2      	cmp	r2, r4
   282d0:	bf38      	it	cc
   282d2:	4622      	movcc	r2, r4
   282d4:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   282d6:	b12b      	cbz	r3, 282e4 <att_chan_mtu_updated+0x3e>
   282d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   282dc:	2b00      	cmp	r3, #0
   282de:	d1ee      	bne.n	282be <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   282e0:	4284      	cmp	r4, r0
   282e2:	d1ef      	bne.n	282c4 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   282e4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   282e6:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   282e8:	428b      	cmp	r3, r1
   282ea:	d801      	bhi.n	282f0 <att_chan_mtu_updated+0x4a>
   282ec:	4290      	cmp	r0, r2
   282ee:	d90b      	bls.n	28308 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   282f0:	4282      	cmp	r2, r0
   282f2:	bf38      	it	cc
   282f4:	4602      	movcc	r2, r0
   282f6:	4299      	cmp	r1, r3
   282f8:	6828      	ldr	r0, [r5, #0]
   282fa:	bf38      	it	cc
   282fc:	4619      	movcc	r1, r3
}
   282fe:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   28300:	f7f3 bd00 	b.w	1bd04 <bt_gatt_att_max_mtu_changed>
   28304:	4611      	mov	r1, r2
   28306:	e7ed      	b.n	282e4 <att_chan_mtu_updated+0x3e>
}
   28308:	bc70      	pop	{r4, r5, r6}
   2830a:	4770      	bx	lr

0002830c <attr_read_group_cb>:
	if (!data->rsp->len) {
   2830c:	68d0      	ldr	r0, [r2, #12]
   2830e:	7803      	ldrb	r3, [r0, #0]
   28310:	3104      	adds	r1, #4
   28312:	b913      	cbnz	r3, 2831a <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   28314:	7001      	strb	r1, [r0, #0]
	return true;
   28316:	2001      	movs	r0, #1
   28318:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2831a:	428b      	cmp	r3, r1
   2831c:	d0fb      	beq.n	28316 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   2831e:	6891      	ldr	r1, [r2, #8]
   28320:	8a0b      	ldrh	r3, [r1, #16]
		data->group = NULL;
   28322:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   28324:	3b04      	subs	r3, #4
   28326:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   28328:	6110      	str	r0, [r2, #16]
}
   2832a:	4770      	bx	lr

0002832c <z_log_msg_static_create.constprop.0>:
   2832c:	2300      	movs	r3, #0
   2832e:	f7eb bea9 	b.w	14084 <z_impl_z_log_msg_static_create>

00028332 <chan_req_send>:
{
   28332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28334:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   28336:	6888      	ldr	r0, [r1, #8]
   28338:	f7ff ff0a 	bl	28150 <net_buf_frags_len>
   2833c:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
   2833e:	4283      	cmp	r3, r0
{
   28340:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   28342:	d30b      	bcc.n	2835c <chan_req_send+0x2a>
	chan->req = req;
   28344:	63a9      	str	r1, [r5, #56]	; 0x38
	buf = req->buf;
   28346:	688f      	ldr	r7, [r1, #8]
	req->buf = NULL;
   28348:	2600      	movs	r6, #0
   2834a:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   2834c:	4628      	mov	r0, r5
   2834e:	4639      	mov	r1, r7
   28350:	f7f1 fcea 	bl	19d28 <chan_send>
	if (err) {
   28354:	b108      	cbz	r0, 2835a <chan_req_send+0x28>
		req->buf = buf;
   28356:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   28358:	63ae      	str	r6, [r5, #56]	; 0x38
}
   2835a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2835c:	f06f 0079 	mvn.w	r0, #121	; 0x79
   28360:	e7fb      	b.n	2835a <chan_req_send+0x28>

00028362 <process_queue>:
{
   28362:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   28364:	2200      	movs	r2, #0
{
   28366:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   28368:	2300      	movs	r3, #0
   2836a:	4608      	mov	r0, r1
{
   2836c:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   2836e:	f000 fd50 	bl	28e12 <net_buf_get>
	if (buf) {
   28372:	4605      	mov	r5, r0
   28374:	b158      	cbz	r0, 2838e <process_queue+0x2c>
	return chan_send(chan, buf);
   28376:	4601      	mov	r1, r0
   28378:	4620      	mov	r0, r4
   2837a:	f7f1 fcd5 	bl	19d28 <chan_send>
		if (err) {
   2837e:	4604      	mov	r4, r0
   28380:	b118      	cbz	r0, 2838a <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   28382:	4629      	mov	r1, r5
   28384:	4630      	mov	r0, r6
   28386:	f001 fa81 	bl	2988c <k_queue_prepend>
}
   2838a:	4620      	mov	r0, r4
   2838c:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2838e:	f06f 0401 	mvn.w	r4, #1
   28392:	e7fa      	b.n	2838a <process_queue+0x28>

00028394 <bt_att_chan_send_rsp>:
{
   28394:	b538      	push	{r3, r4, r5, lr}
   28396:	4604      	mov	r4, r0
   28398:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   2839a:	f7f1 fcc5 	bl	19d28 <chan_send>
	if (err) {
   2839e:	b130      	cbz	r0, 283ae <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   283a0:	4629      	mov	r1, r5
   283a2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
}
   283a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   283aa:	f7f3 bef7 	b.w	1c19c <net_buf_put>
}
   283ae:	bd38      	pop	{r3, r4, r5, pc}

000283b0 <att_chan_read>:
{
   283b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   283b4:	4680      	mov	r8, r0
   283b6:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   283b8:	4610      	mov	r0, r2
{
   283ba:	4699      	mov	r9, r3
   283bc:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   283be:	f7ff fec7 	bl	28150 <net_buf_frags_len>
   283c2:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   283c6:	4283      	cmp	r3, r0
{
   283c8:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   283ca:	d97a      	bls.n	284c2 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   283cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
   283d0:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   283d2:	4630      	mov	r0, r6
   283d4:	f7f3 ff64 	bl	1c2a0 <net_buf_frag_last>
	size_t len, total = 0;
   283d8:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   283dc:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   283de:	4630      	mov	r0, r6
   283e0:	f7ff feb6 	bl	28150 <net_buf_frags_len>
   283e4:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   283e8:	f105 070c 	add.w	r7, r5, #12
   283ec:	1a24      	subs	r4, r4, r0
   283ee:	4638      	mov	r0, r7
   283f0:	f000 fd1d 	bl	28e2e <net_buf_simple_tailroom>
   283f4:	4284      	cmp	r4, r0
   283f6:	d211      	bcs.n	2841c <att_chan_read+0x6c>
   283f8:	4630      	mov	r0, r6
   283fa:	f7ff fea9 	bl	28150 <net_buf_frags_len>
   283fe:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   28402:	1a24      	subs	r4, r4, r0
		if (!len) {
   28404:	bb34      	cbnz	r4, 28454 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   28406:	7ab0      	ldrb	r0, [r6, #10]
   28408:	f7f3 fcda 	bl	1bdc0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2840c:	2200      	movs	r2, #0
   2840e:	2300      	movs	r3, #0
   28410:	f000 fcfa 	bl	28e08 <net_buf_alloc_fixed>
			if (!frag) {
   28414:	4605      	mov	r5, r0
   28416:	b930      	cbnz	r0, 28426 <att_chan_read+0x76>
	return total;
   28418:	4657      	mov	r7, sl
   2841a:	e02c      	b.n	28476 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   2841c:	4638      	mov	r0, r7
   2841e:	f000 fd06 	bl	28e2e <net_buf_simple_tailroom>
   28422:	4604      	mov	r4, r0
   28424:	e7ee      	b.n	28404 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   28426:	4601      	mov	r1, r0
   28428:	4630      	mov	r0, r6
   2842a:	f7f3 ff7f 	bl	1c32c <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2842e:	4630      	mov	r0, r6
   28430:	f7ff fe8e 	bl	28150 <net_buf_frags_len>
   28434:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   28438:	f105 070c 	add.w	r7, r5, #12
   2843c:	1a24      	subs	r4, r4, r0
   2843e:	4638      	mov	r0, r7
   28440:	f000 fcf5 	bl	28e2e <net_buf_simple_tailroom>
   28444:	4284      	cmp	r4, r0
   28446:	d21a      	bcs.n	2847e <att_chan_read+0xce>
   28448:	4630      	mov	r0, r6
   2844a:	f7ff fe81 	bl	28150 <net_buf_frags_len>
   2844e:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   28452:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   28454:	68e9      	ldr	r1, [r5, #12]
   28456:	8a2a      	ldrh	r2, [r5, #16]
   28458:	f8cd 9000 	str.w	r9, [sp]
   2845c:	f8db 7004 	ldr.w	r7, [fp, #4]
   28460:	9803      	ldr	r0, [sp, #12]
   28462:	440a      	add	r2, r1
   28464:	b2a3      	uxth	r3, r4
   28466:	4659      	mov	r1, fp
   28468:	47b8      	blx	r7
		if (read < 0) {
   2846a:	1e07      	subs	r7, r0, #0
   2846c:	da0c      	bge.n	28488 <att_chan_read+0xd8>
				return total;
   2846e:	f1ba 0f00 	cmp.w	sl, #0
   28472:	bf18      	it	ne
   28474:	4657      	movne	r7, sl
}
   28476:	4638      	mov	r0, r7
   28478:	b005      	add	sp, #20
   2847a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2847e:	4638      	mov	r0, r7
   28480:	f000 fcd5 	bl	28e2e <net_buf_simple_tailroom>
   28484:	4604      	mov	r4, r0
   28486:	e7e5      	b.n	28454 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   28488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2848a:	b993      	cbnz	r3, 284b2 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2848c:	4639      	mov	r1, r7
   2848e:	f105 000c 	add.w	r0, r5, #12
   28492:	f7f3 ffed 	bl	1c470 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   28496:	4630      	mov	r0, r6
   28498:	f7ff fe5a 	bl	28150 <net_buf_frags_len>
   2849c:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   284a0:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   284a2:	4283      	cmp	r3, r0
		total += read;
   284a4:	44ba      	add	sl, r7
		offset += read;
   284a6:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   284aa:	d9b5      	bls.n	28418 <att_chan_read+0x68>
   284ac:	42a7      	cmp	r7, r4
   284ae:	d096      	beq.n	283de <att_chan_read+0x2e>
   284b0:	e7b2      	b.n	28418 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   284b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   284b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   284b6:	4639      	mov	r1, r7
   284b8:	4628      	mov	r0, r5
   284ba:	4798      	blx	r3
   284bc:	2800      	cmp	r0, #0
   284be:	d1e5      	bne.n	2848c <att_chan_read+0xdc>
   284c0:	e7aa      	b.n	28418 <att_chan_read+0x68>
		return 0;
   284c2:	2700      	movs	r7, #0
   284c4:	e7d7      	b.n	28476 <att_chan_read+0xc6>

000284c6 <sys_slist_find_and_remove.isra.0>:
	return list->head;
   284c6:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   284c8:	2200      	movs	r2, #0
   284ca:	b903      	cbnz	r3, 284ce <sys_slist_find_and_remove.isra.0+0x8>
   284cc:	4770      	bx	lr
   284ce:	428b      	cmp	r3, r1
   284d0:	d10f      	bne.n	284f2 <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   284d2:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   284d4:	b93a      	cbnz	r2, 284e6 <sys_slist_find_and_remove.isra.0+0x20>
   284d6:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   284d8:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   284da:	4291      	cmp	r1, r2
   284dc:	d100      	bne.n	284e0 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   284de:	6043      	str	r3, [r0, #4]
	parent->next = child;
   284e0:	2300      	movs	r3, #0
   284e2:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   284e4:	4770      	bx	lr
	parent->next = child;
   284e6:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   284e8:	6843      	ldr	r3, [r0, #4]
   284ea:	4299      	cmp	r1, r3
	list->tail = node;
   284ec:	bf08      	it	eq
   284ee:	6042      	streq	r2, [r0, #4]
}
   284f0:	e7f6      	b.n	284e0 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   284f2:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   284f4:	681b      	ldr	r3, [r3, #0]
   284f6:	e7e8      	b.n	284ca <sys_slist_find_and_remove.isra.0+0x4>

000284f8 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   284f8:	2301      	movs	r3, #1
   284fa:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   284fc:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   284fe:	f3bf 8f5b 	dmb	ish
   28502:	e850 2f00 	ldrex	r2, [r0]
   28506:	401a      	ands	r2, r3
   28508:	e840 2100 	strex	r1, r2, [r0]
   2850c:	2900      	cmp	r1, #0
   2850e:	d1f8      	bne.n	28502 <atomic_clear_bit+0xa>
   28510:	f3bf 8f5b 	dmb	ish
}
   28514:	4770      	bx	lr

00028516 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   28516:	2006      	movs	r0, #6
   28518:	4770      	bx	lr

0002851a <atomic_test_and_set_bit>:
{
   2851a:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2851c:	2301      	movs	r3, #1
   2851e:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28522:	f3bf 8f5b 	dmb	ish
   28526:	e850 3f00 	ldrex	r3, [r0]
   2852a:	ea43 0201 	orr.w	r2, r3, r1
   2852e:	e840 2400 	strex	r4, r2, [r0]
   28532:	2c00      	cmp	r4, #0
   28534:	d1f7      	bne.n	28526 <atomic_test_and_set_bit+0xc>
   28536:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2853a:	4219      	tst	r1, r3
}
   2853c:	bf14      	ite	ne
   2853e:	2001      	movne	r0, #1
   28540:	2000      	moveq	r0, #0
   28542:	bd10      	pop	{r4, pc}

00028544 <read_cb>:
{
   28544:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   28546:	6816      	ldr	r6, [r2, #0]
{
   28548:	4605      	mov	r5, r0
	data->err = 0x00;
   2854a:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2854c:	6870      	ldr	r0, [r6, #4]
	data->err = 0x00;
   2854e:	7313      	strb	r3, [r2, #12]
{
   28550:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   28552:	4629      	mov	r1, r5
   28554:	2295      	movs	r2, #149	; 0x95
   28556:	f000 fbca 	bl	28cee <bt_gatt_check_perm>
   2855a:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2855c:	b980      	cbnz	r0, 28580 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2855e:	e9cd 0000 	strd	r0, r0, [sp]
   28562:	4629      	mov	r1, r5
   28564:	88a3      	ldrh	r3, [r4, #4]
   28566:	68a2      	ldr	r2, [r4, #8]
   28568:	4630      	mov	r0, r6
   2856a:	f7ff ff21 	bl	283b0 <att_chan_read>
	if (ret < 0) {
   2856e:	2800      	cmp	r0, #0
   28570:	da09      	bge.n	28586 <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   28572:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   28576:	bf26      	itte	cs
   28578:	4240      	negcs	r0, r0
   2857a:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   2857c:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   2857e:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   28580:	2000      	movs	r0, #0
}
   28582:	b002      	add	sp, #8
   28584:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   28586:	2001      	movs	r0, #1
   28588:	e7fb      	b.n	28582 <read_cb+0x3e>

0002858a <read_vl_cb>:
{
   2858a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   2858e:	f8d2 8000 	ldr.w	r8, [r2]
{
   28592:	4606      	mov	r6, r0
	data->err = 0x00;
   28594:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   28596:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   2859a:	7313      	strb	r3, [r2, #12]
{
   2859c:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2859e:	4631      	mov	r1, r6
   285a0:	2295      	movs	r2, #149	; 0x95
   285a2:	f000 fba4 	bl	28cee <bt_gatt_check_perm>
   285a6:	4605      	mov	r5, r0
   285a8:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   285aa:	b9e0      	cbnz	r0, 285e6 <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   285ac:	68a0      	ldr	r0, [r4, #8]
   285ae:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   285b2:	8a02      	ldrh	r2, [r0, #16]
   285b4:	1a9b      	subs	r3, r3, r2
   285b6:	2b01      	cmp	r3, #1
   285b8:	dd15      	ble.n	285e6 <read_vl_cb+0x5c>
   285ba:	2102      	movs	r1, #2
   285bc:	300c      	adds	r0, #12
   285be:	f7f3 ff57 	bl	1c470 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   285c2:	e9cd 5500 	strd	r5, r5, [sp]
   285c6:	4607      	mov	r7, r0
   285c8:	88a3      	ldrh	r3, [r4, #4]
   285ca:	68a2      	ldr	r2, [r4, #8]
   285cc:	4631      	mov	r1, r6
   285ce:	4640      	mov	r0, r8
   285d0:	f7ff feee 	bl	283b0 <att_chan_read>
	if (read < 0) {
   285d4:	1e03      	subs	r3, r0, #0
   285d6:	da0a      	bge.n	285ee <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   285d8:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   285dc:	bf26      	itte	cs
   285de:	425b      	negcs	r3, r3
   285e0:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   285e2:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   285e4:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   285e6:	2000      	movs	r0, #0
}
   285e8:	b002      	add	sp, #8
   285ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   285ee:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   285f0:	2001      	movs	r0, #1
   285f2:	e7f9      	b.n	285e8 <read_vl_cb+0x5e>

000285f4 <bt_att_sent>:
{
   285f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att *att = chan->att;
   285f6:	f850 4c04 	ldr.w	r4, [r0, #-4]
{
   285fa:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   285fc:	1f07      	subs	r7, r0, #4
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   285fe:	2104      	movs	r1, #4
   28600:	3030      	adds	r0, #48	; 0x30
   28602:	f7ff ff79 	bl	284f8 <atomic_clear_bit>
	if (!att) {
   28606:	b304      	cbz	r4, 2864a <bt_att_sent+0x56>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   28608:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   2860a:	b98b      	cbnz	r3, 28630 <bt_att_sent+0x3c>
   2860c:	6863      	ldr	r3, [r4, #4]
   2860e:	b17b      	cbz	r3, 28630 <bt_att_sent+0x3c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   28610:	1d20      	adds	r0, r4, #4
   28612:	f7ff fd93 	bl	2813c <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   28616:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   28618:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2861a:	4638      	mov	r0, r7
   2861c:	f7ff fe89 	bl	28332 <chan_req_send>
   28620:	2800      	cmp	r0, #0
   28622:	da12      	bge.n	2864a <bt_att_sent+0x56>
	return list->head;
   28624:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   28626:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   28628:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2862a:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2862c:	b903      	cbnz	r3, 28630 <bt_att_sent+0x3c>
	list->tail = node;
   2862e:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   28630:	f105 0138 	add.w	r1, r5, #56	; 0x38
   28634:	4638      	mov	r0, r7
   28636:	f7ff fe94 	bl	28362 <process_queue>
	if (!err) {
   2863a:	b130      	cbz	r0, 2864a <bt_att_sent+0x56>
	(void)process_queue(chan, &att->tx_queue);
   2863c:	f104 010c 	add.w	r1, r4, #12
   28640:	4638      	mov	r0, r7
}
   28642:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   28646:	f7ff be8c 	b.w	28362 <process_queue>
}
   2864a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002864c <att_req_send_process>:
{
   2864c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   28650:	6a84      	ldr	r4, [r0, #40]	; 0x28
   28652:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   28654:	2c00      	cmp	r4, #0
   28656:	d03a      	beq.n	286ce <att_req_send_process+0x82>
	return node->next;
   28658:	f854 6988 	ldr.w	r6, [r4], #-136
   2865c:	b106      	cbz	r6, 28660 <att_req_send_process+0x14>
   2865e:	3e88      	subs	r6, #136	; 0x88
{
   28660:	2300      	movs	r3, #0
   28662:	461d      	mov	r5, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   28664:	f108 0704 	add.w	r7, r8, #4
   28668:	e013      	b.n	28692 <att_req_send_process+0x46>
		if (!req && prev &&
   2866a:	b1bb      	cbz	r3, 2869c <att_req_send_process+0x50>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   2866c:	2103      	movs	r1, #3
   2866e:	f104 0034 	add.w	r0, r4, #52	; 0x34
   28672:	f7ff fd87 	bl	28184 <atomic_test_bit>
   28676:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   28678:	f103 0034 	add.w	r0, r3, #52	; 0x34
   2867c:	f7ff fd82 	bl	28184 <atomic_test_bit>
		if (!req && prev &&
   28680:	4282      	cmp	r2, r0
   28682:	d10b      	bne.n	2869c <att_req_send_process+0x50>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   28684:	b31e      	cbz	r6, 286ce <att_req_send_process+0x82>
   28686:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
   2868a:	b102      	cbz	r2, 2868e <att_req_send_process+0x42>
   2868c:	3a88      	subs	r2, #136	; 0x88
{
   2868e:	4634      	mov	r4, r6
   28690:	4616      	mov	r6, r2
		if (chan->req) {
   28692:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   28694:	2a00      	cmp	r2, #0
   28696:	d1f5      	bne.n	28684 <att_req_send_process+0x38>
		if (!req && prev &&
   28698:	2d00      	cmp	r5, #0
   2869a:	d0e6      	beq.n	2866a <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   2869c:	4638      	mov	r0, r7
   2869e:	f7ff fd4d 	bl	2813c <sys_slist_get>
	if (node) {
   286a2:	4605      	mov	r5, r0
   286a4:	b908      	cbnz	r0, 286aa <att_req_send_process+0x5e>
   286a6:	4623      	mov	r3, r4
   286a8:	e7ec      	b.n	28684 <att_req_send_process+0x38>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   286aa:	4601      	mov	r1, r0
   286ac:	4620      	mov	r0, r4
   286ae:	f7f1 fbc7 	bl	19e40 <bt_att_chan_req_send>
   286b2:	2800      	cmp	r0, #0
   286b4:	da0b      	bge.n	286ce <att_req_send_process+0x82>
	return list->head;
   286b6:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   286ba:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   286bc:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   286c0:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   286c4:	2b00      	cmp	r3, #0
   286c6:	d1ee      	bne.n	286a6 <att_req_send_process+0x5a>
	list->tail = node;
   286c8:	f8c8 5008 	str.w	r5, [r8, #8]
}
   286cc:	e7eb      	b.n	286a6 <att_req_send_process+0x5a>
}
   286ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000286d2 <bt_att_status>:
{
   286d2:	b538      	push	{r3, r4, r5, lr}
   286d4:	4605      	mov	r5, r0
   286d6:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   286d8:	2100      	movs	r1, #0
   286da:	f7ff fd53 	bl	28184 <atomic_test_bit>
   286de:	b1b8      	cbz	r0, 28710 <bt_att_status+0x3e>
	if (!chan->att) {
   286e0:	f855 0c04 	ldr.w	r0, [r5, #-4]
   286e4:	b1a0      	cbz	r0, 28710 <bt_att_status+0x3e>
	if (chan->req) {
   286e6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   286e8:	b993      	cbnz	r3, 28710 <bt_att_status+0x3e>
	node = sys_slist_get(&chan->att->reqs);
   286ea:	3004      	adds	r0, #4
   286ec:	f7ff fd26 	bl	2813c <sys_slist_get>
	if (!node) {
   286f0:	4604      	mov	r4, r0
   286f2:	b168      	cbz	r0, 28710 <bt_att_status+0x3e>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   286f4:	4601      	mov	r1, r0
   286f6:	1f28      	subs	r0, r5, #4
   286f8:	f7f1 fba2 	bl	19e40 <bt_att_chan_req_send>
   286fc:	2800      	cmp	r0, #0
   286fe:	da07      	bge.n	28710 <bt_att_status+0x3e>
	sys_slist_prepend(&chan->att->reqs, node);
   28700:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   28704:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   28706:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   28708:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2870a:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2870c:	b902      	cbnz	r2, 28710 <bt_att_status+0x3e>
	list->tail = node;
   2870e:	609c      	str	r4, [r3, #8]
}
   28710:	bd38      	pop	{r3, r4, r5, pc}

00028712 <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   28712:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   28714:	6883      	ldr	r3, [r0, #8]
   28716:	699b      	ldr	r3, [r3, #24]
   28718:	b10b      	cbz	r3, 2871e <att_sent+0xc>
		chan->ops->sent(chan);
   2871a:	3004      	adds	r0, #4
   2871c:	4718      	bx	r3
}
   2871e:	4770      	bx	lr

00028720 <att_tx_complete>:
{
   28720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28724:	4606      	mov	r6, r0
   28726:	460d      	mov	r5, r1
	if (!err) {
   28728:	4614      	mov	r4, r2
   2872a:	b122      	cbz	r2, 28736 <att_tx_complete+0x16>
}
   2872c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   28730:	4608      	mov	r0, r1
   28732:	f7f1 ba19 	b.w	19b68 <tx_meta_data_free>
		att_sent(conn, user_data);
   28736:	f7ff ffec 	bl	28712 <att_sent>
	bt_gatt_complete_func_t func = data->func;
   2873a:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   2873c:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   28740:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   28744:	4628      	mov	r0, r5
   28746:	f7f1 fa0f 	bl	19b68 <tx_meta_data_free>
	if (!err && func) {
   2874a:	b92f      	cbnz	r7, 28758 <att_tx_complete+0x38>
}
   2874c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   28750:	4649      	mov	r1, r9
   28752:	4630      	mov	r0, r6
   28754:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   28756:	3401      	adds	r4, #1
   28758:	b2a3      	uxth	r3, r4
   2875a:	4543      	cmp	r3, r8
   2875c:	d3f8      	bcc.n	28750 <att_tx_complete+0x30>
   2875e:	e7f5      	b.n	2874c <att_tx_complete+0x2c>

00028760 <att_req_sent>:
{
   28760:	b510      	push	{r4, lr}
   28762:	460c      	mov	r4, r1
	if (!err) {
   28764:	b90a      	cbnz	r2, 2876a <att_req_sent+0xa>
		att_sent(conn, user_data);
   28766:	f7ff ffd4 	bl	28712 <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   2876a:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   2876c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   2876e:	b12b      	cbz	r3, 2877c <att_req_sent+0x1c>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   28770:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   28774:	2300      	movs	r3, #0
   28776:	3058      	adds	r0, #88	; 0x58
   28778:	f7f9 f89a 	bl	218b0 <k_work_reschedule>
	tx_meta_data_free(user_data);
   2877c:	4620      	mov	r0, r4
}
   2877e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   28782:	f7f1 b9f1 	b.w	19b68 <tx_meta_data_free>

00028786 <att_cfm_sent>:
{
   28786:	b510      	push	{r4, lr}
   28788:	460c      	mov	r4, r1
	if (!err) {
   2878a:	b90a      	cbnz	r2, 28790 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   2878c:	f7ff ffc1 	bl	28712 <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   28790:	6820      	ldr	r0, [r4, #0]
   28792:	2101      	movs	r1, #1
   28794:	3034      	adds	r0, #52	; 0x34
   28796:	f7ff feaf 	bl	284f8 <atomic_clear_bit>
	tx_meta_data_free(data);
   2879a:	4620      	mov	r0, r4
}
   2879c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   287a0:	f7f1 b9e2 	b.w	19b68 <tx_meta_data_free>

000287a4 <att_rsp_sent>:
{
   287a4:	b510      	push	{r4, lr}
   287a6:	460c      	mov	r4, r1
	if (!err) {
   287a8:	b90a      	cbnz	r2, 287ae <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   287aa:	f7ff ffb2 	bl	28712 <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   287ae:	6820      	ldr	r0, [r4, #0]
   287b0:	2100      	movs	r1, #0
   287b2:	3034      	adds	r0, #52	; 0x34
   287b4:	f7ff fea0 	bl	284f8 <atomic_clear_bit>
	tx_meta_data_free(data);
   287b8:	4620      	mov	r0, r4
}
   287ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   287be:	f7f1 b9d3 	b.w	19b68 <tx_meta_data_free>

000287c2 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   287c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   287c6:	4688      	mov	r8, r1
   287c8:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   287ca:	2101      	movs	r1, #1
   287cc:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   287ce:	4605      	mov	r5, r0
   287d0:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   287d2:	f7f1 fcff 	bl	1a1d4 <bt_att_chan_create_pdu>
	if (!buf) {
   287d6:	4604      	mov	r4, r0
   287d8:	b170      	cbz	r0, 287f8 <send_err_rsp.part.0+0x36>
   287da:	2104      	movs	r1, #4
   287dc:	300c      	adds	r0, #12
   287de:	f7f3 fe47 	bl	1c470 <net_buf_simple_add>
	rsp->request = req;
   287e2:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   287e6:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   287ea:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   287ec:	4621      	mov	r1, r4
   287ee:	4628      	mov	r0, r5
}
   287f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   287f4:	f7ff bdce 	b.w	28394 <bt_att_chan_send_rsp>
}
   287f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000287fc <att_write_req>:
{
   287fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   287fe:	460c      	mov	r4, r1
   28800:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   28802:	f101 000c 	add.w	r0, r1, #12
   28806:	f000 fb06 	bl	28e16 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2880a:	8a22      	ldrh	r2, [r4, #16]
   2880c:	9201      	str	r2, [sp, #4]
   2880e:	68e2      	ldr	r2, [r4, #12]
   28810:	9200      	str	r2, [sp, #0]
   28812:	4603      	mov	r3, r0
   28814:	2213      	movs	r2, #19
   28816:	2112      	movs	r1, #18
   28818:	4628      	mov	r0, r5
   2881a:	f7f1 fdff 	bl	1a41c <att_write_rsp.constprop.0>
}
   2881e:	b003      	add	sp, #12
   28820:	bd30      	pop	{r4, r5, pc}

00028822 <att_write_cmd>:
{
   28822:	b537      	push	{r0, r1, r2, r4, r5, lr}
   28824:	460c      	mov	r4, r1
   28826:	4605      	mov	r5, r0
   28828:	f101 000c 	add.w	r0, r1, #12
   2882c:	f000 faf3 	bl	28e16 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   28830:	8a22      	ldrh	r2, [r4, #16]
   28832:	9201      	str	r2, [sp, #4]
   28834:	68e2      	ldr	r2, [r4, #12]
   28836:	9200      	str	r2, [sp, #0]
   28838:	2200      	movs	r2, #0
   2883a:	4603      	mov	r3, r0
   2883c:	4611      	mov	r1, r2
   2883e:	4628      	mov	r0, r5
   28840:	f7f1 fdec 	bl	1a41c <att_write_rsp.constprop.0>
}
   28844:	b003      	add	sp, #12
   28846:	bd30      	pop	{r4, r5, pc}

00028848 <att_read_blob_req>:
{
   28848:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   2884a:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2884c:	8813      	ldrh	r3, [r2, #0]
   2884e:	8852      	ldrh	r2, [r2, #2]
   28850:	9200      	str	r2, [sp, #0]
   28852:	210c      	movs	r1, #12
   28854:	220d      	movs	r2, #13
   28856:	f7f1 ffa7 	bl	1a7a8 <att_read_rsp>
}
   2885a:	b003      	add	sp, #12
   2885c:	f85d fb04 	ldr.w	pc, [sp], #4

00028860 <att_read_req>:
{
   28860:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   28862:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   28864:	2200      	movs	r2, #0
   28866:	881b      	ldrh	r3, [r3, #0]
   28868:	9200      	str	r2, [sp, #0]
   2886a:	210a      	movs	r1, #10
   2886c:	220b      	movs	r2, #11
   2886e:	f7f1 ff9b 	bl	1a7a8 <att_read_rsp>
}
   28872:	b003      	add	sp, #12
   28874:	f85d fb04 	ldr.w	pc, [sp], #4

00028878 <att_mtu_req>:
{
   28878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2887a:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   2887c:	f850 2b34 	ldr.w	r2, [r0], #52
{
   28880:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   28882:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   28884:	6816      	ldr	r6, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   28886:	f7ff fc7d 	bl	28184 <atomic_test_bit>
   2888a:	4604      	mov	r4, r0
   2888c:	b9d8      	cbnz	r0, 288c6 <att_mtu_req+0x4e>
	mtu_client = sys_le16_to_cpu(req->mtu);
   2888e:	68db      	ldr	r3, [r3, #12]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   28890:	881b      	ldrh	r3, [r3, #0]
   28892:	2b16      	cmp	r3, #22
   28894:	d919      	bls.n	288ca <att_mtu_req+0x52>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   28896:	4630      	mov	r0, r6
   28898:	2202      	movs	r2, #2
   2889a:	f7f1 fe23 	bl	1a4e4 <bt_att_create_pdu>
	if (!pdu) {
   2889e:	4606      	mov	r6, r0
   288a0:	b1a8      	cbz	r0, 288ce <att_mtu_req+0x56>
	return net_buf_simple_add(&buf->b, len);
   288a2:	2102      	movs	r1, #2
   288a4:	300c      	adds	r0, #12
   288a6:	f7f3 fde3 	bl	1c470 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   288aa:	2717      	movs	r7, #23
   288ac:	7007      	strb	r7, [r0, #0]
   288ae:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   288b0:	4631      	mov	r1, r6
   288b2:	4628      	mov	r0, r5
   288b4:	f7ff fd6e 	bl	28394 <bt_att_chan_send_rsp>
	att_chan_mtu_updated(chan);
   288b8:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   288ba:	836f      	strh	r7, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   288bc:	856f      	strh	r7, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   288be:	f7ff fcf2 	bl	282a6 <att_chan_mtu_updated>
	return 0;
   288c2:	4620      	mov	r0, r4
}
   288c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   288c6:	2006      	movs	r0, #6
   288c8:	e7fc      	b.n	288c4 <att_mtu_req+0x4c>
		return BT_ATT_ERR_INVALID_PDU;
   288ca:	2004      	movs	r0, #4
   288cc:	e7fa      	b.n	288c4 <att_mtu_req+0x4c>
		return BT_ATT_ERR_UNLIKELY;
   288ce:	200e      	movs	r0, #14
   288d0:	e7f8      	b.n	288c4 <att_mtu_req+0x4c>

000288d2 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   288d2:	8a0a      	ldrh	r2, [r1, #16]
   288d4:	68c9      	ldr	r1, [r1, #12]
   288d6:	2300      	movs	r3, #0
   288d8:	f7f2 b912 	b.w	1ab00 <att_handle_rsp>

000288dc <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   288dc:	2001      	movs	r0, #1
   288de:	4770      	bx	lr

000288e0 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   288e0:	b510      	push	{r4, lr}
	struct bt_att *att = att_get(conn);
   288e2:	f7f1 faef 	bl	19ec4 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   288e6:	b150      	cbz	r0, 288fe <bt_att_clear_out_of_sync_sent+0x1e>
	return list->head;
   288e8:	6a84      	ldr	r4, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   288ea:	b144      	cbz	r4, 288fe <bt_att_clear_out_of_sync_sent+0x1e>
   288ec:	3c88      	subs	r4, #136	; 0x88
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
   288ee:	f104 0034 	add.w	r0, r4, #52	; 0x34
   288f2:	2105      	movs	r1, #5
   288f4:	f7ff fe00 	bl	284f8 <atomic_clear_bit>
	return node->next;
   288f8:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
   288fc:	e7f5      	b.n	288ea <bt_att_clear_out_of_sync_sent+0xa>
	}
}
   288fe:	bd10      	pop	{r4, pc}

00028900 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   28900:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   28902:	2104      	movs	r1, #4
   28904:	f7ff fc0f 	bl	28126 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   28908:	b128      	cbz	r0, 28916 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   2890a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   2890e:	2105      	movs	r1, #5
   28910:	3030      	adds	r0, #48	; 0x30
   28912:	f7ff bc37 	b.w	28184 <atomic_test_bit>
}
   28916:	bd08      	pop	{r3, pc}

00028918 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   28918:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   2891a:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   2891e:	2201      	movs	r2, #1
   28920:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   28922:	7403      	strb	r3, [r0, #16]
}
   28924:	4770      	bx	lr

00028926 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   28926:	6010      	str	r0, [r2, #0]
}
   28928:	2000      	movs	r0, #0
   2892a:	4770      	bx	lr

0002892c <gatt_ccc_changed>:
{
   2892c:	460b      	mov	r3, r1
   2892e:	8909      	ldrh	r1, [r1, #8]
   28930:	8a5a      	ldrh	r2, [r3, #18]
   28932:	4291      	cmp	r1, r2
   28934:	bf38      	it	cc
   28936:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   28938:	8a9a      	ldrh	r2, [r3, #20]
   2893a:	428a      	cmp	r2, r1
   2893c:	d003      	beq.n	28946 <gatt_ccc_changed+0x1a>
		ccc->value = value;
   2893e:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   28940:	699b      	ldr	r3, [r3, #24]
   28942:	b103      	cbz	r3, 28946 <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   28944:	4718      	bx	r3
}
   28946:	4770      	bx	lr

00028948 <gatt_indicate_rsp>:
{
   28948:	b510      	push	{r4, lr}
   2894a:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2894c:	68a3      	ldr	r3, [r4, #8]
{
   2894e:	460a      	mov	r2, r1
	if (params->func) {
   28950:	b10b      	cbz	r3, 28956 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   28952:	4621      	mov	r1, r4
   28954:	4798      	blx	r3
	params->_ref--;
   28956:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   28958:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   2895a:	3b01      	subs	r3, #1
   2895c:	b2db      	uxtb	r3, r3
   2895e:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   28960:	b122      	cbz	r2, 2896c <gatt_indicate_rsp+0x24>
   28962:	b91b      	cbnz	r3, 2896c <gatt_indicate_rsp+0x24>
		params->destroy(params);
   28964:	4620      	mov	r0, r4
}
   28966:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   2896a:	4710      	bx	r2
}
   2896c:	bd10      	pop	{r4, pc}

0002896e <match_uuid>:
	data->attr = attr;
   2896e:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   28970:	8091      	strh	r1, [r2, #4]
}
   28972:	2000      	movs	r0, #0
   28974:	4770      	bx	lr

00028976 <gen_hash_m>:
{
   28976:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   28978:	6807      	ldr	r7, [r0, #0]
   2897a:	783d      	ldrb	r5, [r7, #0]
{
   2897c:	b089      	sub	sp, #36	; 0x24
   2897e:	4606      	mov	r6, r0
   28980:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   28982:	b9dd      	cbnz	r5, 289bc <gen_hash_m+0x46>
	switch (u16->val) {
   28984:	887b      	ldrh	r3, [r7, #2]
   28986:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2898a:	d004      	beq.n	28996 <gen_hash_m+0x20>
   2898c:	d810      	bhi.n	289b0 <gen_hash_m+0x3a>
   2898e:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   28992:	2b03      	cmp	r3, #3
   28994:	d812      	bhi.n	289bc <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   28996:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2899a:	2202      	movs	r2, #2
   2899c:	f10d 010a 	add.w	r1, sp, #10
   289a0:	4620      	mov	r0, r4
   289a2:	f7fe ff4d 	bl	27840 <tc_cmac_update>
   289a6:	b968      	cbnz	r0, 289c4 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   289a8:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   289ac:	65a2      	str	r2, [r4, #88]	; 0x58
   289ae:	e006      	b.n	289be <gen_hash_m+0x48>
	switch (u16->val) {
   289b0:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   289b4:	33ff      	adds	r3, #255	; 0xff
   289b6:	b29b      	uxth	r3, r3
   289b8:	2b04      	cmp	r3, #4
   289ba:	d91e      	bls.n	289fa <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   289bc:	2501      	movs	r5, #1
}
   289be:	4628      	mov	r0, r5
   289c0:	b009      	add	sp, #36	; 0x24
   289c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   289c4:	887b      	ldrh	r3, [r7, #2]
   289c6:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   289ca:	2202      	movs	r2, #2
   289cc:	f10d 010a 	add.w	r1, sp, #10
   289d0:	4620      	mov	r0, r4
   289d2:	f7fe ff35 	bl	27840 <tc_cmac_update>
   289d6:	2800      	cmp	r0, #0
   289d8:	d0e6      	beq.n	289a8 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   289da:	2000      	movs	r0, #0
   289dc:	9000      	str	r0, [sp, #0]
   289de:	aa03      	add	r2, sp, #12
   289e0:	6877      	ldr	r7, [r6, #4]
   289e2:	2313      	movs	r3, #19
   289e4:	4631      	mov	r1, r6
   289e6:	47b8      	blx	r7
		if (len < 0) {
   289e8:	1e02      	subs	r2, r0, #0
   289ea:	dbdf      	blt.n	289ac <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   289ec:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   289ee:	4620      	mov	r0, r4
   289f0:	f7fe ff26 	bl	27840 <tc_cmac_update>
   289f4:	2800      	cmp	r0, #0
   289f6:	d1e1      	bne.n	289bc <gen_hash_m+0x46>
   289f8:	e7d6      	b.n	289a8 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   289fa:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   289fe:	2202      	movs	r2, #2
   28a00:	f10d 010a 	add.w	r1, sp, #10
   28a04:	4620      	mov	r0, r4
   28a06:	f7fe ff1b 	bl	27840 <tc_cmac_update>
   28a0a:	2800      	cmp	r0, #0
   28a0c:	d0cc      	beq.n	289a8 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   28a0e:	887b      	ldrh	r3, [r7, #2]
   28a10:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   28a14:	2202      	movs	r2, #2
   28a16:	f10d 010a 	add.w	r1, sp, #10
   28a1a:	e7e8      	b.n	289ee <gen_hash_m+0x78>

00028a1c <bt_addr_le_eq>:
{
   28a1c:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   28a1e:	2207      	movs	r2, #7
   28a20:	f7fe ffdd 	bl	279de <memcmp>
}
   28a24:	fab0 f080 	clz	r0, r0
   28a28:	0940      	lsrs	r0, r0, #5
   28a2a:	bd08      	pop	{r3, pc}

00028a2c <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   28a2c:	f3bf 8f5b 	dmb	ish
   28a30:	6800      	ldr	r0, [r0, #0]
   28a32:	f3bf 8f5b 	dmb	ish
}
   28a36:	4770      	bx	lr

00028a38 <atomic_or>:
{
   28a38:	b510      	push	{r4, lr}
   28a3a:	4603      	mov	r3, r0
}
   28a3c:	f3bf 8f5b 	dmb	ish
   28a40:	e853 0f00 	ldrex	r0, [r3]
   28a44:	ea40 0201 	orr.w	r2, r0, r1
   28a48:	e843 2400 	strex	r4, r2, [r3]
   28a4c:	2c00      	cmp	r4, #0
   28a4e:	d1f7      	bne.n	28a40 <atomic_or+0x8>
   28a50:	f3bf 8f5b 	dmb	ish
   28a54:	bd10      	pop	{r4, pc}

00028a56 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   28a56:	2207      	movs	r2, #7
   28a58:	f7fe bfe8 	b.w	27a2c <memcpy>

00028a5c <z_log_msg_static_create.constprop.0>:
   28a5c:	2300      	movs	r3, #0
   28a5e:	f7eb bb11 	b.w	14084 <z_impl_z_log_msg_static_create>

00028a62 <sc_clear>:
{
   28a62:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   28a64:	f100 0690 	add.w	r6, r0, #144	; 0x90
{
   28a68:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   28a6a:	4631      	mov	r1, r6
   28a6c:	7a00      	ldrb	r0, [r0, #8]
   28a6e:	f7ff f94c 	bl	27d0a <bt_addr_le_is_bonded>
   28a72:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   28a74:	4631      	mov	r1, r6
   28a76:	f7f2 f9cb 	bl	1ae10 <find_sc_cfg>
	if (!cfg) {
   28a7a:	b128      	cbz	r0, 28a88 <sc_clear+0x26>
}
   28a7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   28a80:	220c      	movs	r2, #12
   28a82:	2100      	movs	r1, #0
   28a84:	f7fe bfdd 	b.w	27a42 <memset>
}
   28a88:	bd70      	pop	{r4, r5, r6, pc}

00028a8a <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   28a8a:	2a02      	cmp	r2, #2
{
   28a8c:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   28a8e:	d108      	bne.n	28aa2 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   28a90:	2300      	movs	r3, #0
   28a92:	f100 0190 	add.w	r1, r0, #144	; 0x90
   28a96:	461a      	mov	r2, r3
   28a98:	7a00      	ldrb	r0, [r0, #8]
   28a9a:	f7f2 fa7f 	bl	1af9c <sc_save>
}
   28a9e:	2002      	movs	r0, #2
   28aa0:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   28aa2:	f7ff ffde 	bl	28a62 <sc_clear>
   28aa6:	e7fa      	b.n	28a9e <sc_ccc_cfg_write+0x14>

00028aa8 <read_appearance>:
{
   28aa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   28aaa:	4615      	mov	r5, r2
   28aac:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   28ab0:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   28ab2:	f7ff f927 	bl	27d04 <bt_get_appearance>
	if (offset > value_len) {
   28ab6:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   28ab8:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   28abc:	d80e      	bhi.n	28adc <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   28abe:	f1c6 0402 	rsb	r4, r6, #2
   28ac2:	42bc      	cmp	r4, r7
   28ac4:	bfa8      	it	ge
   28ac6:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   28ac8:	f10d 0306 	add.w	r3, sp, #6
   28acc:	4622      	mov	r2, r4
   28ace:	1999      	adds	r1, r3, r6
   28ad0:	4628      	mov	r0, r5
   28ad2:	f7fe ffab 	bl	27a2c <memcpy>
}
   28ad6:	4620      	mov	r0, r4
   28ad8:	b003      	add	sp, #12
   28ada:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28adc:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   28ae0:	e7f9      	b.n	28ad6 <read_appearance+0x2e>

00028ae2 <read_name>:
{
   28ae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28ae6:	4698      	mov	r8, r3
   28ae8:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   28aec:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   28aee:	f7ef f88f 	bl	17c10 <bt_get_name>
   28af2:	4607      	mov	r7, r0
				 strlen(name));
   28af4:	f7fe ff63 	bl	279be <strlen>
	if (offset > value_len) {
   28af8:	b283      	uxth	r3, r0
   28afa:	42b3      	cmp	r3, r6
   28afc:	d30c      	bcc.n	28b18 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   28afe:	1b9c      	subs	r4, r3, r6
   28b00:	4544      	cmp	r4, r8
   28b02:	bfa8      	it	ge
   28b04:	4644      	movge	r4, r8
   28b06:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   28b08:	4622      	mov	r2, r4
   28b0a:	19b9      	adds	r1, r7, r6
   28b0c:	4628      	mov	r0, r5
   28b0e:	f7fe ff8d 	bl	27a2c <memcpy>
}
   28b12:	4620      	mov	r0, r4
   28b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28b18:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   28b1c:	e7f9      	b.n	28b12 <read_name+0x30>

00028b1e <cf_read>:
{
   28b1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   28b20:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   28b22:	2300      	movs	r3, #0
{
   28b24:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   28b28:	f88d 3004 	strb.w	r3, [sp, #4]
{
   28b2c:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   28b2e:	f7f2 f941 	bl	1adb4 <find_cf_cfg>
	if (cfg) {
   28b32:	b128      	cbz	r0, 28b40 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   28b34:	f100 0108 	add.w	r1, r0, #8
   28b38:	2201      	movs	r2, #1
   28b3a:	a801      	add	r0, sp, #4
   28b3c:	f7fe ff76 	bl	27a2c <memcpy>
	if (offset > value_len) {
   28b40:	2e01      	cmp	r6, #1
   28b42:	d80d      	bhi.n	28b60 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   28b44:	f1c6 0401 	rsb	r4, r6, #1
   28b48:	42bc      	cmp	r4, r7
   28b4a:	bfa8      	it	ge
   28b4c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   28b4e:	ab01      	add	r3, sp, #4
   28b50:	4622      	mov	r2, r4
   28b52:	1999      	adds	r1, r3, r6
   28b54:	4628      	mov	r0, r5
   28b56:	f7fe ff69 	bl	27a2c <memcpy>
}
   28b5a:	4620      	mov	r0, r4
   28b5c:	b003      	add	sp, #12
   28b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28b60:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   28b64:	e7f9      	b.n	28b5a <cf_read+0x3c>

00028b66 <bt_gatt_attr_read_service>:
{
   28b66:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   28b68:	68c9      	ldr	r1, [r1, #12]
{
   28b6a:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   28b6c:	780a      	ldrb	r2, [r1, #0]
{
   28b6e:	461c      	mov	r4, r3
   28b70:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   28b74:	b992      	cbnz	r2, 28b9c <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   28b76:	884a      	ldrh	r2, [r1, #2]
   28b78:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   28b7c:	2b02      	cmp	r3, #2
   28b7e:	d818      	bhi.n	28bb2 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   28b80:	f1c3 0202 	rsb	r2, r3, #2
   28b84:	4294      	cmp	r4, r2
   28b86:	bfa8      	it	ge
   28b88:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   28b8a:	4622      	mov	r2, r4
   28b8c:	f10d 0106 	add.w	r1, sp, #6
   28b90:	4419      	add	r1, r3
   28b92:	f7fe ff4b 	bl	27a2c <memcpy>
}
   28b96:	4620      	mov	r0, r4
   28b98:	b002      	add	sp, #8
   28b9a:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   28b9c:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   28b9e:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   28ba2:	d806      	bhi.n	28bb2 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   28ba4:	f1c3 0210 	rsb	r2, r3, #16
   28ba8:	4294      	cmp	r4, r2
   28baa:	bfa8      	it	ge
   28bac:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   28bae:	4622      	mov	r2, r4
   28bb0:	e7ee      	b.n	28b90 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28bb2:	f06f 0406 	mvn.w	r4, #6
   28bb6:	e7ee      	b.n	28b96 <bt_gatt_attr_read_service+0x30>

00028bb8 <bt_gatt_attr_read_ccc>:
{
   28bb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   28bba:	68c9      	ldr	r1, [r1, #12]
{
   28bbc:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   28bc0:	4615      	mov	r5, r2
   28bc2:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   28bc4:	f7f2 f946 	bl	1ae54 <find_ccc_cfg>
	if (cfg) {
   28bc8:	b100      	cbz	r0, 28bcc <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   28bca:	8900      	ldrh	r0, [r0, #8]
   28bcc:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   28bd0:	2e02      	cmp	r6, #2
   28bd2:	d80e      	bhi.n	28bf2 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   28bd4:	f1c6 0402 	rsb	r4, r6, #2
   28bd8:	42bc      	cmp	r4, r7
   28bda:	bfa8      	it	ge
   28bdc:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   28bde:	f10d 0306 	add.w	r3, sp, #6
   28be2:	4622      	mov	r2, r4
   28be4:	1999      	adds	r1, r3, r6
   28be6:	4628      	mov	r0, r5
   28be8:	f7fe ff20 	bl	27a2c <memcpy>
}
   28bec:	4620      	mov	r0, r4
   28bee:	b003      	add	sp, #12
   28bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28bf2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   28bf6:	e7f9      	b.n	28bec <bt_gatt_attr_read_ccc+0x34>

00028bf8 <set_change_aware_no_store.constprop.0.isra.0>:
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   28bf8:	2101      	movs	r1, #1
   28bfa:	300c      	adds	r0, #12
   28bfc:	f7ff bf1c 	b.w	28a38 <atomic_or>

00028c00 <sc_restore_rsp>:
{
   28c00:	b538      	push	{r3, r4, r5, lr}
   28c02:	4604      	mov	r4, r0
   28c04:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   28c06:	f7ff fe69 	bl	288dc <bt_att_fixed_chan_only>
   28c0a:	b140      	cbz	r0, 28c1e <sc_restore_rsp+0x1e>
		cfg = find_cf_cfg(conn);
   28c0c:	4620      	mov	r0, r4
   28c0e:	f7f2 f8d1 	bl	1adb4 <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   28c12:	b120      	cbz	r0, 28c1e <sc_restore_rsp+0x1e>
   28c14:	7a03      	ldrb	r3, [r0, #8]
   28c16:	07db      	lsls	r3, r3, #31
   28c18:	d501      	bpl.n	28c1e <sc_restore_rsp+0x1e>
	bool changed = set_change_aware_no_store(cfg, aware);
   28c1a:	f7ff ffed 	bl	28bf8 <set_change_aware_no_store.constprop.0.isra.0>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   28c1e:	b965      	cbnz	r5, 28c3a <sc_restore_rsp+0x3a>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   28c20:	7a20      	ldrb	r0, [r4, #8]
   28c22:	f104 0190 	add.w	r1, r4, #144	; 0x90
   28c26:	f7f2 f8f3 	bl	1ae10 <find_sc_cfg>
		if (sc_cfg) {
   28c2a:	b130      	cbz	r0, 28c3a <sc_restore_rsp+0x3a>
	memset(&cfg->data, 0, sizeof(cfg->data));
   28c2c:	4629      	mov	r1, r5
   28c2e:	2204      	movs	r2, #4
}
   28c30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   28c34:	3008      	adds	r0, #8
   28c36:	f7fe bf04 	b.w	27a42 <memset>
}
   28c3a:	bd38      	pop	{r3, r4, r5, pc}

00028c3c <bt_gatt_attr_value_handle>:
{
   28c3c:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   28c3e:	4604      	mov	r4, r0
   28c40:	b910      	cbnz	r0, 28c48 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   28c42:	2000      	movs	r0, #0
}
   28c44:	b002      	add	sp, #8
   28c46:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   28c48:	2300      	movs	r3, #0
   28c4a:	f88d 3004 	strb.w	r3, [sp, #4]
   28c4e:	6800      	ldr	r0, [r0, #0]
   28c50:	f642 0303 	movw	r3, #10243	; 0x2803
   28c54:	a901      	add	r1, sp, #4
   28c56:	f8ad 3006 	strh.w	r3, [sp, #6]
   28c5a:	f7fe ff1d 	bl	27a98 <bt_uuid_cmp>
   28c5e:	2800      	cmp	r0, #0
   28c60:	d1ef      	bne.n	28c42 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   28c62:	68e3      	ldr	r3, [r4, #12]
   28c64:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   28c66:	2800      	cmp	r0, #0
   28c68:	d1ec      	bne.n	28c44 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   28c6a:	4620      	mov	r0, r4
   28c6c:	f7f2 fb1c 	bl	1b2a8 <bt_gatt_attr_get_handle>
   28c70:	3001      	adds	r0, #1
   28c72:	b280      	uxth	r0, r0
	return handle;
   28c74:	e7e6      	b.n	28c44 <bt_gatt_attr_value_handle+0x8>

00028c76 <bt_gatt_attr_read_chrc>:
{
   28c76:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   28c78:	68cc      	ldr	r4, [r1, #12]
{
   28c7a:	b087      	sub	sp, #28
   28c7c:	4608      	mov	r0, r1
   28c7e:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   28c80:	79a3      	ldrb	r3, [r4, #6]
   28c82:	f88d 3004 	strb.w	r3, [sp, #4]
{
   28c86:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   28c8a:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   28c8c:	f7ff ffd6 	bl	28c3c <bt_gatt_attr_value_handle>
   28c90:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   28c94:	6821      	ldr	r1, [r4, #0]
   28c96:	780b      	ldrb	r3, [r1, #0]
   28c98:	b99b      	cbnz	r3, 28cc2 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   28c9a:	884b      	ldrh	r3, [r1, #2]
   28c9c:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   28ca0:	2405      	movs	r4, #5
	if (offset > value_len) {
   28ca2:	42b4      	cmp	r4, r6
   28ca4:	d315      	bcc.n	28cd2 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   28ca6:	1ba4      	subs	r4, r4, r6
   28ca8:	42bc      	cmp	r4, r7
   28caa:	bfa8      	it	ge
   28cac:	463c      	movge	r4, r7
   28cae:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   28cb0:	ab01      	add	r3, sp, #4
   28cb2:	4622      	mov	r2, r4
   28cb4:	1999      	adds	r1, r3, r6
   28cb6:	4628      	mov	r0, r5
   28cb8:	f7fe feb8 	bl	27a2c <memcpy>
}
   28cbc:	4620      	mov	r0, r4
   28cbe:	b007      	add	sp, #28
   28cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   28cc2:	2210      	movs	r2, #16
   28cc4:	3101      	adds	r1, #1
   28cc6:	f10d 0007 	add.w	r0, sp, #7
   28cca:	f7fe feaf 	bl	27a2c <memcpy>
		value_len += 16U;
   28cce:	2413      	movs	r4, #19
   28cd0:	e7e7      	b.n	28ca2 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28cd2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   28cd6:	e7f1      	b.n	28cbc <bt_gatt_attr_read_chrc+0x46>

00028cd8 <bt_gatt_foreach_attr>:
{
   28cd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   28cda:	e9cd 2301 	strd	r2, r3, [sp, #4]
   28cde:	2300      	movs	r3, #0
   28ce0:	9300      	str	r3, [sp, #0]
   28ce2:	461a      	mov	r2, r3
   28ce4:	f7f2 fb28 	bl	1b338 <bt_gatt_foreach_attr_type>
}
   28ce8:	b005      	add	sp, #20
   28cea:	f85d fb04 	ldr.w	pc, [sp], #4

00028cee <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   28cee:	f012 0f01 	tst.w	r2, #1
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   28cf2:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   28cf4:	d004      	beq.n	28d00 <bt_gatt_check_perm+0x12>
   28cf6:	f013 0f95 	tst.w	r3, #149	; 0x95
   28cfa:	d010      	beq.n	28d1e <bt_gatt_check_perm+0x30>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   28cfc:	6848      	ldr	r0, [r1, #4]
   28cfe:	b170      	cbz	r0, 28d1e <bt_gatt_check_perm+0x30>
	if ((mask & BT_GATT_PERM_WRITE) &&
   28d00:	f012 0f02 	tst.w	r2, #2
   28d04:	d004      	beq.n	28d10 <bt_gatt_check_perm+0x22>
   28d06:	f413 7f95 	tst.w	r3, #298	; 0x12a
   28d0a:	d00a      	beq.n	28d22 <bt_gatt_check_perm+0x34>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   28d0c:	6889      	ldr	r1, [r1, #8]
   28d0e:	b141      	cbz	r1, 28d22 <bt_gatt_check_perm+0x34>
	mask &= attr->perm;
   28d10:	401a      	ands	r2, r3
	return 0;
   28d12:	f012 0f3c 	tst.w	r2, #60	; 0x3c
   28d16:	bf14      	ite	ne
   28d18:	2005      	movne	r0, #5
   28d1a:	2000      	moveq	r0, #0
   28d1c:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   28d1e:	2002      	movs	r0, #2
   28d20:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   28d22:	2003      	movs	r0, #3
}
   28d24:	4770      	bx	lr

00028d26 <bt_gatt_change_aware>:
{
   28d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28d2a:	4605      	mov	r5, r0
   28d2c:	4688      	mov	r8, r1
	cfg = find_cf_cfg(conn);
   28d2e:	f7f2 f841 	bl	1adb4 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   28d32:	4604      	mov	r4, r0
   28d34:	b308      	cbz	r0, 28d7a <bt_gatt_change_aware+0x54>
   28d36:	7a03      	ldrb	r3, [r0, #8]
   28d38:	07da      	lsls	r2, r3, #31
   28d3a:	d51e      	bpl.n	28d7a <bt_gatt_change_aware+0x54>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   28d3c:	f100 060c 	add.w	r6, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   28d40:	4630      	mov	r0, r6
   28d42:	f7ff fe73 	bl	28a2c <atomic_get>
   28d46:	f010 0701 	ands.w	r7, r0, #1
   28d4a:	d116      	bne.n	28d7a <bt_gatt_change_aware+0x54>
	if (!req) {
   28d4c:	f1b8 0f00 	cmp.w	r8, #0
   28d50:	d014      	beq.n	28d7c <bt_gatt_change_aware+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   28d52:	f3bf 8f5b 	dmb	ish
   28d56:	e856 3f00 	ldrex	r3, [r6]
   28d5a:	f023 0202 	bic.w	r2, r3, #2
   28d5e:	e846 2100 	strex	r1, r2, [r6]
   28d62:	2900      	cmp	r1, #0
   28d64:	d1f7      	bne.n	28d56 <bt_gatt_change_aware+0x30>
   28d66:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   28d6a:	079b      	lsls	r3, r3, #30
		bt_att_clear_out_of_sync_sent(conn);
   28d6c:	4628      	mov	r0, r5
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   28d6e:	d508      	bpl.n	28d82 <bt_gatt_change_aware+0x5c>
		bt_att_clear_out_of_sync_sent(conn);
   28d70:	f7ff fdb6 	bl	288e0 <bt_att_clear_out_of_sync_sent>
	bool changed = set_change_aware_no_store(cfg, aware);
   28d74:	4620      	mov	r0, r4
   28d76:	f7ff ff3f 	bl	28bf8 <set_change_aware_no_store.constprop.0.isra.0>
		return true;
   28d7a:	2701      	movs	r7, #1
}
   28d7c:	4638      	mov	r0, r7
   28d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   28d82:	f7ff fdab 	bl	288dc <bt_att_fixed_chan_only>
   28d86:	2800      	cmp	r0, #0
   28d88:	d0f8      	beq.n	28d7c <bt_gatt_change_aware+0x56>
   28d8a:	4628      	mov	r0, r5
   28d8c:	f7ff fdb8 	bl	28900 <bt_att_out_of_sync_sent_on_fixed>
   28d90:	2800      	cmp	r0, #0
   28d92:	d0f3      	beq.n	28d7c <bt_gatt_change_aware+0x56>
   28d94:	f3bf 8f5b 	dmb	ish
   28d98:	e856 3f00 	ldrex	r3, [r6]
   28d9c:	f023 0302 	bic.w	r3, r3, #2
   28da0:	e846 3200 	strex	r2, r3, [r6]
   28da4:	2a00      	cmp	r2, #0
   28da6:	d1f7      	bne.n	28d98 <bt_gatt_change_aware+0x72>
   28da8:	f3bf 8f5b 	dmb	ish
		bt_att_clear_out_of_sync_sent(conn);
   28dac:	4628      	mov	r0, r5
   28dae:	e7df      	b.n	28d70 <bt_gatt_change_aware+0x4a>

00028db0 <bt_smp_recv>:
{
   28db0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   28db2:	2100      	movs	r1, #0
   28db4:	f04f 32ff 	mov.w	r2, #4294967295
   28db8:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   28dbc:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   28dbe:	4608      	mov	r0, r1
   28dc0:	f7ff f995 	bl	280ee <bt_l2cap_create_pdu_timeout>
   28dc4:	f100 060c 	add.w	r6, r0, #12
   28dc8:	4604      	mov	r4, r0
   28dca:	2101      	movs	r1, #1
   28dcc:	4630      	mov	r0, r6
   28dce:	f7f3 fb4f 	bl	1c470 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   28dd2:	2505      	movs	r5, #5
   28dd4:	7005      	strb	r5, [r0, #0]
   28dd6:	2101      	movs	r1, #1
   28dd8:	4630      	mov	r0, r6
   28dda:	f7f3 fb49 	bl	1c470 <net_buf_simple_add>
   28dde:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   28de0:	7005      	strb	r5, [r0, #0]
   28de2:	4622      	mov	r2, r4
   28de4:	9300      	str	r3, [sp, #0]
   28de6:	2106      	movs	r1, #6
   28de8:	4638      	mov	r0, r7
   28dea:	f7ff f983 	bl	280f4 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   28dee:	b110      	cbz	r0, 28df6 <bt_smp_recv+0x46>
		net_buf_unref(buf);
   28df0:	4620      	mov	r0, r4
   28df2:	f7f3 f9f9 	bl	1c1e8 <net_buf_unref>
}
   28df6:	2000      	movs	r0, #0
   28df8:	b003      	add	sp, #12
   28dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

00028dfc <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   28dfc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   28e00:	4770      	bx	lr

00028e02 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   28e02:	2000      	movs	r0, #0
   28e04:	4770      	bx	lr

00028e06 <fixed_data_unref>:
}
   28e06:	4770      	bx	lr

00028e08 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   28e08:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   28e0a:	6849      	ldr	r1, [r1, #4]
   28e0c:	6809      	ldr	r1, [r1, #0]
   28e0e:	f7f3 b809 	b.w	1be24 <net_buf_alloc_len>

00028e12 <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   28e12:	f7f7 bfd1 	b.w	20db8 <z_impl_k_queue_get>

00028e16 <net_buf_simple_pull_le16>:
{
   28e16:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   28e18:	6803      	ldr	r3, [r0, #0]
   28e1a:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   28e1c:	2102      	movs	r1, #2
   28e1e:	f7f3 faeb 	bl	1c3f8 <net_buf_simple_pull>
}
   28e22:	4620      	mov	r0, r4
   28e24:	bd10      	pop	{r4, pc}

00028e26 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   28e26:	6802      	ldr	r2, [r0, #0]
   28e28:	6880      	ldr	r0, [r0, #8]
}
   28e2a:	1a10      	subs	r0, r2, r0
   28e2c:	4770      	bx	lr

00028e2e <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   28e2e:	8883      	ldrh	r3, [r0, #4]
   28e30:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   28e32:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   28e34:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   28e36:	6803      	ldr	r3, [r0, #0]
   28e38:	1a5b      	subs	r3, r3, r1
}
   28e3a:	1ad0      	subs	r0, r2, r3
   28e3c:	4770      	bx	lr

00028e3e <net_buf_simple_add_mem>:
{
   28e3e:	b538      	push	{r3, r4, r5, lr}
   28e40:	460d      	mov	r5, r1
   28e42:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   28e44:	4611      	mov	r1, r2
   28e46:	f7f3 fb13 	bl	1c470 <net_buf_simple_add>
   28e4a:	4622      	mov	r2, r4
   28e4c:	4629      	mov	r1, r5
}
   28e4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   28e52:	f7fe bdeb 	b.w	27a2c <memcpy>

00028e56 <net_buf_simple_add_u8>:
{
   28e56:	b510      	push	{r4, lr}
   28e58:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   28e5a:	2101      	movs	r1, #1
   28e5c:	f7f3 fb08 	bl	1c470 <net_buf_simple_add>
	*u8 = val;
   28e60:	7004      	strb	r4, [r0, #0]
}
   28e62:	bd10      	pop	{r4, pc}

00028e64 <set_on_state>:
	__asm__ volatile(
   28e64:	f04f 0340 	mov.w	r3, #64	; 0x40
   28e68:	f3ef 8211 	mrs	r2, BASEPRI
   28e6c:	f383 8812 	msr	BASEPRI_MAX, r3
   28e70:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   28e74:	6803      	ldr	r3, [r0, #0]
   28e76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   28e7a:	f043 0302 	orr.w	r3, r3, #2
   28e7e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   28e80:	f382 8811 	msr	BASEPRI, r2
   28e84:	f3bf 8f6f 	isb	sy
}
   28e88:	4770      	bx	lr

00028e8a <async_start>:
{
   28e8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28e8c:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   28e8e:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   28e90:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   28e92:	f04f 0540 	mov.w	r5, #64	; 0x40
   28e96:	f3ef 8611 	mrs	r6, BASEPRI
   28e9a:	f385 8812 	msr	BASEPRI_MAX, r5
   28e9e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   28ea2:	250c      	movs	r5, #12
   28ea4:	4369      	muls	r1, r5
   28ea6:	440c      	add	r4, r1
   28ea8:	6ca5      	ldr	r5, [r4, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   28eaa:	f005 0c07 	and.w	ip, r5, #7
   28eae:	f1bc 0f01 	cmp.w	ip, #1
   28eb2:	d10b      	bne.n	28ecc <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   28eb4:	64a7      	str	r7, [r4, #72]	; 0x48
	__asm__ volatile(
   28eb6:	f386 8811 	msr	BASEPRI, r6
   28eba:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   28ebe:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   28ec2:	6843      	ldr	r3, [r0, #4]
   28ec4:	585b      	ldr	r3, [r3, r1]
   28ec6:	4798      	blx	r3
	return 0;
   28ec8:	2000      	movs	r0, #0
}
   28eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   28ecc:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   28ed0:	42af      	cmp	r7, r5
   28ed2:	f386 8811 	msr	BASEPRI, r6
   28ed6:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   28eda:	bf0c      	ite	eq
   28edc:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   28ee0:	f04f 30ff 	movne.w	r0, #4294967295
   28ee4:	e7f1      	b.n	28eca <async_start+0x40>

00028ee6 <api_start>:
{
   28ee6:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   28ee8:	2480      	movs	r4, #128	; 0x80
   28eea:	9400      	str	r4, [sp, #0]
   28eec:	f7ff ffcd 	bl	28e8a <async_start>
}
   28ef0:	b002      	add	sp, #8
   28ef2:	bd10      	pop	{r4, pc}

00028ef4 <onoff_started_callback>:
	return &data->mgr[type];
   28ef4:	6900      	ldr	r0, [r0, #16]
   28ef6:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   28ef8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   28efc:	2100      	movs	r1, #0
   28efe:	4710      	bx	r2

00028f00 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   28f00:	2000      	movs	r0, #0
   28f02:	f7f6 ba35 	b.w	1f370 <nrfx_clock_start>

00028f06 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   28f06:	2000      	movs	r0, #0
   28f08:	f7f6 ba5a 	b.w	1f3c0 <nrfx_clock_stop>

00028f0c <blocking_start_callback>:
{
   28f0c:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   28f0e:	f7f7 bfbd 	b.w	20e8c <z_impl_k_sem_give>

00028f12 <api_stop>:
	return stop(dev, subsys, CTX_API);
   28f12:	2280      	movs	r2, #128	; 0x80
   28f14:	f7f3 bb04 	b.w	1c520 <stop>

00028f18 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   28f18:	2000      	movs	r0, #0
   28f1a:	4770      	bx	lr

00028f1c <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   28f1c:	b538      	push	{r3, r4, r5, lr}
   28f1e:	460c      	mov	r4, r1
   28f20:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   28f22:	f7ee fe69 	bl	17bf8 <bt_is_ready>
   28f26:	b128      	cbz	r0, 28f34 <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   28f28:	4629      	mov	r1, r5
   28f2a:	4620      	mov	r0, r4
}
   28f2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   28f30:	f7ed beb8 	b.w	16ca4 <bt_hci_le_rand>
}
   28f34:	f06f 000a 	mvn.w	r0, #10
   28f38:	bd38      	pop	{r3, r4, r5, pc}

00028f3a <entropy_cc3xx_rng_init>:
	int ret;

	/* When the given context is NULL, a global internal
	 * ctr_drbg context is being used.
	 */
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   28f3a:	2200      	movs	r2, #0
{
   28f3c:	b508      	push	{r3, lr}
	ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   28f3e:	4611      	mov	r1, r2
   28f40:	4610      	mov	r0, r2
   28f42:	f7fb fa91 	bl	24468 <nrf_cc3xx_platform_ctr_drbg_init>
	if (ret != 0) {
		return -EINVAL;
   28f46:	2800      	cmp	r0, #0
	}

	return 0;
}
   28f48:	bf18      	it	ne
   28f4a:	f06f 0015 	mvnne.w	r0, #21
   28f4e:	bd08      	pop	{r3, pc}

00028f50 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28f50:	6843      	ldr	r3, [r0, #4]
   28f52:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   28f54:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   28f58:	600b      	str	r3, [r1, #0]
}
   28f5a:	2000      	movs	r0, #0
   28f5c:	4770      	bx	lr

00028f5e <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28f5e:	6843      	ldr	r3, [r0, #4]
   28f60:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   28f62:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   28f66:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   28f6a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   28f6e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   28f72:	2000      	movs	r0, #0
   28f74:	4770      	bx	lr

00028f76 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28f76:	6843      	ldr	r3, [r0, #4]
   28f78:	685b      	ldr	r3, [r3, #4]
}
   28f7a:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   28f7c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   28f80:	4770      	bx	lr

00028f82 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28f82:	6843      	ldr	r3, [r0, #4]
   28f84:	685b      	ldr	r3, [r3, #4]
}
   28f86:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   28f88:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   28f8c:	4770      	bx	lr

00028f8e <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   28f8e:	6843      	ldr	r3, [r0, #4]
   28f90:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   28f92:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   28f96:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   28f9a:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   28f9c:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   28fa0:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   28fa4:	2000      	movs	r0, #0
   28fa6:	4770      	bx	lr

00028fa8 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   28fa8:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   28faa:	6843      	ldr	r3, [r0, #4]
   28fac:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   28fae:	7a05      	ldrb	r5, [r0, #8]
   28fb0:	6844      	ldr	r4, [r0, #4]
   28fb2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   28fb6:	42a3      	cmp	r3, r4
   28fb8:	d302      	bcc.n	28fc0 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   28fba:	f06f 0001 	mvn.w	r0, #1
}
   28fbe:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   28fc0:	795c      	ldrb	r4, [r3, #5]
   28fc2:	428c      	cmp	r4, r1
   28fc4:	d001      	beq.n	28fca <pinctrl_lookup_state+0x22>
		(*state)++;
   28fc6:	3308      	adds	r3, #8
   28fc8:	e7f0      	b.n	28fac <pinctrl_lookup_state+0x4>
			return 0;
   28fca:	2000      	movs	r0, #0
   28fcc:	e7f7      	b.n	28fbe <pinctrl_lookup_state+0x16>

00028fce <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   28fce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28fd2:	4615      	mov	r5, r2
   28fd4:	b085      	sub	sp, #20
   28fd6:	4682      	mov	sl, r0
   28fd8:	eb00 0881 	add.w	r8, r0, r1, lsl #2
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   28fdc:	f04f 0901 	mov.w	r9, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   28fe0:	45d0      	cmp	r8, sl
   28fe2:	d103      	bne.n	28fec <pinctrl_configure_pins+0x1e>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   28fe4:	2000      	movs	r0, #0
}
   28fe6:	b005      	add	sp, #20
   28fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   28fec:	f8da 3000 	ldr.w	r3, [sl]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   28ff0:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   28ff4:	f3c3 2743 	ubfx	r7, r3, #9, #4
			pin = 0xFFFFFFFFU;
   28ff8:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   28ffa:	ea4f 4313 	mov.w	r3, r3, lsr #16
			pin = 0xFFFFFFFFU;
   28ffe:	bf08      	it	eq
   29000:	f04f 34ff 	moveq.w	r4, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   29004:	2b22      	cmp	r3, #34	; 0x22
   29006:	f200 808e 	bhi.w	29126 <pinctrl_configure_pins+0x158>
   2900a:	e8df f003 	tbb	[pc, r3]
   2900e:	1f12      	.short	0x1f12
   29010:	36273a24 	.word	0x36273a24
   29014:	8c8c8c3a 	.word	0x8c8c8c3a
   29018:	8c623d8c 	.word	0x8c623d8c
   2901c:	8c8c8c8c 	.word	0x8c8c8c8c
   29020:	8c8c8c8c 	.word	0x8c8c8c8c
   29024:	74716e65 	.word	0x74716e65
   29028:	778c8c8c 	.word	0x778c8c8c
   2902c:	8683807d 	.word	0x8683807d
   29030:	89          	.byte	0x89
   29031:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
   29032:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   29036:	a803      	add	r0, sp, #12
   29038:	9403      	str	r4, [sp, #12]
   2903a:	f7f4 f823 	bl	1d084 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2903e:	9b03      	ldr	r3, [sp, #12]
   29040:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTSET = set_mask;
   29044:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
        nrf_gpio_pin_set(pin_number);
   29048:	2601      	movs	r6, #1
   2904a:	e002      	b.n	29052 <pinctrl_configure_pins+0x84>
			NRF_PSEL_UART(reg, RXD) = pin;
   2904c:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   29050:	2600      	movs	r6, #0
   29052:	46b3      	mov	fp, r6
   29054:	e01f      	b.n	29096 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_UART(reg, RTS) = pin;
   29056:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (write != NO_WRITE) {
   2905a:	e7ec      	b.n	29036 <pinctrl_configure_pins+0x68>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   2905c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   29060:	2600      	movs	r6, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   29062:	a803      	add	r0, sp, #12
   29064:	9403      	str	r4, [sp, #12]
   29066:	f7f4 f80d 	bl	1d084 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2906a:	9b03      	ldr	r3, [sp, #12]
   2906c:	fa09 f303 	lsl.w	r3, r9, r3
    p_reg->OUTCLR = clr_mask;
   29070:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
   29074:	f04f 0b01 	mov.w	fp, #1
   29078:	e00d      	b.n	29096 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   2907a:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
   2907e:	2601      	movs	r6, #1
   29080:	e7ef      	b.n	29062 <pinctrl_configure_pins+0x94>
			NRF_PSEL_SPIM(reg, MISO) = pin;
   29082:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
			if (write != NO_WRITE) {
   29086:	e7e3      	b.n	29050 <pinctrl_configure_pins+0x82>
			NRF_PSEL_TWIM(reg, SCL) = pin;
   29088:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   2908c:	2f00      	cmp	r7, #0
   2908e:	d1df      	bne.n	29050 <pinctrl_configure_pins+0x82>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   29090:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   29092:	46b3      	mov	fp, r6
				drive = NRF_DRIVE_S0D1;
   29094:	2706      	movs	r7, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   29096:	f85a 3b04 	ldr.w	r3, [sl], #4
   2909a:	9301      	str	r3, [sp, #4]
   2909c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   290a0:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   290a2:	a803      	add	r0, sp, #12
   290a4:	bf1c      	itt	ne
   290a6:	2601      	movne	r6, #1
   290a8:	f04f 0b00 	movne.w	fp, #0
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   290ac:	9403      	str	r4, [sp, #12]
   290ae:	f7f3 ffe9 	bl	1d084 <nrf_gpio_pin_port_decode>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   290b2:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   290b4:	023f      	lsls	r7, r7, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   290b6:	f3c3 13c1 	ubfx	r3, r3, #7, #2
   290ba:	ea47 0783 	orr.w	r7, r7, r3, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   290be:	9b03      	ldr	r3, [sp, #12]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   290c0:	ea47 070b 	orr.w	r7, r7, fp
    reg->PIN_CNF[pin_number] = cnf;
   290c4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   290c8:	ea47 0746 	orr.w	r7, r7, r6, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   290cc:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   290d0:	e786      	b.n	28fe0 <pinctrl_configure_pins+0x12>
			NRF_PSEL_TWIM(reg, SDA) = pin;
   290d2:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
   290d6:	e7d9      	b.n	2908c <pinctrl_configure_pins+0xbe>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
   290d8:	f8c5 4560 	str.w	r4, [r5, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
   290dc:	f8da 3000 	ldr.w	r3, [sl]
   290e0:	f3c3 3380 	ubfx	r3, r3, #14, #1
    if (value == 0)
   290e4:	2b00      	cmp	r3, #0
   290e6:	d0ca      	beq.n	2907e <pinctrl_configure_pins+0xb0>
   290e8:	e7a5      	b.n	29036 <pinctrl_configure_pins+0x68>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
   290ea:	f8c5 4564 	str.w	r4, [r5, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   290ee:	e7f5      	b.n	290dc <pinctrl_configure_pins+0x10e>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
   290f0:	f8c5 4568 	str.w	r4, [r5, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   290f4:	e7f2      	b.n	290dc <pinctrl_configure_pins+0x10e>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
   290f6:	f8c5 456c 	str.w	r4, [r5, #1388]	; 0x56c
   290fa:	e7ef      	b.n	290dc <pinctrl_configure_pins+0x10e>
			NRF_PSEL_QSPI(reg, SCK) = pin;
   290fc:	f8c5 4524 	str.w	r4, [r5, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   29100:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   29102:	f04f 0b00 	mov.w	fp, #0
   29106:	e7c6      	b.n	29096 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_QSPI(reg, CSN) = pin;
   29108:	f8c5 4528 	str.w	r4, [r5, #1320]	; 0x528
   2910c:	e793      	b.n	29036 <pinctrl_configure_pins+0x68>
			NRF_PSEL_QSPI(reg, IO0) = pin;
   2910e:	f8c5 4530 	str.w	r4, [r5, #1328]	; 0x530
			if (write != NO_WRITE) {
   29112:	e7f5      	b.n	29100 <pinctrl_configure_pins+0x132>
			NRF_PSEL_QSPI(reg, IO1) = pin;
   29114:	f8c5 4534 	str.w	r4, [r5, #1332]	; 0x534
   29118:	e7f2      	b.n	29100 <pinctrl_configure_pins+0x132>
			NRF_PSEL_QSPI(reg, IO2) = pin;
   2911a:	f8c5 4538 	str.w	r4, [r5, #1336]	; 0x538
			if (write != NO_WRITE) {
   2911e:	e7ef      	b.n	29100 <pinctrl_configure_pins+0x132>
			NRF_PSEL_QSPI(reg, IO3) = pin;
   29120:	f8c5 453c 	str.w	r4, [r5, #1340]	; 0x53c
			if (write != NO_WRITE) {
   29124:	e7ec      	b.n	29100 <pinctrl_configure_pins+0x132>
		switch (NRF_GET_FUN(pins[i])) {
   29126:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2912a:	e75c      	b.n	28fe6 <pinctrl_configure_pins+0x18>

0002912c <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
   2912c:	6902      	ldr	r2, [r0, #16]
{
   2912e:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   29130:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   29134:	e883 0003 	stmia.w	r3, {r0, r1}
}
   29138:	2000      	movs	r0, #0
   2913a:	4770      	bx	lr

0002913c <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2913c:	6843      	ldr	r3, [r0, #4]
   2913e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   29140:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   29144:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   29148:	4770      	bx	lr

0002914a <tx_start>:
{
   2914a:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   2914c:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   2914e:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   29150:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   29154:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   29158:	2200      	movs	r2, #0
   2915a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   2915e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   29162:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   29166:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2916a:	6862      	ldr	r2, [r4, #4]
   2916c:	06d2      	lsls	r2, r2, #27
   2916e:	d511      	bpl.n	29194 <tx_start+0x4a>
	if (data->async) {
   29170:	6902      	ldr	r2, [r0, #16]
   29172:	68d2      	ldr	r2, [r2, #12]
   29174:	b12a      	cbz	r2, 29182 <tx_start+0x38>
		data->async->low_power_mask |= mask;
   29176:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
   2917a:	f041 0101 	orr.w	r1, r1, #1
   2917e:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
	return config->uarte_regs;
   29182:	6842      	ldr	r2, [r0, #4]
   29184:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   29186:	2108      	movs	r1, #8
   29188:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   2918c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   29190:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   29194:	2201      	movs	r2, #1
   29196:	609a      	str	r2, [r3, #8]
}
   29198:	bd10      	pop	{r4, pc}

0002919a <user_callback>:
	if (data->async->user_callback) {
   2919a:	6903      	ldr	r3, [r0, #16]
   2919c:	68da      	ldr	r2, [r3, #12]
   2919e:	6813      	ldr	r3, [r2, #0]
   291a0:	b10b      	cbz	r3, 291a6 <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   291a2:	6852      	ldr	r2, [r2, #4]
   291a4:	4718      	bx	r3
}
   291a6:	4770      	bx	lr

000291a8 <notify_uart_rx_rdy>:
{
   291a8:	b570      	push	{r4, r5, r6, lr}
   291aa:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = dev->data;
   291ac:	6906      	ldr	r6, [r0, #16]
{
   291ae:	4604      	mov	r4, r0
   291b0:	460d      	mov	r5, r1
	struct uart_event evt = {
   291b2:	2214      	movs	r2, #20
   291b4:	2100      	movs	r1, #0
   291b6:	a801      	add	r0, sp, #4
   291b8:	f7fe fc43 	bl	27a42 <memset>
   291bc:	2302      	movs	r3, #2
   291be:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   291c2:	68f3      	ldr	r3, [r6, #12]
	struct uart_event evt = {
   291c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   291c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   291c8:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   291ca:	a901      	add	r1, sp, #4
   291cc:	4620      	mov	r0, r4
	struct uart_event evt = {
   291ce:	e9cd 3503 	strd	r3, r5, [sp, #12]
	user_callback(dev, &evt);
   291d2:	f7ff ffe2 	bl	2919a <user_callback>
}
   291d6:	b006      	add	sp, #24
   291d8:	bd70      	pop	{r4, r5, r6, pc}

000291da <rx_buf_release>:
{
   291da:	b570      	push	{r4, r5, r6, lr}
	if (*buf) {
   291dc:	680e      	ldr	r6, [r1, #0]
{
   291de:	b086      	sub	sp, #24
   291e0:	4605      	mov	r5, r0
   291e2:	460c      	mov	r4, r1
	if (*buf) {
   291e4:	b17e      	cbz	r6, 29206 <rx_buf_release+0x2c>
		struct uart_event evt = {
   291e6:	2214      	movs	r2, #20
   291e8:	2100      	movs	r1, #0
   291ea:	a801      	add	r0, sp, #4
   291ec:	f7fe fc29 	bl	27a42 <memset>
   291f0:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   291f2:	eb0d 0103 	add.w	r1, sp, r3
   291f6:	4628      	mov	r0, r5
		struct uart_event evt = {
   291f8:	f88d 3004 	strb.w	r3, [sp, #4]
   291fc:	9602      	str	r6, [sp, #8]
		user_callback(dev, &evt);
   291fe:	f7ff ffcc 	bl	2919a <user_callback>
		*buf = NULL;
   29202:	2300      	movs	r3, #0
   29204:	6023      	str	r3, [r4, #0]
}
   29206:	b006      	add	sp, #24
   29208:	bd70      	pop	{r4, r5, r6, pc}

0002920a <notify_rx_disable>:
{
   2920a:	b510      	push	{r4, lr}
   2920c:	b086      	sub	sp, #24
   2920e:	4604      	mov	r4, r0
	struct uart_event evt = {
   29210:	2214      	movs	r2, #20
   29212:	2100      	movs	r1, #0
   29214:	a801      	add	r0, sp, #4
   29216:	f7fe fc14 	bl	27a42 <memset>
   2921a:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   2921c:	a901      	add	r1, sp, #4
   2921e:	4620      	mov	r0, r4
	struct uart_event evt = {
   29220:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   29224:	f7ff ffb9 	bl	2919a <user_callback>
}
   29228:	b006      	add	sp, #24
   2922a:	bd10      	pop	{r4, pc}

0002922c <uarte_nrfx_rx_buf_rsp>:
{
   2922c:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   2922e:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   29230:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   29232:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   29234:	f04f 0040 	mov.w	r0, #64	; 0x40
   29238:	f3ef 8611 	mrs	r6, BASEPRI
   2923c:	f380 8812 	msr	BASEPRI_MAX, r0
   29240:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   29244:	68ec      	ldr	r4, [r5, #12]
   29246:	6da0      	ldr	r0, [r4, #88]	; 0x58
   29248:	b198      	cbz	r0, 29272 <uarte_nrfx_rx_buf_rsp+0x46>
	} else if (data->async->rx_next_buf == NULL) {
   2924a:	6e60      	ldr	r0, [r4, #100]	; 0x64
   2924c:	b9a0      	cbnz	r0, 29278 <uarte_nrfx_rx_buf_rsp+0x4c>
		data->async->rx_next_buf = buf;
   2924e:	6661      	str	r1, [r4, #100]	; 0x64
		data->async->rx_next_buf_len = len;
   29250:	68ec      	ldr	r4, [r5, #12]
   29252:	66a2      	str	r2, [r4, #104]	; 0x68
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   29254:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   29258:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   2925c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   29260:	f042 0220 	orr.w	r2, r2, #32
   29264:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   29268:	f386 8811 	msr	BASEPRI, r6
   2926c:	f3bf 8f6f 	isb	sy
}
   29270:	bd70      	pop	{r4, r5, r6, pc}
		err = -EACCES;
   29272:	f06f 000c 	mvn.w	r0, #12
   29276:	e7f7      	b.n	29268 <uarte_nrfx_rx_buf_rsp+0x3c>
		err = -EBUSY;
   29278:	f06f 000f 	mvn.w	r0, #15
   2927c:	e7f4      	b.n	29268 <uarte_nrfx_rx_buf_rsp+0x3c>

0002927e <uarte_nrfx_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   2927e:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
   29280:	68d8      	ldr	r0, [r3, #12]
   29282:	b120      	cbz	r0, 2928e <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
   29284:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
   29286:	68db      	ldr	r3, [r3, #12]
	return 0;
   29288:	2000      	movs	r0, #0
	data->async->user_data = user_data;
   2928a:	605a      	str	r2, [r3, #4]
	return 0;
   2928c:	4770      	bx	lr
		return -ENOTSUP;
   2928e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   29292:	4770      	bx	lr

00029294 <uarte_nrfx_poll_in>:
{
   29294:	b510      	push	{r4, lr}
	const struct uarte_nrfx_data *data = dev->data;
   29296:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   29298:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   2929a:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
   2929c:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   2929e:	b960      	cbnz	r0, 292ba <uarte_nrfx_poll_in+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   292a0:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   292a4:	b164      	cbz	r4, 292c0 <uarte_nrfx_poll_in+0x2c>
	*c = *data->rx_data;
   292a6:	6992      	ldr	r2, [r2, #24]
   292a8:	7812      	ldrb	r2, [r2, #0]
   292aa:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   292ac:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   292b0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   292b4:	2201      	movs	r2, #1
   292b6:	601a      	str	r2, [r3, #0]
}
   292b8:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   292ba:	f06f 0085 	mvn.w	r0, #133	; 0x85
   292be:	e7fb      	b.n	292b8 <uarte_nrfx_poll_in+0x24>
		return -1;
   292c0:	f04f 30ff 	mov.w	r0, #4294967295
   292c4:	e7f8      	b.n	292b8 <uarte_nrfx_poll_in+0x24>

000292c6 <uarte_nrfx_rx_disable>:
{
   292c6:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   292c8:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   292ca:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   292cc:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   292ce:	68eb      	ldr	r3, [r5, #12]
   292d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   292d2:	b1d2      	cbz	r2, 2930a <uarte_nrfx_rx_disable+0x44>
	if (data->async->rx_next_buf != NULL) {
   292d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   292d6:	b153      	cbz	r3, 292ee <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   292d8:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   292dc:	f023 0320 	bic.w	r3, r3, #32
   292e0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   292e4:	2300      	movs	r3, #0
   292e6:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   292ea:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
   292ee:	68e8      	ldr	r0, [r5, #12]
   292f0:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   292f2:	f000 fbbb 	bl	29a6c <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   292f6:	68eb      	ldr	r3, [r5, #12]
   292f8:	2000      	movs	r0, #0
   292fa:	f883 00ca 	strb.w	r0, [r3, #202]	; 0xca
	data->async->discard_rx_fifo = true;
   292fe:	68ea      	ldr	r2, [r5, #12]
   29300:	2301      	movs	r3, #1
   29302:	f882 30cb 	strb.w	r3, [r2, #203]	; 0xcb
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   29306:	6063      	str	r3, [r4, #4]
}
   29308:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2930a:	f06f 000d 	mvn.w	r0, #13
   2930e:	e7fb      	b.n	29308 <uarte_nrfx_rx_disable+0x42>

00029310 <setup_tx_cache>:
{
   29310:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
   29312:	68c3      	ldr	r3, [r0, #12]
   29314:	68da      	ldr	r2, [r3, #12]
   29316:	69d9      	ldr	r1, [r3, #28]
	if (!remaining) {
   29318:	1a52      	subs	r2, r2, r1
   2931a:	d00f      	beq.n	2933c <setup_tx_cache+0x2c>
	size_t len = MIN(remaining, CONFIG_UART_ASYNC_TX_CACHE_SIZE);
   2931c:	2a08      	cmp	r2, #8
   2931e:	bf28      	it	cs
   29320:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
   29322:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
   29324:	68c3      	ldr	r3, [r0, #12]
   29326:	6999      	ldr	r1, [r3, #24]
   29328:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
   2932a:	68c3      	ldr	r3, [r0, #12]
   2932c:	6898      	ldr	r0, [r3, #8]
   2932e:	69d9      	ldr	r1, [r3, #28]
   29330:	4401      	add	r1, r0
   29332:	6998      	ldr	r0, [r3, #24]
   29334:	f7fe fb7a 	bl	27a2c <memcpy>
	return true;
   29338:	2001      	movs	r0, #1
}
   2933a:	bd08      	pop	{r3, pc}
		return false;
   2933c:	4610      	mov	r0, r2
   2933e:	e7fc      	b.n	2933a <setup_tx_cache+0x2a>

00029340 <rx_flush.isra.0>:
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   29340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return config->uarte_regs;
   29342:	6807      	ldr	r7, [r0, #0]
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   29344:	4615      	mov	r5, r2
    return p_reg->RXD.AMOUNT;
   29346:	f8d7 653c 	ldr.w	r6, [r7, #1340]	; 0x53c
	uint8_t *flush_buf = buf ? buf : tmp_buf;
   2934a:	460c      	mov	r4, r1
   2934c:	b1e9      	cbz	r1, 2938a <rx_flush.isra.0+0x4a>
		memset(buf, dirty, len);
   2934e:	2100      	movs	r1, #0
   29350:	4620      	mov	r0, r4
   29352:	f7fe fb76 	bl	27a42 <memset>
		flush_len = len;
   29356:	4623      	mov	r3, r4
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   29358:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2935c:	2300      	movs	r3, #0
    p_reg->RXD.MAXCNT = length;
   2935e:	f8c7 5538 	str.w	r5, [r7, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   29362:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   29364:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   29368:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2936c:	62f9      	str	r1, [r7, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2936e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   29372:	2900      	cmp	r1, #0
   29374:	d0fb      	beq.n	2936e <rx_flush.isra.0+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   29376:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   2937a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
   2937e:	f8d7 053c 	ldr.w	r0, [r7, #1340]	; 0x53c
	if (!buf) {
   29382:	b92c      	cbnz	r4, 29390 <rx_flush.isra.0+0x50>
			return rx_amount;
   29384:	b2c0      	uxtb	r0, r0
}
   29386:	b003      	add	sp, #12
   29388:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flush_len = sizeof(tmp_buf);
   2938a:	2505      	movs	r5, #5
		flush_buf = tmp_buf;
   2938c:	466b      	mov	r3, sp
   2938e:	e7e3      	b.n	29358 <rx_flush.isra.0+0x18>
	if (rx_amount != prev_rx_amount) {
   29390:	4286      	cmp	r6, r0
   29392:	d1f7      	bne.n	29384 <rx_flush.isra.0+0x44>
   29394:	1962      	adds	r2, r4, r5
	for (int i = 0; i < flush_len; i++) {
   29396:	42a2      	cmp	r2, r4
   29398:	d101      	bne.n	2939e <rx_flush.isra.0+0x5e>
	return 0;
   2939a:	2000      	movs	r0, #0
   2939c:	e7f3      	b.n	29386 <rx_flush.isra.0+0x46>
		if (buf[i] != dirty) {
   2939e:	f814 3b01 	ldrb.w	r3, [r4], #1
   293a2:	2b00      	cmp	r3, #0
   293a4:	d0f7      	beq.n	29396 <rx_flush.isra.0+0x56>
   293a6:	e7ed      	b.n	29384 <rx_flush.isra.0+0x44>

000293a8 <async_uart_release>:
{
   293a8:	b570      	push	{r4, r5, r6, lr}
   293aa:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   293ac:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
   293ae:	f04f 0340 	mov.w	r3, #64	; 0x40
   293b2:	f3ef 8611 	mrs	r6, BASEPRI
   293b6:	f383 8812 	msr	BASEPRI_MAX, r3
   293ba:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   293be:	68d0      	ldr	r0, [r2, #12]
   293c0:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   293c4:	ea23 0301 	bic.w	r3, r3, r1
   293c8:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
	if (!data->async->low_power_mask) {
   293cc:	68d5      	ldr	r5, [r2, #12]
   293ce:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   293d2:	b973      	cbnz	r3, 293f2 <async_uart_release+0x4a>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   293d4:	2902      	cmp	r1, #2
   293d6:	d107      	bne.n	293e8 <async_uart_release+0x40>
				rx_flush(dev, data->async->rx_flush_buffer,
   293d8:	6860      	ldr	r0, [r4, #4]
   293da:	2205      	movs	r2, #5
   293dc:	f105 01c4 	add.w	r1, r5, #196	; 0xc4
   293e0:	f7ff ffae 	bl	29340 <rx_flush.isra.0>
			data->async->rx_flush_cnt =
   293e4:	f885 00c9 	strb.w	r0, [r5, #201]	; 0xc9
	return config->uarte_regs;
   293e8:	6863      	ldr	r3, [r4, #4]
   293ea:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   293ec:	2200      	movs	r2, #0
   293ee:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   293f2:	f386 8811 	msr	BASEPRI, r6
   293f6:	f3bf 8f6f 	isb	sy
}
   293fa:	bd70      	pop	{r4, r5, r6, pc}

000293fc <is_tx_ready.isra.0>:
	return config->uarte_regs;
   293fc:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   293fe:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   29400:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   29404:	b940      	cbnz	r0, 29418 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   29406:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   29408:	079b      	lsls	r3, r3, #30
   2940a:	d406      	bmi.n	2941a <is_tx_ready.isra.0+0x1e>
   2940c:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   29410:	3800      	subs	r0, #0
   29412:	bf18      	it	ne
   29414:	2001      	movne	r0, #1
   29416:	4770      	bx	lr
   29418:	2001      	movs	r0, #1
}
   2941a:	4770      	bx	lr

0002941c <start_tx_locked>:
{
   2941c:	b510      	push	{r4, lr}
   2941e:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
   29420:	6840      	ldr	r0, [r0, #4]
   29422:	f7ff ffeb 	bl	293fc <is_tx_ready.isra.0>
   29426:	68cb      	ldr	r3, [r1, #12]
   29428:	b918      	cbnz	r0, 29432 <start_tx_locked+0x16>
		data->async->pending_tx = true;
   2942a:	2201      	movs	r2, #1
   2942c:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
}
   29430:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
   29432:	2200      	movs	r2, #0
   29434:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
		data->async->tx_amount = -1;
   29438:	68cb      	ldr	r3, [r1, #12]
   2943a:	f04f 32ff 	mov.w	r2, #4294967295
   2943e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   29442:	68cb      	ldr	r3, [r1, #12]
   29444:	4620      	mov	r0, r4
   29446:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
}
   2944a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   2944e:	f7ff be7c 	b.w	2914a <tx_start>

00029452 <rx_timeout>:
{
   29452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return timer->user_data;
   29454:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   29456:	68e3      	ldr	r3, [r4, #12]
   29458:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
   2945c:	f003 07ff 	and.w	r7, r3, #255	; 0xff
   29460:	bb13      	cbnz	r3, 294a8 <rx_timeout+0x56>
	const struct device *dev = data->dev;
   29462:	6826      	ldr	r6, [r4, #0]
	return config->uarte_regs;
   29464:	6873      	ldr	r3, [r6, #4]
   29466:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   29468:	2210      	movs	r2, #16
   2946a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
   2946e:	68e3      	ldr	r3, [r4, #12]
   29470:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
	if (read != data->async->rx_total_byte_cnt) {
   29474:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
   29476:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
   29478:	bf1f      	itttt	ne
   2947a:	66da      	strne	r2, [r3, #108]	; 0x6c
		data->async->rx_timeout_left = data->async->rx_timeout;
   2947c:	68e3      	ldrne	r3, [r4, #12]
   2947e:	6f5a      	ldrne	r2, [r3, #116]	; 0x74
   29480:	67da      	strne	r2, [r3, #124]	; 0x7c
	int32_t len = data->async->rx_total_byte_cnt
   29482:	68e3      	ldr	r3, [r4, #12]
		    - data->async->rx_total_user_byte_cnt;
   29484:	e9d3 211b 	ldrd	r2, r1, [r3, #108]	; 0x6c
   29488:	1a52      	subs	r2, r2, r1
	if (!HW_RX_COUNTING_ENABLED(data) &&
   2948a:	2a00      	cmp	r2, #0
	int32_t len = data->async->rx_total_byte_cnt
   2948c:	4615      	mov	r5, r2
	if (!HW_RX_COUNTING_ENABLED(data) &&
   2948e:	da0c      	bge.n	294aa <rx_timeout+0x58>
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   29490:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   29494:	68e3      	ldr	r3, [r4, #12]
   29496:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   2949a:	4281      	cmp	r1, r0
   2949c:	d80b      	bhi.n	294b6 <rx_timeout+0x64>
	return config->uarte_regs;
   2949e:	6873      	ldr	r3, [r6, #4]
   294a0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   294a2:	2210      	movs	r2, #16
   294a4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   294a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   294aa:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   294ae:	eb02 0c01 	add.w	ip, r2, r1
   294b2:	4584      	cmp	ip, r0
   294b4:	d904      	bls.n	294c0 <rx_timeout+0x6e>
		len = data->async->rx_buf_len - data->async->rx_offset;
   294b6:	1a45      	subs	r5, r0, r1
	if (len > 0) {
   294b8:	2d00      	cmp	r5, #0
   294ba:	ddf0      	ble.n	2949e <rx_timeout+0x4c>
		clipped = true;
   294bc:	2701      	movs	r7, #1
   294be:	e005      	b.n	294cc <rx_timeout+0x7a>
	if (len > 0) {
   294c0:	2a00      	cmp	r2, #0
   294c2:	d0ec      	beq.n	2949e <rx_timeout+0x4c>
				< data->async->rx_timeout_slab)) {
   294c4:	e9d3 121e 	ldrd	r1, r2, [r3, #120]	; 0x78
		if (clipped ||
   294c8:	428a      	cmp	r2, r1
   294ca:	da12      	bge.n	294f2 <rx_timeout+0xa0>
			notify_uart_rx_rdy(dev, len);
   294cc:	4629      	mov	r1, r5
   294ce:	4630      	mov	r0, r6
   294d0:	f7ff fe6a 	bl	291a8 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   294d4:	68e2      	ldr	r2, [r4, #12]
   294d6:	6e13      	ldr	r3, [r2, #96]	; 0x60
   294d8:	442b      	add	r3, r5
   294da:	6613      	str	r3, [r2, #96]	; 0x60
			data->async->rx_total_user_byte_cnt += len;
   294dc:	68e2      	ldr	r2, [r4, #12]
   294de:	6f13      	ldr	r3, [r2, #112]	; 0x70
   294e0:	442b      	add	r3, r5
   294e2:	6713      	str	r3, [r2, #112]	; 0x70
		if (clipped) {
   294e4:	2f00      	cmp	r7, #0
   294e6:	d0da      	beq.n	2949e <rx_timeout+0x4c>
			k_timer_stop(&data->async->rx_timeout_timer);
   294e8:	68e0      	ldr	r0, [r4, #12]
   294ea:	3080      	adds	r0, #128	; 0x80
   294ec:	f000 fabe 	bl	29a6c <z_impl_k_timer_stop>
}
   294f0:	e7d5      	b.n	2949e <rx_timeout+0x4c>
			data->async->rx_timeout_left -=
   294f2:	1a52      	subs	r2, r2, r1
   294f4:	67da      	str	r2, [r3, #124]	; 0x7c
		if (clipped) {
   294f6:	e7d2      	b.n	2949e <rx_timeout+0x4c>

000294f8 <uarte_nrfx_tx_abort>:
{
   294f8:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   294fa:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   294fc:	6903      	ldr	r3, [r0, #16]
	return config->uarte_regs;
   294fe:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
   29500:	68da      	ldr	r2, [r3, #12]
   29502:	6891      	ldr	r1, [r2, #8]
   29504:	b151      	cbz	r1, 2951c <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
   29506:	2400      	movs	r4, #0
   29508:	f882 40cd 	strb.w	r4, [r2, #205]	; 0xcd
	k_timer_stop(&data->async->tx_timeout_timer);
   2950c:	68d8      	ldr	r0, [r3, #12]
   2950e:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   29510:	f000 faac 	bl	29a6c <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   29514:	2301      	movs	r3, #1
   29516:	60eb      	str	r3, [r5, #12]
	return 0;
   29518:	4620      	mov	r0, r4
}
   2951a:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2951c:	f06f 000d 	mvn.w	r0, #13
   29520:	e7fb      	b.n	2951a <uarte_nrfx_tx_abort+0x22>

00029522 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   29522:	6b43      	ldr	r3, [r0, #52]	; 0x34
   29524:	6818      	ldr	r0, [r3, #0]
   29526:	f7ff bfe7 	b.w	294f8 <uarte_nrfx_tx_abort>

0002952a <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2952a:	4770      	bx	lr

0002952c <sys_clock_cycle_get_32>:
{
   2952c:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2952e:	f7f4 fa9d 	bl	1da6c <z_nrf_rtc_timer_read>
}
   29532:	bd08      	pop	{r3, pc}

00029534 <z_log_msg_static_create.constprop.0>:
   29534:	2300      	movs	r3, #0
   29536:	f7ea bda5 	b.w	14084 <z_impl_z_log_msg_static_create>

0002953a <dk_set_leds_state>:
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   2953a:	ea40 0301 	orr.w	r3, r0, r1
   2953e:	2b0f      	cmp	r3, #15
   29540:	d801      	bhi.n	29546 <dk_set_leds_state+0xc>
   29542:	f7f4 bd2f 	b.w	1dfa4 <dk_set_leds_state.part.0>
}
   29546:	f06f 0015 	mvn.w	r0, #21
   2954a:	4770      	bx	lr

0002954c <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   2954c:	2101      	movs	r1, #1
   2954e:	f7f4 bd89 	b.w	1e064 <dk_set_led>

00029552 <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   29552:	2100      	movs	r1, #0
   29554:	f7f4 bd86 	b.w	1e064 <dk_set_led>

00029558 <hci_driver_close>:
{
   29558:	b510      	push	{r4, lr}
		hci_ecdh_uninit();
   2955a:	f7f5 fe1b 	bl	1f194 <hci_ecdh_uninit>
	err = MULTITHREADING_LOCK_ACQUIRE();
   2955e:	f04f 30ff 	mov.w	r0, #4294967295
   29562:	f04f 31ff 	mov.w	r1, #4294967295
   29566:	f7f4 fdaf 	bl	1e0c8 <multithreading_lock_acquire>
	if (err) {
   2956a:	4604      	mov	r4, r0
   2956c:	b920      	cbnz	r0, 29578 <hci_driver_close+0x20>
	err = sdc_disable();
   2956e:	f7d7 fd77 	bl	1060 <sdc_disable>
	if (err) {
   29572:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   29574:	f7f4 fdb0 	bl	1e0d8 <multithreading_lock_release>
}
   29578:	4620      	mov	r0, r4
   2957a:	bd10      	pop	{r4, pc}

0002957c <hci_driver_send>:
{
   2957c:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   2957e:	8a03      	ldrh	r3, [r0, #16]
{
   29580:	4605      	mov	r5, r0
	if (!buf->len) {
   29582:	b373      	cbz	r3, 295e2 <hci_driver_send+0x66>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   29584:	7e03      	ldrb	r3, [r0, #24]
	switch (type) {
   29586:	b1a3      	cbz	r3, 295b2 <hci_driver_send+0x36>
   29588:	2b02      	cmp	r3, #2
   2958a:	d12a      	bne.n	295e2 <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2958c:	f04f 30ff 	mov.w	r0, #4294967295
   29590:	f04f 31ff 	mov.w	r1, #4294967295
   29594:	f7f4 fd98 	bl	1e0c8 <multithreading_lock_acquire>
	if (!errcode) {
   29598:	4604      	mov	r4, r0
   2959a:	b940      	cbnz	r0, 295ae <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   2959c:	68e8      	ldr	r0, [r5, #12]
   2959e:	f7e3 feae 	bl	d2fe <sdc_hci_data_put>
   295a2:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   295a4:	f7f4 fd98 	bl	1e0d8 <multithreading_lock_release>
		if (errcode) {
   295a8:	b1b4      	cbz	r4, 295d8 <hci_driver_send+0x5c>
			receive_signal_raise();
   295aa:	f7f4 fe33 	bl	1e214 <receive_signal_raise>
}
   295ae:	4620      	mov	r0, r4
   295b0:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   295b2:	f04f 30ff 	mov.w	r0, #4294967295
   295b6:	f04f 31ff 	mov.w	r1, #4294967295
   295ba:	f7f4 fd85 	bl	1e0c8 <multithreading_lock_acquire>
	if (!errcode) {
   295be:	4604      	mov	r4, r0
   295c0:	2800      	cmp	r0, #0
   295c2:	d1f4      	bne.n	295ae <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   295c4:	68e8      	ldr	r0, [r5, #12]
   295c6:	f7f4 ffcd 	bl	1e564 <hci_internal_cmd_put>
   295ca:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   295cc:	f7f4 fd84 	bl	1e0d8 <multithreading_lock_release>
	if (errcode) {
   295d0:	2c00      	cmp	r4, #0
   295d2:	d1ec      	bne.n	295ae <hci_driver_send+0x32>
	receive_signal_raise();
   295d4:	f7f4 fe1e 	bl	1e214 <receive_signal_raise>
		net_buf_unref(buf);
   295d8:	4628      	mov	r0, r5
   295da:	f7f2 fe05 	bl	1c1e8 <net_buf_unref>
   295de:	2400      	movs	r4, #0
   295e0:	e7e5      	b.n	295ae <hci_driver_send+0x32>
	switch (type) {
   295e2:	f06f 0415 	mvn.w	r4, #21
   295e6:	e7e2      	b.n	295ae <hci_driver_send+0x32>

000295e8 <receive_work_handler>:
	hci_driver_receive_process();
   295e8:	f7f4 bf40 	b.w	1e46c <hci_driver_receive_process>

000295ec <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   295ec:	2100      	movs	r1, #0
   295ee:	f7f5 bdf3 	b.w	1f1d8 <cmd_le_generate_dhkey>

000295f2 <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   295f2:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   295f6:	2901      	cmp	r1, #1
   295f8:	d801      	bhi.n	295fe <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   295fa:	f7f5 bded 	b.w	1f1d8 <cmd_le_generate_dhkey>
}
   295fe:	2012      	movs	r0, #18
   29600:	4770      	bx	lr

00029602 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   29602:	4668      	mov	r0, sp
   29604:	f020 0107 	bic.w	r1, r0, #7
   29608:	468d      	mov	sp, r1
   2960a:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   2960c:	f7e2 f828 	bl	b660 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   29610:	f7eb fd70 	bl	150f4 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   29614:	f7eb fee8 	bl	153e8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   29618:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2961c:	4685      	mov	sp, r0
   2961e:	4770      	bx	lr

00029620 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   29620:	4668      	mov	r0, sp
   29622:	f020 0107 	bic.w	r1, r0, #7
   29626:	468d      	mov	sp, r1
   29628:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   2962a:	f7e1 ffcf 	bl	b5cc <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   2962e:	f7eb fd61 	bl	150f4 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   29632:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   29636:	4685      	mov	sp, r0
   29638:	4770      	bx	lr

0002963a <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2963a:	4668      	mov	r0, sp
   2963c:	f020 0107 	bic.w	r1, r0, #7
   29640:	468d      	mov	sp, r1
   29642:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   29644:	f7df fc6c 	bl	8f20 <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   29648:	f7eb fd54 	bl	150f4 <_arch_isr_direct_pm>
   2964c:	f7eb fecc 	bl	153e8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   29650:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   29654:	4685      	mov	sp, r0
   29656:	4770      	bx	lr

00029658 <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(void)
{
   29658:	b508      	push	{r3, lr}

	mpsl_fem_init();
   2965a:	f7e7 fc35 	bl	10ec8 <mpsl_fem_init>

	return 0;
}
   2965e:	2000      	movs	r0, #0
   29660:	bd08      	pop	{r3, pc}

00029662 <nrfx_clock_enable>:
}
   29662:	4770      	bx	lr

00029664 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   29664:	f7e2 bc9a 	b.w	bf9c <MPSL_IRQ_CLOCK_Handler>

00029668 <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   29668:	f7fa bea6 	b.w	243b8 <nrf_cc3xx_platform_init>

0002966c <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(void)
{
   2966c:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   2966e:	f7eb fb1f 	bl	14cb0 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   29672:	f7eb fbf3 	bl	14e5c <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal();
	return res;
}
   29676:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   2967a:	f7fa be9d 	b.w	243b8 <nrf_cc3xx_platform_init>

0002967e <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2967e:	4700      	bx	r0

00029680 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   29680:	f000 b9c2 	b.w	29a08 <z_impl_k_busy_wait>

00029684 <nrf_gpio_pin_present_check>:
    switch (port)
   29684:	0943      	lsrs	r3, r0, #5
   29686:	d00b      	beq.n	296a0 <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
   29688:	2b01      	cmp	r3, #1
   2968a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2968e:	bf18      	it	ne
   29690:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   29692:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   29696:	fa23 f000 	lsr.w	r0, r3, r0
}
   2969a:	f000 0001 	and.w	r0, r0, #1
   2969e:	4770      	bx	lr
    switch (port)
   296a0:	f04f 33ff 	mov.w	r3, #4294967295
   296a4:	e7f5      	b.n	29692 <nrf_gpio_pin_present_check+0xe>

000296a6 <pin_is_task_output>:
{
   296a6:	b508      	push	{r3, lr}
   296a8:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   296aa:	f7f6 f80b 	bl	1f6c4 <pin_is_output>
   296ae:	b110      	cbz	r0, 296b6 <pin_is_task_output+0x10>
   296b0:	4610      	mov	r0, r2
   296b2:	f7f5 fff1 	bl	1f698 <pin_in_use_by_te>
}
   296b6:	f000 0001 	and.w	r0, r0, #1
   296ba:	bd08      	pop	{r3, pc}

000296bc <nrf_gpio_reconfigure>:
{
   296bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   296c0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   296c2:	a801      	add	r0, sp, #4
{
   296c4:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
   296c8:	460c      	mov	r4, r1
   296ca:	4617      	mov	r7, r2
   296cc:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   296ce:	f7f6 f87b 	bl	1f7c8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   296d2:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   296d4:	1e39      	subs	r1, r7, #0
   296d6:	bf18      	it	ne
   296d8:	2101      	movne	r1, #1
   296da:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   296de:	1e23      	subs	r3, r4, #0
   296e0:	bf18      	it	ne
   296e2:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   296e4:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   296e6:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   296ea:	bf14      	ite	ne
   296ec:	210c      	movne	r1, #12
   296ee:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   296f0:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   296f2:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   296f6:	bf14      	ite	ne
   296f8:	f44f 61e0 	movne.w	r1, #1792	; 0x700
   296fc:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   296fe:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   29702:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
   29706:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2970a:	bf14      	ite	ne
   2970c:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   29710:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   29712:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   29714:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   29718:	b104      	cbz	r4, 2971c <nrf_gpio_reconfigure+0x60>
   2971a:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2971c:	b10f      	cbz	r7, 29722 <nrf_gpio_reconfigure+0x66>
   2971e:	783f      	ldrb	r7, [r7, #0]
   29720:	007f      	lsls	r7, r7, #1
   29722:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   29724:	b10e      	cbz	r6, 2972a <nrf_gpio_reconfigure+0x6e>
   29726:	7836      	ldrb	r6, [r6, #0]
   29728:	00b6      	lsls	r6, r6, #2
   2972a:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2972c:	b18d      	cbz	r5, 29752 <nrf_gpio_reconfigure+0x96>
   2972e:	7829      	ldrb	r1, [r5, #0]
   29730:	0209      	lsls	r1, r1, #8
   29732:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   29734:	f1b8 0f00 	cmp.w	r8, #0
   29738:	d003      	beq.n	29742 <nrf_gpio_reconfigure+0x86>
   2973a:	f898 8000 	ldrb.w	r8, [r8]
   2973e:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   29742:	4321      	orrs	r1, r4
   29744:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
   29748:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
   2974c:	b002      	add	sp, #8
   2974e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   29752:	4629      	mov	r1, r5
   29754:	e7ed      	b.n	29732 <nrf_gpio_reconfigure+0x76>

00029756 <nrf_gpio_cfg_sense_set>:
{
   29756:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   29758:	f10d 030f 	add.w	r3, sp, #15
   2975c:	9301      	str	r3, [sp, #4]
   2975e:	2300      	movs	r3, #0
{
   29760:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   29764:	9300      	str	r3, [sp, #0]
   29766:	461a      	mov	r2, r3
   29768:	4619      	mov	r1, r3
   2976a:	f7ff ffa7 	bl	296bc <nrf_gpio_reconfigure>
}
   2976e:	b005      	add	sp, #20
   29770:	f85d fb04 	ldr.w	pc, [sp], #4

00029774 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   29774:	f7f6 bb86 	b.w	1fe84 <_DoInit>

00029778 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
   29778:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
   2977a:	f7ff fffb 	bl	29774 <SEGGER_RTT_Init>

	return 0;
}
   2977e:	2000      	movs	r0, #0
   29780:	bd08      	pop	{r3, pc}

00029782 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   29782:	4770      	bx	lr

00029784 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   29784:	b140      	cbz	r0, 29798 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   29786:	68c3      	ldr	r3, [r0, #12]
   29788:	7858      	ldrb	r0, [r3, #1]
   2978a:	f010 0001 	ands.w	r0, r0, #1
   2978e:	bf1e      	ittt	ne
   29790:	7818      	ldrbne	r0, [r3, #0]
   29792:	fab0 f080 	clzne	r0, r0
   29796:	0940      	lsrne	r0, r0, #5
}
   29798:	4770      	bx	lr

0002979a <z_early_memset>:
	(void) memset(dst, c, n);
   2979a:	f7fe b952 	b.w	27a42 <memset>

0002979e <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   2979e:	f7fe b945 	b.w	27a2c <memcpy>

000297a2 <k_heap_init>:
{
   297a2:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   297a4:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   297a8:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   297ac:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   297b0:	f7e9 bb44 	b.w	12e3c <sys_heap_init>

000297b4 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   297b4:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
   297b8:	4313      	orrs	r3, r2
   297ba:	f013 0303 	ands.w	r3, r3, #3
   297be:	d10c      	bne.n	297da <create_free_list+0x26>
	slab->free_list = NULL;
   297c0:	6183      	str	r3, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   297c2:	68c1      	ldr	r1, [r0, #12]
   297c4:	4299      	cmp	r1, r3
   297c6:	d801      	bhi.n	297cc <create_free_list+0x18>
	return 0;
   297c8:	2000      	movs	r0, #0
   297ca:	4770      	bx	lr
		*(char **)p = slab->free_list;
   297cc:	6981      	ldr	r1, [r0, #24]
   297ce:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   297d0:	6901      	ldr	r1, [r0, #16]
		slab->free_list = p;
   297d2:	6182      	str	r2, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   297d4:	3301      	adds	r3, #1
		p += slab->block_size;
   297d6:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   297d8:	e7f3      	b.n	297c2 <create_free_list+0xe>
		return -EINVAL;
   297da:	f06f 0015 	mvn.w	r0, #21
}
   297de:	4770      	bx	lr

000297e0 <k_mem_slab_init>:
{
   297e0:	b510      	push	{r4, lr}
	slab->block_size = block_size;
   297e2:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->num_used = 0U;
   297e6:	2300      	movs	r3, #0
	slab->buffer = buffer;
   297e8:	6141      	str	r1, [r0, #20]
	slab->num_used = 0U;
   297ea:	61c3      	str	r3, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   297ec:	6083      	str	r3, [r0, #8]
{
   297ee:	4604      	mov	r4, r0
	rc = create_free_list(slab);
   297f0:	f7ff ffe0 	bl	297b4 <create_free_list>
	if (rc < 0) {
   297f4:	2800      	cmp	r0, #0
   297f6:	bfa8      	it	ge
   297f8:	e9c4 4400 	strdge	r4, r4, [r4]
}
   297fc:	bd10      	pop	{r4, pc}

000297fe <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   297fe:	f3ef 8005 	mrs	r0, IPSR
}
   29802:	3800      	subs	r0, #0
   29804:	bf18      	it	ne
   29806:	2001      	movne	r0, #1
   29808:	4770      	bx	lr

0002980a <z_impl_k_thread_name_set>:
}
   2980a:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2980e:	4770      	bx	lr

00029810 <k_thread_name_get>:
}
   29810:	2000      	movs	r0, #0
   29812:	4770      	bx	lr

00029814 <z_impl_k_thread_start>:
	z_sched_start(thread);
   29814:	f7f8 bb00 	b.w	21e18 <z_sched_start>

00029818 <z_pm_save_idle_exit>:
{
   29818:	b508      	push	{r3, lr}
	pm_system_resume();
   2981a:	f7eb f88d 	bl	14938 <pm_system_resume>
}
   2981e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   29822:	f7ff be82 	b.w	2952a <sys_clock_idle_exit>

00029826 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   29826:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2982a:	428b      	cmp	r3, r1
   2982c:	d001      	beq.n	29832 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   2982e:	f7f8 bde3 	b.w	223f8 <z_set_prio>
}
   29832:	2000      	movs	r0, #0
   29834:	4770      	bx	lr

00029836 <z_impl_k_mutex_init>:
{
   29836:	4603      	mov	r3, r0
	mutex->owner = NULL;
   29838:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   2983a:	e9c3 0002 	strd	r0, r0, [r3, #8]
   2983e:	e9c3 3300 	strd	r3, r3, [r3]
}
   29842:	4770      	bx	lr

00029844 <z_queue_node_peek>:
{
   29844:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   29846:	4604      	mov	r4, r0
   29848:	b130      	cbz	r0, 29858 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2984a:	6802      	ldr	r2, [r0, #0]
   2984c:	0793      	lsls	r3, r2, #30
   2984e:	d003      	beq.n	29858 <z_queue_node_peek+0x14>
		ret = anode->data;
   29850:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   29852:	b109      	cbz	r1, 29858 <z_queue_node_peek+0x14>
			k_free(anode);
   29854:	f000 f9c8 	bl	29be8 <k_free>
}
   29858:	4620      	mov	r0, r4
   2985a:	bd10      	pop	{r4, pc}

0002985c <z_impl_k_queue_init>:
	list->head = NULL;
   2985c:	2300      	movs	r3, #0
	list->tail = NULL;
   2985e:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   29862:	6083      	str	r3, [r0, #8]
   29864:	f100 030c 	add.w	r3, r0, #12
   29868:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   2986c:	f100 0314 	add.w	r3, r0, #20
   29870:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   29874:	4770      	bx	lr

00029876 <k_queue_append>:
{
   29876:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   29878:	2301      	movs	r3, #1
   2987a:	9300      	str	r3, [sp, #0]
   2987c:	2300      	movs	r3, #0
{
   2987e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   29880:	4619      	mov	r1, r3
   29882:	f7f7 f9ff 	bl	20c84 <queue_insert>
}
   29886:	b003      	add	sp, #12
   29888:	f85d fb04 	ldr.w	pc, [sp], #4

0002988c <k_queue_prepend>:
{
   2988c:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   2988e:	2300      	movs	r3, #0
{
   29890:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   29892:	9300      	str	r3, [sp, #0]
   29894:	4619      	mov	r1, r3
   29896:	f7f7 f9f5 	bl	20c84 <queue_insert>
}
   2989a:	b003      	add	sp, #12
   2989c:	f85d fb04 	ldr.w	pc, [sp], #4

000298a0 <z_impl_k_queue_peek_head>:
	return true;
}

void *z_impl_k_queue_peek_head(struct k_queue *queue)
{
	void *ret = z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
   298a0:	6800      	ldr	r0, [r0, #0]
   298a2:	2100      	movs	r1, #0
   298a4:	f7ff bfce 	b.w	29844 <z_queue_node_peek>

000298a8 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   298a8:	b15a      	cbz	r2, 298c2 <z_impl_k_sem_init+0x1a>
   298aa:	428a      	cmp	r2, r1
   298ac:	d309      	bcc.n	298c2 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   298ae:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   298b2:	e9c0 1202 	strd	r1, r2, [r0, #8]
   298b6:	e9c0 0000 	strd	r0, r0, [r0]
   298ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   298be:	2000      	movs	r0, #0
   298c0:	4770      	bx	lr
		return -EINVAL;
   298c2:	f06f 0015 	mvn.w	r0, #21
}
   298c6:	4770      	bx	lr

000298c8 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   298c8:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   298ca:	2301      	movs	r3, #1
   298cc:	408b      	lsls	r3, r1
   298ce:	ea22 0303 	bic.w	r3, r2, r3
   298d2:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   298d4:	fa22 f001 	lsr.w	r0, r2, r1
}
   298d8:	f000 0001 	and.w	r0, r0, #1
   298dc:	4770      	bx	lr

000298de <unschedule_locked>:
{
   298de:	b510      	push	{r4, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   298e0:	2103      	movs	r1, #3
{
   298e2:	4604      	mov	r4, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   298e4:	300c      	adds	r0, #12
   298e6:	f7ff ffef 	bl	298c8 <flag_test_and_clear>
   298ea:	b130      	cbz	r0, 298fa <unschedule_locked+0x1c>
		ret = z_abort_timeout(&dwork->timeout) == 0;
   298ec:	f104 0010 	add.w	r0, r4, #16
   298f0:	f7f9 fbb0 	bl	23054 <z_abort_timeout>
   298f4:	fab0 f080 	clz	r0, r0
   298f8:	0940      	lsrs	r0, r0, #5
}
   298fa:	bd10      	pop	{r4, pc}

000298fc <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   298fc:	b120      	cbz	r0, 29908 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   298fe:	2200      	movs	r2, #0
   29900:	4611      	mov	r1, r2
   29902:	30d0      	adds	r0, #208	; 0xd0
   29904:	f7f9 ba16 	b.w	22d34 <z_sched_wake>
}
   29908:	4770      	bx	lr

0002990a <cancel_async_locked>:
{
   2990a:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   2990c:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2990e:	f3c3 0640 	ubfx	r6, r3, #1, #1
   29912:	079b      	lsls	r3, r3, #30
{
   29914:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   29916:	d416      	bmi.n	29946 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   29918:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2991a:	2102      	movs	r1, #2
   2991c:	300c      	adds	r0, #12
   2991e:	f7ff ffd3 	bl	298c8 <flag_test_and_clear>
   29922:	b180      	cbz	r0, 29946 <cancel_async_locked+0x3c>
	return list->head;
   29924:	f8d5 20c8 	ldr.w	r2, [r5, #200]	; 0xc8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29928:	b16a      	cbz	r2, 29946 <cancel_async_locked+0x3c>
   2992a:	4294      	cmp	r4, r2
   2992c:	d11d      	bne.n	2996a <cancel_async_locked+0x60>
	return node->next;
   2992e:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   29930:	b99e      	cbnz	r6, 2995a <cancel_async_locked+0x50>
   29932:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
	list->head = node;
   29936:	f8c5 20c8 	str.w	r2, [r5, #200]	; 0xc8
Z_GENLIST_REMOVE(slist, snode)
   2993a:	429c      	cmp	r4, r3
   2993c:	d101      	bne.n	29942 <cancel_async_locked+0x38>
	list->tail = node;
   2993e:	f8c5 20cc 	str.w	r2, [r5, #204]	; 0xcc
	parent->next = child;
   29942:	2300      	movs	r3, #0
   29944:	6023      	str	r3, [r4, #0]
	return *flagp;
   29946:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   29948:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   2994c:	bf1e      	ittt	ne
   2994e:	f043 0302 	orrne.w	r3, r3, #2
   29952:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   29954:	f040 0002 	orrne.w	r0, r0, #2
}
   29958:	bd70      	pop	{r4, r5, r6, pc}
   2995a:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   2995c:	f8d5 20cc 	ldr.w	r2, [r5, #204]	; 0xcc
   29960:	4294      	cmp	r4, r2
	list->tail = node;
   29962:	bf08      	it	eq
   29964:	f8c5 60cc 	streq.w	r6, [r5, #204]	; 0xcc
}
   29968:	e7eb      	b.n	29942 <cancel_async_locked+0x38>
	return node->next;
   2996a:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2996c:	6812      	ldr	r2, [r2, #0]
   2996e:	e7db      	b.n	29928 <cancel_async_locked+0x1e>

00029970 <k_work_submit_to_queue>:
{
   29970:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   29972:	f7f7 fd9f 	bl	214b4 <z_work_submit_to_queue>
	if (ret > 0) {
   29976:	1e04      	subs	r4, r0, #0
   29978:	dd09      	ble.n	2998e <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   2997a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2997e:	f3ef 8011 	mrs	r0, BASEPRI
   29982:	f383 8812 	msr	BASEPRI_MAX, r3
   29986:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2998a:	f000 f80d 	bl	299a8 <z_reschedule_irqlock>
}
   2998e:	4620      	mov	r0, r4
   29990:	bd10      	pop	{r4, pc}

00029992 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   29992:	f7f7 bd49 	b.w	21428 <k_work_busy_get>

00029996 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   29996:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2999a:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2999e:	4283      	cmp	r3, r0
		return b2 - b1;
   299a0:	bf14      	ite	ne
   299a2:	1ac0      	subne	r0, r0, r3
	return 0;
   299a4:	2000      	moveq	r0, #0
}
   299a6:	4770      	bx	lr

000299a8 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   299a8:	4603      	mov	r3, r0
   299aa:	b920      	cbnz	r0, 299b6 <z_reschedule_irqlock+0xe>
   299ac:	f3ef 8205 	mrs	r2, IPSR
   299b0:	b90a      	cbnz	r2, 299b6 <z_reschedule_irqlock+0xe>
   299b2:	f7eb bbdf 	b.w	15174 <arch_swap>
	__asm__ volatile(
   299b6:	f383 8811 	msr	BASEPRI, r3
   299ba:	f3bf 8f6f 	isb	sy
}
   299be:	4770      	bx	lr

000299c0 <z_reschedule_unlocked>:
	__asm__ volatile(
   299c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   299c4:	f3ef 8011 	mrs	r0, BASEPRI
   299c8:	f383 8812 	msr	BASEPRI_MAX, r3
   299cc:	f3bf 8f6f 	isb	sy
   299d0:	f7ff bfea 	b.w	299a8 <z_reschedule_irqlock>

000299d4 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
   299d4:	2101      	movs	r1, #1
   299d6:	3818      	subs	r0, #24
   299d8:	f7f8 be74 	b.w	226c4 <z_sched_wake_thread>

000299dc <z_unpend_all>:
{
   299dc:	b538      	push	{r3, r4, r5, lr}
   299de:	4605      	mov	r5, r0
	int need_sched = 0;
   299e0:	2000      	movs	r0, #0
	return list->head == list;
   299e2:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   299e4:	42a5      	cmp	r5, r4
   299e6:	d000      	beq.n	299ea <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   299e8:	b904      	cbnz	r4, 299ec <z_unpend_all+0x10>
}
   299ea:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   299ec:	4620      	mov	r0, r4
   299ee:	f7f8 fe1d 	bl	2262c <z_unpend_thread>
		z_ready_thread(thread);
   299f2:	4620      	mov	r0, r4
   299f4:	f7f8 f940 	bl	21c78 <z_ready_thread>
		need_sched = 1;
   299f8:	2001      	movs	r0, #1
   299fa:	e7f2      	b.n	299e2 <z_unpend_all+0x6>

000299fc <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   299fc:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   299fe:	f7f9 fc69 	bl	232d4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   29a02:	bd08      	pop	{r3, pc}

00029a04 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   29a04:	f7f9 bc66 	b.w	232d4 <sys_clock_tick_get>

00029a08 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   29a08:	b108      	cbz	r0, 29a0e <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   29a0a:	f7ec ba99 	b.w	15f40 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   29a0e:	4770      	bx	lr

00029a10 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   29a10:	f1b1 3fff 	cmp.w	r1, #4294967295
   29a14:	bf08      	it	eq
   29a16:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   29a1a:	b538      	push	{r3, r4, r5, lr}
   29a1c:	460c      	mov	r4, r1
   29a1e:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   29a20:	d014      	beq.n	29a4c <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   29a22:	4308      	orrs	r0, r1
   29a24:	d103      	bne.n	29a2e <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   29a26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   29a2a:	f7f9 bc53 	b.w	232d4 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   29a2e:	f06f 0001 	mvn.w	r0, #1
   29a32:	1b40      	subs	r0, r0, r5
   29a34:	f04f 33ff 	mov.w	r3, #4294967295
   29a38:	eb63 0101 	sbc.w	r1, r3, r1
   29a3c:	2900      	cmp	r1, #0
   29a3e:	da04      	bge.n	29a4a <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   29a40:	f7f9 fc48 	bl	232d4 <sys_clock_tick_get>
   29a44:	1940      	adds	r0, r0, r5
   29a46:	eb41 0104 	adc.w	r1, r1, r4
}
   29a4a:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   29a4c:	f04f 30ff 	mov.w	r0, #4294967295
   29a50:	4601      	mov	r1, r0
   29a52:	e7fa      	b.n	29a4a <sys_clock_timeout_end_calc+0x3a>

00029a54 <k_timer_init>:
	timer->status = 0U;
   29a54:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   29a56:	e9c0 1208 	strd	r1, r2, [r0, #32]
   29a5a:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   29a5e:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   29a62:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   29a66:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   29a68:	6343      	str	r3, [r0, #52]	; 0x34
}
   29a6a:	4770      	bx	lr

00029a6c <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   29a6c:	b510      	push	{r4, lr}
   29a6e:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   29a70:	f7f9 faf0 	bl	23054 <z_abort_timeout>

	if (inactive) {
   29a74:	b9b0      	cbnz	r0, 29aa4 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   29a76:	6a63      	ldr	r3, [r4, #36]	; 0x24
   29a78:	b10b      	cbz	r3, 29a7e <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   29a7a:	4620      	mov	r0, r4
   29a7c:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   29a7e:	f104 0018 	add.w	r0, r4, #24
   29a82:	f7f8 fe77 	bl	22774 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   29a86:	b168      	cbz	r0, 29aa4 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   29a88:	f7f8 f8f6 	bl	21c78 <z_ready_thread>
   29a8c:	f04f 0340 	mov.w	r3, #64	; 0x40
   29a90:	f3ef 8011 	mrs	r0, BASEPRI
   29a94:	f383 8812 	msr	BASEPRI_MAX, r3
   29a98:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   29a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29aa0:	f7ff bf82 	b.w	299a8 <z_reschedule_irqlock>
   29aa4:	bd10      	pop	{r4, pc}

00029aa6 <add_event>:
{
   29aa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29aa8:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   29aaa:	e9d0 1300 	ldrd	r1, r3, [r0]
   29aae:	4288      	cmp	r0, r1
   29ab0:	4604      	mov	r4, r0
   29ab2:	d105      	bne.n	29ac0 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   29ab4:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   29ab6:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   29aba:	601d      	str	r5, [r3, #0]
	list->tail = node;
   29abc:	6065      	str	r5, [r4, #4]
   29abe:	e01d      	b.n	29afc <add_event+0x56>
	if ((pending == NULL) ||
   29ac0:	2b00      	cmp	r3, #0
   29ac2:	d0f7      	beq.n	29ab4 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   29ac4:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   29ac6:	b100      	cbz	r0, 29aca <add_event+0x24>
   29ac8:	3860      	subs	r0, #96	; 0x60
   29aca:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   29ace:	4639      	mov	r1, r7
   29ad0:	f7ff ff61 	bl	29996 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   29ad4:	2800      	cmp	r0, #0
   29ad6:	dced      	bgt.n	29ab4 <add_event+0xe>
	return list->head == list;
   29ad8:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29ada:	42b4      	cmp	r4, r6
   29adc:	d0ea      	beq.n	29ab4 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   29ade:	2e00      	cmp	r6, #0
   29ae0:	d0e8      	beq.n	29ab4 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   29ae2:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   29ae4:	b101      	cbz	r1, 29ae8 <add_event+0x42>
   29ae6:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   29ae8:	4638      	mov	r0, r7
   29aea:	f7ff ff54 	bl	29996 <z_sched_prio_cmp>
   29aee:	2800      	cmp	r0, #0
   29af0:	dd05      	ble.n	29afe <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   29af2:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   29af4:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   29af8:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   29afa:	6075      	str	r5, [r6, #4]
}
   29afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   29afe:	6863      	ldr	r3, [r4, #4]
   29b00:	429e      	cmp	r6, r3
   29b02:	d0d7      	beq.n	29ab4 <add_event+0xe>
   29b04:	6836      	ldr	r6, [r6, #0]
   29b06:	e7ea      	b.n	29ade <add_event+0x38>

00029b08 <signal_poll_event>:
{
   29b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   29b0c:	6884      	ldr	r4, [r0, #8]
{
   29b0e:	4605      	mov	r5, r0
   29b10:	460e      	mov	r6, r1
	if (poller != NULL) {
   29b12:	b144      	cbz	r4, 29b26 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   29b14:	7863      	ldrb	r3, [r4, #1]
   29b16:	2b01      	cmp	r3, #1
   29b18:	d12e      	bne.n	29b78 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   29b1a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   29b1e:	f013 0302 	ands.w	r3, r3, #2
   29b22:	d10a      	bne.n	29b3a <signal_poll_event+0x32>
		poller->is_polling = false;
   29b24:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   29b26:	68eb      	ldr	r3, [r5, #12]
   29b28:	f3c3 3286 	ubfx	r2, r3, #14, #7
   29b2c:	4316      	orrs	r6, r2
	event->poller = NULL;
   29b2e:	2000      	movs	r0, #0
	event->state |= state;
   29b30:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   29b34:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   29b36:	60eb      	str	r3, [r5, #12]
	return retcode;
   29b38:	e03e      	b.n	29bb8 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   29b3a:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   29b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
   29b42:	bf08      	it	eq
   29b44:	f112 0f02 	cmneq.w	r2, #2
   29b48:	d032      	beq.n	29bb0 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   29b4a:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   29b4e:	4640      	mov	r0, r8
   29b50:	f7f8 fd6c 	bl	2262c <z_unpend_thread>
	arch_thread_return_value_set(thread,
   29b54:	2e08      	cmp	r6, #8
   29b56:	bf0c      	ite	eq
   29b58:	f06f 0303 	mvneq.w	r3, #3
   29b5c:	2300      	movne	r3, #0
   29b5e:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   29b60:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   29b64:	06db      	lsls	r3, r3, #27
   29b66:	d109      	bne.n	29b7c <signal_poll_event+0x74>
   29b68:	f854 7c48 	ldr.w	r7, [r4, #-72]
   29b6c:	b937      	cbnz	r7, 29b7c <signal_poll_event+0x74>
	z_ready_thread(thread);
   29b6e:	4640      	mov	r0, r8
   29b70:	f7f8 f882 	bl	21c78 <z_ready_thread>
		poller->is_polling = false;
   29b74:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   29b76:	e7d6      	b.n	29b26 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   29b78:	2b02      	cmp	r3, #2
   29b7a:	d001      	beq.n	29b80 <signal_poll_event+0x78>
		poller->is_polling = false;
   29b7c:	2300      	movs	r3, #0
   29b7e:	e7d1      	b.n	29b24 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   29b80:	7823      	ldrb	r3, [r4, #0]
   29b82:	2b00      	cmp	r3, #0
   29b84:	d0cf      	beq.n	29b26 <signal_poll_event+0x1e>
   29b86:	f854 7c04 	ldr.w	r7, [r4, #-4]
   29b8a:	2f00      	cmp	r7, #0
   29b8c:	d0f2      	beq.n	29b74 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   29b8e:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   29b92:	f1a4 0914 	sub.w	r9, r4, #20
   29b96:	f104 0014 	add.w	r0, r4, #20
   29b9a:	f7f9 fa5b 	bl	23054 <z_abort_timeout>
		twork->poll_result = 0;
   29b9e:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   29ba2:	4649      	mov	r1, r9
   29ba4:	4638      	mov	r0, r7
   29ba6:	f7f7 fc85 	bl	214b4 <z_work_submit_to_queue>
		poller->is_polling = false;
   29baa:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   29bae:	e7ba      	b.n	29b26 <signal_poll_event+0x1e>
		poller->is_polling = false;
   29bb0:	2300      	movs	r3, #0
   29bb2:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   29bb4:	f06f 000a 	mvn.w	r0, #10
}
   29bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00029bbc <z_handle_obj_poll_events>:
{
   29bbc:	4603      	mov	r3, r0
	return list->head == list;
   29bbe:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   29bc0:	4283      	cmp	r3, r0
   29bc2:	d008      	beq.n	29bd6 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   29bc4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   29bc8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   29bca:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   29bcc:	2300      	movs	r3, #0
	node->prev = NULL;
   29bce:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   29bd2:	f7ff bf99 	b.w	29b08 <signal_poll_event>
}
   29bd6:	4770      	bx	lr

00029bd8 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   29bd8:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   29bda:	e9c0 0000 	strd	r0, r0, [r0]
   29bde:	6083      	str	r3, [r0, #8]
}
   29be0:	4770      	bx	lr

00029be2 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   29be2:	2300      	movs	r3, #0
   29be4:	6083      	str	r3, [r0, #8]
}
   29be6:	4770      	bx	lr

00029be8 <k_free>:
	if (ptr != NULL) {
   29be8:	b120      	cbz	r0, 29bf4 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   29bea:	1f01      	subs	r1, r0, #4
   29bec:	f850 0c04 	ldr.w	r0, [r0, #-4]
   29bf0:	f7f6 bc2a 	b.w	20448 <k_heap_free>
}
   29bf4:	4770      	bx	lr

00029bf6 <k_malloc>:
{
   29bf6:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   29bf8:	2004      	movs	r0, #4
   29bfa:	f7fa b81d 	b.w	23c38 <k_aligned_alloc>

00029bfe <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   29bfe:	4770      	bx	lr
