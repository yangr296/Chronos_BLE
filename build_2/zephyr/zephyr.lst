
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
LOG_MODULE_REGISTER(bt_data);

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   0:	80 75 00 20 a5 54 01 00 f7 49 02 00 79 54 01 00     .u. .T...I..yT..
	while (ad->len > 1) {
  10:	79 54 01 00 79 54 01 00 79 54 01 00 00 00 00 00     yT..yT..yT......
	...
			/* Early termination */
			return;
		}

		if (len > ad->len) {
			LOG_WRN("malformed advertising data %u / %u",
  2c:	31 4c 01 00 79 54 01 00 00 00 00 00 a1 4b 01 00     1L..yT.......K..
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
  3c:	79 54 01 00                                         yT..

00000040 <_irq_vector_table>:
  40:	a1 4d 01 00 71 67 02 00 a1 4d 01 00 a1 4d 01 00     .M..qg...M...M..
				len, ad->len);
			return;
		}

		data.type = net_buf_simple_pull_u8(ad);
  50:	a1 4d 01 00 a1 4d 01 00 a1 4d 01 00 a1 4d 01 00     .M...M...M...M..
		data.data_len = len - 1;
		data.data = ad->data;
  60:	41 67 02 00 a1 4d 01 00 a1 4d 01 00 5b 67 02 00     Ag...M...M..[g..

		if (!func(&data, user_data)) {
			return;
		}

		net_buf_simple_pull(ad, len - 1);
  70:	a1 4d 01 00 a1 4d 01 00 a1 4d 01 00 a1 4d 01 00     .M...M...M...M..

    nrfx_err_t err_code = NRFX_SUCCESS;

    // EasyDMA requires that transfer buffers are placed in DataRAM,
    // signal error if the are not.
    if (!nrf_dma_accessible_check(p_instance->p_reg, p_data))
  80:	a1 4d 01 00 a1 4d 01 00 a1 4d 01 00 a1 4d 01 00     .M...M...M...M..
    return p_reg->INTENSET & mask;
}

NRF_STATIC_INLINE void nrf_uarte_int_disable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
  90:	a1 4d 01 00 a1 4d 01 00 a1 4d 01 00 a1 4d 01 00     .M...M...M...M..
    p_reg->INTENSET = mask;
  a0:	a1 4d 01 00 a1 4d 01 00 a1 4d 01 00 a1 4d 01 00     .M...M...M...M..
        p_cb->rx_secondary_buffer_length = length;
    }

    NRFX_LOG_INFO("Transfer rx_len: %d.", length);

    nrfy_uarte_event_clear(p_instance->p_reg, NRF_UARTE_EVENT_ENDRX);
  b0:	a1 4d 01 00 a1 4d 01 00 a1 4d 01 00 a1 4d 01 00     .M...M...M...M..
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
  c0:	a1 4d 01 00 a1 4d 01 00 a1 4d 01 00 a1 4d 01 00     .M...M...M...M..
    nrfy_uarte_event_clear(p_instance->p_reg, NRF_UARTE_EVENT_RXTO);
    nrfy_uarte_rx_buffer_set(p_instance->p_reg, p_data, length);
    uint32_t evt_mask = 0;
    if (second_buffer)
  d0:	a1 4d 01 00 a1 4d 01 00 a1 4d 01 00                 .M...M...M..

Disassembly of section text:

000000e0 <__aeabi_drsub>:
        };

        evt_mask = nrfy_uarte_rx_start(p_instance->p_reg, !p_cb->handler ? &xfer_desc : NULL);
    }

    if (p_cb->handler == NULL)
      e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    {
        p_cb->rx_buffer_length = 0;
      e4:	e002      	b.n	ec <__adddf3>
    nrfx_err_t err_code = NRFX_SUCCESS;
      e6:	bf00      	nop

000000e8 <__aeabi_dsub>:
      e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000000ec <__adddf3>:
        p_cb->p_rx_secondary_buffer = p_data;
      ec:	b530      	push	{r4, r5, lr}
        second_buffer = true;
      ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
        evt_mask = nrfy_uarte_rx_start(p_instance->p_reg, !p_cb->handler ? &xfer_desc : NULL);
      f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
      f6:	ea94 0f05 	teq	r4, r5
    if (p_cb->handler == NULL)
      fa:	bf08      	it	eq
 */
NRFY_STATIC_INLINE uint32_t nrfy_uarte_events_process(NRF_UARTE_Type *               p_reg,
                                                      uint32_t                       mask,
                                                      nrfy_uarte_xfer_desc_t const * p_xfer)
{
    uint32_t evt_mask = __nrfy_internal_uarte_events_process(p_reg, mask, p_xfer);
      fc:	ea90 0f02 	teqeq	r0, r2
     100:	bf1f      	itttt	ne
     102:	ea54 0c00 	orrsne.w	ip, r4, r0
                        NRFY_EVENT_TO_INT_BITMASK(NRF_UARTE_EVENT_RXTO)  |
                        NRFY_EVENT_TO_INT_BITMASK(NRF_UARTE_EVENT_ERROR);
        nrf_barrier_w();
        do {
            evt_mask = nrfy_uarte_events_process(p_reg, mask, p_xfer);
        } while (!evt_mask);
     106:	ea55 0c02 	orrsne.w	ip, r5, r2
     10a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     10e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21

        if (evt_mask & NRFY_EVENT_TO_INT_BITMASK(NRF_UARTE_EVENT_ERROR))
        {
            err_code = NRFX_ERROR_INTERNAL;
     112:	f000 80e2 	beq.w	2da <CONFIG_FLASH_SIZE+0xda>
     116:	ea4f 5454 	mov.w	r4, r4, lsr #21
     11a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
        }

        if (evt_mask & NRFY_EVENT_TO_INT_BITMASK(NRF_UARTE_EVENT_RXTO))
        {
            err_code = NRFX_ERROR_FORBIDDEN;
     11e:	bfb8      	it	lt
     120:	426d      	neglt	r5, r5
     122:	dd0c      	ble.n	13e <CONFIG_KOBJECT_TEXT_AREA+0x3e>
     124:	442c      	add	r4, r5
     126:	ea80 0202 	eor.w	r2, r0, r2
     12a:	ea81 0303 	eor.w	r3, r1, r3
        }
    }
    else
    {
        p_cb->rx_aborted = false;
     12e:	ea82 0000 	eor.w	r0, r2, r0
        nrfy_uarte_int_enable(p_instance->p_reg, NRF_UARTE_INT_ERROR_MASK |
     132:	ea83 0101 	eor.w	r1, r3, r1
    p_reg->INTENSET = mask;
     136:	ea80 0202 	eor.w	r2, r0, r2
     13a:	ea81 0303 	eor.w	r3, r1, r3
        return err_code;
     13e:	2d36      	cmp	r5, #54	; 0x36
     140:	bf88      	it	hi
     142:	bd30      	pophi	{r4, r5, pc}
     144:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     148:	ea4f 3101 	mov.w	r1, r1, lsl #12
     14c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     150:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     154:	d002      	beq.n	15c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x12>
     156:	4240      	negs	r0, r0
     158:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     15c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     160:	ea4f 3303 	mov.w	r3, r3, lsl #12
     164:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     168:	d002      	beq.n	170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     16a:	4252      	negs	r2, r2
     16c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     170:	ea94 0f05 	teq	r4, r5
     174:	f000 80a7 	beq.w	2c6 <CONFIG_FLASH_SIZE+0xc6>
     178:	f1a4 0401 	sub.w	r4, r4, #1
     17c:	f1d5 0e20 	rsbs	lr, r5, #32
     180:	db0d      	blt.n	19e <CONFIG_BT_PERIPHERAL_PREF_TIMEOUT+0xe>
     182:	fa02 fc0e 	lsl.w	ip, r2, lr
     186:	fa22 f205 	lsr.w	r2, r2, r5
     18a:	1880      	adds	r0, r0, r2
     18c:	f141 0100 	adc.w	r1, r1, #0
     190:	fa03 f20e 	lsl.w	r2, r3, lr
     194:	1880      	adds	r0, r0, r2
     196:	fa43 f305 	asr.w	r3, r3, r5
     19a:	4159      	adcs	r1, r3
     19c:	e00e      	b.n	1bc <CONFIG_BT_PERIPHERAL_PREF_TIMEOUT+0x2c>
     19e:	f1a5 0520 	sub.w	r5, r5, #32
     1a2:	f10e 0e20 	add.w	lr, lr, #32
     1a6:	2a01      	cmp	r2, #1
     1a8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1ac:	bf28      	it	cs
     1ae:	f04c 0c02 	orrcs.w	ip, ip, #2
     1b2:	fa43 f305 	asr.w	r3, r3, r5
     1b6:	18c0      	adds	r0, r0, r3
     1b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1c0:	d507      	bpl.n	1d2 <CONFIG_BT_PERIPHERAL_PREF_TIMEOUT+0x42>
     1c2:	f04f 0e00 	mov.w	lr, #0
     1c6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ca:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ce:	eb6e 0101 	sbc.w	r1, lr, r1
     1d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1d6:	d31b      	bcc.n	210 <CONFIG_FLASH_SIZE+0x10>
     1d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1dc:	d30c      	bcc.n	1f8 <CONFIG_BT_PERIPHERAL_PREF_TIMEOUT+0x68>
     1de:	0849      	lsrs	r1, r1, #1
     1e0:	ea5f 0030 	movs.w	r0, r0, rrx
     1e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     1e8:	f104 0401 	add.w	r4, r4, #1
     1ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
     1f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     1f4:	f080 809a 	bcs.w	32c <CONFIG_BT_PERIPHERAL_PREF_MAX_INT+0xc>
     1f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     1fc:	bf08      	it	eq
     1fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     202:	f150 0000 	adcs.w	r0, r0, #0
     206:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     20a:	ea41 0105 	orr.w	r1, r1, r5
     20e:	bd30      	pop	{r4, r5, pc}
     210:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     214:	4140      	adcs	r0, r0
     216:	eb41 0101 	adc.w	r1, r1, r1
     21a:	3c01      	subs	r4, #1
     21c:	bf28      	it	cs
     21e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     222:	d2e9      	bcs.n	1f8 <CONFIG_BT_PERIPHERAL_PREF_TIMEOUT+0x68>
     224:	f091 0f00 	teq	r1, #0
     228:	bf04      	itt	eq
     22a:	4601      	moveq	r1, r0
     22c:	2000      	moveq	r0, #0
     22e:	fab1 f381 	clz	r3, r1
     232:	bf08      	it	eq
     234:	3320      	addeq	r3, #32
     236:	f1a3 030b 	sub.w	r3, r3, #11
     23a:	f1b3 0220 	subs.w	r2, r3, #32
     23e:	da0c      	bge.n	25a <CONFIG_FLASH_SIZE+0x5a>
     240:	320c      	adds	r2, #12
     242:	dd08      	ble.n	256 <CONFIG_FLASH_SIZE+0x56>
     244:	f102 0c14 	add.w	ip, r2, #20
     248:	f1c2 020c 	rsb	r2, r2, #12
     24c:	fa01 f00c 	lsl.w	r0, r1, ip
     250:	fa21 f102 	lsr.w	r1, r1, r2
     254:	e00c      	b.n	270 <CONFIG_FLASH_SIZE+0x70>
     256:	f102 0214 	add.w	r2, r2, #20
     25a:	bfd8      	it	le
     25c:	f1c2 0c20 	rsble	ip, r2, #32
     260:	fa01 f102 	lsl.w	r1, r1, r2
     264:	fa20 fc0c 	lsr.w	ip, r0, ip
     268:	bfdc      	itt	le
     26a:	ea41 010c 	orrle.w	r1, r1, ip
     26e:	4090      	lslle	r0, r2
     270:	1ae4      	subs	r4, r4, r3
     272:	bfa2      	ittt	ge
     274:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     278:	4329      	orrge	r1, r5
     27a:	bd30      	popge	{r4, r5, pc}
     27c:	ea6f 0404 	mvn.w	r4, r4
     280:	3c1f      	subs	r4, #31
     282:	da1c      	bge.n	2be <CONFIG_FLASH_SIZE+0xbe>
     284:	340c      	adds	r4, #12
     286:	dc0e      	bgt.n	2a6 <CONFIG_FLASH_SIZE+0xa6>
     288:	f104 0414 	add.w	r4, r4, #20
     28c:	f1c4 0220 	rsb	r2, r4, #32
     290:	fa20 f004 	lsr.w	r0, r0, r4
     294:	fa01 f302 	lsl.w	r3, r1, r2
     298:	ea40 0003 	orr.w	r0, r0, r3
     29c:	fa21 f304 	lsr.w	r3, r1, r4
     2a0:	ea45 0103 	orr.w	r1, r5, r3
     2a4:	bd30      	pop	{r4, r5, pc}
     2a6:	f1c4 040c 	rsb	r4, r4, #12
     2aa:	f1c4 0220 	rsb	r2, r4, #32
     2ae:	fa20 f002 	lsr.w	r0, r0, r2
     2b2:	fa01 f304 	lsl.w	r3, r1, r4
     2b6:	ea40 0003 	orr.w	r0, r0, r3
     2ba:	4629      	mov	r1, r5
     2bc:	bd30      	pop	{r4, r5, pc}
     2be:	fa21 f004 	lsr.w	r0, r1, r4
     2c2:	4629      	mov	r1, r5
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f094 0f00 	teq	r4, #0
     2ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ce:	bf06      	itte	eq
     2d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2d4:	3401      	addeq	r4, #1
     2d6:	3d01      	subne	r5, #1
     2d8:	e74e      	b.n	178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>
     2da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2de:	bf18      	it	ne
     2e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     2e4:	d029      	beq.n	33a <CONFIG_BT_PERIPHERAL_PREF_MAX_INT+0x1a>
     2e6:	ea94 0f05 	teq	r4, r5
     2ea:	bf08      	it	eq
     2ec:	ea90 0f02 	teqeq	r0, r2
     2f0:	d005      	beq.n	2fe <CONFIG_FLASH_SIZE+0xfe>
     2f2:	ea54 0c00 	orrs.w	ip, r4, r0
     2f6:	bf04      	itt	eq
     2f8:	4619      	moveq	r1, r3
     2fa:	4610      	moveq	r0, r2
     2fc:	bd30      	pop	{r4, r5, pc}
     2fe:	ea91 0f03 	teq	r1, r3
     302:	bf1e      	ittt	ne
     304:	2100      	movne	r1, #0
     306:	2000      	movne	r0, #0
     308:	bd30      	popne	{r4, r5, pc}
     30a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     30e:	d105      	bne.n	31c <CONFIG_FLASH_SIZE+0x11c>
     310:	0040      	lsls	r0, r0, #1
     312:	4149      	adcs	r1, r1
     314:	bf28      	it	cs
     316:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     31a:	bd30      	pop	{r4, r5, pc}
     31c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     320:	bf3c      	itt	cc
     322:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     326:	bd30      	popcc	{r4, r5, pc}
     328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     32c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     330:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     334:	f04f 0000 	mov.w	r0, #0
     338:	bd30      	pop	{r4, r5, pc}
     33a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     33e:	bf1a      	itte	ne
     340:	4619      	movne	r1, r3
     342:	4610      	movne	r0, r2
     344:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     348:	bf1c      	itt	ne
     34a:	460b      	movne	r3, r1
     34c:	4602      	movne	r2, r0
     34e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     352:	bf06      	itte	eq
     354:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     358:	ea91 0f03 	teqeq	r1, r3
     35c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     360:	bd30      	pop	{r4, r5, pc}
     362:	bf00      	nop

00000364 <__aeabi_ui2d>:
     364:	f090 0f00 	teq	r0, #0
     368:	bf04      	itt	eq
     36a:	2100      	moveq	r1, #0
     36c:	4770      	bxeq	lr
     36e:	b530      	push	{r4, r5, lr}
     370:	f44f 6480 	mov.w	r4, #1024	; 0x400
     374:	f104 0432 	add.w	r4, r4, #50	; 0x32
     378:	f04f 0500 	mov.w	r5, #0
     37c:	f04f 0100 	mov.w	r1, #0
     380:	e750      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     382:	bf00      	nop

00000384 <__aeabi_i2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     39c:	bf48      	it	mi
     39e:	4240      	negmi	r0, r0
     3a0:	f04f 0100 	mov.w	r1, #0
     3a4:	e73e      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     3a6:	bf00      	nop

000003a8 <__aeabi_f2d>:
     3a8:	0042      	lsls	r2, r0, #1
     3aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ae:	ea4f 0131 	mov.w	r1, r1, rrx
     3b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3b6:	bf1f      	itttt	ne
     3b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3c4:	4770      	bxne	lr
     3c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ca:	bf08      	it	eq
     3cc:	4770      	bxeq	lr
     3ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3d2:	bf04      	itt	eq
     3d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3d8:	4770      	bxeq	lr
     3da:	b530      	push	{r4, r5, lr}
     3dc:	f44f 7460 	mov.w	r4, #896	; 0x380
     3e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     3e8:	e71c      	b.n	224 <CONFIG_FLASH_SIZE+0x24>
     3ea:	bf00      	nop

000003ec <__aeabi_ul2d>:
     3ec:	ea50 0201 	orrs.w	r2, r0, r1
     3f0:	bf08      	it	eq
     3f2:	4770      	bxeq	lr
     3f4:	b530      	push	{r4, r5, lr}
     3f6:	f04f 0500 	mov.w	r5, #0
     3fa:	e00a      	b.n	412 <CONFIG_BT_NUS_THREAD_STACK_SIZE+0x12>

000003fc <__aeabi_l2d>:
     3fc:	ea50 0201 	orrs.w	r2, r0, r1
     400:	bf08      	it	eq
     402:	4770      	bxeq	lr
     404:	b530      	push	{r4, r5, lr}
     406:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     40a:	d502      	bpl.n	412 <CONFIG_BT_NUS_THREAD_STACK_SIZE+0x12>
     40c:	4240      	negs	r0, r0
     40e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     412:	f44f 6480 	mov.w	r4, #1024	; 0x400
     416:	f104 0432 	add.w	r4, r4, #50	; 0x32
     41a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     41e:	f43f aed8 	beq.w	1d2 <CONFIG_BT_PERIPHERAL_PREF_TIMEOUT+0x42>
     422:	f04f 0203 	mov.w	r2, #3
     426:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     42a:	bf18      	it	ne
     42c:	3203      	addne	r2, #3
     42e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     432:	bf18      	it	ne
     434:	3203      	addne	r2, #3
     436:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     43a:	f1c2 0320 	rsb	r3, r2, #32
     43e:	fa00 fc03 	lsl.w	ip, r0, r3
     442:	fa20 f002 	lsr.w	r0, r0, r2
     446:	fa01 fe03 	lsl.w	lr, r1, r3
     44a:	ea40 000e 	orr.w	r0, r0, lr
     44e:	fa21 f102 	lsr.w	r1, r1, r2
     452:	4414      	add	r4, r2
     454:	e6bd      	b.n	1d2 <CONFIG_BT_PERIPHERAL_PREF_TIMEOUT+0x42>
     456:	bf00      	nop

00000458 <__aeabi_dmul>:
     458:	b570      	push	{r4, r5, r6, lr}
     45a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     45e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     462:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     466:	bf1d      	ittte	ne
     468:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     46c:	ea94 0f0c 	teqne	r4, ip
     470:	ea95 0f0c 	teqne	r5, ip
     474:	f000 f8de 	bleq	634 <CONFIG_BT_HCI_TX_STACK_SIZE+0x34>
     478:	442c      	add	r4, r5
     47a:	ea81 0603 	eor.w	r6, r1, r3
     47e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     482:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     486:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     48a:	bf18      	it	ne
     48c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     490:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     498:	d038      	beq.n	50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>
     49a:	fba0 ce02 	umull	ip, lr, r0, r2
     49e:	f04f 0500 	mov.w	r5, #0
     4a2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4aa:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ae:	f04f 0600 	mov.w	r6, #0
     4b2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4b6:	f09c 0f00 	teq	ip, #0
     4ba:	bf18      	it	ne
     4bc:	f04e 0e01 	orrne.w	lr, lr, #1
     4c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4cc:	d204      	bcs.n	4d8 <__aeabi_dmul+0x80>
     4ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4d2:	416d      	adcs	r5, r5
     4d4:	eb46 0606 	adc.w	r6, r6, r6
     4d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     4e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     4e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     4e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     4ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     4f0:	bf88      	it	hi
     4f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     4f6:	d81e      	bhi.n	536 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x22>
     4f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     4fc:	bf08      	it	eq
     4fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     502:	f150 0000 	adcs.w	r0, r0, #0
     506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     50a:	bd70      	pop	{r4, r5, r6, pc}
     50c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     510:	ea46 0101 	orr.w	r1, r6, r1
     514:	ea40 0002 	orr.w	r0, r0, r2
     518:	ea81 0103 	eor.w	r1, r1, r3
     51c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     520:	bfc2      	ittt	gt
     522:	ebd4 050c 	rsbsgt	r5, r4, ip
     526:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     52a:	bd70      	popgt	{r4, r5, r6, pc}
     52c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     530:	f04f 0e00 	mov.w	lr, #0
     534:	3c01      	subs	r4, #1
     536:	f300 80ab 	bgt.w	690 <CONFIG_BT_HCI_TX_STACK_SIZE+0x90>
     53a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     53e:	bfde      	ittt	le
     540:	2000      	movle	r0, #0
     542:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     546:	bd70      	pople	{r4, r5, r6, pc}
     548:	f1c4 0400 	rsb	r4, r4, #0
     54c:	3c20      	subs	r4, #32
     54e:	da35      	bge.n	5bc <CONFIG_BT_LONG_WQ_STACK_SIZE+0xa8>
     550:	340c      	adds	r4, #12
     552:	dc1b      	bgt.n	58c <CONFIG_BT_LONG_WQ_STACK_SIZE+0x78>
     554:	f104 0414 	add.w	r4, r4, #20
     558:	f1c4 0520 	rsb	r5, r4, #32
     55c:	fa00 f305 	lsl.w	r3, r0, r5
     560:	fa20 f004 	lsr.w	r0, r0, r4
     564:	fa01 f205 	lsl.w	r2, r1, r5
     568:	ea40 0002 	orr.w	r0, r0, r2
     56c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     570:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     574:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     578:	fa21 f604 	lsr.w	r6, r1, r4
     57c:	eb42 0106 	adc.w	r1, r2, r6
     580:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     584:	bf08      	it	eq
     586:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     58a:	bd70      	pop	{r4, r5, r6, pc}
     58c:	f1c4 040c 	rsb	r4, r4, #12
     590:	f1c4 0520 	rsb	r5, r4, #32
     594:	fa00 f304 	lsl.w	r3, r0, r4
     598:	fa20 f005 	lsr.w	r0, r0, r5
     59c:	fa01 f204 	lsl.w	r2, r1, r4
     5a0:	ea40 0002 	orr.w	r0, r0, r2
     5a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5ac:	f141 0100 	adc.w	r1, r1, #0
     5b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5b4:	bf08      	it	eq
     5b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5ba:	bd70      	pop	{r4, r5, r6, pc}
     5bc:	f1c4 0520 	rsb	r5, r4, #32
     5c0:	fa00 f205 	lsl.w	r2, r0, r5
     5c4:	ea4e 0e02 	orr.w	lr, lr, r2
     5c8:	fa20 f304 	lsr.w	r3, r0, r4
     5cc:	fa01 f205 	lsl.w	r2, r1, r5
     5d0:	ea43 0302 	orr.w	r3, r3, r2
     5d4:	fa21 f004 	lsr.w	r0, r1, r4
     5d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5dc:	fa21 f204 	lsr.w	r2, r1, r4
     5e0:	ea20 0002 	bic.w	r0, r0, r2
     5e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     5e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5ec:	bf08      	it	eq
     5ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5f2:	bd70      	pop	{r4, r5, r6, pc}
     5f4:	f094 0f00 	teq	r4, #0
     5f8:	d10f      	bne.n	61a <CONFIG_BT_HCI_TX_STACK_SIZE+0x1a>
     5fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     5fe:	0040      	lsls	r0, r0, #1
     600:	eb41 0101 	adc.w	r1, r1, r1
     604:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     608:	bf08      	it	eq
     60a:	3c01      	subeq	r4, #1
     60c:	d0f7      	beq.n	5fe <CONFIG_BT_COMPANY_ID+0xd>
     60e:	ea41 0106 	orr.w	r1, r1, r6
     612:	f095 0f00 	teq	r5, #0
     616:	bf18      	it	ne
     618:	4770      	bxne	lr
     61a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     61e:	0052      	lsls	r2, r2, #1
     620:	eb43 0303 	adc.w	r3, r3, r3
     624:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3d01      	subeq	r5, #1
     62c:	d0f7      	beq.n	61e <CONFIG_BT_HCI_TX_STACK_SIZE+0x1e>
     62e:	ea43 0306 	orr.w	r3, r3, r6
     632:	4770      	bx	lr
     634:	ea94 0f0c 	teq	r4, ip
     638:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     63c:	bf18      	it	ne
     63e:	ea95 0f0c 	teqne	r5, ip
     642:	d00c      	beq.n	65e <CONFIG_BT_HCI_TX_STACK_SIZE+0x5e>
     644:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     648:	bf18      	it	ne
     64a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     64e:	d1d1      	bne.n	5f4 <CONFIG_BT_COMPANY_ID+0x3>
     650:	ea81 0103 	eor.w	r1, r1, r3
     654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     658:	f04f 0000 	mov.w	r0, #0
     65c:	bd70      	pop	{r4, r5, r6, pc}
     65e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     662:	bf06      	itte	eq
     664:	4610      	moveq	r0, r2
     666:	4619      	moveq	r1, r3
     668:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66c:	d019      	beq.n	6a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa2>
     66e:	ea94 0f0c 	teq	r4, ip
     672:	d102      	bne.n	67a <CONFIG_BT_HCI_TX_STACK_SIZE+0x7a>
     674:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     678:	d113      	bne.n	6a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa2>
     67a:	ea95 0f0c 	teq	r5, ip
     67e:	d105      	bne.n	68c <CONFIG_BT_HCI_TX_STACK_SIZE+0x8c>
     680:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     684:	bf1c      	itt	ne
     686:	4610      	movne	r0, r2
     688:	4619      	movne	r1, r3
     68a:	d10a      	bne.n	6a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa2>
     68c:	ea81 0103 	eor.w	r1, r1, r3
     690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     694:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     698:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     69c:	f04f 0000 	mov.w	r0, #0
     6a0:	bd70      	pop	{r4, r5, r6, pc}
     6a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6aa:	bd70      	pop	{r4, r5, r6, pc}

000006ac <__aeabi_ddiv>:
     6ac:	b570      	push	{r4, r5, r6, lr}
     6ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6ba:	bf1d      	ittte	ne
     6bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6c0:	ea94 0f0c 	teqne	r4, ip
     6c4:	ea95 0f0c 	teqne	r5, ip
     6c8:	f000 f8a7 	bleq	81a <CONFIG_BT_RX_STACK_SIZE+0x1a>
     6cc:	eba4 0405 	sub.w	r4, r4, r5
     6d0:	ea81 0e03 	eor.w	lr, r1, r3
     6d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6dc:	f000 8088 	beq.w	7f0 <__aeabi_ddiv+0x144>
     6e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     6e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     6e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     6ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     6f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     6f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     6f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     6fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     700:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     704:	429d      	cmp	r5, r3
     706:	bf08      	it	eq
     708:	4296      	cmpeq	r6, r2
     70a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     70e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     712:	d202      	bcs.n	71a <__aeabi_ddiv+0x6e>
     714:	085b      	lsrs	r3, r3, #1
     716:	ea4f 0232 	mov.w	r2, r2, rrx
     71a:	1ab6      	subs	r6, r6, r2
     71c:	eb65 0503 	sbc.w	r5, r5, r3
     720:	085b      	lsrs	r3, r3, #1
     722:	ea4f 0232 	mov.w	r2, r2, rrx
     726:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     72a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     72e:	ebb6 0e02 	subs.w	lr, r6, r2
     732:	eb75 0e03 	sbcs.w	lr, r5, r3
     736:	bf22      	ittt	cs
     738:	1ab6      	subcs	r6, r6, r2
     73a:	4675      	movcs	r5, lr
     73c:	ea40 000c 	orrcs.w	r0, r0, ip
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	ebb6 0e02 	subs.w	lr, r6, r2
     74a:	eb75 0e03 	sbcs.w	lr, r5, r3
     74e:	bf22      	ittt	cs
     750:	1ab6      	subcs	r6, r6, r2
     752:	4675      	movcs	r5, lr
     754:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     758:	085b      	lsrs	r3, r3, #1
     75a:	ea4f 0232 	mov.w	r2, r2, rrx
     75e:	ebb6 0e02 	subs.w	lr, r6, r2
     762:	eb75 0e03 	sbcs.w	lr, r5, r3
     766:	bf22      	ittt	cs
     768:	1ab6      	subcs	r6, r6, r2
     76a:	4675      	movcs	r5, lr
     76c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     770:	085b      	lsrs	r3, r3, #1
     772:	ea4f 0232 	mov.w	r2, r2, rrx
     776:	ebb6 0e02 	subs.w	lr, r6, r2
     77a:	eb75 0e03 	sbcs.w	lr, r5, r3
     77e:	bf22      	ittt	cs
     780:	1ab6      	subcs	r6, r6, r2
     782:	4675      	movcs	r5, lr
     784:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     788:	ea55 0e06 	orrs.w	lr, r5, r6
     78c:	d018      	beq.n	7c0 <__aeabi_ddiv+0x114>
     78e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     792:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     796:	ea4f 1606 	mov.w	r6, r6, lsl #4
     79a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     79e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7aa:	d1c0      	bne.n	72e <__aeabi_ddiv+0x82>
     7ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7b0:	d10b      	bne.n	7ca <__aeabi_ddiv+0x11e>
     7b2:	ea41 0100 	orr.w	r1, r1, r0
     7b6:	f04f 0000 	mov.w	r0, #0
     7ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7be:	e7b6      	b.n	72e <__aeabi_ddiv+0x82>
     7c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7c4:	bf04      	itt	eq
     7c6:	4301      	orreq	r1, r0
     7c8:	2000      	moveq	r0, #0
     7ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ce:	bf88      	it	hi
     7d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7d4:	f63f aeaf 	bhi.w	536 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x22>
     7d8:	ebb5 0c03 	subs.w	ip, r5, r3
     7dc:	bf04      	itt	eq
     7de:	ebb6 0c02 	subseq.w	ip, r6, r2
     7e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     7e6:	f150 0000 	adcs.w	r0, r0, #0
     7ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     7ee:	bd70      	pop	{r4, r5, r6, pc}
     7f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     7f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     7f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     7fc:	bfc2      	ittt	gt
     7fe:	ebd4 050c 	rsbsgt	r5, r4, ip
     802:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     806:	bd70      	popgt	{r4, r5, r6, pc}
     808:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     80c:	f04f 0e00 	mov.w	lr, #0
     810:	3c01      	subs	r4, #1
     812:	e690      	b.n	536 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x22>
     814:	ea45 0e06 	orr.w	lr, r5, r6
     818:	e68d      	b.n	536 <CONFIG_BT_LONG_WQ_STACK_SIZE+0x22>
     81a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     81e:	ea94 0f0c 	teq	r4, ip
     822:	bf08      	it	eq
     824:	ea95 0f0c 	teqeq	r5, ip
     828:	f43f af3b 	beq.w	6a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa2>
     82c:	ea94 0f0c 	teq	r4, ip
     830:	d10a      	bne.n	848 <CONFIG_BT_RX_STACK_SIZE+0x48>
     832:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     836:	f47f af34 	bne.w	6a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa2>
     83a:	ea95 0f0c 	teq	r5, ip
     83e:	f47f af25 	bne.w	68c <CONFIG_BT_HCI_TX_STACK_SIZE+0x8c>
     842:	4610      	mov	r0, r2
     844:	4619      	mov	r1, r3
     846:	e72c      	b.n	6a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa2>
     848:	ea95 0f0c 	teq	r5, ip
     84c:	d106      	bne.n	85c <CONFIG_BT_RX_STACK_SIZE+0x5c>
     84e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     852:	f43f aefd 	beq.w	650 <CONFIG_BT_HCI_TX_STACK_SIZE+0x50>
     856:	4610      	mov	r0, r2
     858:	4619      	mov	r1, r3
     85a:	e722      	b.n	6a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa2>
     85c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     860:	bf18      	it	ne
     862:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     866:	f47f aec5 	bne.w	5f4 <CONFIG_BT_COMPANY_ID+0x3>
     86a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     86e:	f47f af0d 	bne.w	68c <CONFIG_BT_HCI_TX_STACK_SIZE+0x8c>
     872:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     876:	f47f aeeb 	bne.w	650 <CONFIG_BT_HCI_TX_STACK_SIZE+0x50>
     87a:	e712      	b.n	6a2 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa2>

0000087c <__aeabi_uldivmod>:
     87c:	b953      	cbnz	r3, 894 <__z_interrupt_stack_SIZEOF+0x14>
     87e:	b94a      	cbnz	r2, 894 <__z_interrupt_stack_SIZEOF+0x14>
     880:	2900      	cmp	r1, #0
     882:	bf08      	it	eq
     884:	2800      	cmpeq	r0, #0
     886:	bf1c      	itt	ne
     888:	f04f 31ff 	movne.w	r1, #4294967295
     88c:	f04f 30ff 	movne.w	r0, #4294967295
     890:	f000 b80c 	b.w	8ac <__aeabi_idiv0>
     894:	f1ad 0c08 	sub.w	ip, sp, #8
     898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     89c:	f00c f8b4 	bl	ca08 <__udivmoddi4>
     8a0:	f8dd e004 	ldr.w	lr, [sp, #4]
     8a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     8a8:	b004      	add	sp, #16
     8aa:	4770      	bx	lr

000008ac <__aeabi_idiv0>:
     8ac:	4770      	bx	lr
     8ae:	bf00      	nop

000008b0 <ocrypto_bigint_add256>:
     8b0:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     8b4:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     8b8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     8bc:	185b      	adds	r3, r3, r1
     8be:	eb54 040c 	adcs.w	r4, r4, ip
     8c2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     8c6:	414d      	adcs	r5, r1
     8c8:	eb56 060c 	adcs.w	r6, r6, ip
     8cc:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     8d0:	414f      	adcs	r7, r1
     8d2:	eb58 080c 	adcs.w	r8, r8, ip
     8d6:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     8da:	eb59 0901 	adcs.w	r9, r9, r1
     8de:	eb5a 0a0c 	adcs.w	sl, sl, ip
     8e2:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     8e6:	4180      	sbcs	r0, r0
     8e8:	3001      	adds	r0, #1
     8ea:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     8ee:	4770      	bx	lr

000008f0 <ocrypto_bigint_sub256>:
     8f0:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     8f4:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     8f8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     8fc:	1a5b      	subs	r3, r3, r1
     8fe:	eb74 040c 	sbcs.w	r4, r4, ip
     902:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     906:	418d      	sbcs	r5, r1
     908:	eb76 060c 	sbcs.w	r6, r6, ip
     90c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     910:	418f      	sbcs	r7, r1
     912:	eb78 080c 	sbcs.w	r8, r8, ip
     916:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     91a:	eb79 0901 	sbcs.w	r9, r9, r1
     91e:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     922:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     926:	4180      	sbcs	r0, r0
     928:	4240      	negs	r0, r0
     92a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     92e:	4770      	bx	lr

00000930 <ocrypto_bigint_cadd256>:
     930:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     934:	4252      	negs	r2, r2
     936:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     93a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     93e:	4017      	ands	r7, r2
     940:	19db      	adds	r3, r3, r7
     942:	ea18 0802 	ands.w	r8, r8, r2
     946:	eb54 0408 	adcs.w	r4, r4, r8
     94a:	ea19 0902 	ands.w	r9, r9, r2
     94e:	eb55 0509 	adcs.w	r5, r5, r9
     952:	ea1a 0a02 	ands.w	sl, sl, r2
     956:	eb56 060a 	adcs.w	r6, r6, sl
     95a:	c078      	stmia	r0!, {r3, r4, r5, r6}
     95c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     960:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     964:	4017      	ands	r7, r2
     966:	417b      	adcs	r3, r7
     968:	ea18 0802 	ands.w	r8, r8, r2
     96c:	eb54 0408 	adcs.w	r4, r4, r8
     970:	ea19 0902 	ands.w	r9, r9, r2
     974:	eb55 0509 	adcs.w	r5, r5, r9
     978:	ea1a 0a02 	ands.w	sl, sl, r2
     97c:	eb56 060a 	adcs.w	r6, r6, sl
     980:	c078      	stmia	r0!, {r3, r4, r5, r6}
     982:	4180      	sbcs	r0, r0
     984:	3001      	adds	r0, #1
     986:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     98a:	4770      	bx	lr

0000098c <ocrypto_bigint_csub256>:
     98c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     990:	4252      	negs	r2, r2
     992:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     996:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     99a:	4017      	ands	r7, r2
     99c:	1bdb      	subs	r3, r3, r7
     99e:	ea18 0802 	ands.w	r8, r8, r2
     9a2:	eb74 0408 	sbcs.w	r4, r4, r8
     9a6:	ea19 0902 	ands.w	r9, r9, r2
     9aa:	eb75 0509 	sbcs.w	r5, r5, r9
     9ae:	ea1a 0a02 	ands.w	sl, sl, r2
     9b2:	eb76 060a 	sbcs.w	r6, r6, sl
     9b6:	c078      	stmia	r0!, {r3, r4, r5, r6}
     9b8:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     9bc:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     9c0:	4017      	ands	r7, r2
     9c2:	41bb      	sbcs	r3, r7
     9c4:	ea18 0802 	ands.w	r8, r8, r2
     9c8:	eb74 0408 	sbcs.w	r4, r4, r8
     9cc:	ea19 0902 	ands.w	r9, r9, r2
     9d0:	eb75 0509 	sbcs.w	r5, r5, r9
     9d4:	ea1a 0a02 	ands.w	sl, sl, r2
     9d8:	eb76 060a 	sbcs.w	r6, r6, sl
     9dc:	c078      	stmia	r0!, {r3, r4, r5, r6}
     9de:	4180      	sbcs	r0, r0
     9e0:	4240      	negs	r0, r0
     9e2:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     9e6:	4770      	bx	lr

000009e8 <ocrypto_bigint_cswap256>:
     9e8:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
     9ec:	4252      	negs	r2, r2
     9ee:	f04f 0804 	mov.w	r8, #4

000009f2 <cswap256_loop>:
     9f2:	e890 0030 	ldmia.w	r0, {r4, r5}
     9f6:	e891 00c0 	ldmia.w	r1, {r6, r7}
     9fa:	1ba3      	subs	r3, r4, r6
     9fc:	4013      	ands	r3, r2
     9fe:	1ae4      	subs	r4, r4, r3
     a00:	18f6      	adds	r6, r6, r3
     a02:	1beb      	subs	r3, r5, r7
     a04:	4013      	ands	r3, r2
     a06:	1aed      	subs	r5, r5, r3
     a08:	18ff      	adds	r7, r7, r3
     a0a:	c030      	stmia	r0!, {r4, r5}
     a0c:	c1c0      	stmia	r1!, {r6, r7}
     a0e:	f1b8 0801 	subs.w	r8, r8, #1
     a12:	d1ee      	bne.n	9f2 <cswap256_loop>
     a14:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
     a18:	4770      	bx	lr
     a1a:	bf00      	nop

00000a1c <ocrypto_mul256_noframe>:
     a1c:	b500      	push	{lr}
     a1e:	ec92 0a08 	vldmia	r2, {s0-s7}
     a22:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
     a26:	ee07 1a10 	vmov	s14, r1
     a2a:	ec53 2a10 	vmov	r2, r3, s0, s1
     a2e:	ec56 4a11 	vmov	r4, r6, s2, s3
     a32:	fba7 5102 	umull	r5, r1, r7, r2
     a36:	fba8 0b02 	umull	r0, fp, r8, r2
     a3a:	fbe7 1063 	umaal	r1, r0, r7, r3
     a3e:	fbe9 b062 	umaal	fp, r0, r9, r2
     a42:	ec41 5a14 	vmov	s8, s9, r5, r1
     a46:	fba8 5103 	umull	r5, r1, r8, r3
     a4a:	fbea 0162 	umaal	r0, r1, sl, r2
     a4e:	fbe7 b564 	umaal	fp, r5, r7, r4
     a52:	fbe7 0566 	umaal	r0, r5, r7, r6
     a56:	fbe8 1566 	umaal	r1, r5, r8, r6
     a5a:	ee05 ba10 	vmov	s10, fp
     a5e:	fba9 b603 	umull	fp, r6, r9, r3
     a62:	fbea 1663 	umaal	r1, r6, sl, r3
     a66:	fbec 5663 	umaal	r5, r6, ip, r3
     a6a:	fbe8 0b64 	umaal	r0, fp, r8, r4
     a6e:	fbe9 1b64 	umaal	r1, fp, r9, r4
     a72:	fbea 5b64 	umaal	r5, fp, sl, r4
     a76:	fbec 6b64 	umaal	r6, fp, ip, r4
     a7a:	ee05 0a90 	vmov	s11, r0
     a7e:	fbac 3002 	umull	r3, r0, ip, r2
     a82:	ee12 4a10 	vmov	r4, s4
     a86:	fbee 5062 	umaal	r5, r0, lr, r2
     a8a:	fbe9 6064 	umaal	r6, r0, r9, r4
     a8e:	fbea b064 	umaal	fp, r0, sl, r4
     a92:	fbe7 3164 	umaal	r3, r1, r7, r4
     a96:	fbe8 5164 	umaal	r5, r1, r8, r4
     a9a:	ee12 4a90 	vmov	r4, s5
     a9e:	fbe8 6164 	umaal	r6, r1, r8, r4
     aa2:	fbe9 b164 	umaal	fp, r1, r9, r4
     aa6:	fbea 0164 	umaal	r0, r1, sl, r4
     aaa:	ee06 3a10 	vmov	s12, r3
     aae:	fba7 3204 	umull	r3, r2, r7, r4
     ab2:	ee13 4a10 	vmov	r4, s6
     ab6:	fbe7 6264 	umaal	r6, r2, r7, r4
     aba:	fbe8 b264 	umaal	fp, r2, r8, r4
     abe:	fbe9 0264 	umaal	r0, r2, r9, r4
     ac2:	fbea 1264 	umaal	r1, r2, sl, r4
     ac6:	ee11 4a90 	vmov	r4, s3
     aca:	fbe9 5364 	umaal	r5, r3, r9, r4
     ace:	fbea 6364 	umaal	r6, r3, sl, r4
     ad2:	ee13 4a90 	vmov	r4, s7
     ad6:	fbe7 b364 	umaal	fp, r3, r7, r4
     ada:	fbe8 0364 	umaal	r0, r3, r8, r4
     ade:	fbe9 1364 	umaal	r1, r3, r9, r4
     ae2:	fbea 2364 	umaal	r2, r3, sl, r4
     ae6:	ee06 5a90 	vmov	s13, r5
     aea:	ee17 9a10 	vmov	r9, s14
     aee:	e899 0600 	ldmia.w	r9, {r9, sl}
     af2:	ee10 8a10 	vmov	r8, s0
     af6:	fba9 5408 	umull	r5, r4, r9, r8
     afa:	fbea b468 	umaal	fp, r4, sl, r8
     afe:	ee12 8a10 	vmov	r8, s4
     b02:	fbec 0468 	umaal	r0, r4, ip, r8
     b06:	fbee 1468 	umaal	r1, r4, lr, r8
     b0a:	fbe9 2468 	umaal	r2, r4, r9, r8
     b0e:	fbea 3468 	umaal	r3, r4, sl, r8
     b12:	ee10 8a90 	vmov	r8, s1
     b16:	fbee 6568 	umaal	r6, r5, lr, r8
     b1a:	fbe9 b568 	umaal	fp, r5, r9, r8
     b1e:	fbea 0568 	umaal	r0, r5, sl, r8
     b22:	ee12 8a90 	vmov	r8, s5
     b26:	fbec 1568 	umaal	r1, r5, ip, r8
     b2a:	fbee 2568 	umaal	r2, r5, lr, r8
     b2e:	fbe9 3568 	umaal	r3, r5, r9, r8
     b32:	fbea 4568 	umaal	r4, r5, sl, r8
     b36:	ee07 6a10 	vmov	s14, r6
     b3a:	ee11 8a10 	vmov	r8, s2
     b3e:	fbae 7608 	umull	r7, r6, lr, r8
     b42:	fbe9 0668 	umaal	r0, r6, r9, r8
     b46:	fbea 1668 	umaal	r1, r6, sl, r8
     b4a:	ee13 8a10 	vmov	r8, s6
     b4e:	fbec 2668 	umaal	r2, r6, ip, r8
     b52:	fbee 3668 	umaal	r3, r6, lr, r8
     b56:	fbe9 4668 	umaal	r4, r6, r9, r8
     b5a:	fbea 5668 	umaal	r5, r6, sl, r8
     b5e:	ee11 8a90 	vmov	r8, s3
     b62:	fbec b768 	umaal	fp, r7, ip, r8
     b66:	fbee 0768 	umaal	r0, r7, lr, r8
     b6a:	fbe9 1768 	umaal	r1, r7, r9, r8
     b6e:	fbea 2768 	umaal	r2, r7, sl, r8
     b72:	ee13 8a90 	vmov	r8, s7
     b76:	fbec 3768 	umaal	r3, r7, ip, r8
     b7a:	fbee 4768 	umaal	r4, r7, lr, r8
     b7e:	fbe9 5768 	umaal	r5, r7, r9, r8
     b82:	fbea 6768 	umaal	r6, r7, sl, r8
     b86:	bd00      	pop	{pc}

00000b88 <ocrypto_bigint_mul256>:
     b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b8c:	ee07 0a90 	vmov	s15, r0
     b90:	f7ff ff44 	bl	a1c <ocrypto_mul256_noframe>
     b94:	ee17 8a90 	vmov	r8, s15
     b98:	ee07 ba90 	vmov	s15, fp
     b9c:	eca8 4a08 	vstmia	r8!, {s8-s15}
     ba0:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000ba8 <ocrypto_sqr256_noframe>:
     ba8:	b500      	push	{lr}
     baa:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
     bae:	fba3 5203 	umull	r5, r2, r3, r3
     bb2:	fba3 0104 	umull	r0, r1, r3, r4
     bb6:	fbe3 2064 	umaal	r2, r0, r3, r4
     bba:	fbe3 1067 	umaal	r1, r0, r3, r7
     bbe:	ec42 5a14 	vmov	s8, s9, r5, r2
     bc2:	fba3 5207 	umull	r5, r2, r3, r7
     bc6:	fbe3 0268 	umaal	r0, r2, r3, r8
     bca:	fbe4 1564 	umaal	r1, r5, r4, r4
     bce:	fbe3 0568 	umaal	r0, r5, r3, r8
     bd2:	fbe3 2569 	umaal	r2, r5, r3, r9
     bd6:	fba4 b607 	umull	fp, r6, r4, r7
     bda:	fbe3 2669 	umaal	r2, r6, r3, r9
     bde:	fbe3 566a 	umaal	r5, r6, r3, sl
     be2:	fbe4 0b67 	umaal	r0, fp, r4, r7
     be6:	fbe4 2b68 	umaal	r2, fp, r4, r8
     bea:	fbe3 5b6a 	umaal	r5, fp, r3, sl
     bee:	fbe3 6b6c 	umaal	r6, fp, r3, ip
     bf2:	ec40 1a15 	vmov	s10, s11, r1, r0
     bf6:	fba4 1008 	umull	r1, r0, r4, r8
     bfa:	fbe4 5069 	umaal	r5, r0, r4, r9
     bfe:	fbe3 606c 	umaal	r6, r0, r3, ip
     c02:	fbe3 b06e 	umaal	fp, r0, r3, lr
     c06:	fbe7 2167 	umaal	r2, r1, r7, r7
     c0a:	fbe4 5169 	umaal	r5, r1, r4, r9
     c0e:	fbe4 616a 	umaal	r6, r1, r4, sl
     c12:	fbe3 b16e 	umaal	fp, r1, r3, lr
     c16:	fbe4 016e 	umaal	r0, r1, r4, lr
     c1a:	ee06 2a10 	vmov	s12, r2
     c1e:	fba7 3208 	umull	r3, r2, r7, r8
     c22:	fbe4 626a 	umaal	r6, r2, r4, sl
     c26:	fbe4 b26c 	umaal	fp, r2, r4, ip
     c2a:	fbe4 026e 	umaal	r0, r2, r4, lr
     c2e:	fbe7 126e 	umaal	r1, r2, r7, lr
     c32:	fbe7 5368 	umaal	r5, r3, r7, r8
     c36:	fbe7 6369 	umaal	r6, r3, r7, r9
     c3a:	fbe4 b36c 	umaal	fp, r3, r4, ip
     c3e:	fbe7 036c 	umaal	r0, r3, r7, ip
     c42:	fbe7 136e 	umaal	r1, r3, r7, lr
     c46:	fbe8 236e 	umaal	r2, r3, r8, lr
     c4a:	ee06 5a90 	vmov	s13, r5
     c4e:	fba7 5409 	umull	r5, r4, r7, r9
     c52:	fbe7 b46a 	umaal	fp, r4, r7, sl
     c56:	fbe7 046c 	umaal	r0, r4, r7, ip
     c5a:	fbe8 146c 	umaal	r1, r4, r8, ip
     c5e:	fbe8 246e 	umaal	r2, r4, r8, lr
     c62:	fbe9 346e 	umaal	r3, r4, r9, lr
     c66:	fbe8 6568 	umaal	r6, r5, r8, r8
     c6a:	fbe7 b56a 	umaal	fp, r5, r7, sl
     c6e:	fbe8 056a 	umaal	r0, r5, r8, sl
     c72:	fbe8 156c 	umaal	r1, r5, r8, ip
     c76:	fbe9 256c 	umaal	r2, r5, r9, ip
     c7a:	fbe9 356e 	umaal	r3, r5, r9, lr
     c7e:	fbea 456e 	umaal	r4, r5, sl, lr
     c82:	ee07 6a10 	vmov	s14, r6
     c86:	fba8 7609 	umull	r7, r6, r8, r9
     c8a:	fbe8 066a 	umaal	r0, r6, r8, sl
     c8e:	fbe9 166a 	umaal	r1, r6, r9, sl
     c92:	fbe9 266c 	umaal	r2, r6, r9, ip
     c96:	fbea 366c 	umaal	r3, r6, sl, ip
     c9a:	fbea 466e 	umaal	r4, r6, sl, lr
     c9e:	fbec 566e 	umaal	r5, r6, ip, lr
     ca2:	fbe8 b769 	umaal	fp, r7, r8, r9
     ca6:	fbe9 0769 	umaal	r0, r7, r9, r9
     caa:	fbe9 176a 	umaal	r1, r7, r9, sl
     cae:	fbea 276a 	umaal	r2, r7, sl, sl
     cb2:	fbea 376c 	umaal	r3, r7, sl, ip
     cb6:	fbec 476c 	umaal	r4, r7, ip, ip
     cba:	fbec 576e 	umaal	r5, r7, ip, lr
     cbe:	fbee 676e 	umaal	r6, r7, lr, lr
     cc2:	bd00      	pop	{pc}

00000cc4 <ocrypto_bigint_sqr256>:
     cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     cc8:	ee07 0a90 	vmov	s15, r0
     ccc:	f7ff ff6c 	bl	ba8 <ocrypto_sqr256_noframe>
     cd0:	ee17 8a90 	vmov	r8, s15
     cd4:	ee07 ba90 	vmov	s15, fp
     cd8:	eca8 4a08 	vstmia	r8!, {s8-s15}
     cdc:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000ce4 <ocrypto_constant_time_equal>:
     ce4:	b430      	push	{r4, r5}
     ce6:	f04f 0300 	mov.w	r3, #0

00000cea <constant_time_equal_loop>:
     cea:	f810 4b01 	ldrb.w	r4, [r0], #1
     cee:	f811 5b01 	ldrb.w	r5, [r1], #1
     cf2:	3a01      	subs	r2, #1
     cf4:	ea84 0405 	eor.w	r4, r4, r5
     cf8:	ea43 0304 	orr.w	r3, r3, r4
     cfc:	d1f5      	bne.n	cea <constant_time_equal_loop>
     cfe:	f1a3 0301 	sub.w	r3, r3, #1
     d02:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     d06:	bc30      	pop	{r4, r5}
     d08:	4770      	bx	lr
     d0a:	bf00      	nop

00000d0c <ocrypto_constant_time_is_zero>:
     d0c:	f04f 0300 	mov.w	r3, #0

00000d10 <constant_time_is_zero_loop>:
     d10:	f810 2b01 	ldrb.w	r2, [r0], #1
     d14:	3901      	subs	r1, #1
     d16:	ea43 0302 	orr.w	r3, r3, r2
     d1a:	d1f9      	bne.n	d10 <constant_time_is_zero_loop>
     d1c:	f1a3 0301 	sub.w	r3, r3, #1
     d20:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     d24:	4770      	bx	lr
     d26:	bf00      	nop

00000d28 <ocrypto_constant_time_xor>:
     d28:	b430      	push	{r4, r5}

00000d2a <constant_time_xor_loop>:
     d2a:	f811 4b01 	ldrb.w	r4, [r1], #1
     d2e:	f812 5b01 	ldrb.w	r5, [r2], #1
     d32:	406c      	eors	r4, r5
     d34:	f800 4b01 	strb.w	r4, [r0], #1
     d38:	3b01      	subs	r3, #1
     d3a:	d1f6      	bne.n	d2a <constant_time_xor_loop>
     d3c:	bc30      	pop	{r4, r5}
     d3e:	4770      	bx	lr

00000d40 <ocrypto_mod_p256_add>:
     d40:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     d44:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     d48:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     d4c:	185b      	adds	r3, r3, r1
     d4e:	eb54 040c 	adcs.w	r4, r4, ip
     d52:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     d56:	414d      	adcs	r5, r1
     d58:	eb56 060c 	adcs.w	r6, r6, ip
     d5c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     d60:	414f      	adcs	r7, r1
     d62:	eb58 080c 	adcs.w	r8, r8, ip
     d66:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     d6a:	eb59 0901 	adcs.w	r9, r9, r1
     d6e:	eb5a 0a0c 	adcs.w	sl, sl, ip
     d72:	4189      	sbcs	r1, r1
     d74:	f1b3 33ff 	subs.w	r3, r3, #4294967295
     d78:	f174 34ff 	sbcs.w	r4, r4, #4294967295
     d7c:	f175 35ff 	sbcs.w	r5, r5, #4294967295
     d80:	f176 0600 	sbcs.w	r6, r6, #0
     d84:	f177 0700 	sbcs.w	r7, r7, #0
     d88:	f178 0800 	sbcs.w	r8, r8, #0
     d8c:	f179 0901 	sbcs.w	r9, r9, #1
     d90:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
     d94:	f151 0100 	adcs.w	r1, r1, #0
     d98:	185b      	adds	r3, r3, r1
     d9a:	414c      	adcs	r4, r1
     d9c:	414d      	adcs	r5, r1
     d9e:	f156 0600 	adcs.w	r6, r6, #0
     da2:	f157 0700 	adcs.w	r7, r7, #0
     da6:	f158 0800 	adcs.w	r8, r8, #0
     daa:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     dae:	eb5a 0a01 	adcs.w	sl, sl, r1
     db2:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     db6:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     dba:	4770      	bx	lr

00000dbc <ocrypto_mod_p256_sub>:
     dbc:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     dc0:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     dc4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     dc8:	1a5b      	subs	r3, r3, r1
     dca:	eb74 040c 	sbcs.w	r4, r4, ip
     dce:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     dd2:	418d      	sbcs	r5, r1
     dd4:	eb76 060c 	sbcs.w	r6, r6, ip
     dd8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     ddc:	418f      	sbcs	r7, r1
     dde:	eb78 080c 	sbcs.w	r8, r8, ip
     de2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     de6:	eb79 0901 	sbcs.w	r9, r9, r1
     dea:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     dee:	4189      	sbcs	r1, r1
     df0:	185b      	adds	r3, r3, r1
     df2:	414c      	adcs	r4, r1
     df4:	414d      	adcs	r5, r1
     df6:	f156 0600 	adcs.w	r6, r6, #0
     dfa:	f157 0700 	adcs.w	r7, r7, #0
     dfe:	f158 0800 	adcs.w	r8, r8, #0
     e02:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     e06:	eb5a 0a01 	adcs.w	sl, sl, r1
     e0a:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     e0e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     e12:	4770      	bx	lr

00000e14 <mul_reduce>:
     e14:	eb18 0804 	adds.w	r8, r8, r4
     e18:	eb59 0905 	adcs.w	r9, r9, r5
     e1c:	eb5a 0a06 	adcs.w	sl, sl, r6
     e20:	eb5b 0b07 	adcs.w	fp, fp, r7
     e24:	f05f 0c00 	movs.w	ip, #0
     e28:	f14c 0c00 	adc.w	ip, ip, #0
     e2c:	eb18 0805 	adds.w	r8, r8, r5
     e30:	eb59 0906 	adcs.w	r9, r9, r6
     e34:	eb5a 0a07 	adcs.w	sl, sl, r7
     e38:	eb5b 0b07 	adcs.w	fp, fp, r7
     e3c:	eb50 000c 	adcs.w	r0, r0, ip
     e40:	f05f 0c00 	movs.w	ip, #0
     e44:	eb51 010c 	adcs.w	r1, r1, ip
     e48:	eb52 020c 	adcs.w	r2, r2, ip
     e4c:	4163      	adcs	r3, r4
     e4e:	f14c 0c00 	adc.w	ip, ip, #0
     e52:	ebb8 0807 	subs.w	r8, r8, r7
     e56:	f179 0900 	sbcs.w	r9, r9, #0
     e5a:	f17a 0a00 	sbcs.w	sl, sl, #0
     e5e:	eb7b 0b04 	sbcs.w	fp, fp, r4
     e62:	41a8      	sbcs	r0, r5
     e64:	41b1      	sbcs	r1, r6
     e66:	41a2      	sbcs	r2, r4
     e68:	41b3      	sbcs	r3, r6
     e6a:	f16c 0c00 	sbc.w	ip, ip, #0
     e6e:	ebbb 0b05 	subs.w	fp, fp, r5
     e72:	41b0      	sbcs	r0, r6
     e74:	41b9      	sbcs	r1, r7
     e76:	41aa      	sbcs	r2, r5
     e78:	41bb      	sbcs	r3, r7
     e7a:	f16c 0c00 	sbc.w	ip, ip, #0
     e7e:	f04c 0601 	orr.w	r6, ip, #1
     e82:	f08c 0702 	eor.w	r7, ip, #2
     e86:	eb18 0806 	adds.w	r8, r8, r6
     e8a:	eb59 096c 	adcs.w	r9, r9, ip, asr #1
     e8e:	eb5a 0a6c 	adcs.w	sl, sl, ip, asr #1
     e92:	eb7b 0b6c 	sbcs.w	fp, fp, ip, asr #1
     e96:	eb70 046c 	sbcs.w	r4, r0, ip, asr #1
     e9a:	eb71 056c 	sbcs.w	r5, r1, ip, asr #1
     e9e:	eb72 0667 	sbcs.w	r6, r2, r7, asr #1
     ea2:	eb53 076c 	adcs.w	r7, r3, ip, asr #1
     ea6:	eb6c 0c6c 	sbc.w	ip, ip, ip, asr #1
     eaa:	eb18 000c 	adds.w	r0, r8, ip
     eae:	eb59 010c 	adcs.w	r1, r9, ip
     eb2:	eb5a 020c 	adcs.w	r2, sl, ip
     eb6:	f15b 0300 	adcs.w	r3, fp, #0
     eba:	f154 0400 	adcs.w	r4, r4, #0
     ebe:	f155 0500 	adcs.w	r5, r5, #0
     ec2:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
     ec6:	eb57 070c 	adcs.w	r7, r7, ip
     eca:	4770      	bx	lr

00000ecc <ocrypto_mod_p256_mul>:
     ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ed0:	ee07 0a90 	vmov	s15, r0
     ed4:	f7ff fda2 	bl	a1c <ocrypto_mul256_noframe>
     ed8:	ec59 8a16 	vmov	r8, r9, s12, s13
     edc:	ee17 aa10 	vmov	sl, s14
     ee0:	f7ff ff98 	bl	e14 <mul_reduce>
     ee4:	ec59 8a14 	vmov	r8, r9, s8, s9
     ee8:	ec5b aa15 	vmov	sl, fp, s10, s11
     eec:	f7ff ff92 	bl	e14 <mul_reduce>
     ef0:	ee17 8a90 	vmov	r8, s15
     ef4:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000efc <ocrypto_mod_p256_sqr>:
     efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f00:	ee07 0a90 	vmov	s15, r0
     f04:	f7ff fe50 	bl	ba8 <ocrypto_sqr256_noframe>
     f08:	ec59 8a16 	vmov	r8, r9, s12, s13
     f0c:	ee17 aa10 	vmov	sl, s14
     f10:	f7ff ff80 	bl	e14 <mul_reduce>
     f14:	ec59 8a14 	vmov	r8, r9, s8, s9
     f18:	ec5b aa15 	vmov	sl, fp, s10, s11
     f1c:	f7ff ff7a 	bl	e14 <mul_reduce>
     f20:	ee17 8a90 	vmov	r8, s15
     f24:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     f2c:	b50e      	push	{r1, r2, r3, lr}
     f2e:	4810      	ldr	r0, [pc, #64]	; (f70 <ocrypto_mod_p256_sqr+0x74>)
     f30:	7a01      	ldrb	r1, [r0, #8]
     f32:	f88d 1001 	strb.w	r1, [sp, #1]
     f36:	79c1      	ldrb	r1, [r0, #7]
     f38:	f88d 1000 	strb.w	r1, [sp]
     f3c:	7981      	ldrb	r1, [r0, #6]
     f3e:	f8ad 1004 	strh.w	r1, [sp, #4]
     f42:	7940      	ldrb	r0, [r0, #5]
     f44:	f8ad 0002 	strh.w	r0, [sp, #2]
     f48:	4668      	mov	r0, sp
     f4a:	f006 f9e9 	bl	7320 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
     f4e:	b108      	cbz	r0, f54 <ocrypto_mod_p256_sqr+0x58>
     f50:	21ae      	movs	r1, #174	; 0xae
     f52:	e008      	b.n	f66 <ocrypto_mod_p256_sqr+0x6a>
     f54:	4807      	ldr	r0, [pc, #28]	; (f74 <ocrypto_mod_p256_sqr+0x78>)
     f56:	6800      	ldr	r0, [r0, #0]
     f58:	9002      	str	r0, [sp, #8]
     f5a:	a802      	add	r0, sp, #8
     f5c:	f00e ffc7 	bl	feee <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
     f60:	2800      	cmp	r0, #0
     f62:	d003      	beq.n	f6c <ocrypto_mod_p256_sqr+0x70>
     f64:	21b2      	movs	r1, #178	; 0xb2
     f66:	2003      	movs	r0, #3
     f68:	f000 f8e0 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     f6c:	bd0e      	pop	{r1, r2, r3, pc}
     f6e:	0000      	.short	0x0000
     f70:	20001174 	.word	0x20001174
     f74:	00001234 	.word	0x00001234

00000f78 <sdc_build_revision_get>:
     f78:	b510      	push	{r4, lr}
     f7a:	b128      	cbz	r0, f88 <sdc_build_revision_get+0x10>
     f7c:	2214      	movs	r2, #20
     f7e:	4904      	ldr	r1, [pc, #16]	; (f90 <sdc_build_revision_get+0x18>)
     f80:	f00f fe3a 	bl	10bf8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     f84:	2000      	movs	r0, #0
     f86:	bd10      	pop	{r4, pc}
     f88:	f06f 0015 	mvn.w	r0, #21
     f8c:	bd10      	pop	{r4, pc}
     f8e:	0000      	.short	0x0000
     f90:	00001252 	.word	0x00001252

00000f94 <sdc_cfg_set>:
     f94:	b570      	push	{r4, r5, r6, lr}
     f96:	f06f 052c 	mvn.w	r5, #44	; 0x2c
     f9a:	bbd0      	cbnz	r0, 1012 <CONFIG_FPROTECT_BLOCK_SIZE+0x12>
     f9c:	4c20      	ldr	r4, [pc, #128]	; (1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>)
     f9e:	7860      	ldrb	r0, [r4, #1]
     fa0:	b108      	cbz	r0, fa6 <sdc_cfg_set+0x12>
     fa2:	11a8      	asrs	r0, r5, #6
     fa4:	bd70      	pop	{r4, r5, r6, pc}
     fa6:	b309      	cbz	r1, fec <sdc_cfg_set+0x58>
     fa8:	f06f 0015 	mvn.w	r0, #21
     fac:	2a00      	cmp	r2, #0
     fae:	d0f9      	beq.n	fa4 <sdc_cfg_set+0x10>
     fb0:	4b1c      	ldr	r3, [pc, #112]	; (1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>)
     fb2:	1e89      	subs	r1, r1, #2
     fb4:	2906      	cmp	r1, #6
     fb6:	d22d      	bcs.n	1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>
     fb8:	e8df f001 	tbb	[pc, r1]
     fbc:	2c160603 	.word	0x2c160603
     fc0:	1c19      	.short	0x1c19
     fc2:	7810      	ldrb	r0, [r2, #0]
     fc4:	7058      	strb	r0, [r3, #1]
     fc6:	e019      	b.n	ffc <sdc_cfg_set+0x68>
     fc8:	7891      	ldrb	r1, [r2, #2]
     fca:	2900      	cmp	r1, #0
     fcc:	d0ea      	beq.n	fa4 <sdc_cfg_set+0x10>
     fce:	78d1      	ldrb	r1, [r2, #3]
     fd0:	2900      	cmp	r1, #0
     fd2:	d0e7      	beq.n	fa4 <sdc_cfg_set+0x10>
     fd4:	7811      	ldrb	r1, [r2, #0]
     fd6:	291b      	cmp	r1, #27
     fd8:	d3e4      	bcc.n	fa4 <sdc_cfg_set+0x10>
     fda:	7851      	ldrb	r1, [r2, #1]
     fdc:	291b      	cmp	r1, #27
     fde:	d3e1      	bcc.n	fa4 <sdc_cfg_set+0x10>
     fe0:	6810      	ldr	r0, [r2, #0]
     fe2:	f8c3 0005 	str.w	r0, [r3, #5]
     fe6:	e009      	b.n	ffc <sdc_cfg_set+0x68>
     fe8:	7810      	ldrb	r0, [r2, #0]
     fea:	7098      	strb	r0, [r3, #2]
     fec:	e006      	b.n	ffc <sdc_cfg_set+0x68>
     fee:	8810      	ldrh	r0, [r2, #0]
     ff0:	8158      	strh	r0, [r3, #10]
     ff2:	e003      	b.n	ffc <sdc_cfg_set+0x68>
     ff4:	8811      	ldrh	r1, [r2, #0]
     ff6:	29ff      	cmp	r1, #255	; 0xff
     ff8:	d8d4      	bhi.n	fa4 <sdc_cfg_set+0x10>
     ffa:	7319      	strb	r1, [r3, #12]
     ffc:	2201      	movs	r2, #1
     ffe:	4909      	ldr	r1, [pc, #36]	; (1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>)
    1000:	2000      	movs	r0, #0
    1002:	f00b fe51 	bl	cca8 <__udivmoddi4+0x2a0>
    1006:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    100a:	db05      	blt.n	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
    100c:	f06f 000b 	mvn.w	r0, #11
    1010:	bd70      	pop	{r4, r5, r6, pc}
    1012:	e7ff      	b.n	1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>
    1014:	4628      	mov	r0, r5
    1016:	e7fb      	b.n	1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
    1018:	2101      	movs	r1, #1
    101a:	70a1      	strb	r1, [r4, #2]
    101c:	e7f8      	b.n	1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
    101e:	0000      	.short	0x0000
    1020:	20000040 	.word	0x20000040
    1024:	20001174 	.word	0x20001174

00001028 <sdc_disable>:
    1028:	b510      	push	{r4, lr}
    102a:	4c07      	ldr	r4, [pc, #28]	; (1048 <sdc_disable+0x20>)
    102c:	7860      	ldrb	r0, [r4, #1]
    102e:	b120      	cbz	r0, 103a <sdc_disable+0x12>
    1030:	f006 fc58 	bl	78e4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    1034:	7820      	ldrb	r0, [r4, #0]
    1036:	f00b fc67 	bl	c908 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    103a:	f000 fe27 	bl	1c8c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
    103e:	f000 feff 	bl	1e40 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
    1042:	2000      	movs	r0, #0
    1044:	7060      	strb	r0, [r4, #1]
    1046:	bd10      	pop	{r4, pc}
    1048:	20000040 	.word	0x20000040

0000104c <sdc_enable>:
    104c:	b570      	push	{r4, r5, r6, lr}
    104e:	460c      	mov	r4, r1
    1050:	0005      	movs	r5, r0
    1052:	d002      	beq.n	105a <sdc_enable+0xe>
    1054:	b10c      	cbz	r4, 105a <sdc_enable+0xe>
    1056:	0760      	lsls	r0, r4, #29
    1058:	d002      	beq.n	1060 <sdc_enable+0x14>
    105a:	f06f 0015 	mvn.w	r0, #21
    105e:	bd70      	pop	{r4, r5, r6, pc}
    1060:	f000 f90e 	bl	1280 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    1064:	b1a8      	cbz	r0, 1092 <sdc_enable+0x46>
    1066:	4628      	mov	r0, r5
    1068:	f00b fc14 	bl	c894 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    106c:	4d0a      	ldr	r5, [pc, #40]	; (1098 <sdc_enable+0x4c>)
    106e:	2200      	movs	r2, #0
    1070:	490a      	ldr	r1, [pc, #40]	; (109c <sdc_enable+0x50>)
    1072:	7028      	strb	r0, [r5, #0]
    1074:	4620      	mov	r0, r4
    1076:	f00b fe17 	bl	cca8 <__udivmoddi4+0x2a0>
    107a:	f00f fb94 	bl	107a6 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    107e:	2100      	movs	r1, #0
    1080:	7828      	ldrb	r0, [r5, #0]
    1082:	f006 fc19 	bl	78b8 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    1086:	f7ff ff51 	bl	f2c <ocrypto_mod_p256_sqr+0x30>
    108a:	2001      	movs	r0, #1
    108c:	7068      	strb	r0, [r5, #1]
    108e:	2000      	movs	r0, #0
    1090:	bd70      	pop	{r4, r5, r6, pc}
    1092:	f04f 30ff 	mov.w	r0, #4294967295
    1096:	bd70      	pop	{r4, r5, r6, pc}
    1098:	20000040 	.word	0x20000040
    109c:	20001174 	.word	0x20001174

000010a0 <sdc_init>:
    10a0:	b530      	push	{r4, r5, lr}
    10a2:	b087      	sub	sp, #28
    10a4:	0004      	movs	r4, r0
    10a6:	d00c      	beq.n	10c2 <sdc_init+0x22>
    10a8:	f00b fb9c 	bl	c7e4 <mpsl_is_initialized>
    10ac:	f04f 35ff 	mov.w	r5, #4294967295
    10b0:	b120      	cbz	r0, 10bc <sdc_init+0x1c>
    10b2:	f00a fd71 	bl	bb98 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    10b6:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    10ba:	d905      	bls.n	10c8 <sdc_init+0x28>
    10bc:	4628      	mov	r0, r5
    10be:	b007      	add	sp, #28
    10c0:	bd30      	pop	{r4, r5, pc}
    10c2:	f06f 0015 	mvn.w	r0, #21
    10c6:	e7fa      	b.n	10be <sdc_init+0x1e>
    10c8:	4d13      	ldr	r5, [pc, #76]	; (1118 <sdc_init+0x78>)
    10ca:	4814      	ldr	r0, [pc, #80]	; (111c <sdc_init+0x7c>)
    10cc:	606c      	str	r4, [r5, #4]
    10ce:	f000 f9e1 	bl	1494 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    10d2:	2000      	movs	r0, #0
    10d4:	7068      	strb	r0, [r5, #1]
    10d6:	70a8      	strb	r0, [r5, #2]
    10d8:	4601      	mov	r1, r0
    10da:	221c      	movs	r2, #28
    10dc:	4668      	mov	r0, sp
    10de:	f00f fe05 	bl	10cec <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    10e2:	221c      	movs	r2, #28
    10e4:	490e      	ldr	r1, [pc, #56]	; (1120 <sdc_init+0x80>)
    10e6:	4668      	mov	r0, sp
    10e8:	f00f fd86 	bl	10bf8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    10ec:	221c      	movs	r2, #28
    10ee:	4669      	mov	r1, sp
    10f0:	480c      	ldr	r0, [pc, #48]	; (1124 <sdc_init+0x84>)
    10f2:	f00f fd81 	bl	10bf8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    10f6:	f3ef 8410 	mrs	r4, PRIMASK
    10fa:	b672      	cpsid	i
    10fc:	f000 fdd4 	bl	1ca8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    1100:	4809      	ldr	r0, [pc, #36]	; (1128 <sdc_init+0x88>)
    1102:	f000 fea9 	bl	1e58 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    1106:	b118      	cbz	r0, 1110 <sdc_init+0x70>
    1108:	21c8      	movs	r1, #200	; 0xc8
    110a:	2003      	movs	r0, #3
    110c:	f000 f80e 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1110:	b904      	cbnz	r4, 1114 <sdc_init+0x74>
    1112:	b662      	cpsie	i
    1114:	2000      	movs	r0, #0
    1116:	e7d2      	b.n	10be <sdc_init+0x1e>
    1118:	20000040 	.word	0x20000040
    111c:	00000f2d 	.word	0x00000f2d
    1120:	00001236 	.word	0x00001236
    1124:	20001174 	.word	0x20001174
    1128:	000012ad 	.word	0x000012ad

0000112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    112c:	b50e      	push	{r1, r2, r3, lr}
    112e:	b672      	cpsid	i
    1130:	4a15      	ldr	r2, [pc, #84]	; (1188 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    1132:	6855      	ldr	r5, [r2, #4]
    1134:	b1dd      	cbz	r5, 116e <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
    1136:	2200      	movs	r2, #0
    1138:	4603      	mov	r3, r0
    113a:	466e      	mov	r6, sp
    113c:	240a      	movs	r4, #10
    113e:	e003      	b.n	1148 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    1140:	fbb0 f0f4 	udiv	r0, r0, r4
    1144:	1c52      	adds	r2, r2, #1
    1146:	b2d2      	uxtb	r2, r2
    1148:	2800      	cmp	r0, #0
    114a:	d1f9      	bne.n	1140 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    114c:	54b0      	strb	r0, [r6, r2]
    114e:	e00a      	b.n	1166 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
    1150:	b2d8      	uxtb	r0, r3
    1152:	fbb0 f7f4 	udiv	r7, r0, r4
    1156:	fbb3 f3f4 	udiv	r3, r3, r4
    115a:	fb04 0017 	mls	r0, r4, r7, r0
    115e:	1e52      	subs	r2, r2, #1
    1160:	b2d2      	uxtb	r2, r2
    1162:	3030      	adds	r0, #48	; 0x30
    1164:	54b0      	strb	r0, [r6, r2]
    1166:	2a00      	cmp	r2, #0
    1168:	d1f2      	bne.n	1150 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    116a:	4630      	mov	r0, r6
    116c:	47a8      	blx	r5
    116e:	f3bf 8f4f 	dsb	sy
    1172:	4806      	ldr	r0, [pc, #24]	; (118c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    1174:	6801      	ldr	r1, [r0, #0]
    1176:	4a06      	ldr	r2, [pc, #24]	; (1190 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    1178:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    117c:	4311      	orrs	r1, r2
    117e:	6001      	str	r1, [r0, #0]
    1180:	f3bf 8f4f 	dsb	sy
    1184:	bf00      	nop
    1186:	e7fd      	b.n	1184 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
    1188:	20000040 	.word	0x20000040
    118c:	e000ed0c 	.word	0xe000ed0c
    1190:	05fa0004 	.word	0x05fa0004

00001194 <sdc_support_adv>:
    1194:	4806      	ldr	r0, [pc, #24]	; (11b0 <sdc_support_adv+0x1c>)
    1196:	b510      	push	{r4, lr}
    1198:	7881      	ldrb	r1, [r0, #2]
    119a:	7840      	ldrb	r0, [r0, #1]
    119c:	4301      	orrs	r1, r0
    119e:	d002      	beq.n	11a6 <sdc_support_adv+0x12>
    11a0:	f04f 30ff 	mov.w	r0, #4294967295
    11a4:	bd10      	pop	{r4, pc}
    11a6:	f006 fbad 	bl	7904 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>
    11aa:	2000      	movs	r0, #0
    11ac:	bd10      	pop	{r4, pc}
    11ae:	0000      	.short	0x0000
    11b0:	20000040 	.word	0x20000040

000011b4 <sdc_support_dle_peripheral>:
    11b4:	4806      	ldr	r0, [pc, #24]	; (11d0 <sdc_support_dle_peripheral+0x1c>)
    11b6:	b510      	push	{r4, lr}
    11b8:	7881      	ldrb	r1, [r0, #2]
    11ba:	7840      	ldrb	r0, [r0, #1]
    11bc:	4301      	orrs	r1, r0
    11be:	d002      	beq.n	11c6 <sdc_support_dle_peripheral+0x12>
    11c0:	f04f 30ff 	mov.w	r0, #4294967295
    11c4:	bd10      	pop	{r4, pc}
    11c6:	f006 f9e7 	bl	7598 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>
    11ca:	2000      	movs	r0, #0
    11cc:	bd10      	pop	{r4, pc}
    11ce:	0000      	.short	0x0000
    11d0:	20000040 	.word	0x20000040

000011d4 <sdc_support_le_2m_phy>:
    11d4:	4806      	ldr	r0, [pc, #24]	; (11f0 <sdc_support_le_2m_phy+0x1c>)
    11d6:	b510      	push	{r4, lr}
    11d8:	7881      	ldrb	r1, [r0, #2]
    11da:	7840      	ldrb	r0, [r0, #1]
    11dc:	4301      	orrs	r1, r0
    11de:	d002      	beq.n	11e6 <sdc_support_le_2m_phy+0x12>
    11e0:	f04f 30ff 	mov.w	r0, #4294967295
    11e4:	bd10      	pop	{r4, pc}
    11e6:	f00f f824 	bl	10232 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    11ea:	2000      	movs	r0, #0
    11ec:	bd10      	pop	{r4, pc}
    11ee:	0000      	.short	0x0000
    11f0:	20000040 	.word	0x20000040

000011f4 <sdc_support_peripheral>:
    11f4:	4806      	ldr	r0, [pc, #24]	; (1210 <sdc_support_peripheral+0x1c>)
    11f6:	b510      	push	{r4, lr}
    11f8:	7881      	ldrb	r1, [r0, #2]
    11fa:	7840      	ldrb	r0, [r0, #1]
    11fc:	4301      	orrs	r1, r0
    11fe:	d002      	beq.n	1206 <sdc_support_peripheral+0x12>
    1200:	f04f 30ff 	mov.w	r0, #4294967295
    1204:	bd10      	pop	{r4, pc}
    1206:	f006 fb8f 	bl	7928 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>
    120a:	2000      	movs	r0, #0
    120c:	bd10      	pop	{r4, pc}
    120e:	0000      	.short	0x0000
    1210:	20000040 	.word	0x20000040

00001214 <sdc_support_phy_update_peripheral>:
    1214:	4806      	ldr	r0, [pc, #24]	; (1230 <sdc_support_phy_update_peripheral+0x1c>)
    1216:	b510      	push	{r4, lr}
    1218:	7881      	ldrb	r1, [r0, #2]
    121a:	7840      	ldrb	r0, [r0, #1]
    121c:	4301      	orrs	r1, r0
    121e:	d002      	beq.n	1226 <sdc_support_phy_update_peripheral+0x12>
    1220:	f04f 30ff 	mov.w	r0, #4294967295
    1224:	bd10      	pop	{r4, pc}
    1226:	f00f f81a 	bl	1025e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>
    122a:	2000      	movs	r0, #0
    122c:	bd10      	pop	{r4, pc}
    122e:	0000      	.short	0x0000
    1230:	20000040 	.word	0x20000040
    1234:	01000001 	.word	0x01000001
    1238:	1b000001 	.word	0x1b000001
    123c:	0002031b 	.word	0x0002031b
    1240:	0008001f 	.word	0x0008001f
	...
    1250:	7b040000 	.word	0x7b040000
    1254:	2b275931 	.word	0x2b275931
    1258:	327b6d12 	.word	0x327b6d12
    125c:	adab8dae 	.word	0xadab8dae
    1260:	953bb576 	.word	0x953bb576
    1264:	0000a702 	.word	0x0000a702

00001268 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    1268:	4a01      	ldr	r2, [pc, #4]	; (1270 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x8>)
    126a:	6852      	ldr	r2, [r2, #4]
    126c:	4710      	bx	r2
    126e:	0000      	.short	0x0000
    1270:	20001048 	.word	0x20001048

00001274 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    1274:	4a01      	ldr	r2, [pc, #4]	; (127c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x8>)
    1276:	6892      	ldr	r2, [r2, #8]
    1278:	4710      	bx	r2
    127a:	0000      	.short	0x0000
    127c:	20001048 	.word	0x20001048

00001280 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    1280:	4805      	ldr	r0, [pc, #20]	; (1298 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    1282:	6801      	ldr	r1, [r0, #0]
    1284:	b129      	cbz	r1, 1292 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    1286:	6841      	ldr	r1, [r0, #4]
    1288:	b119      	cbz	r1, 1292 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    128a:	6880      	ldr	r0, [r0, #8]
    128c:	b108      	cbz	r0, 1292 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    128e:	2001      	movs	r0, #1
    1290:	4770      	bx	lr
    1292:	2000      	movs	r0, #0
    1294:	4770      	bx	lr
    1296:	0000      	.short	0x0000
    1298:	20001048 	.word	0x20001048

0000129c <sdc_rand_source_register>:
    129c:	4902      	ldr	r1, [pc, #8]	; (12a8 <sdc_rand_source_register+0xc>)
    129e:	c80d      	ldmia	r0, {r0, r2, r3}
    12a0:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    12a4:	2000      	movs	r0, #0
    12a6:	4770      	bx	lr
    12a8:	20001048 	.word	0x20001048

000012ac <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    12ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    12ae:	4c12      	ldr	r4, [pc, #72]	; (12f8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    12b0:	2600      	movs	r6, #0
    12b2:	6825      	ldr	r5, [r4, #0]
    12b4:	e011      	b.n	12da <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    12b6:	9800      	ldr	r0, [sp, #0]
    12b8:	2802      	cmp	r0, #2
    12ba:	d002      	beq.n	12c2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    12bc:	2803      	cmp	r0, #3
    12be:	d10c      	bne.n	12da <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    12c0:	e006      	b.n	12d0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    12c2:	6820      	ldr	r0, [r4, #0]
    12c4:	b110      	cbz	r0, 12cc <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    12c6:	2000      	movs	r0, #0
    12c8:	6026      	str	r6, [r4, #0]
    12ca:	e005      	b.n	12d8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    12cc:	2128      	movs	r1, #40	; 0x28
    12ce:	e00c      	b.n	12ea <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    12d0:	6820      	ldr	r0, [r4, #0]
    12d2:	b168      	cbz	r0, 12f0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    12d4:	2001      	movs	r0, #1
    12d6:	6026      	str	r6, [r4, #0]
    12d8:	47a8      	blx	r5
    12da:	4668      	mov	r0, sp
    12dc:	f000 fd82 	bl	1de4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    12e0:	2800      	cmp	r0, #0
    12e2:	d0e8      	beq.n	12b6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    12e4:	2805      	cmp	r0, #5
    12e6:	d005      	beq.n	12f4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    12e8:	2135      	movs	r1, #53	; 0x35
    12ea:	2004      	movs	r0, #4
    12ec:	f7ff ff1e 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    12f0:	212d      	movs	r1, #45	; 0x2d
    12f2:	e7fa      	b.n	12ea <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    12f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12f6:	0000      	.short	0x0000
    12f8:	20000048 	.word	0x20000048

000012fc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
    12fc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    12fe:	4e20      	ldr	r6, [pc, #128]	; (1380 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x84>)
    1300:	4605      	mov	r5, r0
    1302:	1d00      	adds	r0, r0, #4
    1304:	6030      	str	r0, [r6, #0]
    1306:	481e      	ldr	r0, [pc, #120]	; (1380 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x84>)
    1308:	f001 fe92 	bl	3030 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    130c:	4604      	mov	r4, r0
    130e:	2802      	cmp	r0, #2
    1310:	d004      	beq.n	131c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x20>
    1312:	2c04      	cmp	r4, #4
    1314:	d007      	beq.n	1326 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2a>
    1316:	2c08      	cmp	r4, #8
    1318:	d02c      	beq.n	1374 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x78>
    131a:	e02f      	b.n	137c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x80>
    131c:	4918      	ldr	r1, [pc, #96]	; (1380 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x84>)
    131e:	4628      	mov	r0, r5
    1320:	f00b fd66 	bl	cdf0 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    1324:	e02a      	b.n	137c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x80>
    1326:	7830      	ldrb	r0, [r6, #0]
    1328:	2807      	cmp	r0, #7
    132a:	d104      	bne.n	1336 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x3a>
    132c:	2105      	movs	r1, #5
    132e:	203e      	movs	r0, #62	; 0x3e
    1330:	f00b fd34 	bl	cd9c <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
    1334:	b150      	cbz	r0, 134c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x50>
    1336:	4912      	ldr	r1, [pc, #72]	; (1380 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x84>)
    1338:	4628      	mov	r0, r5
    133a:	f00b fdbe 	bl	ceba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    133e:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
    1342:	d30e      	bcc.n	1362 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x66>
    1344:	2172      	movs	r1, #114	; 0x72
    1346:	2008      	movs	r0, #8
    1348:	f7ff fef0 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    134c:	88b0      	ldrh	r0, [r6, #4]
    134e:	f8ad 0000 	strh.w	r0, [sp]
    1352:	a901      	add	r1, sp, #4
    1354:	4668      	mov	r0, sp
    1356:	f00c f811 	bl	d37c <sdc_hci_cmd_le_long_term_key_request_negative_reply>
    135a:	2800      	cmp	r0, #0
    135c:	d0d3      	beq.n	1306 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa>
    135e:	2153      	movs	r1, #83	; 0x53
    1360:	e7f1      	b.n	1346 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x4a>
    1362:	2800      	cmp	r0, #0
    1364:	d0cf      	beq.n	1306 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa>
    1366:	78a9      	ldrb	r1, [r5, #2]
    1368:	7828      	ldrb	r0, [r5, #0]
    136a:	f00b fd17 	bl	cd9c <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x12>
    136e:	2800      	cmp	r0, #0
    1370:	d0c9      	beq.n	1306 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa>
    1372:	e003      	b.n	137c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x80>
    1374:	4902      	ldr	r1, [pc, #8]	; (1380 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x84>)
    1376:	4628      	mov	r0, r5
    1378:	f00b fd68 	bl	ce4c <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>
    137c:	4620      	mov	r0, r4
    137e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    1380:	20001054 	.word	0x20001054
    1384:	b570      	push	{r4, r5, r6, lr}
    1386:	780a      	ldrb	r2, [r1, #0]
    1388:	7082      	strb	r2, [r0, #2]
    138a:	b33a      	cbz	r2, 13dc <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x54>
    138c:	2a01      	cmp	r2, #1
    138e:	d825      	bhi.n	13dc <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x54>
    1390:	2313      	movs	r3, #19
    1392:	7003      	strb	r3, [r0, #0]
    1394:	2300      	movs	r3, #0
    1396:	e00a      	b.n	13ae <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x26>
    1398:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    139c:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    13a0:	78a6      	ldrb	r6, [r4, #2]
    13a2:	70ee      	strb	r6, [r5, #3]
    13a4:	8864      	ldrh	r4, [r4, #2]
    13a6:	0a24      	lsrs	r4, r4, #8
    13a8:	1c5b      	adds	r3, r3, #1
    13aa:	712c      	strb	r4, [r5, #4]
    13ac:	b2db      	uxtb	r3, r3
    13ae:	4293      	cmp	r3, r2
    13b0:	d3f2      	bcc.n	1398 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x10>
    13b2:	2300      	movs	r3, #0
    13b4:	e00b      	b.n	13ce <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x46>
    13b6:	bf00      	nop
    13b8:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    13bc:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    13c0:	792e      	ldrb	r6, [r5, #4]
    13c2:	7166      	strb	r6, [r4, #5]
    13c4:	88ad      	ldrh	r5, [r5, #4]
    13c6:	0a2d      	lsrs	r5, r5, #8
    13c8:	1c5b      	adds	r3, r3, #1
    13ca:	71a5      	strb	r5, [r4, #6]
    13cc:	b2db      	uxtb	r3, r3
    13ce:	4293      	cmp	r3, r2
    13d0:	d3f2      	bcc.n	13b8 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x30>
    13d2:	2101      	movs	r1, #1
    13d4:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    13d8:	b2c0      	uxtb	r0, r0
    13da:	bd70      	pop	{r4, r5, r6, pc}
    13dc:	2000      	movs	r0, #0
    13de:	bd70      	pop	{r4, r5, r6, pc}

000013e0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    13e0:	2840      	cmp	r0, #64	; 0x40
    13e2:	d203      	bcs.n	13ec <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
    13e4:	1e40      	subs	r0, r0, #1
    13e6:	b2c1      	uxtb	r1, r0
    13e8:	4805      	ldr	r0, [pc, #20]	; (1400 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    13ea:	e005      	b.n	13f8 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
    13ec:	28ff      	cmp	r0, #255	; 0xff
    13ee:	d005      	beq.n	13fc <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
    13f0:	3840      	subs	r0, #64	; 0x40
    13f2:	b2c1      	uxtb	r1, r0
    13f4:	4802      	ldr	r0, [pc, #8]	; (1400 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
    13f6:	3008      	adds	r0, #8
    13f8:	f00b bf59 	b.w	d2ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3f4>
    13fc:	2001      	movs	r0, #1
    13fe:	4770      	bx	lr
    1400:	2000004c 	.word	0x2000004c

00001404 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    1404:	1e40      	subs	r0, r0, #1
    1406:	b2c1      	uxtb	r1, r0
    1408:	4801      	ldr	r0, [pc, #4]	; (1410 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
    140a:	f00b bf50 	b.w	d2ae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3f4>
    140e:	0000      	.short	0x0000
    1410:	2000005c 	.word	0x2000005c

00001414 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    1414:	4902      	ldr	r1, [pc, #8]	; (1420 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0xc>)
    1416:	6802      	ldr	r2, [r0, #0]
    1418:	610a      	str	r2, [r1, #16]
    141a:	6840      	ldr	r0, [r0, #4]
    141c:	6148      	str	r0, [r1, #20]
    141e:	4770      	bx	lr
    1420:	2000004c 	.word	0x2000004c

00001424 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    1424:	4905      	ldr	r1, [pc, #20]	; (143c <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    1426:	6802      	ldr	r2, [r0, #0]
    1428:	600a      	str	r2, [r1, #0]
    142a:	6840      	ldr	r0, [r0, #4]
    142c:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    1430:	600a      	str	r2, [r1, #0]
    1432:	4a03      	ldr	r2, [pc, #12]	; (1440 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
    1434:	4310      	orrs	r0, r2
    1436:	6048      	str	r0, [r1, #4]
    1438:	4770      	bx	lr
    143a:	0000      	.short	0x0000
    143c:	2000004c 	.word	0x2000004c
    1440:	024007f8 	.word	0x024007f8

00001444 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    1444:	4902      	ldr	r1, [pc, #8]	; (1450 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
    1446:	6802      	ldr	r2, [r0, #0]
    1448:	608a      	str	r2, [r1, #8]
    144a:	6840      	ldr	r0, [r0, #4]
    144c:	60c8      	str	r0, [r1, #12]
    144e:	4770      	bx	lr
    1450:	2000004c 	.word	0x2000004c

00001454 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    1454:	4807      	ldr	r0, [pc, #28]	; (1474 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
    1456:	f04f 31ff 	mov.w	r1, #4294967295
    145a:	2200      	movs	r2, #0
    145c:	6001      	str	r1, [r0, #0]
    145e:	0cc9      	lsrs	r1, r1, #19
    1460:	6041      	str	r1, [r0, #4]
    1462:	f100 0108 	add.w	r1, r0, #8
    1466:	201f      	movs	r0, #31
    1468:	600a      	str	r2, [r1, #0]
    146a:	604a      	str	r2, [r1, #4]
    146c:	3108      	adds	r1, #8
    146e:	e9c1 0200 	strd	r0, r2, [r1]
    1472:	4770      	bx	lr
    1474:	2000004c 	.word	0x2000004c

00001478 <sdc_hci_cmd_cb_reset>:
    1478:	b510      	push	{r4, lr}
    147a:	f7ff ffeb 	bl	1454 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    147e:	f00e fe4e 	bl	1011e <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    1482:	4604      	mov	r4, r0
    1484:	4802      	ldr	r0, [pc, #8]	; (1490 <sdc_hci_cmd_cb_reset+0x18>)
    1486:	6800      	ldr	r0, [r0, #0]
    1488:	b100      	cbz	r0, 148c <sdc_hci_cmd_cb_reset+0x14>
    148a:	4780      	blx	r0
    148c:	4620      	mov	r0, r4
    148e:	bd10      	pop	{r4, pc}
    1490:	20000064 	.word	0x20000064

00001494 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    1494:	4901      	ldr	r1, [pc, #4]	; (149c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    1496:	6008      	str	r0, [r1, #0]
    1498:	4770      	bx	lr
    149a:	0000      	.short	0x0000
    149c:	20000064 	.word	0x20000064

000014a0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    14a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    14a4:	4604      	mov	r4, r0
    14a6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    14aa:	f8d0 70a0 	ldr.w	r7, [r0, #160]	; 0xa0
    14ae:	4d1f      	ldr	r5, [pc, #124]	; (152c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
    14b0:	4e1e      	ldr	r6, [pc, #120]	; (152c <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x8c>)
    14b2:	3d10      	subs	r5, #16
    14b4:	2210      	movs	r2, #16
    14b6:	2100      	movs	r1, #0
    14b8:	4620      	mov	r0, r4
    14ba:	f00f fc17 	bl	10cec <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    14be:	2210      	movs	r2, #16
    14c0:	2100      	movs	r1, #0
    14c2:	f104 0010 	add.w	r0, r4, #16
    14c6:	f00f fc11 	bl	10cec <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    14ca:	6828      	ldr	r0, [r5, #0]
    14cc:	1c40      	adds	r0, r0, #1
    14ce:	d108      	bne.n	14e2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
    14d0:	6868      	ldr	r0, [r5, #4]
    14d2:	1c40      	adds	r0, r0, #1
    14d4:	d105      	bne.n	14e2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
    14d6:	68a8      	ldr	r0, [r5, #8]
    14d8:	1c40      	adds	r0, r0, #1
    14da:	d102      	bne.n	14e2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x42>
    14dc:	68e8      	ldr	r0, [r5, #12]
    14de:	1c40      	adds	r0, r0, #1
    14e0:	d007      	beq.n	14f2 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x52>
    14e2:	6828      	ldr	r0, [r5, #0]
    14e4:	686a      	ldr	r2, [r5, #4]
    14e6:	68a9      	ldr	r1, [r5, #8]
    14e8:	68eb      	ldr	r3, [r5, #12]
    14ea:	6120      	str	r0, [r4, #16]
    14ec:	6162      	str	r2, [r4, #20]
    14ee:	61a1      	str	r1, [r4, #24]
    14f0:	61e3      	str	r3, [r4, #28]
    14f2:	2000      	movs	r0, #0
    14f4:	f000 fd84 	bl	2000 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    14f8:	4387      	bics	r7, r0
    14fa:	07f8      	lsls	r0, r7, #31
    14fc:	d113      	bne.n	1526 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
    14fe:	6830      	ldr	r0, [r6, #0]
    1500:	1c40      	adds	r0, r0, #1
    1502:	d108      	bne.n	1516 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
    1504:	6870      	ldr	r0, [r6, #4]
    1506:	1c40      	adds	r0, r0, #1
    1508:	d105      	bne.n	1516 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
    150a:	68b0      	ldr	r0, [r6, #8]
    150c:	1c40      	adds	r0, r0, #1
    150e:	d102      	bne.n	1516 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x76>
    1510:	68f0      	ldr	r0, [r6, #12]
    1512:	1c40      	adds	r0, r0, #1
    1514:	d007      	beq.n	1526 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x86>
    1516:	6832      	ldr	r2, [r6, #0]
    1518:	6870      	ldr	r0, [r6, #4]
    151a:	68b1      	ldr	r1, [r6, #8]
    151c:	68f3      	ldr	r3, [r6, #12]
    151e:	6022      	str	r2, [r4, #0]
    1520:	6060      	str	r0, [r4, #4]
    1522:	60a1      	str	r1, [r4, #8]
    1524:	60e3      	str	r3, [r4, #12]
    1526:	2000      	movs	r0, #0
    1528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    152c:	10000090 	.word	0x10000090

00001530 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    1530:	b538      	push	{r3, r4, r5, lr}
    1532:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    1536:	4604      	mov	r4, r0
    1538:	4822      	ldr	r0, [pc, #136]	; (15c4 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
    153a:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
    153e:	4d21      	ldr	r5, [pc, #132]	; (15c4 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x94>)
    1540:	6802      	ldr	r2, [r0, #0]
    1542:	3d14      	subs	r5, #20
    1544:	1c52      	adds	r2, r2, #1
    1546:	d104      	bne.n	1552 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x22>
    1548:	6842      	ldr	r2, [r0, #4]
    154a:	43d2      	mvns	r2, r2
    154c:	0412      	lsls	r2, r2, #16
    154e:	0c12      	lsrs	r2, r2, #16
    1550:	d035      	beq.n	15be <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
    1552:	07c9      	lsls	r1, r1, #31
    1554:	d033      	beq.n	15be <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x8e>
    1556:	6801      	ldr	r1, [r0, #0]
    1558:	6840      	ldr	r0, [r0, #4]
    155a:	f8ad 0000 	strh.w	r0, [sp]
    155e:	f8c4 1001 	str.w	r1, [r4, #1]
    1562:	f8bd 0000 	ldrh.w	r0, [sp]
    1566:	f8a4 0005 	strh.w	r0, [r4, #5]
    156a:	79a0      	ldrb	r0, [r4, #6]
    156c:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    1570:	71a0      	strb	r0, [r4, #6]
    1572:	6828      	ldr	r0, [r5, #0]
    1574:	1c40      	adds	r0, r0, #1
    1576:	d00c      	beq.n	1592 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
    1578:	6868      	ldr	r0, [r5, #4]
    157a:	1c40      	adds	r0, r0, #1
    157c:	d009      	beq.n	1592 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
    157e:	68a8      	ldr	r0, [r5, #8]
    1580:	1c40      	adds	r0, r0, #1
    1582:	d006      	beq.n	1592 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
    1584:	68e8      	ldr	r0, [r5, #12]
    1586:	1c40      	adds	r0, r0, #1
    1588:	d003      	beq.n	1592 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x62>
    158a:	2000      	movs	r0, #0
    158c:	f000 fd38 	bl	2000 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    1590:	b140      	cbz	r0, 15a4 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x74>
    1592:	2210      	movs	r2, #16
    1594:	2100      	movs	r1, #0
    1596:	1de0      	adds	r0, r4, #7
    1598:	f00f fba8 	bl	10cec <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    159c:	2001      	movs	r0, #1
    159e:	7020      	strb	r0, [r4, #0]
    15a0:	2000      	movs	r0, #0
    15a2:	bd38      	pop	{r3, r4, r5, pc}
    15a4:	682a      	ldr	r2, [r5, #0]
    15a6:	6869      	ldr	r1, [r5, #4]
    15a8:	68a8      	ldr	r0, [r5, #8]
    15aa:	68eb      	ldr	r3, [r5, #12]
    15ac:	f8c4 2007 	str.w	r2, [r4, #7]
    15b0:	f8c4 100b 	str.w	r1, [r4, #11]
    15b4:	f8c4 000f 	str.w	r0, [r4, #15]
    15b8:	f8c4 3013 	str.w	r3, [r4, #19]
    15bc:	e7ee      	b.n	159c <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    15be:	2000      	movs	r0, #0
    15c0:	e7ed      	b.n	159e <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6e>
    15c2:	0000      	.short	0x0000
    15c4:	100000a4 	.word	0x100000a4

000015c8 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    15c8:	2102      	movs	r1, #2
    15ca:	8001      	strh	r1, [r0, #0]
    15cc:	8041      	strh	r1, [r0, #2]
    15ce:	2100      	movs	r1, #0
    15d0:	7101      	strb	r1, [r0, #4]
    15d2:	2104      	movs	r1, #4
    15d4:	7141      	strb	r1, [r0, #5]
    15d6:	f243 117b 	movw	r1, #12667	; 0x317b
    15da:	80c1      	strh	r1, [r0, #6]
    15dc:	4901      	ldr	r1, [pc, #4]	; (15e4 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    15de:	6081      	str	r1, [r0, #8]
    15e0:	2000      	movs	r0, #0
    15e2:	4770      	bx	lr
    15e4:	122b2759 	.word	0x122b2759
    15e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    15ec:	798c      	ldrb	r4, [r1, #6]
    15ee:	f8dd e018 	ldr.w	lr, [sp, #24]
    15f2:	2c08      	cmp	r4, #8
    15f4:	d901      	bls.n	15fa <sdc_hci_cmd_vs_zephyr_read_version_info+0x32>
    15f6:	21da      	movs	r1, #218	; 0xda
    15f8:	e02c      	b.n	1654 <sdc_hci_cmd_vs_zephyr_read_version_info+0x8c>
    15fa:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 16a0 <sdc_hci_cmd_vs_zephyr_read_version_info+0xd8>
    15fe:	f85c 5020 	ldr.w	r5, [ip, r0, lsl #2]
    1602:	b10d      	cbz	r5, 1608 <sdc_hci_cmd_vs_zephyr_read_version_info+0x40>
    1604:	21db      	movs	r1, #219	; 0xdb
    1606:	e025      	b.n	1654 <sdc_hci_cmd_vs_zephyr_read_version_info+0x8c>
    1608:	79cd      	ldrb	r5, [r1, #7]
    160a:	2d00      	cmp	r5, #0
    160c:	d045      	beq.n	169a <sdc_hci_cmd_vs_zephyr_read_version_info+0xd2>
    160e:	006f      	lsls	r7, r5, #1
    1610:	370a      	adds	r7, #10
    1612:	681d      	ldr	r5, [r3, #0]
    1614:	2c02      	cmp	r4, #2
    1616:	443d      	add	r5, r7
    1618:	d901      	bls.n	161e <sdc_hci_cmd_vs_zephyr_read_version_info+0x56>
    161a:	4626      	mov	r6, r4
    161c:	e001      	b.n	1622 <sdc_hci_cmd_vs_zephyr_read_version_info+0x5a>
    161e:	f04f 0602 	mov.w	r6, #2
    1622:	442e      	add	r6, r5
    1624:	f1a6 0601 	sub.w	r6, r6, #1
    1628:	d901      	bls.n	162e <sdc_hci_cmd_vs_zephyr_read_version_info+0x66>
    162a:	4625      	mov	r5, r4
    162c:	e001      	b.n	1632 <sdc_hci_cmd_vs_zephyr_read_version_info+0x6a>
    162e:	f04f 0502 	mov.w	r5, #2
    1632:	f1a5 0501 	sub.w	r5, r5, #1
    1636:	ea26 0605 	bic.w	r6, r6, r5
    163a:	888d      	ldrh	r5, [r1, #4]
    163c:	4425      	add	r5, r4
    163e:	f1a4 0401 	sub.w	r4, r4, #1
    1642:	f1a5 0501 	sub.w	r5, r5, #1
    1646:	ea25 0504 	bic.w	r5, r5, r4
    164a:	f64f 74ff 	movw	r4, #65535	; 0xffff
    164e:	42a5      	cmp	r5, r4
    1650:	d303      	bcc.n	165a <sdc_hci_cmd_vs_zephyr_read_version_info+0x92>
    1652:	21e6      	movs	r1, #230	; 0xe6
    1654:	2017      	movs	r0, #23
    1656:	f7ff fd69 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    165a:	f1be 0f00 	cmp.w	lr, #0
    165e:	d118      	bne.n	1692 <sdc_hci_cmd_vs_zephyr_read_version_info+0xca>
    1660:	1bf4      	subs	r4, r6, r7
    1662:	f84c 4020 	str.w	r4, [ip, r0, lsl #2]
    1666:	8025      	strh	r5, [r4, #0]
    1668:	79c8      	ldrb	r0, [r1, #7]
    166a:	70a0      	strb	r0, [r4, #2]
    166c:	2001      	movs	r0, #1
    166e:	70e0      	strb	r0, [r4, #3]
    1670:	7122      	strb	r2, [r4, #4]
    1672:	6808      	ldr	r0, [r1, #0]
    1674:	f64f 72f0 	movw	r2, #65520	; 0xfff0
    1678:	0c00      	lsrs	r0, r0, #16
    167a:	80e0      	strh	r0, [r4, #6]
    167c:	8808      	ldrh	r0, [r1, #0]
    167e:	8120      	strh	r0, [r4, #8]
    1680:	2000      	movs	r0, #0
    1682:	e003      	b.n	168c <sdc_hci_cmd_vs_zephyr_read_version_info+0xc4>
    1684:	eb04 0740 	add.w	r7, r4, r0, lsl #1
    1688:	1c40      	adds	r0, r0, #1
    168a:	817a      	strh	r2, [r7, #10]
    168c:	79cf      	ldrb	r7, [r1, #7]
    168e:	4287      	cmp	r7, r0
    1690:	d8f8      	bhi.n	1684 <sdc_hci_cmd_vs_zephyr_read_version_info+0xbc>
    1692:	79c8      	ldrb	r0, [r1, #7]
    1694:	fb00 6005 	mla	r0, r0, r5, r6
    1698:	6018      	str	r0, [r3, #0]
    169a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    169e:	0000      	.short	0x0000
    16a0:	20000068 	.word	0x20000068
    16a4:	b530      	push	{r4, r5, lr}
    16a6:	4603      	mov	r3, r0
    16a8:	ea4f 0002 	mov.w	r0, r2
    16ac:	eb03 0440 	add.w	r4, r3, r0, lsl #1
    16b0:	8964      	ldrh	r4, [r4, #10]
    16b2:	428c      	cmp	r4, r1
    16b4:	d009      	beq.n	16ca <sdc_hci_cmd_vs_zephyr_read_version_info+0x102>
    16b6:	789c      	ldrb	r4, [r3, #2]
    16b8:	1c40      	adds	r0, r0, #1
    16ba:	fbb0 f5f4 	udiv	r5, r0, r4
    16be:	fb04 0015 	mls	r0, r4, r5, r0
    16c2:	b2c0      	uxtb	r0, r0
    16c4:	4290      	cmp	r0, r2
    16c6:	d1f1      	bne.n	16ac <sdc_hci_cmd_vs_zephyr_read_version_info+0xe4>
    16c8:	20ff      	movs	r0, #255	; 0xff
    16ca:	bd30      	pop	{r4, r5, pc}

000016cc <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>:
    16cc:	b570      	push	{r4, r5, r6, lr}
    16ce:	4605      	mov	r5, r0
    16d0:	4819      	ldr	r0, [pc, #100]	; (1738 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x6c>)
    16d2:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    16d6:	b364      	cbz	r4, 1732 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x66>
    16d8:	f5b5 6f70 	cmp.w	r5, #3840	; 0xf00
    16dc:	d304      	bcc.n	16e8 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x1c>
    16de:	f44f 7109 	mov.w	r1, #548	; 0x224
    16e2:	2017      	movs	r0, #23
    16e4:	f7ff fd22 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    16e8:	4629      	mov	r1, r5
    16ea:	4620      	mov	r0, r4
    16ec:	f00c f8e7 	bl	d8be <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
    16f0:	4601      	mov	r1, r0
    16f2:	28ff      	cmp	r0, #255	; 0xff
    16f4:	d004      	beq.n	1700 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x34>
    16f6:	4620      	mov	r0, r4
    16f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    16fc:	f00c b8f3 	b.w	d8e6 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    1700:	78a0      	ldrb	r0, [r4, #2]
    1702:	fbb5 f1f0 	udiv	r1, r5, r0
    1706:	fb00 5011 	mls	r0, r0, r1, r5
    170a:	b2c6      	uxtb	r6, r0
    170c:	4632      	mov	r2, r6
    170e:	f64f 71f0 	movw	r1, #65520	; 0xfff0
    1712:	4620      	mov	r0, r4
    1714:	f7ff ffc6 	bl	16a4 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
    1718:	4602      	mov	r2, r0
    171a:	28ff      	cmp	r0, #255	; 0xff
    171c:	d009      	beq.n	1732 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x66>
    171e:	42b2      	cmp	r2, r6
    1720:	d001      	beq.n	1726 <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI+0x5a>
    1722:	2000      	movs	r0, #0
    1724:	70e0      	strb	r0, [r4, #3]
    1726:	4629      	mov	r1, r5
    1728:	4620      	mov	r0, r4
    172a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    172e:	f00c b8c0 	b.w	d8b2 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
    1732:	2000      	movs	r0, #0
    1734:	bd70      	pop	{r4, r5, r6, pc}
    1736:	0000      	.short	0x0000
    1738:	20000068 	.word	0x20000068

0000173c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    173c:	4a08      	ldr	r2, [pc, #32]	; (1760 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x24>)
    173e:	b510      	push	{r4, lr}
    1740:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
    1744:	4601      	mov	r1, r0
    1746:	4620      	mov	r0, r4
    1748:	f00c f8b9 	bl	d8be <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
    174c:	4601      	mov	r1, r0
    174e:	28ff      	cmp	r0, #255	; 0xff
    1750:	d004      	beq.n	175c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x20>
    1752:	4620      	mov	r0, r4
    1754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1758:	f00c b8c5 	b.w	d8e6 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    175c:	2000      	movs	r0, #0
    175e:	bd10      	pop	{r4, pc}
    1760:	20000068 	.word	0x20000068

00001764 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    1764:	b5f0      	push	{r4, r5, r6, r7, lr}
    1766:	b089      	sub	sp, #36	; 0x24
    1768:	0004      	movs	r4, r0
    176a:	460e      	mov	r6, r1
    176c:	9406      	str	r4, [sp, #24]
    176e:	d007      	beq.n	1780 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x1c>
    1770:	2500      	movs	r5, #0
    1772:	0760      	lsls	r0, r4, #29
    1774:	d006      	beq.n	1784 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x20>
    1776:	f44f 718c 	mov.w	r1, #280	; 0x118
    177a:	2017      	movs	r0, #23
    177c:	f7ff fcd6 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1780:	2501      	movs	r5, #1
    1782:	e7f6      	b.n	1772 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0xe>
    1784:	4814      	ldr	r0, [pc, #80]	; (17d8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x74>)
    1786:	2200      	movs	r2, #0
    1788:	4f14      	ldr	r7, [pc, #80]	; (17dc <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x78>)
    178a:	6002      	str	r2, [r0, #0]
    178c:	6042      	str	r2, [r0, #4]
    178e:	e9d7 1000 	ldrd	r1, r0, [r7]
    1792:	f896 c000 	ldrb.w	ip, [r6]
    1796:	68bb      	ldr	r3, [r7, #8]
    1798:	f36c 601f 	bfi	r0, ip, #24, #8
    179c:	e9cd 0302 	strd	r0, r3, [sp, #8]
    17a0:	e9cd 5100 	strd	r5, r1, [sp]
    17a4:	ab06      	add	r3, sp, #24
    17a6:	a901      	add	r1, sp, #4
    17a8:	4610      	mov	r0, r2
    17aa:	f7ff ff1d 	bl	15e8 <sdc_hci_cmd_vs_zephyr_read_version_info+0x20>
    17ae:	e9d7 1003 	ldrd	r1, r0, [r7, #12]
    17b2:	7873      	ldrb	r3, [r6, #1]
    17b4:	697a      	ldr	r2, [r7, #20]
    17b6:	f363 601f 	bfi	r0, r3, #24, #8
    17ba:	e9cd 0202 	strd	r0, r2, [sp, #8]
    17be:	e9cd 5100 	strd	r5, r1, [sp]
    17c2:	ab06      	add	r3, sp, #24
    17c4:	2200      	movs	r2, #0
    17c6:	a901      	add	r1, sp, #4
    17c8:	2001      	movs	r0, #1
    17ca:	f7ff ff0d 	bl	15e8 <sdc_hci_cmd_vs_zephyr_read_version_info+0x20>
    17ce:	9806      	ldr	r0, [sp, #24]
    17d0:	b009      	add	sp, #36	; 0x24
    17d2:	1b00      	subs	r0, r0, r4
    17d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17d6:	0000      	.short	0x0000
    17d8:	20000068 	.word	0x20000068
    17dc:	000018cc 	.word	0x000018cc

000017e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    17e0:	b510      	push	{r4, lr}
    17e2:	4604      	mov	r4, r0
    17e4:	7980      	ldrb	r0, [r0, #6]
    17e6:	490e      	ldr	r1, [pc, #56]	; (1820 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x40>)
    17e8:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    17ec:	b1a8      	cbz	r0, 181a <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    17ee:	f64f 73f0 	movw	r3, #65520	; 0xfff0
    17f2:	79e1      	ldrb	r1, [r4, #7]
    17f4:	7882      	ldrb	r2, [r0, #2]
    17f6:	4291      	cmp	r1, r2
    17f8:	d20f      	bcs.n	181a <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    17fa:	1c4a      	adds	r2, r1, #1
    17fc:	71e2      	strb	r2, [r4, #7]
    17fe:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    1802:	8952      	ldrh	r2, [r2, #10]
    1804:	429a      	cmp	r2, r3
    1806:	d0f4      	beq.n	17f2 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x12>
    1808:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    180c:	8952      	ldrh	r2, [r2, #10]
    180e:	80a2      	strh	r2, [r4, #4]
    1810:	f00c f869 	bl	d8e6 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    1814:	6020      	str	r0, [r4, #0]
    1816:	2000      	movs	r0, #0
    1818:	bd10      	pop	{r4, pc}
    181a:	2005      	movs	r0, #5
    181c:	bd10      	pop	{r4, pc}
    181e:	0000      	.short	0x0000
    1820:	20000068 	.word	0x20000068

00001824 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    1824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1828:	4607      	mov	r7, r0
    182a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    182e:	8038      	strh	r0, [r7, #0]
    1830:	4812      	ldr	r0, [pc, #72]	; (187c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x58>)
    1832:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    1836:	b1ec      	cbz	r4, 1874 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
    1838:	78a5      	ldrb	r5, [r4, #2]
    183a:	7920      	ldrb	r0, [r4, #4]
    183c:	fbb0 f1f5 	udiv	r1, r0, r5
    1840:	fb05 0611 	mls	r6, r5, r1, r0
    1844:	4632      	mov	r2, r6
    1846:	f64f 71f0 	movw	r1, #65520	; 0xfff0
    184a:	4620      	mov	r0, r4
    184c:	f7ff ff2a 	bl	16a4 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
    1850:	4602      	mov	r2, r0
    1852:	28ff      	cmp	r0, #255	; 0xff
    1854:	d00e      	beq.n	1874 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x50>
    1856:	1ba8      	subs	r0, r5, r6
    1858:	4410      	add	r0, r2
    185a:	fbb0 f1f5 	udiv	r1, r0, r5
    185e:	fb05 0011 	mls	r0, r5, r1, r0
    1862:	7921      	ldrb	r1, [r4, #4]
    1864:	4408      	add	r0, r1
    1866:	b281      	uxth	r1, r0
    1868:	8039      	strh	r1, [r7, #0]
    186a:	4620      	mov	r0, r4
    186c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1870:	f00c b81f 	b.w	d8b2 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x1a>
    1874:	2000      	movs	r0, #0
    1876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    187a:	0000      	.short	0x0000
    187c:	20000068 	.word	0x20000068

00001880 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    1880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1884:	4606      	mov	r6, r0
    1886:	4810      	ldr	r0, [pc, #64]	; (18c8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x48>)
    1888:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
    188c:	4631      	mov	r1, r6
    188e:	4628      	mov	r0, r5
    1890:	f00c f815 	bl	d8be <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x26>
    1894:	4604      	mov	r4, r0
    1896:	28ff      	cmp	r0, #255	; 0xff
    1898:	d012      	beq.n	18c0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x40>
    189a:	f8d5 0006 	ldr.w	r0, [r5, #6]
    189e:	4621      	mov	r1, r4
    18a0:	ea4f 4730 	mov.w	r7, r0, ror #16
    18a4:	4628      	mov	r0, r5
    18a6:	f00c f81e 	bl	d8e6 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    18aa:	4601      	mov	r1, r0
    18ac:	4630      	mov	r0, r6
    18ae:	47b8      	blx	r7
    18b0:	eb05 0144 	add.w	r1, r5, r4, lsl #1
    18b4:	f64f 70f0 	movw	r0, #65520	; 0xfff0
    18b8:	8148      	strh	r0, [r1, #10]
    18ba:	2000      	movs	r0, #0
    18bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    18c0:	f243 0002 	movw	r0, #12290	; 0x3002
    18c4:	e7fa      	b.n	18bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x3c>
    18c6:	0000      	.short	0x0000
    18c8:	20000068 	.word	0x20000068
    18cc:	0000f5f5 	.word	0x0000f5f5
    18d0:	000802f8 	.word	0x000802f8
    18d4:	00000000 	.word	0x00000000
    18d8:	0000eba9 	.word	0x0000eba9
    18dc:	00080118 	.word	0x00080118
    18e0:	00000000 	.word	0x00000000

000018e4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    18e4:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18e8:	4c24      	ldr	r4, [pc, #144]	; (197c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
    18ea:	4606      	mov	r6, r0
    18ec:	b081      	sub	sp, #4
    18ee:	6820      	ldr	r0, [r4, #0]
    18f0:	469a      	mov	sl, r3
    18f2:	4693      	mov	fp, r2
    18f4:	b158      	cbz	r0, 190e <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    18f6:	7a01      	ldrb	r1, [r0, #8]
    18f8:	42b1      	cmp	r1, r6
    18fa:	d903      	bls.n	1904 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    18fc:	6840      	ldr	r0, [r0, #4]
    18fe:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    1902:	b140      	cbz	r0, 1916 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    1904:	f243 0002 	movw	r0, #12290	; 0x3002
    1908:	b005      	add	sp, #20
    190a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    190e:	21a5      	movs	r1, #165	; 0xa5
    1910:	2018      	movs	r0, #24
    1912:	f7ff fc0b 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1916:	4619      	mov	r1, r3
    1918:	9802      	ldr	r0, [sp, #8]
    191a:	f00c f81f 	bl	d95c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    191e:	4680      	mov	r8, r0
    1920:	4658      	mov	r0, fp
    1922:	990e      	ldr	r1, [sp, #56]	; 0x38
    1924:	f00c f810 	bl	d948 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    1928:	4605      	mov	r5, r0
    192a:	eb08 0005 	add.w	r0, r8, r5
    192e:	1d00      	adds	r0, r0, #4
    1930:	b287      	uxth	r7, r0
    1932:	6820      	ldr	r0, [r4, #0]
    1934:	46a1      	mov	r9, r4
    1936:	4639      	mov	r1, r7
    1938:	6800      	ldr	r0, [r0, #0]
    193a:	f00b ff55 	bl	d7e8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    193e:	0004      	movs	r4, r0
    1940:	d01a      	beq.n	1978 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
    1942:	8067      	strh	r7, [r4, #2]
    1944:	8025      	strh	r5, [r4, #0]
    1946:	4629      	mov	r1, r5
    1948:	1d20      	adds	r0, r4, #4
    194a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    194c:	4607      	mov	r7, r0
    194e:	465a      	mov	r2, fp
    1950:	2309      	movs	r3, #9
    1952:	9500      	str	r5, [sp, #0]
    1954:	f00b fec2 	bl	d6dc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    1958:	8820      	ldrh	r0, [r4, #0]
    195a:	4641      	mov	r1, r8
    195c:	4438      	add	r0, r7
    195e:	230a      	movs	r3, #10
    1960:	9a02      	ldr	r2, [sp, #8]
    1962:	f8cd a000 	str.w	sl, [sp]
    1966:	f00b feb9 	bl	d6dc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    196a:	f8d9 0000 	ldr.w	r0, [r9]
    196e:	6840      	ldr	r0, [r0, #4]
    1970:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    1974:	2000      	movs	r0, #0
    1976:	e7c7      	b.n	1908 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    1978:	2004      	movs	r0, #4
    197a:	e7c5      	b.n	1908 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    197c:	20000070 	.word	0x20000070

00001980 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    1980:	b570      	push	{r4, r5, r6, lr}
    1982:	4c14      	ldr	r4, [pc, #80]	; (19d4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    1984:	6823      	ldr	r3, [r4, #0]
    1986:	b18b      	cbz	r3, 19ac <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    1988:	7a19      	ldrb	r1, [r3, #8]
    198a:	4281      	cmp	r1, r0
    198c:	d912      	bls.n	19b4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    198e:	685a      	ldr	r2, [r3, #4]
    1990:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    1994:	b171      	cbz	r1, 19b4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    1996:	2500      	movs	r5, #0
    1998:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    199c:	884a      	ldrh	r2, [r1, #2]
    199e:	6818      	ldr	r0, [r3, #0]
    19a0:	f00b ff7a 	bl	d898 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    19a4:	6821      	ldr	r1, [r4, #0]
    19a6:	2000      	movs	r0, #0
    19a8:	7a0a      	ldrb	r2, [r1, #8]
    19aa:	e00c      	b.n	19c6 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    19ac:	21c6      	movs	r1, #198	; 0xc6
    19ae:	2018      	movs	r0, #24
    19b0:	f7ff fbbc 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    19b4:	f243 0002 	movw	r0, #12290	; 0x3002
    19b8:	bd70      	pop	{r4, r5, r6, pc}
    19ba:	684b      	ldr	r3, [r1, #4]
    19bc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    19c0:	b933      	cbnz	r3, 19d0 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    19c2:	1c40      	adds	r0, r0, #1
    19c4:	b2c0      	uxtb	r0, r0
    19c6:	4282      	cmp	r2, r0
    19c8:	d8f7      	bhi.n	19ba <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    19ca:	6808      	ldr	r0, [r1, #0]
    19cc:	f00b ff59 	bl	d882 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    19d0:	2000      	movs	r0, #0
    19d2:	bd70      	pop	{r4, r5, r6, pc}
    19d4:	20000070 	.word	0x20000070

000019d8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    19d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    19dc:	460d      	mov	r5, r1
    19de:	0004      	movs	r4, r0
    19e0:	4690      	mov	r8, r2
    19e2:	f04f 0600 	mov.w	r6, #0
    19e6:	d006      	beq.n	19f6 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
    19e8:	2700      	movs	r7, #0
    19ea:	07a0      	lsls	r0, r4, #30
    19ec:	d005      	beq.n	19fa <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
    19ee:	2186      	movs	r1, #134	; 0x86
    19f0:	2018      	movs	r0, #24
    19f2:	f7ff fb9b 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    19f6:	2701      	movs	r7, #1
    19f8:	e7f7      	b.n	19ea <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    19fa:	b1cd      	cbz	r5, 1a30 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    19fc:	4611      	mov	r1, r2
    19fe:	2000      	movs	r0, #0
    1a00:	f00b ff23 	bl	d84a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    1a04:	300c      	adds	r0, #12
    1a06:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    1a0a:	b98f      	cbnz	r7, 1a30 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    1a0c:	4f0a      	ldr	r7, [pc, #40]	; (1a38 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
    1a0e:	f104 000c 	add.w	r0, r4, #12
    1a12:	00aa      	lsls	r2, r5, #2
    1a14:	603c      	str	r4, [r7, #0]
    1a16:	7225      	strb	r5, [r4, #8]
    1a18:	6060      	str	r0, [r4, #4]
    1a1a:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    1a1e:	6020      	str	r0, [r4, #0]
    1a20:	2100      	movs	r1, #0
    1a22:	6860      	ldr	r0, [r4, #4]
    1a24:	f00f f962 	bl	10cec <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    1a28:	4641      	mov	r1, r8
    1a2a:	6838      	ldr	r0, [r7, #0]
    1a2c:	f00b ff0d 	bl	d84a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    1a30:	4630      	mov	r0, r6
    1a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1a36:	0000      	.short	0x0000
    1a38:	20000070 	.word	0x20000070

00001a3c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    1a3c:	b570      	push	{r4, r5, r6, lr}
    1a3e:	4d08      	ldr	r5, [pc, #32]	; (1a60 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    1a40:	6828      	ldr	r0, [r5, #0]
    1a42:	2800      	cmp	r0, #0
    1a44:	d00a      	beq.n	1a5c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    1a46:	2400      	movs	r4, #0
    1a48:	e004      	b.n	1a54 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    1a4a:	4620      	mov	r0, r4
    1a4c:	f7ff ff98 	bl	1980 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    1a50:	1c64      	adds	r4, r4, #1
    1a52:	b2e4      	uxtb	r4, r4
    1a54:	6828      	ldr	r0, [r5, #0]
    1a56:	7a00      	ldrb	r0, [r0, #8]
    1a58:	42a0      	cmp	r0, r4
    1a5a:	d8f6      	bhi.n	1a4a <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    1a5c:	bd70      	pop	{r4, r5, r6, pc}
    1a5e:	0000      	.short	0x0000
    1a60:	20000070 	.word	0x20000070

00001a64 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    1a64:	4909      	ldr	r1, [pc, #36]	; (1a8c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    1a66:	b510      	push	{r4, lr}
    1a68:	4602      	mov	r2, r0
    1a6a:	6809      	ldr	r1, [r1, #0]
    1a6c:	2000      	movs	r0, #0
    1a6e:	b149      	cbz	r1, 1a84 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    1a70:	7a0b      	ldrb	r3, [r1, #8]
    1a72:	4293      	cmp	r3, r2
    1a74:	d905      	bls.n	1a82 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    1a76:	6849      	ldr	r1, [r1, #4]
    1a78:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1a7c:	2900      	cmp	r1, #0
    1a7e:	d000      	beq.n	1a82 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    1a80:	1d08      	adds	r0, r1, #4
    1a82:	bd10      	pop	{r4, pc}
    1a84:	21ec      	movs	r1, #236	; 0xec
    1a86:	2018      	movs	r0, #24
    1a88:	f7ff fb50 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1a8c:	20000070 	.word	0x20000070

00001a90 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    1a90:	490a      	ldr	r1, [pc, #40]	; (1abc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    1a92:	b510      	push	{r4, lr}
    1a94:	4602      	mov	r2, r0
    1a96:	6809      	ldr	r1, [r1, #0]
    1a98:	2000      	movs	r0, #0
    1a9a:	b159      	cbz	r1, 1ab4 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    1a9c:	7a0b      	ldrb	r3, [r1, #8]
    1a9e:	4293      	cmp	r3, r2
    1aa0:	d907      	bls.n	1ab2 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    1aa2:	6849      	ldr	r1, [r1, #4]
    1aa4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1aa8:	2900      	cmp	r1, #0
    1aaa:	d002      	beq.n	1ab2 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    1aac:	f831 0b04 	ldrh.w	r0, [r1], #4
    1ab0:	4408      	add	r0, r1
    1ab2:	bd10      	pop	{r4, pc}
    1ab4:	21fa      	movs	r1, #250	; 0xfa
    1ab6:	2018      	movs	r0, #24
    1ab8:	f7ff fb38 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1abc:	20000070 	.word	0x20000070
    1ac0:	b570      	push	{r4, r5, r6, lr}
    1ac2:	4b1e      	ldr	r3, [pc, #120]	; (1b3c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0xac>)
    1ac4:	6845      	ldr	r5, [r0, #4]
    1ac6:	4604      	mov	r4, r0
    1ac8:	2200      	movs	r2, #0
    1aca:	b1a1      	cbz	r1, 1af6 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x66>
    1acc:	2001      	movs	r0, #1
    1ace:	7060      	strb	r0, [r4, #1]
    1ad0:	8858      	ldrh	r0, [r3, #2]
    1ad2:	0881      	lsrs	r1, r0, #2
    1ad4:	f05f 0000 	movs.w	r0, #0
    1ad8:	eb04 0340 	add.w	r3, r4, r0, lsl #1
    1adc:	eb04 0680 	add.w	r6, r4, r0, lsl #2
    1ae0:	831a      	strh	r2, [r3, #24]
    1ae2:	8419      	strh	r1, [r3, #32]
    1ae4:	fb00 5301 	mla	r3, r0, r1, r5
    1ae8:	6073      	str	r3, [r6, #4]
    1aea:	1823      	adds	r3, r4, r0
    1aec:	1c40      	adds	r0, r0, #1
    1aee:	751a      	strb	r2, [r3, #20]
    1af0:	2804      	cmp	r0, #4
    1af2:	d3f1      	bcc.n	1ad8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x48>
    1af4:	bd70      	pop	{r4, r5, r6, pc}
    1af6:	7062      	strb	r2, [r4, #1]
    1af8:	f05f 0000 	movs.w	r0, #0
    1afc:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    1b00:	830a      	strh	r2, [r1, #24]
    1b02:	840a      	strh	r2, [r1, #32]
    1b04:	eb04 0180 	add.w	r1, r4, r0, lsl #2
    1b08:	604a      	str	r2, [r1, #4]
    1b0a:	1821      	adds	r1, r4, r0
    1b0c:	1c40      	adds	r0, r0, #1
    1b0e:	750a      	strb	r2, [r1, #20]
    1b10:	2804      	cmp	r0, #4
    1b12:	d3f3      	bcc.n	1afc <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x6c>
    1b14:	8858      	ldrh	r0, [r3, #2]
    1b16:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    1b1a:	d201      	bcs.n	1b20 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x90>
    1b1c:	0846      	lsrs	r6, r0, #1
    1b1e:	e000      	b.n	1b22 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x92>
    1b20:	26ff      	movs	r6, #255	; 0xff
    1b22:	f00b ff8f 	bl	da44 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    1b26:	6065      	str	r5, [r4, #4]
    1b28:	8420      	strh	r0, [r4, #32]
    1b2a:	1829      	adds	r1, r5, r0
    1b2c:	60a1      	str	r1, [r4, #8]
    1b2e:	8466      	strh	r6, [r4, #34]	; 0x22
    1b30:	60e5      	str	r5, [r4, #12]
    1b32:	84a0      	strh	r0, [r4, #36]	; 0x24
    1b34:	6121      	str	r1, [r4, #16]
    1b36:	84e6      	strh	r6, [r4, #38]	; 0x26
    1b38:	bd70      	pop	{r4, r5, r6, pc}
    1b3a:	0000      	.short	0x0000
    1b3c:	20000074 	.word	0x20000074

00001b40 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>:
    1b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1b44:	b158      	cbz	r0, 1b5e <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x1e>
    1b46:	2500      	movs	r5, #0
    1b48:	4411      	add	r1, r2
    1b4a:	4e24      	ldr	r6, [pc, #144]	; (1bdc <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x9c>)
    1b4c:	b2cc      	uxtb	r4, r1
    1b4e:	2700      	movs	r7, #0
    1b50:	7034      	strb	r4, [r6, #0]
    1b52:	0781      	lsls	r1, r0, #30
    1b54:	d005      	beq.n	1b62 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x22>
    1b56:	214e      	movs	r1, #78	; 0x4e
    1b58:	2009      	movs	r0, #9
    1b5a:	f7ff fae7 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1b5e:	2501      	movs	r5, #1
    1b60:	e7f2      	b.n	1b48 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8>
    1b62:	2b1f      	cmp	r3, #31
    1b64:	d804      	bhi.n	1b70 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x30>
    1b66:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1b6a:	ea01 0183 	and.w	r1, r1, r3, lsl #2
    1b6e:	e009      	b.n	1b84 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x44>
    1b70:	0059      	lsls	r1, r3, #1
    1b72:	2bff      	cmp	r3, #255	; 0xff
    1b74:	d90c      	bls.n	1b90 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x50>
    1b76:	f103 02ff 	add.w	r2, r3, #255	; 0xff
    1b7a:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    1b7e:	d200      	bcs.n	1b82 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    1b80:	4611      	mov	r1, r2
    1b82:	b289      	uxth	r1, r1
    1b84:	f64f 72fc 	movw	r2, #65532	; 0xfffc
    1b88:	1cc9      	adds	r1, r1, #3
    1b8a:	4011      	ands	r1, r2
    1b8c:	b135      	cbz	r5, 1b9c <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x5c>
    1b8e:	e007      	b.n	1ba0 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x60>
    1b90:	227c      	movs	r2, #124	; 0x7c
    1b92:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    1b96:	d3f4      	bcc.n	1b82 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    1b98:	217c      	movs	r1, #124	; 0x7c
    1b9a:	e7f2      	b.n	1b82 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x42>
    1b9c:	6070      	str	r0, [r6, #4]
    1b9e:	8071      	strh	r1, [r6, #2]
    1ba0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    1ba4:	eb07 03c2 	add.w	r3, r7, r2, lsl #3
    1ba8:	2200      	movs	r2, #0
    1baa:	6876      	ldr	r6, [r6, #4]
    1bac:	f04f 0c01 	mov.w	ip, #1
    1bb0:	e00d      	b.n	1bce <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x8e>
    1bb2:	b94d      	cbnz	r5, 1bc8 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x88>
    1bb4:	eb02 0782 	add.w	r7, r2, r2, lsl #2
    1bb8:	eb00 0e03 	add.w	lr, r0, r3
    1bbc:	f806 c037 	strb.w	ip, [r6, r7, lsl #3]
    1bc0:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
    1bc4:	f8c7 e004 	str.w	lr, [r7, #4]
    1bc8:	1c52      	adds	r2, r2, #1
    1bca:	440b      	add	r3, r1
    1bcc:	b2d2      	uxtb	r2, r2
    1bce:	42a2      	cmp	r2, r4
    1bd0:	d3ef      	bcc.n	1bb2 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ+0x72>
    1bd2:	1ddb      	adds	r3, r3, #7
    1bd4:	f023 0007 	bic.w	r0, r3, #7
    1bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1bdc:	20000074 	.word	0x20000074

00001be0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>:
    1be0:	b570      	push	{r4, r5, r6, lr}
    1be2:	4a10      	ldr	r2, [pc, #64]	; (1c24 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x44>)
    1be4:	2000      	movs	r0, #0
    1be6:	6851      	ldr	r1, [r2, #4]
    1be8:	7812      	ldrb	r2, [r2, #0]
    1bea:	e014      	b.n	1c16 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x36>
    1bec:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    1bf0:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
    1bf4:	b16b      	cbz	r3, 1c12 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x32>
    1bf6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1bfa:	eb11 04c0 	adds.w	r4, r1, r0, lsl #3
    1bfe:	d00c      	beq.n	1c1a <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0x3a>
    1c00:	2500      	movs	r5, #0
    1c02:	70a5      	strb	r5, [r4, #2]
    1c04:	2101      	movs	r1, #1
    1c06:	4620      	mov	r0, r4
    1c08:	f7ff ff5a 	bl	1ac0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    1c0c:	7025      	strb	r5, [r4, #0]
    1c0e:	4620      	mov	r0, r4
    1c10:	bd70      	pop	{r4, r5, r6, pc}
    1c12:	1c40      	adds	r0, r0, #1
    1c14:	b2c0      	uxtb	r0, r0
    1c16:	4290      	cmp	r0, r2
    1c18:	d3e8      	bcc.n	1bec <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ+0xc>
    1c1a:	21a9      	movs	r1, #169	; 0xa9
    1c1c:	2009      	movs	r0, #9
    1c1e:	f7ff fa85 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1c22:	0000      	.short	0x0000
    1c24:	20000074 	.word	0x20000074

00001c28 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>:
    1c28:	4804      	ldr	r0, [pc, #16]	; (1c3c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x14>)
    1c2a:	b510      	push	{r4, lr}
    1c2c:	8840      	ldrh	r0, [r0, #2]
    1c2e:	0884      	lsrs	r4, r0, #2
    1c30:	f00b ff08 	bl	da44 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x11a>
    1c34:	4284      	cmp	r4, r0
    1c36:	d300      	bcc.n	1c3a <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x12>
    1c38:	4620      	mov	r0, r4
    1c3a:	bd10      	pop	{r4, pc}
    1c3c:	20000074 	.word	0x20000074
    1c40:	b530      	push	{r4, r5, lr}
    1c42:	490d      	ldr	r1, [pc, #52]	; (1c78 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x50>)
    1c44:	2001      	movs	r0, #1
    1c46:	6048      	str	r0, [r1, #4]
    1c48:	1e82      	subs	r2, r0, #2
    1c4a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    1c4e:	490b      	ldr	r1, [pc, #44]	; (1c7c <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x54>)
    1c50:	6088      	str	r0, [r1, #8]
    1c52:	2300      	movs	r3, #0
    1c54:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    1c58:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    1c5c:	4c08      	ldr	r4, [pc, #32]	; (1c80 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x58>)
    1c5e:	6023      	str	r3, [r4, #0]
    1c60:	1d25      	adds	r5, r4, #4
    1c62:	6028      	str	r0, [r5, #0]
    1c64:	6088      	str	r0, [r1, #8]
    1c66:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    1c6a:	6023      	str	r3, [r4, #0]
    1c6c:	6028      	str	r0, [r5, #0]
    1c6e:	4906      	ldr	r1, [pc, #24]	; (1c88 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x60>)
    1c70:	4804      	ldr	r0, [pc, #16]	; (1c84 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x5c>)
    1c72:	6008      	str	r0, [r1, #0]
    1c74:	bd30      	pop	{r4, r5, pc}
    1c76:	0000      	.short	0x0000
    1c78:	4000e000 	.word	0x4000e000
    1c7c:	4000f000 	.word	0x4000f000
    1c80:	4000f500 	.word	0x4000f500
    1c84:	3ff60000 	.word	0x3ff60000
    1c88:	4001f508 	.word	0x4001f508

00001c8c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    1c8c:	b510      	push	{r4, lr}
    1c8e:	f7ff ffd7 	bl	1c40 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    1c92:	f00b ffae 	bl	dbf2 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    1c96:	4903      	ldr	r1, [pc, #12]	; (1ca4 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    1c98:	4801      	ldr	r0, [pc, #4]	; (1ca0 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    1c9a:	6008      	str	r0, [r1, #0]
    1c9c:	bd10      	pop	{r4, pc}
    1c9e:	0000      	.short	0x0000
    1ca0:	3ff60000 	.word	0x3ff60000
    1ca4:	4001f508 	.word	0x4001f508

00001ca8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    1ca8:	b510      	push	{r4, lr}
    1caa:	f7ff ffc9 	bl	1c40 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ+0x18>
    1cae:	f00b ffa0 	bl	dbf2 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x42>
    1cb2:	f000 f887 	bl	1dc4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    1cb6:	4905      	ldr	r1, [pc, #20]	; (1ccc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    1cb8:	4803      	ldr	r0, [pc, #12]	; (1cc8 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x20>)
    1cba:	6008      	str	r0, [r1, #0]
    1cbc:	f000 f8b8 	bl	1e30 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    1cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1cc4:	f000 b8dc 	b.w	1e80 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    1cc8:	3ff60000 	.word	0x3ff60000
    1ccc:	4001f508 	.word	0x4001f508
    1cd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1cd4:	4682      	mov	sl, r0
    1cd6:	4838      	ldr	r0, [pc, #224]	; (1db8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6c>)
    1cd8:	f00e fef3 	bl	10ac2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    1cdc:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 1db8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6c>
    1ce0:	b128      	cbz	r0, 1cee <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x46>
    1ce2:	2601      	movs	r6, #1
    1ce4:	f10b 0001 	add.w	r0, fp, #1
    1ce8:	21ff      	movs	r1, #255	; 0xff
    1cea:	7001      	strb	r1, [r0, #0]
    1cec:	e000      	b.n	1cf0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x48>
    1cee:	2600      	movs	r6, #0
    1cf0:	f44f 7580 	mov.w	r5, #256	; 0x100
    1cf4:	4c31      	ldr	r4, [pc, #196]	; (1dbc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x70>)
    1cf6:	f04f 0800 	mov.w	r8, #0
    1cfa:	1d2f      	adds	r7, r5, #4
    1cfc:	2101      	movs	r1, #1
    1cfe:	6061      	str	r1, [r4, #4]
    1d00:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    1d04:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1d08:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    1d0c:	6021      	str	r1, [r4, #0]
    1d0e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 1dc0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x74>
    1d12:	e01c      	b.n	1d4e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2>
    1d14:	f8d9 0000 	ldr.w	r0, [r9]
    1d18:	06c0      	lsls	r0, r0, #27
    1d1a:	d518      	bpl.n	1d4e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2>
    1d1c:	200e      	movs	r0, #14
    1d1e:	f00b ff77 	bl	dc10 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    1d22:	f3ef 8010 	mrs	r0, PRIMASK
    1d26:	9000      	str	r0, [sp, #0]
    1d28:	b672      	cpsid	i
    1d2a:	2103      	movs	r1, #3
    1d2c:	4620      	mov	r0, r4
    1d2e:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    1d32:	4629      	mov	r1, r5
    1d34:	f00b ff79 	bl	dc2a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1d38:	b930      	cbnz	r0, 1d48 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    1d3a:	4639      	mov	r1, r7
    1d3c:	4620      	mov	r0, r4
    1d3e:	f00b ff74 	bl	dc2a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1d42:	b908      	cbnz	r0, 1d48 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0xa0>
    1d44:	f00e ff54 	bl	10bf0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    1d48:	9800      	ldr	r0, [sp, #0]
    1d4a:	b900      	cbnz	r0, 1d4e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2>
    1d4c:	b662      	cpsie	i
    1d4e:	4629      	mov	r1, r5
    1d50:	4620      	mov	r0, r4
    1d52:	f00b ff6a 	bl	dc2a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1d56:	b928      	cbnz	r0, 1d64 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x18>
    1d58:	4639      	mov	r1, r7
    1d5a:	4620      	mov	r0, r4
    1d5c:	f00b ff65 	bl	dc2a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1d60:	2800      	cmp	r0, #0
    1d62:	d0d7      	beq.n	1d14 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x6c>
    1d64:	4639      	mov	r1, r7
    1d66:	4620      	mov	r0, r4
    1d68:	f00b ff5f 	bl	dc2a <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x7a>
    1d6c:	2800      	cmp	r0, #0
    1d6e:	d1c5      	bne.n	1cfc <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x54>
    1d70:	bb06      	cbnz	r6, 1db4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x68>
    1d72:	f89b 1001 	ldrb.w	r1, [fp, #1]
    1d76:	f88d 1000 	strb.w	r1, [sp]
    1d7a:	9900      	ldr	r1, [sp, #0]
    1d7c:	9100      	str	r1, [sp, #0]
    1d7e:	f89d 1000 	ldrb.w	r1, [sp]
    1d82:	b109      	cbz	r1, 1d88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c>
    1d84:	2501      	movs	r5, #1
    1d86:	e000      	b.n	1d8a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3e>
    1d88:	2500      	movs	r5, #0
    1d8a:	f10b 0001 	add.w	r0, fp, #1
    1d8e:	f880 8000 	strb.w	r8, [r0]
    1d92:	2003      	movs	r0, #3
    1d94:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    1d98:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1d9c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    1da0:	200e      	movs	r0, #14
    1da2:	f00b ff35 	bl	dc10 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x60>
    1da6:	4804      	ldr	r0, [pc, #16]	; (1db8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6c>)
    1da8:	f00e fea2 	bl	10af0 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    1dac:	b115      	cbz	r5, 1db4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x68>
    1dae:	2011      	movs	r0, #17
    1db0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1db4:	2000      	movs	r0, #0
    1db6:	e7fb      	b.n	1db0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x64>
    1db8:	20000374 	.word	0x20000374
    1dbc:	4000e000 	.word	0x4000e000
    1dc0:	e000ed10 	.word	0xe000ed10

00001dc4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    1dc4:	b510      	push	{r4, lr}
    1dc6:	4806      	ldr	r0, [pc, #24]	; (1de0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1dc8:	f00e fe8e 	bl	10ae8 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    1dcc:	b118      	cbz	r0, 1dd6 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    1dce:	2130      	movs	r1, #48	; 0x30
    1dd0:	201d      	movs	r0, #29
    1dd2:	f7ff f9ab 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1dd6:	4802      	ldr	r0, [pc, #8]	; (1de0 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1dd8:	2100      	movs	r1, #0
    1dda:	7041      	strb	r1, [r0, #1]
    1ddc:	bd10      	pop	{r4, pc}
    1dde:	0000      	.short	0x0000
    1de0:	20000374 	.word	0x20000374

00001de4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    1de4:	b570      	push	{r4, r5, r6, lr}
    1de6:	4911      	ldr	r1, [pc, #68]	; (1e2c <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    1de8:	680a      	ldr	r2, [r1, #0]
    1dea:	b1ea      	cbz	r2, 1e28 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    1dec:	2300      	movs	r3, #0
    1dee:	461d      	mov	r5, r3
    1df0:	2401      	movs	r4, #1
    1df2:	684a      	ldr	r2, [r1, #4]
    1df4:	1c52      	adds	r2, r2, #1
    1df6:	604a      	str	r2, [r1, #4]
    1df8:	2a09      	cmp	r2, #9
    1dfa:	d300      	bcc.n	1dfe <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    1dfc:	604d      	str	r5, [r1, #4]
    1dfe:	790e      	ldrb	r6, [r1, #4]
    1e00:	fa04 f206 	lsl.w	r2, r4, r6
    1e04:	680e      	ldr	r6, [r1, #0]
    1e06:	4216      	tst	r6, r2
    1e08:	d00b      	beq.n	1e22 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    1e0a:	f3ef 8310 	mrs	r3, PRIMASK
    1e0e:	b672      	cpsid	i
    1e10:	680c      	ldr	r4, [r1, #0]
    1e12:	4394      	bics	r4, r2
    1e14:	600c      	str	r4, [r1, #0]
    1e16:	b903      	cbnz	r3, 1e1a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    1e18:	b662      	cpsie	i
    1e1a:	6849      	ldr	r1, [r1, #4]
    1e1c:	6001      	str	r1, [r0, #0]
    1e1e:	2000      	movs	r0, #0
    1e20:	bd70      	pop	{r4, r5, r6, pc}
    1e22:	1c5b      	adds	r3, r3, #1
    1e24:	2b09      	cmp	r3, #9
    1e26:	d3e4      	bcc.n	1df2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    1e28:	2005      	movs	r0, #5
    1e2a:	bd70      	pop	{r4, r5, r6, pc}
    1e2c:	2000007c 	.word	0x2000007c

00001e30 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    1e30:	4802      	ldr	r0, [pc, #8]	; (1e3c <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    1e32:	2100      	movs	r1, #0
    1e34:	6001      	str	r1, [r0, #0]
    1e36:	6041      	str	r1, [r0, #4]
    1e38:	4770      	bx	lr
    1e3a:	0000      	.short	0x0000
    1e3c:	2000007c 	.word	0x2000007c

00001e40 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    1e40:	b510      	push	{r4, lr}
    1e42:	4c04      	ldr	r4, [pc, #16]	; (1e54 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    1e44:	7820      	ldrb	r0, [r4, #0]
    1e46:	28ff      	cmp	r0, #255	; 0xff
    1e48:	d003      	beq.n	1e52 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    1e4a:	f00a fd5d 	bl	c908 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    1e4e:	20ff      	movs	r0, #255	; 0xff
    1e50:	7020      	strb	r0, [r4, #0]
    1e52:	bd10      	pop	{r4, pc}
    1e54:	20000000 	.word	0x20000000

00001e58 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    1e58:	b510      	push	{r4, lr}
    1e5a:	4c08      	ldr	r4, [pc, #32]	; (1e7c <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    1e5c:	7861      	ldrb	r1, [r4, #1]
    1e5e:	b109      	cbz	r1, 1e64 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    1e60:	200f      	movs	r0, #15
    1e62:	bd10      	pop	{r4, pc}
    1e64:	f00a fd16 	bl	c894 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    1e68:	7020      	strb	r0, [r4, #0]
    1e6a:	28ff      	cmp	r0, #255	; 0xff
    1e6c:	d001      	beq.n	1e72 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    1e6e:	2000      	movs	r0, #0
    1e70:	bd10      	pop	{r4, pc}
    1e72:	2173      	movs	r1, #115	; 0x73
    1e74:	201f      	movs	r0, #31
    1e76:	f7ff f959 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1e7a:	0000      	.short	0x0000
    1e7c:	20000000 	.word	0x20000000

00001e80 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    1e80:	4901      	ldr	r1, [pc, #4]	; (1e88 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    1e82:	2000      	movs	r0, #0
    1e84:	7048      	strb	r0, [r1, #1]
    1e86:	4770      	bx	lr
    1e88:	20000000 	.word	0x20000000

00001e8c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    1e8c:	4806      	ldr	r0, [pc, #24]	; (1ea8 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    1e8e:	4a07      	ldr	r2, [pc, #28]	; (1eac <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    1e90:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    1e92:	8852      	ldrh	r2, [r2, #2]
    1e94:	4291      	cmp	r1, r2
    1e96:	d104      	bne.n	1ea2 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    1e98:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    1e9c:	b108      	cbz	r0, 1ea2 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    1e9e:	2000      	movs	r0, #0
    1ea0:	4770      	bx	lr
    1ea2:	2001      	movs	r0, #1
    1ea4:	4770      	bx	lr
    1ea6:	0000      	.short	0x0000
    1ea8:	20001190 	.word	0x20001190
    1eac:	20000368 	.word	0x20000368

00001eb0 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    1eb0:	4901      	ldr	r1, [pc, #4]	; (1eb8 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    1eb2:	8048      	strh	r0, [r1, #2]
    1eb4:	4770      	bx	lr
    1eb6:	0000      	.short	0x0000
    1eb8:	20000368 	.word	0x20000368

00001ebc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    1ebc:	4808      	ldr	r0, [pc, #32]	; (1ee0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    1ebe:	4a09      	ldr	r2, [pc, #36]	; (1ee4 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    1ec0:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    1ec2:	8852      	ldrh	r2, [r2, #2]
    1ec4:	4291      	cmp	r1, r2
    1ec6:	d109      	bne.n	1edc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    1ec8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1ecc:	8481      	strh	r1, [r0, #36]	; 0x24
    1ece:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    1ed2:	b119      	cbz	r1, 1edc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    1ed4:	2100      	movs	r1, #0
    1ed6:	7001      	strb	r1, [r0, #0]
    1ed8:	2001      	movs	r0, #1
    1eda:	4770      	bx	lr
    1edc:	2000      	movs	r0, #0
    1ede:	4770      	bx	lr
    1ee0:	20001190 	.word	0x20001190
    1ee4:	20000368 	.word	0x20000368

00001ee8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    1ee8:	4807      	ldr	r0, [pc, #28]	; (1f08 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    1eea:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    1eee:	2901      	cmp	r1, #1
    1ef0:	d007      	beq.n	1f02 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    1ef2:	2101      	movs	r1, #1
    1ef4:	7001      	strb	r1, [r0, #0]
    1ef6:	4805      	ldr	r0, [pc, #20]	; (1f0c <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    1ef8:	4903      	ldr	r1, [pc, #12]	; (1f08 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    1efa:	8800      	ldrh	r0, [r0, #0]
    1efc:	8488      	strh	r0, [r1, #36]	; 0x24
    1efe:	2001      	movs	r0, #1
    1f00:	4770      	bx	lr
    1f02:	2000      	movs	r0, #0
    1f04:	4770      	bx	lr
    1f06:	0000      	.short	0x0000
    1f08:	20001190 	.word	0x20001190
    1f0c:	20000368 	.word	0x20000368

00001f10 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    1f10:	4906      	ldr	r1, [pc, #24]	; (1f2c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    1f12:	4b07      	ldr	r3, [pc, #28]	; (1f30 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    1f14:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    1f16:	885b      	ldrh	r3, [r3, #2]
    1f18:	429a      	cmp	r2, r3
    1f1a:	d105      	bne.n	1f28 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    1f1c:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    1f20:	b112      	cbz	r2, 1f28 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    1f22:	6001      	str	r1, [r0, #0]
    1f24:	2001      	movs	r0, #1
    1f26:	4770      	bx	lr
    1f28:	2000      	movs	r0, #0
    1f2a:	4770      	bx	lr
    1f2c:	20001190 	.word	0x20001190
    1f30:	20000368 	.word	0x20000368

00001f34 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    1f34:	4909      	ldr	r1, [pc, #36]	; (1f5c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    1f36:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    1f38:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    1f3c:	3bff      	subs	r3, #255	; 0xff
    1f3e:	d002      	beq.n	1f46 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    1f40:	2100      	movs	r1, #0
    1f42:	6001      	str	r1, [r0, #0]
    1f44:	e007      	b.n	1f56 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    1f46:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    1f4a:	4904      	ldr	r1, [pc, #16]	; (1f5c <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    1f4c:	2a01      	cmp	r2, #1
    1f4e:	d002      	beq.n	1f56 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    1f50:	6001      	str	r1, [r0, #0]
    1f52:	2001      	movs	r0, #1
    1f54:	4770      	bx	lr
    1f56:	2000      	movs	r0, #0
    1f58:	4770      	bx	lr
    1f5a:	0000      	.short	0x0000
    1f5c:	20001190 	.word	0x20001190

00001f60 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    1f60:	4901      	ldr	r1, [pc, #4]	; (1f68 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    1f62:	8008      	strh	r0, [r1, #0]
    1f64:	4770      	bx	lr
    1f66:	0000      	.short	0x0000
    1f68:	20000368 	.word	0x20000368

00001f6c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    1f6c:	4905      	ldr	r1, [pc, #20]	; (1f84 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    1f6e:	2000      	movs	r0, #0
    1f70:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    1f74:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1f78:	8488      	strh	r0, [r1, #36]	; 0x24
    1f7a:	4903      	ldr	r1, [pc, #12]	; (1f88 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    1f7c:	8008      	strh	r0, [r1, #0]
    1f7e:	8048      	strh	r0, [r1, #2]
    1f80:	4770      	bx	lr
    1f82:	0000      	.short	0x0000
    1f84:	20001190 	.word	0x20001190
    1f88:	20000368 	.word	0x20000368
    1f8c:	4905      	ldr	r1, [pc, #20]	; (1fa4 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    1f8e:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    1f90:	4282      	cmp	r2, r0
    1f92:	d105      	bne.n	1fa0 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    1f94:	2000      	movs	r0, #0
    1f96:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    1f9a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    1f9e:	8488      	strh	r0, [r1, #36]	; 0x24
    1fa0:	4770      	bx	lr
    1fa2:	0000      	.short	0x0000
    1fa4:	20001190 	.word	0x20001190

00001fa8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    1fa8:	4a0a      	ldr	r2, [pc, #40]	; (1fd4 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    1faa:	b110      	cbz	r0, 1fb2 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    1fac:	2801      	cmp	r0, #1
    1fae:	d007      	beq.n	1fc0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    1fb0:	e00e      	b.n	1fd0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1fb2:	7850      	ldrb	r0, [r2, #1]
    1fb4:	b160      	cbz	r0, 1fd0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1fb6:	f8d2 0002 	ldr.w	r0, [r2, #2]
    1fba:	6008      	str	r0, [r1, #0]
    1fbc:	88d0      	ldrh	r0, [r2, #6]
    1fbe:	e004      	b.n	1fca <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    1fc0:	7810      	ldrb	r0, [r2, #0]
    1fc2:	b128      	cbz	r0, 1fd0 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1fc4:	6890      	ldr	r0, [r2, #8]
    1fc6:	6008      	str	r0, [r1, #0]
    1fc8:	8990      	ldrh	r0, [r2, #12]
    1fca:	8088      	strh	r0, [r1, #4]
    1fcc:	2001      	movs	r0, #1
    1fce:	4770      	bx	lr
    1fd0:	2000      	movs	r0, #0
    1fd2:	4770      	bx	lr
    1fd4:	20000376 	.word	0x20000376

00001fd8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    1fd8:	4a08      	ldr	r2, [pc, #32]	; (1ffc <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    1fda:	2301      	movs	r3, #1
    1fdc:	b138      	cbz	r0, 1fee <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    1fde:	2801      	cmp	r0, #1
    1fe0:	d104      	bne.n	1fec <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    1fe2:	7013      	strb	r3, [r2, #0]
    1fe4:	6808      	ldr	r0, [r1, #0]
    1fe6:	6090      	str	r0, [r2, #8]
    1fe8:	8888      	ldrh	r0, [r1, #4]
    1fea:	8190      	strh	r0, [r2, #12]
    1fec:	4770      	bx	lr
    1fee:	7053      	strb	r3, [r2, #1]
    1ff0:	6808      	ldr	r0, [r1, #0]
    1ff2:	f8c2 0002 	str.w	r0, [r2, #2]
    1ff6:	8888      	ldrh	r0, [r1, #4]
    1ff8:	80d0      	strh	r0, [r2, #6]
    1ffa:	4770      	bx	lr
    1ffc:	20000376 	.word	0x20000376

00002000 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    2000:	4906      	ldr	r1, [pc, #24]	; (201c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    2002:	b110      	cbz	r0, 200a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    2004:	2801      	cmp	r0, #1
    2006:	d002      	beq.n	200e <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    2008:	e005      	b.n	2016 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    200a:	7848      	ldrb	r0, [r1, #1]
    200c:	e000      	b.n	2010 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    200e:	7808      	ldrb	r0, [r1, #0]
    2010:	b108      	cbz	r0, 2016 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    2012:	2001      	movs	r0, #1
    2014:	4770      	bx	lr
    2016:	2000      	movs	r0, #0
    2018:	4770      	bx	lr
    201a:	0000      	.short	0x0000
    201c:	20000376 	.word	0x20000376

00002020 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>:
    2020:	4901      	ldr	r1, [pc, #4]	; (2028 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY+0x8>)
    2022:	7708      	strb	r0, [r1, #28]
    2024:	4770      	bx	lr
    2026:	0000      	.short	0x0000
    2028:	20000b52 	.word	0x20000b52

0000202c <sym_57CDLB7NR4I66F4XUEVXWWEJBBBXGSJ37LGPUXA>:
    202c:	4801      	ldr	r0, [pc, #4]	; (2034 <sym_57CDLB7NR4I66F4XUEVXWWEJBBBXGSJ37LGPUXA+0x8>)
    202e:	7880      	ldrb	r0, [r0, #2]
    2030:	4770      	bx	lr
    2032:	0000      	.short	0x0000
    2034:	20000084 	.word	0x20000084

00002038 <sym_R2K72KVDRFDRB7INCDL2G5SJCI6KNYCIUBETXWY>:
    2038:	4801      	ldr	r0, [pc, #4]	; (2040 <sym_R2K72KVDRFDRB7INCDL2G5SJCI6KNYCIUBETXWY+0x8>)
    203a:	78c0      	ldrb	r0, [r0, #3]
    203c:	4770      	bx	lr
    203e:	0000      	.short	0x0000
    2040:	20000084 	.word	0x20000084

00002044 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY>:
    2044:	b570      	push	{r4, r5, r6, lr}
    2046:	460c      	mov	r4, r1
    2048:	490a      	ldr	r1, [pc, #40]	; (2074 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x30>)
    204a:	4605      	mov	r5, r0
    204c:	4808      	ldr	r0, [pc, #32]	; (2070 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x2c>)
    204e:	6008      	str	r0, [r1, #0]
    2050:	f000 f92c 	bl	22ac <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>
    2054:	b118      	cbz	r0, 205e <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x1a>
    2056:	21de      	movs	r1, #222	; 0xde
    2058:	2027      	movs	r0, #39	; 0x27
    205a:	f7ff f867 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    205e:	4806      	ldr	r0, [pc, #24]	; (2078 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x34>)
    2060:	2101      	movs	r1, #1
    2062:	f00c f946 	bl	e2f2 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    2066:	4805      	ldr	r0, [pc, #20]	; (207c <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY+0x38>)
    2068:	e9c0 540b 	strd	r5, r4, [r0, #44]	; 0x2c
    206c:	bd70      	pop	{r4, r5, r6, pc}
    206e:	0000      	.short	0x0000
    2070:	00002a68 	.word	0x00002a68
    2074:	200000c8 	.word	0x200000c8
    2078:	20000b30 	.word	0x20000b30
    207c:	20000084 	.word	0x20000084

00002080 <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q>:
    2080:	4901      	ldr	r1, [pc, #4]	; (2088 <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q+0x8>)
    2082:	2001      	movs	r0, #1
    2084:	7148      	strb	r0, [r1, #5]
    2086:	4770      	bx	lr
    2088:	20000084 	.word	0x20000084

0000208c <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA>:
    208c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2090:	4d5f      	ldr	r5, [pc, #380]	; (2210 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x184>)
    2092:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    2094:	782e      	ldrb	r6, [r5, #0]
    2096:	2e00      	cmp	r6, #0
    2098:	d172      	bne.n	2180 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xf4>
    209a:	2a00      	cmp	r2, #0
    209c:	d070      	beq.n	2180 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xf4>
    209e:	2b00      	cmp	r3, #0
    20a0:	d06e      	beq.n	2180 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xf4>
    20a2:	2c00      	cmp	r4, #0
    20a4:	d06c      	beq.n	2180 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xf4>
    20a6:	f105 0614 	add.w	r6, r5, #20
    20aa:	e9c5 010f 	strd	r0, r1, [r5, #60]	; 0x3c
    20ae:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    20b2:	2700      	movs	r7, #0
    20b4:	716f      	strb	r7, [r5, #5]
    20b6:	712f      	strb	r7, [r5, #4]
    20b8:	70af      	strb	r7, [r5, #2]
    20ba:	706f      	strb	r7, [r5, #1]
    20bc:	70ef      	strb	r7, [r5, #3]
    20be:	81af      	strh	r7, [r5, #12]
    20c0:	81ef      	strh	r7, [r5, #14]
    20c2:	f000 f969 	bl	2398 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd0>
    20c6:	4606      	mov	r6, r0
    20c8:	f000 f92e 	bl	2328 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    20cc:	4604      	mov	r4, r0
    20ce:	f006 f8e7 	bl	82a0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    20d2:	f005 fe3f 	bl	7d54 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    20d6:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    20da:	f006 f965 	bl	83a8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    20de:	69e0      	ldr	r0, [r4, #28]
    20e0:	f006 fa4a 	bl	8578 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    20e4:	6960      	ldr	r0, [r4, #20]
    20e6:	f006 fa3d 	bl	8564 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    20ea:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
    20ee:	f006 fa79 	bl	85e4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    20f2:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    20f6:	6840      	ldr	r0, [r0, #4]
    20f8:	f890 021a 	ldrb.w	r0, [r0, #538]	; 0x21a
    20fc:	b108      	cbz	r0, 2102 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x76>
    20fe:	f006 f849 	bl	8194 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>
    2102:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    2106:	2001      	movs	r0, #1
    2108:	f005 ff88 	bl	801c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    210c:	2800      	cmp	r0, #0
    210e:	d077      	beq.n	2200 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x174>
    2110:	4840      	ldr	r0, [pc, #256]	; (2214 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x188>)
    2112:	6800      	ldr	r0, [r0, #0]
    2114:	f005 ffee 	bl	80f4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    2118:	8820      	ldrh	r0, [r4, #0]
    211a:	f7ff fcb9 	bl	1a90 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    211e:	6368      	str	r0, [r5, #52]	; 0x34
    2120:	8820      	ldrh	r0, [r4, #0]
    2122:	f7ff fc9f 	bl	1a64 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    2126:	f106 0288 	add.w	r2, r6, #136	; 0x88
    212a:	63a8      	str	r0, [r5, #56]	; 0x38
    212c:	e892 110c 	ldmia.w	r2, {r2, r3, r8, ip}
    2130:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 2218 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x18c>
    2134:	e889 110c 	stmia.w	r9, {r2, r3, r8, ip}
    2138:	f8d6 2098 	ldr.w	r2, [r6, #152]	; 0x98
    213c:	f8c9 2019 	str.w	r2, [r9, #25]
    2140:	f8d6 109c 	ldr.w	r1, [r6, #156]	; 0x9c
    2144:	f8c9 101d 	str.w	r1, [r9, #29]
    2148:	f000 f92c 	bl	23a4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xdc>
    214c:	4601      	mov	r1, r0
    214e:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    2150:	46ba      	mov	sl, r7
    2152:	f00b fe86 	bl	de62 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    2156:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    2158:	4281      	cmp	r1, r0
    215a:	d200      	bcs.n	215e <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xd2>
    215c:	4608      	mov	r0, r1
    215e:	71a8      	strb	r0, [r5, #6]
    2160:	46a8      	mov	r8, r5
    2162:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    2166:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    216a:	f00c f9bc 	bl	e4e6 <sym_HKK3TRIGJYF3QRYFDYVZA3GRLMEB7JR5MI4RL7Y>
    216e:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    2172:	f896 7023 	ldrb.w	r7, [r6, #35]	; 0x23
    2176:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    2178:	2908      	cmp	r1, #8
    217a:	d105      	bne.n	2188 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xfc>
    217c:	e003      	b.n	2186 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xfa>
    217e:	e7ff      	b.n	2180 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0xf4>
    2180:	f240 1153 	movw	r1, #339	; 0x153
    2184:	e040      	b.n	2208 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x17c>
    2186:	2104      	movs	r1, #4
    2188:	f00b fe6b 	bl	de62 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    218c:	b90f      	cbnz	r7, 2192 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x106>
    218e:	1d00      	adds	r0, r0, #4
    2190:	b280      	uxth	r0, r0
    2192:	4285      	cmp	r5, r0
    2194:	d200      	bcs.n	2198 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x10c>
    2196:	4628      	mov	r0, r5
    2198:	b2c5      	uxtb	r5, r0
    219a:	f888 5007 	strb.w	r5, [r8, #7]
    219e:	f888 5008 	strb.w	r5, [r8, #8]
    21a2:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    21a6:	46d0      	mov	r8, sl
    21a8:	b190      	cbz	r0, 21d0 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x144>
    21aa:	2701      	movs	r7, #1
    21ac:	f889 7018 	strb.w	r7, [r9, #24]
    21b0:	e9d6 1220 	ldrd	r1, r2, [r6, #128]	; 0x80
    21b4:	e9c9 1204 	strd	r1, r2, [r9, #16]
    21b8:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    21bc:	f00b fdb1 	bl	dd22 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x18>
    21c0:	4603      	mov	r3, r0
    21c2:	462a      	mov	r2, r5
    21c4:	4914      	ldr	r1, [pc, #80]	; (2218 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x18c>)
    21c6:	4638      	mov	r0, r7
    21c8:	f8cd 8000 	str.w	r8, [sp]
    21cc:	f005 fd2e 	bl	7c2c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    21d0:	2001      	movs	r0, #1
    21d2:	f000 fb47 	bl	2864 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x59c>
    21d6:	4811      	ldr	r0, [pc, #68]	; (221c <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x190>)
    21d8:	6800      	ldr	r0, [r0, #0]
    21da:	2803      	cmp	r0, #3
    21dc:	d012      	beq.n	2204 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x178>
    21de:	280b      	cmp	r0, #11
    21e0:	d010      	beq.n	2204 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x178>
    21e2:	480d      	ldr	r0, [pc, #52]	; (2218 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x18c>)
    21e4:	220e      	movs	r2, #14
    21e6:	2100      	movs	r1, #0
    21e8:	304a      	adds	r0, #74	; 0x4a
    21ea:	f00e fd7f 	bl	10cec <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    21ee:	480a      	ldr	r0, [pc, #40]	; (2218 <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA+0x18c>)
    21f0:	8ab1      	ldrh	r1, [r6, #20]
    21f2:	304a      	adds	r0, #74	; 0x4a
    21f4:	8041      	strh	r1, [r0, #2]
    21f6:	8821      	ldrh	r1, [r4, #0]
    21f8:	8001      	strh	r1, [r0, #0]
    21fa:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
    21fe:	7101      	strb	r1, [r0, #4]
    2200:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2204:	f44f 7102 	mov.w	r1, #520	; 0x208
    2208:	2027      	movs	r0, #39	; 0x27
    220a:	f7fe ff8f 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    220e:	0000      	.short	0x0000
    2210:	20000084 	.word	0x20000084
    2214:	200000c8 	.word	0x200000c8
    2218:	20000b08 	.word	0x20000b08
    221c:	40001550 	.word	0x40001550

00002220 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>:
    2220:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    2224:	4688      	mov	r8, r1
    2226:	4607      	mov	r7, r0
    2228:	f000 f8b6 	bl	2398 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd0>
    222c:	4c1a      	ldr	r4, [pc, #104]	; (2298 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x78>)
    222e:	4605      	mov	r5, r0
    2230:	07b8      	lsls	r0, r7, #30
    2232:	6a61      	ldr	r1, [r4, #36]	; 0x24
    2234:	784e      	ldrb	r6, [r1, #1]
    2236:	d516      	bpl.n	2266 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x46>
    2238:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    223a:	b330      	cbz	r0, 228a <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x6a>
    223c:	8962      	ldrh	r2, [r4, #10]
    223e:	1cd2      	adds	r2, r2, #3
    2240:	f00e fcda 	bl	10bf8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2244:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    2246:	6260      	str	r0, [r4, #36]	; 0x24
    2248:	4669      	mov	r1, sp
    224a:	aa01      	add	r2, sp, #4
    224c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    224e:	f00b f9c2 	bl	d5d6 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    2252:	9800      	ldr	r0, [sp, #0]
    2254:	f00b f975 	bl	d542 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    2258:	f8c8 0000 	str.w	r0, [r8]
    225c:	4631      	mov	r1, r6
    225e:	2201      	movs	r2, #1
    2260:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    2262:	f00b f925 	bl	d4b0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    2266:	07f8      	lsls	r0, r7, #31
    2268:	d00d      	beq.n	2286 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x66>
    226a:	e9d5 0120 	ldrd	r0, r1, [r5, #128]	; 0x80
    226e:	3518      	adds	r5, #24
    2270:	1c40      	adds	r0, r0, #1
    2272:	f141 0100 	adc.w	r1, r1, #0
    2276:	e9c5 011a 	strd	r0, r1, [r5, #104]	; 0x68
    227a:	f815 0918 	ldrb.w	r0, [r5], #-24
    227e:	2801      	cmp	r0, #1
    2280:	d008      	beq.n	2294 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x74>
    2282:	2001      	movs	r0, #1
    2284:	7628      	strb	r0, [r5, #24]
    2286:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    228a:	f44f 618c 	mov.w	r1, #1120	; 0x460
    228e:	2027      	movs	r0, #39	; 0x27
    2290:	f7fe ff4c 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2294:	2000      	movs	r0, #0
    2296:	e7f5      	b.n	2284 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI+0x64>
    2298:	20000084 	.word	0x20000084

0000229c <sym_HMWMSCLS2E7KO3CEVZ6FUZGM6YUJ4GDX4JETJTI>:
    229c:	4802      	ldr	r0, [pc, #8]	; (22a8 <sym_HMWMSCLS2E7KO3CEVZ6FUZGM6YUJ4GDX4JETJTI+0xc>)
    229e:	89c0      	ldrh	r0, [r0, #14]
    22a0:	f3c0 2080 	ubfx	r0, r0, #10, #1
    22a4:	4770      	bx	lr
    22a6:	0000      	.short	0x0000
    22a8:	20000084 	.word	0x20000084

000022ac <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>:
    22ac:	4804      	ldr	r0, [pc, #16]	; (22c0 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0x14>)
    22ae:	7800      	ldrb	r0, [r0, #0]
    22b0:	b108      	cbz	r0, 22b6 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0xa>
    22b2:	200c      	movs	r0, #12
    22b4:	4770      	bx	lr
    22b6:	4903      	ldr	r1, [pc, #12]	; (22c4 <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY+0x18>)
    22b8:	2000      	movs	r0, #0
    22ba:	7708      	strb	r0, [r1, #28]
    22bc:	4770      	bx	lr
    22be:	0000      	.short	0x0000
    22c0:	20000084 	.word	0x20000084
    22c4:	20000b52 	.word	0x20000b52

000022c8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA>:
    22c8:	480c      	ldr	r0, [pc, #48]	; (22fc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x34>)
    22ca:	b510      	push	{r4, lr}
    22cc:	7801      	ldrb	r1, [r0, #0]
    22ce:	b149      	cbz	r1, 22e4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1c>
    22d0:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    22d4:	7800      	ldrb	r0, [r0, #0]
    22d6:	2802      	cmp	r0, #2
    22d8:	d008      	beq.n	22ec <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x24>
    22da:	f44f 7109 	mov.w	r1, #548	; 0x224
    22de:	2027      	movs	r0, #39	; 0x27
    22e0:	f7fe ff24 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    22e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    22e8:	f000 b9ca 	b.w	2680 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b8>
    22ec:	6848      	ldr	r0, [r1, #4]
    22ee:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    22f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    22f6:	f005 bf05 	b.w	8104 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>
    22fa:	0000      	.short	0x0000
    22fc:	20000084 	.word	0x20000084
    2300:	4608      	mov	r0, r1
    2302:	2100      	movs	r1, #0
    2304:	7041      	strb	r1, [r0, #1]
    2306:	211b      	movs	r1, #27
    2308:	f800 1b04 	strb.w	r1, [r0], #4
    230c:	220e      	movs	r2, #14
    230e:	4901      	ldr	r1, [pc, #4]	; (2314 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4c>)
    2310:	f00e bc72 	b.w	10bf8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2314:	20000b60 	.word	0x20000b60
    2318:	4a02      	ldr	r2, [pc, #8]	; (2324 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x5c>)
    231a:	8993      	ldrh	r3, [r2, #12]
    231c:	4303      	orrs	r3, r0
    231e:	8193      	strh	r3, [r2, #12]
    2320:	6952      	ldr	r2, [r2, #20]
    2322:	4710      	bx	r2
    2324:	20000084 	.word	0x20000084
    2328:	4801      	ldr	r0, [pc, #4]	; (2330 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x68>)
    232a:	6840      	ldr	r0, [r0, #4]
    232c:	4770      	bx	lr
    232e:	0000      	.short	0x0000
    2330:	200000c0 	.word	0x200000c0
    2334:	4a01      	ldr	r2, [pc, #4]	; (233c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x74>)
    2336:	2100      	movs	r1, #0
    2338:	6952      	ldr	r2, [r2, #20]
    233a:	4710      	bx	r2
    233c:	20000084 	.word	0x20000084
    2340:	b570      	push	{r4, r5, r6, lr}
    2342:	4605      	mov	r5, r0
    2344:	2901      	cmp	r1, #1
    2346:	d818      	bhi.n	237a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xb2>
    2348:	4c12      	ldr	r4, [pc, #72]	; (2394 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xcc>)
    234a:	69a1      	ldr	r1, [r4, #24]
    234c:	4788      	blx	r1
    234e:	b1a0      	cbz	r0, 237a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xb2>
    2350:	7920      	ldrb	r0, [r4, #4]
    2352:	b990      	cbnz	r0, 237a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xb2>
    2354:	b9e5      	cbnz	r5, 2390 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xc8>
    2356:	f104 0010 	add.w	r0, r4, #16
    235a:	7801      	ldrb	r1, [r0, #0]
    235c:	06c8      	lsls	r0, r1, #27
    235e:	d405      	bmi.n	236c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xa4>
    2360:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    2362:	7800      	ldrb	r0, [r0, #0]
    2364:	06c0      	lsls	r0, r0, #27
    2366:	d401      	bmi.n	236c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xa4>
    2368:	2001      	movs	r0, #1
    236a:	e000      	b.n	236e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xa6>
    236c:	2000      	movs	r0, #0
    236e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2370:	b92a      	cbnz	r2, 237e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xb6>
    2372:	8962      	ldrh	r2, [r4, #10]
    2374:	b11a      	cbz	r2, 237e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xb6>
    2376:	06c9      	lsls	r1, r1, #27
    2378:	d401      	bmi.n	237e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xb6>
    237a:	2001      	movs	r0, #1
    237c:	bd70      	pop	{r4, r5, r6, pc}
    237e:	89a1      	ldrh	r1, [r4, #12]
    2380:	078a      	lsls	r2, r1, #30
    2382:	d503      	bpl.n	238c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xc4>
    2384:	6a22      	ldr	r2, [r4, #32]
    2386:	78d2      	ldrb	r2, [r2, #3]
    2388:	2a02      	cmp	r2, #2
    238a:	d001      	beq.n	2390 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xc8>
    238c:	4308      	orrs	r0, r1
    238e:	d1f4      	bne.n	237a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xb2>
    2390:	2000      	movs	r0, #0
    2392:	bd70      	pop	{r4, r5, r6, pc}
    2394:	20000084 	.word	0x20000084
    2398:	4801      	ldr	r0, [pc, #4]	; (23a0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd8>)
    239a:	6840      	ldr	r0, [r0, #4]
    239c:	3080      	adds	r0, #128	; 0x80
    239e:	4770      	bx	lr
    23a0:	200000c0 	.word	0x200000c0
    23a4:	b510      	push	{r4, lr}
    23a6:	f7ff ffbf 	bl	2328 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    23aa:	4604      	mov	r4, r0
    23ac:	f7ff fff4 	bl	2398 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd0>
    23b0:	4602      	mov	r2, r0
    23b2:	7f41      	ldrb	r1, [r0, #29]
    23b4:	4816      	ldr	r0, [pc, #88]	; (2410 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x148>)
    23b6:	2925      	cmp	r1, #37	; 0x25
    23b8:	d010      	beq.n	23dc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x114>
    23ba:	2926      	cmp	r1, #38	; 0x26
    23bc:	d00e      	beq.n	23dc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x114>
    23be:	7f92      	ldrb	r2, [r2, #30]
    23c0:	2a25      	cmp	r2, #37	; 0x25
    23c2:	d00b      	beq.n	23dc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x114>
    23c4:	2920      	cmp	r1, #32
    23c6:	d00d      	beq.n	23e4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x11c>
    23c8:	2921      	cmp	r1, #33	; 0x21
    23ca:	d00b      	beq.n	23e4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x11c>
    23cc:	2a23      	cmp	r2, #35	; 0x23
    23ce:	d00f      	beq.n	23f0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x128>
    23d0:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    23d4:	2804      	cmp	r0, #4
    23d6:	d100      	bne.n	23da <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x112>
    23d8:	2008      	movs	r0, #8
    23da:	bd10      	pop	{r4, pc}
    23dc:	6840      	ldr	r0, [r0, #4]
    23de:	f890 12ce 	ldrb.w	r1, [r0, #718]	; 0x2ce
    23e2:	e00e      	b.n	2402 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x13a>
    23e4:	2a23      	cmp	r2, #35	; 0x23
    23e6:	d003      	beq.n	23f0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x128>
    23e8:	6840      	ldr	r0, [r0, #4]
    23ea:	f890 013e 	ldrb.w	r0, [r0, #318]	; 0x13e
    23ee:	e005      	b.n	23fc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x134>
    23f0:	6841      	ldr	r1, [r0, #4]
    23f2:	f891 013e 	ldrb.w	r0, [r1, #318]	; 0x13e
    23f6:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    23fa:	4008      	ands	r0, r1
    23fc:	f00b fc87 	bl	dd0e <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x4>
    2400:	4601      	mov	r1, r0
    2402:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    2406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    240a:	f00b bc98 	b.w	dd3e <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x34>
    240e:	0000      	.short	0x0000
    2410:	200000c0 	.word	0x200000c0
    2414:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2418:	468b      	mov	fp, r1
    241a:	4681      	mov	r9, r0
    241c:	f7ff ffbc 	bl	2398 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd0>
    2420:	2600      	movs	r6, #0
    2422:	4c66      	ldr	r4, [pc, #408]	; (25bc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2f4>)
    2424:	4607      	mov	r7, r0
    2426:	f88d 6008 	strb.w	r6, [sp, #8]
    242a:	9603      	str	r6, [sp, #12]
    242c:	9601      	str	r6, [sp, #4]
    242e:	7820      	ldrb	r0, [r4, #0]
    2430:	4635      	mov	r5, r6
    2432:	2802      	cmp	r0, #2
    2434:	d004      	beq.n	2440 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x178>
    2436:	f240 41e3 	movw	r1, #1251	; 0x4e3
    243a:	2027      	movs	r0, #39	; 0x27
    243c:	f7fe fe76 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2440:	7ba0      	ldrb	r0, [r4, #14]
    2442:	0640      	lsls	r0, r0, #25
    2444:	d406      	bmi.n	2454 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x18c>
    2446:	2040      	movs	r0, #64	; 0x40
    2448:	f7ff ff74 	bl	2334 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    244c:	89e0      	ldrh	r0, [r4, #14]
    244e:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    2452:	81e0      	strh	r0, [r4, #14]
    2454:	f897 0023 	ldrb.w	r0, [r7, #35]	; 0x23
    2458:	f1b9 0f00 	cmp.w	r9, #0
    245c:	d03a      	beq.n	24d4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x20c>
    245e:	b180      	cbz	r0, 2482 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    2460:	f005 fcb2 	bl	7dc8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    2464:	f005 fc8c 	bl	7d80 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    2468:	b958      	cbnz	r0, 2482 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    246a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    246c:	7841      	ldrb	r1, [r0, #1]
    246e:	b141      	cbz	r1, 2482 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    2470:	7800      	ldrb	r0, [r0, #0]
    2472:	7e39      	ldrb	r1, [r7, #24]
    2474:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    2478:	4288      	cmp	r0, r1
    247a:	d102      	bne.n	2482 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ba>
    247c:	2001      	movs	r0, #1
    247e:	7060      	strb	r0, [r4, #1]
    2480:	e097      	b.n	25b2 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2ea>
    2482:	6a60      	ldr	r0, [r4, #36]	; 0x24
    2484:	7841      	ldrb	r1, [r0, #1]
    2486:	8161      	strh	r1, [r4, #10]
    2488:	b121      	cbz	r1, 2494 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1cc>
    248a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    248c:	f00b f979 	bl	d782 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    2490:	62a0      	str	r0, [r4, #40]	; 0x28
    2492:	e000      	b.n	2496 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1ce>
    2494:	62a5      	str	r5, [r4, #40]	; 0x28
    2496:	89e0      	ldrh	r0, [r4, #14]
    2498:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    249c:	81e0      	strh	r0, [r4, #14]
    249e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    24a0:	7df9      	ldrb	r1, [r7, #23]
    24a2:	7800      	ldrb	r0, [r0, #0]
    24a4:	f3c0 0080 	ubfx	r0, r0, #2, #1
    24a8:	4288      	cmp	r0, r1
    24aa:	d007      	beq.n	24bc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1f4>
    24ac:	a803      	add	r0, sp, #12
    24ae:	f000 f98b 	bl	27c8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x500>
    24b2:	89e0      	ldrh	r0, [r4, #14]
    24b4:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    24b8:	81e0      	strh	r0, [r4, #14]
    24ba:	e000      	b.n	24be <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x1f6>
    24bc:	2601      	movs	r6, #1
    24be:	6a60      	ldr	r0, [r4, #36]	; 0x24
    24c0:	7e39      	ldrb	r1, [r7, #24]
    24c2:	7800      	ldrb	r0, [r0, #0]
    24c4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    24c8:	4288      	cmp	r0, r1
    24ca:	d10d      	bne.n	24e8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x220>
    24cc:	a802      	add	r0, sp, #8
    24ce:	f000 f931 	bl	2734 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x46c>
    24d2:	e009      	b.n	24e8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x220>
    24d4:	b108      	cbz	r0, 24da <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x212>
    24d6:	f005 fc71 	bl	7dbc <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    24da:	78a0      	ldrb	r0, [r4, #2]
    24dc:	1c40      	adds	r0, r0, #1
    24de:	70a0      	strb	r0, [r4, #2]
    24e0:	89e0      	ldrh	r0, [r4, #14]
    24e2:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    24e6:	81e0      	strh	r0, [r4, #14]
    24e8:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 25bc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2f4>
    24ec:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
    24f0:	f10a 0a3c 	add.w	sl, sl, #60	; 0x3c
    24f4:	b190      	cbz	r0, 251c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x254>
    24f6:	f7ff ff17 	bl	2328 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    24fa:	4931      	ldr	r1, [pc, #196]	; (25c0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2f8>)
    24fc:	760d      	strb	r5, [r1, #24]
    24fe:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
    2502:	e9c1 2304 	strd	r2, r3, [r1, #16]
    2506:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    250a:	f00b fc0a 	bl	dd22 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x18>
    250e:	4603      	mov	r3, r0
    2510:	22fb      	movs	r2, #251	; 0xfb
    2512:	492b      	ldr	r1, [pc, #172]	; (25c0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2f8>)
    2514:	4628      	mov	r0, r5
    2516:	9500      	str	r5, [sp, #0]
    2518:	f005 fb88 	bl	7c2c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    251c:	f04f 0800 	mov.w	r8, #0
    2520:	f1bb 0f00 	cmp.w	fp, #0
    2524:	d104      	bne.n	2530 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x268>
    2526:	78a1      	ldrb	r1, [r4, #2]
    2528:	2001      	movs	r0, #1
    252a:	f7ff ff09 	bl	2340 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    252e:	b120      	cbz	r0, 253a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x272>
    2530:	f006 f804 	bl	853c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    2534:	f04f 0801 	mov.w	r8, #1
    2538:	e002      	b.n	2540 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x278>
    253a:	2000      	movs	r0, #0
    253c:	f000 f9d0 	bl	28e0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x618>
    2540:	f89d 0008 	ldrb.w	r0, [sp, #8]
    2544:	b118      	cbz	r0, 254e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x286>
    2546:	a901      	add	r1, sp, #4
    2548:	2002      	movs	r0, #2
    254a:	f7ff fe69 	bl	2220 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>
    254e:	481c      	ldr	r0, [pc, #112]	; (25c0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2f8>)
    2550:	8aba      	ldrh	r2, [r7, #20]
    2552:	304a      	adds	r0, #74	; 0x4a
    2554:	b13e      	cbz	r6, 2566 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x29e>
    2556:	b91a      	cbnz	r2, 2560 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x298>
    2558:	88c2      	ldrh	r2, [r0, #6]
    255a:	b90a      	cbnz	r2, 2560 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x298>
    255c:	8902      	ldrh	r2, [r0, #8]
    255e:	b112      	cbz	r2, 2566 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x29e>
    2560:	8942      	ldrh	r2, [r0, #10]
    2562:	1c52      	adds	r2, r2, #1
    2564:	8142      	strh	r2, [r0, #10]
    2566:	f1b9 0f00 	cmp.w	r9, #0
    256a:	d004      	beq.n	2576 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2ae>
    256c:	88c1      	ldrh	r1, [r0, #6]
    256e:	1c49      	adds	r1, r1, #1
    2570:	80c1      	strh	r1, [r0, #6]
    2572:	70a5      	strb	r5, [r4, #2]
    2574:	e002      	b.n	257c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2b4>
    2576:	8901      	ldrh	r1, [r0, #8]
    2578:	1c49      	adds	r1, r1, #1
    257a:	8101      	strh	r1, [r0, #8]
    257c:	480f      	ldr	r0, [pc, #60]	; (25bc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2f4>)
    257e:	303c      	adds	r0, #60	; 0x3c
    2580:	f001 f918 	bl	37b4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
    2584:	9803      	ldr	r0, [sp, #12]
    2586:	b140      	cbz	r0, 259a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2d2>
    2588:	f00a ffdb 	bl	d542 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    258c:	f8da 1004 	ldr.w	r1, [sl, #4]
    2590:	1c40      	adds	r0, r0, #1
    2592:	7205      	strb	r5, [r0, #8]
    2594:	2208      	movs	r2, #8
    2596:	f00b ff33 	bl	e400 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    259a:	9801      	ldr	r0, [sp, #4]
    259c:	b130      	cbz	r0, 25ac <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2e4>
    259e:	f8da 1004 	ldr.w	r1, [sl, #4]
    25a2:	7205      	strb	r5, [r0, #8]
    25a4:	2210      	movs	r2, #16
    25a6:	9801      	ldr	r0, [sp, #4]
    25a8:	f00b ff2a 	bl	e400 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    25ac:	f1b8 0f00 	cmp.w	r8, #0
    25b0:	d001      	beq.n	25b6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x2ee>
    25b2:	f000 f865 	bl	2680 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b8>
    25b6:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    25ba:	0000      	.short	0x0000
    25bc:	20000084 	.word	0x20000084
    25c0:	20000b08 	.word	0x20000b08
    25c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    25c8:	4688      	mov	r8, r1
    25ca:	4681      	mov	r9, r0
    25cc:	f7ff fee4 	bl	2398 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd0>
    25d0:	4d29      	ldr	r5, [pc, #164]	; (2678 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b0>)
    25d2:	4604      	mov	r4, r0
    25d4:	7828      	ldrb	r0, [r5, #0]
    25d6:	2801      	cmp	r0, #1
    25d8:	d004      	beq.n	25e4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x31c>
    25da:	f240 416f 	movw	r1, #1135	; 0x46f
    25de:	2027      	movs	r0, #39	; 0x27
    25e0:	f7fe fda4 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    25e4:	7c20      	ldrb	r0, [r4, #16]
    25e6:	2700      	movs	r7, #0
    25e8:	2601      	movs	r6, #1
    25ea:	b128      	cbz	r0, 25f8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x330>
    25ec:	7427      	strb	r7, [r4, #16]
    25ee:	2100      	movs	r1, #0
    25f0:	2004      	movs	r0, #4
    25f2:	f7ff fe91 	bl	2318 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    25f6:	74a6      	strb	r6, [r4, #18]
    25f8:	6a29      	ldr	r1, [r5, #32]
    25fa:	7808      	ldrb	r0, [r1, #0]
    25fc:	43c0      	mvns	r0, r0
    25fe:	0780      	lsls	r0, r0, #30
    2600:	d109      	bne.n	2616 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x34e>
    2602:	7da0      	ldrb	r0, [r4, #22]
    2604:	bb88      	cbnz	r0, 266a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3a2>
    2606:	2002      	movs	r0, #2
    2608:	f7ff fe86 	bl	2318 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    260c:	6a28      	ldr	r0, [r5, #32]
    260e:	7800      	ldrb	r0, [r0, #0]
    2610:	43c0      	mvns	r0, r0
    2612:	0780      	lsls	r0, r0, #30
    2614:	d029      	beq.n	266a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3a2>
    2616:	6a28      	ldr	r0, [r5, #32]
    2618:	7840      	ldrb	r0, [r0, #1]
    261a:	b110      	cbz	r0, 2622 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x35a>
    261c:	2002      	movs	r0, #2
    261e:	75a0      	strb	r0, [r4, #22]
    2620:	e000      	b.n	2624 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x35c>
    2622:	75a6      	strb	r6, [r4, #22]
    2624:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
    2628:	b198      	cbz	r0, 2652 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x38a>
    262a:	f7ff fe7d 	bl	2328 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    262e:	4913      	ldr	r1, [pc, #76]	; (267c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b4>)
    2630:	7a2d      	ldrb	r5, [r5, #8]
    2632:	760e      	strb	r6, [r1, #24]
    2634:	e9d4 2320 	ldrd	r2, r3, [r4, #128]	; 0x80
    2638:	e9c1 2304 	strd	r2, r3, [r1, #16]
    263c:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    2640:	f00b fb6f 	bl	dd22 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x18>
    2644:	4603      	mov	r3, r0
    2646:	462a      	mov	r2, r5
    2648:	490c      	ldr	r1, [pc, #48]	; (267c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b4>)
    264a:	4630      	mov	r0, r6
    264c:	9700      	str	r7, [sp, #0]
    264e:	f005 faed 	bl	7c2c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    2652:	ea38 0009 	bics.w	r0, r8, r9
    2656:	d004      	beq.n	2662 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x39a>
    2658:	2100      	movs	r1, #0
    265a:	4608      	mov	r0, r1
    265c:	f7ff fe70 	bl	2340 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x78>
    2660:	b128      	cbz	r0, 266e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3a6>
    2662:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2666:	f000 b80b 	b.w	2680 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b8>
    266a:	2003      	movs	r0, #3
    266c:	e7d7      	b.n	261e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x356>
    266e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2672:	2000      	movs	r0, #0
    2674:	f000 b8f6 	b.w	2864 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x59c>
    2678:	20000084 	.word	0x20000084
    267c:	20000b08 	.word	0x20000b08
    2680:	b510      	push	{r4, lr}
    2682:	f005 fc41 	bl	7f08 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    2686:	f005 fb65 	bl	7d54 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    268a:	4c0d      	ldr	r4, [pc, #52]	; (26c0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3f8>)
    268c:	89e0      	ldrh	r0, [r4, #14]
    268e:	f7ff fe51 	bl	2334 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    2692:	480c      	ldr	r0, [pc, #48]	; (26c4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3fc>)
    2694:	7f00      	ldrb	r0, [r0, #28]
    2696:	b158      	cbz	r0, 26b0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3e8>
    2698:	490a      	ldr	r1, [pc, #40]	; (26c4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3fc>)
    269a:	220e      	movs	r2, #14
    269c:	f101 000e 	add.w	r0, r1, #14
    26a0:	f00e faaa 	bl	10bf8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    26a4:	4807      	ldr	r0, [pc, #28]	; (26c4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3fc>)
    26a6:	2202      	movs	r2, #2
    26a8:	4907      	ldr	r1, [pc, #28]	; (26c8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x400>)
    26aa:	301d      	adds	r0, #29
    26ac:	f00b febc 	bl	e428 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    26b0:	69e2      	ldr	r2, [r4, #28]
    26b2:	7921      	ldrb	r1, [r4, #4]
    26b4:	7860      	ldrb	r0, [r4, #1]
    26b6:	4790      	blx	r2
    26b8:	2000      	movs	r0, #0
    26ba:	7020      	strb	r0, [r4, #0]
    26bc:	bd10      	pop	{r4, pc}
    26be:	0000      	.short	0x0000
    26c0:	20000084 	.word	0x20000084
    26c4:	20000b52 	.word	0x20000b52
    26c8:	00002301 	.word	0x00002301
    26cc:	4808      	ldr	r0, [pc, #32]	; (26f0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x428>)
    26ce:	b510      	push	{r4, lr}
    26d0:	7800      	ldrb	r0, [r0, #0]
    26d2:	2802      	cmp	r0, #2
    26d4:	d004      	beq.n	26e0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x418>
    26d6:	f240 214f 	movw	r1, #591	; 0x24f
    26da:	2027      	movs	r0, #39	; 0x27
    26dc:	f7fe fd26 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    26e0:	4904      	ldr	r1, [pc, #16]	; (26f4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x42c>)
    26e2:	2001      	movs	r0, #1
    26e4:	7308      	strb	r0, [r1, #12]
    26e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    26ea:	f7ff bfc9 	b.w	2680 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b8>
    26ee:	0000      	.short	0x0000
    26f0:	20000084 	.word	0x20000084
    26f4:	20000b52 	.word	0x20000b52
    26f8:	b430      	push	{r4, r5}
    26fa:	4604      	mov	r4, r0
    26fc:	480c      	ldr	r0, [pc, #48]	; (2730 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x468>)
    26fe:	7a00      	ldrb	r0, [r0, #8]
    2700:	b10b      	cbz	r3, 2706 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x43e>
    2702:	1d00      	adds	r0, r0, #4
    2704:	b2c0      	uxtb	r0, r0
    2706:	b93a      	cbnz	r2, 2718 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x450>
    2708:	28ff      	cmp	r0, #255	; 0xff
    270a:	d105      	bne.n	2718 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x450>
    270c:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
    2710:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    2714:	429a      	cmp	r2, r3
    2716:	d009      	beq.n	272c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x464>
    2718:	b121      	cbz	r1, 2724 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x45c>
    271a:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    271e:	bc30      	pop	{r4, r5}
    2720:	f005 bf30 	b.w	8584 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    2724:	20ff      	movs	r0, #255	; 0xff
    2726:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    272a:	e7f8      	b.n	271e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x456>
    272c:	bc30      	pop	{r4, r5}
    272e:	4770      	bx	lr
    2730:	20000084 	.word	0x20000084
    2734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2738:	4607      	mov	r7, r0
    273a:	f7ff fe2d 	bl	2398 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd0>
    273e:	4c21      	ldr	r4, [pc, #132]	; (27c4 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4fc>)
    2740:	4605      	mov	r5, r0
    2742:	2601      	movs	r6, #1
    2744:	6a61      	ldr	r1, [r4, #36]	; 0x24
    2746:	7808      	ldrb	r0, [r1, #0]
    2748:	f000 0003 	and.w	r0, r0, #3
    274c:	2801      	cmp	r0, #1
    274e:	d00c      	beq.n	276a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4a2>
    2750:	2802      	cmp	r0, #2
    2752:	d00a      	beq.n	276a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4a2>
    2754:	2803      	cmp	r0, #3
    2756:	d11b      	bne.n	2790 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4c8>
    2758:	742e      	strb	r6, [r5, #16]
    275a:	89e0      	ldrh	r0, [r4, #14]
    275c:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    2760:	81e0      	strh	r0, [r4, #14]
    2762:	2001      	movs	r0, #1
    2764:	f7ff fdd8 	bl	2318 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    2768:	e012      	b.n	2790 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4c8>
    276a:	7848      	ldrb	r0, [r1, #1]
    276c:	b180      	cbz	r0, 2790 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4c8>
    276e:	89e1      	ldrh	r1, [r4, #14]
    2770:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    2774:	81e1      	strh	r1, [r4, #14]
    2776:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    2778:	2900      	cmp	r1, #0
    277a:	d018      	beq.n	27ae <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4e6>
    277c:	28fb      	cmp	r0, #251	; 0xfb
    277e:	d818      	bhi.n	27b2 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4ea>
    2780:	7960      	ldrb	r0, [r4, #5]
    2782:	b120      	cbz	r0, 278e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4c6>
    2784:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2788:	2020      	movs	r0, #32
    278a:	f7ff bdd3 	b.w	2334 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6c>
    278e:	703e      	strb	r6, [r7, #0]
    2790:	7e28      	ldrb	r0, [r5, #24]
    2792:	2801      	cmp	r0, #1
    2794:	d012      	beq.n	27bc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4f4>
    2796:	762e      	strb	r6, [r5, #24]
    2798:	6a60      	ldr	r0, [r4, #36]	; 0x24
    279a:	7840      	ldrb	r0, [r0, #1]
    279c:	2800      	cmp	r0, #0
    279e:	d006      	beq.n	27ae <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4e6>
    27a0:	e9f5 0120 	ldrd	r0, r1, [r5, #128]!	; 0x80
    27a4:	1c40      	adds	r0, r0, #1
    27a6:	f141 0100 	adc.w	r1, r1, #0
    27aa:	e9c5 0100 	strd	r0, r1, [r5]
    27ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    27b2:	7920      	ldrb	r0, [r4, #4]
    27b4:	f040 0010 	orr.w	r0, r0, #16
    27b8:	7120      	strb	r0, [r4, #4]
    27ba:	e7f8      	b.n	27ae <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4e6>
    27bc:	2000      	movs	r0, #0
    27be:	7628      	strb	r0, [r5, #24]
    27c0:	e7ea      	b.n	2798 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x4d0>
    27c2:	0000      	.short	0x0000
    27c4:	20000084 	.word	0x20000084
    27c8:	b570      	push	{r4, r5, r6, lr}
    27ca:	4605      	mov	r5, r0
    27cc:	f7ff fde4 	bl	2398 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd0>
    27d0:	4604      	mov	r4, r0
    27d2:	7d80      	ldrb	r0, [r0, #22]
    27d4:	2800      	cmp	r0, #0
    27d6:	d02d      	beq.n	2834 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x56c>
    27d8:	2802      	cmp	r0, #2
    27da:	d10c      	bne.n	27f6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x52e>
    27dc:	481b      	ldr	r0, [pc, #108]	; (284c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x584>)
    27de:	4629      	mov	r1, r5
    27e0:	6b40      	ldr	r0, [r0, #52]	; 0x34
    27e2:	f00a fe3d 	bl	d460 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    27e6:	b330      	cbz	r0, 2836 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x56e>
    27e8:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    27ec:	1c40      	adds	r0, r0, #1
    27ee:	f141 0100 	adc.w	r1, r1, #0
    27f2:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    27f6:	2500      	movs	r5, #0
    27f8:	75a5      	strb	r5, [r4, #22]
    27fa:	7ca0      	ldrb	r0, [r4, #18]
    27fc:	b120      	cbz	r0, 2808 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x540>
    27fe:	74a5      	strb	r5, [r4, #18]
    2800:	2100      	movs	r1, #0
    2802:	2010      	movs	r0, #16
    2804:	f7ff fd88 	bl	2318 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    2808:	7c60      	ldrb	r0, [r4, #17]
    280a:	b170      	cbz	r0, 282a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x562>
    280c:	7465      	strb	r5, [r4, #17]
    280e:	f7ff fb55 	bl	1ebc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    2812:	b198      	cbz	r0, 283c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x574>
    2814:	2100      	movs	r1, #0
    2816:	2008      	movs	r0, #8
    2818:	f7ff fd7e 	bl	2318 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    281c:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    2820:	1c40      	adds	r0, r0, #1
    2822:	f141 0100 	adc.w	r1, r1, #0
    2826:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    282a:	7de0      	ldrb	r0, [r4, #23]
    282c:	2801      	cmp	r0, #1
    282e:	d00a      	beq.n	2846 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x57e>
    2830:	2001      	movs	r0, #1
    2832:	75e0      	strb	r0, [r4, #23]
    2834:	bd70      	pop	{r4, r5, r6, pc}
    2836:	f240 31de 	movw	r1, #990	; 0x3de
    283a:	e001      	b.n	2840 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x578>
    283c:	f240 31f5 	movw	r1, #1013	; 0x3f5
    2840:	2027      	movs	r0, #39	; 0x27
    2842:	f7fe fc73 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2846:	75e5      	strb	r5, [r4, #23]
    2848:	bd70      	pop	{r4, r5, r6, pc}
    284a:	0000      	.short	0x0000
    284c:	20000084 	.word	0x20000084
    2850:	4803      	ldr	r0, [pc, #12]	; (2860 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x598>)
    2852:	7800      	ldrb	r0, [r0, #0]
    2854:	2800      	cmp	r0, #0
    2856:	d001      	beq.n	285c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x594>
    2858:	f7ff bf12 	b.w	2680 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b8>
    285c:	4770      	bx	lr
    285e:	0000      	.short	0x0000
    2860:	20000084 	.word	0x20000084
    2864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2868:	4606      	mov	r6, r0
    286a:	f7ff fd5d 	bl	2328 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    286e:	4680      	mov	r8, r0
    2870:	f7ff fd92 	bl	2398 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd0>
    2874:	4c18      	ldr	r4, [pc, #96]	; (28d8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x610>)
    2876:	4605      	mov	r5, r0
    2878:	4632      	mov	r2, r6
    287a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    287c:	6260      	str	r0, [r4, #36]	; 0x24
    287e:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    2882:	2101      	movs	r1, #1
    2884:	4640      	mov	r0, r8
    2886:	f7ff ff37 	bl	26f8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x430>
    288a:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
    288e:	2700      	movs	r7, #0
    2890:	b170      	cbz	r0, 28b0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x5e8>
    2892:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2894:	f005 fdaa 	bl	83ec <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2898:	4810      	ldr	r0, [pc, #64]	; (28dc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x614>)
    289a:	2101      	movs	r1, #1
    289c:	7601      	strb	r1, [r0, #24]
    289e:	e9d5 1220 	ldrd	r1, r2, [r5, #128]	; 0x80
    28a2:	e9c0 1204 	strd	r1, r2, [r0, #16]
    28a6:	6b21      	ldr	r1, [r4, #48]	; 0x30
    28a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    28aa:	f005 fa11 	bl	7cd0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    28ae:	e004      	b.n	28ba <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x5f2>
    28b0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    28b2:	f005 fd9b 	bl	83ec <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    28b6:	f005 fa4d 	bl	7d54 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    28ba:	b916      	cbnz	r6, 28c2 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x5fa>
    28bc:	4638      	mov	r0, r7
    28be:	f005 fc45 	bl	814c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    28c2:	2100      	movs	r1, #0
    28c4:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    28c8:	4608      	mov	r0, r1
    28ca:	f005 fe19 	bl	8500 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    28ce:	2002      	movs	r0, #2
    28d0:	7020      	strb	r0, [r4, #0]
    28d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    28d6:	0000      	.short	0x0000
    28d8:	20000084 	.word	0x20000084
    28dc:	20000b08 	.word	0x20000b08
    28e0:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    28e4:	4604      	mov	r4, r0
    28e6:	f7ff fd57 	bl	2398 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0xd0>
    28ea:	4605      	mov	r5, r0
    28ec:	f7ff fd1c 	bl	2328 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x60>
    28f0:	2700      	movs	r7, #0
    28f2:	f88d 7000 	strb.w	r7, [sp]
    28f6:	4606      	mov	r6, r0
    28f8:	f8df 9164 	ldr.w	r9, [pc, #356]	; 2a60 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x798>
    28fc:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    2900:	4622      	mov	r2, r4
    2902:	4639      	mov	r1, r7
    2904:	f7ff fef8 	bl	26f8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x430>
    2908:	7da8      	ldrb	r0, [r5, #22]
    290a:	f04f 0801 	mov.w	r8, #1
    290e:	f1a9 0420 	sub.w	r4, r9, #32
    2912:	b140      	cbz	r0, 2926 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x65e>
    2914:	2801      	cmp	r0, #1
    2916:	d020      	beq.n	295a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x692>
    2918:	2802      	cmp	r0, #2
    291a:	d02f      	beq.n	297c <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6b4>
    291c:	2803      	cmp	r0, #3
    291e:	d03b      	beq.n	2998 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6d0>
    2920:	f44f 7140 	mov.w	r1, #768	; 0x300
    2924:	e057      	b.n	29d6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x70e>
    2926:	79a0      	ldrb	r0, [r4, #6]
    2928:	2150      	movs	r1, #80	; 0x50
    292a:	f8ad 0004 	strh.w	r0, [sp, #4]
    292e:	5388      	strh	r0, [r1, r6]
    2930:	4648      	mov	r0, r9
    2932:	f7ff faed 	bl	1f10 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    2936:	b130      	cbz	r0, 2946 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x67e>
    2938:	2080      	movs	r0, #128	; 0x80
    293a:	6a21      	ldr	r1, [r4, #32]
    293c:	f7ff fcec 	bl	2318 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x50>
    2940:	f885 8011 	strb.w	r8, [r5, #17]
    2944:	e02c      	b.n	29a0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6d8>
    2946:	466a      	mov	r2, sp
    2948:	a901      	add	r1, sp, #4
    294a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    294c:	f00b fa01 	bl	dd52 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x48>
    2950:	6220      	str	r0, [r4, #32]
    2952:	b110      	cbz	r0, 295a <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x692>
    2954:	f895 105b 	ldrb.w	r1, [r5, #91]	; 0x5b
    2958:	b111      	cbz	r1, 2960 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x698>
    295a:	4842      	ldr	r0, [pc, #264]	; (2a64 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x79c>)
    295c:	6220      	str	r0, [r4, #32]
    295e:	e01f      	b.n	29a0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6d8>
    2960:	f89d 1000 	ldrb.w	r1, [sp]
    2964:	b921      	cbnz	r1, 2970 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6a8>
    2966:	8007      	strh	r7, [r0, #0]
    2968:	7087      	strb	r7, [r0, #2]
    296a:	2101      	movs	r1, #1
    296c:	f00b fcc1 	bl	e2f2 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    2970:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    2974:	6a20      	ldr	r0, [r4, #32]
    2976:	f00b fc44 	bl	e202 <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>
    297a:	e011      	b.n	29a0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6d8>
    297c:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    2980:	f8ad 0004 	strh.w	r0, [sp, #4]
    2984:	466a      	mov	r2, sp
    2986:	a901      	add	r1, sp, #4
    2988:	6b60      	ldr	r0, [r4, #52]	; 0x34
    298a:	f00b f9e2 	bl	dd52 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x48>
    298e:	6220      	str	r0, [r4, #32]
    2990:	b930      	cbnz	r0, 29a0 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x6d8>
    2992:	f240 21ea 	movw	r1, #746	; 0x2ea
    2996:	e01e      	b.n	29d6 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x70e>
    2998:	4648      	mov	r0, r9
    299a:	f7ff fab9 	bl	1f10 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    299e:	b1c0      	cbz	r0, 29d2 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x70a>
    29a0:	6a20      	ldr	r0, [r4, #32]
    29a2:	2308      	movs	r3, #8
    29a4:	7801      	ldrb	r1, [r0, #0]
    29a6:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    29aa:	7001      	strb	r1, [r0, #0]
    29ac:	7dea      	ldrb	r2, [r5, #23]
    29ae:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    29b2:	4311      	orrs	r1, r2
    29b4:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    29b8:	7001      	strb	r1, [r0, #0]
    29ba:	7e2a      	ldrb	r2, [r5, #24]
    29bc:	2304      	movs	r3, #4
    29be:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    29c2:	4311      	orrs	r1, r2
    29c4:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    29c8:	7001      	strb	r1, [r0, #0]
    29ca:	43c9      	mvns	r1, r1
    29cc:	0789      	lsls	r1, r1, #30
    29ce:	d005      	beq.n	29dc <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x714>
    29d0:	e007      	b.n	29e2 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x71a>
    29d2:	f240 21f3 	movw	r1, #755	; 0x2f3
    29d6:	2027      	movs	r0, #39	; 0x27
    29d8:	f7fe fba8 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    29dc:	78c0      	ldrb	r0, [r0, #3]
    29de:	2802      	cmp	r0, #2
    29e0:	d00f      	beq.n	2a02 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x73a>
    29e2:	6b60      	ldr	r0, [r4, #52]	; 0x34
    29e4:	f00a fe3a 	bl	d65c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    29e8:	b108      	cbz	r0, 29ee <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x726>
    29ea:	2101      	movs	r1, #1
    29ec:	e00a      	b.n	2a04 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x73c>
    29ee:	6a20      	ldr	r0, [r4, #32]
    29f0:	7800      	ldrb	r0, [r0, #0]
    29f2:	43c0      	mvns	r0, r0
    29f4:	0780      	lsls	r0, r0, #30
    29f6:	d004      	beq.n	2a02 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x73a>
    29f8:	f7ff fa48 	bl	1e8c <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    29fc:	f080 0101 	eor.w	r1, r0, #1
    2a00:	e000      	b.n	2a04 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x73c>
    2a02:	2100      	movs	r1, #0
    2a04:	6a20      	ldr	r0, [r4, #32]
    2a06:	7802      	ldrb	r2, [r0, #0]
    2a08:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    2a0c:	7001      	strb	r1, [r0, #0]
    2a0e:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
    2a12:	b181      	cbz	r1, 2a36 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x76e>
    2a14:	7841      	ldrb	r1, [r0, #1]
    2a16:	b171      	cbz	r1, 2a36 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x76e>
    2a18:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2a1a:	f005 fce7 	bl	83ec <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2a1e:	4811      	ldr	r0, [pc, #68]	; (2a64 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x79c>)
    2a20:	3828      	subs	r0, #40	; 0x28
    2a22:	7607      	strb	r7, [r0, #24]
    2a24:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    2a28:	e9c0 1204 	strd	r1, r2, [r0, #16]
    2a2c:	6a21      	ldr	r1, [r4, #32]
    2a2e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2a30:	f005 f94e 	bl	7cd0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    2a34:	e003      	b.n	2a3e <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x776>
    2a36:	f005 fcd9 	bl	83ec <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2a3a:	f005 f98b 	bl	7d54 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    2a3e:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    2a42:	2101      	movs	r1, #1
    2a44:	2000      	movs	r0, #0
    2a46:	f005 fd5b 	bl	8500 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    2a4a:	f884 8003 	strb.w	r8, [r4, #3]
    2a4e:	6a21      	ldr	r1, [r4, #32]
    2a50:	880a      	ldrh	r2, [r1, #0]
    2a52:	8222      	strh	r2, [r4, #16]
    2a54:	7889      	ldrb	r1, [r1, #2]
    2a56:	74a1      	strb	r1, [r4, #18]
    2a58:	f884 8000 	strb.w	r8, [r4]
    2a5c:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    2a60:	200000a4 	.word	0x200000a4
    2a64:	20000b30 	.word	0x20000b30
    2a68:	000026cd 	.word	0x000026cd
    2a6c:	00002415 	.word	0x00002415
    2a70:	000025c5 	.word	0x000025c5
    2a74:	00002851 	.word	0x00002851

00002a78 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    2a78:	4904      	ldr	r1, [pc, #16]	; (2a8c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    2a7a:	784a      	ldrb	r2, [r1, #1]
    2a7c:	4282      	cmp	r2, r0
    2a7e:	d903      	bls.n	2a88 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    2a80:	4408      	add	r0, r1
    2a82:	f890 0142 	ldrb.w	r0, [r0, #322]	; 0x142
    2a86:	4770      	bx	lr
    2a88:	2000      	movs	r0, #0
    2a8a:	4770      	bx	lr
    2a8c:	200011b6 	.word	0x200011b6

00002a90 <sym_BEUFSWAQKCWS5CDGVZRIC3BRKSTHGOKRJJDB32I>:
    2a90:	4904      	ldr	r1, [pc, #16]	; (2aa4 <sym_BEUFSWAQKCWS5CDGVZRIC3BRKSTHGOKRJJDB32I+0x14>)
    2a92:	784a      	ldrb	r2, [r1, #1]
    2a94:	4282      	cmp	r2, r0
    2a96:	d903      	bls.n	2aa0 <sym_BEUFSWAQKCWS5CDGVZRIC3BRKSTHGOKRJJDB32I+0x10>
    2a98:	4408      	add	r0, r1
    2a9a:	f890 014a 	ldrb.w	r0, [r0, #330]	; 0x14a
    2a9e:	4770      	bx	lr
    2aa0:	2000      	movs	r0, #0
    2aa2:	4770      	bx	lr
    2aa4:	200011b6 	.word	0x200011b6

00002aa8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    2aa8:	4904      	ldr	r1, [pc, #16]	; (2abc <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    2aaa:	784a      	ldrb	r2, [r1, #1]
    2aac:	4282      	cmp	r2, r0
    2aae:	d903      	bls.n	2ab8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    2ab0:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    2ab4:	3082      	adds	r0, #130	; 0x82
    2ab6:	4770      	bx	lr
    2ab8:	2000      	movs	r0, #0
    2aba:	4770      	bx	lr
    2abc:	200011b6 	.word	0x200011b6

00002ac0 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    2ac0:	4a05      	ldr	r2, [pc, #20]	; (2ad8 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    2ac2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2ac6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    2aca:	6802      	ldr	r2, [r0, #0]
    2acc:	f8c1 210a 	str.w	r2, [r1, #266]	; 0x10a
    2ad0:	8880      	ldrh	r0, [r0, #4]
    2ad2:	f8a1 010e 	strh.w	r0, [r1, #270]	; 0x10e
    2ad6:	4770      	bx	lr
    2ad8:	200011b6 	.word	0x200011b6

00002adc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    2adc:	4904      	ldr	r1, [pc, #16]	; (2af0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    2ade:	784a      	ldrb	r2, [r1, #1]
    2ae0:	4282      	cmp	r2, r0
    2ae2:	d903      	bls.n	2aec <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    2ae4:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    2ae8:	1c80      	adds	r0, r0, #2
    2aea:	4770      	bx	lr
    2aec:	2000      	movs	r0, #0
    2aee:	4770      	bx	lr
    2af0:	200011b6 	.word	0x200011b6

00002af4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    2af4:	b510      	push	{r4, lr}
    2af6:	f44f 72c5 	mov.w	r2, #394	; 0x18a
    2afa:	2100      	movs	r1, #0
    2afc:	4805      	ldr	r0, [pc, #20]	; (2b14 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x20>)
    2afe:	f00e f8f5 	bl	10cec <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2b02:	4805      	ldr	r0, [pc, #20]	; (2b18 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x24>)
    2b04:	2100      	movs	r1, #0
    2b06:	7001      	strb	r1, [r0, #0]
    2b08:	7041      	strb	r1, [r0, #1]
    2b0a:	f44f 7161 	mov.w	r1, #900	; 0x384
    2b0e:	8041      	strh	r1, [r0, #2]
    2b10:	bd10      	pop	{r4, pc}
    2b12:	0000      	.short	0x0000
    2b14:	200011b6 	.word	0x200011b6
    2b18:	2000036c 	.word	0x2000036c

00002b1c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    2b1c:	4b0b      	ldr	r3, [pc, #44]	; (2b4c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    2b1e:	b510      	push	{r4, lr}
    2b20:	785c      	ldrb	r4, [r3, #1]
    2b22:	4284      	cmp	r4, r0
    2b24:	d910      	bls.n	2b48 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2c>
    2b26:	4418      	add	r0, r3
    2b28:	f890 0102 	ldrb.w	r0, [r0, #258]	; 0x102
    2b2c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2b30:	4418      	add	r0, r3
    2b32:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
    2b36:	700b      	strb	r3, [r1, #0]
    2b38:	f8d0 1153 	ldr.w	r1, [r0, #339]	; 0x153
    2b3c:	6011      	str	r1, [r2, #0]
    2b3e:	f8b0 0157 	ldrh.w	r0, [r0, #343]	; 0x157
    2b42:	8090      	strh	r0, [r2, #4]
    2b44:	2001      	movs	r0, #1
    2b46:	bd10      	pop	{r4, pc}
    2b48:	2000      	movs	r0, #0
    2b4a:	bd10      	pop	{r4, pc}
    2b4c:	200011b6 	.word	0x200011b6

00002b50 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    2b50:	4801      	ldr	r0, [pc, #4]	; (2b58 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    2b52:	8840      	ldrh	r0, [r0, #2]
    2b54:	4770      	bx	lr
    2b56:	0000      	.short	0x0000
    2b58:	2000036c 	.word	0x2000036c

00002b5c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>:
    2b5c:	4905      	ldr	r1, [pc, #20]	; (2b74 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x18>)
    2b5e:	784a      	ldrb	r2, [r1, #1]
    2b60:	4282      	cmp	r2, r0
    2b62:	d903      	bls.n	2b6c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x10>
    2b64:	4408      	add	r0, r1
    2b66:	f890 013a 	ldrb.w	r0, [r0, #314]	; 0x13a
    2b6a:	b108      	cbz	r0, 2b70 <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI+0x14>
    2b6c:	2000      	movs	r0, #0
    2b6e:	4770      	bx	lr
    2b70:	2001      	movs	r0, #1
    2b72:	4770      	bx	lr
    2b74:	200011b6 	.word	0x200011b6

00002b78 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>:
    2b78:	4901      	ldr	r1, [pc, #4]	; (2b80 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x8>)
    2b7a:	7048      	strb	r0, [r1, #1]
    2b7c:	4770      	bx	lr
    2b7e:	0000      	.short	0x0000
    2b80:	2000036c 	.word	0x2000036c
    2b84:	4602      	mov	r2, r0
    2b86:	4809      	ldr	r0, [pc, #36]	; (2bac <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x34>)
    2b88:	b510      	push	{r4, lr}
    2b8a:	7800      	ldrb	r0, [r0, #0]
    2b8c:	460b      	mov	r3, r1
    2b8e:	b158      	cbz	r0, 2ba8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
    2b90:	4807      	ldr	r0, [pc, #28]	; (2bb0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
    2b92:	7841      	ldrb	r1, [r0, #1]
    2b94:	b141      	cbz	r1, 2ba8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x30>
    2b96:	b10b      	cbz	r3, 2b9c <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x24>
    2b98:	1c80      	adds	r0, r0, #2
    2b9a:	e001      	b.n	2ba0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x28>
    2b9c:	4804      	ldr	r0, [pc, #16]	; (2bb0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x38>)
    2b9e:	3082      	adds	r0, #130	; 0x82
    2ba0:	f004 ff9e 	bl	7ae0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    2ba4:	2001      	movs	r0, #1
    2ba6:	bd10      	pop	{r4, pc}
    2ba8:	2000      	movs	r0, #0
    2baa:	bd10      	pop	{r4, pc}
    2bac:	2000036c 	.word	0x2000036c
    2bb0:	200011b6 	.word	0x200011b6
    2bb4:	4908      	ldr	r1, [pc, #32]	; (2bd8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x60>)
    2bb6:	b510      	push	{r4, lr}
    2bb8:	4603      	mov	r3, r0
    2bba:	2000      	movs	r0, #0
    2bbc:	784a      	ldrb	r2, [r1, #1]
    2bbe:	e006      	b.n	2bce <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x56>
    2bc0:	180c      	adds	r4, r1, r0
    2bc2:	f894 4102 	ldrb.w	r4, [r4, #258]	; 0x102
    2bc6:	429c      	cmp	r4, r3
    2bc8:	d004      	beq.n	2bd4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x5c>
    2bca:	1c40      	adds	r0, r0, #1
    2bcc:	b2c0      	uxtb	r0, r0
    2bce:	4282      	cmp	r2, r0
    2bd0:	d8f6      	bhi.n	2bc0 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x48>
    2bd2:	2008      	movs	r0, #8
    2bd4:	bd10      	pop	{r4, pc}
    2bd6:	0000      	.short	0x0000
    2bd8:	200011b6 	.word	0x200011b6
    2bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bde:	4c1a      	ldr	r4, [pc, #104]	; (2c48 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xd0>)
    2be0:	4603      	mov	r3, r0
    2be2:	2000      	movs	r0, #0
    2be4:	7825      	ldrb	r5, [r4, #0]
    2be6:	e02b      	b.n	2c40 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc8>
    2be8:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
    2bec:	4422      	add	r2, r4
    2bee:	780f      	ldrb	r7, [r1, #0]
    2bf0:	f892 c153 	ldrb.w	ip, [r2, #339]	; 0x153
    2bf4:	f892 6152 	ldrb.w	r6, [r2, #338]	; 0x152
    2bf8:	ea87 070c 	eor.w	r7, r7, ip
    2bfc:	405e      	eors	r6, r3
    2bfe:	443e      	add	r6, r7
    2c00:	784f      	ldrb	r7, [r1, #1]
    2c02:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    2c06:	ea87 070c 	eor.w	r7, r7, ip
    2c0a:	443e      	add	r6, r7
    2c0c:	788f      	ldrb	r7, [r1, #2]
    2c0e:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    2c12:	ea87 070c 	eor.w	r7, r7, ip
    2c16:	443e      	add	r6, r7
    2c18:	78cf      	ldrb	r7, [r1, #3]
    2c1a:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    2c1e:	ea87 070c 	eor.w	r7, r7, ip
    2c22:	443e      	add	r6, r7
    2c24:	790f      	ldrb	r7, [r1, #4]
    2c26:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    2c2a:	f892 2158 	ldrb.w	r2, [r2, #344]	; 0x158
    2c2e:	ea87 070c 	eor.w	r7, r7, ip
    2c32:	443e      	add	r6, r7
    2c34:	794f      	ldrb	r7, [r1, #5]
    2c36:	4057      	eors	r7, r2
    2c38:	42f7      	cmn	r7, r6
    2c3a:	d004      	beq.n	2c46 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xce>
    2c3c:	1c40      	adds	r0, r0, #1
    2c3e:	b2c0      	uxtb	r0, r0
    2c40:	4285      	cmp	r5, r0
    2c42:	d8d1      	bhi.n	2be8 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x70>
    2c44:	2008      	movs	r0, #8
    2c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c48:	200011b6 	.word	0x200011b6

00002c4c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>:
    2c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2c50:	4604      	mov	r4, r0
    2c52:	f100 0580 	add.w	r5, r0, #128	; 0x80
    2c56:	f04f 0901 	mov.w	r9, #1
    2c5a:	b171      	cbz	r1, 2c7a <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x2e>
    2c5c:	f104 07a6 	add.w	r7, r4, #166	; 0xa6
    2c60:	1e7e      	subs	r6, r7, #1
    2c62:	2901      	cmp	r1, #1
    2c64:	d029      	beq.n	2cba <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6e>
    2c66:	2902      	cmp	r1, #2
    2c68:	d04e      	beq.n	2d08 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xbc>
    2c6a:	2903      	cmp	r1, #3
    2c6c:	d123      	bne.n	2cb6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    2c6e:	4639      	mov	r1, r7
    2c70:	4630      	mov	r0, r6
    2c72:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2c76:	f00b b9e9 	b.w	e04c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    2c7a:	f44f 723e 	mov.w	r2, #760	; 0x2f8
    2c7e:	2100      	movs	r1, #0
    2c80:	f00e f834 	bl	10cec <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2c84:	f885 9025 	strb.w	r9, [r5, #37]	; 0x25
    2c88:	4924      	ldr	r1, [pc, #144]	; (2d1c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd0>)
    2c8a:	66e9      	str	r1, [r5, #108]	; 0x6c
    2c8c:	4620      	mov	r0, r4
    2c8e:	2107      	movs	r1, #7
    2c90:	6729      	str	r1, [r5, #112]	; 0x70
    2c92:	f810 1fec 	ldrb.w	r1, [r0, #236]!
    2c96:	f021 0104 	bic.w	r1, r1, #4
    2c9a:	7001      	strb	r1, [r0, #0]
    2c9c:	20fe      	movs	r0, #254	; 0xfe
    2c9e:	f885 00a6 	strb.w	r0, [r5, #166]	; 0xa6
    2ca2:	207f      	movs	r0, #127	; 0x7f
    2ca4:	7668      	strb	r0, [r5, #25]
    2ca6:	481e      	ldr	r0, [pc, #120]	; (2d20 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd4>)
    2ca8:	60a8      	str	r0, [r5, #8]
    2caa:	2000      	movs	r0, #0
    2cac:	e9c5 0000 	strd	r0, r0, [r5]
    2cb0:	2020      	movs	r0, #32
    2cb2:	f884 02a4 	strb.w	r0, [r4, #676]	; 0x2a4
    2cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2cba:	f04f 0800 	mov.w	r8, #0
    2cbe:	f8a4 8236 	strh.w	r8, [r4, #566]	; 0x236
    2cc2:	f884 822b 	strb.w	r8, [r4, #555]	; 0x22b
    2cc6:	6921      	ldr	r1, [r4, #16]
    2cc8:	4816      	ldr	r0, [pc, #88]	; (2d24 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xd8>)
    2cca:	460a      	mov	r2, r1
    2ccc:	4408      	add	r0, r1
    2cce:	fbb0 f0f1 	udiv	r0, r0, r1
    2cd2:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
    2cd6:	f640 30b8 	movw	r0, #3000	; 0xbb8
    2cda:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
    2cde:	8b63      	ldrh	r3, [r4, #26]
    2ce0:	4628      	mov	r0, r5
    2ce2:	f000 f821 	bl	2d28 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xdc>
    2ce6:	4639      	mov	r1, r7
    2ce8:	4630      	mov	r0, r6
    2cea:	f00b f9af 	bl	e04c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    2cee:	f00d ff5b 	bl	10ba8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    2cf2:	b118      	cbz	r0, 2cfc <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb0>
    2cf4:	6960      	ldr	r0, [r4, #20]
    2cf6:	f000 fbd9 	bl	34ac <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    2cfa:	b110      	cbz	r0, 2d02 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xb6>
    2cfc:	f884 821a 	strb.w	r8, [r4, #538]	; 0x21a
    2d00:	e7d9      	b.n	2cb6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    2d02:	f884 921a 	strb.w	r9, [r4, #538]	; 0x21a
    2d06:	e7d6      	b.n	2cb6 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x6a>
    2d08:	6901      	ldr	r1, [r0, #16]
    2d0a:	f8b4 32da 	ldrh.w	r3, [r4, #730]	; 0x2da
    2d0e:	f8d4 22d4 	ldr.w	r2, [r4, #724]	; 0x2d4
    2d12:	4628      	mov	r0, r5
    2d14:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2d18:	f000 b806 	b.w	2d28 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0xdc>
    2d1c:	c404492f 	.word	0xc404492f
    2d20:	fffce000 	.word	0xfffce000
    2d24:	01c9c37f 	.word	0x01c9c37f
    2d28:	b510      	push	{r4, lr}
    2d2a:	2400      	movs	r4, #0
    2d2c:	f8a0 404c 	strh.w	r4, [r0, #76]	; 0x4c
    2d30:	f830 4f50 	ldrh.w	r4, [r0, #80]!
    2d34:	434c      	muls	r4, r1
    2d36:	fbb4 f4f2 	udiv	r4, r4, r2
    2d3a:	f820 4910 	strh.w	r4, [r0], #-16
    2d3e:	f240 2471 	movw	r4, #625	; 0x271
    2d42:	4363      	muls	r3, r4
    2d44:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    2d48:	1e5b      	subs	r3, r3, #1
    2d4a:	fbb3 f3f2 	udiv	r3, r3, r2
    2d4e:	81c3      	strh	r3, [r0, #14]
    2d50:	4b09      	ldr	r3, [pc, #36]	; (2d78 <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI+0x12c>)
    2d52:	fbb3 f3f2 	udiv	r3, r3, r2
    2d56:	1c5b      	adds	r3, r3, #1
    2d58:	8283      	strh	r3, [r0, #20]
    2d5a:	8903      	ldrh	r3, [r0, #8]
    2d5c:	4363      	muls	r3, r4
    2d5e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    2d62:	1e5b      	subs	r3, r3, #1
    2d64:	fbb3 f3f2 	udiv	r3, r3, r2
    2d68:	6043      	str	r3, [r0, #4]
    2d6a:	6803      	ldr	r3, [r0, #0]
    2d6c:	434b      	muls	r3, r1
    2d6e:	fbb3 f1f2 	udiv	r1, r3, r2
    2d72:	6001      	str	r1, [r0, #0]
    2d74:	bd10      	pop	{r4, pc}
    2d76:	0000      	.short	0x0000
    2d78:	02625a00 	.word	0x02625a00

00002d7c <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>:
    2d7c:	4902      	ldr	r1, [pc, #8]	; (2d88 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ+0xc>)
    2d7e:	f991 1000 	ldrsb.w	r1, [r1]
    2d82:	f00b b914 	b.w	dfae <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    2d86:	0000      	.short	0x0000
    2d88:	20000384 	.word	0x20000384

00002d8c <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>:
    2d8c:	b508      	push	{r3, lr}
    2d8e:	207f      	movs	r0, #127	; 0x7f
    2d90:	f88d 0000 	strb.w	r0, [sp]
    2d94:	4668      	mov	r0, sp
    2d96:	f005 fbd9 	bl	854c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    2d9a:	b140      	cbz	r0, 2dae <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x22>
    2d9c:	4805      	ldr	r0, [pc, #20]	; (2db4 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x28>)
    2d9e:	7840      	ldrb	r0, [r0, #1]
    2da0:	4240      	negs	r0, r0
    2da2:	b241      	sxtb	r1, r0
    2da4:	f99d 0000 	ldrsb.w	r0, [sp]
    2da8:	f00b f901 	bl	dfae <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x8>
    2dac:	bd08      	pop	{r3, pc}
    2dae:	f99d 0000 	ldrsb.w	r0, [sp]
    2db2:	bd08      	pop	{r3, pc}
    2db4:	20000384 	.word	0x20000384

00002db8 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>:
    2db8:	4a01      	ldr	r2, [pc, #4]	; (2dc0 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA+0x8>)
    2dba:	7010      	strb	r0, [r2, #0]
    2dbc:	7051      	strb	r1, [r2, #1]
    2dbe:	4770      	bx	lr
    2dc0:	20000384 	.word	0x20000384

00002dc4 <sym_S635TH4ZNECIWRKFWYBUXBZ3GFP7WORE4PRXDPQ>:
    2dc4:	b50c      	push	{r2, r3, lr}
    2dc6:	a104      	add	r1, pc, #16	; (adr r1, 2dd8 <sym_S635TH4ZNECIWRKFWYBUXBZ3GFP7WORE4PRXDPQ+0x14>)
    2dc8:	e9d1 0100 	ldrd	r0, r1, [r1]
    2dcc:	e9cd 0100 	strd	r0, r1, [sp]
    2dd0:	4668      	mov	r0, sp
    2dd2:	f000 f805 	bl	2de0 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>
    2dd6:	bd0c      	pop	{r2, r3, pc}
    2dd8:	ffffffff 	.word	0xffffffff
    2ddc:	0000001f 	.word	0x0000001f

00002de0 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>:
    2de0:	4905      	ldr	r1, [pc, #20]	; (2df8 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x18>)
    2de2:	22ff      	movs	r2, #255	; 0xff
    2de4:	700a      	strb	r2, [r1, #0]
    2de6:	460a      	mov	r2, r1
    2de8:	6803      	ldr	r3, [r0, #0]
    2dea:	f8c2 3001 	str.w	r3, [r2, #1]
    2dee:	7900      	ldrb	r0, [r0, #4]
    2df0:	7150      	strb	r0, [r2, #5]
    2df2:	2000      	movs	r0, #0
    2df4:	7008      	strb	r0, [r1, #0]
    2df6:	4770      	bx	lr
    2df8:	20000386 	.word	0x20000386
    2dfc:	b570      	push	{r4, r5, r6, lr}
    2dfe:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
    2e02:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    2e06:	2401      	movs	r4, #1
    2e08:	fb03 2101 	mla	r1, r3, r1, r2
    2e0c:	2225      	movs	r2, #37	; 0x25
    2e0e:	fbb1 f3f2 	udiv	r3, r1, r2
    2e12:	fb02 1113 	mls	r1, r2, r3, r1
    2e16:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    2e1a:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
    2e1e:	f001 0307 	and.w	r3, r1, #7
    2e22:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
    2e26:	fa04 f303 	lsl.w	r3, r4, r3
    2e2a:	421a      	tst	r2, r3
    2e2c:	d004      	beq.n	2e38 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x58>
    2e2e:	bf00      	nop
    2e30:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33
    2e34:	2000      	movs	r0, #0
    2e36:	bd70      	pop	{r4, r5, r6, pc}
    2e38:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    2e3c:	fbb1 f3f2 	udiv	r3, r1, r2
    2e40:	fb02 1113 	mls	r1, r2, r3, r1
    2e44:	1c49      	adds	r1, r1, #1
    2e46:	b2c9      	uxtb	r1, r1
    2e48:	2300      	movs	r3, #0
    2e4a:	18c5      	adds	r5, r0, r3
    2e4c:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
    2e50:	428a      	cmp	r2, r1
    2e52:	d312      	bcc.n	2e7a <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x9a>
    2e54:	f895 5026 	ldrb.w	r5, [r5, #38]	; 0x26
    2e58:	2200      	movs	r2, #0
    2e5a:	bf00      	nop
    2e5c:	fa04 f602 	lsl.w	r6, r4, r2
    2e60:	4235      	tst	r5, r6
    2e62:	d001      	beq.n	2e68 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x88>
    2e64:	1e49      	subs	r1, r1, #1
    2e66:	b2c9      	uxtb	r1, r1
    2e68:	b121      	cbz	r1, 2e74 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x94>
    2e6a:	1c52      	adds	r2, r2, #1
    2e6c:	b2d2      	uxtb	r2, r2
    2e6e:	2a08      	cmp	r2, #8
    2e70:	d3f4      	bcc.n	2e5c <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x7c>
    2e72:	e004      	b.n	2e7e <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x9e>
    2e74:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    2e78:	e7da      	b.n	2e30 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x50>
    2e7a:	1a89      	subs	r1, r1, r2
    2e7c:	b2c9      	uxtb	r1, r1
    2e7e:	1c5b      	adds	r3, r3, #1
    2e80:	b2db      	uxtb	r3, r3
    2e82:	2b05      	cmp	r3, #5
    2e84:	d3e1      	bcc.n	2e4a <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x6a>
    2e86:	201f      	movs	r0, #31
    2e88:	bd70      	pop	{r4, r5, r6, pc}
    2e8a:	0000      	movs	r0, r0
    2e8c:	b570      	push	{r4, r5, r6, lr}
    2e8e:	1c49      	adds	r1, r1, #1
    2e90:	2300      	movs	r3, #0
    2e92:	b2c9      	uxtb	r1, r1
    2e94:	2401      	movs	r4, #1
    2e96:	18c5      	adds	r5, r0, r3
    2e98:	79aa      	ldrb	r2, [r5, #6]
    2e9a:	428a      	cmp	r2, r1
    2e9c:	d312      	bcc.n	2ec4 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xe4>
    2e9e:	f895 5001 	ldrb.w	r5, [r5, #1]
    2ea2:	2200      	movs	r2, #0
    2ea4:	fa04 f602 	lsl.w	r6, r4, r2
    2ea8:	4235      	tst	r5, r6
    2eaa:	d001      	beq.n	2eb0 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xd0>
    2eac:	1e49      	subs	r1, r1, #1
    2eae:	b2c9      	uxtb	r1, r1
    2eb0:	b121      	cbz	r1, 2ebc <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xdc>
    2eb2:	1c52      	adds	r2, r2, #1
    2eb4:	b2d2      	uxtb	r2, r2
    2eb6:	2a08      	cmp	r2, #8
    2eb8:	d3f4      	bcc.n	2ea4 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xc4>
    2eba:	e005      	b.n	2ec8 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xe8>
    2ebc:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    2ec0:	b2c0      	uxtb	r0, r0
    2ec2:	bd70      	pop	{r4, r5, r6, pc}
    2ec4:	1a89      	subs	r1, r1, r2
    2ec6:	b2c9      	uxtb	r1, r1
    2ec8:	1c5b      	adds	r3, r3, #1
    2eca:	b2db      	uxtb	r3, r3
    2ecc:	2b05      	cmp	r3, #5
    2ece:	d3e2      	bcc.n	2e96 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xb6>
    2ed0:	219d      	movs	r1, #157	; 0x9d
    2ed2:	2046      	movs	r0, #70	; 0x46
    2ed4:	f7fe f92a 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00002ed8 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>:
    2ed8:	7841      	ldrb	r1, [r0, #1]
    2eda:	b141      	cbz	r1, 2eee <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    2edc:	78c0      	ldrb	r0, [r0, #3]
    2ede:	282b      	cmp	r0, #43	; 0x2b
    2ee0:	d203      	bcs.n	2eea <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x12>
    2ee2:	4a04      	ldr	r2, [pc, #16]	; (2ef4 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x1c>)
    2ee4:	5c10      	ldrb	r0, [r2, r0]
    2ee6:	4288      	cmp	r0, r1
    2ee8:	d101      	bne.n	2eee <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    2eea:	2001      	movs	r0, #1
    2eec:	4770      	bx	lr
    2eee:	2000      	movs	r0, #0
    2ef0:	4770      	bx	lr
    2ef2:	0000      	.short	0x0000
    2ef4:	00010dac 	.word	0x00010dac

00002ef8 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>:
    2ef8:	b510      	push	{r4, lr}
    2efa:	2201      	movs	r2, #1
    2efc:	70c1      	strb	r1, [r0, #3]
    2efe:	292b      	cmp	r1, #43	; 0x2b
    2f00:	d202      	bcs.n	2f08 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x10>
    2f02:	4a06      	ldr	r2, [pc, #24]	; (2f1c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x24>)
    2f04:	5c52      	ldrb	r2, [r2, r1]
    2f06:	e006      	b.n	2f16 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    2f08:	29ff      	cmp	r1, #255	; 0xff
    2f0a:	d004      	beq.n	2f16 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    2f0c:	f240 4174 	movw	r1, #1140	; 0x474
    2f10:	202a      	movs	r0, #42	; 0x2a
    2f12:	f7fe f90b 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2f16:	7042      	strb	r2, [r0, #1]
    2f18:	bd10      	pop	{r4, pc}
    2f1a:	0000      	.short	0x0000
    2f1c:	00010dac 	.word	0x00010dac

00002f20 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    2f20:	4904      	ldr	r1, [pc, #16]	; (2f34 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    2f22:	7c89      	ldrb	r1, [r1, #18]
    2f24:	0749      	lsls	r1, r1, #29
    2f26:	d400      	bmi.n	2f2a <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    2f28:	b108      	cbz	r0, 2f2e <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    2f2a:	2000      	movs	r0, #0
    2f2c:	4770      	bx	lr
    2f2e:	2001      	movs	r0, #1
    2f30:	4770      	bx	lr
    2f32:	0000      	.short	0x0000
    2f34:	20001098 	.word	0x20001098

00002f38 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    2f38:	4803      	ldr	r0, [pc, #12]	; (2f48 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    2f3a:	7c80      	ldrb	r0, [r0, #18]
    2f3c:	0780      	lsls	r0, r0, #30
    2f3e:	d401      	bmi.n	2f44 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    2f40:	2001      	movs	r0, #1
    2f42:	4770      	bx	lr
    2f44:	2000      	movs	r0, #0
    2f46:	4770      	bx	lr
    2f48:	20001098 	.word	0x20001098

00002f4c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    2f4c:	4803      	ldr	r0, [pc, #12]	; (2f5c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    2f4e:	7c80      	ldrb	r0, [r0, #18]
    2f50:	07c0      	lsls	r0, r0, #31
    2f52:	d001      	beq.n	2f58 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    2f54:	2000      	movs	r0, #0
    2f56:	4770      	bx	lr
    2f58:	2001      	movs	r0, #1
    2f5a:	4770      	bx	lr
    2f5c:	20001098 	.word	0x20001098
    2f60:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    2f64:	4688      	mov	r8, r1
    2f66:	4699      	mov	r9, r3
    2f68:	4615      	mov	r5, r2
    2f6a:	4604      	mov	r4, r0
    2f6c:	4669      	mov	r1, sp
    2f6e:	f00a ff09 	bl	dd84 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    2f72:	bbe0      	cbnz	r0, 2fee <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa2>
    2f74:	9e01      	ldr	r6, [sp, #4]
    2f76:	2700      	movs	r7, #0
    2f78:	3680      	adds	r6, #128	; 0x80
    2f7a:	b17d      	cbz	r5, 2f9c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x50>
    2f7c:	4620      	mov	r0, r4
    2f7e:	f7fe fd87 	bl	1a90 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    2f82:	0004      	movs	r4, r0
    2f84:	d00e      	beq.n	2fa4 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x58>
    2f86:	4629      	mov	r1, r5
    2f88:	f00a fb3a 	bl	d600 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    2f8c:	b118      	cbz	r0, 2f96 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4a>
    2f8e:	491b      	ldr	r1, [pc, #108]	; (2ffc <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xb0>)
    2f90:	8849      	ldrh	r1, [r1, #2]
    2f92:	42a9      	cmp	r1, r5
    2f94:	d208      	bcs.n	2fa8 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x5c>
    2f96:	2000      	movs	r0, #0
    2f98:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    2f9c:	2001      	movs	r0, #1
    2f9e:	f886 0024 	strb.w	r0, [r6, #36]	; 0x24
    2fa2:	e024      	b.n	2fee <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa2>
    2fa4:	2167      	movs	r1, #103	; 0x67
    2fa6:	e025      	b.n	2ff4 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa8>
    2fa8:	4601      	mov	r1, r0
    2faa:	aa02      	add	r2, sp, #8
    2fac:	4620      	mov	r0, r4
    2fae:	f00a fb20 	bl	d5f2 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    2fb2:	9802      	ldr	r0, [sp, #8]
    2fb4:	8007      	strh	r7, [r0, #0]
    2fb6:	7087      	strb	r7, [r0, #2]
    2fb8:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
    2fbc:	b109      	cbz	r1, 2fc2 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x76>
    2fbe:	f04f 0802 	mov.w	r8, #2
    2fc2:	4641      	mov	r1, r8
    2fc4:	f00b f995 	bl	e2f2 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    2fc8:	9802      	ldr	r0, [sp, #8]
    2fca:	462a      	mov	r2, r5
    2fcc:	4649      	mov	r1, r9
    2fce:	1cc0      	adds	r0, r0, #3
    2fd0:	f00d fe12 	bl	10bf8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2fd4:	4620      	mov	r0, r4
    2fd6:	4629      	mov	r1, r5
    2fd8:	f00a fac9 	bl	d56e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    2fdc:	b148      	cbz	r0, 2ff2 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa6>
    2fde:	4668      	mov	r0, sp
    2fe0:	f00b f9e2 	bl	e3a8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    2fe4:	9801      	ldr	r0, [sp, #4]
    2fe6:	f8a0 7222 	strh.w	r7, [r0, #546]	; 0x222
    2fea:	f886 7024 	strb.w	r7, [r6, #36]	; 0x24
    2fee:	2001      	movs	r0, #1
    2ff0:	e7d2      	b.n	2f98 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4c>
    2ff2:	217c      	movs	r1, #124	; 0x7c
    2ff4:	202b      	movs	r0, #43	; 0x2b
    2ff6:	f7fe f899 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2ffa:	0000      	.short	0x0000
    2ffc:	20001098 	.word	0x20001098

00003000 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    3000:	4809      	ldr	r0, [pc, #36]	; (3028 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    3002:	b082      	sub	sp, #8
    3004:	7a00      	ldrb	r0, [r0, #8]
    3006:	f88d 0000 	strb.w	r0, [sp]
    300a:	9800      	ldr	r0, [sp, #0]
    300c:	9000      	str	r0, [sp, #0]
    300e:	f89d 0000 	ldrb.w	r0, [sp]
    3012:	2800      	cmp	r0, #0
    3014:	d105      	bne.n	3022 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x22>
    3016:	2202      	movs	r2, #2
    3018:	4904      	ldr	r1, [pc, #16]	; (302c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x2c>)
    301a:	4803      	ldr	r0, [pc, #12]	; (3028 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    301c:	b002      	add	sp, #8
    301e:	f00b b9ef 	b.w	e400 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3022:	b002      	add	sp, #8
    3024:	4770      	bx	lr
    3026:	0000      	.short	0x0000
    3028:	200010b0 	.word	0x200010b0
    302c:	0000e447 	.word	0x0000e447

00003030 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    3030:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3034:	f8df 9178 	ldr.w	r9, [pc, #376]	; 31b0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x180>
    3038:	4f5e      	ldr	r7, [pc, #376]	; (31b4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x184>)
    303a:	4683      	mov	fp, r0
    303c:	f04f 0a01 	mov.w	sl, #1
    3040:	2600      	movs	r6, #0
    3042:	6878      	ldr	r0, [r7, #4]
    3044:	4635      	mov	r5, r6
    3046:	7a00      	ldrb	r0, [r0, #8]
    3048:	f88d 0000 	strb.w	r0, [sp]
    304c:	9800      	ldr	r0, [sp, #0]
    304e:	9000      	str	r0, [sp, #0]
    3050:	f89d 1000 	ldrb.w	r1, [sp]
    3054:	2910      	cmp	r1, #16
    3056:	d106      	bne.n	3066 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    3058:	f899 1013 	ldrb.w	r1, [r9, #19]
    305c:	b119      	cbz	r1, 3066 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x36>
    305e:	f8b9 0014 	ldrh.w	r0, [r9, #20]
    3062:	2800      	cmp	r0, #0
    3064:	d073      	beq.n	314e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    3066:	f88d 6000 	strb.w	r6, [sp]
    306a:	4668      	mov	r0, sp
    306c:	f000 f906 	bl	327c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb4>
    3070:	f89d 1000 	ldrb.w	r1, [sp]
    3074:	2900      	cmp	r1, #0
    3076:	d1f8      	bne.n	306a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3a>
    3078:	2800      	cmp	r0, #0
    307a:	d068      	beq.n	314e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    307c:	4604      	mov	r4, r0
    307e:	7a00      	ldrb	r0, [r0, #8]
    3080:	f88d 0000 	strb.w	r0, [sp]
    3084:	9800      	ldr	r0, [sp, #0]
    3086:	9000      	str	r0, [sp, #0]
    3088:	f89d 8000 	ldrb.w	r8, [sp]
    308c:	f104 0008 	add.w	r0, r4, #8
    3090:	2105      	movs	r1, #5
    3092:	9000      	str	r0, [sp, #0]
    3094:	7001      	strb	r1, [r0, #0]
    3096:	4640      	mov	r0, r8
    3098:	f1b8 0f08 	cmp.w	r8, #8
    309c:	d042      	beq.n	3124 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xf4>
    309e:	dc07      	bgt.n	30b0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x80>
    30a0:	2802      	cmp	r0, #2
    30a2:	d00d      	beq.n	30c0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x90>
    30a4:	2803      	cmp	r0, #3
    30a6:	d017      	beq.n	30d8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>
    30a8:	f1b8 0f04 	cmp.w	r8, #4
    30ac:	d105      	bne.n	30ba <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8a>
    30ae:	e01d      	b.n	30ec <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xbc>
    30b0:	280f      	cmp	r0, #15
    30b2:	d052      	beq.n	315a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12a>
    30b4:	f1b8 0f10 	cmp.w	r8, #16
    30b8:	d059      	beq.n	316e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x13e>
    30ba:	f240 214a 	movw	r1, #586	; 0x24a
    30be:	e065      	b.n	318c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    30c0:	6862      	ldr	r2, [r4, #4]
    30c2:	b132      	cbz	r2, 30d2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa2>
    30c4:	4659      	mov	r1, fp
    30c6:	4620      	mov	r0, r4
    30c8:	4790      	blx	r2
    30ca:	2004      	movs	r0, #4
    30cc:	f360 0507 	bfi	r5, r0, #0, #8
    30d0:	e010      	b.n	30f4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc4>
    30d2:	f240 11c3 	movw	r1, #451	; 0x1c3
    30d6:	e059      	b.n	318c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    30d8:	6862      	ldr	r2, [r4, #4]
    30da:	b122      	cbz	r2, 30e6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb6>
    30dc:	4659      	mov	r1, fp
    30de:	4620      	mov	r0, r4
    30e0:	4790      	blx	r2
    30e2:	4605      	mov	r5, r0
    30e4:	e006      	b.n	30f4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xc4>
    30e6:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
    30ea:	e04f      	b.n	318c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    30ec:	6861      	ldr	r1, [r4, #4]
    30ee:	b1b1      	cbz	r1, 311e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xee>
    30f0:	4620      	mov	r0, r4
    30f2:	4788      	blx	r1
    30f4:	f3c5 2007 	ubfx	r0, r5, #8, #8
    30f8:	2801      	cmp	r0, #1
    30fa:	d04a      	beq.n	3192 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x162>
    30fc:	f3ef 8110 	mrs	r1, PRIMASK
    3100:	b672      	cpsid	i
    3102:	7a20      	ldrb	r0, [r4, #8]
    3104:	f88d 0000 	strb.w	r0, [sp]
    3108:	9800      	ldr	r0, [sp, #0]
    310a:	9000      	str	r0, [sp, #0]
    310c:	f89d 0000 	ldrb.w	r0, [sp]
    3110:	2805      	cmp	r0, #5
    3112:	d042      	beq.n	319a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16a>
    3114:	b3b0      	cbz	r0, 3184 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x154>
    3116:	f366 0507 	bfi	r5, r6, #0, #8
    311a:	b3a1      	cbz	r1, 3186 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x156>
    311c:	e041      	b.n	31a2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x172>
    311e:	f44f 71eb 	mov.w	r1, #470	; 0x1d6
    3122:	e033      	b.n	318c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    3124:	6860      	ldr	r0, [r4, #4]
    3126:	465d      	mov	r5, fp
    3128:	b198      	cbz	r0, 3152 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x122>
    312a:	8804      	ldrh	r4, [r0, #0]
    312c:	4620      	mov	r0, r4
    312e:	f7fe fcaf 	bl	1a90 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    3132:	b180      	cbz	r0, 3156 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x126>
    3134:	706e      	strb	r6, [r5, #1]
    3136:	210b      	movs	r1, #11
    3138:	7029      	strb	r1, [r5, #0]
    313a:	80ec      	strh	r4, [r5, #6]
    313c:	f8a5 a008 	strh.w	sl, [r5, #8]
    3140:	f885 a004 	strb.w	sl, [r5, #4]
    3144:	4631      	mov	r1, r6
    3146:	f00a faf2 	bl	d72e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    314a:	2004      	movs	r0, #4
    314c:	613e      	str	r6, [r7, #16]
    314e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3152:	21e5      	movs	r1, #229	; 0xe5
    3154:	e01a      	b.n	318c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    3156:	21c5      	movs	r1, #197	; 0xc5
    3158:	e018      	b.n	318c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15c>
    315a:	f88b 6001 	strb.w	r6, [fp, #1]
    315e:	2114      	movs	r1, #20
    3160:	f88b 1000 	strb.w	r1, [fp]
    3164:	f8d4 1009 	ldr.w	r1, [r4, #9]
    3168:	f8cb 1004 	str.w	r1, [fp, #4]
    316c:	e7ad      	b.n	30ca <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    316e:	4812      	ldr	r0, [pc, #72]	; (31b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x188>)
    3170:	6802      	ldr	r2, [r0, #0]
    3172:	b122      	cbz	r2, 317e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14e>
    3174:	6860      	ldr	r0, [r4, #4]
    3176:	b138      	cbz	r0, 3188 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x158>
    3178:	8800      	ldrh	r0, [r0, #0]
    317a:	4659      	mov	r1, fp
    317c:	4790      	blx	r2
    317e:	2002      	movs	r0, #2
    3180:	613e      	str	r6, [r7, #16]
    3182:	e7e4      	b.n	314e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    3184:	e009      	b.n	319a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x16a>
    3186:	e00b      	b.n	31a0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x170>
    3188:	f44f 7110 	mov.w	r1, #576	; 0x240
    318c:	2010      	movs	r0, #16
    318e:	f7fd ffcd 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3192:	9800      	ldr	r0, [sp, #0]
    3194:	4641      	mov	r1, r8
    3196:	7001      	strb	r1, [r0, #0]
    3198:	e003      	b.n	31a2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x172>
    319a:	7226      	strb	r6, [r4, #8]
    319c:	613e      	str	r6, [r7, #16]
    319e:	e7bc      	b.n	311a <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xea>
    31a0:	b662      	cpsie	i
    31a2:	f015 0fff 	tst.w	r5, #255	; 0xff
    31a6:	f43f af4c 	beq.w	3042 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12>
    31aa:	b2e8      	uxtb	r0, r5
    31ac:	e7cf      	b.n	314e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11e>
    31ae:	0000      	.short	0x0000
    31b0:	20001098 	.word	0x20001098
    31b4:	200010c4 	.word	0x200010c4
    31b8:	200000cc 	.word	0x200000cc

000031bc <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    31bc:	4901      	ldr	r1, [pc, #4]	; (31c4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    31be:	7008      	strb	r0, [r1, #0]
    31c0:	f000 b8be 	b.w	3340 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x178>
    31c4:	2000038c 	.word	0x2000038c

000031c8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>:
    31c8:	4902      	ldr	r1, [pc, #8]	; (31d4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xc>)
    31ca:	4801      	ldr	r0, [pc, #4]	; (31d0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x8>)
    31cc:	6008      	str	r0, [r1, #0]
    31ce:	4770      	bx	lr
    31d0:	000031d9 	.word	0x000031d9
    31d4:	200000cc 	.word	0x200000cc
    31d8:	b538      	push	{r3, r4, r5, lr}
    31da:	000d      	movs	r5, r1
    31dc:	d014      	beq.n	3208 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x40>
    31de:	80a8      	strh	r0, [r5, #4]
    31e0:	2100      	movs	r1, #0
    31e2:	7269      	strb	r1, [r5, #9]
    31e4:	f7fe fc3e 	bl	1a64 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    31e8:	4604      	mov	r4, r0
    31ea:	f00a f9e4 	bl	d5b6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    31ee:	b170      	cbz	r0, 320e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x46>
    31f0:	4601      	mov	r1, r0
    31f2:	466a      	mov	r2, sp
    31f4:	4620      	mov	r0, r4
    31f6:	f00a f9fc 	bl	d5f2 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    31fa:	80e8      	strh	r0, [r5, #6]
    31fc:	b150      	cbz	r0, 3214 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x4c>
    31fe:	28fb      	cmp	r0, #251	; 0xfb
    3200:	d90b      	bls.n	321a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x52>
    3202:	f240 1123 	movw	r1, #291	; 0x123
    3206:	e033      	b.n	3270 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    3208:	f240 1113 	movw	r1, #275	; 0x113
    320c:	e030      	b.n	3270 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    320e:	f44f 718e 	mov.w	r1, #284	; 0x11c
    3212:	e02d      	b.n	3270 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    3214:	f240 1121 	movw	r1, #289	; 0x121
    3218:	e02a      	b.n	3270 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    321a:	9800      	ldr	r0, [sp, #0]
    321c:	f00b f815 	bl	e24a <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>
    3220:	2801      	cmp	r0, #1
    3222:	d004      	beq.n	322e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x66>
    3224:	2802      	cmp	r0, #2
    3226:	d002      	beq.n	322e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x66>
    3228:	f240 1133 	movw	r1, #307	; 0x133
    322c:	e020      	b.n	3270 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    322e:	7228      	strb	r0, [r5, #8]
    3230:	6828      	ldr	r0, [r5, #0]
    3232:	b1a8      	cbz	r0, 3260 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x98>
    3234:	9900      	ldr	r1, [sp, #0]
    3236:	88ea      	ldrh	r2, [r5, #6]
    3238:	1cc9      	adds	r1, r1, #3
    323a:	f00d fcdd 	bl	10bf8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    323e:	4620      	mov	r0, r4
    3240:	f00a f981 	bl	d546 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    3244:	b178      	cbz	r0, 3266 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x9e>
    3246:	4620      	mov	r0, r4
    3248:	2100      	movs	r1, #0
    324a:	f00a fa70 	bl	d72e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    324e:	b168      	cbz	r0, 326c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa4>
    3250:	4809      	ldr	r0, [pc, #36]	; (3278 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xb0>)
    3252:	7cc1      	ldrb	r1, [r0, #19]
    3254:	2900      	cmp	r1, #0
    3256:	d002      	beq.n	325e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x96>
    3258:	8a81      	ldrh	r1, [r0, #20]
    325a:	1e49      	subs	r1, r1, #1
    325c:	8281      	strh	r1, [r0, #20]
    325e:	bd38      	pop	{r3, r4, r5, pc}
    3260:	f44f 719d 	mov.w	r1, #314	; 0x13a
    3264:	e004      	b.n	3270 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    3266:	f240 113f 	movw	r1, #319	; 0x13f
    326a:	e001      	b.n	3270 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xa8>
    326c:	f44f 71a2 	mov.w	r1, #324	; 0x144
    3270:	2010      	movs	r0, #16
    3272:	f7fd ff5b 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3276:	0000      	.short	0x0000
    3278:	20001098 	.word	0x20001098
    327c:	b538      	push	{r3, r4, r5, lr}
    327e:	4603      	mov	r3, r0
    3280:	4917      	ldr	r1, [pc, #92]	; (32e0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x118>)
    3282:	2000      	movs	r0, #0
    3284:	7018      	strb	r0, [r3, #0]
    3286:	6908      	ldr	r0, [r1, #16]
    3288:	2401      	movs	r4, #1
    328a:	b140      	cbz	r0, 329e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xd6>
    328c:	7a02      	ldrb	r2, [r0, #8]
    328e:	f88d 2000 	strb.w	r2, [sp]
    3292:	9a00      	ldr	r2, [sp, #0]
    3294:	9200      	str	r2, [sp, #0]
    3296:	f89d 5000 	ldrb.w	r5, [sp]
    329a:	2d00      	cmp	r5, #0
    329c:	d111      	bne.n	32c2 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfa>
    329e:	6848      	ldr	r0, [r1, #4]
    32a0:	7a02      	ldrb	r2, [r0, #8]
    32a2:	f88d 2000 	strb.w	r2, [sp]
    32a6:	9a00      	ldr	r2, [sp, #0]
    32a8:	9200      	str	r2, [sp, #0]
    32aa:	f89d 5000 	ldrb.w	r5, [sp]
    32ae:	2d01      	cmp	r5, #1
    32b0:	d006      	beq.n	32c0 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xf8>
    32b2:	f3ef 8210 	mrs	r2, PRIMASK
    32b6:	b672      	cpsid	i
    32b8:	6805      	ldr	r5, [r0, #0]
    32ba:	604d      	str	r5, [r1, #4]
    32bc:	b112      	cbz	r2, 32c4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfc>
    32be:	e002      	b.n	32c6 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0xfe>
    32c0:	2000      	movs	r0, #0
    32c2:	bd38      	pop	{r3, r4, r5, pc}
    32c4:	b662      	cpsie	i
    32c6:	7a02      	ldrb	r2, [r0, #8]
    32c8:	f88d 2000 	strb.w	r2, [sp]
    32cc:	9a00      	ldr	r2, [sp, #0]
    32ce:	9200      	str	r2, [sp, #0]
    32d0:	f89d 5000 	ldrb.w	r5, [sp]
    32d4:	b10d      	cbz	r5, 32da <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x112>
    32d6:	6108      	str	r0, [r1, #16]
    32d8:	bd38      	pop	{r3, r4, r5, pc}
    32da:	701c      	strb	r4, [r3, #0]
    32dc:	bd38      	pop	{r3, r4, r5, pc}
    32de:	0000      	.short	0x0000
    32e0:	200010c4 	.word	0x200010c4
    32e4:	b538      	push	{r3, r4, r5, lr}
    32e6:	b1d0      	cbz	r0, 331e <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x156>
    32e8:	6041      	str	r1, [r0, #4]
    32ea:	f100 0108 	add.w	r1, r0, #8
    32ee:	700a      	strb	r2, [r1, #0]
    32f0:	f3ef 8310 	mrs	r3, PRIMASK
    32f4:	b672      	cpsid	i
    32f6:	4c10      	ldr	r4, [pc, #64]	; (3338 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x170>)
    32f8:	6004      	str	r4, [r0, #0]
    32fa:	1f21      	subs	r1, r4, #4
    32fc:	684a      	ldr	r2, [r1, #4]
    32fe:	b14a      	cbz	r2, 3314 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14c>
    3300:	7a12      	ldrb	r2, [r2, #8]
    3302:	f88d 2000 	strb.w	r2, [sp]
    3306:	9a00      	ldr	r2, [sp, #0]
    3308:	9200      	str	r2, [sp, #0]
    330a:	f89d 5000 	ldrb.w	r5, [sp]
    330e:	2d01      	cmp	r5, #1
    3310:	d100      	bne.n	3314 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x14c>
    3312:	600c      	str	r4, [r1, #0]
    3314:	680a      	ldr	r2, [r1, #0]
    3316:	6010      	str	r0, [r2, #0]
    3318:	6008      	str	r0, [r1, #0]
    331a:	b12b      	cbz	r3, 3328 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x160>
    331c:	e005      	b.n	332a <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x162>
    331e:	f240 2175 	movw	r1, #629	; 0x275
    3322:	2010      	movs	r0, #16
    3324:	f7fd ff02 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3328:	b662      	cpsie	i
    332a:	4804      	ldr	r0, [pc, #16]	; (333c <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x174>)
    332c:	7800      	ldrb	r0, [r0, #0]
    332e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3332:	f009 bacd 	b.w	c8d0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    3336:	0000      	.short	0x0000
    3338:	200010c8 	.word	0x200010c8
    333c:	2000038c 	.word	0x2000038c
    3340:	b510      	push	{r4, lr}
    3342:	2214      	movs	r2, #20
    3344:	2100      	movs	r1, #0
    3346:	4808      	ldr	r0, [pc, #32]	; (3368 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a0>)
    3348:	f00d fcd0 	bl	10cec <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    334c:	4806      	ldr	r0, [pc, #24]	; (3368 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a0>)
    334e:	2212      	movs	r2, #18
    3350:	2100      	movs	r1, #0
    3352:	3814      	subs	r0, #20
    3354:	f00d fcca 	bl	10cec <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3358:	4803      	ldr	r0, [pc, #12]	; (3368 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x1a0>)
    335a:	2101      	movs	r1, #1
    335c:	7301      	strb	r1, [r0, #12]
    335e:	1d01      	adds	r1, r0, #4
    3360:	6041      	str	r1, [r0, #4]
    3362:	6001      	str	r1, [r0, #0]
    3364:	bd10      	pop	{r4, pc}
    3366:	0000      	.short	0x0000
    3368:	200010c4 	.word	0x200010c4

0000336c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    336c:	b4f0      	push	{r4, r5, r6, r7}
    336e:	8150      	strh	r0, [r2, #10]
    3370:	890c      	ldrh	r4, [r1, #8]
    3372:	8194      	strh	r4, [r2, #12]
    3374:	898b      	ldrh	r3, [r1, #12]
    3376:	81d3      	strh	r3, [r2, #14]
    3378:	8948      	ldrh	r0, [r1, #10]
    337a:	8210      	strh	r0, [r2, #16]
    337c:	89cd      	ldrh	r5, [r1, #14]
    337e:	8255      	strh	r5, [r2, #18]
    3380:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    3382:	42ae      	cmp	r6, r5
    3384:	d108      	bne.n	3398 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    3386:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    3388:	4285      	cmp	r5, r0
    338a:	d105      	bne.n	3398 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    338c:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    338e:	429d      	cmp	r5, r3
    3390:	d102      	bne.n	3398 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    3392:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    3394:	42a3      	cmp	r3, r4
    3396:	d001      	beq.n	339c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    3398:	2301      	movs	r3, #1
    339a:	e000      	b.n	339e <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    339c:	2300      	movs	r3, #0
    339e:	7513      	strb	r3, [r2, #20]
    33a0:	8548      	strh	r0, [r1, #42]	; 0x2a
    33a2:	8a50      	ldrh	r0, [r2, #18]
    33a4:	85c8      	strh	r0, [r1, #46]	; 0x2e
    33a6:	8990      	ldrh	r0, [r2, #12]
    33a8:	8588      	strh	r0, [r1, #44]	; 0x2c
    33aa:	89d0      	ldrh	r0, [r2, #14]
    33ac:	8608      	strh	r0, [r1, #48]	; 0x30
    33ae:	bcf0      	pop	{r4, r5, r6, r7}
    33b0:	4901      	ldr	r1, [pc, #4]	; (33b8 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x4c>)
    33b2:	4610      	mov	r0, r2
    33b4:	f00b b81e 	b.w	e3f4 <sym_43BYC3K4M44JBPOX4EUJM44GYCCY2C3C4SYEF6I>
    33b8:	000033dd 	.word	0x000033dd

000033bc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    33bc:	8150      	strh	r0, [r2, #10]
    33be:	8a88      	ldrh	r0, [r1, #20]
    33c0:	8190      	strh	r0, [r2, #12]
    33c2:	8ac8      	ldrh	r0, [r1, #22]
    33c4:	81d0      	strh	r0, [r2, #14]
    33c6:	8b08      	ldrh	r0, [r1, #24]
    33c8:	8210      	strh	r0, [r2, #16]
    33ca:	8b48      	ldrh	r0, [r1, #26]
    33cc:	8250      	strh	r0, [r2, #18]
    33ce:	4902      	ldr	r1, [pc, #8]	; (33d8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x1c>)
    33d0:	4610      	mov	r0, r2
    33d2:	f00b b80c 	b.w	e3ee <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>
    33d6:	0000      	.short	0x0000
    33d8:	0000341d 	.word	0x0000341d
    33dc:	b538      	push	{r3, r4, r5, lr}
    33de:	f1a0 0418 	sub.w	r4, r0, #24
    33e2:	7d00      	ldrb	r0, [r0, #20]
    33e4:	460d      	mov	r5, r1
    33e6:	f000 0001 	and.w	r0, r0, #1
    33ea:	f7ff fd99 	bl	2f20 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    33ee:	2100      	movs	r1, #0
    33f0:	b108      	cbz	r0, 33f6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x3a>
    33f2:	9100      	str	r1, [sp, #0]
    33f4:	e00c      	b.n	3410 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    33f6:	7069      	strb	r1, [r5, #1]
    33f8:	2011      	movs	r0, #17
    33fa:	7028      	strb	r0, [r5, #0]
    33fc:	f854 0f22 	ldr.w	r0, [r4, #34]!
    3400:	6068      	str	r0, [r5, #4]
    3402:	6860      	ldr	r0, [r4, #4]
    3404:	60a8      	str	r0, [r5, #8]
    3406:	68a0      	ldr	r0, [r4, #8]
    3408:	60e8      	str	r0, [r5, #12]
    340a:	4803      	ldr	r0, [pc, #12]	; (3418 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x5c>)
    340c:	6840      	ldr	r0, [r0, #4]
    340e:	9000      	str	r0, [sp, #0]
    3410:	f8bd 0000 	ldrh.w	r0, [sp]
    3414:	bd38      	pop	{r3, r4, r5, pc}
    3416:	0000      	.short	0x0000
    3418:	000034a4 	.word	0x000034a4
    341c:	b570      	push	{r4, r5, r6, lr}
    341e:	b086      	sub	sp, #24
    3420:	460e      	mov	r6, r1
    3422:	4604      	mov	r4, r0
    3424:	f7ff fd88 	bl	2f38 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    3428:	2500      	movs	r5, #0
    342a:	b358      	cbz	r0, 3484 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc8>
    342c:	f5a4 70bc 	sub.w	r0, r4, #376	; 0x178
    3430:	7225      	strb	r5, [r4, #8]
    3432:	8804      	ldrh	r4, [r0, #0]
    3434:	a903      	add	r1, sp, #12
    3436:	4620      	mov	r0, r4
    3438:	f00c fd25 	bl	fe86 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    343c:	b108      	cbz	r0, 3442 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    343e:	21fe      	movs	r1, #254	; 0xfe
    3440:	e017      	b.n	3472 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xb6>
    3442:	f8ad 4000 	strh.w	r4, [sp]
    3446:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    344a:	f8ad 0002 	strh.w	r0, [sp, #2]
    344e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    3452:	f8ad 0004 	strh.w	r0, [sp, #4]
    3456:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    345a:	f8ad 0006 	strh.w	r0, [sp, #6]
    345e:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    3462:	f8ad 0008 	strh.w	r0, [sp, #8]
    3466:	4668      	mov	r0, sp
    3468:	f00c fd49 	bl	fefe <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    346c:	b120      	cbz	r0, 3478 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xbc>
    346e:	f240 1107 	movw	r1, #263	; 0x107
    3472:	202c      	movs	r0, #44	; 0x2c
    3474:	f7fd fe5a 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3478:	f8cd 5000 	str.w	r5, [sp]
    347c:	f8bd 0000 	ldrh.w	r0, [sp]
    3480:	b006      	add	sp, #24
    3482:	bd70      	pop	{r4, r5, r6, pc}
    3484:	2019      	movs	r0, #25
    3486:	7030      	strb	r0, [r6, #0]
    3488:	7075      	strb	r5, [r6, #1]
    348a:	f854 0f0a 	ldr.w	r0, [r4, #10]!
    348e:	6070      	str	r0, [r6, #4]
    3490:	6860      	ldr	r0, [r4, #4]
    3492:	60b0      	str	r0, [r6, #8]
    3494:	8920      	ldrh	r0, [r4, #8]
    3496:	81b0      	strh	r0, [r6, #12]
    3498:	4801      	ldr	r0, [pc, #4]	; (34a0 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xe4>)
    349a:	6800      	ldr	r0, [r0, #0]
    349c:	9000      	str	r0, [sp, #0]
    349e:	e7ed      	b.n	347c <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0xc0>
    34a0:	000034a4 	.word	0x000034a4
    34a4:	00000004 	.word	0x00000004
    34a8:	00000004 	.word	0x00000004

000034ac <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    34ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    34ae:	f06f 021f 	mvn.w	r2, #31
    34b2:	0c01      	lsrs	r1, r0, #16
    34b4:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    34b8:	251f      	movs	r5, #31
    34ba:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    34be:	3854      	subs	r0, #84	; 0x54
    34c0:	d00d      	beq.n	34de <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    34c2:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    34c6:	3855      	subs	r0, #85	; 0x55
    34c8:	d009      	beq.n	34de <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    34ca:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    34ce:	38aa      	subs	r0, #170	; 0xaa
    34d0:	d005      	beq.n	34de <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    34d2:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    34d6:	38aa      	subs	r0, #170	; 0xaa
    34d8:	d001      	beq.n	34de <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    34da:	2001      	movs	r0, #1
    34dc:	e000      	b.n	34e0 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    34de:	2000      	movs	r0, #0
    34e0:	2200      	movs	r2, #0
    34e2:	4613      	mov	r3, r2
    34e4:	ea4f 0402 	mov.w	r4, r2
    34e8:	ea82 0701 	eor.w	r7, r2, r1
    34ec:	43ff      	mvns	r7, r7
    34ee:	431f      	orrs	r7, r3
    34f0:	1c7f      	adds	r7, r7, #1
    34f2:	d00f      	beq.n	3514 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    34f4:	f006 0701 	and.w	r7, r6, #1
    34f8:	0852      	lsrs	r2, r2, #1
    34fa:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    34fe:	f005 0701 	and.w	r7, r5, #1
    3502:	085b      	lsrs	r3, r3, #1
    3504:	0876      	lsrs	r6, r6, #1
    3506:	086d      	lsrs	r5, r5, #1
    3508:	1c64      	adds	r4, r4, #1
    350a:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    350e:	2c16      	cmp	r4, #22
    3510:	d3ea      	bcc.n	34e8 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    3512:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3514:	2000      	movs	r0, #0
    3516:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003518 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    3518:	b570      	push	{r4, r5, r6, lr}
    351a:	4d0c      	ldr	r5, [pc, #48]	; (354c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x34>)
    351c:	f1a5 0408 	sub.w	r4, r5, #8
    3520:	2108      	movs	r1, #8
    3522:	480a      	ldr	r0, [pc, #40]	; (354c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x34>)
    3524:	f7fd fea6 	bl	1274 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    3528:	6828      	ldr	r0, [r5, #0]
    352a:	b910      	cbnz	r0, 3532 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    352c:	6868      	ldr	r0, [r5, #4]
    352e:	2800      	cmp	r0, #0
    3530:	d0f6      	beq.n	3520 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x8>
    3532:	f000 f813 	bl	355c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    3536:	6020      	str	r0, [r4, #0]
    3538:	f000 f810 	bl	355c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    353c:	6060      	str	r0, [r4, #4]
    353e:	6821      	ldr	r1, [r4, #0]
    3540:	2900      	cmp	r1, #0
    3542:	d101      	bne.n	3548 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x30>
    3544:	2800      	cmp	r0, #0
    3546:	d0f4      	beq.n	3532 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    3548:	bd70      	pop	{r4, r5, r6, pc}
    354a:	0000      	.short	0x0000
    354c:	200000d8 	.word	0x200000d8

00003550 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>:
    3550:	4801      	ldr	r0, [pc, #4]	; (3558 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ+0x8>)
    3552:	f000 b809 	b.w	3568 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    3556:	0000      	.short	0x0000
    3558:	200000d0 	.word	0x200000d0

0000355c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    355c:	4801      	ldr	r0, [pc, #4]	; (3564 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    355e:	f000 b803 	b.w	3568 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    3562:	0000      	.short	0x0000
    3564:	200000d8 	.word	0x200000d8
    3568:	b510      	push	{r4, lr}
    356a:	e9d0 2100 	ldrd	r2, r1, [r0]
    356e:	4b09      	ldr	r3, [pc, #36]	; (3594 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    3570:	4c09      	ldr	r4, [pc, #36]	; (3598 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    3572:	4353      	muls	r3, r2
    3574:	4354      	muls	r4, r2
    3576:	4051      	eors	r1, r2
    3578:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    357c:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    3580:	ea4f 41f1 	mov.w	r1, r1, ror #19
    3584:	e9c0 2100 	strd	r2, r1, [r0]
    3588:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    358c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3590:	4618      	mov	r0, r3
    3592:	bd10      	pop	{r4, pc}
    3594:	c6ef3760 	.word	0xc6ef3760
    3598:	9e3779bb 	.word	0x9e3779bb

0000359c <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>:
    359c:	b570      	push	{r4, r5, r6, lr}
    359e:	6844      	ldr	r4, [r0, #4]
    35a0:	1d09      	adds	r1, r1, #4
    35a2:	2500      	movs	r5, #0
    35a4:	f894 008c 	ldrb.w	r0, [r4, #140]	; 0x8c
    35a8:	3480      	adds	r4, #128	; 0x80
    35aa:	07c0      	lsls	r0, r0, #31
    35ac:	d001      	beq.n	35b2 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x16>
    35ae:	2001      	movs	r0, #1
    35b0:	bd70      	pop	{r4, r5, r6, pc}
    35b2:	6848      	ldr	r0, [r1, #4]
    35b4:	6809      	ldr	r1, [r1, #0]
    35b6:	4b0c      	ldr	r3, [pc, #48]	; (35e8 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x4c>)
    35b8:	f641 0207 	movw	r2, #6151	; 0x1807
    35bc:	4019      	ands	r1, r3
    35be:	66e1      	str	r1, [r4, #108]	; 0x6c
    35c0:	4010      	ands	r0, r2
    35c2:	6720      	str	r0, [r4, #112]	; 0x70
    35c4:	211b      	movs	r1, #27
    35c6:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    35ca:	f00b f977 	bl	e8bc <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY+0x22>
    35ce:	f8a4 5058 	strh.w	r5, [r4, #88]	; 0x58
    35d2:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    35d6:	1c40      	adds	r0, r0, #1
    35d8:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    35dc:	68e0      	ldr	r0, [r4, #12]
    35de:	f040 0001 	orr.w	r0, r0, #1
    35e2:	60e0      	str	r0, [r4, #12]
    35e4:	2000      	movs	r0, #0
    35e6:	bd70      	pop	{r4, r5, r6, pc}
    35e8:	f704492f 	.word	0xf704492f

000035ec <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>:
    35ec:	b510      	push	{r4, lr}
    35ee:	1d04      	adds	r4, r0, #4
    35f0:	f004 f9ec 	bl	79cc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    35f4:	4b03      	ldr	r3, [pc, #12]	; (3604 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY+0x18>)
    35f6:	f641 0207 	movw	r2, #6151	; 0x1807
    35fa:	4018      	ands	r0, r3
    35fc:	4011      	ands	r1, r2
    35fe:	6020      	str	r0, [r4, #0]
    3600:	6061      	str	r1, [r4, #4]
    3602:	bd10      	pop	{r4, pc}
    3604:	f704492f 	.word	0xf704492f

00003608 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>:
    3608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    360c:	7803      	ldrb	r3, [r0, #0]
    360e:	6840      	ldr	r0, [r0, #4]
    3610:	1d0f      	adds	r7, r1, #4
    3612:	f100 0580 	add.w	r5, r0, #128	; 0x80
    3616:	f500 74a5 	add.w	r4, r0, #330	; 0x14a
    361a:	4606      	mov	r6, r0
    361c:	f04f 0800 	mov.w	r8, #0
    3620:	7f6a      	ldrb	r2, [r5, #29]
    3622:	2107      	movs	r1, #7
    3624:	4628      	mov	r0, r5
    3626:	f00a fbc4 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    362a:	b1e0      	cbz	r0, 3666 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x5e>
    362c:	6839      	ldr	r1, [r7, #0]
    362e:	4b18      	ldr	r3, [pc, #96]	; (3690 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x88>)
    3630:	6878      	ldr	r0, [r7, #4]
    3632:	4019      	ands	r1, r3
    3634:	f641 0207 	movw	r2, #6151	; 0x1807
    3638:	66e9      	str	r1, [r5, #108]	; 0x6c
    363a:	4010      	ands	r0, r2
    363c:	6728      	str	r0, [r5, #112]	; 0x70
    363e:	211b      	movs	r1, #27
    3640:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    3644:	f00b f93a 	bl	e8bc <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY+0x22>
    3648:	f885 8056 	strb.w	r8, [r5, #86]	; 0x56
    364c:	f885 801d 	strb.w	r8, [r5, #29]
    3650:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
    3654:	4640      	mov	r0, r8
    3656:	f88d 1000 	strb.w	r1, [sp]
    365a:	9900      	ldr	r1, [sp, #0]
    365c:	9100      	str	r1, [sp, #0]
    365e:	f89d 1000 	ldrb.w	r1, [sp]
    3662:	b991      	cbnz	r1, 368a <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x82>
    3664:	e002      	b.n	366c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x64>
    3666:	2001      	movs	r0, #1
    3668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    366c:	8831      	ldrh	r1, [r6, #0]
    366e:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    3672:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    3676:	6839      	ldr	r1, [r7, #0]
    3678:	66e1      	str	r1, [r4, #108]	; 0x6c
    367a:	6879      	ldr	r1, [r7, #4]
    367c:	6721      	str	r1, [r4, #112]	; 0x70
    367e:	2202      	movs	r2, #2
    3680:	4904      	ldr	r1, [pc, #16]	; (3694 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x8c>)
    3682:	f104 0060 	add.w	r0, r4, #96	; 0x60
    3686:	f00a febb 	bl	e400 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    368a:	2000      	movs	r0, #0
    368c:	e7ec      	b.n	3668 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x60>
    368e:	0000      	.short	0x0000
    3690:	f704492f 	.word	0xf704492f
    3694:	0000e929 	.word	0x0000e929

00003698 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>:
    3698:	b570      	push	{r4, r5, r6, lr}
    369a:	1d0d      	adds	r5, r1, #4
    369c:	6844      	ldr	r4, [r0, #4]
    369e:	f004 f995 	bl	79cc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    36a2:	f641 0207 	movw	r2, #6151	; 0x1807
    36a6:	4b05      	ldr	r3, [pc, #20]	; (36bc <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ+0x24>)
    36a8:	4011      	ands	r1, r2
    36aa:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
    36ae:	4018      	ands	r0, r3
    36b0:	4002      	ands	r2, r0
    36b2:	f362 0007 	bfi	r0, r2, #0, #8
    36b6:	6028      	str	r0, [r5, #0]
    36b8:	6069      	str	r1, [r5, #4]
    36ba:	bd70      	pop	{r4, r5, r6, pc}
    36bc:	f704492f 	.word	0xf704492f

000036c0 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q>:
    36c0:	6841      	ldr	r1, [r0, #4]
    36c2:	b082      	sub	sp, #8
    36c4:	f501 70a5 	add.w	r0, r1, #330	; 0x14a
    36c8:	f891 21b2 	ldrb.w	r2, [r1, #434]	; 0x1b2
    36cc:	f88d 2000 	strb.w	r2, [sp]
    36d0:	9a00      	ldr	r2, [sp, #0]
    36d2:	9200      	str	r2, [sp, #0]
    36d4:	f89d 2000 	ldrb.w	r2, [sp]
    36d8:	2a00      	cmp	r2, #0
    36da:	d10b      	bne.n	36f4 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q+0x34>
    36dc:	8809      	ldrh	r1, [r1, #0]
    36de:	f8a0 106a 	strh.w	r1, [r0, #106]	; 0x6a
    36e2:	211a      	movs	r1, #26
    36e4:	f880 1069 	strb.w	r1, [r0, #105]	; 0x69
    36e8:	2202      	movs	r2, #2
    36ea:	4903      	ldr	r1, [pc, #12]	; (36f8 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q+0x38>)
    36ec:	3060      	adds	r0, #96	; 0x60
    36ee:	b002      	add	sp, #8
    36f0:	f00a be86 	b.w	e400 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    36f4:	b002      	add	sp, #8
    36f6:	4770      	bx	lr
    36f8:	0000e929 	.word	0x0000e929

000036fc <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>:
    36fc:	b570      	push	{r4, r5, r6, lr}
    36fe:	6844      	ldr	r4, [r0, #4]
    3700:	460d      	mov	r5, r1
    3702:	7803      	ldrb	r3, [r0, #0]
    3704:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    3708:	3480      	adds	r4, #128	; 0x80
    370a:	2600      	movs	r6, #0
    370c:	2108      	movs	r1, #8
    370e:	4620      	mov	r0, r4
    3710:	f00a fb4f 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    3714:	b920      	cbnz	r0, 3720 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x24>
    3716:	7b20      	ldrb	r0, [r4, #12]
    3718:	0780      	lsls	r0, r0, #30
    371a:	d501      	bpl.n	3720 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x24>
    371c:	2001      	movs	r0, #1
    371e:	bd70      	pop	{r4, r5, r6, pc}
    3720:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    3724:	0780      	lsls	r0, r0, #30
    3726:	d419      	bmi.n	375c <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x60>
    3728:	4628      	mov	r0, r5
    372a:	f00a fdfc 	bl	e326 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>
    372e:	f884 0067 	strb.w	r0, [r4, #103]	; 0x67
    3732:	f835 0f05 	ldrh.w	r0, [r5, #5]!
    3736:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    373a:	8868      	ldrh	r0, [r5, #2]
    373c:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    3740:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    3744:	f040 0002 	orr.w	r0, r0, #2
    3748:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    374c:	07c0      	lsls	r0, r0, #31
    374e:	d009      	beq.n	3764 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x68>
    3750:	2202      	movs	r2, #2
    3752:	4911      	ldr	r1, [pc, #68]	; (3798 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x9c>)
    3754:	f104 005e 	add.w	r0, r4, #94	; 0x5e
    3758:	f00a fe66 	bl	e428 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    375c:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    3760:	07c0      	lsls	r0, r0, #31
    3762:	d110      	bne.n	3786 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x8a>
    3764:	68e0      	ldr	r0, [r4, #12]
    3766:	0781      	lsls	r1, r0, #30
    3768:	d503      	bpl.n	3772 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x76>
    376a:	214f      	movs	r1, #79	; 0x4f
    376c:	2040      	movs	r0, #64	; 0x40
    376e:	f7fd fcdd 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3772:	f040 0002 	orr.w	r0, r0, #2
    3776:	60e0      	str	r0, [r4, #12]
    3778:	f894 005a 	ldrb.w	r0, [r4, #90]	; 0x5a
    377c:	1c40      	adds	r0, r0, #1
    377e:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
    3782:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    3786:	7f60      	ldrb	r0, [r4, #29]
    3788:	2801      	cmp	r0, #1
    378a:	d102      	bne.n	3792 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x96>
    378c:	7766      	strb	r6, [r4, #29]
    378e:	f884 6056 	strb.w	r6, [r4, #86]	; 0x56
    3792:	2000      	movs	r0, #0
    3794:	bd70      	pop	{r4, r5, r6, pc}
    3796:	0000      	.short	0x0000
    3798:	0000e9d7 	.word	0x0000e9d7

0000379c <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>:
    379c:	4a04      	ldr	r2, [pc, #16]	; (37b0 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ+0x14>)
    379e:	6892      	ldr	r2, [r2, #8]
    37a0:	f5c2 5380 	rsb	r3, r2, #4096	; 0x1000
    37a4:	434b      	muls	r3, r1
    37a6:	4342      	muls	r2, r0
    37a8:	eb03 3022 	add.w	r0, r3, r2, asr #12
    37ac:	4770      	bx	lr
    37ae:	0000      	.short	0x0000
    37b0:	200000e0 	.word	0x200000e0

000037b4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>:
    37b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37b6:	6844      	ldr	r4, [r0, #4]
    37b8:	4606      	mov	r6, r0
    37ba:	f104 0580 	add.w	r5, r4, #128	; 0x80
    37be:	f000 f87b 	bl	38b8 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x104>
    37c2:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    37c6:	2901      	cmp	r1, #1
    37c8:	d11a      	bne.n	3800 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    37ca:	2800      	cmp	r0, #0
    37cc:	d018      	beq.n	3800 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    37ce:	6870      	ldr	r0, [r6, #4]
    37d0:	f890 1152 	ldrb.w	r1, [r0, #338]	; 0x152
    37d4:	f88d 1000 	strb.w	r1, [sp]
    37d8:	9900      	ldr	r1, [sp, #0]
    37da:	9100      	str	r1, [sp, #0]
    37dc:	f89d 1000 	ldrb.w	r1, [sp]
    37e0:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
    37e4:	2900      	cmp	r1, #0
    37e6:	d10b      	bne.n	3800 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    37e8:	8821      	ldrh	r1, [r4, #0]
    37ea:	8141      	strh	r1, [r0, #10]
    37ec:	7e69      	ldrb	r1, [r5, #25]
    37ee:	7301      	strb	r1, [r0, #12]
    37f0:	7ea9      	ldrb	r1, [r5, #26]
    37f2:	7341      	strb	r1, [r0, #13]
    37f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    37f8:	2202      	movs	r2, #2
    37fa:	4902      	ldr	r1, [pc, #8]	; (3804 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>)
    37fc:	f00a be00 	b.w	e400 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3802:	0000      	.short	0x0000
    3804:	0000ea5f 	.word	0x0000ea5f
    3808:	f500 6100 	add.w	r1, r0, #2048	; 0x800
    380c:	4a0d      	ldr	r2, [pc, #52]	; (3844 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x90>)
    380e:	b510      	push	{r4, lr}
    3810:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    3814:	1309      	asrs	r1, r1, #12
    3816:	1300      	asrs	r0, r0, #12
    3818:	b24b      	sxtb	r3, r1
    381a:	f992 4000 	ldrsb.w	r4, [r2]
    381e:	4240      	negs	r0, r0
    3820:	2100      	movs	r1, #0
    3822:	b240      	sxtb	r0, r0
    3824:	42a3      	cmp	r3, r4
    3826:	da02      	bge.n	382e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x7a>
    3828:	f992 1002 	ldrsb.w	r1, [r2, #2]
    382c:	e005      	b.n	383a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x86>
    382e:	f992 4001 	ldrsb.w	r4, [r2, #1]
    3832:	42a3      	cmp	r3, r4
    3834:	dd04      	ble.n	3840 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x8c>
    3836:	f992 1003 	ldrsb.w	r1, [r2, #3]
    383a:	4408      	add	r0, r1
    383c:	f300 0107 	ssat	r1, #8, r0
    3840:	4608      	mov	r0, r1
    3842:	bd10      	pop	{r4, pc}
    3844:	200000e0 	.word	0x200000e0
    3848:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    384c:	f5a0 75fa 	sub.w	r5, r0, #500	; 0x1f4
    3850:	f5a0 74ba 	sub.w	r4, r0, #372	; 0x174
    3854:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    3858:	f00b ffd9 	bl	f80e <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    385c:	4606      	mov	r6, r0
    385e:	68a0      	ldr	r0, [r4, #8]
    3860:	f7ff ffd2 	bl	3808 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    3864:	0007      	movs	r7, r0
    3866:	d021      	beq.n	38ac <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
    3868:	4620      	mov	r0, r4
    386a:	f00b f900 	bl	ea6e <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x70>
    386e:	2800      	cmp	r0, #0
    3870:	d01c      	beq.n	38ac <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
    3872:	8828      	ldrh	r0, [r5, #0]
    3874:	4669      	mov	r1, sp
    3876:	f00a fa85 	bl	dd84 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    387a:	b118      	cbz	r0, 3884 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xd0>
    387c:	2185      	movs	r1, #133	; 0x85
    387e:	207a      	movs	r0, #122	; 0x7a
    3880:	f7fd fc54 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3884:	1c76      	adds	r6, r6, #1
    3886:	b2f1      	uxtb	r1, r6
    3888:	2302      	movs	r3, #2
    388a:	463a      	mov	r2, r7
    388c:	4668      	mov	r0, sp
    388e:	f00b ffdd 	bl	f84c <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>
    3892:	2800      	cmp	r0, #0
    3894:	d10a      	bne.n	38ac <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xf8>
    3896:	4806      	ldr	r0, [pc, #24]	; (38b0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfc>)
    3898:	4906      	ldr	r1, [pc, #24]	; (38b4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x100>)
    389a:	7900      	ldrb	r0, [r0, #4]
    389c:	fba0 6501 	umull	r6, r5, r0, r1
    38a0:	f00d f86c 	bl	1097c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    38a4:	1980      	adds	r0, r0, r6
    38a6:	4169      	adcs	r1, r5
    38a8:	e9c4 0100 	strd	r0, r1, [r4]
    38ac:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    38b0:	200000e0 	.word	0x200000e0
    38b4:	000f4240 	.word	0x000f4240
    38b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38bc:	4607      	mov	r7, r0
    38be:	f7ff fa65 	bl	2d8c <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    38c2:	687c      	ldr	r4, [r7, #4]
    38c4:	4605      	mov	r5, r0
    38c6:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    38ca:	3480      	adds	r4, #128	; 0x80
    38cc:	287f      	cmp	r0, #127	; 0x7f
    38ce:	d042      	beq.n	3956 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a2>
    38d0:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    38d4:	687e      	ldr	r6, [r7, #4]
    38d6:	76a0      	strb	r0, [r4, #26]
    38d8:	4629      	mov	r1, r5
    38da:	68a0      	ldr	r0, [r4, #8]
    38dc:	f7ff ff5e 	bl	379c <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>
    38e0:	60a0      	str	r0, [r4, #8]
    38e2:	481e      	ldr	r0, [pc, #120]	; (395c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a8>)
    38e4:	7940      	ldrb	r0, [r0, #5]
    38e6:	b1c0      	cbz	r0, 391a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
    38e8:	6878      	ldr	r0, [r7, #4]
    38ea:	f100 0880 	add.w	r8, r0, #128	; 0x80
    38ee:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
    38f2:	f7ff ff89 	bl	3808 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    38f6:	b180      	cbz	r0, 391a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
    38f8:	4640      	mov	r0, r8
    38fa:	f00b f8b8 	bl	ea6e <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x70>
    38fe:	b160      	cbz	r0, 391a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x166>
    3900:	6878      	ldr	r0, [r7, #4]
    3902:	f500 78a5 	add.w	r8, r0, #330	; 0x14a
    3906:	4607      	mov	r7, r0
    3908:	f004 fc8a 	bl	8220 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    390c:	f887 006b 	strb.w	r0, [r7, #107]	; 0x6b
    3910:	4913      	ldr	r1, [pc, #76]	; (3960 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1ac>)
    3912:	f108 00aa 	add.w	r0, r8, #170	; 0xaa
    3916:	f00a fd70 	bl	e3fa <sym_OHZGE3PRU72NL3TJSLCEUVROHETUDPWEUAQ7GMA>
    391a:	f994 001b 	ldrsb.w	r0, [r4, #27]
    391e:	2100      	movs	r1, #0
    3920:	1a28      	subs	r0, r5, r0
    3922:	d500      	bpl.n	3926 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x172>
    3924:	4240      	negs	r0, r0
    3926:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
    392a:	4282      	cmp	r2, r0
    392c:	dc10      	bgt.n	3950 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
    392e:	2aff      	cmp	r2, #255	; 0xff
    3930:	d00e      	beq.n	3950 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
    3932:	7f20      	ldrb	r0, [r4, #28]
    3934:	1c40      	adds	r0, r0, #1
    3936:	b2c0      	uxtb	r0, r0
    3938:	7720      	strb	r0, [r4, #28]
    393a:	f896 202a 	ldrb.w	r2, [r6, #42]	; 0x2a
    393e:	4290      	cmp	r0, r2
    3940:	d802      	bhi.n	3948 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x194>
    3942:	7ee0      	ldrb	r0, [r4, #27]
    3944:	287f      	cmp	r0, #127	; 0x7f
    3946:	d103      	bne.n	3950 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19c>
    3948:	2000      	movs	r0, #0
    394a:	76e5      	strb	r5, [r4, #27]
    394c:	7720      	strb	r0, [r4, #28]
    394e:	2101      	movs	r1, #1
    3950:	4608      	mov	r0, r1
    3952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3956:	2000      	movs	r0, #0
    3958:	e7fb      	b.n	3952 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19e>
    395a:	0000      	.short	0x0000
    395c:	200000e0 	.word	0x200000e0
    3960:	00003849 	.word	0x00003849

00003964 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>:
    3964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3966:	f00b f89e 	bl	eaa6 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    396a:	4604      	mov	r4, r0
    396c:	460d      	mov	r5, r1
    396e:	466a      	mov	r2, sp
    3970:	f000 f862 	bl	3a38 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    3974:	b108      	cbz	r0, 397a <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x16>
    3976:	2001      	movs	r0, #1
    3978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    397a:	480f      	ldr	r0, [pc, #60]	; (39b8 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x54>)
    397c:	7803      	ldrb	r3, [r0, #0]
    397e:	7841      	ldrb	r1, [r0, #1]
    3980:	428b      	cmp	r3, r1
    3982:	d101      	bne.n	3988 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x24>
    3984:	2000      	movs	r0, #0
    3986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3988:	461a      	mov	r2, r3
    398a:	6841      	ldr	r1, [r0, #4]
    398c:	e008      	b.n	39a0 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x3c>
    398e:	bf00      	nop
    3990:	eb01 06c2 	add.w	r6, r1, r2, lsl #3
    3994:	1e52      	subs	r2, r2, #1
    3996:	e956 7c02 	ldrd	r7, ip, [r6, #-8]
    399a:	e9c6 7c00 	strd	r7, ip, [r6]
    399e:	b2d2      	uxtb	r2, r2
    39a0:	f89d 6000 	ldrb.w	r6, [sp]
    39a4:	42b2      	cmp	r2, r6
    39a6:	d8f3      	bhi.n	3990 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x2c>
    39a8:	b2f2      	uxtb	r2, r6
    39aa:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    39ae:	1c5b      	adds	r3, r3, #1
    39b0:	e9c1 4500 	strd	r4, r5, [r1]
    39b4:	7003      	strb	r3, [r0, #0]
    39b6:	e7de      	b.n	3976 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI+0x12>
    39b8:	200000ec 	.word	0x200000ec

000039bc <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>:
    39bc:	b510      	push	{r4, lr}
    39be:	0742      	lsls	r2, r0, #29
    39c0:	d003      	beq.n	39ca <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0xe>
    39c2:	2163      	movs	r1, #99	; 0x63
    39c4:	2048      	movs	r0, #72	; 0x48
    39c6:	f7fd fbb1 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    39ca:	b120      	cbz	r0, 39d6 <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x1a>
    39cc:	4a03      	ldr	r2, [pc, #12]	; (39dc <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY+0x20>)
    39ce:	7051      	strb	r1, [r2, #1]
    39d0:	6050      	str	r0, [r2, #4]
    39d2:	2000      	movs	r0, #0
    39d4:	7010      	strb	r0, [r2, #0]
    39d6:	00c8      	lsls	r0, r1, #3
    39d8:	bd10      	pop	{r4, pc}
    39da:	0000      	.short	0x0000
    39dc:	200000ec 	.word	0x200000ec

000039e0 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>:
    39e0:	b538      	push	{r3, r4, r5, lr}
    39e2:	f00b f860 	bl	eaa6 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    39e6:	466a      	mov	r2, sp
    39e8:	f000 f826 	bl	3a38 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    39ec:	2800      	cmp	r0, #0
    39ee:	d014      	beq.n	3a1a <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3a>
    39f0:	4a0a      	ldr	r2, [pc, #40]	; (3a1c <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x3c>)
    39f2:	7810      	ldrb	r0, [r2, #0]
    39f4:	1e40      	subs	r0, r0, #1
    39f6:	b2c1      	uxtb	r1, r0
    39f8:	7011      	strb	r1, [r2, #0]
    39fa:	f89d 0000 	ldrb.w	r0, [sp]
    39fe:	6852      	ldr	r2, [r2, #4]
    3a00:	e008      	b.n	3a14 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x34>
    3a02:	bf00      	nop
    3a04:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
    3a08:	1c40      	adds	r0, r0, #1
    3a0a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
    3a0e:	e9c3 4500 	strd	r4, r5, [r3]
    3a12:	b2c0      	uxtb	r0, r0
    3a14:	4288      	cmp	r0, r1
    3a16:	d3f5      	bcc.n	3a04 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ+0x24>
    3a18:	2001      	movs	r0, #1
    3a1a:	bd38      	pop	{r3, r4, r5, pc}
    3a1c:	200000ec 	.word	0x200000ec

00003a20 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>:
    3a20:	4901      	ldr	r1, [pc, #4]	; (3a28 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ+0x8>)
    3a22:	2000      	movs	r0, #0
    3a24:	7008      	strb	r0, [r1, #0]
    3a26:	4770      	bx	lr
    3a28:	200000ec 	.word	0x200000ec

00003a2c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>:
    3a2c:	4801      	ldr	r0, [pc, #4]	; (3a34 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8>)
    3a2e:	7840      	ldrb	r0, [r0, #1]
    3a30:	4770      	bx	lr
    3a32:	0000      	.short	0x0000
    3a34:	200000ec 	.word	0x200000ec
    3a38:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a3a:	4d20      	ldr	r5, [pc, #128]	; (3abc <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x90>)
    3a3c:	2300      	movs	r3, #0
    3a3e:	7013      	strb	r3, [r2, #0]
    3a40:	782b      	ldrb	r3, [r5, #0]
    3a42:	b323      	cbz	r3, 3a8e <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x62>
    3a44:	2400      	movs	r4, #0
    3a46:	1e5b      	subs	r3, r3, #1
    3a48:	b2db      	uxtb	r3, r3
    3a4a:	f8d5 c004 	ldr.w	ip, [r5, #4]
    3a4e:	e00b      	b.n	3a68 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    3a50:	18e5      	adds	r5, r4, r3
    3a52:	086d      	lsrs	r5, r5, #1
    3a54:	eb0c 06c5 	add.w	r6, ip, r5, lsl #3
    3a58:	e9d6 7600 	ldrd	r7, r6, [r6]
    3a5c:	1a3f      	subs	r7, r7, r0
    3a5e:	418e      	sbcs	r6, r1
    3a60:	d201      	bcs.n	3a66 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3a>
    3a62:	462c      	mov	r4, r5
    3a64:	e000      	b.n	3a68 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x3c>
    3a66:	462b      	mov	r3, r5
    3a68:	1b1d      	subs	r5, r3, r4
    3a6a:	2d01      	cmp	r5, #1
    3a6c:	dcf0      	bgt.n	3a50 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x24>
    3a6e:	eb0c 06c4 	add.w	r6, ip, r4, lsl #3
    3a72:	e9d6 5600 	ldrd	r5, r6, [r6]
    3a76:	ea80 0705 	eor.w	r7, r0, r5
    3a7a:	ea81 0e06 	eor.w	lr, r1, r6
    3a7e:	ea57 070e 	orrs.w	r7, r7, lr
    3a82:	d005      	beq.n	3a90 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x64>
    3a84:	1b45      	subs	r5, r0, r5
    3a86:	eb71 0506 	sbcs.w	r5, r1, r6
    3a8a:	d203      	bcs.n	3a94 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x68>
    3a8c:	7014      	strb	r4, [r2, #0]
    3a8e:	e010      	b.n	3ab2 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x86>
    3a90:	7014      	strb	r4, [r2, #0]
    3a92:	e011      	b.n	3ab8 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8c>
    3a94:	eb0c 05c3 	add.w	r5, ip, r3, lsl #3
    3a98:	e9d5 4500 	ldrd	r4, r5, [r5]
    3a9c:	ea80 0604 	eor.w	r6, r0, r4
    3aa0:	ea81 0705 	eor.w	r7, r1, r5
    3aa4:	433e      	orrs	r6, r7
    3aa6:	d006      	beq.n	3ab6 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x8a>
    3aa8:	1b00      	subs	r0, r0, r4
    3aaa:	41a9      	sbcs	r1, r5
    3aac:	d300      	bcc.n	3ab0 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0x84>
    3aae:	1c5b      	adds	r3, r3, #1
    3ab0:	7013      	strb	r3, [r2, #0]
    3ab2:	2000      	movs	r0, #0
    3ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ab6:	7013      	strb	r3, [r2, #0]
    3ab8:	2001      	movs	r0, #1
    3aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3abc:	200000ec 	.word	0x200000ec

00003ac0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>:
    3ac0:	b510      	push	{r4, lr}
    3ac2:	4604      	mov	r4, r0
    3ac4:	7c00      	ldrb	r0, [r0, #16]
    3ac6:	b3b8      	cbz	r0, 3b38 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x78>
    3ac8:	2802      	cmp	r0, #2
    3aca:	d035      	beq.n	3b38 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x78>
    3acc:	f05f 0001 	movs.w	r0, #1
    3ad0:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    3ad4:	b390      	cbz	r0, 3b3c <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x7c>
    3ad6:	7de0      	ldrb	r0, [r4, #23]
    3ad8:	b388      	cbz	r0, 3b3e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x7e>
    3ada:	f8d4 0011 	ldr.w	r0, [r4, #17]
    3ade:	f8c4 0051 	str.w	r0, [r4, #81]	; 0x51
    3ae2:	f8b4 0015 	ldrh.w	r0, [r4, #21]
    3ae6:	f8a4 0055 	strh.w	r0, [r4, #85]	; 0x55
    3aea:	7c20      	ldrb	r0, [r4, #16]
    3aec:	f00b f81a 	bl	eb24 <sym_EQ3I7ZZBTEWAJZC2TH7LIOBRZMKEZRCLT4UWSSQ+0x46>
    3af0:	7620      	strb	r0, [r4, #24]
    3af2:	2108      	movs	r1, #8
    3af4:	7661      	strb	r1, [r4, #25]
    3af6:	b130      	cbz	r0, 3b06 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x46>
    3af8:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    3afc:	f104 0158 	add.w	r1, r4, #88	; 0x58
    3b00:	f00a f936 	bl	dd70 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    3b04:	7660      	strb	r0, [r4, #25]
    3b06:	f7ff f823 	bl	2b50 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    3b0a:	4915      	ldr	r1, [pc, #84]	; (3b60 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0xa0>)
    3b0c:	fba0 2301 	umull	r2, r3, r0, r1
    3b10:	f104 0048 	add.w	r0, r4, #72	; 0x48
    3b14:	f00b f95e 	bl	edd4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xfa>
    3b18:	2100      	movs	r1, #0
    3b1a:	4620      	mov	r0, r4
    3b1c:	f00b f8f1 	bl	ed02 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    3b20:	2000      	movs	r0, #0
    3b22:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    3b26:	78a0      	ldrb	r0, [r4, #2]
    3b28:	0740      	lsls	r0, r0, #29
    3b2a:	d518      	bpl.n	3b5e <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x9e>
    3b2c:	4620      	mov	r0, r4
    3b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3b32:	2100      	movs	r1, #0
    3b34:	f000 be04 	b.w	4740 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
    3b38:	2000      	movs	r0, #0
    3b3a:	e7c9      	b.n	3ad0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x10>
    3b3c:	e000      	b.n	3b40 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x80>
    3b3e:	e009      	b.n	3b54 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x94>
    3b40:	f104 0151 	add.w	r1, r4, #81	; 0x51
    3b44:	2000      	movs	r0, #0
    3b46:	f7fe fa2f 	bl	1fa8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    3b4a:	2800      	cmp	r0, #0
    3b4c:	d1cd      	bne.n	3aea <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x2a>
    3b4e:	f240 41ba 	movw	r1, #1210	; 0x4ba
    3b52:	e001      	b.n	3b58 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ+0x98>
    3b54:	f240 41be 	movw	r1, #1214	; 0x4be
    3b58:	202d      	movs	r0, #45	; 0x2d
    3b5a:	f7fd fae7 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3b5e:	bd10      	pop	{r4, pc}
    3b60:	000f4240 	.word	0x000f4240

00003b64 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>:
    3b64:	b530      	push	{r4, r5, lr}
    3b66:	460c      	mov	r4, r1
    3b68:	b08d      	sub	sp, #52	; 0x34
    3b6a:	4605      	mov	r5, r0
    3b6c:	4601      	mov	r1, r0
    3b6e:	2224      	movs	r2, #36	; 0x24
    3b70:	a802      	add	r0, sp, #8
    3b72:	f00d f841 	bl	10bf8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3b76:	a80b      	add	r0, sp, #44	; 0x2c
    3b78:	f00b f989 	bl	ee8e <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>
    3b7c:	7aa0      	ldrb	r0, [r4, #10]
    3b7e:	f88d 0018 	strb.w	r0, [sp, #24]
    3b82:	7820      	ldrb	r0, [r4, #0]
    3b84:	f88d 0008 	strb.w	r0, [sp, #8]
    3b88:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    3b8c:	f8ad 0000 	strh.w	r0, [sp]
    3b90:	f89d 0000 	ldrb.w	r0, [sp]
    3b94:	f000 0101 	and.w	r1, r0, #1
    3b98:	f3c0 0240 	ubfx	r2, r0, #1, #1
    3b9c:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    3ba0:	f3c0 0280 	ubfx	r2, r0, #2, #1
    3ba4:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
    3ba8:	f3c0 02c0 	ubfx	r2, r0, #3, #1
    3bac:	ea41 01c2 	orr.w	r1, r1, r2, lsl #3
    3bb0:	f3c0 1200 	ubfx	r2, r0, #4, #1
    3bb4:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    3bb8:	f3c0 1240 	ubfx	r2, r0, #5, #1
    3bbc:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
    3bc0:	f3c0 1080 	ubfx	r0, r0, #6, #1
    3bc4:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    3bc8:	f8ad 000a 	strh.w	r0, [sp, #10]
    3bcc:	7d20      	ldrb	r0, [r4, #20]
    3bce:	2801      	cmp	r0, #1
    3bd0:	d006      	beq.n	3be0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    3bd2:	2802      	cmp	r0, #2
    3bd4:	d004      	beq.n	3be0 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x7c>
    3bd6:	f240 21a6 	movw	r1, #678	; 0x2a6
    3bda:	2006      	movs	r0, #6
    3bdc:	f7fd faa6 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3be0:	f88d 000c 	strb.w	r0, [sp, #12]
    3be4:	7a61      	ldrb	r1, [r4, #9]
    3be6:	a80b      	add	r0, sp, #44	; 0x2c
    3be8:	f00b f938 	bl	ee5c <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>
    3bec:	7d20      	ldrb	r0, [r4, #20]
    3bee:	2101      	movs	r1, #1
    3bf0:	2802      	cmp	r0, #2
    3bf2:	d102      	bne.n	3bfa <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x96>
    3bf4:	7d60      	ldrb	r0, [r4, #21]
    3bf6:	1c40      	adds	r0, r0, #1
    3bf8:	b2c1      	uxtb	r1, r0
    3bfa:	7ea0      	ldrb	r0, [r4, #26]
    3bfc:	1c40      	adds	r0, r0, #1
    3bfe:	b2c2      	uxtb	r2, r0
    3c00:	a80b      	add	r0, sp, #44	; 0x2c
    3c02:	f00b f8f2 	bl	edea <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>
    3c06:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    3c0a:	0700      	lsls	r0, r0, #28
    3c0c:	d501      	bpl.n	3c12 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xae>
    3c0e:	2000      	movs	r0, #0
    3c10:	e020      	b.n	3c54 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf0>
    3c12:	a80b      	add	r0, sp, #44	; 0x2c
    3c14:	f00b f8fb 	bl	ee0e <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    3c18:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    3c1c:	2228      	movs	r2, #40	; 0x28
    3c1e:	f000 fe33 	bl	4888 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>
    3c22:	f240 2171 	movw	r1, #625	; 0x271
    3c26:	f200 20dd 	addw	r0, r0, #733	; 0x2dd
    3c2a:	fbb0 f0f1 	udiv	r0, r0, r1
    3c2e:	4348      	muls	r0, r1
    3c30:	f8d4 1002 	ldr.w	r1, [r4, #2]
    3c34:	f240 2371 	movw	r3, #625	; 0x271
    3c38:	0a0a      	lsrs	r2, r1, #8
    3c3a:	f240 2171 	movw	r1, #625	; 0x271
    3c3e:	434a      	muls	r2, r1
    3c40:	f8d4 1005 	ldr.w	r1, [r4, #5]
    3c44:	0a09      	lsrs	r1, r1, #8
    3c46:	4359      	muls	r1, r3
    3c48:	4290      	cmp	r0, r2
    3c4a:	d801      	bhi.n	3c50 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xec>
    3c4c:	9204      	str	r2, [sp, #16]
    3c4e:	e004      	b.n	3c5a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    3c50:	4288      	cmp	r0, r1
    3c52:	d801      	bhi.n	3c58 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf4>
    3c54:	9004      	str	r0, [sp, #16]
    3c56:	e000      	b.n	3c5a <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0xf6>
    3c58:	9104      	str	r1, [sp, #16]
    3c5a:	7ca0      	ldrb	r0, [r4, #18]
    3c5c:	f88d 0017 	strb.w	r0, [sp, #23]
    3c60:	7e20      	ldrb	r0, [r4, #24]
    3c62:	2801      	cmp	r0, #1
    3c64:	d000      	beq.n	3c68 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x104>
    3c66:	2000      	movs	r0, #0
    3c68:	f88d 0014 	strb.w	r0, [sp, #20]
    3c6c:	6b68      	ldr	r0, [r5, #52]	; 0x34
    3c6e:	f009 fef7 	bl	da60 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>
    3c72:	6b68      	ldr	r0, [r5, #52]	; 0x34
    3c74:	f009 ff9c 	bl	dbb0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>
    3c78:	2224      	movs	r2, #36	; 0x24
    3c7a:	a902      	add	r1, sp, #8
    3c7c:	4628      	mov	r0, r5
    3c7e:	f00c ffbb 	bl	10bf8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3c82:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3c84:	62a8      	str	r0, [r5, #40]	; 0x28
    3c86:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
    3c8a:	85a8      	strh	r0, [r5, #44]	; 0x2c
    3c8c:	7ae0      	ldrb	r0, [r4, #11]
    3c8e:	b168      	cbz	r0, 3cac <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    3c90:	2802      	cmp	r0, #2
    3c92:	d00b      	beq.n	3cac <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x148>
    3c94:	f05f 0001 	movs.w	r0, #1
    3c98:	f885 0057 	strb.w	r0, [r5, #87]	; 0x57
    3c9c:	68e0      	ldr	r0, [r4, #12]
    3c9e:	65a8      	str	r0, [r5, #88]	; 0x58
    3ca0:	8a20      	ldrh	r0, [r4, #16]
    3ca2:	f8a5 005c 	strh.w	r0, [r5, #92]	; 0x5c
    3ca6:	b00d      	add	sp, #52	; 0x34
    3ca8:	2000      	movs	r0, #0
    3caa:	bd30      	pop	{r4, r5, pc}
    3cac:	2000      	movs	r0, #0
    3cae:	e7f3      	b.n	3c98 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA+0x134>

00003cb0 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>:
    3cb0:	4a0a      	ldr	r2, [pc, #40]	; (3cdc <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x2c>)
    3cb2:	b510      	push	{r4, lr}
    3cb4:	2100      	movs	r1, #0
    3cb6:	7011      	strb	r1, [r2, #0]
    3cb8:	4c09      	ldr	r4, [pc, #36]	; (3ce0 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x30>)
    3cba:	6060      	str	r0, [r4, #4]
    3cbc:	f000 f822 	bl	3d04 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
    3cc0:	b110      	cbz	r0, 3cc8 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x18>
    3cc2:	f240 3132 	movw	r1, #818	; 0x332
    3cc6:	e004      	b.n	3cd2 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x22>
    3cc8:	68a0      	ldr	r0, [r4, #8]
    3cca:	2800      	cmp	r0, #0
    3ccc:	d104      	bne.n	3cd8 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY+0x28>
    3cce:	f240 3135 	movw	r1, #821	; 0x335
    3cd2:	202d      	movs	r0, #45	; 0x2d
    3cd4:	f7fd fa2a 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3cd8:	bd10      	pop	{r4, pc}
    3cda:	0000      	.short	0x0000
    3cdc:	200010d8 	.word	0x200010d8
    3ce0:	200000f4 	.word	0x200000f4

00003ce4 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>:
    3ce4:	4902      	ldr	r1, [pc, #8]	; (3cf0 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0xc>)
    3ce6:	4801      	ldr	r0, [pc, #4]	; (3cec <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI+0x8>)
    3ce8:	6088      	str	r0, [r1, #8]
    3cea:	4770      	bx	lr
    3cec:	00004870 	.word	0x00004870
    3cf0:	200000f4 	.word	0x200000f4

00003cf4 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>:
    3cf4:	4902      	ldr	r1, [pc, #8]	; (3d00 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A+0xc>)
    3cf6:	6008      	str	r0, [r1, #0]
    3cf8:	6889      	ldr	r1, [r1, #8]
    3cfa:	6809      	ldr	r1, [r1, #0]
    3cfc:	4708      	bx	r1
    3cfe:	0000      	.short	0x0000
    3d00:	200000f4 	.word	0x200000f4

00003d04 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>:
    3d04:	4808      	ldr	r0, [pc, #32]	; (3d28 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    3d06:	b510      	push	{r4, lr}
    3d08:	7800      	ldrb	r0, [r0, #0]
    3d0a:	b110      	cbz	r0, 3d12 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xe>
    3d0c:	240c      	movs	r4, #12
    3d0e:	4620      	mov	r0, r4
    3d10:	bd10      	pop	{r4, pc}
    3d12:	2400      	movs	r4, #0
    3d14:	2218      	movs	r2, #24
    3d16:	4621      	mov	r1, r4
    3d18:	4803      	ldr	r0, [pc, #12]	; (3d28 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0x24>)
    3d1a:	f00c ffe7 	bl	10cec <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3d1e:	f004 f8d1 	bl	7ec4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3d22:	f003 fef5 	bl	7b10 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3d26:	e7f2      	b.n	3d0e <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ+0xa>
    3d28:	200010d8 	.word	0x200010d8

00003d2c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>:
    3d2c:	4904      	ldr	r1, [pc, #16]	; (3d40 <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0x14>)
    3d2e:	b510      	push	{r4, lr}
    3d30:	7809      	ldrb	r1, [r1, #0]
    3d32:	2901      	cmp	r1, #1
    3d34:	d101      	bne.n	3d3a <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I+0xe>
    3d36:	f000 fc43 	bl	45c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x520>
    3d3a:	2000      	movs	r0, #0
    3d3c:	bd10      	pop	{r4, pc}
    3d3e:	0000      	.short	0x0000
    3d40:	200010d8 	.word	0x200010d8

00003d44 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>:
    3d44:	4904      	ldr	r1, [pc, #16]	; (3d58 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x14>)
    3d46:	4803      	ldr	r0, [pc, #12]	; (3d54 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x10>)
    3d48:	6008      	str	r0, [r1, #0]
    3d4a:	4905      	ldr	r1, [pc, #20]	; (3d60 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x1c>)
    3d4c:	4803      	ldr	r0, [pc, #12]	; (3d5c <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY+0x18>)
    3d4e:	6008      	str	r0, [r1, #0]
    3d50:	4770      	bx	lr
    3d52:	0000      	.short	0x0000
    3d54:	0000460d 	.word	0x0000460d
    3d58:	20000100 	.word	0x20000100
    3d5c:	00004ba9 	.word	0x00004ba9
    3d60:	20000104 	.word	0x20000104

00003d64 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>:
    3d64:	b510      	push	{r4, lr}
    3d66:	4604      	mov	r4, r0
    3d68:	7880      	ldrb	r0, [r0, #2]
    3d6a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    3d6e:	b158      	cbz	r0, 3d88 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x24>
    3d70:	233c      	movs	r3, #60	; 0x3c
    3d72:	22ff      	movs	r2, #255	; 0xff
    3d74:	4620      	mov	r0, r4
    3d76:	69e1      	ldr	r1, [r4, #28]
    3d78:	f000 fa58 	bl	422c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x18c>
    3d7c:	2202      	movs	r2, #2
    3d7e:	4904      	ldr	r1, [pc, #16]	; (3d90 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x2c>)
    3d80:	f104 006a 	add.w	r0, r4, #106	; 0x6a
    3d84:	f00a fb3c 	bl	e400 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3d88:	2001      	movs	r0, #1
    3d8a:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    3d8e:	bd10      	pop	{r4, pc}
    3d90:	0000ed57 	.word	0x0000ed57
    3d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d98:	000f      	movs	r7, r1
    3d9a:	4604      	mov	r4, r0
    3d9c:	d023      	beq.n	3de6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x82>
    3d9e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    3da2:	4605      	mov	r5, r0
    3da4:	f00b f85c 	bl	ee60 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    3da8:	b9b0      	cbnz	r0, 3dd8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x74>
    3daa:	78a0      	ldrb	r0, [r4, #2]
    3dac:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    3db0:	b350      	cbz	r0, 3e08 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xa4>
    3db2:	4628      	mov	r0, r5
    3db4:	f00b f82b 	bl	ee0e <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    3db8:	4606      	mov	r6, r0
    3dba:	4628      	mov	r0, r5
    3dbc:	f00b f850 	bl	ee60 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    3dc0:	1a30      	subs	r0, r6, r0
    3dc2:	b2c0      	uxtb	r0, r0
    3dc4:	f00b f8a1 	bl	ef0a <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    3dc8:	4601      	mov	r1, r0
    3dca:	4835      	ldr	r0, [pc, #212]	; (3ea0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x13c>)
    3dcc:	6842      	ldr	r2, [r0, #4]
    3dce:	4411      	add	r1, r2
    3dd0:	6041      	str	r1, [r0, #4]
    3dd2:	4628      	mov	r0, r5
    3dd4:	f00b f862 	bl	ee9c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    3dd8:	4628      	mov	r0, r5
    3dda:	f00b f824 	bl	ee26 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    3dde:	4601      	mov	r1, r0
    3de0:	4620      	mov	r0, r4
    3de2:	f00a ffec 	bl	edbe <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xe4>
    3de6:	4d2f      	ldr	r5, [pc, #188]	; (3ea4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x140>)
    3de8:	f894 605e 	ldrb.w	r6, [r4, #94]	; 0x5e
    3dec:	2100      	movs	r1, #0
    3dee:	6868      	ldr	r0, [r5, #4]
    3df0:	8001      	strh	r1, [r0, #0]
    3df2:	f00a ff77 	bl	ece4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    3df6:	8860      	ldrh	r0, [r4, #2]
    3df8:	2813      	cmp	r0, #19
    3dfa:	d013      	beq.n	3e24 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xc0>
    3dfc:	dc09      	bgt.n	3e12 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xae>
    3dfe:	2810      	cmp	r0, #16
    3e00:	d036      	beq.n	3e70 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10c>
    3e02:	2812      	cmp	r0, #18
    3e04:	d109      	bne.n	3e1a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xb6>
    3e06:	e031      	b.n	3e6c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x108>
    3e08:	4620      	mov	r0, r4
    3e0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3e0e:	f000 bbd7 	b.w	45c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x520>
    3e12:	2815      	cmp	r0, #21
    3e14:	d00f      	beq.n	3e36 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
    3e16:	281d      	cmp	r0, #29
    3e18:	d00d      	beq.n	3e36 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xd2>
    3e1a:	f44f 61ce 	mov.w	r1, #1648	; 0x670
    3e1e:	202d      	movs	r0, #45	; 0x2d
    3e20:	f7fd f984 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3e24:	2100      	movs	r1, #0
    3e26:	6868      	ldr	r0, [r5, #4]
    3e28:	f00a f968 	bl	e0fc <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3e2c:	2101      	movs	r1, #1
    3e2e:	6868      	ldr	r0, [r5, #4]
    3e30:	f00a ff58 	bl	ece4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    3e34:	e020      	b.n	3e78 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
    3e36:	2101      	movs	r1, #1
    3e38:	6868      	ldr	r0, [r5, #4]
    3e3a:	f00a f95f 	bl	e0fc <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3e3e:	2101      	movs	r1, #1
    3e40:	6868      	ldr	r0, [r5, #4]
    3e42:	f00a ff4f 	bl	ece4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xa>
    3e46:	b136      	cbz	r6, 3e56 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0xf2>
    3e48:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    3e4c:	6868      	ldr	r0, [r5, #4]
    3e4e:	f00a f970 	bl	e132 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    3e52:	2101      	movs	r1, #1
    3e54:	e006      	b.n	3e64 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x100>
    3e56:	f104 0158 	add.w	r1, r4, #88	; 0x58
    3e5a:	6868      	ldr	r0, [r5, #4]
    3e5c:	f00a f969 	bl	e132 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    3e60:	f894 1057 	ldrb.w	r1, [r4, #87]	; 0x57
    3e64:	6868      	ldr	r0, [r5, #4]
    3e66:	f00a f96a 	bl	e13e <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    3e6a:	e005      	b.n	3e78 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x114>
    3e6c:	2106      	movs	r1, #6
    3e6e:	e000      	b.n	3e72 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x10e>
    3e70:	2102      	movs	r1, #2
    3e72:	6868      	ldr	r0, [r5, #4]
    3e74:	f00a f942 	bl	e0fc <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    3e78:	4620      	mov	r0, r4
    3e7a:	f000 fcd7 	bl	482c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x78c>
    3e7e:	8860      	ldrh	r0, [r4, #2]
    3e80:	281d      	cmp	r0, #29
    3e82:	d007      	beq.n	3e94 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
    3e84:	2815      	cmp	r0, #21
    3e86:	d005      	beq.n	3e94 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x130>
    3e88:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    3e8c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    3e8e:	6868      	ldr	r0, [r5, #4]
    3e90:	f00a f924 	bl	e0dc <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>
    3e94:	4639      	mov	r1, r7
    3e96:	4620      	mov	r0, r4
    3e98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3e9c:	f000 ba5a 	b.w	4354 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b4>
    3ea0:	200010d8 	.word	0x200010d8
    3ea4:	200000f4 	.word	0x200000f4
    3ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3eac:	4d2f      	ldr	r5, [pc, #188]	; (3f6c <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x208>)
    3eae:	4680      	mov	r8, r0
    3eb0:	7828      	ldrb	r0, [r5, #0]
    3eb2:	2802      	cmp	r0, #2
    3eb4:	d005      	beq.n	3ec2 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
    3eb6:	7828      	ldrb	r0, [r5, #0]
    3eb8:	2803      	cmp	r0, #3
    3eba:	d002      	beq.n	3ec2 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x15e>
    3ebc:	f640 511a 	movw	r1, #3354	; 0xd1a
    3ec0:	e02b      	b.n	3f1a <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1b6>
    3ec2:	4c2b      	ldr	r4, [pc, #172]	; (3f70 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x20c>)
    3ec4:	6826      	ldr	r6, [r4, #0]
    3ec6:	7b30      	ldrb	r0, [r6, #12]
    3ec8:	b118      	cbz	r0, 3ed2 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x16e>
    3eca:	f7fe ff5f 	bl	2d8c <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    3ece:	f886 002e 	strb.w	r0, [r6, #46]	; 0x2e
    3ed2:	f8d4 c004 	ldr.w	ip, [r4, #4]
    3ed6:	2700      	movs	r7, #0
    3ed8:	f1b8 0f00 	cmp.w	r8, #0
    3edc:	f89c 0000 	ldrb.w	r0, [ip]
    3ee0:	f000 060f 	and.w	r6, r0, #15
    3ee4:	d027      	beq.n	3f36 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    3ee6:	6821      	ldr	r1, [r4, #0]
    3ee8:	09c0      	lsrs	r0, r0, #7
    3eea:	f101 0351 	add.w	r3, r1, #81	; 0x51
    3eee:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    3ef2:	f10c 0109 	add.w	r1, ip, #9
    3ef6:	f009 feb3 	bl	dc60 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    3efa:	b1e0      	cbz	r0, 3f36 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    3efc:	4639      	mov	r1, r7
    3efe:	6860      	ldr	r0, [r4, #4]
    3f00:	f00a f8dc 	bl	e0bc <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>
    3f04:	b1b8      	cbz	r0, 3f36 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d2>
    3f06:	782a      	ldrb	r2, [r5, #0]
    3f08:	6820      	ldr	r0, [r4, #0]
    3f0a:	4631      	mov	r1, r6
    3f0c:	2a02      	cmp	r2, #2
    3f0e:	d007      	beq.n	3f20 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
    3f10:	782a      	ldrb	r2, [r5, #0]
    3f12:	2a03      	cmp	r2, #3
    3f14:	d004      	beq.n	3f20 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1bc>
    3f16:	f640 41f3 	movw	r1, #3315	; 0xcf3
    3f1a:	202d      	movs	r0, #45	; 0x2d
    3f1c:	f7fd f906 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f20:	68a2      	ldr	r2, [r4, #8]
    3f22:	782b      	ldrb	r3, [r5, #0]
    3f24:	6952      	ldr	r2, [r2, #20]
    3f26:	f06f 0607 	mvn.w	r6, #7
    3f2a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    3f2e:	58d2      	ldr	r2, [r2, r3]
    3f30:	4790      	blx	r2
    3f32:	4606      	mov	r6, r0
    3f34:	e000      	b.n	3f38 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1d4>
    3f36:	2601      	movs	r6, #1
    3f38:	7ba8      	ldrb	r0, [r5, #14]
    3f3a:	b118      	cbz	r0, 3f44 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1e0>
    3f3c:	f003 ffc2 	bl	7ec4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3f40:	f003 fde6 	bl	7b10 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    3f44:	2e00      	cmp	r6, #0
    3f46:	d00f      	beq.n	3f68 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x204>
    3f48:	6820      	ldr	r0, [r4, #0]
    3f4a:	f00a fff4 	bl	ef36 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    3f4e:	b130      	cbz	r0, 3f5e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x1fa>
    3f50:	f003 ffda 	bl	7f08 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3f54:	68a0      	ldr	r0, [r4, #8]
    3f56:	6880      	ldr	r0, [r0, #8]
    3f58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3f5c:	4700      	bx	r0
    3f5e:	6820      	ldr	r0, [r4, #0]
    3f60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3f64:	f000 bb2c 	b.w	45c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x520>
    3f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3f6c:	200010d8 	.word	0x200010d8
    3f70:	200000f4 	.word	0x200000f4
    3f74:	b510      	push	{r4, lr}
    3f76:	2903      	cmp	r1, #3
    3f78:	d002      	beq.n	3f80 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x21c>
    3f7a:	2905      	cmp	r1, #5
    3f7c:	d10a      	bne.n	3f94 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x230>
    3f7e:	e002      	b.n	3f86 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x222>
    3f80:	f000 fbac 	bl	46dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x63c>
    3f84:	e003      	b.n	3f8e <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x22a>
    3f86:	4904      	ldr	r1, [pc, #16]	; (3f98 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x234>)
    3f88:	6809      	ldr	r1, [r1, #0]
    3f8a:	b109      	cbz	r1, 3f90 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x22c>
    3f8c:	4788      	blx	r1
    3f8e:	b108      	cbz	r0, 3f94 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x230>
    3f90:	2000      	movs	r0, #0
    3f92:	bd10      	pop	{r4, pc}
    3f94:	2001      	movs	r0, #1
    3f96:	bd10      	pop	{r4, pc}
    3f98:	20000100 	.word	0x20000100
    3f9c:	4a09      	ldr	r2, [pc, #36]	; (3fc4 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x260>)
    3f9e:	0003      	movs	r3, r0
    3fa0:	6810      	ldr	r0, [r2, #0]
    3fa2:	d001      	beq.n	3fa8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x244>
    3fa4:	f000 bb0c 	b.w	45c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x520>
    3fa8:	2900      	cmp	r1, #0
    3faa:	d009      	beq.n	3fc0 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x25c>
    3fac:	6891      	ldr	r1, [r2, #8]
    3fae:	4a06      	ldr	r2, [pc, #24]	; (3fc8 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x264>)
    3fb0:	6909      	ldr	r1, [r1, #16]
    3fb2:	7812      	ldrb	r2, [r2, #0]
    3fb4:	f06f 030f 	mvn.w	r3, #15
    3fb8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3fbc:	5889      	ldr	r1, [r1, r2]
    3fbe:	4708      	bx	r1
    3fc0:	4770      	bx	lr
    3fc2:	0000      	.short	0x0000
    3fc4:	200000f4 	.word	0x200000f4
    3fc8:	200010d8 	.word	0x200010d8
    3fcc:	b570      	push	{r4, r5, r6, lr}
    3fce:	4604      	mov	r4, r0
    3fd0:	8840      	ldrh	r0, [r0, #2]
    3fd2:	2810      	cmp	r0, #16
    3fd4:	d019      	beq.n	400a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa>
    3fd6:	4d10      	ldr	r5, [pc, #64]	; (4018 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x18>)
    3fd8:	7ba8      	ldrb	r0, [r5, #14]
    3fda:	b120      	cbz	r0, 3fe6 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x282>
    3fdc:	f003 fdb8 	bl	7b50 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    3fe0:	2040      	movs	r0, #64	; 0x40
    3fe2:	f003 ff7d 	bl	7ee0 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    3fe6:	480d      	ldr	r0, [pc, #52]	; (401c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1c>)
    3fe8:	6840      	ldr	r0, [r0, #4]
    3fea:	f004 f9ff 	bl	83ec <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    3fee:	78a0      	ldrb	r0, [r4, #2]
    3ff0:	0740      	lsls	r0, r0, #29
    3ff2:	d404      	bmi.n	3ffe <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x29a>
    3ff4:	2100      	movs	r1, #0
    3ff6:	7922      	ldrb	r2, [r4, #4]
    3ff8:	4608      	mov	r0, r1
    3ffa:	f004 fa81 	bl	8500 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    3ffe:	2000      	movs	r0, #0
    4000:	f004 f8a4 	bl	814c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    4004:	2002      	movs	r0, #2
    4006:	7028      	strb	r0, [r5, #0]
    4008:	bd70      	pop	{r4, r5, r6, pc}
    400a:	4620      	mov	r0, r4
    400c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4010:	2101      	movs	r1, #1
    4012:	f7ff bebf 	b.w	3d94 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    4016:	0000      	.short	0x0000
    4018:	200010d8 	.word	0x200010d8
    401c:	200000f4 	.word	0x200000f4
    4020:	b510      	push	{r4, lr}
    4022:	4c12      	ldr	r4, [pc, #72]	; (406c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6c>)
    4024:	6820      	ldr	r0, [r4, #0]
    4026:	f000 f825 	bl	4074 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x74>
    402a:	6820      	ldr	r0, [r4, #0]
    402c:	f00a ff83 	bl	ef36 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>
    4030:	2800      	cmp	r0, #0
    4032:	6820      	ldr	r0, [r4, #0]
    4034:	d00b      	beq.n	404e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4e>
    4036:	490e      	ldr	r1, [pc, #56]	; (4070 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x70>)
    4038:	780a      	ldrb	r2, [r1, #0]
    403a:	2a02      	cmp	r2, #2
    403c:	d00b      	beq.n	4056 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x56>
    403e:	780a      	ldrb	r2, [r1, #0]
    4040:	2a03      	cmp	r2, #3
    4042:	d008      	beq.n	4056 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x56>
    4044:	f640 4125 	movw	r1, #3109	; 0xc25
    4048:	202d      	movs	r0, #45	; 0x2d
    404a:	f7fd f86f 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    404e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4052:	f000 bab5 	b.w	45c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x520>
    4056:	68a2      	ldr	r2, [r4, #8]
    4058:	7809      	ldrb	r1, [r1, #0]
    405a:	68d2      	ldr	r2, [r2, #12]
    405c:	f06f 0307 	mvn.w	r3, #7
    4060:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    4064:	5851      	ldr	r1, [r2, r1]
    4066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    406a:	4708      	bx	r1
    406c:	200000f4 	.word	0x200000f4
    4070:	200010d8 	.word	0x200010d8
    4074:	b510      	push	{r4, lr}
    4076:	7b01      	ldrb	r1, [r0, #12]
    4078:	b121      	cbz	r1, 4084 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x84>
    407a:	4604      	mov	r4, r0
    407c:	f7fe fe86 	bl	2d8c <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    4080:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    4084:	4805      	ldr	r0, [pc, #20]	; (409c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x9c>)
    4086:	7b80      	ldrb	r0, [r0, #14]
    4088:	2800      	cmp	r0, #0
    408a:	d005      	beq.n	4098 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x98>
    408c:	f003 ff1a 	bl	7ec4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    4090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4094:	f003 bd3c 	b.w	7b10 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    4098:	bd10      	pop	{r4, pc}
    409a:	0000      	.short	0x0000
    409c:	200010d8 	.word	0x200010d8

000040a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>:
    40a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    40a4:	4d5b      	ldr	r5, [pc, #364]	; (4214 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x174>)
    40a6:	4604      	mov	r4, r0
    40a8:	b086      	sub	sp, #24
    40aa:	7828      	ldrb	r0, [r5, #0]
    40ac:	bbe8      	cbnz	r0, 412a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8a>
    40ae:	7820      	ldrb	r0, [r4, #0]
    40b0:	28ff      	cmp	r0, #255	; 0xff
    40b2:	d04b      	beq.n	414c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xac>
    40b4:	f04f 0800 	mov.w	r8, #0
    40b8:	f8a5 800c 	strh.w	r8, [r5, #12]
    40bc:	f8c5 8004 	str.w	r8, [r5, #4]
    40c0:	f885 8001 	strb.w	r8, [r5, #1]
    40c4:	f885 8002 	strb.w	r8, [r5, #2]
    40c8:	f884 8069 	strb.w	r8, [r4, #105]	; 0x69
    40cc:	4b52      	ldr	r3, [pc, #328]	; (4218 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x178>)
    40ce:	4e53      	ldr	r6, [pc, #332]	; (421c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x17c>)
    40d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    40d2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
    40d6:	68b0      	ldr	r0, [r6, #8]
    40d8:	6840      	ldr	r0, [r0, #4]
    40da:	9003      	str	r0, [sp, #12]
    40dc:	4668      	mov	r0, sp
    40de:	f004 f809 	bl	80f4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    40e2:	f004 f8dd 	bl	82a0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    40e6:	f003 feed 	bl	7ec4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    40ea:	f003 fd11 	bl	7b10 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    40ee:	484c      	ldr	r0, [pc, #304]	; (4220 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x180>)
    40f0:	f004 fa38 	bl	8564 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    40f4:	484b      	ldr	r0, [pc, #300]	; (4224 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x184>)
    40f6:	f004 fa3f 	bl	8578 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    40fa:	f104 0028 	add.w	r0, r4, #40	; 0x28
    40fe:	4607      	mov	r7, r0
    4100:	f00a fecc 	bl	ee9c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>
    4104:	4638      	mov	r0, r7
    4106:	f00a fe8e 	bl	ee26 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>
    410a:	4601      	mov	r1, r0
    410c:	4620      	mov	r0, r4
    410e:	f00a fe56 	bl	edbe <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xe4>
    4112:	f994 000e 	ldrsb.w	r0, [r4, #14]
    4116:	f004 f947 	bl	83a8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    411a:	7921      	ldrb	r1, [r4, #4]
    411c:	2000      	movs	r0, #0
    411e:	f003 ff7d 	bl	801c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    4122:	2101      	movs	r1, #1
    4124:	60a8      	str	r0, [r5, #8]
    4126:	b1a8      	cbz	r0, 4154 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb4>
    4128:	e000      	b.n	412c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x8c>
    412a:	e00f      	b.n	414c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xac>
    412c:	f104 0138 	add.w	r1, r4, #56	; 0x38
    4130:	6b60      	ldr	r0, [r4, #52]	; 0x34
    4132:	f009 fd04 	bl	db3e <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>
    4136:	4607      	mov	r7, r0
    4138:	f104 0140 	add.w	r1, r4, #64	; 0x40
    413c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    413e:	f009 fd01 	bl	db44 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>
    4142:	b14f      	cbz	r7, 4158 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb8>
    4144:	f894 1020 	ldrb.w	r1, [r4, #32]
    4148:	b951      	cbnz	r1, 4160 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc0>
    414a:	e005      	b.n	4158 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xb8>
    414c:	200c      	movs	r0, #12
    414e:	b006      	add	sp, #24
    4150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4154:	7029      	strb	r1, [r5, #0]
    4156:	e05a      	b.n	420e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16e>
    4158:	b120      	cbz	r0, 4164 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc4>
    415a:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    415e:	b108      	cbz	r0, 4164 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc4>
    4160:	2701      	movs	r7, #1
    4162:	e000      	b.n	4166 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xc6>
    4164:	2700      	movs	r7, #0
    4166:	7e20      	ldrb	r0, [r4, #24]
    4168:	b910      	cbnz	r0, 4170 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xd0>
    416a:	78a0      	ldrb	r0, [r4, #2]
    416c:	0740      	lsls	r0, r0, #29
    416e:	d523      	bpl.n	41b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x118>
    4170:	e9d4 1012 	ldrd	r1, r0, [r4, #72]	; 0x48
    4174:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    4178:	4050      	eors	r0, r2
    417a:	ea70 0101 	orns	r1, r0, r1
    417e:	d006      	beq.n	418e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xee>
    4180:	f00c fbfc 	bl	1097c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4184:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
    4188:	1a80      	subs	r0, r0, r2
    418a:	4199      	sbcs	r1, r3
    418c:	d200      	bcs.n	4190 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xf0>
    418e:	b19f      	cbz	r7, 41b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x118>
    4190:	f7fe fcde 	bl	2b50 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    4194:	4924      	ldr	r1, [pc, #144]	; (4228 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x188>)
    4196:	fba0 2301 	umull	r2, r3, r0, r1
    419a:	f104 0048 	add.w	r0, r4, #72	; 0x48
    419e:	f00a fe19 	bl	edd4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xfa>
    41a2:	2101      	movs	r1, #1
    41a4:	4620      	mov	r0, r4
    41a6:	f00a fdac 	bl	ed02 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x28>
    41aa:	78a0      	ldrb	r0, [r4, #2]
    41ac:	0740      	lsls	r0, r0, #29
    41ae:	d503      	bpl.n	41b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x118>
    41b0:	2101      	movs	r1, #1
    41b2:	4620      	mov	r0, r4
    41b4:	f000 fac4 	bl	4740 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6a0>
    41b8:	6870      	ldr	r0, [r6, #4]
    41ba:	1cc0      	adds	r0, r0, #3
    41bc:	f009 fdcb 	bl	dd56 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    41c0:	73a8      	strb	r0, [r5, #14]
    41c2:	78a0      	ldrb	r0, [r4, #2]
    41c4:	07c0      	lsls	r0, r0, #31
    41c6:	d022      	beq.n	420e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16e>
    41c8:	f8cd 8010 	str.w	r8, [sp, #16]
    41cc:	20ff      	movs	r0, #255	; 0xff
    41ce:	f8cd 8014 	str.w	r8, [sp, #20]
    41d2:	73e8      	strb	r0, [r5, #15]
    41d4:	69e6      	ldr	r6, [r4, #28]
    41d6:	f106 070a 	add.w	r7, r6, #10
    41da:	e013      	b.n	4204 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x164>
    41dc:	9c04      	ldr	r4, [sp, #16]
    41de:	42b4      	cmp	r4, r6
    41e0:	d010      	beq.n	4204 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x164>
    41e2:	7a72      	ldrb	r2, [r6, #9]
    41e4:	7a60      	ldrb	r0, [r4, #9]
    41e6:	463b      	mov	r3, r7
    41e8:	f104 010a 	add.w	r1, r4, #10
    41ec:	f009 fd38 	bl	dc60 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    41f0:	b140      	cbz	r0, 4204 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x164>
    41f2:	78a0      	ldrb	r0, [r4, #2]
    41f4:	73e8      	strb	r0, [r5, #15]
    41f6:	f8d4 0003 	ldr.w	r0, [r4, #3]
    41fa:	6128      	str	r0, [r5, #16]
    41fc:	f8b4 0007 	ldrh.w	r0, [r4, #7]
    4200:	82a8      	strh	r0, [r5, #20]
    4202:	e004      	b.n	420e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x16e>
    4204:	a804      	add	r0, sp, #16
    4206:	f7fd faeb 	bl	17e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    420a:	2800      	cmp	r0, #0
    420c:	d0e6      	beq.n	41dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x13c>
    420e:	2000      	movs	r0, #0
    4210:	e79d      	b.n	414e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0xae>
    4212:	0000      	.short	0x0000
    4214:	200010d8 	.word	0x200010d8
    4218:	00004850 	.word	0x00004850
    421c:	200000f4 	.word	0x200000f4
    4220:	8e89bed6 	.word	0x8e89bed6
    4224:	00555555 	.word	0x00555555
    4228:	000f4240 	.word	0x000f4240
    422c:	b570      	push	{r4, r5, r6, lr}
    422e:	4604      	mov	r4, r0
    4230:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
    4234:	8808      	ldrh	r0, [r1, #0]
    4236:	f8a4 0074 	strh.w	r0, [r4, #116]	; 0x74
    423a:	20ff      	movs	r0, #255	; 0xff
    423c:	f884 0091 	strb.w	r0, [r4, #145]	; 0x91
    4240:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4244:	4616      	mov	r6, r2
    4246:	460d      	mov	r5, r1
    4248:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
    424c:	2b00      	cmp	r3, #0
    424e:	d143      	bne.n	42d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x238>
    4250:	6928      	ldr	r0, [r5, #16]
    4252:	f009 fda8 	bl	dda6 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    4256:	f8a4 008a 	strh.w	r0, [r4, #138]	; 0x8a
    425a:	8b28      	ldrh	r0, [r5, #24]
    425c:	f8a4 008c 	strh.w	r0, [r4, #140]	; 0x8c
    4260:	8b68      	ldrh	r0, [r5, #26]
    4262:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
    4266:	f895 021b 	ldrb.w	r0, [r5, #539]	; 0x21b
    426a:	f884 0090 	strb.w	r0, [r4, #144]	; 0x90
    426e:	7e20      	ldrb	r0, [r4, #24]
    4270:	2100      	movs	r1, #0
    4272:	b188      	cbz	r0, 4298 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1f8>
    4274:	f894 0050 	ldrb.w	r0, [r4, #80]	; 0x50
    4278:	2801      	cmp	r0, #1
    427a:	d10d      	bne.n	4298 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1f8>
    427c:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
    4280:	ebb0 1f92 	cmp.w	r0, r2, lsr #6
    4284:	d108      	bne.n	4298 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x1f8>
    4286:	f8d4 0051 	ldr.w	r0, [r4, #81]	; 0x51
    428a:	f8c4 007e 	str.w	r0, [r4, #126]	; 0x7e
    428e:	f8b4 0055 	ldrh.w	r0, [r4, #85]	; 0x55
    4292:	f8a4 0082 	strh.w	r0, [r4, #130]	; 0x82
    4296:	e003      	b.n	42a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x200>
    4298:	f8c4 107e 	str.w	r1, [r4, #126]	; 0x7e
    429c:	f8a4 1082 	strh.w	r1, [r4, #130]	; 0x82
    42a0:	4815      	ldr	r0, [pc, #84]	; (42f8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x258>)
    42a2:	2eff      	cmp	r6, #255	; 0xff
    42a4:	6840      	ldr	r0, [r0, #4]
    42a6:	7802      	ldrb	r2, [r0, #0]
    42a8:	f3c2 1280 	ubfx	r2, r2, #6, #1
    42ac:	f884 2077 	strb.w	r2, [r4, #119]	; 0x77
    42b0:	d018      	beq.n	42e4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x244>
    42b2:	f850 1f03 	ldr.w	r1, [r0, #3]!
    42b6:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
    42ba:	8880      	ldrh	r0, [r0, #4]
    42bc:	f8a4 0088 	strh.w	r0, [r4, #136]	; 0x88
    42c0:	f104 0278 	add.w	r2, r4, #120	; 0x78
    42c4:	1e51      	subs	r1, r2, #1
    42c6:	4630      	mov	r0, r6
    42c8:	f7fe fc28 	bl	2b1c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    42cc:	b128      	cbz	r0, 42da <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x23a>
    42ce:	f814 0f77 	ldrb.w	r0, [r4, #119]!
    42d2:	f040 0002 	orr.w	r0, r0, #2
    42d6:	7020      	strb	r0, [r4, #0]
    42d8:	bd70      	pop	{r4, r5, r6, pc}
    42da:	f640 4178 	movw	r1, #3192	; 0xc78
    42de:	202d      	movs	r0, #45	; 0x2d
    42e0:	f7fc ff24 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    42e4:	f850 2f03 	ldr.w	r2, [r0, #3]!
    42e8:	67a2      	str	r2, [r4, #120]	; 0x78
    42ea:	8880      	ldrh	r0, [r0, #4]
    42ec:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    42f0:	f844 1f84 	str.w	r1, [r4, #132]!
    42f4:	80a1      	strh	r1, [r4, #4]
    42f6:	bd70      	pop	{r4, r5, r6, pc}
    42f8:	200000f4 	.word	0x200000f4
    42fc:	b510      	push	{r4, lr}
    42fe:	4604      	mov	r4, r0
    4300:	f7ff fece 	bl	40a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ>
    4304:	2800      	cmp	r0, #0
    4306:	d108      	bne.n	431a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27a>
    4308:	4804      	ldr	r0, [pc, #16]	; (431c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x27c>)
    430a:	7800      	ldrb	r0, [r0, #0]
    430c:	2801      	cmp	r0, #1
    430e:	d003      	beq.n	4318 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x278>
    4310:	2100      	movs	r1, #0
    4312:	4620      	mov	r0, r4
    4314:	f7ff fd3e 	bl	3d94 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    4318:	2000      	movs	r0, #0
    431a:	bd10      	pop	{r4, pc}
    431c:	200010d8 	.word	0x200010d8
    4320:	480a      	ldr	r0, [pc, #40]	; (434c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2ac>)
    4322:	b510      	push	{r4, lr}
    4324:	490a      	ldr	r1, [pc, #40]	; (4350 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2b0>)
    4326:	6804      	ldr	r4, [r0, #0]
    4328:	7808      	ldrb	r0, [r1, #0]
    432a:	2800      	cmp	r0, #0
    432c:	d00d      	beq.n	434a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2aa>
    432e:	7808      	ldrb	r0, [r1, #0]
    4330:	2802      	cmp	r0, #2
    4332:	d002      	beq.n	433a <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x29a>
    4334:	7808      	ldrb	r0, [r1, #0]
    4336:	2803      	cmp	r0, #3
    4338:	d102      	bne.n	4340 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x2a0>
    433a:	4620      	mov	r0, r4
    433c:	f7ff fe9a 	bl	4074 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x74>
    4340:	4620      	mov	r0, r4
    4342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4346:	f000 b93b 	b.w	45c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x520>
    434a:	bd10      	pop	{r4, pc}
    434c:	200000f4 	.word	0x200000f4
    4350:	200010d8 	.word	0x200010d8
    4354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4358:	4604      	mov	r4, r0
    435a:	4829      	ldr	r0, [pc, #164]	; (4400 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x360>)
    435c:	460d      	mov	r5, r1
    435e:	6840      	ldr	r0, [r0, #4]
    4360:	f004 f844 	bl	83ec <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    4364:	4e27      	ldr	r6, [pc, #156]	; (4404 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x364>)
    4366:	2004      	movs	r0, #4
    4368:	7030      	strb	r0, [r6, #0]
    436a:	b355      	cbz	r5, 43c2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x322>
    436c:	8860      	ldrh	r0, [r4, #2]
    436e:	2810      	cmp	r0, #16
    4370:	d023      	beq.n	43ba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x31a>
    4372:	f104 0028 	add.w	r0, r4, #40	; 0x28
    4376:	4680      	mov	r8, r0
    4378:	68b5      	ldr	r5, [r6, #8]
    437a:	f00a fd48 	bl	ee0e <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    437e:	4607      	mov	r7, r0
    4380:	4640      	mov	r0, r8
    4382:	f00a fd6d 	bl	ee60 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>
    4386:	1a38      	subs	r0, r7, r0
    4388:	1e40      	subs	r0, r0, #1
    438a:	b2c0      	uxtb	r0, r0
    438c:	8861      	ldrh	r1, [r4, #2]
    438e:	2228      	movs	r2, #40	; 0x28
    4390:	f000 fa9a 	bl	48c8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>
    4394:	4405      	add	r5, r0
    4396:	78a0      	ldrb	r0, [r4, #2]
    4398:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    439c:	b130      	cbz	r0, 43ac <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x30c>
    439e:	6870      	ldr	r0, [r6, #4]
    43a0:	4405      	add	r5, r0
    43a2:	f00a fdb6 	bl	ef12 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>
    43a6:	4428      	add	r0, r5
    43a8:	f8c4 00d8 	str.w	r0, [r4, #216]	; 0xd8
    43ac:	7922      	ldrb	r2, [r4, #4]
    43ae:	4629      	mov	r1, r5
    43b0:	2000      	movs	r0, #0
    43b2:	f004 f833 	bl	841c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    43b6:	b920      	cbnz	r0, 43c2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x322>
    43b8:	e00c      	b.n	43d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x334>
    43ba:	7921      	ldrb	r1, [r4, #4]
    43bc:	2000      	movs	r0, #0
    43be:	f003 fdf3 	bl	7fa8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    43c2:	8860      	ldrh	r0, [r4, #2]
    43c4:	2813      	cmp	r0, #19
    43c6:	d011      	beq.n	43ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34c>
    43c8:	dc07      	bgt.n	43da <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x33a>
    43ca:	2810      	cmp	r0, #16
    43cc:	d015      	beq.n	43fa <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x35a>
    43ce:	2812      	cmp	r0, #18
    43d0:	d107      	bne.n	43e2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x342>
    43d2:	e00b      	b.n	43ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34c>
    43d4:	f640 5195 	movw	r1, #3477	; 0xd95
    43d8:	e005      	b.n	43e6 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x346>
    43da:	2815      	cmp	r0, #21
    43dc:	d006      	beq.n	43ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34c>
    43de:	281d      	cmp	r0, #29
    43e0:	d004      	beq.n	43ec <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x34c>
    43e2:	f640 51a9 	movw	r1, #3497	; 0xda9
    43e6:	202d      	movs	r0, #45	; 0x2d
    43e8:	f7fc fea0 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    43ec:	7922      	ldrb	r2, [r4, #4]
    43ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    43f2:	2101      	movs	r1, #1
    43f4:	2000      	movs	r0, #0
    43f6:	f004 b883 	b.w	8500 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    43fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    43fe:	0000      	.short	0x0000
    4400:	200000f4 	.word	0x200000f4
    4404:	200010d8 	.word	0x200010d8
    4408:	b538      	push	{r3, r4, r5, lr}
    440a:	4604      	mov	r4, r0
    440c:	f890 00ba 	ldrb.w	r0, [r0, #186]	; 0xba
    4410:	460b      	mov	r3, r1
    4412:	f88d 0000 	strb.w	r0, [sp]
    4416:	9800      	ldr	r0, [sp, #0]
    4418:	9000      	str	r0, [sp, #0]
    441a:	f89d 0000 	ldrb.w	r0, [sp]
    441e:	2800      	cmp	r0, #0
    4420:	d13a      	bne.n	4498 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f8>
    4422:	7820      	ldrb	r0, [r4, #0]
    4424:	f884 00bb 	strb.w	r0, [r4, #187]	; 0xbb
    4428:	2bff      	cmp	r3, #255	; 0xff
    442a:	d010      	beq.n	444e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ae>
    442c:	f104 02bd 	add.w	r2, r4, #189	; 0xbd
    4430:	1e51      	subs	r1, r2, #1
    4432:	4618      	mov	r0, r3
    4434:	f7fe fb72 	bl	2b1c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    4438:	b130      	cbz	r0, 4448 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3a8>
    443a:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    443e:	f040 0002 	orr.w	r0, r0, #2
    4442:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
    4446:	e011      	b.n	446c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3cc>
    4448:	f640 71ff 	movw	r1, #4095	; 0xfff
    444c:	e021      	b.n	4492 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3f2>
    444e:	4813      	ldr	r0, [pc, #76]	; (449c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3fc>)
    4450:	6840      	ldr	r0, [r0, #4]
    4452:	7801      	ldrb	r1, [r0, #0]
    4454:	f3c1 1180 	ubfx	r1, r1, #6, #1
    4458:	f884 10bc 	strb.w	r1, [r4, #188]	; 0xbc
    445c:	f8d0 1003 	ldr.w	r1, [r0, #3]
    4460:	f8c4 10bd 	str.w	r1, [r4, #189]	; 0xbd
    4464:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    4468:	f8a4 00c1 	strh.w	r0, [r4, #193]	; 0xc1
    446c:	f994 002e 	ldrsb.w	r0, [r4, #46]	; 0x2e
    4470:	287f      	cmp	r0, #127	; 0x7f
    4472:	d00c      	beq.n	448e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x3ee>
    4474:	f884 00c3 	strb.w	r0, [r4, #195]	; 0xc3
    4478:	207f      	movs	r0, #127	; 0x7f
    447a:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    447e:	f104 00b2 	add.w	r0, r4, #178	; 0xb2
    4482:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4486:	2202      	movs	r2, #2
    4488:	4905      	ldr	r1, [pc, #20]	; (44a0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x400>)
    448a:	f009 bfb9 	b.w	e400 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    448e:	f640 6159 	movw	r1, #3673	; 0xe59
    4492:	202d      	movs	r0, #45	; 0x2d
    4494:	f7fc fe4a 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4498:	bd38      	pop	{r3, r4, r5, pc}
    449a:	0000      	.short	0x0000
    449c:	200000f4 	.word	0x200000f4
    44a0:	0000eda7 	.word	0x0000eda7
    44a4:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    44a8:	4616      	mov	r6, r2
    44aa:	4604      	mov	r4, r0
    44ac:	2903      	cmp	r1, #3
    44ae:	d004      	beq.n	44ba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x41a>
    44b0:	f894 0068 	ldrb.w	r0, [r4, #104]	; 0x68
    44b4:	b108      	cbz	r0, 44ba <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x41a>
    44b6:	2001      	movs	r0, #1
    44b8:	e000      	b.n	44bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x41c>
    44ba:	2000      	movs	r0, #0
    44bc:	2500      	movs	r5, #0
    44be:	2903      	cmp	r1, #3
    44c0:	d003      	beq.n	44ca <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x42a>
    44c2:	2701      	movs	r7, #1
    44c4:	2905      	cmp	r1, #5
    44c6:	d005      	beq.n	44d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x434>
    44c8:	e008      	b.n	44dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x43c>
    44ca:	78a1      	ldrb	r1, [r4, #2]
    44cc:	2702      	movs	r7, #2
    44ce:	f3c1 0140 	ubfx	r1, r1, #1, #1
    44d2:	e001      	b.n	44d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x438>
    44d4:	78a1      	ldrb	r1, [r4, #2]
    44d6:	07c9      	lsls	r1, r1, #31
    44d8:	2900      	cmp	r1, #0
    44da:	d06b      	beq.n	45b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x514>
    44dc:	2800      	cmp	r0, #0
    44de:	d169      	bne.n	45b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x514>
    44e0:	4835      	ldr	r0, [pc, #212]	; (45b8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x518>)
    44e2:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 45bc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x51c>
    44e6:	7b80      	ldrb	r0, [r0, #14]
    44e8:	b180      	cbz	r0, 450c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x46c>
    44ea:	f009 fc37 	bl	dd5c <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    44ee:	7030      	strb	r0, [r6, #0]
    44f0:	28ff      	cmp	r0, #255	; 0xff
    44f2:	d014      	beq.n	451e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x47e>
    44f4:	b2c0      	uxtb	r0, r0
    44f6:	466a      	mov	r2, sp
    44f8:	a902      	add	r1, sp, #8
    44fa:	f7fe fb0f 	bl	2b1c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    44fe:	b148      	cbz	r0, 4514 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x474>
    4500:	4669      	mov	r1, sp
    4502:	f89d 0008 	ldrb.w	r0, [sp, #8]
    4506:	f00a fac7 	bl	ea98 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    450a:	4605      	mov	r5, r0
    450c:	7830      	ldrb	r0, [r6, #0]
    450e:	28ff      	cmp	r0, #255	; 0xff
    4510:	d005      	beq.n	451e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x47e>
    4512:	e00d      	b.n	4530 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x490>
    4514:	f640 7182 	movw	r1, #3970	; 0xf82
    4518:	202d      	movs	r0, #45	; 0x2d
    451a:	f7fc fe07 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    451e:	f8d9 1004 	ldr.w	r1, [r9, #4]
    4522:	f811 0b03 	ldrb.w	r0, [r1], #3
    4526:	f3c0 1080 	ubfx	r0, r0, #6, #1
    452a:	f00a fab5 	bl	ea98 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>
    452e:	4605      	mov	r5, r0
    4530:	f8d9 1004 	ldr.w	r1, [r9, #4]
    4534:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
    4538:	f104 0358 	add.w	r3, r4, #88	; 0x58
    453c:	f811 0b03 	ldrb.w	r0, [r1], #3
    4540:	f3c0 1080 	ubfx	r0, r0, #6, #1
    4544:	f009 fb8c 	bl	dc60 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    4548:	f8d9 1004 	ldr.w	r1, [r9, #4]
    454c:	4680      	mov	r8, r0
    454e:	f811 0b03 	ldrb.w	r0, [r1], #3
    4552:	f3c0 1080 	ubfx	r0, r0, #6, #1
    4556:	f009 fc0b 	bl	dd70 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    455a:	4681      	mov	r9, r0
    455c:	f7fe fafe 	bl	2b5c <sym_QEQGMTIGG3AOZQY7JM4T2FY2O3KM2UFUMT6Q7PI>
    4560:	b138      	cbz	r0, 4572 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d2>
    4562:	4648      	mov	r0, r9
    4564:	f7fe faba 	bl	2adc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    4568:	b118      	cbz	r0, 4572 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d2>
    456a:	4648      	mov	r0, r9
    456c:	f7fe fa90 	bl	2a90 <sym_BEUFSWAQKCWS5CDGVZRIC3BRKSTHGOKRJJDB32I>
    4570:	b138      	cbz	r0, 4582 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4e2>
    4572:	2100      	movs	r1, #0
    4574:	7830      	ldrb	r0, [r6, #0]
    4576:	28ff      	cmp	r0, #255	; 0xff
    4578:	d00c      	beq.n	4594 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4f4>
    457a:	f1b8 0f00 	cmp.w	r8, #0
    457e:	d105      	bne.n	458c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4ec>
    4580:	e001      	b.n	4586 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4e6>
    4582:	2101      	movs	r1, #1
    4584:	e7f6      	b.n	4574 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4d4>
    4586:	7e62      	ldrb	r2, [r4, #25]
    4588:	4282      	cmp	r2, r0
    458a:	d101      	bne.n	4590 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4f0>
    458c:	2001      	movs	r0, #1
    458e:	e003      	b.n	4598 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4f8>
    4590:	2000      	movs	r0, #0
    4592:	e001      	b.n	4598 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x4f8>
    4594:	ea28 0001 	bic.w	r0, r8, r1
    4598:	78a2      	ldrb	r2, [r4, #2]
    459a:	0752      	lsls	r2, r2, #29
    459c:	d501      	bpl.n	45a2 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x502>
    459e:	b930      	cbnz	r0, 45ae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x50e>
    45a0:	e008      	b.n	45b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x514>
    45a2:	b939      	cbnz	r1, 45b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x514>
    45a4:	b91d      	cbnz	r5, 45ae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x50e>
    45a6:	7be0      	ldrb	r0, [r4, #15]
    45a8:	b108      	cbz	r0, 45ae <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x50e>
    45aa:	42b8      	cmp	r0, r7
    45ac:	d102      	bne.n	45b4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x514>
    45ae:	2001      	movs	r0, #1
    45b0:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    45b4:	2000      	movs	r0, #0
    45b6:	e7fb      	b.n	45b0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x510>
    45b8:	200010d8 	.word	0x200010d8
    45bc:	200000f4 	.word	0x200000f4
    45c0:	b570      	push	{r4, r5, r6, lr}
    45c2:	4604      	mov	r4, r0
    45c4:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    45c6:	4d10      	ldr	r5, [pc, #64]	; (4608 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x568>)
    45c8:	1c40      	adds	r0, r0, #1
    45ca:	8620      	strh	r0, [r4, #48]	; 0x30
    45cc:	7ba8      	ldrb	r0, [r5, #14]
    45ce:	2600      	movs	r6, #0
    45d0:	b120      	cbz	r0, 45dc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x53c>
    45d2:	f003 fc77 	bl	7ec4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    45d6:	f003 fa9b 	bl	7b10 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    45da:	73ae      	strb	r6, [r5, #14]
    45dc:	702e      	strb	r6, [r5, #0]
    45de:	f894 0069 	ldrb.w	r0, [r4, #105]	; 0x69
    45e2:	b108      	cbz	r0, 45e8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x548>
    45e4:	2101      	movs	r1, #1
    45e6:	e00a      	b.n	45fe <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x55e>
    45e8:	7b60      	ldrb	r0, [r4, #13]
    45ea:	b138      	cbz	r0, 45fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x55c>
    45ec:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    45ee:	4288      	cmp	r0, r1
    45f0:	d804      	bhi.n	45fc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x55c>
    45f2:	2101      	movs	r1, #1
    45f4:	4620      	mov	r0, r4
    45f6:	f00a fcb0 	bl	ef5a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    45fa:	bd70      	pop	{r4, r5, r6, pc}
    45fc:	2100      	movs	r1, #0
    45fe:	4620      	mov	r0, r4
    4600:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4604:	f00a bca9 	b.w	ef5a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>
    4608:	200010d8 	.word	0x200010d8
    460c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    460e:	4604      	mov	r4, r0
    4610:	20ff      	movs	r0, #255	; 0xff
    4612:	f88d 0000 	strb.w	r0, [sp]
    4616:	2601      	movs	r6, #1
    4618:	466a      	mov	r2, sp
    461a:	2105      	movs	r1, #5
    461c:	4620      	mov	r0, r4
    461e:	f7ff ff41 	bl	44a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x404>
    4622:	b160      	cbz	r0, 463e <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x59e>
    4624:	4d29      	ldr	r5, [pc, #164]	; (46cc <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x62c>)
    4626:	4f28      	ldr	r7, [pc, #160]	; (46c8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x628>)
    4628:	6869      	ldr	r1, [r5, #4]
    462a:	7bfa      	ldrb	r2, [r7, #15]
    462c:	f107 0310 	add.w	r3, r7, #16
    4630:	f811 0b03 	ldrb.w	r0, [r1], #3
    4634:	f3c0 1080 	ubfx	r0, r0, #6, #1
    4638:	f009 fb12 	bl	dc60 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    463c:	b110      	cbz	r0, 4644 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5a4>
    463e:	2600      	movs	r6, #0
    4640:	4630      	mov	r0, r6
    4642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4644:	686a      	ldr	r2, [r5, #4]
    4646:	69e0      	ldr	r0, [r4, #28]
    4648:	7812      	ldrb	r2, [r2, #0]
    464a:	f810 1fa5 	ldrb.w	r1, [r0, #165]!
    464e:	f3c2 1240 	ubfx	r2, r2, #5, #1
    4652:	4011      	ands	r1, r2
    4654:	7001      	strb	r1, [r0, #0]
    4656:	2201      	movs	r2, #1
    4658:	4620      	mov	r0, r4
    465a:	69e1      	ldr	r1, [r4, #28]
    465c:	f000 f89e 	bl	479c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6fc>
    4660:	2300      	movs	r3, #0
    4662:	f89d 2000 	ldrb.w	r2, [sp]
    4666:	4620      	mov	r0, r4
    4668:	69e1      	ldr	r1, [r4, #28]
    466a:	f7ff fddf 	bl	422c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x18c>
    466e:	2202      	movs	r2, #2
    4670:	4917      	ldr	r1, [pc, #92]	; (46d0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x630>)
    4672:	f104 006a 	add.w	r0, r4, #106	; 0x6a
    4676:	f009 fec3 	bl	e400 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    467a:	69e0      	ldr	r0, [r4, #28]
    467c:	2202      	movs	r2, #2
    467e:	8801      	ldrh	r1, [r0, #0]
    4680:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
    4684:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    4688:	f884 00b0 	strb.w	r0, [r4, #176]	; 0xb0
    468c:	4911      	ldr	r1, [pc, #68]	; (46d4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x634>)
    468e:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
    4692:	f009 feb5 	bl	e400 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    4696:	2100      	movs	r1, #0
    4698:	69e0      	ldr	r0, [r4, #28]
    469a:	7039      	strb	r1, [r7, #0]
    469c:	490e      	ldr	r1, [pc, #56]	; (46d8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x638>)
    469e:	680b      	ldr	r3, [r1, #0]
    46a0:	b113      	cbz	r3, 46a8 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x608>
    46a2:	2200      	movs	r2, #0
    46a4:	4621      	mov	r1, r4
    46a6:	4798      	blx	r3
    46a8:	6868      	ldr	r0, [r5, #4]
    46aa:	69e1      	ldr	r1, [r4, #28]
    46ac:	f8d0 2003 	ldr.w	r2, [r0, #3]
    46b0:	f841 2f03 	str.w	r2, [r1, #3]!
    46b4:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    46b8:	808a      	strh	r2, [r1, #4]
    46ba:	7800      	ldrb	r0, [r0, #0]
    46bc:	69e1      	ldr	r1, [r4, #28]
    46be:	f3c0 1080 	ubfx	r0, r0, #6, #1
    46c2:	7088      	strb	r0, [r1, #2]
    46c4:	e7bc      	b.n	4640 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x5a0>
    46c6:	0000      	.short	0x0000
    46c8:	200010d8 	.word	0x200010d8
    46cc:	200000f4 	.word	0x200000f4
    46d0:	0000ed57 	.word	0x0000ed57
    46d4:	0000ed47 	.word	0x0000ed47
    46d8:	20000104 	.word	0x20000104
    46dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46de:	4604      	mov	r4, r0
    46e0:	20ff      	movs	r0, #255	; 0xff
    46e2:	f88d 0000 	strb.w	r0, [sp]
    46e6:	2501      	movs	r5, #1
    46e8:	466a      	mov	r2, sp
    46ea:	2103      	movs	r1, #3
    46ec:	4620      	mov	r0, r4
    46ee:	f7ff fed9 	bl	44a4 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x404>
    46f2:	b1e8      	cbz	r0, 4730 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x690>
    46f4:	7b20      	ldrb	r0, [r4, #12]
    46f6:	b120      	cbz	r0, 4702 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x662>
    46f8:	f89d 1000 	ldrb.w	r1, [sp]
    46fc:	4620      	mov	r0, r4
    46fe:	f7ff fe83 	bl	4408 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x368>
    4702:	4e0d      	ldr	r6, [pc, #52]	; (4738 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x698>)
    4704:	2100      	movs	r1, #0
    4706:	6870      	ldr	r0, [r6, #4]
    4708:	8001      	strh	r1, [r0, #0]
    470a:	2104      	movs	r1, #4
    470c:	f009 fcf6 	bl	e0fc <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    4710:	4620      	mov	r0, r4
    4712:	f000 f88b 	bl	482c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x78c>
    4716:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
    471a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    471c:	6870      	ldr	r0, [r6, #4]
    471e:	f009 fd24 	bl	e16a <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>
    4722:	4906      	ldr	r1, [pc, #24]	; (473c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x69c>)
    4724:	2005      	movs	r0, #5
    4726:	7008      	strb	r0, [r1, #0]
    4728:	6870      	ldr	r0, [r6, #4]
    472a:	f003 fe5f 	bl	83ec <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    472e:	e000      	b.n	4732 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x692>
    4730:	2500      	movs	r5, #0
    4732:	4628      	mov	r0, r5
    4734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4736:	0000      	.short	0x0000
    4738:	200000f4 	.word	0x200000f4
    473c:	200010d8 	.word	0x200010d8
    4740:	b570      	push	{r4, r5, r6, lr}
    4742:	4604      	mov	r4, r0
    4744:	460e      	mov	r6, r1
    4746:	7e40      	ldrb	r0, [r0, #25]
    4748:	f7fe f9c8 	bl	2adc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    474c:	0005      	movs	r5, r0
    474e:	d019      	beq.n	4784 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6e4>
    4750:	7e60      	ldrb	r0, [r4, #25]
    4752:	f7fe f99d 	bl	2a90 <sym_BEUFSWAQKCWS5CDGVZRIC3BRKSTHGOKRJJDB32I>
    4756:	2800      	cmp	r0, #0
    4758:	d114      	bne.n	4784 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6e4>
    475a:	2001      	movs	r0, #1
    475c:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    4760:	f104 015f 	add.w	r1, r4, #95	; 0x5f
    4764:	4632      	mov	r2, r6
    4766:	460c      	mov	r4, r1
    4768:	4628      	mov	r0, r5
    476a:	f009 fa99 	bl	dca0 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    476e:	4621      	mov	r1, r4
    4770:	4c05      	ldr	r4, [pc, #20]	; (4788 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6e8>)
    4772:	6860      	ldr	r0, [r4, #4]
    4774:	f009 fcdd 	bl	e132 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    4778:	6860      	ldr	r0, [r4, #4]
    477a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    477e:	2101      	movs	r1, #1
    4780:	f009 bcdd 	b.w	e13e <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    4784:	bd70      	pop	{r4, r5, r6, pc}
    4786:	0000      	.short	0x0000
    4788:	200000f4 	.word	0x200000f4
    478c:	4802      	ldr	r0, [pc, #8]	; (4798 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x6f8>)
    478e:	2101      	movs	r1, #1
    4790:	6800      	ldr	r0, [r0, #0]
    4792:	f7ff baff 	b.w	3d94 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    4796:	0000      	.short	0x0000
    4798:	200000f4 	.word	0x200000f4
    479c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    47a0:	4e21      	ldr	r6, [pc, #132]	; (4828 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x788>)
    47a2:	4680      	mov	r8, r0
    47a4:	460c      	mov	r4, r1
    47a6:	6870      	ldr	r0, [r6, #4]
    47a8:	4615      	mov	r5, r2
    47aa:	f850 1f0f 	ldr.w	r1, [r0, #15]!
    47ae:	6161      	str	r1, [r4, #20]
    47b0:	6841      	ldr	r1, [r0, #4]
    47b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    47b6:	61e1      	str	r1, [r4, #28]
    47b8:	8940      	ldrh	r0, [r0, #10]
    47ba:	f009 faf0 	bl	dd9e <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    47be:	4607      	mov	r7, r0
    47c0:	6120      	str	r0, [r4, #16]
    47c2:	6870      	ldr	r0, [r6, #4]
    47c4:	4639      	mov	r1, r7
    47c6:	7d80      	ldrb	r0, [r0, #22]
    47c8:	f009 fbe4 	bl	df94 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    47cc:	84a0      	strh	r0, [r4, #36]	; 0x24
    47ce:	6870      	ldr	r0, [r6, #4]
    47d0:	4639      	mov	r1, r7
    47d2:	f8b0 0017 	ldrh.w	r0, [r0, #23]
    47d6:	f009 fbd9 	bl	df8c <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    47da:	6220      	str	r0, [r4, #32]
    47dc:	6870      	ldr	r0, [r6, #4]
    47de:	f830 1f1b 	ldrh.w	r1, [r0, #27]!
    47e2:	8321      	strh	r1, [r4, #24]
    47e4:	8841      	ldrh	r1, [r0, #2]
    47e6:	8361      	strh	r1, [r4, #26]
    47e8:	6841      	ldr	r1, [r0, #4]
    47ea:	f8c4 10a6 	str.w	r1, [r4, #166]	; 0xa6
    47ee:	7a01      	ldrb	r1, [r0, #8]
    47f0:	f884 10aa 	strb.w	r1, [r4, #170]	; 0xaa
    47f4:	7a41      	ldrb	r1, [r0, #9]
    47f6:	f001 011f 	and.w	r1, r1, #31
    47fa:	f884 10b1 	strb.w	r1, [r4, #177]	; 0xb1
    47fe:	7a40      	ldrb	r0, [r0, #9]
    4800:	0940      	lsrs	r0, r0, #5
    4802:	f884 021b 	strb.w	r0, [r4, #539]	; 0x21b
    4806:	f104 0062 	add.w	r0, r4, #98	; 0x62
    480a:	7205      	strb	r5, [r0, #8]
    480c:	7245      	strb	r5, [r0, #9]
    480e:	21ff      	movs	r1, #255	; 0xff
    4810:	7281      	strb	r1, [r0, #10]
    4812:	2100      	movs	r1, #0
    4814:	3836      	subs	r0, #54	; 0x36
    4816:	f009 fe68 	bl	e4ea <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    481a:	f998 100e 	ldrsb.w	r1, [r8, #14]
    481e:	4620      	mov	r0, r4
    4820:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4824:	f009 bb63 	b.w	deee <sym_AIEQYZJFZQBQ5LEMJNMQV56TMLIGCBAC63QLHGI>
    4828:	200000f4 	.word	0x200000f4
    482c:	b570      	push	{r4, r5, r6, lr}
    482e:	4d07      	ldr	r5, [pc, #28]	; (484c <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x7ac>)
    4830:	4604      	mov	r4, r0
    4832:	f100 0151 	add.w	r1, r0, #81	; 0x51
    4836:	6868      	ldr	r0, [r5, #4]
    4838:	f009 fc88 	bl	e14c <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    483c:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
    4840:	6868      	ldr	r0, [r5, #4]
    4842:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4846:	f009 bc87 	b.w	e158 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    484a:	0000      	.short	0x0000
    484c:	200000f4 	.word	0x200000f4
    4850:	00004021 	.word	0x00004021
    4854:	00003ea9 	.word	0x00003ea9
    4858:	00003f9d 	.word	0x00003f9d
    485c:	00000000 	.word	0x00000000
    4860:	00003f75 	.word	0x00003f75
    4864:	00003fcd 	.word	0x00003fcd
    4868:	0000ecf7 	.word	0x0000ecf7
    486c:	0000ecfd 	.word	0x0000ecfd
    4870:	000042fd 	.word	0x000042fd
    4874:	00004321 	.word	0x00004321
    4878:	0000478d 	.word	0x0000478d
    487c:	0000486c 	.word	0x0000486c
    4880:	00004864 	.word	0x00004864
    4884:	00004860 	.word	0x00004860

00004888 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>:
    4888:	b510      	push	{r4, lr}
    488a:	1e42      	subs	r2, r0, #1
    488c:	2a02      	cmp	r2, #2
    488e:	d901      	bls.n	4894 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0xc>
    4890:	21ca      	movs	r1, #202	; 0xca
    4892:	e009      	b.n	48a8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x20>
    4894:	1e40      	subs	r0, r0, #1
    4896:	2910      	cmp	r1, #16
    4898:	d009      	beq.n	48ae <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x26>
    489a:	2912      	cmp	r1, #18
    489c:	d00c      	beq.n	48b8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    489e:	2913      	cmp	r1, #19
    48a0:	d00a      	beq.n	48b8 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x30>
    48a2:	2915      	cmp	r1, #21
    48a4:	d005      	beq.n	48b2 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x2a>
    48a6:	21d8      	movs	r1, #216	; 0xd8
    48a8:	202f      	movs	r0, #47	; 0x2f
    48aa:	f7fc fc3f 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48ae:	4905      	ldr	r1, [pc, #20]	; (48c4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    48b0:	e004      	b.n	48bc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    48b2:	4904      	ldr	r1, [pc, #16]	; (48c4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    48b4:	1d89      	adds	r1, r1, #6
    48b6:	e001      	b.n	48bc <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x34>
    48b8:	4902      	ldr	r1, [pc, #8]	; (48c4 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY+0x3c>)
    48ba:	1f89      	subs	r1, r1, #6
    48bc:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    48c0:	bd10      	pop	{r4, pc}
    48c2:	0000      	.short	0x0000
    48c4:	0000ef2a 	.word	0x0000ef2a

000048c8 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I>:
    48c8:	1e42      	subs	r2, r0, #1
    48ca:	b510      	push	{r4, lr}
    48cc:	b2d2      	uxtb	r2, r2
    48ce:	2a01      	cmp	r2, #1
    48d0:	d903      	bls.n	48da <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    48d2:	291d      	cmp	r1, #29
    48d4:	d001      	beq.n	48da <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x12>
    48d6:	21ee      	movs	r1, #238	; 0xee
    48d8:	e00d      	b.n	48f6 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2e>
    48da:	2913      	cmp	r1, #19
    48dc:	d013      	beq.n	4906 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    48de:	dc04      	bgt.n	48ea <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x22>
    48e0:	2910      	cmp	r1, #16
    48e2:	d00b      	beq.n	48fc <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x34>
    48e4:	2912      	cmp	r1, #18
    48e6:	d104      	bne.n	48f2 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x2a>
    48e8:	e00d      	b.n	4906 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x3e>
    48ea:	2915      	cmp	r1, #21
    48ec:	d008      	beq.n	4900 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x38>
    48ee:	291d      	cmp	r1, #29
    48f0:	d00e      	beq.n	4910 <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x48>
    48f2:	f44f 7181 	mov.w	r1, #258	; 0x102
    48f6:	202f      	movs	r0, #47	; 0x2f
    48f8:	f7fc fc18 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48fc:	4807      	ldr	r0, [pc, #28]	; (491c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    48fe:	e004      	b.n	490a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    4900:	4806      	ldr	r0, [pc, #24]	; (491c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    4902:	3008      	adds	r0, #8
    4904:	e001      	b.n	490a <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x42>
    4906:	4805      	ldr	r0, [pc, #20]	; (491c <sym_CWVFJQ3UTS5MGUYKHB563UDBBB3FBCXUIVZDU2I+0x54>)
    4908:	1d00      	adds	r0, r0, #4
    490a:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
    490e:	bd10      	pop	{r4, pc}
    4910:	f240 315a 	movw	r1, #858	; 0x35a
    4914:	fb10 f001 	smulbb	r0, r0, r1
    4918:	bd10      	pop	{r4, pc}
    491a:	0000      	.short	0x0000
    491c:	0000ef18 	.word	0x0000ef18

00004920 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>:
    4920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4924:	4604      	mov	r4, r0
    4926:	f890 00e8 	ldrb.w	r0, [r0, #232]	; 0xe8
    492a:	4616      	mov	r6, r2
    492c:	460f      	mov	r7, r1
    492e:	2800      	cmp	r0, #0
    4930:	d15e      	bne.n	49f0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    4932:	4621      	mov	r1, r4
    4934:	484f      	ldr	r0, [pc, #316]	; (4a74 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x154>)
    4936:	f006 fc0f 	bl	b158 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    493a:	4605      	mov	r5, r0
    493c:	2820      	cmp	r0, #32
    493e:	d057      	beq.n	49f0 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd0>
    4940:	2250      	movs	r2, #80	; 0x50
    4942:	2100      	movs	r1, #0
    4944:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    4948:	f00c f9d0 	bl	10cec <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    494c:	f884 50c8 	strb.w	r5, [r4, #200]	; 0xc8
    4950:	2501      	movs	r5, #1
    4952:	f8c4 70cc 	str.w	r7, [r4, #204]	; 0xcc
    4956:	f884 50e8 	strb.w	r5, [r4, #232]	; 0xe8
    495a:	b137      	cbz	r7, 496a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x4a>
    495c:	f7fe fdfe 	bl	355c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    4960:	f000 0007 	and.w	r0, r0, #7
    4964:	1c40      	adds	r0, r0, #1
    4966:	f887 024c 	strb.w	r0, [r7, #588]	; 0x24c
    496a:	4620      	mov	r0, r4
    496c:	f00a fcc0 	bl	f2f0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x316>
    4970:	f8a4 00f8 	strh.w	r0, [r4, #248]	; 0xf8
    4974:	2002      	movs	r0, #2
    4976:	f884 00fa 	strb.w	r0, [r4, #250]	; 0xfa
    497a:	46a8      	mov	r8, r5
    497c:	f884 50fb 	strb.w	r5, [r4, #251]	; 0xfb
    4980:	2500      	movs	r5, #0
    4982:	f804 5ff0 	strb.w	r5, [r4, #240]!
    4986:	f007 f857 	bl	ba38 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    498a:	4607      	mov	r7, r0
    498c:	f00b ffed 	bl	1096a <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    4990:	8921      	ldrh	r1, [r4, #8]
    4992:	3cf0      	subs	r4, #240	; 0xf0
    4994:	4288      	cmp	r0, r1
    4996:	d800      	bhi.n	499a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x7a>
    4998:	4608      	mov	r0, r1
    499a:	4438      	add	r0, r7
    499c:	30cf      	adds	r0, #207	; 0xcf
    499e:	b287      	uxth	r7, r0
    49a0:	4620      	mov	r0, r4
    49a2:	f00a f967 	bl	ec74 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    49a6:	b330      	cbz	r0, 49f6 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd6>
    49a8:	f00b fe68 	bl	1067c <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    49ac:	f500 60cd 	add.w	r0, r0, #1640	; 0x668
    49b0:	b281      	uxth	r1, r0
    49b2:	4630      	mov	r0, r6
    49b4:	f007 f954 	bl	bc60 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    49b8:	4430      	add	r0, r6
    49ba:	f8c4 00f4 	str.w	r0, [r4, #244]	; 0xf4
    49be:	3490      	adds	r4, #144	; 0x90
    49c0:	f00b ffdc 	bl	1097c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    49c4:	19c0      	adds	r0, r0, r7
    49c6:	4169      	adcs	r1, r5
    49c8:	e9c4 011c 	strd	r0, r1, [r4, #112]	; 0x70
    49cc:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
    49d0:	f824 5c6e 	strh.w	r5, [r4, #-110]
    49d4:	2001      	movs	r0, #1
    49d6:	f00a fa98 	bl	ef0a <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>
    49da:	f500 708b 	add.w	r0, r0, #278	; 0x116
    49de:	1a30      	subs	r0, r6, r0
    49e0:	6460      	str	r0, [r4, #68]	; 0x44
    49e2:	f04f 30ff 	mov.w	r0, #4294967295
    49e6:	0841      	lsrs	r1, r0, #1
    49e8:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    49ec:	3c90      	subs	r4, #144	; 0x90
    49ee:	e025      	b.n	4a3c <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x11c>
    49f0:	200c      	movs	r0, #12
    49f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    49f6:	2100      	movs	r1, #0
    49f8:	4620      	mov	r0, r4
    49fa:	f00a fbda 	bl	f1b2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d8>
    49fe:	f8df 8078 	ldr.w	r8, [pc, #120]	; 4a78 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x158>
    4a02:	f8c4 00f4 	str.w	r0, [r4, #244]	; 0xf4
    4a06:	2000      	movs	r0, #0
    4a08:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    4a0c:	b149      	cbz	r1, 4a22 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
    4a0e:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    4a10:	b139      	cbz	r1, 4a22 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x102>
    4a12:	f7fe fda3 	bl	355c <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    4a16:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    4a1a:	fbb0 f2f1 	udiv	r2, r0, r1
    4a1e:	fb01 0012 	mls	r0, r1, r2, r0
    4a22:	4407      	add	r7, r0
    4a24:	f00b ffaa 	bl	1097c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4a28:	19c0      	adds	r0, r0, r7
    4a2a:	4169      	adcs	r1, r5
    4a2c:	e9c4 0140 	strd	r0, r1, [r4, #256]	; 0x100
    4a30:	b1be      	cbz	r6, 4a62 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x142>
    4a32:	1980      	adds	r0, r0, r6
    4a34:	eb51 0105 	adcs.w	r1, r1, r5
    4a38:	e9c4 0142 	strd	r0, r1, [r4, #264]	; 0x108
    4a3c:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    4a40:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
    4a44:	f00a fc52 	bl	f2ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x312>
    4a48:	b178      	cbz	r0, 4a6a <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x14a>
    4a4a:	e9d4 0140 	ldrd	r0, r1, [r4, #256]	; 0x100
    4a4e:	e9c4 0138 	strd	r0, r1, [r4, #224]	; 0xe0
    4a52:	f8a4 50ea 	strh.w	r5, [r4, #234]	; 0xea
    4a56:	2100      	movs	r1, #0
    4a58:	4620      	mov	r0, r4
    4a5a:	f00a f93b 	bl	ecd4 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    4a5e:	2000      	movs	r0, #0
    4a60:	e7c7      	b.n	49f2 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0xd2>
    4a62:	f04f 30ff 	mov.w	r0, #4294967295
    4a66:	0841      	lsrs	r1, r0, #1
    4a68:	e7e6      	b.n	4a38 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY+0x118>
    4a6a:	f240 11ef 	movw	r1, #495	; 0x1ef
    4a6e:	2030      	movs	r0, #48	; 0x30
    4a70:	f7fc fb5c 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a74:	0000f3d3 	.word	0x0000f3d3
    4a78:	20000108 	.word	0x20000108

00004a7c <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>:
    4a7c:	4901      	ldr	r1, [pc, #4]	; (4a84 <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ+0x8>)
    4a7e:	8088      	strh	r0, [r1, #4]
    4a80:	4770      	bx	lr
    4a82:	0000      	.short	0x0000
    4a84:	20000108 	.word	0x20000108

00004a88 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>:
    4a88:	4805      	ldr	r0, [pc, #20]	; (4aa0 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ+0x18>)
    4a8a:	2100      	movs	r1, #0
    4a8c:	7001      	strb	r1, [r0, #0]
    4a8e:	2201      	movs	r2, #1
    4a90:	7082      	strb	r2, [r0, #2]
    4a92:	7041      	strb	r1, [r0, #1]
    4a94:	f242 7110 	movw	r1, #10000	; 0x2710
    4a98:	8081      	strh	r1, [r0, #4]
    4a9a:	f000 b803 	b.w	4aa4 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
    4a9e:	0000      	.short	0x0000
    4aa0:	20000108 	.word	0x20000108

00004aa4 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>:
    4aa4:	b51c      	push	{r2, r3, r4, lr}
    4aa6:	4909      	ldr	r1, [pc, #36]	; (4acc <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x28>)
    4aa8:	e9d1 0100 	ldrd	r0, r1, [r1]
    4aac:	e9cd 0100 	strd	r0, r1, [sp]
    4ab0:	e002      	b.n	4ab8 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0x14>
    4ab2:	9800      	ldr	r0, [sp, #0]
    4ab4:	f00a fa65 	bl	ef82 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
    4ab8:	4668      	mov	r0, sp
    4aba:	f7fc fe91 	bl	17e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4abe:	2800      	cmp	r0, #0
    4ac0:	d0f7      	beq.n	4ab2 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q+0xe>
    4ac2:	f000 f8c5 	bl	4c50 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa8>
    4ac6:	2000      	movs	r0, #0
    4ac8:	bd1c      	pop	{r2, r3, r4, pc}
    4aca:	0000      	.short	0x0000
    4acc:	000053e8 	.word	0x000053e8

00004ad0 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>:
    4ad0:	4901      	ldr	r1, [pc, #4]	; (4ad8 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI+0x8>)
    4ad2:	7008      	strb	r0, [r1, #0]
    4ad4:	4770      	bx	lr
    4ad6:	0000      	.short	0x0000
    4ad8:	20000108 	.word	0x20000108

00004adc <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>:
    4adc:	4908      	ldr	r1, [pc, #32]	; (4b00 <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x24>)
    4ade:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4ae2:	fbb1 f1f2 	udiv	r1, r1, r2
    4ae6:	b510      	push	{r4, lr}
    4ae8:	f501 712a 	add.w	r1, r1, #680	; 0x2a8
    4aec:	f009 fd16 	bl	e51c <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    4af0:	f640 0148 	movw	r1, #2120	; 0x848
    4af4:	4288      	cmp	r0, r1
    4af6:	d300      	bcc.n	4afa <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA+0x1e>
    4af8:	4608      	mov	r0, r1
    4afa:	b280      	uxth	r0, r0
    4afc:	bd10      	pop	{r4, pc}
    4afe:	0000      	.short	0x0000
    4b00:	0001527d 	.word	0x0001527d

00004b04 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>:
    4b04:	b510      	push	{r4, lr}
    4b06:	f003 fb85 	bl	8214 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    4b0a:	4905      	ldr	r1, [pc, #20]	; (4b20 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x1c>)
    4b0c:	688a      	ldr	r2, [r1, #8]
    4b0e:	4290      	cmp	r0, r2
    4b10:	d801      	bhi.n	4b16 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x12>
    4b12:	7848      	ldrb	r0, [r1, #1]
    4b14:	b108      	cbz	r0, 4b1a <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY+0x16>
    4b16:	2000      	movs	r0, #0
    4b18:	bd10      	pop	{r4, pc}
    4b1a:	2001      	movs	r0, #1
    4b1c:	bd10      	pop	{r4, pc}
    4b1e:	0000      	.short	0x0000
    4b20:	20000108 	.word	0x20000108

00004b24 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>:
    4b24:	b510      	push	{r4, lr}
    4b26:	4604      	mov	r4, r0
    4b28:	2906      	cmp	r1, #6
    4b2a:	d238      	bcs.n	4b9e <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x7a>
    4b2c:	e8df f001 	tbb	[pc, r1]
    4b30:	14031105 	.word	0x14031105
    4b34:	3215      	.short	0x3215
    4b36:	2100      	movs	r1, #0
    4b38:	e006      	b.n	4b48 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x24>
    4b3a:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
    4b3e:	b110      	cbz	r0, 4b46 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x22>
    4b40:	4620      	mov	r0, r4
    4b42:	f00a fb66 	bl	f212 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x238>
    4b46:	2101      	movs	r1, #1
    4b48:	4620      	mov	r0, r4
    4b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4b4e:	f000 b929 	b.w	4da4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1fc>
    4b52:	2003      	movs	r0, #3
    4b54:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    4b58:	bd10      	pop	{r4, pc}
    4b5a:	f003 fb67 	bl	822c <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>
    4b5e:	f8c4 02ac 	str.w	r0, [r4, #684]	; 0x2ac
    4b62:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4b66:	f003 fc25 	bl	83b4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    4b6a:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    4b6e:	4288      	cmp	r0, r1
    4b70:	d904      	bls.n	4b7c <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x58>
    4b72:	f240 31e5 	movw	r1, #997	; 0x3e5
    4b76:	2030      	movs	r0, #48	; 0x30
    4b78:	f7fc fad8 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b7c:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4b80:	f003 fc18 	bl	83b4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    4b84:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    4b88:	1a08      	subs	r0, r1, r0
    4b8a:	4906      	ldr	r1, [pc, #24]	; (4ba4 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x80>)
    4b8c:	688a      	ldr	r2, [r1, #8]
    4b8e:	4410      	add	r0, r2
    4b90:	6088      	str	r0, [r1, #8]
    4b92:	bd10      	pop	{r4, pc}
    4b94:	4620      	mov	r0, r4
    4b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4b9a:	f00a bcc3 	b.w	f524 <__kernel_ram_size+0x2c>
    4b9e:	f240 71ad 	movw	r1, #1965	; 0x7ad
    4ba2:	e7e8      	b.n	4b76 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI+0x52>
    4ba4:	20000108 	.word	0x20000108

00004ba8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ>:
    4ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4bac:	460c      	mov	r4, r1
    4bae:	4680      	mov	r8, r0
    4bb0:	b112      	cbz	r2, 4bb8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x10>
    4bb2:	f240 71d7 	movw	r1, #2007	; 0x7d7
    4bb6:	e035      	b.n	4c24 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7c>
    4bb8:	f003 fb2c 	bl	8214 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    4bbc:	4607      	mov	r7, r0
    4bbe:	2000      	movs	r0, #0
    4bc0:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
    4bc4:	e9d4 5640 	ldrd	r5, r6, [r4, #256]	; 0x100
    4bc8:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
    4bcc:	2001      	movs	r0, #1
    4bce:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
    4bd2:	f854 0fcc 	ldr.w	r0, [r4, #204]!
    4bd6:	2101      	movs	r1, #1
    4bd8:	f7fe f838 	bl	2c4c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    4bdc:	6820      	ldr	r0, [r4, #0]
    4bde:	f8c0 5290 	str.w	r5, [r0, #656]	; 0x290
    4be2:	f8c0 6294 	str.w	r6, [r0, #660]	; 0x294
    4be6:	6821      	ldr	r1, [r4, #0]
    4be8:	f814 0c04 	ldrb.w	r0, [r4, #-4]
    4bec:	f881 02a4 	strb.w	r0, [r1, #676]	; 0x2a4
    4bf0:	6820      	ldr	r0, [r4, #0]
    4bf2:	f8c0 72a8 	str.w	r7, [r0, #680]	; 0x2a8
    4bf6:	6820      	ldr	r0, [r4, #0]
    4bf8:	e9c0 56a6 	strd	r5, r6, [r0, #664]	; 0x298
    4bfc:	f854 09cc 	ldr.w	r0, [r4], #-204
    4c00:	f00a fc9c 	bl	f53c <__kernel_ram_size+0x44>
    4c04:	b110      	cbz	r0, 4c0c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x64>
    4c06:	f240 7164 	movw	r1, #1892	; 0x764
    4c0a:	e00b      	b.n	4c24 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7c>
    4c0c:	f00a fafa 	bl	f204 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x22a>
    4c10:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    4c14:	4642      	mov	r2, r8
    4c16:	4906      	ldr	r1, [pc, #24]	; (4c30 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x88>)
    4c18:	f006 f956 	bl	aec8 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>
    4c1c:	2800      	cmp	r0, #0
    4c1e:	d104      	bne.n	4c2a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x82>
    4c20:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
    4c24:	2030      	movs	r0, #48	; 0x30
    4c26:	f7fc fa81 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4c2e:	0000      	.short	0x0000
    4c30:	0000f43f 	.word	0x0000f43f
    4c34:	b510      	push	{r4, lr}
    4c36:	280c      	cmp	r0, #12
    4c38:	d304      	bcc.n	4c44 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x9c>
    4c3a:	f240 315b 	movw	r1, #859	; 0x35b
    4c3e:	2006      	movs	r0, #6
    4c40:	f7fc fa74 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c44:	4901      	ldr	r1, [pc, #4]	; (4c4c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xa4>)
    4c46:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    4c4a:	bd10      	pop	{r4, pc}
    4c4c:	00005404 	.word	0x00005404
    4c50:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    4c54:	4d16      	ldr	r5, [pc, #88]	; (4cb0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x108>)
    4c56:	2001      	movs	r0, #1
    4c58:	7068      	strb	r0, [r5, #1]
    4c5a:	2400      	movs	r4, #0
    4c5c:	f64f 76ff 	movw	r6, #65535	; 0xffff
    4c60:	e00b      	b.n	4c7a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xd2>
    4c62:	2100      	movs	r1, #0
    4c64:	f7fc fd6a 	bl	173c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    4c68:	0007      	movs	r7, r0
    4c6a:	d009      	beq.n	4c80 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xd8>
    4c6c:	f897 02a4 	ldrb.w	r0, [r7, #676]	; 0x2a4
    4c70:	f006 f95a 	bl	af28 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    4c74:	4638      	mov	r0, r7
    4c76:	f00a fb9f 	bl	f3b8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3de>
    4c7a:	9400      	str	r4, [sp, #0]
    4c7c:	9401      	str	r4, [sp, #4]
    4c7e:	e00e      	b.n	4c9e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xf6>
    4c80:	f240 1125 	movw	r1, #293	; 0x125
    4c84:	2030      	movs	r0, #48	; 0x30
    4c86:	f7fc fa51 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c8a:	9800      	ldr	r0, [sp, #0]
    4c8c:	b138      	cbz	r0, 4c9e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xf6>
    4c8e:	f890 12a4 	ldrb.w	r1, [r0, #676]	; 0x2a4
    4c92:	2920      	cmp	r1, #32
    4c94:	d003      	beq.n	4c9e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xf6>
    4c96:	8800      	ldrh	r0, [r0, #0]
    4c98:	42b0      	cmp	r0, r6
    4c9a:	d1e2      	bne.n	4c62 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xba>
    4c9c:	e004      	b.n	4ca8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x100>
    4c9e:	4668      	mov	r0, sp
    4ca0:	f7fc fd9e 	bl	17e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4ca4:	2800      	cmp	r0, #0
    4ca6:	d0f0      	beq.n	4c8a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0xe2>
    4ca8:	706c      	strb	r4, [r5, #1]
    4caa:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    4cae:	0000      	.short	0x0000
    4cb0:	20000108 	.word	0x20000108
    4cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4cb8:	4604      	mov	r4, r0
    4cba:	4839      	ldr	r0, [pc, #228]	; (4da0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f8>)
    4cbc:	461e      	mov	r6, r3
    4cbe:	4690      	mov	r8, r2
    4cc0:	7880      	ldrb	r0, [r0, #2]
    4cc2:	4689      	mov	r9, r1
    4cc4:	2500      	movs	r5, #0
    4cc6:	2800      	cmp	r0, #0
    4cc8:	d063      	beq.n	4d92 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ea>
    4cca:	f006 ff89 	bl	bbe0 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    4cce:	b3e0      	cbz	r0, 4d4a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a2>
    4cd0:	f8b4 0248 	ldrh.w	r0, [r4, #584]	; 0x248
    4cd4:	2802      	cmp	r0, #2
    4cd6:	d35c      	bcc.n	4d92 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ea>
    4cd8:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4cdc:	2802      	cmp	r0, #2
    4cde:	d058      	beq.n	4d92 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ea>
    4ce0:	f894 0272 	ldrb.w	r0, [r4, #626]	; 0x272
    4ce4:	bb88      	cbnz	r0, 4d4a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a2>
    4ce6:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    4cea:	f7ff ffa3 	bl	4c34 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c>
    4cee:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    4cf2:	b281      	uxth	r1, r0
    4cf4:	8031      	strh	r1, [r6, #0]
    4cf6:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4cfa:	2700      	movs	r7, #0
    4cfc:	2801      	cmp	r0, #1
    4cfe:	d00d      	beq.n	4d1c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x174>
    4d00:	6920      	ldr	r0, [r4, #16]
    4d02:	f006 ffad 	bl	bc60 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4d06:	f8b4 2236 	ldrh.w	r2, [r4, #566]	; 0x236
    4d0a:	4442      	add	r2, r8
    4d0c:	eba2 0109 	sub.w	r1, r2, r9
    4d10:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    4d14:	1a82      	subs	r2, r0, r2
    4d16:	fb01 7502 	mla	r5, r1, r2, r7
    4d1a:	e035      	b.n	4d88 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1e0>
    4d1c:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
    4d20:	2803      	cmp	r0, #3
    4d22:	d039      	beq.n	4d98 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1f0>
    4d24:	2101      	movs	r1, #1
    4d26:	2000      	movs	r0, #0
    4d28:	f009 f8cf 	bl	deca <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    4d2c:	6a21      	ldr	r1, [r4, #32]
    4d2e:	1847      	adds	r7, r0, r1
    4d30:	8831      	ldrh	r1, [r6, #0]
    4d32:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4d36:	f006 ff93 	bl	bc60 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4d3a:	f8d4 2250 	ldr.w	r2, [r4, #592]	; 0x250
    4d3e:	f8d4 1258 	ldr.w	r1, [r4, #600]	; 0x258
    4d42:	1a82      	subs	r2, r0, r2
    4d44:	fb01 5502 	mla	r5, r1, r2, r5
    4d48:	e000      	b.n	4d4c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1a4>
    4d4a:	e022      	b.n	4d92 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x1ea>
    4d4c:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    4d50:	8831      	ldrh	r1, [r6, #0]
    4d52:	4638      	mov	r0, r7
    4d54:	f006 ff84 	bl	bc60 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4d58:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    4d5c:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    4d60:	1a41      	subs	r1, r0, r1
    4d62:	440d      	add	r5, r1
    4d64:	8831      	ldrh	r1, [r6, #0]
    4d66:	6920      	ldr	r0, [r4, #16]
    4d68:	f006 ff7a 	bl	bc60 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4d6c:	f8b4 2236 	ldrh.w	r2, [r4, #566]	; 0x236
    4d70:	4442      	add	r2, r8
    4d72:	eba2 0109 	sub.w	r1, r2, r9
    4d76:	f8d4 2258 	ldr.w	r2, [r4, #600]	; 0x258
    4d7a:	1a89      	subs	r1, r1, r2
    4d7c:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    4d80:	1a82      	subs	r2, r0, r2
    4d82:	1e49      	subs	r1, r1, #1
    4d84:	fb01 5502 	mla	r5, r1, r2, r5
    4d88:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    4d8c:	2001      	movs	r0, #1
    4d8e:	f884 0272 	strb.w	r0, [r4, #626]	; 0x272
    4d92:	4628      	mov	r0, r5
    4d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4d98:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4d9c:	e7c6      	b.n	4d2c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x184>
    4d9e:	0000      	.short	0x0000
    4da0:	20000108 	.word	0x20000108
    4da4:	b538      	push	{r3, r4, r5, lr}
    4da6:	2500      	movs	r5, #0
    4da8:	4604      	mov	r4, r0
    4daa:	2901      	cmp	r1, #1
    4dac:	d102      	bne.n	4db4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x20c>
    4dae:	4810      	ldr	r0, [pc, #64]	; (4df0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x248>)
    4db0:	7840      	ldrb	r0, [r0, #1]
    4db2:	b170      	cbz	r0, 4dd2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x22a>
    4db4:	2004      	movs	r0, #4
    4db6:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    4dba:	bf00      	nop
    4dbc:	f00a fa22 	bl	f204 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x22a>
    4dc0:	f8a4 52a2 	strh.w	r5, [r4, #674]	; 0x2a2
    4dc4:	f8b4 0094 	ldrh.w	r0, [r4, #148]	; 0x94
    4dc8:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    4dcc:	f884 5271 	strb.w	r5, [r4, #625]	; 0x271
    4dd0:	bd38      	pop	{r3, r4, r5, pc}
    4dd2:	9500      	str	r5, [sp, #0]
    4dd4:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    4dd8:	2301      	movs	r3, #1
    4dda:	2200      	movs	r2, #0
    4ddc:	4620      	mov	r0, r4
    4dde:	f000 f809 	bl	4df4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x24c>
    4de2:	2800      	cmp	r0, #0
    4de4:	d0ea      	beq.n	4dbc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x214>
    4de6:	f240 7121 	movw	r1, #1825	; 0x721
    4dea:	2030      	movs	r0, #48	; 0x30
    4dec:	f7fc f99e 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4df0:	20000108 	.word	0x20000108
    4df4:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4df8:	b08b      	sub	sp, #44	; 0x2c
    4dfa:	4604      	mov	r4, r0
    4dfc:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    4e00:	4699      	mov	r9, r3
    4e02:	460f      	mov	r7, r1
    4e04:	9307      	str	r3, [sp, #28]
    4e06:	9005      	str	r0, [sp, #20]
    4e08:	f00b fc38 	bl	1067c <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    4e0c:	4605      	mov	r5, r0
    4e0e:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    4e12:	f7ff ff0f 	bl	4c34 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c>
    4e16:	4428      	add	r0, r5
    4e18:	f8ad 0004 	strh.w	r0, [sp, #4]
    4e1c:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    4e20:	280d      	cmp	r0, #13
    4e22:	d004      	beq.n	4e2e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x286>
    4e24:	2000      	movs	r0, #0
    4e26:	9008      	str	r0, [sp, #32]
    4e28:	980d      	ldr	r0, [sp, #52]	; 0x34
    4e2a:	b110      	cbz	r0, 4e32 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x28a>
    4e2c:	e02e      	b.n	4e8c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2e4>
    4e2e:	2001      	movs	r0, #1
    4e30:	e7f9      	b.n	4e26 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x27e>
    4e32:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4e36:	2803      	cmp	r0, #3
    4e38:	d128      	bne.n	4e8c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2e4>
    4e3a:	9808      	ldr	r0, [sp, #32]
    4e3c:	b330      	cbz	r0, 4e8c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2e4>
    4e3e:	f8b4 02cc 	ldrh.w	r0, [r4, #716]	; 0x2cc
    4e42:	42b8      	cmp	r0, r7
    4e44:	d122      	bne.n	4e8c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x2e4>
    4e46:	f8d4 0264 	ldr.w	r0, [r4, #612]	; 0x264
    4e4a:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    4e4e:	6920      	ldr	r0, [r4, #16]
    4e50:	f8c4 0254 	str.w	r0, [r4, #596]	; 0x254
    4e54:	f8b4 02a2 	ldrh.w	r0, [r4, #674]	; 0x2a2
    4e58:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    4e5c:	4408      	add	r0, r1
    4e5e:	f8c4 0258 	str.w	r0, [r4, #600]	; 0x258
    4e62:	4620      	mov	r0, r4
    4e64:	f000 fada 	bl	541c <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>
    4e68:	f8d4 02d0 	ldr.w	r0, [r4, #720]	; 0x2d0
    4e6c:	6220      	str	r0, [r4, #32]
    4e6e:	f8b4 02ce 	ldrh.w	r0, [r4, #718]	; 0x2ce
    4e72:	84a0      	strh	r0, [r4, #36]	; 0x24
    4e74:	f8d4 02d4 	ldr.w	r0, [r4, #724]	; 0x2d4
    4e78:	6120      	str	r0, [r4, #16]
    4e7a:	f8b4 02d8 	ldrh.w	r0, [r4, #728]	; 0x2d8
    4e7e:	8320      	strh	r0, [r4, #24]
    4e80:	f8b4 02da 	ldrh.w	r0, [r4, #730]	; 0x2da
    4e84:	8360      	strh	r0, [r4, #26]
    4e86:	2002      	movs	r0, #2
    4e88:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    4e8c:	f8b4 0094 	ldrh.w	r0, [r4, #148]	; 0x94
    4e90:	f504 751e 	add.w	r5, r4, #632	; 0x278
    4e94:	1a38      	subs	r0, r7, r0
    4e96:	fa0f fa80 	sxth.w	sl, r0
    4e9a:	f8b4 02a0 	ldrh.w	r0, [r4, #672]	; 0x2a0
    4e9e:	1a38      	subs	r0, r7, r0
    4ea0:	fa0f f880 	sxth.w	r8, r0
    4ea4:	f1b8 0f00 	cmp.w	r8, #0
    4ea8:	da08      	bge.n	4ebc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x314>
    4eaa:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
    4eae:	f8d4 1294 	ldr.w	r1, [r4, #660]	; 0x294
    4eb2:	46d0      	mov	r8, sl
    4eb4:	e9c4 01a6 	strd	r0, r1, [r4, #664]	; 0x298
    4eb8:	2001      	movs	r0, #1
    4eba:	9007      	str	r0, [sp, #28]
    4ebc:	ab01      	add	r3, sp, #4
    4ebe:	4652      	mov	r2, sl
    4ec0:	4641      	mov	r1, r8
    4ec2:	4620      	mov	r0, r4
    4ec4:	f7ff fef6 	bl	4cb4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x10c>
    4ec8:	9004      	str	r0, [sp, #16]
    4eca:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    4ece:	f8df b334 	ldr.w	fp, [pc, #820]	; 5204 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x65c>
    4ed2:	b140      	cbz	r0, 4ee6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x33e>
    4ed4:	2801      	cmp	r0, #1
    4ed6:	d07d      	beq.n	4fd4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x42c>
    4ed8:	2802      	cmp	r0, #2
    4eda:	d051      	beq.n	4f80 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x3d8>
    4edc:	2803      	cmp	r0, #3
    4ede:	d07a      	beq.n	4fd6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x42e>
    4ee0:	f44f 61b2 	mov.w	r1, #1424	; 0x590
    4ee4:	e18a      	b.n	51fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x654>
    4ee6:	2101      	movs	r1, #1
    4ee8:	2000      	movs	r0, #0
    4eea:	f008 ffee 	bl	deca <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    4eee:	4606      	mov	r6, r0
    4ef0:	6a20      	ldr	r0, [r4, #32]
    4ef2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4ef6:	4430      	add	r0, r6
    4ef8:	f006 feb2 	bl	bc60 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4efc:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    4f00:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4f04:	6920      	ldr	r0, [r4, #16]
    4f06:	f006 feab 	bl	bc60 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4f0a:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    4f0e:	a907      	add	r1, sp, #28
    4f10:	a806      	add	r0, sp, #24
    4f12:	f003 f8e7 	bl	80e4 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>
    4f16:	e9d4 01a6 	ldrd	r0, r1, [r4, #664]	; 0x298
    4f1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    4f1e:	f006 fac3 	bl	b4a8 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>
    4f22:	4682      	mov	sl, r0
    4f24:	4620      	mov	r0, r4
    4f26:	f00a fafd 	bl	f524 <__kernel_ram_size+0x2c>
    4f2a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4f2e:	f8d4 82a8 	ldr.w	r8, [r4, #680]	; 0x2a8
    4f32:	f003 fa6d 	bl	8410 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    4f36:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    4f3a:	4401      	add	r1, r0
    4f3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4f40:	fbb1 f0f0 	udiv	r0, r1, r0
    4f44:	6a21      	ldr	r1, [r4, #32]
    4f46:	f8d4 2260 	ldr.w	r2, [r4, #608]	; 0x260
    4f4a:	4431      	add	r1, r6
    4f4c:	1a08      	subs	r0, r1, r0
    4f4e:	1a81      	subs	r1, r0, r2
    4f50:	4441      	add	r1, r8
    4f52:	3920      	subs	r1, #32
    4f54:	eba1 060a 	sub.w	r6, r1, sl
    4f58:	0050      	lsls	r0, r2, #1
    4f5a:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    4f5c:	3060      	adds	r0, #96	; 0x60
    4f5e:	4401      	add	r1, r0
    4f60:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    4f64:	f00a f9b0 	bl	f2c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ee>
    4f68:	3022      	adds	r0, #34	; 0x22
    4f6a:	f8cb 000c 	str.w	r0, [fp, #12]
    4f6e:	f8d4 02a8 	ldr.w	r0, [r4, #680]	; 0x2a8
    4f72:	1a30      	subs	r0, r6, r0
    4f74:	f5b0 7fe8 	cmp.w	r0, #464	; 0x1d0
    4f78:	d258      	bcs.n	502c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x484>
    4f7a:	f240 5129 	movw	r1, #1321	; 0x529
    4f7e:	e13d      	b.n	51fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x654>
    4f80:	6a21      	ldr	r1, [r4, #32]
    4f82:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4f86:	4408      	add	r0, r1
    4f88:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4f8c:	f006 fe68 	bl	bc60 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4f90:	f8c4 0260 	str.w	r0, [r4, #608]	; 0x260
    4f94:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    4f98:	6920      	ldr	r0, [r4, #16]
    4f9a:	f006 fe61 	bl	bc60 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    4f9e:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    4fa2:	4620      	mov	r0, r4
    4fa4:	f00a fabe 	bl	f524 <__kernel_ram_size+0x2c>
    4fa8:	f8b4 0236 	ldrh.w	r0, [r4, #566]	; 0x236
    4fac:	bb10      	cbnz	r0, 4ff4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x44c>
    4fae:	f1b9 0f00 	cmp.w	r9, #0
    4fb2:	d01f      	beq.n	4ff4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x44c>
    4fb4:	f894 806b 	ldrb.w	r8, [r4, #107]	; 0x6b
    4fb8:	4640      	mov	r0, r8
    4fba:	f003 fa29 	bl	8410 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    4fbe:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    4fc2:	4401      	add	r1, r0
    4fc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4fc8:	fbb1 f0f0 	udiv	r0, r1, r0
    4fcc:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    4fd0:	4408      	add	r0, r1
    4fd2:	e001      	b.n	4fd8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x430>
    4fd4:	e02b      	b.n	502e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x486>
    4fd6:	e047      	b.n	5068 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4c0>
    4fd8:	6a22      	ldr	r2, [r4, #32]
    4fda:	f8d4 1254 	ldr.w	r1, [r4, #596]	; 0x254
    4fde:	4411      	add	r1, r2
    4fe0:	1a0e      	subs	r6, r1, r0
    4fe2:	4640      	mov	r0, r8
    4fe4:	f003 f9e6 	bl	83b4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    4fe8:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    4fec:	1a08      	subs	r0, r1, r0
    4fee:	4406      	add	r6, r0
    4ff0:	3e20      	subs	r6, #32
    4ff2:	e006      	b.n	5002 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x45a>
    4ff4:	6a21      	ldr	r1, [r4, #32]
    4ff6:	f8d4 0254 	ldr.w	r0, [r4, #596]	; 0x254
    4ffa:	4408      	add	r0, r1
    4ffc:	f8d4 1260 	ldr.w	r1, [r4, #608]	; 0x260
    5000:	1a46      	subs	r6, r0, r1
    5002:	f8d4 2258 	ldr.w	r2, [r4, #600]	; 0x258
    5006:	f8d4 1250 	ldr.w	r1, [r4, #592]	; 0x250
    500a:	f8d4 0260 	ldr.w	r0, [r4, #608]	; 0x260
    500e:	fb01 0002 	mla	r0, r1, r2, r0
    5012:	0040      	lsls	r0, r0, #1
    5014:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    5016:	3060      	adds	r0, #96	; 0x60
    5018:	4401      	add	r1, r0
    501a:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    501e:	f00a f953 	bl	f2c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ee>
    5022:	f8cb 000c 	str.w	r0, [fp, #12]
    5026:	2001      	movs	r0, #1
    5028:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    502c:	e061      	b.n	50f2 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x54a>
    502e:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    5032:	6920      	ldr	r0, [r4, #16]
    5034:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    5038:	1a86      	subs	r6, r0, r2
    503a:	eb01 000a 	add.w	r0, r1, sl
    503e:	f8d4 1258 	ldr.w	r1, [r4, #600]	; 0x258
    5042:	f8d4 c250 	ldr.w	ip, [r4, #592]	; 0x250
    5046:	1a40      	subs	r0, r0, r1
    5048:	f8d4 3260 	ldr.w	r3, [r4, #608]	; 0x260
    504c:	1e40      	subs	r0, r0, #1
    504e:	fb0c 3101 	mla	r1, ip, r1, r3
    5052:	fb00 1002 	mla	r0, r0, r2, r1
    5056:	0040      	lsls	r0, r0, #1
    5058:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    505a:	3060      	adds	r0, #96	; 0x60
    505c:	4401      	add	r1, r0
    505e:	fb06 f608 	mul.w	r6, r6, r8
    5062:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    5066:	e040      	b.n	50ea <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x542>
    5068:	6920      	ldr	r0, [r4, #16]
    506a:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    506e:	fb00 f008 	mul.w	r0, r0, r8
    5072:	fb08 0611 	mls	r6, r8, r1, r0
    5076:	f894 009d 	ldrb.w	r0, [r4, #157]	; 0x9d
    507a:	2825      	cmp	r0, #37	; 0x25
    507c:	d003      	beq.n	5086 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4de>
    507e:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    5082:	2825      	cmp	r0, #37	; 0x25
    5084:	d109      	bne.n	509a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f2>
    5086:	f8b4 02cc 	ldrh.w	r0, [r4, #716]	; 0x2cc
    508a:	1a38      	subs	r0, r7, r0
    508c:	b200      	sxth	r0, r0
    508e:	2800      	cmp	r0, #0
    5090:	db03      	blt.n	509a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f2>
    5092:	f894 02cf 	ldrb.w	r0, [r4, #719]	; 0x2cf
    5096:	b100      	cbz	r0, 509a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x4f2>
    5098:	9005      	str	r0, [sp, #20]
    509a:	9807      	ldr	r0, [sp, #28]
    509c:	b1d8      	cbz	r0, 50d6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x52e>
    509e:	f8b4 0236 	ldrh.w	r0, [r4, #566]	; 0x236
    50a2:	b9c0      	cbnz	r0, 50d6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x52e>
    50a4:	f8d4 02ac 	ldr.w	r0, [r4, #684]	; 0x2ac
    50a8:	2800      	cmp	r0, #0
    50aa:	d07d      	beq.n	51a8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x600>
    50ac:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    50b0:	f003 f9ae 	bl	8410 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    50b4:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    50b8:	4401      	add	r1, r0
    50ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    50be:	fbb1 f0f0 	udiv	r0, r1, r0
    50c2:	1a36      	subs	r6, r6, r0
    50c4:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    50c8:	f003 f974 	bl	83b4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    50cc:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    50d0:	1a08      	subs	r0, r1, r0
    50d2:	4406      	add	r6, r0
    50d4:	3e20      	subs	r6, #32
    50d6:	f8b4 1236 	ldrh.w	r1, [r4, #566]	; 0x236
    50da:	eb01 000a 	add.w	r0, r1, sl
    50de:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    50e2:	4348      	muls	r0, r1
    50e4:	0041      	lsls	r1, r0, #1
    50e6:	3160      	adds	r1, #96	; 0x60
    50e8:	9805      	ldr	r0, [sp, #20]
    50ea:	f00a f8ed 	bl	f2c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ee>
    50ee:	f8cb 000c 	str.w	r0, [fp, #12]
    50f2:	9804      	ldr	r0, [sp, #16]
    50f4:	f8db 200c 	ldr.w	r2, [fp, #12]
    50f8:	1a31      	subs	r1, r6, r0
    50fa:	f8d4 6264 	ldr.w	r6, [r4, #612]	; 0x264
    50fe:	6920      	ldr	r0, [r4, #16]
    5100:	1b80      	subs	r0, r0, r6
    5102:	f2a0 205a 	subw	r0, r0, #602	; 0x25a
    5106:	f8cb 0010 	str.w	r0, [fp, #16]
    510a:	4282      	cmp	r2, r0
    510c:	d800      	bhi.n	5110 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x568>
    510e:	4610      	mov	r0, r2
    5110:	f8c4 0230 	str.w	r0, [r4, #560]	; 0x230
    5114:	2600      	movs	r6, #0
    5116:	702e      	strb	r6, [r5, #0]
    5118:	206e      	movs	r0, #110	; 0x6e
    511a:	8128      	strh	r0, [r5, #8]
    511c:	e9d4 20a6 	ldrd	r2, r0, [r4, #664]	; 0x298
    5120:	1851      	adds	r1, r2, r1
    5122:	4170      	adcs	r0, r6
    5124:	e9c5 1004 	strd	r1, r0, [r5, #16]
    5128:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    512c:	f009 fa01 	bl	e532 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    5130:	f8d4 1230 	ldr.w	r1, [r4, #560]	; 0x230
    5134:	4408      	add	r0, r1
    5136:	6068      	str	r0, [r5, #4]
    5138:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
    513c:	e9c4 01a6 	strd	r0, r1, [r4, #664]	; 0x298
    5140:	f8a4 72a0 	strh.w	r7, [r4, #672]	; 0x2a0
    5144:	72ae      	strb	r6, [r5, #10]
    5146:	f8b4 0220 	ldrh.w	r0, [r4, #544]	; 0x220
    514a:	1bc0      	subs	r0, r0, r7
    514c:	b200      	sxth	r0, r0
    514e:	2800      	cmp	r0, #0
    5150:	dd01      	ble.n	5156 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5ae>
    5152:	2002      	movs	r0, #2
    5154:	72a8      	strb	r0, [r5, #10]
    5156:	9808      	ldr	r0, [sp, #32]
    5158:	b338      	cbz	r0, 51aa <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x602>
    515a:	f1b9 0f00 	cmp.w	r9, #0
    515e:	d01c      	beq.n	519a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f2>
    5160:	f8b4 1248 	ldrh.w	r1, [r4, #584]	; 0x248
    5164:	b3f1      	cbz	r1, 51e4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x63c>
    5166:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    516a:	bf00      	nop
    516c:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    5170:	f894 224c 	ldrb.w	r2, [r4, #588]	; 0x24c
    5174:	1c40      	adds	r0, r0, #1
    5176:	4342      	muls	r2, r0
    5178:	428a      	cmp	r2, r1
    517a:	d20e      	bcs.n	519a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f2>
    517c:	7aa8      	ldrb	r0, [r5, #10]
    517e:	b160      	cbz	r0, 519a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f2>
    5180:	72ae      	strb	r6, [r5, #10]
    5182:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    5186:	1c40      	adds	r0, r0, #1
    5188:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    518c:	f7fe f9e0 	bl	3550 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    5190:	f000 0007 	and.w	r0, r0, #7
    5194:	1c40      	adds	r0, r0, #1
    5196:	f884 024c 	strb.w	r0, [r4, #588]	; 0x24c
    519a:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    519e:	4629      	mov	r1, r5
    51a0:	f00a f8a4 	bl	f2ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x312>
    51a4:	b340      	cbz	r0, 51f8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x650>
    51a6:	e001      	b.n	51ac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x604>
    51a8:	e009      	b.n	51be <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x616>
    51aa:	e00b      	b.n	51c4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x61c>
    51ac:	980d      	ldr	r0, [sp, #52]	; 0x34
    51ae:	f080 0001 	eor.w	r0, r0, #1
    51b2:	f884 0270 	strb.w	r0, [r4, #624]	; 0x270
    51b6:	2000      	movs	r0, #0
    51b8:	b00f      	add	sp, #60	; 0x3c
    51ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    51be:	f240 517b 	movw	r1, #1403	; 0x57b
    51c2:	e01b      	b.n	51fc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x654>
    51c4:	f1b9 0f00 	cmp.w	r9, #0
    51c8:	d1ca      	bne.n	5160 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5b8>
    51ca:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    51ce:	2800      	cmp	r0, #0
    51d0:	d0e3      	beq.n	519a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f2>
    51d2:	f8d4 1264 	ldr.w	r1, [r4, #612]	; 0x264
    51d6:	6920      	ldr	r0, [r4, #16]
    51d8:	1a41      	subs	r1, r0, r1
    51da:	4628      	mov	r0, r5
    51dc:	f008 fe8b 	bl	def6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    51e0:	0400      	lsls	r0, r0, #16
    51e2:	e000      	b.n	51e6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x63e>
    51e4:	e006      	b.n	51f4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x64c>
    51e6:	0c00      	lsrs	r0, r0, #16
    51e8:	d0d7      	beq.n	519a <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5f2>
    51ea:	9918      	ldr	r1, [sp, #96]	; 0x60
    51ec:	b101      	cbz	r1, 51f0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x648>
    51ee:	8008      	strh	r0, [r1, #0]
    51f0:	2001      	movs	r0, #1
    51f2:	e7e1      	b.n	51b8 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x610>
    51f4:	2000      	movs	r0, #0
    51f6:	e7b9      	b.n	516c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x5c4>
    51f8:	f240 51d9 	movw	r1, #1497	; 0x5d9
    51fc:	2030      	movs	r0, #48	; 0x30
    51fe:	f7fb ff95 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5202:	0000      	.short	0x0000
    5204:	20000108 	.word	0x20000108
    5208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    520c:	4605      	mov	r5, r0
    520e:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    5212:	2128      	movs	r1, #40	; 0x28
    5214:	f009 ff48 	bl	f0a8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xce>
    5218:	f500 782e 	add.w	r8, r0, #696	; 0x2b8
    521c:	f00b fba5 	bl	1096a <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    5220:	286e      	cmp	r0, #110	; 0x6e
    5222:	d800      	bhi.n	5226 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x67e>
    5224:	206e      	movs	r0, #110	; 0x6e
    5226:	f8d5 1264 	ldr.w	r1, [r5, #612]	; 0x264
    522a:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
    522e:	692a      	ldr	r2, [r5, #16]
    5230:	440b      	add	r3, r1
    5232:	429a      	cmp	r2, r3
    5234:	d903      	bls.n	523e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x696>
    5236:	1a51      	subs	r1, r2, r1
    5238:	1a0c      	subs	r4, r1, r0
    523a:	346e      	adds	r4, #110	; 0x6e
    523c:	e000      	b.n	5240 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x698>
    523e:	2400      	movs	r4, #0
    5240:	4f1a      	ldr	r7, [pc, #104]	; (52ac <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x704>)
    5242:	7838      	ldrb	r0, [r7, #0]
    5244:	b918      	cbnz	r0, 524e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6a6>
    5246:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    5248:	42a0      	cmp	r0, r4
    524a:	d800      	bhi.n	524e <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6a6>
    524c:	4604      	mov	r4, r0
    524e:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    5252:	f009 f96e 	bl	e532 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    5256:	4606      	mov	r6, r0
    5258:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    525c:	f00a f955 	bl	f50a <__kernel_ram_size+0x12>
    5260:	f8d5 1230 	ldr.w	r1, [r5, #560]	; 0x230
    5264:	4430      	add	r0, r6
    5266:	1846      	adds	r6, r0, r1
    5268:	1ba4      	subs	r4, r4, r6
    526a:	2c00      	cmp	r4, #0
    526c:	dc00      	bgt.n	5270 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6c8>
    526e:	2400      	movs	r4, #0
    5270:	2002      	movs	r0, #2
    5272:	f004 ff45 	bl	a100 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    5276:	4284      	cmp	r4, r0
    5278:	d300      	bcc.n	527c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6d4>
    527a:	4604      	mov	r4, r0
    527c:	2102      	movs	r1, #2
    527e:	4620      	mov	r0, r4
    5280:	f004 fe46 	bl	9f10 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    5284:	b900      	cbnz	r0, 5288 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x6e0>
    5286:	4426      	add	r6, r4
    5288:	4642      	mov	r2, r8
    528a:	4631      	mov	r1, r6
    528c:	4628      	mov	r0, r5
    528e:	f009 f8ef 	bl	e470 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    5292:	60b8      	str	r0, [r7, #8]
    5294:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    5298:	f00a f937 	bl	f50a <__kernel_ram_size+0x12>
    529c:	1a30      	subs	r0, r6, r0
    529e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    52a2:	f2a0 106f 	subw	r0, r0, #367	; 0x16f
    52a6:	f006 b85b 	b.w	b360 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    52aa:	0000      	.short	0x0000
    52ac:	20000108 	.word	0x20000108
    52b0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    52b2:	4604      	mov	r4, r0
    52b4:	f00b fb62 	bl	1097c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    52b8:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
    52bc:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
    52c0:	1ac0      	subs	r0, r0, r3
    52c2:	eb61 0102 	sbc.w	r1, r1, r2
    52c6:	2200      	movs	r2, #0
    52c8:	4613      	mov	r3, r2
    52ca:	1a12      	subs	r2, r2, r0
    52cc:	418b      	sbcs	r3, r1
    52ce:	db02      	blt.n	52d6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x72e>
    52d0:	f240 6156 	movw	r1, #1622	; 0x656
    52d4:	e04d      	b.n	5372 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7ca>
    52d6:	1c42      	adds	r2, r0, #1
    52d8:	f171 0100 	sbcs.w	r1, r1, #0
    52dc:	db02      	blt.n	52e4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x73c>
    52de:	f240 6157 	movw	r1, #1623	; 0x657
    52e2:	e046      	b.n	5372 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7ca>
    52e4:	6922      	ldr	r2, [r4, #16]
    52e6:	2100      	movs	r1, #0
    52e8:	b10a      	cbz	r2, 52ee <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x746>
    52ea:	fbb0 f1f2 	udiv	r1, r0, r2
    52ee:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    52f2:	280d      	cmp	r0, #13
    52f4:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    52f8:	d01b      	beq.n	5332 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x78a>
    52fa:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
    52fe:	1853      	adds	r3, r2, r1
    5300:	1ac3      	subs	r3, r0, r3
    5302:	b21b      	sxth	r3, r3
    5304:	2b00      	cmp	r3, #0
    5306:	db01      	blt.n	530c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x764>
    5308:	1c40      	adds	r0, r0, #1
    530a:	e001      	b.n	5310 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x768>
    530c:	1c49      	adds	r1, r1, #1
    530e:	1850      	adds	r0, r2, r1
    5310:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    5314:	f894 0271 	ldrb.w	r0, [r4, #625]	; 0x271
    5318:	f88d 0000 	strb.w	r0, [sp]
    531c:	9800      	ldr	r0, [sp, #0]
    531e:	9000      	str	r0, [sp, #0]
    5320:	f89d 0000 	ldrb.w	r0, [sp]
    5324:	b940      	cbnz	r0, 5338 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x790>
    5326:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    532a:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    532e:	4288      	cmp	r0, r1
    5330:	d102      	bne.n	5338 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x790>
    5332:	1c40      	adds	r0, r0, #1
    5334:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    5338:	f8b4 02a2 	ldrh.w	r0, [r4, #674]	; 0x2a2
    533c:	1c40      	adds	r0, r0, #1
    533e:	f8a4 02a2 	strh.w	r0, [r4, #674]	; 0x2a2
    5342:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
    5346:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
    534a:	1a40      	subs	r0, r0, r1
    534c:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    5350:	1e40      	subs	r0, r0, #1
    5352:	4408      	add	r0, r1
    5354:	b285      	uxth	r5, r0
    5356:	e026      	b.n	53a6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7fe>
    5358:	a801      	add	r0, sp, #4
    535a:	2300      	movs	r3, #0
    535c:	9000      	str	r0, [sp, #0]
    535e:	461a      	mov	r2, r3
    5360:	4620      	mov	r0, r4
    5362:	f7ff fd47 	bl	4df4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x24c>
    5366:	2800      	cmp	r0, #0
    5368:	d03a      	beq.n	53e0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x838>
    536a:	2801      	cmp	r0, #1
    536c:	d004      	beq.n	5378 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7d0>
    536e:	f240 6196 	movw	r1, #1686	; 0x696
    5372:	2030      	movs	r0, #48	; 0x30
    5374:	f7fb feda 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5378:	f8b4 026e 	ldrh.w	r0, [r4, #622]	; 0x26e
    537c:	f8b4 1220 	ldrh.w	r1, [r4, #544]	; 0x220
    5380:	1a42      	subs	r2, r0, r1
    5382:	b212      	sxth	r2, r2
    5384:	2a00      	cmp	r2, #0
    5386:	da09      	bge.n	539c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7f4>
    5388:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    538c:	4402      	add	r2, r0
    538e:	1aaa      	subs	r2, r5, r2
    5390:	b212      	sxth	r2, r2
    5392:	2a00      	cmp	r2, #0
    5394:	da02      	bge.n	539c <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7f4>
    5396:	f8a4 126e 	strh.w	r1, [r4, #622]	; 0x26e
    539a:	e004      	b.n	53a6 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7fe>
    539c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    53a0:	4408      	add	r0, r1
    53a2:	f8a4 026e 	strh.w	r0, [r4, #622]	; 0x26e
    53a6:	f8b4 126e 	ldrh.w	r1, [r4, #622]	; 0x26e
    53aa:	1a68      	subs	r0, r5, r1
    53ac:	b200      	sxth	r0, r0
    53ae:	2800      	cmp	r0, #0
    53b0:	dad2      	bge.n	5358 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x7b0>
    53b2:	f894 00a1 	ldrb.w	r0, [r4, #161]	; 0xa1
    53b6:	b188      	cbz	r0, 53dc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x834>
    53b8:	f05f 0008 	movs.w	r0, #8
    53bc:	f884 00bd 	strb.w	r0, [r4, #189]	; 0xbd
    53c0:	2202      	movs	r2, #2
    53c2:	4908      	ldr	r1, [pc, #32]	; (53e4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x83c>)
    53c4:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    53c8:	f009 f81a 	bl	e400 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    53cc:	4620      	mov	r0, r4
    53ce:	f00a f92b 	bl	f628 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    53d2:	4620      	mov	r0, r4
    53d4:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    53d8:	f009 bfee 	b.w	f3b8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3de>
    53dc:	203e      	movs	r0, #62	; 0x3e
    53de:	e7ed      	b.n	53bc <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x814>
    53e0:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    53e2:	0000      	.short	0x0000
    53e4:	0000e6f7 	.word	0x0000e6f7
    53e8:	00000000 	.word	0x00000000
    53ec:	00010000 	.word	0x00010000
    53f0:	00000000 	.word	0x00000000
    53f4:	00010000 	.word	0x00010000
    53f8:	00000000 	.word	0x00000000
    53fc:	00001e14 	.word	0x00001e14
    5400:	00001130 	.word	0x00001130
    5404:	00fa01f4 	.word	0x00fa01f4
    5408:	00640096 	.word	0x00640096
    540c:	0032004b 	.word	0x0032004b
    5410:	0014001e 	.word	0x0014001e
    5414:	0005000a 	.word	0x0005000a
    5418:	00010002 	.word	0x00010002

0000541c <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ>:
    541c:	b510      	push	{r4, lr}
    541e:	4604      	mov	r4, r0
    5420:	f8d0 02d4 	ldr.w	r0, [r0, #724]	; 0x2d4
    5424:	6921      	ldr	r1, [r4, #16]
    5426:	4288      	cmp	r0, r1
    5428:	d109      	bne.n	543e <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    542a:	f8b4 12d8 	ldrh.w	r1, [r4, #728]	; 0x2d8
    542e:	8b22      	ldrh	r2, [r4, #24]
    5430:	4291      	cmp	r1, r2
    5432:	d104      	bne.n	543e <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x22>
    5434:	f8b4 12da 	ldrh.w	r1, [r4, #730]	; 0x2da
    5438:	8b62      	ldrh	r2, [r4, #26]
    543a:	4291      	cmp	r1, r2
    543c:	d014      	beq.n	5468 <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x4c>
    543e:	8821      	ldrh	r1, [r4, #0]
    5440:	f8a4 11ca 	strh.w	r1, [r4, #458]	; 0x1ca
    5444:	f008 fcaf 	bl	dda6 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    5448:	f8a4 01cc 	strh.w	r0, [r4, #460]	; 0x1cc
    544c:	f8b4 02d8 	ldrh.w	r0, [r4, #728]	; 0x2d8
    5450:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    5454:	f8b4 02da 	ldrh.w	r0, [r4, #730]	; 0x2da
    5458:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    545c:	2202      	movs	r2, #2
    545e:	4907      	ldr	r1, [pc, #28]	; (547c <sym_HT64RIVISXSWFJE3LL26YHKQRTRRXKVEDBUUUOQ+0x60>)
    5460:	f504 70df 	add.w	r0, r4, #446	; 0x1be
    5464:	f008 ffe0 	bl	e428 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    5468:	2102      	movs	r1, #2
    546a:	4620      	mov	r0, r4
    546c:	f7fd fbee 	bl	2c4c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    5470:	2000      	movs	r0, #0
    5472:	f804 0f9e 	strb.w	r0, [r4, #158]!
    5476:	2003      	movs	r0, #3
    5478:	70e0      	strb	r0, [r4, #3]
    547a:	bd10      	pop	{r4, pc}
    547c:	0000e785 	.word	0x0000e785

00005480 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>:
    5480:	4806      	ldr	r0, [pc, #24]	; (549c <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x1c>)
    5482:	4905      	ldr	r1, [pc, #20]	; (5498 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x18>)
    5484:	6501      	str	r1, [r0, #80]	; 0x50
    5486:	4906      	ldr	r1, [pc, #24]	; (54a0 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x20>)
    5488:	6541      	str	r1, [r0, #84]	; 0x54
    548a:	4807      	ldr	r0, [pc, #28]	; (54a8 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x28>)
    548c:	4905      	ldr	r1, [pc, #20]	; (54a4 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x24>)
    548e:	6501      	str	r1, [r0, #80]	; 0x50
    5490:	4906      	ldr	r1, [pc, #24]	; (54ac <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI+0x2c>)
    5492:	6541      	str	r1, [r0, #84]	; 0x54
    5494:	4770      	bx	lr
    5496:	0000      	.short	0x0000
    5498:	00006779 	.word	0x00006779
    549c:	20000134 	.word	0x20000134
    54a0:	00006861 	.word	0x00006861
    54a4:	0000e7a7 	.word	0x0000e7a7
    54a8:	200001e0 	.word	0x200001e0
    54ac:	00006cb1 	.word	0x00006cb1

000054b0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>:
    54b0:	481e      	ldr	r0, [pc, #120]	; (552c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x7c>)
    54b2:	491d      	ldr	r1, [pc, #116]	; (5528 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x78>)
    54b4:	6081      	str	r1, [r0, #8]
    54b6:	491e      	ldr	r1, [pc, #120]	; (5530 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x80>)
    54b8:	6041      	str	r1, [r0, #4]
    54ba:	491e      	ldr	r1, [pc, #120]	; (5534 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x84>)
    54bc:	6001      	str	r1, [r0, #0]
    54be:	491e      	ldr	r1, [pc, #120]	; (5538 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x88>)
    54c0:	6281      	str	r1, [r0, #40]	; 0x28
    54c2:	491e      	ldr	r1, [pc, #120]	; (553c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x8c>)
    54c4:	62c1      	str	r1, [r0, #44]	; 0x2c
    54c6:	491e      	ldr	r1, [pc, #120]	; (5540 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x90>)
    54c8:	60c1      	str	r1, [r0, #12]
    54ca:	491e      	ldr	r1, [pc, #120]	; (5544 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x94>)
    54cc:	6181      	str	r1, [r0, #24]
    54ce:	491e      	ldr	r1, [pc, #120]	; (5548 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x98>)
    54d0:	6301      	str	r1, [r0, #48]	; 0x30
    54d2:	491e      	ldr	r1, [pc, #120]	; (554c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0x9c>)
    54d4:	6201      	str	r1, [r0, #32]
    54d6:	491e      	ldr	r1, [pc, #120]	; (5550 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa0>)
    54d8:	64c1      	str	r1, [r0, #76]	; 0x4c
    54da:	491e      	ldr	r1, [pc, #120]	; (5554 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa4>)
    54dc:	6481      	str	r1, [r0, #72]	; 0x48
    54de:	491e      	ldr	r1, [pc, #120]	; (5558 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xa8>)
    54e0:	6441      	str	r1, [r0, #68]	; 0x44
    54e2:	491e      	ldr	r1, [pc, #120]	; (555c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xac>)
    54e4:	6341      	str	r1, [r0, #52]	; 0x34
    54e6:	491e      	ldr	r1, [pc, #120]	; (5560 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb0>)
    54e8:	61c1      	str	r1, [r0, #28]
    54ea:	491e      	ldr	r1, [pc, #120]	; (5564 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb4>)
    54ec:	6241      	str	r1, [r0, #36]	; 0x24
    54ee:	481f      	ldr	r0, [pc, #124]	; (556c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xbc>)
    54f0:	491d      	ldr	r1, [pc, #116]	; (5568 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xb8>)
    54f2:	6081      	str	r1, [r0, #8]
    54f4:	491e      	ldr	r1, [pc, #120]	; (5570 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc0>)
    54f6:	61c1      	str	r1, [r0, #28]
    54f8:	491e      	ldr	r1, [pc, #120]	; (5574 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc4>)
    54fa:	6241      	str	r1, [r0, #36]	; 0x24
    54fc:	491e      	ldr	r1, [pc, #120]	; (5578 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xc8>)
    54fe:	62c1      	str	r1, [r0, #44]	; 0x2c
    5500:	491e      	ldr	r1, [pc, #120]	; (557c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xcc>)
    5502:	6101      	str	r1, [r0, #16]
    5504:	491e      	ldr	r1, [pc, #120]	; (5580 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd0>)
    5506:	6141      	str	r1, [r0, #20]
    5508:	491e      	ldr	r1, [pc, #120]	; (5584 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd4>)
    550a:	6441      	str	r1, [r0, #68]	; 0x44
    550c:	491e      	ldr	r1, [pc, #120]	; (5588 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xd8>)
    550e:	6341      	str	r1, [r0, #52]	; 0x34
    5510:	491e      	ldr	r1, [pc, #120]	; (558c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xdc>)
    5512:	6181      	str	r1, [r0, #24]
    5514:	491e      	ldr	r1, [pc, #120]	; (5590 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe0>)
    5516:	6301      	str	r1, [r0, #48]	; 0x30
    5518:	491e      	ldr	r1, [pc, #120]	; (5594 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe4>)
    551a:	6481      	str	r1, [r0, #72]	; 0x48
    551c:	491e      	ldr	r1, [pc, #120]	; (5598 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xe8>)
    551e:	64c1      	str	r1, [r0, #76]	; 0x4c
    5520:	491e      	ldr	r1, [pc, #120]	; (559c <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA+0xec>)
    5522:	6381      	str	r1, [r0, #56]	; 0x38
    5524:	4770      	bx	lr
    5526:	0000      	.short	0x0000
    5528:	00006bc5 	.word	0x00006bc5
    552c:	20000134 	.word	0x20000134
    5530:	00006561 	.word	0x00006561
    5534:	000065cd 	.word	0x000065cd
    5538:	0000686d 	.word	0x0000686d
    553c:	0000f6a1 	.word	0x0000f6a1
    5540:	0000668d 	.word	0x0000668d
    5544:	00006b9d 	.word	0x00006b9d
    5548:	00006c5d 	.word	0x00006c5d
    554c:	0000672d 	.word	0x0000672d
    5550:	0000e99f 	.word	0x0000e99f
    5554:	0000e957 	.word	0x0000e957
    5558:	00006b15 	.word	0x00006b15
    555c:	00006b49 	.word	0x00006b49
    5560:	00006bd1 	.word	0x00006bd1
    5564:	00006739 	.word	0x00006739
    5568:	0000e767 	.word	0x0000e767
    556c:	200001e0 	.word	0x200001e0
    5570:	00006d9d 	.word	0x00006d9d
    5574:	0000f76f 	.word	0x0000f76f
    5578:	0000f773 	.word	0x0000f773
    557c:	0000f749 	.word	0x0000f749
    5580:	0000f7db 	.word	0x0000f7db
    5584:	00006cf1 	.word	0x00006cf1
    5588:	0000f7b9 	.word	0x0000f7b9
    558c:	00006d29 	.word	0x00006d29
    5590:	0000f7f9 	.word	0x0000f7f9
    5594:	0000e97b 	.word	0x0000e97b
    5598:	0000e9c5 	.word	0x0000e9c5
    559c:	0000f7d7 	.word	0x0000f7d7

000055a0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>:
    55a0:	4806      	ldr	r0, [pc, #24]	; (55bc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x1c>)
    55a2:	4905      	ldr	r1, [pc, #20]	; (55b8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x18>)
    55a4:	6581      	str	r1, [r0, #88]	; 0x58
    55a6:	4906      	ldr	r1, [pc, #24]	; (55c0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x20>)
    55a8:	6601      	str	r1, [r0, #96]	; 0x60
    55aa:	4807      	ldr	r0, [pc, #28]	; (55c8 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x28>)
    55ac:	4905      	ldr	r1, [pc, #20]	; (55c4 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x24>)
    55ae:	6581      	str	r1, [r0, #88]	; 0x58
    55b0:	4906      	ldr	r1, [pc, #24]	; (55cc <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI+0x2c>)
    55b2:	65c1      	str	r1, [r0, #92]	; 0x5c
    55b4:	4770      	bx	lr
    55b6:	0000      	.short	0x0000
    55b8:	000068bd 	.word	0x000068bd
    55bc:	20000134 	.word	0x20000134
    55c0:	000069a1 	.word	0x000069a1
    55c4:	000106b1 	.word	0x000106b1
    55c8:	200001e0 	.word	0x200001e0
    55cc:	0000f799 	.word	0x0000f799

000055d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>:
    55d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    55d2:	4c7c      	ldr	r4, [pc, #496]	; (57c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f4>)
    55d4:	2101      	movs	r1, #1
    55d6:	f1a4 0610 	sub.w	r6, r4, #16
    55da:	7021      	strb	r1, [r4, #0]
    55dc:	2500      	movs	r5, #0
    55de:	6060      	str	r0, [r4, #4]
    55e0:	8075      	strh	r5, [r6, #2]
    55e2:	7075      	strb	r5, [r6, #1]
    55e4:	7035      	strb	r5, [r6, #0]
    55e6:	f880 122b 	strb.w	r1, [r0, #555]	; 0x22b
    55ea:	8800      	ldrh	r0, [r0, #0]
    55ec:	f7fc fa50 	bl	1a90 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    55f0:	b180      	cbz	r0, 5614 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x44>
    55f2:	6860      	ldr	r0, [r4, #4]
    55f4:	8800      	ldrh	r0, [r0, #0]
    55f6:	f7fc fcb3 	bl	1f60 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    55fa:	6860      	ldr	r0, [r4, #4]
    55fc:	8800      	ldrh	r0, [r0, #0]
    55fe:	f7fc fc57 	bl	1eb0 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    5602:	6860      	ldr	r0, [r4, #4]
    5604:	f8b0 1222 	ldrh.w	r1, [r0, #546]	; 0x222
    5608:	b1c9      	cbz	r1, 563e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    560a:	3080      	adds	r0, #128	; 0x80
    560c:	f00a f81b 	bl	f646 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5610:	b118      	cbz	r0, 561a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a>
    5612:	e014      	b.n	563e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    5614:	f640 41b3 	movw	r1, #3251	; 0xcb3
    5618:	e06c      	b.n	56f4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x124>
    561a:	6860      	ldr	r0, [r4, #4]
    561c:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    5620:	f88d 1000 	strb.w	r1, [sp]
    5624:	9900      	ldr	r1, [sp, #0]
    5626:	9100      	str	r1, [sp, #0]
    5628:	f89d 1000 	ldrb.w	r1, [sp]
    562c:	b139      	cbz	r1, 563e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e>
    562e:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    5632:	2301      	movs	r3, #1
    5634:	4619      	mov	r1, r3
    5636:	3080      	adds	r0, #128	; 0x80
    5638:	f008 fbbb 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    563c:	b180      	cbz	r0, 5660 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x90>
    563e:	6860      	ldr	r0, [r4, #4]
    5640:	3080      	adds	r0, #128	; 0x80
    5642:	f00a f800 	bl	f646 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5646:	b128      	cbz	r0, 5654 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x84>
    5648:	6860      	ldr	r0, [r4, #4]
    564a:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    564e:	bf00      	nop
    5650:	f000 fb84 	bl	5d5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x78c>
    5654:	6860      	ldr	r0, [r4, #4]
    5656:	f890 122d 	ldrb.w	r1, [r0, #557]	; 0x22d
    565a:	b189      	cbz	r1, 5680 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0>
    565c:	80b5      	strh	r5, [r6, #4]
    565e:	e01e      	b.n	569e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce>
    5660:	6860      	ldr	r0, [r4, #4]
    5662:	f8a0 50d0 	strh.w	r5, [r0, #208]	; 0xd0
    5666:	f890 1131 	ldrb.w	r1, [r0, #305]	; 0x131
    566a:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    566e:	2100      	movs	r1, #0
    5670:	2002      	movs	r0, #2
    5672:	f000 fe39 	bl	62e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5676:	6860      	ldr	r0, [r4, #4]
    5678:	f880 522a 	strb.w	r5, [r0, #554]	; 0x22a
    567c:	2002      	movs	r0, #2
    567e:	e7e7      	b.n	5650 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80>
    5680:	f890 11c6 	ldrb.w	r1, [r0, #454]	; 0x1c6
    5684:	f88d 1000 	strb.w	r1, [sp]
    5688:	9900      	ldr	r1, [sp, #0]
    568a:	9100      	str	r1, [sp, #0]
    568c:	f89d 1000 	ldrb.w	r1, [sp]
    5690:	b919      	cbnz	r1, 569a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xca>
    5692:	8cc1      	ldrh	r1, [r0, #38]	; 0x26
    5694:	8b02      	ldrh	r2, [r0, #24]
    5696:	4291      	cmp	r1, r2
    5698:	d800      	bhi.n	569c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcc>
    569a:	8b01      	ldrh	r1, [r0, #24]
    569c:	80b1      	strh	r1, [r6, #4]
    569e:	f8b0 1226 	ldrh.w	r1, [r0, #550]	; 0x226
    56a2:	1e49      	subs	r1, r1, #1
    56a4:	b28f      	uxth	r7, r1
    56a6:	f8b0 1228 	ldrh.w	r1, [r0, #552]	; 0x228
    56aa:	4439      	add	r1, r7
    56ac:	f8a0 1228 	strh.w	r1, [r0, #552]	; 0x228
    56b0:	f830 1fcc 	ldrh.w	r1, [r0, #204]!
    56b4:	4439      	add	r1, r7
    56b6:	8001      	strh	r1, [r0, #0]
    56b8:	f001 fba0 	bl	6dfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    56bc:	b120      	cbz	r0, 56c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8>
    56be:	6860      	ldr	r0, [r4, #4]
    56c0:	f850 1fc0 	ldr.w	r1, [r0, #192]!
    56c4:	4439      	add	r1, r7
    56c6:	6001      	str	r1, [r0, #0]
    56c8:	6861      	ldr	r1, [r4, #4]
    56ca:	f8b1 0222 	ldrh.w	r0, [r1, #546]	; 0x222
    56ce:	2801      	cmp	r0, #1
    56d0:	d802      	bhi.n	56d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x108>
    56d2:	1c40      	adds	r0, r0, #1
    56d4:	f8a1 0222 	strh.w	r0, [r1, #546]	; 0x222
    56d8:	b10f      	cbz	r7, 56de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10e>
    56da:	f881 5234 	strb.w	r5, [r1, #564]	; 0x234
    56de:	f881 522a 	strb.w	r5, [r1, #554]	; 0x22a
    56e2:	f8b1 2226 	ldrh.w	r2, [r1, #550]	; 0x226
    56e6:	f101 0080 	add.w	r0, r1, #128	; 0x80
    56ea:	f008 fc8d 	bl	e008 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    56ee:	b120      	cbz	r0, 56fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12a>
    56f0:	f640 41fa 	movw	r1, #3322	; 0xcfa
    56f4:	2031      	movs	r0, #49	; 0x31
    56f6:	f7fb fd19 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    56fa:	6860      	ldr	r0, [r4, #4]
    56fc:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5700:	290a      	cmp	r1, #10
    5702:	d001      	beq.n	5708 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138>
    5704:	290b      	cmp	r1, #11
    5706:	d119      	bne.n	573c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    5708:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
    570c:	f8b0 32cc 	ldrh.w	r3, [r0, #716]	; 0x2cc
    5710:	1ad2      	subs	r2, r2, r3
    5712:	b212      	sxth	r2, r2
    5714:	2a00      	cmp	r2, #0
    5716:	db11      	blt.n	573c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c>
    5718:	f8d0 12ce 	ldr.w	r1, [r0, #718]	; 0x2ce
    571c:	f8c0 10a6 	str.w	r1, [r0, #166]	; 0xa6
    5720:	f890 12d2 	ldrb.w	r1, [r0, #722]	; 0x2d2
    5724:	f880 10aa 	strb.w	r1, [r0, #170]	; 0xaa
    5728:	2103      	movs	r1, #3
    572a:	f7fd fa8f 	bl	2c4c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    572e:	6860      	ldr	r0, [r4, #4]
    5730:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    5734:	21ff      	movs	r1, #255	; 0xff
    5736:	f880 10f4 	strb.w	r1, [r0, #244]	; 0xf4
    573a:	e026      	b.n	578a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    573c:	2925      	cmp	r1, #37	; 0x25
    573e:	d111      	bne.n	5764 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    5740:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    5744:	f8b0 22cc 	ldrh.w	r2, [r0, #716]	; 0x2cc
    5748:	1a89      	subs	r1, r1, r2
    574a:	b209      	sxth	r1, r1
    574c:	2900      	cmp	r1, #0
    574e:	db09      	blt.n	5764 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x194>
    5750:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    5754:	f000 fe82 	bl	645c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
    5758:	2800      	cmp	r0, #0
    575a:	6860      	ldr	r0, [r4, #4]
    575c:	f880 513c 	strb.w	r5, [r0, #316]	; 0x13c
    5760:	d029      	beq.n	57b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    5762:	e012      	b.n	578a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    5764:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    5768:	2925      	cmp	r1, #37	; 0x25
    576a:	d001      	beq.n	5770 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0>
    576c:	2927      	cmp	r1, #39	; 0x27
    576e:	d10c      	bne.n	578a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    5770:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    5774:	f8b0 22cc 	ldrh.w	r2, [r0, #716]	; 0x2cc
    5778:	1a89      	subs	r1, r1, r2
    577a:	b209      	sxth	r1, r1
    577c:	2900      	cmp	r1, #0
    577e:	db04      	blt.n	578a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1ba>
    5780:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
    5784:	f000 fe6a 	bl	645c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe8c>
    5788:	b1a8      	cbz	r0, 57b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1e6>
    578a:	480f      	ldr	r0, [pc, #60]	; (57c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f8>)
    578c:	9000      	str	r0, [sp, #0]
    578e:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    5792:	4b0e      	ldr	r3, [pc, #56]	; (57cc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1fc>)
    5794:	4a0e      	ldr	r2, [pc, #56]	; (57d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x200>)
    5796:	f7fc fc79 	bl	208c <sym_EXF7QYQZRNDSXD5BXX5JHASOOMIXFF6ILEF5NVA>
    579a:	6860      	ldr	r0, [r4, #4]
    579c:	2301      	movs	r3, #1
    579e:	2105      	movs	r1, #5
    57a0:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    57a4:	3080      	adds	r0, #128	; 0x80
    57a6:	f008 fb04 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    57aa:	2800      	cmp	r0, #0
    57ac:	d009      	beq.n	57c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1f2>
    57ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    57b2:	f7fc bc65 	b.w	2080 <sym_DDEKRCVCBAV6DMR2JGOTTXJPMB6OW3IK3MJRV2Q>
    57b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    57ba:	2100      	movs	r1, #0
    57bc:	4608      	mov	r0, r1
    57be:	f000 bb9f 	b.w	5f00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x930>
    57c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    57c4:	2000012c 	.word	0x2000012c
    57c8:	00005f01 	.word	0x00005f01
    57cc:	00005a51 	.word	0x00005a51
    57d0:	000063a9 	.word	0x000063a9
    57d4:	491d      	ldr	r1, [pc, #116]	; (584c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27c>)
    57d6:	b508      	push	{r3, lr}
    57d8:	6849      	ldr	r1, [r1, #4]
    57da:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    57de:	b1c0      	cbz	r0, 5812 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x242>
    57e0:	2a11      	cmp	r2, #17
    57e2:	d006      	beq.n	57f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x222>
    57e4:	2a15      	cmp	r2, #21
    57e6:	d007      	beq.n	57f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x228>
    57e8:	2a16      	cmp	r2, #22
    57ea:	d009      	beq.n	5800 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x230>
    57ec:	2a1c      	cmp	r2, #28
    57ee:	d128      	bne.n	5842 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    57f0:	e009      	b.n	5806 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x236>
    57f2:	2101      	movs	r1, #1
    57f4:	200b      	movs	r0, #11
    57f6:	e008      	b.n	580a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    57f8:	4814      	ldr	r0, [pc, #80]	; (584c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x27c>)
    57fa:	f009 ff5d 	bl	f6b8 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x90>
    57fe:	e006      	b.n	580e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23e>
    5800:	f000 fd90 	bl	6324 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd54>
    5804:	e003      	b.n	580e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23e>
    5806:	2101      	movs	r1, #1
    5808:	2006      	movs	r0, #6
    580a:	f000 fd6d 	bl	62e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    580e:	2001      	movs	r0, #1
    5810:	bd08      	pop	{r3, pc}
    5812:	2a22      	cmp	r2, #34	; 0x22
    5814:	d004      	beq.n	5820 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x250>
    5816:	2a2f      	cmp	r2, #47	; 0x2f
    5818:	d113      	bne.n	5842 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    581a:	2101      	movs	r1, #1
    581c:	2011      	movs	r0, #17
    581e:	e7f4      	b.n	580a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    5820:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    5824:	2802      	cmp	r0, #2
    5826:	d00e      	beq.n	5846 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    5828:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    582c:	2801      	cmp	r0, #1
    582e:	d108      	bne.n	5842 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x272>
    5830:	f891 013d 	ldrb.w	r0, [r1, #317]	; 0x13d
    5834:	f88d 0000 	strb.w	r0, [sp]
    5838:	9800      	ldr	r0, [sp, #0]
    583a:	9000      	str	r0, [sp, #0]
    583c:	f89d 0000 	ldrb.w	r0, [sp]
    5840:	b108      	cbz	r0, 5846 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x276>
    5842:	2000      	movs	r0, #0
    5844:	bd08      	pop	{r3, pc}
    5846:	2101      	movs	r1, #1
    5848:	2017      	movs	r0, #23
    584a:	e7de      	b.n	580a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x23a>
    584c:	2000012c 	.word	0x2000012c
    5850:	b538      	push	{r3, r4, r5, lr}
    5852:	2800      	cmp	r0, #0
    5854:	d173      	bne.n	593e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    5856:	4c3b      	ldr	r4, [pc, #236]	; (5944 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x374>)
    5858:	6860      	ldr	r0, [r4, #4]
    585a:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
    585e:	07ca      	lsls	r2, r1, #31
    5860:	d002      	beq.n	5868 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x298>
    5862:	2101      	movs	r1, #1
    5864:	2009      	movs	r0, #9
    5866:	e066      	b.n	5936 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    5868:	078a      	lsls	r2, r1, #30
    586a:	d50a      	bpl.n	5882 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2b2>
    586c:	2101      	movs	r1, #1
    586e:	200c      	movs	r0, #12
    5870:	f000 fd3a 	bl	62e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5874:	6860      	ldr	r0, [r4, #4]
    5876:	f810 1fdd 	ldrb.w	r1, [r0, #221]!
    587a:	f041 0101 	orr.w	r1, r1, #1
    587e:	7001      	strb	r1, [r0, #0]
    5880:	e05b      	b.n	593a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36a>
    5882:	074a      	lsls	r2, r1, #29
    5884:	d502      	bpl.n	588c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2bc>
    5886:	2101      	movs	r1, #1
    5888:	2013      	movs	r0, #19
    588a:	e054      	b.n	5936 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    588c:	070a      	lsls	r2, r1, #28
    588e:	d506      	bpl.n	589e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x2ce>
    5890:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    5894:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    5898:	2101      	movs	r1, #1
    589a:	2007      	movs	r0, #7
    589c:	e04b      	b.n	5936 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    589e:	f011 0f30 	tst.w	r1, #48	; 0x30
    58a2:	d044      	beq.n	592e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35e>
    58a4:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    58a8:	f88d 1000 	strb.w	r1, [sp]
    58ac:	9900      	ldr	r1, [sp, #0]
    58ae:	9100      	str	r1, [sp, #0]
    58b0:	f89d 1000 	ldrb.w	r1, [sp]
    58b4:	bbc1      	cbnz	r1, 5928 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x358>
    58b6:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    58ba:	2500      	movs	r5, #0
    58bc:	f88d 1000 	strb.w	r1, [sp]
    58c0:	9900      	ldr	r1, [sp, #0]
    58c2:	9100      	str	r1, [sp, #0]
    58c4:	f89d 1000 	ldrb.w	r1, [sp]
    58c8:	b1c1      	cbz	r1, 58fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x32c>
    58ca:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    58ce:	2925      	cmp	r1, #37	; 0x25
    58d0:	d02b      	beq.n	592a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35a>
    58d2:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    58d6:	2925      	cmp	r1, #37	; 0x25
    58d8:	d027      	beq.n	592a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x35a>
    58da:	2300      	movs	r3, #0
    58dc:	f200 22ce 	addw	r2, r0, #718	; 0x2ce
    58e0:	f500 7199 	add.w	r1, r0, #306	; 0x132
    58e4:	f008 fdb6 	bl	e454 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    58e8:	6860      	ldr	r0, [r4, #4]
    58ea:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    58ee:	f021 0120 	bic.w	r1, r1, #32
    58f2:	f041 0110 	orr.w	r1, r1, #16
    58f6:	6001      	str	r1, [r0, #0]
    58f8:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    58fc:	6860      	ldr	r0, [r4, #4]
    58fe:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
    5902:	06c9      	lsls	r1, r1, #27
    5904:	d51b      	bpl.n	593e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    5906:	f008 fdc0 	bl	e48a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    590a:	480e      	ldr	r0, [pc, #56]	; (5944 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x374>)
    590c:	f008 ff9b 	bl	e846 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
    5910:	6861      	ldr	r1, [r4, #4]
    5912:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    5916:	8bc2      	ldrh	r2, [r0, #30]
    5918:	f8a1 2128 	strh.w	r2, [r1, #296]	; 0x128
    591c:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    591e:	f8a1 012a 	strh.w	r0, [r1, #298]	; 0x12a
    5922:	2101      	movs	r1, #1
    5924:	2015      	movs	r0, #21
    5926:	e006      	b.n	5936 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x366>
    5928:	e009      	b.n	593e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    592a:	2301      	movs	r3, #1
    592c:	e7d6      	b.n	58dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x30c>
    592e:	0648      	lsls	r0, r1, #25
    5930:	d505      	bpl.n	593e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x36e>
    5932:	2101      	movs	r1, #1
    5934:	2024      	movs	r0, #36	; 0x24
    5936:	f000 fcd7 	bl	62e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    593a:	2001      	movs	r0, #1
    593c:	bd38      	pop	{r3, r4, r5, pc}
    593e:	2000      	movs	r0, #0
    5940:	bd38      	pop	{r3, r4, r5, pc}
    5942:	0000      	.short	0x0000
    5944:	2000012c 	.word	0x2000012c
    5948:	b570      	push	{r4, r5, r6, lr}
    594a:	460d      	mov	r5, r1
    594c:	4606      	mov	r6, r0
    594e:	f008 fcb6 	bl	e2be <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
    5952:	4604      	mov	r4, r0
    5954:	4630      	mov	r0, r6
    5956:	f008 fcb4 	bl	e2c2 <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
    595a:	4629      	mov	r1, r5
    595c:	f000 f81e 	bl	599c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3cc>
    5960:	b1b8      	cbz	r0, 5992 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c2>
    5962:	4620      	mov	r0, r4
    5964:	f00a fec0 	bl	106e8 <sym_3AWAQCNCZH4MEGKKMZLZXM2OFWJS4TFUCWUEKRI>
    5968:	0001      	movs	r1, r0
    596a:	d00d      	beq.n	5988 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b8>
    596c:	480a      	ldr	r0, [pc, #40]	; (5998 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c8>)
    596e:	6840      	ldr	r0, [r0, #4]
    5970:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    5974:	428a      	cmp	r2, r1
    5976:	d007      	beq.n	5988 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b8>
    5978:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    597c:	2901      	cmp	r1, #1
    597e:	d005      	beq.n	598c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3bc>
    5980:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    5984:	4220      	tst	r0, r4
    5986:	d004      	beq.n	5992 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3c2>
    5988:	2001      	movs	r0, #1
    598a:	bd70      	pop	{r4, r5, r6, pc}
    598c:	f890 013f 	ldrb.w	r0, [r0, #319]	; 0x13f
    5990:	e7f8      	b.n	5984 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3b4>
    5992:	2000      	movs	r0, #0
    5994:	bd70      	pop	{r4, r5, r6, pc}
    5996:	0000      	.short	0x0000
    5998:	2000012c 	.word	0x2000012c
    599c:	b570      	push	{r4, r5, r6, lr}
    599e:	460d      	mov	r5, r1
    59a0:	4604      	mov	r4, r0
    59a2:	f00a fea1 	bl	106e8 <sym_3AWAQCNCZH4MEGKKMZLZXM2OFWJS4TFUCWUEKRI>
    59a6:	b350      	cbz	r0, 59fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    59a8:	4916      	ldr	r1, [pc, #88]	; (5a04 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x434>)
    59aa:	6849      	ldr	r1, [r1, #4]
    59ac:	f891 206a 	ldrb.w	r2, [r1, #106]	; 0x6a
    59b0:	4282      	cmp	r2, r0
    59b2:	d024      	beq.n	59fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    59b4:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
    59b8:	2b01      	cmp	r3, #1
    59ba:	d005      	beq.n	59c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f8>
    59bc:	f891 3066 	ldrb.w	r3, [r1, #102]	; 0x66
    59c0:	4223      	tst	r3, r4
    59c2:	d013      	beq.n	59ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x41c>
    59c4:	b11d      	cbz	r5, 59ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3fe>
    59c6:	e01a      	b.n	59fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    59c8:	f891 313e 	ldrb.w	r3, [r1, #318]	; 0x13e
    59cc:	e7f8      	b.n	59c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x3f0>
    59ce:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    59d2:	4221      	tst	r1, r4
    59d4:	d113      	bne.n	59fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    59d6:	b15a      	cbz	r2, 59f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x420>
    59d8:	2a04      	cmp	r2, #4
    59da:	d00e      	beq.n	59fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    59dc:	2804      	cmp	r0, #4
    59de:	d00c      	beq.n	59fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    59e0:	2a08      	cmp	r2, #8
    59e2:	d00a      	beq.n	59fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    59e4:	2808      	cmp	r0, #8
    59e6:	d008      	beq.n	59fa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42a>
    59e8:	4282      	cmp	r2, r0
    59ea:	d908      	bls.n	59fe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x42e>
    59ec:	2000      	movs	r0, #0
    59ee:	bd70      	pop	{r4, r5, r6, pc}
    59f0:	f44f 71bc 	mov.w	r1, #376	; 0x178
    59f4:	2006      	movs	r0, #6
    59f6:	f7fb fb99 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    59fa:	4282      	cmp	r2, r0
    59fc:	d3f6      	bcc.n	59ec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x41c>
    59fe:	2001      	movs	r0, #1
    5a00:	bd70      	pop	{r4, r5, r6, pc}
    5a02:	0000      	.short	0x0000
    5a04:	2000012c 	.word	0x2000012c
    5a08:	b510      	push	{r4, lr}
    5a0a:	4c10      	ldr	r4, [pc, #64]	; (5a4c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x47c>)
    5a0c:	2301      	movs	r3, #1
    5a0e:	2100      	movs	r1, #0
    5a10:	6860      	ldr	r0, [r4, #4]
    5a12:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    5a16:	3080      	adds	r0, #128	; 0x80
    5a18:	f008 f9cb 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5a1c:	b140      	cbz	r0, 5a30 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x460>
    5a1e:	6860      	ldr	r0, [r4, #4]
    5a20:	2301      	movs	r3, #1
    5a22:	2104      	movs	r1, #4
    5a24:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5a28:	3080      	adds	r0, #128	; 0x80
    5a2a:	f008 f9c2 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5a2e:	b108      	cbz	r0, 5a34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x464>
    5a30:	2000      	movs	r0, #0
    5a32:	bd10      	pop	{r4, pc}
    5a34:	6860      	ldr	r0, [r4, #4]
    5a36:	f890 00ca 	ldrb.w	r0, [r0, #202]	; 0xca
    5a3a:	2800      	cmp	r0, #0
    5a3c:	d0f9      	beq.n	5a32 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x462>
    5a3e:	2100      	movs	r1, #0
    5a40:	2012      	movs	r0, #18
    5a42:	f000 fc51 	bl	62e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5a46:	2001      	movs	r0, #1
    5a48:	bd10      	pop	{r4, pc}
    5a4a:	0000      	.short	0x0000
    5a4c:	2000012c 	.word	0x2000012c
    5a50:	490d      	ldr	r1, [pc, #52]	; (5a88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b8>)
    5a52:	4602      	mov	r2, r0
    5a54:	7848      	ldrb	r0, [r1, #1]
    5a56:	b9a0      	cbnz	r0, 5a82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b2>
    5a58:	f101 0010 	add.w	r0, r1, #16
    5a5c:	6840      	ldr	r0, [r0, #4]
    5a5e:	b142      	cbz	r2, 5a72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4a2>
    5a60:	7889      	ldrb	r1, [r1, #2]
    5a62:	0709      	lsls	r1, r1, #28
    5a64:	d503      	bpl.n	5a6e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x49e>
    5a66:	f890 009f 	ldrb.w	r0, [r0, #159]	; 0x9f
    5a6a:	2807      	cmp	r0, #7
    5a6c:	d009      	beq.n	5a82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b2>
    5a6e:	2001      	movs	r0, #1
    5a70:	4770      	bx	lr
    5a72:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    5a76:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5a78:	8e81      	ldrh	r1, [r0, #52]	; 0x34
    5a7a:	428a      	cmp	r2, r1
    5a7c:	d801      	bhi.n	5a82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4b2>
    5a7e:	f7ff b841 	b.w	4b04 <sym_FQCHK2QLF7THGK7G4A4OWWNXI3K2TVYTTB4U4GY>
    5a82:	2000      	movs	r0, #0
    5a84:	4770      	bx	lr
    5a86:	0000      	.short	0x0000
    5a88:	2000011c 	.word	0x2000011c
    5a8c:	b538      	push	{r3, r4, r5, lr}
    5a8e:	4c32      	ldr	r4, [pc, #200]	; (5b58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x588>)
    5a90:	4605      	mov	r5, r0
    5a92:	6860      	ldr	r0, [r4, #4]
    5a94:	3080      	adds	r0, #128	; 0x80
    5a96:	f009 fdd6 	bl	f646 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5a9a:	2800      	cmp	r0, #0
    5a9c:	d15b      	bne.n	5b56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5a9e:	2d00      	cmp	r5, #0
    5aa0:	d159      	bne.n	5b56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5aa2:	6860      	ldr	r0, [r4, #4]
    5aa4:	2301      	movs	r3, #1
    5aa6:	4619      	mov	r1, r3
    5aa8:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    5aac:	3080      	adds	r0, #128	; 0x80
    5aae:	f008 f980 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5ab2:	2800      	cmp	r0, #0
    5ab4:	d14f      	bne.n	5b56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5ab6:	6860      	ldr	r0, [r4, #4]
    5ab8:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    5abc:	f88d 1000 	strb.w	r1, [sp]
    5ac0:	9900      	ldr	r1, [sp, #0]
    5ac2:	9100      	str	r1, [sp, #0]
    5ac4:	f89d 2000 	ldrb.w	r2, [sp]
    5ac8:	2100      	movs	r1, #0
    5aca:	b142      	cbz	r2, 5ade <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x50e>
    5acc:	f8a0 10d0 	strh.w	r1, [r0, #208]	; 0xd0
    5ad0:	f890 1131 	ldrb.w	r1, [r0, #305]	; 0x131
    5ad4:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    5ad8:	2100      	movs	r1, #0
    5ada:	2002      	movs	r0, #2
    5adc:	e030      	b.n	5b40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x570>
    5ade:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5ae2:	2301      	movs	r3, #1
    5ae4:	2104      	movs	r1, #4
    5ae6:	3080      	adds	r0, #128	; 0x80
    5ae8:	f008 f963 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5aec:	4605      	mov	r5, r0
    5aee:	f7ff feaf 	bl	5850 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x280>
    5af2:	2800      	cmp	r0, #0
    5af4:	d12f      	bne.n	5b56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5af6:	4628      	mov	r0, r5
    5af8:	f7ff fe6c 	bl	57d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x204>
    5afc:	2800      	cmp	r0, #0
    5afe:	d12a      	bne.n	5b56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5b00:	f7ff ff82 	bl	5a08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x438>
    5b04:	2800      	cmp	r0, #0
    5b06:	d126      	bne.n	5b56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5b08:	6860      	ldr	r0, [r4, #4]
    5b0a:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    5b0e:	2909      	cmp	r1, #9
    5b10:	d01a      	beq.n	5b48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x578>
    5b12:	2d00      	cmp	r5, #0
    5b14:	d11f      	bne.n	5b56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5b16:	f000 fb13 	bl	6140 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb70>
    5b1a:	2800      	cmp	r0, #0
    5b1c:	d11b      	bne.n	5b56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5b1e:	6860      	ldr	r0, [r4, #4]
    5b20:	2301      	movs	r3, #1
    5b22:	2100      	movs	r1, #0
    5b24:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    5b28:	3080      	adds	r0, #128	; 0x80
    5b2a:	f008 f942 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5b2e:	2800      	cmp	r0, #0
    5b30:	d011      	beq.n	5b56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5b32:	6860      	ldr	r0, [r4, #4]
    5b34:	f890 02c4 	ldrb.w	r0, [r0, #708]	; 0x2c4
    5b38:	2800      	cmp	r0, #0
    5b3a:	d00c      	beq.n	5b56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x586>
    5b3c:	2100      	movs	r1, #0
    5b3e:	20ff      	movs	r0, #255	; 0xff
    5b40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5b44:	f000 bbd0 	b.w	62e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    5b48:	f890 1121 	ldrb.w	r1, [r0, #289]	; 0x121
    5b4c:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    5b50:	2100      	movs	r1, #0
    5b52:	2007      	movs	r0, #7
    5b54:	e7f4      	b.n	5b40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x570>
    5b56:	bd38      	pop	{r3, r4, r5, pc}
    5b58:	2000012c 	.word	0x2000012c
    5b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5b5e:	4d2b      	ldr	r5, [pc, #172]	; (5c0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>)
    5b60:	0006      	movs	r6, r0
    5b62:	f105 0410 	add.w	r4, r5, #16
    5b66:	d133      	bne.n	5bd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    5b68:	f000 f8aa 	bl	5cc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6f0>
    5b6c:	f000 f852 	bl	5c14 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x644>
    5b70:	0006      	movs	r6, r0
    5b72:	d12d      	bne.n	5bd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    5b74:	8869      	ldrh	r1, [r5, #2]
    5b76:	0748      	lsls	r0, r1, #29
    5b78:	d506      	bpl.n	5b88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b8>
    5b7a:	6860      	ldr	r0, [r4, #4]
    5b7c:	f890 009f 	ldrb.w	r0, [r0, #159]	; 0x9f
    5b80:	2806      	cmp	r0, #6
    5b82:	d101      	bne.n	5b88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5b8>
    5b84:	2001      	movs	r0, #1
    5b86:	7028      	strb	r0, [r5, #0]
    5b88:	0788      	lsls	r0, r1, #30
    5b8a:	d516      	bpl.n	5bba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ea>
    5b8c:	68a8      	ldr	r0, [r5, #8]
    5b8e:	78c0      	ldrb	r0, [r0, #3]
    5b90:	282b      	cmp	r0, #43	; 0x2b
    5b92:	d207      	bcs.n	5ba4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    5b94:	491e      	ldr	r1, [pc, #120]	; (5c10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x640>)
    5b96:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    5b9a:	b119      	cbz	r1, 5ba4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5d4>
    5b9c:	481b      	ldr	r0, [pc, #108]	; (5c0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>)
    5b9e:	3010      	adds	r0, #16
    5ba0:	4788      	blx	r1
    5ba2:	e00a      	b.n	5bba <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5ea>
    5ba4:	28ff      	cmp	r0, #255	; 0xff
    5ba6:	d004      	beq.n	5bb2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x5e2>
    5ba8:	f640 0156 	movw	r1, #2134	; 0x856
    5bac:	2031      	movs	r0, #49	; 0x31
    5bae:	f7fb fabd 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5bb2:	4816      	ldr	r0, [pc, #88]	; (5c0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x63c>)
    5bb4:	3010      	adds	r0, #16
    5bb6:	f009 fdbe 	bl	f736 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x10e>
    5bba:	78a8      	ldrb	r0, [r5, #2]
    5bbc:	06c0      	lsls	r0, r0, #27
    5bbe:	d507      	bpl.n	5bd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    5bc0:	6860      	ldr	r0, [r4, #4]
    5bc2:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5bc6:	290a      	cmp	r1, #10
    5bc8:	d102      	bne.n	5bd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x600>
    5bca:	210b      	movs	r1, #11
    5bcc:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    5bd0:	7868      	ldrb	r0, [r5, #1]
    5bd2:	0700      	lsls	r0, r0, #28
    5bd4:	d518      	bpl.n	5c08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x638>
    5bd6:	6860      	ldr	r0, [r4, #4]
    5bd8:	2301      	movs	r3, #1
    5bda:	2105      	movs	r1, #5
    5bdc:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5be0:	3080      	adds	r0, #128	; 0x80
    5be2:	f008 f8e6 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5be6:	b108      	cbz	r0, 5bec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x61c>
    5be8:	2608      	movs	r6, #8
    5bea:	e00d      	b.n	5c08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x638>
    5bec:	2500      	movs	r5, #0
    5bee:	4669      	mov	r1, sp
    5bf0:	2003      	movs	r0, #3
    5bf2:	9500      	str	r5, [sp, #0]
    5bf4:	f7fc fb14 	bl	2220 <sym_C4ZAWP4QAOEKUKS7VCLA6E4RPDOWCDVMBYVKPFI>
    5bf8:	9800      	ldr	r0, [sp, #0]
    5bfa:	b128      	cbz	r0, 5c08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x638>
    5bfc:	7205      	strb	r5, [r0, #8]
    5bfe:	2210      	movs	r2, #16
    5c00:	6861      	ldr	r1, [r4, #4]
    5c02:	9800      	ldr	r0, [sp, #0]
    5c04:	f008 fbfc 	bl	e400 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5c08:	4630      	mov	r0, r6
    5c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c0c:	2000011c 	.word	0x2000011c
    5c10:	200001e0 	.word	0x200001e0
    5c14:	b570      	push	{r4, r5, r6, lr}
    5c16:	4d28      	ldr	r5, [pc, #160]	; (5cb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e8>)
    5c18:	2000      	movs	r0, #0
    5c1a:	78a9      	ldrb	r1, [r5, #2]
    5c1c:	07c9      	lsls	r1, r1, #31
    5c1e:	d017      	beq.n	5c50 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x680>
    5c20:	68e8      	ldr	r0, [r5, #12]
    5c22:	f105 0410 	add.w	r4, r5, #16
    5c26:	2301      	movs	r3, #1
    5c28:	78c6      	ldrb	r6, [r0, #3]
    5c2a:	6860      	ldr	r0, [r4, #4]
    5c2c:	2105      	movs	r1, #5
    5c2e:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5c32:	3080      	adds	r0, #128	; 0x80
    5c34:	f008 f8bd 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5c38:	b158      	cbz	r0, 5c52 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x682>
    5c3a:	1eb6      	subs	r6, r6, #2
    5c3c:	2e0a      	cmp	r6, #10
    5c3e:	d206      	bcs.n	5c4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x67e>
    5c40:	e8df f006 	tbb	[pc, r6]
    5c44:	05050707 	.word	0x05050707
    5c48:	05050707 	.word	0x05050707
    5c4c:	0707      	.short	0x0707
    5c4e:	2008      	movs	r0, #8
    5c50:	bd70      	pop	{r4, r5, r6, pc}
    5c52:	68e8      	ldr	r0, [r5, #12]
    5c54:	f7fd f940 	bl	2ed8 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>
    5c58:	b338      	cbz	r0, 5caa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    5c5a:	68e8      	ldr	r0, [r5, #12]
    5c5c:	78c5      	ldrb	r5, [r0, #3]
    5c5e:	b11d      	cbz	r5, 5c68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    5c60:	2d01      	cmp	r5, #1
    5c62:	d001      	beq.n	5c68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x698>
    5c64:	2d16      	cmp	r5, #22
    5c66:	d113      	bne.n	5c90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c0>
    5c68:	6860      	ldr	r0, [r4, #4]
    5c6a:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    5c6e:	f008 fd24 	bl	e6ba <sym_KB52DURVZMKV23HAOWR2F7RBPDMWZDB7UEFUF5Y>
    5c72:	b168      	cbz	r0, 5c90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c0>
    5c74:	6861      	ldr	r1, [r4, #4]
    5c76:	f891 009d 	ldrb.w	r0, [r1, #157]	; 0x9d
    5c7a:	2820      	cmp	r0, #32
    5c7c:	d008      	beq.n	5c90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6c0>
    5c7e:	2821      	cmp	r0, #33	; 0x21
    5c80:	d003      	beq.n	5c8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ba>
    5c82:	2d16      	cmp	r5, #22
    5c84:	d00f      	beq.n	5ca6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6d6>
    5c86:	2002      	movs	r0, #2
    5c88:	bd70      	pop	{r4, r5, r6, pc}
    5c8a:	202e      	movs	r0, #46	; 0x2e
    5c8c:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    5c90:	2d2b      	cmp	r5, #43	; 0x2b
    5c92:	d20a      	bcs.n	5caa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    5c94:	4809      	ldr	r0, [pc, #36]	; (5cbc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6ec>)
    5c96:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]
    5c9a:	b131      	cbz	r1, 5caa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6da>
    5c9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5ca0:	4805      	ldr	r0, [pc, #20]	; (5cb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e8>)
    5ca2:	3010      	adds	r0, #16
    5ca4:	4708      	bx	r1
    5ca6:	2020      	movs	r0, #32
    5ca8:	bd70      	pop	{r4, r5, r6, pc}
    5caa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5cae:	4802      	ldr	r0, [pc, #8]	; (5cb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x6e8>)
    5cb0:	3010      	adds	r0, #16
    5cb2:	f000 bd47 	b.w	6744 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    5cb6:	0000      	.short	0x0000
    5cb8:	2000011c 	.word	0x2000011c
    5cbc:	20000134 	.word	0x20000134
    5cc0:	b570      	push	{r4, r5, r6, lr}
    5cc2:	4e25      	ldr	r6, [pc, #148]	; (5d58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x788>)
    5cc4:	78b0      	ldrb	r0, [r6, #2]
    5cc6:	0700      	lsls	r0, r0, #28
    5cc8:	d545      	bpl.n	5d56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x786>
    5cca:	f106 0410 	add.w	r4, r6, #16
    5cce:	6860      	ldr	r0, [r4, #4]
    5cd0:	3080      	adds	r0, #128	; 0x80
    5cd2:	f009 fcb8 	bl	f646 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    5cd6:	b148      	cbz	r0, 5cec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x71c>
    5cd8:	6860      	ldr	r0, [r4, #4]
    5cda:	21fe      	movs	r1, #254	; 0xfe
    5cdc:	2500      	movs	r5, #0
    5cde:	f880 1126 	strb.w	r1, [r0, #294]	; 0x126
    5ce2:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    5ce6:	291a      	cmp	r1, #26
    5ce8:	d10e      	bne.n	5d08 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x738>
    5cea:	e004      	b.n	5cf6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x726>
    5cec:	f640 0162 	movw	r1, #2146	; 0x862
    5cf0:	2031      	movs	r0, #49	; 0x31
    5cf2:	f7fb fa1b 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5cf6:	f880 50db 	strb.w	r5, [r0, #219]	; 0xdb
    5cfa:	4817      	ldr	r0, [pc, #92]	; (5d58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x788>)
    5cfc:	3010      	adds	r0, #16
    5cfe:	f008 fcbf 	bl	e680 <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    5d02:	6860      	ldr	r0, [r4, #4]
    5d04:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    5d08:	6860      	ldr	r0, [r4, #4]
    5d0a:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    5d0e:	2920      	cmp	r1, #32
    5d10:	d002      	beq.n	5d18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x748>
    5d12:	2931      	cmp	r1, #49	; 0x31
    5d14:	d116      	bne.n	5d44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x774>
    5d16:	e00e      	b.n	5d36 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x766>
    5d18:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    5d1c:	2301      	movs	r3, #1
    5d1e:	210b      	movs	r1, #11
    5d20:	3080      	adds	r0, #128	; 0x80
    5d22:	f008 f846 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5d26:	b108      	cbz	r0, 5d2c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x75c>
    5d28:	202e      	movs	r0, #46	; 0x2e
    5d2a:	e000      	b.n	5d2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x75e>
    5d2c:	2021      	movs	r0, #33	; 0x21
    5d2e:	6861      	ldr	r1, [r4, #4]
    5d30:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    5d34:	e006      	b.n	5d44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x774>
    5d36:	2101      	movs	r1, #1
    5d38:	f880 12c5 	strb.w	r1, [r0, #709]	; 0x2c5
    5d3c:	f880 509d 	strb.w	r5, [r0, #157]	; 0x9d
    5d40:	f880 50d6 	strb.w	r5, [r0, #214]	; 0xd6
    5d44:	6860      	ldr	r0, [r4, #4]
    5d46:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    5d4a:	2907      	cmp	r1, #7
    5d4c:	d103      	bne.n	5d56 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x786>
    5d4e:	2102      	movs	r1, #2
    5d50:	7031      	strb	r1, [r6, #0]
    5d52:	f880 1126 	strb.w	r1, [r0, #294]	; 0x126
    5d56:	bd70      	pop	{r4, r5, r6, pc}
    5d58:	2000011c 	.word	0x2000011c
    5d5c:	b538      	push	{r3, r4, r5, lr}
    5d5e:	4605      	mov	r5, r0
    5d60:	4668      	mov	r0, sp
    5d62:	f7fc f8e7 	bl	1f34 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    5d66:	b308      	cbz	r0, 5dac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7dc>
    5d68:	2222      	movs	r2, #34	; 0x22
    5d6a:	2100      	movs	r1, #0
    5d6c:	9800      	ldr	r0, [sp, #0]
    5d6e:	f00a ffbd 	bl	10cec <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5d72:	2103      	movs	r1, #3
    5d74:	9800      	ldr	r0, [sp, #0]
    5d76:	f008 fabc 	bl	e2f2 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    5d7a:	9800      	ldr	r0, [sp, #0]
    5d7c:	7801      	ldrb	r1, [r0, #0]
    5d7e:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    5d82:	7001      	strb	r1, [r0, #0]
    5d84:	4629      	mov	r1, r5
    5d86:	f7fd f8b7 	bl	2ef8 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>
    5d8a:	4c5b      	ldr	r4, [pc, #364]	; (5ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>)
    5d8c:	2d11      	cmp	r5, #17
    5d8e:	d032      	beq.n	5df6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x826>
    5d90:	dc0f      	bgt.n	5db2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7e2>
    5d92:	f1a5 0502 	sub.w	r5, r5, #2
    5d96:	2d0d      	cmp	r5, #13
    5d98:	d21f      	bcs.n	5dda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80a>
    5d9a:	e8df f005 	tbb	[pc, r5]
    5d9e:	1e21      	.short	0x1e21
    5da0:	26a3a355 	.word	0x26a3a355
    5da4:	a31e621e 	.word	0xa31e621e
    5da8:	0090393f 	.word	0x0090393f
    5dac:	f640 310c 	movw	r1, #2828	; 0xb0c
    5db0:	e09e      	b.n	5ef0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x920>
    5db2:	2d17      	cmp	r5, #23
    5db4:	d075      	beq.n	5ea2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8d2>
    5db6:	dc08      	bgt.n	5dca <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x7fa>
    5db8:	f1a5 0512 	sub.w	r5, r5, #18
    5dbc:	2d05      	cmp	r5, #5
    5dbe:	d20c      	bcs.n	5dda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x80a>
    5dc0:	e8df f005 	tbb	[pc, r5]
    5dc4:	54549090 	.word	0x54549090
    5dc8:	0038      	.short	0x0038
    5dca:	2d23      	cmp	r5, #35	; 0x23
    5dcc:	d07b      	beq.n	5ec6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    5dce:	2d24      	cmp	r5, #36	; 0x24
    5dd0:	d079      	beq.n	5ec6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    5dd2:	2d25      	cmp	r5, #37	; 0x25
    5dd4:	d077      	beq.n	5ec6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    5dd6:	2dff      	cmp	r5, #255	; 0xff
    5dd8:	d07c      	beq.n	5ed4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x904>
    5dda:	f640 31be 	movw	r1, #3006	; 0xbbe
    5dde:	e087      	b.n	5ef0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x920>
    5de0:	6861      	ldr	r1, [r4, #4]
    5de2:	9800      	ldr	r0, [sp, #0]
    5de4:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
    5de8:	e016      	b.n	5e18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x848>
    5dea:	6860      	ldr	r0, [r4, #4]
    5dec:	9900      	ldr	r1, [sp, #0]
    5dee:	f890 0128 	ldrb.w	r0, [r0, #296]	; 0x128
    5df2:	7108      	strb	r0, [r1, #4]
    5df4:	e076      	b.n	5ee4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5df6:	6860      	ldr	r0, [r4, #4]
    5df8:	f890 1123 	ldrb.w	r1, [r0, #291]	; 0x123
    5dfc:	9800      	ldr	r0, [sp, #0]
    5dfe:	f008 fa64 	bl	e2ca <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    5e02:	6860      	ldr	r0, [r4, #4]
    5e04:	f890 1122 	ldrb.w	r1, [r0, #290]	; 0x122
    5e08:	9800      	ldr	r0, [sp, #0]
    5e0a:	f008 fa62 	bl	e2d2 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>
    5e0e:	e069      	b.n	5ee4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5e10:	6861      	ldr	r1, [r4, #4]
    5e12:	9800      	ldr	r0, [sp, #0]
    5e14:	f891 1122 	ldrb.w	r1, [r1, #290]	; 0x122
    5e18:	7101      	strb	r1, [r0, #4]
    5e1a:	e063      	b.n	5ee4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5e1c:	9800      	ldr	r0, [sp, #0]
    5e1e:	210d      	movs	r1, #13
    5e20:	7101      	strb	r1, [r0, #4]
    5e22:	2159      	movs	r1, #89	; 0x59
    5e24:	7141      	strb	r1, [r0, #5]
    5e26:	2100      	movs	r1, #0
    5e28:	7181      	strb	r1, [r0, #6]
    5e2a:	21d3      	movs	r1, #211	; 0xd3
    5e2c:	71c1      	strb	r1, [r0, #7]
    5e2e:	2110      	movs	r1, #16
    5e30:	7201      	strb	r1, [r0, #8]
    5e32:	e057      	b.n	5ee4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5e34:	9800      	ldr	r0, [sp, #0]
    5e36:	6861      	ldr	r1, [r4, #4]
    5e38:	f891 113e 	ldrb.w	r1, [r1, #318]	; 0x13e
    5e3c:	7101      	strb	r1, [r0, #4]
    5e3e:	6861      	ldr	r1, [r4, #4]
    5e40:	f891 113f 	ldrb.w	r1, [r1, #319]	; 0x13f
    5e44:	7141      	strb	r1, [r0, #5]
    5e46:	e04d      	b.n	5ee4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5e48:	6861      	ldr	r1, [r4, #4]
    5e4a:	9800      	ldr	r0, [sp, #0]
    5e4c:	f501 7110 	add.w	r1, r1, #576	; 0x240
    5e50:	f008 f9f6 	bl	e240 <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>
    5e54:	6861      	ldr	r1, [r4, #4]
    5e56:	9800      	ldr	r0, [sp, #0]
    5e58:	f501 718e 	add.w	r1, r1, #284	; 0x11c
    5e5c:	f008 f9ed 	bl	e23a <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>
    5e60:	e040      	b.n	5ee4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5e62:	4825      	ldr	r0, [pc, #148]	; (5ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>)
    5e64:	9900      	ldr	r1, [sp, #0]
    5e66:	f7fd fc17 	bl	3698 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>
    5e6a:	e03b      	b.n	5ee4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5e6c:	6860      	ldr	r0, [r4, #4]
    5e6e:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    5e72:	9800      	ldr	r0, [sp, #0]
    5e74:	f008 fa45 	bl	e302 <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>
    5e78:	6860      	ldr	r0, [r4, #4]
    5e7a:	f8b0 112a 	ldrh.w	r1, [r0, #298]	; 0x12a
    5e7e:	9800      	ldr	r0, [sp, #0]
    5e80:	f008 fa43 	bl	e30a <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>
    5e84:	6860      	ldr	r0, [r4, #4]
    5e86:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    5e8a:	9800      	ldr	r0, [sp, #0]
    5e8c:	f008 fa41 	bl	e312 <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>
    5e90:	6860      	ldr	r0, [r4, #4]
    5e92:	f8b0 1128 	ldrh.w	r1, [r0, #296]	; 0x128
    5e96:	9800      	ldr	r0, [sp, #0]
    5e98:	f008 fa3f 	bl	e31a <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>
    5e9c:	e022      	b.n	5ee4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5e9e:	e000      	b.n	5ea2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8d2>
    5ea0:	e011      	b.n	5ec6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x8f6>
    5ea2:	6861      	ldr	r1, [r4, #4]
    5ea4:	f891 013c 	ldrb.w	r0, [r1, #316]	; 0x13c
    5ea8:	2801      	cmp	r0, #1
    5eaa:	9800      	ldr	r0, [sp, #0]
    5eac:	d0c4      	beq.n	5e38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x868>
    5eae:	f891 1066 	ldrb.w	r1, [r1, #102]	; 0x66
    5eb2:	7101      	strb	r1, [r0, #4]
    5eb4:	6861      	ldr	r1, [r4, #4]
    5eb6:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
    5eba:	e7c3      	b.n	5e44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x874>
    5ebc:	e00a      	b.n	5ed4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x904>
    5ebe:	9800      	ldr	r0, [sp, #0]
    5ec0:	f7fd fb94 	bl	35ec <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>
    5ec4:	e00e      	b.n	5ee4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5ec6:	4b0d      	ldr	r3, [pc, #52]	; (5efc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x92c>)
    5ec8:	4a0b      	ldr	r2, [pc, #44]	; (5ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x928>)
    5eca:	4628      	mov	r0, r5
    5ecc:	681b      	ldr	r3, [r3, #0]
    5ece:	9900      	ldr	r1, [sp, #0]
    5ed0:	4798      	blx	r3
    5ed2:	e007      	b.n	5ee4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x914>
    5ed4:	6860      	ldr	r0, [r4, #4]
    5ed6:	f890 22c7 	ldrb.w	r2, [r0, #711]	; 0x2c7
    5eda:	f8d0 12c8 	ldr.w	r1, [r0, #712]	; 0x2c8
    5ede:	9800      	ldr	r0, [sp, #0]
    5ee0:	f008 f9f9 	bl	e2d6 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>
    5ee4:	f7fc f800 	bl	1ee8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    5ee8:	2800      	cmp	r0, #0
    5eea:	d104      	bne.n	5ef6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x926>
    5eec:	f640 31c2 	movw	r1, #3010	; 0xbc2
    5ef0:	2031      	movs	r0, #49	; 0x31
    5ef2:	f7fb f91b 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5ef6:	bd38      	pop	{r3, r4, r5, pc}
    5ef8:	2000012c 	.word	0x2000012c
    5efc:	2000028c 	.word	0x2000028c
    5f00:	e92d 5ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    5f04:	4e8c      	ldr	r6, [pc, #560]	; (6138 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb68>)
    5f06:	468a      	mov	sl, r1
    5f08:	6870      	ldr	r0, [r6, #4]
    5f0a:	8800      	ldrh	r0, [r0, #0]
    5f0c:	f7fb fdc0 	bl	1a90 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5f10:	0007      	movs	r7, r0
    5f12:	d00c      	beq.n	5f2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x95e>
    5f14:	f1a6 0510 	sub.w	r5, r6, #16
    5f18:	f04f 0400 	mov.w	r4, #0
    5f1c:	8868      	ldrh	r0, [r5, #2]
    5f1e:	05c0      	lsls	r0, r0, #23
    5f20:	d50a      	bpl.n	5f38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x968>
    5f22:	6870      	ldr	r0, [r6, #4]
    5f24:	f8a0 40cc 	strh.w	r4, [r0, #204]	; 0xcc
    5f28:	f880 4234 	strb.w	r4, [r0, #564]	; 0x234
    5f2c:	e009      	b.n	5f42 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x972>
    5f2e:	f640 619d 	movw	r1, #3741	; 0xe9d
    5f32:	2031      	movs	r0, #49	; 0x31
    5f34:	f7fb f8fa 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f38:	6871      	ldr	r1, [r6, #4]
    5f3a:	f831 0fcc 	ldrh.w	r0, [r1, #204]!
    5f3e:	1c40      	adds	r0, r0, #1
    5f40:	8008      	strh	r0, [r1, #0]
    5f42:	f000 ff5b 	bl	6dfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    5f46:	f04f 0901 	mov.w	r9, #1
    5f4a:	b340      	cbz	r0, 5f9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ce>
    5f4c:	8868      	ldrh	r0, [r5, #2]
    5f4e:	0500      	lsls	r0, r0, #20
    5f50:	d506      	bpl.n	5f60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>
    5f52:	6870      	ldr	r0, [r6, #4]
    5f54:	f890 10a3 	ldrb.w	r1, [r0, #163]	; 0xa3
    5f58:	b111      	cbz	r1, 5f60 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x990>
    5f5a:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
    5f5e:	e01e      	b.n	5f9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ce>
    5f60:	6870      	ldr	r0, [r6, #4]
    5f62:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
    5f66:	1c49      	adds	r1, r1, #1
    5f68:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
    5f6c:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
    5f70:	428a      	cmp	r2, r1
    5f72:	d301      	bcc.n	5f78 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9a8>
    5f74:	1a53      	subs	r3, r2, r1
    5f76:	e000      	b.n	5f7a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9aa>
    5f78:	2300      	movs	r3, #0
    5f7a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
    5f7e:	f10c 0c05 	add.w	ip, ip, #5
    5f82:	4563      	cmp	r3, ip
    5f84:	d801      	bhi.n	5f8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ba>
    5f86:	f880 90ca 	strb.w	r9, [r0, #202]	; 0xca
    5f8a:	4291      	cmp	r1, r2
    5f8c:	d307      	bcc.n	5f9e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ce>
    5f8e:	f8c0 40c0 	str.w	r4, [r0, #192]	; 0xc0
    5f92:	2202      	movs	r2, #2
    5f94:	4969      	ldr	r1, [pc, #420]	; (613c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb6c>)
    5f96:	f500 70ac 	add.w	r0, r0, #344	; 0x158
    5f9a:	f008 fa45 	bl	e428 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    5f9e:	8868      	ldrh	r0, [r5, #2]
    5fa0:	f04f 0b02 	mov.w	fp, #2
    5fa4:	f410 7f40 	tst.w	r0, #768	; 0x300
    5fa8:	d00e      	beq.n	5fc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    5faa:	6870      	ldr	r0, [r6, #4]
    5fac:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    5fb0:	b111      	cbz	r1, 5fb8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9e8>
    5fb2:	2903      	cmp	r1, #3
    5fb4:	d108      	bne.n	5fc8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f8>
    5fb6:	e002      	b.n	5fbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9ee>
    5fb8:	f880 90a1 	strb.w	r9, [r0, #161]	; 0xa1
    5fbc:	e001      	b.n	5fc2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x9f2>
    5fbe:	f880 b0a1 	strb.w	fp, [r0, #161]	; 0xa1
    5fc2:	2101      	movs	r1, #1
    5fc4:	f7fe fdae 	bl	4b24 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    5fc8:	6870      	ldr	r0, [r6, #4]
    5fca:	46b0      	mov	r8, r6
    5fcc:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    5fd0:	2901      	cmp	r1, #1
    5fd2:	d104      	bne.n	5fde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    5fd4:	8869      	ldrh	r1, [r5, #2]
    5fd6:	0549      	lsls	r1, r1, #21
    5fd8:	d501      	bpl.n	5fde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa0e>
    5fda:	f880 b0a1 	strb.w	fp, [r0, #161]	; 0xa1
    5fde:	9900      	ldr	r1, [sp, #0]
    5fe0:	2900      	cmp	r1, #0
    5fe2:	d179      	bne.n	60d8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb08>
    5fe4:	78a9      	ldrb	r1, [r5, #2]
    5fe6:	0649      	lsls	r1, r1, #25
    5fe8:	d502      	bpl.n	5ff0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa20>
    5fea:	f8a0 4248 	strh.w	r4, [r0, #584]	; 0x248
    5fee:	e004      	b.n	5ffa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa2a>
    5ff0:	f8b0 1248 	ldrh.w	r1, [r0, #584]	; 0x248
    5ff4:	1c49      	adds	r1, r1, #1
    5ff6:	f8a0 1248 	strh.w	r1, [r0, #584]	; 0x248
    5ffa:	4650      	mov	r0, sl
    5ffc:	f7ff fdae 	bl	5b5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x58c>
    6000:	ea40 000a 	orr.w	r0, r0, sl
    6004:	4682      	mov	sl, r0
    6006:	f7ff fd41 	bl	5a8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x4bc>
    600a:	f8d8 6004 	ldr.w	r6, [r8, #4]
    600e:	f8b6 0228 	ldrh.w	r0, [r6, #552]	; 0x228
    6012:	1c40      	adds	r0, r0, #1
    6014:	f8a6 0228 	strh.w	r0, [r6, #552]	; 0x228
    6018:	f896 022c 	ldrb.w	r0, [r6, #556]	; 0x22c
    601c:	b128      	cbz	r0, 602a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa5a>
    601e:	f7fc f93d 	bl	229c <sym_HMWMSCLS2E7KO3CEVZ6FUZGM6YUJ4GDX4JETJTI>
    6022:	b1b0      	cbz	r0, 6052 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    6024:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    6028:	e013      	b.n	6052 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    602a:	f7fc f805 	bl	2038 <sym_R2K72KVDRFDRB7INCDL2G5SJCI6KNYCIUBETXWY>
    602e:	b108      	cbz	r0, 6034 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa64>
    6030:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    6034:	f7fb fffa 	bl	202c <sym_57CDLB7NR4I66F4XUEVXWWEJBBBXGSJ37LGPUXA>
    6038:	b158      	cbz	r0, 6052 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    603a:	f896 0234 	ldrb.w	r0, [r6, #564]	; 0x234
    603e:	1c40      	adds	r0, r0, #1
    6040:	b2c0      	uxtb	r0, r0
    6042:	f886 0234 	strb.w	r0, [r6, #564]	; 0x234
    6046:	2802      	cmp	r0, #2
    6048:	d903      	bls.n	6052 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xa82>
    604a:	f8a6 4228 	strh.w	r4, [r6, #552]	; 0x228
    604e:	f886 4234 	strb.w	r4, [r6, #564]	; 0x234
    6052:	f8d8 0004 	ldr.w	r0, [r8, #4]
    6056:	4646      	mov	r6, r8
    6058:	2301      	movs	r3, #1
    605a:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    605e:	2100      	movs	r1, #0
    6060:	3080      	adds	r0, #128	; 0x80
    6062:	f007 fea6 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6066:	b920      	cbnz	r0, 6072 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xaa2>
    6068:	6870      	ldr	r0, [r6, #4]
    606a:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    606e:	280b      	cmp	r0, #11
    6070:	d15f      	bne.n	6132 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    6072:	6870      	ldr	r0, [r6, #4]
    6074:	2301      	movs	r3, #1
    6076:	2100      	movs	r1, #0
    6078:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    607c:	3080      	adds	r0, #128	; 0x80
    607e:	f007 fe98 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6082:	b350      	cbz	r0, 60da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    6084:	6870      	ldr	r0, [r6, #4]
    6086:	2301      	movs	r3, #1
    6088:	2100      	movs	r1, #0
    608a:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    608e:	3080      	adds	r0, #128	; 0x80
    6090:	f007 fe8f 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6094:	b308      	cbz	r0, 60da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    6096:	6870      	ldr	r0, [r6, #4]
    6098:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    609c:	2902      	cmp	r1, #2
    609e:	d148      	bne.n	6132 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    60a0:	f890 0234 	ldrb.w	r0, [r0, #564]	; 0x234
    60a4:	b9c8      	cbnz	r0, 60da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    60a6:	4638      	mov	r0, r7
    60a8:	f007 f9d2 	bl	d450 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    60ac:	b1a8      	cbz	r0, 60da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    60ae:	6870      	ldr	r0, [r6, #4]
    60b0:	3080      	adds	r0, #128	; 0x80
    60b2:	f009 fac8 	bl	f646 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    60b6:	b980      	cbnz	r0, 60da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0a>
    60b8:	6871      	ldr	r1, [r6, #4]
    60ba:	f8b1 0222 	ldrh.w	r0, [r1, #546]	; 0x222
    60be:	2801      	cmp	r0, #1
    60c0:	d937      	bls.n	6132 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    60c2:	f881 922a 	strb.w	r9, [r1, #554]	; 0x22a
    60c6:	f8b1 20ce 	ldrh.w	r2, [r1, #206]	; 0xce
    60ca:	f8b1 00cc 	ldrh.w	r0, [r1, #204]	; 0xcc
    60ce:	1e93      	subs	r3, r2, #2
    60d0:	4298      	cmp	r0, r3
    60d2:	db03      	blt.n	60dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb0c>
    60d4:	2001      	movs	r0, #1
    60d6:	e004      	b.n	60e2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb12>
    60d8:	e01c      	b.n	6114 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb44>
    60da:	e02a      	b.n	6132 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb62>
    60dc:	1a10      	subs	r0, r2, r0
    60de:	1e40      	subs	r0, r0, #1
    60e0:	b280      	uxth	r0, r0
    60e2:	f8b1 3228 	ldrh.w	r3, [r1, #552]	; 0x228
    60e6:	88aa      	ldrh	r2, [r5, #4]
    60e8:	4293      	cmp	r3, r2
    60ea:	d301      	bcc.n	60f0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb20>
    60ec:	2201      	movs	r2, #1
    60ee:	e002      	b.n	60f6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb26>
    60f0:	1ad2      	subs	r2, r2, r3
    60f2:	1c52      	adds	r2, r2, #1
    60f4:	b292      	uxth	r2, r2
    60f6:	4290      	cmp	r0, r2
    60f8:	d900      	bls.n	60fc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb2c>
    60fa:	4610      	mov	r0, r2
    60fc:	2801      	cmp	r0, #1
    60fe:	d101      	bne.n	6104 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb34>
    6100:	f881 422a 	strb.w	r4, [r1, #554]	; 0x22a
    6104:	6871      	ldr	r1, [r6, #4]
    6106:	f8b1 2094 	ldrh.w	r2, [r1, #148]	; 0x94
    610a:	4410      	add	r0, r2
    610c:	f8a1 0224 	strh.w	r0, [r1, #548]	; 0x224
    6110:	f000 ff8e 	bl	7030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>
    6114:	78a8      	ldrb	r0, [r5, #2]
    6116:	4652      	mov	r2, sl
    6118:	f3c0 1180 	ubfx	r1, r0, #6, #1
    611c:	9800      	ldr	r0, [sp, #0]
    611e:	f000 fe81 	bl	6e24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1854>
    6122:	f8d8 0004 	ldr.w	r0, [r8, #4]
    6126:	f880 422b 	strb.w	r4, [r0, #555]	; 0x22b
    612a:	e8bd 5ffc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    612e:	f7fb bec5 	b.w	1ebc <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    6132:	2001      	movs	r0, #1
    6134:	6871      	ldr	r1, [r6, #4]
    6136:	e7e3      	b.n	6100 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xb30>
    6138:	2000012c 	.word	0x2000012c
    613c:	0000e945 	.word	0x0000e945
    6140:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    6142:	4c68      	ldr	r4, [pc, #416]	; (62e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd14>)
    6144:	2301      	movs	r3, #1
    6146:	2100      	movs	r1, #0
    6148:	6860      	ldr	r0, [r4, #4]
    614a:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    614e:	3080      	adds	r0, #128	; 0x80
    6150:	f007 fe2f 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6154:	2800      	cmp	r0, #0
    6156:	d07a      	beq.n	624e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc7e>
    6158:	6860      	ldr	r0, [r4, #4]
    615a:	f890 1143 	ldrb.w	r1, [r0, #323]	; 0x143
    615e:	2500      	movs	r5, #0
    6160:	b139      	cbz	r1, 6172 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xba2>
    6162:	2100      	movs	r1, #0
    6164:	200e      	movs	r0, #14
    6166:	f000 f8bf 	bl	62e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    616a:	6860      	ldr	r0, [r4, #4]
    616c:	f880 5143 	strb.w	r5, [r0, #323]	; 0x143
    6170:	e0b5      	b.n	62de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    6172:	f890 1142 	ldrb.w	r1, [r0, #322]	; 0x142
    6176:	b119      	cbz	r1, 6180 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbb0>
    6178:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
    617c:	0789      	lsls	r1, r1, #30
    617e:	d016      	beq.n	61ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbde>
    6180:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    6184:	f88d 1004 	strb.w	r1, [sp, #4]
    6188:	9901      	ldr	r1, [sp, #4]
    618a:	9101      	str	r1, [sp, #4]
    618c:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6190:	b141      	cbz	r1, 61a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbd4>
    6192:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    6196:	f88d 1000 	strb.w	r1, [sp]
    619a:	9900      	ldr	r1, [sp, #0]
    619c:	9100      	str	r1, [sp, #0]
    619e:	f89d 1000 	ldrb.w	r1, [sp]
    61a2:	b189      	cbz	r1, 61c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xbf8>
    61a4:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    61a8:	2901      	cmp	r1, #1
    61aa:	d030      	beq.n	620e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc3e>
    61ac:	e040      	b.n	6230 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc60>
    61ae:	2100      	movs	r1, #0
    61b0:	200c      	movs	r0, #12
    61b2:	f000 f899 	bl	62e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    61b6:	6860      	ldr	r0, [r4, #4]
    61b8:	f810 1fdd 	ldrb.w	r1, [r0, #221]!
    61bc:	f041 0101 	orr.w	r1, r1, #1
    61c0:	7001      	strb	r1, [r0, #0]
    61c2:	f880 5065 	strb.w	r5, [r0, #101]	; 0x65
    61c6:	e08a      	b.n	62de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    61c8:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    61cc:	2925      	cmp	r1, #37	; 0x25
    61ce:	d01c      	beq.n	620a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc3a>
    61d0:	f890 109d 	ldrb.w	r1, [r0, #157]	; 0x9d
    61d4:	2925      	cmp	r1, #37	; 0x25
    61d6:	d018      	beq.n	620a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc3a>
    61d8:	f05f 0300 	movs.w	r3, #0
    61dc:	f200 22ce 	addw	r2, r0, #718	; 0x2ce
    61e0:	f500 7199 	add.w	r1, r0, #306	; 0x132
    61e4:	f008 f936 	bl	e454 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    61e8:	6860      	ldr	r0, [r4, #4]
    61ea:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    61ee:	2100      	movs	r1, #0
    61f0:	2014      	movs	r0, #20
    61f2:	f000 f879 	bl	62e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    61f6:	6861      	ldr	r1, [r4, #4]
    61f8:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    61fc:	8bc2      	ldrh	r2, [r0, #30]
    61fe:	f8a1 2128 	strh.w	r2, [r1, #296]	; 0x128
    6202:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    6204:	f8a1 012a 	strh.w	r0, [r1, #298]	; 0x12a
    6208:	e069      	b.n	62de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    620a:	2301      	movs	r3, #1
    620c:	e7e6      	b.n	61dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc0c>
    620e:	f890 113d 	ldrb.w	r1, [r0, #317]	; 0x13d
    6212:	f88d 1000 	strb.w	r1, [sp]
    6216:	9900      	ldr	r1, [sp, #0]
    6218:	9100      	str	r1, [sp, #0]
    621a:	f89d 1000 	ldrb.w	r1, [sp]
    621e:	b939      	cbnz	r1, 6230 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc60>
    6220:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6224:	2301      	movs	r3, #1
    6226:	210b      	movs	r1, #11
    6228:	3080      	adds	r0, #128	; 0x80
    622a:	f007 fdc2 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    622e:	b178      	cbz	r0, 6250 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc80>
    6230:	6860      	ldr	r0, [r4, #4]
    6232:	f890 1149 	ldrb.w	r1, [r0, #329]	; 0x149
    6236:	f88d 1000 	strb.w	r1, [sp]
    623a:	9900      	ldr	r1, [sp, #0]
    623c:	9100      	str	r1, [sp, #0]
    623e:	f89d 1000 	ldrb.w	r1, [sp]
    6242:	b3b9      	cbz	r1, 62b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce4>
    6244:	2100      	movs	r1, #0
    6246:	2023      	movs	r0, #35	; 0x23
    6248:	f000 f84e 	bl	62e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    624c:	e047      	b.n	62de <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd0e>
    624e:	e030      	b.n	62b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce2>
    6250:	6860      	ldr	r0, [r4, #4]
    6252:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    6256:	f009 f9fe 	bl	f656 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    625a:	4605      	mov	r5, r0
    625c:	6860      	ldr	r0, [r4, #4]
    625e:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    6262:	f009 f9f8 	bl	f656 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2e>
    6266:	4606      	mov	r6, r0
    6268:	6860      	ldr	r0, [r4, #4]
    626a:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    626e:	4628      	mov	r0, r5
    6270:	f009 fa08 	bl	f684 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    6274:	b150      	cbz	r0, 628c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcbc>
    6276:	6860      	ldr	r0, [r4, #4]
    6278:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    627c:	4630      	mov	r0, r6
    627e:	f009 fa01 	bl	f684 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x5c>
    6282:	b118      	cbz	r0, 628c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcbc>
    6284:	2000      	movs	r0, #0
    6286:	f000 f943 	bl	6510 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    628a:	e011      	b.n	62b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce0>
    628c:	6860      	ldr	r0, [r4, #4]
    628e:	2301      	movs	r3, #1
    6290:	2103      	movs	r1, #3
    6292:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6296:	3080      	adds	r0, #128	; 0x80
    6298:	f007 fd8b 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    629c:	b940      	cbnz	r0, 62b0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce0>
    629e:	6860      	ldr	r0, [r4, #4]
    62a0:	2301      	movs	r3, #1
    62a2:	2102      	movs	r1, #2
    62a4:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    62a8:	3080      	adds	r0, #128	; 0x80
    62aa:	f007 fd82 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    62ae:	b110      	cbz	r0, 62b6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce6>
    62b0:	2000      	movs	r0, #0
    62b2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    62b4:	e002      	b.n	62bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xcec>
    62b6:	2100      	movs	r1, #0
    62b8:	2016      	movs	r0, #22
    62ba:	e7c5      	b.n	6248 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xc78>
    62bc:	f890 0146 	ldrb.w	r0, [r0, #326]	; 0x146
    62c0:	f88d 0000 	strb.w	r0, [sp]
    62c4:	9800      	ldr	r0, [sp, #0]
    62c6:	9000      	str	r0, [sp, #0]
    62c8:	f89d 0000 	ldrb.w	r0, [sp]
    62cc:	2800      	cmp	r0, #0
    62ce:	d0f0      	beq.n	62b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce2>
    62d0:	2100      	movs	r1, #0
    62d2:	2025      	movs	r0, #37	; 0x25
    62d4:	f000 f808 	bl	62e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    62d8:	6860      	ldr	r0, [r4, #4]
    62da:	f880 5146 	strb.w	r5, [r0, #326]	; 0x146
    62de:	2001      	movs	r0, #1
    62e0:	e7e7      	b.n	62b2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xce2>
    62e2:	0000      	.short	0x0000
    62e4:	2000012c 	.word	0x2000012c
    62e8:	b570      	push	{r4, r5, r6, lr}
    62ea:	4c0d      	ldr	r4, [pc, #52]	; (6320 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd50>)
    62ec:	4606      	mov	r6, r0
    62ee:	460d      	mov	r5, r1
    62f0:	6860      	ldr	r0, [r4, #4]
    62f2:	3080      	adds	r0, #128	; 0x80
    62f4:	f009 f9a7 	bl	f646 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1e>
    62f8:	b120      	cbz	r0, 6304 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd34>
    62fa:	f640 31c7 	movw	r1, #3015	; 0xbc7
    62fe:	2031      	movs	r0, #49	; 0x31
    6300:	f7fa ff14 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6304:	6862      	ldr	r2, [r4, #4]
    6306:	2000      	movs	r0, #0
    6308:	2d01      	cmp	r5, #1
    630a:	f882 6126 	strb.w	r6, [r2, #294]	; 0x126
    630e:	d004      	beq.n	631a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd4a>
    6310:	f822 0fd2 	strh.w	r0, [r2, #210]!
    6314:	2001      	movs	r0, #1
    6316:	7110      	strb	r0, [r2, #4]
    6318:	bd70      	pop	{r4, r5, r6, pc}
    631a:	f8a2 00d8 	strh.w	r0, [r2, #216]	; 0xd8
    631e:	bd70      	pop	{r4, r5, r6, pc}
    6320:	2000012c 	.word	0x2000012c
    6324:	b538      	push	{r3, r4, r5, lr}
    6326:	4c1f      	ldr	r4, [pc, #124]	; (63a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd4>)
    6328:	2500      	movs	r5, #0
    632a:	6860      	ldr	r0, [r4, #4]
    632c:	f890 12b0 	ldrb.w	r1, [r0, #688]	; 0x2b0
    6330:	2901      	cmp	r1, #1
    6332:	d00a      	beq.n	634a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd7a>
    6334:	2902      	cmp	r1, #2
    6336:	d133      	bne.n	63a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    6338:	f890 10dc 	ldrb.w	r1, [r0, #220]	; 0xdc
    633c:	b1d9      	cbz	r1, 6376 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xda6>
    633e:	2106      	movs	r1, #6
    6340:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    6344:	2101      	movs	r1, #1
    6346:	2002      	movs	r0, #2
    6348:	e025      	b.n	6396 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc6>
    634a:	f890 1212 	ldrb.w	r1, [r0, #530]	; 0x212
    634e:	f88d 1000 	strb.w	r1, [sp]
    6352:	9900      	ldr	r1, [sp, #0]
    6354:	9100      	str	r1, [sp, #0]
    6356:	f89d 1000 	ldrb.w	r1, [sp]
    635a:	2900      	cmp	r1, #0
    635c:	d120      	bne.n	63a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd0>
    635e:	f500 7384 	add.w	r3, r0, #264	; 0x108
    6362:	f500 710e 	add.w	r1, r0, #568	; 0x238
    6366:	2200      	movs	r2, #0
    6368:	f200 20b1 	addw	r0, r0, #689	; 0x2b1
    636c:	f008 fbb7 	bl	eade <sym_EQ3I7ZZBTEWAJZC2TH7LIOBRZMKEZRCLT4UWSSQ>
    6370:	2101      	movs	r1, #1
    6372:	2005      	movs	r0, #5
    6374:	e00f      	b.n	6396 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc6>
    6376:	2103      	movs	r1, #3
    6378:	2206      	movs	r2, #6
    637a:	480a      	ldr	r0, [pc, #40]	; (63a4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdd4>)
    637c:	f008 f98e 	bl	e69c <sym_2UM6LVQLLMOP7WZDJLNUGNNDXOSOGAIT6WB627Q>
    6380:	6860      	ldr	r0, [r4, #4]
    6382:	f890 00ec 	ldrb.w	r0, [r0, #236]	; 0xec
    6386:	0880      	lsrs	r0, r0, #2
    6388:	f010 0f01 	tst.w	r0, #1
    638c:	d001      	beq.n	6392 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc2>
    638e:	2011      	movs	r0, #17
    6390:	e000      	b.n	6394 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xdc4>
    6392:	200d      	movs	r0, #13
    6394:	2101      	movs	r1, #1
    6396:	f7ff ffa7 	bl	62e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    639a:	6860      	ldr	r0, [r4, #4]
    639c:	f880 52b0 	strb.w	r5, [r0, #688]	; 0x2b0
    63a0:	bd38      	pop	{r3, r4, r5, pc}
    63a2:	0000      	.short	0x0000
    63a4:	2000012c 	.word	0x2000012c
    63a8:	b570      	push	{r4, r5, r6, lr}
    63aa:	4b2b      	ldr	r3, [pc, #172]	; (6458 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe88>)
    63ac:	4602      	mov	r2, r0
    63ae:	8858      	ldrh	r0, [r3, #2]
    63b0:	4310      	orrs	r0, r2
    63b2:	8058      	strh	r0, [r3, #2]
    63b4:	f103 0010 	add.w	r0, r3, #16
    63b8:	2a40      	cmp	r2, #64	; 0x40
    63ba:	6840      	ldr	r0, [r0, #4]
    63bc:	d00d      	beq.n	63da <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe0a>
    63be:	0796      	lsls	r6, r2, #30
    63c0:	f04f 0500 	mov.w	r5, #0
    63c4:	f04f 0401 	mov.w	r4, #1
    63c8:	ea4f 76c2 	mov.w	r6, r2, lsl #31
    63cc:	d50c      	bpl.n	63e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe18>
    63ce:	b14e      	cbz	r6, 63e4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe14>
    63d0:	f640 610a 	movw	r1, #3594	; 0xe0a
    63d4:	2031      	movs	r0, #49	; 0x31
    63d6:	f7fa fea9 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    63da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    63de:	2104      	movs	r1, #4
    63e0:	f7fe bba0 	b.w	4b24 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    63e4:	6099      	str	r1, [r3, #8]
    63e6:	e01c      	b.n	6422 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe52>
    63e8:	b1c6      	cbz	r6, 641c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    63ea:	60d9      	str	r1, [r3, #12]
    63ec:	78c9      	ldrb	r1, [r1, #3]
    63ee:	2906      	cmp	r1, #6
    63f0:	d002      	beq.n	63f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe28>
    63f2:	290b      	cmp	r1, #11
    63f4:	d112      	bne.n	641c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    63f6:	e009      	b.n	640c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe3c>
    63f8:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    63fc:	2918      	cmp	r1, #24
    63fe:	d10d      	bne.n	641c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    6400:	2100      	movs	r1, #0
    6402:	e9c0 113e 	strd	r1, r1, [r0, #248]	; 0xf8
    6406:	f880 40a2 	strb.w	r4, [r0, #162]	; 0xa2
    640a:	e007      	b.n	641c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    640c:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6410:	2912      	cmp	r1, #18
    6412:	d103      	bne.n	641c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe4c>
    6414:	f880 50a2 	strb.w	r5, [r0, #162]	; 0xa2
    6418:	f880 40dc 	strb.w	r4, [r0, #220]	; 0xdc
    641c:	0791      	lsls	r1, r2, #30
    641e:	d516      	bpl.n	644e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    6420:	6899      	ldr	r1, [r3, #8]
    6422:	78c9      	ldrb	r1, [r1, #3]
    6424:	2905      	cmp	r1, #5
    6426:	d002      	beq.n	642e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe5e>
    6428:	290b      	cmp	r1, #11
    642a:	d110      	bne.n	644e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    642c:	e009      	b.n	6442 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe72>
    642e:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6432:	2916      	cmp	r1, #22
    6434:	d10b      	bne.n	644e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    6436:	2100      	movs	r1, #0
    6438:	e9c0 1140 	strd	r1, r1, [r0, #256]	; 0x100
    643c:	f880 40a3 	strb.w	r4, [r0, #163]	; 0xa3
    6440:	e005      	b.n	644e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    6442:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6446:	2911      	cmp	r1, #17
    6448:	d101      	bne.n	644e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe7e>
    644a:	f880 50a3 	strb.w	r5, [r0, #163]	; 0xa3
    644e:	0690      	lsls	r0, r2, #26
    6450:	d501      	bpl.n	6456 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xe86>
    6452:	2008      	movs	r0, #8
    6454:	7058      	strb	r0, [r3, #1]
    6456:	bd70      	pop	{r4, r5, r6, pc}
    6458:	2000011c 	.word	0x2000011c
    645c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6460:	4c29      	ldr	r4, [pc, #164]	; (6508 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf38>)
    6462:	2501      	movs	r5, #1
    6464:	6862      	ldr	r2, [r4, #4]
    6466:	f892 12ce 	ldrb.w	r1, [r2, #718]	; 0x2ce
    646a:	b109      	cbz	r1, 6470 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea0>
    646c:	2701      	movs	r7, #1
    646e:	e000      	b.n	6472 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xea2>
    6470:	2700      	movs	r7, #0
    6472:	f892 02cf 	ldrb.w	r0, [r2, #719]	; 0x2cf
    6476:	b108      	cbz	r0, 647c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeac>
    6478:	2601      	movs	r6, #1
    647a:	e000      	b.n	647e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeae>
    647c:	2600      	movs	r6, #0
    647e:	b90f      	cbnz	r7, 6484 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeb4>
    6480:	f892 106a 	ldrb.w	r1, [r2, #106]	; 0x6a
    6484:	b90e      	cbnz	r6, 648a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xeba>
    6486:	f892 006b 	ldrb.w	r0, [r2, #107]	; 0x6b
    648a:	f102 0362 	add.w	r3, r2, #98	; 0x62
    648e:	7219      	strb	r1, [r3, #8]
    6490:	7258      	strb	r0, [r3, #9]
    6492:	20ff      	movs	r0, #255	; 0xff
    6494:	7298      	strb	r0, [r3, #10]
    6496:	481d      	ldr	r0, [pc, #116]	; (650c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf3c>)
    6498:	6803      	ldr	r3, [r0, #0]
    649a:	b10b      	cbz	r3, 64a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xed0>
    649c:	4610      	mov	r0, r2
    649e:	4798      	blx	r3
    64a0:	6860      	ldr	r0, [r4, #4]
    64a2:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    64a6:	2801      	cmp	r0, #1
    64a8:	d001      	beq.n	64ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    64aa:	b907      	cbnz	r7, 64ae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xede>
    64ac:	b116      	cbz	r6, 64b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xee4>
    64ae:	2000      	movs	r0, #0
    64b0:	f000 f82e 	bl	6510 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    64b4:	6860      	ldr	r0, [r4, #4]
    64b6:	302c      	adds	r0, #44	; 0x2c
    64b8:	f008 f83b 	bl	e532 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    64bc:	4606      	mov	r6, r0
    64be:	6860      	ldr	r0, [r4, #4]
    64c0:	f007 ffe3 	bl	e48a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    64c4:	b130      	cbz	r0, 64d4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf04>
    64c6:	6861      	ldr	r1, [r4, #4]
    64c8:	f501 72b1 	add.w	r2, r1, #354	; 0x162
    64cc:	f831 0b2c 	ldrh.w	r0, [r1], #44
    64d0:	f7fc ff4c 	bl	336c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    64d4:	2105      	movs	r1, #5
    64d6:	6860      	ldr	r0, [r4, #4]
    64d8:	f7fe fb24 	bl	4b24 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    64dc:	6860      	ldr	r0, [r4, #4]
    64de:	302c      	adds	r0, #44	; 0x2c
    64e0:	f008 f827 	bl	e532 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>
    64e4:	4604      	mov	r4, r0
    64e6:	42a6      	cmp	r6, r4
    64e8:	d20a      	bcs.n	6500 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf30>
    64ea:	f003 fe53 	bl	a194 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    64ee:	4601      	mov	r1, r0
    64f0:	1ba0      	subs	r0, r4, r6
    64f2:	2868      	cmp	r0, #104	; 0x68
    64f4:	d200      	bcs.n	64f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf28>
    64f6:	2068      	movs	r0, #104	; 0x68
    64f8:	f003 fd0a 	bl	9f10 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    64fc:	b100      	cbz	r0, 6500 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf30>
    64fe:	2500      	movs	r5, #0
    6500:	4628      	mov	r0, r5
    6502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6506:	0000      	.short	0x0000
    6508:	2000012c 	.word	0x2000012c
    650c:	20000294 	.word	0x20000294
    6510:	4601      	mov	r1, r0
    6512:	4801      	ldr	r0, [pc, #4]	; (6518 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf48>)
    6514:	f001 ba8a 	b.w	7a2c <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA>
    6518:	2000012c 	.word	0x2000012c
    651c:	b570      	push	{r4, r5, r6, lr}
    651e:	4d0f      	ldr	r5, [pc, #60]	; (655c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf8c>)
    6520:	686c      	ldr	r4, [r5, #4]
    6522:	f894 109d 	ldrb.w	r1, [r4, #157]	; 0x9d
    6526:	2921      	cmp	r1, #33	; 0x21
    6528:	d002      	beq.n	6530 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf60>
    652a:	292e      	cmp	r1, #46	; 0x2e
    652c:	d003      	beq.n	6536 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf66>
    652e:	e011      	b.n	6554 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf84>
    6530:	f7ff ffee 	bl	6510 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    6534:	e008      	b.n	6548 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf78>
    6536:	f894 209e 	ldrb.w	r2, [r4, #158]	; 0x9e
    653a:	f104 0080 	add.w	r0, r4, #128	; 0x80
    653e:	2301      	movs	r3, #1
    6540:	210b      	movs	r1, #11
    6542:	f007 fc36 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6546:	b138      	cbz	r0, 6558 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf88>
    6548:	6869      	ldr	r1, [r5, #4]
    654a:	2000      	movs	r0, #0
    654c:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    6550:	f881 00d6 	strb.w	r0, [r1, #214]	; 0xd6
    6554:	2000      	movs	r0, #0
    6556:	bd70      	pop	{r4, r5, r6, pc}
    6558:	202a      	movs	r0, #42	; 0x2a
    655a:	e7e9      	b.n	6530 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf60>
    655c:	2000012c 	.word	0x2000012c
    6560:	b570      	push	{r4, r5, r6, lr}
    6562:	4604      	mov	r4, r0
    6564:	6840      	ldr	r0, [r0, #4]
    6566:	2301      	movs	r3, #1
    6568:	2100      	movs	r1, #0
    656a:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    656e:	3080      	adds	r0, #128	; 0x80
    6570:	f007 fc1f 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6574:	b1b8      	cbz	r0, 65a6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfd6>
    6576:	4d13      	ldr	r5, [pc, #76]	; (65c4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff4>)
    6578:	68e8      	ldr	r0, [r5, #12]
    657a:	f007 fe0c 	bl	e196 <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>
    657e:	6861      	ldr	r1, [r4, #4]
    6580:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    6584:	6861      	ldr	r1, [r4, #4]
    6586:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    658a:	f009 f86f 	bl	f66c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    658e:	b160      	cbz	r0, 65aa <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfda>
    6590:	6861      	ldr	r1, [r4, #4]
    6592:	2028      	movs	r0, #40	; 0x28
    6594:	2202      	movs	r2, #2
    6596:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    659a:	6860      	ldr	r0, [r4, #4]
    659c:	490a      	ldr	r1, [pc, #40]	; (65c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xff8>)
    659e:	30b4      	adds	r0, #180	; 0xb4
    65a0:	f007 ff2e 	bl	e400 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    65a4:	e00b      	b.n	65be <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xfee>
    65a6:	2001      	movs	r0, #1
    65a8:	bd70      	pop	{r4, r5, r6, pc}
    65aa:	6861      	ldr	r1, [r4, #4]
    65ac:	68e8      	ldr	r0, [r5, #12]
    65ae:	f201 21ce 	addw	r1, r1, #718	; 0x2ce
    65b2:	f007 fdeb 	bl	e18c <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>
    65b6:	6861      	ldr	r1, [r4, #4]
    65b8:	200a      	movs	r0, #10
    65ba:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    65be:	2000      	movs	r0, #0
    65c0:	bd70      	pop	{r4, r5, r6, pc}
    65c2:	0000      	.short	0x0000
    65c4:	2000011c 	.word	0x2000011c
    65c8:	0000e6f7 	.word	0x0000e6f7
    65cc:	b570      	push	{r4, r5, r6, lr}
    65ce:	4604      	mov	r4, r0
    65d0:	6840      	ldr	r0, [r0, #4]
    65d2:	2301      	movs	r3, #1
    65d4:	2100      	movs	r1, #0
    65d6:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    65da:	3080      	adds	r0, #128	; 0x80
    65dc:	f007 fbe9 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    65e0:	b1e0      	cbz	r0, 661c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x104c>
    65e2:	4d28      	ldr	r5, [pc, #160]	; (6684 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b4>)
    65e4:	2100      	movs	r1, #0
    65e6:	68e8      	ldr	r0, [r5, #12]
    65e8:	f007 fdd8 	bl	e19c <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>
    65ec:	b1c0      	cbz	r0, 6620 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1050>
    65ee:	68e8      	ldr	r0, [r5, #12]
    65f0:	6861      	ldr	r1, [r4, #4]
    65f2:	f8b0 000d 	ldrh.w	r0, [r0, #13]
    65f6:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    65fa:	6861      	ldr	r1, [r4, #4]
    65fc:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    6600:	f009 f834 	bl	f66c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    6604:	b188      	cbz	r0, 662a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x105a>
    6606:	6861      	ldr	r1, [r4, #4]
    6608:	2028      	movs	r0, #40	; 0x28
    660a:	2202      	movs	r2, #2
    660c:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    6610:	6860      	ldr	r0, [r4, #4]
    6612:	491d      	ldr	r1, [pc, #116]	; (6688 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10b8>)
    6614:	30b4      	adds	r0, #180	; 0xb4
    6616:	f007 fef3 	bl	e400 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    661a:	e030      	b.n	667e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ae>
    661c:	2001      	movs	r0, #1
    661e:	bd70      	pop	{r4, r5, r6, pc}
    6620:	4620      	mov	r0, r4
    6622:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6626:	f000 b88d 	b.w	6744 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    662a:	68e8      	ldr	r0, [r5, #12]
    662c:	f007 fde0 	bl	e1f0 <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>
    6630:	f007 fbb5 	bl	dd9e <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    6634:	4606      	mov	r6, r0
    6636:	6860      	ldr	r0, [r4, #4]
    6638:	4631      	mov	r1, r6
    663a:	f8c0 62d4 	str.w	r6, [r0, #724]	; 0x2d4
    663e:	68e8      	ldr	r0, [r5, #12]
    6640:	7900      	ldrb	r0, [r0, #4]
    6642:	f007 fca7 	bl	df94 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    6646:	6861      	ldr	r1, [r4, #4]
    6648:	f8a1 02ce 	strh.w	r0, [r1, #718]	; 0x2ce
    664c:	68e8      	ldr	r0, [r5, #12]
    664e:	4631      	mov	r1, r6
    6650:	f8b0 0005 	ldrh.w	r0, [r0, #5]
    6654:	f007 fc9a 	bl	df8c <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    6658:	6861      	ldr	r1, [r4, #4]
    665a:	f8c1 02d0 	str.w	r0, [r1, #720]	; 0x2d0
    665e:	68e8      	ldr	r0, [r5, #12]
    6660:	f007 fdc9 	bl	e1f6 <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>
    6664:	6861      	ldr	r1, [r4, #4]
    6666:	f8a1 02d8 	strh.w	r0, [r1, #728]	; 0x2d8
    666a:	68e8      	ldr	r0, [r5, #12]
    666c:	f007 fdc6 	bl	e1fc <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>
    6670:	6861      	ldr	r1, [r4, #4]
    6672:	f8a1 02da 	strh.w	r0, [r1, #730]	; 0x2da
    6676:	6861      	ldr	r1, [r4, #4]
    6678:	200d      	movs	r0, #13
    667a:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    667e:	2000      	movs	r0, #0
    6680:	bd70      	pop	{r4, r5, r6, pc}
    6682:	0000      	.short	0x0000
    6684:	2000011c 	.word	0x2000011c
    6688:	0000e6f7 	.word	0x0000e6f7
    668c:	b570      	push	{r4, r5, r6, lr}
    668e:	4604      	mov	r4, r0
    6690:	6840      	ldr	r0, [r0, #4]
    6692:	2301      	movs	r3, #1
    6694:	2100      	movs	r1, #0
    6696:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    669a:	3080      	adds	r0, #128	; 0x80
    669c:	f007 fb89 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    66a0:	b970      	cbnz	r0, 66c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10f0>
    66a2:	6860      	ldr	r0, [r4, #4]
    66a4:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    66a8:	2a13      	cmp	r2, #19
    66aa:	d009      	beq.n	66c0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10f0>
    66ac:	2301      	movs	r3, #1
    66ae:	2105      	movs	r1, #5
    66b0:	3080      	adds	r0, #128	; 0x80
    66b2:	f007 fb7e 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    66b6:	b108      	cbz	r0, 66bc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10ec>
    66b8:	2008      	movs	r0, #8
    66ba:	bd70      	pop	{r4, r5, r6, pc}
    66bc:	2001      	movs	r0, #1
    66be:	bd70      	pop	{r4, r5, r6, pc}
    66c0:	6860      	ldr	r0, [r4, #4]
    66c2:	f890 00dc 	ldrb.w	r0, [r0, #220]	; 0xdc
    66c6:	b910      	cbnz	r0, 66ce <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x10fe>
    66c8:	4816      	ldr	r0, [pc, #88]	; (6724 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1154>)
    66ca:	f007 ffd1 	bl	e670 <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    66ce:	4d15      	ldr	r5, [pc, #84]	; (6724 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1154>)
    66d0:	6861      	ldr	r1, [r4, #4]
    66d2:	3d10      	subs	r5, #16
    66d4:	f501 710e 	add.w	r1, r1, #568	; 0x238
    66d8:	68e8      	ldr	r0, [r5, #12]
    66da:	f007 fda8 	bl	e22e <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>
    66de:	6861      	ldr	r1, [r4, #4]
    66e0:	68e8      	ldr	r0, [r5, #12]
    66e2:	f501 718c 	add.w	r1, r1, #280	; 0x118
    66e6:	f007 fd99 	bl	e21c <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>
    66ea:	6860      	ldr	r0, [r4, #4]
    66ec:	8801      	ldrh	r1, [r0, #0]
    66ee:	f8a0 12e6 	strh.w	r1, [r0, #742]	; 0x2e6
    66f2:	6861      	ldr	r1, [r4, #4]
    66f4:	68e8      	ldr	r0, [r5, #12]
    66f6:	f501 713a 	add.w	r1, r1, #744	; 0x2e8
    66fa:	f007 fd93 	bl	e224 <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>
    66fe:	6861      	ldr	r1, [r4, #4]
    6700:	68e8      	ldr	r0, [r5, #12]
    6702:	f501 713c 	add.w	r1, r1, #752	; 0x2f0
    6706:	f007 fd86 	bl	e216 <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>
    670a:	6860      	ldr	r0, [r4, #4]
    670c:	2202      	movs	r2, #2
    670e:	4906      	ldr	r1, [pc, #24]	; (6728 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1158>)
    6710:	f500 7037 	add.w	r0, r0, #732	; 0x2dc
    6714:	f007 fe74 	bl	e400 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6718:	6861      	ldr	r1, [r4, #4]
    671a:	2015      	movs	r0, #21
    671c:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    6720:	2000      	movs	r0, #0
    6722:	bd70      	pop	{r4, r5, r6, pc}
    6724:	2000012c 	.word	0x2000012c
    6728:	0000e89b 	.word	0x0000e89b
    672c:	4901      	ldr	r1, [pc, #4]	; (6734 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1164>)
    672e:	68c9      	ldr	r1, [r1, #12]
    6730:	f7fc bf34 	b.w	359c <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>
    6734:	2000011c 	.word	0x2000011c
    6738:	4901      	ldr	r1, [pc, #4]	; (6740 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1170>)
    673a:	68c9      	ldr	r1, [r1, #12]
    673c:	f7fc bf64 	b.w	3608 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>
    6740:	2000011c 	.word	0x2000011c
    6744:	b510      	push	{r4, lr}
    6746:	6842      	ldr	r2, [r0, #4]
    6748:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
    674c:	070b      	lsls	r3, r1, #28
    674e:	d501      	bpl.n	6754 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1184>
    6750:	2001      	movs	r0, #1
    6752:	bd10      	pop	{r4, pc}
    6754:	f041 0108 	orr.w	r1, r1, #8
    6758:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
    675c:	4905      	ldr	r1, [pc, #20]	; (6774 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11a4>)
    675e:	6840      	ldr	r0, [r0, #4]
    6760:	68c9      	ldr	r1, [r1, #12]
    6762:	78c9      	ldrb	r1, [r1, #3]
    6764:	f880 1120 	strb.w	r1, [r0, #288]	; 0x120
    6768:	4802      	ldr	r0, [pc, #8]	; (6774 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11a4>)
    676a:	3010      	adds	r0, #16
    676c:	f007 ff80 	bl	e670 <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    6770:	2000      	movs	r0, #0
    6772:	bd10      	pop	{r4, pc}
    6774:	2000011c 	.word	0x2000011c
    6778:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    677c:	4605      	mov	r5, r0
    677e:	6840      	ldr	r0, [r0, #4]
    6780:	f890 008c 	ldrb.w	r0, [r0, #140]	; 0x8c
    6784:	f010 0f30 	tst.w	r0, #48	; 0x30
    6788:	d002      	beq.n	6790 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11c0>
    678a:	2001      	movs	r0, #1
    678c:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    6790:	4c32      	ldr	r4, [pc, #200]	; (685c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128c>)
    6792:	68e0      	ldr	r0, [r4, #12]
    6794:	f007 fd65 	bl	e262 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    6798:	b330      	cbz	r0, 67e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1218>
    679a:	68e0      	ldr	r0, [r4, #12]
    679c:	f007 fd5b 	bl	e256 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    67a0:	4680      	mov	r8, r0
    67a2:	68e0      	ldr	r0, [r4, #12]
    67a4:	f007 fd5b 	bl	e25e <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    67a8:	4607      	mov	r7, r0
    67aa:	68e0      	ldr	r0, [r4, #12]
    67ac:	f007 fd51 	bl	e252 <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    67b0:	4606      	mov	r6, r0
    67b2:	68e0      	ldr	r0, [r4, #12]
    67b4:	f007 fd51 	bl	e25a <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    67b8:	4601      	mov	r1, r0
    67ba:	f8cd 8000 	str.w	r8, [sp]
    67be:	6868      	ldr	r0, [r5, #4]
    67c0:	463b      	mov	r3, r7
    67c2:	4632      	mov	r2, r6
    67c4:	302c      	adds	r0, #44	; 0x2c
    67c6:	f007 febe 	bl	e546 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    67ca:	78a0      	ldrb	r0, [r4, #2]
    67cc:	0781      	lsls	r1, r0, #30
    67ce:	f04f 0001 	mov.w	r0, #1
    67d2:	d503      	bpl.n	67dc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x120c>
    67d4:	68a1      	ldr	r1, [r4, #8]
    67d6:	78c9      	ldrb	r1, [r1, #3]
    67d8:	2914      	cmp	r1, #20
    67da:	d00a      	beq.n	67f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1222>
    67dc:	6869      	ldr	r1, [r5, #4]
    67de:	f891 109d 	ldrb.w	r1, [r1, #157]	; 0x9d
    67e2:	291d      	cmp	r1, #29
    67e4:	d005      	beq.n	67f2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1222>
    67e6:	e007      	b.n	67f8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1228>
    67e8:	4628      	mov	r0, r5
    67ea:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    67ee:	f7ff bfa9 	b.w	6744 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    67f2:	6869      	ldr	r1, [r5, #4]
    67f4:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    67f8:	6868      	ldr	r0, [r5, #4]
    67fa:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    67fe:	2901      	cmp	r1, #1
    6800:	d011      	beq.n	6826 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1256>
    6802:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    6806:	f88d 1004 	strb.w	r1, [sp, #4]
    680a:	9901      	ldr	r1, [sp, #4]
    680c:	9101      	str	r1, [sp, #4]
    680e:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6812:	b941      	cbnz	r1, 6826 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1256>
    6814:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    6818:	f88d 1000 	strb.w	r1, [sp]
    681c:	9900      	ldr	r1, [sp, #0]
    681e:	9100      	str	r1, [sp, #0]
    6820:	f89d 1000 	ldrb.w	r1, [sp]
    6824:	b151      	cbz	r1, 683c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x126c>
    6826:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    682a:	f041 0110 	orr.w	r1, r1, #16
    682e:	6001      	str	r1, [r0, #0]
    6830:	480a      	ldr	r0, [pc, #40]	; (685c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128c>)
    6832:	3010      	adds	r0, #16
    6834:	f007 ff1c 	bl	e670 <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    6838:	2000      	movs	r0, #0
    683a:	e7a7      	b.n	678c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x11bc>
    683c:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    6840:	f041 0120 	orr.w	r1, r1, #32
    6844:	6001      	str	r1, [r0, #0]
    6846:	4805      	ldr	r0, [pc, #20]	; (685c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x128c>)
    6848:	3010      	adds	r0, #16
    684a:	6843      	ldr	r3, [r0, #4]
    684c:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    6850:	8818      	ldrh	r0, [r3, #0]
    6852:	f503 72bc 	add.w	r2, r3, #376	; 0x178
    6856:	f7fc fdb1 	bl	33bc <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    685a:	e7e9      	b.n	6830 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1260>
    685c:	2000011c 	.word	0x2000011c
    6860:	4901      	ldr	r1, [pc, #4]	; (6868 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1298>)
    6862:	68c9      	ldr	r1, [r1, #12]
    6864:	f007 bfb1 	b.w	e7ca <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA>
    6868:	2000011c 	.word	0x2000011c
    686c:	b510      	push	{r4, lr}
    686e:	4604      	mov	r4, r0
    6870:	6840      	ldr	r0, [r0, #4]
    6872:	2301      	movs	r3, #1
    6874:	2100      	movs	r1, #0
    6876:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    687a:	3080      	adds	r0, #128	; 0x80
    687c:	f007 fa99 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6880:	2800      	cmp	r0, #0
    6882:	6860      	ldr	r0, [r4, #4]
    6884:	d00c      	beq.n	68a0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12d0>
    6886:	f890 00a3 	ldrb.w	r0, [r0, #163]	; 0xa3
    688a:	2800      	cmp	r0, #0
    688c:	d007      	beq.n	689e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12ce>
    688e:	480a      	ldr	r0, [pc, #40]	; (68b8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e8>)
    6890:	f007 feee 	bl	e670 <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    6894:	6861      	ldr	r1, [r4, #4]
    6896:	2011      	movs	r0, #17
    6898:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    689c:	2000      	movs	r0, #0
    689e:	bd10      	pop	{r4, pc}
    68a0:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    68a4:	2301      	movs	r3, #1
    68a6:	2105      	movs	r1, #5
    68a8:	3080      	adds	r0, #128	; 0x80
    68aa:	f007 fa82 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    68ae:	b108      	cbz	r0, 68b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x12e4>
    68b0:	2008      	movs	r0, #8
    68b2:	bd10      	pop	{r4, pc}
    68b4:	2001      	movs	r0, #1
    68b6:	bd10      	pop	{r4, pc}
    68b8:	2000012c 	.word	0x2000012c
    68bc:	b538      	push	{r3, r4, r5, lr}
    68be:	4604      	mov	r4, r0
    68c0:	6840      	ldr	r0, [r0, #4]
    68c2:	2301      	movs	r3, #1
    68c4:	210b      	movs	r1, #11
    68c6:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    68ca:	3080      	adds	r0, #128	; 0x80
    68cc:	f007 fa71 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    68d0:	bb60      	cbnz	r0, 692c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x135c>
    68d2:	6860      	ldr	r0, [r4, #4]
    68d4:	2301      	movs	r3, #1
    68d6:	2100      	movs	r1, #0
    68d8:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    68dc:	3080      	adds	r0, #128	; 0x80
    68de:	f007 fa68 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    68e2:	b308      	cbz	r0, 6928 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1358>
    68e4:	6860      	ldr	r0, [r4, #4]
    68e6:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    68ea:	2825      	cmp	r0, #37	; 0x25
    68ec:	d01e      	beq.n	692c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x135c>
    68ee:	4d2a      	ldr	r5, [pc, #168]	; (6998 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c8>)
    68f0:	68e8      	ldr	r0, [r5, #12]
    68f2:	f007 fcc8 	bl	e286 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>
    68f6:	b1d8      	cbz	r0, 6930 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1360>
    68f8:	68e8      	ldr	r0, [r5, #12]
    68fa:	6862      	ldr	r2, [r4, #4]
    68fc:	7941      	ldrb	r1, [r0, #5]
    68fe:	f001 0107 	and.w	r1, r1, #7
    6902:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
    6906:	7900      	ldrb	r0, [r0, #4]
    6908:	f000 0207 	and.w	r2, r0, #7
    690c:	6860      	ldr	r0, [r4, #4]
    690e:	f880 2062 	strb.w	r2, [r0, #98]	; 0x62
    6912:	6860      	ldr	r0, [r4, #4]
    6914:	f890 113d 	ldrb.w	r1, [r0, #317]	; 0x13d
    6918:	f88d 1000 	strb.w	r1, [sp]
    691c:	9900      	ldr	r1, [sp, #0]
    691e:	9100      	str	r1, [sp, #0]
    6920:	f89d 1000 	ldrb.w	r1, [sp]
    6924:	bb71      	cbnz	r1, 6984 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b4>
    6926:	e008      	b.n	693a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x136a>
    6928:	2001      	movs	r0, #1
    692a:	bd38      	pop	{r3, r4, r5, pc}
    692c:	2020      	movs	r0, #32
    692e:	bd38      	pop	{r3, r4, r5, pc}
    6930:	4620      	mov	r0, r4
    6932:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6936:	f7ff bf05 	b.w	6744 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    693a:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    693e:	2901      	cmp	r1, #1
    6940:	d020      	beq.n	6984 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b4>
    6942:	f100 016a 	add.w	r1, r0, #106	; 0x6a
    6946:	f890 3063 	ldrb.w	r3, [r0, #99]	; 0x63
    694a:	784d      	ldrb	r5, [r1, #1]
    694c:	4295      	cmp	r5, r2
    694e:	d106      	bne.n	695e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138e>
    6950:	7809      	ldrb	r1, [r1, #0]
    6952:	4299      	cmp	r1, r3
    6954:	d103      	bne.n	695e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x138e>
    6956:	2102      	movs	r1, #2
    6958:	f880 113c 	strb.w	r1, [r0, #316]	; 0x13c
    695c:	e012      	b.n	6984 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13b4>
    695e:	480e      	ldr	r0, [pc, #56]	; (6998 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c8>)
    6960:	3010      	adds	r0, #16
    6962:	6841      	ldr	r1, [r0, #4]
    6964:	f501 70cb 	add.w	r0, r1, #406	; 0x196
    6968:	880a      	ldrh	r2, [r1, #0]
    696a:	f820 2b02 	strh.w	r2, [r0], #2
    696e:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
    6972:	f800 2b01 	strb.w	r2, [r0], #1
    6976:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    697a:	f800 190d 	strb.w	r1, [r0], #-13
    697e:	4907      	ldr	r1, [pc, #28]	; (699c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13cc>)
    6980:	f007 fd35 	bl	e3ee <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>
    6984:	6861      	ldr	r1, [r4, #4]
    6986:	2022      	movs	r0, #34	; 0x22
    6988:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    698c:	4802      	ldr	r0, [pc, #8]	; (6998 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13c8>)
    698e:	3010      	adds	r0, #16
    6990:	f007 fe6e 	bl	e670 <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    6994:	2000      	movs	r0, #0
    6996:	bd38      	pop	{r3, r4, r5, pc}
    6998:	2000011c 	.word	0x2000011c
    699c:	00007a6d 	.word	0x00007a6d
    69a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    69a4:	6845      	ldr	r5, [r0, #4]
    69a6:	4604      	mov	r4, r0
    69a8:	f895 009d 	ldrb.w	r0, [r5, #157]	; 0x9d
    69ac:	2821      	cmp	r0, #33	; 0x21
    69ae:	d008      	beq.n	69c2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13f2>
    69b0:	f05f 0600 	movs.w	r6, #0
    69b4:	f895 009e 	ldrb.w	r0, [r5, #158]	; 0x9e
    69b8:	2823      	cmp	r0, #35	; 0x23
    69ba:	d004      	beq.n	69c6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13f6>
    69bc:	b35e      	cbz	r6, 6a16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1446>
    69be:	359d      	adds	r5, #157	; 0x9d
    69c0:	e002      	b.n	69c8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13f8>
    69c2:	2601      	movs	r6, #1
    69c4:	e7f6      	b.n	69b4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x13e4>
    69c6:	359e      	adds	r5, #158	; 0x9e
    69c8:	f8df 8140 	ldr.w	r8, [pc, #320]	; 6b0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x153c>
    69cc:	f8d8 000c 	ldr.w	r0, [r8, #12]
    69d0:	f007 fc65 	bl	e29e <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>
    69d4:	2700      	movs	r7, #0
    69d6:	b308      	cbz	r0, 6a1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x144c>
    69d8:	4631      	mov	r1, r6
    69da:	f8d8 000c 	ldr.w	r0, [r8, #12]
    69de:	f7fe ffb3 	bl	5948 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x378>
    69e2:	b1d8      	cbz	r0, 6a1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x144c>
    69e4:	466a      	mov	r2, sp
    69e6:	4646      	mov	r6, r8
    69e8:	6860      	ldr	r0, [r4, #4]
    69ea:	f8d8 100c 	ldr.w	r1, [r8, #12]
    69ee:	f009 fe89 	bl	10704 <sym_RRC5YHH6YM3SHNGPFUCE3YX5LDRJC7YUGPWWYHQ>
    69f2:	b388      	cbz	r0, 6a58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1488>
    69f4:	68f0      	ldr	r0, [r6, #12]
    69f6:	f007 fc50 	bl	e29a <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
    69fa:	6861      	ldr	r1, [r4, #4]
    69fc:	f8a1 02cc 	strh.w	r0, [r1, #716]	; 0x2cc
    6a00:	6861      	ldr	r1, [r4, #4]
    6a02:	f8b1 1094 	ldrh.w	r1, [r1, #148]	; 0x94
    6a06:	f008 fe31 	bl	f66c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x44>
    6a0a:	b3e8      	cbz	r0, 6a88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b8>
    6a0c:	6861      	ldr	r1, [r4, #4]
    6a0e:	2028      	movs	r0, #40	; 0x28
    6a10:	f881 00bd 	strb.w	r0, [r1, #189]	; 0xbd
    6a14:	e06e      	b.n	6af4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1524>
    6a16:	2002      	movs	r0, #2
    6a18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6a1c:	6860      	ldr	r0, [r4, #4]
    6a1e:	f04f 0900 	mov.w	r9, #0
    6a22:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    6a26:	2901      	cmp	r1, #1
    6a28:	d017      	beq.n	6a5a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x148a>
    6a2a:	f880 713c 	strb.w	r7, [r0, #316]	; 0x13c
    6a2e:	b306      	cbz	r6, 6a72 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14a2>
    6a30:	f8d8 000c 	ldr.w	r0, [r8, #12]
    6a34:	6861      	ldr	r1, [r4, #4]
    6a36:	2201      	movs	r2, #1
    6a38:	78c0      	ldrb	r0, [r0, #3]
    6a3a:	f881 0121 	strb.w	r0, [r1, #289]	; 0x121
    6a3e:	4082      	lsls	r2, r0
    6a40:	6861      	ldr	r1, [r4, #4]
    6a42:	f3c2 6000 	ubfx	r0, r2, #24, #1
    6a46:	b160      	cbz	r0, 6a62 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1492>
    6a48:	2009      	movs	r0, #9
    6a4a:	f881 009d 	strb.w	r0, [r1, #157]	; 0x9d
    6a4e:	6860      	ldr	r0, [r4, #4]
    6a50:	f890 00d6 	ldrb.w	r0, [r0, #214]	; 0xd6
    6a54:	b9b0      	cbnz	r0, 6a84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14b4>
    6a56:	e007      	b.n	6a68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1498>
    6a58:	e017      	b.n	6a8a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14ba>
    6a5a:	201e      	movs	r0, #30
    6a5c:	f7ff fd58 	bl	6510 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    6a60:	e7e5      	b.n	6a2e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x145e>
    6a62:	f240 4156 	movw	r1, #1110	; 0x456
    6a66:	e001      	b.n	6a6c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x149c>
    6a68:	f240 415e 	movw	r1, #1118	; 0x45e
    6a6c:	2031      	movs	r0, #49	; 0x31
    6a6e:	f7fa fb5d 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6a72:	4826      	ldr	r0, [pc, #152]	; (6b0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x153c>)
    6a74:	702f      	strb	r7, [r5, #0]
    6a76:	3010      	adds	r0, #16
    6a78:	f007 fe02 	bl	e680 <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6a7c:	4620      	mov	r0, r4
    6a7e:	f7ff fe61 	bl	6744 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1174>
    6a82:	4681      	mov	r9, r0
    6a84:	4648      	mov	r0, r9
    6a86:	e7c7      	b.n	6a18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1448>
    6a88:	e013      	b.n	6ab2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14e2>
    6a8a:	6860      	ldr	r0, [r4, #4]
    6a8c:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    6a90:	2901      	cmp	r1, #1
    6a92:	d009      	beq.n	6aa8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14d8>
    6a94:	f880 713c 	strb.w	r7, [r0, #316]	; 0x13c
    6a98:	6860      	ldr	r0, [r4, #4]
    6a9a:	f100 019e 	add.w	r1, r0, #158	; 0x9e
    6a9e:	42a9      	cmp	r1, r5
    6aa0:	d11b      	bne.n	6ada <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
    6aa2:	f880 709e 	strb.w	r7, [r0, #158]	; 0x9e
    6aa6:	e018      	b.n	6ada <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
    6aa8:	2000      	movs	r0, #0
    6aaa:	f7ff fd31 	bl	6510 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    6aae:	702f      	strb	r7, [r5, #0]
    6ab0:	e7f2      	b.n	6a98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x14c8>
    6ab2:	6860      	ldr	r0, [r4, #4]
    6ab4:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6ab8:	290d      	cmp	r1, #13
    6aba:	d018      	beq.n	6aee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x151e>
    6abc:	290b      	cmp	r1, #11
    6abe:	d016      	beq.n	6aee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x151e>
    6ac0:	290a      	cmp	r1, #10
    6ac2:	d014      	beq.n	6aee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x151e>
    6ac4:	f89d 1000 	ldrb.w	r1, [sp]
    6ac8:	f880 12ce 	strb.w	r1, [r0, #718]	; 0x2ce
    6acc:	6861      	ldr	r1, [r4, #4]
    6ace:	f89d 0001 	ldrb.w	r0, [sp, #1]
    6ad2:	f881 02cf 	strb.w	r0, [r1, #719]	; 0x2cf
    6ad6:	2025      	movs	r0, #37	; 0x25
    6ad8:	7028      	strb	r0, [r5, #0]
    6ada:	6860      	ldr	r0, [r4, #4]
    6adc:	f100 019e 	add.w	r1, r0, #158	; 0x9e
    6ae0:	42a9      	cmp	r1, r5
    6ae2:	d10e      	bne.n	6b02 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1532>
    6ae4:	4809      	ldr	r0, [pc, #36]	; (6b0c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x153c>)
    6ae6:	3010      	adds	r0, #16
    6ae8:	f007 fdca 	bl	e680 <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6aec:	e00b      	b.n	6b06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1536>
    6aee:	212a      	movs	r1, #42	; 0x2a
    6af0:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    6af4:	6860      	ldr	r0, [r4, #4]
    6af6:	2202      	movs	r2, #2
    6af8:	4905      	ldr	r1, [pc, #20]	; (6b10 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1540>)
    6afa:	30b4      	adds	r0, #180	; 0xb4
    6afc:	f007 fc80 	bl	e400 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6b00:	e7eb      	b.n	6ada <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x150a>
    6b02:	f880 70d6 	strb.w	r7, [r0, #214]	; 0xd6
    6b06:	2000      	movs	r0, #0
    6b08:	e786      	b.n	6a18 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1448>
    6b0a:	0000      	.short	0x0000
    6b0c:	2000011c 	.word	0x2000011c
    6b10:	0000e6f7 	.word	0x0000e6f7
    6b14:	b570      	push	{r4, r5, r6, lr}
    6b16:	4604      	mov	r4, r0
    6b18:	6840      	ldr	r0, [r0, #4]
    6b1a:	4d0a      	ldr	r5, [pc, #40]	; (6b44 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1574>)
    6b1c:	f810 1fec 	ldrb.w	r1, [r0, #236]!
    6b20:	f041 0104 	orr.w	r1, r1, #4
    6b24:	7001      	strb	r1, [r0, #0]
    6b26:	68e8      	ldr	r0, [r5, #12]
    6b28:	f007 fbcd 	bl	e2c6 <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>
    6b2c:	4606      	mov	r6, r0
    6b2e:	68e8      	ldr	r0, [r5, #12]
    6b30:	f007 fbcd 	bl	e2ce <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>
    6b34:	4601      	mov	r1, r0
    6b36:	4622      	mov	r2, r4
    6b38:	4630      	mov	r0, r6
    6b3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6b3e:	f000 b893 	b.w	6c68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1698>
    6b42:	0000      	.short	0x0000
    6b44:	2000011c 	.word	0x2000011c
    6b48:	4602      	mov	r2, r0
    6b4a:	4813      	ldr	r0, [pc, #76]	; (6b98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
    6b4c:	68c0      	ldr	r0, [r0, #12]
    6b4e:	7901      	ldrb	r1, [r0, #4]
    6b50:	4811      	ldr	r0, [pc, #68]	; (6b98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c8>)
    6b52:	3010      	adds	r0, #16
    6b54:	6843      	ldr	r3, [r0, #4]
    6b56:	f893 009d 	ldrb.w	r0, [r3, #157]	; 0x9d
    6b5a:	2821      	cmp	r0, #33	; 0x21
    6b5c:	d010      	beq.n	6b80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    6b5e:	282e      	cmp	r0, #46	; 0x2e
    6b60:	d00e      	beq.n	6b80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b0>
    6b62:	2828      	cmp	r0, #40	; 0x28
    6b64:	d00e      	beq.n	6b84 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b4>
    6b66:	2804      	cmp	r0, #4
    6b68:	d00e      	beq.n	6b88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15b8>
    6b6a:	280f      	cmp	r0, #15
    6b6c:	d00e      	beq.n	6b8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15bc>
    6b6e:	281d      	cmp	r0, #29
    6b70:	d00e      	beq.n	6b90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c0>
    6b72:	f893 009e 	ldrb.w	r0, [r3, #158]	; 0x9e
    6b76:	2823      	cmp	r0, #35	; 0x23
    6b78:	d00c      	beq.n	6b94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15c4>
    6b7a:	20fe      	movs	r0, #254	; 0xfe
    6b7c:	f000 b874 	b.w	6c68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1698>
    6b80:	2016      	movs	r0, #22
    6b82:	e7fb      	b.n	6b7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6b84:	2023      	movs	r0, #35	; 0x23
    6b86:	e7f9      	b.n	6b7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6b88:	200e      	movs	r0, #14
    6b8a:	e7f7      	b.n	6b7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6b8c:	2012      	movs	r0, #18
    6b8e:	e7f5      	b.n	6b7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6b90:	2014      	movs	r0, #20
    6b92:	e7f3      	b.n	6b7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6b94:	2017      	movs	r0, #23
    6b96:	e7f1      	b.n	6b7c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15ac>
    6b98:	2000011c 	.word	0x2000011c
    6b9c:	b510      	push	{r4, lr}
    6b9e:	4604      	mov	r4, r0
    6ba0:	6840      	ldr	r0, [r0, #4]
    6ba2:	f890 009e 	ldrb.w	r0, [r0, #158]	; 0x9e
    6ba6:	2818      	cmp	r0, #24
    6ba8:	d001      	beq.n	6bae <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15de>
    6baa:	2002      	movs	r0, #2
    6bac:	bd10      	pop	{r4, pc}
    6bae:	4804      	ldr	r0, [pc, #16]	; (6bc0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15f0>)
    6bb0:	f007 fd66 	bl	e680 <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6bb4:	6861      	ldr	r1, [r4, #4]
    6bb6:	201c      	movs	r0, #28
    6bb8:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    6bbc:	2000      	movs	r0, #0
    6bbe:	bd10      	pop	{r4, pc}
    6bc0:	2000012c 	.word	0x2000012c
    6bc4:	4901      	ldr	r1, [pc, #4]	; (6bcc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x15fc>)
    6bc6:	68c9      	ldr	r1, [r1, #12]
    6bc8:	f007 bdb7 	b.w	e73a <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA>
    6bcc:	2000011c 	.word	0x2000011c
    6bd0:	b570      	push	{r4, r5, r6, lr}
    6bd2:	4604      	mov	r4, r0
    6bd4:	481f      	ldr	r0, [pc, #124]	; (6c54 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1684>)
    6bd6:	2500      	movs	r5, #0
    6bd8:	68c0      	ldr	r0, [r0, #12]
    6bda:	7903      	ldrb	r3, [r0, #4]
    6bdc:	6860      	ldr	r0, [r4, #4]
    6bde:	2b16      	cmp	r3, #22
    6be0:	f890 009d 	ldrb.w	r0, [r0, #157]	; 0x9d
    6be4:	d013      	beq.n	6c0e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x163e>
    6be6:	dc06      	bgt.n	6bf6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1626>
    6be8:	2b0e      	cmp	r3, #14
    6bea:	d009      	beq.n	6c00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    6bec:	2b12      	cmp	r3, #18
    6bee:	d007      	beq.n	6c00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    6bf0:	2b14      	cmp	r3, #20
    6bf2:	d12c      	bne.n	6c4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6bf4:	e004      	b.n	6c00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    6bf6:	2b17      	cmp	r3, #23
    6bf8:	d002      	beq.n	6c00 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1630>
    6bfa:	2b23      	cmp	r3, #35	; 0x23
    6bfc:	d127      	bne.n	6c4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6bfe:	e01f      	b.n	6c40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1670>
    6c00:	4622      	mov	r2, r4
    6c02:	2101      	movs	r1, #1
    6c04:	4618      	mov	r0, r3
    6c06:	f000 f9c5 	bl	6f94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c4>
    6c0a:	4605      	mov	r5, r0
    6c0c:	e01f      	b.n	6c4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6c0e:	2821      	cmp	r0, #33	; 0x21
    6c10:	d001      	beq.n	6c16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1646>
    6c12:	282e      	cmp	r0, #46	; 0x2e
    6c14:	d11b      	bne.n	6c4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6c16:	4620      	mov	r0, r4
    6c18:	f007 fd46 	bl	e6a8 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>
    6c1c:	6860      	ldr	r0, [r4, #4]
    6c1e:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6c22:	2922      	cmp	r1, #34	; 0x22
    6c24:	d013      	beq.n	6c4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6c26:	2108      	movs	r1, #8
    6c28:	30ec      	adds	r0, #236	; 0xec
    6c2a:	f008 fcd9 	bl	f5e0 <__kernel_ram_size+0xe8>
    6c2e:	6860      	ldr	r0, [r4, #4]
    6c30:	210b      	movs	r1, #11
    6c32:	30ec      	adds	r0, #236	; 0xec
    6c34:	f008 fcd4 	bl	f5e0 <__kernel_ram_size+0xe8>
    6c38:	201a      	movs	r0, #26
    6c3a:	f7ff fc69 	bl	6510 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    6c3e:	e006      	b.n	6c4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6c40:	2828      	cmp	r0, #40	; 0x28
    6c42:	d104      	bne.n	6c4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6c44:	4804      	ldr	r0, [pc, #16]	; (6c58 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1688>)
    6c46:	6801      	ldr	r1, [r0, #0]
    6c48:	b109      	cbz	r1, 6c4e <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x167e>
    6c4a:	4620      	mov	r0, r4
    6c4c:	4788      	blx	r1
    6c4e:	4628      	mov	r0, r5
    6c50:	bd70      	pop	{r4, r5, r6, pc}
    6c52:	0000      	.short	0x0000
    6c54:	2000011c 	.word	0x2000011c
    6c58:	20000298 	.word	0x20000298
    6c5c:	4901      	ldr	r1, [pc, #4]	; (6c64 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1694>)
    6c5e:	68c9      	ldr	r1, [r1, #12]
    6c60:	f7fc bd4c 	b.w	36fc <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>
    6c64:	2000011c 	.word	0x2000011c
    6c68:	4603      	mov	r3, r0
    6c6a:	2000      	movs	r0, #0
    6c6c:	2b17      	cmp	r3, #23
    6c6e:	d017      	beq.n	6ca0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    6c70:	dc0a      	bgt.n	6c88 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16b8>
    6c72:	2b0e      	cmp	r3, #14
    6c74:	d014      	beq.n	6ca0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    6c76:	2b12      	cmp	r3, #18
    6c78:	d012      	beq.n	6ca0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    6c7a:	2b14      	cmp	r3, #20
    6c7c:	d010      	beq.n	6ca0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d0>
    6c7e:	2b16      	cmp	r3, #22
    6c80:	d112      	bne.n	6ca8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d8>
    6c82:	4608      	mov	r0, r1
    6c84:	f7ff bc4a 	b.w	651c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf4c>
    6c88:	2b23      	cmp	r3, #35	; 0x23
    6c8a:	d003      	beq.n	6c94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c4>
    6c8c:	2b24      	cmp	r3, #36	; 0x24
    6c8e:	d001      	beq.n	6c94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16c4>
    6c90:	2b25      	cmp	r3, #37	; 0x25
    6c92:	d109      	bne.n	6ca8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d8>
    6c94:	4a05      	ldr	r2, [pc, #20]	; (6cac <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16dc>)
    6c96:	6812      	ldr	r2, [r2, #0]
    6c98:	2a00      	cmp	r2, #0
    6c9a:	d005      	beq.n	6ca8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16d8>
    6c9c:	4618      	mov	r0, r3
    6c9e:	4710      	bx	r2
    6ca0:	2100      	movs	r1, #0
    6ca2:	4618      	mov	r0, r3
    6ca4:	f000 b976 	b.w	6f94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c4>
    6ca8:	4770      	bx	lr
    6caa:	0000      	.short	0x0000
    6cac:	20000290 	.word	0x20000290
    6cb0:	b510      	push	{r4, lr}
    6cb2:	6841      	ldr	r1, [r0, #4]
    6cb4:	4604      	mov	r4, r0
    6cb6:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    6cba:	06c2      	lsls	r2, r0, #27
    6cbc:	d402      	bmi.n	6cc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16f4>
    6cbe:	f240 71e6 	movw	r1, #2022	; 0x7e6
    6cc2:	e003      	b.n	6ccc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x16fc>
    6cc4:	0682      	lsls	r2, r0, #26
    6cc6:	d504      	bpl.n	6cd2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1702>
    6cc8:	f240 71e7 	movw	r1, #2023	; 0x7e7
    6ccc:	2031      	movs	r0, #49	; 0x31
    6cce:	f7fa fa2d 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6cd2:	f020 0010 	bic.w	r0, r0, #16
    6cd6:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
    6cda:	4804      	ldr	r0, [pc, #16]	; (6cec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x171c>)
    6cdc:	f007 fcd0 	bl	e680 <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6ce0:	6860      	ldr	r0, [r4, #4]
    6ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6ce6:	2105      	movs	r1, #5
    6ce8:	f7fd bf1c 	b.w	4b24 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    6cec:	2000012c 	.word	0x2000012c
    6cf0:	b510      	push	{r4, lr}
    6cf2:	6840      	ldr	r0, [r0, #4]
    6cf4:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6cf8:	292f      	cmp	r1, #47	; 0x2f
    6cfa:	d006      	beq.n	6d0a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x173a>
    6cfc:	2916      	cmp	r1, #22
    6cfe:	d00c      	beq.n	6d1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x174a>
    6d00:	f44f 61f6 	mov.w	r1, #1968	; 0x7b0
    6d04:	2031      	movs	r0, #49	; 0x31
    6d06:	f7fa fa11 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d0a:	2100      	movs	r1, #0
    6d0c:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    6d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6d14:	4803      	ldr	r0, [pc, #12]	; (6d24 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1754>)
    6d16:	f007 bcb3 	b.w	e680 <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6d1a:	211a      	movs	r1, #26
    6d1c:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    6d20:	bd10      	pop	{r4, pc}
    6d22:	0000      	.short	0x0000
    6d24:	2000012c 	.word	0x2000012c
    6d28:	b570      	push	{r4, r5, r6, lr}
    6d2a:	4604      	mov	r4, r0
    6d2c:	6840      	ldr	r0, [r0, #4]
    6d2e:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    6d32:	291c      	cmp	r1, #28
    6d34:	d004      	beq.n	6d40 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1770>
    6d36:	f240 71c1 	movw	r1, #1985	; 0x7c1
    6d3a:	2031      	movs	r0, #49	; 0x31
    6d3c:	f7fa f9f6 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d40:	2500      	movs	r5, #0
    6d42:	f880 50db 	strb.w	r5, [r0, #219]	; 0xdb
    6d46:	6860      	ldr	r0, [r4, #4]
    6d48:	f890 10dc 	ldrb.w	r1, [r0, #220]	; 0xdc
    6d4c:	b161      	cbz	r1, 6d68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1798>
    6d4e:	f880 50dc 	strb.w	r5, [r0, #220]	; 0xdc
    6d52:	6860      	ldr	r0, [r4, #4]
    6d54:	2202      	movs	r2, #2
    6d56:	8801      	ldrh	r1, [r0, #0]
    6d58:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    6d5c:	6860      	ldr	r0, [r4, #4]
    6d5e:	490d      	ldr	r1, [pc, #52]	; (6d94 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c4>)
    6d60:	f880 5214 	strb.w	r5, [r0, #532]	; 0x214
    6d64:	6860      	ldr	r0, [r4, #4]
    6d66:	e00c      	b.n	6d82 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17b2>
    6d68:	8801      	ldrh	r1, [r0, #0]
    6d6a:	f8a0 1216 	strh.w	r1, [r0, #534]	; 0x216
    6d6e:	6860      	ldr	r0, [r4, #4]
    6d70:	f880 5214 	strb.w	r5, [r0, #532]	; 0x214
    6d74:	6861      	ldr	r1, [r4, #4]
    6d76:	2001      	movs	r0, #1
    6d78:	2202      	movs	r2, #2
    6d7a:	f881 0218 	strb.w	r0, [r1, #536]	; 0x218
    6d7e:	4906      	ldr	r1, [pc, #24]	; (6d98 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17c8>)
    6d80:	6860      	ldr	r0, [r4, #4]
    6d82:	f200 200a 	addw	r0, r0, #522	; 0x20a
    6d86:	f007 fb3b 	bl	e400 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6d8a:	6860      	ldr	r0, [r4, #4]
    6d8c:	f880 509e 	strb.w	r5, [r0, #158]	; 0x9e
    6d90:	bd70      	pop	{r4, r5, r6, pc}
    6d92:	0000      	.short	0x0000
    6d94:	0000e885 	.word	0x0000e885
    6d98:	0000e867 	.word	0x0000e867
    6d9c:	4916      	ldr	r1, [pc, #88]	; (6df8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1828>)
    6d9e:	b510      	push	{r4, lr}
    6da0:	6889      	ldr	r1, [r1, #8]
    6da2:	790a      	ldrb	r2, [r1, #4]
    6da4:	6841      	ldr	r1, [r0, #4]
    6da6:	f891 309d 	ldrb.w	r3, [r1, #157]	; 0x9d
    6daa:	2b09      	cmp	r3, #9
    6dac:	d10a      	bne.n	6dc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f4>
    6dae:	f891 3121 	ldrb.w	r3, [r1, #289]	; 0x121
    6db2:	4293      	cmp	r3, r2
    6db4:	d106      	bne.n	6dc4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x17f4>
    6db6:	2200      	movs	r2, #0
    6db8:	f881 209d 	strb.w	r2, [r1, #157]	; 0x9d
    6dbc:	6840      	ldr	r0, [r0, #4]
    6dbe:	f880 20d6 	strb.w	r2, [r0, #214]	; 0xd6
    6dc2:	bd10      	pop	{r4, pc}
    6dc4:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    6dc8:	071c      	lsls	r4, r3, #28
    6dca:	d509      	bpl.n	6de0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1810>
    6dcc:	f023 0008 	bic.w	r0, r3, #8
    6dd0:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
    6dd4:	4808      	ldr	r0, [pc, #32]	; (6df8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1828>)
    6dd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6dda:	3010      	adds	r0, #16
    6ddc:	f007 bc50 	b.w	e680 <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    6de0:	2aff      	cmp	r2, #255	; 0xff
    6de2:	d004      	beq.n	6dee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x181e>
    6de4:	f240 715c 	movw	r1, #1884	; 0x75c
    6de8:	2031      	movs	r0, #49	; 0x31
    6dea:	f7fa f99f 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6dee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6df2:	f008 bca0 	b.w	f736 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x10e>
    6df6:	0000      	.short	0x0000
    6df8:	2000011c 	.word	0x2000011c
    6dfc:	4808      	ldr	r0, [pc, #32]	; (6e20 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1850>)
    6dfe:	b510      	push	{r4, lr}
    6e00:	6840      	ldr	r0, [r0, #4]
    6e02:	f890 10a3 	ldrb.w	r1, [r0, #163]	; 0xa3
    6e06:	b941      	cbnz	r1, 6e1a <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184a>
    6e08:	f890 209e 	ldrb.w	r2, [r0, #158]	; 0x9e
    6e0c:	2301      	movs	r3, #1
    6e0e:	2106      	movs	r1, #6
    6e10:	3080      	adds	r0, #128	; 0x80
    6e12:	f006 ffce 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6e16:	2800      	cmp	r0, #0
    6e18:	d000      	beq.n	6e1c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x184c>
    6e1a:	2001      	movs	r0, #1
    6e1c:	bd10      	pop	{r4, pc}
    6e1e:	0000      	.short	0x0000
    6e20:	2000012c 	.word	0x2000012c
    6e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e26:	4c59      	ldr	r4, [pc, #356]	; (6f8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19bc>)
    6e28:	4606      	mov	r6, r0
    6e2a:	4615      	mov	r5, r2
    6e2c:	6860      	ldr	r0, [r4, #4]
    6e2e:	2200      	movs	r2, #0
    6e30:	b111      	cbz	r1, 6e38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1868>
    6e32:	f8a0 2236 	strh.w	r2, [r0, #566]	; 0x236
    6e36:	e006      	b.n	6e46 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1876>
    6e38:	f8b0 1236 	ldrh.w	r1, [r0, #566]	; 0x236
    6e3c:	f8b0 2226 	ldrh.w	r2, [r0, #550]	; 0x226
    6e40:	4411      	add	r1, r2
    6e42:	f8a0 1236 	strh.w	r1, [r0, #566]	; 0x236
    6e46:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    6e4a:	f88d 1000 	strb.w	r1, [sp]
    6e4e:	9900      	ldr	r1, [sp, #0]
    6e50:	9100      	str	r1, [sp, #0]
    6e52:	f89d 1000 	ldrb.w	r1, [sp]
    6e56:	b939      	cbnz	r1, 6e68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1898>
    6e58:	f890 209f 	ldrb.w	r2, [r0, #159]	; 0x9f
    6e5c:	2301      	movs	r3, #1
    6e5e:	4619      	mov	r1, r3
    6e60:	3080      	adds	r0, #128	; 0x80
    6e62:	f006 ffa6 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6e66:	b130      	cbz	r0, 6e76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18a6>
    6e68:	6860      	ldr	r0, [r4, #4]
    6e6a:	f830 1fd0 	ldrh.w	r1, [r0, #208]!
    6e6e:	f8b0 2156 	ldrh.w	r2, [r0, #342]	; 0x156
    6e72:	4411      	add	r1, r2
    6e74:	8001      	strh	r1, [r0, #0]
    6e76:	6860      	ldr	r0, [r4, #4]
    6e78:	f890 20d6 	ldrb.w	r2, [r0, #214]	; 0xd6
    6e7c:	b132      	cbz	r2, 6e8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18bc>
    6e7e:	f8b0 10d2 	ldrh.w	r1, [r0, #210]	; 0xd2
    6e82:	f8b0 3226 	ldrh.w	r3, [r0, #550]	; 0x226
    6e86:	4419      	add	r1, r3
    6e88:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
    6e8c:	f990 30da 	ldrsb.w	r3, [r0, #218]	; 0xda
    6e90:	2b00      	cmp	r3, #0
    6e92:	dd06      	ble.n	6ea2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18d2>
    6e94:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    6e98:	f8b0 7226 	ldrh.w	r7, [r0, #550]	; 0x226
    6e9c:	4439      	add	r1, r7
    6e9e:	f8a0 10d8 	strh.w	r1, [r0, #216]	; 0xd8
    6ea2:	f890 10bd 	ldrb.w	r1, [r0, #189]	; 0xbd
    6ea6:	bb09      	cbnz	r1, 6eec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x191c>
    6ea8:	b9be      	cbnz	r6, 6eda <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190a>
    6eaa:	4938      	ldr	r1, [pc, #224]	; (6f8c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19bc>)
    6eac:	3910      	subs	r1, #16
    6eae:	7809      	ldrb	r1, [r1, #0]
    6eb0:	2902      	cmp	r1, #2
    6eb2:	d006      	beq.n	6ec2 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18f2>
    6eb4:	2901      	cmp	r1, #1
    6eb6:	d00a      	beq.n	6ece <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x18fe>
    6eb8:	b1f5      	cbz	r5, 6ef8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1928>
    6eba:	06e9      	lsls	r1, r5, #27
    6ebc:	d50b      	bpl.n	6ed6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1906>
    6ebe:	211e      	movs	r1, #30
    6ec0:	e042      	b.n	6f48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6ec2:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    6ec6:	2906      	cmp	r1, #6
    6ec8:	d03e      	beq.n	6f48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6eca:	2116      	movs	r1, #22
    6ecc:	e03c      	b.n	6f48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6ece:	f890 10a0 	ldrb.w	r1, [r0, #160]	; 0xa0
    6ed2:	b959      	cbnz	r1, 6eec <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x191c>
    6ed4:	e054      	b.n	6f80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>
    6ed6:	0729      	lsls	r1, r5, #28
    6ed8:	d501      	bpl.n	6ede <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x190e>
    6eda:	213d      	movs	r1, #61	; 0x3d
    6edc:	e034      	b.n	6f48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6ede:	06a9      	lsls	r1, r5, #26
    6ee0:	d501      	bpl.n	6ee6 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1916>
    6ee2:	2123      	movs	r1, #35	; 0x23
    6ee4:	e030      	b.n	6f48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6ee6:	07a9      	lsls	r1, r5, #30
    6ee8:	d001      	beq.n	6eee <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x191e>
    6eea:	212a      	movs	r1, #42	; 0x2a
    6eec:	e02c      	b.n	6f48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6eee:	f640 51b7 	movw	r1, #3511	; 0xdb7
    6ef2:	2031      	movs	r0, #49	; 0x31
    6ef4:	f7fa f91a 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6ef8:	b12a      	cbz	r2, 6f06 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1936>
    6efa:	f8b0 10d2 	ldrh.w	r1, [r0, #210]	; 0xd2
    6efe:	f8b0 20d4 	ldrh.w	r2, [r0, #212]	; 0xd4
    6f02:	4291      	cmp	r1, r2
    6f04:	d216      	bcs.n	6f34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1964>
    6f06:	2b00      	cmp	r3, #0
    6f08:	dd05      	ble.n	6f16 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1946>
    6f0a:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    6f0e:	f8b0 20d4 	ldrh.w	r2, [r0, #212]	; 0xd4
    6f12:	4291      	cmp	r1, r2
    6f14:	d20e      	bcs.n	6f34 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1964>
    6f16:	f8b0 20d0 	ldrh.w	r2, [r0, #208]	; 0xd0
    6f1a:	f8b0 10ce 	ldrh.w	r1, [r0, #206]	; 0xce
    6f1e:	428a      	cmp	r2, r1
    6f20:	d30a      	bcc.n	6f38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1968>
    6f22:	f890 2130 	ldrb.w	r2, [r0, #304]	; 0x130
    6f26:	f88d 2000 	strb.w	r2, [sp]
    6f2a:	9a00      	ldr	r2, [sp, #0]
    6f2c:	9200      	str	r2, [sp, #0]
    6f2e:	f89d 2000 	ldrb.w	r2, [sp]
    6f32:	b10a      	cbz	r2, 6f38 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1968>
    6f34:	2122      	movs	r1, #34	; 0x22
    6f36:	e007      	b.n	6f48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6f38:	f890 20a1 	ldrb.w	r2, [r0, #161]	; 0xa1
    6f3c:	b172      	cbz	r2, 6f5c <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x198c>
    6f3e:	f8b0 20cc 	ldrh.w	r2, [r0, #204]	; 0xcc
    6f42:	428a      	cmp	r2, r1
    6f44:	d31c      	bcc.n	6f80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>
    6f46:	2108      	movs	r1, #8
    6f48:	f890 20bc 	ldrb.w	r2, [r0, #188]	; 0xbc
    6f4c:	f88d 2000 	strb.w	r2, [sp]
    6f50:	9a00      	ldr	r2, [sp, #0]
    6f52:	9200      	str	r2, [sp, #0]
    6f54:	f89d 2000 	ldrb.w	r2, [sp]
    6f58:	b96a      	cbnz	r2, 6f76 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19a6>
    6f5a:	e005      	b.n	6f68 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1998>
    6f5c:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
    6f60:	2906      	cmp	r1, #6
    6f62:	d30d      	bcc.n	6f80 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19b0>
    6f64:	213e      	movs	r1, #62	; 0x3e
    6f66:	e7ef      	b.n	6f48 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1978>
    6f68:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    6f6c:	2202      	movs	r2, #2
    6f6e:	4908      	ldr	r1, [pc, #32]	; (6f90 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19c0>)
    6f70:	30b4      	adds	r0, #180	; 0xb4
    6f72:	f007 fa45 	bl	e400 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6f76:	6860      	ldr	r0, [r4, #4]
    6f78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6f7c:	f008 bb54 	b.w	f628 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>
    6f80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6f84:	2100      	movs	r1, #0
    6f86:	f7fd bdcd 	b.w	4b24 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    6f8a:	0000      	.short	0x0000
    6f8c:	2000012c 	.word	0x2000012c
    6f90:	0000e6f7 	.word	0x0000e6f7
    6f94:	b570      	push	{r4, r5, r6, lr}
    6f96:	4614      	mov	r4, r2
    6f98:	460e      	mov	r6, r1
    6f9a:	6861      	ldr	r1, [r4, #4]
    6f9c:	4602      	mov	r2, r0
    6f9e:	2500      	movs	r5, #0
    6fa0:	f891 009d 	ldrb.w	r0, [r1, #157]	; 0x9d
    6fa4:	2a0e      	cmp	r2, #14
    6fa6:	d00a      	beq.n	6fbe <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x19ee>
    6fa8:	2a12      	cmp	r2, #18
    6faa:	d011      	beq.n	6fd0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a00>
    6fac:	2a14      	cmp	r2, #20
    6fae:	d016      	beq.n	6fde <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a0e>
    6fb0:	2a17      	cmp	r2, #23
    6fb2:	d023      	beq.n	6ffc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a2c>
    6fb4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    6fb8:	2031      	movs	r0, #49	; 0x31
    6fba:	f7fa f8b7 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6fbe:	2804      	cmp	r0, #4
    6fc0:	d131      	bne.n	7026 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26>
    6fc2:	4620      	mov	r0, r4
    6fc4:	f007 fb70 	bl	e6a8 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>
    6fc8:	4620      	mov	r0, r4
    6fca:	f7fc fb79 	bl	36c0 <sym_KH2TZBL3IC4Q72SOWRZYKXJYTC66QUG36J2D64Q>
    6fce:	e02a      	b.n	7026 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26>
    6fd0:	280f      	cmp	r0, #15
    6fd2:	d128      	bne.n	7026 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26>
    6fd4:	4620      	mov	r0, r4
    6fd6:	f007 fce2 	bl	e99e <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ>
    6fda:	4605      	mov	r5, r0
    6fdc:	e023      	b.n	7026 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26>
    6fde:	281d      	cmp	r0, #29
    6fe0:	d121      	bne.n	7026 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26>
    6fe2:	4620      	mov	r0, r4
    6fe4:	f007 fb60 	bl	e6a8 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>
    6fe8:	b126      	cbz	r6, 6ff4 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x1a24>
    6fea:	6860      	ldr	r0, [r4, #4]
    6fec:	2105      	movs	r1, #5
    6fee:	30ec      	adds	r0, #236	; 0xec
    6ff0:	f008 faf6 	bl	f5e0 <__kernel_ram_size+0xe8>
    6ff4:	480d      	ldr	r0, [pc, #52]	; (702c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c>)
    6ff6:	f007 fc26 	bl	e846 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
    6ffa:	e014      	b.n	7026 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26>
    6ffc:	f891 009e 	ldrb.w	r0, [r1, #158]	; 0x9e
    7000:	2823      	cmp	r0, #35	; 0x23
    7002:	d110      	bne.n	7026 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26>
    7004:	2600      	movs	r6, #0
    7006:	f881 609e 	strb.w	r6, [r1, #158]	; 0x9e
    700a:	4808      	ldr	r0, [pc, #32]	; (702c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c>)
    700c:	f007 fb38 	bl	e680 <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>
    7010:	6860      	ldr	r0, [r4, #4]
    7012:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    7016:	2801      	cmp	r0, #1
    7018:	d102      	bne.n	7020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>
    701a:	2000      	movs	r0, #0
    701c:	f7ff fa78 	bl	6510 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xf40>
    7020:	6860      	ldr	r0, [r4, #4]
    7022:	f880 613c 	strb.w	r6, [r0, #316]	; 0x13c
    7026:	4628      	mov	r0, r5
    7028:	bd70      	pop	{r4, r5, r6, pc}
    702a:	0000      	.short	0x0000
    702c:	2000012c 	.word	0x2000012c
    7030:	b570      	push	{r4, r5, r6, lr}
    7032:	4d2e      	ldr	r5, [pc, #184]	; (70ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xec>)
    7034:	6868      	ldr	r0, [r5, #4]
    7036:	f890 10a1 	ldrb.w	r1, [r0, #161]	; 0xa1
    703a:	b151      	cbz	r1, 7052 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x52>
    703c:	2901      	cmp	r1, #1
    703e:	d008      	beq.n	7052 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x52>
    7040:	2902      	cmp	r1, #2
    7042:	d009      	beq.n	7058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>
    7044:	2903      	cmp	r1, #3
    7046:	d007      	beq.n	7058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>
    7048:	f640 412c 	movw	r1, #3116	; 0xc2c
    704c:	2031      	movs	r0, #49	; 0x31
    704e:	f7fa f86d 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7052:	f8b0 1224 	ldrh.w	r1, [r0, #548]	; 0x224
    7056:	e037      	b.n	70c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc8>
    7058:	f890 109f 	ldrb.w	r1, [r0, #159]	; 0x9f
    705c:	2907      	cmp	r1, #7
    705e:	d036      	beq.n	70ce <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xce>
    7060:	f8b0 20cc 	ldrh.w	r2, [r0, #204]	; 0xcc
    7064:	f8b0 10ce 	ldrh.w	r1, [r0, #206]	; 0xce
    7068:	2400      	movs	r4, #0
    706a:	1c93      	adds	r3, r2, #2
    706c:	4299      	cmp	r1, r3
    706e:	d306      	bcc.n	707e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7e>
    7070:	1a89      	subs	r1, r1, r2
    7072:	1e89      	subs	r1, r1, #2
    7074:	040c      	lsls	r4, r1, #16
    7076:	0c24      	lsrs	r4, r4, #16
    7078:	d001      	beq.n	707e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7e>
    707a:	1e64      	subs	r4, r4, #1
    707c:	b2a4      	uxth	r4, r4
    707e:	f890 10ca 	ldrb.w	r1, [r0, #202]	; 0xca
    7082:	b139      	cbz	r1, 7094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>
    7084:	f890 209d 	ldrb.w	r2, [r0, #157]	; 0x9d
    7088:	2301      	movs	r3, #1
    708a:	2109      	movs	r1, #9
    708c:	3080      	adds	r0, #128	; 0x80
    708e:	f006 fe90 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    7092:	b340      	cbz	r0, 70e6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe6>
    7094:	f7ff feb2 	bl	6dfc <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0x182c>
    7098:	b178      	cbz	r0, 70ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xba>
    709a:	686a      	ldr	r2, [r5, #4]
    709c:	2000      	movs	r0, #0
    709e:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
    70a2:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
    70a6:	1c93      	adds	r3, r2, #2
    70a8:	4299      	cmp	r1, r3
    70aa:	d303      	bcc.n	70b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb4>
    70ac:	1a88      	subs	r0, r1, r2
    70ae:	1e80      	subs	r0, r0, #2
    70b0:	d000      	beq.n	70b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb4>
    70b2:	1e40      	subs	r0, r0, #1
    70b4:	42a0      	cmp	r0, r4
    70b6:	d200      	bcs.n	70ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xba>
    70b8:	b284      	uxth	r4, r0
    70ba:	b10c      	cbz	r4, 70c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc0>
    70bc:	1e64      	subs	r4, r4, #1
    70be:	b2a4      	uxth	r4, r4
    70c0:	6868      	ldr	r0, [r5, #4]
    70c2:	f8b0 1224 	ldrh.w	r1, [r0, #548]	; 0x224
    70c6:	4421      	add	r1, r4
    70c8:	f8a0 1220 	strh.w	r1, [r0, #544]	; 0x220
    70cc:	bd70      	pop	{r4, r5, r6, pc}
    70ce:	f8b0 10cc 	ldrh.w	r1, [r0, #204]	; 0xcc
    70d2:	2903      	cmp	r1, #3
    70d4:	d3bd      	bcc.n	7052 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x52>
    70d6:	f830 1f94 	ldrh.w	r1, [r0, #148]!
    70da:	8f42      	ldrh	r2, [r0, #58]	; 0x3a
    70dc:	4411      	add	r1, r2
    70de:	1c49      	adds	r1, r1, #1
    70e0:	f8a0 118c 	strh.w	r1, [r0, #396]	; 0x18c
    70e4:	bd70      	pop	{r4, r5, r6, pc}
    70e6:	2400      	movs	r4, #0
    70e8:	e7ea      	b.n	70c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc0>
    70ea:	0000      	.short	0x0000
    70ec:	2000012c 	.word	0x2000012c

000070f0 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    70f0:	b570      	push	{r4, r5, r6, lr}
    70f2:	6844      	ldr	r4, [r0, #4]
    70f4:	220d      	movs	r2, #13
    70f6:	f504 7598 	add.w	r5, r4, #304	; 0x130
    70fa:	2100      	movs	r1, #0
    70fc:	f104 006f 	add.w	r0, r4, #111	; 0x6f
    7100:	f009 fdf4 	bl	10cec <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7104:	f44f 70a3 	mov.w	r0, #326	; 0x146
    7108:	2100      	movs	r1, #0
    710a:	f8a4 1144 	strh.w	r1, [r4, #324]	; 0x144
    710e:	5501      	strb	r1, [r0, r4]
    7110:	f8a5 1017 	strh.w	r1, [r5, #23]
    7114:	7669      	strb	r1, [r5, #25]
    7116:	4608      	mov	r0, r1
    7118:	f05f 017f 	movs.w	r1, #127	; 0x7f
    711c:	eb04 0240 	add.w	r2, r4, r0, lsl #1
    7120:	1c40      	adds	r0, r0, #1
    7122:	b2c0      	uxtb	r0, r0
    7124:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
    7128:	2802      	cmp	r0, #2
    712a:	d3f7      	bcc.n	711c <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x2c>
    712c:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
    7130:	4620      	mov	r0, r4
    7132:	f008 fbc0 	bl	f8b6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    7136:	2000      	movs	r0, #0
    7138:	21ff      	movs	r1, #255	; 0xff
    713a:	1822      	adds	r2, r4, r0
    713c:	1c40      	adds	r0, r0, #1
    713e:	b2c0      	uxtb	r0, r0
    7140:	f882 1077 	strb.w	r1, [r2, #119]	; 0x77
    7144:	2802      	cmp	r0, #2
    7146:	d3f8      	bcc.n	713a <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x4a>
    7148:	bd70      	pop	{r4, r5, r6, pc}
	...

0000714c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    714c:	4903      	ldr	r1, [pc, #12]	; (715c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    714e:	884a      	ldrh	r2, [r1, #2]
    7150:	8002      	strh	r2, [r0, #0]
    7152:	7809      	ldrb	r1, [r1, #0]
    7154:	7081      	strb	r1, [r0, #2]
    7156:	2000      	movs	r0, #0
    7158:	4770      	bx	lr
    715a:	0000      	.short	0x0000
    715c:	20001098 	.word	0x20001098

00007160 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    7160:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    7162:	460c      	mov	r4, r1
    7164:	4605      	mov	r5, r0
    7166:	8800      	ldrh	r0, [r0, #0]
    7168:	4669      	mov	r1, sp
    716a:	f006 fe0b 	bl	dd84 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    716e:	2200      	movs	r2, #0
    7170:	b128      	cbz	r0, 717e <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x1e>
    7172:	f8c4 2002 	str.w	r2, [r4, #2]
    7176:	71a2      	strb	r2, [r4, #6]
    7178:	8022      	strh	r2, [r4, #0]
    717a:	2002      	movs	r0, #2
    717c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    717e:	9901      	ldr	r1, [sp, #4]
    7180:	f111 0180 	adds.w	r1, r1, #128	; 0x80
    7184:	f881 2074 	strb.w	r2, [r1, #116]	; 0x74
    7188:	f8d1 0026 	ldr.w	r0, [r1, #38]	; 0x26
    718c:	f8c4 0002 	str.w	r0, [r4, #2]
    7190:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
    7194:	71a0      	strb	r0, [r4, #6]
    7196:	8828      	ldrh	r0, [r5, #0]
    7198:	8020      	strh	r0, [r4, #0]
    719a:	f891 0074 	ldrb.w	r0, [r1, #116]	; 0x74
    719e:	f88d 0008 	strb.w	r0, [sp, #8]
    71a2:	9802      	ldr	r0, [sp, #8]
    71a4:	9002      	str	r0, [sp, #8]
    71a6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    71aa:	2800      	cmp	r0, #0
    71ac:	d1ea      	bne.n	7184 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x24>
    71ae:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

000071b0 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    71b0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    71b2:	460d      	mov	r5, r1
    71b4:	4606      	mov	r6, r0
    71b6:	8800      	ldrh	r0, [r0, #0]
    71b8:	4669      	mov	r1, sp
    71ba:	f006 fde3 	bl	dd84 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    71be:	2800      	cmp	r0, #0
    71c0:	d11a      	bne.n	71f8 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    71c2:	f8dd 4004 	ldr.w	r4, [sp, #4]
    71c6:	2700      	movs	r7, #0
    71c8:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    71cc:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    71d0:	f009 f85c 	bl	1028c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    71d4:	70a8      	strb	r0, [r5, #2]
    71d6:	7860      	ldrb	r0, [r4, #1]
    71d8:	f009 f858 	bl	1028c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e>
    71dc:	70e8      	strb	r0, [r5, #3]
    71de:	78a0      	ldrb	r0, [r4, #2]
    71e0:	f88d 0008 	strb.w	r0, [sp, #8]
    71e4:	9802      	ldr	r0, [sp, #8]
    71e6:	9002      	str	r0, [sp, #8]
    71e8:	f89d 0008 	ldrb.w	r0, [sp, #8]
    71ec:	3c6a      	subs	r4, #106	; 0x6a
    71ee:	2800      	cmp	r0, #0
    71f0:	d1ea      	bne.n	71c8 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    71f2:	8830      	ldrh	r0, [r6, #0]
    71f4:	8028      	strh	r0, [r5, #0]
    71f6:	2000      	movs	r0, #0
    71f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

000071fc <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    71fc:	4903      	ldr	r1, [pc, #12]	; (720c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    71fe:	880a      	ldrh	r2, [r1, #0]
    7200:	8002      	strh	r2, [r0, #0]
    7202:	8849      	ldrh	r1, [r1, #2]
    7204:	8041      	strh	r1, [r0, #2]
    7206:	2000      	movs	r0, #0
    7208:	4770      	bx	lr
    720a:	0000      	.short	0x0000
    720c:	2000029e 	.word	0x2000029e

00007210 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    7210:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    7212:	2400      	movs	r4, #0
    7214:	a902      	add	r1, sp, #8
    7216:	f88d 4004 	strb.w	r4, [sp, #4]
    721a:	f88d 4008 	strb.w	r4, [sp, #8]
    721e:	9100      	str	r1, [sp, #0]
    7220:	7882      	ldrb	r2, [r0, #2]
    7222:	7841      	ldrb	r1, [r0, #1]
    7224:	7800      	ldrb	r0, [r0, #0]
    7226:	ab01      	add	r3, sp, #4
    7228:	f009 f9a4 	bl	10574 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x316>
    722c:	2800      	cmp	r0, #0
    722e:	d112      	bne.n	7256 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    7230:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7234:	f009 f8de 	bl	103f4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    7238:	b170      	cbz	r0, 7258 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    723a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    723e:	f009 f8d9 	bl	103f4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
    7242:	b148      	cbz	r0, 7258 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    7244:	4805      	ldr	r0, [pc, #20]	; (725c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    7246:	f89d 1004 	ldrb.w	r1, [sp, #4]
    724a:	7381      	strb	r1, [r0, #14]
    724c:	f89d 1008 	ldrb.w	r1, [sp, #8]
    7250:	73c1      	strb	r1, [r0, #15]
    7252:	8204      	strh	r4, [r0, #16]
    7254:	2000      	movs	r0, #0
    7256:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    7258:	2011      	movs	r0, #17
    725a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    725c:	20001098 	.word	0x20001098

00007260 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    7260:	b510      	push	{r4, lr}
    7262:	4604      	mov	r4, r0
    7264:	8841      	ldrh	r1, [r0, #2]
    7266:	8800      	ldrh	r0, [r0, #0]
    7268:	f009 f8d9 	bl	1041e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    726c:	2800      	cmp	r0, #0
    726e:	d105      	bne.n	727c <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x1c>
    7270:	4803      	ldr	r0, [pc, #12]	; (7280 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x20>)
    7272:	8821      	ldrh	r1, [r4, #0]
    7274:	8001      	strh	r1, [r0, #0]
    7276:	8861      	ldrh	r1, [r4, #2]
    7278:	8041      	strh	r1, [r0, #2]
    727a:	2000      	movs	r0, #0
    727c:	bd10      	pop	{r4, pc}
    727e:	0000      	.short	0x0000
    7280:	2000029e 	.word	0x2000029e

00007284 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>:
    7284:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    7288:	460f      	mov	r7, r1
    728a:	4605      	mov	r5, r0
    728c:	7806      	ldrb	r6, [r0, #0]
    728e:	f009 f864 	bl	1035a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xfc>
    7292:	2800      	cmp	r0, #0
    7294:	d10e      	bne.n	72b4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    7296:	4628      	mov	r0, r5
    7298:	f009 f839 	bl	1030e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xb0>
    729c:	2800      	cmp	r0, #0
    729e:	d109      	bne.n	72b4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    72a0:	2101      	movs	r1, #1
    72a2:	4630      	mov	r0, r6
    72a4:	f7fa fa4a 	bl	173c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    72a8:	0004      	movs	r4, r0
    72aa:	d005      	beq.n	72b8 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x34>
    72ac:	f007 fe92 	bl	efd4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    72b0:	b170      	cbz	r0, 72d0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x4c>
    72b2:	200c      	movs	r0, #12
    72b4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    72b8:	2101      	movs	r1, #1
    72ba:	4630      	mov	r0, r6
    72bc:	f7fa fa06 	bl	16cc <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    72c0:	0004      	movs	r4, r0
    72c2:	d013      	beq.n	72ec <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x68>
    72c4:	4815      	ldr	r0, [pc, #84]	; (731c <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x98>)
    72c6:	f990 1000 	ldrsb.w	r1, [r0]
    72ca:	4620      	mov	r0, r4
    72cc:	f007 fc71 	bl	ebb2 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    72d0:	4620      	mov	r0, r4
    72d2:	f007 fcd9 	bl	ec88 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    72d6:	7038      	strb	r0, [r7, #0]
    72d8:	74e8      	strb	r0, [r5, #19]
    72da:	4629      	mov	r1, r5
    72dc:	4620      	mov	r0, r4
    72de:	f7fc fc41 	bl	3b64 <sym_L2IWXNCKXJIQJRTEIIW7HGFEPJAQM34TKD2GOIA>
    72e2:	4606      	mov	r6, r0
    72e4:	7e68      	ldrb	r0, [r5, #25]
    72e6:	b1b8      	cbz	r0, 7318 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x94>
    72e8:	b116      	cbz	r6, 72f0 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x6c>
    72ea:	e015      	b.n	7318 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x94>
    72ec:	2007      	movs	r0, #7
    72ee:	e7e1      	b.n	72b4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    72f0:	2200      	movs	r2, #0
    72f2:	4668      	mov	r0, sp
    72f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    72f6:	f006 fbb6 	bl	da66 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    72fa:	2200      	movs	r2, #0
    72fc:	2101      	movs	r1, #1
    72fe:	6b60      	ldr	r0, [r4, #52]	; 0x34
    7300:	f006 fc2b 	bl	db5a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    7304:	2204      	movs	r2, #4
    7306:	4668      	mov	r0, sp
    7308:	6b61      	ldr	r1, [r4, #52]	; 0x34
    730a:	f006 fbac 	bl	da66 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    730e:	2200      	movs	r2, #0
    7310:	4611      	mov	r1, r2
    7312:	6b60      	ldr	r0, [r4, #52]	; 0x34
    7314:	f006 fc21 	bl	db5a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    7318:	4630      	mov	r0, r6
    731a:	e7cb      	b.n	72b4 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI+0x30>
    731c:	2000029c 	.word	0x2000029c

00007320 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    7320:	7801      	ldrb	r1, [r0, #0]
    7322:	b171      	cbz	r1, 7342 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    7324:	7841      	ldrb	r1, [r0, #1]
    7326:	b161      	cbz	r1, 7342 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    7328:	8841      	ldrh	r1, [r0, #2]
    732a:	291b      	cmp	r1, #27
    732c:	d309      	bcc.n	7342 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    732e:	8881      	ldrh	r1, [r0, #4]
    7330:	291b      	cmp	r1, #27
    7332:	d306      	bcc.n	7342 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    7334:	4904      	ldr	r1, [pc, #16]	; (7348 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    7336:	6802      	ldr	r2, [r0, #0]
    7338:	600a      	str	r2, [r1, #0]
    733a:	8880      	ldrh	r0, [r0, #4]
    733c:	8088      	strh	r0, [r1, #4]
    733e:	2000      	movs	r0, #0
    7340:	4770      	bx	lr
    7342:	2012      	movs	r0, #18
    7344:	4770      	bx	lr
    7346:	0000      	.short	0x0000
    7348:	20001098 	.word	0x20001098

0000734c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    734c:	6800      	ldr	r0, [r0, #0]
    734e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    7352:	4288      	cmp	r0, r1
    7354:	d303      	bcc.n	735e <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    7356:	4903      	ldr	r1, [pc, #12]	; (7364 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    7358:	6088      	str	r0, [r1, #8]
    735a:	2000      	movs	r0, #0
    735c:	4770      	bx	lr
    735e:	2012      	movs	r0, #18
    7360:	4770      	bx	lr
    7362:	0000      	.short	0x0000
    7364:	20001098 	.word	0x20001098

00007368 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    7368:	4a03      	ldr	r2, [pc, #12]	; (7378 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    736a:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
    736e:	6001      	str	r1, [r0, #0]
    7370:	6042      	str	r2, [r0, #4]
    7372:	2000      	movs	r0, #0
    7374:	4770      	bx	lr
    7376:	0000      	.short	0x0000
    7378:	00007890 	.word	0x00007890

0000737c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    737c:	b50e      	push	{r1, r2, r3, lr}
    737e:	8800      	ldrh	r0, [r0, #0]
    7380:	4669      	mov	r1, sp
    7382:	f006 fcff 	bl	dd84 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7386:	b960      	cbnz	r0, 73a2 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
    7388:	9801      	ldr	r0, [sp, #4]
    738a:	f009 f8af 	bl	104ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
    738e:	b140      	cbz	r0, 73a2 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x26>
    7390:	9801      	ldr	r0, [sp, #4]
    7392:	4601      	mov	r1, r0
    7394:	f890 2142 	ldrb.w	r2, [r0, #322]	; 0x142
    7398:	3080      	adds	r0, #128	; 0x80
    739a:	f501 71a1 	add.w	r1, r1, #322	; 0x142
    739e:	b962      	cbnz	r2, 73ba <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
    73a0:	e001      	b.n	73a6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2a>
    73a2:	2002      	movs	r0, #2
    73a4:	bd0e      	pop	{r1, r2, r3, pc}
    73a6:	f890 2066 	ldrb.w	r2, [r0, #102]	; 0x66
    73aa:	f88d 2008 	strb.w	r2, [sp, #8]
    73ae:	9a02      	ldr	r2, [sp, #8]
    73b0:	9202      	str	r2, [sp, #8]
    73b2:	f89d 3008 	ldrb.w	r3, [sp, #8]
    73b6:	2201      	movs	r2, #1
    73b8:	b10b      	cbz	r3, 73be <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
    73ba:	203a      	movs	r0, #58	; 0x3a
    73bc:	bd0e      	pop	{r1, r2, r3, pc}
    73be:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
    73c2:	079b      	lsls	r3, r3, #30
    73c4:	d006      	beq.n	73d4 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>
    73c6:	2202      	movs	r2, #2
    73c8:	4905      	ldr	r1, [pc, #20]	; (73e0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x64>)
    73ca:	305e      	adds	r0, #94	; 0x5e
    73cc:	f007 f82c 	bl	e428 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    73d0:	2000      	movs	r0, #0
    73d2:	bd0e      	pop	{r1, r2, r3, pc}
    73d4:	700a      	strb	r2, [r1, #0]
    73d6:	4668      	mov	r0, sp
    73d8:	f006 ffe6 	bl	e3a8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    73dc:	e7f8      	b.n	73d0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x54>
    73de:	0000      	.short	0x0000
    73e0:	0000e9d7 	.word	0x0000e9d7

000073e4 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    73e4:	4902      	ldr	r1, [pc, #8]	; (73f0 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI+0xc>)
    73e6:	f640 60a6 	movw	r0, #3750	; 0xea6
    73ea:	6088      	str	r0, [r1, #8]
    73ec:	f008 bf24 	b.w	10238 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    73f0:	20001098 	.word	0x20001098

000073f4 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ>:
    73f4:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    73f8:	4c33      	ldr	r4, [pc, #204]	; (74c8 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xd4>)
    73fa:	4613      	mov	r3, r2
    73fc:	460e      	mov	r6, r1
    73fe:	f8b0 2054 	ldrh.w	r2, [r0, #84]	; 0x54
    7402:	8825      	ldrh	r5, [r4, #0]
    7404:	f8b0 1052 	ldrh.w	r1, [r0, #82]	; 0x52
    7408:	4295      	cmp	r5, r2
    740a:	d200      	bcs.n	740e <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x1a>
    740c:	462a      	mov	r2, r5
    740e:	4690      	mov	r8, r2
    7410:	428d      	cmp	r5, r1
    7412:	d300      	bcc.n	7416 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x22>
    7414:	460d      	mov	r5, r1
    7416:	8864      	ldrh	r4, [r4, #2]
    7418:	f640 0248 	movw	r2, #2120	; 0x848
    741c:	4294      	cmp	r4, r2
    741e:	d201      	bcs.n	7424 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x30>
    7420:	4621      	mov	r1, r4
    7422:	e000      	b.n	7426 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x32>
    7424:	4611      	mov	r1, r2
    7426:	d300      	bcc.n	742a <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x36>
    7428:	4614      	mov	r4, r2
    742a:	4627      	mov	r7, r4
    742c:	4291      	cmp	r1, r2
    742e:	d300      	bcc.n	7432 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x3e>
    7430:	4611      	mov	r1, r2
    7432:	460c      	mov	r4, r1
    7434:	f44f 72a4 	mov.w	r2, #328	; 0x148
    7438:	2d1b      	cmp	r5, #27
    743a:	d001      	beq.n	7440 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x4c>
    743c:	4297      	cmp	r7, r2
    743e:	d104      	bne.n	744a <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x56>
    7440:	f1b8 0f1b 	cmp.w	r8, #27
    7444:	d03e      	beq.n	74c4 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xd0>
    7446:	4294      	cmp	r4, r2
    7448:	d03c      	beq.n	74c4 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xd0>
    744a:	466a      	mov	r2, sp
    744c:	4619      	mov	r1, r3
    744e:	f008 fff4 	bl	1043a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    7452:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    7456:	4641      	mov	r1, r8
    7458:	4540      	cmp	r0, r8
    745a:	d900      	bls.n	745e <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x6a>
    745c:	4608      	mov	r0, r1
    745e:	80f0      	strh	r0, [r6, #6]
    7460:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7464:	42a1      	cmp	r1, r4
    7466:	d800      	bhi.n	746a <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x76>
    7468:	460c      	mov	r4, r1
    746a:	8134      	strh	r4, [r6, #8]
    746c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    7470:	42a9      	cmp	r1, r5
    7472:	d800      	bhi.n	7476 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x82>
    7474:	460d      	mov	r5, r1
    7476:	8075      	strh	r5, [r6, #2]
    7478:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    747c:	42b9      	cmp	r1, r7
    747e:	d800      	bhi.n	7482 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0x8e>
    7480:	460f      	mov	r7, r1
    7482:	80b7      	strh	r7, [r6, #4]
    7484:	21ff      	movs	r1, #255	; 0xff
    7486:	7031      	strb	r1, [r6, #0]
    7488:	381b      	subs	r0, #27
    748a:	28e0      	cmp	r0, #224	; 0xe0
    748c:	d902      	bls.n	7494 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xa0>
    748e:	f240 51a9 	movw	r1, #1449	; 0x5a9
    7492:	e014      	b.n	74be <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xca>
    7494:	3d1b      	subs	r5, #27
    7496:	2de0      	cmp	r5, #224	; 0xe0
    7498:	d902      	bls.n	74a0 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xac>
    749a:	f240 51ab 	movw	r1, #1451	; 0x5ab
    749e:	e00e      	b.n	74be <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xca>
    74a0:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    74a4:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    74a8:	4284      	cmp	r4, r0
    74aa:	d902      	bls.n	74b2 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xbe>
    74ac:	f240 51ad 	movw	r1, #1453	; 0x5ad
    74b0:	e005      	b.n	74be <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xca>
    74b2:	f5a7 77a4 	sub.w	r7, r7, #328	; 0x148
    74b6:	4287      	cmp	r7, r0
    74b8:	d904      	bls.n	74c4 <sym_7OWCT6RQNC7NMJTETN4SHKZQ2DXHZYW5I4QMKDQ+0xd0>
    74ba:	f240 51af 	movw	r1, #1455	; 0x5af
    74be:	2039      	movs	r0, #57	; 0x39
    74c0:	f7f9 fe34 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    74c4:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    74c8:	2000029e 	.word	0x2000029e

000074cc <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A>:
    74cc:	b570      	push	{r4, r5, r6, lr}
    74ce:	b086      	sub	sp, #24
    74d0:	4604      	mov	r4, r0
    74d2:	f000 fa7b 	bl	79cc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    74d6:	0940      	lsrs	r0, r0, #5
    74d8:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    74dc:	4e2d      	ldr	r6, [pc, #180]	; (7594 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc8>)
    74de:	07c0      	lsls	r0, r0, #31
    74e0:	f104 052c 	add.w	r5, r4, #44	; 0x2c
    74e4:	d002      	beq.n	74ec <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x20>
    74e6:	8871      	ldrh	r1, [r6, #2]
    74e8:	88b0      	ldrh	r0, [r6, #4]
    74ea:	e001      	b.n	74f0 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x24>
    74ec:	211b      	movs	r1, #27
    74ee:	4608      	mov	r0, r1
    74f0:	84e9      	strh	r1, [r5, #38]	; 0x26
    74f2:	8528      	strh	r0, [r5, #40]	; 0x28
    74f4:	f000 fa6a 	bl	79cc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    74f8:	0788      	lsls	r0, r1, #30
    74fa:	f04f 0501 	mov.w	r5, #1
    74fe:	d505      	bpl.n	750c <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x40>
    7500:	f88d 5000 	strb.w	r5, [sp]
    7504:	4668      	mov	r0, sp
    7506:	9401      	str	r4, [sp, #4]
    7508:	f7ff fdf2 	bl	70f0 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    750c:	68b0      	ldr	r0, [r6, #8]
    750e:	62e0      	str	r0, [r4, #44]	; 0x2c
    7510:	f641 514c 	movw	r1, #7500	; 0x1d4c
    7514:	6121      	str	r1, [r4, #16]
    7516:	8821      	ldrh	r1, [r4, #0]
    7518:	f8ad 1004 	strh.w	r1, [sp, #4]
    751c:	7bb1      	ldrb	r1, [r6, #14]
    751e:	f88d 1006 	strb.w	r1, [sp, #6]
    7522:	7bf1      	ldrb	r1, [r6, #15]
    7524:	f88d 1007 	strb.w	r1, [sp, #7]
    7528:	8a31      	ldrh	r1, [r6, #16]
    752a:	f8ad 1008 	strh.w	r1, [sp, #8]
    752e:	a904      	add	r1, sp, #16
    7530:	9100      	str	r1, [sp, #0]
    7532:	4628      	mov	r0, r5
    7534:	ab03      	add	r3, sp, #12
    7536:	aa01      	add	r2, sp, #4
    7538:	4621      	mov	r1, r4
    753a:	f008 ffb4 	bl	104a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
    753e:	b138      	cbz	r0, 7550 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0x84>
    7540:	8820      	ldrh	r0, [r4, #0]
    7542:	2100      	movs	r1, #0
    7544:	f7fa f99c 	bl	1880 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    7548:	b308      	cbz	r0, 758e <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc2>
    754a:	f240 5176 	movw	r1, #1398	; 0x576
    754e:	e01b      	b.n	7588 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xbc>
    7550:	f89d 000c 	ldrb.w	r0, [sp, #12]
    7554:	f88d 0014 	strb.w	r0, [sp, #20]
    7558:	f89d 0010 	ldrb.w	r0, [sp, #16]
    755c:	f88d 0015 	strb.w	r0, [sp, #21]
    7560:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    7564:	f8ad 0016 	strh.w	r0, [sp, #22]
    7568:	a905      	add	r1, sp, #20
    756a:	4620      	mov	r0, r4
    756c:	f006 fca9 	bl	dec2 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    7570:	7870      	ldrb	r0, [r6, #1]
    7572:	9000      	str	r0, [sp, #0]
    7574:	7833      	ldrb	r3, [r6, #0]
    7576:	88b2      	ldrh	r2, [r6, #4]
    7578:	8871      	ldrh	r1, [r6, #2]
    757a:	8820      	ldrh	r0, [r4, #0]
    757c:	f7fa f9b2 	bl	18e4 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    7580:	2800      	cmp	r0, #0
    7582:	d005      	beq.n	7590 <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A+0xc4>
    7584:	f240 5181 	movw	r1, #1409	; 0x581
    7588:	2039      	movs	r0, #57	; 0x39
    758a:	f7f9 fdcf 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    758e:	2009      	movs	r0, #9
    7590:	b006      	add	sp, #24
    7592:	bd70      	pop	{r4, r5, r6, pc}
    7594:	20001098 	.word	0x20001098

00007598 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI>:
    7598:	b510      	push	{r4, lr}
    759a:	2005      	movs	r0, #5
    759c:	f000 fa0a 	bl	79b4 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    75a0:	f7fd ff6e 	bl	5480 <sym_OGXWMXSCK2QG6TOSCWHHS4PII24VSXWVJJIPCDI>
    75a4:	4902      	ldr	r1, [pc, #8]	; (75b0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x18>)
    75a6:	4801      	ldr	r0, [pc, #4]	; (75ac <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x14>)
    75a8:	6088      	str	r0, [r1, #8]
    75aa:	bd10      	pop	{r4, pc}
    75ac:	000073f5 	.word	0x000073f5
    75b0:	2000029c 	.word	0x2000029c
    75b4:	b51c      	push	{r2, r3, r4, lr}
    75b6:	4909      	ldr	r1, [pc, #36]	; (75dc <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x44>)
    75b8:	e9d1 0100 	ldrd	r0, r1, [r1]
    75bc:	e9cd 0100 	strd	r0, r1, [sp]
    75c0:	e005      	b.n	75ce <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    75c2:	9800      	ldr	r0, [sp, #0]
    75c4:	f007 fd06 	bl	efd4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    75c8:	b108      	cbz	r0, 75ce <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x36>
    75ca:	2001      	movs	r0, #1
    75cc:	bd1c      	pop	{r2, r3, r4, pc}
    75ce:	4668      	mov	r0, sp
    75d0:	f7fa f906 	bl	17e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    75d4:	2800      	cmp	r0, #0
    75d6:	d0f4      	beq.n	75c2 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x2a>
    75d8:	2000      	movs	r0, #0
    75da:	bd1c      	pop	{r2, r3, r4, pc}
    75dc:	00007890 	.word	0x00007890
    75e0:	b510      	push	{r4, lr}
    75e2:	2101      	movs	r1, #1
    75e4:	2000      	movs	r0, #0
    75e6:	f7fa f8a9 	bl	173c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    75ea:	0004      	movs	r4, r0
    75ec:	d10a      	bne.n	7604 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x6c>
    75ee:	2101      	movs	r1, #1
    75f0:	f7fa f86c 	bl	16cc <sym_7JFC7IFAJQVPYCQHAIUKZ626ISM3VUWBEEXY7WI>
    75f4:	0004      	movs	r4, r0
    75f6:	d007      	beq.n	7608 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x70>
    75f8:	4806      	ldr	r0, [pc, #24]	; (7614 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x7c>)
    75fa:	f990 1000 	ldrsb.w	r1, [r0]
    75fe:	4620      	mov	r0, r4
    7600:	f007 fad7 	bl	ebb2 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>
    7604:	4620      	mov	r0, r4
    7606:	bd10      	pop	{r4, pc}
    7608:	f240 3129 	movw	r1, #809	; 0x329
    760c:	2039      	movs	r0, #57	; 0x39
    760e:	f7f9 fd8d 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7612:	0000      	.short	0x0000
    7614:	2000029c 	.word	0x2000029c

00007618 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>:
    7618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    761a:	460c      	mov	r4, r1
    761c:	4605      	mov	r5, r0
    761e:	f007 fb36 	bl	ec8e <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
    7622:	b158      	cbz	r0, 763c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x24>
    7624:	4628      	mov	r0, r5
    7626:	f007 fb25 	bl	ec74 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    762a:	b148      	cbz	r0, 7640 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    762c:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    7630:	2112      	movs	r1, #18
    7632:	b108      	cbz	r0, 7638 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    7634:	2880      	cmp	r0, #128	; 0x80
    7636:	d903      	bls.n	7640 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x28>
    7638:	4608      	mov	r0, r1
    763a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    763c:	2142      	movs	r1, #66	; 0x42
    763e:	e7fb      	b.n	7638 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    7640:	4628      	mov	r0, r5
    7642:	f007 fb08 	bl	ec56 <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>
    7646:	b120      	cbz	r0, 7652 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3a>
    7648:	4628      	mov	r0, r5
    764a:	f007 fa73 	bl	eb34 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>
    764e:	b110      	cbz	r0, 7656 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x3e>
    7650:	e005      	b.n	765e <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x46>
    7652:	210c      	movs	r1, #12
    7654:	e7f0      	b.n	7638 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20>
    7656:	4628      	mov	r0, r5
    7658:	f007 fb06 	bl	ec68 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>
    765c:	b120      	cbz	r0, 7668 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x50>
    765e:	4628      	mov	r0, r5
    7660:	f007 fcb8 	bl	efd4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    7664:	b930      	cbnz	r0, 7674 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x5c>
    7666:	e001      	b.n	766c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x54>
    7668:	2012      	movs	r0, #18
    766a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    766c:	4628      	mov	r0, r5
    766e:	f007 fa7c 	bl	eb6a <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>
    7672:	b108      	cbz	r0, 7678 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x60>
    7674:	200c      	movs	r0, #12
    7676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7678:	4628      	mov	r0, r5
    767a:	f7fc fa21 	bl	3ac0 <sym_JIJASGQH4XEEPZL7D35VQHVPKKLANGDBS2M46NQ>
    767e:	f8b4 6001 	ldrh.w	r6, [r4, #1]
    7682:	f242 7010 	movw	r0, #10000	; 0x2710
    7686:	4346      	muls	r6, r0
    7688:	78e1      	ldrb	r1, [r4, #3]
    768a:	4628      	mov	r0, r5
    768c:	f007 fada 	bl	ec44 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>
    7690:	4628      	mov	r0, r5
    7692:	f007 faeb 	bl	ec6c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    7696:	b1a8      	cbz	r0, 76c4 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xac>
    7698:	2100      	movs	r1, #0
    769a:	4668      	mov	r0, sp
    769c:	f7fa f8c2 	bl	1824 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    76a0:	0004      	movs	r4, r0
    76a2:	d019      	beq.n	76d8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc0>
    76a4:	2100      	movs	r1, #0
    76a6:	f7fb fad1 	bl	2c4c <sym_4NT3PFFI5Z6RN57T2HW54HJZ23JEQUTUQPJLJGI>
    76aa:	f8bd 0000 	ldrh.w	r0, [sp]
    76ae:	8020      	strh	r0, [r4, #0]
    76b0:	4621      	mov	r1, r4
    76b2:	4628      	mov	r0, r5
    76b4:	f007 fb02 	bl	ecbc <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>
    76b8:	4628      	mov	r0, r5
    76ba:	f007 fadf 	bl	ec7c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    76be:	b168      	cbz	r0, 76dc <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc4>
    76c0:	2001      	movs	r0, #1
    76c2:	e00e      	b.n	76e2 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xca>
    76c4:	4632      	mov	r2, r6
    76c6:	2100      	movs	r1, #0
    76c8:	4628      	mov	r0, r5
    76ca:	f7fd f929 	bl	4920 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    76ce:	2800      	cmp	r0, #0
    76d0:	d0d1      	beq.n	7676 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x5e>
    76d2:	f241 7169 	movw	r1, #5993	; 0x1769
    76d6:	e012      	b.n	76fe <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xe6>
    76d8:	200d      	movs	r0, #13
    76da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    76dc:	4628      	mov	r0, r5
    76de:	f007 faeb 	bl	ecb8 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>
    76e2:	4601      	mov	r1, r0
    76e4:	4620      	mov	r0, r4
    76e6:	f7ff fef1 	bl	74cc <sym_DVO2EX3JGPIV6FVT5SJBVRKA5UGS2QSHNQOVQ2A>
    76ea:	2800      	cmp	r0, #0
    76ec:	d1f5      	bne.n	76da <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xc2>
    76ee:	4632      	mov	r2, r6
    76f0:	4621      	mov	r1, r4
    76f2:	4628      	mov	r0, r5
    76f4:	f7fd f914 	bl	4920 <sym_U3OFHSWAAHECAZEDHWSQTU63SOSYAQR6QI45AFY>
    76f8:	b120      	cbz	r0, 7704 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xec>
    76fa:	f241 718c 	movw	r1, #6028	; 0x178c
    76fe:	2039      	movs	r0, #57	; 0x39
    7700:	f7f9 fd14 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7704:	4804      	ldr	r0, [pc, #16]	; (7718 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x100>)
    7706:	6883      	ldr	r3, [r0, #8]
    7708:	b123      	cbz	r3, 7714 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0xfc>
    770a:	2200      	movs	r2, #0
    770c:	f504 7199 	add.w	r1, r4, #306	; 0x132
    7710:	4620      	mov	r0, r4
    7712:	4798      	blx	r3
    7714:	2000      	movs	r0, #0
    7716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7718:	2000029c 	.word	0x2000029c
    771c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7720:	b088      	sub	sp, #32
    7722:	4604      	mov	r4, r0
    7724:	8800      	ldrh	r0, [r0, #0]
    7726:	a906      	add	r1, sp, #24
    7728:	f006 fb2c 	bl	dd84 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    772c:	2800      	cmp	r0, #0
    772e:	d147      	bne.n	77c0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    7730:	9807      	ldr	r0, [sp, #28]
    7732:	f890 1180 	ldrb.w	r1, [r0, #384]	; 0x180
    7736:	f88d 1008 	strb.w	r1, [sp, #8]
    773a:	9902      	ldr	r1, [sp, #8]
    773c:	9102      	str	r1, [sp, #8]
    773e:	f89d 1008 	ldrb.w	r1, [sp, #8]
    7742:	3080      	adds	r0, #128	; 0x80
    7744:	b101      	cbz	r1, 7748 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x130>
    7746:	2101      	movs	r1, #1
    7748:	f88d 100c 	strb.w	r1, [sp, #12]
    774c:	7b01      	ldrb	r1, [r0, #12]
    774e:	f04f 0800 	mov.w	r8, #0
    7752:	0689      	lsls	r1, r1, #26
    7754:	d502      	bpl.n	775c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x144>
    7756:	f89d 100c 	ldrb.w	r1, [sp, #12]
    775a:	b149      	cbz	r1, 7770 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x158>
    775c:	f05f 0100 	movs.w	r1, #0
    7760:	f88d 1004 	strb.w	r1, [sp, #4]
    7764:	2105      	movs	r1, #5
    7766:	306c      	adds	r0, #108	; 0x6c
    7768:	f008 f8f6 	bl	f958 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
    776c:	b110      	cbz	r0, 7774 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x15c>
    776e:	e004      	b.n	777a <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x162>
    7770:	2101      	movs	r1, #1
    7772:	e7f5      	b.n	7760 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x148>
    7774:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7778:	b308      	cbz	r0, 77be <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a6>
    777a:	8921      	ldrh	r1, [r4, #8]
    777c:	88e0      	ldrh	r0, [r4, #6]
    777e:	f008 fe4e 	bl	1041e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    7782:	2800      	cmp	r0, #0
    7784:	d11c      	bne.n	77c0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    7786:	88a1      	ldrh	r1, [r4, #4]
    7788:	8860      	ldrh	r0, [r4, #2]
    778a:	f008 fe48 	bl	1041e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1c0>
    778e:	2800      	cmp	r0, #0
    7790:	d116      	bne.n	77c0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    7792:	8921      	ldrh	r1, [r4, #8]
    7794:	88e0      	ldrh	r0, [r4, #6]
    7796:	f008 fe38 	bl	1040a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    779a:	2800      	cmp	r0, #0
    779c:	d110      	bne.n	77c0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    779e:	88a1      	ldrh	r1, [r4, #4]
    77a0:	8860      	ldrh	r0, [r4, #2]
    77a2:	f008 fe32 	bl	1040a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1ac>
    77a6:	0006      	movs	r6, r0
    77a8:	d10a      	bne.n	77c0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    77aa:	9807      	ldr	r0, [sp, #28]
    77ac:	f500 7599 	add.w	r5, r0, #306	; 0x132
    77b0:	27ff      	movs	r7, #255	; 0xff
    77b2:	706f      	strb	r7, [r5, #1]
    77b4:	f89d 100c 	ldrb.w	r1, [sp, #12]
    77b8:	b129      	cbz	r1, 77c6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ae>
    77ba:	263a      	movs	r6, #58	; 0x3a
    77bc:	e02e      	b.n	781c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x204>
    77be:	201a      	movs	r0, #26
    77c0:	b008      	add	sp, #32
    77c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    77c6:	4641      	mov	r1, r8
    77c8:	aa03      	add	r2, sp, #12
    77ca:	f008 fe36 	bl	1043a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    77ce:	8861      	ldrh	r1, [r4, #2]
    77d0:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    77d4:	4281      	cmp	r1, r0
    77d6:	d200      	bcs.n	77da <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1c2>
    77d8:	4608      	mov	r0, r1
    77da:	80e8      	strh	r0, [r5, #6]
    77dc:	88a1      	ldrh	r1, [r4, #4]
    77de:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    77e2:	4281      	cmp	r1, r0
    77e4:	d200      	bcs.n	77e8 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1d0>
    77e6:	4608      	mov	r0, r1
    77e8:	8128      	strh	r0, [r5, #8]
    77ea:	88e2      	ldrh	r2, [r4, #6]
    77ec:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    77f0:	428a      	cmp	r2, r1
    77f2:	d200      	bcs.n	77f6 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1de>
    77f4:	4611      	mov	r1, r2
    77f6:	8069      	strh	r1, [r5, #2]
    77f8:	8922      	ldrh	r2, [r4, #8]
    77fa:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    77fe:	428a      	cmp	r2, r1
    7800:	d200      	bcs.n	7804 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1ec>
    7802:	4611      	mov	r1, r2
    7804:	f640 0248 	movw	r2, #2120	; 0x848
    7808:	80a9      	strh	r1, [r5, #4]
    780a:	4291      	cmp	r1, r2
    780c:	d300      	bcc.n	7810 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1f8>
    780e:	4611      	mov	r1, r2
    7810:	80a9      	strh	r1, [r5, #4]
    7812:	4290      	cmp	r0, r2
    7814:	d200      	bcs.n	7818 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x200>
    7816:	4602      	mov	r2, r0
    7818:	812a      	strh	r2, [r5, #8]
    781a:	702f      	strb	r7, [r5, #0]
    781c:	f885 8001 	strb.w	r8, [r5, #1]
    7820:	4630      	mov	r0, r6
    7822:	e7cd      	b.n	77c0 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x1a8>
    7824:	b510      	push	{r4, lr}
    7826:	480a      	ldr	r0, [pc, #40]	; (7850 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x238>)
    7828:	2100      	movs	r1, #0
    782a:	4b0a      	ldr	r3, [pc, #40]	; (7854 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x23c>)
    782c:	74c1      	strb	r1, [r0, #19]
    782e:	8281      	strh	r1, [r0, #20]
    7830:	221b      	movs	r2, #27
    7832:	801a      	strh	r2, [r3, #0]
    7834:	f44f 74a4 	mov.w	r4, #328	; 0x148
    7838:	805c      	strh	r4, [r3, #2]
    783a:	7381      	strb	r1, [r0, #14]
    783c:	73c1      	strb	r1, [r0, #15]
    783e:	2303      	movs	r3, #3
    7840:	7003      	strb	r3, [r0, #0]
    7842:	2302      	movs	r3, #2
    7844:	7043      	strb	r3, [r0, #1]
    7846:	8042      	strh	r2, [r0, #2]
    7848:	8082      	strh	r2, [r0, #4]
    784a:	7481      	strb	r1, [r0, #18]
    784c:	7301      	strb	r1, [r0, #12]
    784e:	bd10      	pop	{r4, pc}
    7850:	20001098 	.word	0x20001098
    7854:	2000029e 	.word	0x2000029e
    7858:	b51c      	push	{r2, r3, r4, lr}
    785a:	490c      	ldr	r1, [pc, #48]	; (788c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x274>)
    785c:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    7860:	e9cd 0100 	strd	r0, r1, [sp]
    7864:	e00a      	b.n	787c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    7866:	9c00      	ldr	r4, [sp, #0]
    7868:	4620      	mov	r0, r4
    786a:	f007 fbb3 	bl	efd4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    786e:	b128      	cbz	r0, 787c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    7870:	4620      	mov	r0, r4
    7872:	f007 fa32 	bl	ecda <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>
    7876:	b108      	cbz	r0, 787c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x264>
    7878:	2001      	movs	r0, #1
    787a:	bd1c      	pop	{r2, r3, r4, pc}
    787c:	4668      	mov	r0, sp
    787e:	f7f9 ffaf 	bl	17e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7882:	2800      	cmp	r0, #0
    7884:	d0ef      	beq.n	7866 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x24e>
    7886:	2000      	movs	r0, #0
    7888:	bd1c      	pop	{r2, r3, r4, pc}
    788a:	0000      	.short	0x0000
    788c:	00007890 	.word	0x00007890
    7890:	00000000 	.word	0x00000000
    7894:	00010000 	.word	0x00010000
    7898:	00000000 	.word	0x00000000
    789c:	00010000 	.word	0x00010000
    78a0:	0d10d30d 	.word	0x0d10d30d
    78a4:	10d30059 	.word	0x10d30059
    78a8:	00000000 	.word	0x00000000
    78ac:	00010000 	.word	0x00010000
    78b0:	00000000 	.word	0x00000000
    78b4:	00010000 	.word	0x00010000

000078b8 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    78b8:	b510      	push	{r4, lr}
    78ba:	f7fb fc7f 	bl	31bc <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    78be:	4c05      	ldr	r4, [pc, #20]	; (78d4 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x1c>)
    78c0:	6860      	ldr	r0, [r4, #4]
    78c2:	f008 feb4 	bl	1062e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d0>
    78c6:	f7ff fd8d 	bl	73e4 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    78ca:	f7fb fe25 	bl	3518 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    78ce:	2001      	movs	r0, #1
    78d0:	7020      	strb	r0, [r4, #0]
    78d2:	bd10      	pop	{r4, pc}
    78d4:	200002a8 	.word	0x200002a8

000078d8 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>:
    78d8:	4801      	ldr	r0, [pc, #4]	; (78e0 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ+0x8>)
    78da:	7800      	ldrb	r0, [r0, #0]
    78dc:	4770      	bx	lr
    78de:	0000      	.short	0x0000
    78e0:	200002a8 	.word	0x200002a8

000078e4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    78e4:	b510      	push	{r4, lr}
    78e6:	4c06      	ldr	r4, [pc, #24]	; (7900 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x1c>)
    78e8:	68a0      	ldr	r0, [r4, #8]
    78ea:	f008 fea0 	bl	1062e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d0>
    78ee:	68e0      	ldr	r0, [r4, #12]
    78f0:	f008 fe9d 	bl	1062e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d0>
    78f4:	f008 fca0 	bl	10238 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    78f8:	2000      	movs	r0, #0
    78fa:	7020      	strb	r0, [r4, #0]
    78fc:	bd10      	pop	{r4, pc}
    78fe:	0000      	.short	0x0000
    7900:	200002a8 	.word	0x200002a8

00007904 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY>:
    7904:	b510      	push	{r4, lr}
    7906:	4905      	ldr	r1, [pc, #20]	; (791c <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x18>)
    7908:	4805      	ldr	r0, [pc, #20]	; (7920 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    790a:	f008 fe83 	bl	10614 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b6>
    790e:	4804      	ldr	r0, [pc, #16]	; (7920 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x1c>)
    7910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7914:	4903      	ldr	r1, [pc, #12]	; (7924 <sym_EANB2LFFCPDZUHTPF7SNNYVWVGG3AE7JVOONSTY+0x20>)
    7916:	1d00      	adds	r0, r0, #4
    7918:	f008 be7c 	b.w	10614 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b6>
    791c:	200002b8 	.word	0x200002b8
    7920:	200002ac 	.word	0x200002ac
    7924:	200002c0 	.word	0x200002c0

00007928 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA>:
    7928:	b510      	push	{r4, lr}
    792a:	4908      	ldr	r1, [pc, #32]	; (794c <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x24>)
    792c:	4808      	ldr	r0, [pc, #32]	; (7950 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    792e:	f008 fe71 	bl	10614 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b6>
    7932:	4807      	ldr	r0, [pc, #28]	; (7950 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    7934:	4907      	ldr	r1, [pc, #28]	; (7954 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x2c>)
    7936:	1d00      	adds	r0, r0, #4
    7938:	f008 fe6c 	bl	10614 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b6>
    793c:	4804      	ldr	r0, [pc, #16]	; (7950 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x28>)
    793e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7942:	4905      	ldr	r1, [pc, #20]	; (7958 <sym_BFBDHRTPYGNRMJSAT7WCAPOXBGIVSWF4E5GFHOA+0x30>)
    7944:	3008      	adds	r0, #8
    7946:	f008 be65 	b.w	10614 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3b6>
    794a:	0000      	.short	0x0000
    794c:	200002d0 	.word	0x200002d0
    7950:	200002ac 	.word	0x200002ac
    7954:	200002d8 	.word	0x200002d8
    7958:	200002c8 	.word	0x200002c8

0000795c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>:
    795c:	4801      	ldr	r0, [pc, #4]	; (7964 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x8>)
    795e:	7840      	ldrb	r0, [r0, #1]
    7960:	4770      	bx	lr
    7962:	0000      	.short	0x0000
    7964:	200002a8 	.word	0x200002a8
    7968:	b510      	push	{r4, lr}
    796a:	f7fc f9bb 	bl	3ce4 <sym_BPVIPCP3IMFHHNRASYWRUQPTOXIXQGWP3DTKXWI>
    796e:	f7fd f88b 	bl	4a88 <sym_4O3EP57XWWWRY57PVJMDKXNE25ZWFBDV6LLBFQQ>
    7972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7976:	4801      	ldr	r0, [pc, #4]	; (797c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x20>)
    7978:	f7fc b99a 	b.w	3cb0 <sym_KC3JIKE7HTERE3Q3BXMRUIDPAENUZKVBIDO6ODY>
    797c:	20001340 	.word	0x20001340
    7980:	490a      	ldr	r1, [pc, #40]	; (79ac <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x50>)
    7982:	b510      	push	{r4, lr}
    7984:	2001      	movs	r0, #1
    7986:	7048      	strb	r0, [r1, #1]
    7988:	f7fc f9dc 	bl	3d44 <sym_I72BLVRK23UDT6KM4GEW6EVDLN4L7QB2CLD4CMY>
    798c:	f7fd fd90 	bl	54b0 <sym_FIYSAC63N2FF462LEI76F5US34JKFTAQDSI2LXA>
    7990:	f006 f964 	bl	dc5c <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    7994:	4906      	ldr	r1, [pc, #24]	; (79b0 <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI+0x54>)
    7996:	f5a1 7081 	sub.w	r0, r1, #258	; 0x102
    799a:	f7fa fb53 	bl	2044 <sym_7TCX7VR3LQDB2G4LYUM4YUKX3ZVIO33J3JZVMKY>
    799e:	2000      	movs	r0, #0
    79a0:	f005 ffaa 	bl	d8f8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    79a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    79a8:	f7fb bc0e 	b.w	31c8 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q>
    79ac:	200002a8 	.word	0x200002a8
    79b0:	20001442 	.word	0x20001442

000079b4 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    79b4:	4a04      	ldr	r2, [pc, #16]	; (79c8 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    79b6:	08c1      	lsrs	r1, r0, #3
    79b8:	f000 0307 	and.w	r3, r0, #7
    79bc:	2001      	movs	r0, #1
    79be:	4098      	lsls	r0, r3
    79c0:	5c53      	ldrb	r3, [r2, r1]
    79c2:	4303      	orrs	r3, r0
    79c4:	5453      	strb	r3, [r2, r1]
    79c6:	4770      	bx	lr
    79c8:	20000020 	.word	0x20000020

000079cc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    79cc:	4901      	ldr	r1, [pc, #4]	; (79d4 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    79ce:	e9d1 0100 	ldrd	r0, r1, [r1]
    79d2:	4770      	bx	lr
    79d4:	20000020 	.word	0x20000020

000079d8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    79d8:	4806      	ldr	r0, [pc, #24]	; (79f4 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    79da:	8801      	ldrh	r1, [r0, #0]
    79dc:	7900      	ldrb	r0, [r0, #4]
    79de:	0602      	lsls	r2, r0, #24
    79e0:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    79e4:	f000 0001 	and.w	r0, r0, #1
    79e8:	1800      	adds	r0, r0, r0
    79ea:	b2c0      	uxtb	r0, r0
    79ec:	f040 0001 	orr.w	r0, r0, #1
    79f0:	4770      	bx	lr
    79f2:	0000      	.short	0x0000
    79f4:	20000020 	.word	0x20000020

000079f8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    79f8:	b510      	push	{r4, lr}
    79fa:	f004 f8cd 	bl	bb98 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    79fe:	2200      	movs	r2, #0
    7a00:	4b08      	ldr	r3, [pc, #32]	; (7a24 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    7a02:	4611      	mov	r1, r2
    7a04:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    7a08:	4284      	cmp	r4, r0
    7a0a:	d303      	bcc.n	7a14 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    7a0c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    7a10:	7882      	ldrb	r2, [r0, #2]
    7a12:	e003      	b.n	7a1c <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    7a14:	1c49      	adds	r1, r1, #1
    7a16:	b2c9      	uxtb	r1, r1
    7a18:	290c      	cmp	r1, #12
    7a1a:	d3f3      	bcc.n	7a04 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    7a1c:	4802      	ldr	r0, [pc, #8]	; (7a28 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    7a1e:	7002      	strb	r2, [r0, #0]
    7a20:	bd10      	pop	{r4, pc}
    7a22:	0000      	.short	0x0000
    7a24:	00010680 	.word	0x00010680
    7a28:	2000038d 	.word	0x2000038d

00007a2c <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA>:
    7a2c:	b570      	push	{r4, r5, r6, lr}
    7a2e:	6845      	ldr	r5, [r0, #4]
    7a30:	f505 76d3 	add.w	r6, r5, #422	; 0x1a6
    7a34:	8828      	ldrh	r0, [r5, #0]
    7a36:	f826 0902 	strh.w	r0, [r6], #-2
    7a3a:	f505 7498 	add.w	r4, r5, #304	; 0x130
    7a3e:	7031      	strb	r1, [r6, #0]
    7a40:	f895 006a 	ldrb.w	r0, [r5, #106]	; 0x6a
    7a44:	f008 fea4 	bl	10790 <sym_RRC5YHH6YM3SHNGPFUCE3YX5LDRJC7YUGPWWYHQ+0x8c>
    7a48:	7130      	strb	r0, [r6, #4]
    7a4a:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    7a4e:	f008 fe9f 	bl	10790 <sym_RRC5YHH6YM3SHNGPFUCE3YX5LDRJC7YUGPWWYHQ+0x8c>
    7a52:	f806 0f05 	strb.w	r0, [r6, #5]!
    7a56:	2202      	movs	r2, #2
    7a58:	4903      	ldr	r1, [pc, #12]	; (7a68 <sym_GECJUMXC7GX4QNB2JHCJHLFH72UPMJZW6VAQVRA+0x3c>)
    7a5a:	f1a6 000f 	sub.w	r0, r6, #15
    7a5e:	f006 fce3 	bl	e428 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    7a62:	2000      	movs	r0, #0
    7a64:	7320      	strb	r0, [r4, #12]
    7a66:	bd70      	pop	{r4, r5, r6, pc}
    7a68:	000106d5 	.word	0x000106d5

00007a6c <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY>:
    7a6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7a6e:	460e      	mov	r6, r1
    7a70:	4604      	mov	r4, r0
    7a72:	f7fb fa6b 	bl	2f4c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    7a76:	2500      	movs	r5, #0
    7a78:	b320      	cbz	r0, 7ac4 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x58>
    7a7a:	f5a4 74c6 	sub.w	r4, r4, #396	; 0x18c
    7a7e:	a902      	add	r1, sp, #8
    7a80:	8820      	ldrh	r0, [r4, #0]
    7a82:	f8ad 0000 	strh.w	r0, [sp]
    7a86:	f006 f97d 	bl	dd84 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7a8a:	b108      	cbz	r0, 7a90 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x24>
    7a8c:	2129      	movs	r1, #41	; 0x29
    7a8e:	e010      	b.n	7ab2 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x46>
    7a90:	9803      	ldr	r0, [sp, #12]
    7a92:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    7a96:	f88d 1002 	strb.w	r1, [sp, #2]
    7a9a:	7841      	ldrb	r1, [r0, #1]
    7a9c:	f88d 1003 	strb.w	r1, [sp, #3]
    7aa0:	8840      	ldrh	r0, [r0, #2]
    7aa2:	f8ad 0004 	strh.w	r0, [sp, #4]
    7aa6:	2102      	movs	r1, #2
    7aa8:	4668      	mov	r0, sp
    7aaa:	f008 fb5d 	bl	10168 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    7aae:	b118      	cbz	r0, 7ab8 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4c>
    7ab0:	213f      	movs	r1, #63	; 0x3f
    7ab2:	207e      	movs	r0, #126	; 0x7e
    7ab4:	f7f9 fb3a 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7ab8:	f8cd 5000 	str.w	r5, [sp]
    7abc:	f8bd 0000 	ldrh.w	r0, [sp]
    7ac0:	b004      	add	sp, #16
    7ac2:	bd70      	pop	{r4, r5, r6, pc}
    7ac4:	201a      	movs	r0, #26
    7ac6:	7030      	strb	r0, [r6, #0]
    7ac8:	7075      	strb	r5, [r6, #1]
    7aca:	f8d4 000a 	ldr.w	r0, [r4, #10]
    7ace:	6070      	str	r0, [r6, #4]
    7ad0:	4801      	ldr	r0, [pc, #4]	; (7ad8 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x6c>)
    7ad2:	6800      	ldr	r0, [r0, #0]
    7ad4:	9000      	str	r0, [sp, #0]
    7ad6:	e7f1      	b.n	7abc <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x50>
    7ad8:	00007adc 	.word	0x00007adc
    7adc:	00000004 	.word	0x00000004

00007ae0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    7ae0:	b570      	push	{r4, r5, r6, lr}
    7ae2:	4605      	mov	r5, r0
    7ae4:	4616      	mov	r6, r2
    7ae6:	460c      	mov	r4, r1
    7ae8:	2002      	movs	r0, #2
    7aea:	f000 f9b7 	bl	7e5c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7aee:	4906      	ldr	r1, [pc, #24]	; (7b08 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    7af0:	2001      	movs	r0, #1
    7af2:	1ef6      	subs	r6, r6, #3
    7af4:	7008      	strb	r0, [r1, #0]
    7af6:	4805      	ldr	r0, [pc, #20]	; (7b0c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    7af8:	6006      	str	r6, [r0, #0]
    7afa:	4804      	ldr	r0, [pc, #16]	; (7b0c <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    7afc:	3808      	subs	r0, #8
    7afe:	6005      	str	r5, [r0, #0]
    7b00:	1f00      	subs	r0, r0, #4
    7b02:	6004      	str	r4, [r0, #0]
    7b04:	bd70      	pop	{r4, r5, r6, pc}
    7b06:	0000      	.short	0x0000
    7b08:	2000038e 	.word	0x2000038e
    7b0c:	4000f510 	.word	0x4000f510

00007b10 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    7b10:	b510      	push	{r4, lr}
    7b12:	4c0c      	ldr	r4, [pc, #48]	; (7b44 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    7b14:	7820      	ldrb	r0, [r4, #0]
    7b16:	b180      	cbz	r0, 7b3a <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    7b18:	490b      	ldr	r1, [pc, #44]	; (7b48 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    7b1a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7b1e:	6008      	str	r0, [r1, #0]
    7b20:	f000 f86a 	bl	7bf8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    7b24:	2100      	movs	r1, #0
    7b26:	b120      	cbz	r0, 7b32 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    7b28:	2001      	movs	r0, #1
    7b2a:	7060      	strb	r0, [r4, #1]
    7b2c:	4807      	ldr	r0, [pc, #28]	; (7b4c <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    7b2e:	6800      	ldr	r0, [r0, #0]
    7b30:	e001      	b.n	7b36 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    7b32:	7061      	strb	r1, [r4, #1]
    7b34:	2010      	movs	r0, #16
    7b36:	70a0      	strb	r0, [r4, #2]
    7b38:	7021      	strb	r1, [r4, #0]
    7b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7b3e:	2000      	movs	r0, #0
    7b40:	f000 b98c 	b.w	7e5c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7b44:	2000038e 	.word	0x2000038e
    7b48:	4001f508 	.word	0x4001f508
    7b4c:	4000f400 	.word	0x4000f400

00007b50 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    7b50:	b510      	push	{r4, lr}
    7b52:	2002      	movs	r0, #2
    7b54:	f000 f982 	bl	7e5c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7b58:	4904      	ldr	r1, [pc, #16]	; (7b6c <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    7b5a:	2001      	movs	r0, #1
    7b5c:	7008      	strb	r0, [r1, #0]
    7b5e:	f000 f859 	bl	7c14 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    7b62:	4903      	ldr	r1, [pc, #12]	; (7b70 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    7b64:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7b68:	6008      	str	r0, [r1, #0]
    7b6a:	bd10      	pop	{r4, pc}
    7b6c:	2000038e 	.word	0x2000038e
    7b70:	4001f504 	.word	0x4001f504

00007b74 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    7b74:	4803      	ldr	r0, [pc, #12]	; (7b84 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    7b76:	2100      	movs	r1, #0
    7b78:	7001      	strb	r1, [r0, #0]
    7b7a:	7041      	strb	r1, [r0, #1]
    7b7c:	2110      	movs	r1, #16
    7b7e:	7081      	strb	r1, [r0, #2]
    7b80:	4770      	bx	lr
    7b82:	0000      	.short	0x0000
    7b84:	2000038e 	.word	0x2000038e

00007b88 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    7b88:	4807      	ldr	r0, [pc, #28]	; (7ba8 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    7b8a:	b510      	push	{r4, lr}
    7b8c:	7801      	ldrb	r1, [r0, #0]
    7b8e:	b141      	cbz	r1, 7ba2 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    7b90:	f000 f832 	bl	7bf8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    7b94:	b118      	cbz	r0, 7b9e <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    7b96:	4805      	ldr	r0, [pc, #20]	; (7bac <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    7b98:	6800      	ldr	r0, [r0, #0]
    7b9a:	b2c0      	uxtb	r0, r0
    7b9c:	bd10      	pop	{r4, pc}
    7b9e:	2010      	movs	r0, #16
    7ba0:	bd10      	pop	{r4, pc}
    7ba2:	7880      	ldrb	r0, [r0, #2]
    7ba4:	bd10      	pop	{r4, pc}
    7ba6:	0000      	.short	0x0000
    7ba8:	2000038e 	.word	0x2000038e
    7bac:	4000f400 	.word	0x4000f400

00007bb0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    7bb0:	4808      	ldr	r0, [pc, #32]	; (7bd4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    7bb2:	b510      	push	{r4, lr}
    7bb4:	7801      	ldrb	r1, [r0, #0]
    7bb6:	b159      	cbz	r1, 7bd0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    7bb8:	4807      	ldr	r0, [pc, #28]	; (7bd8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    7bba:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7bbe:	b128      	cbz	r0, 7bcc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    7bc0:	f000 f80c 	bl	7bdc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    7bc4:	2800      	cmp	r0, #0
    7bc6:	d000      	beq.n	7bca <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    7bc8:	2001      	movs	r0, #1
    7bca:	bd10      	pop	{r4, pc}
    7bcc:	2002      	movs	r0, #2
    7bce:	bd10      	pop	{r4, pc}
    7bd0:	7840      	ldrb	r0, [r0, #1]
    7bd2:	bd10      	pop	{r4, pc}
    7bd4:	2000038e 	.word	0x2000038e
    7bd8:	4000f000 	.word	0x4000f000
    7bdc:	4805      	ldr	r0, [pc, #20]	; (7bf4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    7bde:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    7be2:	b111      	cbz	r1, 7bea <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    7be4:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    7be8:	b108      	cbz	r0, 7bee <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    7bea:	2000      	movs	r0, #0
    7bec:	4770      	bx	lr
    7bee:	2001      	movs	r0, #1
    7bf0:	4770      	bx	lr
    7bf2:	0000      	.short	0x0000
    7bf4:	4000f000 	.word	0x4000f000
    7bf8:	4805      	ldr	r0, [pc, #20]	; (7c10 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    7bfa:	b510      	push	{r4, lr}
    7bfc:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7c00:	b120      	cbz	r0, 7c0c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    7c02:	f7ff ffeb 	bl	7bdc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    7c06:	b108      	cbz	r0, 7c0c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    7c08:	2001      	movs	r0, #1
    7c0a:	bd10      	pop	{r4, pc}
    7c0c:	2000      	movs	r0, #0
    7c0e:	bd10      	pop	{r4, pc}
    7c10:	4000f000 	.word	0x4000f000
    7c14:	4804      	ldr	r0, [pc, #16]	; (7c28 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    7c16:	2100      	movs	r1, #0
    7c18:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    7c1c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    7c20:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    7c24:	4770      	bx	lr
    7c26:	0000      	.short	0x0000
    7c28:	4000f000 	.word	0x4000f000

00007c2c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    7c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7c30:	4604      	mov	r4, r0
    7c32:	461e      	mov	r6, r3
    7c34:	4690      	mov	r8, r2
    7c36:	460f      	mov	r7, r1
    7c38:	2001      	movs	r0, #1
    7c3a:	f000 f90f 	bl	7e5c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7c3e:	4d1e      	ldr	r5, [pc, #120]	; (7cb8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    7c40:	481e      	ldr	r0, [pc, #120]	; (7cbc <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    7c42:	f004 0103 	and.w	r1, r4, #3
    7c46:	712e      	strb	r6, [r5, #4]
    7c48:	6800      	ldr	r0, [r0, #0]
    7c4a:	0432      	lsls	r2, r6, #16
    7c4c:	f361 0007 	bfi	r0, r1, #0, #8
    7c50:	f366 200f 	bfi	r0, r6, #8, #8
    7c54:	0c00      	lsrs	r0, r0, #16
    7c56:	4e1a      	ldr	r6, [pc, #104]	; (7cc0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    7c58:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    7c5c:	4308      	orrs	r0, r1
    7c5e:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    7c62:	4818      	ldr	r0, [pc, #96]	; (7cc4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    7c64:	6007      	str	r7, [r0, #0]
    7c66:	f008 ff83 	bl	10b70 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7c6a:	b938      	cbnz	r0, 7c7c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    7c6c:	4815      	ldr	r0, [pc, #84]	; (7cc4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    7c6e:	3010      	adds	r0, #16
    7c70:	6801      	ldr	r1, [r0, #0]
    7c72:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    7c76:	ea41 0108 	orr.w	r1, r1, r8
    7c7a:	6001      	str	r1, [r0, #0]
    7c7c:	f000 f8e4 	bl	7e48 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    7c80:	b10c      	cbz	r4, 7c86 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    7c82:	2c04      	cmp	r4, #4
    7c84:	d107      	bne.n	7c96 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    7c86:	4811      	ldr	r0, [pc, #68]	; (7ccc <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    7c88:	490d      	ldr	r1, [pc, #52]	; (7cc0 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    7c8a:	4a0f      	ldr	r2, [pc, #60]	; (7cc8 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    7c8c:	1d09      	adds	r1, r1, #4
    7c8e:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    7c92:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    7c96:	2001      	movs	r0, #1
    7c98:	7068      	strb	r0, [r5, #1]
    7c9a:	70ec      	strb	r4, [r5, #3]
    7c9c:	b11c      	cbz	r4, 7ca6 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7c9e:	2c01      	cmp	r4, #1
    7ca0:	d001      	beq.n	7ca6 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7ca2:	2c02      	cmp	r4, #2
    7ca4:	d106      	bne.n	7cb4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    7ca6:	7028      	strb	r0, [r5, #0]
    7ca8:	2100      	movs	r1, #0
    7caa:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    7cae:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    7cb2:	6030      	str	r0, [r6, #0]
    7cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7cb8:	20000391 	.word	0x20000391
    7cbc:	00007e58 	.word	0x00007e58
    7cc0:	4000f000 	.word	0x4000f000
    7cc4:	4000f508 	.word	0x4000f508
    7cc8:	4000f100 	.word	0x4000f100
    7ccc:	4001f088 	.word	0x4001f088

00007cd0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    7cd0:	b570      	push	{r4, r5, r6, lr}
    7cd2:	4a1c      	ldr	r2, [pc, #112]	; (7d44 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    7cd4:	7853      	ldrb	r3, [r2, #1]
    7cd6:	b1a3      	cbz	r3, 7d02 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    7cd8:	4b1b      	ldr	r3, [pc, #108]	; (7d48 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    7cda:	6019      	str	r1, [r3, #0]
    7cdc:	1d19      	adds	r1, r3, #4
    7cde:	6008      	str	r0, [r1, #0]
    7ce0:	2501      	movs	r5, #1
    7ce2:	7095      	strb	r5, [r2, #2]
    7ce4:	4610      	mov	r0, r2
    7ce6:	78d6      	ldrb	r6, [r2, #3]
    7ce8:	4b18      	ldr	r3, [pc, #96]	; (7d4c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    7cea:	7800      	ldrb	r0, [r0, #0]
    7cec:	4c18      	ldr	r4, [pc, #96]	; (7d50 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    7cee:	2100      	movs	r1, #0
    7cf0:	b156      	cbz	r6, 7d08 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    7cf2:	2e04      	cmp	r6, #4
    7cf4:	d01b      	beq.n	7d2e <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    7cf6:	b308      	cbz	r0, 7d3c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    7cf8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7cfc:	0668      	lsls	r0, r5, #25
    7cfe:	6018      	str	r0, [r3, #0]
    7d00:	bd70      	pop	{r4, r5, r6, pc}
    7d02:	f240 210e 	movw	r1, #526	; 0x20e
    7d06:	e01a      	b.n	7d3e <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    7d08:	b178      	cbz	r0, 7d2a <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    7d0a:	4620      	mov	r0, r4
    7d0c:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7d10:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    7d14:	601e      	str	r6, [r3, #0]
    7d16:	1271      	asrs	r1, r6, #9
    7d18:	f008 fd62 	bl	107e0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7d1c:	2800      	cmp	r0, #0
    7d1e:	d0ef      	beq.n	7d00 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    7d20:	6065      	str	r5, [r4, #4]
    7d22:	480a      	ldr	r0, [pc, #40]	; (7d4c <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    7d24:	1d00      	adds	r0, r0, #4
    7d26:	6006      	str	r6, [r0, #0]
    7d28:	bd70      	pop	{r4, r5, r6, pc}
    7d2a:	21eb      	movs	r1, #235	; 0xeb
    7d2c:	e007      	b.n	7d3e <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    7d2e:	7015      	strb	r5, [r2, #0]
    7d30:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7d34:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    7d38:	6025      	str	r5, [r4, #0]
    7d3a:	bd70      	pop	{r4, r5, r6, pc}
    7d3c:	21fe      	movs	r1, #254	; 0xfe
    7d3e:	203c      	movs	r0, #60	; 0x3c
    7d40:	f7f9 f9f4 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d44:	20000391 	.word	0x20000391
    7d48:	4000f50c 	.word	0x4000f50c
    7d4c:	4001f504 	.word	0x4001f504
    7d50:	4000f000 	.word	0x4000f000

00007d54 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    7d54:	b570      	push	{r4, r5, r6, lr}
    7d56:	4d05      	ldr	r5, [pc, #20]	; (7d6c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    7d58:	2400      	movs	r4, #0
    7d5a:	7828      	ldrb	r0, [r5, #0]
    7d5c:	b110      	cbz	r0, 7d64 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    7d5e:	f000 f873 	bl	7e48 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    7d62:	702c      	strb	r4, [r5, #0]
    7d64:	706c      	strb	r4, [r5, #1]
    7d66:	70ac      	strb	r4, [r5, #2]
    7d68:	bd70      	pop	{r4, r5, r6, pc}
    7d6a:	0000      	.short	0x0000
    7d6c:	20000391 	.word	0x20000391

00007d70 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    7d70:	4802      	ldr	r0, [pc, #8]	; (7d7c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    7d72:	2100      	movs	r1, #0
    7d74:	7001      	strb	r1, [r0, #0]
    7d76:	7041      	strb	r1, [r0, #1]
    7d78:	7081      	strb	r1, [r0, #2]
    7d7a:	4770      	bx	lr
    7d7c:	20000391 	.word	0x20000391

00007d80 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    7d80:	480b      	ldr	r0, [pc, #44]	; (7db0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    7d82:	b510      	push	{r4, lr}
    7d84:	7800      	ldrb	r0, [r0, #0]
    7d86:	b158      	cbz	r0, 7da0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    7d88:	f44f 7182 	mov.w	r1, #260	; 0x104
    7d8c:	4809      	ldr	r0, [pc, #36]	; (7db4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    7d8e:	f008 fd27 	bl	107e0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7d92:	b140      	cbz	r0, 7da6 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    7d94:	4808      	ldr	r0, [pc, #32]	; (7db8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    7d96:	6800      	ldr	r0, [r0, #0]
    7d98:	2800      	cmp	r0, #0
    7d9a:	d000      	beq.n	7d9e <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    7d9c:	2001      	movs	r0, #1
    7d9e:	bd10      	pop	{r4, pc}
    7da0:	f44f 711d 	mov.w	r1, #628	; 0x274
    7da4:	e001      	b.n	7daa <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    7da6:	f240 2175 	movw	r1, #629	; 0x275
    7daa:	203c      	movs	r0, #60	; 0x3c
    7dac:	f7f9 f9be 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7db0:	20000391 	.word	0x20000391
    7db4:	4000f000 	.word	0x4000f000
    7db8:	4000f400 	.word	0x4000f400

00007dbc <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    7dbc:	4801      	ldr	r0, [pc, #4]	; (7dc4 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    7dbe:	2101      	movs	r1, #1
    7dc0:	6081      	str	r1, [r0, #8]
    7dc2:	4770      	bx	lr
    7dc4:	4000f000 	.word	0x4000f000

00007dc8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    7dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7dcc:	481b      	ldr	r0, [pc, #108]	; (7e3c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    7dce:	7800      	ldrb	r0, [r0, #0]
    7dd0:	b1d8      	cbz	r0, 7e0a <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    7dd2:	f8df 806c 	ldr.w	r8, [pc, #108]	; 7e40 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    7dd6:	f44f 7682 	mov.w	r6, #260	; 0x104
    7dda:	4631      	mov	r1, r6
    7ddc:	4640      	mov	r0, r8
    7dde:	f008 fcff 	bl	107e0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7de2:	2800      	cmp	r0, #0
    7de4:	d128      	bne.n	7e38 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    7de6:	2002      	movs	r0, #2
    7de8:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    7dec:	4c15      	ldr	r4, [pc, #84]	; (7e44 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    7dee:	6820      	ldr	r0, [r4, #0]
    7df0:	43c0      	mvns	r0, r0
    7df2:	f340 1500 	sbfx	r5, r0, #4, #1
    7df6:	6820      	ldr	r0, [r4, #0]
    7df8:	f040 0010 	orr.w	r0, r0, #16
    7dfc:	6020      	str	r0, [r4, #0]
    7dfe:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    7e02:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    7e06:	1c6d      	adds	r5, r5, #1
    7e08:	e008      	b.n	7e1c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    7e0a:	f44f 7120 	mov.w	r1, #640	; 0x280
    7e0e:	203c      	movs	r0, #60	; 0x3c
    7e10:	f7f9 f98c 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e14:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    7e18:	f008 feea 	bl	10bf0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    7e1c:	4631      	mov	r1, r6
    7e1e:	4640      	mov	r0, r8
    7e20:	f008 fcde 	bl	107e0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7e24:	2800      	cmp	r0, #0
    7e26:	d0f5      	beq.n	7e14 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    7e28:	b91d      	cbnz	r5, 7e32 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    7e2a:	6820      	ldr	r0, [r4, #0]
    7e2c:	f020 0010 	bic.w	r0, r0, #16
    7e30:	6020      	str	r0, [r4, #0]
    7e32:	2002      	movs	r0, #2
    7e34:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    7e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7e3c:	20000391 	.word	0x20000391
    7e40:	4000f000 	.word	0x4000f000
    7e44:	e000ed10 	.word	0xe000ed10
    7e48:	4902      	ldr	r1, [pc, #8]	; (7e54 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    7e4a:	4801      	ldr	r0, [pc, #4]	; (7e50 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    7e4c:	6008      	str	r0, [r1, #0]
    7e4e:	4770      	bx	lr
    7e50:	02020000 	.word	0x02020000
    7e54:	4001f508 	.word	0x4001f508
    7e58:	00010000 	.word	0x00010000

00007e5c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    7e5c:	b510      	push	{r4, lr}
    7e5e:	4604      	mov	r4, r0
    7e60:	f000 f820 	bl	7ea4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    7e64:	2c00      	cmp	r4, #0
    7e66:	d00e      	beq.n	7e86 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    7e68:	4a0b      	ldr	r2, [pc, #44]	; (7e98 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7e6a:	480b      	ldr	r0, [pc, #44]	; (7e98 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7e6c:	490b      	ldr	r1, [pc, #44]	; (7e9c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    7e6e:	3214      	adds	r2, #20
    7e70:	2c01      	cmp	r4, #1
    7e72:	d005      	beq.n	7e80 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    7e74:	2c02      	cmp	r4, #2
    7e76:	d007      	beq.n	7e88 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    7e78:	2182      	movs	r1, #130	; 0x82
    7e7a:	203d      	movs	r0, #61	; 0x3d
    7e7c:	f7f9 f956 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e80:	2302      	movs	r3, #2
    7e82:	6003      	str	r3, [r0, #0]
    7e84:	6011      	str	r1, [r2, #0]
    7e86:	bd10      	pop	{r4, pc}
    7e88:	2303      	movs	r3, #3
    7e8a:	6003      	str	r3, [r0, #0]
    7e8c:	6011      	str	r1, [r2, #0]
    7e8e:	4904      	ldr	r1, [pc, #16]	; (7ea0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    7e90:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7e94:	6008      	str	r0, [r1, #0]
    7e96:	bd10      	pop	{r4, pc}
    7e98:	4000f500 	.word	0x4000f500
    7e9c:	20001544 	.word	0x20001544
    7ea0:	4001f504 	.word	0x4001f504
    7ea4:	4805      	ldr	r0, [pc, #20]	; (7ebc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    7ea6:	b510      	push	{r4, lr}
    7ea8:	2100      	movs	r1, #0
    7eaa:	6001      	str	r1, [r0, #0]
    7eac:	6001      	str	r1, [r0, #0]
    7eae:	f7ff ff51 	bl	7d54 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    7eb2:	4903      	ldr	r1, [pc, #12]	; (7ec0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    7eb4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7eb8:	6008      	str	r0, [r1, #0]
    7eba:	bd10      	pop	{r4, pc}
    7ebc:	4000f500 	.word	0x4000f500
    7ec0:	4001f508 	.word	0x4001f508

00007ec4 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    7ec4:	4805      	ldr	r0, [pc, #20]	; (7edc <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    7ec6:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    7eca:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    7ece:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7ed2:	2100      	movs	r1, #0
    7ed4:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    7ed8:	4770      	bx	lr
    7eda:	0000      	.short	0x0000
    7edc:	40001000 	.word	0x40001000

00007ee0 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    7ee0:	4904      	ldr	r1, [pc, #16]	; (7ef4 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    7ee2:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    7ee6:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    7eea:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    7eee:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    7ef2:	4770      	bx	lr
    7ef4:	40001000 	.word	0x40001000

00007ef8 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    7ef8:	4902      	ldr	r1, [pc, #8]	; (7f04 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    7efa:	5c08      	ldrb	r0, [r1, r0]
    7efc:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    7f00:	4770      	bx	lr
    7f02:	0000      	.short	0x0000
    7f04:	00008bae 	.word	0x00008bae

00007f08 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    7f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7f0a:	4c24      	ldr	r4, [pc, #144]	; (7f9c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    7f0c:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    7f10:	f010 0f10 	tst.w	r0, #16
    7f14:	d001      	beq.n	7f1a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    7f16:	2701      	movs	r7, #1
    7f18:	e000      	b.n	7f1c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    7f1a:	2700      	movs	r7, #0
    7f1c:	2010      	movs	r0, #16
    7f1e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    7f22:	2002      	movs	r0, #2
    7f24:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    7f28:	481d      	ldr	r0, [pc, #116]	; (7fa0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    7f2a:	2500      	movs	r5, #0
    7f2c:	491d      	ldr	r1, [pc, #116]	; (7fa4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    7f2e:	f880 502d 	strb.w	r5, [r0, #45]	; 0x2d
    7f32:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    7f36:	6008      	str	r0, [r1, #0]
    7f38:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    7f3c:	f44f 7688 	mov.w	r6, #272	; 0x110
    7f40:	f010 0fff 	tst.w	r0, #255	; 0xff
    7f44:	d019      	beq.n	7f7a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    7f46:	20ff      	movs	r0, #255	; 0xff
    7f48:	f88d 0000 	strb.w	r0, [sp]
    7f4c:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7f50:	2001      	movs	r0, #1
    7f52:	6120      	str	r0, [r4, #16]
    7f54:	e005      	b.n	7f62 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    7f56:	bf00      	nop
    7f58:	f89d 0000 	ldrb.w	r0, [sp]
    7f5c:	1e40      	subs	r0, r0, #1
    7f5e:	f88d 0000 	strb.w	r0, [sp]
    7f62:	f89d 0000 	ldrb.w	r0, [sp]
    7f66:	b128      	cbz	r0, 7f74 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    7f68:	4631      	mov	r1, r6
    7f6a:	4620      	mov	r0, r4
    7f6c:	f008 fc67 	bl	1083e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7f70:	2800      	cmp	r0, #0
    7f72:	d0f1      	beq.n	7f58 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    7f74:	f89d 0000 	ldrb.w	r0, [sp]
    7f78:	b158      	cbz	r0, 7f92 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    7f7a:	f000 fc2d 	bl	87d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e8>
    7f7e:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7f82:	f000 fd95 	bl	8ab0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4c0>
    7f86:	2f00      	cmp	r7, #0
    7f88:	d002      	beq.n	7f90 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    7f8a:	2010      	movs	r0, #16
    7f8c:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    7f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7f92:	f44f 610b 	mov.w	r1, #2224	; 0x8b0
    7f96:	203e      	movs	r0, #62	; 0x3e
    7f98:	f7f9 f8c8 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f9c:	40001000 	.word	0x40001000
    7fa0:	20001100 	.word	0x20001100
    7fa4:	4001f508 	.word	0x4001f508

00007fa8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    7fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7fac:	4d18      	ldr	r5, [pc, #96]	; (8010 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10>)
    7fae:	4607      	mov	r7, r0
    7fb0:	f895 002d 	ldrb.w	r0, [r5, #45]	; 0x2d
    7fb4:	07c2      	lsls	r2, r0, #31
    7fb6:	d00f      	beq.n	7fd8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    7fb8:	4c16      	ldr	r4, [pc, #88]	; (8014 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14>)
    7fba:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    7fbe:	f042 0201 	orr.w	r2, r2, #1
    7fc2:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    7fc6:	f040 0002 	orr.w	r0, r0, #2
    7fca:	f885 002d 	strb.w	r0, [r5, #45]	; 0x2d
    7fce:	2601      	movs	r6, #1
    7fd0:	b13f      	cbz	r7, 7fe2 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    7fd2:	2f01      	cmp	r7, #1
    7fd4:	d00b      	beq.n	7fee <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    7fd6:	e010      	b.n	7ffa <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7fd8:	f240 718b 	movw	r1, #1931	; 0x78b
    7fdc:	203e      	movs	r0, #62	; 0x3e
    7fde:	f7f9 f8a5 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7fe2:	4608      	mov	r0, r1
    7fe4:	f000 fdbe 	bl	8b64 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x574>
    7fe8:	726e      	strb	r6, [r5, #9]
    7fea:	6026      	str	r6, [r4, #0]
    7fec:	e005      	b.n	7ffa <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7fee:	4608      	mov	r0, r1
    7ff0:	f000 fd9e 	bl	8b30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x540>
    7ff4:	2002      	movs	r0, #2
    7ff6:	7268      	strb	r0, [r5, #9]
    7ff8:	6066      	str	r6, [r4, #4]
    7ffa:	4807      	ldr	r0, [pc, #28]	; (8018 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18>)
    7ffc:	64c6      	str	r6, [r0, #76]	; 0x4c
    7ffe:	4806      	ldr	r0, [pc, #24]	; (8018 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18>)
    8000:	300c      	adds	r0, #12
    8002:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    8006:	4638      	mov	r0, r7
    8008:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    800c:	f000 bd22 	b.w	8a54 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x464>
    8010:	20001100 	.word	0x20001100
    8014:	40001000 	.word	0x40001000
    8018:	40008000 	.word	0x40008000

0000801c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    801c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8020:	4c2c      	ldr	r4, [pc, #176]	; (80d4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    8022:	0006      	movs	r6, r0
    8024:	4d2c      	ldr	r5, [pc, #176]	; (80d8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    8026:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    802a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80dc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    802e:	f040 0002 	orr.w	r0, r0, #2
    8032:	4689      	mov	r9, r1
    8034:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    8038:	f04f 0700 	mov.w	r7, #0
    803c:	d002      	beq.n	8044 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    803e:	2e01      	cmp	r6, #1
    8040:	d020      	beq.n	8084 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    8042:	e036      	b.n	80b2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    8044:	4608      	mov	r0, r1
    8046:	f000 fd8d 	bl	8b64 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x574>
    804a:	2001      	movs	r0, #1
    804c:	7260      	strb	r0, [r4, #9]
    804e:	79e0      	ldrb	r0, [r4, #7]
    8050:	2801      	cmp	r0, #1
    8052:	d105      	bne.n	8060 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    8054:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    8058:	f040 0008 	orr.w	r0, r0, #8
    805c:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    8060:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8062:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    8066:	6260      	str	r0, [r4, #36]	; 0x24
    8068:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    806c:	f8c8 0000 	str.w	r0, [r8]
    8070:	491b      	ldr	r1, [pc, #108]	; (80e0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    8072:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    8076:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    807a:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    807e:	fbb0 f7f1 	udiv	r7, r0, r1
    8082:	e016      	b.n	80b2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    8084:	4608      	mov	r0, r1
    8086:	f000 fd53 	bl	8b30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x540>
    808a:	2002      	movs	r0, #2
    808c:	7260      	strb	r0, [r4, #9]
    808e:	79e0      	ldrb	r0, [r4, #7]
    8090:	2801      	cmp	r0, #1
    8092:	d105      	bne.n	80a0 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    8094:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    8098:	f040 0004 	orr.w	r0, r0, #4
    809c:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    80a0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    80a2:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    80a6:	6260      	str	r0, [r4, #36]	; 0x24
    80a8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    80ac:	f8c8 0000 	str.w	r0, [r8]
    80b0:	2729      	movs	r7, #41	; 0x29
    80b2:	f000 fbfd 	bl	88b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2c0>
    80b6:	f008 fc4f 	bl	10958 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    80ba:	b120      	cbz	r0, 80c6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    80bc:	f7ff ff24 	bl	7f08 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    80c0:	2000      	movs	r0, #0
    80c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    80c6:	2100      	movs	r1, #0
    80c8:	4630      	mov	r0, r6
    80ca:	f000 fcc3 	bl	8a54 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x464>
    80ce:	4638      	mov	r0, r7
    80d0:	e7f7      	b.n	80c2 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    80d2:	0000      	.short	0x0000
    80d4:	20001100 	.word	0x20001100
    80d8:	40001000 	.word	0x40001000
    80dc:	4001f504 	.word	0x4001f504
    80e0:	00008ba8 	.word	0x00008ba8

000080e4 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY>:
    80e4:	4a02      	ldr	r2, [pc, #8]	; (80f0 <sym_LSYZDZOMTD6BKKRX25HIBNLFKSFDXBS3PS4UKOY+0xc>)
    80e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
    80e8:	6003      	str	r3, [r0, #0]
    80ea:	6b50      	ldr	r0, [r2, #52]	; 0x34
    80ec:	6008      	str	r0, [r1, #0]
    80ee:	4770      	bx	lr
    80f0:	20001100 	.word	0x20001100

000080f4 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    80f4:	b510      	push	{r4, lr}
    80f6:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    80f8:	4901      	ldr	r1, [pc, #4]	; (8100 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    80fa:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    80fe:	bd10      	pop	{r4, pc}
    8100:	200010f0 	.word	0x200010f0

00008104 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA>:
    8104:	490f      	ldr	r1, [pc, #60]	; (8144 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x40>)
    8106:	b510      	push	{r4, lr}
    8108:	69ca      	ldr	r2, [r1, #28]
    810a:	4282      	cmp	r2, r0
    810c:	d302      	bcc.n	8114 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x10>
    810e:	f640 1141 	movw	r1, #2369	; 0x941
    8112:	e00b      	b.n	812c <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x28>
    8114:	2201      	movs	r2, #1
    8116:	730a      	strb	r2, [r1, #12]
    8118:	6108      	str	r0, [r1, #16]
    811a:	490b      	ldr	r1, [pc, #44]	; (8148 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x44>)
    811c:	644a      	str	r2, [r1, #68]	; 0x44
    811e:	1d0a      	adds	r2, r1, #4
    8120:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    8124:	4283      	cmp	r3, r0
    8126:	d304      	bcc.n	8132 <sym_7CIQBS4FNO23MS6BAN7Q3LK45R62DBPT5FNCWOA+0x2e>
    8128:	f640 114a 	movw	r1, #2378	; 0x94a
    812c:	203e      	movs	r0, #62	; 0x3e
    812e:	f7f8 fffd 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8132:	2300      	movs	r3, #0
    8134:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    8138:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    813c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8140:	f000 bc5c 	b.w	89fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x40c>
    8144:	20001100 	.word	0x20001100
    8148:	40008000 	.word	0x40008000

0000814c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    814c:	b570      	push	{r4, r5, r6, lr}
    814e:	4c0f      	ldr	r4, [pc, #60]	; (818c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    8150:	4603      	mov	r3, r0
    8152:	2002      	movs	r0, #2
    8154:	7320      	strb	r0, [r4, #12]
    8156:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    815a:	2096      	movs	r0, #150	; 0x96
    815c:	f894 1020 	ldrb.w	r1, [r4, #32]
    8160:	7d22      	ldrb	r2, [r4, #20]
    8162:	2d01      	cmp	r5, #1
    8164:	d00e      	beq.n	8184 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    8166:	f000 fd5b 	bl	8c20 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    816a:	6120      	str	r0, [r4, #16]
    816c:	4808      	ldr	r0, [pc, #32]	; (8190 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    816e:	2100      	movs	r1, #0
    8170:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    8174:	6921      	ldr	r1, [r4, #16]
    8176:	69e0      	ldr	r0, [r4, #28]
    8178:	4408      	add	r0, r1
    817a:	4905      	ldr	r1, [pc, #20]	; (8190 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    817c:	1d09      	adds	r1, r1, #4
    817e:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    8182:	bd70      	pop	{r4, r5, r6, pc}
    8184:	f000 fd6a 	bl	8c5c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    8188:	e7ef      	b.n	816a <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    818a:	0000      	.short	0x0000
    818c:	20001100 	.word	0x20001100
    8190:	40008000 	.word	0x40008000

00008194 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI>:
    8194:	b510      	push	{r4, lr}
    8196:	f008 fd07 	bl	10ba8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    819a:	2800      	cmp	r0, #0
    819c:	d006      	beq.n	81ac <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x18>
    819e:	4804      	ldr	r0, [pc, #16]	; (81b0 <sym_YUNWMAOOL6VPZ57LS54EAM7TJ65IEHYU7XKGKUI+0x1c>)
    81a0:	6801      	ldr	r1, [r0, #0]
    81a2:	f021 0101 	bic.w	r1, r1, #1
    81a6:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
    81aa:	6001      	str	r1, [r0, #0]
    81ac:	bd10      	pop	{r4, pc}
    81ae:	0000      	.short	0x0000
    81b0:	40001774 	.word	0x40001774

000081b4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    81b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    81b8:	2238      	movs	r2, #56	; 0x38
    81ba:	2100      	movs	r1, #0
    81bc:	4813      	ldr	r0, [pc, #76]	; (820c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    81be:	f008 fd95 	bl	10cec <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    81c2:	f000 fc75 	bl	8ab0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4c0>
    81c6:	f008 fca8 	bl	10b1a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    81ca:	4d11      	ldr	r5, [pc, #68]	; (8210 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    81cc:	4e10      	ldr	r6, [pc, #64]	; (8210 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    81ce:	2400      	movs	r4, #0
    81d0:	4f0f      	ldr	r7, [pc, #60]	; (8210 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    81d2:	3508      	adds	r5, #8
    81d4:	3610      	adds	r6, #16
    81d6:	b928      	cbnz	r0, 81e4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    81d8:	f008 fcb6 	bl	10b48 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    81dc:	b910      	cbnz	r0, 81e4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    81de:	f008 fcbd 	bl	10b5c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    81e2:	b108      	cbz	r0, 81e8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    81e4:	2224      	movs	r2, #36	; 0x24
    81e6:	e006      	b.n	81f6 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    81e8:	f008 fcf8 	bl	10bdc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    81ec:	b910      	cbnz	r0, 81f4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    81ee:	f008 fceb 	bl	10bc8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    81f2:	b140      	cbz	r0, 8206 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    81f4:	2240      	movs	r2, #64	; 0x40
    81f6:	21ff      	movs	r1, #255	; 0xff
    81f8:	4638      	mov	r0, r7
    81fa:	f008 fd77 	bl	10cec <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    81fe:	602c      	str	r4, [r5, #0]
    8200:	6034      	str	r4, [r6, #0]
    8202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8206:	2238      	movs	r2, #56	; 0x38
    8208:	e7f5      	b.n	81f6 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    820a:	0000      	.short	0x0000
    820c:	20001100 	.word	0x20001100
    8210:	40000e00 	.word	0x40000e00

00008214 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    8214:	4801      	ldr	r0, [pc, #4]	; (821c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    8216:	69c0      	ldr	r0, [r0, #28]
    8218:	4770      	bx	lr
    821a:	0000      	.short	0x0000
    821c:	20001100 	.word	0x20001100

00008220 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    8220:	4801      	ldr	r0, [pc, #4]	; (8228 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x8>)
    8222:	f890 0020 	ldrb.w	r0, [r0, #32]
    8226:	4770      	bx	lr
    8228:	20001100 	.word	0x20001100

0000822c <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI>:
    822c:	4801      	ldr	r0, [pc, #4]	; (8234 <sym_YKV5VFBUMD7K2LRWZ6WWYBEL5ESMQ4SDYYBDIPI+0x8>)
    822e:	6980      	ldr	r0, [r0, #24]
    8230:	4770      	bx	lr
    8232:	0000      	.short	0x0000
    8234:	20001100 	.word	0x20001100

00008238 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    8238:	b510      	push	{r4, lr}
    823a:	f000 fbed 	bl	8a18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x428>
    823e:	f7ff fe63 	bl	7f08 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    8242:	f000 fdb5 	bl	8db0 <mpsl_fem_disable>
    8246:	b130      	cbz	r0, 8256 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    8248:	1c40      	adds	r0, r0, #1
    824a:	d004      	beq.n	8256 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    824c:	f240 5172 	movw	r1, #1394	; 0x572
    8250:	203e      	movs	r0, #62	; 0x3e
    8252:	f7f8 ff6b 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8256:	480f      	ldr	r0, [pc, #60]	; (8294 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    8258:	4a0f      	ldr	r2, [pc, #60]	; (8298 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    825a:	6a41      	ldr	r1, [r0, #36]	; 0x24
    825c:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    8260:	6011      	str	r1, [r2, #0]
    8262:	2400      	movs	r4, #0
    8264:	6244      	str	r4, [r0, #36]	; 0x24
    8266:	7304      	strb	r4, [r0, #12]
    8268:	61c4      	str	r4, [r0, #28]
    826a:	6184      	str	r4, [r0, #24]
    826c:	f000 fbd4 	bl	8a18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x428>
    8270:	480a      	ldr	r0, [pc, #40]	; (829c <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    8272:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    8276:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    827a:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    827e:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    8282:	2001      	movs	r0, #1
    8284:	f008 faca 	bl	1081c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    8288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    828c:	2001      	movs	r0, #1
    828e:	f008 bab8 	b.w	10802 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    8292:	0000      	.short	0x0000
    8294:	20001100 	.word	0x20001100
    8298:	4001f508 	.word	0x4001f508
    829c:	40008000 	.word	0x40008000

000082a0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    82a0:	b570      	push	{r4, r5, r6, lr}
    82a2:	2001      	movs	r0, #1
    82a4:	f008 faba 	bl	1081c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    82a8:	4c37      	ldr	r4, [pc, #220]	; (8388 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    82aa:	2000      	movs	r0, #0
    82ac:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    82b0:	2001      	movs	r0, #1
    82b2:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    82b6:	f008 fc67 	bl	10b88 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    82ba:	4d34      	ldr	r5, [pc, #208]	; (838c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    82bc:	b118      	cbz	r0, 82c6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    82be:	6828      	ldr	r0, [r5, #0]
    82c0:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    82c4:	6028      	str	r0, [r5, #0]
    82c6:	f008 fc53 	bl	10b70 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    82ca:	b128      	cbz	r0, 82d8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    82cc:	6828      	ldr	r0, [r5, #0]
    82ce:	4930      	ldr	r1, [pc, #192]	; (8390 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    82d0:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    82d4:	4308      	orrs	r0, r1
    82d6:	6028      	str	r0, [r5, #0]
    82d8:	f008 fc66 	bl	10ba8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    82dc:	b138      	cbz	r0, 82ee <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    82de:	482b      	ldr	r0, [pc, #172]	; (838c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    82e0:	1d00      	adds	r0, r0, #4
    82e2:	6801      	ldr	r1, [r0, #0]
    82e4:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    82e8:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    82ec:	6001      	str	r1, [r0, #0]
    82ee:	4927      	ldr	r1, [pc, #156]	; (838c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    82f0:	4828      	ldr	r0, [pc, #160]	; (8394 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    82f2:	313c      	adds	r1, #60	; 0x3c
    82f4:	6008      	str	r0, [r1, #0]
    82f6:	f000 fd95 	bl	8e24 <mpsl_fem_device_config_254_apply_get>
    82fa:	b140      	cbz	r0, 830e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    82fc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    8300:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    8304:	1c41      	adds	r1, r0, #1
    8306:	d002      	beq.n	830e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    8308:	4920      	ldr	r1, [pc, #128]	; (838c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    830a:	3110      	adds	r1, #16
    830c:	6008      	str	r0, [r1, #0]
    830e:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    8312:	6e00      	ldr	r0, [r0, #96]	; 0x60
    8314:	1c41      	adds	r1, r0, #1
    8316:	d004      	beq.n	8322 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    8318:	491f      	ldr	r1, [pc, #124]	; (8398 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    831a:	680a      	ldr	r2, [r1, #0]
    831c:	f360 4217 	bfi	r2, r0, #16, #8
    8320:	600a      	str	r2, [r1, #0]
    8322:	f240 1103 	movw	r1, #259	; 0x103
    8326:	f240 605b 	movw	r0, #1627	; 0x65b
    832a:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    832e:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    8332:	2001      	movs	r0, #1
    8334:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    8338:	f000 f842 	bl	83c0 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    833c:	f240 2001 	movw	r0, #513	; 0x201
    8340:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    8344:	2002      	movs	r0, #2
    8346:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    834a:	4914      	ldr	r1, [pc, #80]	; (839c <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    834c:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    8350:	6008      	str	r0, [r1, #0]
    8352:	4913      	ldr	r1, [pc, #76]	; (83a0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    8354:	2000      	movs	r0, #0
    8356:	8608      	strh	r0, [r1, #48]	; 0x30
    8358:	3110      	adds	r1, #16
    835a:	61c8      	str	r0, [r1, #28]
    835c:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
    8360:	2001      	movs	r0, #1
    8362:	f008 fa4e 	bl	10802 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    8366:	2010      	movs	r0, #16
    8368:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    836c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    8370:	2002      	movs	r0, #2
    8372:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    8376:	480b      	ldr	r0, [pc, #44]	; (83a4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    8378:	6800      	ldr	r0, [r0, #0]
    837a:	2800      	cmp	r0, #0
    837c:	d002      	beq.n	8384 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    837e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8382:	4700      	bx	r0
    8384:	bd70      	pop	{r4, r5, r6, pc}
    8386:	0000      	.short	0x0000
    8388:	40001000 	.word	0x40001000
    838c:	4000173c 	.word	0x4000173c
    8390:	80000096 	.word	0x80000096
    8394:	8900002c 	.word	0x8900002c
    8398:	4000158c 	.word	0x4000158c
    839c:	4001f504 	.word	0x4001f504
    83a0:	200010f0 	.word	0x200010f0
    83a4:	200002e0 	.word	0x200002e0

000083a8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    83a8:	4901      	ldr	r1, [pc, #4]	; (83b0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    83aa:	7548      	strb	r0, [r1, #21]
    83ac:	4770      	bx	lr
    83ae:	0000      	.short	0x0000
    83b0:	20001100 	.word	0x20001100

000083b4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    83b4:	4901      	ldr	r1, [pc, #4]	; (83bc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    83b6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    83ba:	4770      	bx	lr
    83bc:	00008bfc 	.word	0x00008bfc

000083c0 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    83c0:	4908      	ldr	r1, [pc, #32]	; (83e4 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    83c2:	b510      	push	{r4, lr}
    83c4:	7508      	strb	r0, [r1, #20]
    83c6:	4908      	ldr	r1, [pc, #32]	; (83e8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    83c8:	2801      	cmp	r0, #1
    83ca:	d006      	beq.n	83da <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    83cc:	2802      	cmp	r0, #2
    83ce:	d006      	beq.n	83de <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    83d0:	f640 519f 	movw	r1, #3487	; 0xd9f
    83d4:	203e      	movs	r0, #62	; 0x3e
    83d6:	f7f8 fea9 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    83da:	2003      	movs	r0, #3
    83dc:	e000      	b.n	83e0 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    83de:	2004      	movs	r0, #4
    83e0:	6008      	str	r0, [r1, #0]
    83e2:	bd10      	pop	{r4, pc}
    83e4:	20001100 	.word	0x20001100
    83e8:	40001510 	.word	0x40001510

000083ec <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    83ec:	4906      	ldr	r1, [pc, #24]	; (8408 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    83ee:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    83f2:	4906      	ldr	r1, [pc, #24]	; (840c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x20>)
    83f4:	f811 2f2d 	ldrb.w	r2, [r1, #45]!
    83f8:	f042 0201 	orr.w	r2, r2, #1
    83fc:	f801 2905 	strb.w	r2, [r1], #-5
    8400:	6008      	str	r0, [r1, #0]
    8402:	f000 ba1b 	b.w	883c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x24c>
    8406:	0000      	.short	0x0000
    8408:	40001000 	.word	0x40001000
    840c:	20001100 	.word	0x20001100

00008410 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    8410:	4901      	ldr	r1, [pc, #4]	; (8418 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    8412:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    8416:	4770      	bx	lr
    8418:	00008c08 	.word	0x00008c08

0000841c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    841c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8420:	4e30      	ldr	r6, [pc, #192]	; (84e4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    8422:	4c31      	ldr	r4, [pc, #196]	; (84e8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>)
    8424:	4688      	mov	r8, r1
    8426:	0007      	movs	r7, r0
    8428:	4615      	mov	r5, r2
    842a:	f04f 0901 	mov.w	r9, #1
    842e:	d006      	beq.n	843e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x22>
    8430:	2f01      	cmp	r7, #1
    8432:	d012      	beq.n	845a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3e>
    8434:	f640 0133 	movw	r1, #2099	; 0x833
    8438:	203e      	movs	r0, #62	; 0x3e
    843a:	f7f8 fe77 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    843e:	4610      	mov	r0, r2
    8440:	f000 fb90 	bl	8b64 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x574>
    8444:	4829      	ldr	r0, [pc, #164]	; (84ec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
    8446:	f884 9009 	strb.w	r9, [r4, #9]
    844a:	f830 1015 	ldrh.w	r1, [r0, r5, lsl #1]
    844e:	4640      	mov	r0, r8
    8450:	f000 fb36 	bl	8ac0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4d0>
    8454:	4605      	mov	r5, r0
    8456:	4630      	mov	r0, r6
    8458:	e00c      	b.n	8474 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
    845a:	4610      	mov	r0, r2
    845c:	f000 fb68 	bl	8b30 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x540>
    8460:	2002      	movs	r0, #2
    8462:	7260      	strb	r0, [r4, #9]
    8464:	f649 71ba 	movw	r1, #40890	; 0x9fba
    8468:	4640      	mov	r0, r8
    846a:	f000 fb29 	bl	8ac0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4d0>
    846e:	4605      	mov	r5, r0
    8470:	481c      	ldr	r0, [pc, #112]	; (84e4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    8472:	1d00      	adds	r0, r0, #4
    8474:	f000 fae2 	bl	8a3c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x44c>
    8478:	f8df 8074 	ldr.w	r8, [pc, #116]	; 84f0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
    847c:	f8c8 5540 	str.w	r5, [r8, #1344]	; 0x540
    8480:	f8df a074 	ldr.w	sl, [pc, #116]	; 84f8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>
    8484:	481b      	ldr	r0, [pc, #108]	; (84f4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
    8486:	f8ca 0510 	str.w	r0, [sl, #1296]	; 0x510
    848a:	2010      	movs	r0, #16
    848c:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
    8490:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8492:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    8496:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    849a:	6260      	str	r0, [r4, #36]	; 0x24
    849c:	4817      	ldr	r0, [pc, #92]	; (84fc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    849e:	6006      	str	r6, [r0, #0]
    84a0:	f000 fa06 	bl	88b0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2c0>
    84a4:	4641      	mov	r1, r8
    84a6:	f8c8 904c 	str.w	r9, [r8, #76]	; 0x4c
    84aa:	4811      	ldr	r0, [pc, #68]	; (84f0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
    84ac:	300c      	adds	r0, #12
    84ae:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    84b2:	42a8      	cmp	r0, r5
    84b4:	d310      	bcc.n	84d8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
    84b6:	2000      	movs	r0, #0
    84b8:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    84bc:	f8ca 0514 	str.w	r0, [sl, #1300]	; 0x514
    84c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    84c2:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
    84c6:	6260      	str	r0, [r4, #36]	; 0x24
    84c8:	480c      	ldr	r0, [pc, #48]	; (84fc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    84ca:	1d00      	adds	r0, r0, #4
    84cc:	6006      	str	r6, [r0, #0]
    84ce:	f7ff fd1b 	bl	7f08 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    84d2:	2000      	movs	r0, #0
    84d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    84d8:	4629      	mov	r1, r5
    84da:	4638      	mov	r0, r7
    84dc:	f000 faba 	bl	8a54 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x464>
    84e0:	2001      	movs	r0, #1
    84e2:	e7f7      	b.n	84d4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>
    84e4:	40001000 	.word	0x40001000
    84e8:	20001100 	.word	0x20001100
    84ec:	00008ba8 	.word	0x00008ba8
    84f0:	40008000 	.word	0x40008000
    84f4:	40008140 	.word	0x40008140
    84f8:	4001f098 	.word	0x4001f098
    84fc:	4001f504 	.word	0x4001f504

00008500 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    8500:	4b0d      	ldr	r3, [pc, #52]	; (8538 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    8502:	b510      	push	{r4, lr}
    8504:	71d8      	strb	r0, [r3, #7]
    8506:	729a      	strb	r2, [r3, #10]
    8508:	b151      	cbz	r1, 8520 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    850a:	2002      	movs	r0, #2
    850c:	7218      	strb	r0, [r3, #8]
    850e:	2801      	cmp	r0, #1
    8510:	d008      	beq.n	8524 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    8512:	2802      	cmp	r0, #2
    8514:	d00f      	beq.n	8536 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    8516:	f640 2161 	movw	r1, #2657	; 0xa61
    851a:	203e      	movs	r0, #62	; 0x3e
    851c:	f7f8 fe06 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8520:	2001      	movs	r0, #1
    8522:	e7f3      	b.n	850c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    8524:	7a58      	ldrb	r0, [r3, #9]
    8526:	2802      	cmp	r0, #2
    8528:	d105      	bne.n	8536 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    852a:	f000 f94b 	bl	87c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d4>
    852e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8532:	f000 ba59 	b.w	89e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f8>
    8536:	bd10      	pop	{r4, pc}
    8538:	20001100 	.word	0x20001100

0000853c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    853c:	4902      	ldr	r1, [pc, #8]	; (8548 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    853e:	2000      	movs	r0, #0
    8540:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    8544:	4770      	bx	lr
    8546:	0000      	.short	0x0000
    8548:	40008000 	.word	0x40008000

0000854c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    854c:	4904      	ldr	r1, [pc, #16]	; (8560 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    854e:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    8552:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    8556:	4249      	negs	r1, r1
    8558:	7001      	strb	r1, [r0, #0]
    855a:	2001      	movs	r0, #1
    855c:	4770      	bx	lr
    855e:	0000      	.short	0x0000
    8560:	40001000 	.word	0x40001000

00008564 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    8564:	4903      	ldr	r1, [pc, #12]	; (8574 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    8566:	0e02      	lsrs	r2, r0, #24
    8568:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    856c:	0200      	lsls	r0, r0, #8
    856e:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    8572:	4770      	bx	lr
    8574:	40001000 	.word	0x40001000

00008578 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    8578:	4901      	ldr	r1, [pc, #4]	; (8580 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    857a:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    857e:	4770      	bx	lr
    8580:	40001000 	.word	0x40001000

00008584 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    8584:	4a12      	ldr	r2, [pc, #72]	; (85d0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    8586:	b510      	push	{r4, lr}
    8588:	f882 002c 	strb.w	r0, [r2, #44]	; 0x2c
    858c:	2200      	movs	r2, #0
    858e:	2901      	cmp	r1, #1
    8590:	d006      	beq.n	85a0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x1c>
    8592:	2902      	cmp	r1, #2
    8594:	d002      	beq.n	859c <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x18>
    8596:	f44f 7137 	mov.w	r1, #732	; 0x2dc
    859a:	e014      	b.n	85c6 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    859c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    85a0:	490c      	ldr	r1, [pc, #48]	; (85d4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    85a2:	430a      	orrs	r2, r1
    85a4:	490c      	ldr	r1, [pc, #48]	; (85d8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x54>)
    85a6:	600a      	str	r2, [r1, #0]
    85a8:	490c      	ldr	r1, [pc, #48]	; (85dc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x58>)
    85aa:	4308      	orrs	r0, r1
    85ac:	490a      	ldr	r1, [pc, #40]	; (85d8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x54>)
    85ae:	1d09      	adds	r1, r1, #4
    85b0:	6008      	str	r0, [r1, #0]
    85b2:	480b      	ldr	r0, [pc, #44]	; (85e0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x5c>)
    85b4:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    85b8:	b2c0      	uxtb	r0, r0
    85ba:	2803      	cmp	r0, #3
    85bc:	d001      	beq.n	85c2 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3e>
    85be:	280b      	cmp	r0, #11
    85c0:	d104      	bne.n	85cc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>
    85c2:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    85c6:	203e      	movs	r0, #62	; 0x3e
    85c8:	f7f8 fdb0 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    85cc:	bd10      	pop	{r4, pc}
    85ce:	0000      	.short	0x0000
    85d0:	20001100 	.word	0x20001100
    85d4:	00100108 	.word	0x00100108
    85d8:	40001514 	.word	0x40001514
    85dc:	02030000 	.word	0x02030000
    85e0:	40001000 	.word	0x40001000

000085e4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    85e4:	4901      	ldr	r1, [pc, #4]	; (85ec <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    85e6:	7588      	strb	r0, [r1, #22]
    85e8:	4770      	bx	lr
    85ea:	0000      	.short	0x0000
    85ec:	20001100 	.word	0x20001100

000085f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    85f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    85f4:	4852      	ldr	r0, [pc, #328]	; (8740 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    85f6:	f04f 0a01 	mov.w	sl, #1
    85fa:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    85fe:	4850      	ldr	r0, [pc, #320]	; (8740 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    8600:	300c      	adds	r0, #12
    8602:	f8d0 6540 	ldr.w	r6, [r0, #1344]	; 0x540
    8606:	f008 f9a5 	bl	10954 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    860a:	4c4e      	ldr	r4, [pc, #312]	; (8744 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    860c:	e9c4 060c 	strd	r0, r6, [r4, #48]	; 0x30
    8610:	f000 f8e2 	bl	87d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e8>
    8614:	494c      	ldr	r1, [pc, #304]	; (8748 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    8616:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8618:	6008      	str	r0, [r1, #0]
    861a:	f8df 8130 	ldr.w	r8, [pc, #304]	; 874c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>
    861e:	2000      	movs	r0, #0
    8620:	6260      	str	r0, [r4, #36]	; 0x24
    8622:	f8d8 2200 	ldr.w	r2, [r8, #512]	; 0x200
    8626:	f240 131d 	movw	r3, #285	; 0x11d
    862a:	439a      	bics	r2, r3
    862c:	f8c8 2200 	str.w	r2, [r8, #512]	; 0x200
    8630:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    8634:	f000 f950 	bl	88d8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e8>
    8638:	4605      	mov	r5, r0
    863a:	4841      	ldr	r0, [pc, #260]	; (8740 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    863c:	3008      	adds	r0, #8
    863e:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    8642:	4f3f      	ldr	r7, [pc, #252]	; (8740 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>)
    8644:	61e0      	str	r0, [r4, #28]
    8646:	1d3f      	adds	r7, r7, #4
    8648:	f8d7 0540 	ldr.w	r0, [r7, #1344]	; 0x540
    864c:	61a0      	str	r0, [r4, #24]
    864e:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    8652:	7d20      	ldrb	r0, [r4, #20]
    8654:	f884 0020 	strb.w	r0, [r4, #32]
    8658:	7a60      	ldrb	r0, [r4, #9]
    865a:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    865e:	f04f 0900 	mov.w	r9, #0
    8662:	4631      	mov	r1, r6
    8664:	4628      	mov	r0, r5
    8666:	f000 f985 	bl	8974 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x384>
    866a:	b918      	cbnz	r0, 8674 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x84>
    866c:	f8c8 a010 	str.w	sl, [r8, #16]
    8670:	f04f 0901 	mov.w	r9, #1
    8674:	4e33      	ldr	r6, [pc, #204]	; (8744 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    8676:	07e8      	lsls	r0, r5, #31
    8678:	f1a6 0610 	sub.w	r6, r6, #16
    867c:	d120      	bne.n	86c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd0>
    867e:	07a8      	lsls	r0, r5, #30
    8680:	d52f      	bpl.n	86e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf2>
    8682:	f008 fa91 	bl	10ba8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8686:	b9f0      	cbnz	r0, 86c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    8688:	f008 fa7e 	bl	10b88 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    868c:	b9d8      	cbnz	r0, 86c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    868e:	4830      	ldr	r0, [pc, #192]	; (8750 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    8690:	6800      	ldr	r0, [r0, #0]
    8692:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    8696:	f3c0 6300 	ubfx	r3, r0, #24, #1
    869a:	f000 020f 	and.w	r2, r0, #15
    869e:	f3c0 1103 	ubfx	r1, r0, #4, #4
    86a2:	f3c0 2803 	ubfx	r8, r0, #8, #4
    86a6:	b173      	cbz	r3, 86c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    86a8:	b11a      	cbz	r2, 86b2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc2>
    86aa:	b111      	cbz	r1, 86b2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xc2>
    86ac:	f1b8 0f00 	cmp.w	r8, #0
    86b0:	d109      	bne.n	86c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    86b2:	f3c0 4004 	ubfx	r0, r0, #16, #5
    86b6:	2801      	cmp	r0, #1
    86b8:	d105      	bne.n	86c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    86ba:	f1bc 0f03 	cmp.w	ip, #3
    86be:	d202      	bcs.n	86c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    86c0:	6830      	ldr	r0, [r6, #0]
    86c2:	4780      	blx	r0
    86c4:	e016      	b.n	86f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x104>
    86c6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    86c8:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    86cc:	7840      	ldrb	r0, [r0, #1]
    86ce:	4288      	cmp	r0, r1
    86d0:	d901      	bls.n	86d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe6>
    86d2:	f045 0504 	orr.w	r5, r5, #4
    86d6:	f345 0080 	sbfx	r0, r5, #2, #1
    86da:	4649      	mov	r1, r9
    86dc:	1c40      	adds	r0, r0, #1
    86de:	6872      	ldr	r2, [r6, #4]
    86e0:	e007      	b.n	86f2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x102>
    86e2:	f015 0f28 	tst.w	r5, #40	; 0x28
    86e6:	d005      	beq.n	86f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x104>
    86e8:	f345 1140 	sbfx	r1, r5, #5, #1
    86ec:	68b2      	ldr	r2, [r6, #8]
    86ee:	4648      	mov	r0, r9
    86f0:	1c49      	adds	r1, r1, #1
    86f2:	4790      	blx	r2
    86f4:	06e8      	lsls	r0, r5, #27
    86f6:	d501      	bpl.n	86fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x10c>
    86f8:	68f0      	ldr	r0, [r6, #12]
    86fa:	4780      	blx	r0
    86fc:	7a60      	ldrb	r0, [r4, #9]
    86fe:	2802      	cmp	r0, #2
    8700:	d11c      	bne.n	873c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    8702:	7b20      	ldrb	r0, [r4, #12]
    8704:	2800      	cmp	r0, #0
    8706:	d019      	beq.n	873c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14c>
    8708:	2802      	cmp	r0, #2
    870a:	d004      	beq.n	8716 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x126>
    870c:	2801      	cmp	r0, #1
    870e:	d006      	beq.n	871e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x12e>
    8710:	f640 417f 	movw	r1, #3199	; 0xc7f
    8714:	e009      	b.n	872a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13a>
    8716:	6921      	ldr	r1, [r4, #16]
    8718:	69e0      	ldr	r0, [r4, #28]
    871a:	4408      	add	r0, r1
    871c:	e008      	b.n	8730 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x140>
    871e:	69e1      	ldr	r1, [r4, #28]
    8720:	6920      	ldr	r0, [r4, #16]
    8722:	4288      	cmp	r0, r1
    8724:	d804      	bhi.n	8730 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x140>
    8726:	f44f 6148 	mov.w	r1, #3200	; 0xc80
    872a:	203e      	movs	r0, #62	; 0x3e
    872c:	f7f8 fcfe 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8730:	f8c7 0540 	str.w	r0, [r7, #1344]	; 0x540
    8734:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8738:	f000 b960 	b.w	89fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x40c>
    873c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8740:	40008000 	.word	0x40008000
    8744:	20001100 	.word	0x20001100
    8748:	4001f508 	.word	0x4001f508
    874c:	40001000 	.word	0x40001000
    8750:	40001450 	.word	0x40001450
    8754:	480b      	ldr	r0, [pc, #44]	; (8784 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x194>)
    8756:	7d81      	ldrb	r1, [r0, #22]
    8758:	480b      	ldr	r0, [pc, #44]	; (8788 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x198>)
    875a:	5c40      	ldrb	r0, [r0, r1]
    875c:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    8760:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    8764:	d204      	bcs.n	8770 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x180>
    8766:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    876a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    876e:	e001      	b.n	8774 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x184>
    8770:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    8774:	4a05      	ldr	r2, [pc, #20]	; (878c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x19c>)
    8776:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    877a:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    877e:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    8782:	4770      	bx	lr
    8784:	20001100 	.word	0x20001100
    8788:	00008bae 	.word	0x00008bae
    878c:	40001000 	.word	0x40001000
    8790:	b508      	push	{r3, lr}
    8792:	490b      	ldr	r1, [pc, #44]	; (87c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d0>)
    8794:	466b      	mov	r3, sp
    8796:	f991 2015 	ldrsb.w	r2, [r1, #21]
    879a:	7d89      	ldrb	r1, [r1, #22]
    879c:	f000 faaa 	bl	8cf4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    87a0:	f99d 0000 	ldrsb.w	r0, [sp]
    87a4:	f000 fa7a 	bl	8c9c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    87a8:	f10d 0001 	add.w	r0, sp, #1
    87ac:	f000 fb24 	bl	8df8 <mpsl_fem_pa_gain_set>
    87b0:	2800      	cmp	r0, #0
    87b2:	d004      	beq.n	87be <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1ce>
    87b4:	f240 51f3 	movw	r1, #1523	; 0x5f3
    87b8:	203e      	movs	r0, #62	; 0x3e
    87ba:	f7f8 fcb7 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87be:	bd08      	pop	{r3, pc}
    87c0:	20001100 	.word	0x20001100
    87c4:	4803      	ldr	r0, [pc, #12]	; (87d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e4>)
    87c6:	7a01      	ldrb	r1, [r0, #8]
    87c8:	2901      	cmp	r1, #1
    87ca:	d102      	bne.n	87d2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1e2>
    87cc:	7a80      	ldrb	r0, [r0, #10]
    87ce:	f7ff bfdf 	b.w	8790 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1a0>
    87d2:	4770      	bx	lr
    87d4:	20001100 	.word	0x20001100
    87d8:	480d      	ldr	r0, [pc, #52]	; (8810 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x220>)
    87da:	b510      	push	{r4, lr}
    87dc:	7a40      	ldrb	r0, [r0, #9]
    87de:	2801      	cmp	r0, #1
    87e0:	d00c      	beq.n	87fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x20c>
    87e2:	2802      	cmp	r0, #2
    87e4:	d113      	bne.n	880e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21e>
    87e6:	f000 fae9 	bl	8dbc <mpsl_fem_lna_configuration_clear>
    87ea:	2800      	cmp	r0, #0
    87ec:	d00f      	beq.n	880e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21e>
    87ee:	1c40      	adds	r0, r0, #1
    87f0:	d00d      	beq.n	880e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21e>
    87f2:	f640 01c7 	movw	r1, #2247	; 0x8c7
    87f6:	203e      	movs	r0, #62	; 0x3e
    87f8:	f7f8 fc98 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87fc:	f000 faf0 	bl	8de0 <mpsl_fem_pa_configuration_clear>
    8800:	2800      	cmp	r0, #0
    8802:	d004      	beq.n	880e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21e>
    8804:	1c40      	adds	r0, r0, #1
    8806:	d002      	beq.n	880e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x21e>
    8808:	f640 01c1 	movw	r1, #2241	; 0x8c1
    880c:	e7f3      	b.n	87f6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x206>
    880e:	bd10      	pop	{r4, pc}
    8810:	20001100 	.word	0x20001100
    8814:	4808      	ldr	r0, [pc, #32]	; (8838 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x248>)
    8816:	2100      	movs	r1, #0
    8818:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    881c:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    8820:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    8824:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    8828:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    882c:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    8830:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    8834:	4770      	bx	lr
    8836:	0000      	.short	0x0000
    8838:	40001000 	.word	0x40001000
    883c:	4818      	ldr	r0, [pc, #96]	; (88a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b0>)
    883e:	b510      	push	{r4, lr}
    8840:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    8844:	07c1      	lsls	r1, r0, #31
    8846:	d029      	beq.n	889c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ac>
    8848:	0781      	lsls	r1, r0, #30
    884a:	d514      	bpl.n	8876 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x286>
    884c:	4815      	ldr	r0, [pc, #84]	; (88a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b4>)
    884e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    8852:	f041 0101 	orr.w	r1, r1, #1
    8856:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    885a:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    885e:	b2c0      	uxtb	r0, r0
    8860:	280b      	cmp	r0, #11
    8862:	d005      	beq.n	8870 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x280>
    8864:	280a      	cmp	r0, #10
    8866:	d003      	beq.n	8870 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x280>
    8868:	2803      	cmp	r0, #3
    886a:	d001      	beq.n	8870 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x280>
    886c:	2802      	cmp	r0, #2
    886e:	d115      	bne.n	889c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ac>
    8870:	f240 611c 	movw	r1, #1564	; 0x61c
    8874:	e00f      	b.n	8896 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2a6>
    8876:	0740      	lsls	r0, r0, #29
    8878:	d510      	bpl.n	889c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ac>
    887a:	480a      	ldr	r0, [pc, #40]	; (88a4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b4>)
    887c:	490a      	ldr	r1, [pc, #40]	; (88a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2b8>)
    887e:	3008      	adds	r0, #8
    8880:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    8884:	f44f 71a0 	mov.w	r1, #320	; 0x140
    8888:	4808      	ldr	r0, [pc, #32]	; (88ac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2bc>)
    888a:	f007 ffdd 	bl	10848 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    888e:	2800      	cmp	r0, #0
    8890:	d004      	beq.n	889c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2ac>
    8892:	f240 6124 	movw	r1, #1572	; 0x624
    8896:	203e      	movs	r0, #62	; 0x3e
    8898:	f7f8 fc48 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    889c:	bd10      	pop	{r4, pc}
    889e:	0000      	.short	0x0000
    88a0:	20001100 	.word	0x20001100
    88a4:	40001000 	.word	0x40001000
    88a8:	4001f098 	.word	0x4001f098
    88ac:	40008000 	.word	0x40008000
    88b0:	4808      	ldr	r0, [pc, #32]	; (88d4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e4>)
    88b2:	4601      	mov	r1, r0
    88b4:	79c2      	ldrb	r2, [r0, #7]
    88b6:	f891 102d 	ldrb.w	r1, [r1, #45]	; 0x2d
    88ba:	b112      	cbz	r2, 88c2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d2>
    88bc:	2a01      	cmp	r2, #1
    88be:	d003      	beq.n	88c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2d8>
    88c0:	e006      	b.n	88d0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2e0>
    88c2:	f041 0102 	orr.w	r1, r1, #2
    88c6:	e001      	b.n	88cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x2dc>
    88c8:	f041 0104 	orr.w	r1, r1, #4
    88cc:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
    88d0:	f7ff bfb4 	b.w	883c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x24c>
    88d4:	20001100 	.word	0x20001100
    88d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    88dc:	4d22      	ldr	r5, [pc, #136]	; (8968 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x378>)
    88de:	2400      	movs	r4, #0
    88e0:	7b28      	ldrb	r0, [r5, #12]
    88e2:	b138      	cbz	r0, 88f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x304>
    88e4:	f44f 71a2 	mov.w	r1, #324	; 0x144
    88e8:	4820      	ldr	r0, [pc, #128]	; (896c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x37c>)
    88ea:	f007 ffad 	bl	10848 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    88ee:	b108      	cbz	r0, 88f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x304>
    88f0:	2701      	movs	r7, #1
    88f2:	e000      	b.n	88f6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x306>
    88f4:	2700      	movs	r7, #0
    88f6:	7a68      	ldrb	r0, [r5, #9]
    88f8:	4e1d      	ldr	r6, [pc, #116]	; (8970 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x380>)
    88fa:	f44f 7186 	mov.w	r1, #268	; 0x10c
    88fe:	2801      	cmp	r0, #1
    8900:	d002      	beq.n	8908 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x318>
    8902:	2802      	cmp	r0, #2
    8904:	d006      	beq.n	8914 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x324>
    8906:	e016      	b.n	8936 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x346>
    8908:	4630      	mov	r0, r6
    890a:	f007 ff98 	bl	1083e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    890e:	b190      	cbz	r0, 8936 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x346>
    8910:	2408      	movs	r4, #8
    8912:	e010      	b.n	8936 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x346>
    8914:	4630      	mov	r0, r6
    8916:	f007 ff92 	bl	1083e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    891a:	b100      	cbz	r0, 891e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x32e>
    891c:	2402      	movs	r4, #2
    891e:	f8d6 0400 	ldr.w	r0, [r6, #1024]	; 0x400
    8922:	43c0      	mvns	r0, r0
    8924:	f340 0000 	sbfx	r0, r0, #0, #1
    8928:	1c40      	adds	r0, r0, #1
    892a:	d101      	bne.n	8930 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x340>
    892c:	f044 0404 	orr.w	r4, r4, #4
    8930:	b10f      	cbz	r7, 8936 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x346>
    8932:	f044 0401 	orr.w	r4, r4, #1
    8936:	f014 0f0b 	tst.w	r4, #11
    893a:	d107      	bne.n	894c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x35c>
    893c:	f44f 7188 	mov.w	r1, #272	; 0x110
    8940:	4630      	mov	r0, r6
    8942:	f007 ff7c 	bl	1083e <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    8946:	b108      	cbz	r0, 894c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x35c>
    8948:	f044 0410 	orr.w	r4, r4, #16
    894c:	f7ff ff62 	bl	8814 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x224>
    8950:	06e0      	lsls	r0, r4, #27
    8952:	d506      	bpl.n	8962 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x372>
    8954:	0720      	lsls	r0, r4, #28
    8956:	d404      	bmi.n	8962 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x372>
    8958:	7a68      	ldrb	r0, [r5, #9]
    895a:	2801      	cmp	r0, #1
    895c:	d101      	bne.n	8962 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x372>
    895e:	f044 0420 	orr.w	r4, r4, #32
    8962:	4620      	mov	r0, r4
    8964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8968:	20001100 	.word	0x20001100
    896c:	40008000 	.word	0x40008000
    8970:	40001000 	.word	0x40001000
    8974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8978:	4c1a      	ldr	r4, [pc, #104]	; (89e4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f4>)
    897a:	460d      	mov	r5, r1
    897c:	7a21      	ldrb	r1, [r4, #8]
    897e:	b129      	cbz	r1, 898c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x39c>
    8980:	f010 0f11 	tst.w	r0, #17
    8984:	d007      	beq.n	8996 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3a6>
    8986:	f7ff fabf 	bl	7f08 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    898a:	e024      	b.n	89d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e6>
    898c:	f000 f890 	bl	8ab0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4c0>
    8990:	2000      	movs	r0, #0
    8992:	7320      	strb	r0, [r4, #12]
    8994:	e01f      	b.n	89d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3e6>
    8996:	2901      	cmp	r1, #1
    8998:	d001      	beq.n	899e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ae>
    899a:	2601      	movs	r6, #1
    899c:	e000      	b.n	89a0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3b0>
    899e:	2600      	movs	r6, #0
    89a0:	79e0      	ldrb	r0, [r4, #7]
    89a2:	2801      	cmp	r0, #1
    89a4:	d00e      	beq.n	89c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d4>
    89a6:	2700      	movs	r7, #0
    89a8:	f000 f882 	bl	8ab0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4c0>
    89ac:	2196      	movs	r1, #150	; 0x96
    89ae:	4630      	mov	r0, r6
    89b0:	f000 f894 	bl	8adc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4ec>
    89b4:	4601      	mov	r1, r0
    89b6:	b14f      	cbz	r7, 89cc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3dc>
    89b8:	353b      	adds	r5, #59	; 0x3b
    89ba:	428d      	cmp	r5, r1
    89bc:	d904      	bls.n	89c8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d8>
    89be:	2000      	movs	r0, #0
    89c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    89c4:	2701      	movs	r7, #1
    89c6:	e7ef      	b.n	89a8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3b8>
    89c8:	2001      	movs	r0, #1
    89ca:	71e0      	strb	r0, [r4, #7]
    89cc:	7aa2      	ldrb	r2, [r4, #10]
    89ce:	4630      	mov	r0, r6
    89d0:	f7ff fd24 	bl	841c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    89d4:	b108      	cbz	r0, 89da <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3ea>
    89d6:	2001      	movs	r0, #1
    89d8:	e7f2      	b.n	89c0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3d0>
    89da:	f640 21c2 	movw	r1, #2754	; 0xac2
    89de:	203e      	movs	r0, #62	; 0x3e
    89e0:	f7f8 fba4 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    89e4:	20001100 	.word	0x20001100
    89e8:	4803      	ldr	r0, [pc, #12]	; (89f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x408>)
    89ea:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    89ee:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    89f2:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    89f6:	4770      	bx	lr
    89f8:	40001000 	.word	0x40001000
    89fc:	4804      	ldr	r0, [pc, #16]	; (8a10 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x420>)
    89fe:	6a41      	ldr	r1, [r0, #36]	; 0x24
    8a00:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    8a04:	6241      	str	r1, [r0, #36]	; 0x24
    8a06:	4903      	ldr	r1, [pc, #12]	; (8a14 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x424>)
    8a08:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    8a0c:	6008      	str	r0, [r1, #0]
    8a0e:	4770      	bx	lr
    8a10:	20001100 	.word	0x20001100
    8a14:	4001f504 	.word	0x4001f504
    8a18:	4a07      	ldr	r2, [pc, #28]	; (8a38 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x448>)
    8a1a:	2000      	movs	r0, #0
    8a1c:	3208      	adds	r2, #8
    8a1e:	4906      	ldr	r1, [pc, #24]	; (8a38 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x448>)
    8a20:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    8a24:	1d0a      	adds	r2, r1, #4
    8a26:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    8a2a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    8a2e:	4902      	ldr	r1, [pc, #8]	; (8a38 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x448>)
    8a30:	310c      	adds	r1, #12
    8a32:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    8a36:	4770      	bx	lr
    8a38:	40008000 	.word	0x40008000
    8a3c:	4903      	ldr	r1, [pc, #12]	; (8a4c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x45c>)
    8a3e:	79c9      	ldrb	r1, [r1, #7]
    8a40:	2900      	cmp	r1, #0
    8a42:	d102      	bne.n	8a4a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x45a>
    8a44:	4902      	ldr	r1, [pc, #8]	; (8a50 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x460>)
    8a46:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    8a4a:	4770      	bx	lr
    8a4c:	20001100 	.word	0x20001100
    8a50:	4001f098 	.word	0x4001f098
    8a54:	b510      	push	{r4, lr}
    8a56:	4a14      	ldr	r2, [pc, #80]	; (8aa8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b8>)
    8a58:	b120      	cbz	r0, 8a64 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x474>
    8a5a:	2801      	cmp	r0, #1
    8a5c:	d011      	beq.n	8a82 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x492>
    8a5e:	f240 716f 	movw	r1, #1903	; 0x76f
    8a62:	e01c      	b.n	8a9e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4ae>
    8a64:	f101 0028 	add.w	r0, r1, #40	; 0x28
    8a68:	e9c2 1002 	strd	r1, r0, [r2, #8]
    8a6c:	490f      	ldr	r1, [pc, #60]	; (8aac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>)
    8a6e:	480e      	ldr	r0, [pc, #56]	; (8aa8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b8>)
    8a70:	f000 f9bc 	bl	8dec <mpsl_fem_pa_configuration_set>
    8a74:	2800      	cmp	r0, #0
    8a76:	d015      	beq.n	8aa4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>
    8a78:	1c40      	adds	r0, r0, #1
    8a7a:	d013      	beq.n	8aa4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>
    8a7c:	f240 715e 	movw	r1, #1886	; 0x75e
    8a80:	e00d      	b.n	8a9e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4ae>
    8a82:	f101 0029 	add.w	r0, r1, #41	; 0x29
    8a86:	e9c2 1002 	strd	r1, r0, [r2, #8]
    8a8a:	4908      	ldr	r1, [pc, #32]	; (8aac <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4bc>)
    8a8c:	4806      	ldr	r0, [pc, #24]	; (8aa8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b8>)
    8a8e:	f000 f99b 	bl	8dc8 <mpsl_fem_lna_configuration_set>
    8a92:	2800      	cmp	r0, #0
    8a94:	d006      	beq.n	8aa4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>
    8a96:	1c40      	adds	r0, r0, #1
    8a98:	d004      	beq.n	8aa4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4b4>
    8a9a:	f240 716b 	movw	r1, #1899	; 0x76b
    8a9e:	203e      	movs	r0, #62	; 0x3e
    8aa0:	f7f8 fb44 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8aa4:	bd10      	pop	{r4, pc}
    8aa6:	0000      	.short	0x0000
    8aa8:	200002e4 	.word	0x200002e4
    8aac:	00008bd8 	.word	0x00008bd8
    8ab0:	4802      	ldr	r0, [pc, #8]	; (8abc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4cc>)
    8ab2:	2100      	movs	r1, #0
    8ab4:	71c1      	strb	r1, [r0, #7]
    8ab6:	7201      	strb	r1, [r0, #8]
    8ab8:	7241      	strb	r1, [r0, #9]
    8aba:	4770      	bx	lr
    8abc:	20001100 	.word	0x20001100
    8ac0:	4a05      	ldr	r2, [pc, #20]	; (8ad8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e8>)
    8ac2:	79d2      	ldrb	r2, [r2, #7]
    8ac4:	2a01      	cmp	r2, #1
    8ac6:	d006      	beq.n	8ad6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x4e6>
    8ac8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8acc:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    8ad0:	fbb1 f1f2 	udiv	r1, r1, r2
    8ad4:	1a40      	subs	r0, r0, r1
    8ad6:	4770      	bx	lr
    8ad8:	20001100 	.word	0x20001100
    8adc:	b570      	push	{r4, r5, r6, lr}
    8ade:	4c13      	ldr	r4, [pc, #76]	; (8b2c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x53c>)
    8ae0:	4603      	mov	r3, r0
    8ae2:	460d      	mov	r5, r1
    8ae4:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    8ae8:	2000      	movs	r0, #0
    8aea:	b15a      	cbz	r2, 8b04 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x514>
    8aec:	4621      	mov	r1, r4
    8aee:	f891 1020 	ldrb.w	r1, [r1, #32]
    8af2:	b163      	cbz	r3, 8b0e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x51e>
    8af4:	2b01      	cmp	r3, #1
    8af6:	d111      	bne.n	8b1c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x52c>
    8af8:	2a01      	cmp	r2, #1
    8afa:	4628      	mov	r0, r5
    8afc:	d012      	beq.n	8b24 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x534>
    8afe:	f007 fea8 	bl	10852 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    8b02:	e009      	b.n	8b18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x528>
    8b04:	f640 0174 	movw	r1, #2164	; 0x874
    8b08:	203e      	movs	r0, #62	; 0x3e
    8b0a:	f7f8 fb0f 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b0e:	2a01      	cmp	r2, #1
    8b10:	4628      	mov	r0, r5
    8b12:	d004      	beq.n	8b1e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x52e>
    8b14:	f007 feab 	bl	1086e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    8b18:	69e1      	ldr	r1, [r4, #28]
    8b1a:	4408      	add	r0, r1
    8b1c:	bd70      	pop	{r4, r5, r6, pc}
    8b1e:	f000 f8d1 	bl	8cc4 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    8b22:	e7f9      	b.n	8b18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x528>
    8b24:	f000 f8c0 	bl	8ca8 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    8b28:	e7f6      	b.n	8b18 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x528>
    8b2a:	0000      	.short	0x0000
    8b2c:	20001100 	.word	0x20001100
    8b30:	b510      	push	{r4, lr}
    8b32:	f7ff fc45 	bl	83c0 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8b36:	f7ff fe0d 	bl	8754 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>
    8b3a:	f7ff fe43 	bl	87c4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1d4>
    8b3e:	f7ff ff53 	bl	89e8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x3f8>
    8b42:	f008 f831 	bl	10ba8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8b46:	2800      	cmp	r0, #0
    8b48:	d108      	bne.n	8b5c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x56c>
    8b4a:	f008 f81d 	bl	10b88 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    8b4e:	2800      	cmp	r0, #0
    8b50:	d104      	bne.n	8b5c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x56c>
    8b52:	4803      	ldr	r0, [pc, #12]	; (8b60 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x570>)
    8b54:	6801      	ldr	r1, [r0, #0]
    8b56:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    8b5a:	6001      	str	r1, [r0, #0]
    8b5c:	bd10      	pop	{r4, pc}
    8b5e:	0000      	.short	0x0000
    8b60:	40001568 	.word	0x40001568
    8b64:	b510      	push	{r4, lr}
    8b66:	4604      	mov	r4, r0
    8b68:	f7ff fc2a 	bl	83c0 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8b6c:	f7ff fdf2 	bl	8754 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>
    8b70:	4620      	mov	r0, r4
    8b72:	f7ff fe0d 	bl	8790 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x1a0>
    8b76:	f008 f817 	bl	10ba8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8b7a:	2800      	cmp	r0, #0
    8b7c:	d00d      	beq.n	8b9a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5aa>
    8b7e:	4a09      	ldr	r2, [pc, #36]	; (8ba4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5b4>)
    8b80:	6811      	ldr	r1, [r2, #0]
    8b82:	0650      	lsls	r0, r2, #25
    8b84:	2c02      	cmp	r4, #2
    8b86:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    8b8a:	d007      	beq.n	8b9c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5ac>
    8b8c:	f3c0 2006 	ubfx	r0, r0, #8, #7
    8b90:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    8b94:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    8b98:	6010      	str	r0, [r2, #0]
    8b9a:	bd10      	pop	{r4, pc}
    8b9c:	f3c0 6006 	ubfx	r0, r0, #24, #7
    8ba0:	e7f6      	b.n	8b90 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x5a0>
    8ba2:	0000      	.short	0x0000
    8ba4:	40001588 	.word	0x40001588
    8ba8:	a62c0000 	.word	0xa62c0000
    8bac:	0604a1e0 	.word	0x0604a1e0
    8bb0:	0e0c0a08 	.word	0x0e0c0a08
    8bb4:	16141210 	.word	0x16141210
    8bb8:	201e1c18 	.word	0x201e1c18
    8bbc:	28262422 	.word	0x28262422
    8bc0:	302e2c2a 	.word	0x302e2c2a
    8bc4:	38363432 	.word	0x38363432
    8bc8:	403e3c3a 	.word	0x403e3c3a
    8bcc:	48464442 	.word	0x48464442
    8bd0:	024e4c4a 	.word	0x024e4c4a
    8bd4:	0000501a 	.word	0x0000501a
    8bd8:	00000001 	.word	0x00000001
    8bdc:	40001110 	.word	0x40001110
	...
    8bf4:	00001e14 	.word	0x00001e14
    8bf8:	00001130 	.word	0x00001130
    8bfc:	00000000 	.word	0x00000000
    8c00:	00000028 	.word	0x00000028
    8c04:	00000018 	.word	0x00000018
    8c08:	00000000 	.word	0x00000000
    8c0c:	00001e14 	.word	0x00001e14
    8c10:	00001130 	.word	0x00001130
    8c14:	00000000 	.word	0x00000000
    8c18:	00001770 	.word	0x00001770
    8c1c:	00000fa0 	.word	0x00000fa0

00008c20 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    8c20:	b570      	push	{r4, r5, r6, lr}
    8c22:	4605      	mov	r5, r0
    8c24:	4614      	mov	r4, r2
    8c26:	4608      	mov	r0, r1
    8c28:	f7ff fbf2 	bl	8410 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    8c2c:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    8c30:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    8c34:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    8c38:	4807      	ldr	r0, [pc, #28]	; (8c58 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    8c3a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    8c3e:	4408      	add	r0, r1
    8c40:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8c44:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    8c48:	fbb0 f5f1 	udiv	r5, r0, r1
    8c4c:	4620      	mov	r0, r4
    8c4e:	f7ff fbb1 	bl	83b4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8c52:	4428      	add	r0, r5
    8c54:	1d40      	adds	r0, r0, #5
    8c56:	bd70      	pop	{r4, r5, r6, pc}
    8c58:	00008ce8 	.word	0x00008ce8

00008c5c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    8c5c:	b570      	push	{r4, r5, r6, lr}
    8c5e:	4d0e      	ldr	r5, [pc, #56]	; (8c98 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    8c60:	461c      	mov	r4, r3
    8c62:	3d08      	subs	r5, #8
    8c64:	4b0c      	ldr	r3, [pc, #48]	; (8c98 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    8c66:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    8c6a:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    8c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8c72:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    8c76:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    8c7a:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    8c7e:	4418      	add	r0, r3
    8c80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8c84:	fbb0 f5f1 	udiv	r5, r0, r1
    8c88:	4610      	mov	r0, r2
    8c8a:	f7ff fb93 	bl	83b4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8c8e:	4428      	add	r0, r5
    8c90:	4420      	add	r0, r4
    8c92:	1d40      	adds	r0, r0, #5
    8c94:	bd70      	pop	{r4, r5, r6, pc}
    8c96:	0000      	.short	0x0000
    8c98:	00008ce8 	.word	0x00008ce8

00008c9c <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    8c9c:	4901      	ldr	r1, [pc, #4]	; (8ca4 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    8c9e:	b2c0      	uxtb	r0, r0
    8ca0:	6008      	str	r0, [r1, #0]
    8ca2:	4770      	bx	lr
    8ca4:	4000150c 	.word	0x4000150c

00008ca8 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    8ca8:	4a05      	ldr	r2, [pc, #20]	; (8cc0 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    8caa:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8cae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8cb2:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    8cb6:	fbb1 f1f2 	udiv	r1, r1, r2
    8cba:	4408      	add	r0, r1
    8cbc:	1e80      	subs	r0, r0, #2
    8cbe:	4770      	bx	lr
    8cc0:	00008ce0 	.word	0x00008ce0

00008cc4 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    8cc4:	4a05      	ldr	r2, [pc, #20]	; (8cdc <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    8cc6:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8cca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8cce:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    8cd2:	fbb1 f1f2 	udiv	r1, r1, r2
    8cd6:	4408      	add	r0, r1
    8cd8:	4770      	bx	lr
    8cda:	0000      	.short	0x0000
    8cdc:	00008ce0 	.word	0x00008ce0
    8ce0:	05dc0000 	.word	0x05dc0000
    8ce4:	000003e8 	.word	0x000003e8
    8ce8:	00000000 	.word	0x00000000
    8cec:	00001e14 	.word	0x00001e14
    8cf0:	00001130 	.word	0x00001130

00008cf4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    8cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8cf8:	461e      	mov	r6, r3
    8cfa:	4617      	mov	r7, r2
    8cfc:	460c      	mov	r4, r1
    8cfe:	4605      	mov	r5, r0
    8d00:	f000 f8b6 	bl	8e70 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    8d04:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8dac <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    8d08:	4680      	mov	r8, r0
    8d0a:	f899 0000 	ldrb.w	r0, [r9]
    8d0e:	42a8      	cmp	r0, r5
    8d10:	d110      	bne.n	8d34 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8d12:	f899 1001 	ldrb.w	r1, [r9, #1]
    8d16:	4648      	mov	r0, r9
    8d18:	42a1      	cmp	r1, r4
    8d1a:	d10b      	bne.n	8d34 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8d1c:	f990 1002 	ldrsb.w	r1, [r0, #2]
    8d20:	42b9      	cmp	r1, r7
    8d22:	d107      	bne.n	8d34 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8d24:	78c2      	ldrb	r2, [r0, #3]
    8d26:	4542      	cmp	r2, r8
    8d28:	d104      	bne.n	8d34 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8d2a:	8881      	ldrh	r1, [r0, #4]
    8d2c:	8031      	strh	r1, [r6, #0]
    8d2e:	7980      	ldrb	r0, [r0, #6]
    8d30:	70b0      	strb	r0, [r6, #2]
    8d32:	e037      	b.n	8da4 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb0>
    8d34:	463a      	mov	r2, r7
    8d36:	4621      	mov	r1, r4
    8d38:	2d01      	cmp	r5, #1
    8d3a:	d009      	beq.n	8d50 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    8d3c:	2d02      	cmp	r5, #2
    8d3e:	d009      	beq.n	8d54 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    8d40:	2d04      	cmp	r5, #4
    8d42:	d009      	beq.n	8d58 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    8d44:	2d08      	cmp	r5, #8
    8d46:	d009      	beq.n	8d5c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    8d48:	f240 4105 	movw	r1, #1029	; 0x405
    8d4c:	2006      	movs	r0, #6
    8d4e:	e00c      	b.n	8d6a <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    8d50:	2000      	movs	r0, #0
    8d52:	e004      	b.n	8d5e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8d54:	2001      	movs	r0, #1
    8d56:	e002      	b.n	8d5e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8d58:	2003      	movs	r0, #3
    8d5a:	e000      	b.n	8d5e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8d5c:	2002      	movs	r0, #2
    8d5e:	466b      	mov	r3, sp
    8d60:	f000 f90e 	bl	8f80 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    8d64:	b118      	cbz	r0, 8d6e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    8d66:	213d      	movs	r1, #61	; 0x3d
    8d68:	2075      	movs	r0, #117	; 0x75
    8d6a:	f7f8 f9df 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8d6e:	4620      	mov	r0, r4
    8d70:	f7ff f8c2 	bl	7ef8 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    8d74:	4602      	mov	r2, r0
    8d76:	2300      	movs	r3, #0
    8d78:	4631      	mov	r1, r6
    8d7a:	f99d 0000 	ldrsb.w	r0, [sp]
    8d7e:	f000 f847 	bl	8e10 <mpsl_fem_tx_power_split>
    8d82:	4601      	mov	r1, r0
    8d84:	f889 1007 	strb.w	r1, [r9, #7]
    8d88:	8831      	ldrh	r1, [r6, #0]
    8d8a:	f8a9 1004 	strh.w	r1, [r9, #4]
    8d8e:	78b1      	ldrb	r1, [r6, #2]
    8d90:	f889 1006 	strb.w	r1, [r9, #6]
    8d94:	f889 5000 	strb.w	r5, [r9]
    8d98:	f889 4001 	strb.w	r4, [r9, #1]
    8d9c:	f889 7002 	strb.w	r7, [r9, #2]
    8da0:	f889 8003 	strb.w	r8, [r9, #3]
    8da4:	f999 0007 	ldrsb.w	r0, [r9, #7]
    8da8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8dac:	20000396 	.word	0x20000396

00008db0 <mpsl_fem_disable>:
    8db0:	4801      	ldr	r0, [pc, #4]	; (8db8 <mpsl_fem_disable+0x8>)
    8db2:	6800      	ldr	r0, [r0, #0]
    8db4:	6800      	ldr	r0, [r0, #0]
    8db6:	4700      	bx	r0
    8db8:	200002fc 	.word	0x200002fc

00008dbc <mpsl_fem_lna_configuration_clear>:
    8dbc:	4801      	ldr	r0, [pc, #4]	; (8dc4 <mpsl_fem_lna_configuration_clear+0x8>)
    8dbe:	6800      	ldr	r0, [r0, #0]
    8dc0:	6940      	ldr	r0, [r0, #20]
    8dc2:	4700      	bx	r0
    8dc4:	200002fc 	.word	0x200002fc

00008dc8 <mpsl_fem_lna_configuration_set>:
    8dc8:	4a01      	ldr	r2, [pc, #4]	; (8dd0 <mpsl_fem_lna_configuration_set+0x8>)
    8dca:	6812      	ldr	r2, [r2, #0]
    8dcc:	68d2      	ldr	r2, [r2, #12]
    8dce:	4710      	bx	r2
    8dd0:	200002fc 	.word	0x200002fc

00008dd4 <mpsl_fem_lna_is_configured>:
    8dd4:	4901      	ldr	r1, [pc, #4]	; (8ddc <mpsl_fem_lna_is_configured+0x8>)
    8dd6:	6809      	ldr	r1, [r1, #0]
    8dd8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    8dda:	4708      	bx	r1
    8ddc:	200002fc 	.word	0x200002fc

00008de0 <mpsl_fem_pa_configuration_clear>:
    8de0:	4801      	ldr	r0, [pc, #4]	; (8de8 <mpsl_fem_pa_configuration_clear+0x8>)
    8de2:	6800      	ldr	r0, [r0, #0]
    8de4:	6900      	ldr	r0, [r0, #16]
    8de6:	4700      	bx	r0
    8de8:	200002fc 	.word	0x200002fc

00008dec <mpsl_fem_pa_configuration_set>:
    8dec:	4a01      	ldr	r2, [pc, #4]	; (8df4 <mpsl_fem_pa_configuration_set+0x8>)
    8dee:	6812      	ldr	r2, [r2, #0]
    8df0:	6892      	ldr	r2, [r2, #8]
    8df2:	4710      	bx	r2
    8df4:	200002fc 	.word	0x200002fc

00008df8 <mpsl_fem_pa_gain_set>:
    8df8:	4901      	ldr	r1, [pc, #4]	; (8e00 <mpsl_fem_pa_gain_set+0x8>)
    8dfa:	6809      	ldr	r1, [r1, #0]
    8dfc:	6a49      	ldr	r1, [r1, #36]	; 0x24
    8dfe:	4708      	bx	r1
    8e00:	200002fc 	.word	0x200002fc

00008e04 <mpsl_fem_pa_is_configured>:
    8e04:	4901      	ldr	r1, [pc, #4]	; (8e0c <mpsl_fem_pa_is_configured+0x8>)
    8e06:	6809      	ldr	r1, [r1, #0]
    8e08:	6a89      	ldr	r1, [r1, #40]	; 0x28
    8e0a:	4708      	bx	r1
    8e0c:	200002fc 	.word	0x200002fc

00008e10 <mpsl_fem_tx_power_split>:
    8e10:	b430      	push	{r4, r5}
    8e12:	4c03      	ldr	r4, [pc, #12]	; (8e20 <mpsl_fem_tx_power_split+0x10>)
    8e14:	6824      	ldr	r4, [r4, #0]
    8e16:	6864      	ldr	r4, [r4, #4]
    8e18:	46a4      	mov	ip, r4
    8e1a:	bc30      	pop	{r4, r5}
    8e1c:	4760      	bx	ip
    8e1e:	0000      	.short	0x0000
    8e20:	200002fc 	.word	0x200002fc

00008e24 <mpsl_fem_device_config_254_apply_get>:
    8e24:	4801      	ldr	r0, [pc, #4]	; (8e2c <mpsl_fem_device_config_254_apply_get+0x8>)
    8e26:	7800      	ldrb	r0, [r0, #0]
    8e28:	4770      	bx	lr
    8e2a:	0000      	.short	0x0000
    8e2c:	2000039e 	.word	0x2000039e

00008e30 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    8e30:	000108d1 00010909 000108f3 000108e1     ................
    8e40:	000108ed 000108db 000108cf 000108cd     ................
    8e50:	00010905 000108f9 000108e7 000108d5     ................
    8e60:	000108c7 000108bf 000108c3 000108b9     ................

00008e70 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    8e70:	4801      	ldr	r0, [pc, #4]	; (8e78 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    8e72:	7800      	ldrb	r0, [r0, #0]
    8e74:	4770      	bx	lr
    8e76:	0000      	.short	0x0000
    8e78:	20000300 	.word	0x20000300

00008e7c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    8e7c:	b570      	push	{r4, r5, r6, lr}
    8e7e:	4c1c      	ldr	r4, [pc, #112]	; (8ef0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x74>)
    8e80:	7860      	ldrb	r0, [r4, #1]
    8e82:	2800      	cmp	r0, #0
    8e84:	d12d      	bne.n	8ee2 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x66>
    8e86:	2001      	movs	r0, #1
    8e88:	7060      	strb	r0, [r4, #1]
    8e8a:	f007 fe67 	bl	10b5c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    8e8e:	25d8      	movs	r5, #216	; 0xd8
    8e90:	f06f 0627 	mvn.w	r6, #39	; 0x27
    8e94:	b928      	cbnz	r0, 8ea2 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x26>
    8e96:	f007 fe97 	bl	10bc8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    8e9a:	b910      	cbnz	r0, 8ea2 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x26>
    8e9c:	f007 fe9e 	bl	10bdc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    8ea0:	b138      	cbz	r0, 8eb2 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x36>
    8ea2:	4a14      	ldr	r2, [pc, #80]	; (8ef4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x78>)
    8ea4:	f366 0007 	bfi	r0, r6, #0, #8
    8ea8:	6062      	str	r2, [r4, #4]
    8eaa:	e9c4 5002 	strd	r5, r0, [r4, #8]
    8eae:	2008      	movs	r0, #8
    8eb0:	e013      	b.n	8eda <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x5e>
    8eb2:	f007 fe28 	bl	10b06 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    8eb6:	b940      	cbnz	r0, 8eca <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x4e>
    8eb8:	f007 fe2f 	bl	10b1a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    8ebc:	b928      	cbnz	r0, 8eca <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x4e>
    8ebe:	f007 fe43 	bl	10b48 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    8ec2:	b910      	cbnz	r0, 8eca <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x4e>
    8ec4:	f007 fe54 	bl	10b70 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    8ec8:	b160      	cbz	r0, 8ee4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x68>
    8eca:	4a0a      	ldr	r2, [pc, #40]	; (8ef4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x78>)
    8ecc:	f366 0007 	bfi	r0, r6, #0, #8
    8ed0:	3231      	adds	r2, #49	; 0x31
    8ed2:	6062      	str	r2, [r4, #4]
    8ed4:	e9c4 5002 	strd	r5, r0, [r4, #8]
    8ed8:	2004      	movs	r0, #4
    8eda:	f360 0107 	bfi	r1, r0, #0, #8
    8ede:	e9c4 0104 	strd	r0, r1, [r4, #16]
    8ee2:	bd70      	pop	{r4, r5, r6, pc}
    8ee4:	f44f 71db 	mov.w	r1, #438	; 0x1b6
    8ee8:	2074      	movs	r0, #116	; 0x74
    8eea:	f003 fc1d 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8eee:	0000      	.short	0x0000
    8ef0:	20000300 	.word	0x20000300
    8ef4:	00010de5 	.word	0x00010de5

00008ef8 <mpsl_tx_power_radio_supported_power_adjust>:
    8ef8:	4a07      	ldr	r2, [pc, #28]	; (8f18 <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    8efa:	b510      	push	{r4, lr}
    8efc:	6954      	ldr	r4, [r2, #20]
    8efe:	3210      	adds	r2, #16
    8f00:	f992 2004 	ldrsb.w	r2, [r2, #4]
    8f04:	4282      	cmp	r2, r0
    8f06:	dd05      	ble.n	8f14 <mpsl_tx_power_radio_supported_power_adjust+0x1c>
    8f08:	f000 f80a 	bl	8f20 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
    8f0c:	4903      	ldr	r1, [pc, #12]	; (8f1c <mpsl_tx_power_radio_supported_power_adjust+0x24>)
    8f0e:	5c08      	ldrb	r0, [r1, r0]
    8f10:	f360 0407 	bfi	r4, r0, #0, #8
    8f14:	b260      	sxtb	r0, r4
    8f16:	bd10      	pop	{r4, pc}
    8f18:	20000300 	.word	0x20000300
    8f1c:	00010dd7 	.word	0x00010dd7

00008f20 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
    8f20:	4602      	mov	r2, r0
    8f22:	4815      	ldr	r0, [pc, #84]	; (8f78 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x58>)
    8f24:	b510      	push	{r4, lr}
    8f26:	f990 0004 	ldrsb.w	r0, [r0, #4]
    8f2a:	4290      	cmp	r0, r2
    8f2c:	dc01      	bgt.n	8f32 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
    8f2e:	200d      	movs	r0, #13
    8f30:	bd10      	pop	{r4, pc}
    8f32:	4811      	ldr	r0, [pc, #68]	; (8f78 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x58>)
    8f34:	3808      	subs	r0, #8
    8f36:	f990 0004 	ldrsb.w	r0, [r0, #4]
    8f3a:	4290      	cmp	r0, r2
    8f3c:	db01      	blt.n	8f42 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
    8f3e:	2000      	movs	r0, #0
    8f40:	bd10      	pop	{r4, pc}
    8f42:	b101      	cbz	r1, 8f46 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x26>
    8f44:	2101      	movs	r1, #1
    8f46:	1a14      	subs	r4, r2, r0
    8f48:	480b      	ldr	r0, [pc, #44]	; (8f78 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x58>)
    8f4a:	3810      	subs	r0, #16
    8f4c:	6843      	ldr	r3, [r0, #4]
    8f4e:	5d18      	ldrb	r0, [r3, r4]
    8f50:	4c0a      	ldr	r4, [pc, #40]	; (8f7c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x5c>)
    8f52:	5624      	ldrsb	r4, [r4, r0]
    8f54:	4294      	cmp	r4, r2
    8f56:	d0f3      	beq.n	8f40 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x20>
    8f58:	4c08      	ldr	r4, [pc, #32]	; (8f7c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x5c>)
    8f5a:	4408      	add	r0, r1
    8f5c:	343f      	adds	r4, #63	; 0x3f
    8f5e:	b2c0      	uxtb	r0, r0
    8f60:	b2d2      	uxtb	r2, r2
    8f62:	42a3      	cmp	r3, r4
    8f64:	d1ec      	bne.n	8f40 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x20>
    8f66:	2900      	cmp	r1, #0
    8f68:	d0ea      	beq.n	8f40 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x20>
    8f6a:	2a01      	cmp	r2, #1
    8f6c:	d001      	beq.n	8f72 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x52>
    8f6e:	2a02      	cmp	r2, #2
    8f70:	d1e6      	bne.n	8f40 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x20>
    8f72:	1c40      	adds	r0, r0, #1
    8f74:	b2c0      	uxtb	r0, r0
    8f76:	bd10      	pop	{r4, pc}
    8f78:	20000310 	.word	0x20000310
    8f7c:	00010dd7 	.word	0x00010dd7

00008f80 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    8f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f84:	461c      	mov	r4, r3
    8f86:	4690      	mov	r8, r2
    8f88:	460d      	mov	r5, r1
    8f8a:	4606      	mov	r6, r0
    8f8c:	f06f 0715 	mvn.w	r7, #21
    8f90:	2804      	cmp	r0, #4
    8f92:	d804      	bhi.n	8f9e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8f94:	b11c      	cbz	r4, 8f9e <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8f96:	f007 fcba 	bl	1090e <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x86>
    8f9a:	42a8      	cmp	r0, r5
    8f9c:	d802      	bhi.n	8fa4 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    8f9e:	4638      	mov	r0, r7
    8fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8fa4:	4805      	ldr	r0, [pc, #20]	; (8fbc <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    8fa6:	4642      	mov	r2, r8
    8fa8:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    8fac:	b118      	cbz	r0, 8fb6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8fae:	5740      	ldrsb	r0, [r0, r5]
    8fb0:	4282      	cmp	r2, r0
    8fb2:	dd00      	ble.n	8fb6 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8fb4:	4602      	mov	r2, r0
    8fb6:	7022      	strb	r2, [r4, #0]
    8fb8:	2000      	movs	r0, #0
    8fba:	e7f1      	b.n	8fa0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    8fbc:	20001138 	.word	0x20001138

00008fc0 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    8fc0:	4801      	ldr	r0, [pc, #4]	; (8fc8 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    8fc2:	7800      	ldrb	r0, [r0, #0]
    8fc4:	4770      	bx	lr
    8fc6:	0000      	.short	0x0000
    8fc8:	20000318 	.word	0x20000318

00008fcc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    8fcc:	4905      	ldr	r1, [pc, #20]	; (8fe4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    8fce:	780a      	ldrb	r2, [r1, #0]
    8fd0:	4290      	cmp	r0, r2
    8fd2:	d301      	bcc.n	8fd8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    8fd4:	2000      	movs	r0, #0
    8fd6:	4770      	bx	lr
    8fd8:	6849      	ldr	r1, [r1, #4]
    8fda:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8fde:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    8fe2:	4770      	bx	lr
    8fe4:	20000318 	.word	0x20000318

00008fe8 <MPSL_IRQ_RADIO_Handler>:
    8fe8:	490d      	ldr	r1, [pc, #52]	; (9020 <MPSL_IRQ_RADIO_Handler+0x38>)
    8fea:	b510      	push	{r4, lr}
    8fec:	f891 004a 	ldrb.w	r0, [r1, #74]	; 0x4a
    8ff0:	2820      	cmp	r0, #32
    8ff2:	d00f      	beq.n	9014 <MPSL_IRQ_RADIO_Handler+0x2c>
    8ff4:	f891 004a 	ldrb.w	r0, [r1, #74]	; 0x4a
    8ff8:	f5a1 6290 	sub.w	r2, r1, #1152	; 0x480
    8ffc:	eb02 1040 	add.w	r0, r2, r0, lsl #5
    9000:	f891 104a 	ldrb.w	r1, [r1, #74]	; 0x4a
    9004:	6840      	ldr	r0, [r0, #4]
    9006:	eb02 1141 	add.w	r1, r2, r1, lsl #5
    900a:	680a      	ldr	r2, [r1, #0]
    900c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9010:	2104      	movs	r1, #4
    9012:	4710      	bx	r2
    9014:	f640 0194 	movw	r1, #2196	; 0x894
    9018:	2070      	movs	r0, #112	; 0x70
    901a:	f003 fb85 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    901e:	0000      	.short	0x0000
    9020:	20000ff8 	.word	0x20000ff8
    9024:	b570      	push	{r4, r5, r6, lr}
    9026:	4605      	mov	r5, r0
    9028:	2a20      	cmp	r2, #32
    902a:	d028      	beq.n	907e <MPSL_IRQ_RADIO_Handler+0x96>
    902c:	4819      	ldr	r0, [pc, #100]	; (9094 <MPSL_IRQ_RADIO_Handler+0xac>)
    902e:	4c1a      	ldr	r4, [pc, #104]	; (9098 <MPSL_IRQ_RADIO_Handler+0xb0>)
    9030:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    9034:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9038:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    903c:	4423      	add	r3, r4
    903e:	2920      	cmp	r1, #32
    9040:	d022      	beq.n	9088 <MPSL_IRQ_RADIO_Handler+0xa0>
    9042:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    9046:	7840      	ldrb	r0, [r0, #1]
    9048:	784c      	ldrb	r4, [r1, #1]
    904a:	7048      	strb	r0, [r1, #1]
    904c:	4620      	mov	r0, r4
    904e:	4601      	mov	r1, r0
    9050:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    9054:	4291      	cmp	r1, r2
    9056:	7005      	strb	r5, [r0, #0]
    9058:	7840      	ldrb	r0, [r0, #1]
    905a:	d1f8      	bne.n	904e <MPSL_IRQ_RADIO_Handler+0x66>
    905c:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
    9060:	2a20      	cmp	r2, #32
    9062:	bf1a      	itte	ne
    9064:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    9068:	7054      	strbne	r4, [r2, #1]
    906a:	f883 4031 	strbeq.w	r4, [r3, #49]	; 0x31
    906e:	2220      	movs	r2, #32
    9070:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    9074:	f88c 2001 	strb.w	r2, [ip, #1]
    9078:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
    907c:	bd70      	pop	{r4, r5, r6, pc}
    907e:	f44f 7122 	mov.w	r1, #648	; 0x288
    9082:	2070      	movs	r0, #112	; 0x70
    9084:	f003 fb50 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9088:	f893 4030 	ldrb.w	r4, [r3, #48]	; 0x30
    908c:	7840      	ldrb	r0, [r0, #1]
    908e:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
    9092:	e7db      	b.n	904c <MPSL_IRQ_RADIO_Handler+0x64>
    9094:	20000f78 	.word	0x20000f78
    9098:	20000ff8 	.word	0x20000ff8
    909c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    90a0:	b08f      	sub	sp, #60	; 0x3c
    90a2:	4616      	mov	r6, r2
    90a4:	461d      	mov	r5, r3
    90a6:	460c      	mov	r4, r1
    90a8:	f002 fac6 	bl	b638 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    90ac:	1830      	adds	r0, r6, r0
    90ae:	f145 0100 	adc.w	r1, r5, #0
    90b2:	e9cd 1001 	strd	r1, r0, [sp, #4]
    90b6:	e9d4 2300 	ldrd	r2, r3, [r4]
    90ba:	1a80      	subs	r0, r0, r2
    90bc:	eb71 0003 	sbcs.w	r0, r1, r3
    90c0:	f0c0 80e5 	bcc.w	928e <MPSL_IRQ_RADIO_Handler+0x2a6>
    90c4:	a808      	add	r0, sp, #32
    90c6:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
    90ca:	900a      	str	r0, [sp, #40]	; 0x28
    90cc:	48be      	ldr	r0, [pc, #760]	; (93c8 <MPSL_IRQ_RADIO_Handler+0x3e0>)
    90ce:	eb08 0148 	add.w	r1, r8, r8, lsl #1
    90d2:	4408      	add	r0, r1
    90d4:	9009      	str	r0, [sp, #36]	; 0x24
    90d6:	f890 5030 	ldrb.w	r5, [r0, #48]	; 0x30
    90da:	2020      	movs	r0, #32
    90dc:	f10d 091c 	add.w	r9, sp, #28
    90e0:	f88d 001c 	strb.w	r0, [sp, #28]
    90e4:	2d20      	cmp	r5, #32
    90e6:	d036      	beq.n	9156 <MPSL_IRQ_RADIO_Handler+0x16e>
    90e8:	48b8      	ldr	r0, [pc, #736]	; (93cc <MPSL_IRQ_RADIO_Handler+0x3e4>)
    90ea:	2600      	movs	r6, #0
    90ec:	eb00 1a88 	add.w	sl, r0, r8, lsl #6
    90f0:	48b7      	ldr	r0, [pc, #732]	; (93d0 <MPSL_IRQ_RADIO_Handler+0x3e8>)
    90f2:	e9d4 7300 	ldrd	r7, r3, [r4]
    90f6:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    90fa:	f850 bf08 	ldr.w	fp, [r0, #8]!
    90fe:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    9102:	eb1b 0202 	adds.w	r2, fp, r2
    9106:	4171      	adcs	r1, r6
    9108:	1aba      	subs	r2, r7, r2
    910a:	eb73 0101 	sbcs.w	r1, r3, r1
    910e:	d322      	bcc.n	9156 <MPSL_IRQ_RADIO_Handler+0x16e>
    9110:	89e1      	ldrh	r1, [r4, #14]
    9112:	b1c9      	cbz	r1, 9148 <MPSL_IRQ_RADIO_Handler+0x160>
    9114:	89c0      	ldrh	r0, [r0, #14]
    9116:	b9b8      	cbnz	r0, 9148 <MPSL_IRQ_RADIO_Handler+0x160>
    9118:	f002 fc8e 	bl	ba38 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    911c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9120:	bf08      	it	eq
    9122:	200d      	moveq	r0, #13
    9124:	d00b      	beq.n	913e <MPSL_IRQ_RADIO_Handler+0x156>
    9126:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    912a:	3856      	subs	r0, #86	; 0x56
    912c:	bf08      	it	eq
    912e:	201c      	moveq	r0, #28
    9130:	d005      	beq.n	913e <MPSL_IRQ_RADIO_Handler+0x156>
    9132:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9136:	389f      	subs	r0, #159	; 0x9f
    9138:	bf14      	ite	ne
    913a:	4630      	movne	r0, r6
    913c:	2032      	moveq	r0, #50	; 0x32
    913e:	1c41      	adds	r1, r0, #1
    9140:	ebb7 000b 	subs.w	r0, r7, fp
    9144:	4288      	cmp	r0, r1
    9146:	db06      	blt.n	9156 <MPSL_IRQ_RADIO_Handler+0x16e>
    9148:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
    914c:	f889 5000 	strb.w	r5, [r9]
    9150:	7845      	ldrb	r5, [r0, #1]
    9152:	2d20      	cmp	r5, #32
    9154:	d1cc      	bne.n	90f0 <MPSL_IRQ_RADIO_Handler+0x108>
    9156:	980a      	ldr	r0, [sp, #40]	; 0x28
    9158:	f899 1000 	ldrb.w	r1, [r9]
    915c:	2d20      	cmp	r5, #32
    915e:	7001      	strb	r1, [r0, #0]
    9160:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    9162:	f000 812d 	beq.w	93c0 <MPSL_IRQ_RADIO_Handler+0x3d8>
    9166:	4899      	ldr	r0, [pc, #612]	; (93cc <MPSL_IRQ_RADIO_Handler+0x3e4>)
    9168:	2700      	movs	r7, #0
    916a:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    916e:	f8df 8260 	ldr.w	r8, [pc, #608]	; 93d0 <MPSL_IRQ_RADIO_Handler+0x3e8>
    9172:	9004      	str	r0, [sp, #16]
    9174:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    9178:	f8d4 b000 	ldr.w	fp, [r4]
    917c:	eb08 1945 	add.w	r9, r8, r5, lsl #5
    9180:	f109 0008 	add.w	r0, r9, #8
    9184:	eb1b 0201 	adds.w	r2, fp, r1
    9188:	eb43 0107 	adc.w	r1, r3, r7
    918c:	e9d0 a300 	ldrd	sl, r3, [r0]
    9190:	ebba 0202 	subs.w	r2, sl, r2
    9194:	eb73 0101 	sbcs.w	r1, r3, r1
    9198:	d320      	bcc.n	91dc <MPSL_IRQ_RADIO_Handler+0x1f4>
    919a:	89c0      	ldrh	r0, [r0, #14]
    919c:	2800      	cmp	r0, #0
    919e:	f000 810f 	beq.w	93c0 <MPSL_IRQ_RADIO_Handler+0x3d8>
    91a2:	89e0      	ldrh	r0, [r4, #14]
    91a4:	2800      	cmp	r0, #0
    91a6:	f040 810b 	bne.w	93c0 <MPSL_IRQ_RADIO_Handler+0x3d8>
    91aa:	f002 fc45 	bl	ba38 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    91ae:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    91b2:	bf08      	it	eq
    91b4:	200d      	moveq	r0, #13
    91b6:	d00b      	beq.n	91d0 <MPSL_IRQ_RADIO_Handler+0x1e8>
    91b8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    91bc:	3856      	subs	r0, #86	; 0x56
    91be:	bf08      	it	eq
    91c0:	201c      	moveq	r0, #28
    91c2:	d005      	beq.n	91d0 <MPSL_IRQ_RADIO_Handler+0x1e8>
    91c4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    91c8:	389f      	subs	r0, #159	; 0x9f
    91ca:	bf14      	ite	ne
    91cc:	4638      	movne	r0, r7
    91ce:	2032      	moveq	r0, #50	; 0x32
    91d0:	1c40      	adds	r0, r0, #1
    91d2:	ebba 010b 	subs.w	r1, sl, fp
    91d6:	4281      	cmp	r1, r0
    91d8:	f280 80f2 	bge.w	93c0 <MPSL_IRQ_RADIO_Handler+0x3d8>
    91dc:	7035      	strb	r5, [r6, #0]
    91de:	f899 0018 	ldrb.w	r0, [r9, #24]
    91e2:	7c21      	ldrb	r1, [r4, #16]
    91e4:	4281      	cmp	r1, r0
    91e6:	d207      	bcs.n	91f8 <MPSL_IRQ_RADIO_Handler+0x210>
    91e8:	9804      	ldr	r0, [sp, #16]
    91ea:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    91ee:	7845      	ldrb	r5, [r0, #1]
    91f0:	2d20      	cmp	r5, #32
    91f2:	d1bf      	bne.n	9174 <MPSL_IRQ_RADIO_Handler+0x18c>
    91f4:	f000 b8e4 	b.w	93c0 <MPSL_IRQ_RADIO_Handler+0x3d8>
    91f8:	f89d 0020 	ldrb.w	r0, [sp, #32]
    91fc:	eb08 1040 	add.w	r0, r8, r0, lsl #5
    9200:	e9d0 2103 	ldrd	r2, r1, [r0, #12]
    9204:	f8d0 9008 	ldr.w	r9, [r0, #8]
    9208:	8ac0      	ldrh	r0, [r0, #22]
    920a:	eb19 0501 	adds.w	r5, r9, r1
    920e:	eb42 0607 	adc.w	r6, r2, r7
    9212:	bbb0      	cbnz	r0, 9282 <MPSL_IRQ_RADIO_Handler+0x29a>
    9214:	89e0      	ldrh	r0, [r4, #14]
    9216:	b3a0      	cbz	r0, 9282 <MPSL_IRQ_RADIO_Handler+0x29a>
    9218:	f002 fc0e 	bl	ba38 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    921c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9220:	bf08      	it	eq
    9222:	200d      	moveq	r0, #13
    9224:	d00b      	beq.n	923e <MPSL_IRQ_RADIO_Handler+0x256>
    9226:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    922a:	3856      	subs	r0, #86	; 0x56
    922c:	bf08      	it	eq
    922e:	201c      	moveq	r0, #28
    9230:	d005      	beq.n	923e <MPSL_IRQ_RADIO_Handler+0x256>
    9232:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9236:	389f      	subs	r0, #159	; 0x9f
    9238:	bf14      	ite	ne
    923a:	4638      	movne	r0, r7
    923c:	2032      	moveq	r0, #50	; 0x32
    923e:	1c41      	adds	r1, r0, #1
    9240:	ebb5 0009 	subs.w	r0, r5, r9
    9244:	4288      	cmp	r0, r1
    9246:	da1c      	bge.n	9282 <MPSL_IRQ_RADIO_Handler+0x29a>
    9248:	f002 fbf6 	bl	ba38 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    924c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9250:	bf08      	it	eq
    9252:	200d      	moveq	r0, #13
    9254:	d00b      	beq.n	926e <MPSL_IRQ_RADIO_Handler+0x286>
    9256:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    925a:	3856      	subs	r0, #86	; 0x56
    925c:	bf08      	it	eq
    925e:	201c      	moveq	r0, #28
    9260:	d005      	beq.n	926e <MPSL_IRQ_RADIO_Handler+0x286>
    9262:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9266:	389f      	subs	r0, #159	; 0x9f
    9268:	bf14      	ite	ne
    926a:	4638      	movne	r0, r7
    926c:	2032      	moveq	r0, #50	; 0x32
    926e:	f89d 1020 	ldrb.w	r1, [sp, #32]
    9272:	1c40      	adds	r0, r0, #1
    9274:	eb08 1241 	add.w	r2, r8, r1, lsl #5
    9278:	e9d2 1302 	ldrd	r1, r3, [r2, #8]
    927c:	180d      	adds	r5, r1, r0
    927e:	eb43 0607 	adc.w	r6, r3, r7
    9282:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
    9286:	1b40      	subs	r0, r0, r5
    9288:	eb71 0006 	sbcs.w	r0, r1, r6
    928c:	d203      	bcs.n	9296 <MPSL_IRQ_RADIO_Handler+0x2ae>
    928e:	b00f      	add	sp, #60	; 0x3c
    9290:	2000      	movs	r0, #0
    9292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9296:	e9c4 5600 	strd	r5, r6, [r4]
    929a:	9818      	ldr	r0, [sp, #96]	; 0x60
    929c:	900b      	str	r0, [sp, #44]	; 0x2c
    929e:	a808      	add	r0, sp, #32
    92a0:	900a      	str	r0, [sp, #40]	; 0x28
    92a2:	9809      	ldr	r0, [sp, #36]	; 0x24
    92a4:	f10d 091c 	add.w	r9, sp, #28
    92a8:	f890 5030 	ldrb.w	r5, [r0, #48]	; 0x30
    92ac:	2020      	movs	r0, #32
    92ae:	f88d 001c 	strb.w	r0, [sp, #28]
    92b2:	2d20      	cmp	r5, #32
    92b4:	d03c      	beq.n	9330 <MPSL_IRQ_RADIO_Handler+0x348>
    92b6:	4845      	ldr	r0, [pc, #276]	; (93cc <MPSL_IRQ_RADIO_Handler+0x3e4>)
    92b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    92ba:	eb00 1a81 	add.w	sl, r0, r1, lsl #6
    92be:	bf00      	nop
    92c0:	eb08 1045 	add.w	r0, r8, r5, lsl #5
    92c4:	f100 0108 	add.w	r1, r0, #8
    92c8:	6902      	ldr	r2, [r0, #16]
    92ca:	e9d1 0c00 	ldrd	r0, ip, [r1]
    92ce:	46bb      	mov	fp, r7
    92d0:	1883      	adds	r3, r0, r2
    92d2:	eb4c 020b 	adc.w	r2, ip, fp
    92d6:	e9d4 6c00 	ldrd	r6, ip, [r4]
    92da:	1af3      	subs	r3, r6, r3
    92dc:	eb7c 0202 	sbcs.w	r2, ip, r2
    92e0:	d326      	bcc.n	9330 <MPSL_IRQ_RADIO_Handler+0x348>
    92e2:	89e2      	ldrh	r2, [r4, #14]
    92e4:	b1ea      	cbz	r2, 9322 <MPSL_IRQ_RADIO_Handler+0x33a>
    92e6:	89c9      	ldrh	r1, [r1, #14]
    92e8:	b9d9      	cbnz	r1, 9322 <MPSL_IRQ_RADIO_Handler+0x33a>
    92ea:	900c      	str	r0, [sp, #48]	; 0x30
    92ec:	f002 fba4 	bl	ba38 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    92f0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    92f4:	bf08      	it	eq
    92f6:	f04f 0b0d 	moveq.w	fp, #13
    92fa:	d00c      	beq.n	9316 <MPSL_IRQ_RADIO_Handler+0x32e>
    92fc:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9300:	3856      	subs	r0, #86	; 0x56
    9302:	bf08      	it	eq
    9304:	f04f 0b1c 	moveq.w	fp, #28
    9308:	d005      	beq.n	9316 <MPSL_IRQ_RADIO_Handler+0x32e>
    930a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    930e:	389f      	subs	r0, #159	; 0x9f
    9310:	bf08      	it	eq
    9312:	f04f 0b32 	moveq.w	fp, #50	; 0x32
    9316:	f10b 0001 	add.w	r0, fp, #1
    931a:	990c      	ldr	r1, [sp, #48]	; 0x30
    931c:	1a71      	subs	r1, r6, r1
    931e:	4281      	cmp	r1, r0
    9320:	db06      	blt.n	9330 <MPSL_IRQ_RADIO_Handler+0x348>
    9322:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
    9326:	f889 5000 	strb.w	r5, [r9]
    932a:	7845      	ldrb	r5, [r0, #1]
    932c:	2d20      	cmp	r5, #32
    932e:	d1c7      	bne.n	92c0 <MPSL_IRQ_RADIO_Handler+0x2d8>
    9330:	980a      	ldr	r0, [sp, #40]	; 0x28
    9332:	f899 1000 	ldrb.w	r1, [r9]
    9336:	2d20      	cmp	r5, #32
    9338:	7001      	strb	r1, [r0, #0]
    933a:	e9dd a00a 	ldrd	sl, r0, [sp, #40]	; 0x28
    933e:	d03f      	beq.n	93c0 <MPSL_IRQ_RADIO_Handler+0x3d8>
    9340:	4922      	ldr	r1, [pc, #136]	; (93cc <MPSL_IRQ_RADIO_Handler+0x3e4>)
    9342:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    9346:	9003      	str	r0, [sp, #12]
    9348:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    934c:	f8d4 b000 	ldr.w	fp, [r4]
    9350:	eb08 1645 	add.w	r6, r8, r5, lsl #5
    9354:	f106 0008 	add.w	r0, r6, #8
    9358:	eb1b 0201 	adds.w	r2, fp, r1
    935c:	eb43 0107 	adc.w	r1, r3, r7
    9360:	e9d0 9300 	ldrd	r9, r3, [r0]
    9364:	ebb9 0202 	subs.w	r2, r9, r2
    9368:	eb73 0101 	sbcs.w	r1, r3, r1
    936c:	d31b      	bcc.n	93a6 <MPSL_IRQ_RADIO_Handler+0x3be>
    936e:	89c0      	ldrh	r0, [r0, #14]
    9370:	b330      	cbz	r0, 93c0 <MPSL_IRQ_RADIO_Handler+0x3d8>
    9372:	89e0      	ldrh	r0, [r4, #14]
    9374:	bb20      	cbnz	r0, 93c0 <MPSL_IRQ_RADIO_Handler+0x3d8>
    9376:	f002 fb5f 	bl	ba38 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    937a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    937e:	bf08      	it	eq
    9380:	200d      	moveq	r0, #13
    9382:	d00b      	beq.n	939c <MPSL_IRQ_RADIO_Handler+0x3b4>
    9384:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9388:	3856      	subs	r0, #86	; 0x56
    938a:	bf08      	it	eq
    938c:	201c      	moveq	r0, #28
    938e:	d005      	beq.n	939c <MPSL_IRQ_RADIO_Handler+0x3b4>
    9390:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9394:	389f      	subs	r0, #159	; 0x9f
    9396:	bf14      	ite	ne
    9398:	4638      	movne	r0, r7
    939a:	2032      	moveq	r0, #50	; 0x32
    939c:	1c40      	adds	r0, r0, #1
    939e:	ebb9 010b 	subs.w	r1, r9, fp
    93a2:	4281      	cmp	r1, r0
    93a4:	da0c      	bge.n	93c0 <MPSL_IRQ_RADIO_Handler+0x3d8>
    93a6:	f88a 5000 	strb.w	r5, [sl]
    93aa:	7e30      	ldrb	r0, [r6, #24]
    93ac:	7c21      	ldrb	r1, [r4, #16]
    93ae:	4281      	cmp	r1, r0
    93b0:	f4bf af22 	bcs.w	91f8 <MPSL_IRQ_RADIO_Handler+0x210>
    93b4:	9803      	ldr	r0, [sp, #12]
    93b6:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    93ba:	7845      	ldrb	r5, [r0, #1]
    93bc:	2d20      	cmp	r5, #32
    93be:	d1c3      	bne.n	9348 <MPSL_IRQ_RADIO_Handler+0x360>
    93c0:	b00f      	add	sp, #60	; 0x3c
    93c2:	2001      	movs	r0, #1
    93c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    93c8:	20000ff8 	.word	0x20000ff8
    93cc:	20000f78 	.word	0x20000f78
    93d0:	20000b78 	.word	0x20000b78
    93d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    93d8:	b083      	sub	sp, #12
    93da:	4691      	mov	r9, r2
    93dc:	4604      	mov	r4, r0
    93de:	460d      	mov	r5, r1
    93e0:	4698      	mov	r8, r3
    93e2:	aa01      	add	r2, sp, #4
    93e4:	4669      	mov	r1, sp
    93e6:	4618      	mov	r0, r3
    93e8:	f002 f942 	bl	b670 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    93ec:	f002 f98c 	bl	b708 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    93f0:	f002 f922 	bl	b638 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    93f4:	4607      	mov	r7, r0
    93f6:	481e      	ldr	r0, [pc, #120]	; (9470 <MPSL_IRQ_RADIO_Handler+0x488>)
    93f8:	f890 104a 	ldrb.w	r1, [r0, #74]	; 0x4a
    93fc:	2600      	movs	r6, #0
    93fe:	2920      	cmp	r1, #32
    9400:	d009      	beq.n	9416 <MPSL_IRQ_RADIO_Handler+0x42e>
    9402:	6902      	ldr	r2, [r0, #16]
    9404:	6941      	ldr	r1, [r0, #20]
    9406:	6980      	ldr	r0, [r0, #24]
    9408:	1d83      	adds	r3, r0, #6
    940a:	f146 0000 	adc.w	r0, r6, #0
    940e:	18d4      	adds	r4, r2, r3
    9410:	eb41 0500 	adc.w	r5, r1, r0
    9414:	e026      	b.n	9464 <MPSL_IRQ_RADIO_Handler+0x47c>
    9416:	340a      	adds	r4, #10
    9418:	f145 0500 	adc.w	r5, r5, #0
    941c:	f1b8 0f00 	cmp.w	r8, #0
    9420:	d017      	beq.n	9452 <MPSL_IRQ_RADIO_Handler+0x46a>
    9422:	f002 fc61 	bl	bce8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9426:	b9a0      	cbnz	r0, 9452 <MPSL_IRQ_RADIO_Handler+0x46a>
    9428:	f002 fb06 	bl	ba38 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    942c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9430:	bf08      	it	eq
    9432:	200d      	moveq	r0, #13
    9434:	d00b      	beq.n	944e <MPSL_IRQ_RADIO_Handler+0x466>
    9436:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    943a:	3856      	subs	r0, #86	; 0x56
    943c:	bf08      	it	eq
    943e:	201c      	moveq	r0, #28
    9440:	d005      	beq.n	944e <MPSL_IRQ_RADIO_Handler+0x466>
    9442:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9446:	389f      	subs	r0, #159	; 0x9f
    9448:	bf14      	ite	ne
    944a:	4630      	movne	r0, r6
    944c:	2032      	moveq	r0, #50	; 0x32
    944e:	1904      	adds	r4, r0, r4
    9450:	4175      	adcs	r5, r6
    9452:	f1b9 0f00 	cmp.w	r9, #0
    9456:	d105      	bne.n	9464 <MPSL_IRQ_RADIO_Handler+0x47c>
    9458:	9800      	ldr	r0, [sp, #0]
    945a:	4287      	cmp	r7, r0
    945c:	d902      	bls.n	9464 <MPSL_IRQ_RADIO_Handler+0x47c>
    945e:	1a38      	subs	r0, r7, r0
    9460:	1904      	adds	r4, r0, r4
    9462:	4175      	adcs	r5, r6
    9464:	b003      	add	sp, #12
    9466:	4620      	mov	r0, r4
    9468:	4629      	mov	r1, r5
    946a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    946e:	0000      	.short	0x0000
    9470:	20000ff8 	.word	0x20000ff8
    9474:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9478:	b081      	sub	sp, #4
    947a:	4605      	mov	r5, r0
    947c:	9802      	ldr	r0, [sp, #8]
    947e:	494a      	ldr	r1, [pc, #296]	; (95a8 <MPSL_IRQ_RADIO_Handler+0x5c0>)
    9480:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    9484:	4408      	add	r0, r1
    9486:	2600      	movs	r6, #0
    9488:	f890 4030 	ldrb.w	r4, [r0, #48]	; 0x30
    948c:	2020      	movs	r0, #32
    948e:	4692      	mov	sl, r2
    9490:	7010      	strb	r0, [r2, #0]
    9492:	f5a1 6990 	sub.w	r9, r1, #1152	; 0x480
    9496:	2c20      	cmp	r4, #32
    9498:	d036      	beq.n	9508 <MPSL_IRQ_RADIO_Handler+0x520>
    949a:	9902      	ldr	r1, [sp, #8]
    949c:	f509 6080 	add.w	r0, r9, #1024	; 0x400
    94a0:	eb00 1b81 	add.w	fp, r0, r1, lsl #6
    94a4:	eb09 1044 	add.w	r0, r9, r4, lsl #5
    94a8:	e9d5 7300 	ldrd	r7, r3, [r5]
    94ac:	f850 8f08 	ldr.w	r8, [r0, #8]!
    94b0:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
    94b4:	eb18 0202 	adds.w	r2, r8, r2
    94b8:	4171      	adcs	r1, r6
    94ba:	1aba      	subs	r2, r7, r2
    94bc:	eb73 0101 	sbcs.w	r1, r3, r1
    94c0:	d322      	bcc.n	9508 <MPSL_IRQ_RADIO_Handler+0x520>
    94c2:	89e9      	ldrh	r1, [r5, #14]
    94c4:	b1c9      	cbz	r1, 94fa <MPSL_IRQ_RADIO_Handler+0x512>
    94c6:	89c0      	ldrh	r0, [r0, #14]
    94c8:	b9b8      	cbnz	r0, 94fa <MPSL_IRQ_RADIO_Handler+0x512>
    94ca:	f002 fab5 	bl	ba38 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    94ce:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    94d2:	bf08      	it	eq
    94d4:	200d      	moveq	r0, #13
    94d6:	d00b      	beq.n	94f0 <MPSL_IRQ_RADIO_Handler+0x508>
    94d8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    94dc:	3856      	subs	r0, #86	; 0x56
    94de:	bf08      	it	eq
    94e0:	201c      	moveq	r0, #28
    94e2:	d005      	beq.n	94f0 <MPSL_IRQ_RADIO_Handler+0x508>
    94e4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    94e8:	389f      	subs	r0, #159	; 0x9f
    94ea:	bf14      	ite	ne
    94ec:	4630      	movne	r0, r6
    94ee:	2032      	moveq	r0, #50	; 0x32
    94f0:	1c41      	adds	r1, r0, #1
    94f2:	ebb7 0008 	subs.w	r0, r7, r8
    94f6:	4288      	cmp	r0, r1
    94f8:	db06      	blt.n	9508 <MPSL_IRQ_RADIO_Handler+0x520>
    94fa:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    94fe:	f88a 4000 	strb.w	r4, [sl]
    9502:	7844      	ldrb	r4, [r0, #1]
    9504:	2c20      	cmp	r4, #32
    9506:	d1cd      	bne.n	94a4 <MPSL_IRQ_RADIO_Handler+0x4bc>
    9508:	9804      	ldr	r0, [sp, #16]
    950a:	f89a 1000 	ldrb.w	r1, [sl]
    950e:	2c20      	cmp	r4, #32
    9510:	7001      	strb	r1, [r0, #0]
    9512:	9f04      	ldr	r7, [sp, #16]
    9514:	9802      	ldr	r0, [sp, #8]
    9516:	d042      	beq.n	959e <MPSL_IRQ_RADIO_Handler+0x5b6>
    9518:	4924      	ldr	r1, [pc, #144]	; (95ac <MPSL_IRQ_RADIO_Handler+0x5c4>)
    951a:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    951e:	9000      	str	r0, [sp, #0]
    9520:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
    9524:	f8d5 b000 	ldr.w	fp, [r5]
    9528:	eb09 1844 	add.w	r8, r9, r4, lsl #5
    952c:	f108 0008 	add.w	r0, r8, #8
    9530:	eb1b 0201 	adds.w	r2, fp, r1
    9534:	eb43 0106 	adc.w	r1, r3, r6
    9538:	e9d0 a300 	ldrd	sl, r3, [r0]
    953c:	ebba 0202 	subs.w	r2, sl, r2
    9540:	eb73 0101 	sbcs.w	r1, r3, r1
    9544:	d31b      	bcc.n	957e <MPSL_IRQ_RADIO_Handler+0x596>
    9546:	89c0      	ldrh	r0, [r0, #14]
    9548:	b348      	cbz	r0, 959e <MPSL_IRQ_RADIO_Handler+0x5b6>
    954a:	89e8      	ldrh	r0, [r5, #14]
    954c:	bb38      	cbnz	r0, 959e <MPSL_IRQ_RADIO_Handler+0x5b6>
    954e:	f002 fa73 	bl	ba38 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9552:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9556:	bf08      	it	eq
    9558:	200d      	moveq	r0, #13
    955a:	d00b      	beq.n	9574 <MPSL_IRQ_RADIO_Handler+0x58c>
    955c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9560:	3856      	subs	r0, #86	; 0x56
    9562:	bf08      	it	eq
    9564:	201c      	moveq	r0, #28
    9566:	d005      	beq.n	9574 <MPSL_IRQ_RADIO_Handler+0x58c>
    9568:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    956c:	389f      	subs	r0, #159	; 0x9f
    956e:	bf14      	ite	ne
    9570:	4630      	movne	r0, r6
    9572:	2032      	moveq	r0, #50	; 0x32
    9574:	1c41      	adds	r1, r0, #1
    9576:	ebba 000b 	subs.w	r0, sl, fp
    957a:	4288      	cmp	r0, r1
    957c:	da0f      	bge.n	959e <MPSL_IRQ_RADIO_Handler+0x5b6>
    957e:	703c      	strb	r4, [r7, #0]
    9580:	f898 1018 	ldrb.w	r1, [r8, #24]
    9584:	7c28      	ldrb	r0, [r5, #16]
    9586:	4288      	cmp	r0, r1
    9588:	d303      	bcc.n	9592 <MPSL_IRQ_RADIO_Handler+0x5aa>
    958a:	b005      	add	sp, #20
    958c:	2000      	movs	r0, #0
    958e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9592:	9800      	ldr	r0, [sp, #0]
    9594:	eb00 0044 	add.w	r0, r0, r4, lsl #1
    9598:	7844      	ldrb	r4, [r0, #1]
    959a:	2c20      	cmp	r4, #32
    959c:	d1c0      	bne.n	9520 <MPSL_IRQ_RADIO_Handler+0x538>
    959e:	b005      	add	sp, #20
    95a0:	2001      	movs	r0, #1
    95a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    95a6:	0000      	.short	0x0000
    95a8:	20000ff8 	.word	0x20000ff8
    95ac:	20000f78 	.word	0x20000f78
    95b0:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    95b4:	b09e      	sub	sp, #120	; 0x78
    95b6:	461d      	mov	r5, r3
    95b8:	f002 fe20 	bl	c1fc <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    95bc:	4604      	mov	r4, r0
    95be:	468a      	mov	sl, r1
    95c0:	f002 f8a2 	bl	b708 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    95c4:	4607      	mov	r7, r0
    95c6:	9820      	ldr	r0, [sp, #128]	; 0x80
    95c8:	2801      	cmp	r0, #1
    95ca:	bf18      	it	ne
    95cc:	2802      	cmpne	r0, #2
    95ce:	d005      	beq.n	95dc <MPSL_IRQ_RADIO_Handler+0x5f4>
    95d0:	f640 116b 	movw	r1, #2411	; 0x96b
    95d4:	f04f 0070 	mov.w	r0, #112	; 0x70
    95d8:	f003 f8a6 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    95dc:	49fe      	ldr	r1, [pc, #1016]	; (99d8 <MPSL_IRQ_RADIO_Handler+0x9f0>)
    95de:	2001      	movs	r0, #1
    95e0:	6008      	str	r0, [r1, #0]
    95e2:	49fe      	ldr	r1, [pc, #1016]	; (99dc <MPSL_IRQ_RADIO_Handler+0x9f4>)
    95e4:	6889      	ldr	r1, [r1, #8]
    95e6:	6008      	str	r0, [r1, #0]
    95e8:	2000      	movs	r0, #0
    95ea:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    95ee:	9004      	str	r0, [sp, #16]
    95f0:	1e40      	subs	r0, r0, #1
    95f2:	e9cd 0006 	strd	r0, r0, [sp, #24]
    95f6:	48fa      	ldr	r0, [pc, #1000]	; (99e0 <MPSL_IRQ_RADIO_Handler+0x9f8>)
    95f8:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    95fc:	f100 0108 	add.w	r1, r0, #8
    9600:	e9d0 5006 	ldrd	r5, r0, [r0, #24]
    9604:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    9608:	e9cd 500c 	strd	r5, r0, [sp, #48]	; 0x30
    960c:	a808      	add	r0, sp, #32
    960e:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    9612:	f021 407f 	bic.w	r0, r1, #4278190080	; 0xff000000
    9616:	f007 f9b3 	bl	10980 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    961a:	4602      	mov	r2, r0
    961c:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
    9620:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    9624:	4bef      	ldr	r3, [pc, #956]	; (99e4 <MPSL_IRQ_RADIO_Handler+0x9fc>)
    9626:	4430      	add	r0, r6
    9628:	1c41      	adds	r1, r0, #1
    962a:	1850      	adds	r0, r2, r1
    962c:	429a      	cmp	r2, r3
    962e:	d855      	bhi.n	96dc <MPSL_IRQ_RADIO_Handler+0x6f4>
    9630:	f8df b3b4 	ldr.w	fp, [pc, #948]	; 99e8 <MPSL_IRQ_RADIO_Handler+0xa00>
    9634:	4559      	cmp	r1, fp
    9636:	dc58      	bgt.n	96ea <MPSL_IRQ_RADIO_Handler+0x702>
    9638:	f1cb 0200 	rsb	r2, fp, #0
    963c:	4291      	cmp	r1, r2
    963e:	db5c      	blt.n	96fa <MPSL_IRQ_RADIO_Handler+0x712>
    9640:	1c59      	adds	r1, r3, #1
    9642:	4281      	cmp	r1, r0
    9644:	bfdc      	itt	le
    9646:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    964a:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    964e:	dd05      	ble.n	965c <MPSL_IRQ_RADIO_Handler+0x674>
    9650:	2800      	cmp	r0, #0
    9652:	bfbc      	itt	lt
    9654:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    9658:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    965c:	9019      	str	r0, [sp, #100]	; 0x64
    965e:	48e3      	ldr	r0, [pc, #908]	; (99ec <MPSL_IRQ_RADIO_Handler+0xa04>)
    9660:	2e00      	cmp	r6, #0
    9662:	f8b0 00a8 	ldrh.w	r0, [r0, #168]	; 0xa8
    9666:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
    966a:	bf14      	ite	ne
    966c:	2001      	movne	r0, #1
    966e:	2000      	moveq	r0, #0
    9670:	9014      	str	r0, [sp, #80]	; 0x50
    9672:	f002 fb39 	bl	bce8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    9676:	901b      	str	r0, [sp, #108]	; 0x6c
    9678:	9814      	ldr	r0, [sp, #80]	; 0x50
    967a:	b158      	cbz	r0, 9694 <MPSL_IRQ_RADIO_Handler+0x6ac>
    967c:	49dc      	ldr	r1, [pc, #880]	; (99f0 <MPSL_IRQ_RADIO_Handler+0xa08>)
    967e:	e9d1 0110 	ldrd	r0, r1, [r1, #64]	; 0x40
    9682:	43c0      	mvns	r0, r0
    9684:	ea70 0001 	orns	r0, r0, r1
    9688:	bf02      	ittt	eq
    968a:	981b      	ldreq	r0, [sp, #108]	; 0x6c
    968c:	2800      	cmpeq	r0, #0
    968e:	f04f 0901 	moveq.w	r9, #1
    9692:	d001      	beq.n	9698 <MPSL_IRQ_RADIO_Handler+0x6b0>
    9694:	f04f 0900 	mov.w	r9, #0
    9698:	f002 f9ce 	bl	ba38 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    969c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    96a0:	bf08      	it	eq
    96a2:	200d      	moveq	r0, #13
    96a4:	d00b      	beq.n	96be <MPSL_IRQ_RADIO_Handler+0x6d6>
    96a6:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    96aa:	3856      	subs	r0, #86	; 0x56
    96ac:	bf08      	it	eq
    96ae:	201c      	moveq	r0, #28
    96b0:	d005      	beq.n	96be <MPSL_IRQ_RADIO_Handler+0x6d6>
    96b2:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    96b6:	389f      	subs	r0, #159	; 0x9f
    96b8:	bf14      	ite	ne
    96ba:	2000      	movne	r0, #0
    96bc:	2032      	moveq	r0, #50	; 0x32
    96be:	2500      	movs	r5, #0
    96c0:	46a8      	mov	r8, r5
    96c2:	9017      	str	r0, [sp, #92]	; 0x5c
    96c4:	42b7      	cmp	r7, r6
    96c6:	d936      	bls.n	9736 <MPSL_IRQ_RADIO_Handler+0x74e>
    96c8:	9919      	ldr	r1, [sp, #100]	; 0x64
    96ca:	4dc6      	ldr	r5, [pc, #792]	; (99e4 <MPSL_IRQ_RADIO_Handler+0x9fc>)
    96cc:	ea6f 0c07 	mvn.w	ip, r7
    96d0:	ab11      	add	r3, sp, #68	; 0x44
    96d2:	aa1c      	add	r2, sp, #112	; 0x70
    96d4:	eb01 000c 	add.w	r0, r1, ip
    96d8:	42a9      	cmp	r1, r5
    96da:	d904      	bls.n	96e6 <MPSL_IRQ_RADIO_Handler+0x6fe>
    96dc:	f240 518c 	movw	r1, #1420	; 0x58c
    96e0:	2070      	movs	r0, #112	; 0x70
    96e2:	f003 f821 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    96e6:	45dc      	cmp	ip, fp
    96e8:	dd04      	ble.n	96f4 <MPSL_IRQ_RADIO_Handler+0x70c>
    96ea:	f240 518d 	movw	r1, #1421	; 0x58d
    96ee:	2070      	movs	r0, #112	; 0x70
    96f0:	f003 f81a 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    96f4:	49bf      	ldr	r1, [pc, #764]	; (99f4 <MPSL_IRQ_RADIO_Handler+0xa0c>)
    96f6:	458c      	cmp	ip, r1
    96f8:	da04      	bge.n	9704 <MPSL_IRQ_RADIO_Handler+0x71c>
    96fa:	f240 518e 	movw	r1, #1422	; 0x58e
    96fe:	2070      	movs	r0, #112	; 0x70
    9700:	f003 f812 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9704:	49bc      	ldr	r1, [pc, #752]	; (99f8 <MPSL_IRQ_RADIO_Handler+0xa10>)
    9706:	4281      	cmp	r1, r0
    9708:	bfdc      	itt	le
    970a:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    970e:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    9712:	dd05      	ble.n	9720 <MPSL_IRQ_RADIO_Handler+0x738>
    9714:	2800      	cmp	r0, #0
    9716:	bfbc      	itt	lt
    9718:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    971c:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    9720:	4619      	mov	r1, r3
    9722:	f001 ffa5 	bl	b670 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9726:	9811      	ldr	r0, [sp, #68]	; 0x44
    9728:	9908      	ldr	r1, [sp, #32]
    972a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    972e:	9011      	str	r0, [sp, #68]	; 0x44
    9730:	1a08      	subs	r0, r1, r0
    9732:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    9736:	f1b9 0f00 	cmp.w	r9, #0
    973a:	bf18      	it	ne
    973c:	f8dd 805c 	ldrne.w	r8, [sp, #92]	; 0x5c
    9740:	d105      	bne.n	974e <MPSL_IRQ_RADIO_Handler+0x766>
    9742:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    9746:	2800      	cmp	r0, #0
    9748:	bf18      	it	ne
    974a:	f04f 0802 	movne.w	r8, #2
    974e:	43e0      	mvns	r0, r4
    9750:	ea70 000a 	orns	r0, r0, sl
    9754:	d022      	beq.n	979c <MPSL_IRQ_RADIO_Handler+0x7b4>
    9756:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    975a:	1a22      	subs	r2, r4, r0
    975c:	eb7a 0201 	sbcs.w	r2, sl, r1
    9760:	d20c      	bcs.n	977c <MPSL_IRQ_RADIO_Handler+0x794>
    9762:	1b02      	subs	r2, r0, r4
    9764:	eb61 010a 	sbc.w	r1, r1, sl
    9768:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    976c:	f171 0100 	sbcs.w	r1, r1, #0
    9770:	d311      	bcc.n	9796 <MPSL_IRQ_RADIO_Handler+0x7ae>
    9772:	f640 11aa 	movw	r1, #2474	; 0x9aa
    9776:	2070      	movs	r0, #112	; 0x70
    9778:	f002 ffd6 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    977c:	1a22      	subs	r2, r4, r0
    977e:	eb6a 0101 	sbc.w	r1, sl, r1
    9782:	f5b2 0200 	subs.w	r2, r2, #8388608	; 0x800000
    9786:	f171 0100 	sbcs.w	r1, r1, #0
    978a:	d304      	bcc.n	9796 <MPSL_IRQ_RADIO_Handler+0x7ae>
    978c:	f640 11ae 	movw	r1, #2478	; 0x9ae
    9790:	2070      	movs	r0, #112	; 0x70
    9792:	f002 ffc9 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9796:	1b00      	subs	r0, r0, r4
    9798:	2801      	cmp	r0, #1
    979a:	da03      	bge.n	97a4 <MPSL_IRQ_RADIO_Handler+0x7bc>
    979c:	2003      	movs	r0, #3
    979e:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
    97a2:	e00f      	b.n	97c4 <MPSL_IRQ_RADIO_Handler+0x7dc>
    97a4:	f1b9 0f00 	cmp.w	r9, #0
    97a8:	d00a      	beq.n	97c0 <MPSL_IRQ_RADIO_Handler+0x7d8>
    97aa:	4891      	ldr	r0, [pc, #580]	; (99f0 <MPSL_IRQ_RADIO_Handler+0xa08>)
    97ac:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    97b0:	b130      	cbz	r0, 97c0 <MPSL_IRQ_RADIO_Handler+0x7d8>
    97b2:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    97b6:	f110 0800 	adds.w	r8, r0, #0
    97ba:	bf18      	it	ne
    97bc:	f04f 0802 	movne.w	r8, #2
    97c0:	46a3      	mov	fp, r4
    97c2:	2000      	movs	r0, #0
    97c4:	4480      	add	r8, r0
    97c6:	e9dd 0208 	ldrd	r0, r2, [sp, #32]
    97ca:	1b40      	subs	r0, r0, r5
    97cc:	f162 0100 	sbc.w	r1, r2, #0
    97d0:	1e42      	subs	r2, r0, #1
    97d2:	f141 33ff 	adc.w	r3, r1, #4294967295
    97d6:	ebb2 0c0b 	subs.w	ip, r2, fp
    97da:	45c4      	cmp	ip, r8
    97dc:	db08      	blt.n	97f0 <MPSL_IRQ_RADIO_Handler+0x808>
    97de:	b3a5      	cbz	r5, 984a <MPSL_IRQ_RADIO_Handler+0x862>
    97e0:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    97e4:	e9cd 0108 	strd	r0, r1, [sp, #32]
    97e8:	44ac      	add	ip, r5
    97ea:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    97ee:	e02c      	b.n	984a <MPSL_IRQ_RADIO_Handler+0x862>
    97f0:	b12d      	cbz	r5, 97fe <MPSL_IRQ_RADIO_Handler+0x816>
    97f2:	f89d 0039 	ldrb.w	r0, [sp, #57]	; 0x39
    97f6:	b930      	cbnz	r0, 9806 <MPSL_IRQ_RADIO_Handler+0x81e>
    97f8:	f001 ff7c 	bl	b6f4 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    97fc:	b118      	cbz	r0, 9806 <MPSL_IRQ_RADIO_Handler+0x81e>
    97fe:	f1b9 0f00 	cmp.w	r9, #0
    9802:	d116      	bne.n	9832 <MPSL_IRQ_RADIO_Handler+0x84a>
    9804:	e00d      	b.n	9822 <MPSL_IRQ_RADIO_Handler+0x83a>
    9806:	f1b9 0f00 	cmp.w	r9, #0
    980a:	d105      	bne.n	9818 <MPSL_IRQ_RADIO_Handler+0x830>
    980c:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    9810:	2800      	cmp	r0, #0
    9812:	bf18      	it	ne
    9814:	f1a8 0802 	subne.w	r8, r8, #2
    9818:	2500      	movs	r5, #0
    981a:	f88d 5038 	strb.w	r5, [sp, #56]	; 0x38
    981e:	462f      	mov	r7, r5
    9820:	e007      	b.n	9832 <MPSL_IRQ_RADIO_Handler+0x84a>
    9822:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    9826:	b120      	cbz	r0, 9832 <MPSL_IRQ_RADIO_Handler+0x84a>
    9828:	2000      	movs	r0, #0
    982a:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    982e:	f1a8 0802 	sub.w	r8, r8, #2
    9832:	e9dd 0208 	ldrd	r0, r2, [sp, #32]
    9836:	1b40      	subs	r0, r0, r5
    9838:	f162 0100 	sbc.w	r1, r2, #0
    983c:	1e42      	subs	r2, r0, #1
    983e:	f141 33ff 	adc.w	r3, r1, #4294967295
    9842:	ebb2 0c0b 	subs.w	ip, r2, fp
    9846:	45c4      	cmp	ip, r8
    9848:	db6f      	blt.n	992a <MPSL_IRQ_RADIO_Handler+0x942>
    984a:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
    984e:	f1bc 0f00 	cmp.w	ip, #0
    9852:	d113      	bne.n	987c <MPSL_IRQ_RADIO_Handler+0x894>
    9854:	4d66      	ldr	r5, [pc, #408]	; (99f0 <MPSL_IRQ_RADIO_Handler+0xa08>)
    9856:	e9d5 c510 	ldrd	ip, r5, [r5, #64]	; 0x40
    985a:	ea6f 080c 	mvn.w	r8, ip
    985e:	ea78 0805 	orns	r8, r8, r5
    9862:	d00b      	beq.n	987c <MPSL_IRQ_RADIO_Handler+0x894>
    9864:	ebb0 0c0c 	subs.w	ip, r0, ip
    9868:	9817      	ldr	r0, [sp, #92]	; 0x5c
    986a:	eb61 0505 	sbc.w	r5, r1, r5
    986e:	ebbc 0000 	subs.w	r0, ip, r0
    9872:	f175 0000 	sbcs.w	r0, r5, #0
    9876:	bf38      	it	cc
    9878:	2000      	movcc	r0, #0
    987a:	d300      	bcc.n	987e <MPSL_IRQ_RADIO_Handler+0x896>
    987c:	2001      	movs	r0, #1
    987e:	9914      	ldr	r1, [sp, #80]	; 0x50
    9880:	ea31 0000 	bics.w	r0, r1, r0
    9884:	d151      	bne.n	992a <MPSL_IRQ_RADIO_Handler+0x942>
    9886:	e9dd b01e 	ldrd	fp, r0, [sp, #120]	; 0x78
    988a:	9011      	str	r0, [sp, #68]	; 0x44
    988c:	9820      	ldr	r0, [sp, #128]	; 0x80
    988e:	4615      	mov	r5, r2
    9890:	e9cd 901a 	strd	r9, r0, [sp, #104]	; 0x68
    9894:	4698      	mov	r8, r3
    9896:	9118      	str	r1, [sp, #96]	; 0x60
    9898:	f04f 0900 	mov.w	r9, #0
    989c:	f002 f8cc 	bl	ba38 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    98a0:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    98a4:	bf08      	it	eq
    98a6:	200d      	moveq	r0, #13
    98a8:	d00b      	beq.n	98c2 <MPSL_IRQ_RADIO_Handler+0x8da>
    98aa:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    98ae:	3856      	subs	r0, #86	; 0x56
    98b0:	bf08      	it	eq
    98b2:	201c      	moveq	r0, #28
    98b4:	d005      	beq.n	98c2 <MPSL_IRQ_RADIO_Handler+0x8da>
    98b6:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    98ba:	389f      	subs	r0, #159	; 0x9f
    98bc:	bf14      	ite	ne
    98be:	4648      	movne	r0, r9
    98c0:	2032      	moveq	r0, #50	; 0x32
    98c2:	300b      	adds	r0, #11
    98c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
    98c6:	ebb5 030b 	subs.w	r3, r5, fp
    98ca:	eb68 0202 	sbc.w	r2, r8, r2
    98ce:	1a18      	subs	r0, r3, r0
    98d0:	f172 0000 	sbcs.w	r0, r2, #0
    98d4:	d22a      	bcs.n	992c <MPSL_IRQ_RADIO_Handler+0x944>
    98d6:	981b      	ldr	r0, [sp, #108]	; 0x6c
    98d8:	2801      	cmp	r0, #1
    98da:	d002      	beq.n	98e2 <MPSL_IRQ_RADIO_Handler+0x8fa>
    98dc:	981a      	ldr	r0, [sp, #104]	; 0x68
    98de:	b148      	cbz	r0, 98f4 <MPSL_IRQ_RADIO_Handler+0x90c>
    98e0:	e016      	b.n	9910 <MPSL_IRQ_RADIO_Handler+0x928>
    98e2:	43e1      	mvns	r1, r4
    98e4:	ea71 000a 	orns	r0, r1, sl
    98e8:	d128      	bne.n	993c <MPSL_IRQ_RADIO_Handler+0x954>
    98ea:	f640 01ec 	movw	r1, #2284	; 0x8ec
    98ee:	2070      	movs	r0, #112	; 0x70
    98f0:	f002 ff1a 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    98f4:	43e0      	mvns	r0, r4
    98f6:	ea70 000a 	orns	r0, r0, sl
    98fa:	d009      	beq.n	9910 <MPSL_IRQ_RADIO_Handler+0x928>
    98fc:	d01e      	beq.n	993c <MPSL_IRQ_RADIO_Handler+0x954>
    98fe:	1b60      	subs	r0, r4, r5
    9900:	eb6a 0108 	sbc.w	r1, sl, r8
    9904:	2300      	movs	r3, #0
    9906:	f1d0 0204 	rsbs	r2, r0, #4
    990a:	eb73 0201 	sbcs.w	r2, r3, r1
    990e:	da06      	bge.n	991e <MPSL_IRQ_RADIO_Handler+0x936>
    9910:	462c      	mov	r4, r5
    9912:	46c2      	mov	sl, r8
    9914:	4620      	mov	r0, r4
    9916:	4651      	mov	r1, sl
    9918:	f002 fb6a 	bl	bff0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    991c:	e00e      	b.n	993c <MPSL_IRQ_RADIO_Handler+0x954>
    991e:	2200      	movs	r2, #0
    9920:	1a10      	subs	r0, r2, r0
    9922:	eb72 0001 	sbcs.w	r0, r2, r1
    9926:	db00      	blt.n	992a <MPSL_IRQ_RADIO_Handler+0x942>
    9928:	e008      	b.n	993c <MPSL_IRQ_RADIO_Handler+0x954>
    992a:	e080      	b.n	9a2e <MPSL_IRQ_RADIO_Handler+0xa46>
    992c:	462c      	mov	r4, r5
    992e:	46c2      	mov	sl, r8
    9930:	4620      	mov	r0, r4
    9932:	4651      	mov	r1, sl
    9934:	f002 fb5c 	bl	bff0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    9938:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
    993c:	43e1      	mvns	r1, r4
    993e:	ea71 000a 	orns	r0, r1, sl
    9942:	d06f      	beq.n	9a24 <MPSL_IRQ_RADIO_Handler+0xa3c>
    9944:	9908      	ldr	r1, [sp, #32]
    9946:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    994a:	1a0b      	subs	r3, r1, r0
    994c:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    9950:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    9954:	eb11 010c 	adds.w	r1, r1, ip
    9958:	1a08      	subs	r0, r1, r0
    995a:	f04f 0b00 	mov.w	fp, #0
    995e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9962:	2b01      	cmp	r3, #1
    9964:	d363      	bcc.n	9a2e <MPSL_IRQ_RADIO_Handler+0xa46>
    9966:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    996a:	bf98      	it	ls
    996c:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    9970:	d85d      	bhi.n	9a2e <MPSL_IRQ_RADIO_Handler+0xa46>
    9972:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    9976:	f007 f803 	bl	10980 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    997a:	9919      	ldr	r1, [sp, #100]	; 0x64
    997c:	4a1a      	ldr	r2, [pc, #104]	; (99e8 <MPSL_IRQ_RADIO_Handler+0xa00>)
    997e:	1a0d      	subs	r5, r1, r0
    9980:	1aaa      	subs	r2, r5, r2
    9982:	f17b 0200 	sbcs.w	r2, fp, #0
    9986:	d316      	bcc.n	99b6 <MPSL_IRQ_RADIO_Handler+0x9ce>
    9988:	4b17      	ldr	r3, [pc, #92]	; (99e8 <MPSL_IRQ_RADIO_Handler+0xa00>)
    998a:	1a42      	subs	r2, r0, r1
    998c:	1ad3      	subs	r3, r2, r3
    998e:	f17b 0300 	sbcs.w	r3, fp, #0
    9992:	d310      	bcc.n	99b6 <MPSL_IRQ_RADIO_Handler+0x9ce>
    9994:	4b13      	ldr	r3, [pc, #76]	; (99e4 <MPSL_IRQ_RADIO_Handler+0x9fc>)
    9996:	42ab      	cmp	r3, r5
    9998:	bf3e      	ittt	cc
    999a:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    999e:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    99a2:	1845      	addcc	r5, r0, r1
    99a4:	d307      	bcc.n	99b6 <MPSL_IRQ_RADIO_Handler+0x9ce>
    99a6:	4293      	cmp	r3, r2
    99a8:	d245      	bcs.n	9a36 <MPSL_IRQ_RADIO_Handler+0xa4e>
    99aa:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    99ae:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    99b2:	4408      	add	r0, r1
    99b4:	4245      	negs	r5, r0
    99b6:	f8df 8038 	ldr.w	r8, [pc, #56]	; 99f0 <MPSL_IRQ_RADIO_Handler+0xa08>
    99ba:	f898 002a 	ldrb.w	r0, [r8, #42]	; 0x2a
    99be:	b378      	cbz	r0, 9a20 <MPSL_IRQ_RADIO_Handler+0xa38>
    99c0:	9820      	ldr	r0, [sp, #128]	; 0x80
    99c2:	2801      	cmp	r0, #1
    99c4:	d005      	beq.n	99d2 <MPSL_IRQ_RADIO_Handler+0x9ea>
    99c6:	2002      	movs	r0, #2
    99c8:	f002 fd64 	bl	c494 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    99cc:	2001      	movs	r0, #1
    99ce:	f002 fd61 	bl	c494 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    99d2:	42be      	cmp	r6, r7
    99d4:	d240      	bcs.n	9a58 <MPSL_IRQ_RADIO_Handler+0xa70>
    99d6:	e011      	b.n	99fc <MPSL_IRQ_RADIO_Handler+0xa14>
    99d8:	40000508 	.word	0x40000508
    99dc:	20000320 	.word	0x20000320
    99e0:	20000b78 	.word	0x20000b78
    99e4:	1e847fff 	.word	0x1e847fff
    99e8:	0f424000 	.word	0x0f424000
    99ec:	20000f78 	.word	0x20000f78
    99f0:	20000ff8 	.word	0x20000ff8
    99f4:	f0bdc000 	.word	0xf0bdc000
    99f8:	1e848000 	.word	0x1e848000
    99fc:	eba5 0207 	sub.w	r2, r5, r7
    9a00:	f04f 0701 	mov.w	r7, #1
    9a04:	f04f 0300 	mov.w	r3, #0
    9a08:	f04f 0002 	mov.w	r0, #2
    9a0c:	9700      	str	r7, [sp, #0]
    9a0e:	f002 fc91 	bl	c334 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9a12:	b398      	cbz	r0, 9a7c <MPSL_IRQ_RADIO_Handler+0xa94>
    9a14:	b38e      	cbz	r6, 9a7a <MPSL_IRQ_RADIO_Handler+0xa92>
    9a16:	1baa      	subs	r2, r5, r6
    9a18:	2300      	movs	r3, #0
    9a1a:	2001      	movs	r0, #1
    9a1c:	9700      	str	r7, [sp, #0]
    9a1e:	e029      	b.n	9a74 <MPSL_IRQ_RADIO_Handler+0xa8c>
    9a20:	e00e      	b.n	9a40 <MPSL_IRQ_RADIO_Handler+0xa58>
    9a22:	e7ff      	b.n	9a24 <MPSL_IRQ_RADIO_Handler+0xa3c>
    9a24:	f640 2118 	movw	r1, #2584	; 0xa18
    9a28:	2070      	movs	r0, #112	; 0x70
    9a2a:	f002 fe7d 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9a2e:	b022      	add	sp, #136	; 0x88
    9a30:	2000      	movs	r0, #0
    9a32:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9a36:	f640 21fb 	movw	r1, #2811	; 0xafb
    9a3a:	2070      	movs	r0, #112	; 0x70
    9a3c:	f002 fe74 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9a40:	42be      	cmp	r6, r7
    9a42:	bf34      	ite	cc
    9a44:	4638      	movcc	r0, r7
    9a46:	4630      	movcs	r0, r6
    9a48:	301e      	adds	r0, #30
    9a4a:	42a8      	cmp	r0, r5
    9a4c:	dbb8      	blt.n	99c0 <MPSL_IRQ_RADIO_Handler+0x9d8>
    9a4e:	f640 212c 	movw	r1, #2604	; 0xa2c
    9a52:	2070      	movs	r0, #112	; 0x70
    9a54:	f002 fe68 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9a58:	d911      	bls.n	9a7e <MPSL_IRQ_RADIO_Handler+0xa96>
    9a5a:	2001      	movs	r0, #1
    9a5c:	1baa      	subs	r2, r5, r6
    9a5e:	2300      	movs	r3, #0
    9a60:	9000      	str	r0, [sp, #0]
    9a62:	f002 fc67 	bl	c334 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9a66:	b148      	cbz	r0, 9a7c <MPSL_IRQ_RADIO_Handler+0xa94>
    9a68:	b13f      	cbz	r7, 9a7a <MPSL_IRQ_RADIO_Handler+0xa92>
    9a6a:	2001      	movs	r0, #1
    9a6c:	9000      	str	r0, [sp, #0]
    9a6e:	1bea      	subs	r2, r5, r7
    9a70:	2300      	movs	r3, #0
    9a72:	2002      	movs	r0, #2
    9a74:	f002 fc5e 	bl	c334 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9a78:	b100      	cbz	r0, 9a7c <MPSL_IRQ_RADIO_Handler+0xa94>
    9a7a:	e008      	b.n	9a8e <MPSL_IRQ_RADIO_Handler+0xaa6>
    9a7c:	e03a      	b.n	9af4 <MPSL_IRQ_RADIO_Handler+0xb0c>
    9a7e:	ea57 0006 	orrs.w	r0, r7, r6
    9a82:	d004      	beq.n	9a8e <MPSL_IRQ_RADIO_Handler+0xaa6>
    9a84:	f640 114f 	movw	r1, #2383	; 0x94f
    9a88:	2070      	movs	r0, #112	; 0x70
    9a8a:	f002 fe4d 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9a8e:	2701      	movs	r7, #1
    9a90:	2300      	movs	r3, #0
    9a92:	462a      	mov	r2, r5
    9a94:	4618      	mov	r0, r3
    9a96:	9700      	str	r7, [sp, #0]
    9a98:	f002 fc4c 	bl	c334 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9a9c:	b350      	cbz	r0, 9af4 <MPSL_IRQ_RADIO_Handler+0xb0c>
    9a9e:	9814      	ldr	r0, [sp, #80]	; 0x50
    9aa0:	2800      	cmp	r0, #0
    9aa2:	bf04      	itt	eq
    9aa4:	f898 0048 	ldrbeq.w	r0, [r8, #72]	; 0x48
    9aa8:	2800      	cmpeq	r0, #0
    9aaa:	d002      	beq.n	9ab2 <MPSL_IRQ_RADIO_Handler+0xaca>
    9aac:	f1b9 0f00 	cmp.w	r9, #0
    9ab0:	d02a      	beq.n	9b08 <MPSL_IRQ_RADIO_Handler+0xb20>
    9ab2:	e9d8 1010 	ldrd	r1, r0, [r8, #64]	; 0x40
    9ab6:	43c9      	mvns	r1, r1
    9ab8:	ea71 0000 	orns	r0, r1, r0
    9abc:	d006      	beq.n	9acc <MPSL_IRQ_RADIO_Handler+0xae4>
    9abe:	f001 ffc1 	bl	ba44 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    9ac2:	f04f 30ff 	mov.w	r0, #4294967295
    9ac6:	4601      	mov	r1, r0
    9ac8:	e9c8 0110 	strd	r0, r1, [r8, #64]	; 0x40
    9acc:	f1b9 0f00 	cmp.w	r9, #0
    9ad0:	d020      	beq.n	9b14 <MPSL_IRQ_RADIO_Handler+0xb2c>
    9ad2:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9ad4:	f8cd b000 	str.w	fp, [sp]
    9ad8:	1a22      	subs	r2, r4, r0
    9ada:	eb6a 030b 	sbc.w	r3, sl, fp
    9ade:	2005      	movs	r0, #5
    9ae0:	f002 fc28 	bl	c334 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9ae4:	b368      	cbz	r0, 9b42 <MPSL_IRQ_RADIO_Handler+0xb5a>
    9ae6:	f898 0048 	ldrb.w	r0, [r8, #72]	; 0x48
    9aea:	2800      	cmp	r0, #0
    9aec:	bf08      	it	eq
    9aee:	f888 7048 	strbeq.w	r7, [r8, #72]	; 0x48
    9af2:	e017      	b.n	9b24 <MPSL_IRQ_RADIO_Handler+0xb3c>
    9af4:	2002      	movs	r0, #2
    9af6:	f002 fccd 	bl	c494 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9afa:	2001      	movs	r0, #1
    9afc:	f002 fcca 	bl	c494 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9b00:	b022      	add	sp, #136	; 0x88
    9b02:	2000      	movs	r0, #0
    9b04:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9b08:	e9d8 1010 	ldrd	r1, r0, [r8, #64]	; 0x40
    9b0c:	43c9      	mvns	r1, r1
    9b0e:	ea71 0000 	orns	r0, r1, r0
    9b12:	d011      	beq.n	9b38 <MPSL_IRQ_RADIO_Handler+0xb50>
    9b14:	f898 0048 	ldrb.w	r0, [r8, #72]	; 0x48
    9b18:	b120      	cbz	r0, 9b24 <MPSL_IRQ_RADIO_Handler+0xb3c>
    9b1a:	2005      	movs	r0, #5
    9b1c:	f002 fcba 	bl	c494 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9b20:	f888 b048 	strb.w	fp, [r8, #72]	; 0x48
    9b24:	1ba8      	subs	r0, r5, r6
    9b26:	f1a0 0219 	sub.w	r2, r0, #25
    9b2a:	2a00      	cmp	r2, #0
    9b2c:	dc0e      	bgt.n	9b4c <MPSL_IRQ_RADIO_Handler+0xb64>
    9b2e:	f640 2155 	movw	r1, #2645	; 0xa55
    9b32:	2070      	movs	r0, #112	; 0x70
    9b34:	f002 fdf8 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9b38:	f001 ffa0 	bl	ba7c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    9b3c:	f002 fbd8 	bl	c2f0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    9b40:	e7c2      	b.n	9ac8 <MPSL_IRQ_RADIO_Handler+0xae0>
    9b42:	f240 21ea 	movw	r1, #746	; 0x2ea
    9b46:	2070      	movs	r0, #112	; 0x70
    9b48:	f002 fdee 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9b4c:	2300      	movs	r3, #0
    9b4e:	2003      	movs	r0, #3
    9b50:	9700      	str	r7, [sp, #0]
    9b52:	f002 fbef 	bl	c334 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9b56:	b130      	cbz	r0, 9b66 <MPSL_IRQ_RADIO_Handler+0xb7e>
    9b58:	4815      	ldr	r0, [pc, #84]	; (9bb0 <MPSL_IRQ_RADIO_Handler+0xbc8>)
    9b5a:	6880      	ldr	r0, [r0, #8]
    9b5c:	f8c0 b000 	str.w	fp, [r0]
    9b60:	4814      	ldr	r0, [pc, #80]	; (9bb4 <MPSL_IRQ_RADIO_Handler+0xbcc>)
    9b62:	f8c0 b000 	str.w	fp, [r0]
    9b66:	f10d 0810 	add.w	r8, sp, #16
    9b6a:	4813      	ldr	r0, [pc, #76]	; (9bb8 <MPSL_IRQ_RADIO_Handler+0xbd0>)
    9b6c:	e898 10fe 	ldmia.w	r8, {r1, r2, r3, r4, r5, r6, r7, ip}
    9b70:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    9b74:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    9b78:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    9b7c:	f8c0 408c 	str.w	r4, [r0, #140]	; 0x8c
    9b80:	f8c0 5090 	str.w	r5, [r0, #144]	; 0x90
    9b84:	f8c0 6094 	str.w	r6, [r0, #148]	; 0x94
    9b88:	f8c0 7098 	str.w	r7, [r0, #152]	; 0x98
    9b8c:	f8c0 c09c 	str.w	ip, [r0, #156]	; 0x9c
    9b90:	ac0c      	add	r4, sp, #48	; 0x30
    9b92:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    9b96:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    9b9a:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
    9b9e:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
    9ba2:	f8c0 c0ac 	str.w	ip, [r0, #172]	; 0xac
    9ba6:	b022      	add	sp, #136	; 0x88
    9ba8:	2001      	movs	r0, #1
    9baa:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9bae:	0000      	.short	0x0000
    9bb0:	20000320 	.word	0x20000320
    9bb4:	40000508 	.word	0x40000508
    9bb8:	20000f78 	.word	0x20000f78
    9bbc:	b570      	push	{r4, r5, r6, lr}
    9bbe:	4d1d      	ldr	r5, [pc, #116]	; (9c34 <MPSL_IRQ_RADIO_Handler+0xc4c>)
    9bc0:	f895 004a 	ldrb.w	r0, [r5, #74]	; 0x4a
    9bc4:	2820      	cmp	r0, #32
    9bc6:	bf18      	it	ne
    9bc8:	bd70      	popne	{r4, r5, r6, pc}
    9bca:	f895 2049 	ldrb.w	r2, [r5, #73]	; 0x49
    9bce:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    9bd2:	4428      	add	r0, r5
    9bd4:	f890 4030 	ldrb.w	r4, [r0, #48]	; 0x30
    9bd8:	2c20      	cmp	r4, #32
    9bda:	d026      	beq.n	9c2a <MPSL_IRQ_RADIO_Handler+0xc42>
    9bdc:	4b16      	ldr	r3, [pc, #88]	; (9c38 <MPSL_IRQ_RADIO_Handler+0xc50>)
    9bde:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    9be2:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    9be6:	7849      	ldrb	r1, [r1, #1]
    9be8:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
    9bec:	20ff      	movs	r0, #255	; 0xff
    9bee:	f885 0039 	strb.w	r0, [r5, #57]	; 0x39
    9bf2:	f885 404a 	strb.w	r4, [r5, #74]	; 0x4a
    9bf6:	4621      	mov	r1, r4
    9bf8:	2002      	movs	r0, #2
    9bfa:	f000 f88b 	bl	9d14 <MPSL_IRQ_RADIO_Handler+0xd2c>
    9bfe:	2000      	movs	r0, #0
    9c00:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
    9c04:	f885 002a 	strb.w	r0, [r5, #42]	; 0x2a
    9c08:	480c      	ldr	r0, [pc, #48]	; (9c3c <MPSL_IRQ_RADIO_Handler+0xc54>)
    9c0a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    9c0e:	7e00      	ldrb	r0, [r0, #24]
    9c10:	2800      	cmp	r0, #0
    9c12:	bf08      	it	eq
    9c14:	f002 fef2 	bleq	c9fc <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    9c18:	2000      	movs	r0, #0
    9c1a:	4909      	ldr	r1, [pc, #36]	; (9c40 <MPSL_IRQ_RADIO_Handler+0xc58>)
    9c1c:	6849      	ldr	r1, [r1, #4]
    9c1e:	2900      	cmp	r1, #0
    9c20:	bf08      	it	eq
    9c22:	bd70      	popeq	{r4, r5, r6, pc}
    9c24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9c28:	4708      	bx	r1
    9c2a:	f240 3121 	movw	r1, #801	; 0x321
    9c2e:	2070      	movs	r0, #112	; 0x70
    9c30:	f002 fd7a 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9c34:	20000ff8 	.word	0x20000ff8
    9c38:	20000f78 	.word	0x20000f78
    9c3c:	20000b78 	.word	0x20000b78
    9c40:	20000320 	.word	0x20000320
    9c44:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9c48:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 9d04 <MPSL_IRQ_RADIO_Handler+0xd1c>
    9c4c:	f898 5049 	ldrb.w	r5, [r8, #73]	; 0x49
    9c50:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9c54:	4440      	add	r0, r8
    9c56:	f890 4031 	ldrb.w	r4, [r0, #49]	; 0x31
    9c5a:	2c20      	cmp	r4, #32
    9c5c:	bf08      	it	eq
    9c5e:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9c62:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 9d08 <MPSL_IRQ_RADIO_Handler+0xd20>
    9c66:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 9d0c <MPSL_IRQ_RADIO_Handler+0xd24>
    9c6a:	f5a9 6a80 	sub.w	sl, r9, #1024	; 0x400
    9c6e:	eb09 1785 	add.w	r7, r9, r5, lsl #6
    9c72:	2607      	movs	r6, #7
    9c74:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    9c78:	2801      	cmp	r0, #1
    9c7a:	d00e      	beq.n	9c9a <MPSL_IRQ_RADIO_Handler+0xcb2>
    9c7c:	2804      	cmp	r0, #4
    9c7e:	bf08      	it	eq
    9c80:	2602      	moveq	r6, #2
    9c82:	d00a      	beq.n	9c9a <MPSL_IRQ_RADIO_Handler+0xcb2>
    9c84:	2805      	cmp	r0, #5
    9c86:	bf0c      	ite	eq
    9c88:	2603      	moveq	r6, #3
    9c8a:	2806      	cmpne	r0, #6
    9c8c:	d005      	beq.n	9c9a <MPSL_IRQ_RADIO_Handler+0xcb2>
    9c8e:	f640 01b5 	movw	r1, #2229	; 0x8b5
    9c92:	f04f 0070 	mov.w	r0, #112	; 0x70
    9c96:	f002 fd47 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9c9a:	f1bb 0f00 	cmp.w	fp, #0
    9c9e:	bf18      	it	ne
    9ca0:	f3af 8000 	nopne.w
    9ca4:	f3ef 8010 	mrs	r0, PRIMASK
    9ca8:	b672      	cpsid	i
    9caa:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    9cae:	784a      	ldrb	r2, [r1, #1]
    9cb0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    9cb4:	4441      	add	r1, r8
    9cb6:	f881 2031 	strb.w	r2, [r1, #49]	; 0x31
    9cba:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
    9cbe:	42a2      	cmp	r2, r4
    9cc0:	bf04      	itt	eq
    9cc2:	2220      	moveq	r2, #32
    9cc4:	f881 2032 	strbeq.w	r2, [r1, #50]	; 0x32
    9cc8:	b1a8      	cbz	r0, 9cf6 <MPSL_IRQ_RADIO_Handler+0xd0e>
    9cca:	462a      	mov	r2, r5
    9ccc:	4621      	mov	r1, r4
    9cce:	2001      	movs	r0, #1
    9cd0:	f000 f820 	bl	9d14 <MPSL_IRQ_RADIO_Handler+0xd2c>
    9cd4:	eb0a 1144 	add.w	r1, sl, r4, lsl #5
    9cd8:	e9d1 2000 	ldrd	r2, r0, [r1]
    9cdc:	4631      	mov	r1, r6
    9cde:	4790      	blx	r2
    9ce0:	f898 5049 	ldrb.w	r5, [r8, #73]	; 0x49
    9ce4:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9ce8:	4440      	add	r0, r8
    9cea:	f890 4031 	ldrb.w	r4, [r0, #49]	; 0x31
    9cee:	2c20      	cmp	r4, #32
    9cf0:	d1bd      	bne.n	9c6e <MPSL_IRQ_RADIO_Handler+0xc86>
    9cf2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9cf6:	4806      	ldr	r0, [pc, #24]	; (9d10 <MPSL_IRQ_RADIO_Handler+0xd28>)
    9cf8:	2800      	cmp	r0, #0
    9cfa:	bf18      	it	ne
    9cfc:	f3af 8000 	nopne.w
    9d00:	b662      	cpsie	i
    9d02:	e7e2      	b.n	9cca <MPSL_IRQ_RADIO_Handler+0xce2>
    9d04:	20000ff8 	.word	0x20000ff8
    9d08:	00000000 	.word	0x00000000
    9d0c:	20000f78 	.word	0x20000f78
    9d10:	00000000 	.word	0x00000000
    9d14:	f8df c058 	ldr.w	ip, [pc, #88]	; 9d70 <MPSL_IRQ_RADIO_Handler+0xd88>
    9d18:	b510      	push	{r4, lr}
    9d1a:	2300      	movs	r3, #0
    9d1c:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    9d20:	2807      	cmp	r0, #7
    9d22:	d21f      	bcs.n	9d64 <MPSL_IRQ_RADIO_Handler+0xd7c>
    9d24:	e8df f000 	tbb	[pc, r0]
    9d28:	05050505 	.word	0x05050505
    9d2c:	00040404 	.word	0x00040404
    9d30:	2301      	movs	r3, #1
    9d32:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    9d36:	2b00      	cmp	r3, #0
    9d38:	bf08      	it	eq
    9d3a:	bd10      	popeq	{r4, pc}
    9d3c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    9d40:	480c      	ldr	r0, [pc, #48]	; (9d74 <MPSL_IRQ_RADIO_Handler+0xd8c>)
    9d42:	4402      	add	r2, r0
    9d44:	f892 0032 	ldrb.w	r0, [r2, #50]	; 0x32
    9d48:	2820      	cmp	r0, #32
    9d4a:	bf0e      	itee	eq
    9d4c:	f882 1031 	strbeq.w	r1, [r2, #49]	; 0x31
    9d50:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    9d54:	7041      	strbne	r1, [r0, #1]
    9d56:	2020      	movs	r0, #32
    9d58:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    9d5c:	7058      	strb	r0, [r3, #1]
    9d5e:	f882 1032 	strb.w	r1, [r2, #50]	; 0x32
    9d62:	bd10      	pop	{r4, pc}
    9d64:	f240 215e 	movw	r1, #606	; 0x25e
    9d68:	2070      	movs	r0, #112	; 0x70
    9d6a:	f002 fcdd 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9d6e:	0000      	.short	0x0000
    9d70:	20000f78 	.word	0x20000f78
    9d74:	20000ff8 	.word	0x20000ff8
    9d78:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9d7c:	460f      	mov	r7, r1
    9d7e:	4680      	mov	r8, r0
    9d80:	f8df b154 	ldr.w	fp, [pc, #340]	; 9ed8 <MPSL_IRQ_RADIO_Handler+0xef0>
    9d84:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    9d88:	4458      	add	r0, fp
    9d8a:	f1b8 0f01 	cmp.w	r8, #1
    9d8e:	f890 4030 	ldrb.w	r4, [r0, #48]	; 0x30
    9d92:	4625      	mov	r5, r4
    9d94:	bf18      	it	ne
    9d96:	f1b8 0f02 	cmpne.w	r8, #2
    9d9a:	d005      	beq.n	9da8 <MPSL_IRQ_RADIO_Handler+0xdc0>
    9d9c:	f640 2193 	movw	r1, #2707	; 0xa93
    9da0:	f04f 0070 	mov.w	r0, #112	; 0x70
    9da4:	f002 fcc0 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9da8:	2d20      	cmp	r5, #32
    9daa:	d041      	beq.n	9e30 <MPSL_IRQ_RADIO_Handler+0xe48>
    9dac:	f89b 002a 	ldrb.w	r0, [fp, #42]	; 0x2a
    9db0:	2600      	movs	r6, #0
    9db2:	2800      	cmp	r0, #0
    9db4:	bf08      	it	eq
    9db6:	2602      	moveq	r6, #2
    9db8:	f002 f914 	bl	bfe4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9dbc:	f8df 911c 	ldr.w	r9, [pc, #284]	; 9edc <MPSL_IRQ_RADIO_Handler+0xef4>
    9dc0:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    9dc4:	6899      	ldr	r1, [r3, #8]
    9dc6:	691b      	ldr	r3, [r3, #16]
    9dc8:	1a0a      	subs	r2, r1, r0
    9dca:	18c9      	adds	r1, r1, r3
    9dcc:	1a09      	subs	r1, r1, r0
    9dce:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9dd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9dd6:	4296      	cmp	r6, r2
    9dd8:	bf99      	ittee	ls
    9dda:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    9dde:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9de2:	4a3f      	ldrhi	r2, [pc, #252]	; (9ee0 <MPSL_IRQ_RADIO_Handler+0xef8>)
    9de4:	eb02 1a87 	addhi.w	sl, r2, r7, lsl #6
    9de8:	d920      	bls.n	9e2c <MPSL_IRQ_RADIO_Handler+0xe44>
    9dea:	4622      	mov	r2, r4
    9dec:	eb0a 0142 	add.w	r1, sl, r2, lsl #1
    9df0:	784c      	ldrb	r4, [r1, #1]
    9df2:	2c20      	cmp	r4, #32
    9df4:	d012      	beq.n	9e1c <MPSL_IRQ_RADIO_Handler+0xe34>
    9df6:	eb09 1344 	add.w	r3, r9, r4, lsl #5
    9dfa:	6899      	ldr	r1, [r3, #8]
    9dfc:	691b      	ldr	r3, [r3, #16]
    9dfe:	ebb1 0c00 	subs.w	ip, r1, r0
    9e02:	18c9      	adds	r1, r1, r3
    9e04:	1a09      	subs	r1, r1, r0
    9e06:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    9e0a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9e0e:	4566      	cmp	r6, ip
    9e10:	bf9c      	itt	ls
    9e12:	f5bc 0f00 	cmpls.w	ip, #8388608	; 0x800000
    9e16:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9e1a:	d8e6      	bhi.n	9dea <MPSL_IRQ_RADIO_Handler+0xe02>
    9e1c:	2a20      	cmp	r2, #32
    9e1e:	d005      	beq.n	9e2c <MPSL_IRQ_RADIO_Handler+0xe44>
    9e20:	463b      	mov	r3, r7
    9e22:	2120      	movs	r1, #32
    9e24:	2004      	movs	r0, #4
    9e26:	f7ff f8fd 	bl	9024 <MPSL_IRQ_RADIO_Handler+0x3c>
    9e2a:	4604      	mov	r4, r0
    9e2c:	42ac      	cmp	r4, r5
    9e2e:	d113      	bne.n	9e58 <MPSL_IRQ_RADIO_Handler+0xe70>
    9e30:	482c      	ldr	r0, [pc, #176]	; (9ee4 <MPSL_IRQ_RADIO_Handler+0xefc>)
    9e32:	2800      	cmp	r0, #0
    9e34:	bf18      	it	ne
    9e36:	f3af 8000 	nopne.w
    9e3a:	f002 fa59 	bl	c2f0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    9e3e:	f89b 204b 	ldrb.w	r2, [fp, #75]	; 0x4b
    9e42:	2a20      	cmp	r2, #32
    9e44:	d00b      	beq.n	9e5e <MPSL_IRQ_RADIO_Handler+0xe76>
    9e46:	e9db 3204 	ldrd	r3, r2, [fp, #16]
    9e4a:	1c84      	adds	r4, r0, #2
    9e4c:	f141 0c00 	adc.w	ip, r1, #0
    9e50:	1b1b      	subs	r3, r3, r4
    9e52:	eb72 020c 	sbcs.w	r2, r2, ip
    9e56:	d202      	bcs.n	9e5e <MPSL_IRQ_RADIO_Handler+0xe76>
    9e58:	2000      	movs	r0, #0
    9e5a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9e5e:	2d20      	cmp	r5, #32
    9e60:	d013      	beq.n	9e8a <MPSL_IRQ_RADIO_Handler+0xea2>
    9e62:	462b      	mov	r3, r5
    9e64:	4642      	mov	r2, r8
    9e66:	f7ff fba3 	bl	95b0 <MPSL_IRQ_RADIO_Handler+0x5c8>
    9e6a:	2800      	cmp	r0, #0
    9e6c:	bf1e      	ittt	ne
    9e6e:	f88b 504b 	strbne.w	r5, [fp, #75]	; 0x4b
    9e72:	2002      	movne	r0, #2
    9e74:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9e78:	463b      	mov	r3, r7
    9e7a:	462a      	mov	r2, r5
    9e7c:	2120      	movs	r1, #32
    9e7e:	2004      	movs	r0, #4
    9e80:	f7ff f8d0 	bl	9024 <MPSL_IRQ_RADIO_Handler+0x3c>
    9e84:	2000      	movs	r0, #0
    9e86:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9e8a:	e9db 0110 	ldrd	r0, r1, [fp, #64]	; 0x40
    9e8e:	43c0      	mvns	r0, r0
    9e90:	ea70 0001 	orns	r0, r0, r1
    9e94:	d005      	beq.n	9ea2 <MPSL_IRQ_RADIO_Handler+0xeba>
    9e96:	f001 fdd5 	bl	ba44 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    9e9a:	f04f 30ff 	mov.w	r0, #4294967295
    9e9e:	e9cb 0010 	strd	r0, r0, [fp, #64]	; 0x40
    9ea2:	f89b 0048 	ldrb.w	r0, [fp, #72]	; 0x48
    9ea6:	b128      	cbz	r0, 9eb4 <MPSL_IRQ_RADIO_Handler+0xecc>
    9ea8:	2005      	movs	r0, #5
    9eaa:	f002 faf3 	bl	c494 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9eae:	2000      	movs	r0, #0
    9eb0:	f88b 0048 	strb.w	r0, [fp, #72]	; 0x48
    9eb4:	2004      	movs	r0, #4
    9eb6:	f002 faed 	bl	c494 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9eba:	f002 fb53 	bl	c564 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    9ebe:	490a      	ldr	r1, [pc, #40]	; (9ee8 <MPSL_IRQ_RADIO_Handler+0xf00>)
    9ec0:	2020      	movs	r0, #32
    9ec2:	f88b 004b 	strb.w	r0, [fp, #75]	; 0x4b
    9ec6:	6889      	ldr	r1, [r1, #8]
    9ec8:	2000      	movs	r0, #0
    9eca:	6008      	str	r0, [r1, #0]
    9ecc:	4907      	ldr	r1, [pc, #28]	; (9eec <MPSL_IRQ_RADIO_Handler+0xf04>)
    9ece:	6008      	str	r0, [r1, #0]
    9ed0:	2001      	movs	r0, #1
    9ed2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9ed6:	0000      	.short	0x0000
    9ed8:	20000ff8 	.word	0x20000ff8
    9edc:	20000b78 	.word	0x20000b78
    9ee0:	20000f78 	.word	0x20000f78
    9ee4:	00000000 	.word	0x00000000
    9ee8:	20000320 	.word	0x20000320
    9eec:	40000508 	.word	0x40000508

00009ef0 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    9ef0:	4906      	ldr	r1, [pc, #24]	; (9f0c <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    9ef2:	b510      	push	{r4, lr}
    9ef4:	f891 204a 	ldrb.w	r2, [r1, #74]	; 0x4a
    9ef8:	2a20      	cmp	r2, #32
    9efa:	bf1c      	itt	ne
    9efc:	f881 002a 	strbne.w	r0, [r1, #42]	; 0x2a
    9f00:	bd10      	popne	{r4, pc}
    9f02:	f240 317b 	movw	r1, #891	; 0x37b
    9f06:	2070      	movs	r0, #112	; 0x70
    9f08:	f002 fc0e 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9f0c:	20000ff8 	.word	0x20000ff8

00009f10 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    9f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9f14:	f8df b1d4 	ldr.w	fp, [pc, #468]	; a0ec <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1dc>
    9f18:	4606      	mov	r6, r0
    9f1a:	b08f      	sub	sp, #60	; 0x3c
    9f1c:	f89b 004a 	ldrb.w	r0, [fp, #74]	; 0x4a
    9f20:	468a      	mov	sl, r1
    9f22:	2820      	cmp	r0, #32
    9f24:	d060      	beq.n	9fe8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd8>
    9f26:	f89b 104a 	ldrb.w	r1, [fp, #74]	; 0x4a
    9f2a:	f10b 0410 	add.w	r4, fp, #16
    9f2e:	f5ab 6890 	sub.w	r8, fp, #1152	; 0x480
    9f32:	eb08 1941 	add.w	r9, r8, r1, lsl #5
    9f36:	2120      	movs	r1, #32
    9f38:	f88d 1018 	strb.w	r1, [sp, #24]
    9f3c:	f89b 1049 	ldrb.w	r1, [fp, #73]	; 0x49
    9f40:	f8db 2010 	ldr.w	r2, [fp, #16]
    9f44:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    9f48:	4459      	add	r1, fp
    9f4a:	2700      	movs	r7, #0
    9f4c:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
    9f50:	f8db 1018 	ldr.w	r1, [fp, #24]
    9f54:	1851      	adds	r1, r2, r1
    9f56:	910a      	str	r1, [sp, #40]	; 0x28
    9f58:	f8db 0000 	ldr.w	r0, [fp]
    9f5c:	aa09      	add	r2, sp, #36	; 0x24
    9f5e:	4430      	add	r0, r6
    9f60:	a907      	add	r1, sp, #28
    9f62:	f001 fb85 	bl	b670 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9f66:	f8d9 2010 	ldr.w	r2, [r9, #16]
    9f6a:	9907      	ldr	r1, [sp, #28]
    9f6c:	f8d9 0008 	ldr.w	r0, [r9, #8]
    9f70:	1851      	adds	r1, r2, r1
    9f72:	1840      	adds	r0, r0, r1
    9f74:	2e68      	cmp	r6, #104	; 0x68
    9f76:	d33c      	bcc.n	9ff2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe2>
    9f78:	495d      	ldr	r1, [pc, #372]	; (a0f0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1e0>)
    9f7a:	2200      	movs	r2, #0
    9f7c:	1b89      	subs	r1, r1, r6
    9f7e:	eb72 0107 	sbcs.w	r1, r2, r7
    9f82:	d336      	bcc.n	9ff2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe2>
    9f84:	6821      	ldr	r1, [r4, #0]
    9f86:	1a40      	subs	r0, r0, r1
    9f88:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9f8c:	f5d1 0100 	rsbs	r1, r1, #8388608	; 0x800000
    9f90:	eb72 0102 	sbcs.w	r1, r2, r2
    9f94:	d32d      	bcc.n	9ff2 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xe2>
    9f96:	60a0      	str	r0, [r4, #8]
    9f98:	f508 6090 	add.w	r0, r8, #1152	; 0x480
    9f9c:	f884 a010 	strb.w	sl, [r4, #16]
    9fa0:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
    9fa4:	f10d 0b18 	add.w	fp, sp, #24
    9fa8:	2d20      	cmp	r5, #32
    9faa:	d055      	beq.n	a058 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x148>
    9fac:	f508 6180 	add.w	r1, r8, #1024	; 0x400
    9fb0:	eb01 1080 	add.w	r0, r1, r0, lsl #6
    9fb4:	9001      	str	r0, [sp, #4]
    9fb6:	484f      	ldr	r0, [pc, #316]	; (a0f4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1e4>)
    9fb8:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    9fbc:	f8d4 a000 	ldr.w	sl, [r4]
    9fc0:	eb00 1845 	add.w	r8, r0, r5, lsl #5
    9fc4:	f108 0008 	add.w	r0, r8, #8
    9fc8:	eb1a 0201 	adds.w	r2, sl, r1
    9fcc:	eb43 0107 	adc.w	r1, r3, r7
    9fd0:	e9d0 9300 	ldrd	r9, r3, [r0]
    9fd4:	ebb9 0202 	subs.w	r2, r9, r2
    9fd8:	eb73 0101 	sbcs.w	r1, r3, r1
    9fdc:	d325      	bcc.n	a02a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x11a>
    9fde:	89c0      	ldrh	r0, [r0, #14]
    9fe0:	b398      	cbz	r0, a04a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13a>
    9fe2:	89e0      	ldrh	r0, [r4, #14]
    9fe4:	b148      	cbz	r0, 9ffa <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xea>
    9fe6:	e037      	b.n	a058 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x148>
    9fe8:	f640 3138 	movw	r1, #2872	; 0xb38
    9fec:	2070      	movs	r0, #112	; 0x70
    9fee:	f002 fb9b 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9ff2:	b00f      	add	sp, #60	; 0x3c
    9ff4:	2001      	movs	r0, #1
    9ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ffa:	f001 fd1d 	bl	ba38 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9ffe:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    a002:	bf08      	it	eq
    a004:	200d      	moveq	r0, #13
    a006:	d00b      	beq.n	a020 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x110>
    a008:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    a00c:	3856      	subs	r0, #86	; 0x56
    a00e:	bf08      	it	eq
    a010:	201c      	moveq	r0, #28
    a012:	d005      	beq.n	a020 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x110>
    a014:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    a018:	389f      	subs	r0, #159	; 0x9f
    a01a:	bf14      	ite	ne
    a01c:	4638      	movne	r0, r7
    a01e:	2032      	moveq	r0, #50	; 0x32
    a020:	1c41      	adds	r1, r0, #1
    a022:	ebb9 000a 	subs.w	r0, r9, sl
    a026:	4288      	cmp	r0, r1
    a028:	da16      	bge.n	a058 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x148>
    a02a:	f88b 5000 	strb.w	r5, [fp]
    a02e:	f898 0018 	ldrb.w	r0, [r8, #24]
    a032:	7c21      	ldrb	r1, [r4, #16]
    a034:	4281      	cmp	r1, r0
    a036:	d309      	bcc.n	a04c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x13c>
    a038:	6821      	ldr	r1, [r4, #0]
    a03a:	980a      	ldr	r0, [sp, #40]	; 0x28
    a03c:	1a40      	subs	r0, r0, r1
    a03e:	60a0      	str	r0, [r4, #8]
    a040:	b00f      	add	sp, #60	; 0x3c
    a042:	f04f 0002 	mov.w	r0, #2
    a046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a04a:	e005      	b.n	a058 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x148>
    a04c:	9801      	ldr	r0, [sp, #4]
    a04e:	eb00 0045 	add.w	r0, r0, r5, lsl #1
    a052:	7845      	ldrb	r5, [r0, #1]
    a054:	2d20      	cmp	r5, #32
    a056:	d1ae      	bne.n	9fb6 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xa6>
    a058:	2005      	movs	r0, #5
    a05a:	f002 fa1b 	bl	c494 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    a05e:	4d23      	ldr	r5, [pc, #140]	; (a0ec <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1dc>)
    a060:	f04f 30ff 	mov.w	r0, #4294967295
    a064:	e9c5 0002 	strd	r0, r0, [r5, #8]
    a068:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
    a06c:	f89d 2018 	ldrb.w	r2, [sp, #24]
    a070:	2120      	movs	r1, #32
    a072:	2a20      	cmp	r2, #32
    a074:	d003      	beq.n	a07e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16e>
    a076:	2005      	movs	r0, #5
    a078:	f7fe ffd4 	bl	9024 <MPSL_IRQ_RADIO_Handler+0x3c>
    a07c:	e004      	b.n	a088 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>
    a07e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    a082:	4428      	add	r0, r5
    a084:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    a088:	f895 2049 	ldrb.w	r2, [r5, #73]	; 0x49
    a08c:	491a      	ldr	r1, [pc, #104]	; (a0f8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1e8>)
    a08e:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    a092:	f895 204a 	ldrb.w	r2, [r5, #74]	; 0x4a
    a096:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    a09a:	7048      	strb	r0, [r1, #1]
    a09c:	6828      	ldr	r0, [r5, #0]
    a09e:	4430      	add	r0, r6
    a0a0:	6028      	str	r0, [r5, #0]
    a0a2:	20ff      	movs	r0, #255	; 0xff
    a0a4:	f885 0039 	strb.w	r0, [r5, #57]	; 0x39
    a0a8:	f895 0037 	ldrb.w	r0, [r5, #55]	; 0x37
    a0ac:	f88d 0000 	strb.w	r0, [sp]
    a0b0:	f89d 0000 	ldrb.w	r0, [sp]
    a0b4:	b170      	cbz	r0, a0d4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1c4>
    a0b6:	f895 0021 	ldrb.w	r0, [r5, #33]	; 0x21
    a0ba:	2801      	cmp	r0, #1
    a0bc:	d10a      	bne.n	a0d4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1c4>
    a0be:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
    a0c2:	6822      	ldr	r2, [r4, #0]
    a0c4:	1810      	adds	r0, r2, r0
    a0c6:	f143 0100 	adc.w	r1, r3, #0
    a0ca:	1e40      	subs	r0, r0, #1
    a0cc:	f141 31ff 	adc.w	r1, r1, #4294967295
    a0d0:	f002 f822 	bl	c118 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    a0d4:	f89d 0018 	ldrb.w	r0, [sp, #24]
    a0d8:	2820      	cmp	r0, #32
    a0da:	d003      	beq.n	a0e4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1d4>
    a0dc:	4807      	ldr	r0, [pc, #28]	; (a0fc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ec>)
    a0de:	7840      	ldrb	r0, [r0, #1]
    a0e0:	f002 fbf6 	bl	c8d0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a0e4:	b00f      	add	sp, #60	; 0x3c
    a0e6:	2000      	movs	r0, #0
    a0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a0ec:	20000ff8 	.word	0x20000ff8
    a0f0:	0f424000 	.word	0x0f424000
    a0f4:	20000b78 	.word	0x20000b78
    a0f8:	20000f78 	.word	0x20000f78
    a0fc:	20000320 	.word	0x20000320

0000a100 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    a100:	b570      	push	{r4, r5, r6, lr}
    a102:	4a23      	ldr	r2, [pc, #140]	; (a190 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x90>)
    a104:	f892 104a 	ldrb.w	r1, [r2, #74]	; 0x4a
    a108:	2920      	cmp	r1, #32
    a10a:	d039      	beq.n	a180 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x80>
    a10c:	f892 104a 	ldrb.w	r1, [r2, #74]	; 0x4a
    a110:	f5a2 6390 	sub.w	r3, r2, #1152	; 0x480
    a114:	eb03 1c41 	add.w	ip, r3, r1, lsl #5
    a118:	f892 1049 	ldrb.w	r1, [r2, #73]	; 0x49
    a11c:	f892 4049 	ldrb.w	r4, [r2, #73]	; 0x49
    a120:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    a124:	4411      	add	r1, r2
    a126:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
    a12a:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    a12e:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    a132:	2920      	cmp	r1, #32
    a134:	d029      	beq.n	a18a <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8a>
    a136:	eb03 1541 	add.w	r5, r3, r1, lsl #5
    a13a:	7e2d      	ldrb	r5, [r5, #24]
    a13c:	42a8      	cmp	r0, r5
    a13e:	bf3c      	itt	cc
    a140:	eb04 0141 	addcc.w	r1, r4, r1, lsl #1
    a144:	7849      	ldrbcc	r1, [r1, #1]
    a146:	d3f4      	bcc.n	a132 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x32>
    a148:	e9dc 6003 	ldrd	r6, r0, [ip, #12]
    a14c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
    a150:	f8dc 5008 	ldr.w	r5, [ip, #8]
    a154:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
    a158:	6814      	ldr	r4, [r2, #0]
    a15a:	1828      	adds	r0, r5, r0
    a15c:	f146 0200 	adc.w	r2, r6, #0
    a160:	ebb1 0c00 	subs.w	ip, r1, r0
    a164:	eb73 0202 	sbcs.w	r2, r3, r2
    a168:	d308      	bcc.n	a17c <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7c>
    a16a:	1a08      	subs	r0, r1, r0
    a16c:	f006 fc08 	bl	10980 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a170:	f104 0168 	add.w	r1, r4, #104	; 0x68
    a174:	4281      	cmp	r1, r0
    a176:	bf9c      	itt	ls
    a178:	1b00      	subls	r0, r0, r4
    a17a:	bd70      	popls	{r4, r5, r6, pc}
    a17c:	2000      	movs	r0, #0
    a17e:	bd70      	pop	{r4, r5, r6, pc}
    a180:	f640 310b 	movw	r1, #2827	; 0xb0b
    a184:	2070      	movs	r0, #112	; 0x70
    a186:	f002 facf 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a18a:	f04f 30ff 	mov.w	r0, #4294967295
    a18e:	bd70      	pop	{r4, r5, r6, pc}
    a190:	20000ff8 	.word	0x20000ff8

0000a194 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    a194:	4806      	ldr	r0, [pc, #24]	; (a1b0 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    a196:	b510      	push	{r4, lr}
    a198:	f890 104a 	ldrb.w	r1, [r0, #74]	; 0x4a
    a19c:	2920      	cmp	r1, #32
    a19e:	bf1c      	itt	ne
    a1a0:	f890 0020 	ldrbne.w	r0, [r0, #32]
    a1a4:	bd10      	popne	{r4, pc}
    a1a6:	f640 3132 	movw	r1, #2866	; 0xb32
    a1aa:	2070      	movs	r0, #112	; 0x70
    a1ac:	f002 fabc 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a1b0:	20000ff8 	.word	0x20000ff8

0000a1b4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    a1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a1b6:	4d6e      	ldr	r5, [pc, #440]	; (a370 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    a1b8:	2701      	movs	r7, #1
    a1ba:	f505 6490 	add.w	r4, r5, #1152	; 0x480
    a1be:	2600      	movs	r6, #0
    a1c0:	e9d4 1210 	ldrd	r1, r2, [r4, #64]	; 0x40
    a1c4:	2808      	cmp	r0, #8
    a1c6:	bf28      	it	cs
    a1c8:	bdf8      	popcs	{r3, r4, r5, r6, r7, pc}
    a1ca:	e8df f000 	tbb	[pc, r0]
    a1ce:	7f04      	.short	0x7f04
    a1d0:	4e5dbaa7 	.word	0x4e5dbaa7
    a1d4:	c05d      	.short	0xc05d
    a1d6:	43c8      	mvns	r0, r1
    a1d8:	ea70 0002 	orns	r0, r0, r2
    a1dc:	d105      	bne.n	a1ea <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x36>
    a1de:	f001 fc4d 	bl	ba7c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a1e2:	f002 f885 	bl	c2f0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a1e6:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
    a1ea:	8be0      	ldrh	r0, [r4, #30]
    a1ec:	b110      	cbz	r0, a1f4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x40>
    a1ee:	f001 fd7b 	bl	bce8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a1f2:	b1a0      	cbz	r0, a21e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6a>
    a1f4:	f7ff fce2 	bl	9bbc <MPSL_IRQ_RADIO_Handler+0xbd4>
    a1f8:	20ff      	movs	r0, #255	; 0xff
    a1fa:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
    a1fe:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    a202:	43d0      	mvns	r0, r2
    a204:	ea70 0003 	orns	r0, r0, r3
    a208:	d004      	beq.n	a214 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x60>
    a20a:	2005      	movs	r0, #5
    a20c:	9600      	str	r6, [sp, #0]
    a20e:	f002 f891 	bl	c334 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    a212:	b148      	cbz	r0, a228 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x74>
    a214:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    a218:	2801      	cmp	r0, #1
    a21a:	d117      	bne.n	a24c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x98>
    a21c:	e009      	b.n	a232 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x7e>
    a21e:	f640 0138 	movw	r1, #2104	; 0x838
    a222:	2070      	movs	r0, #112	; 0x70
    a224:	f002 fa80 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a228:	f44f 6104 	mov.w	r1, #2112	; 0x840
    a22c:	2070      	movs	r0, #112	; 0x70
    a22e:	f002 fa7b 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a232:	f104 0010 	add.w	r0, r4, #16
    a236:	e9d0 1200 	ldrd	r1, r2, [r0]
    a23a:	69a0      	ldr	r0, [r4, #24]
    a23c:	1808      	adds	r0, r1, r0
    a23e:	eb42 0106 	adc.w	r1, r2, r6
    a242:	1e40      	subs	r0, r0, #1
    a244:	f141 31ff 	adc.w	r1, r1, #4294967295
    a248:	f001 ff66 	bl	c118 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    a24c:	f894 004a 	ldrb.w	r0, [r4, #74]	; 0x4a
    a250:	f894 104a 	ldrb.w	r1, [r4, #74]	; 0x4a
    a254:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    a258:	6840      	ldr	r0, [r0, #4]
    a25a:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    a25e:	680a      	ldr	r2, [r1, #0]
    a260:	b001      	add	sp, #4
    a262:	2101      	movs	r1, #1
    a264:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a268:	4710      	bx	r2
    a26a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    a26e:	b160      	cbz	r0, a28a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd6>
    a270:	43c8      	mvns	r0, r1
    a272:	ea70 0002 	orns	r0, r0, r2
    a276:	d105      	bne.n	a284 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd0>
    a278:	f001 fc00 	bl	ba7c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a27c:	f002 f838 	bl	c2f0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a280:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
    a284:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
    a288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a28a:	f7ff fc97 	bl	9bbc <MPSL_IRQ_RADIO_Handler+0xbd4>
    a28e:	f04f 30ff 	mov.w	r0, #4294967295
    a292:	e9c4 0002 	strd	r0, r0, [r4, #8]
    a296:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
    a29a:	f88d 0000 	strb.w	r0, [sp]
    a29e:	f89d 0000 	ldrb.w	r0, [sp]
    a2a2:	b170      	cbz	r0, a2c2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10e>
    a2a4:	f894 004a 	ldrb.w	r0, [r4, #74]	; 0x4a
    a2a8:	f894 104a 	ldrb.w	r1, [r4, #74]	; 0x4a
    a2ac:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    a2b0:	6840      	ldr	r0, [r0, #4]
    a2b2:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    a2b6:	680a      	ldr	r2, [r1, #0]
    a2b8:	b001      	add	sp, #4
    a2ba:	2106      	movs	r1, #6
    a2bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a2c0:	4710      	bx	r2
    a2c2:	f640 0158 	movw	r1, #2136	; 0x858
    a2c6:	2070      	movs	r0, #112	; 0x70
    a2c8:	f002 fa2e 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a2cc:	f7ff fc76 	bl	9bbc <MPSL_IRQ_RADIO_Handler+0xbd4>
    a2d0:	f884 7036 	strb.w	r7, [r4, #54]	; 0x36
    a2d4:	f001 fd08 	bl	bce8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a2d8:	b130      	cbz	r0, a2e8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x134>
    a2da:	e9d4 0110 	ldrd	r0, r1, [r4, #64]	; 0x40
    a2de:	43c0      	mvns	r0, r0
    a2e0:	ea70 0001 	orns	r0, r0, r1
    a2e4:	d005      	beq.n	a2f2 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x13e>
    a2e6:	e00a      	b.n	a2fe <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x14a>
    a2e8:	f640 016f 	movw	r1, #2159	; 0x86f
    a2ec:	2070      	movs	r0, #112	; 0x70
    a2ee:	f002 fa1b 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a2f2:	f001 fbc3 	bl	ba7c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a2f6:	f001 fffb 	bl	c2f0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a2fa:	e9c4 0110 	strd	r0, r1, [r4, #64]	; 0x40
    a2fe:	f894 004a 	ldrb.w	r0, [r4, #74]	; 0x4a
    a302:	f894 104a 	ldrb.w	r1, [r4, #74]	; 0x4a
    a306:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    a30a:	6840      	ldr	r0, [r0, #4]
    a30c:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    a310:	680a      	ldr	r2, [r1, #0]
    a312:	b001      	add	sp, #4
    a314:	2100      	movs	r1, #0
    a316:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a31a:	4710      	bx	r2
    a31c:	f001 f9d6 	bl	b6cc <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    a320:	8be0      	ldrh	r0, [r4, #30]
    a322:	b110      	cbz	r0, a32a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x176>
    a324:	f001 fce0 	bl	bce8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a328:	b130      	cbz	r0, a338 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x184>
    a32a:	f001 f9e3 	bl	b6f4 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    a32e:	2800      	cmp	r0, #0
    a330:	bf18      	it	ne
    a332:	f884 7029 	strbne.w	r7, [r4, #41]	; 0x29
    a336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a338:	f640 0179 	movw	r1, #2169	; 0x879
    a33c:	2070      	movs	r0, #112	; 0x70
    a33e:	f002 f9f3 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a342:	480c      	ldr	r0, [pc, #48]	; (a374 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    a344:	6007      	str	r7, [r0, #0]
    a346:	480c      	ldr	r0, [pc, #48]	; (a378 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    a348:	6880      	ldr	r0, [r0, #8]
    a34a:	6007      	str	r7, [r0, #0]
    a34c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a34e:	f7ff fc35 	bl	9bbc <MPSL_IRQ_RADIO_Handler+0xbd4>
    a352:	f894 004a 	ldrb.w	r0, [r4, #74]	; 0x4a
    a356:	f894 104a 	ldrb.w	r1, [r4, #74]	; 0x4a
    a35a:	eb05 1040 	add.w	r0, r5, r0, lsl #5
    a35e:	6840      	ldr	r0, [r0, #4]
    a360:	eb05 1141 	add.w	r1, r5, r1, lsl #5
    a364:	680a      	ldr	r2, [r1, #0]
    a366:	b001      	add	sp, #4
    a368:	2105      	movs	r1, #5
    a36a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a36e:	4710      	bx	r2
    a370:	20000b78 	.word	0x20000b78
    a374:	40000508 	.word	0x40000508
    a378:	20000320 	.word	0x20000320

0000a37c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    a37c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a380:	48f9      	ldr	r0, [pc, #996]	; (a768 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ec>)
    a382:	b097      	sub	sp, #92	; 0x5c
    a384:	460f      	mov	r7, r1
    a386:	6800      	ldr	r0, [r0, #0]
    a388:	f8df 83e0 	ldr.w	r8, [pc, #992]	; a76c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f0>
    a38c:	05c0      	lsls	r0, r0, #23
    a38e:	0dc0      	lsrs	r0, r0, #23
    a390:	d00e      	beq.n	a3b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x34>
    a392:	3810      	subs	r0, #16
    a394:	b240      	sxtb	r0, r0
    a396:	2800      	cmp	r0, #0
    a398:	bfb8      	it	lt
    a39a:	f000 000f 	andlt.w	r0, r0, #15
    a39e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a3a2:	bfac      	ite	ge
    a3a4:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a3a8:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a3ac:	0940      	lsrs	r0, r0, #5
    a3ae:	d00c      	beq.n	a3ca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    a3b0:	7838      	ldrb	r0, [r7, #0]
    a3b2:	f04f 0900 	mov.w	r9, #0
    a3b6:	2800      	cmp	r0, #0
    a3b8:	bf18      	it	ne
    a3ba:	2801      	cmpne	r0, #1
    a3bc:	d017      	beq.n	a3ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x72>
    a3be:	f240 710a 	movw	r1, #1802	; 0x70a
    a3c2:	f04f 0070 	mov.w	r0, #112	; 0x70
    a3c6:	f002 f9af 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a3ca:	f898 004a 	ldrb.w	r0, [r8, #74]	; 0x4a
    a3ce:	f04f 0901 	mov.w	r9, #1
    a3d2:	2820      	cmp	r0, #32
    a3d4:	d006      	beq.n	a3e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x68>
    a3d6:	7838      	ldrb	r0, [r7, #0]
    a3d8:	b148      	cbz	r0, a3ee <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x72>
    a3da:	f240 7106 	movw	r1, #1798	; 0x706
    a3de:	2070      	movs	r0, #112	; 0x70
    a3e0:	f002 f9a2 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a3e4:	f240 7103 	movw	r1, #1795	; 0x703
    a3e8:	2070      	movs	r0, #112	; 0x70
    a3ea:	f002 f99d 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a3ee:	4ce0      	ldr	r4, [pc, #896]	; (a770 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f4>)
    a3f0:	b124      	cbz	r4, a3fc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x80>
    a3f2:	2100      	movs	r1, #0
    a3f4:	f240 700d 	movw	r0, #1805	; 0x70d
    a3f8:	f3af 8000 	nop.w
    a3fc:	2000      	movs	r0, #0
    a3fe:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    a402:	a905      	add	r1, sp, #20
    a404:	9112      	str	r1, [sp, #72]	; 0x48
    a406:	48db      	ldr	r0, [pc, #876]	; (a774 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f8>)
    a408:	9917      	ldr	r1, [sp, #92]	; 0x5c
    a40a:	f04f 0a01 	mov.w	sl, #1
    a40e:	eb00 1041 	add.w	r0, r0, r1, lsl #5
    a412:	9001      	str	r0, [sp, #4]
    a414:	f8df b358 	ldr.w	fp, [pc, #856]	; a770 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f4>
    a418:	f1bb 0f00 	cmp.w	fp, #0
    a41c:	d004      	beq.n	a428 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    a41e:	2100      	movs	r1, #0
    a420:	f44f 60e3 	mov.w	r0, #1816	; 0x718
    a424:	f3af 8000 	nop.w
    a428:	f1ba 0f00 	cmp.w	sl, #0
    a42c:	d009      	beq.n	a442 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    a42e:	bf00      	nop
    a430:	f898 5049 	ldrb.w	r5, [r8, #73]	; 0x49
    a434:	2400      	movs	r4, #0
    a436:	f888 4039 	strb.w	r4, [r8, #57]	; 0x39
    a43a:	f1b9 0f00 	cmp.w	r9, #0
    a43e:	d007      	beq.n	a450 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xd4>
    a440:	e03f      	b.n	a4c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x146>
    a442:	48cd      	ldr	r0, [pc, #820]	; (a778 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3fc>)
    a444:	2800      	cmp	r0, #0
    a446:	bf18      	it	ne
    a448:	f3af 8000 	nopne.w
    a44c:	b662      	cpsie	i
    a44e:	e7ef      	b.n	a430 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb4>
    a450:	462e      	mov	r6, r5
    a452:	2001      	movs	r0, #1
    a454:	ea20 0506 	bic.w	r5, r0, r6
    a458:	48c8      	ldr	r0, [pc, #800]	; (a77c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x400>)
    a45a:	2240      	movs	r2, #64	; 0x40
    a45c:	eb00 1186 	add.w	r1, r0, r6, lsl #6
    a460:	eb00 1085 	add.w	r0, r0, r5, lsl #6
    a464:	f006 fbc8 	bl	10bf8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a468:	f1bb 0f00 	cmp.w	fp, #0
    a46c:	d004      	beq.n	a478 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xfc>
    a46e:	2100      	movs	r1, #0
    a470:	f240 5049 	movw	r0, #1353	; 0x549
    a474:	f3af 8000 	nop.w
    a478:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    a47c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    a480:	eb01 0208 	add.w	r2, r1, r8
    a484:	4440      	add	r0, r8
    a486:	8e11      	ldrh	r1, [r2, #48]	; 0x30
    a488:	8601      	strh	r1, [r0, #48]	; 0x30
    a48a:	f892 1032 	ldrb.w	r1, [r2, #50]	; 0x32
    a48e:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
    a492:	f1bb 0f00 	cmp.w	fp, #0
    a496:	d004      	beq.n	a4a2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x126>
    a498:	2100      	movs	r1, #0
    a49a:	f240 504d 	movw	r0, #1357	; 0x54d
    a49e:	f3af 8000 	nop.w
    a4a2:	f1bb 0f00 	cmp.w	fp, #0
    a4a6:	d004      	beq.n	a4b2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x136>
    a4a8:	2100      	movs	r1, #0
    a4aa:	f240 7022 	movw	r0, #1826	; 0x722
    a4ae:	f3af 8000 	nop.w
    a4b2:	f898 0039 	ldrb.w	r0, [r8, #57]	; 0x39
    a4b6:	f88d 0020 	strb.w	r0, [sp, #32]
    a4ba:	f89d 0020 	ldrb.w	r0, [sp, #32]
    a4be:	2800      	cmp	r0, #0
    a4c0:	d1a8      	bne.n	a414 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a4c2:	f1bb 0f00 	cmp.w	fp, #0
    a4c6:	d004      	beq.n	a4d2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x156>
    a4c8:	2100      	movs	r1, #0
    a4ca:	f240 702c 	movw	r0, #1836	; 0x72c
    a4ce:	f3af 8000 	nop.w
    a4d2:	f001 ff0d 	bl	c2f0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a4d6:	4606      	mov	r6, r0
    a4d8:	a802      	add	r0, sp, #8
    a4da:	900b      	str	r0, [sp, #44]	; 0x2c
    a4dc:	468a      	mov	sl, r1
    a4de:	8939      	ldrh	r1, [r7, #8]
    a4e0:	4620      	mov	r0, r4
    a4e2:	f361 401f 	bfi	r0, r1, #16, #16
    a4e6:	4601      	mov	r1, r0
    a4e8:	7aba      	ldrb	r2, [r7, #10]
    a4ea:	4620      	mov	r0, r4
    a4ec:	f362 0007 	bfi	r0, r2, #0, #8
    a4f0:	7afa      	ldrb	r2, [r7, #11]
    a4f2:	f362 200f 	bfi	r0, r2, #8, #8
    a4f6:	783a      	ldrb	r2, [r7, #0]
    a4f8:	9402      	str	r4, [sp, #8]
    a4fa:	f362 4017 	bfi	r0, r2, #16, #8
    a4fe:	e9cd 4104 	strd	r4, r1, [sp, #16]
    a502:	e9cd 0406 	strd	r0, r4, [sp, #24]
    a506:	9403      	str	r4, [sp, #12]
    a508:	7838      	ldrb	r0, [r7, #0]
    a50a:	b380      	cbz	r0, a56e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f2>
    a50c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    a510:	489b      	ldr	r0, [pc, #620]	; (a780 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x404>)
    a512:	1a40      	subs	r0, r0, r1
    a514:	990b      	ldr	r1, [sp, #44]	; 0x2c
    a516:	f101 020c 	add.w	r2, r1, #12
    a51a:	a914      	add	r1, sp, #80	; 0x50
    a51c:	f001 f8a8 	bl	b670 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a520:	2200      	movs	r2, #0
    a522:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    a526:	4630      	mov	r0, r6
    a528:	4651      	mov	r1, sl
    a52a:	f7fe ff53 	bl	93d4 <MPSL_IRQ_RADIO_Handler+0x3ec>
    a52e:	4684      	mov	ip, r0
    a530:	7af8      	ldrb	r0, [r7, #11]
    a532:	2800      	cmp	r0, #0
    a534:	bf0c      	ite	eq
    a536:	207a      	moveq	r0, #122	; 0x7a
    a538:	204c      	movne	r0, #76	; 0x4c
    a53a:	687a      	ldr	r2, [r7, #4]
    a53c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    a540:	4410      	add	r0, r2
    a542:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    a546:	e9cd c102 	strd	ip, r1, [sp, #8]
    a54a:	441a      	add	r2, r3
    a54c:	4410      	add	r0, r2
    a54e:	1c80      	adds	r0, r0, #2
    a550:	f001 f872 	bl	b638 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a554:	9500      	str	r5, [sp, #0]
    a556:	9004      	str	r0, [sp, #16]
    a558:	4632      	mov	r2, r6
    a55a:	4653      	mov	r3, sl
    a55c:	6938      	ldr	r0, [r7, #16]
    a55e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    a560:	f7fe fd9c 	bl	909c <MPSL_IRQ_RADIO_Handler+0xb4>
    a564:	2800      	cmp	r0, #0
    a566:	bf08      	it	eq
    a568:	e9cd 6a02 	strdeq	r6, sl, [sp, #8]
    a56c:	e04c      	b.n	a608 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x28c>
    a56e:	e7ff      	b.n	a570 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f4>
    a570:	4630      	mov	r0, r6
    a572:	4651      	mov	r1, sl
    a574:	f000 ffd8 	bl	b528 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    a578:	4b82      	ldr	r3, [pc, #520]	; (a784 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x408>)
    a57a:	4602      	mov	r2, r0
    a57c:	eb10 0c03 	adds.w	ip, r0, r3
    a580:	468e      	mov	lr, r1
    a582:	f141 0300 	adc.w	r3, r1, #0
    a586:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    a58a:	ebb0 0c0c 	subs.w	ip, r0, ip
    a58e:	eb71 0303 	sbcs.w	r3, r1, r3
    a592:	d231      	bcs.n	a5f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27c>
    a594:	3229      	adds	r2, #41	; 0x29
    a596:	f14e 0300 	adc.w	r3, lr, #0
    a59a:	1a82      	subs	r2, r0, r2
    a59c:	eb71 0203 	sbcs.w	r2, r1, r3
    a5a0:	d32a      	bcc.n	a5f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x27c>
    a5a2:	893a      	ldrh	r2, [r7, #8]
    a5a4:	1c52      	adds	r2, r2, #1
    a5a6:	ebb0 0a02 	subs.w	sl, r0, r2
    a5aa:	eb61 0c04 	sbc.w	ip, r1, r4
    a5ae:	1a80      	subs	r0, r0, r2
    a5b0:	eb71 0004 	sbcs.w	r0, r1, r4
    a5b4:	bf3c      	itt	cc
    a5b6:	f04f 0a00 	movcc.w	sl, #0
    a5ba:	46d4      	movcc	ip, sl
    a5bc:	9812      	ldr	r0, [sp, #72]	; 0x48
    a5be:	9000      	str	r0, [sp, #0]
    a5c0:	ab14      	add	r3, sp, #80	; 0x50
    a5c2:	aa0b      	add	r2, sp, #44	; 0x2c
    a5c4:	4650      	mov	r0, sl
    a5c6:	4661      	mov	r1, ip
    a5c8:	f000 ffd2 	bl	b570 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    a5cc:	7af8      	ldrb	r0, [r7, #11]
    a5ce:	2800      	cmp	r0, #0
    a5d0:	bf0c      	ite	eq
    a5d2:	207a      	moveq	r0, #122	; 0x7a
    a5d4:	204c      	movne	r0, #76	; 0x4c
    a5d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    a5d8:	893a      	ldrh	r2, [r7, #8]
    a5da:	4408      	add	r0, r1
    a5dc:	6879      	ldr	r1, [r7, #4]
    a5de:	4411      	add	r1, r2
    a5e0:	4408      	add	r0, r1
    a5e2:	1c80      	adds	r0, r0, #2
    a5e4:	f001 f828 	bl	b638 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a5e8:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
    a5ec:	e9cd 1202 	strd	r1, r2, [sp, #8]
    a5f0:	1a40      	subs	r0, r0, r1
    a5f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a5f6:	e006      	b.n	a606 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x28a>
    a5f8:	1e71      	subs	r1, r6, #1
    a5fa:	f14a 30ff 	adc.w	r0, sl, #4294967295
    a5fe:	e9cd 1002 	strd	r1, r0, [sp, #8]
    a602:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    a606:	9004      	str	r0, [sp, #16]
    a608:	f1bb 0f00 	cmp.w	fp, #0
    a60c:	d004      	beq.n	a618 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x29c>
    a60e:	2100      	movs	r1, #0
    a610:	f240 7033 	movw	r0, #1843	; 0x733
    a614:	f3af 8000 	nop.w
    a618:	4958      	ldr	r1, [pc, #352]	; (a77c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x400>)
    a61a:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
    a61e:	eb01 1185 	add.w	r1, r1, r5, lsl #6
    a622:	910a      	str	r1, [sp, #40]	; 0x28
    a624:	f811 101a 	ldrb.w	r1, [r1, sl, lsl #1]
    a628:	a802      	add	r0, sp, #8
    a62a:	2901      	cmp	r1, #1
    a62c:	bf18      	it	ne
    a62e:	2902      	cmpne	r1, #2
    a630:	d140      	bne.n	a6b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x338>
    a632:	9411      	str	r4, [sp, #68]	; 0x44
    a634:	9a02      	ldr	r2, [sp, #8]
    a636:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    a63a:	1a53      	subs	r3, r2, r1
    a63c:	f8dd c010 	ldr.w	ip, [sp, #16]
    a640:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    a644:	eb12 020c 	adds.w	r2, r2, ip
    a648:	1a51      	subs	r1, r2, r1
    a64a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a64e:	2b02      	cmp	r3, #2
    a650:	d371      	bcc.n	a736 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ba>
    a652:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    a656:	bf98      	it	ls
    a658:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    a65c:	d86b      	bhi.n	a736 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ba>
    a65e:	2401      	movs	r4, #1
    a660:	ab14      	add	r3, sp, #80	; 0x50
    a662:	aa0e      	add	r2, sp, #56	; 0x38
    a664:	4629      	mov	r1, r5
    a666:	f7fe ff05 	bl	9474 <MPSL_IRQ_RADIO_Handler+0x48c>
    a66a:	2800      	cmp	r0, #0
    a66c:	d06a      	beq.n	a744 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>
    a66e:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    a672:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    a676:	462b      	mov	r3, r5
    a678:	428a      	cmp	r2, r1
    a67a:	d067      	beq.n	a74c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d0>
    a67c:	2005      	movs	r0, #5
    a67e:	f7fe fcd1 	bl	9024 <MPSL_IRQ_RADIO_Handler+0x3c>
    a682:	990a      	ldr	r1, [sp, #40]	; 0x28
    a684:	eb01 014a 	add.w	r1, r1, sl, lsl #1
    a688:	7048      	strb	r0, [r1, #1]
    a68a:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    a68e:	2820      	cmp	r0, #32
    a690:	bf01      	itttt	eq
    a692:	eb05 0045 	addeq.w	r0, r5, r5, lsl #1
    a696:	4440      	addeq	r0, r8
    a698:	f880 a030 	strbeq.w	sl, [r0, #48]	; 0x30
    a69c:	9411      	streq	r4, [sp, #68]	; 0x44
    a69e:	bf1e      	ittt	ne
    a6a0:	990a      	ldrne	r1, [sp, #40]	; 0x28
    a6a2:	eb01 0040 	addne.w	r0, r1, r0, lsl #1
    a6a6:	f880 a001 	strbne.w	sl, [r0, #1]
    a6aa:	462a      	mov	r2, r5
    a6ac:	4651      	mov	r1, sl
    a6ae:	2003      	movs	r0, #3
    a6b0:	f7ff fb30 	bl	9d14 <MPSL_IRQ_RADIO_Handler+0xd2c>
    a6b4:	f1bb 0f00 	cmp.w	fp, #0
    a6b8:	d004      	beq.n	a6c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x348>
    a6ba:	2100      	movs	r1, #0
    a6bc:	f44f 60e7 	mov.w	r0, #1848	; 0x738
    a6c0:	f3af 8000 	nop.w
    a6c4:	4830      	ldr	r0, [pc, #192]	; (a788 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x40c>)
    a6c6:	2800      	cmp	r0, #0
    a6c8:	bf18      	it	ne
    a6ca:	f3af 8000 	nopne.w
    a6ce:	f3ef 8a10 	mrs	sl, PRIMASK
    a6d2:	b672      	cpsid	i
    a6d4:	f1bb 0f00 	cmp.w	fp, #0
    a6d8:	d004      	beq.n	a6e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x368>
    a6da:	2100      	movs	r1, #0
    a6dc:	f240 703e 	movw	r0, #1854	; 0x73e
    a6e0:	f3af 8000 	nop.w
    a6e4:	f898 0039 	ldrb.w	r0, [r8, #57]	; 0x39
    a6e8:	f88d 0020 	strb.w	r0, [sp, #32]
    a6ec:	f89d 0020 	ldrb.w	r0, [sp, #32]
    a6f0:	2800      	cmp	r0, #0
    a6f2:	f47f ae8f 	bne.w	a414 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a6f6:	481e      	ldr	r0, [pc, #120]	; (a770 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f4>)
    a6f8:	b120      	cbz	r0, a704 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>
    a6fa:	2100      	movs	r1, #0
    a6fc:	f240 7046 	movw	r0, #1862	; 0x746
    a700:	f3af 8000 	nop.w
    a704:	e9dd 0101 	ldrd	r0, r1, [sp, #4]
    a708:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
    a70c:	e9dd bc05 	ldrd	fp, ip, [sp, #20]
    a710:	f100 0008 	add.w	r0, r0, #8
    a714:	f8dd e01c 	ldr.w	lr, [sp, #28]
    a718:	e880 580e 	stmia.w	r0, {r1, r2, r3, fp, ip, lr}
    a71c:	b31c      	cbz	r4, a766 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ea>
    a71e:	4c14      	ldr	r4, [pc, #80]	; (a770 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3f4>)
    a720:	b124      	cbz	r4, a72c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b0>
    a722:	2100      	movs	r1, #0
    a724:	f240 7053 	movw	r0, #1875	; 0x753
    a728:	f3af 8000 	nop.w
    a72c:	f1b9 0f00 	cmp.w	r9, #0
    a730:	d144      	bne.n	a7bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x440>
    a732:	e02b      	b.n	a78c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x410>
    a734:	e7ff      	b.n	a736 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ba>
    a736:	462a      	mov	r2, r5
    a738:	4651      	mov	r1, sl
    a73a:	2004      	movs	r0, #4
    a73c:	f7ff faea 	bl	9d14 <MPSL_IRQ_RADIO_Handler+0xd2c>
    a740:	2401      	movs	r4, #1
    a742:	e7b7      	b.n	a6b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x338>
    a744:	462a      	mov	r2, r5
    a746:	4651      	mov	r1, sl
    a748:	2004      	movs	r0, #4
    a74a:	e7b1      	b.n	a6b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x334>
    a74c:	2920      	cmp	r1, #32
    a74e:	bf1d      	ittte	ne
    a750:	980a      	ldrne	r0, [sp, #40]	; 0x28
    a752:	eb00 0041 	addne.w	r0, r0, r1, lsl #1
    a756:	7840      	ldrbne	r0, [r0, #1]
    a758:	eb05 0045 	addeq.w	r0, r5, r5, lsl #1
    a75c:	bf04      	itt	eq
    a75e:	4440      	addeq	r0, r8
    a760:	f890 0030 	ldrbeq.w	r0, [r0, #48]	; 0x30
    a764:	e78d      	b.n	a682 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x306>
    a766:	e038      	b.n	a7da <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45e>
    a768:	e000ed04 	.word	0xe000ed04
    a76c:	20000ff8 	.word	0x20000ff8
    a770:	00000000 	.word	0x00000000
    a774:	20000b78 	.word	0x20000b78
    a778:	00000000 	.word	0x00000000
    a77c:	20000f78 	.word	0x20000f78
    a780:	1e847fff 	.word	0x1e847fff
    a784:	0f424000 	.word	0x0f424000
    a788:	00000000 	.word	0x00000000
    a78c:	9811      	ldr	r0, [sp, #68]	; 0x44
    a78e:	f010 0fff 	tst.w	r0, #255	; 0xff
    a792:	d013      	beq.n	a7bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x440>
    a794:	f898 004a 	ldrb.w	r0, [r8, #74]	; 0x4a
    a798:	2820      	cmp	r0, #32
    a79a:	d10f      	bne.n	a7bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x440>
    a79c:	b124      	cbz	r4, a7a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x42c>
    a79e:	2100      	movs	r1, #0
    a7a0:	f44f 60eb 	mov.w	r0, #1880	; 0x758
    a7a4:	f3af 8000 	nop.w
    a7a8:	4629      	mov	r1, r5
    a7aa:	2002      	movs	r0, #2
    a7ac:	f7ff fae4 	bl	9d78 <MPSL_IRQ_RADIO_Handler+0xd90>
    a7b0:	9010      	str	r0, [sp, #64]	; 0x40
    a7b2:	b918      	cbnz	r0, a7bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x440>
    a7b4:	7838      	ldrb	r0, [r7, #0]
    a7b6:	b1f0      	cbz	r0, a7f6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x47a>
    a7b8:	2801      	cmp	r0, #1
    a7ba:	d02b      	beq.n	a814 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x498>
    a7bc:	483b      	ldr	r0, [pc, #236]	; (a8ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x530>)
    a7be:	b120      	cbz	r0, a7ca <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x44e>
    a7c0:	2100      	movs	r1, #0
    a7c2:	f240 7075 	movw	r0, #1909	; 0x775
    a7c6:	f3af 8000 	nop.w
    a7ca:	20ff      	movs	r0, #255	; 0xff
    a7cc:	f1b9 0f00 	cmp.w	r9, #0
    a7d0:	bf18      	it	ne
    a7d2:	f888 0039 	strbne.w	r0, [r8, #57]	; 0x39
    a7d6:	d026      	beq.n	a826 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4aa>
    a7d8:	2401      	movs	r4, #1
    a7da:	4d34      	ldr	r5, [pc, #208]	; (a8ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x530>)
    a7dc:	b125      	cbz	r5, a7e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x46c>
    a7de:	2100      	movs	r1, #0
    a7e0:	f240 7086 	movw	r0, #1926	; 0x786
    a7e4:	f3af 8000 	nop.w
    a7e8:	9810      	ldr	r0, [sp, #64]	; 0x40
    a7ea:	4f31      	ldr	r7, [pc, #196]	; (a8b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x534>)
    a7ec:	2802      	cmp	r0, #2
    a7ee:	d023      	beq.n	a838 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4bc>
    a7f0:	2801      	cmp	r0, #1
    a7f2:	d029      	beq.n	a848 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4cc>
    a7f4:	e02d      	b.n	a852 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d6>
    a7f6:	482d      	ldr	r0, [pc, #180]	; (a8ac <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x530>)
    a7f8:	b120      	cbz	r0, a804 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x488>
    a7fa:	2100      	movs	r1, #0
    a7fc:	f44f 60ec 	mov.w	r0, #1888	; 0x760
    a800:	f3af 8000 	nop.w
    a804:	f898 2049 	ldrb.w	r2, [r8, #73]	; 0x49
    a808:	2004      	movs	r0, #4
    a80a:	9917      	ldr	r1, [sp, #92]	; 0x5c
    a80c:	f7ff fa82 	bl	9d14 <MPSL_IRQ_RADIO_Handler+0xd2c>
    a810:	2401      	movs	r4, #1
    a812:	e7e2      	b.n	a7da <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45e>
    a814:	2c00      	cmp	r4, #0
    a816:	f43f adfd 	beq.w	a414 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a81a:	2100      	movs	r1, #0
    a81c:	f240 706b 	movw	r0, #1899	; 0x76b
    a820:	f3af 8000 	nop.w
    a824:	e5f6      	b.n	a414 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a826:	f898 2049 	ldrb.w	r2, [r8, #73]	; 0x49
    a82a:	2101      	movs	r1, #1
    a82c:	4391      	bics	r1, r2
    a82e:	f888 1049 	strb.w	r1, [r8, #73]	; 0x49
    a832:	f888 0039 	strb.w	r0, [r8, #57]	; 0x39
    a836:	e7cf      	b.n	a7d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x45c>
    a838:	f8d8 0010 	ldr.w	r0, [r8, #16]
    a83c:	1b80      	subs	r0, r0, r6
    a83e:	f006 f89f 	bl	10980 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a842:	6879      	ldr	r1, [r7, #4]
    a844:	b921      	cbnz	r1, a850 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d4>
    a846:	e004      	b.n	a852 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d6>
    a848:	6879      	ldr	r1, [r7, #4]
    a84a:	f04f 30ff 	mov.w	r0, #4294967295
    a84e:	b101      	cbz	r1, a852 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4d6>
    a850:	4788      	blx	r1
    a852:	f1ba 0f00 	cmp.w	sl, #0
    a856:	d022      	beq.n	a89e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x522>
    a858:	b125      	cbz	r5, a864 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e8>
    a85a:	2100      	movs	r1, #0
    a85c:	f240 7099 	movw	r0, #1945	; 0x799
    a860:	f3af 8000 	nop.w
    a864:	b18c      	cbz	r4, a88a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x50e>
    a866:	f898 0049 	ldrb.w	r0, [r8, #73]	; 0x49
    a86a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    a86e:	4440      	add	r0, r8
    a870:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
    a874:	2820      	cmp	r0, #32
    a876:	d008      	beq.n	a88a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x50e>
    a878:	b125      	cbz	r5, a884 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x508>
    a87a:	2100      	movs	r1, #0
    a87c:	f44f 60f4 	mov.w	r0, #1952	; 0x7a0
    a880:	f3af 8000 	nop.w
    a884:	7878      	ldrb	r0, [r7, #1]
    a886:	f002 f823 	bl	c8d0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a88a:	b125      	cbz	r5, a896 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x51a>
    a88c:	2100      	movs	r1, #0
    a88e:	f240 70a5 	movw	r0, #1957	; 0x7a5
    a892:	f3af 8000 	nop.w
    a896:	b019      	add	sp, #100	; 0x64
    a898:	4620      	mov	r0, r4
    a89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a89e:	4805      	ldr	r0, [pc, #20]	; (a8b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x538>)
    a8a0:	2800      	cmp	r0, #0
    a8a2:	bf18      	it	ne
    a8a4:	f3af 8000 	nopne.w
    a8a8:	b662      	cpsie	i
    a8aa:	e7d5      	b.n	a858 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4dc>
    a8ac:	00000000 	.word	0x00000000
    a8b0:	20000320 	.word	0x20000320
    a8b4:	00000000 	.word	0x00000000

0000a8b8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    a8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a8bc:	4604      	mov	r4, r0
    a8be:	7800      	ldrb	r0, [r0, #0]
    a8c0:	b095      	sub	sp, #84	; 0x54
    a8c2:	b118      	cbz	r0, a8cc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    a8c4:	b015      	add	sp, #84	; 0x54
    a8c6:	2000      	movs	r0, #0
    a8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a8cc:	48d4      	ldr	r0, [pc, #848]	; (ac20 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x368>)
    a8ce:	6800      	ldr	r0, [r0, #0]
    a8d0:	05c0      	lsls	r0, r0, #23
    a8d2:	0dc0      	lsrs	r0, r0, #23
    a8d4:	d00e      	beq.n	a8f4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    a8d6:	3810      	subs	r0, #16
    a8d8:	b240      	sxtb	r0, r0
    a8da:	2800      	cmp	r0, #0
    a8dc:	bfb8      	it	lt
    a8de:	f000 000f 	andlt.w	r0, r0, #15
    a8e2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a8e6:	bfac      	ite	ge
    a8e8:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a8ec:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a8f0:	0940      	lsrs	r0, r0, #5
    a8f2:	d0e7      	beq.n	a8c4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    a8f4:	a80b      	add	r0, sp, #44	; 0x2c
    a8f6:	900f      	str	r0, [sp, #60]	; 0x3c
    a8f8:	f8df a328 	ldr.w	sl, [pc, #808]	; ac24 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x36c>
    a8fc:	f1ba 0f00 	cmp.w	sl, #0
    a900:	d004      	beq.n	a90c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x54>
    a902:	2100      	movs	r1, #0
    a904:	f240 50d2 	movw	r0, #1490	; 0x5d2
    a908:	f3af 8000 	nop.w
    a90c:	f8df 8318 	ldr.w	r8, [pc, #792]	; ac28 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x370>
    a910:	f898 6049 	ldrb.w	r6, [r8, #73]	; 0x49
    a914:	2500      	movs	r5, #0
    a916:	f888 5039 	strb.w	r5, [r8, #57]	; 0x39
    a91a:	9503      	str	r5, [sp, #12]
    a91c:	f1ba 0f00 	cmp.w	sl, #0
    a920:	d004      	beq.n	a92c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x74>
    a922:	2100      	movs	r1, #0
    a924:	f240 50d7 	movw	r0, #1495	; 0x5d7
    a928:	f3af 8000 	nop.w
    a92c:	2001      	movs	r0, #1
    a92e:	ea20 0906 	bic.w	r9, r0, r6
    a932:	48be      	ldr	r0, [pc, #760]	; (ac2c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x374>)
    a934:	2240      	movs	r2, #64	; 0x40
    a936:	eb00 1186 	add.w	r1, r0, r6, lsl #6
    a93a:	eb00 1089 	add.w	r0, r0, r9, lsl #6
    a93e:	f006 f95b 	bl	10bf8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a942:	f1ba 0f00 	cmp.w	sl, #0
    a946:	d004      	beq.n	a952 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x9a>
    a948:	2100      	movs	r1, #0
    a94a:	f240 5049 	movw	r0, #1353	; 0x549
    a94e:	f3af 8000 	nop.w
    a952:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    a956:	eb00 0208 	add.w	r2, r0, r8
    a95a:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a95e:	4440      	add	r0, r8
    a960:	f1ba 0f00 	cmp.w	sl, #0
    a964:	8e01      	ldrh	r1, [r0, #48]	; 0x30
    a966:	8611      	strh	r1, [r2, #48]	; 0x30
    a968:	f890 0032 	ldrb.w	r0, [r0, #50]	; 0x32
    a96c:	f882 0032 	strb.w	r0, [r2, #50]	; 0x32
    a970:	d004      	beq.n	a97c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc4>
    a972:	2100      	movs	r1, #0
    a974:	f240 504d 	movw	r0, #1357	; 0x54d
    a978:	f3af 8000 	nop.w
    a97c:	f1ba 0f00 	cmp.w	sl, #0
    a980:	d004      	beq.n	a98c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xd4>
    a982:	2100      	movs	r1, #0
    a984:	f240 50dc 	movw	r0, #1500	; 0x5dc
    a988:	f3af 8000 	nop.w
    a98c:	f001 fcb0 	bl	c2f0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    a990:	460f      	mov	r7, r1
    a992:	8922      	ldrh	r2, [r4, #8]
    a994:	4629      	mov	r1, r5
    a996:	f362 411f 	bfi	r1, r2, #16, #16
    a99a:	4606      	mov	r6, r0
    a99c:	7aa2      	ldrb	r2, [r4, #10]
    a99e:	4628      	mov	r0, r5
    a9a0:	f362 0007 	bfi	r0, r2, #0, #8
    a9a4:	7ae2      	ldrb	r2, [r4, #11]
    a9a6:	f10d 0b20 	add.w	fp, sp, #32
    a9aa:	f362 200f 	bfi	r0, r2, #8, #8
    a9ae:	7822      	ldrb	r2, [r4, #0]
    a9b0:	9508      	str	r5, [sp, #32]
    a9b2:	f362 4017 	bfi	r0, r2, #16, #8
    a9b6:	e9cd 510a 	strd	r5, r1, [sp, #40]	; 0x28
    a9ba:	e9cd 050c 	strd	r0, r5, [sp, #48]	; 0x30
    a9be:	9509      	str	r5, [sp, #36]	; 0x24
    a9c0:	7820      	ldrb	r0, [r4, #0]
    a9c2:	b378      	cbz	r0, aa24 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x16c>
    a9c4:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
    a9c8:	4899      	ldr	r0, [pc, #612]	; (ac30 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x378>)
    a9ca:	f10b 020c 	add.w	r2, fp, #12
    a9ce:	1a40      	subs	r0, r0, r1
    a9d0:	a90e      	add	r1, sp, #56	; 0x38
    a9d2:	f000 fe4d 	bl	b670 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a9d6:	2200      	movs	r2, #0
    a9d8:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
    a9dc:	4630      	mov	r0, r6
    a9de:	4639      	mov	r1, r7
    a9e0:	f7fe fcf8 	bl	93d4 <MPSL_IRQ_RADIO_Handler+0x3ec>
    a9e4:	7ae2      	ldrb	r2, [r4, #11]
    a9e6:	2a00      	cmp	r2, #0
    a9e8:	bf0c      	ite	eq
    a9ea:	227a      	moveq	r2, #122	; 0x7a
    a9ec:	224c      	movne	r2, #76	; 0x4c
    a9ee:	6863      	ldr	r3, [r4, #4]
    a9f0:	f89d c02c 	ldrb.w	ip, [sp, #44]	; 0x2c
    a9f4:	441a      	add	r2, r3
    a9f6:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
    a9fa:	e9cd 0108 	strd	r0, r1, [sp, #32]
    a9fe:	4463      	add	r3, ip
    aa00:	441a      	add	r2, r3
    aa02:	1c90      	adds	r0, r2, #2
    aa04:	f000 fe18 	bl	b638 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    aa08:	f8cd 9000 	str.w	r9, [sp]
    aa0c:	900a      	str	r0, [sp, #40]	; 0x28
    aa0e:	4632      	mov	r2, r6
    aa10:	463b      	mov	r3, r7
    aa12:	4659      	mov	r1, fp
    aa14:	6920      	ldr	r0, [r4, #16]
    aa16:	f7fe fb41 	bl	909c <MPSL_IRQ_RADIO_Handler+0xb4>
    aa1a:	2800      	cmp	r0, #0
    aa1c:	bf08      	it	eq
    aa1e:	e9cd 6708 	strdeq	r6, r7, [sp, #32]
    aa22:	e04e      	b.n	aac2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20a>
    aa24:	e7ff      	b.n	aa26 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x16e>
    aa26:	4630      	mov	r0, r6
    aa28:	4639      	mov	r1, r7
    aa2a:	f000 fd7d 	bl	b528 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    aa2e:	f8df c204 	ldr.w	ip, [pc, #516]	; ac34 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x37c>
    aa32:	4602      	mov	r2, r0
    aa34:	eb10 0c0c 	adds.w	ip, r0, ip
    aa38:	460b      	mov	r3, r1
    aa3a:	f141 0b00 	adc.w	fp, r1, #0
    aa3e:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    aa42:	ebb0 0c0c 	subs.w	ip, r0, ip
    aa46:	eb71 0c0b 	sbcs.w	ip, r1, fp
    aa4a:	d232      	bcs.n	aab2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fa>
    aa4c:	3229      	adds	r2, #41	; 0x29
    aa4e:	f143 0300 	adc.w	r3, r3, #0
    aa52:	1a82      	subs	r2, r0, r2
    aa54:	eb71 0203 	sbcs.w	r2, r1, r3
    aa58:	d32b      	bcc.n	aab2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fa>
    aa5a:	8922      	ldrh	r2, [r4, #8]
    aa5c:	1c52      	adds	r2, r2, #1
    aa5e:	ebb0 0b02 	subs.w	fp, r0, r2
    aa62:	eb61 0c05 	sbc.w	ip, r1, r5
    aa66:	1a80      	subs	r0, r0, r2
    aa68:	eb71 0005 	sbcs.w	r0, r1, r5
    aa6c:	bf3c      	itt	cc
    aa6e:	f04f 0b00 	movcc.w	fp, #0
    aa72:	46dc      	movcc	ip, fp
    aa74:	980f      	ldr	r0, [sp, #60]	; 0x3c
    aa76:	9000      	str	r0, [sp, #0]
    aa78:	ab12      	add	r3, sp, #72	; 0x48
    aa7a:	aa07      	add	r2, sp, #28
    aa7c:	4658      	mov	r0, fp
    aa7e:	4661      	mov	r1, ip
    aa80:	f000 fd76 	bl	b570 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    aa84:	7ae0      	ldrb	r0, [r4, #11]
    aa86:	2800      	cmp	r0, #0
    aa88:	bf0c      	ite	eq
    aa8a:	207a      	moveq	r0, #122	; 0x7a
    aa8c:	204c      	movne	r0, #76	; 0x4c
    aa8e:	9907      	ldr	r1, [sp, #28]
    aa90:	8922      	ldrh	r2, [r4, #8]
    aa92:	4408      	add	r0, r1
    aa94:	6861      	ldr	r1, [r4, #4]
    aa96:	4411      	add	r1, r2
    aa98:	4408      	add	r0, r1
    aa9a:	1c80      	adds	r0, r0, #2
    aa9c:	f000 fdcc 	bl	b638 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    aaa0:	4601      	mov	r1, r0
    aaa2:	e9dd 0212 	ldrd	r0, r2, [sp, #72]	; 0x48
    aaa6:	e9cd 0208 	strd	r0, r2, [sp, #32]
    aaaa:	1a08      	subs	r0, r1, r0
    aaac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    aab0:	e006      	b.n	aac0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x208>
    aab2:	1e70      	subs	r0, r6, #1
    aab4:	f147 31ff 	adc.w	r1, r7, #4294967295
    aab8:	e9cd 0108 	strd	r0, r1, [sp, #32]
    aabc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    aac0:	900a      	str	r0, [sp, #40]	; 0x28
    aac2:	f1ba 0f00 	cmp.w	sl, #0
    aac6:	d004      	beq.n	aad2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x21a>
    aac8:	2100      	movs	r1, #0
    aaca:	f240 50e2 	movw	r0, #1506	; 0x5e2
    aace:	f3af 8000 	nop.w
    aad2:	e9d8 1005 	ldrd	r1, r0, [r8, #20]
    aad6:	f8d8 2010 	ldr.w	r2, [r8, #16]
    aada:	1810      	adds	r0, r2, r0
    aadc:	f898 204a 	ldrb.w	r2, [r8, #74]	; 0x4a
    aae0:	4169      	adcs	r1, r5
    aae2:	2a20      	cmp	r2, #32
    aae4:	d009      	beq.n	aafa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x242>
    aae6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    aaea:	1a12      	subs	r2, r2, r0
    aaec:	eb73 0201 	sbcs.w	r2, r3, r1
    aaf0:	d203      	bcs.n	aafa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x242>
    aaf2:	e9cd 0108 	strd	r0, r1, [sp, #32]
    aaf6:	2001      	movs	r0, #1
    aaf8:	9003      	str	r0, [sp, #12]
    aafa:	f1ba 0f00 	cmp.w	sl, #0
    aafe:	d004      	beq.n	ab0a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x252>
    ab00:	2100      	movs	r1, #0
    ab02:	f240 50ed 	movw	r0, #1517	; 0x5ed
    ab06:	f3af 8000 	nop.w
    ab0a:	9908      	ldr	r1, [sp, #32]
    ab0c:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    ab10:	1a0a      	subs	r2, r1, r0
    ab12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ab14:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    ab18:	18c9      	adds	r1, r1, r3
    ab1a:	1a08      	subs	r0, r1, r0
    ab1c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ab20:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    ab24:	bf98      	it	ls
    ab26:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    ab2a:	d80b      	bhi.n	ab44 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x28c>
    ab2c:	4632      	mov	r2, r6
    ab2e:	463b      	mov	r3, r7
    ab30:	a908      	add	r1, sp, #32
    ab32:	4840      	ldr	r0, [pc, #256]	; (ac34 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x37c>)
    ab34:	f8cd 9000 	str.w	r9, [sp]
    ab38:	f7fe fab0 	bl	909c <MPSL_IRQ_RADIO_Handler+0xb4>
    ab3c:	9903      	ldr	r1, [sp, #12]
    ab3e:	4308      	orrs	r0, r1
    ab40:	d147      	bne.n	abd2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x31a>
    ab42:	e060      	b.n	ac06 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34e>
    ab44:	f8bd b02e 	ldrh.w	fp, [sp, #46]	; 0x2e
    ab48:	aa05      	add	r2, sp, #20
    ab4a:	a901      	add	r1, sp, #4
    ab4c:	4658      	mov	r0, fp
    ab4e:	f000 fd8f 	bl	b670 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    ab52:	f000 fdd9 	bl	b708 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    ab56:	f000 fd6f 	bl	b638 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    ab5a:	4681      	mov	r9, r0
    ab5c:	f898 004a 	ldrb.w	r0, [r8, #74]	; 0x4a
    ab60:	2820      	cmp	r0, #32
    ab62:	d00c      	beq.n	ab7e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2c6>
    ab64:	e9d8 2005 	ldrd	r2, r0, [r8, #20]
    ab68:	f8d8 3010 	ldr.w	r3, [r8, #16]
    ab6c:	f110 0c06 	adds.w	ip, r0, #6
    ab70:	f145 0000 	adc.w	r0, r5, #0
    ab74:	eb13 060c 	adds.w	r6, r3, ip
    ab78:	eb42 0700 	adc.w	r7, r2, r0
    ab7c:	e024      	b.n	abc8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x310>
    ab7e:	360a      	adds	r6, #10
    ab80:	f147 0700 	adc.w	r7, r7, #0
    ab84:	f1bb 0f00 	cmp.w	fp, #0
    ab88:	d017      	beq.n	abba <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x302>
    ab8a:	f001 f8ad 	bl	bce8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    ab8e:	b9a0      	cbnz	r0, abba <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x302>
    ab90:	f000 ff52 	bl	ba38 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    ab94:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    ab98:	bf08      	it	eq
    ab9a:	210d      	moveq	r1, #13
    ab9c:	d00b      	beq.n	abb6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2fe>
    ab9e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    aba2:	3856      	subs	r0, #86	; 0x56
    aba4:	bf08      	it	eq
    aba6:	211c      	moveq	r1, #28
    aba8:	d005      	beq.n	abb6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2fe>
    abaa:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    abae:	389f      	subs	r0, #159	; 0x9f
    abb0:	bf14      	ite	ne
    abb2:	4629      	movne	r1, r5
    abb4:	2132      	moveq	r1, #50	; 0x32
    abb6:	198e      	adds	r6, r1, r6
    abb8:	416f      	adcs	r7, r5
    abba:	9801      	ldr	r0, [sp, #4]
    abbc:	4581      	cmp	r9, r0
    abbe:	d903      	bls.n	abc8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x310>
    abc0:	eba9 0000 	sub.w	r0, r9, r0
    abc4:	1986      	adds	r6, r0, r6
    abc6:	416f      	adcs	r7, r5
    abc8:	201f      	movs	r0, #31
    abca:	e9cd 6708 	strd	r6, r7, [sp, #32]
    abce:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
    abd2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    abd6:	f000 fca7 	bl	b528 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    abda:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
    abde:	1882      	adds	r2, r0, r2
    abe0:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
    abe4:	4169      	adcs	r1, r5
    abe6:	1812      	adds	r2, r2, r0
    abe8:	eb41 0005 	adc.w	r0, r1, r5
    abec:	1c51      	adds	r1, r2, #1
    abee:	f140 0000 	adc.w	r0, r0, #0
    abf2:	e9c4 1004 	strd	r1, r0, [r4, #16]
    abf6:	f1ba 0f00 	cmp.w	sl, #0
    abfa:	d004      	beq.n	ac06 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34e>
    abfc:	2100      	movs	r1, #0
    abfe:	f240 6007 	movw	r0, #1543	; 0x607
    ac02:	f3af 8000 	nop.w
    ac06:	f898 0039 	ldrb.w	r0, [r8, #57]	; 0x39
    ac0a:	f88d 0000 	strb.w	r0, [sp]
    ac0e:	f89d 0000 	ldrb.w	r0, [sp]
    ac12:	2800      	cmp	r0, #0
    ac14:	f47f ae70 	bne.w	a8f8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x40>
    ac18:	b015      	add	sp, #84	; 0x54
    ac1a:	2001      	movs	r0, #1
    ac1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ac20:	e000ed04 	.word	0xe000ed04
    ac24:	00000000 	.word	0x00000000
    ac28:	20000ff8 	.word	0x20000ff8
    ac2c:	20000f78 	.word	0x20000f78
    ac30:	1e847fff 	.word	0x1e847fff
    ac34:	0f424000 	.word	0x0f424000

0000ac38 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    ac38:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ac3c:	4d9d      	ldr	r5, [pc, #628]	; (aeb4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x27c>)
    ac3e:	b08c      	sub	sp, #48	; 0x30
    ac40:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
    ac44:	2000      	movs	r0, #0
    ac46:	9007      	str	r0, [sp, #28]
    ac48:	9008      	str	r0, [sp, #32]
    ac4a:	2001      	movs	r0, #1
    ac4c:	4c9a      	ldr	r4, [pc, #616]	; (aeb8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x280>)
    ac4e:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    ac52:	f04f 0800 	mov.w	r8, #0
    ac56:	4607      	mov	r7, r0
    ac58:	9006      	str	r0, [sp, #24]
    ac5a:	b124      	cbz	r4, ac66 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    ac5c:	2100      	movs	r1, #0
    ac5e:	f240 70b6 	movw	r0, #1974	; 0x7b6
    ac62:	f3af 8000 	nop.w
    ac66:	9806      	ldr	r0, [sp, #24]
    ac68:	2800      	cmp	r0, #0
    ac6a:	d03c      	beq.n	ace6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    ac6c:	f885 8039 	strb.w	r8, [r5, #57]	; 0x39
    ac70:	b124      	cbz	r4, ac7c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    ac72:	2100      	movs	r1, #0
    ac74:	f240 70bb 	movw	r0, #1979	; 0x7bb
    ac78:	f3af 8000 	nop.w
    ac7c:	f895 a049 	ldrb.w	sl, [r5, #73]	; 0x49
    ac80:	2240      	movs	r2, #64	; 0x40
    ac82:	ea27 060a 	bic.w	r6, r7, sl
    ac86:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    ac8a:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    ac8e:	4683      	mov	fp, r0
    ac90:	f005 ffb2 	bl	10bf8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ac94:	b124      	cbz	r4, aca0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    ac96:	2100      	movs	r1, #0
    ac98:	f240 5049 	movw	r0, #1353	; 0x549
    ac9c:	f3af 8000 	nop.w
    aca0:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    aca4:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    aca8:	4428      	add	r0, r5
    acaa:	4429      	add	r1, r5
    acac:	9000      	str	r0, [sp, #0]
    acae:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
    acb0:	8602      	strh	r2, [r0, #48]	; 0x30
    acb2:	f891 1032 	ldrb.w	r1, [r1, #50]	; 0x32
    acb6:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
    acba:	b124      	cbz	r4, acc6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    acbc:	2100      	movs	r1, #0
    acbe:	f240 504d 	movw	r0, #1357	; 0x54d
    acc2:	f3af 8000 	nop.w
    acc6:	f895 0039 	ldrb.w	r0, [r5, #57]	; 0x39
    acca:	f88d 0008 	strb.w	r0, [sp, #8]
    acce:	f89d 0008 	ldrb.w	r0, [sp, #8]
    acd2:	b178      	cbz	r0, acf4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    acd4:	2c00      	cmp	r4, #0
    acd6:	bf1c      	itt	ne
    acd8:	2100      	movne	r1, #0
    acda:	f240 70c1 	movwne	r0, #1985	; 0x7c1
    acde:	d0bc      	beq.n	ac5a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    ace0:	f3af 8000 	nop.w
    ace4:	e7b9      	b.n	ac5a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    ace6:	4875      	ldr	r0, [pc, #468]	; (aebc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    ace8:	2800      	cmp	r0, #0
    acea:	bf18      	it	ne
    acec:	f3af 8000 	nopne.w
    acf0:	b662      	cpsie	i
    acf2:	e7bb      	b.n	ac6c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    acf4:	b124      	cbz	r4, ad00 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    acf6:	2100      	movs	r1, #0
    acf8:	f240 70c5 	movw	r0, #1989	; 0x7c5
    acfc:	f3af 8000 	nop.w
    ad00:	980c      	ldr	r0, [sp, #48]	; 0x30
    ad02:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    ad06:	2803      	cmp	r0, #3
    ad08:	d17e      	bne.n	ae08 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    ad0a:	9a00      	ldr	r2, [sp, #0]
    ad0c:	990c      	ldr	r1, [sp, #48]	; 0x30
    ad0e:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
    ad12:	4288      	cmp	r0, r1
    ad14:	bf14      	ite	ne
    ad16:	f04f 0a00 	movne.w	sl, #0
    ad1a:	f04f 0a01 	moveq.w	sl, #1
    ad1e:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    ad22:	4683      	mov	fp, r0
    ad24:	2220      	movs	r2, #32
    ad26:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    ad2a:	e003      	b.n	ad34 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    ad2c:	4602      	mov	r2, r0
    ad2e:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    ad32:	7840      	ldrb	r0, [r0, #1]
    ad34:	4288      	cmp	r0, r1
    ad36:	d002      	beq.n	ad3e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    ad38:	2820      	cmp	r0, #32
    ad3a:	d00a      	beq.n	ad52 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    ad3c:	e7f6      	b.n	ad2c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    ad3e:	2820      	cmp	r0, #32
    ad40:	d007      	beq.n	ad52 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    ad42:	4583      	cmp	fp, r0
    ad44:	d107      	bne.n	ad56 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    ad46:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    ad4a:	7840      	ldrb	r0, [r0, #1]
    ad4c:	f88c 0000 	strb.w	r0, [ip]
    ad50:	e007      	b.n	ad62 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    ad52:	4640      	mov	r0, r8
    ad54:	e00c      	b.n	ad70 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    ad56:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    ad5a:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    ad5e:	7840      	ldrb	r0, [r0, #1]
    ad60:	7048      	strb	r0, [r1, #1]
    ad62:	b124      	cbz	r4, ad6e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    ad64:	2100      	movs	r1, #0
    ad66:	f240 40b1 	movw	r0, #1201	; 0x4b1
    ad6a:	f3af 8000 	nop.w
    ad6e:	4638      	mov	r0, r7
    ad70:	46c3      	mov	fp, r8
    ad72:	ea10 0f0a 	tst.w	r0, sl
    ad76:	bf18      	it	ne
    ad78:	46bb      	movne	fp, r7
    ad7a:	2800      	cmp	r0, #0
    ad7c:	d04e      	beq.n	ae1c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    ad7e:	b124      	cbz	r4, ad8a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    ad80:	2100      	movs	r1, #0
    ad82:	f240 70ca 	movw	r0, #1994	; 0x7ca
    ad86:	f3af 8000 	nop.w
    ad8a:	4632      	mov	r2, r6
    ad8c:	2001      	movs	r0, #1
    ad8e:	990c      	ldr	r1, [sp, #48]	; 0x30
    ad90:	f7fe ffc0 	bl	9d14 <MPSL_IRQ_RADIO_Handler+0xd2c>
    ad94:	b124      	cbz	r4, ada0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    ad96:	2100      	movs	r1, #0
    ad98:	f240 70d3 	movw	r0, #2003	; 0x7d3
    ad9c:	f3af 8000 	nop.w
    ada0:	4847      	ldr	r0, [pc, #284]	; (aec0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x288>)
    ada2:	2800      	cmp	r0, #0
    ada4:	bf18      	it	ne
    ada6:	f3af 8000 	nopne.w
    adaa:	f3ef 8010 	mrs	r0, PRIMASK
    adae:	b672      	cpsid	i
    adb0:	9006      	str	r0, [sp, #24]
    adb2:	b124      	cbz	r4, adbe <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    adb4:	2100      	movs	r1, #0
    adb6:	f44f 60fb 	mov.w	r0, #2008	; 0x7d8
    adba:	f3af 8000 	nop.w
    adbe:	f895 0039 	ldrb.w	r0, [r5, #57]	; 0x39
    adc2:	f88d 0008 	strb.w	r0, [sp, #8]
    adc6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    adca:	b138      	cbz	r0, addc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    adcc:	2c00      	cmp	r4, #0
    adce:	bf1c      	itt	ne
    add0:	2100      	movne	r1, #0
    add2:	f240 70dc 	movwne	r0, #2012	; 0x7dc
    add6:	f43f af40 	beq.w	ac5a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    adda:	e781      	b.n	ace0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    addc:	f1bb 0f00 	cmp.w	fp, #0
    ade0:	d009      	beq.n	adf6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    ade2:	f895 004a 	ldrb.w	r0, [r5, #74]	; 0x4a
    ade6:	2820      	cmp	r0, #32
    ade8:	d105      	bne.n	adf6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    adea:	4631      	mov	r1, r6
    adec:	2002      	movs	r0, #2
    adee:	f7fe ffc3 	bl	9d78 <MPSL_IRQ_RADIO_Handler+0xd90>
    adf2:	9008      	str	r0, [sp, #32]
    adf4:	b1f8      	cbz	r0, ae36 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    adf6:	b124      	cbz	r4, ae02 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    adf8:	2100      	movs	r1, #0
    adfa:	f44f 60fe 	mov.w	r0, #2032	; 0x7f0
    adfe:	f3af 8000 	nop.w
    ae02:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
    ae06:	e000      	b.n	ae0a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    ae08:	e008      	b.n	ae1c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    ae0a:	ea27 0000 	bic.w	r0, r7, r0
    ae0e:	f885 0049 	strb.w	r0, [r5, #73]	; 0x49
    ae12:	20ff      	movs	r0, #255	; 0xff
    ae14:	f885 0039 	strb.w	r0, [r5, #57]	; 0x39
    ae18:	2001      	movs	r0, #1
    ae1a:	9007      	str	r0, [sp, #28]
    ae1c:	b124      	cbz	r4, ae28 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    ae1e:	2100      	movs	r1, #0
    ae20:	f240 70f9 	movw	r0, #2041	; 0x7f9
    ae24:	f3af 8000 	nop.w
    ae28:	9808      	ldr	r0, [sp, #32]
    ae2a:	4e26      	ldr	r6, [pc, #152]	; (aec4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x28c>)
    ae2c:	2802      	cmp	r0, #2
    ae2e:	d009      	beq.n	ae44 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    ae30:	2801      	cmp	r0, #1
    ae32:	d027      	beq.n	ae84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x24c>
    ae34:	e02b      	b.n	ae8e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    ae36:	b354      	cbz	r4, ae8e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    ae38:	2100      	movs	r1, #0
    ae3a:	f240 70eb 	movw	r0, #2027	; 0x7eb
    ae3e:	f3af 8000 	nop.w
    ae42:	e7ec      	b.n	ae1e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    ae44:	f001 fa54 	bl	c2f0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    ae48:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
    ae4c:	ebb3 0c00 	subs.w	ip, r3, r0
    ae50:	eb72 0c01 	sbcs.w	ip, r2, r1
    ae54:	d204      	bcs.n	ae60 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    ae56:	f240 71ff 	movw	r1, #2047	; 0x7ff
    ae5a:	2070      	movs	r0, #112	; 0x70
    ae5c:	f001 fc64 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ae60:	1a18      	subs	r0, r3, r0
    ae62:	eb62 0101 	sbc.w	r1, r2, r1
    ae66:	f5b0 0200 	subs.w	r2, r0, #8388608	; 0x800000
    ae6a:	f171 0100 	sbcs.w	r1, r1, #0
    ae6e:	d304      	bcc.n	ae7a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x242>
    ae70:	f44f 6100 	mov.w	r1, #2048	; 0x800
    ae74:	2070      	movs	r0, #112	; 0x70
    ae76:	f001 fc57 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ae7a:	f005 fd81 	bl	10980 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    ae7e:	6871      	ldr	r1, [r6, #4]
    ae80:	b129      	cbz	r1, ae8e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    ae82:	e003      	b.n	ae8c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>
    ae84:	6871      	ldr	r1, [r6, #4]
    ae86:	f04f 30ff 	mov.w	r0, #4294967295
    ae8a:	b101      	cbz	r1, ae8e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x256>
    ae8c:	4788      	blx	r1
    ae8e:	9806      	ldr	r0, [sp, #24]
    ae90:	b148      	cbz	r0, aea6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x26e>
    ae92:	b124      	cbz	r4, ae9e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x266>
    ae94:	2100      	movs	r1, #0
    ae96:	f44f 6001 	mov.w	r0, #2064	; 0x810
    ae9a:	f3af 8000 	nop.w
    ae9e:	9807      	ldr	r0, [sp, #28]
    aea0:	b00d      	add	sp, #52	; 0x34
    aea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aea6:	4805      	ldr	r0, [pc, #20]	; (aebc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x284>)
    aea8:	2800      	cmp	r0, #0
    aeaa:	bf18      	it	ne
    aeac:	f3af 8000 	nopne.w
    aeb0:	b662      	cpsie	i
    aeb2:	e7ee      	b.n	ae92 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25a>
    aeb4:	20000ff8 	.word	0x20000ff8
	...
    aec4:	20000320 	.word	0x20000320

0000aec8 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI>:
    aec8:	2820      	cmp	r0, #32
    aeca:	bf24      	itt	cs
    aecc:	2000      	movcs	r0, #0
    aece:	4770      	bxcs	lr
    aed0:	4b03      	ldr	r3, [pc, #12]	; (aee0 <sym_MLZNDMDYRI6WNTNQ4RIQGPD423CK7RT4YVI5CAI+0x18>)
    aed2:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    aed6:	e9c0 1200 	strd	r1, r2, [r0]
    aeda:	2001      	movs	r0, #1
    aedc:	4770      	bx	lr
    aede:	0000      	.short	0x0000
    aee0:	20000b78 	.word	0x20000b78

0000aee4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    aee4:	b510      	push	{r4, lr}
    aee6:	2820      	cmp	r0, #32
    aee8:	d211      	bcs.n	af0e <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    aeea:	490e      	ldr	r1, [pc, #56]	; (af24 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    aeec:	f891 3049 	ldrb.w	r3, [r1, #73]	; 0x49
    aef0:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    aef4:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    aef8:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    aefc:	b13b      	cbz	r3, af0e <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    aefe:	f891 3049 	ldrb.w	r3, [r1, #73]	; 0x49
    af02:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    af06:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    af0a:	2a01      	cmp	r2, #1
    af0c:	d001      	beq.n	af12 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    af0e:	2000      	movs	r0, #0
    af10:	bd10      	pop	{r4, pc}
    af12:	f891 2049 	ldrb.w	r2, [r1, #73]	; 0x49
    af16:	4601      	mov	r1, r0
    af18:	2000      	movs	r0, #0
    af1a:	f7fe fefb 	bl	9d14 <MPSL_IRQ_RADIO_Handler+0xd2c>
    af1e:	2001      	movs	r0, #1
    af20:	bd10      	pop	{r4, pc}
    af22:	0000      	.short	0x0000
    af24:	20000ff8 	.word	0x20000ff8

0000af28 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    af28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    af2c:	4e86      	ldr	r6, [pc, #536]	; (b148 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    af2e:	4680      	mov	r8, r0
    af30:	f896 0049 	ldrb.w	r0, [r6, #73]	; 0x49
    af34:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    af38:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    af3c:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    af40:	2800      	cmp	r0, #0
    af42:	d071      	beq.n	b028 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    af44:	f896 9049 	ldrb.w	r9, [r6, #73]	; 0x49
    af48:	4d80      	ldr	r5, [pc, #512]	; (b14c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    af4a:	b125      	cbz	r5, af56 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    af4c:	2100      	movs	r1, #0
    af4e:	f640 307f 	movw	r0, #2943	; 0xb7f
    af52:	f3af 8000 	nop.w
    af56:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    af5a:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    af5e:	2801      	cmp	r0, #1
    af60:	d018      	beq.n	af94 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    af62:	b2c0      	uxtb	r0, r0
    af64:	2804      	cmp	r0, #4
    af66:	bf1c      	itt	ne
    af68:	2805      	cmpne	r0, #5
    af6a:	2806      	cmpne	r0, #6
    af6c:	d061      	beq.n	b032 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    af6e:	b12d      	cbz	r5, af7c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    af70:	f04f 0100 	mov.w	r1, #0
    af74:	f640 308b 	movw	r0, #2955	; 0xb8b
    af78:	f3af 8000 	nop.w
    af7c:	f005 fe38 	bl	10bf0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    af80:	b125      	cbz	r5, af8c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    af82:	2100      	movs	r1, #0
    af84:	f640 308f 	movw	r0, #2959	; 0xb8f
    af88:	f3af 8000 	nop.w
    af8c:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    af90:	2801      	cmp	r0, #1
    af92:	d1e6      	bne.n	af62 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    af94:	2401      	movs	r4, #1
    af96:	b125      	cbz	r5, afa2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    af98:	2100      	movs	r1, #0
    af9a:	f640 3096 	movw	r0, #2966	; 0xb96
    af9e:	f3af 8000 	nop.w
    afa2:	2c00      	cmp	r4, #0
    afa4:	d04b      	beq.n	b03e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    afa6:	2000      	movs	r0, #0
    afa8:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
    afac:	b125      	cbz	r5, afb8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    afae:	2100      	movs	r1, #0
    afb0:	f640 309b 	movw	r0, #2971	; 0xb9b
    afb4:	f3af 8000 	nop.w
    afb8:	f896 b049 	ldrb.w	fp, [r6, #73]	; 0x49
    afbc:	2001      	movs	r0, #1
    afbe:	ea20 090b 	bic.w	r9, r0, fp
    afc2:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    afc6:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    afca:	2240      	movs	r2, #64	; 0x40
    afcc:	f005 fe14 	bl	10bf8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    afd0:	b125      	cbz	r5, afdc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    afd2:	2100      	movs	r1, #0
    afd4:	f240 5049 	movw	r0, #1353	; 0x549
    afd8:	f3af 8000 	nop.w
    afdc:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    afe0:	eb00 0a06 	add.w	sl, r0, r6
    afe4:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    afe8:	4430      	add	r0, r6
    afea:	8e01      	ldrh	r1, [r0, #48]	; 0x30
    afec:	f8aa 1030 	strh.w	r1, [sl, #48]	; 0x30
    aff0:	f890 0032 	ldrb.w	r0, [r0, #50]	; 0x32
    aff4:	f88a 0032 	strb.w	r0, [sl, #50]	; 0x32
    aff8:	b125      	cbz	r5, b004 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    affa:	2100      	movs	r1, #0
    affc:	f240 504d 	movw	r0, #1357	; 0x54d
    b000:	f3af 8000 	nop.w
    b004:	f896 0039 	ldrb.w	r0, [r6, #57]	; 0x39
    b008:	f88d 0000 	strb.w	r0, [sp]
    b00c:	f89d 0000 	ldrb.w	r0, [sp]
    b010:	b1e0      	cbz	r0, b04c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    b012:	2d00      	cmp	r5, #0
    b014:	bf1c      	itt	ne
    b016:	2100      	movne	r1, #0
    b018:	f640 30a1 	movwne	r0, #2977	; 0xba1
    b01c:	d0bb      	beq.n	af96 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    b01e:	bf00      	nop
    b020:	f3af 8000 	nop.w
    b024:	e7b7      	b.n	af96 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    b026:	e7ff      	b.n	b028 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    b028:	f640 3176 	movw	r1, #2934	; 0xb76
    b02c:	2070      	movs	r0, #112	; 0x70
    b02e:	f001 fb7b 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b032:	464a      	mov	r2, r9
    b034:	4641      	mov	r1, r8
    b036:	2001      	movs	r0, #1
    b038:	f7fe fe6c 	bl	9d14 <MPSL_IRQ_RADIO_Handler+0xd2c>
    b03c:	e7a0      	b.n	af80 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    b03e:	4844      	ldr	r0, [pc, #272]	; (b150 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    b040:	2800      	cmp	r0, #0
    b042:	bf18      	it	ne
    b044:	f3af 8000 	nopne.w
    b048:	b662      	cpsie	i
    b04a:	e7ac      	b.n	afa6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    b04c:	b125      	cbz	r5, b058 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    b04e:	2100      	movs	r1, #0
    b050:	f640 30a5 	movw	r0, #2981	; 0xba5
    b054:	f3af 8000 	nop.w
    b058:	f89a 3031 	ldrb.w	r3, [sl, #49]	; 0x31
    b05c:	f10a 0131 	add.w	r1, sl, #49	; 0x31
    b060:	4640      	mov	r0, r8
    b062:	461c      	mov	r4, r3
    b064:	f04f 0b20 	mov.w	fp, #32
    b068:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    b06c:	f10a 0a32 	add.w	sl, sl, #50	; 0x32
    b070:	e004      	b.n	b07c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    b072:	46a3      	mov	fp, r4
    b074:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    b078:	f89c 4001 	ldrb.w	r4, [ip, #1]
    b07c:	4284      	cmp	r4, r0
    b07e:	d002      	beq.n	b086 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    b080:	2c20      	cmp	r4, #32
    b082:	d02b      	beq.n	b0dc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    b084:	e7f5      	b.n	b072 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    b086:	2c20      	cmp	r4, #32
    b088:	d028      	beq.n	b0dc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    b08a:	42a3      	cmp	r3, r4
    b08c:	d104      	bne.n	b098 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    b08e:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    b092:	7840      	ldrb	r0, [r0, #1]
    b094:	7008      	strb	r0, [r1, #0]
    b096:	e005      	b.n	b0a4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    b098:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    b09c:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    b0a0:	7840      	ldrb	r0, [r0, #1]
    b0a2:	7048      	strb	r0, [r1, #1]
    b0a4:	f1ba 0f00 	cmp.w	sl, #0
    b0a8:	d011      	beq.n	b0ce <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    b0aa:	b125      	cbz	r5, b0b6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    b0ac:	2100      	movs	r1, #0
    b0ae:	f240 40a9 	movw	r0, #1193	; 0x4a9
    b0b2:	f3af 8000 	nop.w
    b0b6:	f89a 0000 	ldrb.w	r0, [sl]
    b0ba:	42a0      	cmp	r0, r4
    b0bc:	d107      	bne.n	b0ce <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    b0be:	b125      	cbz	r5, b0ca <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    b0c0:	2100      	movs	r1, #0
    b0c2:	f240 40ac 	movw	r0, #1196	; 0x4ac
    b0c6:	f3af 8000 	nop.w
    b0ca:	f88a b000 	strb.w	fp, [sl]
    b0ce:	b15d      	cbz	r5, b0e8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    b0d0:	2100      	movs	r1, #0
    b0d2:	f240 40b1 	movw	r0, #1201	; 0x4b1
    b0d6:	f3af 8000 	nop.w
    b0da:	e000      	b.n	b0de <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    b0dc:	b125      	cbz	r5, b0e8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    b0de:	2100      	movs	r1, #0
    b0e0:	f640 30a9 	movw	r0, #2985	; 0xba9
    b0e4:	f3af 8000 	nop.w
    b0e8:	481a      	ldr	r0, [pc, #104]	; (b154 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    b0ea:	2800      	cmp	r0, #0
    b0ec:	bf18      	it	ne
    b0ee:	f3af 8000 	nopne.w
    b0f2:	f3ef 8410 	mrs	r4, PRIMASK
    b0f6:	b672      	cpsid	i
    b0f8:	f896 0039 	ldrb.w	r0, [r6, #57]	; 0x39
    b0fc:	f88d 0000 	strb.w	r0, [sp]
    b100:	f89d 0000 	ldrb.w	r0, [sp]
    b104:	b138      	cbz	r0, b116 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    b106:	2d00      	cmp	r5, #0
    b108:	bf1c      	itt	ne
    b10a:	2100      	movne	r1, #0
    b10c:	f640 30af 	movwne	r0, #2991	; 0xbaf
    b110:	f43f af41 	beq.w	af96 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    b114:	e784      	b.n	b020 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    b116:	f886 9049 	strb.w	r9, [r6, #73]	; 0x49
    b11a:	20ff      	movs	r0, #255	; 0xff
    b11c:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
    b120:	b154      	cbz	r4, b138 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    b122:	2d00      	cmp	r5, #0
    b124:	bf08      	it	eq
    b126:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b12a:	2100      	movs	r1, #0
    b12c:	f640 30bc 	movw	r0, #3004	; 0xbbc
    b130:	f3af 8000 	nop.w
    b134:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b138:	4805      	ldr	r0, [pc, #20]	; (b150 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    b13a:	2800      	cmp	r0, #0
    b13c:	bf18      	it	ne
    b13e:	f3af 8000 	nopne.w
    b142:	b662      	cpsie	i
    b144:	e7ed      	b.n	b122 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    b146:	0000      	.short	0x0000
    b148:	20000ff8 	.word	0x20000ff8
	...

0000b158 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    b158:	b570      	push	{r4, r5, r6, lr}
    b15a:	460d      	mov	r5, r1
    b15c:	4606      	mov	r6, r0
    b15e:	f000 fdb1 	bl	bcc4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    b162:	480d      	ldr	r0, [pc, #52]	; (b198 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x40>)
    b164:	f890 2049 	ldrb.w	r2, [r0, #73]	; 0x49
    b168:	2400      	movs	r4, #0
    b16a:	3880      	subs	r0, #128	; 0x80
    b16c:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    b170:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    b174:	b129      	cbz	r1, b182 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    b176:	1c61      	adds	r1, r4, #1
    b178:	b2cc      	uxtb	r4, r1
    b17a:	2c20      	cmp	r4, #32
    b17c:	d3f8      	bcc.n	b170 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    b17e:	2020      	movs	r0, #32
    b180:	bd70      	pop	{r4, r5, r6, pc}
    b182:	4806      	ldr	r0, [pc, #24]	; (b19c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x44>)
    b184:	4621      	mov	r1, r4
    b186:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    b18a:	e9c0 6500 	strd	r6, r5, [r0]
    b18e:	2001      	movs	r0, #1
    b190:	f7fe fdc0 	bl	9d14 <MPSL_IRQ_RADIO_Handler+0xd2c>
    b194:	4620      	mov	r0, r4
    b196:	bd70      	pop	{r4, r5, r6, pc}
    b198:	20000ff8 	.word	0x20000ff8
    b19c:	20000b78 	.word	0x20000b78

0000b1a0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    b1a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b1a4:	f001 f8a4 	bl	c2f0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>
    b1a8:	4606      	mov	r6, r0
    b1aa:	460f      	mov	r7, r1
    b1ac:	f001 f9da 	bl	c564 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    b1b0:	4c67      	ldr	r4, [pc, #412]	; (b350 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    b1b2:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
    b1b6:	43c0      	mvns	r0, r0
    b1b8:	ea70 0001 	orns	r0, r0, r1
    b1bc:	d003      	beq.n	b1c6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x26>
    b1be:	f04f 30ff 	mov.w	r0, #4294967295
    b1c2:	e9c4 0002 	strd	r0, r0, [r4, #8]
    b1c6:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    b1ca:	f8df b188 	ldr.w	fp, [pc, #392]	; b354 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    b1ce:	2500      	movs	r5, #0
    b1d0:	bb10      	cbnz	r0, b218 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x78>
    b1d2:	f44f 710c 	mov.w	r1, #560	; 0x230
    b1d6:	69a0      	ldr	r0, [r4, #24]
    b1d8:	f000 fd42 	bl	bc60 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    b1dc:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
    b1e0:	6921      	ldr	r1, [r4, #16]
    b1e2:	1818      	adds	r0, r3, r0
    b1e4:	eb45 0305 	adc.w	r3, r5, r5
    b1e8:	1808      	adds	r0, r1, r0
    b1ea:	eb42 0103 	adc.w	r1, r2, r3
    b1ee:	1a30      	subs	r0, r6, r0
    b1f0:	eb77 0001 	sbcs.w	r0, r7, r1
    b1f4:	d310      	bcc.n	b218 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x78>
    b1f6:	f894 004a 	ldrb.w	r0, [r4, #74]	; 0x4a
    b1fa:	f894 104a 	ldrb.w	r1, [r4, #74]	; 0x4a
    b1fe:	eb0b 1040 	add.w	r0, fp, r0, lsl #5
    b202:	6840      	ldr	r0, [r0, #4]
    b204:	eb0b 1141 	add.w	r1, fp, r1, lsl #5
    b208:	680a      	ldr	r2, [r1, #0]
    b20a:	2108      	movs	r1, #8
    b20c:	4790      	blx	r2
    b20e:	f44f 716e 	mov.w	r1, #952	; 0x3b8
    b212:	2070      	movs	r0, #112	; 0x70
    b214:	f001 fa88 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b218:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    b21c:	b180      	cbz	r0, b240 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa0>
    b21e:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
    b222:	f88d 0000 	strb.w	r0, [sp]
    b226:	f89d 0000 	ldrb.w	r0, [sp]
    b22a:	b148      	cbz	r0, b240 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa0>
    b22c:	f000 ffec 	bl	c208 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    b230:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
    b234:	b150      	cbz	r0, b24c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xac>
    b236:	f240 31d1 	movw	r1, #977	; 0x3d1
    b23a:	2070      	movs	r0, #112	; 0x70
    b23c:	f001 fa74 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b240:	1cf0      	adds	r0, r6, #3
    b242:	f147 0100 	adc.w	r1, r7, #0
    b246:	f000 fed3 	bl	bff0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    b24a:	e7f1      	b.n	b230 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x90>
    b24c:	2001      	movs	r0, #1
    b24e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    b252:	f894 004a 	ldrb.w	r0, [r4, #74]	; 0x4a
    b256:	2820      	cmp	r0, #32
    b258:	d020      	beq.n	b29c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfc>
    b25a:	f894 904a 	ldrb.w	r9, [r4, #74]	; 0x4a
    b25e:	2020      	movs	r0, #32
    b260:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
    b264:	f884 004b 	strb.w	r0, [r4, #75]	; 0x4b
    b268:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
    b26c:	f884 5037 	strb.w	r5, [r4, #55]	; 0x37
    b270:	6025      	str	r5, [r4, #0]
    b272:	f000 fa4f 	bl	b714 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    b276:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    b27a:	f894 8049 	ldrb.w	r8, [r4, #73]	; 0x49
    b27e:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    b282:	eb00 0a04 	add.w	sl, r0, r4
    b286:	f89a 0030 	ldrb.w	r0, [sl, #48]	; 0x30
    b28a:	2820      	cmp	r0, #32
    b28c:	d01c      	beq.n	b2c8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x128>
    b28e:	eb0b 1b40 	add.w	fp, fp, r0, lsl #5
    b292:	f89b 001a 	ldrb.w	r0, [fp, #26]
    b296:	2801      	cmp	r0, #1
    b298:	d005      	beq.n	b2a6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x106>
    b29a:	e015      	b.n	b2c8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x128>
    b29c:	f44f 7175 	mov.w	r1, #980	; 0x3d4
    b2a0:	2070      	movs	r0, #112	; 0x70
    b2a2:	f001 fa41 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b2a6:	2201      	movs	r2, #1
    b2a8:	f8bb 3016 	ldrh.w	r3, [fp, #22]
    b2ac:	4630      	mov	r0, r6
    b2ae:	4639      	mov	r1, r7
    b2b0:	f7fe f890 	bl	93d4 <MPSL_IRQ_RADIO_Handler+0x3ec>
    b2b4:	e9db 2302 	ldrd	r2, r3, [fp, #8]
    b2b8:	1a12      	subs	r2, r2, r0
    b2ba:	eb73 0201 	sbcs.w	r2, r3, r1
    b2be:	bf24      	itt	cs
    b2c0:	f10b 0208 	addcs.w	r2, fp, #8
    b2c4:	e9c2 0100 	strdcs	r0, r1, [r2]
    b2c8:	4641      	mov	r1, r8
    b2ca:	2001      	movs	r0, #1
    b2cc:	f7fe fd54 	bl	9d78 <MPSL_IRQ_RADIO_Handler+0xd90>
    b2d0:	0007      	movs	r7, r0
    b2d2:	d0f9      	beq.n	b2c8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x128>
    b2d4:	4820      	ldr	r0, [pc, #128]	; (b358 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b8>)
    b2d6:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    b2da:	f810 0019 	ldrb.w	r0, [r0, r9, lsl #1]
    b2de:	2802      	cmp	r0, #2
    b2e0:	d104      	bne.n	b2ec <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14c>
    b2e2:	4642      	mov	r2, r8
    b2e4:	4649      	mov	r1, r9
    b2e6:	2006      	movs	r0, #6
    b2e8:	f7fe fd14 	bl	9d14 <MPSL_IRQ_RADIO_Handler+0xd2c>
    b2ec:	20ff      	movs	r0, #255	; 0xff
    b2ee:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
    b2f2:	f89a 0031 	ldrb.w	r0, [sl, #49]	; 0x31
    b2f6:	f8df 8064 	ldr.w	r8, [pc, #100]	; b35c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1bc>
    b2fa:	2820      	cmp	r0, #32
    b2fc:	bf1c      	itt	ne
    b2fe:	f898 0001 	ldrbne.w	r0, [r8, #1]
    b302:	f001 fae5 	blne	c8d0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    b306:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    b30a:	b128      	cbz	r0, b318 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x178>
    b30c:	f000 f9de 	bl	b6cc <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    b310:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    b314:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
    b318:	2f02      	cmp	r7, #2
    b31a:	d00f      	beq.n	b33c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19c>
    b31c:	2f01      	cmp	r7, #1
    b31e:	bf18      	it	ne
    b320:	e8bd 8ff8 	ldmiane.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b324:	f04f 30ff 	mov.w	r0, #4294967295
    b328:	f8d8 1004 	ldr.w	r1, [r8, #4]
    b32c:	2900      	cmp	r1, #0
    b32e:	bf08      	it	eq
    b330:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b334:	b001      	add	sp, #4
    b336:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b33a:	4708      	bx	r1
    b33c:	6920      	ldr	r0, [r4, #16]
    b33e:	1b80      	subs	r0, r0, r6
    b340:	f005 fb1e 	bl	10980 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b344:	f8d8 1004 	ldr.w	r1, [r8, #4]
    b348:	2900      	cmp	r1, #0
    b34a:	d1f3      	bne.n	b334 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x194>
    b34c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b350:	20000ff8 	.word	0x20000ff8
    b354:	20000b78 	.word	0x20000b78
    b358:	20000f78 	.word	0x20000f78
    b35c:	20000320 	.word	0x20000320

0000b360 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    b360:	b5f0      	push	{r4, r5, r6, r7, lr}
    b362:	4c2c      	ldr	r4, [pc, #176]	; (b414 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xb4>)
    b364:	4606      	mov	r6, r0
    b366:	b085      	sub	sp, #20
    b368:	f894 004a 	ldrb.w	r0, [r4, #74]	; 0x4a
    b36c:	2820      	cmp	r0, #32
    b36e:	d00a      	beq.n	b386 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x26>
    b370:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
    b374:	43c0      	mvns	r0, r0
    b376:	ea70 0001 	orns	r0, r0, r1
    b37a:	d009      	beq.n	b390 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x30>
    b37c:	f640 21cb 	movw	r1, #2763	; 0xacb
    b380:	2070      	movs	r0, #112	; 0x70
    b382:	f001 f9d1 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b386:	f640 21ca 	movw	r1, #2762	; 0xaca
    b38a:	2070      	movs	r0, #112	; 0x70
    b38c:	f001 f9cc 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b390:	f894 004a 	ldrb.w	r0, [r4, #74]	; 0x4a
    b394:	4920      	ldr	r1, [pc, #128]	; (b418 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xb8>)
    b396:	eb01 1040 	add.w	r0, r1, r0, lsl #5
    b39a:	f100 0708 	add.w	r7, r0, #8
    b39e:	e9d7 0100 	ldrd	r0, r1, [r7]
    b3a2:	f000 f8c1 	bl	b528 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>
    b3a6:	89fa      	ldrh	r2, [r7, #14]
    b3a8:	2500      	movs	r5, #0
    b3aa:	1882      	adds	r2, r0, r2
    b3ac:	7b38      	ldrb	r0, [r7, #12]
    b3ae:	4169      	adcs	r1, r5
    b3b0:	1810      	adds	r0, r2, r0
    b3b2:	4169      	adcs	r1, r5
    b3b4:	1c40      	adds	r0, r0, #1
    b3b6:	f141 0100 	adc.w	r1, r1, #0
    b3ba:	aa01      	add	r2, sp, #4
    b3bc:	9200      	str	r2, [sp, #0]
    b3be:	1980      	adds	r0, r0, r6
    b3c0:	4169      	adcs	r1, r5
    b3c2:	ab02      	add	r3, sp, #8
    b3c4:	aa04      	add	r2, sp, #16
    b3c6:	f000 f8d3 	bl	b570 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    b3ca:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b3ce:	280f      	cmp	r0, #15
    b3d0:	bf8c      	ite	hi
    b3d2:	2001      	movhi	r0, #1
    b3d4:	2000      	movls	r0, #0
    b3d6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    b3da:	1882      	adds	r2, r0, r2
    b3dc:	eb41 73e0 	adc.w	r3, r1, r0, asr #31
    b3e0:	e9c4 2302 	strd	r2, r3, [r4, #8]
    b3e4:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
    b3e8:	f88d 0000 	strb.w	r0, [sp]
    b3ec:	f89d 0000 	ldrb.w	r0, [sp]
    b3f0:	2800      	cmp	r0, #0
    b3f2:	bf04      	itt	eq
    b3f4:	b005      	addeq	sp, #20
    b3f6:	bdf0      	popeq	{r4, r5, r6, r7, pc}
    b3f8:	f04f 0005 	mov.w	r0, #5
    b3fc:	9500      	str	r5, [sp, #0]
    b3fe:	f000 ff99 	bl	c334 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    b402:	2800      	cmp	r0, #0
    b404:	bf1c      	itt	ne
    b406:	b005      	addne	sp, #20
    b408:	bdf0      	popne	{r4, r5, r6, r7, pc}
    b40a:	f44f 612e 	mov.w	r1, #2784	; 0xae0
    b40e:	2070      	movs	r0, #112	; 0x70
    b410:	f001 f98a 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b414:	20000ff8 	.word	0x20000ff8
    b418:	20000b78 	.word	0x20000b78

0000b41c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    b41c:	b570      	push	{r4, r5, r6, lr}
    b41e:	4c1f      	ldr	r4, [pc, #124]	; (b49c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    b420:	2120      	movs	r1, #32
    b422:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    b426:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
    b42a:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
    b42e:	2000      	movs	r0, #0
    b430:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
    b434:	f884 104a 	strb.w	r1, [r4, #74]	; 0x4a
    b438:	1e43      	subs	r3, r0, #1
    b43a:	6020      	str	r0, [r4, #0]
    b43c:	e9c4 3302 	strd	r3, r3, [r4, #8]
    b440:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    b444:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
    b448:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
    b44c:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    b450:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    b454:	f884 104b 	strb.w	r1, [r4, #75]	; 0x4b
    b458:	1e41      	subs	r1, r0, #1
    b45a:	e9c4 1110 	strd	r1, r1, [r4, #64]	; 0x40
    b45e:	f884 0048 	strb.w	r0, [r4, #72]	; 0x48
    b462:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    b466:	2210      	movs	r2, #16
    b468:	7088      	strb	r0, [r1, #2]
    b46a:	f801 0f04 	strb.w	r0, [r1, #4]!
    b46e:	1e52      	subs	r2, r2, #1
    b470:	d1fa      	bne.n	b468 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4c>
    b472:	f000 f959 	bl	b728 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    b476:	4d0a      	ldr	r5, [pc, #40]	; (b4a0 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    b478:	2601      	movs	r6, #1
    b47a:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
    b47e:	20ff      	movs	r0, #255	; 0xff
    b480:	7028      	strb	r0, [r5, #0]
    b482:	4808      	ldr	r0, [pc, #32]	; (b4a4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    b484:	f001 fa06 	bl	c894 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    b488:	7068      	strb	r0, [r5, #1]
    b48a:	f001 fa71 	bl	c970 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    b48e:	60a8      	str	r0, [r5, #8]
    b490:	f001 f8c8 	bl	c624 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    b494:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
    b498:	bd70      	pop	{r4, r5, r6, pc}
    b49a:	0000      	.short	0x0000
    b49c:	20000ff8 	.word	0x20000ff8
    b4a0:	20000320 	.word	0x20000320
    b4a4:	00009c45 	.word	0x00009c45

0000b4a8 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ>:
    b4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b4aa:	4607      	mov	r7, r0
    b4ac:	b087      	sub	sp, #28
    b4ae:	461d      	mov	r5, r3
    b4b0:	460e      	mov	r6, r1
    b4b2:	4610      	mov	r0, r2
    b4b4:	f005 fa64 	bl	10980 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b4b8:	4604      	mov	r4, r0
    b4ba:	a803      	add	r0, sp, #12
    b4bc:	9000      	str	r0, [sp, #0]
    b4be:	ab04      	add	r3, sp, #16
    b4c0:	aa02      	add	r2, sp, #8
    b4c2:	4638      	mov	r0, r7
    b4c4:	4631      	mov	r1, r6
    b4c6:	f000 f853 	bl	b570 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>
    b4ca:	9902      	ldr	r1, [sp, #8]
    b4cc:	4a14      	ldr	r2, [pc, #80]	; (b520 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x78>)
    b4ce:	1a60      	subs	r0, r4, r1
    b4d0:	2300      	movs	r3, #0
    b4d2:	1a82      	subs	r2, r0, r2
    b4d4:	f173 0200 	sbcs.w	r2, r3, #0
    b4d8:	d318      	bcc.n	b50c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x64>
    b4da:	f8df c044 	ldr.w	ip, [pc, #68]	; b520 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x78>
    b4de:	1b0a      	subs	r2, r1, r4
    b4e0:	ebb2 0c0c 	subs.w	ip, r2, ip
    b4e4:	f173 0300 	sbcs.w	r3, r3, #0
    b4e8:	d310      	bcc.n	b50c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x64>
    b4ea:	4b0e      	ldr	r3, [pc, #56]	; (b524 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x7c>)
    b4ec:	4283      	cmp	r3, r0
    b4ee:	bf3e      	ittt	cc
    b4f0:	f5c1 2090 	rsbcc	r0, r1, #294912	; 0x48000
    b4f4:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    b4f8:	4420      	addcc	r0, r4
    b4fa:	d307      	bcc.n	b50c <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x64>
    b4fc:	4293      	cmp	r3, r2
    b4fe:	d209      	bcs.n	b514 <sym_ORUJDMUJV7RZIFXM3X5KLRROPKJ7VPLJ65JMLRQ+0x6c>
    b500:	f5c4 2090 	rsb	r0, r4, #294912	; 0x48000
    b504:	f100 50f4 	add.w	r0, r0, #511705088	; 0x1e800000
    b508:	4408      	add	r0, r1
    b50a:	4240      	negs	r0, r0
    b50c:	300f      	adds	r0, #15
    b50e:	b007      	add	sp, #28
    b510:	1a28      	subs	r0, r5, r0
    b512:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b514:	f640 21fb 	movw	r1, #2811	; 0xafb
    b518:	2070      	movs	r0, #112	; 0x70
    b51a:	f001 f905 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b51e:	0000      	.short	0x0000
    b520:	0f424000 	.word	0x0f424000
    b524:	1e847fff 	.word	0x1e847fff

0000b528 <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY>:
    b528:	0e03      	lsrs	r3, r0, #24
    b52a:	b430      	push	{r4, r5}
    b52c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    b530:	f8df c038 	ldr.w	ip, [pc, #56]	; b56c <sym_V6OT7EKSQC3XEJK5ZWNACQF7LLICCSE7X3C3ECY+0x44>
    b534:	0e09      	lsrs	r1, r1, #24
    b536:	fba3 250c 	umull	r2, r5, r3, ip
    b53a:	fb01 510c 	mla	r1, r1, ip, r5
    b53e:	2400      	movs	r4, #0
    b540:	fb03 1104 	mla	r1, r3, r4, r1
    b544:	f647 73ff 	movw	r3, #32767	; 0x7fff
    b548:	ea03 2350 	and.w	r3, r3, r0, lsr #9
    b54c:	f643 5c09 	movw	ip, #15625	; 0x3d09
    b550:	fb13 f30c 	smulbb	r3, r3, ip
    b554:	f3c0 0008 	ubfx	r0, r0, #0, #9
    b558:	fb10 f00c 	smulbb	r0, r0, ip
    b55c:	f500 7080 	add.w	r0, r0, #256	; 0x100
    b560:	eb03 2050 	add.w	r0, r3, r0, lsr #9
    b564:	1880      	adds	r0, r0, r2
    b566:	4161      	adcs	r1, r4
    b568:	bc30      	pop	{r4, r5}
    b56a:	4770      	bx	lr
    b56c:	1e848000 	.word	0x1e848000

0000b570 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI>:
    b570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b574:	f8df c0b0 	ldr.w	ip, [pc, #176]	; b628 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0xb8>
    b578:	9c08      	ldr	r4, [sp, #32]
    b57a:	458c      	cmp	ip, r1
    b57c:	d803      	bhi.n	b586 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0x16>
    b57e:	2196      	movs	r1, #150	; 0x96
    b580:	209b      	movs	r0, #155	; 0x9b
    b582:	f001 f8d1 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b586:	00cd      	lsls	r5, r1, #3
    b588:	ea45 7150 	orr.w	r1, r5, r0, lsr #29
    b58c:	f24f 4624 	movw	r6, #62500	; 0xf424
    b590:	fbb1 f8f6 	udiv	r8, r1, r6
    b594:	fbb1 f5f6 	udiv	r5, r1, r6
    b598:	f8df 9090 	ldr.w	r9, [pc, #144]	; b62c <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0xbc>
    b59c:	f3c0 374f 	ubfx	r7, r0, #13, #16
    b5a0:	0409      	lsls	r1, r1, #16
    b5a2:	ea4f 4a08 	mov.w	sl, r8, lsl #16
    b5a6:	19c9      	adds	r1, r1, r7
    b5a8:	fba8 7809 	umull	r7, r8, r8, r9
    b5ac:	1bc9      	subs	r1, r1, r7
    b5ae:	fbb1 f7f6 	udiv	r7, r1, r6
    b5b2:	fbb1 f1f6 	udiv	r1, r1, r6
    b5b6:	ea4a 0107 	orr.w	r1, sl, r7
    b5ba:	fba1 c60c 	umull	ip, r6, r1, ip
    b5be:	2500      	movs	r5, #0
    b5c0:	ebb0 0c0c 	subs.w	ip, r0, ip
    b5c4:	ea4f 305c 	mov.w	r0, ip, lsr #13
    b5c8:	f248 6637 	movw	r6, #34359	; 0x8637
    b5cc:	fb00 f006 	mul.w	r0, r0, r6
    b5d0:	ea4f 4010 	mov.w	r0, r0, lsr #16
    b5d4:	4e16      	ldr	r6, [pc, #88]	; (b630 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0xc0>)
    b5d6:	ea4f 2840 	mov.w	r8, r0, lsl #9
    b5da:	fb06 c600 	mla	r6, r6, r0, ip
    b5de:	4815      	ldr	r0, [pc, #84]	; (b634 <sym_OLT7BBJAMRJJV5HK3QZCAOG3B3FGZ46HFC5VINI+0xc4>)
    b5e0:	fb06 f000 	mul.w	r0, r6, r0
    b5e4:	ea4f 5750 	mov.w	r7, r0, lsr #21
    b5e8:	eb08 0007 	add.w	r0, r8, r7
    b5ec:	f643 5809 	movw	r8, #15625	; 0x3d09
    b5f0:	fb17 f808 	smulbb	r8, r7, r8
    b5f4:	f508 7780 	add.w	r7, r8, #256	; 0x100
    b5f8:	f643 5908 	movw	r9, #15624	; 0x3d08
    b5fc:	eba6 2757 	sub.w	r7, r6, r7, lsr #9
    b600:	44c8      	add	r8, r9
    b602:	b2ff      	uxtb	r7, r7
    b604:	ebb6 2f58 	cmp.w	r6, r8, lsr #9
    b608:	bf84      	itt	hi
    b60a:	2700      	movhi	r7, #0
    b60c:	1c40      	addhi	r0, r0, #1
    b60e:	7027      	strb	r7, [r4, #0]
    b610:	0a0c      	lsrs	r4, r1, #8
    b612:	0609      	lsls	r1, r1, #24
    b614:	1808      	adds	r0, r1, r0
    b616:	eb44 0105 	adc.w	r1, r4, r5
    b61a:	e9c3 0100 	strd	r0, r1, [r3]
    b61e:	f8c2 c000 	str.w	ip, [r2]
    b622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b626:	0000      	.short	0x0000
    b628:	1e848000 	.word	0x1e848000
    b62c:	f4240000 	.word	0xf4240000
    b630:	ffffc2f7 	.word	0xffffc2f7
    b634:	00010c6f 	.word	0x00010c6f

0000b638 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    b638:	0b41      	lsrs	r1, r0, #13
    b63a:	f248 6237 	movw	r2, #34359	; 0x8637
    b63e:	4351      	muls	r1, r2
    b640:	0c0a      	lsrs	r2, r1, #16
    b642:	4b09      	ldr	r3, [pc, #36]	; (b668 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    b644:	0251      	lsls	r1, r2, #9
    b646:	fb02 0203 	mla	r2, r2, r3, r0
    b64a:	4808      	ldr	r0, [pc, #32]	; (b66c <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    b64c:	4350      	muls	r0, r2
    b64e:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    b652:	306e      	adds	r0, #110	; 0x6e
    b654:	0d40      	lsrs	r0, r0, #21
    b656:	425b      	negs	r3, r3
    b658:	fb10 f303 	smulbb	r3, r0, r3
    b65c:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    b660:	bf88      	it	hi
    b662:	1c49      	addhi	r1, r1, #1
    b664:	4408      	add	r0, r1
    b666:	4770      	bx	lr
    b668:	ffffc2f7 	.word	0xffffc2f7
    b66c:	00010c6f 	.word	0x00010c6f

0000b670 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    b670:	0b43      	lsrs	r3, r0, #13
    b672:	f248 6c37 	movw	ip, #34359	; 0x8637
    b676:	fb03 f30c 	mul.w	r3, r3, ip
    b67a:	b430      	push	{r4, r5}
    b67c:	0c1b      	lsrs	r3, r3, #16
    b67e:	f8df c044 	ldr.w	ip, [pc, #68]	; b6c4 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    b682:	025c      	lsls	r4, r3, #9
    b684:	fb03 030c 	mla	r3, r3, ip, r0
    b688:	480f      	ldr	r0, [pc, #60]	; (b6c8 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    b68a:	4358      	muls	r0, r3
    b68c:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    b690:	eb04 000c 	add.w	r0, r4, ip
    b694:	f643 5409 	movw	r4, #15625	; 0x3d09
    b698:	fb1c f404 	smulbb	r4, ip, r4
    b69c:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    b6a0:	f643 5508 	movw	r5, #15624	; 0x3d08
    b6a4:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    b6a8:	442c      	add	r4, r5
    b6aa:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    b6ae:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    b6b2:	bf84      	itt	hi
    b6b4:	f04f 0c00 	movhi.w	ip, #0
    b6b8:	1c40      	addhi	r0, r0, #1
    b6ba:	6008      	str	r0, [r1, #0]
    b6bc:	f882 c000 	strb.w	ip, [r2]
    b6c0:	bc30      	pop	{r4, r5}
    b6c2:	4770      	bx	lr
    b6c4:	ffffc2f7 	.word	0xffffc2f7
    b6c8:	00010c6f 	.word	0x00010c6f

0000b6cc <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    b6cc:	4808      	ldr	r0, [pc, #32]	; (b6f0 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    b6ce:	f990 0000 	ldrsb.w	r0, [r0]
    b6d2:	2800      	cmp	r0, #0
    b6d4:	bfb8      	it	lt
    b6d6:	4770      	bxlt	lr
    b6d8:	f000 011f 	and.w	r1, r0, #31
    b6dc:	2201      	movs	r2, #1
    b6de:	fa02 f101 	lsl.w	r1, r2, r1
    b6e2:	0940      	lsrs	r0, r0, #5
    b6e4:	0080      	lsls	r0, r0, #2
    b6e6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    b6ea:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b6ee:	4770      	bx	lr
    b6f0:	2000039f 	.word	0x2000039f

0000b6f4 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    b6f4:	4803      	ldr	r0, [pc, #12]	; (b704 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    b6f6:	7800      	ldrb	r0, [r0, #0]
    b6f8:	2803      	cmp	r0, #3
    b6fa:	bf0c      	ite	eq
    b6fc:	2001      	moveq	r0, #1
    b6fe:	2000      	movne	r0, #0
    b700:	4770      	bx	lr
    b702:	0000      	.short	0x0000
    b704:	20000370 	.word	0x20000370

0000b708 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    b708:	4801      	ldr	r0, [pc, #4]	; (b710 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    b70a:	8840      	ldrh	r0, [r0, #2]
    b70c:	4770      	bx	lr
    b70e:	0000      	.short	0x0000
    b710:	20000370 	.word	0x20000370

0000b714 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    b714:	4803      	ldr	r0, [pc, #12]	; (b724 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    b716:	7800      	ldrb	r0, [r0, #0]
    b718:	2802      	cmp	r0, #2
    b71a:	bf16      	itet	ne
    b71c:	2803      	cmpne	r0, #3
    b71e:	2001      	moveq	r0, #1
    b720:	2000      	movne	r0, #0
    b722:	4770      	bx	lr
    b724:	20000370 	.word	0x20000370

0000b728 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    b728:	4802      	ldr	r0, [pc, #8]	; (b734 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    b72a:	2100      	movs	r1, #0
    b72c:	7001      	strb	r1, [r0, #0]
    b72e:	8041      	strh	r1, [r0, #2]
    b730:	4770      	bx	lr
    b732:	0000      	.short	0x0000
    b734:	20000370 	.word	0x20000370

0000b738 <MPSL_IRQ_CLOCK_Handler>:
    b738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b73c:	4c16      	ldr	r4, [pc, #88]	; (b798 <MPSL_IRQ_CLOCK_Handler+0x60>)
    b73e:	7a20      	ldrb	r0, [r4, #8]
    b740:	2800      	cmp	r0, #0
    b742:	d027      	beq.n	b794 <MPSL_IRQ_CLOCK_Handler+0x5c>
    b744:	f44f 7180 	mov.w	r1, #256	; 0x100
    b748:	058d      	lsls	r5, r1, #22
    b74a:	4628      	mov	r0, r5
    b74c:	f005 f943 	bl	109d6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    b750:	4680      	mov	r8, r0
    b752:	f44f 7182 	mov.w	r1, #260	; 0x104
    b756:	4628      	mov	r0, r5
    b758:	f005 f93d 	bl	109d6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    b75c:	2600      	movs	r6, #0
    b75e:	4607      	mov	r7, r0
    b760:	f1b8 0f00 	cmp.w	r8, #0
    b764:	d009      	beq.n	b77a <MPSL_IRQ_CLOCK_Handler+0x42>
    b766:	2001      	movs	r0, #1
    b768:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b76c:	7920      	ldrb	r0, [r4, #4]
    b76e:	b120      	cbz	r0, b77a <MPSL_IRQ_CLOCK_Handler+0x42>
    b770:	7126      	strb	r6, [r4, #4]
    b772:	69e0      	ldr	r0, [r4, #28]
    b774:	b108      	cbz	r0, b77a <MPSL_IRQ_CLOCK_Handler+0x42>
    b776:	4780      	blx	r0
    b778:	61e6      	str	r6, [r4, #28]
    b77a:	b137      	cbz	r7, b78a <MPSL_IRQ_CLOCK_Handler+0x52>
    b77c:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    b780:	2002      	movs	r0, #2
    b782:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b786:	f000 fa33 	bl	bbf0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    b78a:	4640      	mov	r0, r8
    b78c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b790:	f000 b830 	b.w	b7f4 <MPSL_IRQ_CLOCK_Handler+0xbc>
    b794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b798:	2000032c 	.word	0x2000032c
    b79c:	b510      	push	{r4, lr}
    b79e:	f005 f9c6 	bl	10b2e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    b7a2:	b930      	cbnz	r0, b7b2 <MPSL_IRQ_CLOCK_Handler+0x7a>
    b7a4:	f005 f9e4 	bl	10b70 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b7a8:	b918      	cbnz	r0, b7b2 <MPSL_IRQ_CLOCK_Handler+0x7a>
    b7aa:	f005 fa17 	bl	10bdc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    b7ae:	2800      	cmp	r0, #0
    b7b0:	d002      	beq.n	b7b8 <MPSL_IRQ_CLOCK_Handler+0x80>
    b7b2:	4902      	ldr	r1, [pc, #8]	; (b7bc <MPSL_IRQ_CLOCK_Handler+0x84>)
    b7b4:	2002      	movs	r0, #2
    b7b6:	6008      	str	r0, [r1, #0]
    b7b8:	bd10      	pop	{r4, pc}
    b7ba:	0000      	.short	0x0000
    b7bc:	40000c34 	.word	0x40000c34
    b7c0:	b570      	push	{r4, r5, r6, lr}
    b7c2:	f000 f95b 	bl	ba7c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    b7c6:	f000 fa8f 	bl	bce8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    b7ca:	4c09      	ldr	r4, [pc, #36]	; (b7f0 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    b7cc:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    b7d0:	b130      	cbz	r0, b7e0 <MPSL_IRQ_CLOCK_Handler+0xa8>
    b7d2:	f7ff ffe3 	bl	b79c <MPSL_IRQ_CLOCK_Handler+0x64>
    b7d6:	2001      	movs	r0, #1
    b7d8:	6128      	str	r0, [r5, #16]
    b7da:	2004      	movs	r0, #4
    b7dc:	7260      	strb	r0, [r4, #9]
    b7de:	e004      	b.n	b7ea <MPSL_IRQ_CLOCK_Handler+0xb2>
    b7e0:	2003      	movs	r0, #3
    b7e2:	7260      	strb	r0, [r4, #9]
    b7e4:	2001      	movs	r0, #1
    b7e6:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    b7ea:	2000      	movs	r0, #0
    b7ec:	71a0      	strb	r0, [r4, #6]
    b7ee:	bd70      	pop	{r4, r5, r6, pc}
    b7f0:	2000032c 	.word	0x2000032c
    b7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b7f8:	4606      	mov	r6, r0
    b7fa:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    b7fe:	f44f 7186 	mov.w	r1, #268	; 0x10c
    b802:	4628      	mov	r0, r5
    b804:	f005 f8e7 	bl	109d6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    b808:	4c1f      	ldr	r4, [pc, #124]	; (b888 <MPSL_IRQ_CLOCK_Handler+0x150>)
    b80a:	4680      	mov	r8, r0
    b80c:	7827      	ldrb	r7, [r4, #0]
    b80e:	1de0      	adds	r0, r4, #7
    b810:	f005 f957 	bl	10ac2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    b814:	b110      	cbz	r0, b81c <MPSL_IRQ_CLOCK_Handler+0xe4>
    b816:	f240 11c5 	movw	r1, #453	; 0x1c5
    b81a:	e014      	b.n	b846 <MPSL_IRQ_CLOCK_Handler+0x10e>
    b81c:	b146      	cbz	r6, b830 <MPSL_IRQ_CLOCK_Handler+0xf8>
    b81e:	7a60      	ldrb	r0, [r4, #9]
    b820:	2803      	cmp	r0, #3
    b822:	d105      	bne.n	b830 <MPSL_IRQ_CLOCK_Handler+0xf8>
    b824:	2004      	movs	r0, #4
    b826:	7260      	strb	r0, [r4, #9]
    b828:	f7ff ffb8 	bl	b79c <MPSL_IRQ_CLOCK_Handler+0x64>
    b82c:	2001      	movs	r0, #1
    b82e:	6128      	str	r0, [r5, #16]
    b830:	2600      	movs	r6, #0
    b832:	f1b8 0f00 	cmp.w	r8, #0
    b836:	d018      	beq.n	b86a <MPSL_IRQ_CLOCK_Handler+0x132>
    b838:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    b83c:	7a60      	ldrb	r0, [r4, #9]
    b83e:	2804      	cmp	r0, #4
    b840:	d004      	beq.n	b84c <MPSL_IRQ_CLOCK_Handler+0x114>
    b842:	f240 11d7 	movw	r1, #471	; 0x1d7
    b846:	206d      	movs	r0, #109	; 0x6d
    b848:	f000 ff6e 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b84c:	f005 f96f 	bl	10b2e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    b850:	b928      	cbnz	r0, b85e <MPSL_IRQ_CLOCK_Handler+0x126>
    b852:	f005 f98d 	bl	10b70 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b856:	b910      	cbnz	r0, b85e <MPSL_IRQ_CLOCK_Handler+0x126>
    b858:	f005 f9c0 	bl	10bdc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    b85c:	b108      	cbz	r0, b862 <MPSL_IRQ_CLOCK_Handler+0x12a>
    b85e:	480b      	ldr	r0, [pc, #44]	; (b88c <MPSL_IRQ_CLOCK_Handler+0x154>)
    b860:	6006      	str	r6, [r0, #0]
    b862:	2002      	movs	r0, #2
    b864:	7260      	strb	r0, [r4, #9]
    b866:	f000 f8ed 	bl	ba44 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    b86a:	b13f      	cbz	r7, b87c <MPSL_IRQ_CLOCK_Handler+0x144>
    b86c:	7026      	strb	r6, [r4, #0]
    b86e:	7a60      	ldrb	r0, [r4, #9]
    b870:	2802      	cmp	r0, #2
    b872:	d101      	bne.n	b878 <MPSL_IRQ_CLOCK_Handler+0x140>
    b874:	f7ff ffa4 	bl	b7c0 <MPSL_IRQ_CLOCK_Handler+0x88>
    b878:	f000 f8e4 	bl	ba44 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    b87c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b880:	4801      	ldr	r0, [pc, #4]	; (b888 <MPSL_IRQ_CLOCK_Handler+0x150>)
    b882:	1dc0      	adds	r0, r0, #7
    b884:	f005 b934 	b.w	10af0 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    b888:	2000032c 	.word	0x2000032c
    b88c:	40000c34 	.word	0x40000c34
    b890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b894:	4c48      	ldr	r4, [pc, #288]	; (b9b8 <MPSL_IRQ_CLOCK_Handler+0x280>)
    b896:	2600      	movs	r6, #0
    b898:	4607      	mov	r7, r0
    b89a:	61a6      	str	r6, [r4, #24]
    b89c:	7881      	ldrb	r1, [r0, #2]
    b89e:	7800      	ldrb	r0, [r0, #0]
    b8a0:	72a0      	strb	r0, [r4, #10]
    b8a2:	7161      	strb	r1, [r4, #5]
    b8a4:	71a6      	strb	r6, [r4, #6]
    b8a6:	f04f 0801 	mov.w	r8, #1
    b8aa:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    b8ae:	2805      	cmp	r0, #5
    b8b0:	d225      	bcs.n	b8fe <MPSL_IRQ_CLOCK_Handler+0x1c6>
    b8b2:	e8df f000 	tbb	[pc, r0]
    b8b6:	0310      	.short	0x0310
    b8b8:	00222006 	.word	0x00222006
    b8bc:	f8c4 8018 	str.w	r8, [r4, #24]
    b8c0:	e009      	b.n	b8d6 <MPSL_IRQ_CLOCK_Handler+0x19e>
    b8c2:	f000 f8db 	bl	ba7c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    b8c6:	2101      	movs	r1, #1
    b8c8:	4628      	mov	r0, r5
    b8ca:	f005 f889 	bl	109e0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    b8ce:	2800      	cmp	r0, #0
    b8d0:	d0f9      	beq.n	b8c6 <MPSL_IRQ_CLOCK_Handler+0x18e>
    b8d2:	2002      	movs	r0, #2
    b8d4:	61a0      	str	r0, [r4, #24]
    b8d6:	f005 f8b1 	bl	10a3c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    b8da:	b1c0      	cbz	r0, b90e <MPSL_IRQ_CLOCK_Handler+0x1d6>
    b8dc:	f000 fa1e 	bl	bd1c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    b8e0:	7e21      	ldrb	r1, [r4, #24]
    b8e2:	f001 0103 	and.w	r1, r1, #3
    b8e6:	4288      	cmp	r0, r1
    b8e8:	d111      	bne.n	b90e <MPSL_IRQ_CLOCK_Handler+0x1d6>
    b8ea:	79b8      	ldrb	r0, [r7, #6]
    b8ec:	b160      	cbz	r0, b908 <MPSL_IRQ_CLOCK_Handler+0x1d0>
    b8ee:	2002      	movs	r0, #2
    b8f0:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    b8f4:	e044      	b.n	b980 <MPSL_IRQ_CLOCK_Handler+0x248>
    b8f6:	4831      	ldr	r0, [pc, #196]	; (b9bc <MPSL_IRQ_CLOCK_Handler+0x284>)
    b8f8:	e7ec      	b.n	b8d4 <MPSL_IRQ_CLOCK_Handler+0x19c>
    b8fa:	4831      	ldr	r0, [pc, #196]	; (b9c0 <MPSL_IRQ_CLOCK_Handler+0x288>)
    b8fc:	e7ea      	b.n	b8d4 <MPSL_IRQ_CLOCK_Handler+0x19c>
    b8fe:	f240 311e 	movw	r1, #798	; 0x31e
    b902:	206d      	movs	r0, #109	; 0x6d
    b904:	f000 ff10 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b908:	f000 f9dc 	bl	bcc4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    b90c:	e038      	b.n	b980 <MPSL_IRQ_CLOCK_Handler+0x248>
    b90e:	f8c5 800c 	str.w	r8, [r5, #12]
    b912:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    b916:	69a0      	ldr	r0, [r4, #24]
    b918:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    b91c:	f005 f8f3 	bl	10b06 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    b920:	b940      	cbnz	r0, b934 <MPSL_IRQ_CLOCK_Handler+0x1fc>
    b922:	f005 f8fa 	bl	10b1a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    b926:	b928      	cbnz	r0, b934 <MPSL_IRQ_CLOCK_Handler+0x1fc>
    b928:	f005 f90e 	bl	10b48 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    b92c:	b910      	cbnz	r0, b934 <MPSL_IRQ_CLOCK_Handler+0x1fc>
    b92e:	f005 f91f 	bl	10b70 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b932:	b138      	cbz	r0, b944 <MPSL_IRQ_CLOCK_Handler+0x20c>
    b934:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    b938:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    b93c:	4921      	ldr	r1, [pc, #132]	; (b9c4 <MPSL_IRQ_CLOCK_Handler+0x28c>)
    b93e:	f3c0 3042 	ubfx	r0, r0, #13, #3
    b942:	6008      	str	r0, [r1, #0]
    b944:	f005 f8df 	bl	10b06 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    b948:	b940      	cbnz	r0, b95c <MPSL_IRQ_CLOCK_Handler+0x224>
    b94a:	f005 f8e6 	bl	10b1a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    b94e:	b928      	cbnz	r0, b95c <MPSL_IRQ_CLOCK_Handler+0x224>
    b950:	f005 f8fa 	bl	10b48 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    b954:	b910      	cbnz	r0, b95c <MPSL_IRQ_CLOCK_Handler+0x224>
    b956:	f005 f90b 	bl	10b70 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b95a:	b118      	cbz	r0, b964 <MPSL_IRQ_CLOCK_Handler+0x22c>
    b95c:	4919      	ldr	r1, [pc, #100]	; (b9c4 <MPSL_IRQ_CLOCK_Handler+0x28c>)
    b95e:	3110      	adds	r1, #16
    b960:	f8c1 8000 	str.w	r8, [r1]
    b964:	f8c5 8008 	str.w	r8, [r5, #8]
    b968:	2002      	movs	r0, #2
    b96a:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    b96e:	79b8      	ldrb	r0, [r7, #6]
    b970:	b930      	cbnz	r0, b980 <MPSL_IRQ_CLOCK_Handler+0x248>
    b972:	f000 f829 	bl	b9c8 <MPSL_IRQ_CLOCK_Handler+0x290>
    b976:	2002      	movs	r0, #2
    b978:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b97c:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    b980:	7960      	ldrb	r0, [r4, #5]
    b982:	b170      	cbz	r0, b9a2 <MPSL_IRQ_CLOCK_Handler+0x26a>
    b984:	7838      	ldrb	r0, [r7, #0]
    b986:	b960      	cbnz	r0, b9a2 <MPSL_IRQ_CLOCK_Handler+0x26a>
    b988:	f000 f9ae 	bl	bce8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    b98c:	4607      	mov	r7, r0
    b98e:	f000 ff41 	bl	c814 <mpsl_temperature_get>
    b992:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    b996:	b117      	cbz	r7, b99e <MPSL_IRQ_CLOCK_Handler+0x266>
    b998:	e9c4 1004 	strd	r1, r0, [r4, #16]
    b99c:	e001      	b.n	b9a2 <MPSL_IRQ_CLOCK_Handler+0x26a>
    b99e:	e9c4 0104 	strd	r0, r1, [r4, #16]
    b9a2:	2101      	movs	r1, #1
    b9a4:	4628      	mov	r0, r5
    b9a6:	f005 f81b 	bl	109e0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    b9aa:	b108      	cbz	r0, b9b0 <MPSL_IRQ_CLOCK_Handler+0x278>
    b9ac:	f000 f996 	bl	bcdc <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    b9b0:	7266      	strb	r6, [r4, #9]
    b9b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b9b6:	0000      	.short	0x0000
    b9b8:	2000032c 	.word	0x2000032c
    b9bc:	00020001 	.word	0x00020001
    b9c0:	00030001 	.word	0x00030001
    b9c4:	4000053c 	.word	0x4000053c
    b9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b9cc:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    b9d0:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b9d4:	f010 0f02 	tst.w	r0, #2
    b9d8:	d011      	beq.n	b9fe <MPSL_IRQ_CLOCK_Handler+0x2c6>
    b9da:	4c16      	ldr	r4, [pc, #88]	; (ba34 <MPSL_IRQ_CLOCK_Handler+0x2fc>)
    b9dc:	6820      	ldr	r0, [r4, #0]
    b9de:	43c0      	mvns	r0, r0
    b9e0:	f340 1600 	sbfx	r6, r0, #4, #1
    b9e4:	6820      	ldr	r0, [r4, #0]
    b9e6:	f040 0010 	orr.w	r0, r0, #16
    b9ea:	6020      	str	r0, [r4, #0]
    b9ec:	f44f 7782 	mov.w	r7, #260	; 0x104
    b9f0:	4639      	mov	r1, r7
    b9f2:	4628      	mov	r0, r5
    b9f4:	1c76      	adds	r6, r6, #1
    b9f6:	f004 ffee 	bl	109d6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    b9fa:	b128      	cbz	r0, ba08 <MPSL_IRQ_CLOCK_Handler+0x2d0>
    b9fc:	e00a      	b.n	ba14 <MPSL_IRQ_CLOCK_Handler+0x2dc>
    b9fe:	f240 21d5 	movw	r1, #725	; 0x2d5
    ba02:	206d      	movs	r0, #109	; 0x6d
    ba04:	f000 fe90 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ba08:	f005 f8f4 	bl	10bf4 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>
    ba0c:	e002      	b.n	ba14 <MPSL_IRQ_CLOCK_Handler+0x2dc>
    ba0e:	bf00      	nop
    ba10:	f005 f8ee 	bl	10bf0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    ba14:	4639      	mov	r1, r7
    ba16:	4628      	mov	r0, r5
    ba18:	f004 ffdd 	bl	109d6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    ba1c:	2800      	cmp	r0, #0
    ba1e:	d0f7      	beq.n	ba10 <MPSL_IRQ_CLOCK_Handler+0x2d8>
    ba20:	f000 f950 	bl	bcc4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    ba24:	2e00      	cmp	r6, #0
    ba26:	d103      	bne.n	ba30 <MPSL_IRQ_CLOCK_Handler+0x2f8>
    ba28:	6820      	ldr	r0, [r4, #0]
    ba2a:	f020 0010 	bic.w	r0, r0, #16
    ba2e:	6020      	str	r0, [r4, #0]
    ba30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ba34:	e000ed10 	.word	0xe000ed10

0000ba38 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    ba38:	4801      	ldr	r0, [pc, #4]	; (ba40 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    ba3a:	89c0      	ldrh	r0, [r0, #14]
    ba3c:	4770      	bx	lr
    ba3e:	0000      	.short	0x0000
    ba40:	2000032c 	.word	0x2000032c

0000ba44 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    ba44:	b510      	push	{r4, lr}
    ba46:	f3ef 8410 	mrs	r4, PRIMASK
    ba4a:	b672      	cpsid	i
    ba4c:	480a      	ldr	r0, [pc, #40]	; (ba78 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    ba4e:	7841      	ldrb	r1, [r0, #1]
    ba50:	b129      	cbz	r1, ba5e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    ba52:	7841      	ldrb	r1, [r0, #1]
    ba54:	1e49      	subs	r1, r1, #1
    ba56:	7041      	strb	r1, [r0, #1]
    ba58:	7841      	ldrb	r1, [r0, #1]
    ba5a:	b129      	cbz	r1, ba68 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    ba5c:	e008      	b.n	ba70 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    ba5e:	f44f 7196 	mov.w	r1, #300	; 0x12c
    ba62:	206d      	movs	r0, #109	; 0x6d
    ba64:	f000 fe60 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ba68:	7880      	ldrb	r0, [r0, #2]
    ba6a:	b908      	cbnz	r0, ba70 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    ba6c:	f000 f94a 	bl	bd04 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    ba70:	2c00      	cmp	r4, #0
    ba72:	d100      	bne.n	ba76 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    ba74:	b662      	cpsie	i
    ba76:	bd10      	pop	{r4, pc}
    ba78:	2000032c 	.word	0x2000032c

0000ba7c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    ba7c:	b510      	push	{r4, lr}
    ba7e:	f3ef 8410 	mrs	r4, PRIMASK
    ba82:	b672      	cpsid	i
    ba84:	4806      	ldr	r0, [pc, #24]	; (baa0 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    ba86:	7841      	ldrb	r1, [r0, #1]
    ba88:	1c49      	adds	r1, r1, #1
    ba8a:	7041      	strb	r1, [r0, #1]
    ba8c:	7840      	ldrb	r0, [r0, #1]
    ba8e:	2801      	cmp	r0, #1
    ba90:	d101      	bne.n	ba96 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    ba92:	f004 ffbd 	bl	10a10 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    ba96:	2c00      	cmp	r4, #0
    ba98:	d100      	bne.n	ba9c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    ba9a:	b662      	cpsie	i
    ba9c:	bd10      	pop	{r4, pc}
    ba9e:	0000      	.short	0x0000
    baa0:	2000032c 	.word	0x2000032c

0000baa4 <mpsl_clock_hfclk_release>:
    baa4:	4805      	ldr	r0, [pc, #20]	; (babc <mpsl_clock_hfclk_release+0x18>)
    baa6:	b510      	push	{r4, lr}
    baa8:	78c1      	ldrb	r1, [r0, #3]
    baaa:	b121      	cbz	r1, bab6 <mpsl_clock_hfclk_release+0x12>
    baac:	2100      	movs	r1, #0
    baae:	7101      	strb	r1, [r0, #4]
    bab0:	70c1      	strb	r1, [r0, #3]
    bab2:	f7ff ffc7 	bl	ba44 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    bab6:	2000      	movs	r0, #0
    bab8:	bd10      	pop	{r4, pc}
    baba:	0000      	.short	0x0000
    babc:	2000032c 	.word	0x2000032c

0000bac0 <mpsl_clock_hfclk_request>:
    bac0:	b570      	push	{r4, r5, r6, lr}
    bac2:	4c0c      	ldr	r4, [pc, #48]	; (baf4 <mpsl_clock_hfclk_request+0x34>)
    bac4:	78e1      	ldrb	r1, [r4, #3]
    bac6:	b961      	cbnz	r1, bae2 <mpsl_clock_hfclk_request+0x22>
    bac8:	2501      	movs	r5, #1
    baca:	70e5      	strb	r5, [r4, #3]
    bacc:	61e0      	str	r0, [r4, #28]
    bace:	f7ff ffd5 	bl	ba7c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    bad2:	f000 f909 	bl	bce8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    bad6:	b130      	cbz	r0, bae6 <mpsl_clock_hfclk_request+0x26>
    bad8:	69e0      	ldr	r0, [r4, #28]
    bada:	b110      	cbz	r0, bae2 <mpsl_clock_hfclk_request+0x22>
    badc:	4780      	blx	r0
    bade:	2000      	movs	r0, #0
    bae0:	61e0      	str	r0, [r4, #28]
    bae2:	2000      	movs	r0, #0
    bae4:	bd70      	pop	{r4, r5, r6, pc}
    bae6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    baea:	7125      	strb	r5, [r4, #4]
    baec:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    baf0:	e7f7      	b.n	bae2 <mpsl_clock_hfclk_request+0x22>
    baf2:	0000      	.short	0x0000
    baf4:	2000032c 	.word	0x2000032c

0000baf8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    baf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bafc:	0005      	movs	r5, r0
    bafe:	f06f 0015 	mvn.w	r0, #21
    bb02:	d03d      	beq.n	bb80 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x88>
    bb04:	7829      	ldrb	r1, [r5, #0]
    bb06:	2904      	cmp	r1, #4
    bb08:	d83a      	bhi.n	bb80 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x88>
    bb0a:	2900      	cmp	r1, #0
    bb0c:	7869      	ldrb	r1, [r5, #1]
    bb0e:	d039      	beq.n	bb84 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    bb10:	2900      	cmp	r1, #0
    bb12:	d135      	bne.n	bb80 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x88>
    bb14:	78a9      	ldrb	r1, [r5, #2]
    bb16:	2900      	cmp	r1, #0
    bb18:	d132      	bne.n	bb80 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x88>
    bb1a:	2000      	movs	r0, #0
    bb1c:	f004 ff4a 	bl	109b4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    bb20:	2000      	movs	r0, #0
    bb22:	f004 ff3a 	bl	1099a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    bb26:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    bb2a:	f04f 31ff 	mov.w	r1, #4294967295
    bb2e:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    bb32:	2600      	movs	r6, #0
    bb34:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    bb38:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    bb3c:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    bb40:	4c14      	ldr	r4, [pc, #80]	; (bb94 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x9c>)
    bb42:	7066      	strb	r6, [r4, #1]
    bb44:	88a8      	ldrh	r0, [r5, #4]
    bb46:	81a0      	strh	r0, [r4, #12]
    bb48:	f004 ff59 	bl	109fe <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    bb4c:	2701      	movs	r7, #1
    bb4e:	b108      	cbz	r0, bb54 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x5c>
    bb50:	70e7      	strb	r7, [r4, #3]
    bb52:	7067      	strb	r7, [r4, #1]
    bb54:	2101      	movs	r1, #1
    bb56:	4640      	mov	r0, r8
    bb58:	f004 ff42 	bl	109e0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    bb5c:	b108      	cbz	r0, bb62 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6a>
    bb5e:	f000 f8bd 	bl	bcdc <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    bb62:	f240 50f5 	movw	r0, #1525	; 0x5f5
    bb66:	81e0      	strh	r0, [r4, #14]
    bb68:	4628      	mov	r0, r5
    bb6a:	f7ff fe91 	bl	b890 <MPSL_IRQ_CLOCK_Handler+0x158>
    bb6e:	7227      	strb	r7, [r4, #8]
    bb70:	2000      	movs	r0, #0
    bb72:	f004 ff12 	bl	1099a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    bb76:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bb7a:	4630      	mov	r0, r6
    bb7c:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    bb80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bb84:	2900      	cmp	r1, #0
    bb86:	d0fb      	beq.n	bb80 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x88>
    bb88:	2920      	cmp	r1, #32
    bb8a:	d8f9      	bhi.n	bb80 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x88>
    bb8c:	78a9      	ldrb	r1, [r5, #2]
    bb8e:	2921      	cmp	r1, #33	; 0x21
    bb90:	d9c3      	bls.n	bb1a <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    bb92:	e7f5      	b.n	bb80 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x88>
    bb94:	2000032c 	.word	0x2000032c

0000bb98 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    bb98:	4801      	ldr	r0, [pc, #4]	; (bba0 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    bb9a:	8980      	ldrh	r0, [r0, #12]
    bb9c:	4770      	bx	lr
    bb9e:	0000      	.short	0x0000
    bba0:	2000032c 	.word	0x2000032c

0000bba4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>:
    bba4:	b510      	push	{r4, lr}
    bba6:	480d      	ldr	r0, [pc, #52]	; (bbdc <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    bba8:	f004 ff8b 	bl	10ac2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    bbac:	490b      	ldr	r1, [pc, #44]	; (bbdc <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    bbae:	1fc9      	subs	r1, r1, #7
    bbb0:	b148      	cbz	r0, bbc6 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x22>
    bbb2:	2001      	movs	r0, #1
    bbb4:	7008      	strb	r0, [r1, #0]
    bbb6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bbba:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    bbbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bbc2:	f7ff bf5b 	b.w	ba7c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    bbc6:	7a48      	ldrb	r0, [r1, #9]
    bbc8:	2802      	cmp	r0, #2
    bbca:	d101      	bne.n	bbd0 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x2c>
    bbcc:	f7ff fdf8 	bl	b7c0 <MPSL_IRQ_CLOCK_Handler+0x88>
    bbd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bbd4:	4801      	ldr	r0, [pc, #4]	; (bbdc <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA+0x38>)
    bbd6:	f004 bf8b 	b.w	10af0 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    bbda:	0000      	.short	0x0000
    bbdc:	20000333 	.word	0x20000333

0000bbe0 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    bbe0:	4802      	ldr	r0, [pc, #8]	; (bbec <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    bbe2:	7a40      	ldrb	r0, [r0, #9]
    bbe4:	2800      	cmp	r0, #0
    bbe6:	d000      	beq.n	bbea <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    bbe8:	2001      	movs	r0, #1
    bbea:	4770      	bx	lr
    bbec:	2000032c 	.word	0x2000032c

0000bbf0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    bbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bbf2:	4c1a      	ldr	r4, [pc, #104]	; (bc5c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x6c>)
    bbf4:	7aa0      	ldrb	r0, [r4, #10]
    bbf6:	2800      	cmp	r0, #0
    bbf8:	d10f      	bne.n	bc1a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    bbfa:	7e20      	ldrb	r0, [r4, #24]
    bbfc:	f000 0003 	and.w	r0, r0, #3
    bc00:	f004 ff0b 	bl	10a1a <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    bc04:	2800      	cmp	r0, #0
    bc06:	d008      	beq.n	bc1a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    bc08:	f3ef 8110 	mrs	r1, PRIMASK
    bc0c:	b672      	cpsid	i
    bc0e:	f7ff ffe7 	bl	bbe0 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    bc12:	b118      	cbz	r0, bc1c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    bc14:	2900      	cmp	r1, #0
    bc16:	d100      	bne.n	bc1a <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    bc18:	b662      	cpsie	i
    bc1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bc1c:	2001      	movs	r0, #1
    bc1e:	7260      	strb	r0, [r4, #9]
    bc20:	b901      	cbnz	r1, bc24 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    bc22:	b662      	cpsie	i
    bc24:	2008      	movs	r0, #8
    bc26:	06c5      	lsls	r5, r0, #27
    bc28:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bc2c:	f44f 7020 	mov.w	r0, #640	; 0x280
    bc30:	f8ad 0000 	strh.w	r0, [sp]
    bc34:	f8bd 0000 	ldrh.w	r0, [sp]
    bc38:	1e41      	subs	r1, r0, #1
    bc3a:	f8ad 1000 	strh.w	r1, [sp]
    bc3e:	d2f9      	bcs.n	bc34 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x44>
    bc40:	2600      	movs	r6, #0
    bc42:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    bc46:	4805      	ldr	r0, [pc, #20]	; (bc5c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x6c>)
    bc48:	1dc0      	adds	r0, r0, #7
    bc4a:	f004 ff4d 	bl	10ae8 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    bc4e:	7026      	strb	r6, [r4, #0]
    bc50:	f7ff fdb6 	bl	b7c0 <MPSL_IRQ_CLOCK_Handler+0x88>
    bc54:	2008      	movs	r0, #8
    bc56:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    bc5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bc5c:	2000032c 	.word	0x2000032c

0000bc60 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    bc60:	b570      	push	{r4, r5, r6, lr}
    bc62:	4602      	mov	r2, r0
    bc64:	2000      	movs	r0, #0
    bc66:	2900      	cmp	r1, #0
    bc68:	d026      	beq.n	bcb8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x58>
    bc6a:	2a00      	cmp	r2, #0
    bc6c:	d024      	beq.n	bcb8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x58>
    bc6e:	fba2 0101 	umull	r0, r1, r2, r1
    bc72:	1e40      	subs	r0, r0, #1
    bc74:	4a11      	ldr	r2, [pc, #68]	; (bcbc <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x5c>)
    bc76:	f141 31ff 	adc.w	r1, r1, #4294967295
    bc7a:	4291      	cmp	r1, r2
    bc7c:	d303      	bcc.n	bc86 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x26>
    bc7e:	2171      	movs	r1, #113	; 0x71
    bc80:	206d      	movs	r0, #109	; 0x6d
    bc82:	f000 fd51 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bc86:	4d0e      	ldr	r5, [pc, #56]	; (bcc0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x60>)
    bc88:	0309      	lsls	r1, r1, #12
    bc8a:	ea41 5110 	orr.w	r1, r1, r0, lsr #20
    bc8e:	0c2a      	lsrs	r2, r5, #16
    bc90:	f3c0 130f 	ubfx	r3, r0, #4, #16
    bc94:	fbb1 f4f2 	udiv	r4, r1, r2
    bc98:	fbb1 f0f2 	udiv	r0, r1, r2
    bc9c:	0409      	lsls	r1, r1, #16
    bc9e:	0420      	lsls	r0, r4, #16
    bca0:	18c9      	adds	r1, r1, r3
    bca2:	fba4 3405 	umull	r3, r4, r4, r5
    bca6:	1ac9      	subs	r1, r1, r3
    bca8:	fbb1 f3f2 	udiv	r3, r1, r2
    bcac:	fbb1 f1f2 	udiv	r1, r1, r2
    bcb0:	ea40 0003 	orr.w	r0, r0, r3
    bcb4:	f100 0001 	add.w	r0, r0, #1
    bcb8:	bd70      	pop	{r4, r5, r6, pc}
    bcba:	0000      	.short	0x0000
    bcbc:	000f4240 	.word	0x000f4240
    bcc0:	f4240000 	.word	0xf4240000

0000bcc4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    bcc4:	b510      	push	{r4, lr}
    bcc6:	4c04      	ldr	r4, [pc, #16]	; (bcd8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    bcc8:	7e20      	ldrb	r0, [r4, #24]
    bcca:	f000 0003 	and.w	r0, r0, #3
    bcce:	f004 fea4 	bl	10a1a <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    bcd2:	2800      	cmp	r0, #0
    bcd4:	d0f8      	beq.n	bcc8 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    bcd6:	bd10      	pop	{r4, pc}
    bcd8:	2000032c 	.word	0x2000032c

0000bcdc <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    bcdc:	4901      	ldr	r1, [pc, #4]	; (bce4 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    bcde:	2001      	movs	r0, #1
    bce0:	7008      	strb	r0, [r1, #0]
    bce2:	4770      	bx	lr
    bce4:	200003a0 	.word	0x200003a0

0000bce8 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    bce8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    bcec:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    bcf0:	b918      	cbnz	r0, bcfa <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    bcf2:	4803      	ldr	r0, [pc, #12]	; (bd00 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    bcf4:	7800      	ldrb	r0, [r0, #0]
    bcf6:	2800      	cmp	r0, #0
    bcf8:	d000      	beq.n	bcfc <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    bcfa:	2001      	movs	r0, #1
    bcfc:	4770      	bx	lr
    bcfe:	0000      	.short	0x0000
    bd00:	200003a0 	.word	0x200003a0

0000bd04 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    bd04:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    bd08:	2101      	movs	r1, #1
    bd0a:	6041      	str	r1, [r0, #4]
    bd0c:	2100      	movs	r1, #0
    bd0e:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    bd12:	4801      	ldr	r0, [pc, #4]	; (bd18 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    bd14:	7001      	strb	r1, [r0, #0]
    bd16:	4770      	bx	lr
    bd18:	200003a0 	.word	0x200003a0

0000bd1c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    bd1c:	4802      	ldr	r0, [pc, #8]	; (bd28 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    bd1e:	6800      	ldr	r0, [r0, #0]
    bd20:	f000 0003 	and.w	r0, r0, #3
    bd24:	4770      	bx	lr
    bd26:	0000      	.short	0x0000
    bd28:	4000041c 	.word	0x4000041c
    bd2c:	b510      	push	{r4, lr}
    bd2e:	b131      	cbz	r1, bd3e <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    bd30:	2901      	cmp	r1, #1
    bd32:	d007      	beq.n	bd44 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    bd34:	f240 318a 	movw	r1, #906	; 0x38a
    bd38:	a005      	add	r0, pc, #20	; (adr r0, bd50 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    bd3a:	f000 fcc9 	bl	c6d0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    bd3e:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    bd42:	e001      	b.n	bd48 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    bd44:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    bd48:	f000 0001 	and.w	r0, r0, #1
    bd4c:	bd10      	pop	{r4, pc}
    bd4e:	0000      	.short	0x0000
    bd50:	5f66726e 	.word	0x5f66726e
    bd54:	636f6c63 	.word	0x636f6c63
    bd58:	00682e6b 	.word	0x00682e6b

0000bd5c <MPSL_IRQ_RTC0_Handler>:
    bd5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bd60:	2400      	movs	r4, #0
    bd62:	f8df a094 	ldr.w	sl, [pc, #148]	; bdf8 <MPSL_IRQ_RTC0_Handler+0x9c>
    bd66:	4e25      	ldr	r6, [pc, #148]	; (bdfc <MPSL_IRQ_RTC0_Handler+0xa0>)
    bd68:	4d25      	ldr	r5, [pc, #148]	; (be00 <MPSL_IRQ_RTC0_Handler+0xa4>)
    bd6a:	f44f 3880 	mov.w	r8, #65536	; 0x10000
    bd6e:	f44f 79a0 	mov.w	r9, #320	; 0x140
    bd72:	4627      	mov	r7, r4
    bd74:	f8d5 2304 	ldr.w	r2, [r5, #772]	; 0x304
    bd78:	fa08 f004 	lsl.w	r0, r8, r4
    bd7c:	eb09 0184 	add.w	r1, r9, r4, lsl #2
    bd80:	4202      	tst	r2, r0
    bd82:	d024      	beq.n	bdce <MPSL_IRQ_RTC0_Handler+0x72>
    bd84:	4a1e      	ldr	r2, [pc, #120]	; (be00 <MPSL_IRQ_RTC0_Handler+0xa4>)
    bd86:	5852      	ldr	r2, [r2, r1]
    bd88:	b30a      	cbz	r2, bdce <MPSL_IRQ_RTC0_Handler+0x72>
    bd8a:	506f      	str	r7, [r5, r1]
    bd8c:	00a1      	lsls	r1, r4, #2
    bd8e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    bd92:	f501 4130 	add.w	r1, r1, #45056	; 0xb000
    bd96:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    bd9a:	f8da 2000 	ldr.w	r2, [sl]
    bd9e:	1a89      	subs	r1, r1, r2
    bda0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    bda4:	2902      	cmp	r1, #2
    bda6:	d302      	bcc.n	bdae <MPSL_IRQ_RTC0_Handler+0x52>
    bda8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    bdac:	d90f      	bls.n	bdce <MPSL_IRQ_RTC0_Handler+0x72>
    bdae:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bdb2:	1d20      	adds	r0, r4, #4
    bdb4:	b2c0      	uxtb	r0, r0
    bdb6:	f7fe f9fd 	bl	a1b4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    bdba:	7830      	ldrb	r0, [r6, #0]
    bdbc:	28ff      	cmp	r0, #255	; 0xff
    bdbe:	d006      	beq.n	bdce <MPSL_IRQ_RTC0_Handler+0x72>
    bdc0:	7871      	ldrb	r1, [r6, #1]
    bdc2:	1f09      	subs	r1, r1, #4
    bdc4:	b2c9      	uxtb	r1, r1
    bdc6:	42a1      	cmp	r1, r4
    bdc8:	bf08      	it	eq
    bdca:	f000 fd81 	bleq	c8d0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    bdce:	1c60      	adds	r0, r4, #1
    bdd0:	b2c4      	uxtb	r4, r0
    bdd2:	2c04      	cmp	r4, #4
    bdd4:	d3ce      	bcc.n	bd74 <MPSL_IRQ_RTC0_Handler+0x18>
    bdd6:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    bdda:	b128      	cbz	r0, bde8 <MPSL_IRQ_RTC0_Handler+0x8c>
    bddc:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    bde0:	4808      	ldr	r0, [pc, #32]	; (be04 <MPSL_IRQ_RTC0_Handler+0xa8>)
    bde2:	68c1      	ldr	r1, [r0, #12]
    bde4:	1c49      	adds	r1, r1, #1
    bde6:	60c1      	str	r1, [r0, #12]
    bde8:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bdec:	f44f 6000 	mov.w	r0, #2048	; 0x800
    bdf0:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    bdf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bdf8:	4000b504 	.word	0x4000b504
    bdfc:	2000002a 	.word	0x2000002a
    be00:	4000b000 	.word	0x4000b000
    be04:	20000028 	.word	0x20000028

0000be08 <MPSL_IRQ_TIMER0_Handler>:
    be08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be0c:	4d38      	ldr	r5, [pc, #224]	; (bef0 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    be0e:	7828      	ldrb	r0, [r5, #0]
    be10:	28ff      	cmp	r0, #255	; 0xff
    be12:	d068      	beq.n	bee6 <MPSL_IRQ_TIMER0_Handler+0xde>
    be14:	1d28      	adds	r0, r5, #4
    be16:	2201      	movs	r2, #1
    be18:	7801      	ldrb	r1, [r0, #0]
    be1a:	b159      	cbz	r1, be34 <MPSL_IRQ_TIMER0_Handler+0x2c>
    be1c:	2901      	cmp	r1, #1
    be1e:	bf08      	it	eq
    be20:	706a      	strbeq	r2, [r5, #1]
    be22:	d002      	beq.n	be2a <MPSL_IRQ_TIMER0_Handler+0x22>
    be24:	7869      	ldrb	r1, [r5, #1]
    be26:	2900      	cmp	r1, #0
    be28:	d058      	beq.n	bedc <MPSL_IRQ_TIMER0_Handler+0xd4>
    be2a:	2102      	movs	r1, #2
    be2c:	7001      	strb	r1, [r0, #0]
    be2e:	7840      	ldrb	r0, [r0, #1]
    be30:	f000 fb30 	bl	c494 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    be34:	4c2f      	ldr	r4, [pc, #188]	; (bef4 <MPSL_IRQ_TIMER0_Handler+0xec>)
    be36:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    be3a:	f04f 0800 	mov.w	r8, #0
    be3e:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    be42:	f44f 7780 	mov.w	r7, #256	; 0x100
    be46:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    be4a:	d00a      	beq.n	be62 <MPSL_IRQ_TIMER0_Handler+0x5a>
    be4c:	482a      	ldr	r0, [pc, #168]	; (bef8 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    be4e:	6800      	ldr	r0, [r0, #0]
    be50:	b138      	cbz	r0, be62 <MPSL_IRQ_TIMER0_Handler+0x5a>
    be52:	2003      	movs	r0, #3
    be54:	f000 fb1e 	bl	c494 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    be58:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    be5c:	2003      	movs	r0, #3
    be5e:	f7fe f9a9 	bl	a1b4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    be62:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    be66:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    be6a:	d00a      	beq.n	be82 <MPSL_IRQ_TIMER0_Handler+0x7a>
    be6c:	4823      	ldr	r0, [pc, #140]	; (befc <MPSL_IRQ_TIMER0_Handler+0xf4>)
    be6e:	6800      	ldr	r0, [r0, #0]
    be70:	b138      	cbz	r0, be82 <MPSL_IRQ_TIMER0_Handler+0x7a>
    be72:	2002      	movs	r0, #2
    be74:	f000 fb0e 	bl	c494 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    be78:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    be7c:	2002      	movs	r0, #2
    be7e:	f7fe f999 	bl	a1b4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    be82:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    be86:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    be8a:	d00a      	beq.n	bea2 <MPSL_IRQ_TIMER0_Handler+0x9a>
    be8c:	481c      	ldr	r0, [pc, #112]	; (bf00 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    be8e:	6800      	ldr	r0, [r0, #0]
    be90:	b138      	cbz	r0, bea2 <MPSL_IRQ_TIMER0_Handler+0x9a>
    be92:	2001      	movs	r0, #1
    be94:	f000 fafe 	bl	c494 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    be98:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    be9c:	2001      	movs	r0, #1
    be9e:	f7fe f989 	bl	a1b4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    bea2:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    bea6:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    beaa:	bf08      	it	eq
    beac:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    beb0:	4814      	ldr	r0, [pc, #80]	; (bf04 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    beb2:	6800      	ldr	r0, [r0, #0]
    beb4:	2800      	cmp	r0, #0
    beb6:	bf08      	it	eq
    beb8:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    bebc:	2000      	movs	r0, #0
    bebe:	f000 fae9 	bl	c494 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    bec2:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    bec6:	20ff      	movs	r0, #255	; 0xff
    bec8:	7028      	strb	r0, [r5, #0]
    beca:	f8c5 8008 	str.w	r8, [r5, #8]
    bece:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    bed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bed6:	2000      	movs	r0, #0
    bed8:	f7fe b96c 	b.w	a1b4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    bedc:	f240 5191 	movw	r1, #1425	; 0x591
    bee0:	206c      	movs	r0, #108	; 0x6c
    bee2:	f000 fc21 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    beea:	2007      	movs	r0, #7
    beec:	f7fe b962 	b.w	a1b4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    bef0:	20000028 	.word	0x20000028
    bef4:	40008000 	.word	0x40008000
    bef8:	4000814c 	.word	0x4000814c
    befc:	40008148 	.word	0x40008148
    bf00:	40008144 	.word	0x40008144
    bf04:	40008140 	.word	0x40008140
    bf08:	2201      	movs	r2, #1
    bf0a:	0211      	lsls	r1, r2, #8
    bf0c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    bf10:	2000      	movs	r0, #0
    bf12:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    bf16:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    bf1a:	f3bf 8f4f 	dsb	sy
    bf1e:	f3bf 8f6f 	isb	sy
    bf22:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    bf26:	490e      	ldr	r1, [pc, #56]	; (bf60 <MPSL_IRQ_TIMER0_Handler+0x158>)
    bf28:	f841 2f04 	str.w	r2, [r1, #4]!
    bf2c:	1e43      	subs	r3, r0, #1
    bf2e:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    bf32:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    bf36:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    bf3a:	4b0a      	ldr	r3, [pc, #40]	; (bf64 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    bf3c:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    bf40:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    bf44:	1d1b      	adds	r3, r3, #4
    bf46:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    bf4a:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    bf4e:	1d1b      	adds	r3, r3, #4
    bf50:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    bf54:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    bf58:	60ca      	str	r2, [r1, #12]
    bf5a:	4903      	ldr	r1, [pc, #12]	; (bf68 <MPSL_IRQ_TIMER0_Handler+0x160>)
    bf5c:	7048      	strb	r0, [r1, #1]
    bf5e:	4770      	bx	lr
    bf60:	40008000 	.word	0x40008000
    bf64:	40008004 	.word	0x40008004
    bf68:	20000028 	.word	0x20000028
    bf6c:	481a      	ldr	r0, [pc, #104]	; (bfd8 <MPSL_IRQ_TIMER0_Handler+0x1d0>)
    bf6e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    bf72:	1e83      	subs	r3, r0, #2
    bf74:	f890 c000 	ldrb.w	ip, [r0]
    bf78:	7858      	ldrb	r0, [r3, #1]
    bf7a:	4a18      	ldr	r2, [pc, #96]	; (bfdc <MPSL_IRQ_TIMER0_Handler+0x1d4>)
    bf7c:	1f00      	subs	r0, r0, #4
    bf7e:	fa01 f000 	lsl.w	r0, r1, r0
    bf82:	781b      	ldrb	r3, [r3, #0]
    bf84:	f1bc 0f00 	cmp.w	ip, #0
    bf88:	d01c      	beq.n	bfc4 <MPSL_IRQ_TIMER0_Handler+0x1bc>
    bf8a:	2bff      	cmp	r3, #255	; 0xff
    bf8c:	bf08      	it	eq
    bf8e:	2000      	moveq	r0, #0
    bf90:	4308      	orrs	r0, r1
    bf92:	f040 0002 	orr.w	r0, r0, #2
    bf96:	ea22 0100 	bic.w	r1, r2, r0
    bf9a:	2001      	movs	r0, #1
    bf9c:	4a10      	ldr	r2, [pc, #64]	; (bfe0 <MPSL_IRQ_TIMER0_Handler+0x1d8>)
    bf9e:	f8c2 1348 	str.w	r1, [r2, #840]	; 0x348
    bfa2:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    bfa6:	2803      	cmp	r0, #3
    bfa8:	bf3a      	itte	cc
    bfaa:	2300      	movcc	r3, #0
    bfac:	f44f 7ca0 	movcc.w	ip, #320	; 0x140
    bfb0:	4770      	bxcs	lr
    bfb2:	bf00      	nop
    bfb4:	eb0c 0180 	add.w	r1, ip, r0, lsl #2
    bfb8:	5053      	str	r3, [r2, r1]
    bfba:	1c40      	adds	r0, r0, #1
    bfbc:	b2c0      	uxtb	r0, r0
    bfbe:	2803      	cmp	r0, #3
    bfc0:	d3f8      	bcc.n	bfb4 <MPSL_IRQ_TIMER0_Handler+0x1ac>
    bfc2:	4770      	bx	lr
    bfc4:	2bff      	cmp	r3, #255	; 0xff
    bfc6:	bf08      	it	eq
    bfc8:	2000      	moveq	r0, #0
    bfca:	f040 0002 	orr.w	r0, r0, #2
    bfce:	ea22 0100 	bic.w	r1, r2, r0
    bfd2:	2000      	movs	r0, #0
    bfd4:	e7e2      	b.n	bf9c <MPSL_IRQ_TIMER0_Handler+0x194>
    bfd6:	0000      	.short	0x0000
    bfd8:	2000002c 	.word	0x2000002c
    bfdc:	000f0002 	.word	0x000f0002
    bfe0:	4000b000 	.word	0x4000b000

0000bfe4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    bfe4:	4801      	ldr	r0, [pc, #4]	; (bfec <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    bfe6:	6800      	ldr	r0, [r0, #0]
    bfe8:	4770      	bx	lr
    bfea:	0000      	.short	0x0000
    bfec:	4000b504 	.word	0x4000b504

0000bff0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    bff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bff4:	4f3f      	ldr	r7, [pc, #252]	; (c0f4 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x104>)
    bff6:	4604      	mov	r4, r0
    bff8:	1f3d      	subs	r5, r7, #4
    bffa:	7838      	ldrb	r0, [r7, #0]
    bffc:	460e      	mov	r6, r1
    bffe:	2801      	cmp	r0, #1
    c000:	d107      	bne.n	c012 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x22>
    c002:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
    c006:	4060      	eors	r0, r4
    c008:	4071      	eors	r1, r6
    c00a:	4308      	orrs	r0, r1
    c00c:	bf08      	it	eq
    c00e:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c012:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    c016:	4938      	ldr	r1, [pc, #224]	; (c0f8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x108>)
    c018:	6008      	str	r0, [r1, #0]
    c01a:	f7ff ffa7 	bl	bf6c <MPSL_IRQ_TIMER0_Handler+0x164>
    c01e:	4a37      	ldr	r2, [pc, #220]	; (c0fc <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>)
    c020:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    c024:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    c028:	460b      	mov	r3, r1
    c02a:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    c02e:	f8c2 1348 	str.w	r1, [r2, #840]	; 0x348
    c032:	f04f 0800 	mov.w	r8, #0
    c036:	f8c2 8140 	str.w	r8, [r2, #320]	; 0x140
    c03a:	4931      	ldr	r1, [pc, #196]	; (c100 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x110>)
    c03c:	f8d1 c000 	ldr.w	ip, [r1]
    c040:	f04f 0901 	mov.w	r9, #1
    c044:	eba0 0c0c 	sub.w	ip, r0, ip
    c048:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    c04c:	f1bc 0f02 	cmp.w	ip, #2
    c050:	d331      	bcc.n	c0b6 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xc6>
    c052:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    c056:	d82e      	bhi.n	c0b6 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xc6>
    c058:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c05c:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    c060:	7838      	ldrb	r0, [r7, #0]
    c062:	2800      	cmp	r0, #0
    c064:	bf18      	it	ne
    c066:	692a      	ldrne	r2, [r5, #16]
    c068:	d005      	beq.n	c076 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x86>
    c06a:	6808      	ldr	r0, [r1, #0]
    c06c:	1a10      	subs	r0, r2, r0
    c06e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c072:	2802      	cmp	r0, #2
    c074:	d3f9      	bcc.n	c06a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x7a>
    c076:	f8c5 9008 	str.w	r9, [r5, #8]
    c07a:	f885 8000 	strb.w	r8, [r5]
    c07e:	f7ff ff43 	bl	bf08 <MPSL_IRQ_TIMER0_Handler+0x100>
    c082:	4820      	ldr	r0, [pc, #128]	; (c104 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>)
    c084:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    c088:	f368 0101 	bfi	r1, r8, #0, #2
    c08c:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    c090:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    c094:	2102      	movs	r1, #2
    c096:	f361 0201 	bfi	r2, r1, #0, #2
    c09a:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    c09e:	2110      	movs	r1, #16
    c0a0:	fa91 f1a1 	rbit	r1, r1
    c0a4:	fab1 f181 	clz	r1, r1
    c0a8:	2909      	cmp	r1, #9
    c0aa:	d909      	bls.n	c0c0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xd0>
    c0ac:	f240 3163 	movw	r1, #867	; 0x363
    c0b0:	a015      	add	r0, pc, #84	; (adr r0, c108 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x118>)
    c0b2:	f000 fb0d 	bl	c6d0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    c0b6:	f240 31b1 	movw	r1, #945	; 0x3b1
    c0ba:	206c      	movs	r0, #108	; 0x6c
    c0bc:	f000 fb34 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c0c0:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    c0c4:	f8c0 900c 	str.w	r9, [r0, #12]
    c0c8:	68a9      	ldr	r1, [r5, #8]
    c0ca:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c0ce:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c0d2:	f44f 7080 	mov.w	r0, #256	; 0x100
    c0d6:	f8c1 0280 	str.w	r0, [r1, #640]	; 0x280
    c0da:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    c0de:	490d      	ldr	r1, [pc, #52]	; (c114 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    c0e0:	05c0      	lsls	r0, r0, #23
    c0e2:	6008      	str	r0, [r1, #0]
    c0e4:	e9c5 4604 	strd	r4, r6, [r5, #16]
    c0e8:	2004      	movs	r0, #4
    c0ea:	7078      	strb	r0, [r7, #1]
    c0ec:	f887 9000 	strb.w	r9, [r7]
    c0f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c0f4:	2000002c 	.word	0x2000002c
    c0f8:	4001f508 	.word	0x4001f508
    c0fc:	4000b000 	.word	0x4000b000
    c100:	4000b504 	.word	0x4000b504
    c104:	40008000 	.word	0x40008000
    c108:	5f66726e 	.word	0x5f66726e
    c10c:	656d6974 	.word	0x656d6974
    c110:	00682e72 	.word	0x00682e72
    c114:	4001f504 	.word	0x4001f504

0000c118 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    c118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c11c:	4c31      	ldr	r4, [pc, #196]	; (c1e4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xcc>)
    c11e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    c122:	ea82 0c00 	eor.w	ip, r2, r0
    c126:	404b      	eors	r3, r1
    c128:	ea5c 0303 	orrs.w	r3, ip, r3
    c12c:	bf14      	ite	ne
    c12e:	2301      	movne	r3, #1
    c130:	2300      	moveq	r3, #0
    c132:	f8df c0b4 	ldr.w	ip, [pc, #180]	; c1e8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd0>
    c136:	f89c 8000 	ldrb.w	r8, [ip]
    c13a:	f1b8 0f02 	cmp.w	r8, #2
    c13e:	d002      	beq.n	c146 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x2e>
    c140:	2b00      	cmp	r3, #0
    c142:	d03f      	beq.n	c1c4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>
    c144:	e003      	b.n	c14e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x36>
    c146:	2b00      	cmp	r3, #0
    c148:	bf08      	it	eq
    c14a:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c14e:	7863      	ldrb	r3, [r4, #1]
    c150:	b3bb      	cbz	r3, c1c2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xaa>
    c152:	4d26      	ldr	r5, [pc, #152]	; (c1ec <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd4>)
    c154:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    c158:	602b      	str	r3, [r5, #0]
    c15a:	4e25      	ldr	r6, [pc, #148]	; (c1f0 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xd8>)
    c15c:	f44f 3580 	mov.w	r5, #65536	; 0x10000
    c160:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
    c164:	462f      	mov	r7, r5
    c166:	f8c6 5308 	str.w	r5, [r6, #776]	; 0x308
    c16a:	f8c6 5348 	str.w	r5, [r6, #840]	; 0x348
    c16e:	2500      	movs	r5, #0
    c170:	f8c6 5140 	str.w	r5, [r6, #320]	; 0x140
    c174:	4d1f      	ldr	r5, [pc, #124]	; (c1f4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xdc>)
    c176:	f8d5 9000 	ldr.w	r9, [r5]
    c17a:	eba3 0909 	sub.w	r9, r3, r9
    c17e:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
    c182:	f1b9 0f02 	cmp.w	r9, #2
    c186:	d327      	bcc.n	c1d8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
    c188:	f5b9 0f00 	cmp.w	r9, #8388608	; 0x800000
    c18c:	d824      	bhi.n	c1d8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>
    c18e:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
    c192:	f8c6 7344 	str.w	r7, [r6, #836]	; 0x344
    c196:	f1b8 0f00 	cmp.w	r8, #0
    c19a:	d005      	beq.n	c1a8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x90>
    c19c:	682b      	ldr	r3, [r5, #0]
    c19e:	1ad3      	subs	r3, r2, r3
    c1a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c1a4:	2b02      	cmp	r3, #2
    c1a6:	d3f9      	bcc.n	c19c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x84>
    c1a8:	4d13      	ldr	r5, [pc, #76]	; (c1f8 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xe0>)
    c1aa:	2202      	movs	r2, #2
    c1ac:	0753      	lsls	r3, r2, #29
    c1ae:	602b      	str	r3, [r5, #0]
    c1b0:	e9c4 0104 	strd	r0, r1, [r4, #16]
    c1b4:	2004      	movs	r0, #4
    c1b6:	f88c 0001 	strb.w	r0, [ip, #1]
    c1ba:	f88c 2000 	strb.w	r2, [ip]
    c1be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c1c2:	e004      	b.n	c1ce <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb6>
    c1c4:	f240 31bf 	movw	r1, #959	; 0x3bf
    c1c8:	206c      	movs	r0, #108	; 0x6c
    c1ca:	f000 faad 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c1ce:	f240 31c3 	movw	r1, #963	; 0x3c3
    c1d2:	206c      	movs	r0, #108	; 0x6c
    c1d4:	f000 faa8 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c1d8:	f240 31cf 	movw	r1, #975	; 0x3cf
    c1dc:	206c      	movs	r0, #108	; 0x6c
    c1de:	f000 faa3 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c1e2:	0000      	.short	0x0000
    c1e4:	20000028 	.word	0x20000028
    c1e8:	2000002c 	.word	0x2000002c
    c1ec:	4001f508 	.word	0x4001f508
    c1f0:	4000b000 	.word	0x4000b000
    c1f4:	4000b504 	.word	0x4000b504
    c1f8:	4001f504 	.word	0x4001f504

0000c1fc <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    c1fc:	4901      	ldr	r1, [pc, #4]	; (c204 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    c1fe:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
    c202:	4770      	bx	lr
    c204:	20000028 	.word	0x20000028

0000c208 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    c208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c20c:	f7ff feae 	bl	bf6c <MPSL_IRQ_TIMER0_Handler+0x164>
    c210:	f8df c0c4 	ldr.w	ip, [pc, #196]	; c2d8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    c214:	f89c 0000 	ldrb.w	r0, [ip]
    c218:	2802      	cmp	r0, #2
    c21a:	d004      	beq.n	c226 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x1e>
    c21c:	f240 31da 	movw	r1, #986	; 0x3da
    c220:	206c      	movs	r0, #108	; 0x6c
    c222:	f000 fa81 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c226:	f3ef 8510 	mrs	r5, PRIMASK
    c22a:	b672      	cpsid	i
    c22c:	4a2b      	ldr	r2, [pc, #172]	; (c2dc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd4>)
    c22e:	4c2c      	ldr	r4, [pc, #176]	; (c2e0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd8>)
    c230:	2300      	movs	r3, #0
    c232:	bf00      	nop
    c234:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
    c238:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
    c23c:	b129      	cbz	r1, c24a <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x42>
    c23e:	68e0      	ldr	r0, [r4, #12]
    c240:	1c40      	adds	r0, r0, #1
    c242:	60e0      	str	r0, [r4, #12]
    c244:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    c248:	e7f4      	b.n	c234 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x2c>
    c24a:	68e1      	ldr	r1, [r4, #12]
    c24c:	b905      	cbnz	r5, c250 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x48>
    c24e:	b662      	cpsie	i
    c250:	0a0a      	lsrs	r2, r1, #8
    c252:	0609      	lsls	r1, r1, #24
    c254:	1808      	adds	r0, r1, r0
    c256:	eb42 0103 	adc.w	r1, r2, r3
    c25a:	e9d4 2804 	ldrd	r2, r8, [r4, #16]
    c25e:	1cc0      	adds	r0, r0, #3
    c260:	f141 0100 	adc.w	r1, r1, #0
    c264:	4d1f      	ldr	r5, [pc, #124]	; (c2e4 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    c266:	2701      	movs	r7, #1
    c268:	4e1f      	ldr	r6, [pc, #124]	; (c2e8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    c26a:	ea80 0902 	eor.w	r9, r0, r2
    c26e:	ea81 0808 	eor.w	r8, r1, r8
    c272:	ea59 0808 	orrs.w	r8, r9, r8
    c276:	d00e      	beq.n	c296 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x8e>
    c278:	f8d5 8000 	ldr.w	r8, [r5]
    c27c:	eba2 0808 	sub.w	r8, r2, r8
    c280:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    c284:	f1b8 0f04 	cmp.w	r8, #4
    c288:	d305      	bcc.n	c296 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x8e>
    c28a:	f5b8 0f00 	cmp.w	r8, #8388608	; 0x800000
    c28e:	d802      	bhi.n	c296 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x8e>
    c290:	f7ff feae 	bl	bff0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    c294:	e01b      	b.n	c2ce <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc6>
    c296:	6828      	ldr	r0, [r5, #0]
    c298:	1a10      	subs	r0, r2, r0
    c29a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c29e:	2802      	cmp	r0, #2
    c2a0:	d313      	bcc.n	c2ca <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc2>
    c2a2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    c2a6:	d810      	bhi.n	c2ca <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc2>
    c2a8:	4910      	ldr	r1, [pc, #64]	; (c2ec <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    c2aa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c2ae:	6008      	str	r0, [r1, #0]
    c2b0:	60a7      	str	r7, [r4, #8]
    c2b2:	7023      	strb	r3, [r4, #0]
    c2b4:	6077      	str	r7, [r6, #4]
    c2b6:	60f7      	str	r7, [r6, #12]
    c2b8:	0040      	lsls	r0, r0, #1
    c2ba:	1f09      	subs	r1, r1, #4
    c2bc:	6008      	str	r0, [r1, #0]
    c2be:	2004      	movs	r0, #4
    c2c0:	f88c 0001 	strb.w	r0, [ip, #1]
    c2c4:	f88c 7000 	strb.w	r7, [ip]
    c2c8:	e001      	b.n	c2ce <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xc6>
    c2ca:	60a7      	str	r7, [r4, #8]
    c2cc:	7023      	strb	r3, [r4, #0]
    c2ce:	68a0      	ldr	r0, [r4, #8]
    c2d0:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    c2d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c2d8:	2000002c 	.word	0x2000002c
    c2dc:	4000b000 	.word	0x4000b000
    c2e0:	20000028 	.word	0x20000028
    c2e4:	4000b504 	.word	0x4000b504
    c2e8:	40008000 	.word	0x40008000
    c2ec:	4001f508 	.word	0x4001f508

0000c2f0 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY>:
    c2f0:	b410      	push	{r4}
    c2f2:	f3ef 8410 	mrs	r4, PRIMASK
    c2f6:	b672      	cpsid	i
    c2f8:	4a0c      	ldr	r2, [pc, #48]	; (c32c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x3c>)
    c2fa:	490d      	ldr	r1, [pc, #52]	; (c330 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x40>)
    c2fc:	f04f 0c00 	mov.w	ip, #0
    c300:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
    c304:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    c308:	b12b      	cbz	r3, c316 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x26>
    c30a:	68c8      	ldr	r0, [r1, #12]
    c30c:	1c40      	adds	r0, r0, #1
    c30e:	60c8      	str	r0, [r1, #12]
    c310:	f8c2 c104 	str.w	ip, [r2, #260]	; 0x104
    c314:	e7f4      	b.n	c300 <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x10>
    c316:	68c9      	ldr	r1, [r1, #12]
    c318:	b904      	cbnz	r4, c31c <sym_SGRERKTYRS3O7AD2IUDRW5CT4AGUHLY2Q4A7LKY+0x2c>
    c31a:	b662      	cpsie	i
    c31c:	0a0a      	lsrs	r2, r1, #8
    c31e:	0609      	lsls	r1, r1, #24
    c320:	1808      	adds	r0, r1, r0
    c322:	bc10      	pop	{r4}
    c324:	eb42 010c 	adc.w	r1, r2, ip
    c328:	4770      	bx	lr
    c32a:	0000      	.short	0x0000
    c32c:	4000b000 	.word	0x4000b000
    c330:	20000028 	.word	0x20000028

0000c334 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    c334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c338:	4951      	ldr	r1, [pc, #324]	; (c480 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x14c>)
    c33a:	f022 4c7f 	bic.w	ip, r2, #4278190080	; 0xff000000
    c33e:	2401      	movs	r4, #1
    c340:	780b      	ldrb	r3, [r1, #0]
    c342:	7849      	ldrb	r1, [r1, #1]
    c344:	2500      	movs	r5, #0
    c346:	f44f 72a0 	mov.w	r2, #320	; 0x140
    c34a:	2807      	cmp	r0, #7
    c34c:	d27d      	bcs.n	c44a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    c34e:	e8df f000 	tbb	[pc, r0]
    c352:	0404      	.short	0x0404
    c354:	5b5b0404 	.word	0x5b5b0404
    c358:	005b      	.short	0x005b
    c35a:	4f4a      	ldr	r7, [pc, #296]	; (c484 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x150>)
    c35c:	e9d7 8604 	ldrd	r8, r6, [r7, #16]
    c360:	ea6f 0808 	mvn.w	r8, r8
    c364:	ea78 0606 	orns	r6, r8, r6
    c368:	bf04      	itt	eq
    c36a:	787e      	ldrbeq	r6, [r7, #1]
    c36c:	2e00      	cmpeq	r6, #0
    c36e:	d002      	beq.n	c376 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x42>
    c370:	2b02      	cmp	r3, #2
    c372:	d005      	beq.n	c380 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x4c>
    c374:	e024      	b.n	c3c0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8c>
    c376:	f240 4132 	movw	r1, #1074	; 0x432
    c37a:	206c      	movs	r0, #108	; 0x6c
    c37c:	f000 f9d4 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c380:	1f0e      	subs	r6, r1, #4
    c382:	b2f6      	uxtb	r6, r6
    c384:	eb02 0286 	add.w	r2, r2, r6, lsl #2
    c388:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
    c38c:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    c390:	2200      	movs	r2, #0
    c392:	2b01      	cmp	r3, #1
    c394:	d002      	beq.n	c39c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x68>
    c396:	2b02      	cmp	r3, #2
    c398:	d008      	beq.n	c3ac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x78>
    c39a:	e00e      	b.n	c3ba <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x86>
    c39c:	2904      	cmp	r1, #4
    c39e:	bf24      	itt	cs
    c3a0:	6837      	ldrcs	r7, [r6, #0]
    c3a2:	2f00      	cmpcs	r7, #0
    c3a4:	bf08      	it	eq
    c3a6:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
    c3aa:	e006      	b.n	c3ba <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x86>
    c3ac:	2904      	cmp	r1, #4
    c3ae:	bf24      	itt	cs
    c3b0:	6837      	ldrcs	r7, [r6, #0]
    c3b2:	2f00      	cmpcs	r7, #0
    c3b4:	bf08      	it	eq
    c3b6:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
    c3ba:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
    c3be:	d1e7      	bne.n	c390 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x5c>
    c3c0:	4a31      	ldr	r2, [pc, #196]	; (c488 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x154>)
    c3c2:	f100 0110 	add.w	r1, r0, #16
    c3c6:	fa04 f101 	lsl.w	r1, r4, r1
    c3ca:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    c3ce:	f04f 0340 	mov.w	r3, #64	; 0x40
    c3d2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    c3d6:	b2db      	uxtb	r3, r3
    c3d8:	4413      	add	r3, r2
    c3da:	601c      	str	r4, [r3, #0]
    c3dc:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    c3e0:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
    c3e4:	ebac 0303 	sub.w	r3, ip, r3
    c3e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c3ec:	2b03      	cmp	r3, #3
    c3ee:	bf3e      	ittt	cc
    c3f0:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
    c3f4:	2000      	movcc	r0, #0
    c3f6:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    c3fa:	f8c0 c540 	str.w	ip, [r0, #1344]	; 0x540
    c3fe:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    c402:	2001      	movs	r0, #1
    c404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c408:	b133      	cbz	r3, c418 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe4>
    c40a:	4281      	cmp	r1, r0
    c40c:	d104      	bne.n	c418 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe4>
    c40e:	f240 4155 	movw	r1, #1109	; 0x455
    c412:	206c      	movs	r0, #108	; 0x6c
    c414:	f000 f988 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c418:	1f00      	subs	r0, r0, #4
    c41a:	b2c1      	uxtb	r1, r0
    c41c:	2904      	cmp	r1, #4
    c41e:	d304      	bcc.n	c42a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf6>
    c420:	f240 21a5 	movw	r1, #677	; 0x2a5
    c424:	206c      	movs	r0, #108	; 0x6c
    c426:	f000 f97f 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c42a:	4b18      	ldr	r3, [pc, #96]	; (c48c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x158>)
    c42c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    c430:	4088      	lsls	r0, r1
    c432:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    c436:	f8c3 0348 	str.w	r0, [r3, #840]	; 0x348
    c43a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    c43e:	509d      	str	r5, [r3, r2]
    c440:	4a13      	ldr	r2, [pc, #76]	; (c490 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x15c>)
    c442:	6812      	ldr	r2, [r2, #0]
    c444:	ebac 0202 	sub.w	r2, ip, r2
    c448:	e000      	b.n	c44c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x118>
    c44a:	e014      	b.n	c476 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x142>
    c44c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    c450:	2a02      	cmp	r2, #2
    c452:	d30d      	bcc.n	c470 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x13c>
    c454:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    c458:	d80a      	bhi.n	c470 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x13c>
    c45a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    c45e:	f8c1 c540 	str.w	ip, [r1, #1344]	; 0x540
    c462:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    c466:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
    c46a:	4620      	mov	r0, r4
    c46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c470:	4628      	mov	r0, r5
    c472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c476:	f240 4159 	movw	r1, #1113	; 0x459
    c47a:	206c      	movs	r0, #108	; 0x6c
    c47c:	f000 f954 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c480:	2000002c 	.word	0x2000002c
    c484:	20000028 	.word	0x20000028
    c488:	40008000 	.word	0x40008000
    c48c:	4000b000 	.word	0x4000b000
    c490:	4000b504 	.word	0x4000b504

0000c494 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    c494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c496:	2101      	movs	r1, #1
    c498:	2600      	movs	r6, #0
    c49a:	f44f 77a0 	mov.w	r7, #320	; 0x140
    c49e:	2807      	cmp	r0, #7
    c4a0:	d24a      	bcs.n	c538 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa4>
    c4a2:	e8df f000 	tbb	[pc, r0]
    c4a6:	0404      	.short	0x0404
    c4a8:	18180404 	.word	0x18180404
    c4ac:	0018      	.short	0x0018
    c4ae:	f100 0210 	add.w	r2, r0, #16
    c4b2:	fa01 f202 	lsl.w	r2, r1, r2
    c4b6:	4923      	ldr	r1, [pc, #140]	; (c544 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb0>)
    c4b8:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    c4bc:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    c4c0:	2200      	movs	r2, #0
    c4c2:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    c4c6:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    c4ca:	508e      	str	r6, [r1, r2]
    c4cc:	491e      	ldr	r1, [pc, #120]	; (c548 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>)
    c4ce:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    c4d2:	9000      	str	r0, [sp, #0]
    c4d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c4d6:	4d1d      	ldr	r5, [pc, #116]	; (c54c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb8>)
    c4d8:	1f01      	subs	r1, r0, #4
    c4da:	b2cc      	uxtb	r4, r1
    c4dc:	7829      	ldrb	r1, [r5, #0]
    c4de:	b181      	cbz	r1, c502 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    c4e0:	786a      	ldrb	r2, [r5, #1]
    c4e2:	4282      	cmp	r2, r0
    c4e4:	d10d      	bne.n	c502 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x6e>
    c4e6:	4a1a      	ldr	r2, [pc, #104]	; (c550 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xbc>)
    c4e8:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    c4ec:	6010      	str	r0, [r2, #0]
    c4ee:	2901      	cmp	r1, #1
    c4f0:	bf08      	it	eq
    c4f2:	f7ff fd09 	bleq	bf08 <MPSL_IRQ_TIMER0_Handler+0x100>
    c4f6:	702e      	strb	r6, [r5, #0]
    c4f8:	4a16      	ldr	r2, [pc, #88]	; (c554 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    c4fa:	f04f 30ff 	mov.w	r0, #4294967295
    c4fe:	e9c2 0004 	strd	r0, r0, [r2, #16]
    c502:	4915      	ldr	r1, [pc, #84]	; (c558 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    c504:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    c508:	40a0      	lsls	r0, r4
    c50a:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    c50e:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    c512:	00a0      	lsls	r0, r4, #2
    c514:	4408      	add	r0, r1
    c516:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    c51a:	4a10      	ldr	r2, [pc, #64]	; (c55c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    c51c:	6812      	ldr	r2, [r2, #0]
    c51e:	1a80      	subs	r0, r0, r2
    c520:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c524:	2802      	cmp	r0, #2
    c526:	bf24      	itt	cs
    c528:	eb07 0084 	addcs.w	r0, r7, r4, lsl #2
    c52c:	500e      	strcs	r6, [r1, r0]
    c52e:	480c      	ldr	r0, [pc, #48]	; (c560 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    c530:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    c534:	9000      	str	r0, [sp, #0]
    c536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c538:	f240 5104 	movw	r1, #1284	; 0x504
    c53c:	206c      	movs	r0, #108	; 0x6c
    c53e:	f000 f8f3 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c542:	0000      	.short	0x0000
    c544:	40008000 	.word	0x40008000
    c548:	40008140 	.word	0x40008140
    c54c:	2000002c 	.word	0x2000002c
    c550:	4001f508 	.word	0x4001f508
    c554:	20000028 	.word	0x20000028
    c558:	4000b000 	.word	0x4000b000
    c55c:	4000b504 	.word	0x4000b504
    c560:	4000b140 	.word	0x4000b140

0000c564 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    c564:	b510      	push	{r4, lr}
    c566:	f7ff fd01 	bl	bf6c <MPSL_IRQ_TIMER0_Handler+0x164>
    c56a:	490d      	ldr	r1, [pc, #52]	; (c5a0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3c>)
    c56c:	f04f 30ff 	mov.w	r0, #4294967295
    c570:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    c574:	2000      	movs	r0, #0
    c576:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c57a:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    c57e:	1d0a      	adds	r2, r1, #4
    c580:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c584:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    c588:	1d12      	adds	r2, r2, #4
    c58a:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c58e:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    c592:	1d12      	adds	r2, r2, #4
    c594:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c598:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    c59c:	bd10      	pop	{r4, pc}
    c59e:	0000      	.short	0x0000
    c5a0:	40008000 	.word	0x40008000

0000c5a4 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>:
    c5a4:	b570      	push	{r4, r5, r6, lr}
    c5a6:	f3ef 8110 	mrs	r1, PRIMASK
    c5aa:	b672      	cpsid	i
    c5ac:	2400      	movs	r4, #0
    c5ae:	4b0d      	ldr	r3, [pc, #52]	; (c5e4 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x40>)
    c5b0:	4a0d      	ldr	r2, [pc, #52]	; (c5e8 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x44>)
    c5b2:	bf00      	nop
    c5b4:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    c5b8:	f8d3 c104 	ldr.w	ip, [r3, #260]	; 0x104
    c5bc:	f1bc 0f00 	cmp.w	ip, #0
    c5c0:	d005      	beq.n	c5ce <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x2a>
    c5c2:	68d0      	ldr	r0, [r2, #12]
    c5c4:	1c40      	adds	r0, r0, #1
    c5c6:	60d0      	str	r0, [r2, #12]
    c5c8:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    c5cc:	e7f2      	b.n	c5b4 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x10>
    c5ce:	68d5      	ldr	r5, [r2, #12]
    c5d0:	b901      	cbnz	r1, c5d4 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x30>
    c5d2:	b662      	cpsie	i
    c5d4:	f004 f9d4 	bl	10980 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    c5d8:	4a04      	ldr	r2, [pc, #16]	; (c5ec <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA+0x48>)
    c5da:	4621      	mov	r1, r4
    c5dc:	fbe5 0102 	umlal	r0, r1, r5, r2
    c5e0:	bd70      	pop	{r4, r5, r6, pc}
    c5e2:	0000      	.short	0x0000
    c5e4:	4000b000 	.word	0x4000b000
    c5e8:	20000028 	.word	0x20000028
    c5ec:	1e848000 	.word	0x1e848000

0000c5f0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    c5f0:	b510      	push	{r4, lr}
    c5f2:	2807      	cmp	r0, #7
    c5f4:	d20d      	bcs.n	c612 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    c5f6:	e8df f000 	tbb	[pc, r0]
    c5fa:	0404      	.short	0x0404
    c5fc:	06060404 	.word	0x06060404
    c600:	0006      	.short	0x0006
    c602:	4906      	ldr	r1, [pc, #24]	; (c61c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    c604:	e002      	b.n	c60c <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    c606:	1f00      	subs	r0, r0, #4
    c608:	4905      	ldr	r1, [pc, #20]	; (c620 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    c60a:	b2c0      	uxtb	r0, r0
    c60c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    c610:	bd10      	pop	{r4, pc}
    c612:	f240 418f 	movw	r1, #1167	; 0x48f
    c616:	206c      	movs	r0, #108	; 0x6c
    c618:	f000 f886 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c61c:	40008140 	.word	0x40008140
    c620:	4000b140 	.word	0x4000b140

0000c624 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    c624:	b570      	push	{r4, r5, r6, lr}
    c626:	481d      	ldr	r0, [pc, #116]	; (c69c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    c628:	2400      	movs	r4, #0
    c62a:	21ff      	movs	r1, #255	; 0xff
    c62c:	7004      	strb	r4, [r0, #0]
    c62e:	1f00      	subs	r0, r0, #4
    c630:	1e62      	subs	r2, r4, #1
    c632:	7001      	strb	r1, [r0, #0]
    c634:	e9c0 2204 	strd	r2, r2, [r0, #16]
    c638:	60c4      	str	r4, [r0, #12]
    c63a:	1c80      	adds	r0, r0, #2
    c63c:	7001      	strb	r1, [r0, #0]
    c63e:	f7ff fc63 	bl	bf08 <MPSL_IRQ_TIMER0_Handler+0x100>
    c642:	2501      	movs	r5, #1
    c644:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    c648:	02eb      	lsls	r3, r5, #11
    c64a:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    c64e:	f3bf 8f4f 	dsb	sy
    c652:	f3bf 8f6f 	isb	sy
    c656:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    c65a:	4811      	ldr	r0, [pc, #68]	; (c6a0 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    c65c:	6045      	str	r5, [r0, #4]
    c65e:	6085      	str	r5, [r0, #8]
    c660:	4910      	ldr	r1, [pc, #64]	; (c6a4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
    c662:	680a      	ldr	r2, [r1, #0]
    c664:	2a00      	cmp	r2, #0
    c666:	d1fc      	bne.n	c662 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3e>
    c668:	490f      	ldr	r1, [pc, #60]	; (c6a8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
    c66a:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    c66e:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    c672:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    c676:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    c67a:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    c67e:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    c682:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    c686:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    c68a:	6005      	str	r5, [r0, #0]
    c68c:	f44f 7182 	mov.w	r1, #260	; 0x104
    c690:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
    c694:	2102      	movs	r1, #2
    c696:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
    c69a:	bd70      	pop	{r4, r5, r6, pc}
    c69c:	2000002c 	.word	0x2000002c
    c6a0:	4000b000 	.word	0x4000b000
    c6a4:	4000b504 	.word	0x4000b504
    c6a8:	000f0002 	.word	0x000f0002
    c6ac:	f3bf 8f4f 	dsb	sy
    c6b0:	4805      	ldr	r0, [pc, #20]	; (c6c8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0xa4>)
    c6b2:	6801      	ldr	r1, [r0, #0]
    c6b4:	4a05      	ldr	r2, [pc, #20]	; (c6cc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0xa8>)
    c6b6:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    c6ba:	4311      	orrs	r1, r2
    c6bc:	6001      	str	r1, [r0, #0]
    c6be:	f3bf 8f4f 	dsb	sy
    c6c2:	bf00      	nop
    c6c4:	e7fd      	b.n	c6c2 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x9e>
    c6c6:	0000      	.short	0x0000
    c6c8:	e000ed0c 	.word	0xe000ed0c
    c6cc:	05fa0004 	.word	0x05fa0004

0000c6d0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    c6d0:	b672      	cpsid	i
    c6d2:	4a03      	ldr	r2, [pc, #12]	; (c6e0 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    c6d4:	6852      	ldr	r2, [r2, #4]
    c6d6:	b102      	cbz	r2, c6da <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    c6d8:	4790      	blx	r2
    c6da:	f7ff ffe7 	bl	c6ac <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>
    c6de:	0000      	.short	0x0000
    c6e0:	2000034c 	.word	0x2000034c
    c6e4:	4806      	ldr	r0, [pc, #24]	; (c700 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    c6e6:	b510      	push	{r4, lr}
    c6e8:	2100      	movs	r1, #0
    c6ea:	6001      	str	r1, [r0, #0]
    c6ec:	2101      	movs	r1, #1
    c6ee:	6001      	str	r1, [r0, #0]
    c6f0:	4608      	mov	r0, r1
    c6f2:	f004 f9ba 	bl	10a6a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c6f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c6fa:	2001      	movs	r0, #1
    c6fc:	f004 b9a8 	b.w	10a50 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c700:	40001ffc 	.word	0x40001ffc
    c704:	4807      	ldr	r0, [pc, #28]	; (c724 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    c706:	b510      	push	{r4, lr}
    c708:	2101      	movs	r1, #1
    c70a:	6041      	str	r1, [r0, #4]
    c70c:	1e89      	subs	r1, r1, #2
    c70e:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    c712:	200c      	movs	r0, #12
    c714:	f004 f9a9 	bl	10a6a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c71c:	200c      	movs	r0, #12
    c71e:	f004 b997 	b.w	10a50 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c722:	0000      	.short	0x0000
    c724:	4000c000 	.word	0x4000c000

0000c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    c728:	b50e      	push	{r1, r2, r3, lr}
    c72a:	b672      	cpsid	i
    c72c:	4a0f      	ldr	r2, [pc, #60]	; (c76c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    c72e:	6855      	ldr	r5, [r2, #4]
    c730:	b1d5      	cbz	r5, c768 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    c732:	2200      	movs	r2, #0
    c734:	4603      	mov	r3, r0
    c736:	466e      	mov	r6, sp
    c738:	240a      	movs	r4, #10
    c73a:	e003      	b.n	c744 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    c73c:	fbb0 f0f4 	udiv	r0, r0, r4
    c740:	1c52      	adds	r2, r2, #1
    c742:	b2d2      	uxtb	r2, r2
    c744:	2800      	cmp	r0, #0
    c746:	d1f9      	bne.n	c73c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    c748:	54b0      	strb	r0, [r6, r2]
    c74a:	e009      	b.n	c760 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    c74c:	fbb3 f0f4 	udiv	r0, r3, r4
    c750:	fb04 3010 	mls	r0, r4, r0, r3
    c754:	fbb3 f3f4 	udiv	r3, r3, r4
    c758:	1e52      	subs	r2, r2, #1
    c75a:	b2d2      	uxtb	r2, r2
    c75c:	3030      	adds	r0, #48	; 0x30
    c75e:	54b0      	strb	r0, [r6, r2]
    c760:	2a00      	cmp	r2, #0
    c762:	d1f3      	bne.n	c74c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    c764:	4630      	mov	r0, r6
    c766:	47a8      	blx	r5
    c768:	f7ff ffa0 	bl	c6ac <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>
    c76c:	2000034c 	.word	0x2000034c

0000c770 <mpsl_init>:
    c770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c774:	4c19      	ldr	r4, [pc, #100]	; (c7dc <mpsl_init+0x6c>)
    c776:	4606      	mov	r6, r0
    c778:	4617      	mov	r7, r2
    c77a:	7860      	ldrb	r0, [r4, #1]
    c77c:	460d      	mov	r5, r1
    c77e:	b118      	cbz	r0, c788 <mpsl_init+0x18>
    c780:	f04f 30ff 	mov.w	r0, #4294967295
    c784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c788:	f7fc fb78 	bl	8e7c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    c78c:	b906      	cbnz	r6, c790 <mpsl_init+0x20>
    c78e:	4e14      	ldr	r6, [pc, #80]	; (c7e0 <mpsl_init+0x70>)
    c790:	6067      	str	r7, [r4, #4]
    c792:	7025      	strb	r5, [r4, #0]
    c794:	f7ff ffa6 	bl	c6e4 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    c798:	f7ff ffb4 	bl	c704 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    c79c:	4630      	mov	r0, r6
    c79e:	f7ff f9ab 	bl	baf8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    c7a2:	0006      	movs	r6, r0
    c7a4:	d1ee      	bne.n	c784 <mpsl_init+0x14>
    c7a6:	f7fe fe39 	bl	b41c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    c7aa:	f7ff fa8b 	bl	bcc4 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    c7ae:	f7ff fa1f 	bl	bbf0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    c7b2:	f004 f8bf 	bl	10934 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    c7b6:	4628      	mov	r0, r5
    c7b8:	f004 f94a 	bl	10a50 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c7bc:	2001      	movs	r0, #1
    c7be:	2d00      	cmp	r5, #0
    c7c0:	db09      	blt.n	c7d6 <mpsl_init+0x66>
    c7c2:	f005 011f 	and.w	r1, r5, #31
    c7c6:	fa00 f101 	lsl.w	r1, r0, r1
    c7ca:	096a      	lsrs	r2, r5, #5
    c7cc:	0092      	lsls	r2, r2, #2
    c7ce:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    c7d2:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    c7d6:	7060      	strb	r0, [r4, #1]
    c7d8:	4630      	mov	r0, r6
    c7da:	e7d3      	b.n	c784 <mpsl_init+0x14>
    c7dc:	2000034c 	.word	0x2000034c
    c7e0:	00010a8c 	.word	0x00010a8c

0000c7e4 <mpsl_is_initialized>:
    c7e4:	4801      	ldr	r0, [pc, #4]	; (c7ec <mpsl_is_initialized+0x8>)
    c7e6:	7840      	ldrb	r0, [r0, #1]
    c7e8:	4770      	bx	lr
    c7ea:	0000      	.short	0x0000
    c7ec:	2000034c 	.word	0x2000034c

0000c7f0 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    c7f0:	4807      	ldr	r0, [pc, #28]	; (c810 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    c7f2:	f990 0000 	ldrsb.w	r0, [r0]
    c7f6:	2800      	cmp	r0, #0
    c7f8:	db09      	blt.n	c80e <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    c7fa:	f000 021f 	and.w	r2, r0, #31
    c7fe:	2101      	movs	r1, #1
    c800:	4091      	lsls	r1, r2
    c802:	0940      	lsrs	r0, r0, #5
    c804:	0080      	lsls	r0, r0, #2
    c806:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c80a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c80e:	4770      	bx	lr
    c810:	2000034c 	.word	0x2000034c

0000c814 <mpsl_temperature_get>:
    c814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c818:	2501      	movs	r5, #1
    c81a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c81e:	0329      	lsls	r1, r5, #12
    c820:	f04f 0800 	mov.w	r8, #0
    c824:	4640      	mov	r0, r8
    c826:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    c82a:	f3bf 8f4f 	dsb	sy
    c82e:	f3bf 8f6f 	isb	sy
    c832:	4c16      	ldr	r4, [pc, #88]	; (c88c <mpsl_temperature_get+0x78>)
    c834:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    c838:	200c      	movs	r0, #12
    c83a:	f004 f935 	bl	10aa8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c83e:	4e14      	ldr	r6, [pc, #80]	; (c890 <mpsl_temperature_get+0x7c>)
    c840:	6830      	ldr	r0, [r6, #0]
    c842:	43c0      	mvns	r0, r0
    c844:	f340 1700 	sbfx	r7, r0, #4, #1
    c848:	6830      	ldr	r0, [r6, #0]
    c84a:	f040 0010 	orr.w	r0, r0, #16
    c84e:	6030      	str	r0, [r6, #0]
    c850:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    c854:	6025      	str	r5, [r4, #0]
    c856:	1c7f      	adds	r7, r7, #1
    c858:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    c85c:	b108      	cbz	r0, c862 <mpsl_temperature_get+0x4e>
    c85e:	b11f      	cbz	r7, c868 <mpsl_temperature_get+0x54>
    c860:	e006      	b.n	c870 <mpsl_temperature_get+0x5c>
    c862:	f004 f9c5 	bl	10bf0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c866:	e7f7      	b.n	c858 <mpsl_temperature_get+0x44>
    c868:	6830      	ldr	r0, [r6, #0]
    c86a:	f020 0010 	bic.w	r0, r0, #16
    c86e:	6030      	str	r0, [r6, #0]
    c870:	f8d4 6508 	ldr.w	r6, [r4, #1288]	; 0x508
    c874:	6065      	str	r5, [r4, #4]
    c876:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
    c87a:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    c87e:	200c      	movs	r0, #12
    c880:	f004 f912 	bl	10aa8 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c884:	4630      	mov	r0, r6
    c886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c88a:	0000      	.short	0x0000
    c88c:	4000c000 	.word	0x4000c000
    c890:	e000ed10 	.word	0xe000ed10

0000c894 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    c894:	b510      	push	{r4, lr}
    c896:	4602      	mov	r2, r0
    c898:	2005      	movs	r0, #5
    c89a:	490c      	ldr	r1, [pc, #48]	; (c8cc <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    c89c:	e004      	b.n	c8a8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    c89e:	bf00      	nop
    c8a0:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    c8a4:	791b      	ldrb	r3, [r3, #4]
    c8a6:	b133      	cbz	r3, c8b6 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    c8a8:	1e40      	subs	r0, r0, #1
    c8aa:	b2c0      	uxtb	r0, r0
    c8ac:	d2f8      	bcs.n	c8a0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    c8ae:	2148      	movs	r1, #72	; 0x48
    c8b0:	2069      	movs	r0, #105	; 0x69
    c8b2:	f7ff ff39 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c8b6:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    c8ba:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    c8be:	2200      	movs	r2, #0
    c8c0:	714a      	strb	r2, [r1, #5]
    c8c2:	718a      	strb	r2, [r1, #6]
    c8c4:	2201      	movs	r2, #1
    c8c6:	710a      	strb	r2, [r1, #4]
    c8c8:	bd10      	pop	{r4, pc}
    c8ca:	0000      	.short	0x0000
    c8cc:	2000114c 	.word	0x2000114c

0000c8d0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    c8d0:	b510      	push	{r4, lr}
    c8d2:	2805      	cmp	r0, #5
    c8d4:	d301      	bcc.n	c8da <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    c8d6:	2158      	movs	r1, #88	; 0x58
    c8d8:	e006      	b.n	c8e8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    c8da:	490a      	ldr	r1, [pc, #40]	; (c904 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    c8dc:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    c8e0:	7901      	ldrb	r1, [r0, #4]
    c8e2:	2901      	cmp	r1, #1
    c8e4:	d003      	beq.n	c8ee <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    c8e6:	2159      	movs	r1, #89	; 0x59
    c8e8:	2069      	movs	r0, #105	; 0x69
    c8ea:	f7ff ff1d 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c8ee:	7941      	ldrb	r1, [r0, #5]
    c8f0:	7982      	ldrb	r2, [r0, #6]
    c8f2:	1c49      	adds	r1, r1, #1
    c8f4:	b2c9      	uxtb	r1, r1
    c8f6:	428a      	cmp	r2, r1
    c8f8:	d000      	beq.n	c8fc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    c8fa:	7141      	strb	r1, [r0, #5]
    c8fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c900:	f7ff bf76 	b.w	c7f0 <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    c904:	2000114c 	.word	0x2000114c

0000c908 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    c908:	b510      	push	{r4, lr}
    c90a:	2805      	cmp	r0, #5
    c90c:	d303      	bcc.n	c916 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    c90e:	214f      	movs	r1, #79	; 0x4f
    c910:	2069      	movs	r0, #105	; 0x69
    c912:	f7ff ff09 	bl	c728 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c916:	4a03      	ldr	r2, [pc, #12]	; (c924 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    c918:	2100      	movs	r1, #0
    c91a:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    c91e:	7101      	strb	r1, [r0, #4]
    c920:	bd10      	pop	{r4, pc}
    c922:	0000      	.short	0x0000
    c924:	2000114c 	.word	0x2000114c

0000c928 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    c928:	b570      	push	{r4, r5, r6, lr}
    c92a:	2505      	movs	r5, #5
    c92c:	4e0e      	ldr	r6, [pc, #56]	; (c968 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    c92e:	4c0f      	ldr	r4, [pc, #60]	; (c96c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    c930:	e016      	b.n	c960 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c932:	7821      	ldrb	r1, [r4, #0]
    c934:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    c938:	7902      	ldrb	r2, [r0, #4]
    c93a:	2a01      	cmp	r2, #1
    c93c:	d108      	bne.n	c950 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c93e:	7942      	ldrb	r2, [r0, #5]
    c940:	7983      	ldrb	r3, [r0, #6]
    c942:	429a      	cmp	r2, r3
    c944:	d004      	beq.n	c950 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c946:	7942      	ldrb	r2, [r0, #5]
    c948:	7182      	strb	r2, [r0, #6]
    c94a:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    c94e:	4780      	blx	r0
    c950:	7820      	ldrb	r0, [r4, #0]
    c952:	1c40      	adds	r0, r0, #1
    c954:	b2c0      	uxtb	r0, r0
    c956:	7020      	strb	r0, [r4, #0]
    c958:	2805      	cmp	r0, #5
    c95a:	d301      	bcc.n	c960 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c95c:	2000      	movs	r0, #0
    c95e:	7020      	strb	r0, [r4, #0]
    c960:	1e6d      	subs	r5, r5, #1
    c962:	b2ed      	uxtb	r5, r5
    c964:	d2e5      	bcs.n	c932 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    c966:	bd70      	pop	{r4, r5, r6, pc}
    c968:	2000114c 	.word	0x2000114c
    c96c:	200003a1 	.word	0x200003a1

0000c970 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    c970:	b500      	push	{lr}
    c972:	f004 f8c8 	bl	10b06 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c976:	b940      	cbnz	r0, c98a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c978:	f004 f8cf 	bl	10b1a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c97c:	b928      	cbnz	r0, c98a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c97e:	f004 f8e3 	bl	10b48 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c982:	b910      	cbnz	r0, c98a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c984:	f004 f8f4 	bl	10b70 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c988:	b108      	cbz	r0, c98e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    c98a:	4802      	ldr	r0, [pc, #8]	; (c994 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    c98c:	bd00      	pop	{pc}
    c98e:	4802      	ldr	r0, [pc, #8]	; (c998 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    c990:	bd00      	pop	{pc}
    c992:	0000      	.short	0x0000
    c994:	4000050c 	.word	0x4000050c
    c998:	4001e700 	.word	0x4001e700
    c99c:	b510      	push	{r4, lr}
    c99e:	f004 f8e7 	bl	10b70 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c9a2:	b330      	cbz	r0, c9f2 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x82>
    c9a4:	f3ef 8010 	mrs	r0, PRIMASK
    c9a8:	b1c8      	cbz	r0, c9de <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x6e>
    c9aa:	2100      	movs	r1, #0
    c9ac:	b672      	cpsid	i
    c9ae:	4812      	ldr	r0, [pc, #72]	; (c9f8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x88>)
    c9b0:	6802      	ldr	r2, [r0, #0]
    c9b2:	6803      	ldr	r3, [r0, #0]
    c9b4:	f3c2 1200 	ubfx	r2, r2, #4, #1
    c9b8:	f043 0310 	orr.w	r3, r3, #16
    c9bc:	6003      	str	r3, [r0, #0]
    c9be:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c9c2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c9c6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    c9ca:	431c      	orrs	r4, r3
    c9cc:	d000      	beq.n	c9d0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x60>
    c9ce:	bf40      	sev
    c9d0:	bf20      	wfe
    c9d2:	bf00      	nop
    c9d4:	bf00      	nop
    c9d6:	bf00      	nop
    c9d8:	bf00      	nop
    c9da:	b112      	cbz	r2, c9e2 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x72>
    c9dc:	e005      	b.n	c9ea <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x7a>
    c9de:	2101      	movs	r1, #1
    c9e0:	e7e4      	b.n	c9ac <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x3c>
    c9e2:	6802      	ldr	r2, [r0, #0]
    c9e4:	f022 0210 	bic.w	r2, r2, #16
    c9e8:	6002      	str	r2, [r0, #0]
    c9ea:	2900      	cmp	r1, #0
    c9ec:	d000      	beq.n	c9f0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x80>
    c9ee:	b662      	cpsie	i
    c9f0:	bd10      	pop	{r4, pc}
    c9f2:	bf20      	wfe
    c9f4:	bd10      	pop	{r4, pc}
    c9f6:	0000      	.short	0x0000
    c9f8:	e000ed10 	.word	0xe000ed10

0000c9fc <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    c9fc:	4901      	ldr	r1, [pc, #4]	; (ca04 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    c9fe:	2001      	movs	r0, #1
    ca00:	7088      	strb	r0, [r1, #2]
    ca02:	4770      	bx	lr
    ca04:	20000354 	.word	0x20000354

0000ca08 <__udivmoddi4>:
    ca08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ca0c:	4686      	mov	lr, r0
    ca0e:	468c      	mov	ip, r1
    ca10:	4608      	mov	r0, r1
    ca12:	9e08      	ldr	r6, [sp, #32]
    ca14:	4615      	mov	r5, r2
    ca16:	4674      	mov	r4, lr
    ca18:	4619      	mov	r1, r3
    ca1a:	2b00      	cmp	r3, #0
    ca1c:	f040 80c2 	bne.w	cba4 <__udivmoddi4+0x19c>
    ca20:	4285      	cmp	r5, r0
    ca22:	fab2 f282 	clz	r2, r2
    ca26:	d945      	bls.n	cab4 <__udivmoddi4+0xac>
    ca28:	b14a      	cbz	r2, ca3e <__udivmoddi4+0x36>
    ca2a:	f1c2 0320 	rsb	r3, r2, #32
    ca2e:	fa00 fc02 	lsl.w	ip, r0, r2
    ca32:	fa2e f303 	lsr.w	r3, lr, r3
    ca36:	4095      	lsls	r5, r2
    ca38:	ea43 0c0c 	orr.w	ip, r3, ip
    ca3c:	4094      	lsls	r4, r2
    ca3e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    ca42:	b2a8      	uxth	r0, r5
    ca44:	fbbc f8fe 	udiv	r8, ip, lr
    ca48:	0c23      	lsrs	r3, r4, #16
    ca4a:	fb0e cc18 	mls	ip, lr, r8, ip
    ca4e:	fb08 f900 	mul.w	r9, r8, r0
    ca52:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    ca56:	4599      	cmp	r9, r3
    ca58:	d928      	bls.n	caac <__udivmoddi4+0xa4>
    ca5a:	18eb      	adds	r3, r5, r3
    ca5c:	f108 37ff 	add.w	r7, r8, #4294967295
    ca60:	d204      	bcs.n	ca6c <__udivmoddi4+0x64>
    ca62:	4599      	cmp	r9, r3
    ca64:	d902      	bls.n	ca6c <__udivmoddi4+0x64>
    ca66:	f1a8 0702 	sub.w	r7, r8, #2
    ca6a:	442b      	add	r3, r5
    ca6c:	eba3 0309 	sub.w	r3, r3, r9
    ca70:	b2a4      	uxth	r4, r4
    ca72:	fbb3 fcfe 	udiv	ip, r3, lr
    ca76:	fb0e 331c 	mls	r3, lr, ip, r3
    ca7a:	fb0c f000 	mul.w	r0, ip, r0
    ca7e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    ca82:	42a0      	cmp	r0, r4
    ca84:	d914      	bls.n	cab0 <__udivmoddi4+0xa8>
    ca86:	192c      	adds	r4, r5, r4
    ca88:	f10c 33ff 	add.w	r3, ip, #4294967295
    ca8c:	d204      	bcs.n	ca98 <__udivmoddi4+0x90>
    ca8e:	42a0      	cmp	r0, r4
    ca90:	d902      	bls.n	ca98 <__udivmoddi4+0x90>
    ca92:	f1ac 0302 	sub.w	r3, ip, #2
    ca96:	442c      	add	r4, r5
    ca98:	1a24      	subs	r4, r4, r0
    ca9a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    ca9e:	b11e      	cbz	r6, caa8 <__udivmoddi4+0xa0>
    caa0:	40d4      	lsrs	r4, r2
    caa2:	2300      	movs	r3, #0
    caa4:	6034      	str	r4, [r6, #0]
    caa6:	6073      	str	r3, [r6, #4]
    caa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    caac:	4647      	mov	r7, r8
    caae:	e7dd      	b.n	ca6c <__udivmoddi4+0x64>
    cab0:	4663      	mov	r3, ip
    cab2:	e7f1      	b.n	ca98 <__udivmoddi4+0x90>
    cab4:	bb92      	cbnz	r2, cb1c <__udivmoddi4+0x114>
    cab6:	1b43      	subs	r3, r0, r5
    cab8:	2101      	movs	r1, #1
    caba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    cabe:	b2af      	uxth	r7, r5
    cac0:	fbb3 fcfe 	udiv	ip, r3, lr
    cac4:	0c20      	lsrs	r0, r4, #16
    cac6:	fb0e 331c 	mls	r3, lr, ip, r3
    caca:	fb0c f807 	mul.w	r8, ip, r7
    cace:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    cad2:	4598      	cmp	r8, r3
    cad4:	d962      	bls.n	cb9c <__udivmoddi4+0x194>
    cad6:	18eb      	adds	r3, r5, r3
    cad8:	f10c 30ff 	add.w	r0, ip, #4294967295
    cadc:	d204      	bcs.n	cae8 <__udivmoddi4+0xe0>
    cade:	4598      	cmp	r8, r3
    cae0:	d902      	bls.n	cae8 <__udivmoddi4+0xe0>
    cae2:	f1ac 0002 	sub.w	r0, ip, #2
    cae6:	442b      	add	r3, r5
    cae8:	eba3 0308 	sub.w	r3, r3, r8
    caec:	b2a4      	uxth	r4, r4
    caee:	fbb3 fcfe 	udiv	ip, r3, lr
    caf2:	fb0e 331c 	mls	r3, lr, ip, r3
    caf6:	fb0c f707 	mul.w	r7, ip, r7
    cafa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    cafe:	42a7      	cmp	r7, r4
    cb00:	d94e      	bls.n	cba0 <__udivmoddi4+0x198>
    cb02:	192c      	adds	r4, r5, r4
    cb04:	f10c 33ff 	add.w	r3, ip, #4294967295
    cb08:	d204      	bcs.n	cb14 <__udivmoddi4+0x10c>
    cb0a:	42a7      	cmp	r7, r4
    cb0c:	d902      	bls.n	cb14 <__udivmoddi4+0x10c>
    cb0e:	f1ac 0302 	sub.w	r3, ip, #2
    cb12:	442c      	add	r4, r5
    cb14:	1be4      	subs	r4, r4, r7
    cb16:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    cb1a:	e7c0      	b.n	ca9e <__udivmoddi4+0x96>
    cb1c:	f1c2 0320 	rsb	r3, r2, #32
    cb20:	fa20 f103 	lsr.w	r1, r0, r3
    cb24:	4095      	lsls	r5, r2
    cb26:	4090      	lsls	r0, r2
    cb28:	fa2e f303 	lsr.w	r3, lr, r3
    cb2c:	4303      	orrs	r3, r0
    cb2e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    cb32:	b2af      	uxth	r7, r5
    cb34:	fbb1 fcfe 	udiv	ip, r1, lr
    cb38:	fb0e 101c 	mls	r0, lr, ip, r1
    cb3c:	0c19      	lsrs	r1, r3, #16
    cb3e:	fb0c f807 	mul.w	r8, ip, r7
    cb42:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    cb46:	4588      	cmp	r8, r1
    cb48:	fa04 f402 	lsl.w	r4, r4, r2
    cb4c:	d922      	bls.n	cb94 <__udivmoddi4+0x18c>
    cb4e:	1869      	adds	r1, r5, r1
    cb50:	f10c 30ff 	add.w	r0, ip, #4294967295
    cb54:	d204      	bcs.n	cb60 <__udivmoddi4+0x158>
    cb56:	4588      	cmp	r8, r1
    cb58:	d902      	bls.n	cb60 <__udivmoddi4+0x158>
    cb5a:	f1ac 0002 	sub.w	r0, ip, #2
    cb5e:	4429      	add	r1, r5
    cb60:	eba1 0108 	sub.w	r1, r1, r8
    cb64:	b29b      	uxth	r3, r3
    cb66:	fbb1 fcfe 	udiv	ip, r1, lr
    cb6a:	fb0e 111c 	mls	r1, lr, ip, r1
    cb6e:	fb0c f707 	mul.w	r7, ip, r7
    cb72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    cb76:	429f      	cmp	r7, r3
    cb78:	d90e      	bls.n	cb98 <__udivmoddi4+0x190>
    cb7a:	18eb      	adds	r3, r5, r3
    cb7c:	f10c 31ff 	add.w	r1, ip, #4294967295
    cb80:	d204      	bcs.n	cb8c <__udivmoddi4+0x184>
    cb82:	429f      	cmp	r7, r3
    cb84:	d902      	bls.n	cb8c <__udivmoddi4+0x184>
    cb86:	f1ac 0102 	sub.w	r1, ip, #2
    cb8a:	442b      	add	r3, r5
    cb8c:	1bdb      	subs	r3, r3, r7
    cb8e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    cb92:	e792      	b.n	caba <__udivmoddi4+0xb2>
    cb94:	4660      	mov	r0, ip
    cb96:	e7e3      	b.n	cb60 <__udivmoddi4+0x158>
    cb98:	4661      	mov	r1, ip
    cb9a:	e7f7      	b.n	cb8c <__udivmoddi4+0x184>
    cb9c:	4660      	mov	r0, ip
    cb9e:	e7a3      	b.n	cae8 <__udivmoddi4+0xe0>
    cba0:	4663      	mov	r3, ip
    cba2:	e7b7      	b.n	cb14 <__udivmoddi4+0x10c>
    cba4:	4283      	cmp	r3, r0
    cba6:	d906      	bls.n	cbb6 <__udivmoddi4+0x1ae>
    cba8:	b916      	cbnz	r6, cbb0 <__udivmoddi4+0x1a8>
    cbaa:	2100      	movs	r1, #0
    cbac:	4608      	mov	r0, r1
    cbae:	e77b      	b.n	caa8 <__udivmoddi4+0xa0>
    cbb0:	e9c6 e000 	strd	lr, r0, [r6]
    cbb4:	e7f9      	b.n	cbaa <__udivmoddi4+0x1a2>
    cbb6:	fab3 f783 	clz	r7, r3
    cbba:	b98f      	cbnz	r7, cbe0 <__udivmoddi4+0x1d8>
    cbbc:	4283      	cmp	r3, r0
    cbbe:	d301      	bcc.n	cbc4 <__udivmoddi4+0x1bc>
    cbc0:	4572      	cmp	r2, lr
    cbc2:	d808      	bhi.n	cbd6 <__udivmoddi4+0x1ce>
    cbc4:	ebbe 0402 	subs.w	r4, lr, r2
    cbc8:	eb60 0303 	sbc.w	r3, r0, r3
    cbcc:	2001      	movs	r0, #1
    cbce:	469c      	mov	ip, r3
    cbd0:	b91e      	cbnz	r6, cbda <__udivmoddi4+0x1d2>
    cbd2:	2100      	movs	r1, #0
    cbd4:	e768      	b.n	caa8 <__udivmoddi4+0xa0>
    cbd6:	4638      	mov	r0, r7
    cbd8:	e7fa      	b.n	cbd0 <__udivmoddi4+0x1c8>
    cbda:	e9c6 4c00 	strd	r4, ip, [r6]
    cbde:	e7f8      	b.n	cbd2 <__udivmoddi4+0x1ca>
    cbe0:	f1c7 0c20 	rsb	ip, r7, #32
    cbe4:	40bb      	lsls	r3, r7
    cbe6:	fa22 f40c 	lsr.w	r4, r2, ip
    cbea:	431c      	orrs	r4, r3
    cbec:	fa2e f10c 	lsr.w	r1, lr, ip
    cbf0:	fa20 f30c 	lsr.w	r3, r0, ip
    cbf4:	40b8      	lsls	r0, r7
    cbf6:	4301      	orrs	r1, r0
    cbf8:	ea4f 4914 	mov.w	r9, r4, lsr #16
    cbfc:	fa0e f507 	lsl.w	r5, lr, r7
    cc00:	fbb3 f8f9 	udiv	r8, r3, r9
    cc04:	fa1f fe84 	uxth.w	lr, r4
    cc08:	fb09 3018 	mls	r0, r9, r8, r3
    cc0c:	0c0b      	lsrs	r3, r1, #16
    cc0e:	fb08 fa0e 	mul.w	sl, r8, lr
    cc12:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    cc16:	459a      	cmp	sl, r3
    cc18:	fa02 f207 	lsl.w	r2, r2, r7
    cc1c:	d940      	bls.n	cca0 <__udivmoddi4+0x298>
    cc1e:	18e3      	adds	r3, r4, r3
    cc20:	f108 30ff 	add.w	r0, r8, #4294967295
    cc24:	d204      	bcs.n	cc30 <__udivmoddi4+0x228>
    cc26:	459a      	cmp	sl, r3
    cc28:	d902      	bls.n	cc30 <__udivmoddi4+0x228>
    cc2a:	f1a8 0002 	sub.w	r0, r8, #2
    cc2e:	4423      	add	r3, r4
    cc30:	eba3 030a 	sub.w	r3, r3, sl
    cc34:	b289      	uxth	r1, r1
    cc36:	fbb3 f8f9 	udiv	r8, r3, r9
    cc3a:	fb09 3318 	mls	r3, r9, r8, r3
    cc3e:	fb08 fe0e 	mul.w	lr, r8, lr
    cc42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    cc46:	458e      	cmp	lr, r1
    cc48:	d92c      	bls.n	cca4 <__udivmoddi4+0x29c>
    cc4a:	1861      	adds	r1, r4, r1
    cc4c:	f108 33ff 	add.w	r3, r8, #4294967295
    cc50:	d204      	bcs.n	cc5c <__udivmoddi4+0x254>
    cc52:	458e      	cmp	lr, r1
    cc54:	d902      	bls.n	cc5c <__udivmoddi4+0x254>
    cc56:	f1a8 0302 	sub.w	r3, r8, #2
    cc5a:	4421      	add	r1, r4
    cc5c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    cc60:	fba0 9802 	umull	r9, r8, r0, r2
    cc64:	eba1 010e 	sub.w	r1, r1, lr
    cc68:	4541      	cmp	r1, r8
    cc6a:	46ce      	mov	lr, r9
    cc6c:	4643      	mov	r3, r8
    cc6e:	d302      	bcc.n	cc76 <__udivmoddi4+0x26e>
    cc70:	d106      	bne.n	cc80 <__udivmoddi4+0x278>
    cc72:	454d      	cmp	r5, r9
    cc74:	d204      	bcs.n	cc80 <__udivmoddi4+0x278>
    cc76:	ebb9 0e02 	subs.w	lr, r9, r2
    cc7a:	eb68 0304 	sbc.w	r3, r8, r4
    cc7e:	3801      	subs	r0, #1
    cc80:	2e00      	cmp	r6, #0
    cc82:	d0a6      	beq.n	cbd2 <__udivmoddi4+0x1ca>
    cc84:	ebb5 020e 	subs.w	r2, r5, lr
    cc88:	eb61 0103 	sbc.w	r1, r1, r3
    cc8c:	fa01 fc0c 	lsl.w	ip, r1, ip
    cc90:	fa22 f307 	lsr.w	r3, r2, r7
    cc94:	ea4c 0303 	orr.w	r3, ip, r3
    cc98:	40f9      	lsrs	r1, r7
    cc9a:	e9c6 3100 	strd	r3, r1, [r6]
    cc9e:	e798      	b.n	cbd2 <__udivmoddi4+0x1ca>
    cca0:	4640      	mov	r0, r8
    cca2:	e7c5      	b.n	cc30 <__udivmoddi4+0x228>
    cca4:	4643      	mov	r3, r8
    cca6:	e7d9      	b.n	cc5c <__udivmoddi4+0x254>
    cca8:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    ccac:	4681      	mov	r9, r0
    ccae:	f100 0007 	add.w	r0, r0, #7
    ccb2:	f020 0007 	bic.w	r0, r0, #7
    ccb6:	ea5f 0802 	movs.w	r8, r2
    ccba:	9000      	str	r0, [sp, #0]
    ccbc:	784a      	ldrb	r2, [r1, #1]
    ccbe:	f88d 2004 	strb.w	r2, [sp, #4]
    ccc2:	788a      	ldrb	r2, [r1, #2]
    ccc4:	460c      	mov	r4, r1
    ccc6:	f88d 2005 	strb.w	r2, [sp, #5]
    ccca:	d000      	beq.n	ccce <__udivmoddi4+0x2c6>
    cccc:	2000      	movs	r0, #0
    ccce:	a901      	add	r1, sp, #4
    ccd0:	f7f4 fd48 	bl	1764 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    ccd4:	9900      	ldr	r1, [sp, #0]
    ccd6:	2600      	movs	r6, #0
    ccd8:	4408      	add	r0, r1
    ccda:	9000      	str	r0, [sp, #0]
    ccdc:	7820      	ldrb	r0, [r4, #0]
    ccde:	7861      	ldrb	r1, [r4, #1]
    cce0:	4635      	mov	r5, r6
    cce2:	4408      	add	r0, r1
    cce4:	b2c7      	uxtb	r7, r0
    cce6:	e008      	b.n	ccfa <__udivmoddi4+0x2f2>
    cce8:	7a23      	ldrb	r3, [r4, #8]
    ccea:	79e2      	ldrb	r2, [r4, #7]
    ccec:	79a1      	ldrb	r1, [r4, #6]
    ccee:	7960      	ldrb	r0, [r4, #5]
    ccf0:	f000 fe1b 	bl	d92a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    ccf4:	1c6d      	adds	r5, r5, #1
    ccf6:	4406      	add	r6, r0
    ccf8:	b2ed      	uxtb	r5, r5
    ccfa:	42bd      	cmp	r5, r7
    ccfc:	d3f4      	bcc.n	cce8 <__udivmoddi4+0x2e0>
    ccfe:	9800      	ldr	r0, [sp, #0]
    cd00:	1cc0      	adds	r0, r0, #3
    cd02:	f020 0003 	bic.w	r0, r0, #3
    cd06:	9000      	str	r0, [sp, #0]
    cd08:	f1b8 0f00 	cmp.w	r8, #0
    cd0c:	d000      	beq.n	cd10 <__udivmoddi4+0x308>
    cd0e:	2000      	movs	r0, #0
    cd10:	4632      	mov	r2, r6
    cd12:	4639      	mov	r1, r7
    cd14:	f7f4 fe60 	bl	19d8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    cd18:	9900      	ldr	r1, [sp, #0]
    cd1a:	4642      	mov	r2, r8
    cd1c:	4408      	add	r0, r1
    cd1e:	9000      	str	r0, [sp, #0]
    cd20:	4621      	mov	r1, r4
    cd22:	4668      	mov	r0, sp
    cd24:	f000 f805 	bl	cd32 <__udivmoddi4+0x32a>
    cd28:	9900      	ldr	r1, [sp, #0]
    cd2a:	eba1 0009 	sub.w	r0, r1, r9
    cd2e:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    cd32:	b570      	push	{r4, r5, r6, lr}
    cd34:	4605      	mov	r5, r0
    cd36:	7888      	ldrb	r0, [r1, #2]
    cd38:	4616      	mov	r6, r2
    cd3a:	460c      	mov	r4, r1
    cd3c:	b188      	cbz	r0, cd62 <__udivmoddi4+0x35a>
    cd3e:	6828      	ldr	r0, [r5, #0]
    cd40:	1cc0      	adds	r0, r0, #3
    cd42:	f020 0003 	bic.w	r0, r0, #3
    cd46:	6028      	str	r0, [r5, #0]
    cd48:	7be1      	ldrb	r1, [r4, #15]
    cd4a:	78e2      	ldrb	r2, [r4, #3]
    cd4c:	8963      	ldrh	r3, [r4, #10]
    cd4e:	4411      	add	r1, r2
    cd50:	b2ca      	uxtb	r2, r1
    cd52:	78a1      	ldrb	r1, [r4, #2]
    cd54:	b106      	cbz	r6, cd58 <__udivmoddi4+0x350>
    cd56:	2000      	movs	r0, #0
    cd58:	f7f4 fef2 	bl	1b40 <sym_YL4RMM7WH2QQSRTLJX7L5Q2F5KYIEZ5IWMCN3UQ>
    cd5c:	6829      	ldr	r1, [r5, #0]
    cd5e:	4408      	add	r0, r1
    cd60:	6028      	str	r0, [r5, #0]
    cd62:	7b20      	ldrb	r0, [r4, #12]
    cd64:	2800      	cmp	r0, #0
    cd66:	d00f      	beq.n	cd88 <__udivmoddi4+0x380>
    cd68:	78a0      	ldrb	r0, [r4, #2]
    cd6a:	2800      	cmp	r0, #0
    cd6c:	d00c      	beq.n	cd88 <__udivmoddi4+0x380>
    cd6e:	6828      	ldr	r0, [r5, #0]
    cd70:	1dc0      	adds	r0, r0, #7
    cd72:	f020 0007 	bic.w	r0, r0, #7
    cd76:	6028      	str	r0, [r5, #0]
    cd78:	7b21      	ldrb	r1, [r4, #12]
    cd7a:	b106      	cbz	r6, cd7e <__udivmoddi4+0x376>
    cd7c:	2000      	movs	r0, #0
    cd7e:	f7f6 fe1d 	bl	39bc <sym_ECAFXV3NMZ2THIWY27PTYY6WSGFWQJNAJOG5HIY>
    cd82:	6829      	ldr	r1, [r5, #0]
    cd84:	4408      	add	r0, r1
    cd86:	6028      	str	r0, [r5, #0]
    cd88:	bd70      	pop	{r4, r5, r6, pc}

0000cd8a <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    cd8a:	b50e      	push	{r1, r2, r3, lr}
    cd8c:	4601      	mov	r1, r0
    cd8e:	4668      	mov	r0, sp
    cd90:	f000 f814 	bl	cdbc <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    cd94:	4668      	mov	r0, sp
    cd96:	f001 fb13 	bl	e3c0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    cd9a:	bd0e      	pop	{r1, r2, r3, pc}
    cd9c:	b570      	push	{r4, r5, r6, lr}
    cd9e:	460d      	mov	r5, r1
    cda0:	4604      	mov	r4, r0
    cda2:	f7f4 fb1d 	bl	13e0 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    cda6:	2800      	cmp	r0, #0
    cda8:	d002      	beq.n	cdb0 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x26>
    cdaa:	2c3e      	cmp	r4, #62	; 0x3e
    cdac:	d001      	beq.n	cdb2 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY+0x28>
    cdae:	2001      	movs	r0, #1
    cdb0:	bd70      	pop	{r4, r5, r6, pc}
    cdb2:	4628      	mov	r0, r5
    cdb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cdb8:	f7f4 bb24 	b.w	1404 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>

0000cdbc <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    cdbc:	880a      	ldrh	r2, [r1, #0]
    cdbe:	f3c2 020b 	ubfx	r2, r2, #0, #12
    cdc2:	8082      	strh	r2, [r0, #4]
    cdc4:	884a      	ldrh	r2, [r1, #2]
    cdc6:	80c2      	strh	r2, [r0, #6]
    cdc8:	784a      	ldrb	r2, [r1, #1]
    cdca:	0993      	lsrs	r3, r2, #6
    cdcc:	2200      	movs	r2, #0
    cdce:	7242      	strb	r2, [r0, #9]
    cdd0:	784b      	ldrb	r3, [r1, #1]
    cdd2:	f3c3 1301 	ubfx	r3, r3, #4, #2
    cdd6:	b11b      	cbz	r3, cde0 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    cdd8:	2b01      	cmp	r3, #1
    cdda:	d005      	beq.n	cde8 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    cddc:	2b02      	cmp	r3, #2
    cdde:	d005      	beq.n	cdec <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    cde0:	7202      	strb	r2, [r0, #8]
    cde2:	1d09      	adds	r1, r1, #4
    cde4:	6001      	str	r1, [r0, #0]
    cde6:	4770      	bx	lr
    cde8:	2201      	movs	r2, #1
    cdea:	e7f9      	b.n	cde0 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    cdec:	2202      	movs	r2, #2
    cdee:	e7f7      	b.n	cde0 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000cdf0 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    cdf0:	b510      	push	{r4, lr}
    cdf2:	460c      	mov	r4, r1
    cdf4:	7909      	ldrb	r1, [r1, #4]
    cdf6:	7001      	strb	r1, [r0, #0]
    cdf8:	7841      	ldrb	r1, [r0, #1]
    cdfa:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    cdfe:	7041      	strb	r1, [r0, #1]
    ce00:	88a2      	ldrh	r2, [r4, #4]
    ce02:	f3c2 2203 	ubfx	r2, r2, #8, #4
    ce06:	4311      	orrs	r1, r2
    ce08:	7041      	strb	r1, [r0, #1]
    ce0a:	79a2      	ldrb	r2, [r4, #6]
    ce0c:	7082      	strb	r2, [r0, #2]
    ce0e:	88e2      	ldrh	r2, [r4, #6]
    ce10:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    ce14:	0a12      	lsrs	r2, r2, #8
    ce16:	70c2      	strb	r2, [r0, #3]
    ce18:	7041      	strb	r1, [r0, #1]
    ce1a:	7a22      	ldrb	r2, [r4, #8]
    ce1c:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    ce20:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    ce24:	7041      	strb	r1, [r0, #1]
    ce26:	7a62      	ldrb	r2, [r4, #9]
    ce28:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    ce2c:	7041      	strb	r1, [r0, #1]
    ce2e:	6821      	ldr	r1, [r4, #0]
    ce30:	1d02      	adds	r2, r0, #4
    ce32:	4291      	cmp	r1, r2
    ce34:	d006      	beq.n	ce44 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    ce36:	88e2      	ldrh	r2, [r4, #6]
    ce38:	2afb      	cmp	r2, #251	; 0xfb
    ce3a:	d300      	bcc.n	ce3e <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    ce3c:	22fb      	movs	r2, #251	; 0xfb
    ce3e:	1d00      	adds	r0, r0, #4
    ce40:	f003 feda 	bl	10bf8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ce44:	79a0      	ldrb	r0, [r4, #6]
    ce46:	1d00      	adds	r0, r0, #4
    ce48:	b2c0      	uxtb	r0, r0
    ce4a:	bd10      	pop	{r4, pc}

0000ce4c <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>:
    ce4c:	b430      	push	{r4, r5}
    ce4e:	790a      	ldrb	r2, [r1, #4]
    ce50:	7002      	strb	r2, [r0, #0]
    ce52:	7842      	ldrb	r2, [r0, #1]
    ce54:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    ce58:	7042      	strb	r2, [r0, #1]
    ce5a:	888b      	ldrh	r3, [r1, #4]
    ce5c:	f3c3 2303 	ubfx	r3, r3, #8, #4
    ce60:	431a      	orrs	r2, r3
    ce62:	7042      	strb	r2, [r0, #1]
    ce64:	798b      	ldrb	r3, [r1, #6]
    ce66:	7083      	strb	r3, [r0, #2]
    ce68:	78c3      	ldrb	r3, [r0, #3]
    ce6a:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
    ce6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ce72:	70c3      	strb	r3, [r0, #3]
    ce74:	88cc      	ldrh	r4, [r1, #6]
    ce76:	f3c4 2405 	ubfx	r4, r4, #8, #6
    ce7a:	4323      	orrs	r3, r4
    ce7c:	70c3      	strb	r3, [r0, #3]
    ce7e:	7042      	strb	r2, [r0, #1]
    ce80:	7a0c      	ldrb	r4, [r1, #8]
    ce82:	f004 0403 	and.w	r4, r4, #3
    ce86:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    ce8a:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    ce8e:	7042      	strb	r2, [r0, #1]
    ce90:	7a4c      	ldrb	r4, [r1, #9]
    ce92:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
    ce96:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    ce9a:	7042      	strb	r2, [r0, #1]
    ce9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    cea0:	70c2      	strb	r2, [r0, #3]
    cea2:	680b      	ldr	r3, [r1, #0]
    cea4:	1d02      	adds	r2, r0, #4
    cea6:	4293      	cmp	r3, r2
    cea8:	d005      	beq.n	ceb6 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY+0x6a>
    ceaa:	88ca      	ldrh	r2, [r1, #6]
    ceac:	bc30      	pop	{r4, r5}
    ceae:	4619      	mov	r1, r3
    ceb0:	1d00      	adds	r0, r0, #4
    ceb2:	f003 bea1 	b.w	10bf8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ceb6:	bc30      	pop	{r4, r5}
    ceb8:	4770      	bx	lr

0000ceba <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    ceba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cebe:	460d      	mov	r5, r1
    cec0:	4604      	mov	r4, r0
    cec2:	f891 c000 	ldrb.w	ip, [r1]
    cec6:	2000      	movs	r0, #0
    cec8:	230c      	movs	r3, #12
    ceca:	2705      	movs	r7, #5
    cecc:	2203      	movs	r2, #3
    cece:	263e      	movs	r6, #62	; 0x3e
    ced0:	21ff      	movs	r1, #255	; 0xff
    ced2:	f1bc 0f1c 	cmp.w	ip, #28
    ced6:	d27e      	bcs.n	cfd6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11c>
    ced8:	e8df f00c 	tbb	[pc, ip]
    cedc:	7d3f287d 	.word	0x7d3f287d
    cee0:	bba29187 	.word	0xbba29187
    cee4:	f0f2d9ce 	.word	0xf0f2d9ce
    cee8:	7d7d0eef 	.word	0x7d7d0eef
    ceec:	ecedfd45 	.word	0xecedfd45
    cef0:	e8e9eaeb 	.word	0xe8e9eaeb
    cef4:	e4e5e6e7 	.word	0xe4e5e6e7
    cef8:	200e      	movs	r0, #14
    cefa:	7020      	strb	r0, [r4, #0]
    cefc:	7968      	ldrb	r0, [r5, #5]
    cefe:	70e0      	strb	r0, [r4, #3]
    cf00:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cf04:	0a00      	lsrs	r0, r0, #8
    cf06:	7120      	strb	r0, [r4, #4]
    cf08:	7928      	ldrb	r0, [r5, #4]
    cf0a:	70a0      	strb	r0, [r4, #2]
    cf0c:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cf10:	3883      	subs	r0, #131	; 0x83
    cf12:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    cf16:	d003      	beq.n	cf20 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x66>
    cf18:	2136      	movs	r1, #54	; 0x36
    cf1a:	20c7      	movs	r0, #199	; 0xc7
    cf1c:	f7f4 f906 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cf20:	1de9      	adds	r1, r5, #7
    cf22:	1d60      	adds	r0, r4, #5
    cf24:	f003 fe68 	bl	10bf8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cf28:	2007      	movs	r0, #7
    cf2a:	e0ea      	b.n	d102 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x248>
    cf2c:	7023      	strb	r3, [r4, #0]
    cf2e:	7928      	ldrb	r0, [r5, #4]
    cf30:	70a0      	strb	r0, [r4, #2]
    cf32:	7968      	ldrb	r0, [r5, #5]
    cf34:	70e0      	strb	r0, [r4, #3]
    cf36:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cf3a:	0a00      	lsrs	r0, r0, #8
    cf3c:	7120      	strb	r0, [r4, #4]
    cf3e:	79e8      	ldrb	r0, [r5, #7]
    cf40:	7160      	strb	r0, [r4, #5]
    cf42:	7a28      	ldrb	r0, [r5, #8]
    cf44:	71a0      	strb	r0, [r4, #6]
    cf46:	8928      	ldrh	r0, [r5, #8]
    cf48:	0a00      	lsrs	r0, r0, #8
    cf4a:	71e0      	strb	r0, [r4, #7]
    cf4c:	7aa8      	ldrb	r0, [r5, #10]
    cf4e:	7220      	strb	r0, [r4, #8]
    cf50:	8968      	ldrh	r0, [r5, #10]
    cf52:	0a00      	lsrs	r0, r0, #8
    cf54:	7260      	strb	r0, [r4, #9]
    cf56:	2008      	movs	r0, #8
    cf58:	e0d3      	b.n	d102 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x248>
    cf5a:	201a      	movs	r0, #26
    cf5c:	7020      	strb	r0, [r4, #0]
    cf5e:	7928      	ldrb	r0, [r5, #4]
    cf60:	70a0      	strb	r0, [r4, #2]
    cf62:	2001      	movs	r0, #1
    cf64:	e0cd      	b.n	d102 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x248>
    cf66:	2029      	movs	r0, #41	; 0x29
    cf68:	f7f4 fa4c 	bl	1404 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cf6c:	b148      	cbz	r0, cf82 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xc8>
    cf6e:	7026      	strb	r6, [r4, #0]
    cf70:	2029      	movs	r0, #41	; 0x29
    cf72:	70a0      	strb	r0, [r4, #2]
    cf74:	2221      	movs	r2, #33	; 0x21
    cf76:	1d29      	adds	r1, r5, #4
    cf78:	1ce0      	adds	r0, r4, #3
    cf7a:	f003 fe3d 	bl	10bf8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cf7e:	2022      	movs	r0, #34	; 0x22
    cf80:	e0bf      	b.n	d102 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x248>
    cf82:	200a      	movs	r0, #10
    cf84:	f7f4 fa3e 	bl	1404 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cf88:	b120      	cbz	r0, cf94 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xda>
    cf8a:	4629      	mov	r1, r5
    cf8c:	4620      	mov	r0, r4
    cf8e:	f000 f95a 	bl	d246 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x38c>
    cf92:	e0b4      	b.n	d0fe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x244>
    cf94:	7026      	strb	r6, [r4, #0]
    cf96:	2001      	movs	r0, #1
    cf98:	70a0      	strb	r0, [r4, #2]
    cf9a:	7928      	ldrb	r0, [r5, #4]
    cf9c:	70e0      	strb	r0, [r4, #3]
    cf9e:	f815 0f05 	ldrb.w	r0, [r5, #5]!
    cfa2:	7120      	strb	r0, [r4, #4]
    cfa4:	8828      	ldrh	r0, [r5, #0]
    cfa6:	0a00      	lsrs	r0, r0, #8
    cfa8:	7160      	strb	r0, [r4, #5]
    cfaa:	78a8      	ldrb	r0, [r5, #2]
    cfac:	71a0      	strb	r0, [r4, #6]
    cfae:	78e8      	ldrb	r0, [r5, #3]
    cfb0:	f000 0001 	and.w	r0, r0, #1
    cfb4:	71e0      	strb	r0, [r4, #7]
    cfb6:	6868      	ldr	r0, [r5, #4]
    cfb8:	60a0      	str	r0, [r4, #8]
    cfba:	8928      	ldrh	r0, [r5, #8]
    cfbc:	81a0      	strh	r0, [r4, #12]
    cfbe:	7da8      	ldrb	r0, [r5, #22]
    cfc0:	73a0      	strb	r0, [r4, #14]
    cfc2:	8ae8      	ldrh	r0, [r5, #22]
    cfc4:	0a00      	lsrs	r0, r0, #8
    cfc6:	73e0      	strb	r0, [r4, #15]
    cfc8:	7e28      	ldrb	r0, [r5, #24]
    cfca:	7420      	strb	r0, [r4, #16]
    cfcc:	8b28      	ldrh	r0, [r5, #24]
    cfce:	0a00      	lsrs	r0, r0, #8
    cfd0:	7460      	strb	r0, [r4, #17]
    cfd2:	7ea8      	ldrb	r0, [r5, #26]
    cfd4:	e000      	b.n	cfd8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x11e>
    cfd6:	e096      	b.n	d106 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24c>
    cfd8:	74a0      	strb	r0, [r4, #18]
    cfda:	8b68      	ldrh	r0, [r5, #26]
    cfdc:	0a00      	lsrs	r0, r0, #8
    cfde:	74e0      	strb	r0, [r4, #19]
    cfe0:	7f28      	ldrb	r0, [r5, #28]
    cfe2:	7520      	strb	r0, [r4, #20]
    cfe4:	2013      	movs	r0, #19
    cfe6:	7060      	strb	r0, [r4, #1]
    cfe8:	e08b      	b.n	d102 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x248>
    cfea:	7026      	strb	r6, [r4, #0]
    cfec:	2014      	movs	r0, #20
    cfee:	70a0      	strb	r0, [r4, #2]
    cff0:	7928      	ldrb	r0, [r5, #4]
    cff2:	70e0      	strb	r0, [r4, #3]
    cff4:	88a8      	ldrh	r0, [r5, #4]
    cff6:	0a00      	lsrs	r0, r0, #8
    cff8:	7120      	strb	r0, [r4, #4]
    cffa:	79a8      	ldrb	r0, [r5, #6]
    cffc:	e0c0      	b.n	d180 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c6>
    cffe:	223e      	movs	r2, #62	; 0x3e
    d000:	7022      	strb	r2, [r4, #0]
    d002:	2204      	movs	r2, #4
    d004:	70a2      	strb	r2, [r4, #2]
    d006:	6868      	ldr	r0, [r5, #4]
    d008:	f8c4 0003 	str.w	r0, [r4, #3]
    d00c:	68a8      	ldr	r0, [r5, #8]
    d00e:	f8c4 0007 	str.w	r0, [r4, #7]
    d012:	89a8      	ldrh	r0, [r5, #12]
    d014:	f8a4 000b 	strh.w	r0, [r4, #11]
    d018:	7ba8      	ldrb	r0, [r5, #14]
    d01a:	7360      	strb	r0, [r4, #13]
    d01c:	200c      	movs	r0, #12
    d01e:	e070      	b.n	d102 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x248>
    d020:	7026      	strb	r6, [r4, #0]
    d022:	70a2      	strb	r2, [r4, #2]
    d024:	7928      	ldrb	r0, [r5, #4]
    d026:	70e0      	strb	r0, [r4, #3]
    d028:	79a8      	ldrb	r0, [r5, #6]
    d02a:	7120      	strb	r0, [r4, #4]
    d02c:	88e8      	ldrh	r0, [r5, #6]
    d02e:	0a00      	lsrs	r0, r0, #8
    d030:	7160      	strb	r0, [r4, #5]
    d032:	7a28      	ldrb	r0, [r5, #8]
    d034:	71a0      	strb	r0, [r4, #6]
    d036:	8928      	ldrh	r0, [r5, #8]
    d038:	0a00      	lsrs	r0, r0, #8
    d03a:	71e0      	strb	r0, [r4, #7]
    d03c:	7aa8      	ldrb	r0, [r5, #10]
    d03e:	7220      	strb	r0, [r4, #8]
    d040:	8968      	ldrh	r0, [r5, #10]
    d042:	0a00      	lsrs	r0, r0, #8
    d044:	7260      	strb	r0, [r4, #9]
    d046:	7b28      	ldrb	r0, [r5, #12]
    d048:	72a0      	strb	r0, [r4, #10]
    d04a:	89a8      	ldrh	r0, [r5, #12]
    d04c:	0a00      	lsrs	r0, r0, #8
    d04e:	72e0      	strb	r0, [r4, #11]
    d050:	e0d3      	b.n	d1fa <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x340>
    d052:	7026      	strb	r6, [r4, #0]
    d054:	70a7      	strb	r7, [r4, #2]
    d056:	7928      	ldrb	r0, [r5, #4]
    d058:	70e0      	strb	r0, [r4, #3]
    d05a:	88a8      	ldrh	r0, [r5, #4]
    d05c:	0a00      	lsrs	r0, r0, #8
    d05e:	7120      	strb	r0, [r4, #4]
    d060:	f8d5 0006 	ldr.w	r0, [r5, #6]
    d064:	f8c4 0005 	str.w	r0, [r4, #5]
    d068:	f8d5 000a 	ldr.w	r0, [r5, #10]
    d06c:	f8c4 0009 	str.w	r0, [r4, #9]
    d070:	89e8      	ldrh	r0, [r5, #14]
    d072:	f8a4 000d 	strh.w	r0, [r4, #13]
    d076:	e0e4      	b.n	d242 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x388>
    d078:	7027      	strb	r7, [r4, #0]
    d07a:	7928      	ldrb	r0, [r5, #4]
    d07c:	70a0      	strb	r0, [r4, #2]
    d07e:	7968      	ldrb	r0, [r5, #5]
    d080:	70e0      	strb	r0, [r4, #3]
    d082:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    d086:	0a00      	lsrs	r0, r0, #8
    d088:	7120      	strb	r0, [r4, #4]
    d08a:	79e8      	ldrb	r0, [r5, #7]
    d08c:	e078      	b.n	d180 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c6>
    d08e:	2008      	movs	r0, #8
    d090:	7020      	strb	r0, [r4, #0]
    d092:	7928      	ldrb	r0, [r5, #4]
    d094:	70a0      	strb	r0, [r4, #2]
    d096:	79a8      	ldrb	r0, [r5, #6]
    d098:	70e0      	strb	r0, [r4, #3]
    d09a:	88e8      	ldrh	r0, [r5, #6]
    d09c:	0a00      	lsrs	r0, r0, #8
    d09e:	7120      	strb	r0, [r4, #4]
    d0a0:	7a28      	ldrb	r0, [r5, #8]
    d0a2:	e06d      	b.n	d180 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2c6>
    d0a4:	e0b8      	b.n	d218 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35e>
    d0a6:	e08c      	b.n	d1c2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x308>
    d0a8:	e06d      	b.n	d186 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2cc>
    d0aa:	e098      	b.n	d1de <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x324>
    d0ac:	e0a7      	b.n	d1fe <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x344>
    d0ae:	e05f      	b.n	d170 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2b6>
    d0b0:	e047      	b.n	d142 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x288>
    d0b2:	e043      	b.n	d13c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x282>
    d0b4:	e032      	b.n	d11c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x262>
    d0b6:	e011      	b.n	d0dc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x222>
    d0b8:	e00d      	b.n	d0d6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x21c>
    d0ba:	e026      	b.n	d10a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    d0bc:	e01b      	b.n	d0f6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23c>
    d0be:	e7ff      	b.n	d0c0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x206>
    d0c0:	2030      	movs	r0, #48	; 0x30
    d0c2:	7020      	strb	r0, [r4, #0]
    d0c4:	7928      	ldrb	r0, [r5, #4]
    d0c6:	70a0      	strb	r0, [r4, #2]
    d0c8:	79a8      	ldrb	r0, [r5, #6]
    d0ca:	70e0      	strb	r0, [r4, #3]
    d0cc:	88e8      	ldrh	r0, [r5, #6]
    d0ce:	0a00      	lsrs	r0, r0, #8
    d0d0:	7120      	strb	r0, [r4, #4]
    d0d2:	2003      	movs	r0, #3
    d0d4:	e015      	b.n	d102 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x248>
    d0d6:	7026      	strb	r6, [r4, #0]
    d0d8:	2007      	movs	r0, #7
    d0da:	e056      	b.n	d18a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2d0>
    d0dc:	7026      	strb	r6, [r4, #0]
    d0de:	70a3      	strb	r3, [r4, #2]
    d0e0:	7928      	ldrb	r0, [r5, #4]
    d0e2:	70e0      	strb	r0, [r4, #3]
    d0e4:	79a8      	ldrb	r0, [r5, #6]
    d0e6:	7120      	strb	r0, [r4, #4]
    d0e8:	88e8      	ldrh	r0, [r5, #6]
    d0ea:	0a00      	lsrs	r0, r0, #8
    d0ec:	7160      	strb	r0, [r4, #5]
    d0ee:	7a28      	ldrb	r0, [r5, #8]
    d0f0:	71a0      	strb	r0, [r4, #6]
    d0f2:	7a68      	ldrb	r0, [r5, #9]
    d0f4:	e01f      	b.n	d136 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27c>
    d0f6:	1d29      	adds	r1, r5, #4
    d0f8:	4620      	mov	r0, r4
    d0fa:	f7f4 f943 	bl	1384 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x88>
    d0fe:	2800      	cmp	r0, #0
    d100:	d001      	beq.n	d106 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24c>
    d102:	7060      	strb	r0, [r4, #1]
    d104:	1c80      	adds	r0, r0, #2
    d106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d10a:	2057      	movs	r0, #87	; 0x57
    d10c:	7020      	strb	r0, [r4, #0]
    d10e:	7928      	ldrb	r0, [r5, #4]
    d110:	70a0      	strb	r0, [r4, #2]
    d112:	88a8      	ldrh	r0, [r5, #4]
    d114:	0a00      	lsrs	r0, r0, #8
    d116:	70e0      	strb	r0, [r4, #3]
    d118:	2002      	movs	r0, #2
    d11a:	e7f2      	b.n	d102 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x248>
    d11c:	7026      	strb	r6, [r4, #0]
    d11e:	2012      	movs	r0, #18
    d120:	70a0      	strb	r0, [r4, #2]
    d122:	7928      	ldrb	r0, [r5, #4]
    d124:	70e0      	strb	r0, [r4, #3]
    d126:	7968      	ldrb	r0, [r5, #5]
    d128:	7120      	strb	r0, [r4, #4]
    d12a:	79a8      	ldrb	r0, [r5, #6]
    d12c:	7160      	strb	r0, [r4, #5]
    d12e:	88e8      	ldrh	r0, [r5, #6]
    d130:	0a00      	lsrs	r0, r0, #8
    d132:	71a0      	strb	r0, [r4, #6]
    d134:	7a28      	ldrb	r0, [r5, #8]
    d136:	71e0      	strb	r0, [r4, #7]
    d138:	2006      	movs	r0, #6
    d13a:	e7e2      	b.n	d102 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x248>
    d13c:	7026      	strb	r6, [r4, #0]
    d13e:	2020      	movs	r0, #32
    d140:	e041      	b.n	d1c6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x30c>
    d142:	7026      	strb	r6, [r4, #0]
    d144:	2021      	movs	r0, #33	; 0x21
    d146:	70a0      	strb	r0, [r4, #2]
    d148:	7928      	ldrb	r0, [r5, #4]
    d14a:	70e0      	strb	r0, [r4, #3]
    d14c:	7968      	ldrb	r0, [r5, #5]
    d14e:	7120      	strb	r0, [r4, #4]
    d150:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    d154:	0a00      	lsrs	r0, r0, #8
    d156:	7160      	strb	r0, [r4, #5]
    d158:	79e8      	ldrb	r0, [r5, #7]
    d15a:	71a0      	strb	r0, [r4, #6]
    d15c:	7a28      	ldrb	r0, [r5, #8]
    d15e:	71e0      	strb	r0, [r4, #7]
    d160:	7a68      	ldrb	r0, [r5, #9]
    d162:	7220      	strb	r0, [r4, #8]
    d164:	7aa8      	ldrb	r0, [r5, #10]
    d166:	7260      	strb	r0, [r4, #9]
    d168:	7ae8      	ldrb	r0, [r5, #11]
    d16a:	72a0      	strb	r0, [r4, #10]
    d16c:	2009      	movs	r0, #9
    d16e:	e7c8      	b.n	d102 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x248>
    d170:	7021      	strb	r1, [r4, #0]
    d172:	20a1      	movs	r0, #161	; 0xa1
    d174:	70a0      	strb	r0, [r4, #2]
    d176:	7928      	ldrb	r0, [r5, #4]
    d178:	70e0      	strb	r0, [r4, #3]
    d17a:	7968      	ldrb	r0, [r5, #5]
    d17c:	7120      	strb	r0, [r4, #4]
    d17e:	2000      	movs	r0, #0
    d180:	7160      	strb	r0, [r4, #5]
    d182:	2004      	movs	r0, #4
    d184:	e7bd      	b.n	d102 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x248>
    d186:	7021      	strb	r1, [r4, #0]
    d188:	20a2      	movs	r0, #162	; 0xa2
    d18a:	70a0      	strb	r0, [r4, #2]
    d18c:	7928      	ldrb	r0, [r5, #4]
    d18e:	70e0      	strb	r0, [r4, #3]
    d190:	88a8      	ldrh	r0, [r5, #4]
    d192:	0a00      	lsrs	r0, r0, #8
    d194:	7120      	strb	r0, [r4, #4]
    d196:	79a8      	ldrb	r0, [r5, #6]
    d198:	7160      	strb	r0, [r4, #5]
    d19a:	88e8      	ldrh	r0, [r5, #6]
    d19c:	0a00      	lsrs	r0, r0, #8
    d19e:	71a0      	strb	r0, [r4, #6]
    d1a0:	7a28      	ldrb	r0, [r5, #8]
    d1a2:	71e0      	strb	r0, [r4, #7]
    d1a4:	8928      	ldrh	r0, [r5, #8]
    d1a6:	0a00      	lsrs	r0, r0, #8
    d1a8:	7220      	strb	r0, [r4, #8]
    d1aa:	7aa8      	ldrb	r0, [r5, #10]
    d1ac:	7260      	strb	r0, [r4, #9]
    d1ae:	8968      	ldrh	r0, [r5, #10]
    d1b0:	0a00      	lsrs	r0, r0, #8
    d1b2:	72a0      	strb	r0, [r4, #10]
    d1b4:	7b28      	ldrb	r0, [r5, #12]
    d1b6:	72e0      	strb	r0, [r4, #11]
    d1b8:	89a8      	ldrh	r0, [r5, #12]
    d1ba:	0a00      	lsrs	r0, r0, #8
    d1bc:	7320      	strb	r0, [r4, #12]
    d1be:	200b      	movs	r0, #11
    d1c0:	e79f      	b.n	d102 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x248>
    d1c2:	7021      	strb	r1, [r4, #0]
    d1c4:	20a3      	movs	r0, #163	; 0xa3
    d1c6:	70a0      	strb	r0, [r4, #2]
    d1c8:	7928      	ldrb	r0, [r5, #4]
    d1ca:	70e0      	strb	r0, [r4, #3]
    d1cc:	88a8      	ldrh	r0, [r5, #4]
    d1ce:	0a00      	lsrs	r0, r0, #8
    d1d0:	7120      	strb	r0, [r4, #4]
    d1d2:	79a8      	ldrb	r0, [r5, #6]
    d1d4:	7160      	strb	r0, [r4, #5]
    d1d6:	79e8      	ldrb	r0, [r5, #7]
    d1d8:	71a0      	strb	r0, [r4, #6]
    d1da:	2005      	movs	r0, #5
    d1dc:	e791      	b.n	d102 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x248>
    d1de:	7026      	strb	r6, [r4, #0]
    d1e0:	2013      	movs	r0, #19
    d1e2:	70a0      	strb	r0, [r4, #2]
    d1e4:	7928      	ldrb	r0, [r5, #4]
    d1e6:	70e0      	strb	r0, [r4, #3]
    d1e8:	7968      	ldrb	r0, [r5, #5]
    d1ea:	7120      	strb	r0, [r4, #4]
    d1ec:	f8d5 0006 	ldr.w	r0, [r5, #6]
    d1f0:	f8c4 0005 	str.w	r0, [r4, #5]
    d1f4:	8968      	ldrh	r0, [r5, #10]
    d1f6:	f8a4 0009 	strh.w	r0, [r4, #9]
    d1fa:	200a      	movs	r0, #10
    d1fc:	e781      	b.n	d102 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x248>
    d1fe:	7021      	strb	r1, [r4, #0]
    d200:	20a4      	movs	r0, #164	; 0xa4
    d202:	70a0      	strb	r0, [r4, #2]
    d204:	7928      	ldrb	r0, [r5, #4]
    d206:	70e0      	strb	r0, [r4, #3]
    d208:	88a8      	ldrh	r0, [r5, #4]
    d20a:	0a00      	lsrs	r0, r0, #8
    d20c:	7120      	strb	r0, [r4, #4]
    d20e:	79a8      	ldrb	r0, [r5, #6]
    d210:	7160      	strb	r0, [r4, #5]
    d212:	79e8      	ldrb	r0, [r5, #7]
    d214:	71a0      	strb	r0, [r4, #6]
    d216:	e687      	b.n	cf28 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x6e>
    d218:	7021      	strb	r1, [r4, #0]
    d21a:	2080      	movs	r0, #128	; 0x80
    d21c:	70a0      	strb	r0, [r4, #2]
    d21e:	88a9      	ldrh	r1, [r5, #4]
    d220:	f8a4 1003 	strh.w	r1, [r4, #3]
    d224:	88e9      	ldrh	r1, [r5, #6]
    d226:	f8a4 1005 	strh.w	r1, [r4, #5]
    d22a:	7a29      	ldrb	r1, [r5, #8]
    d22c:	71e1      	strb	r1, [r4, #7]
    d22e:	8969      	ldrh	r1, [r5, #10]
    d230:	8121      	strh	r1, [r4, #8]
    d232:	89a9      	ldrh	r1, [r5, #12]
    d234:	8161      	strh	r1, [r4, #10]
    d236:	89e9      	ldrh	r1, [r5, #14]
    d238:	81a1      	strh	r1, [r4, #12]
    d23a:	7c29      	ldrb	r1, [r5, #16]
    d23c:	f001 0101 	and.w	r1, r1, #1
    d240:	73a1      	strb	r1, [r4, #14]
    d242:	200d      	movs	r0, #13
    d244:	e75d      	b.n	d102 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x248>
    d246:	223e      	movs	r2, #62	; 0x3e
    d248:	7002      	strb	r2, [r0, #0]
    d24a:	220a      	movs	r2, #10
    d24c:	7082      	strb	r2, [r0, #2]
    d24e:	790a      	ldrb	r2, [r1, #4]
    d250:	70c2      	strb	r2, [r0, #3]
    d252:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    d256:	7102      	strb	r2, [r0, #4]
    d258:	880a      	ldrh	r2, [r1, #0]
    d25a:	0a12      	lsrs	r2, r2, #8
    d25c:	7142      	strb	r2, [r0, #5]
    d25e:	788a      	ldrb	r2, [r1, #2]
    d260:	7182      	strb	r2, [r0, #6]
    d262:	78ca      	ldrb	r2, [r1, #3]
    d264:	71c2      	strb	r2, [r0, #7]
    d266:	684a      	ldr	r2, [r1, #4]
    d268:	6082      	str	r2, [r0, #8]
    d26a:	890a      	ldrh	r2, [r1, #8]
    d26c:	8182      	strh	r2, [r0, #12]
    d26e:	f8d1 200a 	ldr.w	r2, [r1, #10]
    d272:	f8c0 200e 	str.w	r2, [r0, #14]
    d276:	89ca      	ldrh	r2, [r1, #14]
    d278:	8242      	strh	r2, [r0, #18]
    d27a:	690a      	ldr	r2, [r1, #16]
    d27c:	6142      	str	r2, [r0, #20]
    d27e:	8a8a      	ldrh	r2, [r1, #20]
    d280:	8302      	strh	r2, [r0, #24]
    d282:	7d8a      	ldrb	r2, [r1, #22]
    d284:	7682      	strb	r2, [r0, #26]
    d286:	8aca      	ldrh	r2, [r1, #22]
    d288:	0a12      	lsrs	r2, r2, #8
    d28a:	76c2      	strb	r2, [r0, #27]
    d28c:	7e0a      	ldrb	r2, [r1, #24]
    d28e:	7702      	strb	r2, [r0, #28]
    d290:	8b0a      	ldrh	r2, [r1, #24]
    d292:	0a12      	lsrs	r2, r2, #8
    d294:	7742      	strb	r2, [r0, #29]
    d296:	7e8a      	ldrb	r2, [r1, #26]
    d298:	7782      	strb	r2, [r0, #30]
    d29a:	8b4a      	ldrh	r2, [r1, #26]
    d29c:	0a12      	lsrs	r2, r2, #8
    d29e:	77c2      	strb	r2, [r0, #31]
    d2a0:	7f09      	ldrb	r1, [r1, #28]
    d2a2:	f880 1020 	strb.w	r1, [r0, #32]
    d2a6:	211f      	movs	r1, #31
    d2a8:	7041      	strb	r1, [r0, #1]
    d2aa:	4608      	mov	r0, r1
    d2ac:	4770      	bx	lr
    d2ae:	094a      	lsrs	r2, r1, #5
    d2b0:	f001 011f 	and.w	r1, r1, #31
    d2b4:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    d2b8:	40c8      	lsrs	r0, r1
    d2ba:	f000 0001 	and.w	r0, r0, #1
    d2be:	4770      	bx	lr

0000d2c0 <sdc_hci_data_put>:
    d2c0:	b510      	push	{r4, lr}
    d2c2:	f06f 0415 	mvn.w	r4, #21
    d2c6:	b120      	cbz	r0, d2d2 <sdc_hci_data_put+0x12>
    d2c8:	f7ff fd5f 	bl	cd8a <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    d2cc:	b108      	cbz	r0, d2d2 <sdc_hci_data_put+0x12>
    d2ce:	2000      	movs	r0, #0
    d2d0:	bd10      	pop	{r4, pc}
    d2d2:	4620      	mov	r0, r4
    d2d4:	bd10      	pop	{r4, pc}

0000d2d6 <sdc_hci_get>:
    d2d6:	b510      	push	{r4, lr}
    d2d8:	460c      	mov	r4, r1
    d2da:	b130      	cbz	r0, d2ea <sdc_hci_get+0x14>
    d2dc:	b12c      	cbz	r4, d2ea <sdc_hci_get+0x14>
    d2de:	f7f4 f80d 	bl	12fc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    d2e2:	b128      	cbz	r0, d2f0 <sdc_hci_get+0x1a>
    d2e4:	7020      	strb	r0, [r4, #0]
    d2e6:	2000      	movs	r0, #0
    d2e8:	bd10      	pop	{r4, pc}
    d2ea:	f06f 0015 	mvn.w	r0, #21
    d2ee:	bd10      	pop	{r4, pc}
    d2f0:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d2f4:	bd10      	pop	{r4, pc}

0000d2f6 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    d2f6:	f002 bed9 	b.w	100ac <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000d2fa <sdc_hci_cmd_cb_read_transmit_power_level>:
    d2fa:	f002 bef4 	b.w	100e6 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000d2fe <sdc_hci_cmd_cb_set_event_mask>:
    d2fe:	b510      	push	{r4, lr}
    d300:	f7f4 f890 	bl	1424 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    d304:	2000      	movs	r0, #0
    d306:	bd10      	pop	{r4, pc}

0000d308 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    d308:	b510      	push	{r4, lr}
    d30a:	f7f4 f89b 	bl	1444 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    d30e:	2000      	movs	r0, #0
    d310:	bd10      	pop	{r4, pc}

0000d312 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    d312:	f002 bf09 	b.w	10128 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000d316 <sdc_hci_cmd_vs_conn_event_extend>:
    d316:	f002 bdea 	b.w	feee <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>

0000d31a <sdc_hci_cmd_vs_conn_update>:
    d31a:	2001      	movs	r0, #1
    d31c:	4770      	bx	lr

0000d31e <sdc_hci_cmd_vs_event_length_set>:
    d31e:	f7fa b815 	b.w	734c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000d322 <sdc_hci_cmd_vs_llpm_mode_set>:
    d322:	2001      	movs	r0, #1
    d324:	4770      	bx	lr

0000d326 <sdc_hci_cmd_vs_peripheral_latency_mode_set>:
    d326:	7881      	ldrb	r1, [r0, #2]
    d328:	8800      	ldrh	r0, [r0, #0]
    d32a:	f002 bd90 	b.w	fe4e <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>

0000d32e <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    d32e:	7800      	ldrb	r0, [r0, #0]
    d330:	b100      	cbz	r0, d334 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    d332:	2001      	movs	r0, #1
    d334:	f002 bd86 	b.w	fe44 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000d338 <sdc_hci_cmd_vs_set_adv_randomness>:
    d338:	f002 bdb3 	b.w	fea2 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>

0000d33c <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    d33c:	b510      	push	{r4, lr}
    d33e:	4604      	mov	r4, r0
    d340:	f7ff fa68 	bl	c814 <mpsl_temperature_get>
    d344:	17c1      	asrs	r1, r0, #31
    d346:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    d34a:	1080      	asrs	r0, r0, #2
    d34c:	287f      	cmp	r0, #127	; 0x7f
    d34e:	dd01      	ble.n	d354 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    d350:	207f      	movs	r0, #127	; 0x7f
    d352:	e004      	b.n	d35e <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d354:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    d358:	4288      	cmp	r0, r1
    d35a:	da00      	bge.n	d35e <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d35c:	4608      	mov	r0, r1
    d35e:	7020      	strb	r0, [r4, #0]
    d360:	2000      	movs	r0, #0
    d362:	bd10      	pop	{r4, pc}

0000d364 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    d364:	f002 bdb2 	b.w	fecc <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000d368 <sdc_hci_cmd_ip_read_bd_addr>:
    d368:	f002 beb1 	b.w	100ce <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000d36c <sdc_hci_cmd_ip_read_local_version_information>:
    d36c:	f7f9 bffc 	b.w	7368 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000d370 <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    d370:	f002 bb50 	b.w	fa14 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000d374 <sdc_hci_cmd_le_clear_filter_accept_list>:
    d374:	f002 bb65 	b.w	fa42 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000d378 <sdc_hci_cmd_le_encrypt>:
    d378:	f002 bb70 	b.w	fa5c <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000d37c <sdc_hci_cmd_le_long_term_key_request_negative_reply>:
    d37c:	8802      	ldrh	r2, [r0, #0]
    d37e:	800a      	strh	r2, [r1, #0]
    d380:	f002 bb75 	b.w	fa6e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>

0000d384 <sdc_hci_cmd_le_long_term_key_request_reply>:
    d384:	8802      	ldrh	r2, [r0, #0]
    d386:	800a      	strh	r2, [r1, #0]
    d388:	f002 bb8a 	b.w	faa0 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>

0000d38c <sdc_hci_cmd_le_rand>:
    d38c:	f002 bbb2 	b.w	faf4 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000d390 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>:
    d390:	f002 bbb6 	b.w	fb00 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>

0000d394 <sdc_hci_cmd_le_read_buffer_size>:
    d394:	f7f9 beda 	b.w	714c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000d398 <sdc_hci_cmd_le_read_channel_map>:
    d398:	f7f9 bee2 	b.w	7160 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000d39c <sdc_hci_cmd_le_read_filter_accept_list_size>:
    d39c:	f002 bbf0 	b.w	fb80 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000d3a0 <sdc_hci_cmd_le_read_max_data_length>:
    d3a0:	f002 bbb9 	b.w	fb16 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000d3a4 <sdc_hci_cmd_le_read_phy>:
    d3a4:	f7f9 bf04 	b.w	71b0 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000d3a8 <sdc_hci_cmd_le_read_remote_features>:
    d3a8:	f002 bbbe 	b.w	fb28 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000d3ac <sdc_hci_cmd_le_read_suggested_default_data_length>:
    d3ac:	f7f9 bf26 	b.w	71fc <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000d3b0 <sdc_hci_cmd_le_read_transmit_power>:
    d3b0:	f002 bbd6 	b.w	fb60 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000d3b4 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    d3b4:	f002 bbeb 	b.w	fb8e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000d3b8 <sdc_hci_cmd_le_set_adv_data>:
    d3b8:	f002 bbfe 	b.w	fbb8 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>

0000d3bc <sdc_hci_cmd_le_set_adv_enable>:
    d3bc:	f002 bc11 	b.w	fbe2 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>

0000d3c0 <sdc_hci_cmd_le_set_adv_params>:
    d3c0:	f002 bc42 	b.w	fc48 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>

0000d3c4 <sdc_hci_cmd_le_set_data_length>:
    d3c4:	f002 bcd5 	b.w	fd72 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000d3c8 <sdc_hci_cmd_le_set_data_related_address_changes>:
    d3c8:	f002 bcf3 	b.w	fdb2 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>

0000d3cc <sdc_hci_cmd_le_set_default_phy>:
    d3cc:	f7f9 bf20 	b.w	7210 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000d3d0 <sdc_hci_cmd_le_set_event_mask>:
    d3d0:	b510      	push	{r4, lr}
    d3d2:	f7f4 f81f 	bl	1414 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    d3d6:	2000      	movs	r0, #0
    d3d8:	bd10      	pop	{r4, pc}

0000d3da <sdc_hci_cmd_le_set_phy>:
    d3da:	f002 bcf7 	b.w	fdcc <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000d3de <sdc_hci_cmd_le_set_random_address>:
    d3de:	f002 bd0e 	b.w	fdfe <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000d3e2 <sdc_hci_cmd_le_set_scan_response_data>:
    d3e2:	f002 bd1a 	b.w	fe1a <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>

0000d3e6 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    d3e6:	f7f9 bf3b 	b.w	7260 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000d3ea <sdc_hci_cmd_lc_disconnect>:
    d3ea:	f002 bac5 	b.w	f978 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000d3ee <sdc_hci_cmd_lc_read_remote_version_information>:
    d3ee:	f7f9 bfc5 	b.w	737c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    d3f2:	b570      	push	{r4, r5, r6, lr}
    d3f4:	880b      	ldrh	r3, [r1, #0]
    d3f6:	7cc4      	ldrb	r4, [r0, #19]
    d3f8:	f100 0518 	add.w	r5, r0, #24
    d3fc:	f3c3 060e 	ubfx	r6, r3, #0, #15
    d400:	8802      	ldrh	r2, [r0, #0]
    d402:	4435      	add	r5, r6
    d404:	1d64      	adds	r4, r4, #5
    d406:	882d      	ldrh	r5, [r5, #0]
    d408:	4422      	add	r2, r4
    d40a:	b292      	uxth	r2, r2
    d40c:	4425      	add	r5, r4
    d40e:	1e54      	subs	r4, r2, #1
    d410:	442c      	add	r4, r5
    d412:	fb94 f4f2 	sdiv	r4, r4, r2
    d416:	fb02 6204 	mla	r2, r2, r4, r6
    d41a:	8840      	ldrh	r0, [r0, #2]
    d41c:	b292      	uxth	r2, r2
    d41e:	4290      	cmp	r0, r2
    d420:	d903      	bls.n	d42a <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    d422:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d426:	4310      	orrs	r0, r2
    d428:	e002      	b.n	d430 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    d42a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d42e:	4398      	bics	r0, r3
    d430:	8008      	strh	r0, [r1, #0]
    d432:	bd70      	pop	{r4, r5, r6, pc}
    d434:	0442      	lsls	r2, r0, #17
    d436:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    d43a:	d107      	bne.n	d44c <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d43c:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d440:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d444:	4288      	cmp	r0, r1
    d446:	d001      	beq.n	d44c <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d448:	2001      	movs	r0, #1
    d44a:	4770      	bx	lr
    d44c:	2000      	movs	r0, #0
    d44e:	4770      	bx	lr

0000d450 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    d450:	8881      	ldrh	r1, [r0, #4]
    d452:	88c0      	ldrh	r0, [r0, #6]
    d454:	4288      	cmp	r0, r1
    d456:	d101      	bne.n	d45c <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    d458:	2001      	movs	r0, #1
    d45a:	4770      	bx	lr
    d45c:	2000      	movs	r0, #0
    d45e:	4770      	bx	lr

0000d460 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    d460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d464:	460f      	mov	r7, r1
    d466:	4604      	mov	r4, r0
    d468:	f100 0118 	add.w	r1, r0, #24
    d46c:	8880      	ldrh	r0, [r0, #4]
    d46e:	2600      	movs	r6, #0
    d470:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d474:	1845      	adds	r5, r0, r1
    d476:	603e      	str	r6, [r7, #0]
    d478:	89e0      	ldrh	r0, [r4, #14]
    d47a:	2800      	cmp	r0, #0
    d47c:	d016      	beq.n	d4ac <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    d47e:	8961      	ldrh	r1, [r4, #10]
    d480:	4408      	add	r0, r1
    d482:	b280      	uxth	r0, r0
    d484:	8160      	strh	r0, [r4, #10]
    d486:	8829      	ldrh	r1, [r5, #0]
    d488:	4288      	cmp	r0, r1
    d48a:	d905      	bls.n	d498 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    d48c:	f240 1151 	movw	r1, #337	; 0x151
    d490:	f04f 0014 	mov.w	r0, #20
    d494:	f7f3 fe4a 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d498:	d106      	bne.n	d4a8 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    d49a:	f104 0104 	add.w	r1, r4, #4
    d49e:	4620      	mov	r0, r4
    d4a0:	f7ff ffa7 	bl	d3f2 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d4a4:	8166      	strh	r6, [r4, #10]
    d4a6:	603d      	str	r5, [r7, #0]
    d4a8:	81e6      	strh	r6, [r4, #14]
    d4aa:	2001      	movs	r0, #1
    d4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d4b0 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d4b4:	4604      	mov	r4, r0
    d4b6:	f100 0318 	add.w	r3, r0, #24
    d4ba:	88c0      	ldrh	r0, [r0, #6]
    d4bc:	460e      	mov	r6, r1
    d4be:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d4c2:	8a20      	ldrh	r0, [r4, #16]
    d4c4:	19d9      	adds	r1, r3, r7
    d4c6:	b108      	cbz	r0, d4cc <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    d4c8:	42b0      	cmp	r0, r6
    d4ca:	d202      	bcs.n	d4d2 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    d4cc:	2000      	movs	r0, #0
    d4ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d4d2:	89a0      	ldrh	r0, [r4, #12]
    d4d4:	2500      	movs	r5, #0
    d4d6:	b140      	cbz	r0, d4ea <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    d4d8:	f8b1 c000 	ldrh.w	ip, [r1]
    d4dc:	4560      	cmp	r0, ip
    d4de:	d006      	beq.n	d4ee <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    d4e0:	f44f 7101 	mov.w	r1, #516	; 0x204
    d4e4:	2014      	movs	r0, #20
    d4e6:	f7f3 fe21 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d4ea:	800d      	strh	r5, [r1, #0]
    d4ec:	e00e      	b.n	d50c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    d4ee:	f894 c013 	ldrb.w	ip, [r4, #19]
    d4f2:	4418      	add	r0, r3
    d4f4:	f10c 0c05 	add.w	ip, ip, #5
    d4f8:	44bc      	add	ip, r7
    d4fa:	4460      	add	r0, ip
    d4fc:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    d500:	f820 cc03 	strh.w	ip, [r0, #-3]
    d504:	f894 c016 	ldrb.w	ip, [r4, #22]
    d508:	f800 cc01 	strb.w	ip, [r0, #-1]
    d50c:	89a0      	ldrh	r0, [r4, #12]
    d50e:	4430      	add	r0, r6
    d510:	81a0      	strh	r0, [r4, #12]
    d512:	8808      	ldrh	r0, [r1, #0]
    d514:	4430      	add	r0, r6
    d516:	8008      	strh	r0, [r1, #0]
    d518:	b12a      	cbz	r2, d526 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
    d51a:	1da1      	adds	r1, r4, #6
    d51c:	4620      	mov	r0, r4
    d51e:	f7ff ff68 	bl	d3f2 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d522:	81a5      	strh	r5, [r4, #12]
    d524:	e00a      	b.n	d53c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
    d526:	7ce0      	ldrb	r0, [r4, #19]
    d528:	89a1      	ldrh	r1, [r4, #12]
    d52a:	1d40      	adds	r0, r0, #5
    d52c:	4438      	add	r0, r7
    d52e:	4419      	add	r1, r3
    d530:	4408      	add	r0, r1
    d532:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d536:	82a1      	strh	r1, [r4, #20]
    d538:	7880      	ldrb	r0, [r0, #2]
    d53a:	75a0      	strb	r0, [r4, #22]
    d53c:	8225      	strh	r5, [r4, #16]
    d53e:	2001      	movs	r0, #1
    d540:	e7c5      	b.n	d4ce <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000d542 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    d542:	1c80      	adds	r0, r0, #2
    d544:	4770      	bx	lr

0000d546 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d546:	b510      	push	{r4, lr}
    d548:	4604      	mov	r4, r0
    d54a:	88c0      	ldrh	r0, [r0, #6]
    d54c:	88a1      	ldrh	r1, [r4, #4]
    d54e:	4281      	cmp	r1, r0
    d550:	d003      	beq.n	d55a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d552:	8960      	ldrh	r0, [r4, #10]
    d554:	b908      	cbnz	r0, d55a <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d556:	89e0      	ldrh	r0, [r4, #14]
    d558:	b108      	cbz	r0, d55e <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x18>
    d55a:	2000      	movs	r0, #0
    d55c:	bd10      	pop	{r4, pc}
    d55e:	1d21      	adds	r1, r4, #4
    d560:	4620      	mov	r0, r4
    d562:	f7ff ff46 	bl	d3f2 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d566:	2000      	movs	r0, #0
    d568:	81e0      	strh	r0, [r4, #14]
    d56a:	2001      	movs	r0, #1
    d56c:	bd10      	pop	{r4, pc}

0000d56e <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d56e:	b510      	push	{r4, lr}
    d570:	4604      	mov	r4, r0
    d572:	f100 0218 	add.w	r2, r0, #24
    d576:	88c0      	ldrh	r0, [r0, #6]
    d578:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d57c:	4402      	add	r2, r0
    d57e:	8820      	ldrh	r0, [r4, #0]
    d580:	2845      	cmp	r0, #69	; 0x45
    d582:	d200      	bcs.n	d586 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d584:	2045      	movs	r0, #69	; 0x45
    d586:	4288      	cmp	r0, r1
    d588:	d204      	bcs.n	d594 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d58a:	f44f 7182 	mov.w	r1, #260	; 0x104
    d58e:	2014      	movs	r0, #20
    d590:	f7f3 fdcc 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d594:	7ca0      	ldrb	r0, [r4, #18]
    d596:	2800      	cmp	r0, #0
    d598:	d003      	beq.n	d5a2 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d59a:	8810      	ldrh	r0, [r2, #0]
    d59c:	4288      	cmp	r0, r1
    d59e:	d201      	bcs.n	d5a4 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d5a0:	2000      	movs	r0, #0
    d5a2:	bd10      	pop	{r4, pc}
    d5a4:	8011      	strh	r1, [r2, #0]
    d5a6:	1da1      	adds	r1, r4, #6
    d5a8:	4620      	mov	r0, r4
    d5aa:	f7ff ff22 	bl	d3f2 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d5ae:	2000      	movs	r0, #0
    d5b0:	74a0      	strb	r0, [r4, #18]
    d5b2:	2001      	movs	r0, #1
    d5b4:	bd10      	pop	{r4, pc}

0000d5b6 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d5b6:	b510      	push	{r4, lr}
    d5b8:	88c4      	ldrh	r4, [r0, #6]
    d5ba:	8883      	ldrh	r3, [r0, #4]
    d5bc:	4601      	mov	r1, r0
    d5be:	f100 0218 	add.w	r2, r0, #24
    d5c2:	f3c3 000e 	ubfx	r0, r3, #0, #15
    d5c6:	4410      	add	r0, r2
    d5c8:	42a3      	cmp	r3, r4
    d5ca:	d002      	beq.n	d5d2 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
    d5cc:	8949      	ldrh	r1, [r1, #10]
    d5ce:	2900      	cmp	r1, #0
    d5d0:	d000      	beq.n	d5d4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1e>
    d5d2:	2000      	movs	r0, #0
    d5d4:	bd10      	pop	{r4, pc}

0000d5d6 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    d5d6:	8803      	ldrh	r3, [r0, #0]
    d5d8:	2b45      	cmp	r3, #69	; 0x45
    d5da:	d200      	bcs.n	d5de <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    d5dc:	2345      	movs	r3, #69	; 0x45
    d5de:	8013      	strh	r3, [r2, #0]
    d5e0:	88c2      	ldrh	r2, [r0, #6]
    d5e2:	f3c2 030e 	ubfx	r3, r2, #0, #15
    d5e6:	f100 0218 	add.w	r2, r0, #24
    d5ea:	441a      	add	r2, r3
    d5ec:	600a      	str	r2, [r1, #0]
    d5ee:	8980      	ldrh	r0, [r0, #12]
    d5f0:	4770      	bx	lr

0000d5f2 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d5f2:	7cc0      	ldrb	r0, [r0, #19]
    d5f4:	1d40      	adds	r0, r0, #5
    d5f6:	4408      	add	r0, r1
    d5f8:	1ec0      	subs	r0, r0, #3
    d5fa:	6010      	str	r0, [r2, #0]
    d5fc:	8808      	ldrh	r0, [r1, #0]
    d5fe:	4770      	bx	lr

0000d600 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d604:	460e      	mov	r6, r1
    d606:	88c1      	ldrh	r1, [r0, #6]
    d608:	8902      	ldrh	r2, [r0, #8]
    d60a:	4604      	mov	r4, r0
    d60c:	f100 0818 	add.w	r8, r0, #24
    d610:	8800      	ldrh	r0, [r0, #0]
    d612:	f3c1 050e 	ubfx	r5, r1, #0, #15
    d616:	f3c2 070e 	ubfx	r7, r2, #0, #15
    d61a:	2845      	cmp	r0, #69	; 0x45
    d61c:	d200      	bcs.n	d620 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d61e:	2045      	movs	r0, #69	; 0x45
    d620:	42b0      	cmp	r0, r6
    d622:	d203      	bcs.n	d62c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d624:	21c6      	movs	r1, #198	; 0xc6
    d626:	2014      	movs	r0, #20
    d628:	f7f3 fd80 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d62c:	4610      	mov	r0, r2
    d62e:	f7ff ff01 	bl	d434 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d632:	b110      	cbz	r0, d63a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    d634:	2000      	movs	r0, #0
    d636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d63a:	42af      	cmp	r7, r5
    d63c:	d908      	bls.n	d650 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d63e:	7ce1      	ldrb	r1, [r4, #19]
    d640:	1b78      	subs	r0, r7, r5
    d642:	1a40      	subs	r0, r0, r1
    d644:	1f40      	subs	r0, r0, #5
    d646:	4286      	cmp	r6, r0
    d648:	dd02      	ble.n	d650 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d64a:	2000      	movs	r0, #0
    d64c:	74a0      	strb	r0, [r4, #18]
    d64e:	e7f1      	b.n	d634 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    d650:	eb08 0005 	add.w	r0, r8, r5
    d654:	2101      	movs	r1, #1
    d656:	8006      	strh	r6, [r0, #0]
    d658:	74a1      	strb	r1, [r4, #18]
    d65a:	e7ec      	b.n	d636 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000d65c <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    d65c:	b538      	push	{r3, r4, r5, lr}
    d65e:	88c4      	ldrh	r4, [r0, #6]
    d660:	8881      	ldrh	r1, [r0, #4]
    d662:	f100 0218 	add.w	r2, r0, #24
    d666:	f3c1 030e 	ubfx	r3, r1, #0, #15
    d66a:	441a      	add	r2, r3
    d66c:	42a1      	cmp	r1, r4
    d66e:	d010      	beq.n	d692 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d670:	8943      	ldrh	r3, [r0, #10]
    d672:	89c5      	ldrh	r5, [r0, #14]
    d674:	8812      	ldrh	r2, [r2, #0]
    d676:	442b      	add	r3, r5
    d678:	4293      	cmp	r3, r2
    d67a:	d308      	bcc.n	d68e <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    d67c:	f8ad 1000 	strh.w	r1, [sp]
    d680:	4669      	mov	r1, sp
    d682:	f7ff feb6 	bl	d3f2 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d686:	f8bd 0000 	ldrh.w	r0, [sp]
    d68a:	42a0      	cmp	r0, r4
    d68c:	d001      	beq.n	d692 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d68e:	2001      	movs	r0, #1
    d690:	bd38      	pop	{r3, r4, r5, pc}
    d692:	2000      	movs	r0, #0
    d694:	bd38      	pop	{r3, r4, r5, pc}

0000d696 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    d696:	b570      	push	{r4, r5, r6, lr}
    d698:	88c6      	ldrh	r6, [r0, #6]
    d69a:	8885      	ldrh	r5, [r0, #4]
    d69c:	4603      	mov	r3, r0
    d69e:	f100 0418 	add.w	r4, r0, #24
    d6a2:	f3c5 000e 	ubfx	r0, r5, #0, #15
    d6a6:	4420      	add	r0, r4
    d6a8:	42b5      	cmp	r5, r6
    d6aa:	d102      	bne.n	d6b2 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    d6ac:	2000      	movs	r0, #0
    d6ae:	81d8      	strh	r0, [r3, #14]
    d6b0:	bd70      	pop	{r4, r5, r6, pc}
    d6b2:	8804      	ldrh	r4, [r0, #0]
    d6b4:	895d      	ldrh	r5, [r3, #10]
    d6b6:	7cde      	ldrb	r6, [r3, #19]
    d6b8:	1b64      	subs	r4, r4, r5
    d6ba:	4435      	add	r5, r6
    d6bc:	4428      	add	r0, r5
    d6be:	880d      	ldrh	r5, [r1, #0]
    d6c0:	b2a4      	uxth	r4, r4
    d6c2:	1c80      	adds	r0, r0, #2
    d6c4:	42a5      	cmp	r5, r4
    d6c6:	d900      	bls.n	d6ca <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    d6c8:	800c      	strh	r4, [r1, #0]
    d6ca:	895c      	ldrh	r4, [r3, #10]
    d6cc:	b124      	cbz	r4, d6d8 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    d6ce:	2400      	movs	r4, #0
    d6d0:	7014      	strb	r4, [r2, #0]
    d6d2:	8809      	ldrh	r1, [r1, #0]
    d6d4:	81d9      	strh	r1, [r3, #14]
    d6d6:	bd70      	pop	{r4, r5, r6, pc}
    d6d8:	2401      	movs	r4, #1
    d6da:	e7f9      	b.n	d6d0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000d6dc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    d6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d6e0:	461d      	mov	r5, r3
    d6e2:	4616      	mov	r6, r2
    d6e4:	9f06      	ldr	r7, [sp, #24]
    d6e6:	460b      	mov	r3, r1
    d6e8:	4604      	mov	r4, r0
    d6ea:	463a      	mov	r2, r7
    d6ec:	4629      	mov	r1, r5
    d6ee:	4630      	mov	r0, r6
    d6f0:	f000 f839 	bl	d766 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d6f4:	4283      	cmp	r3, r0
    d6f6:	d201      	bcs.n	d6fc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    d6f8:	219e      	movs	r1, #158	; 0x9e
    d6fa:	e012      	b.n	d722 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d6fc:	07a0      	lsls	r0, r4, #30
    d6fe:	d001      	beq.n	d704 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    d700:	219f      	movs	r1, #159	; 0x9f
    d702:	e00e      	b.n	d722 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d704:	2218      	movs	r2, #24
    d706:	2100      	movs	r1, #0
    d708:	4620      	mov	r0, r4
    d70a:	f003 faef 	bl	10cec <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d70e:	19a8      	adds	r0, r5, r6
    d710:	1d40      	adds	r0, r0, #5
    d712:	4378      	muls	r0, r7
    d714:	b280      	uxth	r0, r0
    d716:	74e5      	strb	r5, [r4, #19]
    d718:	8060      	strh	r0, [r4, #2]
    d71a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d71e:	d903      	bls.n	d728 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    d720:	21a4      	movs	r1, #164	; 0xa4
    d722:	2014      	movs	r0, #20
    d724:	f7f3 fd02 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d728:	8026      	strh	r6, [r4, #0]
    d72a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d72e <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    d72e:	b570      	push	{r4, r5, r6, lr}
    d730:	460b      	mov	r3, r1
    d732:	4604      	mov	r4, r0
    d734:	f100 0118 	add.w	r1, r0, #24
    d738:	8902      	ldrh	r2, [r0, #8]
    d73a:	8880      	ldrh	r0, [r0, #4]
    d73c:	f3c2 050e 	ubfx	r5, r2, #0, #15
    d740:	440d      	add	r5, r1
    d742:	4282      	cmp	r2, r0
    d744:	d101      	bne.n	d74a <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    d746:	2000      	movs	r0, #0
    d748:	bd70      	pop	{r4, r5, r6, pc}
    d74a:	b123      	cbz	r3, d756 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    d74c:	7ce2      	ldrb	r2, [r4, #19]
    d74e:	1ca9      	adds	r1, r5, #2
    d750:	4618      	mov	r0, r3
    d752:	f003 fa51 	bl	10bf8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d756:	882d      	ldrh	r5, [r5, #0]
    d758:	f104 0108 	add.w	r1, r4, #8
    d75c:	4620      	mov	r0, r4
    d75e:	f7ff fe48 	bl	d3f2 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d762:	4628      	mov	r0, r5
    d764:	bd70      	pop	{r4, r5, r6, pc}

0000d766 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d766:	4401      	add	r1, r0
    d768:	1d49      	adds	r1, r1, #5
    d76a:	4351      	muls	r1, r2
    d76c:	b28a      	uxth	r2, r1
    d76e:	2100      	movs	r1, #0
    d770:	2845      	cmp	r0, #69	; 0x45
    d772:	d202      	bcs.n	d77a <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    d774:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    d778:	b281      	uxth	r1, r0
    d77a:	3218      	adds	r2, #24
    d77c:	1850      	adds	r0, r2, r1
    d77e:	b280      	uxth	r0, r0
    d780:	4770      	bx	lr

0000d782 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d782:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d786:	4688      	mov	r8, r1
    d788:	88c1      	ldrh	r1, [r0, #6]
    d78a:	4604      	mov	r4, r0
    d78c:	8900      	ldrh	r0, [r0, #8]
    d78e:	f3c1 060e 	ubfx	r6, r1, #0, #15
    d792:	f104 0518 	add.w	r5, r4, #24
    d796:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d79a:	eb05 0906 	add.w	r9, r5, r6
    d79e:	f7ff fe49 	bl	d434 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d7a2:	2200      	movs	r2, #0
    d7a4:	b998      	cbnz	r0, d7ce <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d7a6:	8820      	ldrh	r0, [r4, #0]
    d7a8:	2845      	cmp	r0, #69	; 0x45
    d7aa:	d200      	bcs.n	d7ae <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d7ac:	2045      	movs	r0, #69	; 0x45
    d7ae:	42b7      	cmp	r7, r6
    d7b0:	d906      	bls.n	d7c0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d7b2:	7ce3      	ldrb	r3, [r4, #19]
    d7b4:	1bb9      	subs	r1, r7, r6
    d7b6:	1ac9      	subs	r1, r1, r3
    d7b8:	1f49      	subs	r1, r1, #5
    d7ba:	4281      	cmp	r1, r0
    d7bc:	da00      	bge.n	d7c0 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d7be:	4608      	mov	r0, r1
    d7c0:	89a1      	ldrh	r1, [r4, #12]
    d7c2:	b111      	cbz	r1, d7ca <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d7c4:	f8b9 3000 	ldrh.w	r3, [r9]
    d7c8:	1ac0      	subs	r0, r0, r3
    d7ca:	4540      	cmp	r0, r8
    d7cc:	da03      	bge.n	d7d6 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d7ce:	8222      	strh	r2, [r4, #16]
    d7d0:	2000      	movs	r0, #0
    d7d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d7d6:	7ce0      	ldrb	r0, [r4, #19]
    d7d8:	4429      	add	r1, r5
    d7da:	1d40      	adds	r0, r0, #5
    d7dc:	4430      	add	r0, r6
    d7de:	4408      	add	r0, r1
    d7e0:	f8a4 8010 	strh.w	r8, [r4, #16]
    d7e4:	1ec0      	subs	r0, r0, #3
    d7e6:	e7f4      	b.n	d7d2 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d7e8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d7e8:	b570      	push	{r4, r5, r6, lr}
    d7ea:	2300      	movs	r3, #0
    d7ec:	f1a1 0208 	sub.w	r2, r1, #8
    d7f0:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    d7f4:	42a2      	cmp	r2, r4
    d7f6:	d304      	bcc.n	d802 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d7f8:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
    d7fc:	2015      	movs	r0, #21
    d7fe:	f7f3 fc95 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d802:	6802      	ldr	r2, [r0, #0]
    d804:	b90a      	cbnz	r2, d80a <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    d806:	e01e      	b.n	d846 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d808:	4610      	mov	r0, r2
    d80a:	6802      	ldr	r2, [r0, #0]
    d80c:	8893      	ldrh	r3, [r2, #4]
    d80e:	428b      	cmp	r3, r1
    d810:	d002      	beq.n	d818 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    d812:	6813      	ldr	r3, [r2, #0]
    d814:	2b00      	cmp	r3, #0
    d816:	d1f7      	bne.n	d808 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    d818:	8894      	ldrh	r4, [r2, #4]
    d81a:	4613      	mov	r3, r2
    d81c:	428c      	cmp	r4, r1
    d81e:	d101      	bne.n	d824 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    d820:	6811      	ldr	r1, [r2, #0]
    d822:	e00d      	b.n	d840 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    d824:	f101 0508 	add.w	r5, r1, #8
    d828:	b2ae      	uxth	r6, r5
    d82a:	2500      	movs	r5, #0
    d82c:	42b4      	cmp	r4, r6
    d82e:	d309      	bcc.n	d844 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    d830:	1a64      	subs	r4, r4, r1
    d832:	4411      	add	r1, r2
    d834:	600d      	str	r5, [r1, #0]
    d836:	808c      	strh	r4, [r1, #4]
    d838:	6802      	ldr	r2, [r0, #0]
    d83a:	6812      	ldr	r2, [r2, #0]
    d83c:	6002      	str	r2, [r0, #0]
    d83e:	600a      	str	r2, [r1, #0]
    d840:	6001      	str	r1, [r0, #0]
    d842:	e000      	b.n	d846 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d844:	2300      	movs	r3, #0
    d846:	4618      	mov	r0, r3
    d848:	bd70      	pop	{r4, r5, r6, pc}

0000d84a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d84a:	b510      	push	{r4, lr}
    d84c:	000c      	movs	r4, r1
    d84e:	d004      	beq.n	d85a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    d850:	2c08      	cmp	r4, #8
    d852:	d207      	bcs.n	d864 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d854:	f44f 71cd 	mov.w	r1, #410	; 0x19a
    d858:	e00a      	b.n	d870 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    d85a:	b108      	cbz	r0, d860 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    d85c:	2100      	movs	r1, #0
    d85e:	6001      	str	r1, [r0, #0]
    d860:	2000      	movs	r0, #0
    d862:	bd10      	pop	{r4, pc}
    d864:	b158      	cbz	r0, d87e <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    d866:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    d86a:	d304      	bcc.n	d876 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    d86c:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    d870:	2015      	movs	r0, #21
    d872:	f7f3 fc5b 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d876:	b2a1      	uxth	r1, r4
    d878:	6800      	ldr	r0, [r0, #0]
    d87a:	f000 f814 	bl	d8a6 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d87e:	1d20      	adds	r0, r4, #4
    d880:	bd10      	pop	{r4, pc}

0000d882 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d882:	2100      	movs	r1, #0
    d884:	6802      	ldr	r2, [r0, #0]
    d886:	e003      	b.n	d890 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d888:	8893      	ldrh	r3, [r2, #4]
    d88a:	6812      	ldr	r2, [r2, #0]
    d88c:	4419      	add	r1, r3
    d88e:	b289      	uxth	r1, r1
    d890:	2a00      	cmp	r2, #0
    d892:	d1f9      	bne.n	d888 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d894:	f000 b807 	b.w	d8a6 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d898 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d898:	2300      	movs	r3, #0
    d89a:	600b      	str	r3, [r1, #0]
    d89c:	808a      	strh	r2, [r1, #4]
    d89e:	6802      	ldr	r2, [r0, #0]
    d8a0:	600a      	str	r2, [r1, #0]
    d8a2:	6001      	str	r1, [r0, #0]
    d8a4:	4770      	bx	lr
    d8a6:	2300      	movs	r3, #0
    d8a8:	6043      	str	r3, [r0, #4]
    d8aa:	1d02      	adds	r2, r0, #4
    d8ac:	8101      	strh	r1, [r0, #8]
    d8ae:	6002      	str	r2, [r0, #0]
    d8b0:	4770      	bx	lr
    d8b2:	eb00 0342 	add.w	r3, r0, r2, lsl #1
    d8b6:	8159      	strh	r1, [r3, #10]
    d8b8:	4611      	mov	r1, r2
    d8ba:	f000 b814 	b.w	d8e6 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4e>
    d8be:	b170      	cbz	r0, d8de <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x46>
    d8c0:	7882      	ldrb	r2, [r0, #2]
    d8c2:	fbb1 f3f2 	udiv	r3, r1, r2
    d8c6:	fb02 1213 	mls	r2, r2, r3, r1
    d8ca:	b2d2      	uxtb	r2, r2
    d8cc:	eb00 0342 	add.w	r3, r0, r2, lsl #1
    d8d0:	895b      	ldrh	r3, [r3, #10]
    d8d2:	428b      	cmp	r3, r1
    d8d4:	d101      	bne.n	d8da <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x42>
    d8d6:	4610      	mov	r0, r2
    d8d8:	4770      	bx	lr
    d8da:	78c3      	ldrb	r3, [r0, #3]
    d8dc:	b10b      	cbz	r3, d8e2 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0x4a>
    d8de:	20ff      	movs	r0, #255	; 0xff
    d8e0:	4770      	bx	lr
    d8e2:	f7f3 bedf 	b.w	16a4 <sdc_hci_cmd_vs_zephyr_read_version_info+0xdc>
    d8e6:	8802      	ldrh	r2, [r0, #0]
    d8e8:	fb01 0102 	mla	r1, r1, r2, r0
    d8ec:	7880      	ldrb	r0, [r0, #2]
    d8ee:	220a      	movs	r2, #10
    d8f0:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    d8f4:	4408      	add	r0, r1
    d8f6:	4770      	bx	lr

0000d8f8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    d8f8:	b51c      	push	{r2, r3, r4, lr}
    d8fa:	4604      	mov	r4, r0
    d8fc:	2000      	movs	r0, #0
    d8fe:	9001      	str	r0, [sp, #4]
    d900:	9000      	str	r0, [sp, #0]
    d902:	f88d 4006 	strb.w	r4, [sp, #6]
    d906:	e00a      	b.n	d91e <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d908:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d90c:	4621      	mov	r1, r4
    d90e:	f7f3 ffb7 	bl	1880 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    d912:	b120      	cbz	r0, d91e <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d914:	f240 217d 	movw	r1, #637	; 0x27d
    d918:	2017      	movs	r0, #23
    d91a:	f7f3 fc07 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d91e:	4668      	mov	r0, sp
    d920:	f7f3 ff5e 	bl	17e0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    d924:	2800      	cmp	r0, #0
    d926:	d0ef      	beq.n	d908 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    d928:	bd1c      	pop	{r2, r3, r4, pc}

0000d92a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d92a:	b570      	push	{r4, r5, r6, lr}
    d92c:	460e      	mov	r6, r1
    d92e:	461d      	mov	r5, r3
    d930:	4611      	mov	r1, r2
    d932:	f000 f813 	bl	d95c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    d936:	4604      	mov	r4, r0
    d938:	4629      	mov	r1, r5
    d93a:	4630      	mov	r0, r6
    d93c:	f000 f804 	bl	d948 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    d940:	4420      	add	r0, r4
    d942:	1d00      	adds	r0, r0, #4
    d944:	b280      	uxth	r0, r0
    d946:	bd70      	pop	{r4, r5, r6, pc}
    d948:	b510      	push	{r4, lr}
    d94a:	460a      	mov	r2, r1
    d94c:	2109      	movs	r1, #9
    d94e:	f7ff ff0a 	bl	d766 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d952:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d956:	1cc0      	adds	r0, r0, #3
    d958:	4008      	ands	r0, r1
    d95a:	bd10      	pop	{r4, pc}
    d95c:	b510      	push	{r4, lr}
    d95e:	460a      	mov	r2, r1
    d960:	210a      	movs	r1, #10
    d962:	f7ff ff00 	bl	d766 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d966:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d96a:	1cc0      	adds	r0, r0, #3
    d96c:	4008      	ands	r0, r1
    d96e:	bd10      	pop	{r4, pc}
    d970:	b109      	cbz	r1, d976 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4c>
    d972:	2100      	movs	r1, #0
    d974:	e000      	b.n	d978 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x4e>
    d976:	2102      	movs	r1, #2
    d978:	1843      	adds	r3, r0, r1
    d97a:	7d1a      	ldrb	r2, [r3, #20]
    d97c:	2a02      	cmp	r2, #2
    d97e:	d008      	beq.n	d992 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    d980:	7d5b      	ldrb	r3, [r3, #21]
    d982:	2b02      	cmp	r3, #2
    d984:	d009      	beq.n	d99a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    d986:	2a03      	cmp	r2, #3
    d988:	d003      	beq.n	d992 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x68>
    d98a:	2b03      	cmp	r3, #3
    d98c:	d005      	beq.n	d99a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x70>
    d98e:	2000      	movs	r0, #0
    d990:	4770      	bx	lr
    d992:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d996:	8b00      	ldrh	r0, [r0, #24]
    d998:	4770      	bx	lr
    d99a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d99e:	8b40      	ldrh	r0, [r0, #26]
    d9a0:	4770      	bx	lr
    d9a2:	b109      	cbz	r1, d9a8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x7e>
    d9a4:	2100      	movs	r1, #0
    d9a6:	e000      	b.n	d9aa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    d9a8:	2102      	movs	r1, #2
    d9aa:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    d9ae:	8b01      	ldrh	r1, [r0, #24]
    d9b0:	b911      	cbnz	r1, d9b8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x8e>
    d9b2:	8b40      	ldrh	r0, [r0, #26]
    d9b4:	2800      	cmp	r0, #0
    d9b6:	d000      	beq.n	d9ba <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x90>
    d9b8:	2001      	movs	r0, #1
    d9ba:	4770      	bx	lr
    d9bc:	b538      	push	{r3, r4, r5, lr}
    d9be:	7883      	ldrb	r3, [r0, #2]
    d9c0:	f88d 3000 	strb.w	r3, [sp]
    d9c4:	9b00      	ldr	r3, [sp, #0]
    d9c6:	9300      	str	r3, [sp, #0]
    d9c8:	f89d 3000 	ldrb.w	r3, [sp]
    d9cc:	b95b      	cbnz	r3, d9e6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xbc>
    d9ce:	2400      	movs	r4, #0
    d9d0:	b10a      	cbz	r2, d9d6 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xac>
    d9d2:	2300      	movs	r3, #0
    d9d4:	e000      	b.n	d9d8 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xae>
    d9d6:	2302      	movs	r3, #2
    d9d8:	18c2      	adds	r2, r0, r3
    d9da:	7d15      	ldrb	r5, [r2, #20]
    d9dc:	2d02      	cmp	r5, #2
    d9de:	d004      	beq.n	d9ea <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc0>
    d9e0:	7d52      	ldrb	r2, [r2, #21]
    d9e2:	2a02      	cmp	r2, #2
    d9e4:	d004      	beq.n	d9f0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc6>
    d9e6:	2000      	movs	r0, #0
    d9e8:	bd38      	pop	{r3, r4, r5, pc}
    d9ea:	461a      	mov	r2, r3
    d9ec:	1c5b      	adds	r3, r3, #1
    d9ee:	e000      	b.n	d9f2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc8>
    d9f0:	1c5a      	adds	r2, r3, #1
    d9f2:	b179      	cbz	r1, da14 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xea>
    d9f4:	18c5      	adds	r5, r0, r3
    d9f6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    d9fa:	752c      	strb	r4, [r5, #20]
    d9fc:	831c      	strh	r4, [r3, #24]
    d9fe:	2303      	movs	r3, #3
    da00:	1884      	adds	r4, r0, r2
    da02:	7523      	strb	r3, [r4, #20]
    da04:	eb00 0382 	add.w	r3, r0, r2, lsl #2
    da08:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    da0c:	685b      	ldr	r3, [r3, #4]
    da0e:	600b      	str	r3, [r1, #0]
    da10:	8b00      	ldrh	r0, [r0, #24]
    da12:	8088      	strh	r0, [r1, #4]
    da14:	2001      	movs	r0, #1
    da16:	bd38      	pop	{r3, r4, r5, pc}
    da18:	b510      	push	{r4, lr}
    da1a:	b109      	cbz	r1, da20 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf6>
    da1c:	2100      	movs	r1, #0
    da1e:	e000      	b.n	da22 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xf8>
    da20:	2102      	movs	r1, #2
    da22:	1843      	adds	r3, r0, r1
    da24:	7d1c      	ldrb	r4, [r3, #20]
    da26:	4294      	cmp	r4, r2
    da28:	d103      	bne.n	da32 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x108>
    da2a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    da2e:	8b00      	ldrh	r0, [r0, #24]
    da30:	bd10      	pop	{r4, pc}
    da32:	7d5b      	ldrb	r3, [r3, #21]
    da34:	4293      	cmp	r3, r2
    da36:	d103      	bne.n	da40 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x116>
    da38:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    da3c:	8b40      	ldrh	r0, [r0, #26]
    da3e:	bd10      	pop	{r4, pc}
    da40:	2000      	movs	r0, #0
    da42:	bd10      	pop	{r4, pc}
    da44:	f5b0 7fff 	cmp.w	r0, #510	; 0x1fe
    da48:	d201      	bcs.n	da4e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x124>
    da4a:	0841      	lsrs	r1, r0, #1
    da4c:	e000      	b.n	da50 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x126>
    da4e:	21ff      	movs	r1, #255	; 0xff
    da50:	1a40      	subs	r0, r0, r1
    da52:	f240 6172 	movw	r1, #1650	; 0x672
    da56:	4288      	cmp	r0, r1
    da58:	db00      	blt.n	da5c <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x132>
    da5a:	4608      	mov	r0, r1
    da5c:	b280      	uxth	r0, r0
    da5e:	4770      	bx	lr

0000da60 <sym_RIJIFYF46ZRKFDPA3GKV7WCH2VGEUEP6MVN4JFI>:
    da60:	2101      	movs	r1, #1
    da62:	f7ff bf85 	b.w	d970 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>

0000da66 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>:
    da66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    da6a:	4606      	mov	r6, r0
    da6c:	f342 0780 	sbfx	r7, r2, #2, #1
    da70:	7848      	ldrb	r0, [r1, #1]
    da72:	460c      	mov	r4, r1
    da74:	f022 0504 	bic.w	r5, r2, #4
    da78:	1c7f      	adds	r7, r7, #1
    da7a:	b100      	cbz	r0, da7e <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x18>
    da7c:	b90d      	cbnz	r5, da82 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x1c>
    da7e:	4328      	orrs	r0, r5
    da80:	d104      	bne.n	da8c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x26>
    da82:	b145      	cbz	r5, da96 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x30>
    da84:	2100      	movs	r1, #0
    da86:	4620      	mov	r0, r4
    da88:	f7f4 f81a 	bl	1ac0 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x30>
    da8c:	20ff      	movs	r0, #255	; 0xff
    da8e:	70a0      	strb	r0, [r4, #2]
    da90:	b11f      	cbz	r7, da9a <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x34>
    da92:	2000      	movs	r0, #0
    da94:	e002      	b.n	da9c <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x36>
    da96:	2101      	movs	r1, #1
    da98:	e7f5      	b.n	da86 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x20>
    da9a:	2002      	movs	r0, #2
    da9c:	1821      	adds	r1, r4, r0
    da9e:	7d09      	ldrb	r1, [r1, #20]
    daa0:	2903      	cmp	r1, #3
    daa2:	d102      	bne.n	daaa <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    daa4:	2d02      	cmp	r5, #2
    daa6:	d000      	beq.n	daaa <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA+0x44>
    daa8:	1c40      	adds	r0, r0, #1
    daaa:	1822      	adds	r2, r4, r0
    daac:	2101      	movs	r1, #1
    daae:	7511      	strb	r1, [r2, #20]
    dab0:	eb04 0140 	add.w	r1, r4, r0, lsl #1
    dab4:	2200      	movs	r2, #0
    dab6:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    daba:	830a      	strh	r2, [r1, #24]
    dabc:	6840      	ldr	r0, [r0, #4]
    dabe:	70a2      	strb	r2, [r4, #2]
    dac0:	4631      	mov	r1, r6
    dac2:	f362 010f 	bfi	r1, r2, #0, #16
    dac6:	e9c6 0100 	strd	r0, r1, [r6]
    daca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000dace <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>:
    dace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dad2:	461e      	mov	r6, r3
    dad4:	4613      	mov	r3, r2
    dad6:	4604      	mov	r4, r0
    dad8:	b109      	cbz	r1, dade <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x10>
    dada:	2000      	movs	r0, #0
    dadc:	e000      	b.n	dae0 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x12>
    dade:	2002      	movs	r0, #2
    dae0:	21ff      	movs	r1, #255	; 0xff
    dae2:	70a1      	strb	r1, [r4, #2]
    dae4:	1821      	adds	r1, r4, r0
    dae6:	7d0a      	ldrb	r2, [r1, #20]
    dae8:	2a01      	cmp	r2, #1
    daea:	d003      	beq.n	daf4 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x26>
    daec:	7d49      	ldrb	r1, [r1, #21]
    daee:	2901      	cmp	r1, #1
    daf0:	d10c      	bne.n	db0c <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x3e>
    daf2:	1c40      	adds	r0, r0, #1
    daf4:	eb04 0540 	add.w	r5, r4, r0, lsl #1
    daf8:	2700      	movs	r7, #0
    dafa:	8b29      	ldrh	r1, [r5, #24]
    dafc:	f8b5 c020 	ldrh.w	ip, [r5, #32]
    db00:	198a      	adds	r2, r1, r6
    db02:	4562      	cmp	r2, ip
    db04:	d905      	bls.n	db12 <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x44>
    db06:	4420      	add	r0, r4
    db08:	832f      	strh	r7, [r5, #24]
    db0a:	7507      	strb	r7, [r0, #20]
    db0c:	2000      	movs	r0, #0
    db0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    db12:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    db16:	4632      	mov	r2, r6
    db18:	6840      	ldr	r0, [r0, #4]
    db1a:	4408      	add	r0, r1
    db1c:	4619      	mov	r1, r3
    db1e:	f003 f86b 	bl	10bf8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    db22:	8b28      	ldrh	r0, [r5, #24]
    db24:	4430      	add	r0, r6
    db26:	8328      	strh	r0, [r5, #24]
    db28:	70a7      	strb	r7, [r4, #2]
    db2a:	2001      	movs	r0, #1
    db2c:	e7ef      	b.n	db0e <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY+0x40>

0000db2e <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>:
    db2e:	b510      	push	{r4, lr}
    db30:	2101      	movs	r1, #1
    db32:	f7ff ff36 	bl	d9a2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    db36:	2800      	cmp	r0, #0
    db38:	d000      	beq.n	db3c <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY+0xe>
    db3a:	2001      	movs	r0, #1
    db3c:	bd10      	pop	{r4, pc}

0000db3e <sym_VPXIA5P4C72CY3ME4ZVXBADOKEG5S4C7Z7QZZFA>:
    db3e:	2201      	movs	r2, #1
    db40:	f7ff bf3c 	b.w	d9bc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000db44 <sym_MF4WRTQNYFRYRFGW7FZUI3ZAYNQZ5EQ54QSK6JQ>:
    db44:	2200      	movs	r2, #0
    db46:	f7ff bf39 	b.w	d9bc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x92>

0000db4a <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>:
    db4a:	b510      	push	{r4, lr}
    db4c:	2100      	movs	r1, #0
    db4e:	f7ff ff28 	bl	d9a2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x78>
    db52:	2800      	cmp	r0, #0
    db54:	d000      	beq.n	db58 <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I+0xe>
    db56:	2001      	movs	r0, #1
    db58:	bd10      	pop	{r4, pc}

0000db5a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>:
    db5a:	b570      	push	{r4, r5, r6, lr}
    db5c:	b109      	cbz	r1, db62 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x8>
    db5e:	2300      	movs	r3, #0
    db60:	e000      	b.n	db64 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0xa>
    db62:	2302      	movs	r3, #2
    db64:	21ff      	movs	r1, #255	; 0xff
    db66:	7081      	strb	r1, [r0, #2]
    db68:	18c1      	adds	r1, r0, r3
    db6a:	2402      	movs	r4, #2
    db6c:	7d0d      	ldrb	r5, [r1, #20]
    db6e:	2d01      	cmp	r5, #1
    db70:	d007      	beq.n	db82 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x28>
    db72:	7d4d      	ldrb	r5, [r1, #21]
    db74:	2d01      	cmp	r5, #1
    db76:	d009      	beq.n	db8c <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x32>
    db78:	f44f 718b 	mov.w	r1, #278	; 0x116
    db7c:	2009      	movs	r0, #9
    db7e:	f7f3 fad5 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    db82:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    db86:	831a      	strh	r2, [r3, #24]
    db88:	750c      	strb	r4, [r1, #20]
    db8a:	e003      	b.n	db94 <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I+0x3a>
    db8c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
    db90:	835a      	strh	r2, [r3, #26]
    db92:	754c      	strb	r4, [r1, #21]
    db94:	2100      	movs	r1, #0
    db96:	7081      	strb	r1, [r0, #2]
    db98:	bd70      	pop	{r4, r5, r6, pc}

0000db9a <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>:
    db9a:	2101      	movs	r1, #1
    db9c:	7001      	strb	r1, [r0, #0]
    db9e:	4770      	bx	lr

0000dba0 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>:
    dba0:	2201      	movs	r2, #1
    dba2:	4611      	mov	r1, r2
    dba4:	f7ff bf38 	b.w	da18 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000dba8 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>:
    dba8:	2201      	movs	r2, #1
    dbaa:	2100      	movs	r1, #0
    dbac:	f7ff bf34 	b.w	da18 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xee>

0000dbb0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ>:
    dbb0:	2100      	movs	r1, #0
    dbb2:	f7ff bedd 	b.w	d970 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    dbb6:	2800      	cmp	r0, #0
    dbb8:	db09      	blt.n	dbce <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x1e>
    dbba:	f000 021f 	and.w	r2, r0, #31
    dbbe:	2101      	movs	r1, #1
    dbc0:	4091      	lsls	r1, r2
    dbc2:	0940      	lsrs	r0, r0, #5
    dbc4:	0080      	lsls	r0, r0, #2
    dbc6:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    dbca:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    dbce:	4770      	bx	lr
    dbd0:	2800      	cmp	r0, #0
    dbd2:	db0d      	blt.n	dbf0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x40>
    dbd4:	f000 021f 	and.w	r2, r0, #31
    dbd8:	2101      	movs	r1, #1
    dbda:	4091      	lsls	r1, r2
    dbdc:	0940      	lsrs	r0, r0, #5
    dbde:	0080      	lsls	r0, r0, #2
    dbe0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    dbe4:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    dbe8:	f3bf 8f4f 	dsb	sy
    dbec:	f3bf 8f6f 	isb	sy
    dbf0:	4770      	bx	lr
    dbf2:	b510      	push	{r4, lr}
    dbf4:	200e      	movs	r0, #14
    dbf6:	f7ff ffeb 	bl	dbd0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    dbfa:	200e      	movs	r0, #14
    dbfc:	f7ff ffdb 	bl	dbb6 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    dc00:	200f      	movs	r0, #15
    dc02:	f7ff ffe5 	bl	dbd0 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x20>
    dc06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dc0a:	200f      	movs	r0, #15
    dc0c:	f7ff bfd3 	b.w	dbb6 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x6>
    dc10:	2800      	cmp	r0, #0
    dc12:	db09      	blt.n	dc28 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x78>
    dc14:	f000 021f 	and.w	r2, r0, #31
    dc18:	2101      	movs	r1, #1
    dc1a:	4091      	lsls	r1, r2
    dc1c:	0940      	lsrs	r0, r0, #5
    dc1e:	0080      	lsls	r0, r0, #2
    dc20:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    dc24:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    dc28:	4770      	bx	lr
    dc2a:	5840      	ldr	r0, [r0, r1]
    dc2c:	2800      	cmp	r0, #0
    dc2e:	d000      	beq.n	dc32 <sym_MJFFFAJVV3IQTOJK6UL2575XXGCEKTIIFXD5MAQ+0x82>
    dc30:	2001      	movs	r0, #1
    dc32:	4770      	bx	lr

0000dc34 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    dc34:	b510      	push	{r4, lr}
    dc36:	4604      	mov	r4, r0
    dc38:	4620      	mov	r0, r4
    dc3a:	f7f4 f849 	bl	1cd0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>
    dc3e:	2811      	cmp	r0, #17
    dc40:	d0fa      	beq.n	dc38 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    dc42:	bd10      	pop	{r4, pc}

0000dc44 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    dc44:	b510      	push	{r4, lr}
    dc46:	f7ff fff5 	bl	dc34 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    dc4a:	2800      	cmp	r0, #0
    dc4c:	d003      	beq.n	dc56 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    dc4e:	21a9      	movs	r1, #169	; 0xa9
    dc50:	201d      	movs	r0, #29
    dc52:	f7f3 fa6b 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dc56:	bd10      	pop	{r4, pc}

0000dc58 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    dc58:	f7f4 b998 	b.w	1f8c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000dc5c <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    dc5c:	f7f4 b986 	b.w	1f6c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000dc60 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    dc60:	b510      	push	{r4, lr}
    dc62:	4050      	eors	r0, r2
    dc64:	780a      	ldrb	r2, [r1, #0]
    dc66:	781c      	ldrb	r4, [r3, #0]
    dc68:	4062      	eors	r2, r4
    dc6a:	4410      	add	r0, r2
    dc6c:	784a      	ldrb	r2, [r1, #1]
    dc6e:	785c      	ldrb	r4, [r3, #1]
    dc70:	4062      	eors	r2, r4
    dc72:	4410      	add	r0, r2
    dc74:	788a      	ldrb	r2, [r1, #2]
    dc76:	789c      	ldrb	r4, [r3, #2]
    dc78:	4062      	eors	r2, r4
    dc7a:	4410      	add	r0, r2
    dc7c:	78ca      	ldrb	r2, [r1, #3]
    dc7e:	78dc      	ldrb	r4, [r3, #3]
    dc80:	4062      	eors	r2, r4
    dc82:	4410      	add	r0, r2
    dc84:	790a      	ldrb	r2, [r1, #4]
    dc86:	791c      	ldrb	r4, [r3, #4]
    dc88:	7949      	ldrb	r1, [r1, #5]
    dc8a:	4062      	eors	r2, r4
    dc8c:	4410      	add	r0, r2
    dc8e:	795a      	ldrb	r2, [r3, #5]
    dc90:	4051      	eors	r1, r2
    dc92:	42c1      	cmn	r1, r0
    dc94:	d101      	bne.n	dc9a <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    dc96:	2001      	movs	r0, #1
    dc98:	bd10      	pop	{r4, pc}
    dc9a:	2000      	movs	r0, #0
    dc9c:	bd10      	pop	{r4, pc}

0000dc9e <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    dc9e:	4770      	bx	lr

0000dca0 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    dca0:	b530      	push	{r4, r5, lr}
    dca2:	460c      	mov	r4, r1
    dca4:	4605      	mov	r5, r0
    dca6:	b08d      	sub	sp, #52	; 0x34
    dca8:	f04f 0103 	mov.w	r1, #3
    dcac:	f104 0003 	add.w	r0, r4, #3
    dcb0:	b112      	cbz	r2, dcb8 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    dcb2:	f7f3 fad9 	bl	1268 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    dcb6:	e001      	b.n	dcbc <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    dcb8:	f7f3 fadc 	bl	1274 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    dcbc:	7960      	ldrb	r0, [r4, #5]
    dcbe:	220d      	movs	r2, #13
    dcc0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    dcc4:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    dcc8:	7160      	strb	r0, [r4, #5]
    dcca:	2100      	movs	r1, #0
    dccc:	a804      	add	r0, sp, #16
    dcce:	f003 f80d 	bl	10cec <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    dcd2:	78e0      	ldrb	r0, [r4, #3]
    dcd4:	f88d 001f 	strb.w	r0, [sp, #31]
    dcd8:	7920      	ldrb	r0, [r4, #4]
    dcda:	f88d 001e 	strb.w	r0, [sp, #30]
    dcde:	7960      	ldrb	r0, [r4, #5]
    dce0:	f88d 001d 	strb.w	r0, [sp, #29]
    dce4:	2210      	movs	r2, #16
    dce6:	4629      	mov	r1, r5
    dce8:	4668      	mov	r0, sp
    dcea:	f002 ff85 	bl	10bf8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dcee:	4668      	mov	r0, sp
    dcf0:	f7ff ffa8 	bl	dc44 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    dcf4:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    dcf8:	7020      	strb	r0, [r4, #0]
    dcfa:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    dcfe:	7060      	strb	r0, [r4, #1]
    dd00:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    dd04:	70a0      	strb	r0, [r4, #2]
    dd06:	b00d      	add	sp, #52	; 0x34
    dd08:	bd30      	pop	{r4, r5, pc}

0000dd0a <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A>:
    dd0a:	f7f4 bcb9 	b.w	2680 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA+0x3b8>
    dd0e:	07c1      	lsls	r1, r0, #31
    dd10:	d001      	beq.n	dd16 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0xc>
    dd12:	2001      	movs	r0, #1
    dd14:	4770      	bx	lr
    dd16:	0780      	lsls	r0, r0, #30
    dd18:	d501      	bpl.n	dd1e <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x14>
    dd1a:	2002      	movs	r0, #2
    dd1c:	4770      	bx	lr
    dd1e:	2000      	movs	r0, #0
    dd20:	4770      	bx	lr
    dd22:	b510      	push	{r4, lr}
    dd24:	2801      	cmp	r0, #1
    dd26:	d008      	beq.n	dd3a <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x30>
    dd28:	2802      	cmp	r0, #2
    dd2a:	d004      	beq.n	dd36 <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x2c>
    dd2c:	f240 31c5 	movw	r1, #965	; 0x3c5
    dd30:	2006      	movs	r0, #6
    dd32:	f7f3 f9fb 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd36:	2001      	movs	r0, #1
    dd38:	bd10      	pop	{r4, pc}
    dd3a:	2000      	movs	r0, #0
    dd3c:	bd10      	pop	{r4, pc}
    dd3e:	2900      	cmp	r1, #0
    dd40:	d004      	beq.n	dd4c <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x42>
    dd42:	2801      	cmp	r0, #1
    dd44:	d003      	beq.n	dd4e <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x44>
    dd46:	2901      	cmp	r1, #1
    dd48:	d001      	beq.n	dd4e <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A+0x44>
    dd4a:	2002      	movs	r0, #2
    dd4c:	4770      	bx	lr
    dd4e:	2001      	movs	r0, #1
    dd50:	4770      	bx	lr
    dd52:	f7ff bca0 	b.w	d696 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000dd56 <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    dd56:	2101      	movs	r1, #1
    dd58:	f7f4 bf14 	b.w	2b84 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0xc>

0000dd5c <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    dd5c:	b510      	push	{r4, lr}
    dd5e:	f002 fd2d 	bl	107bc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    dd62:	b118      	cbz	r0, dd6c <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    dd64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dd68:	f7f9 bf0e 	b.w	7b88 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    dd6c:	20ff      	movs	r0, #255	; 0xff
    dd6e:	bd10      	pop	{r4, pc}

0000dd70 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    dd70:	b510      	push	{r4, lr}
    dd72:	f7f4 ff33 	bl	2bdc <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x64>
    dd76:	2808      	cmp	r0, #8
    dd78:	d003      	beq.n	dd82 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    dd7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dd7e:	f7f4 bf19 	b.w	2bb4 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY+0x3c>
    dd82:	bd10      	pop	{r4, pc}

0000dd84 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    dd84:	b510      	push	{r4, lr}
    dd86:	460c      	mov	r4, r1
    dd88:	2100      	movs	r1, #0
    dd8a:	f7f3 fcd7 	bl	173c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    dd8e:	6060      	str	r0, [r4, #4]
    dd90:	b118      	cbz	r0, dd9a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x16>
    dd92:	2001      	movs	r0, #1
    dd94:	7020      	strb	r0, [r4, #0]
    dd96:	2000      	movs	r0, #0
    dd98:	bd10      	pop	{r4, pc}
    dd9a:	2002      	movs	r0, #2
    dd9c:	bd10      	pop	{r4, pc}

0000dd9e <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    dd9e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dda2:	4348      	muls	r0, r1
    dda4:	4770      	bx	lr

0000dda6 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    dda6:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ddaa:	fbb0 f0f1 	udiv	r0, r0, r1
    ddae:	b280      	uxth	r0, r0
    ddb0:	4770      	bx	lr

0000ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    ddb2:	b510      	push	{r4, lr}
    ddb4:	f1a2 0310 	sub.w	r3, r2, #16
    ddb8:	290d      	cmp	r1, #13
    ddba:	d24d      	bcs.n	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    ddbc:	e8df f001 	tbb	[pc, r1]
    ddc0:	150e0907 	.word	0x150e0907
    ddc4:	29211d1a 	.word	0x29211d1a
    ddc8:	362f4e2c 	.word	0x362f4e2c
    ddcc:	0048      	.short	0x0048
    ddce:	b3f2      	cbz	r2, de4e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9c>
    ddd0:	e042      	b.n	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    ddd2:	2a06      	cmp	r2, #6
    ddd4:	d03e      	beq.n	de54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ddd6:	2a07      	cmp	r2, #7
    ddd8:	d03c      	beq.n	de54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ddda:	e03d      	b.n	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    dddc:	2a0b      	cmp	r2, #11
    ddde:	d039      	beq.n	de54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dde0:	2a0c      	cmp	r2, #12
    dde2:	d037      	beq.n	de54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dde4:	2a0a      	cmp	r2, #10
    dde6:	d035      	beq.n	de54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    dde8:	e036      	b.n	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    ddea:	2a0d      	cmp	r2, #13
    ddec:	d032      	beq.n	de54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ddee:	2a0e      	cmp	r2, #14
    ddf0:	d030      	beq.n	de54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ddf2:	e031      	b.n	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    ddf4:	2b0c      	cmp	r3, #12
    ddf6:	d92d      	bls.n	de54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    ddf8:	e02e      	b.n	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    ddfa:	3a11      	subs	r2, #17
    ddfc:	2a0b      	cmp	r2, #11
    ddfe:	d929      	bls.n	de54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de00:	e02a      	b.n	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de02:	2b03      	cmp	r3, #3
    de04:	d926      	bls.n	de54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de06:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    de0a:	b1f8      	cbz	r0, de4c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x9a>
    de0c:	2a1c      	cmp	r2, #28
    de0e:	d921      	bls.n	de54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de10:	e022      	b.n	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de12:	2a04      	cmp	r2, #4
    de14:	d01e      	beq.n	de54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de16:	e01f      	b.n	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de18:	2a01      	cmp	r2, #1
    de1a:	d01b      	beq.n	de54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de1c:	e01c      	b.n	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de1e:	2a1d      	cmp	r2, #29
    de20:	d018      	beq.n	de54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de22:	2a1e      	cmp	r2, #30
    de24:	d016      	beq.n	de54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de26:	2a1f      	cmp	r2, #31
    de28:	d014      	beq.n	de54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de2a:	e015      	b.n	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de2c:	2a20      	cmp	r2, #32
    de2e:	d011      	beq.n	de54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de30:	2a21      	cmp	r2, #33	; 0x21
    de32:	d00f      	beq.n	de54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de34:	2a22      	cmp	r2, #34	; 0x22
    de36:	d00d      	beq.n	de54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de38:	2a23      	cmp	r2, #35	; 0x23
    de3a:	d00b      	beq.n	de54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de3c:	2a24      	cmp	r2, #36	; 0x24
    de3e:	d009      	beq.n	de54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de40:	2a25      	cmp	r2, #37	; 0x25
    de42:	d007      	beq.n	de54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de44:	2a26      	cmp	r2, #38	; 0x26
    de46:	d005      	beq.n	de54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de48:	2a2e      	cmp	r2, #46	; 0x2e
    de4a:	d003      	beq.n	de54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de4c:	e004      	b.n	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de4e:	e001      	b.n	de54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>
    de50:	2a28      	cmp	r2, #40	; 0x28
    de52:	d101      	bne.n	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de54:	2001      	movs	r0, #1
    de56:	bd10      	pop	{r4, pc}
    de58:	2000      	movs	r0, #0
    de5a:	bd10      	pop	{r4, pc}
    de5c:	2a0f      	cmp	r2, #15
    de5e:	d1fb      	bne.n	de58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa6>
    de60:	e7f8      	b.n	de54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xa2>

0000de62 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    de62:	f011 0f0c 	tst.w	r1, #12
    de66:	d018      	beq.n	de9a <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    de68:	074a      	lsls	r2, r1, #29
    de6a:	f44f 7116 	mov.w	r1, #600	; 0x258
    de6e:	2a00      	cmp	r2, #0
    de70:	da02      	bge.n	de78 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    de72:	f04f 0210 	mov.w	r2, #16
    de76:	e001      	b.n	de7c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    de78:	f04f 0240 	mov.w	r2, #64	; 0x40
    de7c:	da01      	bge.n	de82 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    de7e:	f04f 0196 	mov.w	r1, #150	; 0x96
    de82:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    de86:	eba0 0301 	sub.w	r3, r0, r1
    de8a:	4288      	cmp	r0, r1
    de8c:	d903      	bls.n	de96 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    de8e:	fb93 f0f2 	sdiv	r0, r3, r2
    de92:	b280      	uxth	r0, r0
    de94:	4770      	bx	lr
    de96:	2000      	movs	r0, #0
    de98:	4770      	bx	lr
    de9a:	2902      	cmp	r1, #2
    de9c:	d008      	beq.n	deb0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    de9e:	2870      	cmp	r0, #112	; 0x70
    dea0:	d9f9      	bls.n	de96 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    dea2:	3870      	subs	r0, #112	; 0x70
    dea4:	17c1      	asrs	r1, r0, #31
    dea6:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    deaa:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    deae:	4770      	bx	lr
    deb0:	283c      	cmp	r0, #60	; 0x3c
    deb2:	d9f0      	bls.n	de96 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    deb4:	383c      	subs	r0, #60	; 0x3c
    deb6:	17c1      	asrs	r1, r0, #31
    deb8:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    debc:	f3c0 008f 	ubfx	r0, r0, #2, #16
    dec0:	4770      	bx	lr

0000dec2 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    dec2:	6809      	ldr	r1, [r1, #0]
    dec4:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    dec8:	4770      	bx	lr

0000deca <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    deca:	b510      	push	{r4, lr}
    decc:	f640 12c4 	movw	r2, #2500	; 0x9c4
    ded0:	2901      	cmp	r1, #1
    ded2:	d006      	beq.n	dee2 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    ded4:	2902      	cmp	r1, #2
    ded6:	d005      	beq.n	dee4 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    ded8:	f44f 711c 	mov.w	r1, #624	; 0x270
    dedc:	2029      	movs	r0, #41	; 0x29
    dede:	f7f3 f925 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dee2:	b108      	cbz	r0, dee8 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    dee4:	4610      	mov	r0, r2
    dee6:	bd10      	pop	{r4, pc}
    dee8:	f240 40e2 	movw	r0, #1250	; 0x4e2
    deec:	bd10      	pop	{r4, pc}

0000deee <sym_AIEQYZJFZQBQ5LEMJNMQV56TMLIGCBAC63QLHGI>:
    deee:	f880 106e 	strb.w	r1, [r0, #110]	; 0x6e
    def2:	f001 bce0 	b.w	f8b6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>

0000def6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    def6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    defa:	4607      	mov	r7, r0
    defc:	460e      	mov	r6, r1
    defe:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    df02:	f7fc fcd9 	bl	a8b8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    df06:	b198      	cbz	r0, df30 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    df08:	b31e      	cbz	r6, df52 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    df0a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    df0e:	1b40      	subs	r0, r0, r5
    df10:	2300      	movs	r3, #0
    df12:	eb61 0104 	sbc.w	r1, r1, r4
    df16:	461a      	mov	r2, r3
    df18:	1a1b      	subs	r3, r3, r0
    df1a:	418a      	sbcs	r2, r1
    df1c:	da19      	bge.n	df52 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    df1e:	1c42      	adds	r2, r0, #1
    df20:	f171 0100 	sbcs.w	r1, r1, #0
    df24:	db07      	blt.n	df36 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    df26:	f240 11dd 	movw	r1, #477	; 0x1dd
    df2a:	2029      	movs	r0, #41	; 0x29
    df2c:	f7f3 f8fe 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    df30:	f240 11d3 	movw	r1, #467	; 0x1d3
    df34:	e7f9      	b.n	df2a <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    df36:	4430      	add	r0, r6
    df38:	1e40      	subs	r0, r0, #1
    df3a:	fbb0 f1f6 	udiv	r1, r0, r6
    df3e:	fb01 f006 	mul.w	r0, r1, r6
    df42:	1828      	adds	r0, r5, r0
    df44:	f144 0400 	adc.w	r4, r4, #0
    df48:	e9c7 0404 	strd	r0, r4, [r7, #16]
    df4c:	4608      	mov	r0, r1
    df4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    df52:	2000      	movs	r0, #0
    df54:	e7fb      	b.n	df4e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000df56 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    df56:	b530      	push	{r4, r5, lr}
    df58:	4613      	mov	r3, r2
    df5a:	e006      	b.n	df6a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    df5c:	18cc      	adds	r4, r1, r3
    df5e:	1ad5      	subs	r5, r2, r3
    df60:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    df64:	1e5b      	subs	r3, r3, #1
    df66:	5544      	strb	r4, [r0, r5]
    df68:	b2db      	uxtb	r3, r3
    df6a:	2b00      	cmp	r3, #0
    df6c:	d1f6      	bne.n	df5c <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    df6e:	bd30      	pop	{r4, r5, pc}

0000df70 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    df70:	2300      	movs	r3, #0
    df72:	6403      	str	r3, [r0, #64]	; 0x40
    df74:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
    df78:	f240 2371 	movw	r3, #625	; 0x271
    df7c:	435a      	muls	r2, r3
    df7e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    df82:	1e52      	subs	r2, r2, #1
    df84:	fbb2 f1f1 	udiv	r1, r2, r1
    df88:	6441      	str	r1, [r0, #68]	; 0x44
    df8a:	4770      	bx	lr

0000df8c <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    df8c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    df90:	4348      	muls	r0, r1
    df92:	4770      	bx	lr

0000df94 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    df94:	f240 2171 	movw	r1, #625	; 0x271
    df98:	fb10 f001 	smulbb	r0, r0, r1
    df9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dfa0:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    dfa4:	4770      	bx	lr

0000dfa6 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>:
    dfa6:	2100      	movs	r1, #0
    dfa8:	4608      	mov	r0, r1
    dfaa:	f7f4 bf05 	b.w	2db8 <sym_2FM2ZG72OZKCHFYBXBWOPHHKS55XIKIWY7UJDGA>
    dfae:	4401      	add	r1, r0
    dfb0:	2914      	cmp	r1, #20
    dfb2:	dd01      	ble.n	dfb8 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x12>
    dfb4:	2014      	movs	r0, #20
    dfb6:	4770      	bx	lr
    dfb8:	f06f 007e 	mvn.w	r0, #126	; 0x7e
    dfbc:	4281      	cmp	r1, r0
    dfbe:	dbfa      	blt.n	dfb6 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q+0x10>
    dfc0:	b248      	sxtb	r0, r1
    dfc2:	4770      	bx	lr

0000dfc4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    dfc4:	b570      	push	{r4, r5, r6, lr}
    dfc6:	4605      	mov	r5, r0
    dfc8:	ea81 4011 	eor.w	r0, r1, r1, lsr #16
    dfcc:	b286      	uxth	r6, r0
    dfce:	4610      	mov	r0, r2
    dfd0:	7aec      	ldrb	r4, [r5, #11]
    dfd2:	4631      	mov	r1, r6
    dfd4:	f000 f863 	bl	e09e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x52>
    dfd8:	4070      	eors	r0, r6
    dfda:	2125      	movs	r1, #37	; 0x25
    dfdc:	fbb0 f2f1 	udiv	r2, r0, r1
    dfe0:	fb01 0112 	mls	r1, r1, r2, r0
    dfe4:	eb05 02d1 	add.w	r2, r5, r1, lsr #3
    dfe8:	f001 0307 	and.w	r3, r1, #7
    dfec:	7852      	ldrb	r2, [r2, #1]
    dfee:	2601      	movs	r6, #1
    dff0:	409e      	lsls	r6, r3
    dff2:	4232      	tst	r2, r6
    dff4:	d001      	beq.n	dffa <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x36>
    dff6:	4608      	mov	r0, r1
    dff8:	bd70      	pop	{r4, r5, r6, pc}
    dffa:	4344      	muls	r4, r0
    dffc:	0c21      	lsrs	r1, r4, #16
    dffe:	4628      	mov	r0, r5
    e000:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e004:	f7f4 bf42 	b.w	2e8c <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xac>

0000e008 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    e008:	b510      	push	{r4, lr}
    e00a:	4604      	mov	r4, r0
    e00c:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    e010:	b108      	cbz	r0, e016 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    e012:	2825      	cmp	r0, #37	; 0x25
    e014:	d901      	bls.n	e01a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    e016:	2012      	movs	r0, #18
    e018:	bd10      	pop	{r4, pc}
    e01a:	b132      	cbz	r2, e02a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>
    e01c:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
    e020:	b128      	cbz	r0, e02e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x26>
    e022:	2801      	cmp	r0, #1
    e024:	d009      	beq.n	e03a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x32>
    e026:	201f      	movs	r0, #31
    e028:	bd10      	pop	{r4, pc}
    e02a:	2000      	movs	r0, #0
    e02c:	bd10      	pop	{r4, pc}
    e02e:	4620      	mov	r0, r4
    e030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e034:	4611      	mov	r1, r2
    e036:	f7f4 bee1 	b.w	2dfc <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x1c>
    e03a:	8aa2      	ldrh	r2, [r4, #20]
    e03c:	6949      	ldr	r1, [r1, #20]
    e03e:	f104 0025 	add.w	r0, r4, #37	; 0x25
    e042:	f7ff ffbf 	bl	dfc4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    e046:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    e04a:	e7ee      	b.n	e02a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>

0000e04c <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    e04c:	b570      	push	{r4, r5, r6, lr}
    e04e:	4604      	mov	r4, r0
    e050:	1c40      	adds	r0, r0, #1
    e052:	4288      	cmp	r0, r1
    e054:	d004      	beq.n	e060 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
    e056:	6808      	ldr	r0, [r1, #0]
    e058:	f8c4 0001 	str.w	r0, [r4, #1]
    e05c:	7908      	ldrb	r0, [r1, #4]
    e05e:	7160      	strb	r0, [r4, #5]
    e060:	7960      	ldrb	r0, [r4, #5]
    e062:	f000 001f 	and.w	r0, r0, #31
    e066:	7160      	strb	r0, [r4, #5]
    e068:	2000      	movs	r0, #0
    e06a:	72e0      	strb	r0, [r4, #11]
    e06c:	4605      	mov	r5, r0
    e06e:	1966      	adds	r6, r4, r5
    e070:	7870      	ldrb	r0, [r6, #1]
    e072:	f000 faec 	bl	e64e <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    e076:	71b0      	strb	r0, [r6, #6]
    e078:	7ae1      	ldrb	r1, [r4, #11]
    e07a:	1c6d      	adds	r5, r5, #1
    e07c:	4408      	add	r0, r1
    e07e:	b2ed      	uxtb	r5, r5
    e080:	72e0      	strb	r0, [r4, #11]
    e082:	2d05      	cmp	r5, #5
    e084:	d3f3      	bcc.n	e06e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
    e086:	bd70      	pop	{r4, r5, r6, pc}
    e088:	b2c1      	uxtb	r1, r0
    e08a:	fa91 f1a1 	rbit	r1, r1
    e08e:	0a00      	lsrs	r0, r0, #8
    e090:	0e09      	lsrs	r1, r1, #24
    e092:	fa90 f0a0 	rbit	r0, r0
    e096:	0e00      	lsrs	r0, r0, #24
    e098:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    e09c:	4770      	bx	lr
    e09e:	b570      	push	{r4, r5, r6, lr}
    e0a0:	460d      	mov	r5, r1
    e0a2:	4048      	eors	r0, r1
    e0a4:	2400      	movs	r4, #0
    e0a6:	f7ff ffef 	bl	e088 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x3c>
    e0aa:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    e0ae:	1c64      	adds	r4, r4, #1
    e0b0:	4428      	add	r0, r5
    e0b2:	b2e4      	uxtb	r4, r4
    e0b4:	b280      	uxth	r0, r0
    e0b6:	2c03      	cmp	r4, #3
    e0b8:	d3f5      	bcc.n	e0a6 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x5a>
    e0ba:	bd70      	pop	{r4, r5, r6, pc}

0000e0bc <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ>:
    e0bc:	7802      	ldrb	r2, [r0, #0]
    e0be:	f002 020f 	and.w	r2, r2, #15
    e0c2:	2a03      	cmp	r2, #3
    e0c4:	d003      	beq.n	e0ce <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x12>
    e0c6:	2a05      	cmp	r2, #5
    e0c8:	d104      	bne.n	e0d4 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x18>
    e0ca:	f000 b92e 	b.w	e32a <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4>
    e0ce:	7840      	ldrb	r0, [r0, #1]
    e0d0:	280c      	cmp	r0, #12
    e0d2:	d001      	beq.n	e0d8 <sym_33X4NJAF5ERGJDTOD7NIRDMR4KT4JWBGAGRR5WQ+0x1c>
    e0d4:	2000      	movs	r0, #0
    e0d6:	4770      	bx	lr
    e0d8:	2001      	movs	r0, #1
    e0da:	4770      	bx	lr

0000e0dc <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA>:
    e0dc:	b570      	push	{r4, r5, r6, lr}
    e0de:	4614      	mov	r4, r2
    e0e0:	4605      	mov	r5, r0
    e0e2:	2a1f      	cmp	r2, #31
    e0e4:	d903      	bls.n	e0ee <sym_252O2EYK5FIXU63T5SACWK2VO6UFAQRM77ITNFA+0x12>
    e0e6:	21ee      	movs	r1, #238	; 0xee
    e0e8:	202a      	movs	r0, #42	; 0x2a
    e0ea:	f7f3 f81f 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e0ee:	f105 0009 	add.w	r0, r5, #9
    e0f2:	f002 fd81 	bl	10bf8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e0f6:	1da4      	adds	r4, r4, #6
    e0f8:	706c      	strb	r4, [r5, #1]
    e0fa:	bd70      	pop	{r4, r5, r6, pc}

0000e0fc <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    e0fc:	b510      	push	{r4, lr}
    e0fe:	7802      	ldrb	r2, [r0, #0]
    e100:	f001 030f 	and.w	r3, r1, #15
    e104:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    e108:	431a      	orrs	r2, r3
    e10a:	7002      	strb	r2, [r0, #0]
    e10c:	2907      	cmp	r1, #7
    e10e:	d20c      	bcs.n	e12a <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    e110:	e8df f001 	tbb	[pc, r1]
    e114:	06040604 	.word	0x06040604
    e118:	00040804 	.word	0x00040804
    e11c:	2106      	movs	r1, #6
    e11e:	e002      	b.n	e126 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    e120:	210c      	movs	r1, #12
    e122:	e000      	b.n	e126 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    e124:	2122      	movs	r1, #34	; 0x22
    e126:	7041      	strb	r1, [r0, #1]
    e128:	bd10      	pop	{r4, pc}
    e12a:	21a8      	movs	r1, #168	; 0xa8
    e12c:	202a      	movs	r0, #42	; 0x2a
    e12e:	f7f2 fffd 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e132 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    e132:	680a      	ldr	r2, [r1, #0]
    e134:	f840 2f09 	str.w	r2, [r0, #9]!
    e138:	8889      	ldrh	r1, [r1, #4]
    e13a:	8081      	strh	r1, [r0, #4]
    e13c:	4770      	bx	lr

0000e13e <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    e13e:	7802      	ldrb	r2, [r0, #0]
    e140:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    e144:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    e148:	7002      	strb	r2, [r0, #0]
    e14a:	4770      	bx	lr

0000e14c <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    e14c:	680a      	ldr	r2, [r1, #0]
    e14e:	f840 2f03 	str.w	r2, [r0, #3]!
    e152:	8889      	ldrh	r1, [r1, #4]
    e154:	8081      	strh	r1, [r0, #4]
    e156:	4770      	bx	lr

0000e158 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    e158:	7802      	ldrb	r2, [r0, #0]
    e15a:	2340      	movs	r3, #64	; 0x40
    e15c:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    e160:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    e164:	430a      	orrs	r2, r1
    e166:	7002      	strb	r2, [r0, #0]
    e168:	4770      	bx	lr

0000e16a <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI>:
    e16a:	b570      	push	{r4, r5, r6, lr}
    e16c:	4614      	mov	r4, r2
    e16e:	4605      	mov	r5, r0
    e170:	2a1f      	cmp	r2, #31
    e172:	d904      	bls.n	e17e <sym_W6IKRDQNYMHGTRDGPLEMFTUCJYSU6SRYW73T4XI+0x14>
    e174:	f44f 7188 	mov.w	r1, #272	; 0x110
    e178:	202a      	movs	r0, #42	; 0x2a
    e17a:	f7f2 ffd7 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e17e:	f105 0009 	add.w	r0, r5, #9
    e182:	f002 fd39 	bl	10bf8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e186:	1da4      	adds	r4, r4, #6
    e188:	706c      	strb	r4, [r5, #1]
    e18a:	bd70      	pop	{r4, r5, r6, pc}

0000e18c <sym_7VZW6MQYCHJNYQ6F4AFCRRJSPXBVUQDDS4RU32Y>:
    e18c:	6842      	ldr	r2, [r0, #4]
    e18e:	600a      	str	r2, [r1, #0]
    e190:	7a00      	ldrb	r0, [r0, #8]
    e192:	7108      	strb	r0, [r1, #4]
    e194:	4770      	bx	lr

0000e196 <sym_E5LV7NLJGDBOOHT3XI7LZP4SJ6B3AVX5ZM7II3A>:
    e196:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    e19a:	4770      	bx	lr

0000e19c <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A>:
    e19c:	b570      	push	{r4, r5, r6, lr}
    e19e:	f8b0 2007 	ldrh.w	r2, [r0, #7]
    e1a2:	f8b0 4009 	ldrh.w	r4, [r0, #9]
    e1a6:	f830 5f05 	ldrh.w	r5, [r0, #5]!
    e1aa:	f810 3c01 	ldrb.w	r3, [r0, #-1]
    e1ae:	88c0      	ldrh	r0, [r0, #6]
    e1b0:	b131      	cbz	r1, e1c0 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    e1b2:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    e1b6:	d903      	bls.n	e1c0 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x24>
    e1b8:	f640 5107 	movw	r1, #3335	; 0xd07
    e1bc:	428a      	cmp	r2, r1
    e1be:	d90b      	bls.n	e1d8 <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x3c>
    e1c0:	1f91      	subs	r1, r2, #6
    e1c2:	f640 467a 	movw	r6, #3194	; 0xc7a
    e1c6:	42b1      	cmp	r1, r6
    e1c8:	d810      	bhi.n	e1ec <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e1ca:	b17b      	cbz	r3, e1ec <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e1cc:	2b08      	cmp	r3, #8
    e1ce:	d80d      	bhi.n	e1ec <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e1d0:	4293      	cmp	r3, r2
    e1d2:	d20b      	bcs.n	e1ec <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e1d4:	4295      	cmp	r5, r2
    e1d6:	d809      	bhi.n	e1ec <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e1d8:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    e1dc:	d206      	bcs.n	e1ec <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e1de:	f640 4176 	movw	r1, #3190	; 0xc76
    e1e2:	380a      	subs	r0, #10
    e1e4:	4288      	cmp	r0, r1
    e1e6:	d801      	bhi.n	e1ec <sym_V6WVC3IEGFJGJMCL2AM6XT7PQZ2G3RNXA5M3I2A+0x50>
    e1e8:	2001      	movs	r0, #1
    e1ea:	bd70      	pop	{r4, r5, r6, pc}
    e1ec:	2000      	movs	r0, #0
    e1ee:	bd70      	pop	{r4, r5, r6, pc}

0000e1f0 <sym_GII4UQLGDHD6D5DSTGUIOYZXEEJFVPTQQUWUNII>:
    e1f0:	f8b0 0007 	ldrh.w	r0, [r0, #7]
    e1f4:	4770      	bx	lr

0000e1f6 <sym_MD56XYITEHSLIFIRQT26SWOCASBX33AYW4XGGWY>:
    e1f6:	f8b0 0009 	ldrh.w	r0, [r0, #9]
    e1fa:	4770      	bx	lr

0000e1fc <sym_EKDQHRHOWISU7QCQSGE4X3J4VBX22VVETALDGWI>:
    e1fc:	f8b0 000b 	ldrh.w	r0, [r0, #11]
    e200:	4770      	bx	lr

0000e202 <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>:
    e202:	b510      	push	{r4, lr}
    e204:	29fb      	cmp	r1, #251	; 0xfb
    e206:	d904      	bls.n	e212 <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI+0x10>
    e208:	f240 61a1 	movw	r1, #1697	; 0x6a1
    e20c:	202a      	movs	r0, #42	; 0x2a
    e20e:	f7f2 ff8d 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e212:	7041      	strb	r1, [r0, #1]
    e214:	bd10      	pop	{r4, pc}

0000e216 <sym_FIJW4TR7AWR6OLWCHL3HTVQSVWXOS6T6XISXCQQ>:
    e216:	8980      	ldrh	r0, [r0, #12]
    e218:	8008      	strh	r0, [r1, #0]
    e21a:	4770      	bx	lr

0000e21c <sym_NILDTLWW7AYBRN5PYE72ILWSBBVUBN4Y5FF3XQQ>:
    e21c:	f8d0 0016 	ldr.w	r0, [r0, #22]
    e220:	6008      	str	r0, [r1, #0]
    e222:	4770      	bx	lr

0000e224 <sym_7LJR6S4GQKSUMWIUG2FRZAKXFD3RUBQ6FOHJMZQ>:
    e224:	6842      	ldr	r2, [r0, #4]
    e226:	600a      	str	r2, [r1, #0]
    e228:	6880      	ldr	r0, [r0, #8]
    e22a:	6048      	str	r0, [r1, #4]
    e22c:	4770      	bx	lr

0000e22e <sym_3BQBYKVQGWCA6VF5GDIUVXGAPLPPXRSSEFO5TXA>:
    e22e:	f850 2f0e 	ldr.w	r2, [r0, #14]!
    e232:	600a      	str	r2, [r1, #0]
    e234:	6840      	ldr	r0, [r0, #4]
    e236:	6048      	str	r0, [r1, #4]
    e238:	4770      	bx	lr

0000e23a <sym_RGBMWS6T65LAWR3HOVV5354MKQCATDBBY34XWQA>:
    e23a:	6809      	ldr	r1, [r1, #0]
    e23c:	60c1      	str	r1, [r0, #12]
    e23e:	4770      	bx	lr

0000e240 <sym_5WHAN4NH6PZY7VV5KTN53CABJRWXR3RJHHTA7KA>:
    e240:	680a      	ldr	r2, [r1, #0]
    e242:	6042      	str	r2, [r0, #4]
    e244:	6849      	ldr	r1, [r1, #4]
    e246:	6081      	str	r1, [r0, #8]
    e248:	4770      	bx	lr

0000e24a <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>:
    e24a:	7800      	ldrb	r0, [r0, #0]
    e24c:	f000 0003 	and.w	r0, r0, #3
    e250:	4770      	bx	lr

0000e252 <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>:
    e252:	8880      	ldrh	r0, [r0, #4]
    e254:	4770      	bx	lr

0000e256 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>:
    e256:	88c0      	ldrh	r0, [r0, #6]
    e258:	4770      	bx	lr

0000e25a <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>:
    e25a:	8900      	ldrh	r0, [r0, #8]
    e25c:	4770      	bx	lr

0000e25e <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>:
    e25e:	8940      	ldrh	r0, [r0, #10]
    e260:	4770      	bx	lr

0000e262 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>:
    e262:	8901      	ldrh	r1, [r0, #8]
    e264:	291b      	cmp	r1, #27
    e266:	d30c      	bcc.n	e282 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e268:	8941      	ldrh	r1, [r0, #10]
    e26a:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e26e:	4291      	cmp	r1, r2
    e270:	d307      	bcc.n	e282 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e272:	8881      	ldrh	r1, [r0, #4]
    e274:	291b      	cmp	r1, #27
    e276:	d304      	bcc.n	e282 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e278:	88c0      	ldrh	r0, [r0, #6]
    e27a:	4290      	cmp	r0, r2
    e27c:	d301      	bcc.n	e282 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e27e:	2001      	movs	r0, #1
    e280:	4770      	bx	lr
    e282:	2000      	movs	r0, #0
    e284:	4770      	bx	lr

0000e286 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>:
    e286:	7901      	ldrb	r1, [r0, #4]
    e288:	0749      	lsls	r1, r1, #29
    e28a:	d004      	beq.n	e296 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e28c:	7940      	ldrb	r0, [r0, #5]
    e28e:	0740      	lsls	r0, r0, #29
    e290:	d001      	beq.n	e296 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e292:	2001      	movs	r0, #1
    e294:	4770      	bx	lr
    e296:	2000      	movs	r0, #0
    e298:	4770      	bx	lr

0000e29a <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>:
    e29a:	88c0      	ldrh	r0, [r0, #6]
    e29c:	4770      	bx	lr

0000e29e <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ>:
    e29e:	7901      	ldrb	r1, [r0, #4]
    e2a0:	7940      	ldrb	r0, [r0, #5]
    e2a2:	f001 0107 	and.w	r1, r1, #7
    e2a6:	1e4a      	subs	r2, r1, #1
    e2a8:	f000 0007 	and.w	r0, r0, #7
    e2ac:	4011      	ands	r1, r2
    e2ae:	1e42      	subs	r2, r0, #1
    e2b0:	4010      	ands	r0, r2
    e2b2:	4301      	orrs	r1, r0
    e2b4:	d001      	beq.n	e2ba <sym_A6H6572F75Y3NWHNM7XTQ5XKFPHT472D7ZS7PFQ+0x1c>
    e2b6:	2000      	movs	r0, #0
    e2b8:	4770      	bx	lr
    e2ba:	2001      	movs	r0, #1
    e2bc:	4770      	bx	lr

0000e2be <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>:
    e2be:	7900      	ldrb	r0, [r0, #4]
    e2c0:	4770      	bx	lr

0000e2c2 <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>:
    e2c2:	7940      	ldrb	r0, [r0, #5]
    e2c4:	4770      	bx	lr

0000e2c6 <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>:
    e2c6:	7900      	ldrb	r0, [r0, #4]
    e2c8:	4770      	bx	lr

0000e2ca <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>:
    e2ca:	7101      	strb	r1, [r0, #4]
    e2cc:	4770      	bx	lr

0000e2ce <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>:
    e2ce:	7940      	ldrb	r0, [r0, #5]
    e2d0:	4770      	bx	lr

0000e2d2 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>:
    e2d2:	7141      	strb	r1, [r0, #5]
    e2d4:	4770      	bx	lr

0000e2d6 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA>:
    e2d6:	b510      	push	{r4, lr}
    e2d8:	2a1b      	cmp	r2, #27
    e2da:	d904      	bls.n	e2e6 <sym_EHH4TL4V6XWVDGG5OCXTIQQT5C4OFTGXZXSIJAA+0x10>
    e2dc:	f240 417e 	movw	r1, #1150	; 0x47e
    e2e0:	202a      	movs	r0, #42	; 0x2a
    e2e2:	f7f2 ff23 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e2e6:	7042      	strb	r2, [r0, #1]
    e2e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e2ec:	1cc0      	adds	r0, r0, #3
    e2ee:	f002 bc83 	b.w	10bf8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>

0000e2f2 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>:
    e2f2:	7802      	ldrb	r2, [r0, #0]
    e2f4:	f001 0103 	and.w	r1, r1, #3
    e2f8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    e2fc:	430a      	orrs	r2, r1
    e2fe:	7002      	strb	r2, [r0, #0]
    e300:	4770      	bx	lr

0000e302 <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>:
    e302:	7101      	strb	r1, [r0, #4]
    e304:	0a09      	lsrs	r1, r1, #8
    e306:	7141      	strb	r1, [r0, #5]
    e308:	4770      	bx	lr

0000e30a <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>:
    e30a:	7181      	strb	r1, [r0, #6]
    e30c:	0a09      	lsrs	r1, r1, #8
    e30e:	71c1      	strb	r1, [r0, #7]
    e310:	4770      	bx	lr

0000e312 <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>:
    e312:	7201      	strb	r1, [r0, #8]
    e314:	0a09      	lsrs	r1, r1, #8
    e316:	7241      	strb	r1, [r0, #9]
    e318:	4770      	bx	lr

0000e31a <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>:
    e31a:	7281      	strb	r1, [r0, #10]
    e31c:	0a09      	lsrs	r1, r1, #8
    e31e:	72c1      	strb	r1, [r0, #11]
    e320:	4770      	bx	lr

0000e322 <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>:
    e322:	7900      	ldrb	r0, [r0, #4]
    e324:	4770      	bx	lr

0000e326 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>:
    e326:	7900      	ldrb	r0, [r0, #4]
    e328:	4770      	bx	lr
    e32a:	b570      	push	{r4, r5, r6, lr}
    e32c:	f8d0 201f 	ldr.w	r2, [r0, #31]
    e330:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    e334:	f012 0fff 	tst.w	r2, #255	; 0xff
    e338:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    e33c:	d108      	bne.n	e350 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e33e:	f3c2 2407 	ubfx	r4, r2, #8, #8
    e342:	b92c      	cbnz	r4, e350 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e344:	f3c2 4407 	ubfx	r4, r2, #16, #8
    e348:	b914      	cbnz	r4, e350 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e34a:	0e12      	lsrs	r2, r2, #24
    e34c:	d100      	bne.n	e350 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x2a>
    e34e:	b34b      	cbz	r3, e3a4 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e350:	7846      	ldrb	r6, [r0, #1]
    e352:	f8b0 2019 	ldrh.w	r2, [r0, #25]
    e356:	f8b0 401b 	ldrh.w	r4, [r0, #27]
    e35a:	f8b0 5017 	ldrh.w	r5, [r0, #23]
    e35e:	7d83      	ldrb	r3, [r0, #22]
    e360:	2e22      	cmp	r6, #34	; 0x22
    e362:	d11f      	bne.n	e3a4 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e364:	b131      	cbz	r1, e374 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    e366:	f5b2 6f50 	cmp.w	r2, #3328	; 0xd00
    e36a:	d903      	bls.n	e374 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x4e>
    e36c:	f640 5107 	movw	r1, #3335	; 0xd07
    e370:	428a      	cmp	r2, r1
    e372:	d90b      	bls.n	e38c <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x66>
    e374:	1f91      	subs	r1, r2, #6
    e376:	f640 467a 	movw	r6, #3194	; 0xc7a
    e37a:	42b1      	cmp	r1, r6
    e37c:	d812      	bhi.n	e3a4 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e37e:	b18b      	cbz	r3, e3a4 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e380:	2b08      	cmp	r3, #8
    e382:	d80f      	bhi.n	e3a4 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e384:	4293      	cmp	r3, r2
    e386:	d20d      	bcs.n	e3a4 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e388:	4295      	cmp	r5, r2
    e38a:	d80b      	bhi.n	e3a4 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e38c:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
    e390:	d208      	bcs.n	e3a4 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e392:	f8b0 001d 	ldrh.w	r0, [r0, #29]
    e396:	f640 4176 	movw	r1, #3190	; 0xc76
    e39a:	380a      	subs	r0, #10
    e39c:	4288      	cmp	r0, r1
    e39e:	d801      	bhi.n	e3a4 <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI+0x7e>
    e3a0:	2001      	movs	r0, #1
    e3a2:	bd70      	pop	{r4, r5, r6, pc}
    e3a4:	2000      	movs	r0, #0
    e3a6:	bd70      	pop	{r4, r5, r6, pc}

0000e3a8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>:
    e3a8:	6841      	ldr	r1, [r0, #4]
    e3aa:	2200      	movs	r2, #0
    e3ac:	f891 322a 	ldrb.w	r3, [r1, #554]	; 0x22a
    e3b0:	2b00      	cmp	r3, #0
    e3b2:	d004      	beq.n	e3be <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY+0x16>
    e3b4:	f881 222a 	strb.w	r2, [r1, #554]	; 0x22a
    e3b8:	6840      	ldr	r0, [r0, #4]
    e3ba:	f000 be0e 	b.w	efda <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    e3be:	4770      	bx	lr

0000e3c0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    e3c0:	b510      	push	{r4, lr}
    e3c2:	7a01      	ldrb	r1, [r0, #8]
    e3c4:	b119      	cbz	r1, e3ce <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    e3c6:	2901      	cmp	r1, #1
    e3c8:	d006      	beq.n	e3d8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    e3ca:	2000      	movs	r0, #0
    e3cc:	bd10      	pop	{r4, pc}
    e3ce:	88c2      	ldrh	r2, [r0, #6]
    e3d0:	6803      	ldr	r3, [r0, #0]
    e3d2:	8880      	ldrh	r0, [r0, #4]
    e3d4:	2102      	movs	r1, #2
    e3d6:	e003      	b.n	e3e0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    e3d8:	88c2      	ldrh	r2, [r0, #6]
    e3da:	6803      	ldr	r3, [r0, #0]
    e3dc:	8880      	ldrh	r0, [r0, #4]
    e3de:	2101      	movs	r1, #1
    e3e0:	f7f4 fdbe 	bl	2f60 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x14>
    e3e4:	b908      	cbnz	r0, e3ea <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    e3e6:	f7f4 fe0b 	bl	3000 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    e3ea:	2001      	movs	r0, #1
    e3ec:	bd10      	pop	{r4, pc}

0000e3ee <sym_RH6FZQRBS4UKFN4MYJSECW7EJMU5464YS3XX4EQ>:
    e3ee:	2203      	movs	r2, #3
    e3f0:	f000 b806 	b.w	e400 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>

0000e3f4 <sym_43BYC3K4M44JBPOX4EUJM44GYCCY2C3C4SYEF6I>:
    e3f4:	2203      	movs	r2, #3
    e3f6:	f000 b817 	b.w	e428 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>

0000e3fa <sym_OHZGE3PRU72NL3TJSLCEUVROHETUDPWEUAQ7GMA>:
    e3fa:	2204      	movs	r2, #4
    e3fc:	f000 b814 	b.w	e428 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>

0000e400 <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>:
    e400:	b508      	push	{r3, lr}
    e402:	7a03      	ldrb	r3, [r0, #8]
    e404:	f88d 3000 	strb.w	r3, [sp]
    e408:	9b00      	ldr	r3, [sp, #0]
    e40a:	9300      	str	r3, [sp, #0]
    e40c:	f89d 3000 	ldrb.w	r3, [sp]
    e410:	b123      	cbz	r3, e41c <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x1c>
    e412:	f240 21c2 	movw	r1, #706	; 0x2c2
    e416:	2010      	movs	r0, #16
    e418:	f7f2 fe88 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e41c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e420:	f7f4 bf60 	b.w	32e4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x11c>

0000e424 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    e424:	f7f4 bf8c 	b.w	3340 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x178>

0000e428 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>:
    e428:	7a03      	ldrb	r3, [r0, #8]
    e42a:	b082      	sub	sp, #8
    e42c:	f88d 3000 	strb.w	r3, [sp]
    e430:	9b00      	ldr	r3, [sp, #0]
    e432:	9300      	str	r3, [sp, #0]
    e434:	f89d 3000 	ldrb.w	r3, [sp]
    e438:	b113      	cbz	r3, e440 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0x18>
    e43a:	7202      	strb	r2, [r0, #8]
    e43c:	b002      	add	sp, #8
    e43e:	4770      	bx	lr
    e440:	b002      	add	sp, #8
    e442:	f7f4 bf4f 	b.w	32e4 <sym_FHMOSTDS4FAIPN4GDRMMMBPMBOTEQ5DLCM2A23Q+0x11c>
    e446:	2000      	movs	r0, #0
    e448:	7048      	strb	r0, [r1, #1]
    e44a:	2002      	movs	r0, #2
    e44c:	7008      	strb	r0, [r1, #0]
    e44e:	2001      	movs	r0, #1
    e450:	7108      	strb	r0, [r1, #4]
    e452:	4770      	bx	lr

0000e454 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e454:	b510      	push	{r4, lr}
    e456:	888c      	ldrh	r4, [r1, #4]
    e458:	890a      	ldrh	r2, [r1, #8]
    e45a:	884b      	ldrh	r3, [r1, #2]
    e45c:	88c9      	ldrh	r1, [r1, #6]
    e45e:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    e462:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    e466:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    e46a:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    e46e:	bd10      	pop	{r4, pc}

0000e470 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e470:	b570      	push	{r4, r5, r6, lr}
    e472:	4615      	mov	r5, r2
    e474:	460c      	mov	r4, r1
    e476:	f000 f8bf 	bl	e5f8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xb2>
    e47a:	3096      	adds	r0, #150	; 0x96
    e47c:	4428      	add	r0, r5
    e47e:	42a0      	cmp	r0, r4
    e480:	d801      	bhi.n	e486 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e482:	1a20      	subs	r0, r4, r0
    e484:	bd70      	pop	{r4, r5, r6, pc}
    e486:	2000      	movs	r0, #0
    e488:	bd70      	pop	{r4, r5, r6, pc}

0000e48a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e48a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e48e:	4604      	mov	r4, r0
    e490:	f000 f881 	bl	e596 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x50>
    e494:	4680      	mov	r8, r0
    e496:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    e49a:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    e49e:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    e4a0:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    e4a2:	4285      	cmp	r5, r0
    e4a4:	d300      	bcc.n	e4a8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x1e>
    e4a6:	4605      	mov	r5, r0
    e4a8:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    e4ac:	4620      	mov	r0, r4
    e4ae:	f000 f86a 	bl	e586 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x40>
    e4b2:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    e4b6:	2902      	cmp	r1, #2
    e4b8:	d108      	bne.n	e4cc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x42>
    e4ba:	42af      	cmp	r7, r5
    e4bc:	d200      	bcs.n	e4c0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x36>
    e4be:	463d      	mov	r5, r7
    e4c0:	4286      	cmp	r6, r0
    e4c2:	d200      	bcs.n	e4c6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3c>
    e4c4:	4630      	mov	r0, r6
    e4c6:	2100      	movs	r1, #0
    e4c8:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    e4cc:	86a5      	strh	r5, [r4, #52]	; 0x34
    e4ce:	8720      	strh	r0, [r4, #56]	; 0x38
    e4d0:	42bd      	cmp	r5, r7
    e4d2:	d101      	bne.n	e4d8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4e>
    e4d4:	42b0      	cmp	r0, r6
    e4d6:	d001      	beq.n	e4dc <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    e4d8:	2001      	movs	r0, #1
    e4da:	e000      	b.n	e4de <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x54>
    e4dc:	2000      	movs	r0, #0
    e4de:	ea40 0008 	orr.w	r0, r0, r8
    e4e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e4e6 <sym_HKK3TRIGJYF3QRYFDYVZA3GRLMEB7JR5MI4RL7Y>:
    e4e6:	8a40      	ldrh	r0, [r0, #18]
    e4e8:	4770      	bx	lr

0000e4ea <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e4ea:	221b      	movs	r2, #27
    e4ec:	8402      	strh	r2, [r0, #32]
    e4ee:	8382      	strh	r2, [r0, #28]
    e4f0:	82c2      	strh	r2, [r0, #22]
    e4f2:	8282      	strh	r2, [r0, #20]
    e4f4:	8142      	strh	r2, [r0, #10]
    e4f6:	8202      	strh	r2, [r0, #16]
    e4f8:	8102      	strh	r2, [r0, #8]
    e4fa:	8542      	strh	r2, [r0, #42]	; 0x2a
    e4fc:	8582      	strh	r2, [r0, #44]	; 0x2c
    e4fe:	8482      	strh	r2, [r0, #36]	; 0x24
    e500:	2900      	cmp	r1, #0
    e502:	d10a      	bne.n	e51a <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e504:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e508:	8441      	strh	r1, [r0, #34]	; 0x22
    e50a:	83c1      	strh	r1, [r0, #30]
    e50c:	8341      	strh	r1, [r0, #26]
    e50e:	8301      	strh	r1, [r0, #24]
    e510:	81c1      	strh	r1, [r0, #14]
    e512:	8241      	strh	r1, [r0, #18]
    e514:	8181      	strh	r1, [r0, #12]
    e516:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e518:	8601      	strh	r1, [r0, #48]	; 0x30
    e51a:	4770      	bx	lr

0000e51c <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e51c:	6800      	ldr	r0, [r0, #0]
    e51e:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e522:	4290      	cmp	r0, r2
    e524:	d903      	bls.n	e52e <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e526:	1a40      	subs	r0, r0, r1
    e528:	389c      	subs	r0, #156	; 0x9c
    e52a:	0840      	lsrs	r0, r0, #1
    e52c:	4770      	bx	lr
    e52e:	2000      	movs	r0, #0
    e530:	4770      	bx	lr

0000e532 <sym_72KBD3C5B67H6PWOG3S7CCYVGGTJG6L3WNWZOFQ>:
    e532:	6840      	ldr	r0, [r0, #4]
    e534:	4770      	bx	lr

0000e536 <sym_DGN3THKILL676ISUGG6LI5PGTHVDBLTDPNXUCAA>:
    e536:	b570      	push	{r4, r5, r6, lr}
    e538:	460c      	mov	r4, r1
    e53a:	4605      	mov	r5, r0
    e53c:	f000 f85c 	bl	e5f8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xb2>
    e540:	4420      	add	r0, r4
    e542:	6328      	str	r0, [r5, #48]	; 0x30
    e544:	bd70      	pop	{r4, r5, r6, pc}

0000e546 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e546:	b510      	push	{r4, lr}
    e548:	9c02      	ldr	r4, [sp, #8]
    e54a:	8281      	strh	r1, [r0, #20]
    e54c:	82c2      	strh	r2, [r0, #22]
    e54e:	8303      	strh	r3, [r0, #24]
    e550:	8344      	strh	r4, [r0, #26]
    e552:	bd10      	pop	{r4, pc}
    e554:	1d00      	adds	r0, r0, #4
    e556:	b510      	push	{r4, lr}
    e558:	b280      	uxth	r0, r0
    e55a:	2901      	cmp	r1, #1
    e55c:	d006      	beq.n	e56c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x26>
    e55e:	2902      	cmp	r1, #2
    e560:	d007      	beq.n	e572 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x2c>
    e562:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
    e566:	2006      	movs	r0, #6
    e568:	f7f2 fde0 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e56c:	00c0      	lsls	r0, r0, #3
    e56e:	3050      	adds	r0, #80	; 0x50
    e570:	e001      	b.n	e576 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x30>
    e572:	0080      	lsls	r0, r0, #2
    e574:	302c      	adds	r0, #44	; 0x2c
    e576:	b280      	uxth	r0, r0
    e578:	bd10      	pop	{r4, pc}
    e57a:	8c41      	ldrh	r1, [r0, #34]	; 0x22
    e57c:	8b00      	ldrh	r0, [r0, #24]
    e57e:	4281      	cmp	r1, r0
    e580:	d200      	bcs.n	e584 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
    e582:	4608      	mov	r0, r1
    e584:	4770      	bx	lr
    e586:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    e58a:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    e58e:	4281      	cmp	r1, r0
    e590:	d200      	bcs.n	e594 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
    e592:	4608      	mov	r0, r1
    e594:	4770      	bx	lr
    e596:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e59a:	4606      	mov	r6, r0
    e59c:	f8b0 9036 	ldrh.w	r9, [r0, #54]	; 0x36
    e5a0:	f8b0 803a 	ldrh.w	r8, [r0, #58]	; 0x3a
    e5a4:	f8b0 404c 	ldrh.w	r4, [r0, #76]	; 0x4c
    e5a8:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    e5ac:	4284      	cmp	r4, r0
    e5ae:	d300      	bcc.n	e5b2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x6c>
    e5b0:	4604      	mov	r4, r0
    e5b2:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    e5b6:	4605      	mov	r5, r0
    e5b8:	f7ff ffdf 	bl	e57a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
    e5bc:	4607      	mov	r7, r0
    e5be:	4628      	mov	r0, r5
    e5c0:	f7ff ffdb 	bl	e57a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
    e5c4:	816c      	strh	r4, [r5, #10]
    e5c6:	81ef      	strh	r7, [r5, #14]
    e5c8:	4602      	mov	r2, r0
    e5ca:	8fb3      	ldrh	r3, [r6, #60]	; 0x3c
    e5cc:	f896 106b 	ldrb.w	r1, [r6, #107]	; 0x6b
    e5d0:	4628      	mov	r0, r5
    e5d2:	f7ff ff88 	bl	e4e6 <sym_HKK3TRIGJYF3QRYFDYVZA3GRLMEB7JR5MI4RL7Y>
    e5d6:	42a3      	cmp	r3, r4
    e5d8:	d200      	bcs.n	e5dc <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x96>
    e5da:	4623      	mov	r3, r4
    e5dc:	4290      	cmp	r0, r2
    e5de:	d300      	bcc.n	e5e2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x9c>
    e5e0:	4602      	mov	r2, r0
    e5e2:	822b      	strh	r3, [r5, #16]
    e5e4:	826a      	strh	r2, [r5, #18]
    e5e6:	454c      	cmp	r4, r9
    e5e8:	d101      	bne.n	e5ee <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xa8>
    e5ea:	4547      	cmp	r7, r8
    e5ec:	d002      	beq.n	e5f4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xae>
    e5ee:	2001      	movs	r0, #1
    e5f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e5f4:	2000      	movs	r0, #0
    e5f6:	e7fb      	b.n	e5f0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xaa>
    e5f8:	2196      	movs	r1, #150	; 0x96
    e5fa:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    e5fe:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    e602:	f000 b800 	b.w	e606 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xc0>
    e606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e60a:	460d      	mov	r5, r1
    e60c:	4606      	mov	r6, r0
    e60e:	4698      	mov	r8, r3
    e610:	4617      	mov	r7, r2
    e612:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    e614:	4611      	mov	r1, r2
    e616:	f7ff ff9d 	bl	e554 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e61a:	4604      	mov	r4, r0
    e61c:	4639      	mov	r1, r7
    e61e:	4630      	mov	r0, r6
    e620:	f7ff ffb1 	bl	e586 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x40>
    e624:	42a0      	cmp	r0, r4
    e626:	d200      	bcs.n	e62a <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe4>
    e628:	4604      	mov	r4, r0
    e62a:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e62c:	4641      	mov	r1, r8
    e62e:	f7ff ff91 	bl	e554 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e632:	4602      	mov	r2, r0
    e634:	4641      	mov	r1, r8
    e636:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    e63a:	f7ff ff54 	bl	e4e6 <sym_HKK3TRIGJYF3QRYFDYVZA3GRLMEB7JR5MI4RL7Y>
    e63e:	4290      	cmp	r0, r2
    e640:	d300      	bcc.n	e644 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xfe>
    e642:	4610      	mov	r0, r2
    e644:	4420      	add	r0, r4
    e646:	4428      	add	r0, r5
    e648:	1d80      	adds	r0, r0, #6
    e64a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e64e <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    e64e:	f000 0155 	and.w	r1, r0, #85	; 0x55
    e652:	2255      	movs	r2, #85	; 0x55
    e654:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    e658:	4408      	add	r0, r1
    e65a:	f000 0133 	and.w	r1, r0, #51	; 0x33
    e65e:	2233      	movs	r2, #51	; 0x33
    e660:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    e664:	4408      	add	r0, r1
    e666:	f000 010f 	and.w	r1, r0, #15
    e66a:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    e66e:	4770      	bx	lr

0000e670 <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>:
    e670:	6840      	ldr	r0, [r0, #4]
    e672:	2100      	movs	r1, #0
    e674:	f820 1fd8 	strh.w	r1, [r0, #216]!
    e678:	7881      	ldrb	r1, [r0, #2]
    e67a:	1c49      	adds	r1, r1, #1
    e67c:	7081      	strb	r1, [r0, #2]
    e67e:	4770      	bx	lr

0000e680 <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>:
    e680:	b510      	push	{r4, lr}
    e682:	6840      	ldr	r0, [r0, #4]
    e684:	f810 1fda 	ldrb.w	r1, [r0, #218]!
    e688:	1e49      	subs	r1, r1, #1
    e68a:	b249      	sxtb	r1, r1
    e68c:	7001      	strb	r1, [r0, #0]
    e68e:	2900      	cmp	r1, #0
    e690:	da03      	bge.n	e69a <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA+0x1a>
    e692:	2135      	movs	r1, #53	; 0x35
    e694:	204a      	movs	r0, #74	; 0x4a
    e696:	f7f2 fd49 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e69a:	bd10      	pop	{r4, pc}

0000e69c <sym_2UM6LVQLLMOP7WZDJLNUGNNDXOSOGAIT6WB627Q>:
    e69c:	6840      	ldr	r0, [r0, #4]
    e69e:	f880 1123 	strb.w	r1, [r0, #291]	; 0x123
    e6a2:	f880 2122 	strb.w	r2, [r0, #290]	; 0x122
    e6a6:	4770      	bx	lr

0000e6a8 <sym_GRWJSKDQ3POPWSRNDRQTNNGA4TE3WRBKWXT5JAQ>:
    e6a8:	6840      	ldr	r0, [r0, #4]
    e6aa:	2100      	movs	r1, #0
    e6ac:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    e6b0:	f880 10d6 	strb.w	r1, [r0, #214]	; 0xd6
    e6b4:	f8a0 10d2 	strh.w	r1, [r0, #210]	; 0xd2
    e6b8:	4770      	bx	lr

0000e6ba <sym_KB52DURVZMKV23HAOWR2F7RBPDMWZDB7UEFUF5Y>:
    e6ba:	280b      	cmp	r0, #11
    e6bc:	d019      	beq.n	e6f2 <sym_KB52DURVZMKV23HAOWR2F7RBPDMWZDB7UEFUF5Y+0x38>
    e6be:	280c      	cmp	r0, #12
    e6c0:	d017      	beq.n	e6f2 <sym_KB52DURVZMKV23HAOWR2F7RBPDMWZDB7UEFUF5Y+0x38>
    e6c2:	280a      	cmp	r0, #10
    e6c4:	d015      	beq.n	e6f2 <sym_KB52DURVZMKV23HAOWR2F7RBPDMWZDB7UEFUF5Y+0x38>
    e6c6:	280d      	cmp	r0, #13
    e6c8:	d013      	beq.n	e6f2 <sym_KB52DURVZMKV23HAOWR2F7RBPDMWZDB7UEFUF5Y+0x38>
    e6ca:	280e      	cmp	r0, #14
    e6cc:	d011      	beq.n	e6f2 <sym_KB52DURVZMKV23HAOWR2F7RBPDMWZDB7UEFUF5Y+0x38>
    e6ce:	2820      	cmp	r0, #32
    e6d0:	d00f      	beq.n	e6f2 <sym_KB52DURVZMKV23HAOWR2F7RBPDMWZDB7UEFUF5Y+0x38>
    e6d2:	2821      	cmp	r0, #33	; 0x21
    e6d4:	d00d      	beq.n	e6f2 <sym_KB52DURVZMKV23HAOWR2F7RBPDMWZDB7UEFUF5Y+0x38>
    e6d6:	2822      	cmp	r0, #34	; 0x22
    e6d8:	d00b      	beq.n	e6f2 <sym_KB52DURVZMKV23HAOWR2F7RBPDMWZDB7UEFUF5Y+0x38>
    e6da:	2823      	cmp	r0, #35	; 0x23
    e6dc:	d009      	beq.n	e6f2 <sym_KB52DURVZMKV23HAOWR2F7RBPDMWZDB7UEFUF5Y+0x38>
    e6de:	2824      	cmp	r0, #36	; 0x24
    e6e0:	d007      	beq.n	e6f2 <sym_KB52DURVZMKV23HAOWR2F7RBPDMWZDB7UEFUF5Y+0x38>
    e6e2:	2825      	cmp	r0, #37	; 0x25
    e6e4:	d005      	beq.n	e6f2 <sym_KB52DURVZMKV23HAOWR2F7RBPDMWZDB7UEFUF5Y+0x38>
    e6e6:	2826      	cmp	r0, #38	; 0x26
    e6e8:	d003      	beq.n	e6f2 <sym_KB52DURVZMKV23HAOWR2F7RBPDMWZDB7UEFUF5Y+0x38>
    e6ea:	282e      	cmp	r0, #46	; 0x2e
    e6ec:	d001      	beq.n	e6f2 <sym_KB52DURVZMKV23HAOWR2F7RBPDMWZDB7UEFUF5Y+0x38>
    e6ee:	2000      	movs	r0, #0
    e6f0:	4770      	bx	lr
    e6f2:	2001      	movs	r0, #1
    e6f4:	4770      	bx	lr

0000e6f6 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI>:
    e6f6:	b510      	push	{r4, lr}
    e6f8:	f1a0 0234 	sub.w	r2, r0, #52	; 0x34
    e6fc:	f830 4cb4 	ldrh.w	r4, [r0, #-180]
    e700:	2000      	movs	r0, #0
    e702:	7048      	strb	r0, [r1, #1]
    e704:	2308      	movs	r3, #8
    e706:	700b      	strb	r3, [r1, #0]
    e708:	7108      	strb	r0, [r1, #4]
    e70a:	f8a1 4005 	strh.w	r4, [r1, #5]
    e70e:	f892 003d 	ldrb.w	r0, [r2, #61]	; 0x3d
    e712:	71c8      	strb	r0, [r1, #7]
    e714:	4620      	mov	r0, r4
    e716:	f7f3 f9a5 	bl	1a64 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e71a:	f7fe fe99 	bl	d450 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    e71e:	b140      	cbz	r0, e732 <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI+0x3c>
    e720:	4620      	mov	r0, r4
    e722:	f7ff fa99 	bl	dc58 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    e726:	4620      	mov	r0, r4
    e728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e72c:	2100      	movs	r1, #0
    e72e:	f7f3 b8a7 	b.w	1880 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e732:	2173      	movs	r1, #115	; 0x73
    e734:	2063      	movs	r0, #99	; 0x63
    e736:	f7f2 fcf9 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e73a <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA>:
    e73a:	b570      	push	{r4, r5, r6, lr}
    e73c:	6844      	ldr	r4, [r0, #4]
    e73e:	460d      	mov	r5, r1
    e740:	7803      	ldrb	r3, [r0, #0]
    e742:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
    e746:	3480      	adds	r4, #128	; 0x80
    e748:	2101      	movs	r1, #1
    e74a:	4620      	mov	r0, r4
    e74c:	f7ff fb31 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e750:	b108      	cbz	r0, e756 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA+0x1c>
    e752:	2000      	movs	r0, #0
    e754:	bd70      	pop	{r4, r5, r6, pc}
    e756:	4628      	mov	r0, r5
    e758:	f7ff fde3 	bl	e322 <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>
    e75c:	f884 0020 	strb.w	r0, [r4, #32]
    e760:	2006      	movs	r0, #6
    e762:	77e0      	strb	r0, [r4, #31]
    e764:	e7f5      	b.n	e752 <sym_NT2IJ3T3KMFT6N2I2OJU2HPSQ63J6FQHEAYOFIA+0x18>

0000e766 <sym_MWD4AC6ISIKEYDTZF7KXOTJOBUPKKWWLNRGAYAA>:
    e766:	b510      	push	{r4, lr}
    e768:	6844      	ldr	r4, [r0, #4]
    e76a:	7803      	ldrb	r3, [r0, #0]
    e76c:	2101      	movs	r1, #1
    e76e:	f894 209f 	ldrb.w	r2, [r4, #159]	; 0x9f
    e772:	3480      	adds	r4, #128	; 0x80
    e774:	4620      	mov	r0, r4
    e776:	f7ff fb1c 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e77a:	2800      	cmp	r0, #0
    e77c:	d101      	bne.n	e782 <sym_MWD4AC6ISIKEYDTZF7KXOTJOBUPKKWWLNRGAYAA+0x1c>
    e77e:	2007      	movs	r0, #7
    e780:	77e0      	strb	r0, [r4, #31]
    e782:	bd10      	pop	{r4, pc}

0000e784 <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y>:
    e784:	2200      	movs	r2, #0
    e786:	704a      	strb	r2, [r1, #1]
    e788:	2306      	movs	r3, #6
    e78a:	700b      	strb	r3, [r1, #0]
    e78c:	f100 030a 	add.w	r3, r0, #10
    e790:	f5a0 70df 	sub.w	r0, r0, #446	; 0x1be
    e794:	84c2      	strh	r2, [r0, #38]	; 0x26
    e796:	6818      	ldr	r0, [r3, #0]
    e798:	6048      	str	r0, [r1, #4]
    e79a:	6858      	ldr	r0, [r3, #4]
    e79c:	6088      	str	r0, [r1, #8]
    e79e:	8918      	ldrh	r0, [r3, #8]
    e7a0:	8188      	strh	r0, [r1, #12]
    e7a2:	710a      	strb	r2, [r1, #4]
    e7a4:	4770      	bx	lr

0000e7a6 <sym_YAZXXBE3UO3G4AM6TR2NFBXVHOGUGHIF6JXVVLI>:
    e7a6:	b510      	push	{r4, lr}
    e7a8:	6844      	ldr	r4, [r0, #4]
    e7aa:	7803      	ldrb	r3, [r0, #0]
    e7ac:	2100      	movs	r1, #0
    e7ae:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    e7b2:	3480      	adds	r4, #128	; 0x80
    e7b4:	4620      	mov	r0, r4
    e7b6:	f7ff fafc 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e7ba:	b110      	cbz	r0, e7c2 <sym_YAZXXBE3UO3G4AM6TR2NFBXVHOGUGHIF6JXVVLI+0x1c>
    e7bc:	201d      	movs	r0, #29
    e7be:	7760      	strb	r0, [r4, #29]
    e7c0:	bd10      	pop	{r4, pc}
    e7c2:	2122      	movs	r1, #34	; 0x22
    e7c4:	2045      	movs	r0, #69	; 0x45
    e7c6:	f7f2 fcb1 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e7ca <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA>:
    e7ca:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e7ce:	4606      	mov	r6, r0
    e7d0:	7803      	ldrb	r3, [r0, #0]
    e7d2:	6840      	ldr	r0, [r0, #4]
    e7d4:	468b      	mov	fp, r1
    e7d6:	f100 0480 	add.w	r4, r0, #128	; 0x80
    e7da:	4605      	mov	r5, r0
    e7dc:	2700      	movs	r7, #0
    e7de:	7f62      	ldrb	r2, [r4, #29]
    e7e0:	210a      	movs	r1, #10
    e7e2:	4620      	mov	r0, r4
    e7e4:	f7ff fae5 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e7e8:	b358      	cbz	r0, e842 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x78>
    e7ea:	4658      	mov	r0, fp
    e7ec:	f7ff fd39 	bl	e262 <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    e7f0:	b1f0      	cbz	r0, e830 <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x66>
    e7f2:	4658      	mov	r0, fp
    e7f4:	f7ff fd2f 	bl	e256 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    e7f8:	4682      	mov	sl, r0
    e7fa:	4658      	mov	r0, fp
    e7fc:	f7ff fd2f 	bl	e25e <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    e800:	4681      	mov	r9, r0
    e802:	4658      	mov	r0, fp
    e804:	f7ff fd25 	bl	e252 <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    e808:	4680      	mov	r8, r0
    e80a:	4658      	mov	r0, fp
    e80c:	f7ff fd25 	bl	e25a <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    e810:	4601      	mov	r1, r0
    e812:	464b      	mov	r3, r9
    e814:	4642      	mov	r2, r8
    e816:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    e81a:	f8cd a000 	str.w	sl, [sp]
    e81e:	f7ff fe92 	bl	e546 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    e822:	4628      	mov	r0, r5
    e824:	f7ff fe31 	bl	e48a <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    e828:	2105      	movs	r1, #5
    e82a:	6870      	ldr	r0, [r6, #4]
    e82c:	f7f6 f97a 	bl	4b24 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    e830:	f884 7056 	strb.w	r7, [r4, #86]	; 0x56
    e834:	7767      	strb	r7, [r4, #29]
    e836:	4630      	mov	r0, r6
    e838:	f000 f805 	bl	e846 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>
    e83c:	2000      	movs	r0, #0
    e83e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e842:	2001      	movs	r0, #1
    e844:	e7fb      	b.n	e83e <sym_L25WURT3DTWGSITXNUG75XVVQF2UVCFLN5ZBQUA+0x74>

0000e846 <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA>:
    e846:	6841      	ldr	r1, [r0, #4]
    e848:	f501 72a5 	add.w	r2, r1, #330	; 0x14a
    e84c:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    e850:	2801      	cmp	r0, #1
    e852:	d004      	beq.n	e85e <sym_EG23RLBLSE5G7YOHNAAGVAN2JHECRIID2FXGTWA+0x18>
    e854:	f831 0b2c 	ldrh.w	r0, [r1], #44
    e858:	3218      	adds	r2, #24
    e85a:	f7f4 bd87 	b.w	336c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    e85e:	2002      	movs	r0, #2
    e860:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    e864:	4770      	bx	lr

0000e866 <sym_2TCPCDAUQ3FXZYG56Z6ZP7VCFNUJTBV3EZJYPGY>:
    e866:	2200      	movs	r2, #0
    e868:	704a      	strb	r2, [r1, #1]
    e86a:	2209      	movs	r2, #9
    e86c:	700a      	strb	r2, [r1, #0]
    e86e:	f100 020a 	add.w	r2, r0, #10
    e872:	7a83      	ldrb	r3, [r0, #10]
    e874:	f2a0 200a 	subw	r0, r0, #522	; 0x20a
    e878:	710b      	strb	r3, [r1, #4]
    e87a:	8800      	ldrh	r0, [r0, #0]
    e87c:	80c8      	strh	r0, [r1, #6]
    e87e:	7910      	ldrb	r0, [r2, #4]
    e880:	7208      	strb	r0, [r1, #8]
    e882:	4770      	bx	lr

0000e884 <sym_S6U6ANENQP6QL5TLITNXPOYFSB26Q5AFTW32CXI>:
    e884:	2200      	movs	r2, #0
    e886:	704a      	strb	r2, [r1, #1]
    e888:	220a      	movs	r2, #10
    e88a:	700a      	strb	r2, [r1, #0]
    e88c:	7a82      	ldrb	r2, [r0, #10]
    e88e:	f2a0 200a 	subw	r0, r0, #522	; 0x20a
    e892:	710a      	strb	r2, [r1, #4]
    e894:	8800      	ldrh	r0, [r0, #0]
    e896:	80c8      	strh	r0, [r1, #6]
    e898:	4770      	bx	lr

0000e89a <sym_P3OAHUDLNMEJKO66PKADYJ5KBQTQCDBZBHL5ZUY>:
    e89a:	2200      	movs	r2, #0
    e89c:	704a      	strb	r2, [r1, #1]
    e89e:	2207      	movs	r2, #7
    e8a0:	700a      	strb	r2, [r1, #0]
    e8a2:	f5a0 7237 	sub.w	r2, r0, #732	; 0x2dc
    e8a6:	8812      	ldrh	r2, [r2, #0]
    e8a8:	808a      	strh	r2, [r1, #4]
    e8aa:	68c2      	ldr	r2, [r0, #12]
    e8ac:	f8c1 2006 	str.w	r2, [r1, #6]
    e8b0:	6902      	ldr	r2, [r0, #16]
    e8b2:	f8c1 200a 	str.w	r2, [r1, #10]
    e8b6:	8a80      	ldrh	r0, [r0, #20]
    e8b8:	81c8      	strh	r0, [r1, #14]
    e8ba:	4770      	bx	lr
    e8bc:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    e8c0:	f001 0307 	and.w	r3, r1, #7
    e8c4:	7802      	ldrb	r2, [r0, #0]
    e8c6:	2101      	movs	r1, #1
    e8c8:	4099      	lsls	r1, r3
    e8ca:	430a      	orrs	r2, r1
    e8cc:	7002      	strb	r2, [r0, #0]
    e8ce:	4770      	bx	lr

0000e8d0 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>:
    e8d0:	b510      	push	{r4, lr}
    e8d2:	6844      	ldr	r4, [r0, #4]
    e8d4:	7803      	ldrb	r3, [r0, #0]
    e8d6:	2100      	movs	r1, #0
    e8d8:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    e8dc:	3480      	adds	r4, #128	; 0x80
    e8de:	4620      	mov	r0, r4
    e8e0:	f7ff fa67 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e8e4:	b110      	cbz	r0, e8ec <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY+0x1c>
    e8e6:	2004      	movs	r0, #4
    e8e8:	7760      	strb	r0, [r4, #29]
    e8ea:	bd10      	pop	{r4, pc}
    e8ec:	21ab      	movs	r1, #171	; 0xab
    e8ee:	201c      	movs	r0, #28
    e8f0:	f7f2 fc1c 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e8f4 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>:
    e8f4:	b510      	push	{r4, lr}
    e8f6:	6841      	ldr	r1, [r0, #4]
    e8f8:	f891 208c 	ldrb.w	r2, [r1, #140]	; 0x8c
    e8fc:	07d2      	lsls	r2, r2, #31
    e8fe:	d00b      	beq.n	e918 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x24>
    e900:	f811 2fda 	ldrb.w	r2, [r1, #218]!
    e904:	1e52      	subs	r2, r2, #1
    e906:	b252      	sxtb	r2, r2
    e908:	700a      	strb	r2, [r1, #0]
    e90a:	6840      	ldr	r0, [r0, #4]
    e90c:	2a00      	cmp	r2, #0
    e90e:	da05      	bge.n	e91c <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x28>
    e910:	21ba      	movs	r1, #186	; 0xba
    e912:	201c      	movs	r0, #28
    e914:	f7f2 fc0a 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e918:	21b8      	movs	r1, #184	; 0xb8
    e91a:	e7fa      	b.n	e912 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x1e>
    e91c:	f850 1f8c 	ldr.w	r1, [r0, #140]!
    e920:	f021 0101 	bic.w	r1, r1, #1
    e924:	6001      	str	r1, [r0, #0]
    e926:	bd10      	pop	{r4, pc}
    e928:	2200      	movs	r2, #0
    e92a:	704a      	strb	r2, [r1, #1]
    e92c:	2205      	movs	r2, #5
    e92e:	700a      	strb	r2, [r1, #0]
    e930:	f850 2f09 	ldr.w	r2, [r0, #9]!
    e934:	604a      	str	r2, [r1, #4]
    e936:	6842      	ldr	r2, [r0, #4]
    e938:	608a      	str	r2, [r1, #8]
    e93a:	8902      	ldrh	r2, [r0, #8]
    e93c:	818a      	strh	r2, [r1, #12]
    e93e:	7a80      	ldrb	r0, [r0, #10]
    e940:	7388      	strb	r0, [r1, #14]
    e942:	4770      	bx	lr

0000e944 <sym_NK4HRRKGX3ST3ARVTU6HUEXLOWZFFBMCIDNT3EI>:
    e944:	2200      	movs	r2, #0
    e946:	704a      	strb	r2, [r1, #1]
    e948:	220c      	movs	r2, #12
    e94a:	f5a0 70ac 	sub.w	r0, r0, #344	; 0x158
    e94e:	700a      	strb	r2, [r1, #0]
    e950:	8800      	ldrh	r0, [r0, #0]
    e952:	8088      	strh	r0, [r1, #4]
    e954:	4770      	bx	lr

0000e956 <sym_P2OZB7UAJZNJ47VR5DS7V33BAD5DESWDHJYKOZA>:
    e956:	b510      	push	{r4, lr}
    e958:	6844      	ldr	r4, [r0, #4]
    e95a:	f894 108c 	ldrb.w	r1, [r4, #140]	; 0x8c
    e95e:	3480      	adds	r4, #128	; 0x80
    e960:	f011 0f04 	tst.w	r1, #4
    e964:	d001      	beq.n	e96a <sym_P2OZB7UAJZNJ47VR5DS7V33BAD5DESWDHJYKOZA+0x14>
    e966:	2001      	movs	r0, #1
    e968:	bd10      	pop	{r4, pc}
    e96a:	f7ff fe81 	bl	e670 <sym_WN24RDMSAOQ4REDS6M5SAD27A5BMKW36N3VHGXI>
    e96e:	68e0      	ldr	r0, [r4, #12]
    e970:	f040 0004 	orr.w	r0, r0, #4
    e974:	60e0      	str	r0, [r4, #12]
    e976:	2000      	movs	r0, #0
    e978:	bd10      	pop	{r4, pc}

0000e97a <sym_BR7VCSB75RGRQ7O7PYOVLMHXKJKUMK6XH3GVGZA>:
    e97a:	b510      	push	{r4, lr}
    e97c:	6844      	ldr	r4, [r0, #4]
    e97e:	7803      	ldrb	r3, [r0, #0]
    e980:	2100      	movs	r1, #0
    e982:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    e986:	3480      	adds	r4, #128	; 0x80
    e988:	4620      	mov	r0, r4
    e98a:	f7ff fa12 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e98e:	b110      	cbz	r0, e996 <sym_BR7VCSB75RGRQ7O7PYOVLMHXKJKUMK6XH3GVGZA+0x1c>
    e990:	200f      	movs	r0, #15
    e992:	7760      	strb	r0, [r4, #29]
    e994:	bd10      	pop	{r4, pc}
    e996:	216e      	movs	r1, #110	; 0x6e
    e998:	204b      	movs	r0, #75	; 0x4b
    e99a:	f7f2 fbc7 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e99e <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ>:
    e99e:	b510      	push	{r4, lr}
    e9a0:	6844      	ldr	r4, [r0, #4]
    e9a2:	7803      	ldrb	r3, [r0, #0]
    e9a4:	2109      	movs	r1, #9
    e9a6:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
    e9aa:	3480      	adds	r4, #128	; 0x80
    e9ac:	4620      	mov	r0, r4
    e9ae:	f7ff fa00 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e9b2:	2800      	cmp	r0, #0
    e9b4:	d005      	beq.n	e9c2 <sym_M65PCSZAPVYR7V5YEMYJW264OYLXMV6F2CRGMXQ+0x24>
    e9b6:	2000      	movs	r0, #0
    e9b8:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
    e9bc:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    e9c0:	7760      	strb	r0, [r4, #29]
    e9c2:	bd10      	pop	{r4, pc}

0000e9c4 <sym_E2LE5OMX5VGHQ6BJ4G7CNEBI3KUUYONP2PS2EJQ>:
    e9c4:	6841      	ldr	r1, [r0, #4]
    e9c6:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    e9ca:	f022 0204 	bic.w	r2, r2, #4
    e9ce:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    e9d2:	f7ff be55 	b.w	e680 <sym_5ANWEAIBKDLEVCFMBX2VFT7WI2MWAIHK5BAGBTA>

0000e9d6 <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A>:
    e9d6:	b510      	push	{r4, lr}
    e9d8:	2300      	movs	r3, #0
    e9da:	704b      	strb	r3, [r1, #1]
    e9dc:	2401      	movs	r4, #1
    e9de:	700c      	strb	r4, [r1, #0]
    e9e0:	f100 0209 	add.w	r2, r0, #9
    e9e4:	710b      	strb	r3, [r1, #4]
    e9e6:	f830 0cde 	ldrh.w	r0, [r0, #-222]
    e9ea:	f8a1 0005 	strh.w	r0, [r1, #5]
    e9ee:	f812 0b01 	ldrb.w	r0, [r2], #1
    e9f2:	71c8      	strb	r0, [r1, #7]
    e9f4:	8810      	ldrh	r0, [r2, #0]
    e9f6:	8108      	strh	r0, [r1, #8]
    e9f8:	8850      	ldrh	r0, [r2, #2]
    e9fa:	8148      	strh	r0, [r1, #10]
    e9fc:	bd10      	pop	{r4, pc}

0000e9fe <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>:
    e9fe:	b570      	push	{r4, r5, r6, lr}
    ea00:	7803      	ldrb	r3, [r0, #0]
    ea02:	6840      	ldr	r0, [r0, #4]
    ea04:	2500      	movs	r5, #0
    ea06:	f100 0480 	add.w	r4, r0, #128	; 0x80
    ea0a:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
    ea0e:	f500 7098 	add.w	r0, r0, #304	; 0x130
    ea12:	0789      	lsls	r1, r1, #30
    ea14:	d40e      	bmi.n	ea34 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x36>
    ea16:	7f62      	ldrb	r2, [r4, #29]
    ea18:	2100      	movs	r1, #0
    ea1a:	4620      	mov	r0, r4
    ea1c:	f7ff f9c9 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ea20:	b130      	cbz	r0, ea30 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x32>
    ea22:	2001      	movs	r0, #1
    ea24:	7760      	strb	r0, [r4, #29]
    ea26:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    ea2a:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
    ea2e:	bd70      	pop	{r4, r5, r6, pc}
    ea30:	216e      	movs	r1, #110	; 0x6e
    ea32:	e00b      	b.n	ea4c <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x4e>
    ea34:	7b21      	ldrb	r1, [r4, #12]
    ea36:	0789      	lsls	r1, r1, #30
    ea38:	d50f      	bpl.n	ea5a <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x5c>
    ea3a:	f894 105a 	ldrb.w	r1, [r4, #90]	; 0x5a
    ea3e:	1e49      	subs	r1, r1, #1
    ea40:	b249      	sxtb	r1, r1
    ea42:	f884 105a 	strb.w	r1, [r4, #90]	; 0x5a
    ea46:	2900      	cmp	r1, #0
    ea48:	da03      	bge.n	ea52 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x54>
    ea4a:	2180      	movs	r1, #128	; 0x80
    ea4c:	2040      	movs	r0, #64	; 0x40
    ea4e:	f7f2 fb6d 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea52:	68e1      	ldr	r1, [r4, #12]
    ea54:	f021 0102 	bic.w	r1, r1, #2
    ea58:	60e1      	str	r1, [r4, #12]
    ea5a:	7485      	strb	r5, [r0, #18]
    ea5c:	bd70      	pop	{r4, r5, r6, pc}
    ea5e:	2200      	movs	r2, #0
    ea60:	704a      	strb	r2, [r1, #1]
    ea62:	2217      	movs	r2, #23
    ea64:	700a      	strb	r2, [r1, #0]
    ea66:	f8d0 000a 	ldr.w	r0, [r0, #10]
    ea6a:	6048      	str	r0, [r1, #4]
    ea6c:	4770      	bx	lr
    ea6e:	b510      	push	{r4, lr}
    ea70:	4604      	mov	r4, r0
    ea72:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    ea76:	e9d4 1000 	ldrd	r1, r0, [r4]
    ea7a:	4050      	eors	r0, r2
    ea7c:	ea70 0101 	orns	r1, r0, r1
    ea80:	d008      	beq.n	ea94 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x96>
    ea82:	f001 ff7b 	bl	1097c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    ea86:	e9d4 2300 	ldrd	r2, r3, [r4]
    ea8a:	1a80      	subs	r0, r0, r2
    ea8c:	4199      	sbcs	r1, r3
    ea8e:	d301      	bcc.n	ea94 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x96>
    ea90:	2001      	movs	r0, #1
    ea92:	bd10      	pop	{r4, pc}
    ea94:	2000      	movs	r0, #0
    ea96:	bd10      	pop	{r4, pc}

0000ea98 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA>:
    ea98:	b508      	push	{r3, lr}
    ea9a:	f000 f804 	bl	eaa6 <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0xe>
    ea9e:	466a      	mov	r2, sp
    eaa0:	f7f4 ffca 	bl	3a38 <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ+0xc>
    eaa4:	bd08      	pop	{r3, pc}
    eaa6:	b530      	push	{r4, r5, lr}
    eaa8:	784c      	ldrb	r4, [r1, #1]
    eaaa:	4603      	mov	r3, r0
    eaac:	7808      	ldrb	r0, [r1, #0]
    eaae:	788d      	ldrb	r5, [r1, #2]
    eab0:	0e22      	lsrs	r2, r4, #24
    eab2:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    eab6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    eaba:	ea42 4215 	orr.w	r2, r2, r5, lsr #16
    eabe:	78cd      	ldrb	r5, [r1, #3]
    eac0:	790c      	ldrb	r4, [r1, #4]
    eac2:	ea42 2215 	orr.w	r2, r2, r5, lsr #8
    eac6:	4322      	orrs	r2, r4
    eac8:	7949      	ldrb	r1, [r1, #5]
    eaca:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
    eace:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ead2:	4611      	mov	r1, r2
    ead4:	2b01      	cmp	r3, #1
    ead6:	d101      	bne.n	eadc <sym_FZRZ4CL3JR4VYYKFPYJ3VMCNBL7BVDZZP4POIWA+0x44>
    ead8:	f442 3180 	orr.w	r1, r2, #65536	; 0x10000
    eadc:	bd30      	pop	{r4, r5, pc}

0000eade <sym_EQ3I7ZZBTEWAJZC2TH7LIOBRZMKEZRCLT4UWSSQ>:
    eade:	b570      	push	{r4, r5, r6, lr}
    eae0:	460e      	mov	r6, r1
    eae2:	b08c      	sub	sp, #48	; 0x30
    eae4:	4614      	mov	r4, r2
    eae6:	4601      	mov	r1, r0
    eae8:	461d      	mov	r5, r3
    eaea:	2210      	movs	r2, #16
    eaec:	4668      	mov	r0, sp
    eaee:	f7ff fa32 	bl	df56 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    eaf2:	2210      	movs	r2, #16
    eaf4:	4631      	mov	r1, r6
    eaf6:	a804      	add	r0, sp, #16
    eaf8:	f7ff fa2d 	bl	df56 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    eafc:	4668      	mov	r0, sp
    eafe:	f7ff f8a1 	bl	dc44 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    eb02:	a908      	add	r1, sp, #32
    eb04:	f04f 0210 	mov.w	r2, #16
    eb08:	4628      	mov	r0, r5
    eb0a:	b114      	cbz	r4, eb12 <sym_EQ3I7ZZBTEWAJZC2TH7LIOBRZMKEZRCLT4UWSSQ+0x34>
    eb0c:	f7ff fa23 	bl	df56 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    eb10:	e001      	b.n	eb16 <sym_EQ3I7ZZBTEWAJZC2TH7LIOBRZMKEZRCLT4UWSSQ+0x38>
    eb12:	f002 f871 	bl	10bf8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    eb16:	2230      	movs	r2, #48	; 0x30
    eb18:	2100      	movs	r1, #0
    eb1a:	4668      	mov	r0, sp
    eb1c:	f002 f8e6 	bl	10cec <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    eb20:	b00c      	add	sp, #48	; 0x30
    eb22:	bd70      	pop	{r4, r5, r6, pc}
    eb24:	2802      	cmp	r0, #2
    eb26:	d003      	beq.n	eb30 <sym_EQ3I7ZZBTEWAJZC2TH7LIOBRZMKEZRCLT4UWSSQ+0x52>
    eb28:	2803      	cmp	r0, #3
    eb2a:	d001      	beq.n	eb30 <sym_EQ3I7ZZBTEWAJZC2TH7LIOBRZMKEZRCLT4UWSSQ+0x52>
    eb2c:	2000      	movs	r0, #0
    eb2e:	4770      	bx	lr
    eb30:	2001      	movs	r0, #1
    eb32:	4770      	bx	lr

0000eb34 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y>:
    eb34:	b510      	push	{r4, lr}
    eb36:	4604      	mov	r4, r0
    eb38:	7c00      	ldrb	r0, [r0, #16]
    eb3a:	f7ff fff3 	bl	eb24 <sym_EQ3I7ZZBTEWAJZC2TH7LIOBRZMKEZRCLT4UWSSQ+0x46>
    eb3e:	b148      	cbz	r0, eb54 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    eb40:	f894 0057 	ldrb.w	r0, [r4, #87]	; 0x57
    eb44:	f104 0158 	add.w	r1, r4, #88	; 0x58
    eb48:	f7ff f912 	bl	dd70 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    eb4c:	2808      	cmp	r0, #8
    eb4e:	d001      	beq.n	eb54 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x20>
    eb50:	2001      	movs	r0, #1
    eb52:	bd10      	pop	{r4, pc}
    eb54:	7c20      	ldrb	r0, [r4, #16]
    eb56:	b118      	cbz	r0, eb60 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    eb58:	2802      	cmp	r0, #2
    eb5a:	d001      	beq.n	eb60 <sym_NFQK2HO6DBYRYVUCFLRI766EKAAKCM57FJRRS5Y+0x2c>
    eb5c:	7de0      	ldrb	r0, [r4, #23]
    eb5e:	bd10      	pop	{r4, pc}
    eb60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eb64:	2000      	movs	r0, #0
    eb66:	f7f3 ba4b 	b.w	2000 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>

0000eb6a <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ>:
    eb6a:	b508      	push	{r3, lr}
    eb6c:	f890 1072 	ldrb.w	r1, [r0, #114]	; 0x72
    eb70:	f88d 1000 	strb.w	r1, [sp]
    eb74:	9900      	ldr	r1, [sp, #0]
    eb76:	9100      	str	r1, [sp, #0]
    eb78:	f89d 1000 	ldrb.w	r1, [sp]
    eb7c:	b941      	cbnz	r1, eb90 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x26>
    eb7e:	f890 10ac 	ldrb.w	r1, [r0, #172]	; 0xac
    eb82:	f88d 1000 	strb.w	r1, [sp]
    eb86:	9900      	ldr	r1, [sp, #0]
    eb88:	9100      	str	r1, [sp, #0]
    eb8a:	f89d 1000 	ldrb.w	r1, [sp]
    eb8e:	b109      	cbz	r1, eb94 <sym_OAGVEJLAHKQB2YTTUDIS6TDHXZIVWZXKUMPIBHQ+0x2a>
    eb90:	2001      	movs	r0, #1
    eb92:	bd08      	pop	{r3, pc}
    eb94:	f890 009c 	ldrb.w	r0, [r0, #156]	; 0x9c
    eb98:	f88d 0000 	strb.w	r0, [sp]
    eb9c:	9800      	ldr	r0, [sp, #0]
    eb9e:	9000      	str	r0, [sp, #0]
    eba0:	f89d 0000 	ldrb.w	r0, [sp]
    eba4:	2000      	movs	r0, #0
    eba6:	bd08      	pop	{r3, pc}

0000eba8 <sym_2ORNMU44KG57RJ5GYPW4FCTEFWDXBHWXYAE3J6I>:
    eba8:	20ff      	movs	r0, #255	; 0xff
    ebaa:	7008      	strb	r0, [r1, #0]
    ebac:	6b48      	ldr	r0, [r1, #52]	; 0x34
    ebae:	f7fe bff4 	b.w	db9a <sym_SCCFLYV5KOPRJ5S7RGDC2KDSCCHMKXYC3EQIE6A>

0000ebb2 <sym_YA57TPZ3CLQ6C73TD2RIGTELUAMYOOAKHU5T7RQ>:
    ebb2:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    ebb4:	460d      	mov	r5, r1
    ebb6:	4604      	mov	r4, r0
    ebb8:	f44f 728c 	mov.w	r2, #280	; 0x118
    ebbc:	2100      	movs	r1, #0
    ebbe:	f002 f895 	bl	10cec <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    ebc2:	20ff      	movs	r0, #255	; 0xff
    ebc4:	7020      	strb	r0, [r4, #0]
    ebc6:	207f      	movs	r0, #127	; 0x7f
    ebc8:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    ebcc:	2013      	movs	r0, #19
    ebce:	8060      	strh	r0, [r4, #2]
    ebd0:	f242 7010 	movw	r0, #10000	; 0x2710
    ebd4:	8460      	strh	r0, [r4, #34]	; 0x22
    ebd6:	f7f3 f803 	bl	1be0 <sym_47U6MZ7GC5PU2CVEGYFSZO6JE3OMJD4DVLRAUZQ>
    ebda:	4601      	mov	r1, r0
    ebdc:	6360      	str	r0, [r4, #52]	; 0x34
    ebde:	2200      	movs	r2, #0
    ebe0:	4668      	mov	r0, sp
    ebe2:	f7fe ff40 	bl	da66 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    ebe6:	2200      	movs	r2, #0
    ebe8:	2101      	movs	r1, #1
    ebea:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ebec:	f7fe ffb5 	bl	db5a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    ebf0:	2204      	movs	r2, #4
    ebf2:	4668      	mov	r0, sp
    ebf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
    ebf6:	f7fe ff36 	bl	da66 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    ebfa:	2200      	movs	r2, #0
    ebfc:	4611      	mov	r1, r2
    ebfe:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ec00:	f7fe ffab 	bl	db5a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    ec04:	73a5      	strb	r5, [r4, #14]
    ec06:	f104 0028 	add.w	r0, r4, #40	; 0x28
    ec0a:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    ec0e:	f000 b93e 	b.w	ee8e <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>

0000ec12 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>:
    ec12:	7880      	ldrb	r0, [r0, #2]
    ec14:	f3c0 0080 	ubfx	r0, r0, #2, #1
    ec18:	b108      	cbz	r0, ec1e <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY+0xc>
    ec1a:	2000      	movs	r0, #0
    ec1c:	4770      	bx	lr
    ec1e:	201f      	movs	r0, #31
    ec20:	4770      	bx	lr

0000ec22 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>:
    ec22:	f7f5 bccd 	b.w	45c0 <sym_KBJ4SX4MJK4IAM4DI3ILSISVXIP6O72O62TW3OQ+0x520>

0000ec26 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>:
    ec26:	6880      	ldr	r0, [r0, #8]
    ec28:	4770      	bx	lr

0000ec2a <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>:
    ec2a:	2001      	movs	r0, #1
    ec2c:	4770      	bx	lr

0000ec2e <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>:
    ec2e:	b510      	push	{r4, lr}
    ec30:	4604      	mov	r4, r0
    ec32:	3028      	adds	r0, #40	; 0x28
    ec34:	f000 f8eb 	bl	ee0e <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>
    ec38:	8861      	ldrh	r1, [r4, #2]
    ec3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ec3e:	2228      	movs	r2, #40	; 0x28
    ec40:	f7f5 be22 	b.w	4888 <sym_6FVWF5AWPR7EN7BPHS4APSIUXYFZQTTZCMRDKPY>

0000ec44 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y>:
    ec44:	2200      	movs	r2, #0
    ec46:	8602      	strh	r2, [r0, #48]	; 0x30
    ec48:	8843      	ldrh	r3, [r0, #2]
    ec4a:	2b1d      	cmp	r3, #29
    ec4c:	d001      	beq.n	ec52 <sym_DG6VHZEFRVR44ESTRZM42ZEBJG4KXT7IVJESA4Y+0xe>
    ec4e:	7341      	strb	r1, [r0, #13]
    ec50:	4770      	bx	lr
    ec52:	7342      	strb	r2, [r0, #13]
    ec54:	4770      	bx	lr

0000ec56 <sym_WE45Z7LOSJEAVMD3HUIMZMMRDD5BLMKOFVBGE4Y>:
    ec56:	b510      	push	{r4, lr}
    ec58:	2400      	movs	r4, #0
    ec5a:	6b40      	ldr	r0, [r0, #52]	; 0x34
    ec5c:	f7fe ff75 	bl	db4a <sym_IBQ2J6PQMWEGB2QFNQVSDUN2ZUMMRTUFKUUZT2I>
    ec60:	4384      	bics	r4, r0
    ec62:	f084 0001 	eor.w	r0, r4, #1
    ec66:	bd10      	pop	{r4, pc}

0000ec68 <sym_TPWVJBQKX2TXZDZ4IZ6XDJYVEDFBPIX3TMZMRCQ>:
    ec68:	2000      	movs	r0, #0
    ec6a:	4770      	bx	lr

0000ec6c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>:
    ec6c:	7880      	ldrb	r0, [r0, #2]
    ec6e:	f000 0001 	and.w	r0, r0, #1
    ec72:	4770      	bx	lr

0000ec74 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>:
    ec74:	7880      	ldrb	r0, [r0, #2]
    ec76:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    ec7a:	4770      	bx	lr

0000ec7c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>:
    ec7c:	2001      	movs	r0, #1
    ec7e:	4770      	bx	lr

0000ec80 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>:
    ec80:	7880      	ldrb	r0, [r0, #2]
    ec82:	f3c0 0040 	ubfx	r0, r0, #1, #1
    ec86:	4770      	bx	lr

0000ec88 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>:
    ec88:	f990 000e 	ldrsb.w	r0, [r0, #14]
    ec8c:	4770      	bx	lr

0000ec8e <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>:
    ec8e:	7800      	ldrb	r0, [r0, #0]
    ec90:	28ff      	cmp	r0, #255	; 0xff
    ec92:	d001      	beq.n	ec98 <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ+0xa>
    ec94:	2001      	movs	r0, #1
    ec96:	4770      	bx	lr
    ec98:	2000      	movs	r0, #0
    ec9a:	4770      	bx	lr

0000ec9c <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>:
    ec9c:	f800 1f20 	strb.w	r1, [r0, #32]!
    eca0:	7042      	strb	r2, [r0, #1]
    eca2:	4770      	bx	lr

0000eca4 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>:
    eca4:	680a      	ldr	r2, [r1, #0]
    eca6:	f840 2f11 	str.w	r2, [r0, #17]!
    ecaa:	8889      	ldrh	r1, [r1, #4]
    ecac:	8081      	strh	r1, [r0, #4]
    ecae:	2101      	movs	r1, #1
    ecb0:	7181      	strb	r1, [r0, #6]
    ecb2:	4770      	bx	lr

0000ecb4 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>:
    ecb4:	7b00      	ldrb	r0, [r0, #12]
    ecb6:	4770      	bx	lr

0000ecb8 <sym_4HDCBJCT2JOHNORERPDEH2A3V47FOX6NCTAKLUA>:
    ecb8:	2001      	movs	r0, #1
    ecba:	4770      	bx	lr

0000ecbc <sym_4FKJZF4AXR7RHM7IPPZMVUWU7W6MFHLX726TPNY>:
    ecbc:	61c1      	str	r1, [r0, #28]
    ecbe:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
    ecc2:	724a      	strb	r2, [r1, #9]
    ecc4:	f8d0 2051 	ldr.w	r2, [r0, #81]	; 0x51
    ecc8:	f8c1 200a 	str.w	r2, [r1, #10]
    eccc:	f8b0 0055 	ldrh.w	r0, [r0, #85]	; 0x55
    ecd0:	81c8      	strh	r0, [r1, #14]
    ecd2:	4770      	bx	lr

0000ecd4 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>:
    ecd4:	f880 1068 	strb.w	r1, [r0, #104]	; 0x68
    ecd8:	4770      	bx	lr

0000ecda <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y>:
    ecda:	7bc0      	ldrb	r0, [r0, #15]
    ecdc:	2800      	cmp	r0, #0
    ecde:	d000      	beq.n	ece2 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x8>
    ece0:	2001      	movs	r0, #1
    ece2:	4770      	bx	lr
    ece4:	7802      	ldrb	r2, [r0, #0]
    ece6:	2320      	movs	r3, #32
    ece8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    ecec:	ea03 1141 	and.w	r1, r3, r1, lsl #5
    ecf0:	430a      	orrs	r2, r1
    ecf2:	7002      	strb	r2, [r0, #0]
    ecf4:	4770      	bx	lr
    ecf6:	2101      	movs	r1, #1
    ecf8:	f7f5 b84c 	b.w	3d94 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    ecfc:	2101      	movs	r1, #1
    ecfe:	f7f5 b849 	b.w	3d94 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY+0x30>
    ed02:	b570      	push	{r4, r5, r6, lr}
    ed04:	4604      	mov	r4, r0
    ed06:	460e      	mov	r6, r1
    ed08:	7e40      	ldrb	r0, [r0, #25]
    ed0a:	f7f3 fecd 	bl	2aa8 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    ed0e:	4605      	mov	r5, r0
    ed10:	7e20      	ldrb	r0, [r4, #24]
    ed12:	2800      	cmp	r0, #0
    ed14:	d016      	beq.n	ed44 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x6a>
    ed16:	2d00      	cmp	r5, #0
    ed18:	d014      	beq.n	ed44 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x6a>
    ed1a:	7e60      	ldrb	r0, [r4, #25]
    ed1c:	f7f3 feac 	bl	2a78 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    ed20:	2800      	cmp	r0, #0
    ed22:	d10f      	bne.n	ed44 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0x6a>
    ed24:	2001      	movs	r0, #1
    ed26:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    ed2a:	4632      	mov	r2, r6
    ed2c:	f104 0151 	add.w	r1, r4, #81	; 0x51
    ed30:	460e      	mov	r6, r1
    ed32:	4628      	mov	r0, r5
    ed34:	f7fe ffb4 	bl	dca0 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    ed38:	7e61      	ldrb	r1, [r4, #25]
    ed3a:	4630      	mov	r0, r6
    ed3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ed40:	f7f3 bebe 	b.w	2ac0 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    ed44:	bd70      	pop	{r4, r5, r6, pc}
    ed46:	2200      	movs	r2, #0
    ed48:	704a      	strb	r2, [r1, #1]
    ed4a:	2204      	movs	r2, #4
    ed4c:	700a      	strb	r2, [r1, #0]
    ed4e:	f8d0 000a 	ldr.w	r0, [r0, #10]
    ed52:	6048      	str	r0, [r1, #4]
    ed54:	4770      	bx	lr
    ed56:	b510      	push	{r4, lr}
    ed58:	460c      	mov	r4, r1
    ed5a:	2100      	movs	r1, #0
    ed5c:	7061      	strb	r1, [r4, #1]
    ed5e:	2110      	movs	r1, #16
    ed60:	7021      	strb	r1, [r4, #0]
    ed62:	f100 0109 	add.w	r1, r0, #9
    ed66:	2221      	movs	r2, #33	; 0x21
    ed68:	1d20      	adds	r0, r4, #4
    ed6a:	f001 ff45 	bl	10bf8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ed6e:	2001      	movs	r0, #1
    ed70:	71e0      	strb	r0, [r4, #7]
    ed72:	7920      	ldrb	r0, [r4, #4]
    ed74:	2800      	cmp	r0, #0
    ed76:	d015      	beq.n	eda4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xca>
    ed78:	f8b4 4005 	ldrh.w	r4, [r4, #5]
    ed7c:	2100      	movs	r1, #0
    ed7e:	4620      	mov	r0, r4
    ed80:	f7f2 fcdc 	bl	173c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ed84:	2800      	cmp	r0, #0
    ed86:	d00d      	beq.n	eda4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xca>
    ed88:	8800      	ldrh	r0, [r0, #0]
    ed8a:	f7fe ff65 	bl	dc58 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    ed8e:	2100      	movs	r1, #0
    ed90:	4620      	mov	r0, r4
    ed92:	f7f2 fd75 	bl	1880 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    ed96:	2800      	cmp	r0, #0
    ed98:	d004      	beq.n	eda4 <sym_H6NC6L6VJY74V6C72Y6E5P4HGSZIVJQXMUOQZ5Y+0xca>
    ed9a:	f240 2155 	movw	r1, #597	; 0x255
    ed9e:	202d      	movs	r0, #45	; 0x2d
    eda0:	f7f2 f9c4 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eda4:	bd10      	pop	{r4, pc}
    eda6:	2200      	movs	r2, #0
    eda8:	704a      	strb	r2, [r1, #1]
    edaa:	2218      	movs	r2, #24
    edac:	700a      	strb	r2, [r1, #0]
    edae:	f850 2f09 	ldr.w	r2, [r0, #9]!
    edb2:	604a      	str	r2, [r1, #4]
    edb4:	6842      	ldr	r2, [r0, #4]
    edb6:	608a      	str	r2, [r1, #8]
    edb8:	7a00      	ldrb	r0, [r0, #8]
    edba:	7308      	strb	r0, [r1, #12]
    edbc:	4770      	bx	lr
    edbe:	b510      	push	{r4, lr}
    edc0:	4604      	mov	r4, r0
    edc2:	4608      	mov	r0, r1
    edc4:	f7f9 fc0e 	bl	85e4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    edc8:	7921      	ldrb	r1, [r4, #4]
    edca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    edce:	2025      	movs	r0, #37	; 0x25
    edd0:	f7f9 bbd8 	b.w	8584 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    edd4:	b570      	push	{r4, r5, r6, lr}
    edd6:	4614      	mov	r4, r2
    edd8:	461d      	mov	r5, r3
    edda:	4606      	mov	r6, r0
    eddc:	f001 fdce 	bl	1097c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    ede0:	1900      	adds	r0, r0, r4
    ede2:	4169      	adcs	r1, r5
    ede4:	e9c6 0100 	strd	r0, r1, [r6]
    ede8:	bd70      	pop	{r4, r5, r6, pc}

0000edea <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y>:
    edea:	b570      	push	{r4, r5, r6, lr}
    edec:	7001      	strb	r1, [r0, #0]
    edee:	7042      	strb	r2, [r0, #1]
    edf0:	4614      	mov	r4, r2
    edf2:	460d      	mov	r5, r1
    edf4:	7880      	ldrb	r0, [r0, #2]
    edf6:	f000 f87f 	bl	eef8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    edfa:	fb10 f005 	smulbb	r0, r0, r5
    edfe:	4360      	muls	r0, r4
    ee00:	28ff      	cmp	r0, #255	; 0xff
    ee02:	d303      	bcc.n	ee0c <sym_XD3FX5TVO57NBJG4QV33FUOBCL7SNGB4OOT7C3Y+0x22>
    ee04:	215c      	movs	r1, #92	; 0x5c
    ee06:	202e      	movs	r0, #46	; 0x2e
    ee08:	f7f2 f990 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee0c:	bd70      	pop	{r4, r5, r6, pc}

0000ee0e <sym_STP6UONGXHZIIGYZLLHSWZFO5DU7227CCUKBTDQ>:
    ee0e:	b510      	push	{r4, lr}
    ee10:	4604      	mov	r4, r0
    ee12:	7880      	ldrb	r0, [r0, #2]
    ee14:	f000 f870 	bl	eef8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ee18:	7861      	ldrb	r1, [r4, #1]
    ee1a:	7822      	ldrb	r2, [r4, #0]
    ee1c:	fb11 f102 	smulbb	r1, r1, r2
    ee20:	4348      	muls	r0, r1
    ee22:	b2c0      	uxtb	r0, r0
    ee24:	bd10      	pop	{r4, pc}

0000ee26 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA>:
    ee26:	b510      	push	{r4, lr}
    ee28:	4604      	mov	r4, r0
    ee2a:	f000 f84d 	bl	eec8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x2c>
    ee2e:	7961      	ldrb	r1, [r4, #5]
    ee30:	1c49      	adds	r1, r1, #1
    ee32:	b2c9      	uxtb	r1, r1
    ee34:	7161      	strb	r1, [r4, #5]
    ee36:	7862      	ldrb	r2, [r4, #1]
    ee38:	4291      	cmp	r1, r2
    ee3a:	d10b      	bne.n	ee54 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    ee3c:	2200      	movs	r2, #0
    ee3e:	7162      	strb	r2, [r4, #5]
    ee40:	78e1      	ldrb	r1, [r4, #3]
    ee42:	4301      	orrs	r1, r0
    ee44:	70e1      	strb	r1, [r4, #3]
    ee46:	78a3      	ldrb	r3, [r4, #2]
    ee48:	4299      	cmp	r1, r3
    ee4a:	d103      	bne.n	ee54 <sym_GDGGQ5EKEJNZBTEWASFQ2LUSL4TZGNXHPD7BDQA+0x2e>
    ee4c:	70e2      	strb	r2, [r4, #3]
    ee4e:	7921      	ldrb	r1, [r4, #4]
    ee50:	1c49      	adds	r1, r1, #1
    ee52:	7121      	strb	r1, [r4, #4]
    ee54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee58:	f000 b825 	b.w	eea6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0xa>

0000ee5c <sym_YZ554N3225FHWC7CK3UNRUMI3O4SGFLKXVRCFXA>:
    ee5c:	7081      	strb	r1, [r0, #2]
    ee5e:	4770      	bx	lr

0000ee60 <sym_4U2RA2RXIRU5BEMWZTHT3PETZK6K62P2SAJVWHA>:
    ee60:	b570      	push	{r4, r5, r6, lr}
    ee62:	4604      	mov	r4, r0
    ee64:	7880      	ldrb	r0, [r0, #2]
    ee66:	f000 f847 	bl	eef8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ee6a:	7861      	ldrb	r1, [r4, #1]
    ee6c:	fb11 f500 	smulbb	r5, r1, r0
    ee70:	78e0      	ldrb	r0, [r4, #3]
    ee72:	f000 f841 	bl	eef8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x5c>
    ee76:	7861      	ldrb	r1, [r4, #1]
    ee78:	7962      	ldrb	r2, [r4, #5]
    ee7a:	fb10 2001 	smlabb	r0, r0, r1, r2
    ee7e:	7821      	ldrb	r1, [r4, #0]
    ee80:	7922      	ldrb	r2, [r4, #4]
    ee82:	1a89      	subs	r1, r1, r2
    ee84:	fb11 f105 	smulbb	r1, r1, r5
    ee88:	1a08      	subs	r0, r1, r0
    ee8a:	b2c0      	uxtb	r0, r0
    ee8c:	bd70      	pop	{r4, r5, r6, pc}

0000ee8e <sym_32MURW7CSXICOYPMCVOPRARLMRLK4UASNCF4JWQ>:
    ee8e:	2100      	movs	r1, #0
    ee90:	6001      	str	r1, [r0, #0]
    ee92:	8081      	strh	r1, [r0, #4]
    ee94:	2101      	movs	r1, #1
    ee96:	7041      	strb	r1, [r0, #1]
    ee98:	7001      	strb	r1, [r0, #0]
    ee9a:	4770      	bx	lr

0000ee9c <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ>:
    ee9c:	2100      	movs	r1, #0
    ee9e:	70c1      	strb	r1, [r0, #3]
    eea0:	7141      	strb	r1, [r0, #5]
    eea2:	7101      	strb	r1, [r0, #4]
    eea4:	4770      	bx	lr
    eea6:	b510      	push	{r4, lr}
    eea8:	2801      	cmp	r0, #1
    eeaa:	d007      	beq.n	eebc <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x20>
    eeac:	2802      	cmp	r0, #2
    eeae:	d007      	beq.n	eec0 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x24>
    eeb0:	2804      	cmp	r0, #4
    eeb2:	d007      	beq.n	eec4 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x28>
    eeb4:	2139      	movs	r1, #57	; 0x39
    eeb6:	202e      	movs	r0, #46	; 0x2e
    eeb8:	f7f2 f938 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eebc:	2025      	movs	r0, #37	; 0x25
    eebe:	bd10      	pop	{r4, pc}
    eec0:	2026      	movs	r0, #38	; 0x26
    eec2:	bd10      	pop	{r4, pc}
    eec4:	2027      	movs	r0, #39	; 0x27
    eec6:	bd10      	pop	{r4, pc}
    eec8:	4601      	mov	r1, r0
    eeca:	2000      	movs	r0, #0
    eecc:	788a      	ldrb	r2, [r1, #2]
    eece:	07d3      	lsls	r3, r2, #31
    eed0:	d002      	beq.n	eed8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x3c>
    eed2:	78cb      	ldrb	r3, [r1, #3]
    eed4:	07db      	lsls	r3, r3, #31
    eed6:	d006      	beq.n	eee6 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4a>
    eed8:	0793      	lsls	r3, r2, #30
    eeda:	d506      	bpl.n	eeea <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    eedc:	78cb      	ldrb	r3, [r1, #3]
    eede:	079b      	lsls	r3, r3, #30
    eee0:	d403      	bmi.n	eeea <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4e>
    eee2:	2002      	movs	r0, #2
    eee4:	4770      	bx	lr
    eee6:	2001      	movs	r0, #1
    eee8:	4770      	bx	lr
    eeea:	0752      	lsls	r2, r2, #29
    eeec:	d5fc      	bpl.n	eee8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    eeee:	78c9      	ldrb	r1, [r1, #3]
    eef0:	0749      	lsls	r1, r1, #29
    eef2:	d4f9      	bmi.n	eee8 <sym_UEYPZKGY2IF5BYZ3QDKK4LEW4OE7NWR6DH5XEZQ+0x4c>
    eef4:	2004      	movs	r0, #4
    eef6:	4770      	bx	lr
    eef8:	f3c0 0180 	ubfx	r1, r0, #2, #1
    eefc:	f3c0 0240 	ubfx	r2, r0, #1, #1
    ef00:	4411      	add	r1, r2
    ef02:	f000 0001 	and.w	r0, r0, #1
    ef06:	4408      	add	r0, r1
    ef08:	4770      	bx	lr

0000ef0a <sym_FHGEXLJ7V34P3MECCDTYSDEZTZHFJ2TXYSFZQHQ>:
    ef0a:	f240 315a 	movw	r1, #858	; 0x35a
    ef0e:	4348      	muls	r0, r1
    ef10:	4770      	bx	lr

0000ef12 <sym_USXJ3USYRHE5AVFUSG2J2G7QDHRASPG75ESP25A>:
    ef12:	f240 20ef 	movw	r0, #751	; 0x2ef
    ef16:	4770      	bx	lr
    ef18:	041c020e 	.word	0x041c020e
    ef1c:	0c600630 	.word	0x0c600630
    ef20:	06b4035a 	.word	0x06b4035a
    ef24:	0bf505c5 	.word	0x0bf505c5
    ef28:	01a31225 	.word	0x01a31225
    ef2c:	05bf03b1 	.word	0x05bf03b1
    ef30:	064902ef 	.word	0x064902ef
    ef34:	09a3      	.short	0x09a3

0000ef36 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ>:
    ef36:	b510      	push	{r4, lr}
    ef38:	f890 1110 	ldrb.w	r1, [r0, #272]	; 0x110
    ef3c:	b109      	cbz	r1, ef42 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0xc>
    ef3e:	2000      	movs	r0, #0
    ef40:	bd10      	pop	{r4, pc}
    ef42:	f890 10d0 	ldrb.w	r1, [r0, #208]	; 0xd0
    ef46:	b131      	cbz	r1, ef56 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    ef48:	e9d0 1235 	ldrd	r1, r2, [r0, #212]	; 0xd4
    ef4c:	428a      	cmp	r2, r1
    ef4e:	d902      	bls.n	ef56 <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x20>
    ef50:	f7f4 ff08 	bl	3d64 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    ef54:	e7f3      	b.n	ef3e <sym_3ZNIOFG7XMX7YS4WHN4QVNG3AVWN2QVSTHUWDXQ+0x8>
    ef56:	2001      	movs	r0, #1
    ef58:	bd10      	pop	{r4, pc}

0000ef5a <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY>:
    ef5a:	b510      	push	{r4, lr}
    ef5c:	b131      	cbz	r1, ef6c <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x12>
    ef5e:	2901      	cmp	r1, #1
    ef60:	d008      	beq.n	ef74 <sym_FY3JF6XBXLAG22E42UPFUU55A3QFAFZDUGSPAPY+0x1a>
    ef62:	f240 71e7 	movw	r1, #2023	; 0x7e7
    ef66:	2030      	movs	r0, #48	; 0x30
    ef68:	f7f2 f8e0 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef70:	f000 b9e5 	b.w	f33e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x364>
    ef74:	2100      	movs	r1, #0
    ef76:	f880 10d0 	strb.w	r1, [r0, #208]	; 0xd0
    ef7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef7e:	f000 b941 	b.w	f204 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x22a>

0000ef82 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>:
    ef82:	b510      	push	{r4, lr}
    ef84:	4604      	mov	r4, r0
    ef86:	f890 00e8 	ldrb.w	r0, [r0, #232]	; 0xe8
    ef8a:	2800      	cmp	r0, #0
    ef8c:	d019      	beq.n	efc2 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x40>
    ef8e:	2001      	movs	r0, #1
    ef90:	f884 0110 	strb.w	r0, [r4, #272]	; 0x110
    ef94:	4601      	mov	r1, r0
    ef96:	4620      	mov	r0, r4
    ef98:	f7ff fe9c 	bl	ecd4 <sym_WAXMY55QAGCTLTIDQV34FPT2PPSDRT5VDN7EYYY>
    ef9c:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    efa0:	b170      	cbz	r0, efc0 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x3e>
    efa2:	f814 0fc8 	ldrb.w	r0, [r4, #200]!
    efa6:	f7fb fe47 	bl	ac38 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    efaa:	7820      	ldrb	r0, [r4, #0]
    efac:	f7fb ffbc 	bl	af28 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    efb0:	f814 09c8 	ldrb.w	r0, [r4], #-200
    efb4:	f7fb ff96 	bl	aee4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    efb8:	b120      	cbz	r0, efc4 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI+0x42>
    efba:	2000      	movs	r0, #0
    efbc:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
    efc0:	2000      	movs	r0, #0
    efc2:	bd10      	pop	{r4, pc}
    efc4:	f240 210d 	movw	r1, #525	; 0x20d
    efc8:	2030      	movs	r0, #48	; 0x30
    efca:	f7f2 f8af 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000efce <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>:
    efce:	f8d0 00cc 	ldr.w	r0, [r0, #204]	; 0xcc
    efd2:	4770      	bx	lr

0000efd4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>:
    efd4:	f890 00e8 	ldrb.w	r0, [r0, #232]	; 0xe8
    efd8:	4770      	bx	lr

0000efda <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>:
    efda:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    efdc:	4604      	mov	r4, r0
    efde:	f890 022b 	ldrb.w	r0, [r0, #555]	; 0x22b
    efe2:	2800      	cmp	r0, #0
    efe4:	d15f      	bne.n	f0a6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    efe6:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    efea:	2803      	cmp	r0, #3
    efec:	d15b      	bne.n	f0a6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    efee:	f001 fcc5 	bl	1097c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    eff2:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
    eff6:	f8d4 2294 	ldr.w	r2, [r4, #660]	; 0x294
    effa:	1ac0      	subs	r0, r0, r3
    effc:	eb61 0102 	sbc.w	r1, r1, r2
    f000:	2300      	movs	r3, #0
    f002:	461a      	mov	r2, r3
    f004:	1a1b      	subs	r3, r3, r0
    f006:	418a      	sbcs	r2, r1
    f008:	da4d      	bge.n	f0a6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f00a:	1c42      	adds	r2, r0, #1
    f00c:	f171 0100 	sbcs.w	r1, r1, #0
    f010:	db02      	blt.n	f018 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3e>
    f012:	f240 610d 	movw	r1, #1549	; 0x60d
    f016:	e036      	b.n	f086 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xac>
    f018:	6921      	ldr	r1, [r4, #16]
    f01a:	b111      	cbz	r1, f022 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x48>
    f01c:	fbb0 f0f1 	udiv	r0, r0, r1
    f020:	e000      	b.n	f024 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4a>
    f022:	2000      	movs	r0, #0
    f024:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    f028:	1c40      	adds	r0, r0, #1
    f02a:	4408      	add	r0, r1
    f02c:	f8a4 026c 	strh.w	r0, [r4, #620]	; 0x26c
    f030:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    f034:	f8b4 1224 	ldrh.w	r1, [r4, #548]	; 0x224
    f038:	1a08      	subs	r0, r1, r0
    f03a:	b200      	sxth	r0, r0
    f03c:	2800      	cmp	r0, #0
    f03e:	dd32      	ble.n	f0a6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f040:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    f044:	f7fb fdf8 	bl	ac38 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    f048:	2800      	cmp	r0, #0
    f04a:	d02c      	beq.n	f0a6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f04c:	20ff      	movs	r0, #255	; 0xff
    f04e:	f884 0271 	strb.w	r0, [r4, #625]	; 0x271
    f052:	f8b4 00ce 	ldrh.w	r0, [r4, #206]	; 0xce
    f056:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
    f05a:	ae01      	add	r6, sp, #4
    f05c:	1a40      	subs	r0, r0, r1
    f05e:	f8b4 1094 	ldrh.w	r1, [r4, #148]	; 0x94
    f062:	1e40      	subs	r0, r0, #1
    f064:	4408      	add	r0, r1
    f066:	b285      	uxth	r5, r0
    f068:	e017      	b.n	f09a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xc0>
    f06a:	9600      	str	r6, [sp, #0]
    f06c:	f8b4 126c 	ldrh.w	r1, [r4, #620]	; 0x26c
    f070:	2300      	movs	r3, #0
    f072:	2201      	movs	r2, #1
    f074:	4620      	mov	r0, r4
    f076:	f7f5 febd 	bl	4df4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x24c>
    f07a:	2800      	cmp	r0, #0
    f07c:	d013      	beq.n	f0a6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xcc>
    f07e:	2801      	cmp	r0, #1
    f080:	d004      	beq.n	f08c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xb2>
    f082:	f240 6146 	movw	r1, #1606	; 0x646
    f086:	2030      	movs	r0, #48	; 0x30
    f088:	f7f2 f850 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f08c:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    f090:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    f094:	4408      	add	r0, r1
    f096:	f8a4 026c 	strh.w	r0, [r4, #620]	; 0x26c
    f09a:	f8b4 026c 	ldrh.w	r0, [r4, #620]	; 0x26c
    f09e:	1a28      	subs	r0, r5, r0
    f0a0:	b200      	sxth	r0, r0
    f0a2:	2800      	cmp	r0, #0
    f0a4:	dae1      	bge.n	f06a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x90>
    f0a6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f0a8:	2000      	movs	r0, #0
    f0aa:	4770      	bx	lr
    f0ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f0b0:	4604      	mov	r4, r0
    f0b2:	f000 f91d 	bl	f2f0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x316>
    f0b6:	f8a4 00f8 	strh.w	r0, [r4, #248]	; 0xf8
    f0ba:	f04f 0a00 	mov.w	sl, #0
    f0be:	f884 a0f0 	strb.w	sl, [r4, #240]	; 0xf0
    f0c2:	2101      	movs	r1, #1
    f0c4:	f884 10fb 	strb.w	r1, [r4, #251]	; 0xfb
    f0c8:	f8b4 00ea 	ldrh.w	r0, [r4, #234]	; 0xea
    f0cc:	1c40      	adds	r0, r0, #1
    f0ce:	280a      	cmp	r0, #10
    f0d0:	d201      	bcs.n	f0d6 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xfc>
    f0d2:	f8a4 00ea 	strh.w	r0, [r4, #234]	; 0xea
    f0d6:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
    f0da:	b138      	cbz	r0, f0ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x112>
    f0dc:	f8b4 00ea 	ldrh.w	r0, [r4, #234]	; 0xea
    f0e0:	1c40      	adds	r0, r0, #1
    f0e2:	280a      	cmp	r0, #10
    f0e4:	d302      	bcc.n	f0ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x112>
    f0e6:	f884 10fa 	strb.w	r1, [r4, #250]	; 0xfa
    f0ea:	e002      	b.n	f0f2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x118>
    f0ec:	2002      	movs	r0, #2
    f0ee:	f884 00fa 	strb.w	r0, [r4, #250]	; 0xfa
    f0f2:	f001 fc43 	bl	1097c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    f0f6:	4606      	mov	r6, r0
    f0f8:	460d      	mov	r5, r1
    f0fa:	e9d4 1040 	ldrd	r1, r0, [r4, #256]	; 0x100
    f0fe:	34f8      	adds	r4, #248	; 0xf8
    f100:	ebb1 0806 	subs.w	r8, r1, r6
    f104:	eb60 0905 	sbc.w	r9, r0, r5
    f108:	f7fc fc96 	bl	ba38 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    f10c:	4607      	mov	r7, r0
    f10e:	f001 fc2c 	bl	1096a <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>
    f112:	f834 19f8 	ldrh.w	r1, [r4], #-248
    f116:	4288      	cmp	r0, r1
    f118:	d800      	bhi.n	f11c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x142>
    f11a:	4608      	mov	r0, r1
    f11c:	4438      	add	r0, r7
    f11e:	30cf      	adds	r0, #207	; 0xcf
    f120:	b280      	uxth	r0, r0
    f122:	ebb8 0300 	subs.w	r3, r8, r0
    f126:	eb79 020a 	sbcs.w	r2, r9, sl
    f12a:	da04      	bge.n	f136 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x15c>
    f12c:	1830      	adds	r0, r6, r0
    f12e:	eb45 050a 	adc.w	r5, r5, sl
    f132:	e9c4 0540 	strd	r0, r5, [r4, #256]	; 0x100
    f136:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
    f13a:	2100      	movs	r1, #0
    f13c:	4605      	mov	r5, r0
    f13e:	f7fe feda 	bl	def6 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    f142:	4620      	mov	r0, r4
    f144:	f000 f83b 	bl	f1be <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1e4>
    f148:	b1e8      	cbz	r0, f186 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ac>
    f14a:	4620      	mov	r0, r4
    f14c:	f000 f827 	bl	f19e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1c4>
    f150:	e9d4 3038 	ldrd	r3, r0, [r4, #224]	; 0xe0
    f154:	e9d4 1240 	ldrd	r1, r2, [r4, #256]	; 0x100
    f158:	1a59      	subs	r1, r3, r1
    f15a:	4190      	sbcs	r0, r2
    f15c:	d211      	bcs.n	f182 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1a8>
    f15e:	4620      	mov	r0, r4
    f160:	f7ff fd61 	bl	ec26 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    f164:	e9d4 1238 	ldrd	r1, r2, [r4, #224]	; 0xe0
    f168:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    f16c:	1a5b      	subs	r3, r3, r1
    f16e:	2800      	cmp	r0, #0
    f170:	d007      	beq.n	f182 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1a8>
    f172:	fbb3 f3f0 	udiv	r3, r3, r0
    f176:	fba0 3003 	umull	r3, r0, r0, r3
    f17a:	1859      	adds	r1, r3, r1
    f17c:	4150      	adcs	r0, r2
    f17e:	e9c4 1038 	strd	r1, r0, [r4, #224]	; 0xe0
    f182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f186:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    f18a:	4629      	mov	r1, r5
    f18c:	f000 f8ae 	bl	f2ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x312>
    f190:	2800      	cmp	r0, #0
    f192:	d1dd      	bne.n	f150 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x176>
    f194:	f240 61e9 	movw	r1, #1769	; 0x6e9
    f198:	2030      	movs	r0, #48	; 0x30
    f19a:	f7f1 ffc7 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f19e:	b510      	push	{r4, lr}
    f1a0:	4604      	mov	r4, r0
    f1a2:	f890 00c8 	ldrb.w	r0, [r0, #200]	; 0xc8
    f1a6:	f7fb fe9d 	bl	aee4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f1aa:	2000      	movs	r0, #0
    f1ac:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
    f1b0:	bd10      	pop	{r4, pc}
    f1b2:	b510      	push	{r4, lr}
    f1b4:	f7ff fd3b 	bl	ec2e <sym_3NMQXTBVJ27TN5IIVET3BSKEAUONNKTPZTYP2HY>
    f1b8:	f500 708b 	add.w	r0, r0, #278	; 0x116
    f1bc:	bd10      	pop	{r4, pc}
    f1be:	b570      	push	{r4, r5, r6, lr}
    f1c0:	4605      	mov	r5, r0
    f1c2:	f890 0110 	ldrb.w	r0, [r0, #272]	; 0x110
    f1c6:	b108      	cbz	r0, f1cc <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1f2>
    f1c8:	2001      	movs	r0, #1
    f1ca:	bd70      	pop	{r4, r5, r6, pc}
    f1cc:	e9d5 1042 	ldrd	r1, r0, [r5, #264]	; 0x108
    f1d0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    f1d4:	4050      	eors	r0, r2
    f1d6:	ea70 0101 	orns	r1, r0, r1
    f1da:	d011      	beq.n	f200 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x226>
    f1dc:	2400      	movs	r4, #0
    f1de:	4621      	mov	r1, r4
    f1e0:	4628      	mov	r0, r5
    f1e2:	f7ff ffe6 	bl	f1b2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d8>
    f1e6:	e9d5 1240 	ldrd	r1, r2, [r5, #256]	; 0x100
    f1ea:	1840      	adds	r0, r0, r1
    f1ec:	4154      	adcs	r4, r2
    f1ee:	e9d5 2142 	ldrd	r2, r1, [r5, #264]	; 0x108
    f1f2:	1a10      	subs	r0, r2, r0
    f1f4:	41a1      	sbcs	r1, r4
    f1f6:	d503      	bpl.n	f200 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x226>
    f1f8:	4628      	mov	r0, r5
    f1fa:	f7f4 fdb3 	bl	3d64 <sym_RPDYS5TXULS3Z2BQR7IFNSOINXPPN4LN764SRIY>
    f1fe:	e7e3      	b.n	f1c8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1ee>
    f200:	2000      	movs	r0, #0
    f202:	bd70      	pop	{r4, r5, r6, pc}
    f204:	b510      	push	{r4, lr}
    f206:	f7f9 f817 	bl	8238 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    f20a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f20e:	f7fb bfc7 	b.w	b1a0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    f212:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f216:	4604      	mov	r4, r0
    f218:	f890 0272 	ldrb.w	r0, [r0, #626]	; 0x272
    f21c:	2800      	cmp	r0, #0
    f21e:	d051      	beq.n	f2c4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ea>
    f220:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    f224:	2803      	cmp	r0, #3
    f226:	d14d      	bne.n	f2c4 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2ea>
    f228:	f894 906b 	ldrb.w	r9, [r4, #107]	; 0x6b
    f22c:	f001 fa26 	bl	1067c <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>
    f230:	4605      	mov	r5, r0
    f232:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    f236:	f7f5 fcfd 	bl	4c34 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c>
    f23a:	4428      	add	r0, r5
    f23c:	b286      	uxth	r6, r0
    f23e:	f894 021b 	ldrb.w	r0, [r4, #539]	; 0x21b
    f242:	f7f5 fcf7 	bl	4c34 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x8c>
    f246:	f500 60c8 	add.w	r0, r0, #1600	; 0x640
    f24a:	fa1f f880 	uxth.w	r8, r0
    f24e:	4648      	mov	r0, r9
    f250:	f7f9 f8b0 	bl	83b4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f254:	f8d4 12ac 	ldr.w	r1, [r4, #684]	; 0x2ac
    f258:	1a0d      	subs	r5, r1, r0
    f25a:	4648      	mov	r0, r9
    f25c:	f7f9 f8d8 	bl	8410 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f260:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
    f264:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    f268:	fbb0 f0fa 	udiv	r0, r0, sl
    f26c:	1a2d      	subs	r5, r5, r0
    f26e:	4648      	mov	r0, r9
    f270:	f7f9 f8a0 	bl	83b4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f274:	f8d4 1230 	ldr.w	r1, [r4, #560]	; 0x230
    f278:	1a0f      	subs	r7, r1, r0
    f27a:	4648      	mov	r0, r9
    f27c:	f7f9 f8c8 	bl	8410 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f280:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    f284:	4401      	add	r1, r0
    f286:	fbb1 f0fa 	udiv	r0, r1, sl
    f28a:	1a39      	subs	r1, r7, r0
    f28c:	f1a1 0060 	sub.w	r0, r1, #96	; 0x60
    f290:	4370      	muls	r0, r6
    f292:	fbb0 f2f8 	udiv	r2, r0, r8
    f296:	2029      	movs	r0, #41	; 0x29
    f298:	eb00 0051 	add.w	r0, r0, r1, lsr #1
    f29c:	3260      	adds	r2, #96	; 0x60
    f29e:	eba0 0152 	sub.w	r1, r0, r2, lsr #1
    f2a2:	eb00 0052 	add.w	r0, r0, r2, lsr #1
    f2a6:	42a9      	cmp	r1, r5
    f2a8:	d801      	bhi.n	f2ae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d4>
    f2aa:	4285      	cmp	r5, r0
    f2ac:	d901      	bls.n	f2b2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x2d8>
    f2ae:	f7fc fc79 	bl	bba4 <sym_UG7CMBAYEZEKSKQK753P4TBTSPUXVRWUS6QJJOA>
    f2b2:	4631      	mov	r1, r6
    f2b4:	6920      	ldr	r0, [r4, #16]
    f2b6:	f7fc fcd3 	bl	bc60 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    f2ba:	2100      	movs	r1, #0
    f2bc:	f8c4 0264 	str.w	r0, [r4, #612]	; 0x264
    f2c0:	f884 1272 	strb.w	r1, [r4, #626]	; 0x272
    f2c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f2c8:	b570      	push	{r4, r5, r6, lr}
    f2ca:	460c      	mov	r4, r1
    f2cc:	4605      	mov	r5, r0
    f2ce:	f7f9 f89f 	bl	8410 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f2d2:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    f2d6:	4408      	add	r0, r1
    f2d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f2dc:	fbb0 f6f1 	udiv	r6, r0, r1
    f2e0:	4628      	mov	r0, r5
    f2e2:	f7f9 f867 	bl	83b4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    f2e6:	4430      	add	r0, r6
    f2e8:	4420      	add	r0, r4
    f2ea:	bd70      	pop	{r4, r5, r6, pc}
    f2ec:	f7fb b846 	b.w	a37c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    f2f0:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f2f2:	4604      	mov	r4, r0
    f2f4:	f7ff fcc2 	bl	ec7c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    f2f8:	b1f8      	cbz	r0, f33a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x360>
    f2fa:	4620      	mov	r0, r4
    f2fc:	f7ff fcb6 	bl	ec6c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    f300:	b918      	cbnz	r0, f30a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x330>
    f302:	4620      	mov	r0, r4
    f304:	f7ff fcbc 	bl	ec80 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    f308:	b140      	cbz	r0, f31c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x342>
    f30a:	245a      	movs	r4, #90	; 0x5a
    f30c:	4668      	mov	r0, sp
    f30e:	f7f9 fd79 	bl	8e04 <mpsl_fem_pa_is_configured>
    f312:	f89d 0000 	ldrb.w	r0, [sp]
    f316:	b118      	cbz	r0, f320 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x346>
    f318:	2501      	movs	r5, #1
    f31a:	e002      	b.n	f322 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x348>
    f31c:	2450      	movs	r4, #80	; 0x50
    f31e:	e7f5      	b.n	f30c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x332>
    f320:	2500      	movs	r5, #0
    f322:	a801      	add	r0, sp, #4
    f324:	f7f9 fd56 	bl	8dd4 <mpsl_fem_lna_is_configured>
    f328:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f32c:	b100      	cbz	r0, f330 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x356>
    f32e:	2001      	movs	r0, #1
    f330:	4305      	orrs	r5, r0
    f332:	d000      	beq.n	f336 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x35c>
    f334:	340a      	adds	r4, #10
    f336:	4620      	mov	r0, r4
    f338:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f33a:	2061      	movs	r0, #97	; 0x61
    f33c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f33e:	b570      	push	{r4, r5, r6, lr}
    f340:	4604      	mov	r4, r0
    f342:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    f344:	2500      	movs	r5, #0
    f346:	b130      	cbz	r0, f356 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x37c>
    f348:	f7f4 f902 	bl	3550 <sym_K5GMJMBHBYPRCUIWKNEXGPSNQEZKEMBAP4JWHBQ>
    f34c:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    f34e:	fbb0 f2f1 	udiv	r2, r0, r1
    f352:	fb01 0512 	mls	r5, r1, r2, r0
    f356:	4620      	mov	r0, r4
    f358:	f7ff fc65 	bl	ec26 <sym_RYQA5YFFRJZLTYB2ISC2Y3WUY3XB3LBBL37F22Q>
    f35c:	e9f4 2138 	ldrd	r2, r1, [r4, #224]!	; 0xe0
    f360:	4428      	add	r0, r5
    f362:	2500      	movs	r5, #0
    f364:	1882      	adds	r2, r0, r2
    f366:	eb45 0001 	adc.w	r0, r5, r1
    f36a:	e9c4 2008 	strd	r2, r0, [r4, #32]
    f36e:	7425      	strb	r5, [r4, #16]
    f370:	2001      	movs	r0, #1
    f372:	76e0      	strb	r0, [r4, #27]
    f374:	2002      	movs	r0, #2
    f376:	76a0      	strb	r0, [r4, #26]
    f378:	3ce0      	subs	r4, #224	; 0xe0
    f37a:	4620      	mov	r0, r4
    f37c:	f7ff ffb8 	bl	f2f0 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x316>
    f380:	f8a4 00f8 	strh.w	r0, [r4, #248]	; 0xf8
    f384:	e9d4 0140 	ldrd	r0, r1, [r4, #256]	; 0x100
    f388:	e9c4 0138 	strd	r0, r1, [r4, #224]	; 0xe0
    f38c:	4620      	mov	r0, r4
    f38e:	f7ff ff16 	bl	f1be <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1e4>
    f392:	b930      	cbnz	r0, f3a2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3c8>
    f394:	f894 00c8 	ldrb.w	r0, [r4, #200]	; 0xc8
    f398:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
    f39c:	f7ff ffa6 	bl	f2ec <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x312>
    f3a0:	b128      	cbz	r0, f3ae <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x3d4>
    f3a2:	f8a4 50ea 	strh.w	r5, [r4, #234]	; 0xea
    f3a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f3aa:	f7ff bf2b 	b.w	f204 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x22a>
    f3ae:	f240 7141 	movw	r1, #1857	; 0x741
    f3b2:	2030      	movs	r0, #48	; 0x30
    f3b4:	f7f1 feba 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f3b8:	b510      	push	{r4, lr}
    f3ba:	4604      	mov	r4, r0
    f3bc:	2000      	movs	r0, #0
    f3be:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    f3c2:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    f3c6:	f7fb fd8d 	bl	aee4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f3ca:	2020      	movs	r0, #32
    f3cc:	f884 02a4 	strb.w	r0, [r4, #676]	; 0x2a4
    f3d0:	bd10      	pop	{r4, pc}
    f3d2:	b510      	push	{r4, lr}
    f3d4:	b140      	cbz	r0, f3e8 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x40e>
    f3d6:	2909      	cmp	r1, #9
    f3d8:	d22f      	bcs.n	f43a <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x460>
    f3da:	e8df f001 	tbb	[pc, r1]
    f3de:	1607      	.short	0x1607
    f3e0:	2e1a1e1e 	.word	0x2e1a1e1e
    f3e4:	002a2622 	.word	0x002a2622
    f3e8:	21d0      	movs	r1, #208	; 0xd0
    f3ea:	e023      	b.n	f434 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x45a>
    f3ec:	4604      	mov	r4, r0
    f3ee:	f7f4 fc81 	bl	3cf4 <sym_PY5KUATPBYOYJBMP6H7AVRPSEO7BZX2JK524O6A>
    f3f2:	b110      	cbz	r0, f3fa <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x420>
    f3f4:	f240 2189 	movw	r1, #649	; 0x289
    f3f8:	e01c      	b.n	f434 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x45a>
    f3fa:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
    f3fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f402:	f2a0 1005 	subw	r0, r0, #261	; 0x105
    f406:	f7fb bfab 	b.w	b360 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    f40a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f40e:	f000 b8bd 	b.w	f58c <__kernel_ram_size+0x94>
    f412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f416:	f7f9 b8eb 	b.w	85f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f41a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f41e:	f7ff be45 	b.w	f0ac <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0xd2>
    f422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f426:	f7ff bbfc 	b.w	ec22 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    f42a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f42e:	f7ff beb6 	b.w	f19e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1c4>
    f432:	21f0      	movs	r1, #240	; 0xf0
    f434:	2030      	movs	r0, #48	; 0x30
    f436:	f7f1 fe79 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f43a:	21f4      	movs	r1, #244	; 0xf4
    f43c:	e7fa      	b.n	f434 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x45a>
    f43e:	b510      	push	{r4, lr}
    f440:	0004      	movs	r4, r0
    f442:	d009      	beq.n	f458 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x47e>
    f444:	2200      	movs	r2, #0
    f446:	2909      	cmp	r1, #9
    f448:	d25d      	bcs.n	f506 <__kernel_ram_size+0xe>
    f44a:	e8df f001 	tbb	[pc, r1]
    f44e:	3b07      	.short	0x3b07
    f450:	5c3f4343 	.word	0x5c3f4343
    f454:	00584f48 	.word	0x00584f48
    f458:	2199      	movs	r1, #153	; 0x99
    f45a:	e051      	b.n	f500 <__kernel_ram_size+0x8>
    f45c:	f8c4 22ac 	str.w	r2, [r4, #684]	; 0x2ac
    f460:	f894 1270 	ldrb.w	r1, [r4, #624]	; 0x270
    f464:	4620      	mov	r0, r4
    f466:	b189      	cbz	r1, f48c <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4b2>
    f468:	f8b0 226e 	ldrh.w	r2, [r0, #622]	; 0x26e
    f46c:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
    f470:	428a      	cmp	r2, r1
    f472:	d106      	bne.n	f482 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4a8>
    f474:	f8b0 2224 	ldrh.w	r2, [r0, #548]	; 0x224
    f478:	1a51      	subs	r1, r2, r1
    f47a:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    f47e:	4611      	mov	r1, r2
    f480:	e00d      	b.n	f49e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c4>
    f482:	1a51      	subs	r1, r2, r1
    f484:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    f488:	b291      	uxth	r1, r2
    f48a:	e008      	b.n	f49e <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x4c4>
    f48c:	f8b0 126c 	ldrh.w	r1, [r0, #620]	; 0x26c
    f490:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
    f494:	1a89      	subs	r1, r1, r2
    f496:	f8a0 1226 	strh.w	r1, [r0, #550]	; 0x226
    f49a:	f8b0 126c 	ldrh.w	r1, [r0, #620]	; 0x26c
    f49e:	f8a0 1094 	strh.w	r1, [r0, #148]	; 0x94
    f4a2:	e9d0 12a2 	ldrd	r1, r2, [r0, #648]	; 0x288
    f4a6:	f8c0 1290 	str.w	r1, [r0, #656]	; 0x290
    f4aa:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
    f4ae:	f7f6 f88f 	bl	55d0 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA>
    f4b2:	f894 022b 	ldrb.w	r0, [r4, #555]	; 0x22b
    f4b6:	2800      	cmp	r0, #0
    f4b8:	d020      	beq.n	f4fc <__kernel_ram_size+0x4>
    f4ba:	4620      	mov	r0, r4
    f4bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f4c0:	f7f5 bea2 	b.w	5208 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x660>
    f4c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f4c8:	f000 b8ac 	b.w	f624 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>
    f4cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f4d0:	f7f9 b88e 	b.w	85f0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    f4d4:	4620      	mov	r0, r4
    f4d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f4da:	f7f5 bee9 	b.w	52b0 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x708>
    f4de:	2001      	movs	r0, #1
    f4e0:	f7fa fd06 	bl	9ef0 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    f4e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f4e8:	f7fe bc0f 	b.w	dd0a <sym_UXGGQ7KT7KLQURU53WAWGAVBCTGQC65UKGCUU4A>
    f4ec:	f894 025c 	ldrb.w	r0, [r4, #604]	; 0x25c
    f4f0:	2804      	cmp	r0, #4
    f4f2:	d001      	beq.n	f4f8 <__kernel_ram_size>
    f4f4:	21be      	movs	r1, #190	; 0xbe
    f4f6:	e003      	b.n	f500 <__kernel_ram_size+0x8>
    f4f8:	f884 225c 	strb.w	r2, [r4, #604]	; 0x25c
    f4fc:	bd10      	pop	{r4, pc}
    f4fe:	21c4      	movs	r1, #196	; 0xc4
    f500:	2030      	movs	r0, #48	; 0x30
    f502:	f7f1 fe13 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f506:	21c8      	movs	r1, #200	; 0xc8
    f508:	e7fa      	b.n	f500 <__kernel_ram_size+0x8>
    f50a:	b510      	push	{r4, lr}
    f50c:	f7f8 ff80 	bl	8410 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f510:	f64d 7141 	movw	r1, #57153	; 0xdf41
    f514:	4408      	add	r0, r1
    f516:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f51a:	fbb0 f0f1 	udiv	r0, r0, r1
    f51e:	f200 107f 	addw	r0, r0, #383	; 0x17f
    f522:	bd10      	pop	{r4, pc}
    f524:	b510      	push	{r4, lr}
    f526:	4604      	mov	r4, r0
    f528:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    f52c:	f7ff ffed 	bl	f50a <__kernel_ram_size+0x12>
    f530:	4601      	mov	r1, r0
    f532:	4620      	mov	r0, r4
    f534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f538:	f7fe bffd 	b.w	e536 <sym_DGN3THKILL676ISUGG6LI5PGTHVDBLTDPNXUCAA>
    f53c:	b538      	push	{r3, r4, r5, lr}
    f53e:	2500      	movs	r5, #0
    f540:	4604      	mov	r4, r0
    f542:	f880 525c 	strb.w	r5, [r0, #604]	; 0x25c
    f546:	f8a0 52a0 	strh.w	r5, [r0, #672]	; 0x2a0
    f54a:	462b      	mov	r3, r5
    f54c:	462a      	mov	r2, r5
    f54e:	4629      	mov	r1, r5
    f550:	9500      	str	r5, [sp, #0]
    f552:	f7f5 fc4f 	bl	4df4 <sym_XVWN3IZ65SG2YZAV5STIEBPJ2RGWTP2JZ3UEJLQ+0x24c>
    f556:	b120      	cbz	r0, f562 <__kernel_ram_size+0x6a>
    f558:	f240 2121 	movw	r1, #545	; 0x221
    f55c:	2030      	movs	r0, #48	; 0x30
    f55e:	f7f1 fde5 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f562:	f8c4 5258 	str.w	r5, [r4, #600]	; 0x258
    f566:	2001      	movs	r0, #1
    f568:	f8c4 5250 	str.w	r5, [r4, #592]	; 0x250
    f56c:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    f570:	f8a4 526e 	strh.w	r5, [r4, #622]	; 0x26e
    f574:	f8a4 526c 	strh.w	r5, [r4, #620]	; 0x26c
    f578:	3494      	adds	r4, #148	; 0x94
    f57a:	f884 51dd 	strb.w	r5, [r4, #477]	; 0x1dd
    f57e:	8820      	ldrh	r0, [r4, #0]
    f580:	1e40      	subs	r0, r0, #1
    f582:	8020      	strh	r0, [r4, #0]
    f584:	f8a4 520e 	strh.w	r5, [r4, #526]	; 0x20e
    f588:	2000      	movs	r0, #0
    f58a:	bd38      	pop	{r3, r4, r5, pc}
    f58c:	b570      	push	{r4, r5, r6, lr}
    f58e:	4605      	mov	r5, r0
    f590:	f7ff fb70 	bl	ec74 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    f594:	b9c8      	cbnz	r0, f5ca <__kernel_ram_size+0xd2>
    f596:	2100      	movs	r1, #0
    f598:	4628      	mov	r0, r5
    f59a:	f7ff fe0a 	bl	f1b2 <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y+0x1d8>
    f59e:	4604      	mov	r4, r0
    f5a0:	f8d5 00f4 	ldr.w	r0, [r5, #244]	; 0xf4
    f5a4:	42a0      	cmp	r0, r4
    f5a6:	d20e      	bcs.n	f5c6 <__kernel_ram_size+0xce>
    f5a8:	1a20      	subs	r0, r4, r0
    f5aa:	2868      	cmp	r0, #104	; 0x68
    f5ac:	d200      	bcs.n	f5b0 <__kernel_ram_size+0xb8>
    f5ae:	2068      	movs	r0, #104	; 0x68
    f5b0:	2103      	movs	r1, #3
    f5b2:	f7fa fcad 	bl	9f10 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    f5b6:	b130      	cbz	r0, f5c6 <__kernel_ram_size+0xce>
    f5b8:	4628      	mov	r0, r5
    f5ba:	f8c5 40f4 	str.w	r4, [r5, #244]	; 0xf4
    f5be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f5c2:	f7ff bb2e 	b.w	ec22 <sym_2K3JTQJLCTROZQI43ERT7GF5BTQ3SMAJXYMCVJI>
    f5c6:	f8c5 40f4 	str.w	r4, [r5, #244]	; 0xf4
    f5ca:	4628      	mov	r0, r5
    f5cc:	f7f4 fbae 	bl	3d2c <sym_ID5SI2L6AD3KMSDR72YSJZGVIA6DEYQZU7WJI3I>
    f5d0:	2800      	cmp	r0, #0
    f5d2:	d004      	beq.n	f5de <__kernel_ram_size+0xe6>
    f5d4:	f240 21bf 	movw	r1, #703	; 0x2bf
    f5d8:	2030      	movs	r0, #48	; 0x30
    f5da:	f7f1 fda7 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5de:	bd70      	pop	{r4, r5, r6, pc}
    f5e0:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f5e4:	f001 0307 	and.w	r3, r1, #7
    f5e8:	7802      	ldrb	r2, [r0, #0]
    f5ea:	2101      	movs	r1, #1
    f5ec:	4099      	lsls	r1, r3
    f5ee:	438a      	bics	r2, r1
    f5f0:	7002      	strb	r2, [r0, #0]
    f5f2:	4770      	bx	lr

0000f5f4 <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY>:
    f5f4:	b510      	push	{r4, lr}
    f5f6:	460c      	mov	r4, r1
    f5f8:	f7f2 f9c2 	bl	1980 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    f5fc:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    f600:	2820      	cmp	r0, #32
    f602:	d00c      	beq.n	f61e <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY+0x2a>
    f604:	f7fb fc90 	bl	af28 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    f608:	f894 02a4 	ldrb.w	r0, [r4, #676]	; 0x2a4
    f60c:	f7fb fc6a 	bl	aee4 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f610:	2800      	cmp	r0, #0
    f612:	d104      	bne.n	f61e <sym_PDDLBAI7RAK2OQ7ZHFU33L5KMJV5YKPLX5ITXAY+0x2a>
    f614:	f640 413d 	movw	r1, #3133	; 0xc3d
    f618:	2031      	movs	r0, #49	; 0x31
    f61a:	f7f1 fd87 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f61e:	bd10      	pop	{r4, pc}

0000f620 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>:
    f620:	2000      	movs	r0, #0
    f622:	4770      	bx	lr

0000f624 <sym_RUQGL7Y7CEVCWXKLY62UGVRWLQYUPKUGTSH7NVY>:
    f624:	f7f2 be50 	b.w	22c8 <sym_6BTYZXVNYPYTH2WUVFE5C5JVTZHQJAJ5IGD6OCA>

0000f628 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ>:
    f628:	2100      	movs	r1, #0
    f62a:	f880 109d 	strb.w	r1, [r0, #157]	; 0x9d
    f62e:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f632:	f880 10a1 	strb.w	r1, [r0, #161]	; 0xa1
    f636:	f890 122b 	ldrb.w	r1, [r0, #555]	; 0x22b
    f63a:	b109      	cbz	r1, f640 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x18>
    f63c:	2102      	movs	r1, #2
    f63e:	e000      	b.n	f642 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a>
    f640:	2103      	movs	r1, #3
    f642:	f7f5 ba6f 	b.w	4b24 <sym_EXAZKO22MNOFNIXIFHQ2Z4GAYMKBCE2UPJ6JSVI>
    f646:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    f64a:	28fe      	cmp	r0, #254	; 0xfe
    f64c:	d001      	beq.n	f652 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x2a>
    f64e:	2001      	movs	r0, #1
    f650:	4770      	bx	lr
    f652:	2000      	movs	r0, #0
    f654:	4770      	bx	lr
    f656:	b510      	push	{r4, lr}
    f658:	2801      	cmp	r0, #1
    f65a:	d006      	beq.n	f66a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f65c:	2802      	cmp	r0, #2
    f65e:	d004      	beq.n	f66a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x42>
    f660:	f44f 7125 	mov.w	r1, #660	; 0x294
    f664:	2006      	movs	r0, #6
    f666:	f7f1 fd61 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f66a:	bd10      	pop	{r4, pc}
    f66c:	1a40      	subs	r0, r0, r1
    f66e:	b200      	sxth	r0, r0
    f670:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    f674:	4288      	cmp	r0, r1
    f676:	dc01      	bgt.n	f67c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x54>
    f678:	2800      	cmp	r0, #0
    f67a:	dc01      	bgt.n	f680 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x58>
    f67c:	2001      	movs	r0, #1
    f67e:	4770      	bx	lr
    f680:	2000      	movs	r0, #0
    f682:	4770      	bx	lr
    f684:	2801      	cmp	r0, #1
    f686:	d002      	beq.n	f68e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x66>
    f688:	2802      	cmp	r0, #2
    f68a:	d105      	bne.n	f698 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    f68c:	e002      	b.n	f694 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x6c>
    f68e:	2901      	cmp	r1, #1
    f690:	d004      	beq.n	f69c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    f692:	e001      	b.n	f698 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x70>
    f694:	2902      	cmp	r1, #2
    f696:	d001      	beq.n	f69c <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x74>
    f698:	2000      	movs	r0, #0
    f69a:	4770      	bx	lr
    f69c:	2001      	movs	r0, #1
    f69e:	4770      	bx	lr
    f6a0:	6840      	ldr	r0, [r0, #4]
    f6a2:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f6a6:	2912      	cmp	r1, #18
    f6a8:	d001      	beq.n	f6ae <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x86>
    f6aa:	2002      	movs	r0, #2
    f6ac:	4770      	bx	lr
    f6ae:	2113      	movs	r1, #19
    f6b0:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f6b4:	2000      	movs	r0, #0
    f6b6:	4770      	bx	lr
    f6b8:	b510      	push	{r4, lr}
    f6ba:	6843      	ldr	r3, [r0, #4]
    f6bc:	4604      	mov	r4, r0
    f6be:	f893 012c 	ldrb.w	r0, [r3, #300]	; 0x12c
    f6c2:	2808      	cmp	r0, #8
    f6c4:	d20d      	bcs.n	f6e2 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xba>
    f6c6:	f500 7210 	add.w	r2, r0, #576	; 0x240
    f6ca:	f1c0 0008 	rsb	r0, r0, #8
    f6ce:	b2c1      	uxtb	r1, r0
    f6d0:	1898      	adds	r0, r3, r2
    f6d2:	f7f1 fdc9 	bl	1268 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    f6d6:	6861      	ldr	r1, [r4, #4]
    f6d8:	f891 212c 	ldrb.w	r2, [r1, #300]	; 0x12c
    f6dc:	4410      	add	r0, r2
    f6de:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    f6e2:	6862      	ldr	r2, [r4, #4]
    f6e4:	f892 112c 	ldrb.w	r1, [r2, #300]	; 0x12c
    f6e8:	3908      	subs	r1, #8
    f6ea:	2904      	cmp	r1, #4
    f6ec:	d20d      	bcs.n	f70a <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xe2>
    f6ee:	f501 708e 	add.w	r0, r1, #284	; 0x11c
    f6f2:	f1c1 0104 	rsb	r1, r1, #4
    f6f6:	b2c9      	uxtb	r1, r1
    f6f8:	4410      	add	r0, r2
    f6fa:	f7f1 fdb5 	bl	1268 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    f6fe:	6861      	ldr	r1, [r4, #4]
    f700:	f891 212c 	ldrb.w	r2, [r1, #300]	; 0x12c
    f704:	4410      	add	r0, r2
    f706:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    f70a:	6860      	ldr	r0, [r4, #4]
    f70c:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    f710:	290c      	cmp	r1, #12
    f712:	d30f      	bcc.n	f734 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x10c>
    f714:	d005      	beq.n	f722 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0xfa>
    f716:	f44f 610d 	mov.w	r1, #2256	; 0x8d0
    f71a:	f04f 0031 	mov.w	r0, #49	; 0x31
    f71e:	f7f1 fd05 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f722:	2100      	movs	r1, #0
    f724:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
    f728:	2101      	movs	r1, #1
    f72a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f72e:	2004      	movs	r0, #4
    f730:	f7f6 bdda 	b.w	62e8 <sym_GRKUQI62F6CK2HPCZKZRWSZ3PZVCGXTWPZAIMJA+0xd18>
    f734:	bd10      	pop	{r4, pc}
    f736:	6842      	ldr	r2, [r0, #4]
    f738:	2131      	movs	r1, #49	; 0x31
    f73a:	f882 109d 	strb.w	r1, [r2, #157]	; 0x9d
    f73e:	6840      	ldr	r0, [r0, #4]
    f740:	2100      	movs	r1, #0
    f742:	f880 12c4 	strb.w	r1, [r0, #708]	; 0x2c4
    f746:	4770      	bx	lr
    f748:	b510      	push	{r4, lr}
    f74a:	6841      	ldr	r1, [r0, #4]
    f74c:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    f750:	2a15      	cmp	r2, #21
    f752:	d004      	beq.n	f75e <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x136>
    f754:	f240 718e 	movw	r1, #1934	; 0x78e
    f758:	2031      	movs	r0, #49	; 0x31
    f75a:	f7f1 fce7 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f75e:	2201      	movs	r2, #1
    f760:	f881 20db 	strb.w	r2, [r1, #219]	; 0xdb
    f764:	6840      	ldr	r0, [r0, #4]
    f766:	2116      	movs	r1, #22
    f768:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f76c:	bd10      	pop	{r4, pc}
    f76e:	f7ff b8c1 	b.w	e8f4 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>
    f772:	b510      	push	{r4, lr}
    f774:	6841      	ldr	r1, [r0, #4]
    f776:	f891 209e 	ldrb.w	r2, [r1, #158]	; 0x9e
    f77a:	2a11      	cmp	r2, #17
    f77c:	d004      	beq.n	f788 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x160>
    f77e:	f240 7186 	movw	r1, #1926	; 0x786
    f782:	2031      	movs	r0, #49	; 0x31
    f784:	f7f1 fcd2 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f788:	2201      	movs	r2, #1
    f78a:	f881 20db 	strb.w	r2, [r1, #219]	; 0xdb
    f78e:	6840      	ldr	r0, [r0, #4]
    f790:	2112      	movs	r1, #18
    f792:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f796:	bd10      	pop	{r4, pc}
    f798:	b510      	push	{r4, lr}
    f79a:	6841      	ldr	r1, [r0, #4]
    f79c:	f891 009e 	ldrb.w	r0, [r1, #158]	; 0x9e
    f7a0:	2822      	cmp	r0, #34	; 0x22
    f7a2:	d005      	beq.n	f7b0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x188>
    f7a4:	b120      	cbz	r0, f7b0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x188>
    f7a6:	f240 71f2 	movw	r1, #2034	; 0x7f2
    f7aa:	2031      	movs	r0, #49	; 0x31
    f7ac:	f7f1 fcbe 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f7b0:	2023      	movs	r0, #35	; 0x23
    f7b2:	f881 009e 	strb.w	r0, [r1, #158]	; 0x9e
    f7b6:	bd10      	pop	{r4, pc}
    f7b8:	b510      	push	{r4, lr}
    f7ba:	6840      	ldr	r0, [r0, #4]
    f7bc:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f7c0:	2916      	cmp	r1, #22
    f7c2:	d004      	beq.n	f7ce <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1a6>
    f7c4:	f240 719b 	movw	r1, #1947	; 0x79b
    f7c8:	2031      	movs	r0, #49	; 0x31
    f7ca:	f7f1 fcaf 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f7ce:	211a      	movs	r1, #26
    f7d0:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f7d4:	bd10      	pop	{r4, pc}
    f7d6:	f7ff b87b 	b.w	e8d0 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>
    f7da:	b510      	push	{r4, lr}
    f7dc:	6840      	ldr	r0, [r0, #4]
    f7de:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    f7e2:	2916      	cmp	r1, #22
    f7e4:	d004      	beq.n	f7f0 <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1c8>
    f7e6:	f240 7195 	movw	r1, #1941	; 0x795
    f7ea:	2031      	movs	r0, #49	; 0x31
    f7ec:	f7f1 fc9e 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f7f0:	2118      	movs	r1, #24
    f7f2:	f880 109e 	strb.w	r1, [r0, #158]	; 0x9e
    f7f6:	bd10      	pop	{r4, pc}
    f7f8:	f7ff b901 	b.w	e9fe <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>
    f7fc:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f800:	f001 0107 	and.w	r1, r1, #7
    f804:	7800      	ldrb	r0, [r0, #0]
    f806:	40c8      	lsrs	r0, r1
    f808:	f000 0001 	and.w	r0, r0, #1
    f80c:	4770      	bx	lr

0000f80e <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>:
    f80e:	b510      	push	{r4, lr}
    f810:	2801      	cmp	r0, #1
    f812:	d006      	beq.n	f822 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x14>
    f814:	2802      	cmp	r0, #2
    f816:	d006      	beq.n	f826 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x18>
    f818:	f240 21a7 	movw	r1, #679	; 0x2a7
    f81c:	2078      	movs	r0, #120	; 0x78
    f81e:	f7f1 fc85 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f822:	2000      	movs	r0, #0
    f824:	bd10      	pop	{r4, pc}
    f826:	2001      	movs	r0, #1
    f828:	bd10      	pop	{r4, pc}

0000f82a <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>:
    f82a:	207f      	movs	r0, #127	; 0x7f
    f82c:	f000 b88c 	b.w	f948 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x92>

0000f830 <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>:
    f830:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f834:	f000 b888 	b.w	f948 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x92>

0000f838 <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>:
    f838:	b510      	push	{r4, lr}
    f83a:	4604      	mov	r4, r0
    f83c:	f7f8 f8c6 	bl	79cc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f840:	1e64      	subs	r4, r4, #1
    f842:	b2e2      	uxtb	r2, r4
    f844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f848:	f000 b85b 	b.w	f902 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x4c>

0000f84c <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>:
    f84c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f850:	4607      	mov	r7, r0
    f852:	461e      	mov	r6, r3
    f854:	4690      	mov	r8, r2
    f856:	460c      	mov	r4, r1
    f858:	4608      	mov	r0, r1
    f85a:	f7ff ffed 	bl	f838 <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>
    f85e:	b1e8      	cbz	r0, f89c <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>
    f860:	687d      	ldr	r5, [r7, #4]
    f862:	2121      	movs	r1, #33	; 0x21
    f864:	f105 00ec 	add.w	r0, r5, #236	; 0xec
    f868:	3580      	adds	r5, #128	; 0x80
    f86a:	f7ff ffc7 	bl	f7fc <sym_IYZQNCOB4T4XO27DREWRIWJFVHVS355NEDBEGEQ+0x1d4>
    f86e:	b1b8      	cbz	r0, f8a0 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
    f870:	1e64      	subs	r4, r4, #1
    f872:	6f29      	ldr	r1, [r5, #112]	; 0x70
    f874:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    f876:	b2e2      	uxtb	r2, r4
    f878:	f000 f843 	bl	f902 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x4c>
    f87c:	b180      	cbz	r0, f8a0 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
    f87e:	6878      	ldr	r0, [r7, #4]
    f880:	f890 1149 	ldrb.w	r1, [r0, #329]	; 0x149
    f884:	f88d 1000 	strb.w	r1, [sp]
    f888:	9900      	ldr	r1, [sp, #0]
    f88a:	9100      	str	r1, [sp, #0]
    f88c:	f89d 1000 	ldrb.w	r1, [sp]
    f890:	f200 1047 	addw	r0, r0, #327	; 0x147
    f894:	b131      	cbz	r1, f8a4 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x58>
    f896:	203a      	movs	r0, #58	; 0x3a
    f898:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f89c:	2011      	movs	r0, #17
    f89e:	e7fb      	b.n	f898 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>
    f8a0:	201a      	movs	r0, #26
    f8a2:	e7f9      	b.n	f898 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>
    f8a4:	1c81      	adds	r1, r0, #2
    f8a6:	700e      	strb	r6, [r1, #0]
    f8a8:	2101      	movs	r1, #1
    f8aa:	40a1      	lsls	r1, r4
    f8ac:	7001      	strb	r1, [r0, #0]
    f8ae:	f880 8001 	strb.w	r8, [r0, #1]
    f8b2:	2000      	movs	r0, #0
    f8b4:	e7f0      	b.n	f898 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x4c>

0000f8b6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
    f8b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f8ba:	460d      	mov	r5, r1
    f8bc:	4606      	mov	r6, r0
    f8be:	f7ff ffb4 	bl	f82a <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>
    f8c2:	4607      	mov	r7, r0
    f8c4:	f7ff ffb4 	bl	f830 <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>
    f8c8:	2400      	movs	r4, #0
    f8ca:	4285      	cmp	r5, r0
    f8cc:	d100      	bne.n	f8d0 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
    f8ce:	2401      	movs	r4, #1
    f8d0:	42bd      	cmp	r5, r7
    f8d2:	d101      	bne.n	f8d8 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
    f8d4:	f044 0402 	orr.w	r4, r4, #2
    f8d8:	f000 f826 	bl	f928 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x72>
    f8dc:	2200      	movs	r2, #0
    f8de:	4601      	mov	r1, r0
    f8e0:	2301      	movs	r3, #1
    f8e2:	fa03 f002 	lsl.w	r0, r3, r2
    f8e6:	4208      	tst	r0, r1
    f8e8:	d005      	beq.n	f8f6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x40>
    f8ea:	eb06 0042 	add.w	r0, r6, r2, lsl #1
    f8ee:	f880 5070 	strb.w	r5, [r0, #112]	; 0x70
    f8f2:	f880 406f 	strb.w	r4, [r0, #111]	; 0x6f
    f8f6:	1c52      	adds	r2, r2, #1
    f8f8:	b2d2      	uxtb	r2, r2
    f8fa:	2a02      	cmp	r2, #2
    f8fc:	d3f1      	bcc.n	f8e2 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
    f8fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f902:	b510      	push	{r4, lr}
    f904:	4614      	mov	r4, r2
    f906:	4602      	mov	r2, r0
    f908:	2000      	movs	r0, #0
    f90a:	4603      	mov	r3, r0
    f90c:	2c02      	cmp	r4, #2
    f90e:	d205      	bcs.n	f91c <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x66>
    f910:	4610      	mov	r0, r2
    f912:	f000 f810 	bl	f936 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x80>
    f916:	2101      	movs	r1, #1
    f918:	40a1      	lsls	r1, r4
    f91a:	b2cb      	uxtb	r3, r1
    f91c:	4203      	tst	r3, r0
    f91e:	d001      	beq.n	f924 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x6e>
    f920:	2001      	movs	r0, #1
    f922:	bd10      	pop	{r4, pc}
    f924:	2000      	movs	r0, #0
    f926:	bd10      	pop	{r4, pc}
    f928:	b510      	push	{r4, lr}
    f92a:	f7f8 f84f 	bl	79cc <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f92e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f932:	f000 b800 	b.w	f936 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x80>
    f936:	0a00      	lsrs	r0, r0, #8
    f938:	2201      	movs	r2, #1
    f93a:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    f93e:	07c0      	lsls	r0, r0, #31
    f940:	d000      	beq.n	f944 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x8e>
    f942:	2203      	movs	r2, #3
    f944:	4610      	mov	r0, r2
    f946:	4770      	bx	lr
    f948:	b508      	push	{r3, lr}
    f94a:	2301      	movs	r3, #1
    f94c:	f640 1288 	movw	r2, #2440	; 0x988
    f950:	4669      	mov	r1, sp
    f952:	f7f9 fa5d 	bl	8e10 <mpsl_fem_tx_power_split>
    f956:	bd08      	pop	{r3, pc}
    f958:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f95c:	f001 0107 	and.w	r1, r1, #7
    f960:	7800      	ldrb	r0, [r0, #0]
    f962:	40c8      	lsrs	r0, r1
    f964:	f000 0001 	and.w	r0, r0, #1
    f968:	4770      	bx	lr
    f96a:	b118      	cbz	r0, f974 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xbe>
    f96c:	2802      	cmp	r0, #2
    f96e:	d001      	beq.n	f974 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xbe>
    f970:	2001      	movs	r0, #1
    f972:	4770      	bx	lr
    f974:	2000      	movs	r0, #0
    f976:	4770      	bx	lr

0000f978 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    f978:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f97a:	7881      	ldrb	r1, [r0, #2]
    f97c:	2500      	movs	r5, #0
    f97e:	4604      	mov	r4, r0
    f980:	291a      	cmp	r1, #26
    f982:	d024      	beq.n	f9ce <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    f984:	dc0e      	bgt.n	f9a4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    f986:	2916      	cmp	r1, #22
    f988:	d22b      	bcs.n	f9e2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f98a:	e8df f001 	tbb	[pc, r1]
    f98e:	2a2a      	.short	0x2a2a
    f990:	202a2a2a 	.word	0x202a2a2a
    f994:	2a2a2a2a 	.word	0x2a2a2a2a
    f998:	2a2a2a2a 	.word	0x2a2a2a2a
    f99c:	2a2a2a2a 	.word	0x2a2a2a2a
    f9a0:	2020202a 	.word	0x2020202a
    f9a4:	292a      	cmp	r1, #42	; 0x2a
    f9a6:	d01c      	beq.n	f9e2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f9a8:	dc0b      	bgt.n	f9c2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    f9aa:	f1a1 011e 	sub.w	r1, r1, #30
    f9ae:	290c      	cmp	r1, #12
    f9b0:	d217      	bcs.n	f9e2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f9b2:	e8df f001 	tbb	[pc, r1]
    f9b6:	1616      	.short	0x1616
    f9b8:	16161616 	.word	0x16161616
    f9bc:	16161616 	.word	0x16161616
    f9c0:	0c16      	.short	0x0c16
    f9c2:	393a      	subs	r1, #58	; 0x3a
    f9c4:	2902      	cmp	r1, #2
    f9c6:	d20c      	bcs.n	f9e2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f9c8:	e8df f001 	tbb	[pc, r1]
    f9cc:	010b      	.short	0x010b
    f9ce:	8820      	ldrh	r0, [r4, #0]
    f9d0:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    f9d4:	d205      	bcs.n	f9e2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f9d6:	4669      	mov	r1, sp
    f9d8:	f7fe f9d4 	bl	dd84 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f9dc:	b118      	cbz	r0, f9e6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
    f9de:	2002      	movs	r0, #2
    f9e0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f9e2:	2012      	movs	r0, #18
    f9e4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f9e6:	9901      	ldr	r1, [sp, #4]
    f9e8:	4668      	mov	r0, sp
    f9ea:	f891 2130 	ldrb.w	r2, [r1, #304]	; 0x130
    f9ee:	f88d 2008 	strb.w	r2, [sp, #8]
    f9f2:	9a02      	ldr	r2, [sp, #8]
    f9f4:	9202      	str	r2, [sp, #8]
    f9f6:	f89d 2008 	ldrb.w	r2, [sp, #8]
    f9fa:	f501 7198 	add.w	r1, r1, #304	; 0x130
    f9fe:	b10a      	cbz	r2, fa04 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8c>
    fa00:	200c      	movs	r0, #12
    fa02:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    fa04:	78a2      	ldrb	r2, [r4, #2]
    fa06:	704a      	strb	r2, [r1, #1]
    fa08:	22ff      	movs	r2, #255	; 0xff
    fa0a:	700a      	strb	r2, [r1, #0]
    fa0c:	f7fe fccc 	bl	e3a8 <sym_24AALTDC2IQ6VNWU2ALOY4V3RG5R2RARTUG4AZY>
    fa10:	4628      	mov	r0, r5
    fa12:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fa14 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    fa14:	b510      	push	{r4, lr}
    fa16:	4604      	mov	r4, r0
    fa18:	f7f7 ff1e 	bl	7858 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    fa1c:	b108      	cbz	r0, fa22 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    fa1e:	200c      	movs	r0, #12
    fa20:	bd10      	pop	{r4, pc}
    fa22:	7820      	ldrb	r0, [r4, #0]
    fa24:	b118      	cbz	r0, fa2e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    fa26:	2801      	cmp	r0, #1
    fa28:	d001      	beq.n	fa2e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    fa2a:	2012      	movs	r0, #18
    fa2c:	bd10      	pop	{r4, pc}
    fa2e:	f7ff ff9c 	bl	f96a <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    fa32:	1c61      	adds	r1, r4, #1
    fa34:	f7f3 ff96 	bl	3964 <sym_VT36OYILRYR2ODZV34U7WHVGGSRS7VN6JG7WPYI>
    fa38:	b108      	cbz	r0, fa3e <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    fa3a:	2000      	movs	r0, #0
    fa3c:	bd10      	pop	{r4, pc}
    fa3e:	2007      	movs	r0, #7
    fa40:	bd10      	pop	{r4, pc}

0000fa42 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    fa42:	b510      	push	{r4, lr}
    fa44:	f7f7 ff08 	bl	7858 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    fa48:	b108      	cbz	r0, fa4e <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    fa4a:	200c      	movs	r0, #12
    fa4c:	bd10      	pop	{r4, pc}
    fa4e:	f7f3 ffe7 	bl	3a20 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
    fa52:	2000      	movs	r0, #0
    fa54:	f7f3 f890 	bl	2b78 <sym_JQOBED6Y6P46KNYF2UD53QPDVNRPPOKMQL6EEBY>
    fa58:	2000      	movs	r0, #0
    fa5a:	bd10      	pop	{r4, pc}

0000fa5c <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    fa5c:	b510      	push	{r4, lr}
    fa5e:	460b      	mov	r3, r1
    fa60:	2201      	movs	r2, #1
    fa62:	f100 0110 	add.w	r1, r0, #16
    fa66:	f7ff f83a 	bl	eade <sym_EQ3I7ZZBTEWAJZC2TH7LIOBRZMKEZRCLT4UWSSQ>
    fa6a:	2000      	movs	r0, #0
    fa6c:	bd10      	pop	{r4, pc}

0000fa6e <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA>:
    fa6e:	b510      	push	{r4, lr}
    fa70:	8800      	ldrh	r0, [r0, #0]
    fa72:	2100      	movs	r1, #0
    fa74:	f7f1 fe62 	bl	173c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fa78:	b118      	cbz	r0, fa82 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x14>
    fa7a:	f890 12b0 	ldrb.w	r1, [r0, #688]	; 0x2b0
    fa7e:	b111      	cbz	r1, fa86 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x18>
    fa80:	e007      	b.n	fa92 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x24>
    fa82:	2002      	movs	r0, #2
    fa84:	bd10      	pop	{r4, pc}
    fa86:	f890 109e 	ldrb.w	r1, [r0, #158]	; 0x9e
    fa8a:	2915      	cmp	r1, #21
    fa8c:	d003      	beq.n	fa96 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    fa8e:	2916      	cmp	r1, #22
    fa90:	d001      	beq.n	fa96 <sym_FYIHUHKV4DLEPRADEPLDQO3YFUPWZFWRUJ4JAOA+0x28>
    fa92:	200c      	movs	r0, #12
    fa94:	bd10      	pop	{r4, pc}
    fa96:	2102      	movs	r1, #2
    fa98:	f880 12b0 	strb.w	r1, [r0, #688]	; 0x2b0
    fa9c:	2000      	movs	r0, #0
    fa9e:	bd10      	pop	{r4, pc}

0000faa0 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI>:
    faa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    faa2:	4605      	mov	r5, r0
    faa4:	8800      	ldrh	r0, [r0, #0]
    faa6:	2100      	movs	r1, #0
    faa8:	f7f1 fe48 	bl	173c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    faac:	0004      	movs	r4, r0
    faae:	d003      	beq.n	fab8 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x18>
    fab0:	f894 02b0 	ldrb.w	r0, [r4, #688]	; 0x2b0
    fab4:	b110      	cbz	r0, fabc <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x1c>
    fab6:	e011      	b.n	fadc <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    fab8:	2002      	movs	r0, #2
    faba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fabc:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
    fac0:	2815      	cmp	r0, #21
    fac2:	d001      	beq.n	fac8 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x28>
    fac4:	2816      	cmp	r0, #22
    fac6:	d109      	bne.n	fadc <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x3c>
    fac8:	f894 02e4 	ldrb.w	r0, [r4, #740]	; 0x2e4
    facc:	f88d 0000 	strb.w	r0, [sp]
    fad0:	9800      	ldr	r0, [sp, #0]
    fad2:	9000      	str	r0, [sp, #0]
    fad4:	f89d 0000 	ldrb.w	r0, [sp]
    fad8:	2601      	movs	r6, #1
    fada:	b108      	cbz	r0, fae0 <sym_NLJDQQVQW4HF3HHWCCOGCGX457WQXW2LVV5NUTI+0x40>
    fadc:	200c      	movs	r0, #12
    fade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fae0:	2210      	movs	r2, #16
    fae2:	1ca9      	adds	r1, r5, #2
    fae4:	f204 20b1 	addw	r0, r4, #689	; 0x2b1
    fae8:	f001 f886 	bl	10bf8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    faec:	f884 62b0 	strb.w	r6, [r4, #688]	; 0x2b0
    faf0:	2000      	movs	r0, #0
    faf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000faf4 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    faf4:	b510      	push	{r4, lr}
    faf6:	2108      	movs	r1, #8
    faf8:	f7f1 fbbc 	bl	1274 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    fafc:	2000      	movs	r0, #0
    fafe:	bd10      	pop	{r4, pc}

0000fb00 <sym_IZN3QWH7I4A7OX5E6DK53W35W3UX25DTZ6CQ57Q>:
    fb00:	b510      	push	{r4, lr}
    fb02:	4604      	mov	r4, r0
    fb04:	f7f7 fd6c 	bl	75e0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x48>
    fb08:	f7ff f8be 	bl	ec88 <sym_L5UCRJFFWEVVII5IYG6PAKIQHXM34B62KO6ERPY>
    fb0c:	f7f3 f936 	bl	2d7c <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fb10:	7020      	strb	r0, [r4, #0]
    fb12:	2000      	movs	r0, #0
    fb14:	bd10      	pop	{r4, pc}

0000fb16 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    fb16:	21fb      	movs	r1, #251	; 0xfb
    fb18:	8001      	strh	r1, [r0, #0]
    fb1a:	f640 0248 	movw	r2, #2120	; 0x848
    fb1e:	8042      	strh	r2, [r0, #2]
    fb20:	8081      	strh	r1, [r0, #4]
    fb22:	80c2      	strh	r2, [r0, #6]
    fb24:	2000      	movs	r0, #0
    fb26:	4770      	bx	lr

0000fb28 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    fb28:	b51c      	push	{r2, r3, r4, lr}
    fb2a:	8800      	ldrh	r0, [r0, #0]
    fb2c:	4669      	mov	r1, sp
    fb2e:	f7fe f929 	bl	dd84 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fb32:	2800      	cmp	r0, #0
    fb34:	d10d      	bne.n	fb52 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
    fb36:	f89d 0000 	ldrb.w	r0, [sp]
    fb3a:	9c01      	ldr	r4, [sp, #4]
    fb3c:	2801      	cmp	r0, #1
    fb3e:	f504 7498 	add.w	r4, r4, #304	; 0x130
    fb42:	d103      	bne.n	fb4c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x24>
    fb44:	9801      	ldr	r0, [sp, #4]
    fb46:	f000 fcd1 	bl	104ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x28e>
    fb4a:	b118      	cbz	r0, fb54 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2c>
    fb4c:	7ce0      	ldrb	r0, [r4, #19]
    fb4e:	b118      	cbz	r0, fb58 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x30>
    fb50:	203a      	movs	r0, #58	; 0x3a
    fb52:	bd1c      	pop	{r2, r3, r4, pc}
    fb54:	2002      	movs	r0, #2
    fb56:	bd1c      	pop	{r2, r3, r4, pc}
    fb58:	2001      	movs	r0, #1
    fb5a:	74e0      	strb	r0, [r4, #19]
    fb5c:	2000      	movs	r0, #0
    fb5e:	bd1c      	pop	{r2, r3, r4, pc}

0000fb60 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    fb60:	b510      	push	{r4, lr}
    fb62:	4604      	mov	r4, r0
    fb64:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    fb68:	f000 fcfc 	bl	10564 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x306>
    fb6c:	f7f3 f906 	bl	2d7c <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fb70:	7020      	strb	r0, [r4, #0]
    fb72:	f000 fcb8 	bl	104e6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
    fb76:	f7f3 f901 	bl	2d7c <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fb7a:	7060      	strb	r0, [r4, #1]
    fb7c:	2000      	movs	r0, #0
    fb7e:	bd10      	pop	{r4, pc}

0000fb80 <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    fb80:	b510      	push	{r4, lr}
    fb82:	4604      	mov	r4, r0
    fb84:	f7f3 ff52 	bl	3a2c <sym_MD2ACKWOI3UMWSI6IONGH6VN62ROA3VVQP7HYBQ>
    fb88:	7020      	strb	r0, [r4, #0]
    fb8a:	2000      	movs	r0, #0
    fb8c:	bd10      	pop	{r4, pc}

0000fb8e <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    fb8e:	b510      	push	{r4, lr}
    fb90:	4604      	mov	r4, r0
    fb92:	f7f7 fe61 	bl	7858 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x240>
    fb96:	b108      	cbz	r0, fb9c <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    fb98:	200c      	movs	r0, #12
    fb9a:	bd10      	pop	{r4, pc}
    fb9c:	7820      	ldrb	r0, [r4, #0]
    fb9e:	b108      	cbz	r0, fba4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    fba0:	2801      	cmp	r0, #1
    fba2:	d107      	bne.n	fbb4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fba4:	f7ff fee1 	bl	f96a <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xb4>
    fba8:	1c61      	adds	r1, r4, #1
    fbaa:	f7f3 ff19 	bl	39e0 <sym_3BV6HS2RZST6R6C5ZWOISO6OTZHTSW3BAFXBSVQ>
    fbae:	b108      	cbz	r0, fbb4 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    fbb0:	2000      	movs	r0, #0
    fbb2:	bd10      	pop	{r4, pc}
    fbb4:	2012      	movs	r0, #18
    fbb6:	bd10      	pop	{r4, pc}

0000fbb8 <sym_KXE6R52JHXVKOK6AHXAXVCPJHWR4FK73UB2AK7I>:
    fbb8:	b51c      	push	{r2, r3, r4, lr}
    fbba:	4604      	mov	r4, r0
    fbbc:	f7f7 fd10 	bl	75e0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x48>
    fbc0:	2000      	movs	r0, #0
    fbc2:	f88d 0002 	strb.w	r0, [sp, #2]
    fbc6:	2103      	movs	r1, #3
    fbc8:	f88d 1001 	strb.w	r1, [sp, #1]
    fbcc:	f814 1b01 	ldrb.w	r1, [r4], #1
    fbd0:	f88d 1003 	strb.w	r1, [sp, #3]
    fbd4:	f88d 0000 	strb.w	r0, [sp]
    fbd8:	4668      	mov	r0, sp
    fbda:	9401      	str	r4, [sp, #4]
    fbdc:	f000 f991 	bl	ff02 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>
    fbe0:	bd1c      	pop	{r2, r3, r4, pc}

0000fbe2 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ>:
    fbe2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    fbe4:	4605      	mov	r5, r0
    fbe6:	f7f7 fcfb 	bl	75e0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x48>
    fbea:	4606      	mov	r6, r0
    fbec:	7828      	ldrb	r0, [r5, #0]
    fbee:	2400      	movs	r4, #0
    fbf0:	b160      	cbz	r0, fc0c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    fbf2:	f88d 4000 	strb.w	r4, [sp]
    fbf6:	2001      	movs	r0, #1
    fbf8:	f10d 0101 	add.w	r1, sp, #1
    fbfc:	f7f2 f9d4 	bl	1fa8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    fc00:	b120      	cbz	r0, fc0c <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x2a>
    fc02:	4668      	mov	r0, sp
    fc04:	f000 f897 	bl	fd36 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>
    fc08:	2800      	cmp	r0, #0
    fc0a:	d112      	bne.n	fc32 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    fc0c:	f88d 400c 	strb.w	r4, [sp, #12]
    fc10:	4630      	mov	r0, r6
    fc12:	f7ff f82f 	bl	ec74 <sym_XRU76NANM3C4EMKWQU3DF6CELSRNDV6766IKPJI>
    fc16:	b118      	cbz	r0, fc20 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x3e>
    fc18:	2080      	movs	r0, #128	; 0x80
    fc1a:	f8ad 000d 	strh.w	r0, [sp, #13]
    fc1e:	e001      	b.n	fc24 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x42>
    fc20:	f8ad 400d 	strh.w	r4, [sp, #13]
    fc24:	f88d 400f 	strb.w	r4, [sp, #15]
    fc28:	7828      	ldrb	r0, [r5, #0]
    fc2a:	2801      	cmp	r0, #1
    fc2c:	d003      	beq.n	fc36 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x54>
    fc2e:	b138      	cbz	r0, fc40 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x5e>
    fc30:	2012      	movs	r0, #18
    fc32:	b004      	add	sp, #16
    fc34:	bd70      	pop	{r4, r5, r6, pc}
    fc36:	a903      	add	r1, sp, #12
    fc38:	4630      	mov	r0, r6
    fc3a:	f7f7 fced 	bl	7618 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ>
    fc3e:	e7f8      	b.n	fc32 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>
    fc40:	4630      	mov	r0, r6
    fc42:	f000 fc69 	bl	10518 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2ba>
    fc46:	e7f4      	b.n	fc32 <sym_JU2KBYZVAT7EYGVZA4FU7TNK2PDUQNCWUBE5MWQ+0x50>

0000fc48 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI>:
    fc48:	b530      	push	{r4, r5, lr}
    fc4a:	b08b      	sub	sp, #44	; 0x2c
    fc4c:	4604      	mov	r4, r0
    fc4e:	f7f7 fcc7 	bl	75e0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x48>
    fc52:	4602      	mov	r2, r0
    fc54:	7920      	ldrb	r0, [r4, #4]
    fc56:	2804      	cmp	r0, #4
    fc58:	d803      	bhi.n	fc62 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1a>
    fc5a:	8860      	ldrh	r0, [r4, #2]
    fc5c:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    fc60:	d902      	bls.n	fc68 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x20>
    fc62:	2012      	movs	r0, #18
    fc64:	b00b      	add	sp, #44	; 0x2c
    fc66:	bd30      	pop	{r4, r5, pc}
    fc68:	2500      	movs	r5, #0
    fc6a:	f88d 5004 	strb.w	r5, [sp, #4]
    fc6e:	7921      	ldrb	r1, [r4, #4]
    fc70:	9500      	str	r5, [sp, #0]
    fc72:	f89d 0000 	ldrb.w	r0, [sp]
    fc76:	2905      	cmp	r1, #5
    fc78:	f040 0010 	orr.w	r0, r0, #16
    fc7c:	f88d 0000 	strb.w	r0, [sp]
    fc80:	d254      	bcs.n	fd2c <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0xe4>
    fc82:	e8df f001 	tbb	[pc, r1]
    fc86:	0803      	.short	0x0803
    fc88:	000b1105 	.word	0x000b1105
    fc8c:	f040 0001 	orr.w	r0, r0, #1
    fc90:	f040 0002 	orr.w	r0, r0, #2
    fc94:	e006      	b.n	fca4 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x5c>
    fc96:	f040 0009 	orr.w	r0, r0, #9
    fc9a:	e001      	b.n	fca0 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x58>
    fc9c:	f040 0001 	orr.w	r0, r0, #1
    fca0:	f040 0004 	orr.w	r0, r0, #4
    fca4:	f88d 0000 	strb.w	r0, [sp]
    fca8:	f8bd 0000 	ldrh.w	r0, [sp]
    fcac:	9000      	str	r0, [sp, #0]
    fcae:	f8bd 0000 	ldrh.w	r0, [sp]
    fcb2:	f8ad 0005 	strh.w	r0, [sp, #5]
    fcb6:	8821      	ldrh	r1, [r4, #0]
    fcb8:	f8dd 0006 	ldr.w	r0, [sp, #6]
    fcbc:	f361 201f 	bfi	r0, r1, #8, #24
    fcc0:	f8cd 0006 	str.w	r0, [sp, #6]
    fcc4:	8861      	ldrh	r1, [r4, #2]
    fcc6:	f8dd 0009 	ldr.w	r0, [sp, #9]
    fcca:	f361 201f 	bfi	r0, r1, #8, #24
    fcce:	f8cd 0009 	str.w	r0, [sp, #9]
    fcd2:	7b60      	ldrb	r0, [r4, #13]
    fcd4:	f88d 000d 	strb.w	r0, [sp, #13]
    fcd8:	7960      	ldrb	r0, [r4, #5]
    fcda:	f88d 000e 	strb.w	r0, [sp, #14]
    fcde:	79a0      	ldrb	r0, [r4, #6]
    fce0:	f88d 000f 	strb.w	r0, [sp, #15]
    fce4:	f8d4 0007 	ldr.w	r0, [r4, #7]
    fce8:	9004      	str	r0, [sp, #16]
    fcea:	f8b4 000b 	ldrh.w	r0, [r4, #11]
    fcee:	f8ad 0014 	strh.w	r0, [sp, #20]
    fcf2:	7ba0      	ldrb	r0, [r4, #14]
    fcf4:	f88d 0016 	strb.w	r0, [sp, #22]
    fcf8:	207f      	movs	r0, #127	; 0x7f
    fcfa:	f88d 0017 	strb.w	r0, [sp, #23]
    fcfe:	2001      	movs	r0, #1
    fd00:	f88d 0018 	strb.w	r0, [sp, #24]
    fd04:	f88d 5019 	strb.w	r5, [sp, #25]
    fd08:	f88d 001a 	strb.w	r0, [sp, #26]
    fd0c:	f88d 501b 	strb.w	r5, [sp, #27]
    fd10:	4610      	mov	r0, r2
    fd12:	f7fe ffcf 	bl	ecb4 <sym_2T6B57C7Z3NDT5ASKUJUGCCL3DBEO2AO4XX23BI>
    fd16:	f88d 001c 	strb.w	r0, [sp, #28]
    fd1a:	f88d 501d 	strb.w	r5, [sp, #29]
    fd1e:	f88d 501e 	strb.w	r5, [sp, #30]
    fd22:	a909      	add	r1, sp, #36	; 0x24
    fd24:	a801      	add	r0, sp, #4
    fd26:	f7f7 faad 	bl	7284 <sym_A32XXMQ5QRPQRH3R656RZXETZB6Y54SG45FSCYI>
    fd2a:	e79b      	b.n	fc64 <sym_CC522QK4M5MTSPVPJNGJXKYD5O54FC2LFC3D3QI+0x1c>
    fd2c:	f241 31a7 	movw	r1, #5031	; 0x13a7
    fd30:	2039      	movs	r0, #57	; 0x39
    fd32:	f7f1 f9fb 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000fd36 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II>:
    fd36:	b570      	push	{r4, r5, r6, lr}
    fd38:	4604      	mov	r4, r0
    fd3a:	7800      	ldrb	r0, [r0, #0]
    fd3c:	2101      	movs	r1, #1
    fd3e:	f7f1 fcfd 	bl	173c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fd42:	0005      	movs	r5, r0
    fd44:	d007      	beq.n	fd56 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x20>
    fd46:	f7ff f945 	bl	efd4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    fd4a:	b160      	cbz	r0, fd66 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    fd4c:	4628      	mov	r0, r5
    fd4e:	f7fe ff97 	bl	ec80 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    fd52:	b110      	cbz	r0, fd5a <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x24>
    fd54:	e005      	b.n	fd62 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x2c>
    fd56:	2042      	movs	r0, #66	; 0x42
    fd58:	bd70      	pop	{r4, r5, r6, pc}
    fd5a:	4628      	mov	r0, r5
    fd5c:	f7fe ff86 	bl	ec6c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
    fd60:	b108      	cbz	r0, fd66 <sym_7GRSXPCDN6SAIPL3YJGWJFDEBFB3EXAXYUBY2II+0x30>
    fd62:	200c      	movs	r0, #12
    fd64:	bd70      	pop	{r4, r5, r6, pc}
    fd66:	1c61      	adds	r1, r4, #1
    fd68:	4628      	mov	r0, r5
    fd6a:	f7fe ff9b 	bl	eca4 <sym_UDZCFPCYSG5E2MUJ3CH3H5GF4YJLF3Y6KNH3ZRQ>
    fd6e:	2000      	movs	r0, #0
    fd70:	bd70      	pop	{r4, r5, r6, pc}

0000fd72 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    fd72:	b50e      	push	{r1, r2, r3, lr}
    fd74:	8882      	ldrh	r2, [r0, #4]
    fd76:	f244 2390 	movw	r3, #17040	; 0x4290
    fd7a:	429a      	cmp	r2, r3
    fd7c:	d901      	bls.n	fd82 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
    fd7e:	2012      	movs	r0, #18
    fd80:	bd0e      	pop	{r1, r2, r3, pc}
    fd82:	f640 0348 	movw	r3, #2120	; 0x848
    fd86:	429a      	cmp	r2, r3
    fd88:	d300      	bcc.n	fd8c <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    fd8a:	461a      	mov	r2, r3
    fd8c:	8803      	ldrh	r3, [r0, #0]
    fd8e:	f8ad 3000 	strh.w	r3, [sp]
    fd92:	8843      	ldrh	r3, [r0, #2]
    fd94:	f8ad 3002 	strh.w	r3, [sp, #2]
    fd98:	f8ad 2004 	strh.w	r2, [sp, #4]
    fd9c:	8843      	ldrh	r3, [r0, #2]
    fd9e:	f8ad 3006 	strh.w	r3, [sp, #6]
    fda2:	f8ad 2008 	strh.w	r2, [sp, #8]
    fda6:	8800      	ldrh	r0, [r0, #0]
    fda8:	8008      	strh	r0, [r1, #0]
    fdaa:	4668      	mov	r0, sp
    fdac:	f7f7 fcb6 	bl	771c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x104>
    fdb0:	bd0e      	pop	{r1, r2, r3, pc}

0000fdb2 <sym_QUXPDBBA3LF6URTUQCXVFN4UTAQY2K4DGZD5OMY>:
    fdb2:	b510      	push	{r4, lr}
    fdb4:	4604      	mov	r4, r0
    fdb6:	f7f7 fc13 	bl	75e0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x48>
    fdba:	7861      	ldrb	r1, [r4, #1]
    fdbc:	f3c1 0240 	ubfx	r2, r1, #1, #1
    fdc0:	f001 0101 	and.w	r1, r1, #1
    fdc4:	f7fe ff6a 	bl	ec9c <sym_MQQDWQQHBS7ZPZWBMOTGVNNHVXRAEPOMLYRTE3A>
    fdc8:	2000      	movs	r0, #0
    fdca:	bd10      	pop	{r4, pc}

0000fdcc <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    fdcc:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    fdce:	4604      	mov	r4, r0
    fdd0:	f10d 0007 	add.w	r0, sp, #7
    fdd4:	9000      	str	r0, [sp, #0]
    fdd6:	7922      	ldrb	r2, [r4, #4]
    fdd8:	78e1      	ldrb	r1, [r4, #3]
    fdda:	78a0      	ldrb	r0, [r4, #2]
    fddc:	f10d 0306 	add.w	r3, sp, #6
    fde0:	f000 fbc8 	bl	10574 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x316>
    fde4:	2800      	cmp	r0, #0
    fde6:	d109      	bne.n	fdfc <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
    fde8:	8820      	ldrh	r0, [r4, #0]
    fdea:	f8ad 0004 	strh.w	r0, [sp, #4]
    fdee:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    fdf2:	f8ad 0008 	strh.w	r0, [sp, #8]
    fdf6:	a801      	add	r0, sp, #4
    fdf8:	f000 f93e 	bl	10078 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    fdfc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000fdfe <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    fdfe:	b510      	push	{r4, lr}
    fe00:	4604      	mov	r4, r0
    fe02:	2001      	movs	r0, #1
    fe04:	f000 fa4d 	bl	102a2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
    fe08:	b128      	cbz	r0, fe16 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    fe0a:	4621      	mov	r1, r4
    fe0c:	2001      	movs	r0, #1
    fe0e:	f7f2 f8e3 	bl	1fd8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    fe12:	2000      	movs	r0, #0
    fe14:	bd10      	pop	{r4, pc}
    fe16:	200c      	movs	r0, #12
    fe18:	bd10      	pop	{r4, pc}

0000fe1a <sym_XYKOVFYGOSL56Y753SKDQGINYTUFZGQJGBB54WI>:
    fe1a:	b51c      	push	{r2, r3, r4, lr}
    fe1c:	4604      	mov	r4, r0
    fe1e:	f7f7 fbdf 	bl	75e0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x48>
    fe22:	2000      	movs	r0, #0
    fe24:	f88d 0000 	strb.w	r0, [sp]
    fe28:	f88d 0002 	strb.w	r0, [sp, #2]
    fe2c:	2003      	movs	r0, #3
    fe2e:	f88d 0001 	strb.w	r0, [sp, #1]
    fe32:	f814 0b01 	ldrb.w	r0, [r4], #1
    fe36:	f88d 0003 	strb.w	r0, [sp, #3]
    fe3a:	4668      	mov	r0, sp
    fe3c:	9401      	str	r4, [sp, #4]
    fe3e:	f000 f8c9 	bl	ffd4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>
    fe42:	bd1c      	pop	{r2, r3, r4, pc}

0000fe44 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    fe44:	b510      	push	{r4, lr}
    fe46:	f7f2 f8eb 	bl	2020 <sym_UAPFH34IEHUX3FGU7LNPEIJNCLAPRJP46TMN4NY>
    fe4a:	2000      	movs	r0, #0
    fe4c:	bd10      	pop	{r4, pc}

0000fe4e <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY>:
    fe4e:	b510      	push	{r4, lr}
    fe50:	460c      	mov	r4, r1
    fe52:	2100      	movs	r1, #0
    fe54:	f7f1 fc72 	bl	173c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fe58:	b118      	cbz	r0, fe62 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x14>
    fe5a:	2c02      	cmp	r4, #2
    fe5c:	d903      	bls.n	fe66 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x18>
    fe5e:	2012      	movs	r0, #18
    fe60:	bd10      	pop	{r4, pc}
    fe62:	2002      	movs	r0, #2
    fe64:	bd10      	pop	{r4, pc}
    fe66:	f014 0101 	ands.w	r1, r4, #1
    fe6a:	f880 122d 	strb.w	r1, [r0, #557]	; 0x22d
    fe6e:	f3c4 0240 	ubfx	r2, r4, #1, #1
    fe72:	f880 222c 	strb.w	r2, [r0, #556]	; 0x22c
    fe76:	d004      	beq.n	fe82 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
    fe78:	f890 122a 	ldrb.w	r1, [r0, #554]	; 0x22a
    fe7c:	b109      	cbz	r1, fe82 <sym_HZRUCXEK6VH2SKHLITFSCAH5JZW3VUS5CZD2RBY+0x34>
    fe7e:	f7ff f8ac 	bl	efda <sym_EPRPLWOAI3YMJ24HN6AZUGT5NWULVXEG6CTCI2Y>
    fe82:	2000      	movs	r0, #0
    fe84:	bd10      	pop	{r4, pc}

0000fe86 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    fe86:	b51c      	push	{r2, r3, r4, lr}
    fe88:	460c      	mov	r4, r1
    fe8a:	4669      	mov	r1, sp
    fe8c:	f7fd ff7a 	bl	dd84 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fe90:	2800      	cmp	r0, #0
    fe92:	d105      	bne.n	fea0 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
    fe94:	2100      	movs	r1, #0
    fe96:	4622      	mov	r2, r4
    fe98:	9801      	ldr	r0, [sp, #4]
    fe9a:	f000 face 	bl	1043a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1dc>
    fe9e:	2000      	movs	r0, #0
    fea0:	bd1c      	pop	{r2, r3, r4, pc}

0000fea2 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI>:
    fea2:	b510      	push	{r4, lr}
    fea4:	4604      	mov	r4, r0
    fea6:	7800      	ldrb	r0, [r0, #0]
    fea8:	28ff      	cmp	r0, #255	; 0xff
    feaa:	d009      	beq.n	fec0 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1e>
    feac:	2101      	movs	r1, #1
    feae:	f7f1 fc45 	bl	173c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    feb2:	b118      	cbz	r0, febc <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x1a>
    feb4:	f8b4 1001 	ldrh.w	r1, [r4, #1]
    feb8:	8441      	strh	r1, [r0, #34]	; 0x22
    feba:	e005      	b.n	fec8 <sym_UBZJS2DDJXFBNL4D7RG3NTLQLLLCEP5IJ3L4GHI+0x26>
    febc:	2042      	movs	r0, #66	; 0x42
    febe:	bd10      	pop	{r4, pc}
    fec0:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    fec4:	f7f4 fdda 	bl	4a7c <sym_YZMCMF2VDK5EZ5GH5K4G77V4XY7KHBJNPGELPVQ>
    fec8:	2000      	movs	r0, #0
    feca:	bd10      	pop	{r4, pc}

0000fecc <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    fecc:	b510      	push	{r4, lr}
    fece:	4604      	mov	r4, r0
    fed0:	f7f7 fd02 	bl	78d8 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>
    fed4:	b118      	cbz	r0, fede <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x12>
    fed6:	2000      	movs	r0, #0
    fed8:	f000 f9e3 	bl	102a2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x44>
    fedc:	b128      	cbz	r0, feea <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x1e>
    fede:	4621      	mov	r1, r4
    fee0:	2000      	movs	r0, #0
    fee2:	f7f2 f879 	bl	1fd8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    fee6:	2000      	movs	r0, #0
    fee8:	bd10      	pop	{r4, pc}
    feea:	200c      	movs	r0, #12
    feec:	bd10      	pop	{r4, pc}

0000feee <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    feee:	b510      	push	{r4, lr}
    fef0:	7800      	ldrb	r0, [r0, #0]
    fef2:	b100      	cbz	r0, fef6 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
    fef4:	2001      	movs	r0, #1
    fef6:	f7f4 fdeb 	bl	4ad0 <sym_O6J3MUC4KJEDMNJLCC5Z3G5LTC5IHVL4PW7F6QI>
    fefa:	2000      	movs	r0, #0
    fefc:	bd10      	pop	{r4, pc}

0000fefe <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    fefe:	f7f7 bc0d 	b.w	771c <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x104>

0000ff02 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY>:
    ff02:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ff06:	4606      	mov	r6, r0
    ff08:	7845      	ldrb	r5, [r0, #1]
    ff0a:	7800      	ldrb	r0, [r0, #0]
    ff0c:	2101      	movs	r1, #1
    ff0e:	f7f1 fc15 	bl	173c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ff12:	0004      	movs	r4, r0
    ff14:	d01e      	beq.n	ff54 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x52>
    ff16:	f7fe fe7c 	bl	ec12 <sym_U7WTPI24N35WTMGPC25KDS7Q3PHHHS7M5KI6IPY>
    ff1a:	78f1      	ldrb	r1, [r6, #3]
    ff1c:	4281      	cmp	r1, r0
    ff1e:	d800      	bhi.n	ff22 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x20>
    ff20:	4608      	mov	r0, r1
    ff22:	4607      	mov	r7, r0
    ff24:	2d04      	cmp	r5, #4
    ff26:	d018      	beq.n	ff5a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x58>
    ff28:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ff2a:	f7fd fe39 	bl	dba0 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    ff2e:	4438      	add	r0, r7
    ff30:	b281      	uxth	r1, r0
    ff32:	4620      	mov	r0, r4
    ff34:	2201      	movs	r2, #1
    ff36:	f000 f9c6 	bl	102c6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
    ff3a:	2800      	cmp	r0, #0
    ff3c:	d10b      	bne.n	ff56 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    ff3e:	2d03      	cmp	r5, #3
    ff40:	d000      	beq.n	ff44 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    ff42:	b1df      	cbz	r7, ff7c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    ff44:	4620      	mov	r0, r4
    ff46:	f7fe fe99 	bl	ec7c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    ff4a:	7871      	ldrb	r1, [r6, #1]
    ff4c:	2903      	cmp	r1, #3
    ff4e:	d010      	beq.n	ff72 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    ff50:	b9a0      	cbnz	r0, ff7c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    ff52:	e004      	b.n	ff5e <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x5c>
    ff54:	2042      	movs	r0, #66	; 0x42
    ff56:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    ff5a:	b97f      	cbnz	r7, ff7c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    ff5c:	e7f2      	b.n	ff44 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x42>
    ff5e:	2904      	cmp	r1, #4
    ff60:	d107      	bne.n	ff72 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x70>
    ff62:	4620      	mov	r0, r4
    ff64:	f7ff f836 	bl	efd4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
    ff68:	b140      	cbz	r0, ff7c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    ff6a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ff6c:	f7fd fddf 	bl	db2e <sym_Z3P3D5U3YDA66QTFRMTODYQPS5XZL7N2E3M2DIY>
    ff70:	b120      	cbz	r0, ff7c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7a>
    ff72:	2d01      	cmp	r5, #1
    ff74:	d004      	beq.n	ff80 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    ff76:	2d03      	cmp	r5, #3
    ff78:	d002      	beq.n	ff80 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x7e>
    ff7a:	e00e      	b.n	ff9a <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x98>
    ff7c:	2012      	movs	r0, #18
    ff7e:	e7ea      	b.n	ff56 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    ff80:	4620      	mov	r0, r4
    ff82:	f7fe fe7b 	bl	ec7c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
    ff86:	b108      	cbz	r0, ff8c <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x8a>
    ff88:	2200      	movs	r2, #0
    ff8a:	e002      	b.n	ff92 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    ff8c:	2d01      	cmp	r5, #1
    ff8e:	d013      	beq.n	ffb8 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xb6>
    ff90:	2201      	movs	r2, #1
    ff92:	4668      	mov	r0, sp
    ff94:	6b61      	ldr	r1, [r4, #52]	; 0x34
    ff96:	f7fd fd66 	bl	da66 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
    ff9a:	2d04      	cmp	r5, #4
    ff9c:	d018      	beq.n	ffd0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    ff9e:	6872      	ldr	r2, [r6, #4]
    ffa0:	463b      	mov	r3, r7
    ffa2:	2101      	movs	r1, #1
    ffa4:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ffa6:	f7fd fd92 	bl	dace <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
    ffaa:	b138      	cbz	r0, ffbc <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xba>
    ffac:	7870      	ldrb	r0, [r6, #1]
    ffae:	2802      	cmp	r0, #2
    ffb0:	d006      	beq.n	ffc0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    ffb2:	2803      	cmp	r0, #3
    ffb4:	d004      	beq.n	ffc0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xbe>
    ffb6:	e00b      	b.n	ffd0 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0xce>
    ffb8:	2202      	movs	r2, #2
    ffba:	e7ea      	b.n	ff92 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x90>
    ffbc:	2007      	movs	r0, #7
    ffbe:	e7ca      	b.n	ff56 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>
    ffc0:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ffc2:	f7fd fded 	bl	dba0 <sym_DPFAWTOI3GRLXCS5TV5FXLZJNKWMRLYTLT4DRFY>
    ffc6:	4602      	mov	r2, r0
    ffc8:	2101      	movs	r1, #1
    ffca:	6b60      	ldr	r0, [r4, #52]	; 0x34
    ffcc:	f7fd fdc5 	bl	db5a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
    ffd0:	2000      	movs	r0, #0
    ffd2:	e7c0      	b.n	ff56 <sym_D6Z72QTHOBKAEBKPZKUE4VJPVZJ36GAIUXFUHKY+0x54>

0000ffd4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA>:
    ffd4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ffd8:	4607      	mov	r7, r0
    ffda:	7845      	ldrb	r5, [r0, #1]
    ffdc:	78c6      	ldrb	r6, [r0, #3]
    ffde:	7800      	ldrb	r0, [r0, #0]
    ffe0:	2101      	movs	r1, #1
    ffe2:	f7f1 fbab 	bl	173c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ffe6:	0004      	movs	r4, r0
    ffe8:	d003      	beq.n	fff2 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x1e>
    ffea:	f7fe fe49 	bl	ec80 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
    ffee:	b118      	cbz	r0, fff8 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x24>
    fff0:	e003      	b.n	fffa <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x26>
    fff2:	2042      	movs	r0, #66	; 0x42
    fff4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    fff8:	2600      	movs	r6, #0
    fffa:	6b60      	ldr	r0, [r4, #52]	; 0x34
    fffc:	f7fd fdd4 	bl	dba8 <sym_27RZBWKBTESKUPVNN3E7RHYQU6UH4RT372SK2WA>
   10000:	4430      	add	r0, r6
   10002:	b281      	uxth	r1, r0
   10004:	4688      	mov	r8, r1
   10006:	4620      	mov	r0, r4
   10008:	2201      	movs	r2, #1
   1000a:	f000 f95c 	bl	102c6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x68>
   1000e:	2800      	cmp	r0, #0
   10010:	d1f0      	bne.n	fff4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10012:	2d04      	cmp	r5, #4
   10014:	d008      	beq.n	10028 <CONFIG_PM_SRAM_SIZE+0x28>
   10016:	2d03      	cmp	r5, #3
   10018:	d00a      	beq.n	10030 <CONFIG_PM_SRAM_SIZE+0x30>
   1001a:	b12e      	cbz	r6, 10028 <CONFIG_PM_SRAM_SIZE+0x28>
   1001c:	4620      	mov	r0, r4
   1001e:	f7fe ffd9 	bl	efd4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10022:	b118      	cbz	r0, 1002c <CONFIG_PM_SRAM_SIZE+0x2c>
   10024:	200c      	movs	r0, #12
   10026:	e7e5      	b.n	fff4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   10028:	2012      	movs	r0, #18
   1002a:	e7e3      	b.n	fff4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   1002c:	2d01      	cmp	r5, #1
   1002e:	d10c      	bne.n	1004a <CONFIG_PM_SRAM_SIZE+0x4a>
   10030:	4620      	mov	r0, r4
   10032:	f7fe fe23 	bl	ec7c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   10036:	b108      	cbz	r0, 1003c <CONFIG_PM_SRAM_SIZE+0x3c>
   10038:	2204      	movs	r2, #4
   1003a:	e002      	b.n	10042 <CONFIG_PM_SRAM_SIZE+0x42>
   1003c:	2d01      	cmp	r5, #1
   1003e:	d010      	beq.n	10062 <CONFIG_PM_SRAM_SIZE+0x62>
   10040:	2205      	movs	r2, #5
   10042:	4668      	mov	r0, sp
   10044:	6b61      	ldr	r1, [r4, #52]	; 0x34
   10046:	f7fd fd0e 	bl	da66 <sym_YBUOIVJGKD57C5J4XCQFOKF4I5XT74ICLDOCNXA>
   1004a:	687a      	ldr	r2, [r7, #4]
   1004c:	4633      	mov	r3, r6
   1004e:	2100      	movs	r1, #0
   10050:	6b60      	ldr	r0, [r4, #52]	; 0x34
   10052:	f7fd fd3c 	bl	dace <sym_F5SXUQLY6DFZ5NXKJ4VFIGAK52D6AM5LN2AJKSY>
   10056:	b130      	cbz	r0, 10066 <CONFIG_PM_SRAM_SIZE+0x66>
   10058:	2d02      	cmp	r5, #2
   1005a:	d006      	beq.n	1006a <CONFIG_PM_SRAM_SIZE+0x6a>
   1005c:	2d03      	cmp	r5, #3
   1005e:	d004      	beq.n	1006a <CONFIG_PM_SRAM_SIZE+0x6a>
   10060:	e008      	b.n	10074 <CONFIG_PM_SRAM_SIZE+0x74>
   10062:	2206      	movs	r2, #6
   10064:	e7ed      	b.n	10042 <CONFIG_PM_SRAM_SIZE+0x42>
   10066:	2007      	movs	r0, #7
   10068:	e7c4      	b.n	fff4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>
   1006a:	4642      	mov	r2, r8
   1006c:	2100      	movs	r1, #0
   1006e:	6b60      	ldr	r0, [r4, #52]	; 0x34
   10070:	f7fd fd73 	bl	db5a <sym_OC5GPSERLPE7TKXSCU3QAZ62H3OM4MWFYV7WX2I>
   10074:	2000      	movs	r0, #0
   10076:	e7bd      	b.n	fff4 <sym_MVDV5RBWBEZV6THUS3WDA3RV4H6NH2D4IESH3IA+0x20>

00010078 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   10078:	b510      	push	{r4, lr}
   1007a:	4604      	mov	r4, r0
   1007c:	8880      	ldrh	r0, [r0, #4]
   1007e:	b128      	cbz	r0, 1008c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10080:	2801      	cmp	r0, #1
   10082:	d003      	beq.n	1008c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10084:	2802      	cmp	r0, #2
   10086:	d001      	beq.n	1008c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10088:	2012      	movs	r0, #18
   1008a:	bd10      	pop	{r4, pc}
   1008c:	78e0      	ldrb	r0, [r4, #3]
   1008e:	f000 f9b1 	bl	103f4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
   10092:	b148      	cbz	r0, 100a8 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   10094:	78a0      	ldrb	r0, [r4, #2]
   10096:	f000 f9ad 	bl	103f4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x196>
   1009a:	b128      	cbz	r0, 100a8 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   1009c:	4620      	mov	r0, r4
   1009e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   100a2:	2101      	movs	r1, #1
   100a4:	f000 b860 	b.w	10168 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   100a8:	2011      	movs	r0, #17
   100aa:	bd10      	pop	{r4, pc}

000100ac <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   100ac:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   100ae:	460c      	mov	r4, r1
   100b0:	4605      	mov	r5, r0
   100b2:	8800      	ldrh	r0, [r0, #0]
   100b4:	4669      	mov	r1, sp
   100b6:	f7fd fe65 	bl	dd84 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   100ba:	2800      	cmp	r0, #0
   100bc:	d106      	bne.n	100cc <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   100be:	9801      	ldr	r0, [sp, #4]
   100c0:	8829      	ldrh	r1, [r5, #0]
   100c2:	8021      	strh	r1, [r4, #0]
   100c4:	f8b0 00c8 	ldrh.w	r0, [r0, #200]	; 0xc8
   100c8:	8060      	strh	r0, [r4, #2]
   100ca:	2000      	movs	r0, #0
   100cc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

000100ce <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   100ce:	b510      	push	{r4, lr}
   100d0:	4604      	mov	r4, r0
   100d2:	4601      	mov	r1, r0
   100d4:	2000      	movs	r0, #0
   100d6:	f7f1 ff67 	bl	1fa8 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   100da:	b910      	cbnz	r0, 100e2 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   100dc:	2000      	movs	r0, #0
   100de:	6020      	str	r0, [r4, #0]
   100e0:	80a0      	strh	r0, [r4, #4]
   100e2:	2000      	movs	r0, #0
   100e4:	bd10      	pop	{r4, pc}

000100e6 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   100e6:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   100e8:	460c      	mov	r4, r1
   100ea:	4605      	mov	r5, r0
   100ec:	8800      	ldrh	r0, [r0, #0]
   100ee:	4669      	mov	r1, sp
   100f0:	f7fd fe48 	bl	dd84 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   100f4:	b108      	cbz	r0, 100fa <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   100f6:	2002      	movs	r0, #2
   100f8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   100fa:	78a8      	ldrb	r0, [r5, #2]
   100fc:	b158      	cbz	r0, 10116 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x30>
   100fe:	f000 f9f2 	bl	104e6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x288>
   10102:	70a0      	strb	r0, [r4, #2]
   10104:	8828      	ldrh	r0, [r5, #0]
   10106:	8020      	strh	r0, [r4, #0]
   10108:	f994 0002 	ldrsb.w	r0, [r4, #2]
   1010c:	f7f2 fe36 	bl	2d7c <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
   10110:	70a0      	strb	r0, [r4, #2]
   10112:	2000      	movs	r0, #0
   10114:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   10116:	9801      	ldr	r0, [sp, #4]
   10118:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
   1011c:	e7f1      	b.n	10102 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0001011e <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   1011e:	b510      	push	{r4, lr}
   10120:	f7f7 fbe0 	bl	78e4 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   10124:	2000      	movs	r0, #0
   10126:	bd10      	pop	{r4, pc}

00010128 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   10128:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   1012c:	4604      	mov	r4, r0
   1012e:	8840      	ldrh	r0, [r0, #2]
   10130:	460d      	mov	r5, r1
   10132:	b1b8      	cbz	r0, 10164 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   10134:	8820      	ldrh	r0, [r4, #0]
   10136:	4669      	mov	r1, sp
   10138:	f7fd fe24 	bl	dd84 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1013c:	2800      	cmp	r0, #0
   1013e:	d10f      	bne.n	10160 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   10140:	8820      	ldrh	r0, [r4, #0]
   10142:	8028      	strh	r0, [r5, #0]
   10144:	9e01      	ldr	r6, [sp, #4]
   10146:	f106 0510 	add.w	r5, r6, #16
   1014a:	3680      	adds	r6, #128	; 0x80
   1014c:	682f      	ldr	r7, [r5, #0]
   1014e:	8862      	ldrh	r2, [r4, #2]
   10150:	4639      	mov	r1, r7
   10152:	4630      	mov	r0, r6
   10154:	f7fd ff0c 	bl	df70 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   10158:	6828      	ldr	r0, [r5, #0]
   1015a:	42b8      	cmp	r0, r7
   1015c:	d1f6      	bne.n	1014c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   1015e:	2000      	movs	r0, #0
   10160:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   10164:	2012      	movs	r0, #18
   10166:	e7fb      	b.n	10160 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

00010168 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
   10168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1016c:	b085      	sub	sp, #20
   1016e:	4688      	mov	r8, r1
   10170:	4606      	mov	r6, r0
   10172:	8800      	ldrh	r0, [r0, #0]
   10174:	a901      	add	r1, sp, #4
   10176:	f7fd fe05 	bl	dd84 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1017a:	2800      	cmp	r0, #0
   1017c:	d13b      	bne.n	101f6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   1017e:	9802      	ldr	r0, [sp, #8]
   10180:	4601      	mov	r1, r0
   10182:	468a      	mov	sl, r1
   10184:	f890 1194 	ldrb.w	r1, [r0, #404]	; 0x194
   10188:	f500 7498 	add.w	r4, r0, #304	; 0x130
   1018c:	f88d 1000 	strb.w	r1, [sp]
   10190:	9900      	ldr	r1, [sp, #0]
   10192:	9100      	str	r1, [sp, #0]
   10194:	f89d 1000 	ldrb.w	r1, [sp]
   10198:	f04f 0900 	mov.w	r9, #0
   1019c:	3080      	adds	r0, #128	; 0x80
   1019e:	b121      	cbz	r1, 101aa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   101a0:	f1b8 0f02 	cmp.w	r8, #2
   101a4:	d001      	beq.n	101aa <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
   101a6:	2701      	movs	r7, #1
   101a8:	e000      	b.n	101ac <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
   101aa:	2700      	movs	r7, #0
   101ac:	7f81      	ldrb	r1, [r0, #30]
   101ae:	2922      	cmp	r1, #34	; 0x22
   101b0:	d100      	bne.n	101b4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
   101b2:	b13f      	cbz	r7, 101c4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
   101b4:	2500      	movs	r5, #0
   101b6:	306c      	adds	r0, #108	; 0x6c
   101b8:	2108      	movs	r1, #8
   101ba:	4683      	mov	fp, r0
   101bc:	f7ff fbcc 	bl	f958 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
   101c0:	b110      	cbz	r0, 101c8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x60>
   101c2:	e007      	b.n	101d4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x6c>
   101c4:	2501      	movs	r5, #1
   101c6:	e7f6      	b.n	101b6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4e>
   101c8:	210b      	movs	r1, #11
   101ca:	4658      	mov	r0, fp
   101cc:	f7ff fbc4 	bl	f958 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0xa2>
   101d0:	b900      	cbnz	r0, 101d4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x6c>
   101d2:	b17d      	cbz	r5, 101f4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8c>
   101d4:	a804      	add	r0, sp, #16
   101d6:	9000      	str	r0, [sp, #0]
   101d8:	f89d 0004 	ldrb.w	r0, [sp, #4]
   101dc:	ab03      	add	r3, sp, #12
   101de:	4632      	mov	r2, r6
   101e0:	4651      	mov	r1, sl
   101e2:	f000 f960 	bl	104a6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x248>
   101e6:	0005      	movs	r5, r0
   101e8:	d105      	bne.n	101f6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
   101ea:	340c      	adds	r4, #12
   101ec:	20ff      	movs	r0, #255	; 0xff
   101ee:	7060      	strb	r0, [r4, #1]
   101f0:	b937      	cbnz	r7, 10200 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x98>
   101f2:	e003      	b.n	101fc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x94>
   101f4:	201a      	movs	r0, #26
   101f6:	b005      	add	sp, #20
   101f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   101fc:	7820      	ldrb	r0, [r4, #0]
   101fe:	b108      	cbz	r0, 10204 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9c>
   10200:	253a      	movs	r5, #58	; 0x3a
   10202:	e012      	b.n	1022a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc2>
   10204:	f884 8000 	strb.w	r8, [r4]
   10208:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1020c:	70a0      	strb	r0, [r4, #2]
   1020e:	f89d 1010 	ldrb.w	r1, [sp, #16]
   10212:	70e1      	strb	r1, [r4, #3]
   10214:	f88d 0000 	strb.w	r0, [sp]
   10218:	f88d 1001 	strb.w	r1, [sp, #1]
   1021c:	88b0      	ldrh	r0, [r6, #4]
   1021e:	f8ad 0002 	strh.w	r0, [sp, #2]
   10222:	4669      	mov	r1, sp
   10224:	4650      	mov	r0, sl
   10226:	f7fd fe4c 	bl	dec2 <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
   1022a:	f884 9001 	strb.w	r9, [r4, #1]
   1022e:	4628      	mov	r0, r5
   10230:	e7e1      	b.n	101f6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>

00010232 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   10232:	2008      	movs	r0, #8
   10234:	f7f7 bbbe 	b.w	79b4 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

00010238 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
   10238:	b510      	push	{r4, lr}
   1023a:	f7fd fd30 	bl	dc9e <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
   1023e:	f7f2 fc59 	bl	2af4 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
   10242:	f7f7 fbd9 	bl	79f8 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
   10246:	f7fe f8ed 	bl	e424 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
   1024a:	f7fd feac 	bl	dfa6 <sym_JANNQMW3JZGYLNSOPAA2HBYBA6JBSX4W7VBR56Q>
   1024e:	f7f3 fbe7 	bl	3a20 <sym_FKU5SDIGNJ3CUR3VYEELCK5CK3EK42NLF7KQXSQ>
   10252:	f7f2 fdb7 	bl	2dc4 <sym_S635TH4ZNECIWRKFWYBUXBZ3GFP7WORE4PRXDPQ>
   10256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1025a:	f7f7 bae3 	b.w	7824 <sym_P35ZNYRPUOIDHAE32RQYT4RWXL5RC6UIZKLHPUQ+0x20c>

0001025e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA>:
   1025e:	f7f5 b99f 	b.w	55a0 <sym_B2B7AU2WDMX5JQNGTX4YKNCWQCXQIG5PWSSOSAI>
   10262:	f44f 71a4 	mov.w	r1, #328	; 0x148
   10266:	4288      	cmp	r0, r1
   10268:	d303      	bcc.n	10272 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14>
   1026a:	f640 0148 	movw	r1, #2120	; 0x848
   1026e:	4288      	cmp	r0, r1
   10270:	d300      	bcc.n	10274 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x16>
   10272:	4608      	mov	r0, r1
   10274:	b280      	uxth	r0, r0
   10276:	4770      	bx	lr
   10278:	07c1      	lsls	r1, r0, #31
   1027a:	d001      	beq.n	10280 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22>
   1027c:	2001      	movs	r0, #1
   1027e:	4770      	bx	lr
   10280:	0780      	lsls	r0, r0, #30
   10282:	d501      	bpl.n	10288 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a>
   10284:	2002      	movs	r0, #2
   10286:	4770      	bx	lr
   10288:	2000      	movs	r0, #0
   1028a:	4770      	bx	lr
   1028c:	b510      	push	{r4, lr}
   1028e:	2801      	cmp	r0, #1
   10290:	d006      	beq.n	102a0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   10292:	2802      	cmp	r0, #2
   10294:	d004      	beq.n	102a0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x42>
   10296:	f44f 7125 	mov.w	r1, #660	; 0x294
   1029a:	2006      	movs	r0, #6
   1029c:	f7f0 ff46 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   102a0:	bd10      	pop	{r4, pc}
   102a2:	b510      	push	{r4, lr}
   102a4:	f7f7 f986 	bl	75b4 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x1c>
   102a8:	b158      	cbz	r0, 102c2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
   102aa:	f7f7 f999 	bl	75e0 <sym_PT2LT65JTEWXEGBFKFJG6BCMFVOJAD3UAGCYAUI+0x48>
   102ae:	4604      	mov	r4, r0
   102b0:	f7fe fce6 	bl	ec80 <sym_NGJGZTNK6YIH3QX2NKB6A6MT7N5AOKWA6ZOOANQ>
   102b4:	b918      	cbnz	r0, 102be <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x60>
   102b6:	4620      	mov	r0, r4
   102b8:	f7fe fcd8 	bl	ec6c <sym_UEZ3FVWFJ5XVLQBVVAHW7UTXVCC77F7ZYGOMLTQ>
   102bc:	b108      	cbz	r0, 102c2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x64>
   102be:	2000      	movs	r0, #0
   102c0:	bd10      	pop	{r4, pc}
   102c2:	2001      	movs	r0, #1
   102c4:	bd10      	pop	{r4, pc}
   102c6:	b570      	push	{r4, r5, r6, lr}
   102c8:	460c      	mov	r4, r1
   102ca:	4605      	mov	r5, r0
   102cc:	b112      	cbz	r2, 102d4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x76>
   102ce:	291f      	cmp	r1, #31
   102d0:	d80c      	bhi.n	102ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x8e>
   102d2:	e016      	b.n	10302 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa4>
   102d4:	f7f1 fca8 	bl	1c28 <sym_LD2UWOJIHNEPQLGRHPDQLYGR7RM2YL5X5777QYQ>
   102d8:	42a0      	cmp	r0, r4
   102da:	d201      	bcs.n	102e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x82>
   102dc:	2007      	movs	r0, #7
   102de:	bd70      	pop	{r4, r5, r6, pc}
   102e0:	4628      	mov	r0, r5
   102e2:	f7fe fccb 	bl	ec7c <sym_BDDELQSYWHVCCHSF6HGFFAORZOC56R54KIF45KY>
   102e6:	b118      	cbz	r0, 102f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
   102e8:	2c1f      	cmp	r4, #31
   102ea:	d901      	bls.n	102f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x92>
   102ec:	2012      	movs	r0, #18
   102ee:	bd70      	pop	{r4, r5, r6, pc}
   102f0:	4628      	mov	r0, r5
   102f2:	f7fe fccc 	bl	ec8e <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   102f6:	b130      	cbz	r0, 10306 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xa8>
   102f8:	4621      	mov	r1, r4
   102fa:	4628      	mov	r0, r5
   102fc:	f7fe fc95 	bl	ec2a <sym_GNUIHYMK3THJZQYGL7BBI74HDMHN6SBQQRVNSAY>
   10300:	b118      	cbz	r0, 1030a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xac>
   10302:	2000      	movs	r0, #0
   10304:	bd70      	pop	{r4, r5, r6, pc}
   10306:	2042      	movs	r0, #66	; 0x42
   10308:	bd70      	pop	{r4, r5, r6, pc}
   1030a:	2045      	movs	r0, #69	; 0x45
   1030c:	bd70      	pop	{r4, r5, r6, pc}
   1030e:	b510      	push	{r4, lr}
   10310:	4604      	mov	r4, r0
   10312:	7840      	ldrb	r0, [r0, #1]
   10314:	06c1      	lsls	r1, r0, #27
   10316:	d51c      	bpl.n	10352 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   10318:	07c0      	lsls	r0, r0, #31
   1031a:	d00b      	beq.n	10334 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   1031c:	f7f7 fb1e 	bl	795c <sym_PRWTRTI5GPQHIT26MFBSSOCWTUYYRLQLJWD2ZOI>
   10320:	b1b8      	cbz	r0, 10352 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   10322:	7860      	ldrb	r0, [r4, #1]
   10324:	06c1      	lsls	r1, r0, #27
   10326:	d405      	bmi.n	10334 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   10328:	0700      	lsls	r0, r0, #28
   1032a:	d503      	bpl.n	10334 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xd6>
   1032c:	7d20      	ldrb	r0, [r4, #20]
   1032e:	2802      	cmp	r0, #2
   10330:	d10f      	bne.n	10352 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   10332:	e010      	b.n	10356 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   10334:	7d20      	ldrb	r0, [r4, #20]
   10336:	2802      	cmp	r0, #2
   10338:	d001      	beq.n	1033e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xe0>
   1033a:	7ea0      	ldrb	r0, [r4, #26]
   1033c:	b948      	cbnz	r0, 10352 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf4>
   1033e:	7860      	ldrb	r0, [r4, #1]
   10340:	0700      	lsls	r0, r0, #28
   10342:	d408      	bmi.n	10356 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   10344:	f8d4 0005 	ldr.w	r0, [r4, #5]
   10348:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   1034c:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   10350:	d201      	bcs.n	10356 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0xf8>
   10352:	2011      	movs	r0, #17
   10354:	bd10      	pop	{r4, pc}
   10356:	2000      	movs	r0, #0
   10358:	bd10      	pop	{r4, pc}
   1035a:	b538      	push	{r3, r4, r5, lr}
   1035c:	4604      	mov	r4, r0
   1035e:	7800      	ldrb	r0, [r0, #0]
   10360:	28ef      	cmp	r0, #239	; 0xef
   10362:	d843      	bhi.n	103ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10364:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   10368:	f8ad 0000 	strh.w	r0, [sp]
   1036c:	9800      	ldr	r0, [sp, #0]
   1036e:	f000 f918 	bl	105a2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x344>
   10372:	b3a0      	cbz	r0, 103de <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
   10374:	7861      	ldrb	r1, [r4, #1]
   10376:	0708      	lsls	r0, r1, #28
   10378:	d40b      	bmi.n	10392 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x134>
   1037a:	f8d4 0002 	ldr.w	r0, [r4, #2]
   1037e:	f8d4 3005 	ldr.w	r3, [r4, #5]
   10382:	0a02      	lsrs	r2, r0, #8
   10384:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
   10388:	d830      	bhi.n	103ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   1038a:	2220      	movs	r2, #32
   1038c:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   10390:	d82c      	bhi.n	103ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   10392:	7a60      	ldrb	r0, [r4, #9]
   10394:	b318      	cbz	r0, 103de <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x180>
   10396:	2807      	cmp	r0, #7
   10398:	d828      	bhi.n	103ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   1039a:	7aa0      	ldrb	r0, [r4, #10]
   1039c:	b128      	cbz	r0, 103aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   1039e:	2801      	cmp	r0, #1
   103a0:	d003      	beq.n	103aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   103a2:	2802      	cmp	r0, #2
   103a4:	d001      	beq.n	103aa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x14c>
   103a6:	2803      	cmp	r0, #3
   103a8:	d120      	bne.n	103ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   103aa:	074a      	lsls	r2, r1, #29
   103ac:	d403      	bmi.n	103b6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
   103ae:	2802      	cmp	r0, #2
   103b0:	d001      	beq.n	103b6 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x158>
   103b2:	2803      	cmp	r0, #3
   103b4:	d105      	bne.n	103c2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x164>
   103b6:	7ae0      	ldrb	r0, [r4, #11]
   103b8:	b108      	cbz	r0, 103be <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x160>
   103ba:	2801      	cmp	r0, #1
   103bc:	d116      	bne.n	103ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   103be:	0748      	lsls	r0, r1, #29
   103c0:	d407      	bmi.n	103d2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   103c2:	7ca0      	ldrb	r0, [r4, #18]
   103c4:	b128      	cbz	r0, 103d2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   103c6:	2801      	cmp	r0, #1
   103c8:	d003      	beq.n	103d2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   103ca:	2802      	cmp	r0, #2
   103cc:	d001      	beq.n	103d2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x174>
   103ce:	2803      	cmp	r0, #3
   103d0:	d10c      	bne.n	103ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   103d2:	06c8      	lsls	r0, r1, #27
   103d4:	7d20      	ldrb	r0, [r4, #20]
   103d6:	d503      	bpl.n	103e0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x182>
   103d8:	2801      	cmp	r0, #1
   103da:	d107      	bne.n	103ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   103dc:	e002      	b.n	103e4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x186>
   103de:	e005      	b.n	103ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   103e0:	2802      	cmp	r0, #2
   103e2:	d003      	beq.n	103ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x18e>
   103e4:	7e20      	ldrb	r0, [r4, #24]
   103e6:	b118      	cbz	r0, 103f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
   103e8:	2801      	cmp	r0, #1
   103ea:	d001      	beq.n	103f0 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x192>
   103ec:	2012      	movs	r0, #18
   103ee:	bd38      	pop	{r3, r4, r5, pc}
   103f0:	2000      	movs	r0, #0
   103f2:	bd38      	pop	{r3, r4, r5, pc}
   103f4:	b510      	push	{r4, lr}
   103f6:	0004      	movs	r4, r0
   103f8:	d005      	beq.n	10406 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
   103fa:	f7f7 faed 	bl	79d8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   103fe:	4384      	bics	r4, r0
   10400:	d001      	beq.n	10406 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a8>
   10402:	2000      	movs	r0, #0
   10404:	bd10      	pop	{r4, pc}
   10406:	2001      	movs	r0, #1
   10408:	bd10      	pop	{r4, pc}
   1040a:	28fb      	cmp	r0, #251	; 0xfb
   1040c:	d803      	bhi.n	10416 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1b8>
   1040e:	f640 0048 	movw	r0, #2120	; 0x848
   10412:	4281      	cmp	r1, r0
   10414:	d901      	bls.n	1041a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1bc>
   10416:	2011      	movs	r0, #17
   10418:	4770      	bx	lr
   1041a:	2000      	movs	r0, #0
   1041c:	4770      	bx	lr
   1041e:	381b      	subs	r0, #27
   10420:	28e1      	cmp	r0, #225	; 0xe1
   10422:	d206      	bcs.n	10432 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   10424:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   10428:	d303      	bcc.n	10432 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d4>
   1042a:	f244 2090 	movw	r0, #17040	; 0x4290
   1042e:	4281      	cmp	r1, r0
   10430:	d901      	bls.n	10436 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1d8>
   10432:	2012      	movs	r0, #18
   10434:	4770      	bx	lr
   10436:	2000      	movs	r0, #0
   10438:	4770      	bx	lr
   1043a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1043e:	4606      	mov	r6, r0
   10440:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
   10444:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
   10448:	4615      	mov	r5, r2
   1044a:	302c      	adds	r0, #44	; 0x2c
   1044c:	f7f4 fb46 	bl	4adc <sym_VZU4MLS2BZIZVCMAEOYQRASTSKMJXHSO6FAK2JA>
   10450:	4680      	mov	r8, r0
   10452:	2102      	movs	r1, #2
   10454:	f7fd fd05 	bl	de62 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   10458:	4287      	cmp	r7, r0
   1045a:	d200      	bcs.n	1045e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x200>
   1045c:	4638      	mov	r0, r7
   1045e:	4607      	mov	r7, r0
   10460:	2102      	movs	r1, #2
   10462:	4640      	mov	r0, r8
   10464:	f7fd fcfd 	bl	de62 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   10468:	4284      	cmp	r4, r0
   1046a:	d200      	bcs.n	1046e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x210>
   1046c:	4620      	mov	r0, r4
   1046e:	8831      	ldrh	r1, [r6, #0]
   10470:	8029      	strh	r1, [r5, #0]
   10472:	2f1b      	cmp	r7, #27
   10474:	d913      	bls.n	1049e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x240>
   10476:	2ffb      	cmp	r7, #251	; 0xfb
   10478:	d300      	bcc.n	1047c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
   1047a:	27fb      	movs	r7, #251	; 0xfb
   1047c:	806f      	strh	r7, [r5, #2]
   1047e:	281b      	cmp	r0, #27
   10480:	d90f      	bls.n	104a2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x244>
   10482:	28fb      	cmp	r0, #251	; 0xfb
   10484:	d300      	bcc.n	10488 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
   10486:	20fb      	movs	r0, #251	; 0xfb
   10488:	80e8      	strh	r0, [r5, #6]
   1048a:	4640      	mov	r0, r8
   1048c:	f7ff fee9 	bl	10262 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   10490:	80a8      	strh	r0, [r5, #4]
   10492:	4640      	mov	r0, r8
   10494:	f7ff fee5 	bl	10262 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x4>
   10498:	8128      	strh	r0, [r5, #8]
   1049a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1049e:	271b      	movs	r7, #27
   104a0:	e7ec      	b.n	1047c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x21e>
   104a2:	201b      	movs	r0, #27
   104a4:	e7f0      	b.n	10488 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x22a>
   104a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   104aa:	7890      	ldrb	r0, [r2, #2]
   104ac:	9e06      	ldr	r6, [sp, #24]
   104ae:	461d      	mov	r5, r3
   104b0:	4614      	mov	r4, r2
   104b2:	b908      	cbnz	r0, 104b8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x25a>
   104b4:	f7f7 fa90 	bl	79d8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   104b8:	78e4      	ldrb	r4, [r4, #3]
   104ba:	4607      	mov	r7, r0
   104bc:	b914      	cbnz	r4, 104c4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x266>
   104be:	f7f7 fa8b 	bl	79d8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   104c2:	4604      	mov	r4, r0
   104c4:	b16f      	cbz	r7, 104e2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   104c6:	b164      	cbz	r4, 104e2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   104c8:	4638      	mov	r0, r7
   104ca:	f7ff fed5 	bl	10278 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   104ce:	4620      	mov	r0, r4
   104d0:	f7ff fed2 	bl	10278 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x1a>
   104d4:	b12f      	cbz	r7, 104e2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   104d6:	b124      	cbz	r4, 104e2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x284>
   104d8:	702f      	strb	r7, [r5, #0]
   104da:	7034      	strb	r4, [r6, #0]
   104dc:	2000      	movs	r0, #0
   104de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   104e2:	2009      	movs	r0, #9
   104e4:	e7fb      	b.n	104de <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x280>
   104e6:	207f      	movs	r0, #127	; 0x7f
   104e8:	f000 b83c 	b.w	10564 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x306>
   104ec:	b508      	push	{r3, lr}
   104ee:	f890 125c 	ldrb.w	r1, [r0, #604]	; 0x25c
   104f2:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
   104f6:	f88d 0000 	strb.w	r0, [sp]
   104fa:	9800      	ldr	r0, [sp, #0]
   104fc:	9000      	str	r0, [sp, #0]
   104fe:	f89d 0000 	ldrb.w	r0, [sp]
   10502:	b100      	cbz	r0, 10506 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2a8>
   10504:	2001      	movs	r0, #1
   10506:	1e40      	subs	r0, r0, #1
   10508:	4208      	tst	r0, r1
   1050a:	d003      	beq.n	10514 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   1050c:	2904      	cmp	r1, #4
   1050e:	d001      	beq.n	10514 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2b6>
   10510:	2001      	movs	r0, #1
   10512:	bd08      	pop	{r3, pc}
   10514:	2000      	movs	r0, #0
   10516:	bd08      	pop	{r3, pc}
   10518:	b570      	push	{r4, r5, r6, lr}
   1051a:	4605      	mov	r5, r0
   1051c:	f7fe fbb7 	bl	ec8e <sym_WGJLFS2PDN6RZG7JWUITZ3W5MGJYYXFXIKI3GGQ>
   10520:	b170      	cbz	r0, 10540 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e2>
   10522:	4628      	mov	r0, r5
   10524:	f7fe fd56 	bl	efd4 <sym_VKORYLCFNIWNGETWJR24ZOUACQP66MFSZSXVABY>
   10528:	2800      	cmp	r0, #0
   1052a:	d008      	beq.n	1053e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e0>
   1052c:	4628      	mov	r0, r5
   1052e:	f7fe fd4e 	bl	efce <sym_MHDCHYAEWBCIUYGOTWRWGZEJ6XEBEBUHOO5T6WY>
   10532:	4604      	mov	r4, r0
   10534:	4628      	mov	r0, r5
   10536:	f7fe fd24 	bl	ef82 <sym_7Q3OGK46EJ4CJTNREFMB4I3YQOYV4MCCW6KC7XI>
   1053a:	b118      	cbz	r0, 10544 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x2e6>
   1053c:	200c      	movs	r0, #12
   1053e:	bd70      	pop	{r4, r5, r6, pc}
   10540:	2042      	movs	r0, #66	; 0x42
   10542:	bd70      	pop	{r4, r5, r6, pc}
   10544:	b164      	cbz	r4, 10560 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x302>
   10546:	8820      	ldrh	r0, [r4, #0]
   10548:	f7fd fb86 	bl	dc58 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
   1054c:	8820      	ldrh	r0, [r4, #0]
   1054e:	2100      	movs	r1, #0
   10550:	f7f1 f996 	bl	1880 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
   10554:	b120      	cbz	r0, 10560 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x302>
   10556:	f241 71af 	movw	r1, #6063	; 0x17af
   1055a:	2039      	movs	r0, #57	; 0x39
   1055c:	f7f0 fde6 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10560:	2000      	movs	r0, #0
   10562:	bd70      	pop	{r4, r5, r6, pc}
   10564:	b508      	push	{r3, lr}
   10566:	f640 1288 	movw	r2, #2440	; 0x988
   1056a:	2300      	movs	r3, #0
   1056c:	4669      	mov	r1, sp
   1056e:	f7f8 fc4f 	bl	8e10 <mpsl_fem_tx_power_split>
   10572:	bd08      	pop	{r3, pc}
   10574:	b530      	push	{r4, r5, lr}
   10576:	f340 0400 	sbfx	r4, r0, #0, #1
   1057a:	f340 0040 	sbfx	r0, r0, #1, #1
   1057e:	1c40      	adds	r0, r0, #1
   10580:	9d03      	ldr	r5, [sp, #12]
   10582:	1c64      	adds	r4, r4, #1
   10584:	d000      	beq.n	10588 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x32a>
   10586:	b119      	cbz	r1, 10590 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x332>
   10588:	b100      	cbz	r0, 1058c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x32e>
   1058a:	b10a      	cbz	r2, 10590 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x332>
   1058c:	b91c      	cbnz	r4, 10596 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x338>
   1058e:	e001      	b.n	10594 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x336>
   10590:	2011      	movs	r0, #17
   10592:	bd30      	pop	{r4, r5, pc}
   10594:	2100      	movs	r1, #0
   10596:	7019      	strb	r1, [r3, #0]
   10598:	b900      	cbnz	r0, 1059c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x33e>
   1059a:	2200      	movs	r2, #0
   1059c:	702a      	strb	r2, [r5, #0]
   1059e:	2000      	movs	r0, #0
   105a0:	bd30      	pop	{r4, r5, pc}
   105a2:	b2c0      	uxtb	r0, r0
   105a4:	06c1      	lsls	r1, r0, #27
   105a6:	d40c      	bmi.n	105c2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x364>
   105a8:	0681      	lsls	r1, r0, #26
   105aa:	ea4f 71c0 	mov.w	r1, r0, lsl #31
   105ae:	d503      	bpl.n	105b8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x35a>
   105b0:	b9d1      	cbnz	r1, 105e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   105b2:	0781      	lsls	r1, r0, #30
   105b4:	d418      	bmi.n	105e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   105b6:	e001      	b.n	105bc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x35e>
   105b8:	2900      	cmp	r1, #0
   105ba:	d1fa      	bne.n	105b2 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x354>
   105bc:	0700      	lsls	r0, r0, #28
   105be:	d413      	bmi.n	105e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   105c0:	e010      	b.n	105e4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x386>
   105c2:	0641      	lsls	r1, r0, #25
   105c4:	d410      	bmi.n	105e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   105c6:	0681      	lsls	r1, r0, #26
   105c8:	d40e      	bmi.n	105e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   105ca:	07c1      	lsls	r1, r0, #31
   105cc:	ea4f 7180 	mov.w	r1, r0, lsl #30
   105d0:	d004      	beq.n	105dc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37e>
   105d2:	2900      	cmp	r1, #0
   105d4:	db02      	blt.n	105dc <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x37e>
   105d6:	0740      	lsls	r0, r0, #29
   105d8:	d404      	bmi.n	105e4 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x386>
   105da:	e005      	b.n	105e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   105dc:	0701      	lsls	r1, r0, #28
   105de:	d403      	bmi.n	105e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   105e0:	0740      	lsls	r0, r0, #29
   105e2:	d401      	bmi.n	105e8 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38a>
   105e4:	2001      	movs	r0, #1
   105e6:	4770      	bx	lr
   105e8:	2000      	movs	r0, #0
   105ea:	4770      	bx	lr
   105ec:	b510      	push	{r4, lr}
   105ee:	f7f4 fa59 	bl	4aa4 <sym_3LXCSEW4O4NZFGMXLMWXSJJVGEQV4VDRFCVRV4Q>
   105f2:	b110      	cbz	r0, 105fa <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x39c>
   105f4:	f240 1117 	movw	r1, #279	; 0x117
   105f8:	e004      	b.n	10604 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3a6>
   105fa:	f7f3 fb83 	bl	3d04 <sym_4WIY2RAFLOZNOS4O5BEVWEYHIO3NV42IZ2Q2NWQ>
   105fe:	b120      	cbz	r0, 1060a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3ac>
   10600:	f44f 718e 	mov.w	r1, #284	; 0x11c
   10604:	2001      	movs	r0, #1
   10606:	f7f0 fd91 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1060a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1060e:	2001      	movs	r0, #1
   10610:	f7fd b972 	b.w	d8f8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10614:	6802      	ldr	r2, [r0, #0]
   10616:	b912      	cbnz	r2, 1061e <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c0>
   10618:	6001      	str	r1, [r0, #0]
   1061a:	4770      	bx	lr
   1061c:	4602      	mov	r2, r0
   1061e:	6850      	ldr	r0, [r2, #4]
   10620:	b108      	cbz	r0, 10626 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3c8>
   10622:	428a      	cmp	r2, r1
   10624:	d1fa      	bne.n	1061c <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3be>
   10626:	428a      	cmp	r2, r1
   10628:	d0f7      	beq.n	1061a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3bc>
   1062a:	6051      	str	r1, [r2, #4]
   1062c:	4770      	bx	lr
   1062e:	b510      	push	{r4, lr}
   10630:	4604      	mov	r4, r0
   10632:	e002      	b.n	1063a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3dc>
   10634:	6820      	ldr	r0, [r4, #0]
   10636:	4780      	blx	r0
   10638:	6864      	ldr	r4, [r4, #4]
   1063a:	2c00      	cmp	r4, #0
   1063c:	d1fa      	bne.n	10634 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x3d6>
   1063e:	bd10      	pop	{r4, pc}
   10640:	b510      	push	{r4, lr}
   10642:	2000      	movs	r0, #0
   10644:	f7fd f958 	bl	d8f8 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   10648:	f7f1 f9f8 	bl	1a3c <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   1064c:	f7f1 fc8e 	bl	1f6c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   10650:	f7f1 fe2c 	bl	22ac <sym_DOZBRJLK4YK3UIAPC27JGEBDCH5Y2BCX3XMRURY>
   10654:	2800      	cmp	r0, #0
   10656:	d003      	beq.n	10660 <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x402>
   10658:	21f9      	movs	r1, #249	; 0xf9
   1065a:	2001      	movs	r0, #1
   1065c:	f7f0 fd66 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10660:	bd10      	pop	{r4, pc}
   10662:	b510      	push	{r4, lr}
   10664:	f7ff ffc2 	bl	105ec <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x38e>
   10668:	f7fe ffda 	bl	f620 <sym_OTZAOT4DEZSL3R4MXRNUS2BIBKPPCOEO2SMZYAI>
   1066c:	2800      	cmp	r0, #0
   1066e:	d004      	beq.n	1067a <sym_XGMYPLGF3Q5IDBTHXI7LBKOVEGJV3YOSYITNMYA+0x41c>
   10670:	f240 1131 	movw	r1, #305	; 0x131
   10674:	2001      	movs	r0, #1
   10676:	f7f0 fd59 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1067a:	bd10      	pop	{r4, pc}

0001067c <sym_R2552DB5ZKNDWW24PBGEV77VCDBC44WVAYRCUXQ>:
   1067c:	f7fb ba8c 	b.w	bb98 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
   10680:	000b0001 	.word	0x000b0001
   10684:	000a0002 	.word	0x000a0002
   10688:	00090005 	.word	0x00090005
   1068c:	0008000a 	.word	0x0008000a
   10690:	00070014 	.word	0x00070014
   10694:	0006001e 	.word	0x0006001e
   10698:	00050032 	.word	0x00050032
   1069c:	0004004b 	.word	0x0004004b
   106a0:	00030064 	.word	0x00030064
   106a4:	00020096 	.word	0x00020096
   106a8:	000100fa 	.word	0x000100fa
   106ac:	000001f4 	.word	0x000001f4

000106b0 <sym_5UID3SBXLTGQYGRFXVINZNLWHB7EKFT76O275JI>:
   106b0:	b510      	push	{r4, lr}
   106b2:	6844      	ldr	r4, [r0, #4]
   106b4:	7803      	ldrb	r3, [r0, #0]
   106b6:	2100      	movs	r1, #0
   106b8:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
   106bc:	3480      	adds	r4, #128	; 0x80
   106be:	4620      	mov	r0, r4
   106c0:	f7fd fb77 	bl	ddb2 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
   106c4:	b110      	cbz	r0, 106cc <sym_5UID3SBXLTGQYGRFXVINZNLWHB7EKFT76O275JI+0x1c>
   106c6:	2020      	movs	r0, #32
   106c8:	7760      	strb	r0, [r4, #29]
   106ca:	bd10      	pop	{r4, pc}
   106cc:	2183      	movs	r1, #131	; 0x83
   106ce:	207e      	movs	r0, #126	; 0x7e
   106d0:	f7f0 fd2c 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000106d4 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA>:
   106d4:	2200      	movs	r2, #0
   106d6:	704a      	strb	r2, [r1, #1]
   106d8:	2212      	movs	r2, #18
   106da:	700a      	strb	r2, [r1, #0]
   106dc:	f8d0 200a 	ldr.w	r2, [r0, #10]
   106e0:	604a      	str	r2, [r1, #4]
   106e2:	89c0      	ldrh	r0, [r0, #14]
   106e4:	8108      	strh	r0, [r1, #8]
   106e6:	4770      	bx	lr

000106e8 <sym_3AWAQCNCZH4MEGKKMZLZXM2OFWJS4TFUCWUEKRI>:
   106e8:	07c1      	lsls	r1, r0, #31
   106ea:	d001      	beq.n	106f0 <sym_3AWAQCNCZH4MEGKKMZLZXM2OFWJS4TFUCWUEKRI+0x8>
   106ec:	2001      	movs	r0, #1
   106ee:	4770      	bx	lr
   106f0:	0781      	lsls	r1, r0, #30
   106f2:	d501      	bpl.n	106f8 <sym_3AWAQCNCZH4MEGKKMZLZXM2OFWJS4TFUCWUEKRI+0x10>
   106f4:	2002      	movs	r0, #2
   106f6:	4770      	bx	lr
   106f8:	0740      	lsls	r0, r0, #29
   106fa:	d501      	bpl.n	10700 <sym_3AWAQCNCZH4MEGKKMZLZXM2OFWJS4TFUCWUEKRI+0x18>
   106fc:	2008      	movs	r0, #8
   106fe:	4770      	bx	lr
   10700:	2000      	movs	r0, #0
   10702:	4770      	bx	lr

00010704 <sym_RRC5YHH6YM3SHNGPFUCE3YX5LDRJC7YUGPWWYHQ>:
   10704:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   10708:	4607      	mov	r7, r0
   1070a:	4690      	mov	r8, r2
   1070c:	468b      	mov	fp, r1
   1070e:	2601      	movs	r6, #1
   10710:	4608      	mov	r0, r1
   10712:	f7fd fdd4 	bl	e2be <sym_IMNEYE333DZSYFXBOKOMWVRET5JB5STH5YU7A5A>
   10716:	4682      	mov	sl, r0
   10718:	4658      	mov	r0, fp
   1071a:	f7fd fdd2 	bl	e2c2 <sym_UA37MSV2DKCYXYIDDSBDMFEEGPUD3YMYMAH3IEI>
   1071e:	4681      	mov	r9, r0
   10720:	f7ff ffe2 	bl	106e8 <sym_3AWAQCNCZH4MEGKKMZLZXM2OFWJS4TFUCWUEKRI>
   10724:	4604      	mov	r4, r0
   10726:	4650      	mov	r0, sl
   10728:	f7ff ffde 	bl	106e8 <sym_3AWAQCNCZH4MEGKKMZLZXM2OFWJS4TFUCWUEKRI>
   1072c:	4605      	mov	r5, r0
   1072e:	ea54 0005 	orrs.w	r0, r4, r5
   10732:	d100      	bne.n	10736 <sym_RRC5YHH6YM3SHNGPFUCE3YX5LDRJC7YUGPWWYHQ+0x32>
   10734:	2600      	movs	r6, #0
   10736:	f7f7 f94f 	bl	79d8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1073a:	ea10 0f09 	tst.w	r0, r9
   1073e:	d100      	bne.n	10742 <sym_RRC5YHH6YM3SHNGPFUCE3YX5LDRJC7YUGPWWYHQ+0x3e>
   10740:	2400      	movs	r4, #0
   10742:	f7f7 f949 	bl	79d8 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10746:	ea10 0f0a 	tst.w	r0, sl
   1074a:	d100      	bne.n	1074e <sym_RRC5YHH6YM3SHNGPFUCE3YX5LDRJC7YUGPWWYHQ+0x4a>
   1074c:	2500      	movs	r5, #0
   1074e:	f897 006a 	ldrb.w	r0, [r7, #106]	; 0x6a
   10752:	42a0      	cmp	r0, r4
   10754:	d100      	bne.n	10758 <sym_RRC5YHH6YM3SHNGPFUCE3YX5LDRJC7YUGPWWYHQ+0x54>
   10756:	2400      	movs	r4, #0
   10758:	f888 4000 	strb.w	r4, [r8]
   1075c:	f897 006b 	ldrb.w	r0, [r7, #107]	; 0x6b
   10760:	42a8      	cmp	r0, r5
   10762:	d100      	bne.n	10766 <sym_RRC5YHH6YM3SHNGPFUCE3YX5LDRJC7YUGPWWYHQ+0x62>
   10764:	2500      	movs	r5, #0
   10766:	f888 5001 	strb.w	r5, [r8, #1]
   1076a:	b974      	cbnz	r4, 1078a <sym_RRC5YHH6YM3SHNGPFUCE3YX5LDRJC7YUGPWWYHQ+0x86>
   1076c:	b96d      	cbnz	r5, 1078a <sym_RRC5YHH6YM3SHNGPFUCE3YX5LDRJC7YUGPWWYHQ+0x86>
   1076e:	4658      	mov	r0, fp
   10770:	f7fd fd93 	bl	e29a <sym_FVNWXAKGSIJN4YGWC4O4B4H2WPPILAIKB7LLDVI>
   10774:	f8b7 1094 	ldrh.w	r1, [r7, #148]	; 0x94
   10778:	1a40      	subs	r0, r0, r1
   1077a:	b200      	sxth	r0, r0
   1077c:	f647 71fe 	movw	r1, #32766	; 0x7ffe
   10780:	4288      	cmp	r0, r1
   10782:	dc01      	bgt.n	10788 <sym_RRC5YHH6YM3SHNGPFUCE3YX5LDRJC7YUGPWWYHQ+0x84>
   10784:	2800      	cmp	r0, #0
   10786:	dc00      	bgt.n	1078a <sym_RRC5YHH6YM3SHNGPFUCE3YX5LDRJC7YUGPWWYHQ+0x86>
   10788:	2600      	movs	r6, #0
   1078a:	4630      	mov	r0, r6
   1078c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
   10790:	b510      	push	{r4, lr}
   10792:	2801      	cmp	r0, #1
   10794:	d006      	beq.n	107a4 <sym_RRC5YHH6YM3SHNGPFUCE3YX5LDRJC7YUGPWWYHQ+0xa0>
   10796:	2802      	cmp	r0, #2
   10798:	d004      	beq.n	107a4 <sym_RRC5YHH6YM3SHNGPFUCE3YX5LDRJC7YUGPWWYHQ+0xa0>
   1079a:	f44f 7125 	mov.w	r1, #660	; 0x294
   1079e:	2006      	movs	r0, #6
   107a0:	f7f0 fcc4 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   107a4:	bd10      	pop	{r4, pc}

000107a6 <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   107a6:	b510      	push	{r4, lr}
   107a8:	f7f7 fd04 	bl	81b4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   107ac:	f000 f81d 	bl	107ea <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   107b0:	f7f7 f9e0 	bl	7b74 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   107b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   107b8:	f7f7 bada 	b.w	7d70 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

000107bc <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   107bc:	b510      	push	{r4, lr}
   107be:	24c8      	movs	r4, #200	; 0xc8
   107c0:	1e64      	subs	r4, r4, #1
   107c2:	b2e4      	uxtb	r4, r4
   107c4:	f7f7 f9f4 	bl	7bb0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   107c8:	2802      	cmp	r0, #2
   107ca:	d003      	beq.n	107d4 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   107cc:	2801      	cmp	r0, #1
   107ce:	d000      	beq.n	107d2 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   107d0:	2000      	movs	r0, #0
   107d2:	bd10      	pop	{r4, pc}
   107d4:	2c00      	cmp	r4, #0
   107d6:	d1f3      	bne.n	107c0 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   107d8:	21f5      	movs	r1, #245	; 0xf5
   107da:	203b      	movs	r0, #59	; 0x3b
   107dc:	f7f0 fca6 	bl	112c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   107e0:	5840      	ldr	r0, [r0, r1]
   107e2:	2800      	cmp	r0, #0
   107e4:	d000      	beq.n	107e8 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   107e6:	2001      	movs	r0, #1
   107e8:	4770      	bx	lr

000107ea <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   107ea:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   107ee:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   107f2:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   107f6:	f3bf 8f4f 	dsb	sy
   107fa:	f3bf 8f6f 	isb	sy
   107fe:	f7f7 bb51 	b.w	7ea4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   10802:	2800      	cmp	r0, #0
   10804:	db09      	blt.n	1081a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   10806:	f000 021f 	and.w	r2, r0, #31
   1080a:	2101      	movs	r1, #1
   1080c:	4091      	lsls	r1, r2
   1080e:	0940      	lsrs	r0, r0, #5
   10810:	0080      	lsls	r0, r0, #2
   10812:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10816:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1081a:	4770      	bx	lr
   1081c:	2800      	cmp	r0, #0
   1081e:	db0d      	blt.n	1083c <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   10820:	f000 021f 	and.w	r2, r0, #31
   10824:	2101      	movs	r1, #1
   10826:	4091      	lsls	r1, r2
   10828:	0940      	lsrs	r0, r0, #5
   1082a:	0080      	lsls	r0, r0, #2
   1082c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10830:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10834:	f3bf 8f4f 	dsb	sy
   10838:	f3bf 8f6f 	isb	sy
   1083c:	4770      	bx	lr
   1083e:	5840      	ldr	r0, [r0, r1]
   10840:	2800      	cmp	r0, #0
   10842:	d000      	beq.n	10846 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   10844:	2001      	movs	r0, #1
   10846:	4770      	bx	lr
   10848:	5840      	ldr	r0, [r0, r1]
   1084a:	2800      	cmp	r0, #0
   1084c:	d000      	beq.n	10850 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   1084e:	2001      	movs	r0, #1
   10850:	4770      	bx	lr

00010852 <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   10852:	b510      	push	{r4, lr}
   10854:	4604      	mov	r4, r0
   10856:	4608      	mov	r0, r1
   10858:	f7f7 fdda 	bl	8410 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   1085c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10860:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   10864:	fbb0 f0f1 	udiv	r0, r0, r1
   10868:	1a20      	subs	r0, r4, r0
   1086a:	1e80      	subs	r0, r0, #2
   1086c:	bd10      	pop	{r4, pc}

0001086e <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   1086e:	b510      	push	{r4, lr}
   10870:	4604      	mov	r4, r0
   10872:	4608      	mov	r0, r1
   10874:	f7f7 fdcc 	bl	8410 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10878:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1087c:	fbb0 f0f1 	udiv	r0, r0, r1
   10880:	1a20      	subs	r0, r4, r0
   10882:	bd10      	pop	{r4, pc}

00010884 <mpsl_fem_init>:
   10884:	f7f8 bafa 	b.w	8e7c <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

00010888 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
   10888:	b570      	push	{r4, r5, r6, lr}
   1088a:	4614      	mov	r4, r2
   1088c:	460d      	mov	r5, r1
   1088e:	1b00      	subs	r0, r0, r4
   10890:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   10894:	4288      	cmp	r0, r1
   10896:	da01      	bge.n	1089c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
   10898:	4608      	mov	r0, r1
   1089a:	e002      	b.n	108a2 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   1089c:	287f      	cmp	r0, #127	; 0x7f
   1089e:	dd00      	ble.n	108a2 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   108a0:	207f      	movs	r0, #127	; 0x7f
   108a2:	4619      	mov	r1, r3
   108a4:	b240      	sxtb	r0, r0
   108a6:	f7f8 fb27 	bl	8ef8 <mpsl_tx_power_radio_supported_power_adjust>
   108aa:	7028      	strb	r0, [r5, #0]
   108ac:	706c      	strb	r4, [r5, #1]
   108ae:	2100      	movs	r1, #0
   108b0:	4420      	add	r0, r4
   108b2:	70a9      	strb	r1, [r5, #2]
   108b4:	b240      	sxtb	r0, r0
   108b6:	bd70      	pop	{r4, r5, r6, pc}
   108b8:	f04f 30ff 	mov.w	r0, #4294967295
   108bc:	4770      	bx	lr
   108be:	2000      	movs	r0, #0
   108c0:	4770      	bx	lr
   108c2:	2000      	movs	r0, #0
   108c4:	4770      	bx	lr
   108c6:	f04f 30ff 	mov.w	r0, #4294967295
   108ca:	4770      	bx	lr
   108cc:	4770      	bx	lr
   108ce:	4770      	bx	lr
   108d0:	2000      	movs	r0, #0
   108d2:	4770      	bx	lr
   108d4:	2100      	movs	r1, #0
   108d6:	7001      	strb	r1, [r0, #0]
   108d8:	4770      	bx	lr
   108da:	f04f 30ff 	mov.w	r0, #4294967295
   108de:	4770      	bx	lr
   108e0:	f04f 30ff 	mov.w	r0, #4294967295
   108e4:	4770      	bx	lr
   108e6:	2100      	movs	r1, #0
   108e8:	7001      	strb	r1, [r0, #0]
   108ea:	4770      	bx	lr
   108ec:	f04f 30ff 	mov.w	r0, #4294967295
   108f0:	4770      	bx	lr
   108f2:	f04f 30ff 	mov.w	r0, #4294967295
   108f6:	4770      	bx	lr
   108f8:	7800      	ldrb	r0, [r0, #0]
   108fa:	2800      	cmp	r0, #0
   108fc:	d001      	beq.n	10902 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x7a>
   108fe:	f06f 0015 	mvn.w	r0, #21
   10902:	4770      	bx	lr
   10904:	2000      	movs	r0, #0
   10906:	4770      	bx	lr
   10908:	2200      	movs	r2, #0
   1090a:	f7ff bfbd 	b.w	10888 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>
   1090e:	2804      	cmp	r0, #4
   10910:	d202      	bcs.n	10918 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x90>
   10912:	f04f 0028 	mov.w	r0, #40	; 0x28
   10916:	4770      	bx	lr
   10918:	d102      	bne.n	10920 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x98>
   1091a:	f04f 0010 	mov.w	r0, #16
   1091e:	4770      	bx	lr
   10920:	f04f 0000 	mov.w	r0, #0
   10924:	4770      	bx	lr
   10926:	2100      	movs	r1, #0
   10928:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   1092c:	f800 1f24 	strb.w	r1, [r0, #36]!
   10930:	7041      	strb	r1, [r0, #1]
   10932:	4770      	bx	lr

00010934 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
   10934:	b570      	push	{r4, r5, r6, lr}
   10936:	f7f8 fb43 	bl	8fc0 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   1093a:	4605      	mov	r5, r0
   1093c:	2400      	movs	r4, #0
   1093e:	e006      	b.n	1094e <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
   10940:	4620      	mov	r0, r4
   10942:	f7f8 fb43 	bl	8fcc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   10946:	f7ff ffee 	bl	10926 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x9e>
   1094a:	1c64      	adds	r4, r4, #1
   1094c:	b2e4      	uxtb	r4, r4
   1094e:	42ac      	cmp	r4, r5
   10950:	d3f6      	bcc.n	10940 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
   10952:	bd70      	pop	{r4, r5, r6, pc}

00010954 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
   10954:	f7fb bb46 	b.w	bfe4 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

00010958 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
   10958:	b510      	push	{r4, lr}
   1095a:	2000      	movs	r0, #0
   1095c:	f7fb fe48 	bl	c5f0 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
   10960:	6800      	ldr	r0, [r0, #0]
   10962:	2800      	cmp	r0, #0
   10964:	bf18      	it	ne
   10966:	2001      	movne	r0, #1
   10968:	bd10      	pop	{r4, pc}

0001096a <sym_MGCUANL7Q2CUPWKYBFLWSWSNXIEEYBPZTHT2VZI>:
   1096a:	b510      	push	{r4, lr}
   1096c:	f7fa fecc 	bl	b708 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
   10970:	f7fa fe62 	bl	b638 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
   10974:	f000 f804 	bl	10980 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
   10978:	b280      	uxth	r0, r0
   1097a:	bd10      	pop	{r4, pc}

0001097c <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
   1097c:	f7fb be12 	b.w	c5a4 <sym_E5Q6O4GY4KO3GMW7WJYXLZKHO7ZGDWLU4ZPAKWA>

00010980 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
   10980:	0a41      	lsrs	r1, r0, #9
   10982:	f643 5209 	movw	r2, #15625	; 0x3d09
   10986:	4351      	muls	r1, r2
   10988:	f3c0 0008 	ubfx	r0, r0, #0, #9
   1098c:	fb10 f002 	smulbb	r0, r0, r2
   10990:	f500 7080 	add.w	r0, r0, #256	; 0x100
   10994:	eb01 2050 	add.w	r0, r1, r0, lsr #9
   10998:	4770      	bx	lr
   1099a:	2800      	cmp	r0, #0
   1099c:	db09      	blt.n	109b2 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
   1099e:	f000 021f 	and.w	r2, r0, #31
   109a2:	2101      	movs	r1, #1
   109a4:	4091      	lsls	r1, r2
   109a6:	0940      	lsrs	r0, r0, #5
   109a8:	0080      	lsls	r0, r0, #2
   109aa:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   109ae:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   109b2:	4770      	bx	lr
   109b4:	2800      	cmp	r0, #0
   109b6:	db0d      	blt.n	109d4 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
   109b8:	f000 021f 	and.w	r2, r0, #31
   109bc:	2101      	movs	r1, #1
   109be:	4091      	lsls	r1, r2
   109c0:	0940      	lsrs	r0, r0, #5
   109c2:	0080      	lsls	r0, r0, #2
   109c4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   109c8:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   109cc:	f3bf 8f4f 	dsb	sy
   109d0:	f3bf 8f6f 	isb	sy
   109d4:	4770      	bx	lr
   109d6:	5840      	ldr	r0, [r0, r1]
   109d8:	2800      	cmp	r0, #0
   109da:	d000      	beq.n	109de <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x5e>
   109dc:	2001      	movs	r0, #1
   109de:	4770      	bx	lr
   109e0:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
   109e4:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
   109e8:	f3c2 4200 	ubfx	r2, r2, #16, #1
   109ec:	f000 0001 	and.w	r0, r0, #1
   109f0:	b11a      	cbz	r2, 109fa <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x7a>
   109f2:	4288      	cmp	r0, r1
   109f4:	d101      	bne.n	109fa <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x7a>
   109f6:	2001      	movs	r0, #1
   109f8:	4770      	bx	lr
   109fa:	2000      	movs	r0, #0
   109fc:	4770      	bx	lr

000109fe <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
   109fe:	b510      	push	{r4, lr}
   10a00:	2101      	movs	r1, #1
   10a02:	0788      	lsls	r0, r1, #30
   10a04:	f7fb f992 	bl	bd2c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   10a08:	2800      	cmp	r0, #0
   10a0a:	d000      	beq.n	10a0e <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
   10a0c:	2001      	movs	r0, #1
   10a0e:	bd10      	pop	{r4, pc}

00010a10 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
   10a10:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10a14:	2101      	movs	r1, #1
   10a16:	6001      	str	r1, [r0, #0]
   10a18:	4770      	bx	lr

00010a1a <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
   10a1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   10a1e:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   10a22:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   10a26:	f3c1 4100 	ubfx	r1, r1, #16, #1
   10a2a:	f002 0203 	and.w	r2, r2, #3
   10a2e:	b119      	cbz	r1, 10a38 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1e>
   10a30:	4282      	cmp	r2, r0
   10a32:	d101      	bne.n	10a38 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1e>
   10a34:	2001      	movs	r0, #1
   10a36:	4770      	bx	lr
   10a38:	2000      	movs	r0, #0
   10a3a:	4770      	bx	lr

00010a3c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
   10a3c:	b510      	push	{r4, lr}
   10a3e:	2100      	movs	r1, #0
   10a40:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10a44:	f7fb f972 	bl	bd2c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   10a48:	2800      	cmp	r0, #0
   10a4a:	d000      	beq.n	10a4e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
   10a4c:	2001      	movs	r0, #1
   10a4e:	bd10      	pop	{r4, pc}
   10a50:	2800      	cmp	r0, #0
   10a52:	db09      	blt.n	10a68 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
   10a54:	f000 021f 	and.w	r2, r0, #31
   10a58:	2101      	movs	r1, #1
   10a5a:	4091      	lsls	r1, r2
   10a5c:	0940      	lsrs	r0, r0, #5
   10a5e:	0080      	lsls	r0, r0, #2
   10a60:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10a64:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10a68:	4770      	bx	lr
   10a6a:	2800      	cmp	r0, #0
   10a6c:	db0d      	blt.n	10a8a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
   10a6e:	f000 021f 	and.w	r2, r0, #31
   10a72:	2101      	movs	r1, #1
   10a74:	4091      	lsls	r1, r2
   10a76:	0940      	lsrs	r0, r0, #5
   10a78:	0080      	lsls	r0, r0, #2
   10a7a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10a7e:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10a82:	f3bf 8f4f 	dsb	sy
   10a86:	f3bf 8f6f 	isb	sy
   10a8a:	4770      	bx	lr
   10a8c:	00021000 	.word	0x00021000
   10a90:	000000fa 	.word	0x000000fa
   10a94:	7e4f21c1 	.word	0x7e4f21c1
   10a98:	dbd3036e 	.word	0xdbd3036e
   10a9c:	bb6f9d19 	.word	0xbb6f9d19
   10aa0:	2c069b50 	.word	0x2c069b50
   10aa4:	cc80843e 	.word	0xcc80843e
   10aa8:	2800      	cmp	r0, #0
   10aaa:	db09      	blt.n	10ac0 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
   10aac:	f000 021f 	and.w	r2, r0, #31
   10ab0:	2101      	movs	r1, #1
   10ab2:	4091      	lsls	r1, r2
   10ab4:	0940      	lsrs	r0, r0, #5
   10ab6:	0080      	lsls	r0, r0, #2
   10ab8:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10abc:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10ac0:	4770      	bx	lr

00010ac2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
   10ac2:	f3ef 8110 	mrs	r1, PRIMASK
   10ac6:	b672      	cpsid	i
   10ac8:	7802      	ldrb	r2, [r0, #0]
   10aca:	2a01      	cmp	r2, #1
   10acc:	d001      	beq.n	10ad2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
   10ace:	2201      	movs	r2, #1
   10ad0:	e000      	b.n	10ad4 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
   10ad2:	2200      	movs	r2, #0
   10ad4:	2301      	movs	r3, #1
   10ad6:	7003      	strb	r3, [r0, #0]
   10ad8:	b901      	cbnz	r1, 10adc <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
   10ada:	b662      	cpsie	i
   10adc:	b10a      	cbz	r2, 10ae2 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
   10ade:	2000      	movs	r0, #0
   10ae0:	4770      	bx	lr
   10ae2:	f06f 0022 	mvn.w	r0, #34	; 0x22
   10ae6:	4770      	bx	lr

00010ae8 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
   10ae8:	2100      	movs	r1, #0
   10aea:	7001      	strb	r1, [r0, #0]
   10aec:	4608      	mov	r0, r1
   10aee:	4770      	bx	lr

00010af0 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
   10af0:	f3ef 8110 	mrs	r1, PRIMASK
   10af4:	b672      	cpsid	i
   10af6:	2200      	movs	r2, #0
   10af8:	7002      	strb	r2, [r0, #0]
   10afa:	b901      	cbnz	r1, 10afe <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
   10afc:	b662      	cpsie	i
   10afe:	2000      	movs	r0, #0
   10b00:	4770      	bx	lr

00010b02 <mpsl_low_priority_process>:
   10b02:	f7fb bf11 	b.w	c928 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

00010b06 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
   10b06:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10b0a:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10b0e:	280f      	cmp	r0, #15
   10b10:	d001      	beq.n	10b16 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
   10b12:	2000      	movs	r0, #0
   10b14:	4770      	bx	lr
   10b16:	2001      	movs	r0, #1
   10b18:	4770      	bx	lr

00010b1a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
   10b1a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10b1e:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10b22:	280a      	cmp	r0, #10
   10b24:	d001      	beq.n	10b2a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
   10b26:	2000      	movs	r0, #0
   10b28:	4770      	bx	lr
   10b2a:	2001      	movs	r0, #1
   10b2c:	4770      	bx	lr

00010b2e <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
   10b2e:	b500      	push	{lr}
   10b30:	f7ff fff3 	bl	10b1a <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   10b34:	b120      	cbz	r0, 10b40 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
   10b36:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10b3a:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10b3e:	b108      	cbz	r0, 10b44 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
   10b40:	2000      	movs	r0, #0
   10b42:	bd00      	pop	{pc}
   10b44:	2001      	movs	r0, #1
   10b46:	bd00      	pop	{pc}

00010b48 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
   10b48:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10b4c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10b50:	280e      	cmp	r0, #14
   10b52:	d001      	beq.n	10b58 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
   10b54:	2000      	movs	r0, #0
   10b56:	4770      	bx	lr
   10b58:	2001      	movs	r0, #1
   10b5a:	4770      	bx	lr

00010b5c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
   10b5c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10b60:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10b64:	2810      	cmp	r0, #16
   10b66:	d001      	beq.n	10b6c <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
   10b68:	2000      	movs	r0, #0
   10b6a:	4770      	bx	lr
   10b6c:	2001      	movs	r0, #1
   10b6e:	4770      	bx	lr

00010b70 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
   10b70:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10b74:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10b78:	2806      	cmp	r0, #6
   10b7a:	d003      	beq.n	10b84 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10b7c:	1c40      	adds	r0, r0, #1
   10b7e:	d001      	beq.n	10b84 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10b80:	2000      	movs	r0, #0
   10b82:	4770      	bx	lr
   10b84:	2001      	movs	r0, #1
   10b86:	4770      	bx	lr

00010b88 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
   10b88:	b500      	push	{lr}
   10b8a:	f7ff fff1 	bl	10b70 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10b8e:	b148      	cbz	r0, 10ba4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10b90:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10b94:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10b98:	2806      	cmp	r0, #6
   10b9a:	d303      	bcc.n	10ba4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10b9c:	1c40      	adds	r0, r0, #1
   10b9e:	d001      	beq.n	10ba4 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10ba0:	2001      	movs	r0, #1
   10ba2:	bd00      	pop	{pc}
   10ba4:	2000      	movs	r0, #0
   10ba6:	bd00      	pop	{pc}

00010ba8 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
   10ba8:	b500      	push	{lr}
   10baa:	f7ff ffe1 	bl	10b70 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10bae:	b138      	cbz	r0, 10bc0 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
   10bb0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10bb4:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10bb8:	2806      	cmp	r0, #6
   10bba:	d303      	bcc.n	10bc4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10bbc:	1c40      	adds	r0, r0, #1
   10bbe:	d001      	beq.n	10bc4 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10bc0:	2000      	movs	r0, #0
   10bc2:	bd00      	pop	{pc}
   10bc4:	2001      	movs	r0, #1
   10bc6:	bd00      	pop	{pc}

00010bc8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
   10bc8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10bcc:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10bd0:	280d      	cmp	r0, #13
   10bd2:	d001      	beq.n	10bd8 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
   10bd4:	2000      	movs	r0, #0
   10bd6:	4770      	bx	lr
   10bd8:	2001      	movs	r0, #1
   10bda:	4770      	bx	lr

00010bdc <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
   10bdc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10be0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10be4:	2808      	cmp	r0, #8
   10be6:	d001      	beq.n	10bec <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
   10be8:	2000      	movs	r0, #0
   10bea:	4770      	bx	lr
   10bec:	2001      	movs	r0, #1
   10bee:	4770      	bx	lr

00010bf0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
   10bf0:	f7fb bed4 	b.w	c99c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00010bf4 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>:
   10bf4:	f7fb bed2 	b.w	c99c <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

00010bf8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
   10bf8:	b4f0      	push	{r4, r5, r6, r7}
   10bfa:	ea80 0c01 	eor.w	ip, r0, r1
   10bfe:	4603      	mov	r3, r0
   10c00:	f01c 0f03 	tst.w	ip, #3
   10c04:	d13c      	bne.n	10c80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10c06:	f013 0f03 	tst.w	r3, #3
   10c0a:	d00b      	beq.n	10c24 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
   10c0c:	2a00      	cmp	r2, #0
   10c0e:	bf04      	itt	eq
   10c10:	bcf0      	popeq	{r4, r5, r6, r7}
   10c12:	4770      	bxeq	lr
   10c14:	f811 cb01 	ldrb.w	ip, [r1], #1
   10c18:	f803 cb01 	strb.w	ip, [r3], #1
   10c1c:	1e52      	subs	r2, r2, #1
   10c1e:	f013 0f03 	tst.w	r3, #3
   10c22:	d1f3      	bne.n	10c0c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
   10c24:	2a03      	cmp	r2, #3
   10c26:	d94f      	bls.n	10cc8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   10c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10c2c:	d24c      	bcs.n	10cc8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   10c2e:	f1c2 0c00 	rsb	ip, r2, #0
   10c32:	ea4f 74ec 	mov.w	r4, ip, asr #31
   10c36:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
   10c3a:	ea4f 0cac 	mov.w	ip, ip, asr #2
   10c3e:	f1cc 0c00 	rsb	ip, ip, #0
   10c42:	f1bc 0f00 	cmp.w	ip, #0
   10c46:	dd1b      	ble.n	10c80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10c48:	1f0d      	subs	r5, r1, #4
   10c4a:	1f1c      	subs	r4, r3, #4
   10c4c:	f01c 0f01 	tst.w	ip, #1
   10c50:	d003      	beq.n	10c5a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
   10c52:	f855 6f04 	ldr.w	r6, [r5, #4]!
   10c56:	f844 6f04 	str.w	r6, [r4, #4]!
   10c5a:	ea5f 066c 	movs.w	r6, ip, asr #1
   10c5e:	d007      	beq.n	10c70 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
   10c60:	686f      	ldr	r7, [r5, #4]
   10c62:	6067      	str	r7, [r4, #4]
   10c64:	f855 7f08 	ldr.w	r7, [r5, #8]!
   10c68:	f844 7f08 	str.w	r7, [r4, #8]!
   10c6c:	1e76      	subs	r6, r6, #1
   10c6e:	d1f7      	bne.n	10c60 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
   10c70:	eb01 018c 	add.w	r1, r1, ip, lsl #2
   10c74:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   10c78:	f1cc 0c00 	rsb	ip, ip, #0
   10c7c:	eb02 028c 	add.w	r2, r2, ip, lsl #2
   10c80:	2a00      	cmp	r2, #0
   10c82:	bf04      	itt	eq
   10c84:	bcf0      	popeq	{r4, r5, r6, r7}
   10c86:	4770      	bxeq	lr
   10c88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10c8c:	d226      	bcs.n	10cdc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   10c8e:	2a00      	cmp	r2, #0
   10c90:	bfdc      	itt	le
   10c92:	bcf0      	pople	{r4, r5, r6, r7}
   10c94:	4770      	bxle	lr
   10c96:	1e49      	subs	r1, r1, #1
   10c98:	1e5b      	subs	r3, r3, #1
   10c9a:	f012 0f01 	tst.w	r2, #1
   10c9e:	d003      	beq.n	10ca8 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
   10ca0:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   10ca4:	f803 cf01 	strb.w	ip, [r3, #1]!
   10ca8:	1052      	asrs	r2, r2, #1
   10caa:	bf04      	itt	eq
   10cac:	bcf0      	popeq	{r4, r5, r6, r7}
   10cae:	4770      	bxeq	lr
   10cb0:	f891 c001 	ldrb.w	ip, [r1, #1]
   10cb4:	f883 c001 	strb.w	ip, [r3, #1]
   10cb8:	f811 cf02 	ldrb.w	ip, [r1, #2]!
   10cbc:	f803 cf02 	strb.w	ip, [r3, #2]!
   10cc0:	1e52      	subs	r2, r2, #1
   10cc2:	d1f5      	bne.n	10cb0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
   10cc4:	bcf0      	pop	{r4, r5, r6, r7}
   10cc6:	4770      	bx	lr
   10cc8:	2a04      	cmp	r2, #4
   10cca:	d3d9      	bcc.n	10c80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10ccc:	f851 cb04 	ldr.w	ip, [r1], #4
   10cd0:	1f12      	subs	r2, r2, #4
   10cd2:	f843 cb04 	str.w	ip, [r3], #4
   10cd6:	2a04      	cmp	r2, #4
   10cd8:	d2f8      	bcs.n	10ccc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
   10cda:	e7d1      	b.n	10c80 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10cdc:	f811 cb01 	ldrb.w	ip, [r1], #1
   10ce0:	f803 cb01 	strb.w	ip, [r3], #1
   10ce4:	1e52      	subs	r2, r2, #1
   10ce6:	d1f9      	bne.n	10cdc <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   10ce8:	bcf0      	pop	{r4, r5, r6, r7}
   10cea:	4770      	bx	lr

00010cec <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
   10cec:	b470      	push	{r4, r5, r6}
   10cee:	4603      	mov	r3, r0
   10cf0:	f001 0cff 	and.w	ip, r1, #255	; 0xff
   10cf4:	f010 0f03 	tst.w	r0, #3
   10cf8:	d009      	beq.n	10d0e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
   10cfa:	2a00      	cmp	r2, #0
   10cfc:	bf04      	itt	eq
   10cfe:	bc70      	popeq	{r4, r5, r6}
   10d00:	4770      	bxeq	lr
   10d02:	f803 cb01 	strb.w	ip, [r3], #1
   10d06:	1e52      	subs	r2, r2, #1
   10d08:	f013 0f03 	tst.w	r3, #3
   10d0c:	d1f5      	bne.n	10cfa <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
   10d0e:	b2c9      	uxtb	r1, r1
   10d10:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   10d14:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
   10d18:	2a03      	cmp	r2, #3
   10d1a:	d939      	bls.n	10d90 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   10d1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10d20:	d236      	bcs.n	10d90 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   10d22:	4251      	negs	r1, r2
   10d24:	17cc      	asrs	r4, r1, #31
   10d26:	eb01 7194 	add.w	r1, r1, r4, lsr #30
   10d2a:	1089      	asrs	r1, r1, #2
   10d2c:	424e      	negs	r6, r1
   10d2e:	2e00      	cmp	r6, #0
   10d30:	dd11      	ble.n	10d56 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10d32:	1f19      	subs	r1, r3, #4
   10d34:	f016 0f01 	tst.w	r6, #1
   10d38:	bf18      	it	ne
   10d3a:	f841 5f04 	strne.w	r5, [r1, #4]!
   10d3e:	1074      	asrs	r4, r6, #1
   10d40:	d004      	beq.n	10d4c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
   10d42:	604d      	str	r5, [r1, #4]
   10d44:	f841 5f08 	str.w	r5, [r1, #8]!
   10d48:	1e64      	subs	r4, r4, #1
   10d4a:	d1fa      	bne.n	10d42 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
   10d4c:	4271      	negs	r1, r6
   10d4e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   10d52:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   10d56:	2a00      	cmp	r2, #0
   10d58:	bf04      	itt	eq
   10d5a:	bc70      	popeq	{r4, r5, r6}
   10d5c:	4770      	bxeq	lr
   10d5e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10d62:	d21d      	bcs.n	10da0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   10d64:	2a00      	cmp	r2, #0
   10d66:	bfdc      	itt	le
   10d68:	bc70      	pople	{r4, r5, r6}
   10d6a:	4770      	bxle	lr
   10d6c:	1e59      	subs	r1, r3, #1
   10d6e:	f012 0f01 	tst.w	r2, #1
   10d72:	bf18      	it	ne
   10d74:	f801 cf01 	strbne.w	ip, [r1, #1]!
   10d78:	1052      	asrs	r2, r2, #1
   10d7a:	bf04      	itt	eq
   10d7c:	bc70      	popeq	{r4, r5, r6}
   10d7e:	4770      	bxeq	lr
   10d80:	f881 c001 	strb.w	ip, [r1, #1]
   10d84:	f801 cf02 	strb.w	ip, [r1, #2]!
   10d88:	1e52      	subs	r2, r2, #1
   10d8a:	d1f9      	bne.n	10d80 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
   10d8c:	bc70      	pop	{r4, r5, r6}
   10d8e:	4770      	bx	lr
   10d90:	2a04      	cmp	r2, #4
   10d92:	d3e0      	bcc.n	10d56 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10d94:	1f12      	subs	r2, r2, #4
   10d96:	f843 5b04 	str.w	r5, [r3], #4
   10d9a:	2a04      	cmp	r2, #4
   10d9c:	d2fa      	bcs.n	10d94 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
   10d9e:	e7da      	b.n	10d56 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10da0:	f803 cb01 	strb.w	ip, [r3], #1
   10da4:	1e52      	subs	r2, r2, #1
   10da6:	d1fb      	bne.n	10da0 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   10da8:	bc70      	pop	{r4, r5, r6}
   10daa:	4770      	bx	lr
   10dac:	1702080c 	.word	0x1702080c
   10db0:	0201010d 	.word	0x0201010d
   10db4:	01010909 	.word	0x01010909
   10db8:	18090206 	.word	0x18090206
   10dbc:	01010318 	.word	0x01010318
   10dc0:	03030909 	.word	0x03030909
   10dc4:	01020305 	.word	0x01020305
   10dc8:	24020223 	.word	0x24020223
   10dcc:	04041009 	.word	0x04041009
   10dd0:	0b0b0505 	.word	0x0b0b0505
   10dd4:	0b04      	.short	0x0b04
   10dd6:	2b          	.byte	0x2b
   10dd7:	d8          	.byte	0xd8
   10dd8:	f8f4f0ec 	.word	0xf8f4f0ec
   10ddc:	030200fc 	.word	0x030200fc
   10de0:	07060504 	.word	0x07060504
   10de4:	00000008 	.word	0x00000008
	...
   10df8:	01010100 	.word	0x01010100
   10dfc:	02020201 	.word	0x02020201
   10e00:	03030302 	.word	0x03030302
   10e04:	04040403 	.word	0x04040403
   10e08:	05050504 	.word	0x05050504
   10e0c:	07060605 	.word	0x07060605
   10e10:	0b0a0908 	.word	0x0b0a0908
   10e14:	00000d0c 	.word	0x00000d0c
	...
   10e28:	01010000 	.word	0x01010000
   10e2c:	02020101 	.word	0x02020101
   10e30:	03030202 	.word	0x03030202
   10e34:	04040303 	.word	0x04040303
   10e38:	05050404 	.word	0x05050404
   10e3c:	06060505 	.word	0x06060505
   10e40:	00090806 	.word	0x00090806
   10e44:	00000000 	.word	0x00000000

00010e48 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   10e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e4c:	b09f      	sub	sp, #124	; 0x7c
   10e4e:	4682      	mov	sl, r0
   10e50:	9103      	str	r1, [sp, #12]
   10e52:	4616      	mov	r6, r2
   10e54:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   10e56:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   10e58:	7830      	ldrb	r0, [r6, #0]
   10e5a:	b910      	cbnz	r0, 10e62 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   10e5c:	4628      	mov	r0, r5
   10e5e:	f000 bd85 	b.w	1196c <z_cbvprintf_impl+0xb24>
			OUTC(*fp++);
   10e62:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
   10e64:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   10e66:	9306      	str	r3, [sp, #24]
		if (*fp != '%') {
   10e68:	d006      	beq.n	10e78 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
   10e6a:	9903      	ldr	r1, [sp, #12]
			OUTC('%');
   10e6c:	47d0      	blx	sl
   10e6e:	2800      	cmp	r0, #0
   10e70:	f2c0 857c 	blt.w	1196c <z_cbvprintf_impl+0xb24>
   10e74:	3501      	adds	r5, #1
		if (bps == NULL) {
   10e76:	e227      	b.n	112c8 <z_cbvprintf_impl+0x480>
		} state = {
   10e78:	2218      	movs	r2, #24
   10e7a:	2100      	movs	r1, #0
   10e7c:	a810      	add	r0, sp, #64	; 0x40
   10e7e:	f013 fdf0 	bl	24a62 <memset>
	if (*sp == '%') {
   10e82:	7873      	ldrb	r3, [r6, #1]
   10e84:	2b25      	cmp	r3, #37	; 0x25
   10e86:	d07d      	beq.n	10f84 <z_cbvprintf_impl+0x13c>
   10e88:	2300      	movs	r3, #0
   10e8a:	1c70      	adds	r0, r6, #1
   10e8c:	4698      	mov	r8, r3
   10e8e:	469e      	mov	lr, r3
   10e90:	469c      	mov	ip, r3
   10e92:	461f      	mov	r7, r3
   10e94:	4601      	mov	r1, r0
		switch (*sp) {
   10e96:	f810 2b01 	ldrb.w	r2, [r0], #1
   10e9a:	2a2b      	cmp	r2, #43	; 0x2b
   10e9c:	f000 80a1 	beq.w	10fe2 <z_cbvprintf_impl+0x19a>
   10ea0:	f200 8098 	bhi.w	10fd4 <z_cbvprintf_impl+0x18c>
   10ea4:	2a20      	cmp	r2, #32
   10ea6:	f000 809f 	beq.w	10fe8 <z_cbvprintf_impl+0x1a0>
   10eaa:	2a23      	cmp	r2, #35	; 0x23
   10eac:	f000 809f 	beq.w	10fee <z_cbvprintf_impl+0x1a6>
   10eb0:	b12b      	cbz	r3, 10ebe <z_cbvprintf_impl+0x76>
   10eb2:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   10eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10eba:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   10ebe:	f1b8 0f00 	cmp.w	r8, #0
   10ec2:	d005      	beq.n	10ed0 <z_cbvprintf_impl+0x88>
   10ec4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   10ec8:	f043 0320 	orr.w	r3, r3, #32
   10ecc:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   10ed0:	f1be 0f00 	cmp.w	lr, #0
   10ed4:	d005      	beq.n	10ee2 <z_cbvprintf_impl+0x9a>
   10ed6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   10eda:	f043 0310 	orr.w	r3, r3, #16
   10ede:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   10ee2:	f1bc 0f00 	cmp.w	ip, #0
   10ee6:	d005      	beq.n	10ef4 <z_cbvprintf_impl+0xac>
   10ee8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   10eec:	f043 0308 	orr.w	r3, r3, #8
   10ef0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
   10ef4:	b12f      	cbz	r7, 10f02 <z_cbvprintf_impl+0xba>
   10ef6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   10efa:	f043 0304 	orr.w	r3, r3, #4
   10efe:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
   10f02:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   10f06:	f003 0044 	and.w	r0, r3, #68	; 0x44
   10f0a:	2844      	cmp	r0, #68	; 0x44
   10f0c:	d103      	bne.n	10f16 <z_cbvprintf_impl+0xce>
		conv->flag_zero = false;
   10f0e:	f36f 1386 	bfc	r3, #6, #1
   10f12:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
   10f16:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
   10f1a:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   10f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10f20:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
   10f24:	d17f      	bne.n	11026 <z_cbvprintf_impl+0x1de>
		conv->width_star = true;
   10f26:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   10f2a:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
   10f2e:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   10f30:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	conv->prec_present = (*sp == '.');
   10f34:	781a      	ldrb	r2, [r3, #0]
   10f36:	2a2e      	cmp	r2, #46	; 0x2e
   10f38:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   10f3c:	bf0c      	ite	eq
   10f3e:	2101      	moveq	r1, #1
   10f40:	2100      	movne	r1, #0
   10f42:	f361 0241 	bfi	r2, r1, #1, #1
   10f46:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
   10f4a:	d178      	bne.n	1103e <z_cbvprintf_impl+0x1f6>
	if (*sp == '*') {
   10f4c:	785a      	ldrb	r2, [r3, #1]
   10f4e:	2a2a      	cmp	r2, #42	; 0x2a
   10f50:	d06e      	beq.n	11030 <z_cbvprintf_impl+0x1e8>
	++sp;
   10f52:	3301      	adds	r3, #1
	size_t val = 0;
   10f54:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   10f56:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   10f5a:	4619      	mov	r1, r3
   10f5c:	f811 0b01 	ldrb.w	r0, [r1], #1
   10f60:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   10f64:	2f09      	cmp	r7, #9
   10f66:	f240 80ad 	bls.w	110c4 <z_cbvprintf_impl+0x27c>
	conv->unsupported |= ((conv->prec_value < 0)
   10f6a:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
	conv->prec_value = prec;
   10f6e:	9214      	str	r2, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
   10f70:	f3c1 0040 	ubfx	r0, r1, #1, #1
   10f74:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
   10f78:	460a      	mov	r2, r1
   10f7a:	f360 0241 	bfi	r2, r0, #1, #1
   10f7e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
   10f82:	e05c      	b.n	1103e <z_cbvprintf_impl+0x1f6>
		conv->specifier = *sp++;
   10f84:	1cb2      	adds	r2, r6, #2
   10f86:	9206      	str	r2, [sp, #24]
   10f88:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
   10f8c:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   10f90:	07d9      	lsls	r1, r3, #31
   10f92:	f140 8150 	bpl.w	11236 <z_cbvprintf_impl+0x3ee>
			width = va_arg(ap, int);
   10f96:	f854 2b04 	ldr.w	r2, [r4], #4
   10f9a:	9204      	str	r2, [sp, #16]
			if (width < 0) {
   10f9c:	2a00      	cmp	r2, #0
   10f9e:	da08      	bge.n	10fb2 <z_cbvprintf_impl+0x16a>
				conv->flag_dash = true;
   10fa0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   10fa4:	f042 0204 	orr.w	r2, r2, #4
   10fa8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
   10fac:	9a04      	ldr	r2, [sp, #16]
   10fae:	4252      	negs	r2, r2
		int width = -1;
   10fb0:	9204      	str	r2, [sp, #16]
		if (conv->prec_star) {
   10fb2:	075a      	lsls	r2, r3, #29
   10fb4:	f140 8147 	bpl.w	11246 <z_cbvprintf_impl+0x3fe>
			int arg = va_arg(ap, int);
   10fb8:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
   10fbc:	2f00      	cmp	r7, #0
   10fbe:	f280 8146 	bge.w	1124e <z_cbvprintf_impl+0x406>
				conv->prec_present = false;
   10fc2:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   10fc6:	f36f 0341 	bfc	r3, #1, #1
   10fca:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
   10fce:	f04f 37ff 	mov.w	r7, #4294967295
   10fd2:	e13c      	b.n	1124e <z_cbvprintf_impl+0x406>
		switch (*sp) {
   10fd4:	2a2d      	cmp	r2, #45	; 0x2d
   10fd6:	d00d      	beq.n	10ff4 <z_cbvprintf_impl+0x1ac>
   10fd8:	2a30      	cmp	r2, #48	; 0x30
   10fda:	f47f af69 	bne.w	10eb0 <z_cbvprintf_impl+0x68>
   10fde:	2301      	movs	r3, #1
	} while (loop);
   10fe0:	e758      	b.n	10e94 <z_cbvprintf_impl+0x4c>
		switch (*sp) {
   10fe2:	f04f 0c01 	mov.w	ip, #1
   10fe6:	e755      	b.n	10e94 <z_cbvprintf_impl+0x4c>
   10fe8:	f04f 0e01 	mov.w	lr, #1
   10fec:	e752      	b.n	10e94 <z_cbvprintf_impl+0x4c>
   10fee:	f04f 0801 	mov.w	r8, #1
   10ff2:	e74f      	b.n	10e94 <z_cbvprintf_impl+0x4c>
   10ff4:	2701      	movs	r7, #1
   10ff6:	e74d      	b.n	10e94 <z_cbvprintf_impl+0x4c>
		val = 10U * val + *sp++ - '0';
   10ff8:	fb0e 7202 	mla	r2, lr, r2, r7
   10ffc:	3a30      	subs	r2, #48	; 0x30
   10ffe:	4603      	mov	r3, r0
   11000:	4618      	mov	r0, r3
   11002:	f810 7b01 	ldrb.w	r7, [r0], #1
   11006:	f1a7 0c30 	sub.w	ip, r7, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
   1100a:	f1bc 0f09 	cmp.w	ip, #9
   1100e:	d9f3      	bls.n	10ff8 <z_cbvprintf_impl+0x1b0>
	if (sp != wp) {
   11010:	4299      	cmp	r1, r3
   11012:	d08f      	beq.n	10f34 <z_cbvprintf_impl+0xec>
		conv->unsupported |= ((conv->width_value < 0)
   11014:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
		conv->width_value = width;
   11018:	9213      	str	r2, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
   1101a:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   1101c:	f362 0141 	bfi	r1, r2, #1, #1
   11020:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
   11024:	e786      	b.n	10f34 <z_cbvprintf_impl+0xec>
   11026:	460b      	mov	r3, r1
	size_t val = 0;
   11028:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   1102a:	f04f 0e0a 	mov.w	lr, #10
   1102e:	e7e7      	b.n	11000 <z_cbvprintf_impl+0x1b8>
		conv->prec_star = true;
   11030:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   11034:	f042 0204 	orr.w	r2, r2, #4
   11038:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		return ++sp;
   1103c:	3302      	adds	r3, #2
	switch (*sp) {
   1103e:	781a      	ldrb	r2, [r3, #0]
   11040:	2a6c      	cmp	r2, #108	; 0x6c
   11042:	d05f      	beq.n	11104 <z_cbvprintf_impl+0x2bc>
   11044:	d843      	bhi.n	110ce <z_cbvprintf_impl+0x286>
   11046:	2a68      	cmp	r2, #104	; 0x68
   11048:	d049      	beq.n	110de <z_cbvprintf_impl+0x296>
   1104a:	2a6a      	cmp	r2, #106	; 0x6a
   1104c:	d063      	beq.n	11116 <z_cbvprintf_impl+0x2ce>
   1104e:	2a4c      	cmp	r2, #76	; 0x4c
   11050:	d069      	beq.n	11126 <z_cbvprintf_impl+0x2de>
	conv->specifier = *sp++;
   11052:	f813 2b01 	ldrb.w	r2, [r3], #1
   11056:	9306      	str	r3, [sp, #24]
	switch (conv->specifier) {
   11058:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
   1105a:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	switch (conv->specifier) {
   1105e:	f200 80a9 	bhi.w	111b4 <z_cbvprintf_impl+0x36c>
   11062:	2a6d      	cmp	r2, #109	; 0x6d
   11064:	d86c      	bhi.n	11140 <z_cbvprintf_impl+0x2f8>
   11066:	2a69      	cmp	r2, #105	; 0x69
   11068:	f200 80a4 	bhi.w	111b4 <z_cbvprintf_impl+0x36c>
   1106c:	2a57      	cmp	r2, #87	; 0x57
   1106e:	f200 8084 	bhi.w	1117a <z_cbvprintf_impl+0x332>
   11072:	2a41      	cmp	r2, #65	; 0x41
   11074:	d004      	beq.n	11080 <z_cbvprintf_impl+0x238>
   11076:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
   1107a:	2b02      	cmp	r3, #2
   1107c:	f200 809a 	bhi.w	111b4 <z_cbvprintf_impl+0x36c>
		conv->specifier_cat = SPECIFIER_FP;
   11080:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
   11084:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
   11088:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
   1108a:	f1a2 0741 	sub.w	r7, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
   1108e:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
   11092:	427a      	negs	r2, r7
		conv->specifier_a = (conv->specifier == 'a')
   11094:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		conv->specifier_cat = SPECIFIER_FP;
   11098:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
   1109c:	417a      	adcs	r2, r7
		conv->specifier_a = (conv->specifier == 'a')
   1109e:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
   110a2:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
   110a4:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		if (conv->specifier_a
   110a8:	b2cb      	uxtb	r3, r1
   110aa:	f100 80c2 	bmi.w	11232 <z_cbvprintf_impl+0x3ea>
		if (conv->length_mod == LENGTH_L) {
   110ae:	f003 0278 	and.w	r2, r3, #120	; 0x78
   110b2:	2a18      	cmp	r2, #24
   110b4:	f040 80ac 	bne.w	11210 <z_cbvprintf_impl+0x3c8>
			conv->length_mod = LENGTH_NONE;
   110b8:	f36f 03c6 	bfc	r3, #3, #4
   110bc:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	bool unsupported = false;
   110c0:	2300      	movs	r3, #0
   110c2:	e09b      	b.n	111fc <z_cbvprintf_impl+0x3b4>
		val = 10U * val + *sp++ - '0';
   110c4:	fb0c 0202 	mla	r2, ip, r2, r0
   110c8:	3a30      	subs	r2, #48	; 0x30
   110ca:	460b      	mov	r3, r1
   110cc:	e745      	b.n	10f5a <z_cbvprintf_impl+0x112>
	switch (*sp) {
   110ce:	2a74      	cmp	r2, #116	; 0x74
   110d0:	d025      	beq.n	1111e <z_cbvprintf_impl+0x2d6>
   110d2:	2a7a      	cmp	r2, #122	; 0x7a
   110d4:	d1bd      	bne.n	11052 <z_cbvprintf_impl+0x20a>
		conv->length_mod = LENGTH_Z;
   110d6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   110da:	2106      	movs	r1, #6
   110dc:	e00c      	b.n	110f8 <z_cbvprintf_impl+0x2b0>
		if (*++sp == 'h') {
   110de:	785a      	ldrb	r2, [r3, #1]
   110e0:	2a68      	cmp	r2, #104	; 0x68
   110e2:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   110e6:	d106      	bne.n	110f6 <z_cbvprintf_impl+0x2ae>
			conv->length_mod = LENGTH_HH;
   110e8:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   110ea:	f361 02c6 	bfi	r2, r1, #3, #4
   110ee:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
   110f2:	3302      	adds	r3, #2
   110f4:	e7ad      	b.n	11052 <z_cbvprintf_impl+0x20a>
			conv->length_mod = LENGTH_H;
   110f6:	2102      	movs	r1, #2
   110f8:	f361 02c6 	bfi	r2, r1, #3, #4
   110fc:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
   11100:	3301      	adds	r3, #1
   11102:	e7a6      	b.n	11052 <z_cbvprintf_impl+0x20a>
		if (*++sp == 'l') {
   11104:	785a      	ldrb	r2, [r3, #1]
   11106:	2a6c      	cmp	r2, #108	; 0x6c
   11108:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1110c:	d101      	bne.n	11112 <z_cbvprintf_impl+0x2ca>
			conv->length_mod = LENGTH_LL;
   1110e:	2104      	movs	r1, #4
   11110:	e7eb      	b.n	110ea <z_cbvprintf_impl+0x2a2>
			conv->length_mod = LENGTH_L;
   11112:	2103      	movs	r1, #3
   11114:	e7f0      	b.n	110f8 <z_cbvprintf_impl+0x2b0>
		conv->length_mod = LENGTH_J;
   11116:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   1111a:	2105      	movs	r1, #5
   1111c:	e7ec      	b.n	110f8 <z_cbvprintf_impl+0x2b0>
		conv->length_mod = LENGTH_T;
   1111e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   11122:	2107      	movs	r1, #7
   11124:	e7e8      	b.n	110f8 <z_cbvprintf_impl+0x2b0>
		conv->unsupported = true;
   11126:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
   1112a:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   1112e:	f022 0202 	bic.w	r2, r2, #2
   11132:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   11136:	f042 0202 	orr.w	r2, r2, #2
   1113a:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
   1113e:	e7df      	b.n	11100 <z_cbvprintf_impl+0x2b8>
	switch (conv->specifier) {
   11140:	3a6e      	subs	r2, #110	; 0x6e
   11142:	b2d3      	uxtb	r3, r2
   11144:	2201      	movs	r2, #1
   11146:	409a      	lsls	r2, r3
   11148:	f240 4382 	movw	r3, #1154	; 0x482
   1114c:	421a      	tst	r2, r3
   1114e:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   11152:	d136      	bne.n	111c2 <z_cbvprintf_impl+0x37a>
   11154:	f012 0f24 	tst.w	r2, #36	; 0x24
   11158:	d15e      	bne.n	11218 <z_cbvprintf_impl+0x3d0>
   1115a:	07d1      	lsls	r1, r2, #31
   1115c:	d52a      	bpl.n	111b4 <z_cbvprintf_impl+0x36c>
		conv->specifier_cat = SPECIFIER_PTR;
   1115e:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   11162:	f003 0378 	and.w	r3, r3, #120	; 0x78
   11166:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   1116a:	2103      	movs	r1, #3
   1116c:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   11170:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   11172:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   11176:	4143      	adcs	r3, r0
   11178:	e040      	b.n	111fc <z_cbvprintf_impl+0x3b4>
	switch (conv->specifier) {
   1117a:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   1117e:	b2c9      	uxtb	r1, r1
   11180:	2001      	movs	r0, #1
   11182:	fa00 f101 	lsl.w	r1, r0, r1
   11186:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   1118a:	f47f af79 	bne.w	11080 <z_cbvprintf_impl+0x238>
   1118e:	f640 0301 	movw	r3, #2049	; 0x801
   11192:	4219      	tst	r1, r3
   11194:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
   11198:	d119      	bne.n	111ce <z_cbvprintf_impl+0x386>
   1119a:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   1119e:	d009      	beq.n	111b4 <z_cbvprintf_impl+0x36c>
		conv->specifier_cat = SPECIFIER_SINT;
   111a0:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   111a4:	f360 0202 	bfi	r2, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   111a8:	f003 0378 	and.w	r3, r3, #120	; 0x78
   111ac:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   111ae:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
   111b2:	d185      	bne.n	110c0 <z_cbvprintf_impl+0x278>
		conv->invalid = true;
   111b4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   111b8:	f043 0301 	orr.w	r3, r3, #1
   111bc:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
   111c0:	e77e      	b.n	110c0 <z_cbvprintf_impl+0x278>
		conv->specifier_cat = SPECIFIER_UINT;
   111c2:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   111c6:	2102      	movs	r1, #2
   111c8:	f361 0202 	bfi	r2, r1, #0, #3
   111cc:	e7ec      	b.n	111a8 <z_cbvprintf_impl+0x360>
   111ce:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
   111d2:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
   111d4:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   111d8:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   111dc:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   111de:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
   111e2:	bf02      	ittt	eq
   111e4:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
   111e8:	f041 0101 	orreq.w	r1, r1, #1
   111ec:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
   111f0:	2a63      	cmp	r2, #99	; 0x63
   111f2:	f47f af65 	bne.w	110c0 <z_cbvprintf_impl+0x278>
			unsupported = (conv->length_mod != LENGTH_NONE);
   111f6:	3b00      	subs	r3, #0
   111f8:	bf18      	it	ne
   111fa:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   111fc:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   11200:	f3c2 0140 	ubfx	r1, r2, #1, #1
   11204:	430b      	orrs	r3, r1
   11206:	f363 0241 	bfi	r2, r3, #1, #1
   1120a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
   1120e:	e6bd      	b.n	10f8c <z_cbvprintf_impl+0x144>
		} else if ((conv->length_mod != LENGTH_NONE)
   11210:	f013 0f38 	tst.w	r3, #56	; 0x38
   11214:	d1ce      	bne.n	111b4 <z_cbvprintf_impl+0x36c>
   11216:	e753      	b.n	110c0 <z_cbvprintf_impl+0x278>
		conv->specifier_cat = SPECIFIER_PTR;
   11218:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   1121c:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   1121e:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   11222:	f361 0202 	bfi	r2, r1, #0, #3
   11226:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
   1122a:	bf14      	ite	ne
   1122c:	2301      	movne	r3, #1
   1122e:	2300      	moveq	r3, #0
   11230:	e7e4      	b.n	111fc <z_cbvprintf_impl+0x3b4>
			unsupported = true;
   11232:	2301      	movs	r3, #1
   11234:	e7e2      	b.n	111fc <z_cbvprintf_impl+0x3b4>
		} else if (conv->width_present) {
   11236:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
   1123a:	2a00      	cmp	r2, #0
			width = conv->width_value;
   1123c:	bfb4      	ite	lt
   1123e:	9a13      	ldrlt	r2, [sp, #76]	; 0x4c
		int width = -1;
   11240:	f04f 32ff 	movge.w	r2, #4294967295
   11244:	e6b4      	b.n	10fb0 <z_cbvprintf_impl+0x168>
		} else if (conv->prec_present) {
   11246:	079f      	lsls	r7, r3, #30
   11248:	f57f aec1 	bpl.w	10fce <z_cbvprintf_impl+0x186>
			precision = conv->prec_value;
   1124c:	9f14      	ldr	r7, [sp, #80]	; 0x50
		conv->pad0_value = 0;
   1124e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   11250:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
		    && (conv->specifier_cat == SPECIFIER_FP)
   11254:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
   11258:	f003 0207 	and.w	r2, r3, #7
   1125c:	2a04      	cmp	r2, #4
   1125e:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
   11262:	d107      	bne.n	11274 <z_cbvprintf_impl+0x42c>
		    && !conv->prec_present) {
   11264:	0790      	lsls	r0, r2, #30
   11266:	d405      	bmi.n	11274 <z_cbvprintf_impl+0x42c>
			if (conv->specifier_a) {
   11268:	f99d 1049 	ldrsb.w	r1, [sp, #73]	; 0x49
				precision = FRACTION_HEX;
   1126c:	2900      	cmp	r1, #0
   1126e:	bfac      	ite	ge
   11270:	2706      	movge	r7, #6
   11272:	270d      	movlt	r7, #13
		enum specifier_cat_enum specifier_cat
   11274:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   11278:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   1127a:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   1127e:	d133      	bne.n	112e8 <z_cbvprintf_impl+0x4a0>
			switch (length_mod) {
   11280:	1ed3      	subs	r3, r2, #3
   11282:	2b04      	cmp	r3, #4
   11284:	d804      	bhi.n	11290 <z_cbvprintf_impl+0x448>
   11286:	e8df f003 	tbb	[pc, r3]
   1128a:	4621      	.short	0x4621
   1128c:	2146      	.short	0x2146
   1128e:	21          	.byte	0x21
   1128f:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   11290:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   11292:	2a01      	cmp	r2, #1
				value->sint = va_arg(ap, int);
   11294:	ea4f 71e3 	mov.w	r1, r3, asr #31
   11298:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
   1129c:	d11c      	bne.n	112d8 <z_cbvprintf_impl+0x490>
				value->sint = (signed char)value->sint;
   1129e:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
   112a2:	17d9      	asrs	r1, r3, #31
   112a4:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
   112a8:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   112aa:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   112ae:	9307      	str	r3, [sp, #28]
   112b0:	0799      	lsls	r1, r3, #30
   112b2:	d050      	beq.n	11356 <z_cbvprintf_impl+0x50e>
			OUTS(sp, fp);
   112b4:	9b06      	ldr	r3, [sp, #24]
   112b6:	9903      	ldr	r1, [sp, #12]
   112b8:	4632      	mov	r2, r6
   112ba:	4650      	mov	r0, sl
   112bc:	f012 ffa4 	bl	24208 <outs>
   112c0:	2800      	cmp	r0, #0
   112c2:	f2c0 8353 	blt.w	1196c <z_cbvprintf_impl+0xb24>
   112c6:	4405      	add	r5, r0
			continue;
   112c8:	9e06      	ldr	r6, [sp, #24]
   112ca:	e5c5      	b.n	10e58 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   112cc:	f854 3b04 	ldr.w	r3, [r4], #4
   112d0:	17d9      	asrs	r1, r3, #31
				value->uint = (unsigned char)value->uint;
   112d2:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
   112d6:	e7e8      	b.n	112aa <z_cbvprintf_impl+0x462>
			} else if (length_mod == LENGTH_H) {
   112d8:	2a02      	cmp	r2, #2
   112da:	d1e5      	bne.n	112a8 <z_cbvprintf_impl+0x460>
				value->sint = (short)value->sint;
   112dc:	b219      	sxth	r1, r3
   112de:	f343 33c0 	sbfx	r3, r3, #15, #1
   112e2:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
   112e6:	e7df      	b.n	112a8 <z_cbvprintf_impl+0x460>
		} else if (specifier_cat == SPECIFIER_UINT) {
   112e8:	2b02      	cmp	r3, #2
   112ea:	d124      	bne.n	11336 <z_cbvprintf_impl+0x4ee>
			switch (length_mod) {
   112ec:	1ed3      	subs	r3, r2, #3
   112ee:	2b04      	cmp	r3, #4
   112f0:	d804      	bhi.n	112fc <z_cbvprintf_impl+0x4b4>
   112f2:	e8df f003 	tbb	[pc, r3]
   112f6:	1018      	.short	0x1018
   112f8:	1810      	.short	0x1810
   112fa:	18          	.byte	0x18
   112fb:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   112fc:	2a01      	cmp	r2, #1
				value->uint = va_arg(ap, unsigned int);
   112fe:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   11302:	f04f 0100 	mov.w	r1, #0
   11306:	d014      	beq.n	11332 <z_cbvprintf_impl+0x4ea>
			} else if (length_mod == LENGTH_H) {
   11308:	2a02      	cmp	r2, #2
				value->uint = va_arg(ap, unsigned int);
   1130a:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
   1130e:	d1cc      	bne.n	112aa <z_cbvprintf_impl+0x462>
				value->uint = (unsigned short)value->uint;
   11310:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   11312:	9310      	str	r3, [sp, #64]	; 0x40
   11314:	e7c9      	b.n	112aa <z_cbvprintf_impl+0x462>
					(uint_value_type)va_arg(ap,
   11316:	3407      	adds	r4, #7
   11318:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   1131c:	e8f4 0102 	ldrd	r0, r1, [r4], #8
   11320:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
   11324:	e7c1      	b.n	112aa <z_cbvprintf_impl+0x462>
					(uint_value_type)va_arg(ap, size_t);
   11326:	f854 3b04 	ldr.w	r3, [r4], #4
   1132a:	9310      	str	r3, [sp, #64]	; 0x40
   1132c:	2300      	movs	r3, #0
   1132e:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
   11330:	e7bb      	b.n	112aa <z_cbvprintf_impl+0x462>
				value->uint = (unsigned char)value->uint;
   11332:	b2db      	uxtb	r3, r3
   11334:	e7cd      	b.n	112d2 <z_cbvprintf_impl+0x48a>
		} else if (specifier_cat == SPECIFIER_FP) {
   11336:	2b04      	cmp	r3, #4
   11338:	d108      	bne.n	1134c <z_cbvprintf_impl+0x504>
					(sint_value_type)va_arg(ap, long long);
   1133a:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   1133c:	f024 0407 	bic.w	r4, r4, #7
   11340:	e9d4 0100 	ldrd	r0, r1, [r4]
   11344:	3408      	adds	r4, #8
   11346:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   1134a:	e7ae      	b.n	112aa <z_cbvprintf_impl+0x462>
		} else if (specifier_cat == SPECIFIER_PTR) {
   1134c:	2b03      	cmp	r3, #3
   1134e:	d1ac      	bne.n	112aa <z_cbvprintf_impl+0x462>
			value->ptr = va_arg(ap, void *);
   11350:	f854 3b04 	ldr.w	r3, [r4], #4
   11354:	e7dd      	b.n	11312 <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
   11356:	f89d b04b 	ldrb.w	fp, [sp, #75]	; 0x4b
   1135a:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
   1135e:	d8b3      	bhi.n	112c8 <z_cbvprintf_impl+0x480>
   11360:	f1bb 0f57 	cmp.w	fp, #87	; 0x57
   11364:	d849      	bhi.n	113fa <z_cbvprintf_impl+0x5b2>
   11366:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
   1136a:	f000 8091 	beq.w	11490 <z_cbvprintf_impl+0x648>
   1136e:	f1bb 0f24 	cmp.w	fp, #36	; 0x24
   11372:	d9a9      	bls.n	112c8 <z_cbvprintf_impl+0x480>
   11374:	f1bb 0f41 	cmp.w	fp, #65	; 0x41
   11378:	d003      	beq.n	11382 <z_cbvprintf_impl+0x53a>
   1137a:	f1ab 0245 	sub.w	r2, fp, #69	; 0x45
   1137e:	2a02      	cmp	r2, #2
   11380:	d8a2      	bhi.n	112c8 <z_cbvprintf_impl+0x480>
	} u = {
   11382:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
	if ((u.u64 & SIGN_MASK) != 0U) {
   11386:	2a00      	cmp	r2, #0
   11388:	f2c0 8136 	blt.w	115f8 <z_cbvprintf_impl+0x7b0>
	} else if (conv->flag_plus) {
   1138c:	9b07      	ldr	r3, [sp, #28]
   1138e:	071e      	lsls	r6, r3, #28
   11390:	f100 8135 	bmi.w	115fe <z_cbvprintf_impl+0x7b6>
	} else if (conv->flag_space) {
   11394:	f3c3 1900 	ubfx	r9, r3, #4, #1
   11398:	ea4f 1949 	mov.w	r9, r9, lsl #5
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   1139c:	f3c2 500a 	ubfx	r0, r2, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
   113a0:	f3c2 0213 	ubfx	r2, r2, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
   113a4:	2800      	cmp	r0, #0
   113a6:	f040 812d 	bne.w	11604 <z_cbvprintf_impl+0x7bc>
   113aa:	ea51 0602 	orrs.w	r6, r1, r2
   113ae:	bf14      	ite	ne
   113b0:	2601      	movne	r6, #1
   113b2:	2600      	moveq	r6, #0
	fract <<= EXPONENT_BITS;
   113b4:	02d2      	lsls	r2, r2, #11
   113b6:	ea42 5251 	orr.w	r2, r2, r1, lsr #21
   113ba:	02c9      	lsls	r1, r1, #11
		c = 'f';
   113bc:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
	if ((expo | fract) != 0) {
   113c0:	ea40 0e01 	orr.w	lr, r0, r1
   113c4:	ea42 7ce0 	orr.w	ip, r2, r0, asr #31
		c = 'f';
   113c8:	bf08      	it	eq
   113ca:	f04f 0b66 	moveq.w	fp, #102	; 0x66
	if ((expo | fract) != 0) {
   113ce:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
   113d2:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	if ((expo | fract) != 0) {
   113d6:	f000 8197 	beq.w	11708 <z_cbvprintf_impl+0x8c0>
		if (is_subnormal) {
   113da:	2e00      	cmp	r6, #0
   113dc:	f040 8144 	bne.w	11668 <z_cbvprintf_impl+0x820>
		fract |= BIT_63;
   113e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   113e2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
   113e6:	f2a0 38fe 	subw	r8, r0, #1022	; 0x3fe
		fract |= BIT_63;
   113ea:	920d      	str	r2, [sp, #52]	; 0x34
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   113ec:	2000      	movs	r0, #0
   113ee:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
   113f2:	4606      	mov	r6, r0
		fract *= 5U;
   113f4:	f04f 0c05 	mov.w	ip, #5
   113f8:	e150      	b.n	1169c <z_cbvprintf_impl+0x854>
		switch (conv->specifier) {
   113fa:	f1ab 0158 	sub.w	r1, fp, #88	; 0x58
   113fe:	2920      	cmp	r1, #32
   11400:	f63f af62 	bhi.w	112c8 <z_cbvprintf_impl+0x480>
   11404:	a001      	add	r0, pc, #4	; (adr r0, 1140c <z_cbvprintf_impl+0x5c4>)
   11406:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   1140a:	bf00      	nop
   1140c:	00011597 	.word	0x00011597
   11410:	000112c9 	.word	0x000112c9
   11414:	000112c9 	.word	0x000112c9
   11418:	000112c9 	.word	0x000112c9
   1141c:	000112c9 	.word	0x000112c9
   11420:	000112c9 	.word	0x000112c9
   11424:	000112c9 	.word	0x000112c9
   11428:	000112c9 	.word	0x000112c9
   1142c:	000112c9 	.word	0x000112c9
   11430:	00011383 	.word	0x00011383
   11434:	000112c9 	.word	0x000112c9
   11438:	0001151b 	.word	0x0001151b
   1143c:	0001152f 	.word	0x0001152f
   11440:	00011383 	.word	0x00011383
   11444:	00011383 	.word	0x00011383
   11448:	00011383 	.word	0x00011383
   1144c:	000112c9 	.word	0x000112c9
   11450:	0001152f 	.word	0x0001152f
   11454:	000112c9 	.word	0x000112c9
   11458:	000112c9 	.word	0x000112c9
   1145c:	000112c9 	.word	0x000112c9
   11460:	000112c9 	.word	0x000112c9
   11464:	000115d1 	.word	0x000115d1
   11468:	00011597 	.word	0x00011597
   1146c:	0001159d 	.word	0x0001159d
   11470:	000112c9 	.word	0x000112c9
   11474:	000112c9 	.word	0x000112c9
   11478:	00011497 	.word	0x00011497
   1147c:	000112c9 	.word	0x000112c9
   11480:	00011597 	.word	0x00011597
   11484:	000112c9 	.word	0x000112c9
   11488:	000112c9 	.word	0x000112c9
   1148c:	00011597 	.word	0x00011597
			OUTC('%');
   11490:	9903      	ldr	r1, [sp, #12]
   11492:	4658      	mov	r0, fp
   11494:	e4ea      	b.n	10e6c <z_cbvprintf_impl+0x24>
			if (precision >= 0) {
   11496:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
   11498:	9e10      	ldr	r6, [sp, #64]	; 0x40
			if (precision >= 0) {
   1149a:	db3a      	blt.n	11512 <z_cbvprintf_impl+0x6ca>
				len = strnlen(bps, precision);
   1149c:	4639      	mov	r1, r7
   1149e:	4630      	mov	r0, r6
   114a0:	f013 faf8 	bl	24a94 <strnlen>
			bpe = bps + len;
   114a4:	1837      	adds	r7, r6, r0
		if (bps == NULL) {
   114a6:	2e00      	cmp	r6, #0
   114a8:	f43f af0e 	beq.w	112c8 <z_cbvprintf_impl+0x480>
		char sign = 0;
   114ac:	f04f 0900 	mov.w	r9, #0
		if (conv->altform_0c) {
   114b0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   114b4:	f013 0210 	ands.w	r2, r3, #16
   114b8:	9205      	str	r2, [sp, #20]
   114ba:	f000 824c 	beq.w	11956 <z_cbvprintf_impl+0xb0e>
			nj_len += 2U;
   114be:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   114c0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
		nj_len += conv->pad0_value;
   114c4:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
		if (conv->pad_fp) {
   114c8:	9308      	str	r3, [sp, #32]
			nj_len += conv->pad0_pre_exp;
   114ca:	bf18      	it	ne
   114cc:	9b14      	ldrne	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
   114ce:	f8cd 801c 	str.w	r8, [sp, #28]
   114d2:	4440      	add	r0, r8
			nj_len += conv->pad0_pre_exp;
   114d4:	bf18      	it	ne
   114d6:	18c0      	addne	r0, r0, r3
		if (width > 0) {
   114d8:	9b04      	ldr	r3, [sp, #16]
   114da:	2b00      	cmp	r3, #0
   114dc:	f340 8256 	ble.w	1198c <z_cbvprintf_impl+0xb44>
			if (!conv->flag_dash) {
   114e0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
   114e4:	1a1b      	subs	r3, r3, r0
   114e6:	9304      	str	r3, [sp, #16]
			if (!conv->flag_dash) {
   114e8:	0753      	lsls	r3, r2, #29
   114ea:	f3c2 0b80 	ubfx	fp, r2, #2, #1
   114ee:	f100 824d 	bmi.w	1198c <z_cbvprintf_impl+0xb44>
				if (conv->flag_zero) {
   114f2:	0650      	lsls	r0, r2, #25
   114f4:	f140 823d 	bpl.w	11972 <z_cbvprintf_impl+0xb2a>
					if (sign != 0) {
   114f8:	f1b9 0f00 	cmp.w	r9, #0
   114fc:	d007      	beq.n	1150e <z_cbvprintf_impl+0x6c6>
						OUTC(sign);
   114fe:	9903      	ldr	r1, [sp, #12]
   11500:	4648      	mov	r0, r9
   11502:	47d0      	blx	sl
   11504:	2800      	cmp	r0, #0
   11506:	f2c0 8231 	blt.w	1196c <z_cbvprintf_impl+0xb24>
   1150a:	3501      	adds	r5, #1
						sign = 0;
   1150c:	46d9      	mov	r9, fp
					pad = '0';
   1150e:	2230      	movs	r2, #48	; 0x30
   11510:	e230      	b.n	11974 <z_cbvprintf_impl+0xb2c>
				len = strlen(bps);
   11512:	4630      	mov	r0, r6
   11514:	f013 fa83 	bl	24a1e <strlen>
   11518:	e7c4      	b.n	114a4 <z_cbvprintf_impl+0x65c>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   1151a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1151c:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		char sign = 0;
   11520:	f04f 0900 	mov.w	r9, #0
			bpe = buf + 1;
   11524:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
			bps = buf;
   11528:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
   1152a:	2001      	movs	r0, #1
   1152c:	e7c0      	b.n	114b0 <z_cbvprintf_impl+0x668>
			if (conv->flag_plus) {
   1152e:	9b07      	ldr	r3, [sp, #28]
   11530:	071a      	lsls	r2, r3, #28
			} else if (conv->flag_space) {
   11532:	bf58      	it	pl
   11534:	f3c3 1900 	ubfxpl	r9, r3, #4, #1
			sint = value->sint;
   11538:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			} else if (conv->flag_space) {
   1153c:	bf54      	ite	pl
   1153e:	ea4f 1949 	movpl.w	r9, r9, lsl #5
				sign = '+';
   11542:	f04f 092b 	movmi.w	r9, #43	; 0x2b
			if (sint < 0) {
   11546:	2b00      	cmp	r3, #0
   11548:	da06      	bge.n	11558 <z_cbvprintf_impl+0x710>
				value->uint = (uint_value_type)-sint;
   1154a:	4252      	negs	r2, r2
   1154c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   11550:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
				sign = '-';
   11554:	f04f 092d 	mov.w	r9, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
   11558:	f10d 0375 	add.w	r3, sp, #117	; 0x75
   1155c:	9300      	str	r3, [sp, #0]
   1155e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   11562:	ab17      	add	r3, sp, #92	; 0x5c
   11564:	aa12      	add	r2, sp, #72	; 0x48
   11566:	f012 fe09 	bl	2417c <encode_uint>
   1156a:	4606      	mov	r6, r0
			if (precision >= 0) {
   1156c:	2f00      	cmp	r7, #0
   1156e:	db0c      	blt.n	1158a <z_cbvprintf_impl+0x742>
				conv->flag_zero = false;
   11570:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
   11574:	f10d 0375 	add.w	r3, sp, #117	; 0x75
   11578:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
   1157a:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   1157e:	429f      	cmp	r7, r3
				conv->flag_zero = false;
   11580:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
   11584:	d901      	bls.n	1158a <z_cbvprintf_impl+0x742>
					conv->pad0_value = precision - (int)len;
   11586:	1afb      	subs	r3, r7, r3
   11588:	9313      	str	r3, [sp, #76]	; 0x4c
		if (bps == NULL) {
   1158a:	2e00      	cmp	r6, #0
   1158c:	f43f ae9c 	beq.w	112c8 <z_cbvprintf_impl+0x480>
   11590:	f10d 0775 	add.w	r7, sp, #117	; 0x75
   11594:	e056      	b.n	11644 <z_cbvprintf_impl+0x7fc>
		switch (conv->specifier) {
   11596:	f04f 0900 	mov.w	r9, #0
   1159a:	e7dd      	b.n	11558 <z_cbvprintf_impl+0x710>
			if (value->ptr != NULL) {
   1159c:	9810      	ldr	r0, [sp, #64]	; 0x40
   1159e:	2800      	cmp	r0, #0
   115a0:	f000 81d4 	beq.w	1194c <z_cbvprintf_impl+0xb04>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   115a4:	f10d 0375 	add.w	r3, sp, #117	; 0x75
   115a8:	9300      	str	r3, [sp, #0]
   115aa:	aa12      	add	r2, sp, #72	; 0x48
   115ac:	ab17      	add	r3, sp, #92	; 0x5c
   115ae:	2100      	movs	r1, #0
   115b0:	f012 fde4 	bl	2417c <encode_uint>
				conv->altform_0c = true;
   115b4:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
   115b8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   115bc:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   115c0:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   115c4:	4606      	mov	r6, r0
				conv->altform_0c = true;
   115c6:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
		char sign = 0;
   115ca:	f04f 0900 	mov.w	r9, #0
				goto prec_int_pad0;
   115ce:	e7cd      	b.n	1156c <z_cbvprintf_impl+0x724>
				store_count(conv, value->ptr, count);
   115d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
   115d2:	2a07      	cmp	r2, #7
   115d4:	f63f ae78 	bhi.w	112c8 <z_cbvprintf_impl+0x480>
   115d8:	e8df f002 	tbb	[pc, r2]
   115dc:	0c06040c 	.word	0x0c06040c
   115e0:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   115e4:	701d      	strb	r5, [r3, #0]
		break;
   115e6:	e66f      	b.n	112c8 <z_cbvprintf_impl+0x480>
		*(short *)dp = (short)count;
   115e8:	801d      	strh	r5, [r3, #0]
		break;
   115ea:	e66d      	b.n	112c8 <z_cbvprintf_impl+0x480>
		*(intmax_t *)dp = (intmax_t)count;
   115ec:	17ea      	asrs	r2, r5, #31
   115ee:	e9c3 5200 	strd	r5, r2, [r3]
		break;
   115f2:	e669      	b.n	112c8 <z_cbvprintf_impl+0x480>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   115f4:	601d      	str	r5, [r3, #0]
		break;
   115f6:	e667      	b.n	112c8 <z_cbvprintf_impl+0x480>
		*sign = '-';
   115f8:	f04f 092d 	mov.w	r9, #45	; 0x2d
   115fc:	e6ce      	b.n	1139c <z_cbvprintf_impl+0x554>
		*sign = '+';
   115fe:	f04f 092b 	mov.w	r9, #43	; 0x2b
   11602:	e6cb      	b.n	1139c <z_cbvprintf_impl+0x554>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
   11604:	f240 76ff 	movw	r6, #2047	; 0x7ff
   11608:	42b0      	cmp	r0, r6
   1160a:	d12a      	bne.n	11662 <z_cbvprintf_impl+0x81a>
		if (fract == 0) {
   1160c:	430a      	orrs	r2, r1
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1160e:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
   11612:	d11e      	bne.n	11652 <z_cbvprintf_impl+0x80a>
			if (isupper((unsigned char)c) != 0) {
   11614:	2b1a      	cmp	r3, #26
   11616:	bf35      	itete	cc
   11618:	2349      	movcc	r3, #73	; 0x49
   1161a:	2369      	movcs	r3, #105	; 0x69
   1161c:	214e      	movcc	r1, #78	; 0x4e
   1161e:	216e      	movcs	r1, #110	; 0x6e
   11620:	bf34      	ite	cc
   11622:	2246      	movcc	r2, #70	; 0x46
   11624:	2266      	movcs	r2, #102	; 0x66
				*buf++ = 'I';
   11626:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		conv->flag_zero = false;
   1162a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
				*buf++ = 'N';
   1162e:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
		conv->flag_zero = false;
   11632:	f36f 1386 	bfc	r3, #6, #1
				*buf++ = 'F';
   11636:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
		conv->flag_zero = false;
   1163a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		*bpe = buf;
   1163e:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
				bps = encode_float(value->dbl, conv, precision,
   11642:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
   11644:	1bb8      	subs	r0, r7, r6
		if (sign != 0) {
   11646:	f1b9 0f00 	cmp.w	r9, #0
   1164a:	f43f af31 	beq.w	114b0 <z_cbvprintf_impl+0x668>
			nj_len += 1U;
   1164e:	3001      	adds	r0, #1
   11650:	e72e      	b.n	114b0 <z_cbvprintf_impl+0x668>
			if (isupper((unsigned char)c) != 0) {
   11652:	2b19      	cmp	r3, #25
   11654:	bf8b      	itete	hi
   11656:	236e      	movhi	r3, #110	; 0x6e
   11658:	234e      	movls	r3, #78	; 0x4e
   1165a:	2161      	movhi	r1, #97	; 0x61
   1165c:	2141      	movls	r1, #65	; 0x41
   1165e:	461a      	mov	r2, r3
   11660:	e7e1      	b.n	11626 <z_cbvprintf_impl+0x7de>
	bool is_subnormal = (expo == 0) && (fract != 0);
   11662:	2600      	movs	r6, #0
   11664:	e6a6      	b.n	113b4 <z_cbvprintf_impl+0x56c>
				expo--;
   11666:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
   11668:	1849      	adds	r1, r1, r1
   1166a:	4152      	adcs	r2, r2
   1166c:	2a00      	cmp	r2, #0
   1166e:	dafa      	bge.n	11666 <z_cbvprintf_impl+0x81e>
   11670:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
   11674:	e6b4      	b.n	113e0 <z_cbvprintf_impl+0x598>
			fract >>= 1;
   11676:	0849      	lsrs	r1, r1, #1
   11678:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
   1167c:	0852      	lsrs	r2, r2, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   1167e:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
   11682:	4640      	mov	r0, r8
			expo++;
   11684:	f108 0801 	add.w	r8, r8, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
   11688:	d2f5      	bcs.n	11676 <z_cbvprintf_impl+0x82e>
		fract *= 5U;
   1168a:	fb0c fe02 	mul.w	lr, ip, r2
   1168e:	fba1 120c 	umull	r1, r2, r1, ip
		expo++;
   11692:	f100 0802 	add.w	r8, r0, #2
		fract *= 5U;
   11696:	4472      	add	r2, lr
		decexp--;
   11698:	3e01      	subs	r6, #1
   1169a:	2001      	movs	r0, #1
	while (expo < -2) {
   1169c:	f118 0f02 	cmn.w	r8, #2
   116a0:	dbe9      	blt.n	11676 <z_cbvprintf_impl+0x82e>
   116a2:	b108      	cbz	r0, 116a8 <z_cbvprintf_impl+0x860>
   116a4:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	while (expo > 0) {
   116a8:	f1b8 0f00 	cmp.w	r8, #0
		fract += 2;
   116ac:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
	while (expo > 0) {
   116b0:	dc2d      	bgt.n	1170e <z_cbvprintf_impl+0x8c6>
	fract >>= (4 - expo);
   116b2:	f1c8 0004 	rsb	r0, r8, #4
   116b6:	f1a0 0c20 	sub.w	ip, r0, #32
   116ba:	f108 081c 	add.w	r8, r8, #28
   116be:	40c2      	lsrs	r2, r0
   116c0:	fa01 f808 	lsl.w	r8, r1, r8
   116c4:	fa21 fc0c 	lsr.w	ip, r1, ip
   116c8:	40c1      	lsrs	r1, r0
	if ((c == 'g') || (c == 'G')) {
   116ca:	f00b 00df 	and.w	r0, fp, #223	; 0xdf
	fract >>= (4 - expo);
   116ce:	ea42 0208 	orr.w	r2, r2, r8
	if ((c == 'g') || (c == 'G')) {
   116d2:	2847      	cmp	r0, #71	; 0x47
	fract >>= (4 - expo);
   116d4:	ea42 020c 	orr.w	r2, r2, ip
	if ((c == 'g') || (c == 'G')) {
   116d8:	d13a      	bne.n	11750 <z_cbvprintf_impl+0x908>
		if (decexp < (-4 + 1) || decexp > precision) {
   116da:	1cf0      	adds	r0, r6, #3
   116dc:	db01      	blt.n	116e2 <z_cbvprintf_impl+0x89a>
   116de:	42b7      	cmp	r7, r6
   116e0:	da2b      	bge.n	1173a <z_cbvprintf_impl+0x8f2>
			c += 'e' - 'g';  /* e or E */
   116e2:	f1ab 0302 	sub.w	r3, fp, #2
			if (precision > 0) {
   116e6:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
   116e8:	fa5f fb83 	uxtb.w	fp, r3
			if (precision > 0) {
   116ec:	dd7d      	ble.n	117ea <z_cbvprintf_impl+0x9a2>
		if (!conv->flag_hash && (precision > 0)) {
   116ee:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   116f2:	0683      	lsls	r3, r0, #26
				precision--;
   116f4:	f107 37ff 	add.w	r7, r7, #4294967295
		if (!conv->flag_hash && (precision > 0)) {
   116f8:	d477      	bmi.n	117ea <z_cbvprintf_impl+0x9a2>
   116fa:	1e3b      	subs	r3, r7, #0
   116fc:	bf18      	it	ne
   116fe:	2301      	movne	r3, #1
	bool prune_zero = false;
   11700:	9305      	str	r3, [sp, #20]
		decimals = precision + 1;
   11702:	f107 0801 	add.w	r8, r7, #1
   11706:	e02d      	b.n	11764 <z_cbvprintf_impl+0x91c>
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
   11708:	f04f 0800 	mov.w	r8, #0
   1170c:	e66e      	b.n	113ec <z_cbvprintf_impl+0x5a4>
		fract += 2;
   1170e:	3202      	adds	r2, #2
   11710:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
   11714:	a80c      	add	r0, sp, #48	; 0x30
		fract += 2;
   11716:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		_ldiv5(&fract);
   1171a:	f012 fd00 	bl	2411e <_ldiv5>
		expo--;
   1171e:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
   11722:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
   11726:	3601      	adds	r6, #1
			fract <<= 1;
   11728:	1892      	adds	r2, r2, r2
   1172a:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
   1172c:	2900      	cmp	r1, #0
			expo--;
   1172e:	f108 38ff 	add.w	r8, r8, #4294967295
		} while (!(fract & BIT_63));
   11732:	daf9      	bge.n	11728 <z_cbvprintf_impl+0x8e0>
   11734:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
   11738:	e7b6      	b.n	116a8 <z_cbvprintf_impl+0x860>
		if (!conv->flag_hash && (precision > 0)) {
   1173a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1173e:	0698      	lsls	r0, r3, #26
			precision -= decexp;
   11740:	eba7 0706 	sub.w	r7, r7, r6
		if (!conv->flag_hash && (precision > 0)) {
   11744:	d44f      	bmi.n	117e6 <z_cbvprintf_impl+0x99e>
   11746:	1e3b      	subs	r3, r7, #0
   11748:	bf18      	it	ne
   1174a:	2301      	movne	r3, #1
	bool prune_zero = false;
   1174c:	9305      	str	r3, [sp, #20]
   1174e:	e004      	b.n	1175a <z_cbvprintf_impl+0x912>
   11750:	2300      	movs	r3, #0
	if (c == 'f') {
   11752:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
	bool prune_zero = false;
   11756:	9305      	str	r3, [sp, #20]
	if (c == 'f') {
   11758:	d1d3      	bne.n	11702 <z_cbvprintf_impl+0x8ba>
		if (decimals < 0) {
   1175a:	eb17 0806 	adds.w	r8, r7, r6
   1175e:	f04f 0b66 	mov.w	fp, #102	; 0x66
   11762:	d444      	bmi.n	117ee <z_cbvprintf_impl+0x9a6>
	if (decimals > 16) {
   11764:	f1b8 0f10 	cmp.w	r8, #16
   11768:	bfa8      	it	ge
   1176a:	f04f 0810 	movge.w	r8, #16
	uint64_t round = BIT64(59); /* 0.5 */
   1176e:	ed9f 7bb2 	vldr	d7, [pc, #712]	; 11a38 <z_cbvprintf_impl+0xbf0>
   11772:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
   11776:	2010      	movs	r0, #16
   11778:	900b      	str	r0, [sp, #44]	; 0x2c
	*v >>= 1;
   1177a:	e9dd 030e 	ldrd	r0, r3, [sp, #56]	; 0x38
	while (decimals--) {
   1177e:	f1b8 0f00 	cmp.w	r8, #0
   11782:	d137      	bne.n	117f4 <z_cbvprintf_impl+0x9ac>
	fract += round;
   11784:	1812      	adds	r2, r2, r0
   11786:	eb41 0103 	adc.w	r1, r1, r3
	if (fract >= BIT64(60)) {
   1178a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   1178e:	d241      	bcs.n	11814 <z_cbvprintf_impl+0x9cc>
	fract += round;
   11790:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		if (conv->flag_hash || (precision > 0)) {
   11794:	9b07      	ldr	r3, [sp, #28]
	if (c == 'f') {
   11796:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
		if (conv->flag_hash || (precision > 0)) {
   1179a:	f003 0220 	and.w	r2, r3, #32
	if (c == 'f') {
   1179e:	f040 80b4 	bne.w	1190a <z_cbvprintf_impl+0xac2>
		if (decexp > 0) {
   117a2:	2e00      	cmp	r6, #0
   117a4:	dc41      	bgt.n	1182a <z_cbvprintf_impl+0x9e2>
			*buf++ = '0';
   117a6:	2130      	movs	r1, #48	; 0x30
   117a8:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
		if (conv->flag_hash || (precision > 0)) {
   117ac:	2a00      	cmp	r2, #0
   117ae:	d165      	bne.n	1187c <z_cbvprintf_impl+0xa34>
   117b0:	2f00      	cmp	r7, #0
   117b2:	f340 81b2 	ble.w	11b1a <z_cbvprintf_impl+0xcd2>
			*buf++ = '.';
   117b6:	222e      	movs	r2, #46	; 0x2e
   117b8:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
   117bc:	b186      	cbz	r6, 117e0 <z_cbvprintf_impl+0x998>
			conv->pad0_value = -decexp;
   117be:	4272      	negs	r2, r6
   117c0:	42ba      	cmp	r2, r7
   117c2:	bfa8      	it	ge
   117c4:	463a      	movge	r2, r7
			conv->pad_postdp = (conv->pad0_value > 0);
   117c6:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
   117ca:	9213      	str	r2, [sp, #76]	; 0x4c
   117cc:	2a00      	cmp	r2, #0
			precision -= conv->pad0_value;
   117ce:	eba7 0702 	sub.w	r7, r7, r2
			conv->pad_postdp = (conv->pad0_value > 0);
   117d2:	bfd4      	ite	le
   117d4:	2200      	movle	r2, #0
   117d6:	2201      	movgt	r2, #1
   117d8:	f362 1145 	bfi	r1, r2, #5, #1
   117dc:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			*buf++ = '.';
   117e0:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
   117e4:	e039      	b.n	1185a <z_cbvprintf_impl+0xa12>
	bool prune_zero = false;
   117e6:	2300      	movs	r3, #0
   117e8:	e7b0      	b.n	1174c <z_cbvprintf_impl+0x904>
   117ea:	2300      	movs	r3, #0
   117ec:	e788      	b.n	11700 <z_cbvprintf_impl+0x8b8>
			decimals = 0;
   117ee:	f04f 0800 	mov.w	r8, #0
   117f2:	e7bc      	b.n	1176e <z_cbvprintf_impl+0x926>
	*v >>= 1;
   117f4:	0840      	lsrs	r0, r0, #1
   117f6:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
   117fa:	085b      	lsrs	r3, r3, #1
   117fc:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	_ldiv5(v);
   11800:	a80e      	add	r0, sp, #56	; 0x38
   11802:	e9cd 2108 	strd	r2, r1, [sp, #32]
   11806:	f108 38ff 	add.w	r8, r8, #4294967295
   1180a:	f012 fc88 	bl	2411e <_ldiv5>
   1180e:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
}
   11812:	e7b2      	b.n	1177a <z_cbvprintf_impl+0x932>
	*v >>= 1;
   11814:	0852      	lsrs	r2, r2, #1
   11816:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
	_ldiv5(v);
   1181a:	a80c      	add	r0, sp, #48	; 0x30
	*v >>= 1;
   1181c:	0849      	lsrs	r1, r1, #1
   1181e:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		decexp++;
   11822:	3601      	adds	r6, #1
	_ldiv5(v);
   11824:	f012 fc7b 	bl	2411e <_ldiv5>
		decexp++;
   11828:	e7b4      	b.n	11794 <z_cbvprintf_impl+0x94c>
	char *buf = bps;
   1182a:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
			while (decexp > 0 && digit_count > 0) {
   1182e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11830:	2900      	cmp	r1, #0
   11832:	dd09      	ble.n	11848 <z_cbvprintf_impl+0xa00>
				*buf++ = _get_digit(&fract, &digit_count);
   11834:	a90b      	add	r1, sp, #44	; 0x2c
   11836:	a80c      	add	r0, sp, #48	; 0x30
   11838:	9207      	str	r2, [sp, #28]
   1183a:	f012 fc88 	bl	2414e <_get_digit>
			while (decexp > 0 && digit_count > 0) {
   1183e:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
   11840:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
   11844:	9a07      	ldr	r2, [sp, #28]
   11846:	d1f2      	bne.n	1182e <z_cbvprintf_impl+0x9e6>
			conv->pad0_value = decexp;
   11848:	9613      	str	r6, [sp, #76]	; 0x4c
		if (conv->flag_hash || (precision > 0)) {
   1184a:	b99a      	cbnz	r2, 11874 <z_cbvprintf_impl+0xa2c>
   1184c:	2f00      	cmp	r7, #0
   1184e:	f340 8162 	ble.w	11b16 <z_cbvprintf_impl+0xcce>
			*buf++ = '.';
   11852:	212e      	movs	r1, #46	; 0x2e
   11854:	f808 1b01 	strb.w	r1, [r8], #1
   11858:	2600      	movs	r6, #0
	while (precision > 0 && digit_count > 0) {
   1185a:	2f00      	cmp	r7, #0
   1185c:	dd17      	ble.n	1188e <z_cbvprintf_impl+0xa46>
   1185e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11860:	2a00      	cmp	r2, #0
   11862:	dd14      	ble.n	1188e <z_cbvprintf_impl+0xa46>
		*buf++ = _get_digit(&fract, &digit_count);
   11864:	a90b      	add	r1, sp, #44	; 0x2c
   11866:	a80c      	add	r0, sp, #48	; 0x30
   11868:	f012 fc71 	bl	2414e <_get_digit>
		precision--;
   1186c:	3f01      	subs	r7, #1
		*buf++ = _get_digit(&fract, &digit_count);
   1186e:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
   11872:	e7f2      	b.n	1185a <z_cbvprintf_impl+0xa12>
			*buf++ = '.';
   11874:	222e      	movs	r2, #46	; 0x2e
   11876:	f808 2b01 	strb.w	r2, [r8], #1
   1187a:	e7ed      	b.n	11858 <z_cbvprintf_impl+0xa10>
   1187c:	222e      	movs	r2, #46	; 0x2e
   1187e:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
   11882:	2e00      	cmp	r6, #0
   11884:	d0ac      	beq.n	117e0 <z_cbvprintf_impl+0x998>
   11886:	2f00      	cmp	r7, #0
   11888:	dc99      	bgt.n	117be <z_cbvprintf_impl+0x976>
			*buf++ = '.';
   1188a:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
	if (prune_zero) {
   1188e:	9b05      	ldr	r3, [sp, #20]
   11890:	2b00      	cmp	r3, #0
   11892:	d14e      	bne.n	11932 <z_cbvprintf_impl+0xaea>
	conv->pad0_pre_exp = precision;
   11894:	9714      	str	r7, [sp, #80]	; 0x50
   11896:	4647      	mov	r7, r8
	if ((c == 'e') || (c == 'E')) {
   11898:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
   1189c:	2a45      	cmp	r2, #69	; 0x45
   1189e:	d123      	bne.n	118e8 <z_cbvprintf_impl+0xaa0>
		if (decexp < 0) {
   118a0:	2e00      	cmp	r6, #0
			decexp = -decexp;
   118a2:	bfba      	itte	lt
   118a4:	4276      	neglt	r6, r6
			*buf++ = '-';
   118a6:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
   118a8:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
   118aa:	2e63      	cmp	r6, #99	; 0x63
			*buf++ = (decexp / 100) + '0';
   118ac:	bfc8      	it	gt
   118ae:	2164      	movgt	r1, #100	; 0x64
   118b0:	707b      	strb	r3, [r7, #1]
			*buf++ = '-';
   118b2:	bfd1      	iteee	le
   118b4:	1cba      	addle	r2, r7, #2
			*buf++ = (decexp / 100) + '0';
   118b6:	fbb6 f3f1 	udivgt	r3, r6, r1
   118ba:	1cfa      	addgt	r2, r7, #3
   118bc:	f103 0030 	addgt.w	r0, r3, #48	; 0x30
			decexp %= 100;
   118c0:	bfc8      	it	gt
   118c2:	fb01 6613 	mlsgt	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
   118c6:	f04f 010a 	mov.w	r1, #10
			*buf++ = (decexp / 100) + '0';
   118ca:	bfc8      	it	gt
   118cc:	70b8      	strbgt	r0, [r7, #2]
		*buf++ = c;
   118ce:	f887 b000 	strb.w	fp, [r7]
		*buf++ = (decexp / 10) + '0';
   118d2:	fbb6 f3f1 	udiv	r3, r6, r1
   118d6:	4617      	mov	r7, r2
   118d8:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
   118dc:	fb01 6313 	mls	r3, r1, r3, r6
   118e0:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
   118e2:	f807 0b02 	strb.w	r0, [r7], #2
		*buf++ = (decexp % 10) + '0';
   118e6:	7053      	strb	r3, [r2, #1]
		|| (conv->pad0_pre_exp > 0);
   118e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   118ea:	2b00      	cmp	r3, #0
   118ec:	dc2c      	bgt.n	11948 <z_cbvprintf_impl+0xb00>
   118ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
   118f0:	2b00      	cmp	r3, #0
   118f2:	bfd4      	ite	le
   118f4:	2300      	movle	r3, #0
   118f6:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
   118f8:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   118fc:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
   11900:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
   11902:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	*buf = 0;
   11906:	703b      	strb	r3, [r7, #0]
	return bps;
   11908:	e69b      	b.n	11642 <z_cbvprintf_impl+0x7fa>
		*buf = _get_digit(&fract, &digit_count);
   1190a:	a90b      	add	r1, sp, #44	; 0x2c
   1190c:	a80c      	add	r0, sp, #48	; 0x30
   1190e:	9207      	str	r2, [sp, #28]
   11910:	f012 fc1d 	bl	2414e <_get_digit>
		if (*buf++ != '0') {
   11914:	9a07      	ldr	r2, [sp, #28]
		*buf = _get_digit(&fract, &digit_count);
   11916:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
		if (*buf++ != '0') {
   1191a:	2830      	cmp	r0, #48	; 0x30
			decexp--;
   1191c:	bf18      	it	ne
   1191e:	f106 36ff 	addne.w	r6, r6, #4294967295
		if (conv->flag_hash || (precision > 0)) {
   11922:	b912      	cbnz	r2, 1192a <z_cbvprintf_impl+0xae2>
   11924:	2f00      	cmp	r7, #0
   11926:	f340 80f8 	ble.w	11b1a <z_cbvprintf_impl+0xcd2>
			*buf++ = '.';
   1192a:	222e      	movs	r2, #46	; 0x2e
   1192c:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
   11930:	e756      	b.n	117e0 <z_cbvprintf_impl+0x998>
		while (*--buf == '0') {
   11932:	4647      	mov	r7, r8
   11934:	f108 38ff 	add.w	r8, r8, #4294967295
   11938:	f817 2c01 	ldrb.w	r2, [r7, #-1]
   1193c:	2a30      	cmp	r2, #48	; 0x30
   1193e:	d0f8      	beq.n	11932 <z_cbvprintf_impl+0xaea>
   11940:	2a2e      	cmp	r2, #46	; 0x2e
   11942:	bf08      	it	eq
   11944:	4647      	moveq	r7, r8
   11946:	e7a7      	b.n	11898 <z_cbvprintf_impl+0xa50>
		|| (conv->pad0_pre_exp > 0);
   11948:	2301      	movs	r3, #1
   1194a:	e7d5      	b.n	118f8 <z_cbvprintf_impl+0xab0>
			bpe = bps + 5;
   1194c:	4f3c      	ldr	r7, [pc, #240]	; (11a40 <z_cbvprintf_impl+0xbf8>)
		char sign = 0;
   1194e:	4681      	mov	r9, r0
			bps = "(nil)";
   11950:	1f7e      	subs	r6, r7, #5
		size_t nj_len = (bpe - bps);
   11952:	2005      	movs	r0, #5
   11954:	e5ac      	b.n	114b0 <z_cbvprintf_impl+0x668>
		} else if (conv->altform_0) {
   11956:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   11958:	bf48      	it	mi
   1195a:	3001      	addmi	r0, #1
   1195c:	e5b0      	b.n	114c0 <z_cbvprintf_impl+0x678>
					OUTC(pad);
   1195e:	4610      	mov	r0, r2
   11960:	9209      	str	r2, [sp, #36]	; 0x24
   11962:	9903      	ldr	r1, [sp, #12]
   11964:	47d0      	blx	sl
   11966:	2800      	cmp	r0, #0
   11968:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1196a:	da05      	bge.n	11978 <z_cbvprintf_impl+0xb30>
#undef OUTS
#undef OUTC
}
   1196c:	b01f      	add	sp, #124	; 0x7c
   1196e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   11972:	2220      	movs	r2, #32
					pad = '0';
   11974:	f8dd b010 	ldr.w	fp, [sp, #16]
				while (width-- > 0) {
   11978:	4659      	mov	r1, fp
   1197a:	2900      	cmp	r1, #0
   1197c:	f10b 3bff 	add.w	fp, fp, #4294967295
   11980:	dced      	bgt.n	1195e <z_cbvprintf_impl+0xb16>
   11982:	9b04      	ldr	r3, [sp, #16]
   11984:	f8cd b010 	str.w	fp, [sp, #16]
   11988:	442b      	add	r3, r5
   1198a:	1a5d      	subs	r5, r3, r1
		if (sign != 0) {
   1198c:	f1b9 0f00 	cmp.w	r9, #0
   11990:	d005      	beq.n	1199e <z_cbvprintf_impl+0xb56>
			OUTC(sign);
   11992:	9903      	ldr	r1, [sp, #12]
   11994:	4648      	mov	r0, r9
   11996:	47d0      	blx	sl
   11998:	2800      	cmp	r0, #0
   1199a:	dbe7      	blt.n	1196c <z_cbvprintf_impl+0xb24>
   1199c:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
   1199e:	9b08      	ldr	r3, [sp, #32]
   119a0:	2b00      	cmp	r3, #0
   119a2:	d07d      	beq.n	11aa0 <z_cbvprintf_impl+0xc58>
			if (conv->specifier_a) {
   119a4:	f99d 3049 	ldrsb.w	r3, [sp, #73]	; 0x49
   119a8:	2b00      	cmp	r3, #0
   119aa:	db28      	blt.n	119fe <z_cbvprintf_impl+0xbb6>
   119ac:	46b3      	mov	fp, r6
				while (isdigit((unsigned char)*cp) != 0) {
   119ae:	f89b 0000 	ldrb.w	r0, [fp]
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   119b2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   119b6:	2b09      	cmp	r3, #9
   119b8:	46d9      	mov	r9, fp
   119ba:	f10b 0b01 	add.w	fp, fp, #1
   119be:	d946      	bls.n	11a4e <z_cbvprintf_impl+0xc06>
				if (!conv->pad_postdp) {
   119c0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   119c4:	1bae      	subs	r6, r5, r6
   119c6:	0699      	lsls	r1, r3, #26
   119c8:	444e      	add	r6, r9
   119ca:	d407      	bmi.n	119dc <z_cbvprintf_impl+0xb94>
					while (pad_len-- > 0) {
   119cc:	4642      	mov	r2, r8
   119ce:	2a00      	cmp	r2, #0
   119d0:	f108 38ff 	add.w	r8, r8, #4294967295
   119d4:	dc40      	bgt.n	11a58 <z_cbvprintf_impl+0xc10>
   119d6:	9b07      	ldr	r3, [sp, #28]
   119d8:	4433      	add	r3, r6
   119da:	1a9e      	subs	r6, r3, r2
				if (*cp == '.') {
   119dc:	f899 0000 	ldrb.w	r0, [r9]
   119e0:	282e      	cmp	r0, #46	; 0x2e
   119e2:	d10a      	bne.n	119fa <z_cbvprintf_impl+0xbb2>
					OUTC(*cp++);
   119e4:	9903      	ldr	r1, [sp, #12]
   119e6:	47d0      	blx	sl
						OUTC('0');
   119e8:	2800      	cmp	r0, #0
   119ea:	dbbf      	blt.n	1196c <z_cbvprintf_impl+0xb24>
					while (pad_len-- > 0) {
   119ec:	f1b8 0f00 	cmp.w	r8, #0
						OUTC('0');
   119f0:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
   119f4:	dc36      	bgt.n	11a64 <z_cbvprintf_impl+0xc1c>
					OUTC(*cp++);
   119f6:	f109 0901 	add.w	r9, r9, #1
			if (conv->specifier_a) {
   119fa:	464d      	mov	r5, r9
   119fc:	e03d      	b.n	11a7a <z_cbvprintf_impl+0xc32>
   119fe:	46b1      	mov	r9, r6
				while (*cp != 'p') {
   11a00:	f899 0000 	ldrb.w	r0, [r9]
   11a04:	2870      	cmp	r0, #112	; 0x70
   11a06:	46c8      	mov	r8, r9
   11a08:	f109 0901 	add.w	r9, r9, #1
   11a0c:	d11a      	bne.n	11a44 <z_cbvprintf_impl+0xbfc>
   11a0e:	1bae      	subs	r6, r5, r6
   11a10:	9d14      	ldr	r5, [sp, #80]	; 0x50
   11a12:	4446      	add	r6, r8
			while (pad_len-- > 0) {
   11a14:	4435      	add	r5, r6
   11a16:	1bab      	subs	r3, r5, r6
   11a18:	2b00      	cmp	r3, #0
   11a1a:	dc39      	bgt.n	11a90 <z_cbvprintf_impl+0xc48>
			OUTS(cp, bpe);
   11a1c:	9903      	ldr	r1, [sp, #12]
   11a1e:	463b      	mov	r3, r7
   11a20:	4642      	mov	r2, r8
   11a22:	4650      	mov	r0, sl
   11a24:	f012 fbf0 	bl	24208 <outs>
   11a28:	2800      	cmp	r0, #0
   11a2a:	db9f      	blt.n	1196c <z_cbvprintf_impl+0xb24>
   11a2c:	4430      	add	r0, r6
   11a2e:	9e04      	ldr	r6, [sp, #16]
			while (pad_len-- > 0) {
   11a30:	4605      	mov	r5, r0
   11a32:	4406      	add	r6, r0
   11a34:	e06a      	b.n	11b0c <z_cbvprintf_impl+0xcc4>
   11a36:	bf00      	nop
   11a38:	00000000 	.word	0x00000000
   11a3c:	08000000 	.word	0x08000000
   11a40:	000280cc 	.word	0x000280cc
					OUTC(*cp++);
   11a44:	9903      	ldr	r1, [sp, #12]
   11a46:	47d0      	blx	sl
   11a48:	2800      	cmp	r0, #0
   11a4a:	dad9      	bge.n	11a00 <z_cbvprintf_impl+0xbb8>
   11a4c:	e78e      	b.n	1196c <z_cbvprintf_impl+0xb24>
					OUTC(*cp++);
   11a4e:	9903      	ldr	r1, [sp, #12]
   11a50:	47d0      	blx	sl
   11a52:	2800      	cmp	r0, #0
   11a54:	daab      	bge.n	119ae <z_cbvprintf_impl+0xb66>
   11a56:	e789      	b.n	1196c <z_cbvprintf_impl+0xb24>
						OUTC('0');
   11a58:	9903      	ldr	r1, [sp, #12]
   11a5a:	2030      	movs	r0, #48	; 0x30
   11a5c:	47d0      	blx	sl
   11a5e:	2800      	cmp	r0, #0
   11a60:	dab4      	bge.n	119cc <z_cbvprintf_impl+0xb84>
   11a62:	e783      	b.n	1196c <z_cbvprintf_impl+0xb24>
						OUTC('0');
   11a64:	9903      	ldr	r1, [sp, #12]
   11a66:	2030      	movs	r0, #48	; 0x30
   11a68:	47d0      	blx	sl
   11a6a:	f108 38ff 	add.w	r8, r8, #4294967295
   11a6e:	e7bb      	b.n	119e8 <z_cbvprintf_impl+0xba0>
					OUTC(*cp++);
   11a70:	9903      	ldr	r1, [sp, #12]
   11a72:	47d0      	blx	sl
   11a74:	2800      	cmp	r0, #0
   11a76:	f6ff af79 	blt.w	1196c <z_cbvprintf_impl+0xb24>
				while (isdigit((unsigned char)*cp) != 0) {
   11a7a:	7828      	ldrb	r0, [r5, #0]
   11a7c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   11a80:	2b09      	cmp	r3, #9
   11a82:	46a8      	mov	r8, r5
   11a84:	f105 0501 	add.w	r5, r5, #1
   11a88:	d9f2      	bls.n	11a70 <z_cbvprintf_impl+0xc28>
   11a8a:	eba6 0609 	sub.w	r6, r6, r9
   11a8e:	e7bf      	b.n	11a10 <z_cbvprintf_impl+0xbc8>
				OUTC('0');
   11a90:	9903      	ldr	r1, [sp, #12]
   11a92:	2030      	movs	r0, #48	; 0x30
   11a94:	47d0      	blx	sl
   11a96:	2800      	cmp	r0, #0
   11a98:	f6ff af68 	blt.w	1196c <z_cbvprintf_impl+0xb24>
   11a9c:	3601      	adds	r6, #1
   11a9e:	e7ba      	b.n	11a16 <z_cbvprintf_impl+0xbce>
			if (conv->altform_0c | conv->altform_0) {
   11aa0:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
   11aa4:	06da      	lsls	r2, r3, #27
   11aa6:	d401      	bmi.n	11aac <z_cbvprintf_impl+0xc64>
   11aa8:	071b      	lsls	r3, r3, #28
   11aaa:	d506      	bpl.n	11aba <z_cbvprintf_impl+0xc72>
				OUTC('0');
   11aac:	9903      	ldr	r1, [sp, #12]
   11aae:	2030      	movs	r0, #48	; 0x30
   11ab0:	47d0      	blx	sl
   11ab2:	2800      	cmp	r0, #0
   11ab4:	f6ff af5a 	blt.w	1196c <z_cbvprintf_impl+0xb24>
   11ab8:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   11aba:	9b05      	ldr	r3, [sp, #20]
   11abc:	b13b      	cbz	r3, 11ace <z_cbvprintf_impl+0xc86>
				OUTC(conv->specifier);
   11abe:	9903      	ldr	r1, [sp, #12]
   11ac0:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
   11ac4:	47d0      	blx	sl
   11ac6:	2800      	cmp	r0, #0
   11ac8:	f6ff af50 	blt.w	1196c <z_cbvprintf_impl+0xb24>
   11acc:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   11ace:	44a8      	add	r8, r5
   11ad0:	e006      	b.n	11ae0 <z_cbvprintf_impl+0xc98>
				OUTC('0');
   11ad2:	9903      	ldr	r1, [sp, #12]
   11ad4:	2030      	movs	r0, #48	; 0x30
   11ad6:	47d0      	blx	sl
   11ad8:	2800      	cmp	r0, #0
   11ada:	f6ff af47 	blt.w	1196c <z_cbvprintf_impl+0xb24>
   11ade:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   11ae0:	eba8 0305 	sub.w	r3, r8, r5
   11ae4:	2b00      	cmp	r3, #0
   11ae6:	dcf4      	bgt.n	11ad2 <z_cbvprintf_impl+0xc8a>
			OUTS(bps, bpe);
   11ae8:	9903      	ldr	r1, [sp, #12]
   11aea:	463b      	mov	r3, r7
   11aec:	4632      	mov	r2, r6
   11aee:	4650      	mov	r0, sl
   11af0:	f012 fb8a 	bl	24208 <outs>
   11af4:	2800      	cmp	r0, #0
   11af6:	f6ff af39 	blt.w	1196c <z_cbvprintf_impl+0xb24>
   11afa:	4428      	add	r0, r5
   11afc:	e797      	b.n	11a2e <z_cbvprintf_impl+0xbe6>
			OUTC(' ');
   11afe:	9903      	ldr	r1, [sp, #12]
   11b00:	2020      	movs	r0, #32
   11b02:	47d0      	blx	sl
   11b04:	2800      	cmp	r0, #0
   11b06:	f6ff af31 	blt.w	1196c <z_cbvprintf_impl+0xb24>
   11b0a:	3501      	adds	r5, #1
		while (width > 0) {
   11b0c:	1b73      	subs	r3, r6, r5
   11b0e:	2b00      	cmp	r3, #0
   11b10:	dcf5      	bgt.n	11afe <z_cbvprintf_impl+0xcb6>
   11b12:	f7ff bbd9 	b.w	112c8 <z_cbvprintf_impl+0x480>
			decexp = 0;
   11b16:	4616      	mov	r6, r2
   11b18:	e6b9      	b.n	1188e <z_cbvprintf_impl+0xa46>
		if (*buf++ != '0') {
   11b1a:	f10d 085d 	add.w	r8, sp, #93	; 0x5d
	while (precision > 0 && digit_count > 0) {
   11b1e:	e6b6      	b.n	1188e <z_cbvprintf_impl+0xa46>

00011b20 <uart_work_handler.part.0>:
		break;
	}
}

// used in case UART_RX is disabled 
static void uart_work_handler(struct k_work *item)
   11b20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	buf = k_malloc(sizeof(*buf));
	if (buf) {
		buf->len = 0;
	} else {
		LOG_WRN("UART_WORK_HANDLER\nNot able to allocate UART receive buffer");
   11b22:	4b09      	ldr	r3, [pc, #36]	; (11b48 <uart_work_handler.part.0+0x28>)
   11b24:	9305      	str	r3, [sp, #20]
   11b26:	aa04      	add	r2, sp, #16
   11b28:	2302      	movs	r3, #2
   11b2a:	4808      	ldr	r0, [pc, #32]	; (11b4c <uart_work_handler.part.0+0x2c>)
   11b2c:	9304      	str	r3, [sp, #16]
   11b2e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11b32:	f012 f8c3 	bl	23cbc <z_log_msg_static_create.constprop.0>
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
   11b36:	4806      	ldr	r0, [pc, #24]	; (11b50 <uart_work_handler.part.0+0x30>)
   11b38:	f240 6267 	movw	r2, #1639	; 0x667
   11b3c:	2300      	movs	r3, #0
		return;
	}

	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
}
   11b3e:	b007      	add	sp, #28
   11b40:	f85d eb04 	ldr.w	lr, [sp], #4
		k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
   11b44:	f00f bb7c 	b.w	21240 <k_work_reschedule>
   11b48:	00027870 	.word	0x00027870
   11b4c:	00026fc4 	.word	0x00026fc4
   11b50:	20001650 	.word	0x20001650

00011b54 <on_le_param_updated>:
		dk_set_led_off(CON_STATUS_LED);
	}
}

void on_le_param_updated(struct bt_conn *conn, uint16_t interval, uint16_t latency, uint16_t timeout)
{
   11b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11b56:	af00      	add	r7, sp, #0
    double connection_interval = interval*1.25;         // in ms
    uint16_t supervision_timeout = timeout*10;          // in ms
    LOG_INF("Connection parameters updated: interval %.2f ms, latency %d intervals, timeout %d ms", connection_interval, latency, supervision_timeout);
   11b58:	b08a      	sub	sp, #40	; 0x28
{
   11b5a:	4608      	mov	r0, r1
   11b5c:	4616      	mov	r6, r2
   11b5e:	461c      	mov	r4, r3
    LOG_INF("Connection parameters updated: interval %.2f ms, latency %d intervals, timeout %d ms", connection_interval, latency, supervision_timeout);
   11b60:	466d      	mov	r5, sp
   11b62:	4b0f      	ldr	r3, [pc, #60]	; (11ba0 <on_le_param_updated+0x4c>)
   11b64:	616b      	str	r3, [r5, #20]
    double connection_interval = interval*1.25;         // in ms
   11b66:	f7ee fc0d 	bl	384 <__aeabi_i2d>
   11b6a:	4b0e      	ldr	r3, [pc, #56]	; (11ba4 <on_le_param_updated+0x50>)
   11b6c:	2200      	movs	r2, #0
   11b6e:	f7ee fc73 	bl	458 <__aeabi_dmul>
    LOG_INF("Connection parameters updated: interval %.2f ms, latency %d intervals, timeout %d ms", connection_interval, latency, supervision_timeout);
   11b72:	2200      	movs	r2, #0
   11b74:	2300      	movs	r3, #0
   11b76:	f7ee fab9 	bl	ec <__adddf3>
    uint16_t supervision_timeout = timeout*10;          // in ms
   11b7a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    LOG_INF("Connection parameters updated: interval %.2f ms, latency %d intervals, timeout %d ms", connection_interval, latency, supervision_timeout);
   11b7e:	462a      	mov	r2, r5
    uint16_t supervision_timeout = timeout*10;          // in ms
   11b80:	0064      	lsls	r4, r4, #1
    LOG_INF("Connection parameters updated: interval %.2f ms, latency %d intervals, timeout %d ms", connection_interval, latency, supervision_timeout);
   11b82:	2306      	movs	r3, #6
   11b84:	b2a4      	uxth	r4, r4
   11b86:	e9c5 0106 	strd	r0, r1, [r5, #24]
   11b8a:	622e      	str	r6, [r5, #32]
   11b8c:	626c      	str	r4, [r5, #36]	; 0x24
   11b8e:	4806      	ldr	r0, [pc, #24]	; (11ba8 <on_le_param_updated+0x54>)
   11b90:	f842 3f10 	str.w	r3, [r2, #16]!
   11b94:	f44f 5143 	mov.w	r1, #12480	; 0x30c0
   11b98:	f012 f890 	bl	23cbc <z_log_msg_static_create.constprop.0>
}
   11b9c:	46bd      	mov	sp, r7
   11b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11ba0:	000278ab 	.word	0x000278ab
   11ba4:	3ff40000 	.word	0x3ff40000
   11ba8:	00026fc4 	.word	0x00026fc4

00011bac <uart_work_handler>:
{
   11bac:	b508      	push	{r3, lr}
	buf = k_malloc(sizeof(*buf));
   11bae:	2018      	movs	r0, #24
   11bb0:	f015 f8a2 	bl	26cf8 <k_malloc>
	if (buf) {
   11bb4:	b138      	cbz	r0, 11bc6 <uart_work_handler+0x1a>
		buf->len = 0;
   11bb6:	2300      	movs	r3, #0
   11bb8:	8283      	strh	r3, [r0, #20]
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
   11bba:	1d01      	adds	r1, r0, #4
}
   11bbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	uart_rx_enable(uart, buf->data, sizeof(buf->data), UART_WAIT_FOR_RX);
   11bc0:	4803      	ldr	r0, [pc, #12]	; (11bd0 <uart_work_handler+0x24>)
   11bc2:	f012 b87e 	b.w	23cc2 <uart_rx_enable.constprop.0>
}
   11bc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   11bca:	f7ff bfa9 	b.w	11b20 <uart_work_handler.part.0>
   11bce:	bf00      	nop
   11bd0:	00026e04 	.word	0x00026e04

00011bd4 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   11bd4:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   11bd6:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   11bd8:	b08a      	sub	sp, #40	; 0x28
   11bda:	4604      	mov	r4, r0
   11bdc:	460e      	mov	r6, r1
   11bde:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   11be0:	2b03      	cmp	r3, #3
   11be2:	d820      	bhi.n	11c26 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
   11be4:	e8df f003 	tbb	[pc, r3]
   11be8:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   11bec:	4911      	ldr	r1, [pc, #68]	; (11c34 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   11bee:	4628      	mov	r0, r5
   11bf0:	f012 ff0b 	bl	24a0a <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   11bf4:	9505      	str	r5, [sp, #20]
   11bf6:	7863      	ldrb	r3, [r4, #1]
   11bf8:	9304      	str	r3, [sp, #16]
   11bfa:	78a3      	ldrb	r3, [r4, #2]
   11bfc:	9303      	str	r3, [sp, #12]
   11bfe:	78e3      	ldrb	r3, [r4, #3]
   11c00:	9302      	str	r3, [sp, #8]
   11c02:	7923      	ldrb	r3, [r4, #4]
   11c04:	9301      	str	r3, [sp, #4]
   11c06:	7963      	ldrb	r3, [r4, #5]
   11c08:	9300      	str	r3, [sp, #0]
   11c0a:	79a3      	ldrb	r3, [r4, #6]
   11c0c:	4a0a      	ldr	r2, [pc, #40]	; (11c38 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
   11c0e:	211e      	movs	r1, #30
   11c10:	4630      	mov	r0, r6
   11c12:	f012 f8ed 	bl	23df0 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   11c16:	b00a      	add	sp, #40	; 0x28
   11c18:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   11c1a:	4908      	ldr	r1, [pc, #32]	; (11c3c <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
   11c1c:	e7e7      	b.n	11bee <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
   11c1e:	4908      	ldr	r1, [pc, #32]	; (11c40 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
   11c20:	e7e5      	b.n	11bee <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
   11c22:	4908      	ldr	r1, [pc, #32]	; (11c44 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
   11c24:	e7e3      	b.n	11bee <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   11c26:	4a08      	ldr	r2, [pc, #32]	; (11c48 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
   11c28:	210a      	movs	r1, #10
   11c2a:	4628      	mov	r0, r5
   11c2c:	f012 f8e0 	bl	23df0 <snprintk>
		break;
   11c30:	e7e0      	b.n	11bf4 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
   11c32:	bf00      	nop
   11c34:	00027900 	.word	0x00027900
   11c38:	00027922 	.word	0x00027922
   11c3c:	00027907 	.word	0x00027907
   11c40:	0002790e 	.word	0x0002790e
   11c44:	00027918 	.word	0x00027918
   11c48:	00029e6c 	.word	0x00029e6c

00011c4c <disconnected>:
{
   11c4c:	b5b0      	push	{r4, r5, r7, lr}
   11c4e:	b088      	sub	sp, #32
   11c50:	af00      	add	r7, sp, #0
   11c52:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11c54:	f013 f9dd 	bl	25012 <bt_conn_get_dst>
   11c58:	4639      	mov	r1, r7
   11c5a:	f7ff ffbb 	bl	11bd4 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
   11c5e:	466d      	mov	r5, sp
   11c60:	b08a      	sub	sp, #40	; 0x28
   11c62:	466a      	mov	r2, sp
   11c64:	4b11      	ldr	r3, [pc, #68]	; (11cac <disconnected+0x60>)
   11c66:	61d4      	str	r4, [r2, #28]
   11c68:	e9c2 3705 	strd	r3, r7, [r2, #20]
   11c6c:	f44f 7300 	mov.w	r3, #512	; 0x200
   11c70:	8413      	strh	r3, [r2, #32]
	if (auth_conn) {
   11c72:	4c0f      	ldr	r4, [pc, #60]	; (11cb0 <disconnected+0x64>)
	LOG_INF("Disconnected: %s (reason %u)", addr, reason);
   11c74:	4b0f      	ldr	r3, [pc, #60]	; (11cb4 <disconnected+0x68>)
   11c76:	4810      	ldr	r0, [pc, #64]	; (11cb8 <disconnected+0x6c>)
   11c78:	f842 3f10 	str.w	r3, [r2, #16]!
   11c7c:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   11c80:	f012 f81c 	bl	23cbc <z_log_msg_static_create.constprop.0>
	if (auth_conn) {
   11c84:	6820      	ldr	r0, [r4, #0]
   11c86:	46ad      	mov	sp, r5
   11c88:	b118      	cbz	r0, 11c92 <disconnected+0x46>
		bt_conn_unref(auth_conn);
   11c8a:	f006 fd99 	bl	187c0 <bt_conn_unref>
		auth_conn = NULL;
   11c8e:	2300      	movs	r3, #0
   11c90:	6023      	str	r3, [r4, #0]
	if (current_conn) {
   11c92:	4c0a      	ldr	r4, [pc, #40]	; (11cbc <disconnected+0x70>)
   11c94:	6820      	ldr	r0, [r4, #0]
   11c96:	b130      	cbz	r0, 11ca6 <disconnected+0x5a>
		bt_conn_unref(current_conn);
   11c98:	f006 fd92 	bl	187c0 <bt_conn_unref>
		current_conn = NULL;
   11c9c:	2300      	movs	r3, #0
		dk_set_led_off(CON_STATUS_LED);
   11c9e:	2001      	movs	r0, #1
		current_conn = NULL;
   11ca0:	6023      	str	r3, [r4, #0]
		dk_set_led_off(CON_STATUS_LED);
   11ca2:	f014 fc77 	bl	26594 <dk_set_led_off>
}
   11ca6:	3720      	adds	r7, #32
   11ca8:	46bd      	mov	sp, r7
   11caa:	bdb0      	pop	{r4, r5, r7, pc}
   11cac:	00027945 	.word	0x00027945
   11cb0:	20002bfc 	.word	0x20002bfc
   11cb4:	01000004 	.word	0x01000004
   11cb8:	00026fc4 	.word	0x00026fc4
   11cbc:	20002c00 	.word	0x20002c00

00011cc0 <connected>:
{
   11cc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11cc4:	b093      	sub	sp, #76	; 0x4c
   11cc6:	4680      	mov	r8, r0
   11cc8:	af02      	add	r7, sp, #8
	if (err) {
   11cca:	b191      	cbz	r1, 11cf2 <connected+0x32>
		LOG_ERR("Connection failed (err %u)\n", err);
   11ccc:	466c      	mov	r4, sp
   11cce:	b088      	sub	sp, #32
   11cd0:	aa02      	add	r2, sp, #8
   11cd2:	4b2b      	ldr	r3, [pc, #172]	; (11d80 <connected+0xc0>)
   11cd4:	e9c2 3105 	strd	r3, r1, [r2, #20]
   		LOG_ERR("bt_conn_get_info() returned %d", err);
   11cd8:	2303      	movs	r3, #3
   11cda:	f842 3f10 	str.w	r3, [r2, #16]!
   11cde:	4829      	ldr	r0, [pc, #164]	; (11d84 <connected+0xc4>)
   11ce0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11ce4:	f011 ffea 	bl	23cbc <z_log_msg_static_create.constprop.0>
   11ce8:	46a5      	mov	sp, r4
}
   11cea:	3744      	adds	r7, #68	; 0x44
   11cec:	46bd      	mov	sp, r7
   11cee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_conn_get_info(conn, &info);
   11cf2:	f107 0120 	add.w	r1, r7, #32
   11cf6:	f007 f845 	bl	18d84 <bt_conn_get_info>
	if (err) {
   11cfa:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
   11cfe:	d006      	beq.n	11d0e <connected+0x4e>
   		LOG_ERR("bt_conn_get_info() returned %d", err);
   11d00:	466c      	mov	r4, sp
   11d02:	b088      	sub	sp, #32
   11d04:	aa02      	add	r2, sp, #8
   11d06:	4b20      	ldr	r3, [pc, #128]	; (11d88 <connected+0xc8>)
   11d08:	e9c2 3005 	strd	r3, r0, [r2, #20]
   11d0c:	e7e4      	b.n	11cd8 <connected+0x18>
	double connection_interval = info.le.interval*1.25; // in ms
   11d0e:	8eb8      	ldrh	r0, [r7, #52]	; 0x34
   11d10:	f7ee fb38 	bl	384 <__aeabi_i2d>
   11d14:	2200      	movs	r2, #0
   11d16:	4b1d      	ldr	r3, [pc, #116]	; (11d8c <connected+0xcc>)
   11d18:	f7ee fb9e 	bl	458 <__aeabi_dmul>
	uint16_t supervision_timeout = info.le.timeout*10; // in ms
   11d1c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
	double connection_interval = info.le.interval*1.25; // in ms
   11d1e:	4604      	mov	r4, r0
	uint16_t supervision_timeout = info.le.timeout*10; // in ms
   11d20:	eb03 0383 	add.w	r3, r3, r3, lsl #2
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11d24:	4640      	mov	r0, r8
	uint16_t supervision_timeout = info.le.timeout*10; // in ms
   11d26:	005e      	lsls	r6, r3, #1
	double connection_interval = info.le.interval*1.25; // in ms
   11d28:	460d      	mov	r5, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   11d2a:	f013 f972 	bl	25012 <bt_conn_get_dst>
   11d2e:	4639      	mov	r1, r7
   11d30:	f7ff ff50 	bl	11bd4 <bt_addr_le_to_str.constprop.0.isra.0>
	LOG_INF("Connected %s", addr);
   11d34:	46e9      	mov	r9, sp
   11d36:	b088      	sub	sp, #32
	uint16_t supervision_timeout = info.le.timeout*10; // in ms
   11d38:	b2b6      	uxth	r6, r6
	LOG_INF("Connected %s", addr);
   11d3a:	aa02      	add	r2, sp, #8
   11d3c:	4b14      	ldr	r3, [pc, #80]	; (11d90 <connected+0xd0>)
   11d3e:	4811      	ldr	r0, [pc, #68]	; (11d84 <connected+0xc4>)
   11d40:	e9c2 3705 	strd	r3, r7, [r2, #20]
   11d44:	f44f 7300 	mov.w	r3, #512	; 0x200
   11d48:	8393      	strh	r3, [r2, #28]
   11d4a:	4b12      	ldr	r3, [pc, #72]	; (11d94 <connected+0xd4>)
   11d4c:	f842 3f10 	str.w	r3, [r2, #16]!
   11d50:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
   11d54:	f011 ffb2 	bl	23cbc <z_log_msg_static_create.constprop.0>
	printk("--------------------\nbuffer size %i, connection interval %.2fms, timeout %ims, latency %i\n", CONFIG_BT_NUS_UART_BUFFER_SIZE, connection_interval, supervision_timeout, info.le.latency);
   11d58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
   11d5a:	480f      	ldr	r0, [pc, #60]	; (11d98 <connected+0xd8>)
   11d5c:	46cd      	mov	sp, r9
   11d5e:	e9cd 6300 	strd	r6, r3, [sp]
   11d62:	4622      	mov	r2, r4
   11d64:	462b      	mov	r3, r5
   11d66:	2110      	movs	r1, #16
   11d68:	f012 f835 	bl	23dd6 <printk>
	current_conn = bt_conn_ref(conn);
   11d6c:	4640      	mov	r0, r8
   11d6e:	f006 fcf7 	bl	18760 <bt_conn_ref>
   11d72:	4b0a      	ldr	r3, [pc, #40]	; (11d9c <connected+0xdc>)
   11d74:	6018      	str	r0, [r3, #0]
	dk_set_led_on(CON_STATUS_LED);
   11d76:	2001      	movs	r0, #1
   11d78:	f014 fc09 	bl	2658e <dk_set_led_on>
   11d7c:	e7b5      	b.n	11cea <connected+0x2a>
   11d7e:	bf00      	nop
   11d80:	00027962 	.word	0x00027962
   11d84:	00026fc4 	.word	0x00026fc4
   11d88:	0002797e 	.word	0x0002797e
   11d8c:	3ff40000 	.word	0x3ff40000
   11d90:	0002799d 	.word	0x0002799d
   11d94:	01000003 	.word	0x01000003
   11d98:	000279aa 	.word	0x000279aa
   11d9c:	20002c00 	.word	0x20002c00

00011da0 <uart_cb>:
{
   11da0:	b510      	push	{r4, lr}
	switch (evt->type) {
   11da2:	780b      	ldrb	r3, [r1, #0]
{
   11da4:	b086      	sub	sp, #24
	switch (evt->type) {
   11da6:	2b05      	cmp	r3, #5
   11da8:	d828      	bhi.n	11dfc <uart_cb+0x5c>
   11daa:	e8df f003 	tbb	[pc, r3]
   11dae:	7a03      	.short	0x7a03
   11db0:	4627682b 	.word	0x4627682b
		if ((evt->data.tx.len == 0) ||
   11db4:	688b      	ldr	r3, [r1, #8]
   11db6:	b30b      	cbz	r3, 11dfc <uart_cb+0x5c>
		    (!evt->data.tx.buf)) {
   11db8:	6848      	ldr	r0, [r1, #4]
		if ((evt->data.tx.len == 0) ||
   11dba:	b1f8      	cbz	r0, 11dfc <uart_cb+0x5c>
		if (aborted_buf) {
   11dbc:	4a43      	ldr	r2, [pc, #268]	; (11ecc <uart_cb+0x12c>)
   11dbe:	6813      	ldr	r3, [r2, #0]
   11dc0:	b1f3      	cbz	r3, 11e00 <uart_cb+0x60>
			buf = CONTAINER_OF(aborted_buf, struct uart_data_t,
   11dc2:	1f18      	subs	r0, r3, #4
			aborted_buf = NULL;
   11dc4:	2300      	movs	r3, #0
   11dc6:	6013      	str	r3, [r2, #0]
			aborted_len = 0;
   11dc8:	4a41      	ldr	r2, [pc, #260]	; (11ed0 <uart_cb+0x130>)
   11dca:	6013      	str	r3, [r2, #0]
		k_free(buf);
   11dcc:	f014 ff8d 	bl	26cea <k_free>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (void *) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_QUEUE_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_queue_get(queue, timeout);
   11dd0:	4840      	ldr	r0, [pc, #256]	; (11ed4 <uart_cb+0x134>)
   11dd2:	2200      	movs	r2, #0
   11dd4:	2300      	movs	r3, #0
   11dd6:	f00e fcb7 	bl	20748 <z_impl_k_queue_get>
		if (!buf) {
   11dda:	b178      	cbz	r0, 11dfc <uart_cb+0x5c>
		if (uart_tx(uart, buf->data, buf->len, SYS_FOREVER_MS)) {
   11ddc:	8a82      	ldrh	r2, [r0, #20]
   11dde:	1d01      	adds	r1, r0, #4
   11de0:	483d      	ldr	r0, [pc, #244]	; (11ed8 <uart_cb+0x138>)
   11de2:	f011 ff77 	bl	23cd4 <uart_tx.constprop.0>
   11de6:	b148      	cbz	r0, 11dfc <uart_cb+0x5c>
			LOG_WRN("Failed to send data over UART");
   11de8:	4b3c      	ldr	r3, [pc, #240]	; (11edc <uart_cb+0x13c>)
			LOG_WRN("UART_RX_BUF_REQUEST\nNot able to allocate UART receive buffer");
   11dea:	9305      	str	r3, [sp, #20]
   11dec:	483c      	ldr	r0, [pc, #240]	; (11ee0 <uart_cb+0x140>)
   11dee:	2302      	movs	r3, #2
   11df0:	aa04      	add	r2, sp, #16
   11df2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11df6:	9304      	str	r3, [sp, #16]
   11df8:	f011 ff60 	bl	23cbc <z_log_msg_static_create.constprop.0>
}
   11dfc:	b006      	add	sp, #24
   11dfe:	bd10      	pop	{r4, pc}
			buf = CONTAINER_OF(evt->data.tx.buf, struct uart_data_t,
   11e00:	3804      	subs	r0, #4
   11e02:	e7e3      	b.n	11dcc <uart_cb+0x2c>
		buf = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data);
   11e04:	684a      	ldr	r2, [r1, #4]
		buf->len += evt->data.rx.len;
   11e06:	68cb      	ldr	r3, [r1, #12]
   11e08:	8a10      	ldrh	r0, [r2, #16]
   11e0a:	4403      	add	r3, r0
		if (disable_req) {
   11e0c:	4835      	ldr	r0, [pc, #212]	; (11ee4 <uart_cb+0x144>)
		buf->len += evt->data.rx.len;
   11e0e:	b29b      	uxth	r3, r3
   11e10:	8213      	strh	r3, [r2, #16]
		if (disable_req) {
   11e12:	7802      	ldrb	r2, [r0, #0]
   11e14:	2a00      	cmp	r2, #0
   11e16:	d1f1      	bne.n	11dfc <uart_cb+0x5c>
		if ((evt->data.rx.buf[buf->len - 1] == '\n') ||
   11e18:	684a      	ldr	r2, [r1, #4]
   11e1a:	4413      	add	r3, r2
   11e1c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   11e20:	2b0a      	cmp	r3, #10
   11e22:	d001      	beq.n	11e28 <uart_cb+0x88>
   11e24:	2b0d      	cmp	r3, #13
   11e26:	d1e9      	bne.n	11dfc <uart_cb+0x5c>
			disable_req = true;
   11e28:	2301      	movs	r3, #1
   11e2a:	7003      	strb	r3, [r0, #0]
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
			(const struct uart_driver_api *)dev->api;

	return api->rx_disable(dev);
   11e2c:	482a      	ldr	r0, [pc, #168]	; (11ed8 <uart_cb+0x138>)
   11e2e:	6883      	ldr	r3, [r0, #8]
   11e30:	695b      	ldr	r3, [r3, #20]
}
   11e32:	b006      	add	sp, #24
   11e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11e38:	4718      	bx	r3
		disable_req = false;
   11e3a:	4b2a      	ldr	r3, [pc, #168]	; (11ee4 <uart_cb+0x144>)
   11e3c:	2400      	movs	r4, #0
		buf = k_malloc(sizeof(*buf));
   11e3e:	2018      	movs	r0, #24
		disable_req = false;
   11e40:	701c      	strb	r4, [r3, #0]
		buf = k_malloc(sizeof(*buf));
   11e42:	f014 ff59 	bl	26cf8 <k_malloc>
		if (buf) {
   11e46:	b138      	cbz	r0, 11e58 <uart_cb+0xb8>
			buf->len = 0;
   11e48:	8284      	strh	r4, [r0, #20]
		uart_rx_enable(uart, buf->data, sizeof(buf->data),
   11e4a:	1d01      	adds	r1, r0, #4
   11e4c:	4822      	ldr	r0, [pc, #136]	; (11ed8 <uart_cb+0x138>)
}
   11e4e:	b006      	add	sp, #24
   11e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_rx_enable(uart, buf->data, sizeof(buf->data),
   11e54:	f011 bf35 	b.w	23cc2 <uart_rx_enable.constprop.0>
			LOG_WRN("UART_RX_DISABLED\nNot able to allocate UART receive buffer");
   11e58:	4b23      	ldr	r3, [pc, #140]	; (11ee8 <uart_cb+0x148>)
   11e5a:	9305      	str	r3, [sp, #20]
   11e5c:	aa04      	add	r2, sp, #16
   11e5e:	2302      	movs	r3, #2
   11e60:	481f      	ldr	r0, [pc, #124]	; (11ee0 <uart_cb+0x140>)
   11e62:	9304      	str	r3, [sp, #16]
   11e64:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   11e68:	f011 ff28 	bl	23cbc <z_log_msg_static_create.constprop.0>
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
   11e6c:	481f      	ldr	r0, [pc, #124]	; (11eec <uart_cb+0x14c>)
   11e6e:	f240 6267 	movw	r2, #1639	; 0x667
   11e72:	2300      	movs	r3, #0
}
   11e74:	b006      	add	sp, #24
   11e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			k_work_reschedule(&uart_work, UART_WAIT_FOR_BUF_DELAY);
   11e7a:	f00f b9e1 	b.w	21240 <k_work_reschedule>
		buf = k_malloc(sizeof(*buf));
   11e7e:	2018      	movs	r0, #24
   11e80:	f014 ff3a 	bl	26cf8 <k_malloc>
		if (buf) {
   11e84:	4601      	mov	r1, r0
   11e86:	b150      	cbz	r0, 11e9e <uart_cb+0xfe>
			buf->len = 0;
   11e88:	2300      	movs	r3, #0
   11e8a:	8283      	strh	r3, [r0, #20]
	return api->rx_buf_rsp(dev, buf, len);
   11e8c:	4812      	ldr	r0, [pc, #72]	; (11ed8 <uart_cb+0x138>)
   11e8e:	6883      	ldr	r3, [r0, #8]
   11e90:	691b      	ldr	r3, [r3, #16]
   11e92:	2210      	movs	r2, #16
   11e94:	3104      	adds	r1, #4
}
   11e96:	b006      	add	sp, #24
   11e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11e9c:	4718      	bx	r3
			LOG_WRN("UART_RX_BUF_REQUEST\nNot able to allocate UART receive buffer");
   11e9e:	4b14      	ldr	r3, [pc, #80]	; (11ef0 <uart_cb+0x150>)
   11ea0:	e7a3      	b.n	11dea <uart_cb+0x4a>
		if (!aborted_buf) {
   11ea2:	4a0a      	ldr	r2, [pc, #40]	; (11ecc <uart_cb+0x12c>)
   11ea4:	6813      	ldr	r3, [r2, #0]
   11ea6:	b90b      	cbnz	r3, 11eac <uart_cb+0x10c>
			aborted_buf = (uint8_t *)evt->data.tx.buf;
   11ea8:	684b      	ldr	r3, [r1, #4]
   11eaa:	6013      	str	r3, [r2, #0]
		aborted_len += evt->data.tx.len;
   11eac:	4808      	ldr	r0, [pc, #32]	; (11ed0 <uart_cb+0x130>)
   11eae:	688b      	ldr	r3, [r1, #8]
   11eb0:	6801      	ldr	r1, [r0, #0]
   11eb2:	440b      	add	r3, r1
		buf = CONTAINER_OF(aborted_buf, struct uart_data_t,
   11eb4:	6811      	ldr	r1, [r2, #0]
		aborted_len += evt->data.tx.len;
   11eb6:	6003      	str	r3, [r0, #0]
			buf->len - aborted_len, SYS_FOREVER_MS);
   11eb8:	8a0a      	ldrh	r2, [r1, #16]
		uart_tx(uart, &buf->data[aborted_len],
   11eba:	4807      	ldr	r0, [pc, #28]	; (11ed8 <uart_cb+0x138>)
   11ebc:	1ad2      	subs	r2, r2, r3
   11ebe:	4419      	add	r1, r3
}
   11ec0:	b006      	add	sp, #24
   11ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_tx(uart, &buf->data[aborted_len],
   11ec6:	f011 bf05 	b.w	23cd4 <uart_tx.constprop.0>
   11eca:	bf00      	nop
   11ecc:	20002bf4 	.word	0x20002bf4
   11ed0:	20002bf0 	.word	0x20002bf0
   11ed4:	20000978 	.word	0x20000978
   11ed8:	00026e04 	.word	0x00026e04
   11edc:	00027a05 	.word	0x00027a05
   11ee0:	00026fc4 	.word	0x00026fc4
   11ee4:	20002ff4 	.word	0x20002ff4
   11ee8:	00027a23 	.word	0x00027a23
   11eec:	20001650 	.word	0x20001650
   11ef0:	00027a5d 	.word	0x00027a5d

00011ef4 <decode>:
void decode(char b1, char b2, char b3, char b4){
   11ef4:	b570      	push	{r4, r5, r6, lr}
		*my_message->stim_status = 0;
   11ef6:	4c0d      	ldr	r4, [pc, #52]	; (11f2c <decode+0x38>)
	if (b1 == 0 && b2 == 0 && b3==0 && b4 == 0){
   11ef8:	ea41 0502 	orr.w	r5, r1, r2
   11efc:	4305      	orrs	r5, r0
		*my_message->stim_status = 0;
   11efe:	6824      	ldr	r4, [r4, #0]
	if (b1 == 0 && b2 == 0 && b3==0 && b4 == 0){
   11f00:	d105      	bne.n	11f0e <decode+0x1a>
   11f02:	b913      	cbnz	r3, 11f0a <decode+0x16>
		*my_message->stim_status = 1;
   11f04:	68e2      	ldr	r2, [r4, #12]
   11f06:	7013      	strb	r3, [r2, #0]
}
   11f08:	bd70      	pop	{r4, r5, r6, pc}
	else if (b1 == 0 && b2 == 0 && b3==0 && b4 == 1){
   11f0a:	2b01      	cmp	r3, #1
   11f0c:	d0fa      	beq.n	11f04 <decode+0x10>
		*my_message->stim_amp = (b1 & amp_mask) * 256 + b2;
   11f0e:	6825      	ldr	r5, [r4, #0]
   11f10:	f000 061f 	and.w	r6, r0, #31
   11f14:	eb01 2106 	add.w	r1, r1, r6, lsl #8
   11f18:	8029      	strh	r1, [r5, #0]
		*my_message->stim_pw = b3 * 2;
   11f1a:	6861      	ldr	r1, [r4, #4]
   11f1c:	0052      	lsls	r2, r2, #1
   11f1e:	800a      	strh	r2, [r1, #0]
		*my_message->stim_freq = b4;
   11f20:	68a2      	ldr	r2, [r4, #8]
   11f22:	7013      	strb	r3, [r2, #0]
		*my_message->stim_status = ((b1 & status_mask) >> 7);
   11f24:	68e3      	ldr	r3, [r4, #12]
   11f26:	09c0      	lsrs	r0, r0, #7
   11f28:	7018      	strb	r0, [r3, #0]
}
   11f2a:	e7ed      	b.n	11f08 <decode+0x14>
   11f2c:	20002bf8 	.word	0x20002bf8

00011f30 <bt_receive_cb>:
#endif

// this method defines teh receiving behavior 
static void bt_receive_cb(struct bt_conn *conn, const uint8_t *const data,
			  uint16_t len)
{
   11f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f34:	b08f      	sub	sp, #60	; 0x3c
	int err;
	char addr[BT_ADDR_LE_STR_LEN] = {0};
   11f36:	2400      	movs	r4, #0
{
   11f38:	af02      	add	r7, sp, #8
   11f3a:	4605      	mov	r5, r0
   11f3c:	4688      	mov	r8, r1
   11f3e:	4616      	mov	r6, r2
	char addr[BT_ADDR_LE_STR_LEN] = {0};
   11f40:	4621      	mov	r1, r4
   11f42:	221a      	movs	r2, #26
   11f44:	f107 0014 	add.w	r0, r7, #20
   11f48:	613c      	str	r4, [r7, #16]
   11f4a:	f012 fd8a 	bl	24a62 <memset>
	uint8_t out[CONFIG_BT_NUS_UART_BUFFER_SIZE];
	int length;
	// unsigned char *out = k_malloc(64 * sizeof(char));
	// printk("variable out at address 0x_%p\n", out);
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, ARRAY_SIZE(addr));
   11f4e:	4628      	mov	r0, r5
   11f50:	f107 0510 	add.w	r5, r7, #16
   11f54:	f013 f85d 	bl	25012 <bt_conn_get_dst>
   11f58:	4629      	mov	r1, r5
   11f5a:	f7ff fe3b 	bl	11bd4 <bt_addr_le_to_str.constprop.0.isra.0>
	printk("\n");
   11f5e:	4838      	ldr	r0, [pc, #224]	; (12040 <bt_receive_cb+0x110>)
   11f60:	f011 ff39 	bl	23dd6 <printk>
	LOG_INF("Received data from: %s", addr);
   11f64:	46e9      	mov	r9, sp
   11f66:	b088      	sub	sp, #32
   11f68:	aa02      	add	r2, sp, #8
   11f6a:	4b36      	ldr	r3, [pc, #216]	; (12044 <bt_receive_cb+0x114>)
   11f6c:	4836      	ldr	r0, [pc, #216]	; (12048 <bt_receive_cb+0x118>)
		length = tx->len;
		out[length] = NULL;

		decode(out[0], out[1], out[2], out[3]);
		printk("StimAmp: %i, StimPW: %i, StimFQ: %i, StimStatus: %i\n",
		 *my_message->stim_amp, *my_message->stim_pw, *my_message->stim_freq, *my_message->stim_status);
   11f6e:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 1205c <bt_receive_cb+0x12c>
	LOG_INF("Received data from: %s", addr);
   11f72:	e9c2 3505 	strd	r3, r5, [r2, #20]
   11f76:	f44f 7300 	mov.w	r3, #512	; 0x200
   11f7a:	8393      	strh	r3, [r2, #28]
   11f7c:	4b33      	ldr	r3, [pc, #204]	; (1204c <bt_receive_cb+0x11c>)
   11f7e:	f842 3f10 	str.w	r3, [r2, #16]!
   11f82:	f44f 51e6 	mov.w	r1, #7360	; 0x1cc0
   11f86:	f011 fe99 	bl	23cbc <z_log_msg_static_create.constprop.0>
   11f8a:	46cd      	mov	sp, r9
	for (uint16_t pos = 0; pos != len;) {
   11f8c:	42b4      	cmp	r4, r6
   11f8e:	d103      	bne.n	11f98 <bt_receive_cb+0x68>
		
		if (err) {
			k_fifo_put(&fifo_uart_tx_data, tx);
		}
	}
}
   11f90:	3734      	adds	r7, #52	; 0x34
   11f92:	46bd      	mov	sp, r7
   11f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		struct uart_data_t *tx = k_malloc(sizeof(*tx));
   11f98:	2018      	movs	r0, #24
   11f9a:	f014 fead 	bl	26cf8 <k_malloc>
		if ((len - pos) > tx_data_size) {
   11f9e:	1b32      	subs	r2, r6, r4
   11fa0:	2a0f      	cmp	r2, #15
		*tx->data = 0;
   11fa2:	f04f 0300 	mov.w	r3, #0
			tx->len = (len - pos);
   11fa6:	bf94      	ite	ls
   11fa8:	b292      	uxthls	r2, r2
			tx->len = tx_data_size;
   11faa:	220f      	movhi	r2, #15
		struct uart_data_t *tx = k_malloc(sizeof(*tx));
   11fac:	4605      	mov	r5, r0
		memcpy(tx->data, &data[pos], tx->len);
   11fae:	f100 0a04 	add.w	sl, r0, #4
		*tx->data = 0;
   11fb2:	7103      	strb	r3, [r0, #4]
			tx->len = (len - pos);
   11fb4:	8282      	strh	r2, [r0, #20]
		memcpy(tx->data, &data[pos], tx->len);
   11fb6:	eb08 0104 	add.w	r1, r8, r4
   11fba:	4650      	mov	r0, sl
   11fbc:	f012 fd46 	bl	24a4c <memcpy>
		pos += tx->len;
   11fc0:	8aab      	ldrh	r3, [r5, #20]
   11fc2:	441c      	add	r4, r3
   11fc4:	b2a4      	uxth	r4, r4
		if ((pos == len) && (data[len - 1] == '\r')) {
   11fc6:	42a6      	cmp	r6, r4
   11fc8:	d10a      	bne.n	11fe0 <bt_receive_cb+0xb0>
   11fca:	eb08 0206 	add.w	r2, r8, r6
   11fce:	f812 2c01 	ldrb.w	r2, [r2, #-1]
   11fd2:	2a0d      	cmp	r2, #13
   11fd4:	d104      	bne.n	11fe0 <bt_receive_cb+0xb0>
			tx->data[tx->len] = '\n';
   11fd6:	18ea      	adds	r2, r5, r3
   11fd8:	210a      	movs	r1, #10
			tx->len++;
   11fda:	3301      	adds	r3, #1
			tx->data[tx->len] = '\n';
   11fdc:	7111      	strb	r1, [r2, #4]
			tx->len++;
   11fde:	82ab      	strh	r3, [r5, #20]
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
   11fe0:	8aaa      	ldrh	r2, [r5, #20]
   11fe2:	481b      	ldr	r0, [pc, #108]	; (12050 <bt_receive_cb+0x120>)
   11fe4:	4651      	mov	r1, sl
   11fe6:	f011 fe75 	bl	23cd4 <uart_tx.constprop.0>
		memcpy(out, &(tx->data), sizeof(tx->data));
   11fea:	2210      	movs	r2, #16
		err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
   11fec:	4681      	mov	r9, r0
		memcpy(out, &(tx->data), sizeof(tx->data));
   11fee:	4651      	mov	r1, sl
   11ff0:	4638      	mov	r0, r7
   11ff2:	f012 fd2b 	bl	24a4c <memcpy>
		length = tx->len;
   11ff6:	8aab      	ldrh	r3, [r5, #20]
		out[length] = NULL;
   11ff8:	3330      	adds	r3, #48	; 0x30
   11ffa:	443b      	add	r3, r7
   11ffc:	2200      	movs	r2, #0
   11ffe:	f803 2c30 	strb.w	r2, [r3, #-48]
		decode(out[0], out[1], out[2], out[3]);
   12002:	78fb      	ldrb	r3, [r7, #3]
   12004:	78ba      	ldrb	r2, [r7, #2]
   12006:	7879      	ldrb	r1, [r7, #1]
   12008:	7838      	ldrb	r0, [r7, #0]
   1200a:	f7ff ff73 	bl	11ef4 <decode>
		 *my_message->stim_amp, *my_message->stim_pw, *my_message->stim_freq, *my_message->stim_status);
   1200e:	f8db 0000 	ldr.w	r0, [fp]
   12012:	6883      	ldr	r3, [r0, #8]
   12014:	6842      	ldr	r2, [r0, #4]
   12016:	6801      	ldr	r1, [r0, #0]
   12018:	68c0      	ldr	r0, [r0, #12]
		printk("StimAmp: %i, StimPW: %i, StimFQ: %i, StimStatus: %i\n",
   1201a:	781b      	ldrb	r3, [r3, #0]
   1201c:	7800      	ldrb	r0, [r0, #0]
   1201e:	f9b2 2000 	ldrsh.w	r2, [r2]
   12022:	f9b1 1000 	ldrsh.w	r1, [r1]
   12026:	9000      	str	r0, [sp, #0]
   12028:	480a      	ldr	r0, [pc, #40]	; (12054 <bt_receive_cb+0x124>)
   1202a:	f011 fed4 	bl	23dd6 <printk>
		if (err) {
   1202e:	f1b9 0f00 	cmp.w	r9, #0
   12032:	d0ab      	beq.n	11f8c <bt_receive_cb+0x5c>
			k_fifo_put(&fifo_uart_tx_data, tx);
   12034:	4808      	ldr	r0, [pc, #32]	; (12058 <bt_receive_cb+0x128>)
   12036:	4629      	mov	r1, r5
   12038:	f014 fc9e 	bl	26978 <k_queue_append>
   1203c:	e7a6      	b.n	11f8c <bt_receive_cb+0x5c>
   1203e:	bf00      	nop
   12040:	0002a221 	.word	0x0002a221
   12044:	00027a9a 	.word	0x00027a9a
   12048:	00026fc4 	.word	0x00026fc4
   1204c:	01000003 	.word	0x01000003
   12050:	00026e04 	.word	0x00026e04
   12054:	00027ab1 	.word	0x00027ab1
   12058:	20000978 	.word	0x20000978
   1205c:	20002bf8 	.word	0x20002bf8

00012060 <main>:
		LOG_ERR("Cannot init LEDs (err: %d)", err);
	}
}

void main(void)
{
   12060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12064:	b089      	sub	sp, #36	; 0x24
	int err = 0;
	// uint8_t *out = k_malloc(sizeof(uint8_t));
	my_message = k_malloc(sizeof(message*));
   12066:	2004      	movs	r0, #4
{
   12068:	af02      	add	r7, sp, #8
	my_message = k_malloc(sizeof(message*));
   1206a:	f014 fe45 	bl	26cf8 <k_malloc>
   1206e:	4c93      	ldr	r4, [pc, #588]	; (122bc <main+0x25c>)
   12070:	6020      	str	r0, [r4, #0]
	if(my_message == NULL){
   12072:	b950      	cbnz	r0, 1208a <main+0x2a>
		LOG_ERR("K_MALLOC FAILED");
   12074:	4b92      	ldr	r3, [pc, #584]	; (122c0 <main+0x260>)
   12076:	617b      	str	r3, [r7, #20]
   12078:	2302      	movs	r3, #2
   1207a:	4892      	ldr	r0, [pc, #584]	; (122c4 <main+0x264>)
   1207c:	613b      	str	r3, [r7, #16]
   1207e:	f107 0210 	add.w	r2, r7, #16
   12082:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12086:	f011 fe19 	bl	23cbc <z_log_msg_static_create.constprop.0>
	}
	my_message->stim_amp = k_malloc(sizeof(short));
   1208a:	2002      	movs	r0, #2
   1208c:	6825      	ldr	r5, [r4, #0]
   1208e:	f014 fe33 	bl	26cf8 <k_malloc>
	if(my_message->stim_amp == NULL){
   12092:	6823      	ldr	r3, [r4, #0]
	my_message->stim_amp = k_malloc(sizeof(short));
   12094:	6028      	str	r0, [r5, #0]
	if(my_message->stim_amp == NULL){
   12096:	681b      	ldr	r3, [r3, #0]
   12098:	b953      	cbnz	r3, 120b0 <main+0x50>
		LOG_ERR("K_MALLOC FAILED");
   1209a:	4b89      	ldr	r3, [pc, #548]	; (122c0 <main+0x260>)
   1209c:	617b      	str	r3, [r7, #20]
   1209e:	2302      	movs	r3, #2
   120a0:	4888      	ldr	r0, [pc, #544]	; (122c4 <main+0x264>)
   120a2:	613b      	str	r3, [r7, #16]
   120a4:	f107 0210 	add.w	r2, r7, #16
   120a8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   120ac:	f011 fe06 	bl	23cbc <z_log_msg_static_create.constprop.0>
	}
	my_message->stim_pw = k_malloc(sizeof(short));
   120b0:	2002      	movs	r0, #2
   120b2:	6825      	ldr	r5, [r4, #0]
   120b4:	f014 fe20 	bl	26cf8 <k_malloc>
	if(my_message->stim_pw == NULL){
   120b8:	6823      	ldr	r3, [r4, #0]
	my_message->stim_pw = k_malloc(sizeof(short));
   120ba:	6068      	str	r0, [r5, #4]
	if(my_message->stim_pw == NULL){
   120bc:	685b      	ldr	r3, [r3, #4]
   120be:	b953      	cbnz	r3, 120d6 <main+0x76>
		LOG_ERR("K_MALLOC FAILED");
   120c0:	4b7f      	ldr	r3, [pc, #508]	; (122c0 <main+0x260>)
   120c2:	617b      	str	r3, [r7, #20]
   120c4:	2302      	movs	r3, #2
   120c6:	487f      	ldr	r0, [pc, #508]	; (122c4 <main+0x264>)
   120c8:	613b      	str	r3, [r7, #16]
   120ca:	f107 0210 	add.w	r2, r7, #16
   120ce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   120d2:	f011 fdf3 	bl	23cbc <z_log_msg_static_create.constprop.0>
	}
	my_message->stim_freq = k_malloc(sizeof(char));
   120d6:	2001      	movs	r0, #1
   120d8:	6825      	ldr	r5, [r4, #0]
   120da:	f014 fe0d 	bl	26cf8 <k_malloc>
	if(my_message->stim_freq == NULL){
   120de:	6823      	ldr	r3, [r4, #0]
	my_message->stim_freq = k_malloc(sizeof(char));
   120e0:	60a8      	str	r0, [r5, #8]
	if(my_message->stim_freq == NULL){
   120e2:	689b      	ldr	r3, [r3, #8]
   120e4:	b953      	cbnz	r3, 120fc <main+0x9c>
		LOG_ERR("K_MALLOC FAILED");
   120e6:	4b76      	ldr	r3, [pc, #472]	; (122c0 <main+0x260>)
   120e8:	617b      	str	r3, [r7, #20]
   120ea:	2302      	movs	r3, #2
   120ec:	4875      	ldr	r0, [pc, #468]	; (122c4 <main+0x264>)
   120ee:	613b      	str	r3, [r7, #16]
   120f0:	f107 0210 	add.w	r2, r7, #16
   120f4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   120f8:	f011 fde0 	bl	23cbc <z_log_msg_static_create.constprop.0>
	}
	my_message->stim_status = k_malloc(sizeof(char));
   120fc:	2001      	movs	r0, #1
   120fe:	6825      	ldr	r5, [r4, #0]
   12100:	f014 fdfa 	bl	26cf8 <k_malloc>
	if(my_message->stim_status == NULL){
   12104:	6823      	ldr	r3, [r4, #0]
	my_message->stim_status = k_malloc(sizeof(char));
   12106:	60e8      	str	r0, [r5, #12]
	if(my_message->stim_status == NULL){
   12108:	68db      	ldr	r3, [r3, #12]
   1210a:	b953      	cbnz	r3, 12122 <main+0xc2>
		LOG_ERR("K_MALLOC FAILED");
   1210c:	4b6c      	ldr	r3, [pc, #432]	; (122c0 <main+0x260>)
   1210e:	617b      	str	r3, [r7, #20]
   12110:	2302      	movs	r3, #2
   12112:	486c      	ldr	r0, [pc, #432]	; (122c4 <main+0x264>)
   12114:	613b      	str	r3, [r7, #16]
   12116:	f107 0210 	add.w	r2, r7, #16
   1211a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1211e:	f011 fdcd 	bl	23cbc <z_log_msg_static_create.constprop.0>
	}

	my_message->stim_period = k_malloc(sizeof(int));
   12122:	2004      	movs	r0, #4
   12124:	6825      	ldr	r5, [r4, #0]
   12126:	f014 fde7 	bl	26cf8 <k_malloc>
	if(my_message->stim_period == NULL){
   1212a:	6823      	ldr	r3, [r4, #0]
	my_message->stim_period = k_malloc(sizeof(int));
   1212c:	6128      	str	r0, [r5, #16]
	if(my_message->stim_period == NULL){
   1212e:	691b      	ldr	r3, [r3, #16]
   12130:	b953      	cbnz	r3, 12148 <main+0xe8>
		LOG_ERR("K_MALLOC FAILED");
   12132:	4b63      	ldr	r3, [pc, #396]	; (122c0 <main+0x260>)
   12134:	617b      	str	r3, [r7, #20]
   12136:	2302      	movs	r3, #2
   12138:	4862      	ldr	r0, [pc, #392]	; (122c4 <main+0x264>)
   1213a:	613b      	str	r3, [r7, #16]
   1213c:	f107 0210 	add.w	r2, r7, #16
   12140:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12144:	f011 fdba 	bl	23cbc <z_log_msg_static_create.constprop.0>
	err = dk_leds_init();
   12148:	f00b fbf6 	bl	1d938 <dk_leds_init>
	if (err) {
   1214c:	b170      	cbz	r0, 1216c <main+0x10c>
		LOG_ERR("Cannot init LEDs (err: %d)", err);
   1214e:	466c      	mov	r4, sp
   12150:	b088      	sub	sp, #32
   12152:	aa02      	add	r2, sp, #8
   12154:	4b5c      	ldr	r3, [pc, #368]	; (122c8 <main+0x268>)
   12156:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1215a:	2303      	movs	r3, #3
   1215c:	f842 3f10 	str.w	r3, [r2, #16]!
   12160:	4858      	ldr	r0, [pc, #352]	; (122c4 <main+0x264>)
   12162:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12166:	f011 fda9 	bl	23cbc <z_log_msg_static_create.constprop.0>
   1216a:	46a5      	mov	sp, r4
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   1216c:	4e57      	ldr	r6, [pc, #348]	; (122cc <main+0x26c>)
   1216e:	4630      	mov	r0, r6
   12170:	f014 fba6 	bl	268c0 <z_device_is_ready>
	if (!device_is_ready(uart)) {
   12174:	b1c0      	cbz	r0, 121a8 <main+0x148>
	rx = k_malloc(sizeof(*rx));
   12176:	2018      	movs	r0, #24
   12178:	f014 fdbe 	bl	26cf8 <k_malloc>
	if (rx) {
   1217c:	4680      	mov	r8, r0
   1217e:	b198      	cbz	r0, 121a8 <main+0x148>
		rx->len = 0;
   12180:	2400      	movs	r4, #0
   12182:	8284      	strh	r4, [r0, #20]
	k_work_init_delayable(&uart_work, uart_work_handler);
   12184:	4952      	ldr	r1, [pc, #328]	; (122d0 <main+0x270>)
   12186:	4853      	ldr	r0, [pc, #332]	; (122d4 <main+0x274>)
   12188:	f00e ff3e 	bl	21008 <k_work_init_delayable>
	if (api->callback_set == NULL) {
   1218c:	68b3      	ldr	r3, [r6, #8]
   1218e:	681b      	ldr	r3, [r3, #0]
   12190:	b963      	cbnz	r3, 121ac <main+0x14c>
		LOG_ERR("Cannot initialize UART callback");
   12192:	4b51      	ldr	r3, [pc, #324]	; (122d8 <main+0x278>)
   12194:	617b      	str	r3, [r7, #20]
   12196:	2302      	movs	r3, #2
   12198:	484a      	ldr	r0, [pc, #296]	; (122c4 <main+0x264>)
   1219a:	613b      	str	r3, [r7, #16]
   1219c:	f107 0210 	add.w	r2, r7, #16
   121a0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   121a4:	f011 fd8a 	bl	23cbc <z_log_msg_static_create.constprop.0>

	configure_gpio();
	/* Initialize the UART Peripheral  */
	err = uart_init();
	if (err) {
		error();
   121a8:	f011 fd9d 	bl	23ce6 <error>
	return api->callback_set(dev, callback, user_data);
   121ac:	494b      	ldr	r1, [pc, #300]	; (122dc <main+0x27c>)
   121ae:	4622      	mov	r2, r4
   121b0:	4630      	mov	r0, r6
   121b2:	4798      	blx	r3
	if (err) {
   121b4:	2800      	cmp	r0, #0
   121b6:	d1ec      	bne.n	12192 <main+0x132>
	tx = k_malloc(sizeof(*tx));
   121b8:	2018      	movs	r0, #24
   121ba:	f014 fd9d 	bl	26cf8 <k_malloc>
	if (tx) {
   121be:	4605      	mov	r5, r0
   121c0:	2800      	cmp	r0, #0
   121c2:	d0f1      	beq.n	121a8 <main+0x148>
		pos = snprintf(tx->data, sizeof(tx->data),
   121c4:	f100 0904 	add.w	r9, r0, #4
   121c8:	4a45      	ldr	r2, [pc, #276]	; (122e0 <main+0x280>)
   121ca:	2110      	movs	r1, #16
   121cc:	4648      	mov	r0, r9
   121ce:	f003 fb59 	bl	15884 <snprintf>
		if ((pos < 0) || (pos >= sizeof(tx->data))) {
   121d2:	280f      	cmp	r0, #15
		pos = snprintf(tx->data, sizeof(tx->data),
   121d4:	4604      	mov	r4, r0
		if ((pos < 0) || (pos >= sizeof(tx->data))) {
   121d6:	d913      	bls.n	12200 <main+0x1a0>
			k_free(tx);
   121d8:	4628      	mov	r0, r5
   121da:	f014 fd86 	bl	26cea <k_free>
			LOG_ERR("snprintf returned %d", pos);
   121de:	466d      	mov	r5, sp
   121e0:	b088      	sub	sp, #32
   121e2:	ab02      	add	r3, sp, #8
   121e4:	4a3f      	ldr	r2, [pc, #252]	; (122e4 <main+0x284>)
   121e6:	4837      	ldr	r0, [pc, #220]	; (122c4 <main+0x264>)
   121e8:	e9c3 2405 	strd	r2, r4, [r3, #20]
   121ec:	461a      	mov	r2, r3
   121ee:	2303      	movs	r3, #3
   121f0:	f842 3f10 	str.w	r3, [r2, #16]!
   121f4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   121f8:	f011 fd60 	bl	23cbc <z_log_msg_static_create.constprop.0>
   121fc:	46ad      	mov	sp, r5
	if (err) {
   121fe:	e7d3      	b.n	121a8 <main+0x148>
		tx->len = pos;
   12200:	82a8      	strh	r0, [r5, #20]
	err = uart_tx(uart, tx->data, tx->len, SYS_FOREVER_MS);
   12202:	4602      	mov	r2, r0
   12204:	4649      	mov	r1, r9
   12206:	4630      	mov	r0, r6
   12208:	f011 fd64 	bl	23cd4 <uart_tx.constprop.0>
	if (err) {
   1220c:	b178      	cbz	r0, 1222e <main+0x1ce>
		LOG_ERR("Cannot display welcome message (err: %d)", err);
   1220e:	466c      	mov	r4, sp
   12210:	b088      	sub	sp, #32
   12212:	aa02      	add	r2, sp, #8
   12214:	4b34      	ldr	r3, [pc, #208]	; (122e8 <main+0x288>)
   12216:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1221a:	2303      	movs	r3, #3
   1221c:	f842 3f10 	str.w	r3, [r2, #16]!
   12220:	4828      	ldr	r0, [pc, #160]	; (122c4 <main+0x264>)
   12222:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12226:	f011 fd49 	bl	23cbc <z_log_msg_static_create.constprop.0>
   1222a:	46a5      	mov	sp, r4
	if (err) {
   1222c:	e7bc      	b.n	121a8 <main+0x148>
	return uart_rx_enable(uart, rx->data, sizeof(rx->data), 50);
   1222e:	f108 0104 	add.w	r1, r8, #4
   12232:	4630      	mov	r0, r6
   12234:	f011 fd45 	bl	23cc2 <uart_rx_enable.constprop.0>
	if (err) {
   12238:	2800      	cmp	r0, #0
   1223a:	d1b5      	bne.n	121a8 <main+0x148>
			LOG_ERR("Failed to register authorization info callbacks.\n");
			return;
		}
	}

	err = bt_enable(NULL);
   1223c:	f005 f920 	bl	17480 <bt_enable>
	if (err) {
   12240:	2800      	cmp	r0, #0
   12242:	d1b1      	bne.n	121a8 <main+0x148>
		error();
	}

	LOG_INF("Bluetooth initialized");
   12244:	4b29      	ldr	r3, [pc, #164]	; (122ec <main+0x28c>)
   12246:	617b      	str	r3, [r7, #20]
   12248:	2302      	movs	r3, #2
   1224a:	481e      	ldr	r0, [pc, #120]	; (122c4 <main+0x264>)
   1224c:	613b      	str	r3, [r7, #16]
   1224e:	f107 0210 	add.w	r2, r7, #16
   12252:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   12256:	f011 fd31 	bl	23cbc <z_log_msg_static_create.constprop.0>

	if (IS_ENABLED(CONFIG_SETTINGS)) {
		settings_load();
	}
/* Pass your application callback function to the NUS service */
	err = bt_nus_init(&nus_cb);
   1225a:	4825      	ldr	r0, [pc, #148]	; (122f0 <main+0x290>)
   1225c:	f002 fab4 	bl	147c8 <bt_nus_init>
	if (err) {
   12260:	b190      	cbz	r0, 12288 <main+0x228>
		LOG_ERR("Failed to initialize UART service (err: %d)", err);
   12262:	466c      	mov	r4, sp
   12264:	b088      	sub	sp, #32
   12266:	aa02      	add	r2, sp, #8
   12268:	4b22      	ldr	r3, [pc, #136]	; (122f4 <main+0x294>)
	}

	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd,
			      ARRAY_SIZE(sd));
	if (err) {
		LOG_ERR("Advertising failed to start (err %d)", err);
   1226a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1226e:	2303      	movs	r3, #3
   12270:	f842 3f10 	str.w	r3, [r2, #16]!
   12274:	4813      	ldr	r0, [pc, #76]	; (122c4 <main+0x264>)
   12276:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1227a:	f011 fd1f 	bl	23cbc <z_log_msg_static_create.constprop.0>
	}

	for (;;) {
		k_sleep(K_MSEC(5000));
	}
   1227e:	371c      	adds	r7, #28
   12280:	46a5      	mov	sp, r4
   12282:	46bd      	mov	sp, r7
   12284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad), sd,
   12288:	4d1b      	ldr	r5, [pc, #108]	; (122f8 <main+0x298>)
   1228a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1228c:	463c      	mov	r4, r7
   1228e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   12290:	682b      	ldr	r3, [r5, #0]
   12292:	6023      	str	r3, [r4, #0]
   12294:	2301      	movs	r3, #1
   12296:	9300      	str	r3, [sp, #0]
   12298:	4918      	ldr	r1, [pc, #96]	; (122fc <main+0x29c>)
   1229a:	4b19      	ldr	r3, [pc, #100]	; (12300 <main+0x2a0>)
   1229c:	2202      	movs	r2, #2
   1229e:	4638      	mov	r0, r7
   122a0:	f005 fde4 	bl	17e6c <bt_le_adv_start>
	if (err) {
   122a4:	b120      	cbz	r0, 122b0 <main+0x250>
		LOG_ERR("Advertising failed to start (err %d)", err);
   122a6:	466c      	mov	r4, sp
   122a8:	b088      	sub	sp, #32
   122aa:	aa02      	add	r2, sp, #8
   122ac:	4b15      	ldr	r3, [pc, #84]	; (12304 <main+0x2a4>)
   122ae:	e7dc      	b.n	1226a <main+0x20a>
	return z_impl_k_sleep(timeout);
   122b0:	2100      	movs	r1, #0
   122b2:	f44f 3020 	mov.w	r0, #163840	; 0x28000
   122b6:	f010 f903 	bl	224c0 <z_impl_k_sleep>
	for (;;) {
   122ba:	e7f9      	b.n	122b0 <main+0x250>
   122bc:	20002bf8 	.word	0x20002bf8
   122c0:	00027ae6 	.word	0x00027ae6
   122c4:	00026fc4 	.word	0x00026fc4
   122c8:	00027af6 	.word	0x00027af6
   122cc:	00026e04 	.word	0x00026e04
   122d0:	00011bad 	.word	0x00011bad
   122d4:	20001650 	.word	0x20001650
   122d8:	00027b11 	.word	0x00027b11
   122dc:	00011da1 	.word	0x00011da1
   122e0:	00027b31 	.word	0x00027b31
   122e4:	00027b3f 	.word	0x00027b3f
   122e8:	00027b54 	.word	0x00027b54
   122ec:	00027b7d 	.word	0x00027b7d
   122f0:	200005e0 	.word	0x200005e0
   122f4:	00027b93 	.word	0x00027b93
   122f8:	000270e0 	.word	0x000270e0
   122fc:	00027180 	.word	0x00027180
   12300:	00027178 	.word	0x00027178
   12304:	00027bbf 	.word	0x00027bbf

00012308 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   12308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1230c:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   1230e:	0784      	lsls	r4, r0, #30
{
   12310:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   12312:	f002 0304 	and.w	r3, r2, #4
   12316:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   12318:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   1231c:	f103 0301 	add.w	r3, r3, #1
   12320:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
{
   12324:	9203      	str	r2, [sp, #12]
   12326:	4605      	mov	r5, r0
   12328:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   1232a:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
   1232c:	f040 81fb 	bne.w	12726 <cbvprintf_package+0x41e>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   12330:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   12332:	b130      	cbz	r0, 12342 <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   12334:	2907      	cmp	r1, #7
   12336:	d809      	bhi.n	1234c <cbvprintf_package+0x44>
		return -ENOSPC;
   12338:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   1233c:	b011      	add	sp, #68	; 0x44
   1233e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   12342:	f001 0607 	and.w	r6, r1, #7
   12346:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   12348:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
   1234c:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   1234e:	f04f 0800 	mov.w	r8, #0
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   12352:	f04f 32ff 	mov.w	r2, #4294967295
	align = VA_STACK_ALIGN(char *);
   12356:	f04f 0b04 	mov.w	fp, #4
	s = fmt--;
   1235a:	1e59      	subs	r1, r3, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   1235c:	f8cd 8010 	str.w	r8, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   12360:	4647      	mov	r7, r8
	bool parsing = false;
   12362:	4643      	mov	r3, r8
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   12364:	9201      	str	r2, [sp, #4]
	size = sizeof(char *);
   12366:	46da      	mov	sl, fp
			if (buf0 != NULL) {
   12368:	b10d      	cbz	r5, 1236e <cbvprintf_package+0x66>
				*(const char **)buf = s;
   1236a:	9800      	ldr	r0, [sp, #0]
   1236c:	6020      	str	r0, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   1236e:	9805      	ldr	r0, [sp, #20]
   12370:	2800      	cmp	r0, #0
   12372:	f300 80da 	bgt.w	1252a <cbvprintf_package+0x222>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   12376:	489b      	ldr	r0, [pc, #620]	; (125e4 <cbvprintf_package+0x2dc>)
   12378:	9a00      	ldr	r2, [sp, #0]
   1237a:	4282      	cmp	r2, r0
   1237c:	d303      	bcc.n	12386 <cbvprintf_package+0x7e>
   1237e:	489a      	ldr	r0, [pc, #616]	; (125e8 <cbvprintf_package+0x2e0>)
   12380:	4282      	cmp	r2, r0
   12382:	f0c0 80d2 	bcc.w	1252a <cbvprintf_package+0x222>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   12386:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   12388:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   1238c:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   1238e:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   12392:	f140 80e5 	bpl.w	12560 <cbvprintf_package+0x258>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   12396:	f04f 0c00 	mov.w	ip, #0
   1239a:	e0cf      	b.n	1253c <cbvprintf_package+0x234>
			switch (*fmt) {
   1239c:	287a      	cmp	r0, #122	; 0x7a
   1239e:	d85f      	bhi.n	12460 <cbvprintf_package+0x158>
   123a0:	284b      	cmp	r0, #75	; 0x4b
   123a2:	d80c      	bhi.n	123be <cbvprintf_package+0xb6>
   123a4:	2847      	cmp	r0, #71	; 0x47
   123a6:	d85b      	bhi.n	12460 <cbvprintf_package+0x158>
   123a8:	2829      	cmp	r0, #41	; 0x29
   123aa:	d82c      	bhi.n	12406 <cbvprintf_package+0xfe>
   123ac:	2825      	cmp	r0, #37	; 0x25
   123ae:	d054      	beq.n	1245a <cbvprintf_package+0x152>
   123b0:	d856      	bhi.n	12460 <cbvprintf_package+0x158>
   123b2:	2820      	cmp	r0, #32
   123b4:	d07a      	beq.n	124ac <cbvprintf_package+0x1a4>
   123b6:	3823      	subs	r0, #35	; 0x23
   123b8:	4243      	negs	r3, r0
   123ba:	4143      	adcs	r3, r0
   123bc:	e076      	b.n	124ac <cbvprintf_package+0x1a4>
   123be:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
   123c2:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
   123c6:	d84b      	bhi.n	12460 <cbvprintf_package+0x158>
   123c8:	e8df f00c 	tbb	[pc, ip]
   123cc:	4a4a4a70 	.word	0x4a4a4a70
   123d0:	4a4a4a4a 	.word	0x4a4a4a4a
   123d4:	4a4a4a4a 	.word	0x4a4a4a4a
   123d8:	4a4a4a4c 	.word	0x4a4a4a4c
   123dc:	4a4a4a4a 	.word	0x4a4a4a4a
   123e0:	4c4a5a4a 	.word	0x4c4a5a4a
   123e4:	5a5a5a4c 	.word	0x5a5a5a4c
   123e8:	4a6d4c70 	.word	0x4a6d4c70
   123ec:	4c184a70 	.word	0x4c184a70
   123f0:	814a4a18 	.word	0x814a4a18
   123f4:	4a4a4c7e 	.word	0x4a4a4c7e
   123f8:	4a4c      	.short	0x4a4c
   123fa:	7e          	.byte	0x7e
   123fb:	00          	.byte	0x00
   123fc:	2000      	movs	r0, #0
   123fe:	2300      	movs	r3, #0
				align = VA_STACK_ALIGN(void *);
   12400:	f04f 0b04 	mov.w	fp, #4
   12404:	e03a      	b.n	1247c <cbvprintf_package+0x174>
			switch (*fmt) {
   12406:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
   1240a:	fa5f fc8c 	uxtb.w	ip, ip
   1240e:	2201      	movs	r2, #1
   12410:	fa02 fc0c 	lsl.w	ip, r2, ip
   12414:	ea1c 0f0e 	tst.w	ip, lr
   12418:	d148      	bne.n	124ac <cbvprintf_package+0x1a4>
   1241a:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
   1241e:	d12f      	bne.n	12480 <cbvprintf_package+0x178>
   12420:	ea1c 0302 	ands.w	r3, ip, r2
   12424:	d042      	beq.n	124ac <cbvprintf_package+0x1a4>
		buf = (void *) ROUND_UP(buf, align);
   12426:	3c01      	subs	r4, #1
   12428:	445c      	add	r4, fp
   1242a:	f1cb 0c00 	rsb	ip, fp, #0
   1242e:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   12432:	2d00      	cmp	r5, #0
   12434:	d060      	beq.n	124f8 <cbvprintf_package+0x1f0>
   12436:	ebaa 0c05 	sub.w	ip, sl, r5
   1243a:	44a4      	add	ip, r4
   1243c:	45b4      	cmp	ip, r6
   1243e:	f63f af7b 	bhi.w	12338 <cbvprintf_package+0x30>
		if (is_str_arg) {
   12442:	2800      	cmp	r0, #0
   12444:	d16a      	bne.n	1251c <cbvprintf_package+0x214>
		} else if (size == sizeof(int)) {
   12446:	f1ba 0f04 	cmp.w	sl, #4
   1244a:	d145      	bne.n	124d8 <cbvprintf_package+0x1d0>
			int v = va_arg(ap, int);
   1244c:	f859 0b04 	ldr.w	r0, [r9], #4
				*(int *)buf = v;
   12450:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
   12452:	3404      	adds	r4, #4
   12454:	f04f 0a04 	mov.w	sl, #4
   12458:	e028      	b.n	124ac <cbvprintf_package+0x1a4>
				arg_idx--;
   1245a:	9b01      	ldr	r3, [sp, #4]
   1245c:	3b01      	subs	r3, #1
   1245e:	9301      	str	r3, [sp, #4]
				parsing = false;
   12460:	2300      	movs	r3, #0
				continue;
   12462:	e023      	b.n	124ac <cbvprintf_package+0x1a4>
				if (fmt[-1] == 'l') {
   12464:	f811 3c01 	ldrb.w	r3, [r1, #-1]
   12468:	2b6c      	cmp	r3, #108	; 0x6c
   1246a:	d132      	bne.n	124d2 <cbvprintf_package+0x1ca>
					if (fmt[-2] == 'l') {
   1246c:	f811 3c02 	ldrb.w	r3, [r1, #-2]
   12470:	2000      	movs	r0, #0
   12472:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
   12474:	4603      	mov	r3, r0
					if (fmt[-2] == 'l') {
   12476:	d1c3      	bne.n	12400 <cbvprintf_package+0xf8>
						align = VA_STACK_ALIGN(long long);
   12478:	f04f 0b08 	mov.w	fp, #8
				size = sizeof(void *);
   1247c:	46da      	mov	sl, fp
   1247e:	e7d2      	b.n	12426 <cbvprintf_package+0x11e>
					v.ld = va_arg(ap, long double);
   12480:	f109 0907 	add.w	r9, r9, #7
   12484:	f029 0907 	bic.w	r9, r9, #7
				buf = (void *) ROUND_UP(buf, align);
   12488:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
   1248a:	e8f9 ab02 	ldrd	sl, fp, [r9], #8
				buf = (void *) ROUND_UP(buf, align);
   1248e:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
   12492:	b135      	cbz	r5, 124a2 <cbvprintf_package+0x19a>
					if (BUF_OFFSET + size > len) {
   12494:	9806      	ldr	r0, [sp, #24]
   12496:	4420      	add	r0, r4
   12498:	42b0      	cmp	r0, r6
   1249a:	f63f af4d 	bhi.w	12338 <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
   1249e:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
   124a2:	3408      	adds	r4, #8
				parsing = false;
   124a4:	2300      	movs	r3, #0
			switch (*fmt) {
   124a6:	f04f 0b08 	mov.w	fp, #8
   124aa:	46da      	mov	sl, fp
			if (*++fmt == '\0') {
   124ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   124b0:	2800      	cmp	r0, #0
   124b2:	f000 80c0 	beq.w	12636 <cbvprintf_package+0x32e>
			if (!parsing) {
   124b6:	2b00      	cmp	r3, #0
   124b8:	f47f af70 	bne.w	1239c <cbvprintf_package+0x94>
				if (*fmt == '%') {
   124bc:	2825      	cmp	r0, #37	; 0x25
   124be:	d1f5      	bne.n	124ac <cbvprintf_package+0x1a4>
					arg_idx++;
   124c0:	9b01      	ldr	r3, [sp, #4]
   124c2:	3301      	adds	r3, #1
   124c4:	9301      	str	r3, [sp, #4]
					parsing = true;
   124c6:	2301      	movs	r3, #1
				align = VA_STACK_ALIGN(size_t);
   124c8:	f04f 0b04 	mov.w	fp, #4
   124cc:	e7ed      	b.n	124aa <cbvprintf_package+0x1a2>
			switch (*fmt) {
   124ce:	4618      	mov	r0, r3
   124d0:	e795      	b.n	123fe <cbvprintf_package+0xf6>
   124d2:	2000      	movs	r0, #0
				parsing = false;
   124d4:	4603      	mov	r3, r0
   124d6:	e7a6      	b.n	12426 <cbvprintf_package+0x11e>
		} else if (size == sizeof(long long)) {
   124d8:	f1ba 0f08 	cmp.w	sl, #8
   124dc:	f040 809d 	bne.w	1261a <cbvprintf_package+0x312>
			long long v = va_arg(ap, long long);
   124e0:	f109 0907 	add.w	r9, r9, #7
   124e4:	f029 0907 	bic.w	r9, r9, #7
   124e8:	ecb9 7b02 	vldmia	r9!, {d7}
					*(long long *)buf = v;
   124ec:	ed84 7b00 	vstr	d7, [r4]
			buf += sizeof(long long);
   124f0:	3408      	adds	r4, #8
   124f2:	f04f 0a08 	mov.w	sl, #8
   124f6:	e7d9      	b.n	124ac <cbvprintf_package+0x1a4>
		if (is_str_arg) {
   124f8:	b980      	cbnz	r0, 1251c <cbvprintf_package+0x214>
		} else if (size == sizeof(int)) {
   124fa:	f1ba 0f04 	cmp.w	sl, #4
   124fe:	d102      	bne.n	12506 <cbvprintf_package+0x1fe>
			int v = va_arg(ap, int);
   12500:	f109 0904 	add.w	r9, r9, #4
			if (buf0 != NULL) {
   12504:	e7a5      	b.n	12452 <cbvprintf_package+0x14a>
		} else if (size == sizeof(long long)) {
   12506:	f1ba 0f08 	cmp.w	sl, #8
   1250a:	f040 8086 	bne.w	1261a <cbvprintf_package+0x312>
			long long v = va_arg(ap, long long);
   1250e:	f109 0907 	add.w	r9, r9, #7
   12512:	f029 0907 	bic.w	r9, r9, #7
   12516:	f109 0908 	add.w	r9, r9, #8
			if (buf0 != NULL) {
   1251a:	e7e9      	b.n	124f0 <cbvprintf_package+0x1e8>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   1251c:	9805      	ldr	r0, [sp, #20]
   1251e:	3801      	subs	r0, #1
   12520:	9005      	str	r0, [sp, #20]
			s = va_arg(ap, char *);
   12522:	f859 0b04 	ldr.w	r0, [r9], #4
   12526:	9000      	str	r0, [sp, #0]
   12528:	e71e      	b.n	12368 <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
   1252a:	9a03      	ldr	r2, [sp, #12]
   1252c:	0790      	lsls	r0, r2, #30
   1252e:	d54c      	bpl.n	125ca <cbvprintf_package+0x2c2>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   12530:	eba4 0e05 	sub.w	lr, r4, r5
   12534:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   12538:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   1253c:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   12540:	d31f      	bcc.n	12582 <cbvprintf_package+0x27a>
					__ASSERT(false, "String with too many arguments");
   12542:	492a      	ldr	r1, [pc, #168]	; (125ec <cbvprintf_package+0x2e4>)
   12544:	4a2a      	ldr	r2, [pc, #168]	; (125f0 <cbvprintf_package+0x2e8>)
   12546:	482b      	ldr	r0, [pc, #172]	; (125f4 <cbvprintf_package+0x2ec>)
   12548:	f240 237b 	movw	r3, #635	; 0x27b
   1254c:	f011 fe7a 	bl	24244 <assert_print>
   12550:	4829      	ldr	r0, [pc, #164]	; (125f8 <cbvprintf_package+0x2f0>)
   12552:	f011 fe77 	bl	24244 <assert_print>
   12556:	f240 217b 	movw	r1, #635	; 0x27b
					__ASSERT(false, "str_ptr_pos[] too small");
   1255a:	4825      	ldr	r0, [pc, #148]	; (125f0 <cbvprintf_package+0x2e8>)
   1255c:	f011 fe6b 	bl	24236 <assert_post_action>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   12560:	2f0f      	cmp	r7, #15
   12562:	d810      	bhi.n	12586 <cbvprintf_package+0x27e>
				if (buf0 != NULL) {
   12564:	2d00      	cmp	r5, #0
   12566:	d04b      	beq.n	12600 <cbvprintf_package+0x2f8>
					str_ptr_pos[s_idx] = s_ptr_idx;
   12568:	f107 0240 	add.w	r2, r7, #64	; 0x40
   1256c:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
   12570:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   12572:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   12576:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
   1257a:	9804      	ldr	r0, [sp, #16]
   1257c:	3001      	adds	r0, #1
   1257e:	9004      	str	r0, [sp, #16]
   12580:	e022      	b.n	125c8 <cbvprintf_package+0x2c0>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   12582:	2f0f      	cmp	r7, #15
   12584:	d90c      	bls.n	125a0 <cbvprintf_package+0x298>
					__ASSERT(false, "str_ptr_pos[] too small");
   12586:	4919      	ldr	r1, [pc, #100]	; (125ec <cbvprintf_package+0x2e4>)
   12588:	4a19      	ldr	r2, [pc, #100]	; (125f0 <cbvprintf_package+0x2e8>)
   1258a:	481a      	ldr	r0, [pc, #104]	; (125f4 <cbvprintf_package+0x2ec>)
   1258c:	f44f 7320 	mov.w	r3, #640	; 0x280
   12590:	f011 fe58 	bl	24244 <assert_print>
   12594:	4819      	ldr	r0, [pc, #100]	; (125fc <cbvprintf_package+0x2f4>)
   12596:	f011 fe55 	bl	24244 <assert_print>
   1259a:	f44f 7120 	mov.w	r1, #640	; 0x280
   1259e:	e7dc      	b.n	1255a <cbvprintf_package+0x252>
				if (buf0 != NULL) {
   125a0:	b1d5      	cbz	r5, 125d8 <cbvprintf_package+0x2d0>
					str_ptr_pos[s_idx] = s_ptr_idx;
   125a2:	f107 0240 	add.w	r2, r7, #64	; 0x40
   125a6:	eb0d 0e02 	add.w	lr, sp, r2
   125aa:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
   125ac:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   125ae:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   125b2:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
   125b6:	f1bc 0f00 	cmp.w	ip, #0
   125ba:	d0de      	beq.n	1257a <cbvprintf_package+0x272>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   125bc:	f060 007f 	orn	r0, r0, #127	; 0x7f
   125c0:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
   125c4:	f108 0801 	add.w	r8, r8, #1
				s_idx++;
   125c8:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
   125ca:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
   125ce:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
   125d0:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
   125d2:	f64f 7eda 	movw	lr, #65498	; 0xffda
   125d6:	e769      	b.n	124ac <cbvprintf_package+0x1a4>
				} else if (is_ro) {
   125d8:	f1bc 0f00 	cmp.w	ip, #0
   125dc:	d010      	beq.n	12600 <cbvprintf_package+0x2f8>
					len += 1;
   125de:	3601      	adds	r6, #1
   125e0:	e7f2      	b.n	125c8 <cbvprintf_package+0x2c0>
   125e2:	bf00      	nop
   125e4:	00026d0c 	.word	0x00026d0c
   125e8:	0002baf8 	.word	0x0002baf8
   125ec:	0002a7c0 	.word	0x0002a7c0
   125f0:	00027bfc 	.word	0x00027bfc
   125f4:	00027c2a 	.word	0x00027c2a
   125f8:	00027c47 	.word	0x00027c47
   125fc:	00027c68 	.word	0x00027c68
				} else if (rws_pos_en) {
   12600:	9a02      	ldr	r2, [sp, #8]
					len += 2;
   12602:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
   12604:	2a00      	cmp	r2, #0
   12606:	d1df      	bne.n	125c8 <cbvprintf_package+0x2c0>
					len += strlen(s) + 1 + 1;
   12608:	9800      	ldr	r0, [sp, #0]
   1260a:	e9cd 3106 	strd	r3, r1, [sp, #24]
   1260e:	f012 fa06 	bl	24a1e <strlen>
   12612:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
   12616:	4406      	add	r6, r0
   12618:	e7d6      	b.n	125c8 <cbvprintf_package+0x2c0>
			__ASSERT(false, "unexpected size %u", size);
   1261a:	4a44      	ldr	r2, [pc, #272]	; (1272c <cbvprintf_package+0x424>)
   1261c:	4944      	ldr	r1, [pc, #272]	; (12730 <cbvprintf_package+0x428>)
   1261e:	4845      	ldr	r0, [pc, #276]	; (12734 <cbvprintf_package+0x42c>)
   12620:	f240 23c5 	movw	r3, #709	; 0x2c5
   12624:	f011 fe0e 	bl	24244 <assert_print>
   12628:	4651      	mov	r1, sl
   1262a:	4843      	ldr	r0, [pc, #268]	; (12738 <cbvprintf_package+0x430>)
   1262c:	f011 fe0a 	bl	24244 <assert_print>
   12630:	f240 21c5 	movw	r1, #709	; 0x2c5
   12634:	e791      	b.n	1255a <cbvprintf_package+0x252>
	if (BUF_OFFSET / sizeof(int) > 255) {
   12636:	1b63      	subs	r3, r4, r5
   12638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1263c:	d30c      	bcc.n	12658 <cbvprintf_package+0x350>
		__ASSERT(false, "too many format args");
   1263e:	493c      	ldr	r1, [pc, #240]	; (12730 <cbvprintf_package+0x428>)
   12640:	4a3a      	ldr	r2, [pc, #232]	; (1272c <cbvprintf_package+0x424>)
   12642:	483c      	ldr	r0, [pc, #240]	; (12734 <cbvprintf_package+0x42c>)
   12644:	f240 23d1 	movw	r3, #721	; 0x2d1
   12648:	f011 fdfc 	bl	24244 <assert_print>
   1264c:	483b      	ldr	r0, [pc, #236]	; (1273c <cbvprintf_package+0x434>)
   1264e:	f011 fdf9 	bl	24244 <assert_print>
   12652:	f240 21d1 	movw	r1, #721	; 0x2d1
   12656:	e780      	b.n	1255a <cbvprintf_package+0x252>
	if (buf0 == NULL) {
   12658:	b91d      	cbnz	r5, 12662 <cbvprintf_package+0x35a>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   1265a:	f1a6 0408 	sub.w	r4, r6, #8
   1265e:	18e0      	adds	r0, r4, r3
   12660:	e66c      	b.n	1233c <cbvprintf_package+0x34>
	if (rws_pos_en) {
   12662:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
   12664:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   12666:	089b      	lsrs	r3, r3, #2
   12668:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   1266a:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
   1266e:	b1c2      	cbz	r2, 126a2 <cbvprintf_package+0x39a>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   12670:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   12672:	f885 8002 	strb.w	r8, [r5, #2]
	if (s_ro_cnt) {
   12676:	f1b8 0f00 	cmp.w	r8, #0
   1267a:	d005      	beq.n	12688 <cbvprintf_package+0x380>
   1267c:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
   1267e:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
   12680:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
   12684:	4297      	cmp	r7, r2
   12686:	d10e      	bne.n	126a6 <cbvprintf_package+0x39e>
		if (BUF_OFFSET + 1 + size > len) {
   12688:	f1c5 0301 	rsb	r3, r5, #1
   1268c:	f10d 0920 	add.w	r9, sp, #32
			*buf++ = str_ptr_arg[i];
   12690:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
   12694:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
   12696:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
   1269a:	4557      	cmp	r7, sl
   1269c:	d112      	bne.n	126c4 <cbvprintf_package+0x3bc>
	return BUF_OFFSET;
   1269e:	1b60      	subs	r0, r4, r5
   126a0:	e64c      	b.n	1233c <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   126a2:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   126a4:	e7e5      	b.n	12672 <cbvprintf_package+0x36a>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   126a6:	f810 3b01 	ldrb.w	r3, [r0], #1
   126aa:	0619      	lsls	r1, r3, #24
   126ac:	d508      	bpl.n	126c0 <cbvprintf_package+0x3b8>
			if (BUF_OFFSET + 1 > len) {
   126ae:	eb04 0e0c 	add.w	lr, r4, ip
   126b2:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   126b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   126b8:	f63f ae3e 	bhi.w	12338 <cbvprintf_package+0x30>
			*buf++ = pos;
   126bc:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
   126c0:	3201      	adds	r2, #1
   126c2:	e7df      	b.n	12684 <cbvprintf_package+0x37c>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   126c4:	f1b8 0f00 	cmp.w	r8, #0
   126c8:	d003      	beq.n	126d2 <cbvprintf_package+0x3ca>
   126ca:	f999 2000 	ldrsb.w	r2, [r9]
   126ce:	2a00      	cmp	r2, #0
   126d0:	db17      	blt.n	12702 <cbvprintf_package+0x3fa>
		if (rws_pos_en) {
   126d2:	9b02      	ldr	r3, [sp, #8]
   126d4:	b1d3      	cbz	r3, 1270c <cbvprintf_package+0x404>
			*buf++ = str_ptr_arg[i];
   126d6:	f81a 200b 	ldrb.w	r2, [sl, fp]
   126da:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
   126de:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
   126e0:	9b01      	ldr	r3, [sp, #4]
   126e2:	1898      	adds	r0, r3, r2
   126e4:	4420      	add	r0, r4
   126e6:	42b0      	cmp	r0, r6
   126e8:	f63f ae26 	bhi.w	12338 <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
   126ec:	f899 0000 	ldrb.w	r0, [r9]
   126f0:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
   126f4:	9900      	ldr	r1, [sp, #0]
   126f6:	9203      	str	r2, [sp, #12]
   126f8:	4620      	mov	r0, r4
   126fa:	f012 f9a7 	bl	24a4c <memcpy>
		buf += size;
   126fe:	9a03      	ldr	r2, [sp, #12]
   12700:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
   12702:	f10a 0a01 	add.w	sl, sl, #1
   12706:	f109 0901 	add.w	r9, r9, #1
   1270a:	e7c6      	b.n	1269a <cbvprintf_package+0x392>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   1270c:	f899 2000 	ldrb.w	r2, [r9]
   12710:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   12714:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   12716:	9b02      	ldr	r3, [sp, #8]
   12718:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
   1271c:	9800      	ldr	r0, [sp, #0]
   1271e:	f012 f97e 	bl	24a1e <strlen>
   12722:	1c42      	adds	r2, r0, #1
   12724:	e7dc      	b.n	126e0 <cbvprintf_package+0x3d8>
		return -EFAULT;
   12726:	f06f 000d 	mvn.w	r0, #13
   1272a:	e607      	b.n	1233c <cbvprintf_package+0x34>
   1272c:	00027bfc 	.word	0x00027bfc
   12730:	0002a7c0 	.word	0x0002a7c0
   12734:	00027c2a 	.word	0x00027c2a
   12738:	00027c82 	.word	0x00027c82
   1273c:	00027c97 	.word	0x00027c97

00012740 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
   12740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12744:	b095      	sub	sp, #84	; 0x54
   12746:	af00      	add	r7, sp, #0
   12748:	e9c7 1208 	strd	r1, r2, [r7, #32]
   1274c:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
   12750:	61bb      	str	r3, [r7, #24]
	__ASSERT_NO_MSG(in_packaged != NULL);
   12752:	4604      	mov	r4, r0
   12754:	b958      	cbnz	r0, 1276e <cbprintf_package_convert+0x2e>
   12756:	49a8      	ldr	r1, [pc, #672]	; (129f8 <cbprintf_package_convert+0x2b8>)
   12758:	4aa8      	ldr	r2, [pc, #672]	; (129fc <cbprintf_package_convert+0x2bc>)
   1275a:	48a9      	ldr	r0, [pc, #676]	; (12a00 <cbprintf_package_convert+0x2c0>)
   1275c:	f44f 7365 	mov.w	r3, #916	; 0x394
   12760:	f011 fd70 	bl	24244 <assert_print>
   12764:	f44f 7165 	mov.w	r1, #916	; 0x394
			continue;
		}

		if (is_ro) {
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
   12768:	48a4      	ldr	r0, [pc, #656]	; (129fc <cbprintf_package_convert+0x2bc>)
   1276a:	f011 fd64 	bl	24236 <assert_post_action>
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
   1276e:	f3cb 03c0 	ubfx	r3, fp, #3, #1
   12772:	613b      	str	r3, [r7, #16]
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
   12774:	6a3b      	ldr	r3, [r7, #32]
   12776:	b953      	cbnz	r3, 1278e <cbprintf_package_convert+0x4e>
	buf += ros_nbr;
   12778:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
   1277a:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
   1277c:	7880      	ldrb	r0, [r0, #2]
   1277e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   12782:	4420      	add	r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
   12784:	6a3b      	ldr	r3, [r7, #32]
   12786:	429e      	cmp	r6, r3
   12788:	d81a      	bhi.n	127c0 <cbprintf_package_convert+0x80>
	return (size_t)(uintptr_t)(buf - start);
   1278a:	1b03      	subs	r3, r0, r4
   1278c:	623b      	str	r3, [r7, #32]
	ros_nbr = in_desc->ro_str_cnt;
   1278e:	f894 a002 	ldrb.w	sl, [r4, #2]
	rws_nbr = in_desc->rw_str_cnt;
   12792:	78e3      	ldrb	r3, [r4, #3]
   12794:	617b      	str	r3, [r7, #20]
	ros_nbr = in_desc->ro_str_cnt;
   12796:	4656      	mov	r6, sl
	ro_cpy = ros_nbr &&
   12798:	f1ba 0f00 	cmp.w	sl, #0
   1279c:	d002      	beq.n	127a4 <cbprintf_package_convert+0x64>
   1279e:	f01b 0f01 	tst.w	fp, #1
   127a2:	d117      	bne.n	127d4 <cbprintf_package_convert+0x94>
	rw_cpy = rws_nbr > 0 &&
   127a4:	697b      	ldr	r3, [r7, #20]
   127a6:	bb5b      	cbnz	r3, 12800 <cbprintf_package_convert+0xc0>
		if (cb) {
   127a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   127aa:	b11b      	cbz	r3, 127b4 <cbprintf_package_convert+0x74>
			cb(in_packaged, in_len, ctx);
   127ac:	69ba      	ldr	r2, [r7, #24]
   127ae:	6a39      	ldr	r1, [r7, #32]
   127b0:	4620      	mov	r0, r4
   127b2:	4798      	blx	r3
		return in_len;
   127b4:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
   127b6:	4628      	mov	r0, r5
   127b8:	3754      	adds	r7, #84	; 0x54
   127ba:	46bd      	mov	sp, r7
   127bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
   127c0:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
   127c2:	4628      	mov	r0, r5
   127c4:	f012 f92b 	bl	24a1e <strlen>
	for (unsigned int i = 0; i < s_nbr; i++) {
   127c8:	6a3b      	ldr	r3, [r7, #32]
		buf += strlen((const char *)buf) + 1;
   127ca:	3001      	adds	r0, #1
	for (unsigned int i = 0; i < s_nbr; i++) {
   127cc:	3301      	adds	r3, #1
		buf += strlen((const char *)buf) + 1;
   127ce:	4428      	add	r0, r5
	for (unsigned int i = 0; i < s_nbr; i++) {
   127d0:	623b      	str	r3, [r7, #32]
   127d2:	e7d7      	b.n	12784 <cbprintf_package_convert+0x44>
	rw_cpy = rws_nbr > 0 &&
   127d4:	f894 8000 	ldrb.w	r8, [r4]
   127d8:	6863      	ldr	r3, [r4, #4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   127da:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   127dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
   127de:	ea4f 0288 	mov.w	r2, r8, lsl #2
   127e2:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
   127e4:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
   127e8:	2b00      	cmp	r3, #0
   127ea:	f040 8115 	bne.w	12a18 <cbprintf_package_convert+0x2d8>
		out_len = (int)in_len;
   127ee:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
   127f0:	46c1      	mov	r9, r8
   127f2:	eb0a 0308 	add.w	r3, sl, r8
	size_t strl_cnt = 0;
   127f6:	2600      	movs	r6, #0
			for (unsigned int i = 0; i < ros_nbr; i++) {
   127f8:	4599      	cmp	r9, r3
   127fa:	d14e      	bne.n	1289a <cbprintf_package_convert+0x15a>
   127fc:	44d0      	add	r8, sl
   127fe:	e013      	b.n	12828 <cbprintf_package_convert+0xe8>
	rw_cpy = rws_nbr > 0 &&
   12800:	f01b 0f02 	tst.w	fp, #2
   12804:	d0d0      	beq.n	127a8 <cbprintf_package_convert+0x68>
	args_size = in_desc->len * sizeof(int);
   12806:	f894 8000 	ldrb.w	r8, [r4]
   1280a:	ea4f 0388 	mov.w	r3, r8, lsl #2
   1280e:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
   12810:	6863      	ldr	r3, [r4, #4]
   12812:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
   12814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
   12816:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
   1281a:	2b00      	cmp	r3, #0
   1281c:	d178      	bne.n	12910 <cbprintf_package_convert+0x1d0>
		out_len = (int)in_len;
   1281e:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   12820:	f1ba 0f00 	cmp.w	sl, #0
   12824:	d14e      	bne.n	128c4 <cbprintf_package_convert+0x184>
	size_t strl_cnt = 0;
   12826:	4656      	mov	r6, sl
		for (unsigned int i = 0; i < rws_nbr; i++) {
   12828:	f01b 0f05 	tst.w	fp, #5
   1282c:	bf0c      	ite	eq
   1282e:	2302      	moveq	r3, #2
   12830:	2301      	movne	r3, #1
   12832:	627b      	str	r3, [r7, #36]	; 0x24
   12834:	697b      	ldr	r3, [r7, #20]
   12836:	eb08 0a43 	add.w	sl, r8, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   1283a:	f00b 0302 	and.w	r3, fp, #2
   1283e:	623b      	str	r3, [r7, #32]
		for (unsigned int i = 0; i < rws_nbr; i++) {
   12840:	45d0      	cmp	r8, sl
   12842:	d0b8      	beq.n	127b6 <cbprintf_package_convert+0x76>
			uint8_t arg_idx = *str_pos++;
   12844:	f818 1b02 	ldrb.w	r1, [r8], #2
			const char *str = *(const char **)&buf32[arg_pos];
   12848:	f818 3c01 	ldrb.w	r3, [r8, #-1]
   1284c:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
   12850:	4b6c      	ldr	r3, [pc, #432]	; (12a04 <cbprintf_package_convert+0x2c4>)
   12852:	4599      	cmp	r9, r3
   12854:	d302      	bcc.n	1285c <cbprintf_package_convert+0x11c>
   12856:	4b6c      	ldr	r3, [pc, #432]	; (12a08 <cbprintf_package_convert+0x2c8>)
   12858:	4599      	cmp	r9, r3
   1285a:	d339      	bcc.n	128d0 <cbprintf_package_convert+0x190>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   1285c:	693b      	ldr	r3, [r7, #16]
   1285e:	2b00      	cmp	r3, #0
   12860:	d043      	beq.n	128ea <cbprintf_package_convert+0x1aa>
   12862:	69f8      	ldr	r0, [r7, #28]
   12864:	f011 fa7b 	bl	23d5e <is_ptr>
   12868:	2800      	cmp	r0, #0
   1286a:	d03e      	beq.n	128ea <cbprintf_package_convert+0x1aa>
				LOG_WRN("(unsigned) char * used for %%p argument. "
   1286c:	46e9      	mov	r9, sp
   1286e:	b08a      	sub	sp, #40	; 0x28
   12870:	466a      	mov	r2, sp
   12872:	4b66      	ldr	r3, [pc, #408]	; (12a0c <cbprintf_package_convert+0x2cc>)
   12874:	6153      	str	r3, [r2, #20]
   12876:	69fb      	ldr	r3, [r7, #28]
   12878:	e9c2 3106 	strd	r3, r1, [r2, #24]
   1287c:	f44f 7300 	mov.w	r3, #512	; 0x200
   12880:	8413      	strh	r3, [r2, #32]
   12882:	4b63      	ldr	r3, [pc, #396]	; (12a10 <cbprintf_package_convert+0x2d0>)
   12884:	f842 3f10 	str.w	r3, [r2, #16]!
   12888:	4862      	ldr	r0, [pc, #392]	; (12a14 <cbprintf_package_convert+0x2d4>)
   1288a:	2300      	movs	r3, #0
   1288c:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   12890:	f001 fb7c 	bl	13f8c <z_impl_z_log_msg_static_create>
				out_len -= 2;
   12894:	3d02      	subs	r5, #2
   12896:	46cd      	mov	sp, r9
				continue;
   12898:	e7d2      	b.n	12840 <cbprintf_package_convert+0x100>
				const char *str = *(const char **)&buf32[*str_pos];
   1289a:	f819 2b01 	ldrb.w	r2, [r9], #1
   1289e:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
   128a0:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
   128a4:	f012 f8bb 	bl	24a1e <strlen>
				if (strl && strl_cnt < strl_len) {
   128a8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   128aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
   128ac:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
   128ae:	b13a      	cbz	r2, 128c0 <cbprintf_package_convert+0x180>
   128b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   128b4:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
   128b6:	bf3e      	ittt	cc
   128b8:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
   128ba:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
   128be:	3601      	addcc	r6, #1
				out_len += len;
   128c0:	4405      	add	r5, r0
			for (unsigned int i = 0; i < ros_nbr; i++) {
   128c2:	e799      	b.n	127f8 <cbprintf_package_convert+0xb8>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   128c4:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
   128c8:	bf1c      	itt	ne
   128ca:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
   128cc:	44d0      	addne	r8, sl
   128ce:	e7ab      	b.n	12828 <cbprintf_package_convert+0xe8>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
   128d0:	693b      	ldr	r3, [r7, #16]
   128d2:	b123      	cbz	r3, 128de <cbprintf_package_convert+0x19e>
   128d4:	69f8      	ldr	r0, [r7, #28]
   128d6:	f011 fa42 	bl	23d5e <is_ptr>
   128da:	2800      	cmp	r0, #0
   128dc:	d1c6      	bne.n	1286c <cbprintf_package_convert+0x12c>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   128de:	f01b 0f01 	tst.w	fp, #1
   128e2:	d105      	bne.n	128f0 <cbprintf_package_convert+0x1b0>
					out_len -= drop_ro_str_pos ? 2 : 1;
   128e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   128e6:	1aed      	subs	r5, r5, r3
   128e8:	e7aa      	b.n	12840 <cbprintf_package_convert+0x100>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   128ea:	6a3b      	ldr	r3, [r7, #32]
   128ec:	2b00      	cmp	r3, #0
   128ee:	d0a7      	beq.n	12840 <cbprintf_package_convert+0x100>
		return 1 + strlen(str);
   128f0:	4648      	mov	r0, r9
   128f2:	f012 f894 	bl	24a1e <strlen>
				if (strl && strl_cnt < strl_len) {
   128f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   128f8:	b143      	cbz	r3, 1290c <cbprintf_package_convert+0x1cc>
   128fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   128fe:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
   12900:	bf3f      	itttt	cc
   12902:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
   12904:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
   12906:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
   1290a:	3601      	addcc	r6, #1
				out_len += (len - 1);
   1290c:	4405      	add	r5, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
   1290e:	e797      	b.n	12840 <cbprintf_package_convert+0x100>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   12910:	f1ba 0f00 	cmp.w	sl, #0
   12914:	f000 8085 	beq.w	12a22 <cbprintf_package_convert+0x2e2>
   12918:	f01b 0604 	ands.w	r6, fp, #4
   1291c:	f000 8084 	beq.w	12a28 <cbprintf_package_convert+0x2e8>
		keep_cnt = ros_nbr;
   12920:	46d1      	mov	r9, sl
		scpy_cnt = 0;
   12922:	2600      	movs	r6, #0
		dst = keep_str_pos;
   12924:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
   12928:	4652      	mov	r2, sl
   1292a:	4641      	mov	r1, r8
   1292c:	f012 f88e 	bl	24a4c <memcpy>
	str_pos += ros_nbr;
   12930:	697b      	ldr	r3, [r7, #20]
   12932:	005b      	lsls	r3, r3, #1
   12934:	60bb      	str	r3, [r7, #8]
   12936:	697b      	ldr	r3, [r7, #20]
   12938:	44d0      	add	r8, sl
	for (unsigned int i = 0; i < rws_nbr; i++) {
   1293a:	eb08 0343 	add.w	r3, r8, r3, lsl #1
   1293e:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   12940:	f00b 0302 	and.w	r3, fp, #2
   12944:	607b      	str	r3, [r7, #4]
	for (unsigned int i = 0; i < rws_nbr; i++) {
   12946:	697b      	ldr	r3, [r7, #20]
   12948:	4598      	cmp	r8, r3
   1294a:	d16f      	bne.n	12a2c <cbprintf_package_convert+0x2ec>
	out_desc.len = in_desc->len;
   1294c:	7823      	ldrb	r3, [r4, #0]
   1294e:	617b      	str	r3, [r7, #20]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   12950:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   12952:	f01b 0f02 	tst.w	fp, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   12956:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
   1295a:	bf0c      	ite	eq
   1295c:	ea4f 0159 	moveq.w	r1, r9, lsr #1
   12960:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   12962:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
   12966:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   12968:	f040 80e3 	bne.w	12b32 <cbprintf_package_convert+0x3f2>
   1296c:	f01b 0f04 	tst.w	fp, #4
   12970:	bf14      	ite	ne
   12972:	4648      	movne	r0, r9
   12974:	2000      	moveq	r0, #0
   12976:	613b      	str	r3, [r7, #16]
	struct cbprintf_package_desc in_desc_backup = *in_desc;
   12978:	78a3      	ldrb	r3, [r4, #2]
   1297a:	f894 b003 	ldrb.w	fp, [r4, #3]
   1297e:	61fb      	str	r3, [r7, #28]
	*in_desc = out_desc;
   12980:	7062      	strb	r2, [r4, #1]
   12982:	70a0      	strb	r0, [r4, #2]
   12984:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
   12986:	69ba      	ldr	r2, [r7, #24]
   12988:	68f9      	ldr	r1, [r7, #12]
   1298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1298c:	4620      	mov	r0, r4
   1298e:	4798      	blx	r3
	if (rv < 0) {
   12990:	1e05      	subs	r5, r0, #0
   12992:	f6ff af10 	blt.w	127b6 <cbprintf_package_convert+0x76>
	*in_desc = in_desc_backup;
   12996:	697b      	ldr	r3, [r7, #20]
   12998:	7023      	strb	r3, [r4, #0]
   1299a:	693b      	ldr	r3, [r7, #16]
   1299c:	7063      	strb	r3, [r4, #1]
   1299e:	69fb      	ldr	r3, [r7, #28]
   129a0:	70a3      	strb	r3, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   129a2:	4649      	mov	r1, r9
   129a4:	69ba      	ldr	r2, [r7, #24]
   129a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
   129a8:	f884 b003 	strb.w	fp, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
   129ac:	f107 0040 	add.w	r0, r7, #64	; 0x40
   129b0:	4798      	blx	r3
	if (rv < 0) {
   129b2:	f1b0 0900 	subs.w	r9, r0, #0
   129b6:	f2c0 80e9 	blt.w	12b8c <cbprintf_package_convert+0x44c>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   129ba:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
   129bc:	69ba      	ldr	r2, [r7, #24]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
   129be:	eba3 010a 	sub.w	r1, r3, sl
   129c2:	68fb      	ldr	r3, [r7, #12]
   129c4:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
   129c6:	68bb      	ldr	r3, [r7, #8]
   129c8:	4640      	mov	r0, r8
   129ca:	1ac9      	subs	r1, r1, r3
   129cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   129ce:	4798      	blx	r3
	if (rv < 0) {
   129d0:	2800      	cmp	r0, #0
   129d2:	f2c0 80dd 	blt.w	12b90 <cbprintf_package_convert+0x450>
	out_len += rv;
   129d6:	eb05 0809 	add.w	r8, r5, r9
	out_len += rv;
   129da:	eb08 0500 	add.w	r5, r8, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
   129de:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
   129e2:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (unsigned int i = 0; i < scpy_cnt; i++) {
   129e6:	45b3      	cmp	fp, r6
   129e8:	f0c0 80a5 	bcc.w	12b36 <cbprintf_package_convert+0x3f6>
	(void)cb(NULL, 0, ctx);
   129ec:	2100      	movs	r1, #0
   129ee:	69ba      	ldr	r2, [r7, #24]
   129f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   129f2:	4608      	mov	r0, r1
   129f4:	4798      	blx	r3
	return out_len;
   129f6:	e6de      	b.n	127b6 <cbprintf_package_convert+0x76>
   129f8:	00027cae 	.word	0x00027cae
   129fc:	00027bfc 	.word	0x00027bfc
   12a00:	00027c2a 	.word	0x00027c2a
   12a04:	00026d0c 	.word	0x00026d0c
   12a08:	0002baf8 	.word	0x0002baf8
   12a0c:	00027cc9 	.word	0x00027cc9
   12a10:	01000004 	.word	0x01000004
   12a14:	0002704c 	.word	0x0002704c
	if (cb == NULL) {
   12a18:	f04f 0900 	mov.w	r9, #0
   12a1c:	f107 0030 	add.w	r0, r7, #48	; 0x30
   12a20:	e782      	b.n	12928 <cbprintf_package_convert+0x1e8>
		scpy_cnt = 0;
   12a22:	4656      	mov	r6, sl
		keep_cnt = 0;
   12a24:	46d1      	mov	r9, sl
   12a26:	e783      	b.n	12930 <cbprintf_package_convert+0x1f0>
   12a28:	46b1      	mov	r9, r6
   12a2a:	e781      	b.n	12930 <cbprintf_package_convert+0x1f0>
		uint8_t arg_idx = *str_pos++;
   12a2c:	f818 1b02 	ldrb.w	r1, [r8], #2
   12a30:	4b58      	ldr	r3, [pc, #352]	; (12b94 <cbprintf_package_convert+0x454>)
		uint8_t arg_pos = *str_pos++;
   12a32:	f818 5c01 	ldrb.w	r5, [r8, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
   12a36:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
   12a3a:	429a      	cmp	r2, r3
   12a3c:	d302      	bcc.n	12a44 <cbprintf_package_convert+0x304>
   12a3e:	4b56      	ldr	r3, [pc, #344]	; (12b98 <cbprintf_package_convert+0x458>)
   12a40:	429a      	cmp	r2, r3
   12a42:	d316      	bcc.n	12a72 <cbprintf_package_convert+0x332>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   12a44:	693b      	ldr	r3, [r7, #16]
   12a46:	b12b      	cbz	r3, 12a54 <cbprintf_package_convert+0x314>
   12a48:	69f8      	ldr	r0, [r7, #28]
   12a4a:	f011 f988 	bl	23d5e <is_ptr>
   12a4e:	2800      	cmp	r0, #0
   12a50:	f47f af79 	bne.w	12946 <cbprintf_package_convert+0x206>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
   12a54:	687b      	ldr	r3, [r7, #4]
   12a56:	2b00      	cmp	r3, #0
   12a58:	d04a      	beq.n	12af0 <cbprintf_package_convert+0x3b0>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
   12a5a:	2e0f      	cmp	r6, #15
   12a5c:	d93e      	bls.n	12adc <cbprintf_package_convert+0x39c>
   12a5e:	494f      	ldr	r1, [pc, #316]	; (12b9c <cbprintf_package_convert+0x45c>)
   12a60:	4a4f      	ldr	r2, [pc, #316]	; (12ba0 <cbprintf_package_convert+0x460>)
   12a62:	4850      	ldr	r0, [pc, #320]	; (12ba4 <cbprintf_package_convert+0x464>)
   12a64:	f44f 6389 	mov.w	r3, #1096	; 0x448
   12a68:	f011 fbec 	bl	24244 <assert_print>
   12a6c:	f44f 6189 	mov.w	r1, #1096	; 0x448
   12a70:	e67a      	b.n	12768 <cbprintf_package_convert+0x28>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
   12a72:	693b      	ldr	r3, [r7, #16]
   12a74:	b12b      	cbz	r3, 12a82 <cbprintf_package_convert+0x342>
   12a76:	69f8      	ldr	r0, [r7, #28]
   12a78:	f011 f971 	bl	23d5e <is_ptr>
   12a7c:	2800      	cmp	r0, #0
   12a7e:	f47f af62 	bne.w	12946 <cbprintf_package_convert+0x206>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
   12a82:	f01b 0f01 	tst.w	fp, #1
   12a86:	d00b      	beq.n	12aa0 <cbprintf_package_convert+0x360>
				__ASSERT_NO_MSG(scpy_cnt < sizeof(cpy_str_pos));
   12a88:	2e0f      	cmp	r6, #15
   12a8a:	d927      	bls.n	12adc <cbprintf_package_convert+0x39c>
   12a8c:	4943      	ldr	r1, [pc, #268]	; (12b9c <cbprintf_package_convert+0x45c>)
   12a8e:	4a44      	ldr	r2, [pc, #272]	; (12ba0 <cbprintf_package_convert+0x460>)
   12a90:	4844      	ldr	r0, [pc, #272]	; (12ba4 <cbprintf_package_convert+0x464>)
   12a92:	f240 433e 	movw	r3, #1086	; 0x43e
   12a96:	f011 fbd5 	bl	24244 <assert_print>
   12a9a:	f240 413e 	movw	r1, #1086	; 0x43e
   12a9e:	e663      	b.n	12768 <cbprintf_package_convert+0x28>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
   12aa0:	f01b 0f04 	tst.w	fp, #4
   12aa4:	f43f af4f 	beq.w	12946 <cbprintf_package_convert+0x206>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
   12aa8:	f1b9 0f0f 	cmp.w	r9, #15
   12aac:	d909      	bls.n	12ac2 <cbprintf_package_convert+0x382>
   12aae:	493e      	ldr	r1, [pc, #248]	; (12ba8 <cbprintf_package_convert+0x468>)
   12ab0:	4a3b      	ldr	r2, [pc, #236]	; (12ba0 <cbprintf_package_convert+0x460>)
   12ab2:	483c      	ldr	r0, [pc, #240]	; (12ba4 <cbprintf_package_convert+0x464>)
   12ab4:	f240 4341 	movw	r3, #1089	; 0x441
   12ab8:	f011 fbc4 	bl	24244 <assert_print>
   12abc:	f240 4141 	movw	r1, #1089	; 0x441
   12ac0:	e652      	b.n	12768 <cbprintf_package_convert+0x28>
				keep_str_pos[keep_cnt++] = arg_pos;
   12ac2:	f109 0328 	add.w	r3, r9, #40	; 0x28
   12ac6:	f107 0128 	add.w	r1, r7, #40	; 0x28
   12aca:	f109 0201 	add.w	r2, r9, #1
   12ace:	eb03 0901 	add.w	r9, r3, r1
   12ad2:	f809 5c10 	strb.w	r5, [r9, #-16]
   12ad6:	fa5f f982 	uxtb.w	r9, r2
   12ada:	e734      	b.n	12946 <cbprintf_package_convert+0x206>
				cpy_str_pos[scpy_cnt++] = arg_pos;
   12adc:	f106 0328 	add.w	r3, r6, #40	; 0x28
   12ae0:	f107 0128 	add.w	r1, r7, #40	; 0x28
   12ae4:	1c72      	adds	r2, r6, #1
   12ae6:	185e      	adds	r6, r3, r1
   12ae8:	f806 5c20 	strb.w	r5, [r6, #-32]
   12aec:	b2d6      	uxtb	r6, r2
   12aee:	e72a      	b.n	12946 <cbprintf_package_convert+0x206>
				__ASSERT_NO_MSG(keep_cnt < sizeof(keep_str_pos));
   12af0:	f1b9 0f0f 	cmp.w	r9, #15
   12af4:	d909      	bls.n	12b0a <cbprintf_package_convert+0x3ca>
   12af6:	492c      	ldr	r1, [pc, #176]	; (12ba8 <cbprintf_package_convert+0x468>)
   12af8:	4a29      	ldr	r2, [pc, #164]	; (12ba0 <cbprintf_package_convert+0x460>)
   12afa:	482a      	ldr	r0, [pc, #168]	; (12ba4 <cbprintf_package_convert+0x464>)
   12afc:	f240 434b 	movw	r3, #1099	; 0x44b
   12b00:	f011 fba0 	bl	24244 <assert_print>
   12b04:	f240 414b 	movw	r1, #1099	; 0x44b
   12b08:	e62e      	b.n	12768 <cbprintf_package_convert+0x28>
				keep_str_pos[keep_cnt++] = arg_idx;
   12b0a:	f109 0328 	add.w	r3, r9, #40	; 0x28
   12b0e:	f107 0028 	add.w	r0, r7, #40	; 0x28
   12b12:	f109 0201 	add.w	r2, r9, #1
   12b16:	1818      	adds	r0, r3, r0
				keep_str_pos[keep_cnt++] = arg_pos;
   12b18:	f107 0350 	add.w	r3, r7, #80	; 0x50
   12b1c:	fa53 f282 	uxtab	r2, r3, r2
   12b20:	f109 0902 	add.w	r9, r9, #2
				keep_str_pos[keep_cnt++] = arg_idx;
   12b24:	f800 1c10 	strb.w	r1, [r0, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
   12b28:	fa5f f989 	uxtb.w	r9, r9
   12b2c:	f802 5c10 	strb.w	r5, [r2, #-16]
	for (unsigned int i = 0; i < rws_nbr; i++) {
   12b30:	e709      	b.n	12946 <cbprintf_package_convert+0x206>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
   12b32:	2000      	movs	r0, #0
   12b34:	e71f      	b.n	12976 <cbprintf_package_convert+0x236>
		uint8_t loc = cpy_str_pos[i];
   12b36:	f81b 300a 	ldrb.w	r3, [fp, sl]
   12b3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *str = *(const char **)&buf32[loc];
   12b3e:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
   12b42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   12b44:	b1fb      	cbz	r3, 12b86 <cbprintf_package_convert+0x446>
   12b46:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
   12b4a:	69ba      	ldr	r2, [r7, #24]
   12b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12b4e:	2101      	movs	r1, #1
   12b50:	f107 002f 	add.w	r0, r7, #47	; 0x2f
   12b54:	4798      	blx	r3
		if (rv < 0) {
   12b56:	2800      	cmp	r0, #0
   12b58:	db1a      	blt.n	12b90 <cbprintf_package_convert+0x450>
		out_len += rv;
   12b5a:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
   12b5c:	f1b8 0f00 	cmp.w	r8, #0
   12b60:	d106      	bne.n	12b70 <cbprintf_package_convert+0x430>
   12b62:	4648      	mov	r0, r9
   12b64:	f011 ff5b 	bl	24a1e <strlen>
   12b68:	f100 0801 	add.w	r8, r0, #1
   12b6c:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
   12b70:	69ba      	ldr	r2, [r7, #24]
   12b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   12b74:	4641      	mov	r1, r8
   12b76:	4648      	mov	r0, r9
   12b78:	4798      	blx	r3
		if (rv < 0) {
   12b7a:	2800      	cmp	r0, #0
   12b7c:	db08      	blt.n	12b90 <cbprintf_package_convert+0x450>
		out_len += rv;
   12b7e:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
   12b80:	f10b 0b01 	add.w	fp, fp, #1
   12b84:	e72f      	b.n	129e6 <cbprintf_package_convert+0x2a6>
		uint16_t str_len = strl ? strl[i] : 0;
   12b86:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
   12b8a:	e7de      	b.n	12b4a <cbprintf_package_convert+0x40a>
   12b8c:	464d      	mov	r5, r9
   12b8e:	e612      	b.n	127b6 <cbprintf_package_convert+0x76>
   12b90:	4605      	mov	r5, r0
   12b92:	e610      	b.n	127b6 <cbprintf_package_convert+0x76>
   12b94:	00026d0c 	.word	0x00026d0c
   12b98:	0002baf8 	.word	0x0002baf8
   12b9c:	00027d6c 	.word	0x00027d6c
   12ba0:	00027bfc 	.word	0x00027bfc
   12ba4:	00027c2a 	.word	0x00027c2a
   12ba8:	00027d8b 	.word	0x00027d8b

00012bac <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
   12bac:	4b01      	ldr	r3, [pc, #4]	; (12bb4 <__printk_hook_install+0x8>)
   12bae:	6018      	str	r0, [r3, #0]
}
   12bb0:	4770      	bx	lr
   12bb2:	bf00      	nop
   12bb4:	200005ec 	.word	0x200005ec

00012bb8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   12bb8:	b530      	push	{r4, r5, lr}
   12bba:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   12bbc:	2500      	movs	r5, #0
   12bbe:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   12bc2:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   12bc4:	9500      	str	r5, [sp, #0]
   12bc6:	a903      	add	r1, sp, #12
   12bc8:	4805      	ldr	r0, [pc, #20]	; (12be0 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   12bca:	9505      	str	r5, [sp, #20]
   12bcc:	f7fe f93c 	bl	10e48 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   12bd0:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   12bd4:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   12bd6:	bfb8      	it	lt
   12bd8:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   12bda:	b007      	add	sp, #28
   12bdc:	bd30      	pop	{r4, r5, pc}
   12bde:	bf00      	nop
   12be0:	00023dad 	.word	0x00023dad

00012be4 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   12be4:	b570      	push	{r4, r5, r6, lr}
	if (mem == NULL) {
   12be6:	460c      	mov	r4, r1
   12be8:	2900      	cmp	r1, #0
   12bea:	d034      	beq.n	12c56 <sys_heap_free+0x72>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   12bec:	6802      	ldr	r2, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   12bee:	1f0b      	subs	r3, r1, #4
   12bf0:	1a9b      	subs	r3, r3, r2
   12bf2:	08d9      	lsrs	r1, r3, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   12bf4:	f023 0307 	bic.w	r3, r3, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   12bf8:	4413      	add	r3, r2
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   12bfa:	885d      	ldrh	r5, [r3, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   12bfc:	07e8      	lsls	r0, r5, #31
   12bfe:	d40d      	bmi.n	12c1c <sys_heap_free+0x38>
   12c00:	4a15      	ldr	r2, [pc, #84]	; (12c58 <sys_heap_free+0x74>)
   12c02:	4916      	ldr	r1, [pc, #88]	; (12c5c <sys_heap_free+0x78>)
   12c04:	4816      	ldr	r0, [pc, #88]	; (12c60 <sys_heap_free+0x7c>)
   12c06:	23af      	movs	r3, #175	; 0xaf
   12c08:	f011 fb1c 	bl	24244 <assert_print>
   12c0c:	4621      	mov	r1, r4
   12c0e:	4815      	ldr	r0, [pc, #84]	; (12c64 <sys_heap_free+0x80>)
   12c10:	f011 fb18 	bl	24244 <assert_print>
   12c14:	21af      	movs	r1, #175	; 0xaf
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   12c16:	4810      	ldr	r0, [pc, #64]	; (12c58 <sys_heap_free+0x74>)
   12c18:	f011 fb0d 	bl	24236 <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   12c1c:	4610      	mov	r0, r2
   12c1e:	f011 f8fe 	bl	23e1e <chunk_size>
   12c22:	4408      	add	r0, r1
		return ((uint16_t *)cmem)[f];
   12c24:	f832 6030 	ldrh.w	r6, [r2, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   12c28:	1b80      	subs	r0, r0, r6
   12c2a:	4281      	cmp	r1, r0
   12c2c:	d00b      	beq.n	12c46 <sys_heap_free+0x62>
   12c2e:	4a0a      	ldr	r2, [pc, #40]	; (12c58 <sys_heap_free+0x74>)
   12c30:	490d      	ldr	r1, [pc, #52]	; (12c68 <sys_heap_free+0x84>)
   12c32:	480b      	ldr	r0, [pc, #44]	; (12c60 <sys_heap_free+0x7c>)
   12c34:	23b7      	movs	r3, #183	; 0xb7
   12c36:	f011 fb05 	bl	24244 <assert_print>
   12c3a:	4621      	mov	r1, r4
   12c3c:	480b      	ldr	r0, [pc, #44]	; (12c6c <sys_heap_free+0x88>)
   12c3e:	f011 fb01 	bl	24244 <assert_print>
   12c42:	21b7      	movs	r1, #183	; 0xb7
   12c44:	e7e7      	b.n	12c16 <sys_heap_free+0x32>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   12c46:	f025 0501 	bic.w	r5, r5, #1
   12c4a:	805d      	strh	r5, [r3, #2]
	heap_listener_notify_free(HEAP_ID_FROM_POINTER(heap), mem,
				  chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	free_chunk(h, c);
}
   12c4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	free_chunk(h, c);
   12c50:	4610      	mov	r0, r2
   12c52:	f011 b9a1 	b.w	23f98 <free_chunk>
}
   12c56:	bd70      	pop	{r4, r5, r6, pc}
   12c58:	00027dbc 	.word	0x00027dbc
   12c5c:	00027ddd 	.word	0x00027ddd
   12c60:	00027c2a 	.word	0x00027c2a
   12c64:	00027dee 	.word	0x00027dee
   12c68:	00027e26 	.word	0x00027e26
   12c6c:	00027e4c 	.word	0x00027e4c

00012c70 <sys_heap_aligned_alloc>:
	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   12c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12c74:	1e4b      	subs	r3, r1, #1
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   12c76:	400b      	ands	r3, r1
	struct z_heap *h = heap->heap;
   12c78:	6806      	ldr	r6, [r0, #0]
{
   12c7a:	460f      	mov	r7, r1
   12c7c:	4614      	mov	r4, r2
	if (align != rew) {
   12c7e:	d011      	beq.n	12ca4 <sys_heap_aligned_alloc+0x34>
	rew = align & -align;
   12c80:	f1c1 0900 	rsb	r9, r1, #0
   12c84:	ea09 0901 	and.w	r9, r9, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   12c88:	464a      	mov	r2, r9
   12c8a:	2a04      	cmp	r2, #4
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   12c8c:	f103 31ff 	add.w	r1, r3, #4294967295
		gap = MIN(rew, chunk_header_bytes(h));
   12c90:	bf28      	it	cs
   12c92:	2204      	movcs	r2, #4
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   12c94:	4219      	tst	r1, r3
   12c96:	d10c      	bne.n	12cb2 <sys_heap_aligned_alloc+0x42>
   12c98:	461f      	mov	r7, r3

	if (bytes == 0 || size_too_big(h, bytes)) {
   12c9a:	b9e4      	cbnz	r4, 12cd6 <sys_heap_aligned_alloc+0x66>
		return NULL;
   12c9c:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   12c9e:	4628      	mov	r0, r5
   12ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   12ca4:	2904      	cmp	r1, #4
   12ca6:	d813      	bhi.n	12cd0 <sys_heap_aligned_alloc+0x60>
}
   12ca8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   12cac:	4611      	mov	r1, r2
   12cae:	f011 b9a4 	b.w	23ffa <sys_heap_alloc>
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   12cb2:	492c      	ldr	r1, [pc, #176]	; (12d64 <sys_heap_aligned_alloc+0xf4>)
   12cb4:	4a2c      	ldr	r2, [pc, #176]	; (12d68 <sys_heap_aligned_alloc+0xf8>)
   12cb6:	482d      	ldr	r0, [pc, #180]	; (12d6c <sys_heap_aligned_alloc+0xfc>)
   12cb8:	f44f 73a2 	mov.w	r3, #324	; 0x144
   12cbc:	f011 fac2 	bl	24244 <assert_print>
   12cc0:	482b      	ldr	r0, [pc, #172]	; (12d70 <sys_heap_aligned_alloc+0x100>)
   12cc2:	f011 fabf 	bl	24244 <assert_print>
   12cc6:	4828      	ldr	r0, [pc, #160]	; (12d68 <sys_heap_aligned_alloc+0xf8>)
   12cc8:	f44f 71a2 	mov.w	r1, #324	; 0x144
   12ccc:	f011 fab3 	bl	24236 <assert_post_action>
		rew = 0;
   12cd0:	4699      	mov	r9, r3
		gap = chunk_header_bytes(h);
   12cd2:	2204      	movs	r2, #4
   12cd4:	e7e1      	b.n	12c9a <sys_heap_aligned_alloc+0x2a>
	if (bytes == 0 || size_too_big(h, bytes)) {
   12cd6:	68b3      	ldr	r3, [r6, #8]
   12cd8:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   12cdc:	d9de      	bls.n	12c9c <sys_heap_aligned_alloc+0x2c>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   12cde:	f104 010b 	add.w	r1, r4, #11
   12ce2:	4439      	add	r1, r7
   12ce4:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   12ce6:	08c9      	lsrs	r1, r1, #3
   12ce8:	4630      	mov	r0, r6
   12cea:	f011 f8ee 	bl	23eca <alloc_chunk>
	if (c0 == 0) {
   12cee:	4680      	mov	r8, r0
   12cf0:	2800      	cmp	r0, #0
   12cf2:	d0d3      	beq.n	12c9c <sys_heap_aligned_alloc+0x2c>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   12cf4:	f109 0504 	add.w	r5, r9, #4
   12cf8:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   12cfc:	1e7b      	subs	r3, r7, #1
   12cfe:	4435      	add	r5, r6
   12d00:	441d      	add	r5, r3
   12d02:	427f      	negs	r7, r7
   12d04:	403d      	ands	r5, r7
   12d06:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   12d0a:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   12d0c:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   12d0e:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   12d10:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   12d12:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   12d16:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   12d18:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   12d1c:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   12d20:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   12d24:	d208      	bcs.n	12d38 <sys_heap_aligned_alloc+0xc8>
		split_chunks(h, c0, c);
   12d26:	4601      	mov	r1, r0
   12d28:	463a      	mov	r2, r7
   12d2a:	4630      	mov	r0, r6
   12d2c:	f011 f91a 	bl	23f64 <split_chunks>
		free_list_add(h, c0);
   12d30:	4641      	mov	r1, r8
   12d32:	4630      	mov	r0, r6
   12d34:	f011 f878 	bl	23e28 <free_list_add>
	return c + chunk_size(h, c);
   12d38:	4639      	mov	r1, r7
   12d3a:	4630      	mov	r0, r6
   12d3c:	f011 f86f 	bl	23e1e <chunk_size>
   12d40:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   12d42:	4284      	cmp	r4, r0
   12d44:	d207      	bcs.n	12d56 <sys_heap_aligned_alloc+0xe6>
		split_chunks(h, c, c_end);
   12d46:	4630      	mov	r0, r6
   12d48:	4622      	mov	r2, r4
   12d4a:	f011 f90b 	bl	23f64 <split_chunks>
		free_list_add(h, c_end);
   12d4e:	4621      	mov	r1, r4
   12d50:	4630      	mov	r0, r6
   12d52:	f011 f869 	bl	23e28 <free_list_add>
	void *cmem = &buf[c];
   12d56:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   12d5a:	8873      	ldrh	r3, [r6, #2]
   12d5c:	f043 0301 	orr.w	r3, r3, #1
   12d60:	8073      	strh	r3, [r6, #2]
   12d62:	e79c      	b.n	12c9e <sys_heap_aligned_alloc+0x2e>
   12d64:	00027e88 	.word	0x00027e88
   12d68:	00027dbc 	.word	0x00027dbc
   12d6c:	00027c2a 	.word	0x00027c2a
   12d70:	00027ea3 	.word	0x00027ea3

00012d74 <sys_heap_init>:
{
	IF_ENABLED(CONFIG_MSAN, (__sanitizer_dtor_callback(mem, bytes)));

	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   12d74:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
   12d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12d7a:	4604      	mov	r4, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   12d7c:	d30e      	bcc.n	12d9c <sys_heap_init+0x28>
   12d7e:	493b      	ldr	r1, [pc, #236]	; (12e6c <sys_heap_init+0xf8>)
   12d80:	4a3b      	ldr	r2, [pc, #236]	; (12e70 <sys_heap_init+0xfc>)
   12d82:	483c      	ldr	r0, [pc, #240]	; (12e74 <sys_heap_init+0x100>)
   12d84:	f240 13eb 	movw	r3, #491	; 0x1eb
   12d88:	f011 fa5c 	bl	24244 <assert_print>
   12d8c:	483a      	ldr	r0, [pc, #232]	; (12e78 <sys_heap_init+0x104>)
   12d8e:	f011 fa59 	bl	24244 <assert_print>
   12d92:	f240 11eb 	movw	r1, #491	; 0x1eb
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   12d96:	4836      	ldr	r0, [pc, #216]	; (12e70 <sys_heap_init+0xfc>)
   12d98:	f011 fa4d 	bl	24236 <assert_post_action>
   12d9c:	2a04      	cmp	r2, #4
   12d9e:	d80c      	bhi.n	12dba <sys_heap_init+0x46>
   12da0:	4936      	ldr	r1, [pc, #216]	; (12e7c <sys_heap_init+0x108>)
   12da2:	4a33      	ldr	r2, [pc, #204]	; (12e70 <sys_heap_init+0xfc>)
   12da4:	4833      	ldr	r0, [pc, #204]	; (12e74 <sys_heap_init+0x100>)
   12da6:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
   12daa:	f011 fa4b 	bl	24244 <assert_print>
   12dae:	4834      	ldr	r0, [pc, #208]	; (12e80 <sys_heap_init+0x10c>)
   12db0:	f011 fa48 	bl	24244 <assert_print>
   12db4:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   12db8:	e7ed      	b.n	12d96 <sys_heap_init+0x22>
	bytes -= heap_footer_bytes(bytes);
   12dba:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   12dbc:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   12dbe:	440a      	add	r2, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   12dc0:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   12dc4:	f022 0207 	bic.w	r2, r2, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   12dc8:	1a12      	subs	r2, r2, r0

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   12dca:	2a17      	cmp	r2, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   12dcc:	ea4f 03d2 	mov.w	r3, r2, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   12dd0:	d80c      	bhi.n	12dec <sys_heap_init+0x78>
   12dd2:	492c      	ldr	r1, [pc, #176]	; (12e84 <sys_heap_init+0x110>)
   12dd4:	4a26      	ldr	r2, [pc, #152]	; (12e70 <sys_heap_init+0xfc>)
   12dd6:	4827      	ldr	r0, [pc, #156]	; (12e74 <sys_heap_init+0x100>)
   12dd8:	f240 13fb 	movw	r3, #507	; 0x1fb
   12ddc:	f011 fa32 	bl	24244 <assert_print>
   12de0:	4827      	ldr	r0, [pc, #156]	; (12e80 <sys_heap_init+0x10c>)
   12de2:	f011 fa2f 	bl	24244 <assert_print>
   12de6:	f240 11fb 	movw	r1, #507	; 0x1fb
   12dea:	e7d4      	b.n	12d96 <sys_heap_init+0x22>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   12dec:	fab3 f183 	clz	r1, r3
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   12df0:	f1c1 0620 	rsb	r6, r1, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   12df4:	f1c1 0124 	rsb	r1, r1, #36	; 0x24
   12df8:	0089      	lsls	r1, r1, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   12dfa:	3107      	adds	r1, #7
   12dfc:	08c9      	lsrs	r1, r1, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   12dfe:	1c4d      	adds	r5, r1, #1
	heap->heap = h;
   12e00:	6020      	str	r0, [r4, #0]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   12e02:	429d      	cmp	r5, r3
	h->avail_buckets = 0;
   12e04:	f04f 0400 	mov.w	r4, #0
	h->end_chunk = heap_sz;
   12e08:	6083      	str	r3, [r0, #8]
	h->avail_buckets = 0;
   12e0a:	60c4      	str	r4, [r0, #12]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   12e0c:	d90c      	bls.n	12e28 <sys_heap_init+0xb4>
   12e0e:	491e      	ldr	r1, [pc, #120]	; (12e88 <sys_heap_init+0x114>)
   12e10:	4a17      	ldr	r2, [pc, #92]	; (12e70 <sys_heap_init+0xfc>)
   12e12:	4818      	ldr	r0, [pc, #96]	; (12e74 <sys_heap_init+0x100>)
   12e14:	f44f 7303 	mov.w	r3, #524	; 0x20c
   12e18:	f011 fa14 	bl	24244 <assert_print>
   12e1c:	4818      	ldr	r0, [pc, #96]	; (12e80 <sys_heap_init+0x10c>)
   12e1e:	f011 fa11 	bl	24244 <assert_print>
   12e22:	f44f 7103 	mov.w	r1, #524	; 0x20c
   12e26:	e7b6      	b.n	12d96 <sys_heap_init+0x22>
   12e28:	f100 050c 	add.w	r5, r0, #12
   12e2c:	eb05 0686 	add.w	r6, r5, r6, lsl #2

	for (int i = 0; i < nb_buckets; i++) {
		h->buckets[i].next = 0;
   12e30:	f845 4f04 	str.w	r4, [r5, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   12e34:	42b5      	cmp	r5, r6
   12e36:	d1fb      	bne.n	12e30 <sys_heap_init+0xbc>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   12e38:	004d      	lsls	r5, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   12e3a:	f045 0501 	orr.w	r5, r5, #1
   12e3e:	8045      	strh	r5, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   12e40:	eb00 06c1 	add.w	r6, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   12e44:	1a5d      	subs	r5, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   12e46:	006f      	lsls	r7, r5, #1
		((uint16_t *)cmem)[f] = val;
   12e48:	8004      	strh	r4, [r0, #0]
   12e4a:	8077      	strh	r7, [r6, #2]
   12e4c:	1886      	adds	r6, r0, r2
   12e4e:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   12e52:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   12e56:	8074      	strh	r4, [r6, #2]
   12e58:	5285      	strh	r5, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   12e5a:	885a      	ldrh	r2, [r3, #2]
   12e5c:	f042 0201 	orr.w	r2, r2, #1
   12e60:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   12e62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   12e66:	f010 bfdf 	b.w	23e28 <free_list_add>
   12e6a:	bf00      	nop
   12e6c:	00027ec0 	.word	0x00027ec0
   12e70:	00027dbc 	.word	0x00027dbc
   12e74:	00027c2a 	.word	0x00027c2a
   12e78:	00027ed6 	.word	0x00027ed6
   12e7c:	00027eed 	.word	0x00027eed
   12e80:	00027f0e 	.word	0x00027f0e
   12e84:	00027f27 	.word	0x00027f27
   12e88:	00027f50 	.word	0x00027f50

00012e8c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   12e8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e90:	4604      	mov	r4, r0
   12e92:	4608      	mov	r0, r1
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12e94:	8ba3      	ldrh	r3, [r4, #28]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   12e96:	0719      	lsls	r1, r3, #28
{
   12e98:	4615      	mov	r5, r2
	if (processing) {
   12e9a:	d412      	bmi.n	12ec2 <process_event+0x36>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   12e9c:	2802      	cmp	r0, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12e9e:	f003 0107 	and.w	r1, r3, #7
		if (evt == EVT_RECHECK) {
   12ea2:	d164      	bne.n	12f6e <process_event+0xe2>
			evt = process_recheck(mgr);
   12ea4:	4620      	mov	r0, r4
   12ea6:	f011 f8d1 	bl	2404c <process_recheck>
		}

		if (evt == EVT_NOP) {
   12eaa:	b188      	cbz	r0, 12ed0 <process_event+0x44>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   12eac:	3801      	subs	r0, #1
   12eae:	2804      	cmp	r0, #4
   12eb0:	f200 8134 	bhi.w	1311c <process_event+0x290>
   12eb4:	e8df f010 	tbh	[pc, r0, lsl #1]
   12eb8:	0132005b 	.word	0x0132005b
   12ebc:	00d10081 	.word	0x00d10081
   12ec0:	0101      	.short	0x0101
		if (evt == EVT_COMPLETE) {
   12ec2:	2801      	cmp	r0, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   12ec4:	bf0c      	ite	eq
   12ec6:	f043 0110 	orreq.w	r1, r3, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12eca:	f043 0120 	orrne.w	r1, r3, #32
   12ece:	83a1      	strh	r1, [r4, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
   12ed0:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   12ed2:	4620      	mov	r0, r4
   12ed4:	f00d fa04 	bl	202e0 <z_spin_unlock_valid>
   12ed8:	2800      	cmp	r0, #0
   12eda:	f040 819b 	bne.w	13214 <process_event+0x388>
   12ede:	4998      	ldr	r1, [pc, #608]	; (13140 <process_event+0x2b4>)
   12ee0:	4a98      	ldr	r2, [pc, #608]	; (13144 <process_event+0x2b8>)
   12ee2:	4899      	ldr	r0, [pc, #612]	; (13148 <process_event+0x2bc>)
   12ee4:	23c3      	movs	r3, #195	; 0xc3
   12ee6:	f011 f9ad 	bl	24244 <assert_print>
   12eea:	4621      	mov	r1, r4
   12eec:	e0b0      	b.n	13050 <process_event+0x1c4>
   12eee:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   12ef2:	1f50      	subs	r0, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   12ef4:	2801      	cmp	r0, #1
   12ef6:	d81e      	bhi.n	12f36 <process_event+0xaa>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   12ef8:	2000      	movs	r0, #0
		if (state == ONOFF_STATE_TO_ON) {
   12efa:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   12efc:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   12efe:	e9c4 0000 	strd	r0, r0, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   12f02:	d114      	bne.n	12f2e <process_event+0xa2>
		*clients = mgr->clients;
   12f04:	463a      	mov	r2, r7
   12f06:	e003      	b.n	12f10 <process_event+0x84>
				mgr->refs += 1U;
   12f08:	8be0      	ldrh	r0, [r4, #30]
   12f0a:	3001      	adds	r0, #1
   12f0c:	83e0      	strh	r0, [r4, #30]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   12f0e:	6812      	ldr	r2, [r2, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   12f10:	2a00      	cmp	r2, #0
   12f12:	d1f9      	bne.n	12f08 <process_event+0x7c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12f14:	f023 0307 	bic.w	r3, r3, #7
   12f18:	f043 0202 	orr.w	r2, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   12f1c:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   12f1e:	4620      	mov	r0, r4
   12f20:	f011 f894 	bl	2404c <process_recheck>
   12f24:	b390      	cbz	r0, 12f8c <process_event+0x100>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12f26:	f042 0220 	orr.w	r2, r2, #32
   12f2a:	83a2      	strh	r2, [r4, #28]
   12f2c:	e02e      	b.n	12f8c <process_event+0x100>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12f2e:	f023 0307 	bic.w	r3, r3, #7
   12f32:	b29a      	uxth	r2, r3
}
   12f34:	e7f2      	b.n	12f1c <process_event+0x90>
	} else if (state == ONOFF_STATE_TO_OFF) {
   12f36:	2a04      	cmp	r2, #4
   12f38:	d133      	bne.n	12fa2 <process_event+0x116>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12f3a:	f023 0307 	bic.w	r3, r3, #7
   12f3e:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   12f40:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   12f42:	4620      	mov	r0, r4
   12f44:	f011 f882 	bl	2404c <process_recheck>
   12f48:	b110      	cbz	r0, 12f50 <process_event+0xc4>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   12f4a:	f042 0220 	orr.w	r2, r2, #32
   12f4e:	83a2      	strh	r2, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12f50:	8ba3      	ldrh	r3, [r4, #28]
   12f52:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   12f56:	4589      	cmp	r9, r1
   12f58:	f040 80ea 	bne.w	13130 <process_event+0x2a4>
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   12f5c:	8ba1      	ldrh	r1, [r4, #28]
   12f5e:	06ca      	lsls	r2, r1, #27
   12f60:	f140 814f 	bpl.w	13202 <process_event+0x376>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   12f64:	f021 0310 	bic.w	r3, r1, #16
   12f68:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   12f6a:	f001 0107 	and.w	r1, r1, #7
			res = mgr->last_res;
   12f6e:	f8d4 8018 	ldr.w	r8, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   12f72:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   12f74:	f1b8 0f00 	cmp.w	r8, #0
   12f78:	dab9      	bge.n	12eee <process_event+0x62>
	list->head = NULL;
   12f7a:	2200      	movs	r2, #0
		*clients = mgr->clients;
   12f7c:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   12f7e:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   12f82:	e9c4 2200 	strd	r2, r2, [r4]
   12f86:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   12f8a:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12f8c:	8ba3      	ldrh	r3, [r4, #28]
   12f8e:	f003 0907 	and.w	r9, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   12f92:	4589      	cmp	r9, r1
   12f94:	f040 80cd 	bne.w	13132 <process_event+0x2a6>
		    || !sys_slist_is_empty(&clients)
   12f98:	2f00      	cmp	r7, #0
   12f9a:	d0df      	beq.n	12f5c <process_event+0xd0>
   12f9c:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   12f9e:	46b2      	mov	sl, r6
   12fa0:	e044      	b.n	1302c <process_event+0x1a0>
		__ASSERT_NO_MSG(false);
   12fa2:	496a      	ldr	r1, [pc, #424]	; (1314c <process_event+0x2c0>)
   12fa4:	4a6a      	ldr	r2, [pc, #424]	; (13150 <process_event+0x2c4>)
   12fa6:	4868      	ldr	r0, [pc, #416]	; (13148 <process_event+0x2bc>)
   12fa8:	f240 131b 	movw	r3, #283	; 0x11b
   12fac:	f011 f94a 	bl	24244 <assert_print>
   12fb0:	f240 111b 	movw	r1, #283	; 0x11b
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   12fb4:	4866      	ldr	r0, [pc, #408]	; (13150 <process_event+0x2c4>)
   12fb6:	f011 f93e 	bl	24236 <assert_post_action>
   12fba:	b149      	cbz	r1, 12fd0 <process_event+0x144>
   12fbc:	4965      	ldr	r1, [pc, #404]	; (13154 <process_event+0x2c8>)
   12fbe:	4a64      	ldr	r2, [pc, #400]	; (13150 <process_event+0x2c4>)
   12fc0:	4861      	ldr	r0, [pc, #388]	; (13148 <process_event+0x2bc>)
   12fc2:	f44f 73ab 	mov.w	r3, #342	; 0x156
   12fc6:	f011 f93d 	bl	24244 <assert_print>
   12fca:	f44f 71ab 	mov.w	r1, #342	; 0x156
   12fce:	e7f1      	b.n	12fb4 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   12fd0:	6823      	ldr	r3, [r4, #0]
   12fd2:	b94b      	cbnz	r3, 12fe8 <process_event+0x15c>
   12fd4:	4960      	ldr	r1, [pc, #384]	; (13158 <process_event+0x2cc>)
   12fd6:	4a5e      	ldr	r2, [pc, #376]	; (13150 <process_event+0x2c4>)
   12fd8:	485b      	ldr	r0, [pc, #364]	; (13148 <process_event+0x2bc>)
   12fda:	f240 1357 	movw	r3, #343	; 0x157
   12fde:	f011 f931 	bl	24244 <assert_print>
   12fe2:	f240 1157 	movw	r1, #343	; 0x157
   12fe6:	e7e5      	b.n	12fb4 <process_event+0x128>
			transit = mgr->transitions->start;
   12fe8:	6923      	ldr	r3, [r4, #16]
   12fea:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
   12fec:	b94e      	cbnz	r6, 13002 <process_event+0x176>
   12fee:	495b      	ldr	r1, [pc, #364]	; (1315c <process_event+0x2d0>)
   12ff0:	4a57      	ldr	r2, [pc, #348]	; (13150 <process_event+0x2c4>)
   12ff2:	4855      	ldr	r0, [pc, #340]	; (13148 <process_event+0x2bc>)
   12ff4:	f44f 73ad 	mov.w	r3, #346	; 0x15a
   12ff8:	f011 f924 	bl	24244 <assert_print>
   12ffc:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   13000:	e7d8      	b.n	12fb4 <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   13002:	8ba3      	ldrh	r3, [r4, #28]
   13004:	f023 0307 	bic.w	r3, r3, #7
   13008:	f043 0306 	orr.w	r3, r3, #6
   1300c:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   1300e:	83a3      	strh	r3, [r4, #28]
   13010:	460f      	mov	r7, r1
		res = 0;
   13012:	4688      	mov	r8, r1
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   13014:	f04f 0906 	mov.w	r9, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   13018:	68a2      	ldr	r2, [r4, #8]
   1301a:	2a00      	cmp	r2, #0
   1301c:	f040 808b 	bne.w	13136 <process_event+0x2aa>
		    || !sys_slist_is_empty(&clients)
   13020:	2f00      	cmp	r7, #0
   13022:	f040 808b 	bne.w	1313c <process_event+0x2b0>
		    || (transit != NULL)) {
   13026:	2e00      	cmp	r6, #0
   13028:	d098      	beq.n	12f5c <process_event+0xd0>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1302a:	46ba      	mov	sl, r7
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   1302c:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
   13030:	f104 0b14 	add.w	fp, r4, #20
			mgr->flags = flags;
   13034:	83a3      	strh	r3, [r4, #28]
   13036:	4658      	mov	r0, fp
   13038:	f00d f952 	bl	202e0 <z_spin_unlock_valid>
   1303c:	2800      	cmp	r0, #0
   1303e:	f040 8097 	bne.w	13170 <process_event+0x2e4>
   13042:	493f      	ldr	r1, [pc, #252]	; (13140 <process_event+0x2b4>)
   13044:	4a3f      	ldr	r2, [pc, #252]	; (13144 <process_event+0x2b8>)
   13046:	4840      	ldr	r0, [pc, #256]	; (13148 <process_event+0x2bc>)
   13048:	23c3      	movs	r3, #195	; 0xc3
   1304a:	f011 f8fb 	bl	24244 <assert_print>
   1304e:	4659      	mov	r1, fp
   13050:	4843      	ldr	r0, [pc, #268]	; (13160 <process_event+0x2d4>)
   13052:	f011 f8f7 	bl	24244 <assert_print>
   13056:	21c3      	movs	r1, #195	; 0xc3
   13058:	e0ae      	b.n	131b8 <process_event+0x32c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   1305a:	2902      	cmp	r1, #2
   1305c:	d009      	beq.n	13072 <process_event+0x1e6>
   1305e:	4941      	ldr	r1, [pc, #260]	; (13164 <process_event+0x2d8>)
   13060:	4a3b      	ldr	r2, [pc, #236]	; (13150 <process_event+0x2c4>)
   13062:	4839      	ldr	r0, [pc, #228]	; (13148 <process_event+0x2bc>)
   13064:	f240 135d 	movw	r3, #349	; 0x15d
   13068:	f011 f8ec 	bl	24244 <assert_print>
   1306c:	f240 115d 	movw	r1, #349	; 0x15d
   13070:	e7a0      	b.n	12fb4 <process_event+0x128>
			__ASSERT_NO_MSG(mgr->refs == 0);
   13072:	8be7      	ldrh	r7, [r4, #30]
   13074:	b14f      	cbz	r7, 1308a <process_event+0x1fe>
   13076:	493c      	ldr	r1, [pc, #240]	; (13168 <process_event+0x2dc>)
   13078:	4a35      	ldr	r2, [pc, #212]	; (13150 <process_event+0x2c4>)
   1307a:	4833      	ldr	r0, [pc, #204]	; (13148 <process_event+0x2bc>)
   1307c:	f44f 73af 	mov.w	r3, #350	; 0x15e
   13080:	f011 f8e0 	bl	24244 <assert_print>
   13084:	f44f 71af 	mov.w	r1, #350	; 0x15e
   13088:	e794      	b.n	12fb4 <process_event+0x128>
			transit = mgr->transitions->stop;
   1308a:	6923      	ldr	r3, [r4, #16]
   1308c:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
   1308e:	b94e      	cbnz	r6, 130a4 <process_event+0x218>
   13090:	4932      	ldr	r1, [pc, #200]	; (1315c <process_event+0x2d0>)
   13092:	4a2f      	ldr	r2, [pc, #188]	; (13150 <process_event+0x2c4>)
   13094:	482c      	ldr	r0, [pc, #176]	; (13148 <process_event+0x2bc>)
   13096:	f240 1361 	movw	r3, #353	; 0x161
   1309a:	f011 f8d3 	bl	24244 <assert_print>
   1309e:	f240 1161 	movw	r1, #353	; 0x161
   130a2:	e787      	b.n	12fb4 <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   130a4:	8ba3      	ldrh	r3, [r4, #28]
   130a6:	f023 0307 	bic.w	r3, r3, #7
   130aa:	f043 0304 	orr.w	r3, r3, #4
   130ae:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   130b0:	83a3      	strh	r3, [r4, #28]
		res = 0;
   130b2:	46b8      	mov	r8, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   130b4:	f04f 0904 	mov.w	r9, #4
   130b8:	e7ae      	b.n	13018 <process_event+0x18c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   130ba:	2901      	cmp	r1, #1
   130bc:	d009      	beq.n	130d2 <process_event+0x246>
   130be:	492b      	ldr	r1, [pc, #172]	; (1316c <process_event+0x2e0>)
   130c0:	4a23      	ldr	r2, [pc, #140]	; (13150 <process_event+0x2c4>)
   130c2:	4821      	ldr	r0, [pc, #132]	; (13148 <process_event+0x2bc>)
   130c4:	f44f 73b2 	mov.w	r3, #356	; 0x164
   130c8:	f011 f8bc 	bl	24244 <assert_print>
   130cc:	f44f 71b2 	mov.w	r1, #356	; 0x164
   130d0:	e770      	b.n	12fb4 <process_event+0x128>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   130d2:	6823      	ldr	r3, [r4, #0]
   130d4:	b94b      	cbnz	r3, 130ea <process_event+0x25e>
   130d6:	4920      	ldr	r1, [pc, #128]	; (13158 <process_event+0x2cc>)
   130d8:	4a1d      	ldr	r2, [pc, #116]	; (13150 <process_event+0x2c4>)
   130da:	481b      	ldr	r0, [pc, #108]	; (13148 <process_event+0x2bc>)
   130dc:	f240 1365 	movw	r3, #357	; 0x165
   130e0:	f011 f8b0 	bl	24244 <assert_print>
   130e4:	f240 1165 	movw	r1, #357	; 0x165
   130e8:	e764      	b.n	12fb4 <process_event+0x128>
			transit = mgr->transitions->reset;
   130ea:	6923      	ldr	r3, [r4, #16]
   130ec:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
   130ee:	b94e      	cbnz	r6, 13104 <process_event+0x278>
   130f0:	491a      	ldr	r1, [pc, #104]	; (1315c <process_event+0x2d0>)
   130f2:	4a17      	ldr	r2, [pc, #92]	; (13150 <process_event+0x2c4>)
   130f4:	4814      	ldr	r0, [pc, #80]	; (13148 <process_event+0x2bc>)
   130f6:	f44f 73b4 	mov.w	r3, #360	; 0x168
   130fa:	f011 f8a3 	bl	24244 <assert_print>
   130fe:	f44f 71b4 	mov.w	r1, #360	; 0x168
   13102:	e757      	b.n	12fb4 <process_event+0x128>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   13104:	8ba3      	ldrh	r3, [r4, #28]
   13106:	f023 0307 	bic.w	r3, r3, #7
   1310a:	f043 0305 	orr.w	r3, r3, #5
   1310e:	b29b      	uxth	r3, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   13110:	2700      	movs	r7, #0
   13112:	83a3      	strh	r3, [r4, #28]
		res = 0;
   13114:	46b8      	mov	r8, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   13116:	f04f 0905 	mov.w	r9, #5
   1311a:	e77d      	b.n	13018 <process_event+0x18c>
			__ASSERT_NO_MSG(false);
   1311c:	490b      	ldr	r1, [pc, #44]	; (1314c <process_event+0x2c0>)
   1311e:	4a0c      	ldr	r2, [pc, #48]	; (13150 <process_event+0x2c4>)
   13120:	4809      	ldr	r0, [pc, #36]	; (13148 <process_event+0x2bc>)
   13122:	f240 136b 	movw	r3, #363	; 0x16b
   13126:	f011 f88d 	bl	24244 <assert_print>
   1312a:	f240 116b 	movw	r1, #363	; 0x16b
   1312e:	e741      	b.n	12fb4 <process_event+0x128>
				   && !sys_slist_is_empty(&mgr->monitors);
   13130:	2700      	movs	r7, #0
   13132:	2600      	movs	r6, #0
   13134:	e770      	b.n	13018 <process_event+0x18c>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   13136:	f04f 0a01 	mov.w	sl, #1
   1313a:	e777      	b.n	1302c <process_event+0x1a0>
   1313c:	4692      	mov	sl, r2
   1313e:	e775      	b.n	1302c <process_event+0x1a0>
   13140:	0002804b 	.word	0x0002804b
   13144:	0002801e 	.word	0x0002801e
   13148:	00027c2a 	.word	0x00027c2a
   1314c:	0002a7c0 	.word	0x0002a7c0
   13150:	00027f7b 	.word	0x00027f7b
   13154:	00027f9d 	.word	0x00027f9d
   13158:	00027fa9 	.word	0x00027fa9
   1315c:	00027fcc 	.word	0x00027fcc
   13160:	00028062 	.word	0x00028062
   13164:	00027fe3 	.word	0x00027fe3
   13168:	00027ff9 	.word	0x00027ff9
   1316c:	00028008 	.word	0x00028008
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   13170:	f385 8811 	msr	BASEPRI, r5
   13174:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   13178:	f1ba 0f00 	cmp.w	sl, #0
   1317c:	d11e      	bne.n	131bc <process_event+0x330>
	while (!sys_slist_is_empty(list)) {
   1317e:	2f00      	cmp	r7, #0
   13180:	d12f      	bne.n	131e2 <process_event+0x356>
			if (transit != NULL) {
   13182:	b116      	cbz	r6, 1318a <process_event+0x2fe>
				transit(mgr, transition_complete);
   13184:	4926      	ldr	r1, [pc, #152]	; (13220 <process_event+0x394>)
   13186:	4620      	mov	r0, r4
   13188:	47b0      	blx	r6
	__asm__ volatile(
   1318a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1318e:	f3ef 8511 	mrs	r5, BASEPRI
   13192:	f383 8812 	msr	BASEPRI_MAX, r3
   13196:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1319a:	4658      	mov	r0, fp
   1319c:	f00d f892 	bl	202c4 <z_spin_lock_valid>
   131a0:	bb38      	cbnz	r0, 131f2 <process_event+0x366>
   131a2:	4a20      	ldr	r2, [pc, #128]	; (13224 <process_event+0x398>)
   131a4:	4920      	ldr	r1, [pc, #128]	; (13228 <process_event+0x39c>)
   131a6:	4821      	ldr	r0, [pc, #132]	; (1322c <process_event+0x3a0>)
   131a8:	2394      	movs	r3, #148	; 0x94
   131aa:	f011 f84b 	bl	24244 <assert_print>
   131ae:	4659      	mov	r1, fp
   131b0:	481f      	ldr	r0, [pc, #124]	; (13230 <process_event+0x3a4>)
   131b2:	f011 f847 	bl	24244 <assert_print>
   131b6:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   131b8:	481a      	ldr	r0, [pc, #104]	; (13224 <process_event+0x398>)
   131ba:	e6fc      	b.n	12fb6 <process_event+0x12a>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   131bc:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   131be:	2900      	cmp	r1, #0
   131c0:	d0dd      	beq.n	1317e <process_event+0x2f2>
	return node->next;
   131c2:	680d      	ldr	r5, [r1, #0]
   131c4:	2900      	cmp	r1, #0
   131c6:	d0da      	beq.n	1317e <process_event+0x2f2>
		mon->callback(mgr, mon, state, res);
   131c8:	f8d1 a004 	ldr.w	sl, [r1, #4]
   131cc:	4643      	mov	r3, r8
   131ce:	464a      	mov	r2, r9
   131d0:	4620      	mov	r0, r4
   131d2:	47d0      	blx	sl
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   131d4:	b11d      	cbz	r5, 131de <process_event+0x352>
   131d6:	682b      	ldr	r3, [r5, #0]
   131d8:	4629      	mov	r1, r5
   131da:	461d      	mov	r5, r3
   131dc:	e7f2      	b.n	131c4 <process_event+0x338>
   131de:	462b      	mov	r3, r5
   131e0:	e7fa      	b.n	131d8 <process_event+0x34c>
   131e2:	4639      	mov	r1, r7
		notify_one(mgr, cli, state, res);
   131e4:	4643      	mov	r3, r8
   131e6:	464a      	mov	r2, r9
   131e8:	4620      	mov	r0, r4
   131ea:	683f      	ldr	r7, [r7, #0]
   131ec:	f010 ff5a 	bl	240a4 <notify_one>
   131f0:	e7c5      	b.n	1317e <process_event+0x2f2>
	z_spin_lock_set_owner(l);
   131f2:	4658      	mov	r0, fp
   131f4:	f00d f884 	bl	20300 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   131f8:	8ba3      	ldrh	r3, [r4, #28]
   131fa:	f023 0308 	bic.w	r3, r3, #8
   131fe:	83a3      	strh	r3, [r4, #28]
   13200:	e6ac      	b.n	12f5c <process_event+0xd0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   13202:	068b      	lsls	r3, r1, #26
   13204:	f57f ae64 	bpl.w	12ed0 <process_event+0x44>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   13208:	f021 0320 	bic.w	r3, r1, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   1320c:	83a3      	strh	r3, [r4, #28]
		state = mgr->flags & ONOFF_STATE_MASK;
   1320e:	f001 0107 	and.w	r1, r1, #7
		if (evt == EVT_RECHECK) {
   13212:	e647      	b.n	12ea4 <process_event+0x18>
	__asm__ volatile(
   13214:	f385 8811 	msr	BASEPRI, r5
   13218:	f3bf 8f6f 	isb	sy
}
   1321c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13220:	00013235 	.word	0x00013235
   13224:	0002801e 	.word	0x0002801e
   13228:	00028077 	.word	0x00028077
   1322c:	00027c2a 	.word	0x00027c2a
   13230:	0002808c 	.word	0x0002808c

00013234 <transition_complete>:
{
   13234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13236:	4604      	mov	r4, r0
   13238:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   1323a:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   1323e:	f04f 0340 	mov.w	r3, #64	; 0x40
   13242:	f3ef 8711 	mrs	r7, BASEPRI
   13246:	f383 8812 	msr	BASEPRI_MAX, r3
   1324a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1324e:	4630      	mov	r0, r6
   13250:	f00d f838 	bl	202c4 <z_spin_lock_valid>
   13254:	b968      	cbnz	r0, 13272 <transition_complete+0x3e>
   13256:	4a0c      	ldr	r2, [pc, #48]	; (13288 <transition_complete+0x54>)
   13258:	490c      	ldr	r1, [pc, #48]	; (1328c <transition_complete+0x58>)
   1325a:	480d      	ldr	r0, [pc, #52]	; (13290 <transition_complete+0x5c>)
   1325c:	2394      	movs	r3, #148	; 0x94
   1325e:	f010 fff1 	bl	24244 <assert_print>
   13262:	480c      	ldr	r0, [pc, #48]	; (13294 <transition_complete+0x60>)
   13264:	4631      	mov	r1, r6
   13266:	f010 ffed 	bl	24244 <assert_print>
   1326a:	4807      	ldr	r0, [pc, #28]	; (13288 <transition_complete+0x54>)
   1326c:	2194      	movs	r1, #148	; 0x94
   1326e:	f010 ffe2 	bl	24236 <assert_post_action>
	z_spin_lock_set_owner(l);
   13272:	4630      	mov	r0, r6
   13274:	f00d f844 	bl	20300 <z_spin_lock_set_owner>
	mgr->last_res = res;
   13278:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   1327a:	463a      	mov	r2, r7
   1327c:	4620      	mov	r0, r4
   1327e:	2101      	movs	r1, #1
}
   13280:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   13284:	f7ff be02 	b.w	12e8c <process_event>
   13288:	0002801e 	.word	0x0002801e
   1328c:	00028077 	.word	0x00028077
   13290:	00027c2a 	.word	0x00027c2a
   13294:	0002808c 	.word	0x0002808c

00013298 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   13298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1329c:	4604      	mov	r4, r0
   1329e:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   132a0:	f010 fef0 	bl	24084 <validate_args>

	if (rv < 0) {
   132a4:	1e05      	subs	r5, r0, #0
   132a6:	db67      	blt.n	13378 <onoff_request+0xe0>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   132a8:	f104 0914 	add.w	r9, r4, #20
   132ac:	f04f 0340 	mov.w	r3, #64	; 0x40
   132b0:	f3ef 8a11 	mrs	sl, BASEPRI
   132b4:	f383 8812 	msr	BASEPRI_MAX, r3
   132b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   132bc:	4648      	mov	r0, r9
   132be:	f00d f801 	bl	202c4 <z_spin_lock_valid>
   132c2:	4680      	mov	r8, r0
   132c4:	b960      	cbnz	r0, 132e0 <onoff_request+0x48>
   132c6:	4a38      	ldr	r2, [pc, #224]	; (133a8 <onoff_request+0x110>)
   132c8:	4938      	ldr	r1, [pc, #224]	; (133ac <onoff_request+0x114>)
   132ca:	4839      	ldr	r0, [pc, #228]	; (133b0 <onoff_request+0x118>)
   132cc:	2394      	movs	r3, #148	; 0x94
   132ce:	f010 ffb9 	bl	24244 <assert_print>
   132d2:	4649      	mov	r1, r9
   132d4:	4837      	ldr	r0, [pc, #220]	; (133b4 <onoff_request+0x11c>)
   132d6:	f010 ffb5 	bl	24244 <assert_print>
   132da:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   132dc:	4832      	ldr	r0, [pc, #200]	; (133a8 <onoff_request+0x110>)
   132de:	e040      	b.n	13362 <onoff_request+0xca>
	z_spin_lock_set_owner(l);
   132e0:	4648      	mov	r0, r9
   132e2:	f00d f80d 	bl	20300 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   132e6:	8be3      	ldrh	r3, [r4, #30]
   132e8:	8ba6      	ldrh	r6, [r4, #28]
   132ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
   132ee:	4293      	cmp	r3, r2
   132f0:	f006 0607 	and.w	r6, r6, #7
   132f4:	d043      	beq.n	1337e <onoff_request+0xe6>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   132f6:	2e02      	cmp	r6, #2
   132f8:	d113      	bne.n	13322 <onoff_request+0x8a>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   132fa:	3301      	adds	r3, #1
   132fc:	83e3      	strh	r3, [r4, #30]
	rv = state;
   132fe:	4635      	mov	r5, r6
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13300:	4648      	mov	r0, r9
   13302:	f00c ffed 	bl	202e0 <z_spin_unlock_valid>
   13306:	2800      	cmp	r0, #0
   13308:	d13f      	bne.n	1338a <onoff_request+0xf2>
   1330a:	4a27      	ldr	r2, [pc, #156]	; (133a8 <onoff_request+0x110>)
   1330c:	492a      	ldr	r1, [pc, #168]	; (133b8 <onoff_request+0x120>)
   1330e:	4828      	ldr	r0, [pc, #160]	; (133b0 <onoff_request+0x118>)
   13310:	23c3      	movs	r3, #195	; 0xc3
   13312:	f010 ff97 	bl	24244 <assert_print>
   13316:	4649      	mov	r1, r9
   13318:	4828      	ldr	r0, [pc, #160]	; (133bc <onoff_request+0x124>)
   1331a:	f010 ff93 	bl	24244 <assert_print>
   1331e:	21c3      	movs	r1, #195	; 0xc3
   13320:	e7dc      	b.n	132dc <onoff_request+0x44>
	} else if ((state == ONOFF_STATE_OFF)
   13322:	2e06      	cmp	r6, #6
   13324:	d813      	bhi.n	1334e <onoff_request+0xb6>
   13326:	e8df f006 	tbb	[pc, r6]
   1332a:	2d09      	.short	0x2d09
   1332c:	04091212 	.word	0x04091212
   13330:	09          	.byte	0x09
   13331:	00          	.byte	0x00
	if (state == ONOFF_STATE_ON) {
   13332:	f06f 0585 	mvn.w	r5, #133	; 0x85
   13336:	f04f 0800 	mov.w	r8, #0
   1333a:	e7e1      	b.n	13300 <onoff_request+0x68>
	parent->next = child;
   1333c:	2300      	movs	r3, #0
   1333e:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
   13340:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   13342:	b983      	cbnz	r3, 13366 <onoff_request+0xce>
	list->head = node;
   13344:	e9c4 7700 	strd	r7, r7, [r4]
out:
	if (add_client) {
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   13348:	b186      	cbz	r6, 1336c <onoff_request+0xd4>
	rv = state;
   1334a:	4635      	mov	r5, r6
   1334c:	e7f3      	b.n	13336 <onoff_request+0x9e>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   1334e:	491c      	ldr	r1, [pc, #112]	; (133c0 <onoff_request+0x128>)
   13350:	4817      	ldr	r0, [pc, #92]	; (133b0 <onoff_request+0x118>)
   13352:	4a1c      	ldr	r2, [pc, #112]	; (133c4 <onoff_request+0x12c>)
   13354:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
   13358:	f010 ff74 	bl	24244 <assert_print>
   1335c:	4819      	ldr	r0, [pc, #100]	; (133c4 <onoff_request+0x12c>)
   1335e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   13362:	f010 ff68 	bl	24236 <assert_post_action>
	parent->next = child;
   13366:	601f      	str	r7, [r3, #0]
	list->tail = node;
   13368:	6067      	str	r7, [r4, #4]
}
   1336a:	e7ed      	b.n	13348 <onoff_request+0xb0>
		process_event(mgr, EVT_RECHECK, key);
   1336c:	4652      	mov	r2, sl
   1336e:	2102      	movs	r1, #2
   13370:	4620      	mov	r0, r4
   13372:	f7ff fd8b 	bl	12e8c <process_event>
   13376:	4635      	mov	r5, r6
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   13378:	4628      	mov	r0, r5
   1337a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		rv = -EAGAIN;
   1337e:	f06f 050a 	mvn.w	r5, #10
   13382:	e7d8      	b.n	13336 <onoff_request+0x9e>
	if (state == ONOFF_STATE_ON) {
   13384:	f06f 0504 	mvn.w	r5, #4
   13388:	e7d5      	b.n	13336 <onoff_request+0x9e>
	__asm__ volatile(
   1338a:	f38a 8811 	msr	BASEPRI, sl
   1338e:	f3bf 8f6f 	isb	sy
		if (notify) {
   13392:	f1b8 0f00 	cmp.w	r8, #0
   13396:	d0ef      	beq.n	13378 <onoff_request+0xe0>
			notify_one(mgr, cli, state, 0);
   13398:	2300      	movs	r3, #0
   1339a:	4632      	mov	r2, r6
   1339c:	4639      	mov	r1, r7
   1339e:	4620      	mov	r0, r4
   133a0:	f010 fe80 	bl	240a4 <notify_one>
   133a4:	e7e8      	b.n	13378 <onoff_request+0xe0>
   133a6:	bf00      	nop
   133a8:	0002801e 	.word	0x0002801e
   133ac:	00028077 	.word	0x00028077
   133b0:	00027c2a 	.word	0x00027c2a
   133b4:	0002808c 	.word	0x0002808c
   133b8:	0002804b 	.word	0x0002804b
   133bc:	00028062 	.word	0x00028062
   133c0:	00028008 	.word	0x00028008
   133c4:	00027f7b 	.word	0x00027f7b

000133c8 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   133c8:	b508      	push	{r3, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   133ca:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   133cc:	6081      	str	r1, [r0, #8]

	return method & SYS_NOTIFY_METHOD_MASK;
   133ce:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   133d2:	2a02      	cmp	r2, #2
{
   133d4:	4603      	mov	r3, r0
	switch (method) {
   133d6:	d00a      	beq.n	133ee <sys_notify_finalize+0x26>
   133d8:	2a03      	cmp	r2, #3
   133da:	f04f 0100 	mov.w	r1, #0
   133de:	d003      	beq.n	133e8 <sys_notify_finalize+0x20>
   133e0:	2a01      	cmp	r2, #1
   133e2:	d10a      	bne.n	133fa <sys_notify_finalize+0x32>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   133e4:	6059      	str	r1, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   133e6:	e006      	b.n	133f6 <sys_notify_finalize+0x2e>
		rv = notify->method.callback;
   133e8:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   133ea:	6059      	str	r1, [r3, #4]
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   133ec:	bd08      	pop	{r3, pc}
		sig = notify->method.signal;
   133ee:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   133f0:	2200      	movs	r2, #0
   133f2:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   133f4:	b958      	cbnz	r0, 1340e <sys_notify_finalize+0x46>
	sys_notify_generic_callback rv = NULL;
   133f6:	2000      	movs	r0, #0
   133f8:	e7f8      	b.n	133ec <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   133fa:	4906      	ldr	r1, [pc, #24]	; (13414 <sys_notify_finalize+0x4c>)
   133fc:	4806      	ldr	r0, [pc, #24]	; (13418 <sys_notify_finalize+0x50>)
   133fe:	4a07      	ldr	r2, [pc, #28]	; (1341c <sys_notify_finalize+0x54>)
   13400:	2345      	movs	r3, #69	; 0x45
   13402:	f010 ff1f 	bl	24244 <assert_print>
   13406:	4805      	ldr	r0, [pc, #20]	; (1341c <sys_notify_finalize+0x54>)
   13408:	2145      	movs	r1, #69	; 0x45
   1340a:	f010 ff14 	bl	24236 <assert_post_action>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   1340e:	f010 f807 	bl	23420 <z_impl_k_poll_signal_raise>
   13412:	e7f0      	b.n	133f6 <sys_notify_finalize+0x2e>
   13414:	0002a7c0 	.word	0x0002a7c0
   13418:	00027c2a 	.word	0x00027c2a
   1341c:	000280a4 	.word	0x000280a4

00013420 <mpsc_pbuf_init>:
	}
}

void mpsc_pbuf_init(struct mpsc_pbuf_buffer *buffer,
		    const struct mpsc_pbuf_buffer_config *cfg)
{
   13420:	b538      	push	{r3, r4, r5, lr}
   13422:	460d      	mov	r5, r1
   13424:	4604      	mov	r4, r0
	int err;

	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
   13426:	2220      	movs	r2, #32
   13428:	2100      	movs	r1, #0
   1342a:	f011 fb1a 	bl	24a62 <memset>
	buffer->get_wlen = cfg->get_wlen;
   1342e:	68eb      	ldr	r3, [r5, #12]
   13430:	61e3      	str	r3, [r4, #28]
	buffer->notify_drop = cfg->notify_drop;
   13432:	68ab      	ldr	r3, [r5, #8]
   13434:	61a3      	str	r3, [r4, #24]
	buffer->buf = cfg->buf;
   13436:	682b      	ldr	r3, [r5, #0]
   13438:	6223      	str	r3, [r4, #32]
	buffer->size = cfg->size;
   1343a:	686b      	ldr	r3, [r5, #4]
   1343c:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->max_usage = 0;
   1343e:	2200      	movs	r2, #0
   13440:	62a2      	str	r2, [r4, #40]	; 0x28
	buffer->flags = cfg->flags;
   13442:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
   13444:	b123      	cbz	r3, 13450 <mpsc_pbuf_init+0x30>
   13446:	1e59      	subs	r1, r3, #1
   13448:	4219      	tst	r1, r3

	if (is_power_of_two(buffer->size)) {
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   1344a:	bf08      	it	eq
   1344c:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
   13450:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   13452:	2201      	movs	r2, #1
   13454:	2100      	movs	r1, #0
   13456:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1345a:	f013 faa6 	bl	269aa <z_impl_k_sem_init>
	}

	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
   1345e:	b148      	cbz	r0, 13474 <mpsc_pbuf_init+0x54>
   13460:	4905      	ldr	r1, [pc, #20]	; (13478 <mpsc_pbuf_init+0x58>)
   13462:	4806      	ldr	r0, [pc, #24]	; (1347c <mpsc_pbuf_init+0x5c>)
   13464:	4a06      	ldr	r2, [pc, #24]	; (13480 <mpsc_pbuf_init+0x60>)
   13466:	232e      	movs	r3, #46	; 0x2e
   13468:	f010 feec 	bl	24244 <assert_print>
   1346c:	4804      	ldr	r0, [pc, #16]	; (13480 <mpsc_pbuf_init+0x60>)
   1346e:	212e      	movs	r1, #46	; 0x2e
   13470:	f010 fee1 	bl	24236 <assert_post_action>
	ARG_UNUSED(err);
}
   13474:	bd38      	pop	{r3, r4, r5, pc}
   13476:	bf00      	nop
   13478:	000280f3 	.word	0x000280f3
   1347c:	00027c2a 	.word	0x00027c2a
   13480:	000280cd 	.word	0x000280cd

00013484 <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   13484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13488:	b089      	sub	sp, #36	; 0x24
   1348a:	e9cd 2301 	strd	r2, r3, [sp, #4]
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
   1348e:	6a43      	ldr	r3, [r0, #36]	; 0x24
	union mpsc_pbuf_generic *dropped_item = NULL;
   13490:	2700      	movs	r7, #0
	if (wlen > (buffer->size)) {
   13492:	428b      	cmp	r3, r1
{
   13494:	4604      	mov	r4, r0
   13496:	4688      	mov	r8, r1
	union mpsc_pbuf_generic *dropped_item = NULL;
   13498:	9705      	str	r7, [sp, #20]
	uint32_t tmp_wr_idx_shift = 0;
   1349a:	9707      	str	r7, [sp, #28]
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
   1349c:	46ba      	mov	sl, r7
	if (wlen > (buffer->size)) {
   1349e:	d353      	bcc.n	13548 <mpsc_pbuf_alloc+0xc4>

	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
   134a0:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   134a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   134a8:	f3ef 8b11 	mrs	fp, BASEPRI
   134ac:	f383 8812 	msr	BASEPRI_MAX, r3
   134b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   134b4:	4630      	mov	r0, r6
	k.key = arch_irq_lock();
   134b6:	46d9      	mov	r9, fp
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   134b8:	f00c ff04 	bl	202c4 <z_spin_lock_valid>
   134bc:	b958      	cbnz	r0, 134d6 <mpsc_pbuf_alloc+0x52>
   134be:	4a4b      	ldr	r2, [pc, #300]	; (135ec <mpsc_pbuf_alloc+0x168>)
   134c0:	494b      	ldr	r1, [pc, #300]	; (135f0 <mpsc_pbuf_alloc+0x16c>)
   134c2:	484c      	ldr	r0, [pc, #304]	; (135f4 <mpsc_pbuf_alloc+0x170>)
   134c4:	2394      	movs	r3, #148	; 0x94
   134c6:	f010 febd 	bl	24244 <assert_print>
   134ca:	4631      	mov	r1, r6
   134cc:	484a      	ldr	r0, [pc, #296]	; (135f8 <mpsc_pbuf_alloc+0x174>)
   134ce:	f010 feb9 	bl	24244 <assert_print>
   134d2:	2194      	movs	r1, #148	; 0x94
   134d4:	e05e      	b.n	13594 <mpsc_pbuf_alloc+0x110>
	z_spin_lock_set_owner(l);
   134d6:	4630      	mov	r0, r6
   134d8:	f00c ff12 	bl	20300 <z_spin_lock_set_owner>
		if (tmp_wr_idx_shift) {
   134dc:	9a07      	ldr	r2, [sp, #28]
   134de:	b12a      	cbz	r2, 134ec <mpsc_pbuf_alloc+0x68>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
   134e0:	4639      	mov	r1, r7
   134e2:	4620      	mov	r0, r4
   134e4:	f010 ff8d 	bl	24402 <post_drop_action>
			tmp_wr_idx_shift = 0;
   134e8:	2300      	movs	r3, #0
   134ea:	9307      	str	r3, [sp, #28]
		}

		wrap = free_space(buffer, &free_wlen);
   134ec:	a906      	add	r1, sp, #24
   134ee:	4620      	mov	r0, r4
   134f0:	f010 feb5 	bl	2425e <free_space>

		if (free_wlen >= wlen) {
   134f4:	9906      	ldr	r1, [sp, #24]
   134f6:	4541      	cmp	r1, r8
		wrap = free_space(buffer, &free_wlen);
   134f8:	4605      	mov	r5, r0
		if (free_wlen >= wlen) {
   134fa:	d32e      	bcc.n	1355a <mpsc_pbuf_alloc+0xd6>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   134fc:	6822      	ldr	r2, [r4, #0]
			item =
   134fe:	6a23      	ldr	r3, [r4, #32]
			item->hdr.valid = 0;
   13500:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
   13504:	f021 0103 	bic.w	r1, r1, #3
   13508:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
   1350c:	eb03 0a82 	add.w	sl, r3, r2, lsl #2
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   13510:	6821      	ldr	r1, [r4, #0]
   13512:	4642      	mov	r2, r8
   13514:	4620      	mov	r0, r4
   13516:	f010 fec6 	bl	242a6 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   1351a:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   1351c:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   1351e:	4298      	cmp	r0, r3
   13520:	d016      	beq.n	13550 <mpsc_pbuf_alloc+0xcc>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
   13522:	2500      	movs	r5, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13524:	4630      	mov	r0, r6
   13526:	f00c fedb 	bl	202e0 <z_spin_unlock_valid>
   1352a:	b340      	cbz	r0, 1357e <mpsc_pbuf_alloc+0xfa>
	__asm__ volatile(
   1352c:	f389 8811 	msr	BASEPRI, r9
   13530:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
   13534:	9905      	ldr	r1, [sp, #20]
   13536:	b129      	cbz	r1, 13544 <mpsc_pbuf_alloc+0xc0>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
   13538:	69a2      	ldr	r2, [r4, #24]
   1353a:	b10a      	cbz	r2, 13540 <mpsc_pbuf_alloc+0xbc>
				buffer->notify_drop(buffer, dropped_item);
   1353c:	4620      	mov	r0, r4
   1353e:	4790      	blx	r2
			}
			dropped_item = NULL;
   13540:	2300      	movs	r3, #0
   13542:	9305      	str	r3, [sp, #20]
		}
	} while (cont);
   13544:	2d00      	cmp	r5, #0
   13546:	d1ad      	bne.n	134a4 <mpsc_pbuf_alloc+0x20>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   13548:	4650      	mov	r0, sl
   1354a:	b009      	add	sp, #36	; 0x24
   1354c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
   13550:	6923      	ldr	r3, [r4, #16]
   13552:	f043 0308 	orr.w	r3, r3, #8
   13556:	6123      	str	r3, [r4, #16]
   13558:	e7e3      	b.n	13522 <mpsc_pbuf_alloc+0x9e>
		} else if (wrap) {
   1355a:	b118      	cbz	r0, 13564 <mpsc_pbuf_alloc+0xe0>
			add_skip_item(buffer, free_wlen);
   1355c:	4620      	mov	r0, r4
   1355e:	f010 febc 	bl	242da <add_skip_item>
			cont = true;
   13562:	e7df      	b.n	13524 <mpsc_pbuf_alloc+0xa0>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   13564:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
   13568:	4313      	orrs	r3, r2
   1356a:	d036      	beq.n	135da <mpsc_pbuf_alloc+0x156>
   1356c:	9103      	str	r1, [sp, #12]
   1356e:	f013 f9d5 	bl	2691c <k_is_in_isr>
   13572:	9903      	ldr	r1, [sp, #12]
   13574:	bb88      	cbnz	r0, 135da <mpsc_pbuf_alloc+0x156>
   13576:	4630      	mov	r0, r6
   13578:	f00c feb2 	bl	202e0 <z_spin_unlock_valid>
   1357c:	b968      	cbnz	r0, 1359a <mpsc_pbuf_alloc+0x116>
   1357e:	4a1b      	ldr	r2, [pc, #108]	; (135ec <mpsc_pbuf_alloc+0x168>)
   13580:	491e      	ldr	r1, [pc, #120]	; (135fc <mpsc_pbuf_alloc+0x178>)
   13582:	481c      	ldr	r0, [pc, #112]	; (135f4 <mpsc_pbuf_alloc+0x170>)
   13584:	23c3      	movs	r3, #195	; 0xc3
   13586:	f010 fe5d 	bl	24244 <assert_print>
   1358a:	4631      	mov	r1, r6
   1358c:	481c      	ldr	r0, [pc, #112]	; (13600 <mpsc_pbuf_alloc+0x17c>)
   1358e:	f010 fe59 	bl	24244 <assert_print>
   13592:	21c3      	movs	r1, #195	; 0xc3
   13594:	4815      	ldr	r0, [pc, #84]	; (135ec <mpsc_pbuf_alloc+0x168>)
   13596:	f010 fe4e 	bl	24236 <assert_post_action>
   1359a:	f38b 8811 	msr	BASEPRI, fp
   1359e:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   135a2:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
   135a6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   135aa:	f00d f97b 	bl	208a4 <z_impl_k_sem_take>
   135ae:	4605      	mov	r5, r0
	__asm__ volatile(
   135b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   135b4:	f3ef 8911 	mrs	r9, BASEPRI
   135b8:	f383 8812 	msr	BASEPRI_MAX, r3
   135bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   135c0:	4630      	mov	r0, r6
   135c2:	f00c fe7f 	bl	202c4 <z_spin_lock_valid>
   135c6:	2800      	cmp	r0, #0
   135c8:	f43f af79 	beq.w	134be <mpsc_pbuf_alloc+0x3a>
	z_spin_lock_set_owner(l);
   135cc:	4630      	mov	r0, r6
			cont = (err == 0) ? true : false;
   135ce:	fab5 f585 	clz	r5, r5
   135d2:	f00c fe95 	bl	20300 <z_spin_lock_set_owner>
   135d6:	096d      	lsrs	r5, r5, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
   135d8:	e7a4      	b.n	13524 <mpsc_pbuf_alloc+0xa0>
			cont = drop_item_locked(buffer, free_wlen,
   135da:	ab07      	add	r3, sp, #28
   135dc:	aa05      	add	r2, sp, #20
   135de:	4620      	mov	r0, r4
			tmp_wr_idx_val = buffer->tmp_wr_idx;
   135e0:	6827      	ldr	r7, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
   135e2:	f010 fe97 	bl	24314 <drop_item_locked>
   135e6:	4605      	mov	r5, r0
   135e8:	e79c      	b.n	13524 <mpsc_pbuf_alloc+0xa0>
   135ea:	bf00      	nop
   135ec:	0002801e 	.word	0x0002801e
   135f0:	00028077 	.word	0x00028077
   135f4:	00027c2a 	.word	0x00027c2a
   135f8:	0002808c 	.word	0x0002808c
   135fc:	0002804b 	.word	0x0002804b
   13600:	00028062 	.word	0x00028062

00013604 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   13604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13608:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   1360a:	69c3      	ldr	r3, [r0, #28]
   1360c:	4608      	mov	r0, r1
{
   1360e:	460e      	mov	r6, r1
	uint32_t wlen = buffer->get_wlen(item);
   13610:	4798      	blx	r3

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
   13612:	f104 0514 	add.w	r5, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
   13616:	4607      	mov	r7, r0
   13618:	f04f 0340 	mov.w	r3, #64	; 0x40
   1361c:	f3ef 8811 	mrs	r8, BASEPRI
   13620:	f383 8812 	msr	BASEPRI_MAX, r3
   13624:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13628:	4628      	mov	r0, r5
   1362a:	f00c fe4b 	bl	202c4 <z_spin_lock_valid>
   1362e:	b968      	cbnz	r0, 1364c <mpsc_pbuf_commit+0x48>
   13630:	4a19      	ldr	r2, [pc, #100]	; (13698 <mpsc_pbuf_commit+0x94>)
   13632:	491a      	ldr	r1, [pc, #104]	; (1369c <mpsc_pbuf_commit+0x98>)
   13634:	481a      	ldr	r0, [pc, #104]	; (136a0 <mpsc_pbuf_commit+0x9c>)
   13636:	2394      	movs	r3, #148	; 0x94
   13638:	f010 fe04 	bl	24244 <assert_print>
   1363c:	4629      	mov	r1, r5
   1363e:	4819      	ldr	r0, [pc, #100]	; (136a4 <mpsc_pbuf_commit+0xa0>)
   13640:	f010 fe00 	bl	24244 <assert_print>
   13644:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13646:	4814      	ldr	r0, [pc, #80]	; (13698 <mpsc_pbuf_commit+0x94>)
   13648:	f010 fdf5 	bl	24236 <assert_post_action>
	z_spin_lock_set_owner(l);
   1364c:	4628      	mov	r0, r5
   1364e:	f00c fe57 	bl	20300 <z_spin_lock_set_owner>

	item->hdr.valid = 1;
   13652:	7833      	ldrb	r3, [r6, #0]
   13654:	f043 0301 	orr.w	r3, r3, #1
   13658:	7033      	strb	r3, [r6, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   1365a:	6861      	ldr	r1, [r4, #4]
   1365c:	463a      	mov	r2, r7
   1365e:	4620      	mov	r0, r4
   13660:	f010 fe21 	bl	242a6 <idx_inc>
   13664:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
   13666:	4620      	mov	r0, r4
   13668:	f010 fee6 	bl	24438 <max_utilization_update>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1366c:	4628      	mov	r0, r5
   1366e:	f00c fe37 	bl	202e0 <z_spin_unlock_valid>
   13672:	b958      	cbnz	r0, 1368c <mpsc_pbuf_commit+0x88>
   13674:	4a08      	ldr	r2, [pc, #32]	; (13698 <mpsc_pbuf_commit+0x94>)
   13676:	490c      	ldr	r1, [pc, #48]	; (136a8 <mpsc_pbuf_commit+0xa4>)
   13678:	4809      	ldr	r0, [pc, #36]	; (136a0 <mpsc_pbuf_commit+0x9c>)
   1367a:	23c3      	movs	r3, #195	; 0xc3
   1367c:	f010 fde2 	bl	24244 <assert_print>
   13680:	4629      	mov	r1, r5
   13682:	480a      	ldr	r0, [pc, #40]	; (136ac <mpsc_pbuf_commit+0xa8>)
   13684:	f010 fdde 	bl	24244 <assert_print>
   13688:	21c3      	movs	r1, #195	; 0xc3
   1368a:	e7dc      	b.n	13646 <mpsc_pbuf_commit+0x42>
	__asm__ volatile(
   1368c:	f388 8811 	msr	BASEPRI, r8
   13690:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
   13694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13698:	0002801e 	.word	0x0002801e
   1369c:	00028077 	.word	0x00028077
   136a0:	00027c2a 	.word	0x00027c2a
   136a4:	0002808c 	.word	0x0002808c
   136a8:	0002804b 	.word	0x0002804b
   136ac:	00028062 	.word	0x00028062

000136b0 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   136b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   136b4:	4604      	mov	r4, r0
	do {
		uint32_t a;
		k_spinlock_key_t key;

		cont = false;
		key = k_spin_lock(&buffer->lock);
   136b6:	f100 0714 	add.w	r7, r0, #20
	__asm__ volatile(
   136ba:	f04f 0340 	mov.w	r3, #64	; 0x40
   136be:	f3ef 8811 	mrs	r8, BASEPRI
   136c2:	f383 8812 	msr	BASEPRI_MAX, r3
   136c6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   136ca:	4638      	mov	r0, r7
   136cc:	f00c fdfa 	bl	202c4 <z_spin_lock_valid>
   136d0:	4605      	mov	r5, r0
   136d2:	b968      	cbnz	r0, 136f0 <mpsc_pbuf_claim+0x40>
   136d4:	4a34      	ldr	r2, [pc, #208]	; (137a8 <mpsc_pbuf_claim+0xf8>)
   136d6:	4935      	ldr	r1, [pc, #212]	; (137ac <mpsc_pbuf_claim+0xfc>)
   136d8:	4835      	ldr	r0, [pc, #212]	; (137b0 <mpsc_pbuf_claim+0x100>)
   136da:	2394      	movs	r3, #148	; 0x94
   136dc:	f010 fdb2 	bl	24244 <assert_print>
   136e0:	4639      	mov	r1, r7
   136e2:	4834      	ldr	r0, [pc, #208]	; (137b4 <mpsc_pbuf_claim+0x104>)
   136e4:	f010 fdae 	bl	24244 <assert_print>
   136e8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   136ea:	482f      	ldr	r0, [pc, #188]	; (137a8 <mpsc_pbuf_claim+0xf8>)
   136ec:	f010 fda3 	bl	24236 <assert_post_action>
	z_spin_lock_set_owner(l);
   136f0:	4638      	mov	r0, r7
   136f2:	f00c fe05 	bl	20300 <z_spin_lock_set_owner>
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   136f6:	6923      	ldr	r3, [r4, #16]
   136f8:	68a2      	ldr	r2, [r4, #8]
   136fa:	f013 0f08 	tst.w	r3, #8
   136fe:	d102      	bne.n	13706 <mpsc_pbuf_claim+0x56>
   13700:	6863      	ldr	r3, [r4, #4]
   13702:	429a      	cmp	r2, r3
   13704:	d900      	bls.n	13708 <mpsc_pbuf_claim+0x58>
		*res = buffer->size - buffer->tmp_rd_idx;
   13706:	6a63      	ldr	r3, [r4, #36]	; 0x24
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   13708:	1a9b      	subs	r3, r3, r2
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
   1370a:	2b00      	cmp	r3, #0
   1370c:	d03d      	beq.n	1378a <mpsc_pbuf_claim+0xda>
		item = (union mpsc_pbuf_generic *)
   1370e:	6a21      	ldr	r1, [r4, #32]
	return !item->hdr.valid && !item->hdr.busy;
   13710:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
   13714:	f013 0003 	ands.w	r0, r3, #3
		item = (union mpsc_pbuf_generic *)
   13718:	eb01 0982 	add.w	r9, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
   1371c:	d038      	beq.n	13790 <mpsc_pbuf_claim+0xe0>
	if (item->hdr.busy && !item->hdr.valid) {
   1371e:	2802      	cmp	r0, #2
   13720:	d103      	bne.n	1372a <mpsc_pbuf_claim+0x7a>
		return item->skip.len;
   13722:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
   13726:	08b6      	lsrs	r6, r6, #2
   13728:	d105      	bne.n	13736 <mpsc_pbuf_claim+0x86>
   1372a:	07d8      	lsls	r0, r3, #31
   1372c:	d41d      	bmi.n	1376a <mpsc_pbuf_claim+0xba>
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);
   1372e:	69e3      	ldr	r3, [r4, #28]
   13730:	4648      	mov	r0, r9
   13732:	4798      	blx	r3
   13734:	4606      	mov	r6, r0

				buffer->tmp_rd_idx =
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   13736:	68a1      	ldr	r1, [r4, #8]
   13738:	4632      	mov	r2, r6
   1373a:	4620      	mov	r0, r4
   1373c:	f010 fdb3 	bl	242a6 <idx_inc>
				rd_idx_inc(buffer, inc);
   13740:	4631      	mov	r1, r6
				buffer->tmp_rd_idx =
   13742:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
   13744:	4620      	mov	r0, r4
   13746:	f010 fdbc 	bl	242c2 <rd_idx_inc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1374a:	4638      	mov	r0, r7
   1374c:	f00c fdc8 	bl	202e0 <z_spin_unlock_valid>
   13750:	bb00      	cbnz	r0, 13794 <mpsc_pbuf_claim+0xe4>
   13752:	4a15      	ldr	r2, [pc, #84]	; (137a8 <mpsc_pbuf_claim+0xf8>)
   13754:	4918      	ldr	r1, [pc, #96]	; (137b8 <mpsc_pbuf_claim+0x108>)
   13756:	4816      	ldr	r0, [pc, #88]	; (137b0 <mpsc_pbuf_claim+0x100>)
   13758:	23c3      	movs	r3, #195	; 0xc3
   1375a:	f010 fd73 	bl	24244 <assert_print>
   1375e:	4639      	mov	r1, r7
   13760:	4816      	ldr	r0, [pc, #88]	; (137bc <mpsc_pbuf_claim+0x10c>)
   13762:	f010 fd6f 	bl	24244 <assert_print>
   13766:	21c3      	movs	r1, #195	; 0xc3
   13768:	e7bf      	b.n	136ea <mpsc_pbuf_claim+0x3a>
				cont = true;
			} else {
				item->hdr.busy = 1;
   1376a:	f043 0302 	orr.w	r3, r3, #2
   1376e:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
   13772:	4648      	mov	r0, r9
   13774:	69e3      	ldr	r3, [r4, #28]
					idx_inc(buffer, buffer->tmp_rd_idx,
   13776:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
   13778:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
   1377a:	4629      	mov	r1, r5
						buffer->get_wlen(item));
   1377c:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
   1377e:	4620      	mov	r0, r4
   13780:	f010 fd91 	bl	242a6 <idx_inc>
		cont = false;
   13784:	2500      	movs	r5, #0
				buffer->tmp_rd_idx =
   13786:	60a0      	str	r0, [r4, #8]
   13788:	e7df      	b.n	1374a <mpsc_pbuf_claim+0x9a>
		cont = false;
   1378a:	461d      	mov	r5, r3
			item = NULL;
   1378c:	46a9      	mov	r9, r5
   1378e:	e7dc      	b.n	1374a <mpsc_pbuf_claim+0x9a>
		cont = false;
   13790:	4605      	mov	r5, r0
   13792:	e7fb      	b.n	1378c <mpsc_pbuf_claim+0xdc>
	__asm__ volatile(
   13794:	f388 8811 	msr	BASEPRI, r8
   13798:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
   1379c:	2d00      	cmp	r5, #0
   1379e:	d18c      	bne.n	136ba <mpsc_pbuf_claim+0xa>

	return item;
}
   137a0:	4648      	mov	r0, r9
   137a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   137a6:	bf00      	nop
   137a8:	0002801e 	.word	0x0002801e
   137ac:	00028077 	.word	0x00028077
   137b0:	00027c2a 	.word	0x00027c2a
   137b4:	0002808c 	.word	0x0002808c
   137b8:	0002804b 	.word	0x0002804b
   137bc:	00028062 	.word	0x00028062

000137c0 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   137c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   137c4:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   137c6:	69c3      	ldr	r3, [r0, #28]
   137c8:	4608      	mov	r0, r1
{
   137ca:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   137cc:	4798      	blx	r3
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
   137ce:	f104 0614 	add.w	r6, r4, #20
	uint32_t wlen = buffer->get_wlen(item);
   137d2:	4607      	mov	r7, r0
	__asm__ volatile(
   137d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   137d8:	f3ef 8811 	mrs	r8, BASEPRI
   137dc:	f383 8812 	msr	BASEPRI_MAX, r3
   137e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   137e4:	4630      	mov	r0, r6
   137e6:	f00c fd6d 	bl	202c4 <z_spin_lock_valid>
   137ea:	b968      	cbnz	r0, 13808 <mpsc_pbuf_free+0x48>
   137ec:	4a26      	ldr	r2, [pc, #152]	; (13888 <mpsc_pbuf_free+0xc8>)
   137ee:	4927      	ldr	r1, [pc, #156]	; (1388c <mpsc_pbuf_free+0xcc>)
   137f0:	4827      	ldr	r0, [pc, #156]	; (13890 <mpsc_pbuf_free+0xd0>)
   137f2:	2394      	movs	r3, #148	; 0x94
   137f4:	f010 fd26 	bl	24244 <assert_print>
   137f8:	4631      	mov	r1, r6
   137fa:	4826      	ldr	r0, [pc, #152]	; (13894 <mpsc_pbuf_free+0xd4>)
   137fc:	f010 fd22 	bl	24244 <assert_print>
   13800:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13802:	4821      	ldr	r0, [pc, #132]	; (13888 <mpsc_pbuf_free+0xc8>)
   13804:	f010 fd17 	bl	24236 <assert_post_action>
	z_spin_lock_set_owner(l);
   13808:	4630      	mov	r0, r6
   1380a:	f00c fd79 	bl	20300 <z_spin_lock_set_owner>
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   1380e:	782b      	ldrb	r3, [r5, #0]
   13810:	f36f 0300 	bfc	r3, #0, #1
   13814:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   13816:	6923      	ldr	r3, [r4, #16]
   13818:	079b      	lsls	r3, r3, #30
   1381a:	d505      	bpl.n	13828 <mpsc_pbuf_free+0x68>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   1381c:	68e2      	ldr	r2, [r4, #12]
   1381e:	6a23      	ldr	r3, [r4, #32]
   13820:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   13824:	429d      	cmp	r5, r3
   13826:	d120      	bne.n	1386a <mpsc_pbuf_free+0xaa>
		witem->hdr.busy = 0;
   13828:	782b      	ldrb	r3, [r5, #0]
   1382a:	f36f 0341 	bfc	r3, #1, #1
   1382e:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   13830:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   13834:	4299      	cmp	r1, r3
   13836:	d104      	bne.n	13842 <mpsc_pbuf_free+0x82>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
   13838:	463a      	mov	r2, r7
   1383a:	4620      	mov	r0, r4
   1383c:	f010 fd33 	bl	242a6 <idx_inc>
   13840:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
   13842:	4639      	mov	r1, r7
   13844:	4620      	mov	r0, r4
   13846:	f010 fd3c 	bl	242c2 <rd_idx_inc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1384a:	4630      	mov	r0, r6
   1384c:	f00c fd48 	bl	202e0 <z_spin_unlock_valid>
   13850:	b980      	cbnz	r0, 13874 <mpsc_pbuf_free+0xb4>
   13852:	4a0d      	ldr	r2, [pc, #52]	; (13888 <mpsc_pbuf_free+0xc8>)
   13854:	4910      	ldr	r1, [pc, #64]	; (13898 <mpsc_pbuf_free+0xd8>)
   13856:	480e      	ldr	r0, [pc, #56]	; (13890 <mpsc_pbuf_free+0xd0>)
   13858:	23c3      	movs	r3, #195	; 0xc3
   1385a:	f010 fcf3 	bl	24244 <assert_print>
   1385e:	4631      	mov	r1, r6
   13860:	480e      	ldr	r0, [pc, #56]	; (1389c <mpsc_pbuf_free+0xdc>)
   13862:	f010 fcef 	bl	24244 <assert_print>
   13866:	21c3      	movs	r1, #195	; 0xc3
   13868:	e7cb      	b.n	13802 <mpsc_pbuf_free+0x42>
	} else {
		MPSC_PBUF_DBG(buffer, "Allocation occurred during claim");
		witem->skip.len = wlen;
   1386a:	682b      	ldr	r3, [r5, #0]
   1386c:	f367 039f 	bfi	r3, r7, #2, #30
   13870:	602b      	str	r3, [r5, #0]
   13872:	e7ea      	b.n	1384a <mpsc_pbuf_free+0x8a>
	__asm__ volatile(
   13874:	f388 8811 	msr	BASEPRI, r8
   13878:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1387c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   13880:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   13884:	f00c bfca 	b.w	2081c <z_impl_k_sem_give>
   13888:	0002801e 	.word	0x0002801e
   1388c:	00028077 	.word	0x00028077
   13890:	00027c2a 	.word	0x00027c2a
   13894:	0002808c 	.word	0x0002808c
   13898:	0002804b 	.word	0x0002804b
   1389c:	00028062 	.word	0x00028062

000138a0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   138a0:	f00b b9e8 	b.w	1ec74 <SystemInit>

000138a4 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
   138a4:	b530      	push	{r4, r5, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   138a6:	4910      	ldr	r1, [pc, #64]	; (138e8 <enable_logger+0x44>)
   138a8:	4810      	ldr	r0, [pc, #64]	; (138ec <enable_logger+0x48>)
{
   138aa:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   138ac:	2200      	movs	r2, #0
   138ae:	f013 f952 	bl	26b56 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   138b2:	4d0f      	ldr	r5, [pc, #60]	; (138f0 <enable_logger+0x4c>)
   138b4:	490f      	ldr	r1, [pc, #60]	; (138f4 <enable_logger+0x50>)
   138b6:	2200      	movs	r2, #0
   138b8:	2300      	movs	r3, #0
   138ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
   138be:	2400      	movs	r4, #0
   138c0:	230e      	movs	r3, #14
   138c2:	e9cd 3403 	strd	r3, r4, [sp, #12]
   138c6:	e9cd 4401 	strd	r4, r4, [sp, #4]
   138ca:	4b0b      	ldr	r3, [pc, #44]	; (138f8 <enable_logger+0x54>)
   138cc:	9400      	str	r4, [sp, #0]
   138ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
   138d2:	4628      	mov	r0, r5
   138d4:	f00c fc2c 	bl	20130 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   138d8:	4908      	ldr	r1, [pc, #32]	; (138fc <enable_logger+0x58>)
   138da:	4628      	mov	r0, r5
   138dc:	f013 f824 	bl	26928 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
   138e0:	4620      	mov	r0, r4
   138e2:	b009      	add	sp, #36	; 0x24
   138e4:	bd30      	pop	{r4, r5, pc}
   138e6:	bf00      	nop
   138e8:	00013a45 	.word	0x00013a45
   138ec:	20001b50 	.word	0x20001b50
   138f0:	20001680 	.word	0x20001680
   138f4:	20003600 	.word	0x20003600
   138f8:	00013d35 	.word	0x00013d35
   138fc:	000280fc 	.word	0x000280fc

00013900 <activate_foreach_backend>:
{
   13900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   13904:	f8df 8058 	ldr.w	r8, [pc, #88]	; 13960 <activate_foreach_backend+0x60>
{
   13908:	4604      	mov	r4, r0
	while (mask_cpy) {
   1390a:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
   1390c:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
   13910:	b914      	cbnz	r4, 13918 <activate_foreach_backend+0x18>
}
   13912:	4638      	mov	r0, r7
   13914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
   13918:	fa94 f5a4 	rbit	r5, r4
   1391c:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
   13920:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   13924:	012e      	lsls	r6, r5, #4
   13926:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
   1392a:	ea6f 0a03 	mvn.w	sl, r3
   1392e:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   13932:	7b2b      	ldrb	r3, [r5, #12]
   13934:	2b00      	cmp	r3, #0
   13936:	d0eb      	beq.n	13910 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
   13938:	f858 3006 	ldr.w	r3, [r8, r6]
   1393c:	691b      	ldr	r3, [r3, #16]
   1393e:	b94b      	cbnz	r3, 13954 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
   13940:	4446      	add	r6, r8
			log_backend_enable(backend,
   13942:	2204      	movs	r2, #4
   13944:	6873      	ldr	r3, [r6, #4]
   13946:	4628      	mov	r0, r5
   13948:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
   1394a:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
   1394e:	f000 faf7 	bl	13f40 <log_backend_enable>
   13952:	e7dd      	b.n	13910 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
   13954:	4628      	mov	r0, r5
   13956:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   13958:	2800      	cmp	r0, #0
   1395a:	d1d9      	bne.n	13910 <activate_foreach_backend+0x10>
   1395c:	e7f0      	b.n	13940 <activate_foreach_backend+0x40>
   1395e:	bf00      	nop
   13960:	000270bc 	.word	0x000270bc

00013964 <z_log_init>:
{
   13964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 */
static inline int log_backend_count_get(void)
{
	int cnt;

	STRUCT_SECTION_COUNT(log_backend, &cnt);
   13968:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 13a40 <z_log_init+0xdc>
   1396c:	4c2d      	ldr	r4, [pc, #180]	; (13a24 <z_log_init+0xc0>)
   1396e:	eba9 0304 	sub.w	r3, r9, r4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   13972:	2b9f      	cmp	r3, #159	; 0x9f
{
   13974:	4680      	mov	r8, r0
   13976:	460f      	mov	r7, r1
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   13978:	d90b      	bls.n	13992 <z_log_init+0x2e>
   1397a:	492b      	ldr	r1, [pc, #172]	; (13a28 <z_log_init+0xc4>)
   1397c:	4a2b      	ldr	r2, [pc, #172]	; (13a2c <z_log_init+0xc8>)
   1397e:	482c      	ldr	r0, [pc, #176]	; (13a30 <z_log_init+0xcc>)
   13980:	f240 1319 	movw	r3, #281	; 0x119
   13984:	f010 fc5e 	bl	24244 <assert_print>
   13988:	f240 1119 	movw	r1, #281	; 0x119
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   1398c:	4827      	ldr	r0, [pc, #156]	; (13a2c <z_log_init+0xc8>)
   1398e:	f010 fc52 	bl	24236 <assert_post_action>
	if (atomic_inc(&initialized) != 0) {
   13992:	4828      	ldr	r0, [pc, #160]	; (13a34 <z_log_init+0xd0>)
   13994:	f010 fd7f 	bl	24496 <atomic_inc>
   13998:	4606      	mov	r6, r0
   1399a:	b360      	cbz	r0, 139f6 <z_log_init+0x92>
	uint32_t mask = 0;
   1399c:	2500      	movs	r5, #0
}
   1399e:	4628      	mov	r0, r5
   139a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
   139a4:	7b23      	ldrb	r3, [r4, #12]
   139a6:	b173      	cbz	r3, 139c6 <z_log_init+0x62>
	if (backend->api->init) {
   139a8:	6823      	ldr	r3, [r4, #0]
   139aa:	68db      	ldr	r3, [r3, #12]
   139ac:	b10b      	cbz	r3, 139b2 <z_log_init+0x4e>
		backend->api->init(backend);
   139ae:	4620      	mov	r0, r4
   139b0:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
   139b2:	6823      	ldr	r3, [r4, #0]
   139b4:	691b      	ldr	r3, [r3, #16]
   139b6:	b9b3      	cbnz	r3, 139e6 <z_log_init+0x82>
				log_backend_enable(backend,
   139b8:	6863      	ldr	r3, [r4, #4]
   139ba:	2204      	movs	r2, #4
   139bc:	6819      	ldr	r1, [r3, #0]
   139be:	4620      	mov	r0, r4
   139c0:	f000 fabe 	bl	13f40 <log_backend_enable>
			i++;
   139c4:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   139c6:	3410      	adds	r4, #16
   139c8:	454c      	cmp	r4, r9
   139ca:	d918      	bls.n	139fe <z_log_init+0x9a>
   139cc:	491a      	ldr	r1, [pc, #104]	; (13a38 <z_log_init+0xd4>)
   139ce:	4a17      	ldr	r2, [pc, #92]	; (13a2c <z_log_init+0xc8>)
   139d0:	4817      	ldr	r0, [pc, #92]	; (13a30 <z_log_init+0xcc>)
   139d2:	f44f 7393 	mov.w	r3, #294	; 0x126
   139d6:	f010 fc35 	bl	24244 <assert_print>
   139da:	4818      	ldr	r0, [pc, #96]	; (13a3c <z_log_init+0xd8>)
   139dc:	f010 fc32 	bl	24244 <assert_print>
   139e0:	f44f 7193 	mov.w	r1, #294	; 0x126
   139e4:	e7d2      	b.n	1398c <z_log_init+0x28>
		return backend->api->is_ready(backend);
   139e6:	4620      	mov	r0, r4
   139e8:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   139ea:	2800      	cmp	r0, #0
   139ec:	d0e4      	beq.n	139b8 <z_log_init+0x54>
				mask |= BIT(i);
   139ee:	fa0a f306 	lsl.w	r3, sl, r6
   139f2:	431d      	orrs	r5, r3
   139f4:	e7e6      	b.n	139c4 <z_log_init+0x60>
	uint32_t mask = 0;
   139f6:	4605      	mov	r5, r0
				mask |= BIT(i);
   139f8:	f04f 0a01 	mov.w	sl, #1
   139fc:	e7e4      	b.n	139c8 <z_log_init+0x64>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   139fe:	d3d1      	bcc.n	139a4 <z_log_init+0x40>
	if (blocking) {
   13a00:	f1b8 0f00 	cmp.w	r8, #0
   13a04:	d0cb      	beq.n	1399e <z_log_init+0x3a>
		while (mask) {
   13a06:	2d00      	cmp	r5, #0
   13a08:	d0c8      	beq.n	1399c <z_log_init+0x38>
			mask = activate_foreach_backend(mask);
   13a0a:	4628      	mov	r0, r5
   13a0c:	f7ff ff78 	bl	13900 <activate_foreach_backend>
   13a10:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   13a12:	2f00      	cmp	r7, #0
   13a14:	d0f7      	beq.n	13a06 <z_log_init+0xa2>
	return z_impl_k_sleep(timeout);
   13a16:	2100      	movs	r1, #0
   13a18:	f44f 70a4 	mov.w	r0, #328	; 0x148
   13a1c:	f00e fd50 	bl	224c0 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
   13a20:	e7f1      	b.n	13a06 <z_log_init+0xa2>
   13a22:	bf00      	nop
   13a24:	000270bc 	.word	0x000270bc
   13a28:	00028131 	.word	0x00028131
   13a2c:	00028104 	.word	0x00028104
   13a30:	00027c2a 	.word	0x00027c2a
   13a34:	20002c18 	.word	0x20002c18
   13a38:	00028155 	.word	0x00028155
   13a3c:	00028176 	.word	0x00028176
   13a40:	000270dc 	.word	0x000270dc

00013a44 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
   13a44:	4801      	ldr	r0, [pc, #4]	; (13a4c <log_process_thread_timer_expiry_fn+0x8>)
   13a46:	f00c bee9 	b.w	2081c <z_impl_k_sem_give>
   13a4a:	bf00      	nop
   13a4c:	20000960 	.word	0x20000960

00013a50 <log_format_func_t_get>:
}
   13a50:	4b01      	ldr	r3, [pc, #4]	; (13a58 <log_format_func_t_get+0x8>)
   13a52:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   13a56:	4770      	bx	lr
   13a58:	000271a4 	.word	0x000271a4

00013a5c <log_set_timestamp_func>:
{
   13a5c:	b508      	push	{r3, lr}
   13a5e:	4603      	mov	r3, r0
   13a60:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
   13a62:	b12b      	cbz	r3, 13a70 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
   13a64:	4a04      	ldr	r2, [pc, #16]	; (13a78 <log_set_timestamp_func+0x1c>)
   13a66:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
   13a68:	f000 fdac 	bl	145c4 <log_output_timestamp_freq_set>
	return 0;
   13a6c:	2000      	movs	r0, #0
}
   13a6e:	bd08      	pop	{r3, pc}
		return -EINVAL;
   13a70:	f06f 0015 	mvn.w	r0, #21
   13a74:	e7fb      	b.n	13a6e <log_set_timestamp_func+0x12>
   13a76:	bf00      	nop
   13a78:	200005f0 	.word	0x200005f0

00013a7c <z_log_notify_backend_enabled>:
{
   13a7c:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   13a7e:	4c04      	ldr	r4, [pc, #16]	; (13a90 <z_log_notify_backend_enabled+0x14>)
   13a80:	7823      	ldrb	r3, [r4, #0]
   13a82:	b913      	cbnz	r3, 13a8a <z_log_notify_backend_enabled+0xe>
   13a84:	4803      	ldr	r0, [pc, #12]	; (13a94 <z_log_notify_backend_enabled+0x18>)
   13a86:	f00c fec9 	bl	2081c <z_impl_k_sem_give>
	backend_attached = true;
   13a8a:	2301      	movs	r3, #1
   13a8c:	7023      	strb	r3, [r4, #0]
}
   13a8e:	bd10      	pop	{r4, pc}
   13a90:	20002ff5 	.word	0x20002ff5
   13a94:	20000960 	.word	0x20000960

00013a98 <z_log_dropped>:
{
   13a98:	b510      	push	{r4, lr}
   13a9a:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
   13a9c:	4808      	ldr	r0, [pc, #32]	; (13ac0 <z_log_dropped+0x28>)
   13a9e:	f010 fcfa 	bl	24496 <atomic_inc>
	if (buffered) {
   13aa2:	b15c      	cbz	r4, 13abc <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   13aa4:	f3bf 8f5b 	dmb	ish
   13aa8:	4b06      	ldr	r3, [pc, #24]	; (13ac4 <z_log_dropped+0x2c>)
   13aaa:	e853 1f00 	ldrex	r1, [r3]
   13aae:	3901      	subs	r1, #1
   13ab0:	e843 1200 	strex	r2, r1, [r3]
   13ab4:	2a00      	cmp	r2, #0
   13ab6:	d1f8      	bne.n	13aaa <z_log_dropped+0x12>
   13ab8:	f3bf 8f5b 	dmb	ish
}
   13abc:	bd10      	pop	{r4, pc}
   13abe:	bf00      	nop
   13ac0:	20002c10 	.word	0x20002c10
   13ac4:	20002c14 	.word	0x20002c14

00013ac8 <z_log_dropped_read_and_clear>:
}
   13ac8:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   13aca:	4b06      	ldr	r3, [pc, #24]	; (13ae4 <z_log_dropped_read_and_clear+0x1c>)
   13acc:	f3bf 8f5b 	dmb	ish
   13ad0:	4601      	mov	r1, r0
   13ad2:	e853 0f00 	ldrex	r0, [r3]
   13ad6:	e843 1200 	strex	r2, r1, [r3]
   13ada:	2a00      	cmp	r2, #0
   13adc:	d1f9      	bne.n	13ad2 <z_log_dropped_read_and_clear+0xa>
   13ade:	f3bf 8f5b 	dmb	ish
   13ae2:	4770      	bx	lr
   13ae4:	20002c10 	.word	0x20002c10

00013ae8 <dropped_notify>:
{
   13ae8:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   13aea:	f7ff ffed 	bl	13ac8 <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13aee:	4c10      	ldr	r4, [pc, #64]	; (13b30 <dropped_notify+0x48>)
   13af0:	4e10      	ldr	r6, [pc, #64]	; (13b34 <dropped_notify+0x4c>)
	uint32_t dropped = z_log_dropped_read_and_clear();
   13af2:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13af4:	42b4      	cmp	r4, r6
   13af6:	d919      	bls.n	13b2c <dropped_notify+0x44>
   13af8:	490f      	ldr	r1, [pc, #60]	; (13b38 <dropped_notify+0x50>)
   13afa:	4a10      	ldr	r2, [pc, #64]	; (13b3c <dropped_notify+0x54>)
   13afc:	4810      	ldr	r0, [pc, #64]	; (13b40 <dropped_notify+0x58>)
   13afe:	f240 13d1 	movw	r3, #465	; 0x1d1
   13b02:	f010 fb9f 	bl	24244 <assert_print>
   13b06:	480f      	ldr	r0, [pc, #60]	; (13b44 <dropped_notify+0x5c>)
   13b08:	f010 fb9c 	bl	24244 <assert_print>
   13b0c:	480b      	ldr	r0, [pc, #44]	; (13b3c <dropped_notify+0x54>)
   13b0e:	f240 11d1 	movw	r1, #465	; 0x1d1
   13b12:	f010 fb90 	bl	24236 <assert_post_action>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   13b16:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   13b18:	795b      	ldrb	r3, [r3, #5]
   13b1a:	b12b      	cbz	r3, 13b28 <dropped_notify+0x40>
	if (backend->api->dropped != NULL) {
   13b1c:	6823      	ldr	r3, [r4, #0]
   13b1e:	685b      	ldr	r3, [r3, #4]
   13b20:	b113      	cbz	r3, 13b28 <dropped_notify+0x40>
		backend->api->dropped(backend, cnt);
   13b22:	4629      	mov	r1, r5
   13b24:	4620      	mov	r0, r4
   13b26:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13b28:	3410      	adds	r4, #16
   13b2a:	e7e3      	b.n	13af4 <dropped_notify+0xc>
   13b2c:	d3f3      	bcc.n	13b16 <dropped_notify+0x2e>
}
   13b2e:	bd70      	pop	{r4, r5, r6, pc}
   13b30:	000270bc 	.word	0x000270bc
   13b34:	000270dc 	.word	0x000270dc
   13b38:	00028155 	.word	0x00028155
   13b3c:	00028104 	.word	0x00028104
   13b40:	00027c2a 	.word	0x00027c2a
   13b44:	00028176 	.word	0x00028176

00013b48 <z_log_msg_init>:
{
   13b48:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
   13b4a:	4c04      	ldr	r4, [pc, #16]	; (13b5c <z_log_msg_init+0x14>)
   13b4c:	4904      	ldr	r1, [pc, #16]	; (13b60 <z_log_msg_init+0x18>)
   13b4e:	4620      	mov	r0, r4
   13b50:	f7ff fc66 	bl	13420 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
   13b54:	4b03      	ldr	r3, [pc, #12]	; (13b64 <z_log_msg_init+0x1c>)
   13b56:	601c      	str	r4, [r3, #0]
}
   13b58:	bd10      	pop	{r4, pc}
   13b5a:	bf00      	nop
   13b5c:	20000878 	.word	0x20000878
   13b60:	00027190 	.word	0x00027190
   13b64:	20002c08 	.word	0x20002c08

00013b68 <log_core_init>:
	panic_mode = false;
   13b68:	4a08      	ldr	r2, [pc, #32]	; (13b8c <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
   13b6a:	4809      	ldr	r0, [pc, #36]	; (13b90 <log_core_init+0x28>)
{
   13b6c:	b508      	push	{r3, lr}
	panic_mode = false;
   13b6e:	2300      	movs	r3, #0
   13b70:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   13b72:	4a08      	ldr	r2, [pc, #32]	; (13b94 <log_core_init+0x2c>)
   13b74:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
   13b76:	4a08      	ldr	r2, [pc, #32]	; (13b98 <log_core_init+0x30>)
		log_set_timestamp_func(default_get_timestamp,
   13b78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	buffered_cnt = 0;
   13b7c:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
   13b7e:	f7ff ff6d 	bl	13a5c <log_set_timestamp_func>
}
   13b82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
   13b86:	f7ff bfdf 	b.w	13b48 <z_log_msg_init>
   13b8a:	bf00      	nop
   13b8c:	20002ff6 	.word	0x20002ff6
   13b90:	00024493 	.word	0x00024493
   13b94:	20002c10 	.word	0x20002c10
   13b98:	20002c14 	.word	0x20002c14

00013b9c <z_log_msg_alloc>:
{
   13b9c:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
   13b9e:	2200      	movs	r2, #0
   13ba0:	4801      	ldr	r0, [pc, #4]	; (13ba8 <z_log_msg_alloc+0xc>)
   13ba2:	2300      	movs	r3, #0
   13ba4:	f7ff bc6e 	b.w	13484 <mpsc_pbuf_alloc>
   13ba8:	20000878 	.word	0x20000878

00013bac <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
   13bac:	4801      	ldr	r0, [pc, #4]	; (13bb4 <z_log_msg_local_claim+0x8>)
   13bae:	f7ff bd7f 	b.w	136b0 <mpsc_pbuf_claim>
   13bb2:	bf00      	nop
   13bb4:	20000878 	.word	0x20000878

00013bb8 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
   13bb8:	4b02      	ldr	r3, [pc, #8]	; (13bc4 <z_log_msg_free+0xc>)
{
   13bba:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
   13bbc:	6818      	ldr	r0, [r3, #0]
   13bbe:	f7ff bdff 	b.w	137c0 <mpsc_pbuf_free>
   13bc2:	bf00      	nop
   13bc4:	20002c08 	.word	0x20002c08

00013bc8 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
   13bc8:	4801      	ldr	r0, [pc, #4]	; (13bd0 <z_log_msg_pending+0x8>)
   13bca:	f010 bc42 	b.w	24452 <mpsc_pbuf_is_pending>
   13bce:	bf00      	nop
   13bd0:	20000878 	.word	0x20000878

00013bd4 <z_impl_log_process>:
{
   13bd4:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
   13bd6:	4b30      	ldr	r3, [pc, #192]	; (13c98 <z_impl_log_process+0xc4>)
   13bd8:	7818      	ldrb	r0, [r3, #0]
   13bda:	2800      	cmp	r0, #0
   13bdc:	d05b      	beq.n	13c96 <z_impl_log_process+0xc2>
	return z_log_msg_local_claim();
   13bde:	f7ff ffe5 	bl	13bac <z_log_msg_local_claim>
	if (msg) {
   13be2:	4605      	mov	r5, r0
   13be4:	b360      	cbz	r0, 13c40 <z_impl_log_process+0x6c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   13be6:	f3bf 8f5b 	dmb	ish
   13bea:	4b2c      	ldr	r3, [pc, #176]	; (13c9c <z_impl_log_process+0xc8>)
   13bec:	e853 1f00 	ldrex	r1, [r3]
   13bf0:	3901      	subs	r1, #1
   13bf2:	e843 1200 	strex	r2, r1, [r3]
   13bf6:	2a00      	cmp	r2, #0
   13bf8:	d1f8      	bne.n	13bec <z_impl_log_process+0x18>
   13bfa:	f3bf 8f5b 	dmb	ish
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13bfe:	4c28      	ldr	r4, [pc, #160]	; (13ca0 <z_impl_log_process+0xcc>)
   13c00:	4e28      	ldr	r6, [pc, #160]	; (13ca4 <z_impl_log_process+0xd0>)
   13c02:	42b4      	cmp	r4, r6
   13c04:	d918      	bls.n	13c38 <z_impl_log_process+0x64>
   13c06:	4928      	ldr	r1, [pc, #160]	; (13ca8 <z_impl_log_process+0xd4>)
   13c08:	4a28      	ldr	r2, [pc, #160]	; (13cac <z_impl_log_process+0xd8>)
   13c0a:	4829      	ldr	r0, [pc, #164]	; (13cb0 <z_impl_log_process+0xdc>)
   13c0c:	f240 13c5 	movw	r3, #453	; 0x1c5
   13c10:	f010 fb18 	bl	24244 <assert_print>
   13c14:	4827      	ldr	r0, [pc, #156]	; (13cb4 <z_impl_log_process+0xe0>)
   13c16:	f010 fb15 	bl	24244 <assert_print>
   13c1a:	4824      	ldr	r0, [pc, #144]	; (13cac <z_impl_log_process+0xd8>)
   13c1c:	f240 11c5 	movw	r1, #453	; 0x1c5
   13c20:	f010 fb09 	bl	24236 <assert_post_action>
	return backend->cb->active;
   13c24:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
   13c26:	795b      	ldrb	r3, [r3, #5]
   13c28:	b123      	cbz	r3, 13c34 <z_impl_log_process+0x60>
	backend->api->process(backend, msg);
   13c2a:	6823      	ldr	r3, [r4, #0]
   13c2c:	4629      	mov	r1, r5
   13c2e:	681b      	ldr	r3, [r3, #0]
   13c30:	4620      	mov	r0, r4
   13c32:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13c34:	3410      	adds	r4, #16
   13c36:	e7e4      	b.n	13c02 <z_impl_log_process+0x2e>
   13c38:	d3f4      	bcc.n	13c24 <z_impl_log_process+0x50>
		z_log_msg_free(msg);
   13c3a:	4628      	mov	r0, r5
   13c3c:	f7ff ffbc 	bl	13bb8 <z_log_msg_free>
	return dropped_cnt > 0;
   13c40:	4b1d      	ldr	r3, [pc, #116]	; (13cb8 <z_impl_log_process+0xe4>)
   13c42:	4c1e      	ldr	r4, [pc, #120]	; (13cbc <z_impl_log_process+0xe8>)
		if ((dropped_pend || unordered_pend) &&
   13c44:	681b      	ldr	r3, [r3, #0]
   13c46:	2b00      	cmp	r3, #0
   13c48:	dd19      	ble.n	13c7e <z_impl_log_process+0xaa>
	return z_impl_k_uptime_ticks();
   13c4a:	f012 ff5c 	bl	26b06 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   13c4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13c52:	fba0 0302 	umull	r0, r3, r0, r2
   13c56:	fb02 3101 	mla	r1, r2, r1, r3
   13c5a:	0bc3      	lsrs	r3, r0, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   13c5c:	e9d4 2000 	ldrd	r2, r0, [r4]
   13c60:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
   13c64:	1a9b      	subs	r3, r3, r2
   13c66:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		if ((dropped_pend || unordered_pend) &&
   13c6a:	f240 32e9 	movw	r2, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
   13c6e:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
   13c72:	4293      	cmp	r3, r2
   13c74:	f171 0100 	sbcs.w	r1, r1, #0
   13c78:	d301      	bcc.n	13c7e <z_impl_log_process+0xaa>
				dropped_notify();
   13c7a:	f7ff ff35 	bl	13ae8 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
   13c7e:	e9d4 3200 	ldrd	r3, r2, [r4]
   13c82:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
   13c86:	f142 0200 	adc.w	r2, r2, #0
   13c8a:	e9c4 3200 	strd	r3, r2, [r4]
}
   13c8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
   13c92:	f7ff bf99 	b.w	13bc8 <z_log_msg_pending>
}
   13c96:	bd70      	pop	{r4, r5, r6, pc}
   13c98:	20002ff5 	.word	0x20002ff5
   13c9c:	20002c14 	.word	0x20002c14
   13ca0:	000270bc 	.word	0x000270bc
   13ca4:	000270dc 	.word	0x000270dc
   13ca8:	00028155 	.word	0x00028155
   13cac:	00028104 	.word	0x00028104
   13cb0:	00027c2a 	.word	0x00027c2a
   13cb4:	00028176 	.word	0x00028176
   13cb8:	20002c10 	.word	0x20002c10
   13cbc:	20001b48 	.word	0x20001b48

00013cc0 <z_impl_log_panic>:
{
   13cc0:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
   13cc2:	4d15      	ldr	r5, [pc, #84]	; (13d18 <z_impl_log_panic+0x58>)
   13cc4:	7829      	ldrb	r1, [r5, #0]
   13cc6:	bb29      	cbnz	r1, 13d14 <z_impl_log_panic+0x54>
	(void)z_log_init(true, false);
   13cc8:	2001      	movs	r0, #1
   13cca:	f7ff fe4b 	bl	13964 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13cce:	4c13      	ldr	r4, [pc, #76]	; (13d1c <z_impl_log_panic+0x5c>)
   13cd0:	4e13      	ldr	r6, [pc, #76]	; (13d20 <z_impl_log_panic+0x60>)
   13cd2:	42b4      	cmp	r4, r6
   13cd4:	d917      	bls.n	13d06 <z_impl_log_panic+0x46>
   13cd6:	4913      	ldr	r1, [pc, #76]	; (13d24 <z_impl_log_panic+0x64>)
   13cd8:	4a13      	ldr	r2, [pc, #76]	; (13d28 <z_impl_log_panic+0x68>)
   13cda:	4814      	ldr	r0, [pc, #80]	; (13d2c <z_impl_log_panic+0x6c>)
   13cdc:	f44f 73c4 	mov.w	r3, #392	; 0x188
   13ce0:	f010 fab0 	bl	24244 <assert_print>
   13ce4:	4812      	ldr	r0, [pc, #72]	; (13d30 <z_impl_log_panic+0x70>)
   13ce6:	f010 faad 	bl	24244 <assert_print>
   13cea:	480f      	ldr	r0, [pc, #60]	; (13d28 <z_impl_log_panic+0x68>)
   13cec:	f44f 71c4 	mov.w	r1, #392	; 0x188
   13cf0:	f010 faa1 	bl	24236 <assert_post_action>
	return backend->cb->active;
   13cf4:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   13cf6:	795b      	ldrb	r3, [r3, #5]
   13cf8:	b11b      	cbz	r3, 13d02 <z_impl_log_panic+0x42>
	backend->api->panic(backend);
   13cfa:	6823      	ldr	r3, [r4, #0]
   13cfc:	4620      	mov	r0, r4
   13cfe:	689b      	ldr	r3, [r3, #8]
   13d00:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13d02:	3410      	adds	r4, #16
   13d04:	e7e5      	b.n	13cd2 <z_impl_log_panic+0x12>
   13d06:	d3f5      	bcc.n	13cf4 <z_impl_log_panic+0x34>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
   13d08:	f7ff ff64 	bl	13bd4 <z_impl_log_process>
		while (log_process() == true) {
   13d0c:	2800      	cmp	r0, #0
   13d0e:	d1fb      	bne.n	13d08 <z_impl_log_panic+0x48>
	panic_mode = true;
   13d10:	2301      	movs	r3, #1
   13d12:	702b      	strb	r3, [r5, #0]
}
   13d14:	bd70      	pop	{r4, r5, r6, pc}
   13d16:	bf00      	nop
   13d18:	20002ff6 	.word	0x20002ff6
   13d1c:	000270bc 	.word	0x000270bc
   13d20:	000270dc 	.word	0x000270dc
   13d24:	00028155 	.word	0x00028155
   13d28:	00028104 	.word	0x00028104
   13d2c:	00027c2a 	.word	0x00027c2a
   13d30:	00028176 	.word	0x00028176

00013d34 <log_process_thread_func>:
{
   13d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	STRUCT_SECTION_COUNT(log_backend, &cnt);
   13d38:	4b2f      	ldr	r3, [pc, #188]	; (13df8 <log_process_thread_func+0xc4>)
   13d3a:	4f30      	ldr	r7, [pc, #192]	; (13dfc <log_process_thread_func+0xc8>)
   13d3c:	1afb      	subs	r3, r7, r3
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
   13d3e:	091b      	lsrs	r3, r3, #4
   13d40:	d10b      	bne.n	13d5a <log_process_thread_func+0x26>
   13d42:	492f      	ldr	r1, [pc, #188]	; (13e00 <log_process_thread_func+0xcc>)
   13d44:	4a2f      	ldr	r2, [pc, #188]	; (13e04 <log_process_thread_func+0xd0>)
   13d46:	4830      	ldr	r0, [pc, #192]	; (13e08 <log_process_thread_func+0xd4>)
   13d48:	f44f 7357 	mov.w	r3, #860	; 0x35c
   13d4c:	f010 fa7a 	bl	24244 <assert_print>
   13d50:	f44f 7157 	mov.w	r1, #860	; 0x35c
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13d54:	482b      	ldr	r0, [pc, #172]	; (13e04 <log_process_thread_func+0xd0>)
   13d56:	f010 fa6e 	bl	24236 <assert_post_action>
	uint32_t activate_mask = z_log_init(false, false);
   13d5a:	2100      	movs	r1, #0
   13d5c:	4608      	mov	r0, r1
   13d5e:	f7ff fe01 	bl	13964 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   13d62:	4604      	mov	r4, r0
   13d64:	b340      	cbz	r0, 13db8 <log_process_thread_func+0x84>
   13d66:	f240 6867 	movw	r8, #1639	; 0x667
   13d6a:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
   13d6e:	f00e fbdb 	bl	22528 <z_impl_z_current_get>
	proc_tid = process_tid;
   13d72:	4b26      	ldr	r3, [pc, #152]	; (13e0c <log_process_thread_func+0xd8>)
   13d74:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   13d76:	b130      	cbz	r0, 13d86 <log_process_thread_func+0x52>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   13d78:	4b25      	ldr	r3, [pc, #148]	; (13e10 <log_process_thread_func+0xdc>)
	    process_tid &&
   13d7a:	681b      	ldr	r3, [r3, #0]
   13d7c:	2b09      	cmp	r3, #9
   13d7e:	dd02      	ble.n	13d86 <log_process_thread_func+0x52>
	z_impl_k_sem_give(sem);
   13d80:	4824      	ldr	r0, [pc, #144]	; (13e14 <log_process_thread_func+0xe0>)
   13d82:	f00c fd4b 	bl	2081c <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   13d86:	f8df a08c 	ldr.w	sl, [pc, #140]	; 13e14 <log_process_thread_func+0xe0>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   13d8a:	2500      	movs	r5, #0
		if (activate_mask) {
   13d8c:	b144      	cbz	r4, 13da0 <log_process_thread_func+0x6c>
			activate_mask = activate_foreach_backend(activate_mask);
   13d8e:	4620      	mov	r0, r4
   13d90:	f7ff fdb6 	bl	13900 <activate_foreach_backend>
			if (!activate_mask) {
   13d94:	4604      	mov	r4, r0
   13d96:	b918      	cbnz	r0, 13da0 <log_process_thread_func+0x6c>
				timeout = K_FOREVER;
   13d98:	f04f 38ff 	mov.w	r8, #4294967295
   13d9c:	f04f 39ff 	mov.w	r9, #4294967295
   13da0:	f7ff ff18 	bl	13bd4 <z_impl_log_process>
		if (log_process() == false) {
   13da4:	4606      	mov	r6, r0
   13da6:	b928      	cbnz	r0, 13db4 <log_process_thread_func+0x80>
			if (processed_any) {
   13da8:	b95d      	cbnz	r5, 13dc2 <log_process_thread_func+0x8e>
   13daa:	4642      	mov	r2, r8
   13dac:	464b      	mov	r3, r9
   13dae:	4650      	mov	r0, sl
   13db0:	f00c fd78 	bl	208a4 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
   13db4:	4635      	mov	r5, r6
   13db6:	e7e9      	b.n	13d8c <log_process_thread_func+0x58>
   13db8:	f04f 38ff 	mov.w	r8, #4294967295
   13dbc:	f04f 39ff 	mov.w	r9, #4294967295
   13dc0:	e7d5      	b.n	13d6e <log_process_thread_func+0x3a>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   13dc2:	4d0d      	ldr	r5, [pc, #52]	; (13df8 <log_process_thread_func+0xc4>)
   13dc4:	e008      	b.n	13dd8 <log_process_thread_func+0xa4>
   13dc6:	d2f0      	bcs.n	13daa <log_process_thread_func+0x76>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
   13dc8:	682b      	ldr	r3, [r5, #0]
   13dca:	699b      	ldr	r3, [r3, #24]
   13dcc:	b11b      	cbz	r3, 13dd6 <log_process_thread_func+0xa2>
		backend->api->notify(backend, event, arg);
   13dce:	2200      	movs	r2, #0
   13dd0:	4611      	mov	r1, r2
   13dd2:	4628      	mov	r0, r5
   13dd4:	4798      	blx	r3
   13dd6:	3510      	adds	r5, #16
   13dd8:	42bd      	cmp	r5, r7
   13dda:	d9f4      	bls.n	13dc6 <log_process_thread_func+0x92>
   13ddc:	490e      	ldr	r1, [pc, #56]	; (13e18 <log_process_thread_func+0xe4>)
   13dde:	4a09      	ldr	r2, [pc, #36]	; (13e04 <log_process_thread_func+0xd0>)
   13de0:	4809      	ldr	r0, [pc, #36]	; (13e08 <log_process_thread_func+0xd4>)
   13de2:	f44f 7354 	mov.w	r3, #848	; 0x350
   13de6:	f010 fa2d 	bl	24244 <assert_print>
   13dea:	480c      	ldr	r0, [pc, #48]	; (13e1c <log_process_thread_func+0xe8>)
   13dec:	f010 fa2a 	bl	24244 <assert_print>
   13df0:	f44f 7154 	mov.w	r1, #848	; 0x350
   13df4:	e7ae      	b.n	13d54 <log_process_thread_func+0x20>
   13df6:	bf00      	nop
   13df8:	000270bc 	.word	0x000270bc
   13dfc:	000270dc 	.word	0x000270dc
   13e00:	00028195 	.word	0x00028195
   13e04:	00028104 	.word	0x00028104
   13e08:	00027c2a 	.word	0x00027c2a
   13e0c:	20002c0c 	.word	0x20002c0c
   13e10:	20002c14 	.word	0x20002c14
   13e14:	20000960 	.word	0x20000960
   13e18:	00028155 	.word	0x00028155
   13e1c:	00028176 	.word	0x00028176

00013e20 <z_log_msg_post_finalize>:
{
   13e20:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
   13e22:	482b      	ldr	r0, [pc, #172]	; (13ed0 <z_log_msg_post_finalize+0xb0>)
   13e24:	f010 fb37 	bl	24496 <atomic_inc>
	if (panic_mode) {
   13e28:	4b2a      	ldr	r3, [pc, #168]	; (13ed4 <z_log_msg_post_finalize+0xb4>)
   13e2a:	781b      	ldrb	r3, [r3, #0]
   13e2c:	2b00      	cmp	r3, #0
   13e2e:	d034      	beq.n	13e9a <z_log_msg_post_finalize+0x7a>
	__asm__ volatile(
   13e30:	f04f 0340 	mov.w	r3, #64	; 0x40
   13e34:	f3ef 8411 	mrs	r4, BASEPRI
   13e38:	f383 8812 	msr	BASEPRI_MAX, r3
   13e3c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   13e40:	4825      	ldr	r0, [pc, #148]	; (13ed8 <z_log_msg_post_finalize+0xb8>)
   13e42:	f00c fa3f 	bl	202c4 <z_spin_lock_valid>
   13e46:	b968      	cbnz	r0, 13e64 <z_log_msg_post_finalize+0x44>
   13e48:	4a24      	ldr	r2, [pc, #144]	; (13edc <z_log_msg_post_finalize+0xbc>)
   13e4a:	4925      	ldr	r1, [pc, #148]	; (13ee0 <z_log_msg_post_finalize+0xc0>)
   13e4c:	4825      	ldr	r0, [pc, #148]	; (13ee4 <z_log_msg_post_finalize+0xc4>)
   13e4e:	2394      	movs	r3, #148	; 0x94
   13e50:	f010 f9f8 	bl	24244 <assert_print>
   13e54:	4920      	ldr	r1, [pc, #128]	; (13ed8 <z_log_msg_post_finalize+0xb8>)
   13e56:	4824      	ldr	r0, [pc, #144]	; (13ee8 <z_log_msg_post_finalize+0xc8>)
   13e58:	f010 f9f4 	bl	24244 <assert_print>
   13e5c:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13e5e:	481f      	ldr	r0, [pc, #124]	; (13edc <z_log_msg_post_finalize+0xbc>)
   13e60:	f010 f9e9 	bl	24236 <assert_post_action>
	z_spin_lock_set_owner(l);
   13e64:	481c      	ldr	r0, [pc, #112]	; (13ed8 <z_log_msg_post_finalize+0xb8>)
   13e66:	f00c fa4b 	bl	20300 <z_spin_lock_set_owner>
   13e6a:	f7ff feb3 	bl	13bd4 <z_impl_log_process>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   13e6e:	481a      	ldr	r0, [pc, #104]	; (13ed8 <z_log_msg_post_finalize+0xb8>)
   13e70:	f00c fa36 	bl	202e0 <z_spin_unlock_valid>
   13e74:	b958      	cbnz	r0, 13e8e <z_log_msg_post_finalize+0x6e>
   13e76:	4a19      	ldr	r2, [pc, #100]	; (13edc <z_log_msg_post_finalize+0xbc>)
   13e78:	491c      	ldr	r1, [pc, #112]	; (13eec <z_log_msg_post_finalize+0xcc>)
   13e7a:	481a      	ldr	r0, [pc, #104]	; (13ee4 <z_log_msg_post_finalize+0xc4>)
   13e7c:	23c3      	movs	r3, #195	; 0xc3
   13e7e:	f010 f9e1 	bl	24244 <assert_print>
   13e82:	4915      	ldr	r1, [pc, #84]	; (13ed8 <z_log_msg_post_finalize+0xb8>)
   13e84:	481a      	ldr	r0, [pc, #104]	; (13ef0 <z_log_msg_post_finalize+0xd0>)
   13e86:	f010 f9dd 	bl	24244 <assert_print>
   13e8a:	21c3      	movs	r1, #195	; 0xc3
   13e8c:	e7e7      	b.n	13e5e <z_log_msg_post_finalize+0x3e>
	__asm__ volatile(
   13e8e:	f384 8811 	msr	BASEPRI, r4
   13e92:	f3bf 8f6f 	isb	sy
}
   13e96:	b002      	add	sp, #8
   13e98:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
   13e9a:	4b16      	ldr	r3, [pc, #88]	; (13ef4 <z_log_msg_post_finalize+0xd4>)
   13e9c:	681b      	ldr	r3, [r3, #0]
   13e9e:	2b00      	cmp	r3, #0
   13ea0:	d0f9      	beq.n	13e96 <z_log_msg_post_finalize+0x76>
		if (cnt == 0) {
   13ea2:	b950      	cbnz	r0, 13eba <z_log_msg_post_finalize+0x9a>
	z_impl_k_timer_start(timer, duration, period);
   13ea4:	2200      	movs	r2, #0
   13ea6:	2300      	movs	r3, #0
   13ea8:	e9cd 2300 	strd	r2, r3, [sp]
   13eac:	4812      	ldr	r0, [pc, #72]	; (13ef8 <z_log_msg_post_finalize+0xd8>)
   13eae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   13eb2:	2300      	movs	r3, #0
   13eb4:	f00e ff96 	bl	22de4 <z_impl_k_timer_start>
   13eb8:	e7ed      	b.n	13e96 <z_log_msg_post_finalize+0x76>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   13eba:	2809      	cmp	r0, #9
   13ebc:	d1eb      	bne.n	13e96 <z_log_msg_post_finalize+0x76>
	z_impl_k_timer_stop(timer);
   13ebe:	480e      	ldr	r0, [pc, #56]	; (13ef8 <z_log_msg_post_finalize+0xd8>)
   13ec0:	f012 fe55 	bl	26b6e <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   13ec4:	480d      	ldr	r0, [pc, #52]	; (13efc <z_log_msg_post_finalize+0xdc>)
}
   13ec6:	b002      	add	sp, #8
   13ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13ecc:	f00c bca6 	b.w	2081c <z_impl_k_sem_give>
   13ed0:	20002c14 	.word	0x20002c14
   13ed4:	20002ff6 	.word	0x20002ff6
   13ed8:	20002c04 	.word	0x20002c04
   13edc:	0002801e 	.word	0x0002801e
   13ee0:	00028077 	.word	0x00028077
   13ee4:	00027c2a 	.word	0x00027c2a
   13ee8:	0002808c 	.word	0x0002808c
   13eec:	0002804b 	.word	0x0002804b
   13ef0:	00028062 	.word	0x00028062
   13ef4:	20002c0c 	.word	0x20002c0c
   13ef8:	20001b50 	.word	0x20001b50
   13efc:	20000960 	.word	0x20000960

00013f00 <z_log_msg_commit>:
{
   13f00:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
   13f02:	4b06      	ldr	r3, [pc, #24]	; (13f1c <z_log_msg_commit+0x1c>)
   13f04:	681b      	ldr	r3, [r3, #0]
{
   13f06:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   13f08:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
   13f0a:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
   13f0c:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
   13f0e:	4804      	ldr	r0, [pc, #16]	; (13f20 <z_log_msg_commit+0x20>)
   13f10:	f7ff fb78 	bl	13604 <mpsc_pbuf_commit>
}
   13f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
   13f18:	f7ff bf82 	b.w	13e20 <z_log_msg_post_finalize>
   13f1c:	200005f0 	.word	0x200005f0
   13f20:	20000878 	.word	0x20000878

00013f24 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)TYPE_SECTION_START(log_const))/
   13f24:	4a04      	ldr	r2, [pc, #16]	; (13f38 <log_source_name_get+0x14>)
   13f26:	4b05      	ldr	r3, [pc, #20]	; (13f3c <log_source_name_get+0x18>)
   13f28:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
   13f2a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return TYPE_SECTION_START(log_const)[source_id].name;
   13f2e:	bf34      	ite	cc
   13f30:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
   13f34:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
   13f36:	4770      	bx	lr
   13f38:	00026fc4 	.word	0x00026fc4
   13f3c:	000270bc 	.word	0x000270bc

00013f40 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   13f40:	4b0e      	ldr	r3, [pc, #56]	; (13f7c <log_backend_enable+0x3c>)
   13f42:	1ac3      	subs	r3, r0, r3
   13f44:	111b      	asrs	r3, r3, #4
   13f46:	3301      	adds	r3, #1
{
   13f48:	b510      	push	{r4, lr}

	log_backend_id_set(backend, id);
   13f4a:	b2db      	uxtb	r3, r3
	__ASSERT_NO_MSG(backend != NULL);
   13f4c:	b948      	cbnz	r0, 13f62 <log_backend_enable+0x22>
   13f4e:	490c      	ldr	r1, [pc, #48]	; (13f80 <log_backend_enable+0x40>)
   13f50:	480c      	ldr	r0, [pc, #48]	; (13f84 <log_backend_enable+0x44>)
   13f52:	4a0d      	ldr	r2, [pc, #52]	; (13f88 <log_backend_enable+0x48>)
   13f54:	23df      	movs	r3, #223	; 0xdf
   13f56:	f010 f975 	bl	24244 <assert_print>
   13f5a:	480b      	ldr	r0, [pc, #44]	; (13f88 <log_backend_enable+0x48>)
   13f5c:	21df      	movs	r1, #223	; 0xdf
   13f5e:	f010 f96a 	bl	24236 <assert_post_action>
	backend->cb->id = id;
   13f62:	6844      	ldr	r4, [r0, #4]
   13f64:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
   13f66:	6843      	ldr	r3, [r0, #4]
   13f68:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
   13f6a:	6843      	ldr	r3, [r0, #4]
   13f6c:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   13f6e:	6843      	ldr	r3, [r0, #4]
   13f70:	2201      	movs	r2, #1
   13f72:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
   13f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_notify_backend_enabled();
   13f78:	f7ff bd80 	b.w	13a7c <z_log_notify_backend_enabled>
   13f7c:	000270bc 	.word	0x000270bc
   13f80:	00028235 	.word	0x00028235
   13f84:	00027c2a 	.word	0x00027c2a
   13f88:	000281fd 	.word	0x000281fd

00013f8c <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
   13f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f90:	b08f      	sub	sp, #60	; 0x3c
   13f92:	af04      	add	r7, sp, #16
   13f94:	f3c1 284a 	ubfx	r8, r1, #9, #11
   13f98:	60b8      	str	r0, [r7, #8]
   13f9a:	460d      	mov	r5, r1
   13f9c:	4691      	mov	r9, r2
   13f9e:	607b      	str	r3, [r7, #4]

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
   13fa0:	0d0c      	lsrs	r4, r1, #20
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
   13fa2:	f1b8 0f00 	cmp.w	r8, #0
   13fa6:	d066      	beq.n	14076 <z_impl_z_log_msg_static_create+0xea>
	struct z_cbprintf_buf_desc buf_desc = {
   13fa8:	2600      	movs	r6, #0
	return cbprintf_package_convert(in_packaged, in_len,
   13faa:	f107 0314 	add.w	r3, r7, #20
   13fae:	f04f 0b04 	mov.w	fp, #4
   13fb2:	f04f 0a0a 	mov.w	sl, #10
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
   13fb6:	f8c7 800c 	str.w	r8, [r7, #12]
	struct z_cbprintf_buf_desc buf_desc = {
   13fba:	e9c7 6607 	strd	r6, r6, [r7, #28]
   13fbe:	627e      	str	r6, [r7, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
   13fc0:	9301      	str	r3, [sp, #4]
   13fc2:	f8cd b008 	str.w	fp, [sp, #8]
   13fc6:	f8cd a000 	str.w	sl, [sp]
   13fca:	f107 031c 	add.w	r3, r7, #28
   13fce:	68f9      	ldr	r1, [r7, #12]
   13fd0:	4632      	mov	r2, r6
   13fd2:	4648      	mov	r0, r9
   13fd4:	f7fe fbb4 	bl	12740 <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
   13fd8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   13fdc:	4603      	mov	r3, r0
   13fde:	d31c      	bcc.n	1401a <z_impl_z_log_msg_static_create+0x8e>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
   13fe0:	466c      	mov	r4, sp
   13fe2:	b08a      	sub	sp, #40	; 0x28
   13fe4:	f8d9 1004 	ldr.w	r1, [r9, #4]
   13fe8:	ab04      	add	r3, sp, #16
   13fea:	482b      	ldr	r0, [pc, #172]	; (14098 <z_impl_z_log_msg_static_create+0x10c>)
   13fec:	e9c3 0105 	strd	r0, r1, [r3, #20]
   13ff0:	f240 71ff 	movw	r1, #2047	; 0x7ff
   13ff4:	61d9      	str	r1, [r3, #28]
   13ff6:	461a      	mov	r2, r3
   13ff8:	f44f 7100 	mov.w	r1, #512	; 0x200
   13ffc:	8419      	strh	r1, [r3, #32]
   13ffe:	4b27      	ldr	r3, [pc, #156]	; (1409c <z_impl_z_log_msg_static_create+0x110>)
   14000:	f842 3f10 	str.w	r3, [r2, #16]!
   14004:	4826      	ldr	r0, [pc, #152]	; (140a0 <z_impl_z_log_msg_static_create+0x114>)
   14006:	4633      	mov	r3, r6
   14008:	f44f 5112 	mov.w	r1, #9344	; 0x2480
   1400c:	f7ff ffbe 	bl	13f8c <z_impl_z_log_msg_static_create>
   14010:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
   14012:	372c      	adds	r7, #44	; 0x2c
   14014:	46bd      	mov	sp, r7
   14016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_desc.package_len = len;
   1401a:	f3c0 080a 	ubfx	r8, r0, #0, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   1401e:	f104 0017 	add.w	r0, r4, #23
   14022:	4418      	add	r0, r3
   14024:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   14028:	0880      	lsrs	r0, r0, #2
   1402a:	603b      	str	r3, [r7, #0]
   1402c:	f7ff fdb6 	bl	13b9c <z_log_msg_alloc>
   14030:	f368 2553 	bfi	r5, r8, #9, #11
		if (msg) {
   14034:	4604      	mov	r4, r0
   14036:	b330      	cbz	r0, 14086 <z_impl_z_log_msg_static_create+0xfa>
	struct z_cbprintf_buf_desc buf_desc = {
   14038:	683b      	ldr	r3, [r7, #0]
	return cbprintf_package_convert(in_packaged, in_len,
   1403a:	4a1a      	ldr	r2, [pc, #104]	; (140a4 <z_impl_z_log_msg_static_create+0x118>)
	struct z_cbprintf_buf_desc buf_desc = {
   1403c:	e9c7 3608 	strd	r3, r6, [r7, #32]
						    msg->data, out_desc.package_len,
   14040:	f100 0110 	add.w	r1, r0, #16
	return cbprintf_package_convert(in_packaged, in_len,
   14044:	f107 0314 	add.w	r3, r7, #20
	struct z_cbprintf_buf_desc buf_desc = {
   14048:	61f9      	str	r1, [r7, #28]
	return cbprintf_package_convert(in_packaged, in_len,
   1404a:	e9cd a300 	strd	sl, r3, [sp]
   1404e:	f8cd b008 	str.w	fp, [sp, #8]
   14052:	68f9      	ldr	r1, [r7, #12]
   14054:	f107 031c 	add.w	r3, r7, #28
   14058:	4648      	mov	r0, r9
   1405a:	f7fe fb71 	bl	12740 <cbprintf_package_convert>
			__ASSERT_NO_MSG(len >= 0);
   1405e:	2800      	cmp	r0, #0
   14060:	da11      	bge.n	14086 <z_impl_z_log_msg_static_create+0xfa>
   14062:	4911      	ldr	r1, [pc, #68]	; (140a8 <z_impl_z_log_msg_static_create+0x11c>)
   14064:	4811      	ldr	r0, [pc, #68]	; (140ac <z_impl_z_log_msg_static_create+0x120>)
   14066:	4a12      	ldr	r2, [pc, #72]	; (140b0 <z_impl_z_log_msg_static_create+0x124>)
   14068:	2356      	movs	r3, #86	; 0x56
   1406a:	f010 f8eb 	bl	24244 <assert_print>
   1406e:	4810      	ldr	r0, [pc, #64]	; (140b0 <z_impl_z_log_msg_static_create+0x124>)
   14070:	2156      	movs	r1, #86	; 0x56
   14072:	f010 f8e0 	bl	24236 <assert_post_action>
   14076:	f104 0017 	add.w	r0, r4, #23
   1407a:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
   1407e:	0880      	lsrs	r0, r0, #2
   14080:	f7ff fd8c 	bl	13b9c <z_log_msg_alloc>
   14084:	4604      	mov	r4, r0
	z_log_msg_finalize(msg, source, out_desc, data);
   14086:	f368 2553 	bfi	r5, r8, #9, #11
   1408a:	687b      	ldr	r3, [r7, #4]
   1408c:	68b9      	ldr	r1, [r7, #8]
   1408e:	462a      	mov	r2, r5
   14090:	4620      	mov	r0, r4
   14092:	f010 fa36 	bl	24502 <z_log_msg_finalize>
   14096:	e7bc      	b.n	14012 <z_impl_z_log_msg_static_create+0x86>
   14098:	00028255 	.word	0x00028255
   1409c:	01000004 	.word	0x01000004
   140a0:	0002706c 	.word	0x0002706c
   140a4:	000244d7 	.word	0x000244d7
   140a8:	000282c1 	.word	0x000282c1
   140ac:	00027c2a 	.word	0x00027c2a
   140b0:	00028294 	.word	0x00028294

000140b4 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   140b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140b8:	b087      	sub	sp, #28
   140ba:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
   140be:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
   140c2:	4604      	mov	r4, r0
   140c4:	460f      	mov	r7, r1
   140c6:	4693      	mov	fp, r2
   140c8:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
   140ca:	b1ae      	cbz	r6, 140f8 <z_impl_z_log_msg_runtime_vcreate+0x44>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
   140cc:	2110      	movs	r1, #16
   140ce:	f8cd 9000 	str.w	r9, [sp]
   140d2:	4633      	mov	r3, r6
   140d4:	4652      	mov	r2, sl
   140d6:	2000      	movs	r0, #0
		va_copy(ap2, ap);
   140d8:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
   140dc:	f7fe f914 	bl	12308 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
   140e0:	1e01      	subs	r1, r0, #0
   140e2:	da0a      	bge.n	140fa <z_impl_z_log_msg_runtime_vcreate+0x46>
   140e4:	491f      	ldr	r1, [pc, #124]	; (14164 <z_impl_z_log_msg_runtime_vcreate+0xb0>)
   140e6:	4a20      	ldr	r2, [pc, #128]	; (14168 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
   140e8:	4820      	ldr	r0, [pc, #128]	; (1416c <z_impl_z_log_msg_runtime_vcreate+0xb8>)
   140ea:	2375      	movs	r3, #117	; 0x75
   140ec:	f010 f8aa 	bl	24244 <assert_print>
   140f0:	2175      	movs	r1, #117	; 0x75
		pkg = msg->data;
	}

	if (pkg && fmt) {
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
		__ASSERT_NO_MSG(plen >= 0);
   140f2:	481d      	ldr	r0, [pc, #116]	; (14168 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
   140f4:	f010 f89f 	bl	24236 <assert_post_action>
		plen = 0;
   140f8:	4631      	mov	r1, r6
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   140fa:	f105 0017 	add.w	r0, r5, #23
   140fe:	4408      	add	r0, r1
	struct log_msg_desc desc =
   14100:	4b1b      	ldr	r3, [pc, #108]	; (14170 <z_impl_z_log_msg_runtime_vcreate+0xbc>)
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   14102:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
   14104:	f004 0407 	and.w	r4, r4, #7
   14108:	f00b 0b07 	and.w	fp, fp, #7
   1410c:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
   1410e:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
   14112:	ea03 2341 	and.w	r3, r3, r1, lsl #9
   14116:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
		msg = z_log_msg_alloc(msg_wlen);
   1411a:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
   1411c:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
   1411e:	f7ff fd3d 	bl	13b9c <z_log_msg_alloc>
	struct log_msg_desc desc =
   14122:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
			pkg = msg ? msg->data : NULL;
   14126:	4605      	mov	r5, r0
   14128:	b190      	cbz	r0, 14150 <z_impl_z_log_msg_runtime_vcreate+0x9c>
	if (pkg && fmt) {
   1412a:	b18e      	cbz	r6, 14150 <z_impl_z_log_msg_runtime_vcreate+0x9c>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   1412c:	9903      	ldr	r1, [sp, #12]
   1412e:	f8cd 9000 	str.w	r9, [sp]
   14132:	4633      	mov	r3, r6
   14134:	4652      	mov	r2, sl
   14136:	3010      	adds	r0, #16
   14138:	f7fe f8e6 	bl	12308 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
   1413c:	2800      	cmp	r0, #0
   1413e:	da07      	bge.n	14150 <z_impl_z_log_msg_runtime_vcreate+0x9c>
   14140:	4908      	ldr	r1, [pc, #32]	; (14164 <z_impl_z_log_msg_runtime_vcreate+0xb0>)
   14142:	4a09      	ldr	r2, [pc, #36]	; (14168 <z_impl_z_log_msg_runtime_vcreate+0xb4>)
   14144:	4809      	ldr	r0, [pc, #36]	; (1416c <z_impl_z_log_msg_runtime_vcreate+0xb8>)
   14146:	238f      	movs	r3, #143	; 0x8f
   14148:	f010 f87c 	bl	24244 <assert_print>
   1414c:	218f      	movs	r1, #143	; 0x8f
   1414e:	e7d0      	b.n	140f2 <z_impl_z_log_msg_runtime_vcreate+0x3e>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   14150:	4643      	mov	r3, r8
   14152:	4622      	mov	r2, r4
   14154:	4639      	mov	r1, r7
   14156:	4628      	mov	r0, r5
	}
}
   14158:	b007      	add	sp, #28
   1415a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
   1415e:	f010 b9d0 	b.w	24502 <z_log_msg_finalize>
   14162:	bf00      	nop
   14164:	000282c0 	.word	0x000282c0
   14168:	00028294 	.word	0x00028294
   1416c:	00027c2a 	.word	0x00027c2a
   14170:	000ffe00 	.word	0x000ffe00

00014174 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   14174:	b40e      	push	{r1, r2, r3}
   14176:	b503      	push	{r0, r1, lr}
   14178:	ab03      	add	r3, sp, #12
   1417a:	4601      	mov	r1, r0
   1417c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   14180:	4804      	ldr	r0, [pc, #16]	; (14194 <print_formatted+0x20>)
	va_start(args, fmt);
   14182:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   14184:	f010 f9e3 	bl	2454e <cbvprintf>
	va_end(args);

	return length;
}
   14188:	b002      	add	sp, #8
   1418a:	f85d eb04 	ldr.w	lr, [sp], #4
   1418e:	b003      	add	sp, #12
   14190:	4770      	bx	lr
   14192:	bf00      	nop
   14194:	000141b5 	.word	0x000141b5

00014198 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   14198:	06ca      	lsls	r2, r1, #27
   1419a:	d405      	bmi.n	141a8 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   1419c:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
   1419e:	bf4c      	ite	mi
   141a0:	4902      	ldrmi	r1, [pc, #8]	; (141ac <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
   141a2:	4903      	ldrpl	r1, [pc, #12]	; (141b0 <newline_print+0x18>)
   141a4:	f7ff bfe6 	b.w	14174 <print_formatted>
	}
}
   141a8:	4770      	bx	lr
   141aa:	bf00      	nop
   141ac:	0002a221 	.word	0x0002a221
   141b0:	000282ca 	.word	0x000282ca

000141b4 <out_func>:
{
   141b4:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   141b6:	684b      	ldr	r3, [r1, #4]
   141b8:	681a      	ldr	r2, [r3, #0]
   141ba:	68cb      	ldr	r3, [r1, #12]
   141bc:	429a      	cmp	r2, r3
{
   141be:	4605      	mov	r5, r0
   141c0:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   141c2:	d102      	bne.n	141ca <out_func+0x16>
		log_output_flush(out_ctx);
   141c4:	4608      	mov	r0, r1
   141c6:	f010 f9c9 	bl	2455c <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   141ca:	6863      	ldr	r3, [r4, #4]
   141cc:	f3bf 8f5b 	dmb	ish
   141d0:	e853 2f00 	ldrex	r2, [r3]
   141d4:	1c51      	adds	r1, r2, #1
   141d6:	e843 1000 	strex	r0, r1, [r3]
   141da:	2800      	cmp	r0, #0
   141dc:	d1f8      	bne.n	141d0 <out_func+0x1c>
   141de:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   141e2:	68a3      	ldr	r3, [r4, #8]
   141e4:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
   141e6:	6863      	ldr	r3, [r4, #4]
   141e8:	681a      	ldr	r2, [r3, #0]
   141ea:	68e3      	ldr	r3, [r4, #12]
   141ec:	429a      	cmp	r2, r3
   141ee:	d909      	bls.n	14204 <out_func+0x50>
   141f0:	4905      	ldr	r1, [pc, #20]	; (14208 <out_func+0x54>)
   141f2:	4806      	ldr	r0, [pc, #24]	; (1420c <out_func+0x58>)
   141f4:	4a06      	ldr	r2, [pc, #24]	; (14210 <out_func+0x5c>)
   141f6:	237a      	movs	r3, #122	; 0x7a
   141f8:	f010 f824 	bl	24244 <assert_print>
   141fc:	4804      	ldr	r0, [pc, #16]	; (14210 <out_func+0x5c>)
   141fe:	217a      	movs	r1, #122	; 0x7a
   14200:	f010 f819 	bl	24236 <assert_post_action>
}
   14204:	2000      	movs	r0, #0
   14206:	bd38      	pop	{r3, r4, r5, pc}
   14208:	000282fc 	.word	0x000282fc
   1420c:	00027c2a 	.word	0x00027c2a
   14210:	000282cd 	.word	0x000282cd

00014214 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   14214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14218:	b08b      	sub	sp, #44	; 0x2c
   1421a:	469b      	mov	fp, r3
   1421c:	e9dd 9315 	ldrd	r9, r3, [sp, #84]	; 0x54
   14220:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
   14224:	9306      	str	r3, [sp, #24]
   14226:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   14228:	9e18      	ldr	r6, [sp, #96]	; 0x60
   1422a:	9208      	str	r2, [sp, #32]
   1422c:	4604      	mov	r4, r0
   1422e:	460d      	mov	r5, r1
   14230:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
   14232:	2f00      	cmp	r7, #0
   14234:	f000 8094 	beq.w	14360 <log_output_process+0x14c>
	__ASSERT_NO_MSG(level <= LOG_LEVEL_DBG);
   14238:	2f04      	cmp	r7, #4
   1423a:	d90b      	bls.n	14254 <log_output_process+0x40>
   1423c:	4998      	ldr	r1, [pc, #608]	; (144a0 <log_output_process+0x28c>)
   1423e:	4a99      	ldr	r2, [pc, #612]	; (144a4 <log_output_process+0x290>)
   14240:	4899      	ldr	r0, [pc, #612]	; (144a8 <log_output_process+0x294>)
   14242:	f240 13b3 	movw	r3, #435	; 0x1b3
   14246:	f00f fffd 	bl	24244 <assert_print>
   1424a:	f240 11b3 	movw	r1, #435	; 0x1b3

	if (package) {
		int err = cbpprintf(cb, (void *)output, (void *)package);

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
   1424e:	4895      	ldr	r0, [pc, #596]	; (144a4 <log_output_process+0x290>)
   14250:	f00f fff1 	bl	24236 <assert_post_action>
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   14254:	f006 0301 	and.w	r3, r6, #1
   14258:	9309      	str	r3, [sp, #36]	; 0x24
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   1425a:	f006 0308 	and.w	r3, r6, #8
   1425e:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
   14260:	f010 f937 	bl	244d2 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   14264:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
   14268:	4602      	mov	r2, r0
   1426a:	2800      	cmp	r0, #0
   1426c:	d048      	beq.n	14300 <log_output_process+0xec>
		length += print_formatted(output, "%s ", tag);
   1426e:	498f      	ldr	r1, [pc, #572]	; (144ac <log_output_process+0x298>)
   14270:	4620      	mov	r0, r4
   14272:	f7ff ff7f 	bl	14174 <print_formatted>
   14276:	4680      	mov	r8, r0
	if (stamp) {
   14278:	f1ba 0f00 	cmp.w	sl, #0
   1427c:	d008      	beq.n	14290 <log_output_process+0x7c>
	if (!format) {
   1427e:	f016 0f44 	tst.w	r6, #68	; 0x44
   14282:	d13f      	bne.n	14304 <log_output_process+0xf0>
		length = print_formatted(output, "[%08lu] ", timestamp);
   14284:	498a      	ldr	r1, [pc, #552]	; (144b0 <log_output_process+0x29c>)
   14286:	462a      	mov	r2, r5
   14288:	4620      	mov	r0, r4
   1428a:	f7ff ff73 	bl	14174 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   1428e:	4480      	add	r8, r0
	if (color) {
   14290:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14292:	b153      	cbz	r3, 142aa <log_output_process+0x96>
		const char *log_color = start && (colors[level] != NULL) ?
   14294:	4b87      	ldr	r3, [pc, #540]	; (144b4 <log_output_process+0x2a0>)
		print_formatted(output, "%s", log_color);
   14296:	4988      	ldr	r1, [pc, #544]	; (144b8 <log_output_process+0x2a4>)
		const char *log_color = start && (colors[level] != NULL) ?
   14298:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(output, "%s", log_color);
   1429c:	4b87      	ldr	r3, [pc, #540]	; (144bc <log_output_process+0x2a8>)
   1429e:	4620      	mov	r0, r4
   142a0:	2a00      	cmp	r2, #0
   142a2:	bf08      	it	eq
   142a4:	461a      	moveq	r2, r3
   142a6:	f7ff ff65 	bl	14174 <print_formatted>
	if (level_on) {
   142aa:	9b07      	ldr	r3, [sp, #28]
   142ac:	2b00      	cmp	r3, #0
   142ae:	d055      	beq.n	1435c <log_output_process+0x148>
		total += print_formatted(output, "<%s> ", severity[level]);
   142b0:	4b83      	ldr	r3, [pc, #524]	; (144c0 <log_output_process+0x2ac>)
   142b2:	4984      	ldr	r1, [pc, #528]	; (144c4 <log_output_process+0x2b0>)
   142b4:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
   142b8:	4620      	mov	r0, r4
   142ba:	f7ff ff5b 	bl	14174 <print_formatted>
   142be:	4605      	mov	r5, r0
	if (domain) {
   142c0:	9b08      	ldr	r3, [sp, #32]
   142c2:	b12b      	cbz	r3, 142d0 <log_output_process+0xbc>
		total += print_formatted(output, "%s/", domain);
   142c4:	4980      	ldr	r1, [pc, #512]	; (144c8 <log_output_process+0x2b4>)
   142c6:	461a      	mov	r2, r3
   142c8:	4620      	mov	r0, r4
   142ca:	f7ff ff53 	bl	14174 <print_formatted>
   142ce:	4405      	add	r5, r0
	if (source) {
   142d0:	f1bb 0f00 	cmp.w	fp, #0
   142d4:	d005      	beq.n	142e2 <log_output_process+0xce>
		total += print_formatted(output,
   142d6:	497d      	ldr	r1, [pc, #500]	; (144cc <log_output_process+0x2b8>)
   142d8:	465a      	mov	r2, fp
   142da:	4620      	mov	r0, r4
   142dc:	f7ff ff4a 	bl	14174 <print_formatted>
   142e0:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
   142e2:	4445      	add	r5, r8
	if (package) {
   142e4:	f1b9 0f00 	cmp.w	r9, #0
   142e8:	d14b      	bne.n	14382 <log_output_process+0x16e>
	}

	if (data_len) {
   142ea:	9b05      	ldr	r3, [sp, #20]
   142ec:	2b00      	cmp	r3, #0
   142ee:	d160      	bne.n	143b2 <log_output_process+0x19e>
	if (color) {
   142f0:	07f3      	lsls	r3, r6, #31
   142f2:	f100 80cf 	bmi.w	14494 <log_output_process+0x280>
	newline_print(output, flags);
   142f6:	4631      	mov	r1, r6
   142f8:	4620      	mov	r0, r4
   142fa:	f7ff ff4d 	bl	14198 <newline_print>
}
   142fe:	e0c3      	b.n	14488 <log_output_process+0x274>
	uint32_t length = 0U;
   14300:	4680      	mov	r8, r0
   14302:	e7b9      	b.n	14278 <log_output_process+0x64>
	} else if (freq != 0U) {
   14304:	4b72      	ldr	r3, [pc, #456]	; (144d0 <log_output_process+0x2bc>)
   14306:	6818      	ldr	r0, [r3, #0]
   14308:	2800      	cmp	r0, #0
   1430a:	d0c0      	beq.n	1428e <log_output_process+0x7a>
		timestamp /= timestamp_div;
   1430c:	4b71      	ldr	r3, [pc, #452]	; (144d4 <log_output_process+0x2c0>)
		ms = (remainder * 1000U) / freq;
   1430e:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
   14312:	681b      	ldr	r3, [r3, #0]
   14314:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
   14318:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   1431c:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
   14320:	fb00 5513 	mls	r5, r0, r3, r5
   14324:	fbb3 faf2 	udiv	sl, r3, r2
		ms = (remainder * 1000U) / freq;
   14328:	fb0e f505 	mul.w	r5, lr, r5
   1432c:	fb02 321a 	mls	r2, r2, sl, r3
		mins = seconds / 60U;
   14330:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   14332:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
   14336:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1433a:	fb00 551c 	mls	r5, r0, ip, r5
				length = print_formatted(output,
   1433e:	fb01 2213 	mls	r2, r1, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   14342:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
   14346:	9200      	str	r2, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   14348:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
   1434c:	4962      	ldr	r1, [pc, #392]	; (144d8 <log_output_process+0x2c4>)
   1434e:	e9cd c501 	strd	ip, r5, [sp, #4]
   14352:	4652      	mov	r2, sl
   14354:	4620      	mov	r0, r4
   14356:	f7ff ff0d 	bl	14174 <print_formatted>
   1435a:	e798      	b.n	1428e <log_output_process+0x7a>
	int total = 0;
   1435c:	9d07      	ldr	r5, [sp, #28]
   1435e:	e7af      	b.n	142c0 <log_output_process+0xac>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   14360:	f1bb 0f01 	cmp.w	fp, #1
   14364:	d108      	bne.n	14378 <log_output_process+0x164>
	if (package) {
   14366:	f1b9 0f00 	cmp.w	r9, #0
   1436a:	d11c      	bne.n	143a6 <log_output_process+0x192>
	if (data_len) {
   1436c:	9b05      	ldr	r3, [sp, #20]
   1436e:	2b00      	cmp	r3, #0
   14370:	f000 808a 	beq.w	14488 <log_output_process+0x274>
		prefix_offset = 0;
   14374:	2500      	movs	r5, #0
   14376:	e01c      	b.n	143b2 <log_output_process+0x19e>
	if (package) {
   14378:	f1b9 0f00 	cmp.w	r9, #0
   1437c:	d0f6      	beq.n	1436c <log_output_process+0x158>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   1437e:	4857      	ldr	r0, [pc, #348]	; (144dc <log_output_process+0x2c8>)
   14380:	e012      	b.n	143a8 <log_output_process+0x194>
		cb = out_func;
   14382:	4857      	ldr	r0, [pc, #348]	; (144e0 <log_output_process+0x2cc>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   14384:	4957      	ldr	r1, [pc, #348]	; (144e4 <log_output_process+0x2d0>)
   14386:	464b      	mov	r3, r9
   14388:	4622      	mov	r2, r4
   1438a:	f00f fcb7 	bl	23cfc <cbpprintf_external>
		__ASSERT_NO_MSG(err >= 0);
   1438e:	2800      	cmp	r0, #0
   14390:	da0c      	bge.n	143ac <log_output_process+0x198>
   14392:	4955      	ldr	r1, [pc, #340]	; (144e8 <log_output_process+0x2d4>)
   14394:	4a43      	ldr	r2, [pc, #268]	; (144a4 <log_output_process+0x290>)
   14396:	4844      	ldr	r0, [pc, #272]	; (144a8 <log_output_process+0x294>)
   14398:	f240 2309 	movw	r3, #521	; 0x209
   1439c:	f00f ff52 	bl	24244 <assert_print>
   143a0:	f240 2109 	movw	r1, #521	; 0x209
   143a4:	e753      	b.n	1424e <log_output_process+0x3a>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   143a6:	484e      	ldr	r0, [pc, #312]	; (144e0 <log_output_process+0x2cc>)
		prefix_offset = 0;
   143a8:	463d      	mov	r5, r7
   143aa:	e7eb      	b.n	14384 <log_output_process+0x170>
	if (data_len) {
   143ac:	9b05      	ldr	r3, [sp, #20]
   143ae:	2b00      	cmp	r3, #0
   143b0:	d067      	beq.n	14482 <log_output_process+0x26e>
		print_formatted(output, " ");
   143b2:	f8df 9144 	ldr.w	r9, [pc, #324]	; 144f8 <log_output_process+0x2e4>
			print_formatted(output, "%02x ", data[i]);
   143b6:	f8df a144 	ldr.w	sl, [pc, #324]	; 144fc <log_output_process+0x2e8>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   143ba:	9b05      	ldr	r3, [sp, #20]
   143bc:	2b10      	cmp	r3, #16
   143be:	bf28      	it	cs
   143c0:	2310      	movcs	r3, #16
	newline_print(output, flags);
   143c2:	4631      	mov	r1, r6
   143c4:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   143c6:	4698      	mov	r8, r3
	newline_print(output, flags);
   143c8:	f7ff fee6 	bl	14198 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
   143cc:	f04f 0b00 	mov.w	fp, #0
   143d0:	455d      	cmp	r5, fp
   143d2:	dc42      	bgt.n	1445a <log_output_process+0x246>
			print_formatted(output, "%02x ", data[i]);
   143d4:	9b06      	ldr	r3, [sp, #24]
   143d6:	4651      	mov	r1, sl
   143d8:	781a      	ldrb	r2, [r3, #0]
   143da:	4620      	mov	r0, r4
   143dc:	f7ff feca 	bl	14174 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   143e0:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
   143e4:	f01b 0f07 	tst.w	fp, #7
   143e8:	d103      	bne.n	143f2 <log_output_process+0x1de>
			print_formatted(output, " ");
   143ea:	4649      	mov	r1, r9
   143ec:	4620      	mov	r0, r4
   143ee:	f7ff fec1 	bl	14174 <print_formatted>
		if (i < length) {
   143f2:	45d8      	cmp	r8, fp
   143f4:	d938      	bls.n	14468 <log_output_process+0x254>
			print_formatted(output, "%02x ", data[i]);
   143f6:	9b06      	ldr	r3, [sp, #24]
   143f8:	4651      	mov	r1, sl
   143fa:	f813 200b 	ldrb.w	r2, [r3, fp]
   143fe:	4620      	mov	r0, r4
   14400:	f7ff feb8 	bl	14174 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   14404:	f10b 0b01 	add.w	fp, fp, #1
   14408:	f1bb 0f10 	cmp.w	fp, #16
   1440c:	d1ea      	bne.n	143e4 <log_output_process+0x1d0>
	print_formatted(output, "|");
   1440e:	4937      	ldr	r1, [pc, #220]	; (144ec <log_output_process+0x2d8>)
   14410:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   14412:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
   14416:	f7ff fead 	bl	14174 <print_formatted>
		if (i < length) {
   1441a:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
   1441c:	9b06      	ldr	r3, [sp, #24]
   1441e:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
   14420:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
   14424:	295f      	cmp	r1, #95	; 0x5f
   14426:	bf28      	it	cs
   14428:	222e      	movcs	r2, #46	; 0x2e
   1442a:	4931      	ldr	r1, [pc, #196]	; (144f0 <log_output_process+0x2dc>)
   1442c:	4620      	mov	r0, r4
   1442e:	f7ff fea1 	bl	14174 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   14432:	f10b 0b01 	add.w	fp, fp, #1
   14436:	f1bb 0f10 	cmp.w	fp, #16
   1443a:	d01a      	beq.n	14472 <log_output_process+0x25e>
		if (i > 0 && !(i % 8)) {
   1443c:	f01b 0f07 	tst.w	fp, #7
   14440:	d103      	bne.n	1444a <log_output_process+0x236>
			print_formatted(output, " ");
   14442:	4649      	mov	r1, r9
   14444:	4620      	mov	r0, r4
   14446:	f7ff fe95 	bl	14174 <print_formatted>
		if (i < length) {
   1444a:	45d8      	cmp	r8, fp
   1444c:	465a      	mov	r2, fp
   1444e:	d8e5      	bhi.n	1441c <log_output_process+0x208>
			print_formatted(output, " ");
   14450:	4649      	mov	r1, r9
   14452:	4620      	mov	r0, r4
   14454:	f7ff fe8e 	bl	14174 <print_formatted>
   14458:	e7eb      	b.n	14432 <log_output_process+0x21e>
		print_formatted(output, " ");
   1445a:	4649      	mov	r1, r9
   1445c:	4620      	mov	r0, r4
   1445e:	f7ff fe89 	bl	14174 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   14462:	f10b 0b01 	add.w	fp, fp, #1
   14466:	e7b3      	b.n	143d0 <log_output_process+0x1bc>
			print_formatted(output, "   ");
   14468:	4922      	ldr	r1, [pc, #136]	; (144f4 <log_output_process+0x2e0>)
   1446a:	4620      	mov	r0, r4
   1446c:	f7ff fe82 	bl	14174 <print_formatted>
   14470:	e7c8      	b.n	14404 <log_output_process+0x1f0>
		data += length;
   14472:	9b06      	ldr	r3, [sp, #24]
   14474:	4443      	add	r3, r8
   14476:	9306      	str	r3, [sp, #24]
	} while (len);
   14478:	9b05      	ldr	r3, [sp, #20]
   1447a:	ebb3 0308 	subs.w	r3, r3, r8
   1447e:	9305      	str	r3, [sp, #20]
   14480:	d19b      	bne.n	143ba <log_output_process+0x1a6>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   14482:	2f00      	cmp	r7, #0
   14484:	f47f af34 	bne.w	142f0 <log_output_process+0xdc>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   14488:	4620      	mov	r0, r4
}
   1448a:	b00b      	add	sp, #44	; 0x2c
   1448c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
   14490:	f010 b864 	b.w	2455c <log_output_flush>
		print_formatted(output, "%s", log_color);
   14494:	4a09      	ldr	r2, [pc, #36]	; (144bc <log_output_process+0x2a8>)
   14496:	4908      	ldr	r1, [pc, #32]	; (144b8 <log_output_process+0x2a4>)
   14498:	4620      	mov	r0, r4
   1449a:	f7ff fe6b 	bl	14174 <print_formatted>
}
   1449e:	e72a      	b.n	142f6 <log_output_process+0xe2>
   144a0:	00028331 	.word	0x00028331
   144a4:	000282cd 	.word	0x000282cd
   144a8:	00027c2a 	.word	0x00027c2a
   144ac:	0002833d 	.word	0x0002833d
   144b0:	00028341 	.word	0x00028341
   144b4:	000271b4 	.word	0x000271b4
   144b8:	0002924b 	.word	0x0002924b
   144bc:	0002832c 	.word	0x0002832c
   144c0:	000271c8 	.word	0x000271c8
   144c4:	00028366 	.word	0x00028366
   144c8:	0002836c 	.word	0x0002836c
   144cc:	00028370 	.word	0x00028370
   144d0:	20002c20 	.word	0x20002c20
   144d4:	20002c1c 	.word	0x20002c1c
   144d8:	0002834a 	.word	0x0002834a
   144dc:	00024577 	.word	0x00024577
   144e0:	000141b5 	.word	0x000141b5
   144e4:	0002454f 	.word	0x0002454f
   144e8:	00028375 	.word	0x00028375
   144ec:	00028388 	.word	0x00028388
   144f0:	0002838a 	.word	0x0002838a
   144f4:	00028384 	.word	0x00028384
   144f8:	00028386 	.word	0x00028386
   144fc:	0002837e 	.word	0x0002837e

00014500 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   14500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
   14504:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
   14506:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   14508:	688e      	ldr	r6, [r1, #8]
   1450a:	b086      	sub	sp, #24
   1450c:	4605      	mov	r5, r0
   1450e:	460c      	mov	r4, r1
   14510:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
   14512:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
   14516:	b15b      	cbz	r3, 14530 <log_output_msg_process+0x30>
   14518:	4a13      	ldr	r2, [pc, #76]	; (14568 <log_output_msg_process+0x68>)
   1451a:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
   1451c:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   14520:	2900      	cmp	r1, #0
   14522:	db1f      	blt.n	14564 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
   14524:	7820      	ldrb	r0, [r4, #0]
   14526:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   1452a:	f7ff fcfb 	bl	13f24 <log_source_name_get>
   1452e:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   14530:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
   14532:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
   14534:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   14538:	9700      	str	r7, [sp, #0]
   1453a:	f3c2 224a 	ubfx	r2, r2, #9, #11
   1453e:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
   14540:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
   14544:	f3c0 100b 	ubfx	r0, r0, #4, #12
   14548:	bf08      	it	eq
   1454a:	2100      	moveq	r1, #0
   1454c:	e9cd 0803 	strd	r0, r8, [sp, #12]
   14550:	e9cd 1401 	strd	r1, r4, [sp, #4]
   14554:	2200      	movs	r2, #0
   14556:	4631      	mov	r1, r6
   14558:	4628      	mov	r0, r5
   1455a:	f7ff fe5b 	bl	14214 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   1455e:	b006      	add	sp, #24
   14560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   14564:	2300      	movs	r3, #0
   14566:	e7e3      	b.n	14530 <log_output_msg_process+0x30>
   14568:	00026fc4 	.word	0x00026fc4

0001456c <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   1456c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1456e:	f242 730f 	movw	r3, #9999	; 0x270f
   14572:	428b      	cmp	r3, r1
   14574:	bf28      	it	cs
   14576:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   14578:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1457a:	4a0f      	ldr	r2, [pc, #60]	; (145b8 <log_output_dropped_process+0x4c>)
{
   1457c:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1457e:	2105      	movs	r1, #5
   14580:	4668      	mov	r0, sp
   14582:	f00f fc35 	bl	23df0 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   14586:	6863      	ldr	r3, [r4, #4]
   14588:	490c      	ldr	r1, [pc, #48]	; (145bc <log_output_dropped_process+0x50>)
   1458a:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1458c:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   1458e:	220b      	movs	r2, #11
   14590:	4628      	mov	r0, r5
   14592:	f00f ffcf 	bl	24534 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   14596:	6863      	ldr	r3, [r4, #4]
   14598:	4632      	mov	r2, r6
   1459a:	4669      	mov	r1, sp
   1459c:	4628      	mov	r0, r5
   1459e:	685b      	ldr	r3, [r3, #4]
   145a0:	f00f ffc8 	bl	24534 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   145a4:	6863      	ldr	r3, [r4, #4]
   145a6:	4906      	ldr	r1, [pc, #24]	; (145c0 <log_output_dropped_process+0x54>)
   145a8:	685b      	ldr	r3, [r3, #4]
   145aa:	221b      	movs	r2, #27
   145ac:	4628      	mov	r0, r5
   145ae:	f00f ffc1 	bl	24534 <buffer_write>
		     output->control_block->ctx);
}
   145b2:	b002      	add	sp, #8
   145b4:	bd70      	pop	{r4, r5, r6, pc}
   145b6:	bf00      	nop
   145b8:	0002ad77 	.word	0x0002ad77
   145bc:	000283a9 	.word	0x000283a9
   145c0:	0002838d 	.word	0x0002838d

000145c4 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   145c4:	4a07      	ldr	r2, [pc, #28]	; (145e4 <log_output_timestamp_freq_set+0x20>)
   145c6:	2100      	movs	r1, #0
   145c8:	2301      	movs	r3, #1
   145ca:	4290      	cmp	r0, r2
   145cc:	d806      	bhi.n	145dc <log_output_timestamp_freq_set+0x18>
   145ce:	4a06      	ldr	r2, [pc, #24]	; (145e8 <log_output_timestamp_freq_set+0x24>)
   145d0:	b901      	cbnz	r1, 145d4 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
   145d2:	2301      	movs	r3, #1
   145d4:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   145d6:	4b05      	ldr	r3, [pc, #20]	; (145ec <log_output_timestamp_freq_set+0x28>)
   145d8:	6018      	str	r0, [r3, #0]
}
   145da:	4770      	bx	lr
		frequency /= 2U;
   145dc:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   145de:	005b      	lsls	r3, r3, #1
   145e0:	2101      	movs	r1, #1
   145e2:	e7f2      	b.n	145ca <log_output_timestamp_freq_set+0x6>
   145e4:	000f4240 	.word	0x000f4240
   145e8:	20002c1c 	.word	0x20002c1c
   145ec:	20002c20 	.word	0x20002c20

000145f0 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   145f0:	4b01      	ldr	r3, [pc, #4]	; (145f8 <log_backend_rtt_init+0x8>)
   145f2:	2201      	movs	r2, #1
   145f4:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   145f6:	4770      	bx	lr
   145f8:	20002ff7 	.word	0x20002ff7

000145fc <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   145fc:	4b01      	ldr	r3, [pc, #4]	; (14604 <format_set+0x8>)
	return 0;
}
   145fe:	2000      	movs	r0, #0
	log_format_current = log_type;
   14600:	6019      	str	r1, [r3, #0]
}
   14602:	4770      	bx	lr
   14604:	20002c38 	.word	0x20002c38

00014608 <panic>:
	panic_mode = true;
   14608:	4b02      	ldr	r3, [pc, #8]	; (14614 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   1460a:	4803      	ldr	r0, [pc, #12]	; (14618 <panic+0x10>)
   1460c:	2201      	movs	r2, #1
   1460e:	701a      	strb	r2, [r3, #0]
   14610:	f00f bfa4 	b.w	2455c <log_output_flush>
   14614:	20002ff8 	.word	0x20002ff8
   14618:	000271f8 	.word	0x000271f8

0001461c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   1461c:	4801      	ldr	r0, [pc, #4]	; (14624 <dropped+0x8>)
   1461e:	f7ff bfa5 	b.w	1456c <log_output_dropped_process>
   14622:	bf00      	nop
   14624:	000271f8 	.word	0x000271f8

00014628 <process>:
{
   14628:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1462a:	4b06      	ldr	r3, [pc, #24]	; (14644 <process+0x1c>)
   1462c:	6818      	ldr	r0, [r3, #0]
{
   1462e:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   14630:	f7ff fa0e 	bl	13a50 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
   14634:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   14636:	4603      	mov	r3, r0
}
   14638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
   1463c:	4802      	ldr	r0, [pc, #8]	; (14648 <process+0x20>)
   1463e:	220f      	movs	r2, #15
   14640:	4718      	bx	r3
   14642:	bf00      	nop
   14644:	20002c38 	.word	0x20002c38
   14648:	000271f8 	.word	0x000271f8

0001464c <on_failed_write>:
	if (retry_cnt == 0) {
   1464c:	b910      	cbnz	r0, 14654 <on_failed_write+0x8>
		host_present = false;
   1464e:	4b07      	ldr	r3, [pc, #28]	; (1466c <on_failed_write+0x20>)
   14650:	7018      	strb	r0, [r3, #0]
}
   14652:	4770      	bx	lr
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   14654:	4b06      	ldr	r3, [pc, #24]	; (14670 <on_failed_write+0x24>)
	} else if (is_sync_mode()) {
   14656:	781b      	ldrb	r3, [r3, #0]
   14658:	b11b      	cbz	r3, 14662 <on_failed_write+0x16>
	z_impl_k_busy_wait(usec_to_wait);
   1465a:	f241 3088 	movw	r0, #5000	; 0x1388
   1465e:	f012 ba54 	b.w	26b0a <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   14662:	20a4      	movs	r0, #164	; 0xa4
   14664:	2100      	movs	r1, #0
   14666:	f00d bf2b 	b.w	224c0 <z_impl_k_sleep>
   1466a:	bf00      	nop
   1466c:	20002ff7 	.word	0x20002ff7
   14670:	20002ff8 	.word	0x20002ff8

00014674 <data_out_block_mode>:
{
   14674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
   14678:	f8df 9078 	ldr.w	r9, [pc, #120]	; 146f4 <data_out_block_mode+0x80>
   1467c:	4f1c      	ldr	r7, [pc, #112]	; (146f0 <data_out_block_mode+0x7c>)
{
   1467e:	4680      	mov	r8, r0
   14680:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   14682:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
   14684:	f899 5000 	ldrb.w	r5, [r9]
   14688:	b995      	cbnz	r5, 146b0 <data_out_block_mode+0x3c>
			RTT_LOCK();
   1468a:	f00b f923 	bl	1f8d4 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   1468e:	4628      	mov	r0, r5
   14690:	4632      	mov	r2, r6
   14692:	4641      	mov	r1, r8
   14694:	f00b f8cc 	bl	1f830 <SEGGER_RTT_WriteSkipNoLock>
   14698:	4605      	mov	r5, r0
			RTT_UNLOCK();
   1469a:	f00b f925 	bl	1f8e8 <zephyr_rtt_mutex_unlock>
		if (ret) {
   1469e:	b1e5      	cbz	r5, 146da <data_out_block_mode+0x66>
	host_present = true;
   146a0:	2301      	movs	r3, #1
   146a2:	703b      	strb	r3, [r7, #0]
	if (is_panic_mode()) {
   146a4:	f899 3000 	ldrb.w	r3, [r9]
   146a8:	b973      	cbnz	r3, 146c8 <data_out_block_mode+0x54>
}
   146aa:	4630      	mov	r0, r6
   146ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   146b0:	4632      	mov	r2, r6
   146b2:	4641      	mov	r1, r8
   146b4:	2000      	movs	r0, #0
   146b6:	f00b f8bb 	bl	1f830 <SEGGER_RTT_WriteSkipNoLock>
   146ba:	4605      	mov	r5, r0
   146bc:	e7ef      	b.n	1469e <data_out_block_mode+0x2a>
			on_failed_write(retry_cnt--);
   146be:	4620      	mov	r0, r4
   146c0:	f7ff ffc4 	bl	1464c <on_failed_write>
   146c4:	1e65      	subs	r5, r4, #1
   146c6:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   146c8:	2000      	movs	r0, #0
   146ca:	f00b f8f9 	bl	1f8c0 <SEGGER_RTT_HasDataUp>
   146ce:	2800      	cmp	r0, #0
   146d0:	d0eb      	beq.n	146aa <data_out_block_mode+0x36>
   146d2:	783b      	ldrb	r3, [r7, #0]
   146d4:	2b00      	cmp	r3, #0
   146d6:	d1f2      	bne.n	146be <data_out_block_mode+0x4a>
   146d8:	e7e7      	b.n	146aa <data_out_block_mode+0x36>
		} else if (host_present) {
   146da:	783b      	ldrb	r3, [r7, #0]
   146dc:	2b00      	cmp	r3, #0
   146de:	d0e4      	beq.n	146aa <data_out_block_mode+0x36>
			retry_cnt--;
   146e0:	3c01      	subs	r4, #1
			on_failed_write(retry_cnt);
   146e2:	4620      	mov	r0, r4
   146e4:	f7ff ffb2 	bl	1464c <on_failed_write>
	} while ((ret == 0) && host_present);
   146e8:	783b      	ldrb	r3, [r7, #0]
   146ea:	2b00      	cmp	r3, #0
   146ec:	d1ca      	bne.n	14684 <data_out_block_mode+0x10>
   146ee:	e7dc      	b.n	146aa <data_out_block_mode+0x36>
   146f0:	20002ff7 	.word	0x20002ff7
   146f4:	20002ff8 	.word	0x20002ff8

000146f8 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   146f8:	4b01      	ldr	r3, [pc, #4]	; (14700 <format_set+0x8>)
	return 0;
}
   146fa:	2000      	movs	r0, #0
	log_format_current = log_type;
   146fc:	6019      	str	r1, [r3, #0]
}
   146fe:	4770      	bx	lr
   14700:	20002c50 	.word	0x20002c50

00014704 <panic>:
	if ((rc == 0) && (pm_state == PM_DEVICE_STATE_SUSPENDED)) {
		pm_device_action_run(uart_dev, PM_DEVICE_ACTION_RESUME);
	}
#endif /* CONFIG_PM_DEVICE */

	in_panic = true;
   14704:	4b02      	ldr	r3, [pc, #8]	; (14710 <panic+0xc>)
	log_output_flush(output);
   14706:	4803      	ldr	r0, [pc, #12]	; (14714 <panic+0x10>)
   14708:	2201      	movs	r2, #1
   1470a:	701a      	strb	r2, [r3, #0]
   1470c:	f00f bf26 	b.w	2455c <log_output_flush>
   14710:	2000300a 	.word	0x2000300a
   14714:	00027224 	.word	0x00027224

00014718 <dropped>:
	log_output_dropped_process(output, cnt);
   14718:	4801      	ldr	r0, [pc, #4]	; (14720 <dropped+0x8>)
   1471a:	f7ff bf27 	b.w	1456c <log_output_dropped_process>
   1471e:	bf00      	nop
   14720:	00027224 	.word	0x00027224

00014724 <process>:
{
   14724:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   14726:	4b06      	ldr	r3, [pc, #24]	; (14740 <process+0x1c>)
   14728:	6818      	ldr	r0, [r3, #0]
{
   1472a:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1472c:	f7ff f990 	bl	13a50 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
   14730:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   14732:	4603      	mov	r3, r0
}
   14734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
   14738:	4802      	ldr	r0, [pc, #8]	; (14744 <process+0x20>)
   1473a:	220f      	movs	r2, #15
   1473c:	4718      	bx	r3
   1473e:	bf00      	nop
   14740:	20002c50 	.word	0x20002c50
   14744:	00027224 	.word	0x00027224

00014748 <char_out>:
{
   14748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	api->poll_out(dev, out_char);
   1474a:	4f07      	ldr	r7, [pc, #28]	; (14768 <char_out+0x20>)
   1474c:	460d      	mov	r5, r1
   1474e:	4604      	mov	r4, r0
   14750:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
   14752:	42b4      	cmp	r4, r6
   14754:	d101      	bne.n	1475a <char_out+0x12>
}
   14756:	4628      	mov	r0, r5
   14758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
   1475a:	f814 1b01 	ldrb.w	r1, [r4], #1
   1475e:	68bb      	ldr	r3, [r7, #8]
   14760:	4801      	ldr	r0, [pc, #4]	; (14768 <char_out+0x20>)
   14762:	69db      	ldr	r3, [r3, #28]
   14764:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   14766:	e7f4      	b.n	14752 <char_out+0xa>
   14768:	00026e04 	.word	0x00026e04

0001476c <log_backend_uart_init>:
{
   1476c:	b508      	push	{r3, lr}
   1476e:	4807      	ldr	r0, [pc, #28]	; (1478c <log_backend_uart_init+0x20>)
   14770:	f012 f8a6 	bl	268c0 <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
   14774:	b948      	cbnz	r0, 1478a <log_backend_uart_init+0x1e>
   14776:	4906      	ldr	r1, [pc, #24]	; (14790 <log_backend_uart_init+0x24>)
   14778:	4806      	ldr	r0, [pc, #24]	; (14794 <log_backend_uart_init+0x28>)
   1477a:	4a07      	ldr	r2, [pc, #28]	; (14798 <log_backend_uart_init+0x2c>)
   1477c:	237f      	movs	r3, #127	; 0x7f
   1477e:	f00f fd61 	bl	24244 <assert_print>
   14782:	4805      	ldr	r0, [pc, #20]	; (14798 <log_backend_uart_init+0x2c>)
   14784:	217f      	movs	r1, #127	; 0x7f
   14786:	f00f fd56 	bl	24236 <assert_post_action>
}
   1478a:	bd08      	pop	{r3, pc}
   1478c:	00026e04 	.word	0x00026e04
   14790:	00028423 	.word	0x00028423
   14794:	00027c2a 	.word	0x00027c2a
   14798:	000283e5 	.word	0x000283e5

0001479c <nus_ccc_cfg_changed>:
static struct bt_nus_cb nus_cb;

static void nus_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				  uint16_t value)
{
	if (nus_cb.send_enabled) {
   1479c:	4b03      	ldr	r3, [pc, #12]	; (147ac <nus_ccc_cfg_changed+0x10>)
   1479e:	689b      	ldr	r3, [r3, #8]
   147a0:	b11b      	cbz	r3, 147aa <nus_ccc_cfg_changed+0xe>
		LOG_DBG("Notification has been turned %s",
			value == BT_GATT_CCC_NOTIFY ? "on" : "off");
		nus_cb.send_enabled(value == BT_GATT_CCC_NOTIFY ?
   147a2:	1e48      	subs	r0, r1, #1
   147a4:	bf18      	it	ne
   147a6:	2001      	movne	r0, #1
   147a8:	4718      	bx	r3
			BT_NUS_SEND_STATUS_ENABLED : BT_NUS_SEND_STATUS_DISABLED);
	}
}
   147aa:	4770      	bx	lr
   147ac:	20002c54 	.word	0x20002c54

000147b0 <on_receive>:
			  const struct bt_gatt_attr *attr,
			  const void *buf,
			  uint16_t len,
			  uint16_t offset,
			  uint8_t flags)
{
   147b0:	b510      	push	{r4, lr}
   147b2:	461c      	mov	r4, r3
	LOG_DBG("Received data, handle %d, conn %p",
		attr->handle, (void *)conn);

	if (nus_cb.received) {
   147b4:	4b03      	ldr	r3, [pc, #12]	; (147c4 <on_receive+0x14>)
   147b6:	681b      	ldr	r3, [r3, #0]
{
   147b8:	4611      	mov	r1, r2
	if (nus_cb.received) {
   147ba:	b10b      	cbz	r3, 147c0 <on_receive+0x10>
		nus_cb.received(conn, buf, len);
   147bc:	4622      	mov	r2, r4
   147be:	4798      	blx	r3
}
	return len;
}
   147c0:	4620      	mov	r0, r4
   147c2:	bd10      	pop	{r4, pc}
   147c4:	20002c54 	.word	0x20002c54

000147c8 <bt_nus_init>:
			       NULL, on_receive, NULL),
);

int bt_nus_init(struct bt_nus_cb *callbacks)
{
	if (callbacks) {
   147c8:	b130      	cbz	r0, 147d8 <bt_nus_init+0x10>
		nus_cb.received = callbacks->received;
   147ca:	4b04      	ldr	r3, [pc, #16]	; (147dc <bt_nus_init+0x14>)
   147cc:	6802      	ldr	r2, [r0, #0]
   147ce:	601a      	str	r2, [r3, #0]
		nus_cb.sent = callbacks->sent;
   147d0:	6842      	ldr	r2, [r0, #4]
   147d2:	605a      	str	r2, [r3, #4]
		nus_cb.send_enabled = callbacks->send_enabled;
   147d4:	6882      	ldr	r2, [r0, #8]
   147d6:	609a      	str	r2, [r3, #8]
	}

	return 0;
}
   147d8:	2000      	movs	r0, #0
   147da:	4770      	bx	lr
   147dc:	20002c54 	.word	0x20002c54

000147e0 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   147e0:	4904      	ldr	r1, [pc, #16]	; (147f4 <sub_bytes+0x14>)
   147e2:	1e43      	subs	r3, r0, #1
   147e4:	300f      	adds	r0, #15
   147e6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   147ea:	5c8a      	ldrb	r2, [r1, r2]
   147ec:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   147ee:	4283      	cmp	r3, r0
   147f0:	d1f9      	bne.n	147e6 <sub_bytes+0x6>
	}
}
   147f2:	4770      	bx	lr
   147f4:	0002845e 	.word	0x0002845e

000147f8 <tc_aes128_set_encrypt_key>:
{
   147f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   147fa:	4e26      	ldr	r6, [pc, #152]	; (14894 <tc_aes128_set_encrypt_key+0x9c>)
{
   147fc:	4607      	mov	r7, r0
   147fe:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   14800:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   14802:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   14804:	ad01      	add	r5, sp, #4
   14806:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   14808:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1480a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1480c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   14810:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   14814:	4638      	mov	r0, r7
   14816:	2f00      	cmp	r7, #0
   14818:	d038      	beq.n	1488c <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   1481a:	2c00      	cmp	r4, #0
   1481c:	d038      	beq.n	14890 <tc_aes128_set_encrypt_key+0x98>
   1481e:	1f38      	subs	r0, r7, #4
   14820:	4621      	mov	r1, r4
   14822:	4602      	mov	r2, r0
   14824:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   14826:	784b      	ldrb	r3, [r1, #1]
   14828:	780d      	ldrb	r5, [r1, #0]
   1482a:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   1482c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   14830:	78cd      	ldrb	r5, [r1, #3]
   14832:	432b      	orrs	r3, r5
   14834:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   14836:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   14838:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   1483c:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1483e:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   14842:	d1f0      	bne.n	14826 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   14844:	4c14      	ldr	r4, [pc, #80]	; (14898 <tc_aes128_set_encrypt_key+0xa0>)
   14846:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   14848:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   1484a:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   1484c:	d116      	bne.n	1487c <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1484e:	f3c3 4207 	ubfx	r2, r3, #16, #8
   14852:	5ca5      	ldrb	r5, [r4, r2]
   14854:	0e1a      	lsrs	r2, r3, #24
   14856:	5ca2      	ldrb	r2, [r4, r2]
   14858:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   1485c:	f3c3 2507 	ubfx	r5, r3, #8, #8
   14860:	b2db      	uxtb	r3, r3
   14862:	5d65      	ldrb	r5, [r4, r5]
   14864:	5ce3      	ldrb	r3, [r4, r3]
   14866:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   1486a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   1486e:	f021 0303 	bic.w	r3, r1, #3
   14872:	3330      	adds	r3, #48	; 0x30
   14874:	446b      	add	r3, sp
   14876:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   1487a:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   1487c:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   14880:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   14882:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   14884:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   14886:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   14888:	d1de      	bne.n	14848 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   1488a:	2001      	movs	r0, #1
}
   1488c:	b00d      	add	sp, #52	; 0x34
   1488e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   14890:	4620      	mov	r0, r4
   14892:	e7fb      	b.n	1488c <tc_aes128_set_encrypt_key+0x94>
   14894:	000270f4 	.word	0x000270f4
   14898:	0002845e 	.word	0x0002845e

0001489c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   1489c:	4901      	ldr	r1, [pc, #4]	; (148a4 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   1489e:	2210      	movs	r2, #16
	str	r2, [r1]
   148a0:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   148a2:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   148a4:	e000ed10 	.word	0xe000ed10

000148a8 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   148a8:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   148aa:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   148ac:	f380 8811 	msr	BASEPRI, r0
	isb
   148b0:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   148b4:	f3bf 8f4f 	dsb	sy
   148b8:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   148ba:	b662      	cpsie	i
	isb
   148bc:	f3bf 8f6f 	isb	sy

	bx	lr
   148c0:	4770      	bx	lr
   148c2:	bf00      	nop

000148c4 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   148c4:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   148c6:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   148c8:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   148cc:	f3bf 8f4f 	dsb	sy
   148d0:	bf20      	wfe

	msr	BASEPRI, r0
   148d2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   148d6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   148d8:	4770      	bx	lr
   148da:	bf00      	nop

000148dc <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   148dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148e0:	4680      	mov	r8, r0
   148e2:	af00      	add	r7, sp, #0

	if (esf != NULL) {
   148e4:	460c      	mov	r4, r1
   148e6:	2900      	cmp	r1, #0
   148e8:	f000 8093 	beq.w	14a12 <z_arm_fatal_error+0x136>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   148ec:	46e9      	mov	r9, sp
   148ee:	b08a      	sub	sp, #40	; 0x28
   148f0:	e9d1 1200 	ldrd	r1, r2, [r1]
   148f4:	68a3      	ldr	r3, [r4, #8]
   148f6:	466d      	mov	r5, sp
   148f8:	4849      	ldr	r0, [pc, #292]	; (14a20 <z_arm_fatal_error+0x144>)
   148fa:	462e      	mov	r6, r5
   148fc:	f04f 0a05 	mov.w	sl, #5
   14900:	e9c5 0105 	strd	r0, r1, [r5, #20]
   14904:	e9c5 2307 	strd	r2, r3, [r5, #28]
   14908:	f846 af10 	str.w	sl, [r6, #16]!
   1490c:	4845      	ldr	r0, [pc, #276]	; (14a24 <z_arm_fatal_error+0x148>)
   1490e:	4632      	mov	r2, r6
   14910:	2300      	movs	r3, #0
   14912:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   14916:	f7ff fb39 	bl	13f8c <z_impl_z_log_msg_static_create>
   1491a:	46cd      	mov	sp, r9
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   1491c:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   14920:	6963      	ldr	r3, [r4, #20]
   14922:	46ad      	mov	sp, r5
   14924:	4840      	ldr	r0, [pc, #256]	; (14a28 <z_arm_fatal_error+0x14c>)
   14926:	f8c5 a010 	str.w	sl, [r5, #16]
   1492a:	e9c5 0105 	strd	r0, r1, [r5, #20]
   1492e:	e9c5 2307 	strd	r2, r3, [r5, #28]
   14932:	483c      	ldr	r0, [pc, #240]	; (14a24 <z_arm_fatal_error+0x148>)
   14934:	4632      	mov	r2, r6
   14936:	2300      	movs	r3, #0
   14938:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   1493c:	f7ff fb26 	bl	13f8c <z_impl_z_log_msg_static_create>
   14940:	46cd      	mov	sp, r9
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   14942:	b088      	sub	sp, #32
   14944:	69e3      	ldr	r3, [r4, #28]
   14946:	466a      	mov	r2, sp
   14948:	4938      	ldr	r1, [pc, #224]	; (14a2c <z_arm_fatal_error+0x150>)
   1494a:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1494e:	2303      	movs	r3, #3
   14950:	f842 3f10 	str.w	r3, [r2, #16]!
   14954:	4833      	ldr	r0, [pc, #204]	; (14a24 <z_arm_fatal_error+0x148>)
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   14956:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 14a38 <z_arm_fatal_error+0x15c>
   1495a:	2300      	movs	r3, #0
   1495c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14960:	f7ff fb14 	bl	13f8c <z_impl_z_log_msg_static_create>
   14964:	4626      	mov	r6, r4
   14966:	46cd      	mov	sp, r9
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
   14968:	2500      	movs	r5, #0
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
   1496a:	f04f 0a0a 	mov.w	sl, #10
   1496e:	edd6 7a08 	vldr	s15, [r6, #32]
   14972:	eebc 7ae7 	vcvt.u32.f32	s14, s15
   14976:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
   1497a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1497e:	46e9      	mov	r9, sp
   14980:	ee17 1a90 	vmov	r1, s15
   14984:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
   14988:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1498c:	b08e      	sub	sp, #56	; 0x38
   1498e:	ee17 3a90 	vmov	r3, s15
   14992:	edd6 7a0b 	vldr	s15, [r6, #44]	; 0x2c
   14996:	466a      	mov	r2, sp
   14998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1499c:	1c68      	adds	r0, r5, #1
   1499e:	e9c2 0108 	strd	r0, r1, [r2, #32]
   149a2:	1ca9      	adds	r1, r5, #2
   149a4:	e9c2 130a 	strd	r1, r3, [r2, #40]	; 0x28
   149a8:	1ceb      	adds	r3, r5, #3
   149aa:	e9c2 b505 	strd	fp, r5, [r2, #20]
   149ae:	ed82 7a07 	vstr	s14, [r2, #28]
   149b2:	6313      	str	r3, [r2, #48]	; 0x30
   149b4:	edc2 7a0d 	vstr	s15, [r2, #52]	; 0x34
   149b8:	f842 af10 	str.w	sl, [r2, #16]!
   149bc:	4819      	ldr	r0, [pc, #100]	; (14a24 <z_arm_fatal_error+0x148>)
   149be:	2300      	movs	r3, #0
   149c0:	f245 0140 	movw	r1, #20544	; 0x5040
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
   149c4:	3504      	adds	r5, #4
   149c6:	f7ff fae1 	bl	13f8c <z_impl_z_log_msg_static_create>
   149ca:	2d10      	cmp	r5, #16
   149cc:	46cd      	mov	sp, r9
   149ce:	f106 0610 	add.w	r6, r6, #16
   149d2:	d1cc      	bne.n	1496e <z_arm_fatal_error+0x92>
	LOG_ERR("fpscr:  0x%08x", esf->fpu.fpscr);
   149d4:	b088      	sub	sp, #32
   149d6:	6e23      	ldr	r3, [r4, #96]	; 0x60
   149d8:	466a      	mov	r2, sp
   149da:	4915      	ldr	r1, [pc, #84]	; (14a30 <z_arm_fatal_error+0x154>)
   149dc:	2503      	movs	r5, #3
   149de:	e9c2 1305 	strd	r1, r3, [r2, #20]
   149e2:	f842 5f10 	str.w	r5, [r2, #16]!
   149e6:	480f      	ldr	r0, [pc, #60]	; (14a24 <z_arm_fatal_error+0x148>)
   149e8:	2300      	movs	r3, #0
   149ea:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   149ee:	f7ff facd 	bl	13f8c <z_impl_z_log_msg_static_create>
   149f2:	46cd      	mov	sp, r9
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   149f4:	b088      	sub	sp, #32
   149f6:	69a3      	ldr	r3, [r4, #24]
   149f8:	466a      	mov	r2, sp
   149fa:	490e      	ldr	r1, [pc, #56]	; (14a34 <z_arm_fatal_error+0x158>)
   149fc:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14a00:	f842 5f10 	str.w	r5, [r2, #16]!
   14a04:	4807      	ldr	r0, [pc, #28]	; (14a24 <z_arm_fatal_error+0x148>)
   14a06:	2300      	movs	r3, #0
   14a08:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14a0c:	f7ff fabe 	bl	13f8c <z_impl_z_log_msg_static_create>
   14a10:	46cd      	mov	sp, r9
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   14a12:	4621      	mov	r1, r4
   14a14:	4640      	mov	r0, r8
   14a16:	f00a ff8f 	bl	1f938 <z_fatal_error>
}
   14a1a:	46bd      	mov	sp, r7
   14a1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a20:	0002855e 	.word	0x0002855e
   14a24:	000270a4 	.word	0x000270a4
   14a28:	0002858d 	.word	0x0002858d
   14a2c:	000285bc 	.word	0x000285bc
   14a30:	0002860e 	.word	0x0002860e
   14a34:	0002861d 	.word	0x0002861d
   14a38:	000285cb 	.word	0x000285cb

00014a3c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   14a3c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   14a3e:	2800      	cmp	r0, #0
   14a40:	db07      	blt.n	14a52 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14a42:	4a04      	ldr	r2, [pc, #16]	; (14a54 <arch_irq_enable+0x18>)
   14a44:	0941      	lsrs	r1, r0, #5
   14a46:	2301      	movs	r3, #1
   14a48:	f000 001f 	and.w	r0, r0, #31
   14a4c:	4083      	lsls	r3, r0
   14a4e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   14a52:	4770      	bx	lr
   14a54:	e000e100 	.word	0xe000e100

00014a58 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   14a58:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   14a5a:	2800      	cmp	r0, #0
   14a5c:	db0c      	blt.n	14a78 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   14a5e:	0943      	lsrs	r3, r0, #5
   14a60:	4906      	ldr	r1, [pc, #24]	; (14a7c <arch_irq_disable+0x24>)
   14a62:	f000 001f 	and.w	r0, r0, #31
   14a66:	3320      	adds	r3, #32
   14a68:	2201      	movs	r2, #1
   14a6a:	4082      	lsls	r2, r0
   14a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   14a70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14a74:	f3bf 8f6f 	isb	sy
}
   14a78:	4770      	bx	lr
   14a7a:	bf00      	nop
   14a7c:	e000e100 	.word	0xe000e100

00014a80 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   14a80:	4b05      	ldr	r3, [pc, #20]	; (14a98 <arch_irq_is_enabled+0x18>)
   14a82:	0942      	lsrs	r2, r0, #5
   14a84:	f000 001f 	and.w	r0, r0, #31
   14a88:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   14a8c:	2301      	movs	r3, #1
   14a8e:	fa03 f000 	lsl.w	r0, r3, r0
}
   14a92:	4010      	ands	r0, r2
   14a94:	4770      	bx	lr
   14a96:	bf00      	nop
   14a98:	e000e100 	.word	0xe000e100

00014a9c <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
   14a9c:	b538      	push	{r3, r4, r5, lr}
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   14a9e:	07d3      	lsls	r3, r2, #31
{
   14aa0:	4604      	mov	r4, r0
   14aa2:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   14aa4:	d412      	bmi.n	14acc <z_arm_irq_priority_set+0x30>
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
		} else {
			/* Use caller supplied prio level as-is */
		}
	} else {
		prio += _IRQ_PRIO_OFFSET;
   14aa6:	1c8b      	adds	r3, r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   14aa8:	2b07      	cmp	r3, #7
   14aaa:	d910      	bls.n	14ace <z_arm_irq_priority_set+0x32>
   14aac:	4a11      	ldr	r2, [pc, #68]	; (14af4 <z_arm_irq_priority_set+0x58>)
   14aae:	4912      	ldr	r1, [pc, #72]	; (14af8 <z_arm_irq_priority_set+0x5c>)
   14ab0:	4812      	ldr	r0, [pc, #72]	; (14afc <z_arm_irq_priority_set+0x60>)
   14ab2:	235c      	movs	r3, #92	; 0x5c
   14ab4:	f00f fbc6 	bl	24244 <assert_print>
   14ab8:	4811      	ldr	r0, [pc, #68]	; (14b00 <z_arm_irq_priority_set+0x64>)
   14aba:	4629      	mov	r1, r5
   14abc:	2306      	movs	r3, #6
   14abe:	4622      	mov	r2, r4
   14ac0:	f00f fbc0 	bl	24244 <assert_print>
   14ac4:	480b      	ldr	r0, [pc, #44]	; (14af4 <z_arm_irq_priority_set+0x58>)
   14ac6:	215c      	movs	r1, #92	; 0x5c
   14ac8:	f00f fbb5 	bl	24236 <assert_post_action>
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   14acc:	2300      	movs	r3, #0
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   14ace:	b260      	sxtb	r0, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   14ad0:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14ad2:	bfac      	ite	ge
   14ad4:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14ad8:	4a0a      	ldrlt	r2, [pc, #40]	; (14b04 <z_arm_irq_priority_set+0x68>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14ada:	ea4f 1343 	mov.w	r3, r3, lsl #5
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14ade:	bfb8      	it	lt
   14ae0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14ae4:	b2db      	uxtb	r3, r3
   14ae6:	bfaa      	itet	ge
   14ae8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14aec:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14aee:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
}
   14af2:	bd38      	pop	{r3, r4, r5, pc}
   14af4:	0002864b 	.word	0x0002864b
   14af8:	00028681 	.word	0x00028681
   14afc:	00027c2a 	.word	0x00027c2a
   14b00:	0002869c 	.word	0x0002869c
   14b04:	e000ed14 	.word	0xe000ed14

00014b08 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   14b08:	bf30      	wfi
    b z_SysNmiOnReset
   14b0a:	f7ff bffd 	b.w	14b08 <z_SysNmiOnReset>
   14b0e:	bf00      	nop

00014b10 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   14b10:	4a14      	ldr	r2, [pc, #80]	; (14b64 <z_arm_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   14b12:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   14b14:	4b14      	ldr	r3, [pc, #80]	; (14b68 <z_arm_prep_c+0x58>)
   14b16:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   14b1a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   14b1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14b20:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   14b24:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   14b28:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   14b2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   14b30:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   14b34:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   14b38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
   14b3c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   14b40:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
   14b44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14b48:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
   14b4c:	2300      	movs	r3, #0
   14b4e:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   14b52:	f00a ffc3 	bl	1fadc <z_bss_zero>
	z_data_copy();
   14b56:	f00d fe25 	bl	227a4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   14b5a:	f000 fc97 	bl	1548c <z_arm_interrupt_init>
	z_cstart();
   14b5e:	f00b f80f 	bl	1fb80 <z_cstart>
   14b62:	bf00      	nop
   14b64:	00000000 	.word	0x00000000
   14b68:	e000ed00 	.word	0xe000ed00

00014b6c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   14b6c:	4a09      	ldr	r2, [pc, #36]	; (14b94 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   14b6e:	490a      	ldr	r1, [pc, #40]	; (14b98 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   14b70:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   14b72:	6809      	ldr	r1, [r1, #0]
   14b74:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14b76:	4909      	ldr	r1, [pc, #36]	; (14b9c <arch_swap+0x30>)
	_current->arch.basepri = key;
   14b78:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   14b7a:	684b      	ldr	r3, [r1, #4]
   14b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   14b80:	604b      	str	r3, [r1, #4]
   14b82:	2300      	movs	r3, #0
   14b84:	f383 8811 	msr	BASEPRI, r3
   14b88:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   14b8c:	6893      	ldr	r3, [r2, #8]
}
   14b8e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   14b90:	4770      	bx	lr
   14b92:	bf00      	nop
   14b94:	20002f78 	.word	0x20002f78
   14b98:	00027740 	.word	0x00027740
   14b9c:	e000ed00 	.word	0xe000ed00

00014ba0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   14ba0:	4921      	ldr	r1, [pc, #132]	; (14c28 <in_fp_endif+0x2a>)
    ldr r2, [r1, #_kernel_offset_to_current]
   14ba2:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
   14ba4:	f882 e0c1 	strb.w	lr, [r2, #193]	; 0xc1
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   14ba8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   14bac:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   14bae:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   14bb2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
   14bb6:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
   14bba:	d103      	bne.n	14bc4 <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
   14bbc:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vstmia r0, {s16-s31}
   14bc0:	ec80 8a10 	vstmia	r0, {s16-s31}

00014bc4 <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   14bc4:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   14bc6:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   14bca:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   14bce:	4f17      	ldr	r7, [pc, #92]	; (14c2c <in_fp_endif+0x2e>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   14bd0:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   14bd4:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
   14bd6:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   14bd8:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
   14bda:	f992 e0c1 	ldrsb.w	lr, [r2, #193]	; 0xc1

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   14bde:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   14be0:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   14be2:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   14be4:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
   14be8:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
   14bec:	d003      	beq.n	14bf6 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
   14bee:	2300      	movs	r3, #0
    vmsr fpscr, r3
   14bf0:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
   14bf4:	e003      	b.n	14bfe <in_fp_endif>

00014bf6 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
   14bf6:	f102 0080 	add.w	r0, r2, #128	; 0x80
    vldmia r0, {s16-s31}
   14bfa:	ec90 8a10 	vldmia	r0, {s16-s31}

00014bfe <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
   14bfe:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
   14c02:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
   14c06:	f383 8814 	msr	CONTROL, r3
    isb
   14c0a:	f3bf 8f6f 	isb	sy
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   14c0e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   14c10:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   14c12:	f000 fce9 	bl	155e8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   14c16:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   14c1a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   14c1e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   14c22:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   14c26:	4770      	bx	lr
    ldr r1, =_kernel
   14c28:	20002f78 	.word	0x20002f78
    ldr v4, =_SCS_ICSR
   14c2c:	e000ed04 	.word	0xe000ed04

00014c30 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   14c30:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   14c34:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   14c36:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   14c3a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   14c3e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   14c40:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   14c44:	2902      	cmp	r1, #2
    beq _oops
   14c46:	d0ff      	beq.n	14c48 <_oops>

00014c48 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   14c48:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   14c4a:	f00f fecc 	bl	249e6 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   14c4e:	bd01      	pop	{r0, pc}

00014c50 <arch_new_thread>:
		thread->stack_info.start += MPU_GUARD_ALIGN_AND_SIZE;
		thread->stack_info.size -= MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif /* CONFIG_USERSPACE */
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
   14c50:	7b01      	ldrb	r1, [r0, #12]
   14c52:	0789      	lsls	r1, r1, #30
   14c54:	d505      	bpl.n	14c62 <arch_new_thread+0x12>
		/* Larger guard needed due to lazy stacking of FP regs may
		 * overshoot the guard area without writing anything. We
		 * carve it out of the stack buffer as-needed instead of
		 * unconditionally reserving it.
		 */
		thread->stack_info.start += FP_GUARD_EXTRA_SIZE;
   14c56:	6e81      	ldr	r1, [r0, #104]	; 0x68
   14c58:	3140      	adds	r1, #64	; 0x40
   14c5a:	6681      	str	r1, [r0, #104]	; 0x68
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
   14c5c:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
   14c5e:	3940      	subs	r1, #64	; 0x40
   14c60:	66c1      	str	r1, [r0, #108]	; 0x6c

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   14c62:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   14c66:	9b00      	ldr	r3, [sp, #0]
   14c68:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   14c6c:	490f      	ldr	r1, [pc, #60]	; (14cac <arch_new_thread+0x5c>)
	iframe->a3 = (uint32_t)p2;
   14c6e:	9b01      	ldr	r3, [sp, #4]
   14c70:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   14c74:	9b02      	ldr	r3, [sp, #8]
   14c76:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   14c7a:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   14c7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   14c82:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   14c86:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   14c8a:	2300      	movs	r3, #0
   14c8c:	6783      	str	r3, [r0, #120]	; 0x78
	thread->arch.mode = 0;
#if defined(CONFIG_ARM_STORE_EXC_RETURN)
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
#endif
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
   14c8e:	7b03      	ldrb	r3, [r0, #12]
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
   14c90:	f013 0f02 	tst.w	r3, #2
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   14c94:	f1a2 0220 	sub.w	r2, r2, #32
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
   14c98:	f64f 5308 	movw	r3, #64776	; 0xfd08
   14c9c:	bf08      	it	eq
   14c9e:	f44f 437d 	moveq.w	r3, #64768	; 0xfd00
	thread->callee_saved.psp = (uint32_t)iframe;
   14ca2:	6502      	str	r2, [r0, #80]	; 0x50
	if ((thread->base.user_options & K_FP_REGS) != 0) {
   14ca4:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   14ca8:	4770      	bx	lr
   14caa:	bf00      	nop
   14cac:	00023e0b 	.word	0x00023e0b

00014cb0 <z_arm_mpu_stack_guard_and_fpu_adjust>:
 * policy and the stack_info values for the thread that is
 * being switched in.
 */
uint32_t z_arm_mpu_stack_guard_and_fpu_adjust(struct k_thread *thread)
{
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
   14cb0:	7b03      	ldrb	r3, [r0, #12]
   14cb2:	f013 0f02 	tst.w	r3, #2
   14cb6:	4b19      	ldr	r3, [pc, #100]	; (14d1c <z_arm_mpu_stack_guard_and_fpu_adjust+0x6c>)
   14cb8:	d103      	bne.n	14cc2 <z_arm_mpu_stack_guard_and_fpu_adjust+0x12>
   14cba:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
   14cbe:	06d2      	lsls	r2, r2, #27
   14cc0:	d417      	bmi.n	14cf2 <z_arm_mpu_stack_guard_and_fpu_adjust+0x42>
		 * The thread is not pre-tagged with K_FP_REGS, but it has
		 * generated an FP context. Activate lazy stacking and
		 * program a large MPU guard to detect privilege thread
		 * stack overflows.
		 */
		FPU->FPCCR |= FPU_FPCCR_LSPEN_Msk;
   14cc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   14cc4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
   14cc8:	635a      	str	r2, [r3, #52]	; 0x34
		if ((thread->arch.mode &
   14cca:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   14cce:	0719      	lsls	r1, r3, #28
   14cd0:	d409      	bmi.n	14ce6 <z_arm_mpu_stack_guard_and_fpu_adjust+0x36>
			thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
   14cd2:	f043 0308 	orr.w	r3, r3, #8
   14cd6:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
				thread->stack_info.start +=
   14cda:	6e83      	ldr	r3, [r0, #104]	; 0x68
   14cdc:	3340      	adds	r3, #64	; 0x40
   14cde:	6683      	str	r3, [r0, #104]	; 0x68
				thread->stack_info.size -=
   14ce0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   14ce2:	3b40      	subs	r3, #64	; 0x40
   14ce4:	66c3      	str	r3, [r0, #108]	; 0x6c

		z_arm_thread_stack_info_adjust(thread, true);

		/* Tag the thread with K_FP_REGS */
		thread->base.user_options |= K_FP_REGS;
   14ce6:	7b03      	ldrb	r3, [r0, #12]
   14ce8:	f043 0302 	orr.w	r3, r3, #2
   14cec:	7303      	strb	r3, [r0, #12]

		return MPU_GUARD_ALIGN_AND_SIZE_FLOAT;
   14cee:	2080      	movs	r0, #128	; 0x80
   14cf0:	4770      	bx	lr
	/* Thread is not pre-tagged with K_FP_REGS, and it has
	 * not been using the FPU. Since there is no active FPU
	 * context, de-activate lazy stacking and program the
	 * default MPU guard size.
	 */
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);
   14cf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   14cf4:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
   14cf8:	635a      	str	r2, [r3, #52]	; 0x34
		if ((thread->arch.mode &
   14cfa:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   14cfe:	071a      	lsls	r2, r3, #28
   14d00:	d401      	bmi.n	14d06 <z_arm_mpu_stack_guard_and_fpu_adjust+0x56>

	z_arm_thread_stack_info_adjust(thread, false);

	return MPU_GUARD_ALIGN_AND_SIZE;
   14d02:	2040      	movs	r0, #64	; 0x40
}
   14d04:	4770      	bx	lr
			thread->arch.mode &= ~Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
   14d06:	f023 0308 	bic.w	r3, r3, #8
   14d0a:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
				thread->stack_info.start -=
   14d0e:	6e83      	ldr	r3, [r0, #104]	; 0x68
   14d10:	3b40      	subs	r3, #64	; 0x40
   14d12:	6683      	str	r3, [r0, #104]	; 0x68
				thread->stack_info.size +=
   14d14:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   14d16:	3340      	adds	r3, #64	; 0x40
   14d18:	66c3      	str	r3, [r0, #108]	; 0x6c
   14d1a:	e7f2      	b.n	14d02 <z_arm_mpu_stack_guard_and_fpu_adjust+0x52>
   14d1c:	e000ef00 	.word	0xe000ef00

00014d20 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   14d20:	4a0c      	ldr	r2, [pc, #48]	; (14d54 <z_check_thread_stack_fail+0x34>)
{
   14d22:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   14d24:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   14d26:	b1a0      	cbz	r0, 14d52 <z_check_thread_stack_fail+0x32>
#endif

#if (defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)) && \
	defined(CONFIG_MPU_STACK_GUARD)
	uint32_t guard_len =
		((_current->arch.mode & Z_ARM_MODE_MPU_GUARD_FLOAT_Msk) != 0) ?
   14d28:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   14d2c:	6e80      	ldr	r0, [r0, #104]	; 0x68
		MPU_GUARD_ALIGN_AND_SIZE_FLOAT : MPU_GUARD_ALIGN_AND_SIZE;
   14d2e:	f012 0f08 	tst.w	r2, #8
   14d32:	bf0c      	ite	eq
   14d34:	2240      	moveq	r2, #64	; 0x40
   14d36:	2280      	movne	r2, #128	; 0x80
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   14d38:	f113 0f16 	cmn.w	r3, #22
   14d3c:	d004      	beq.n	14d48 <z_check_thread_stack_fail+0x28>
   14d3e:	1a82      	subs	r2, r0, r2
   14d40:	429a      	cmp	r2, r3
   14d42:	d805      	bhi.n	14d50 <z_check_thread_stack_fail+0x30>
   14d44:	4283      	cmp	r3, r0
   14d46:	d203      	bcs.n	14d50 <z_check_thread_stack_fail+0x30>
		return 0;
   14d48:	4281      	cmp	r1, r0
   14d4a:	bf28      	it	cs
   14d4c:	2000      	movcs	r0, #0
   14d4e:	4770      	bx	lr
   14d50:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
   14d52:	4770      	bx	lr
   14d54:	20002f78 	.word	0x20002f78

00014d58 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   14d58:	b508      	push	{r3, lr}
   14d5a:	4614      	mov	r4, r2
   14d5c:	460d      	mov	r5, r1
   14d5e:	2200      	movs	r2, #0
   14d60:	eee1 2a10 	vmsr	fpscr, r2
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   14d64:	f3ef 8214 	mrs	r2, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   14d68:	f022 0204 	bic.w	r2, r2, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   14d6c:	f382 8814 	msr	CONTROL, r2
  __ASM volatile ("isb 0xF":::"memory");
   14d70:	f3bf 8f6f 	isb	sy
   14d74:	f3bf 8f6f 	isb	sy
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   14d78:	4a08      	ldr	r2, [pc, #32]	; (14d9c <arch_switch_to_main_thread+0x44>)
   14d7a:	6090      	str	r0, [r2, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   14d7c:	f000 fc34 	bl	155e8 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   14d80:	4620      	mov	r0, r4
   14d82:	f385 8809 	msr	PSP, r5
   14d86:	2100      	movs	r1, #0
   14d88:	b663      	cpsie	if
   14d8a:	f381 8811 	msr	BASEPRI, r1
   14d8e:	f3bf 8f6f 	isb	sy
   14d92:	2200      	movs	r2, #0
   14d94:	2300      	movs	r3, #0
   14d96:	f00f f838 	bl	23e0a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   14d9a:	bf00      	nop
   14d9c:	20002f78 	.word	0x20002f78

00014da0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   14da0:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   14da2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   14da6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   14daa:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   14dae:	4904      	ldr	r1, [pc, #16]	; (14dc0 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   14db0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   14db2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   14db4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   14db6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   14dba:	4902      	ldr	r1, [pc, #8]	; (14dc4 <_isr_wrapper+0x24>)
	bx r1
   14dbc:	4708      	bx	r1
   14dbe:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
   14dc0:	00026e1c 	.word	0x00026e1c
	ldr r1, =z_arm_int_exit
   14dc4:	00014dc9 	.word	0x00014dc9

00014dc8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   14dc8:	4b04      	ldr	r3, [pc, #16]	; (14ddc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   14dca:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   14dcc:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
   14dce:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   14dd0:	d003      	beq.n	14dda <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   14dd2:	4903      	ldr	r1, [pc, #12]	; (14de0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   14dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   14dd8:	600a      	str	r2, [r1, #0]

00014dda <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   14dda:	4770      	bx	lr
	ldr r3, =_kernel
   14ddc:	20002f78 	.word	0x20002f78
	ldr r1, =_SCS_ICSR
   14de0:	e000ed04 	.word	0xe000ed04

00014de4 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   14de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14de8:	b086      	sub	sp, #24
   14dea:	4606      	mov	r6, r0
   14dec:	af00      	add	r7, sp, #0
   14dee:	460d      	mov	r5, r1
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
   14df0:	4b47      	ldr	r3, [pc, #284]	; (14f10 <bus_fault.constprop.0+0x12c>)
   14df2:	617b      	str	r3, [r7, #20]
   14df4:	2402      	movs	r4, #2
   14df6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14dfa:	4846      	ldr	r0, [pc, #280]	; (14f14 <bus_fault.constprop.0+0x130>)
   14dfc:	613c      	str	r4, [r7, #16]
   14dfe:	f107 0210 	add.w	r2, r7, #16
   14e02:	f00f fdff 	bl	24a04 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   14e06:	4b44      	ldr	r3, [pc, #272]	; (14f18 <bus_fault.constprop.0+0x134>)
   14e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14e0a:	04d9      	lsls	r1, r3, #19
   14e0c:	d56d      	bpl.n	14eea <bus_fault.constprop.0+0x106>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
   14e0e:	4b43      	ldr	r3, [pc, #268]	; (14f1c <bus_fault.constprop.0+0x138>)
   14e10:	4840      	ldr	r0, [pc, #256]	; (14f14 <bus_fault.constprop.0+0x130>)
   14e12:	e9c7 4304 	strd	r4, r3, [r7, #16]
   14e16:	f107 0210 	add.w	r2, r7, #16
   14e1a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14e1e:	f00f fdf1 	bl	24a04 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
   14e22:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   14e24:	4b3c      	ldr	r3, [pc, #240]	; (14f18 <bus_fault.constprop.0+0x134>)
   14e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14e28:	051a      	lsls	r2, r3, #20
   14e2a:	d50b      	bpl.n	14e44 <bus_fault.constprop.0+0x60>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
   14e2c:	4b3c      	ldr	r3, [pc, #240]	; (14f20 <bus_fault.constprop.0+0x13c>)
   14e2e:	617b      	str	r3, [r7, #20]
   14e30:	2302      	movs	r3, #2
   14e32:	4838      	ldr	r0, [pc, #224]	; (14f14 <bus_fault.constprop.0+0x130>)
   14e34:	613b      	str	r3, [r7, #16]
   14e36:	f107 0210 	add.w	r2, r7, #16
   14e3a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14e3e:	f00f fde1 	bl	24a04 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
   14e42:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   14e44:	4c34      	ldr	r4, [pc, #208]	; (14f18 <bus_fault.constprop.0+0x134>)
   14e46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14e48:	059b      	lsls	r3, r3, #22
   14e4a:	d523      	bpl.n	14e94 <bus_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
   14e4c:	46e8      	mov	r8, sp
   14e4e:	4b35      	ldr	r3, [pc, #212]	; (14f24 <bus_fault.constprop.0+0x140>)
   14e50:	617b      	str	r3, [r7, #20]
   14e52:	2302      	movs	r3, #2
   14e54:	482f      	ldr	r0, [pc, #188]	; (14f14 <bus_fault.constprop.0+0x130>)
   14e56:	613b      	str	r3, [r7, #16]
   14e58:	f107 0210 	add.w	r2, r7, #16
   14e5c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14e60:	f00f fdd0 	bl	24a04 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   14e64:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   14e66:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   14e68:	0410      	lsls	r0, r2, #16
   14e6a:	d512      	bpl.n	14e92 <bus_fault.constprop.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   14e6c:	b088      	sub	sp, #32
   14e6e:	466a      	mov	r2, sp
   14e70:	492d      	ldr	r1, [pc, #180]	; (14f28 <bus_fault.constprop.0+0x144>)
   14e72:	4828      	ldr	r0, [pc, #160]	; (14f14 <bus_fault.constprop.0+0x130>)
   14e74:	e9c2 1305 	strd	r1, r3, [r2, #20]
   14e78:	2303      	movs	r3, #3
   14e7a:	f842 3f10 	str.w	r3, [r2, #16]!
   14e7e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   14e82:	f00f fdbf 	bl	24a04 <z_log_msg_static_create.constprop.0>
   14e86:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
   14e88:	b11e      	cbz	r6, 14e92 <bus_fault.constprop.0+0xae>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   14e8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14e8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   14e90:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
   14e92:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   14e94:	4b20      	ldr	r3, [pc, #128]	; (14f18 <bus_fault.constprop.0+0x134>)
   14e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14e98:	0559      	lsls	r1, r3, #21
   14e9a:	d50b      	bpl.n	14eb4 <bus_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
   14e9c:	4b23      	ldr	r3, [pc, #140]	; (14f2c <bus_fault.constprop.0+0x148>)
   14e9e:	617b      	str	r3, [r7, #20]
   14ea0:	2302      	movs	r3, #2
   14ea2:	481c      	ldr	r0, [pc, #112]	; (14f14 <bus_fault.constprop.0+0x130>)
   14ea4:	613b      	str	r3, [r7, #16]
   14ea6:	f107 0210 	add.w	r2, r7, #16
   14eaa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14eae:	f00f fda9 	bl	24a04 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
   14eb2:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   14eb4:	4b18      	ldr	r3, [pc, #96]	; (14f18 <bus_fault.constprop.0+0x134>)
   14eb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14eb8:	05d2      	lsls	r2, r2, #23
   14eba:	d518      	bpl.n	14eee <bus_fault.constprop.0+0x10a>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
   14ebc:	4b1c      	ldr	r3, [pc, #112]	; (14f30 <bus_fault.constprop.0+0x14c>)
   14ebe:	617b      	str	r3, [r7, #20]
   14ec0:	2302      	movs	r3, #2
   14ec2:	4814      	ldr	r0, [pc, #80]	; (14f14 <bus_fault.constprop.0+0x130>)
   14ec4:	613b      	str	r3, [r7, #16]
   14ec6:	f107 0210 	add.w	r2, r7, #16
   14eca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14ece:	f00f fd99 	bl	24a04 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
   14ed2:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   14ed4:	4a10      	ldr	r2, [pc, #64]	; (14f18 <bus_fault.constprop.0+0x134>)
   14ed6:	6a93      	ldr	r3, [r2, #40]	; 0x28
   14ed8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   14edc:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
   14ede:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
   14ee0:	2300      	movs	r3, #0
   14ee2:	702b      	strb	r3, [r5, #0]
}
   14ee4:	46bd      	mov	sp, r7
   14ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
   14eea:	2016      	movs	r0, #22
   14eec:	e79a      	b.n	14e24 <bus_fault.constprop.0+0x40>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   14eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14ef0:	049b      	lsls	r3, r3, #18
   14ef2:	d5ef      	bpl.n	14ed4 <bus_fault.constprop.0+0xf0>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   14ef4:	4b0f      	ldr	r3, [pc, #60]	; (14f34 <bus_fault.constprop.0+0x150>)
   14ef6:	617b      	str	r3, [r7, #20]
   14ef8:	2302      	movs	r3, #2
   14efa:	4806      	ldr	r0, [pc, #24]	; (14f14 <bus_fault.constprop.0+0x130>)
   14efc:	613b      	str	r3, [r7, #16]
   14efe:	f107 0210 	add.w	r2, r7, #16
   14f02:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14f06:	f00f fd7d 	bl	24a04 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_FP_LAZY_STATE_PRESERVATION;
   14f0a:	201c      	movs	r0, #28
   14f0c:	e7e2      	b.n	14ed4 <bus_fault.constprop.0+0xf0>
   14f0e:	bf00      	nop
   14f10:	000286dc 	.word	0x000286dc
   14f14:	000270a4 	.word	0x000270a4
   14f18:	e000ed00 	.word	0xe000ed00
   14f1c:	000286f2 	.word	0x000286f2
   14f20:	00028703 	.word	0x00028703
   14f24:	00028716 	.word	0x00028716
   14f28:	0002872f 	.word	0x0002872f
   14f2c:	00028744 	.word	0x00028744
   14f30:	0002875f 	.word	0x0002875f
   14f34:	00028777 	.word	0x00028777

00014f38 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   14f38:	b510      	push	{r4, lr}
   14f3a:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   14f3c:	4b36      	ldr	r3, [pc, #216]	; (15018 <usage_fault.constprop.0+0xe0>)
   14f3e:	4837      	ldr	r0, [pc, #220]	; (1501c <usage_fault.constprop.0+0xe4>)
   14f40:	9305      	str	r3, [sp, #20]
   14f42:	aa04      	add	r2, sp, #16
   14f44:	2402      	movs	r4, #2
   14f46:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14f4a:	9404      	str	r4, [sp, #16]
   14f4c:	f00f fd5a 	bl	24a04 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   14f50:	4b33      	ldr	r3, [pc, #204]	; (15020 <usage_fault.constprop.0+0xe8>)
   14f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14f54:	019a      	lsls	r2, r3, #6
   14f56:	d55d      	bpl.n	15014 <usage_fault.constprop.0+0xdc>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
   14f58:	4b32      	ldr	r3, [pc, #200]	; (15024 <usage_fault.constprop.0+0xec>)
   14f5a:	4830      	ldr	r0, [pc, #192]	; (1501c <usage_fault.constprop.0+0xe4>)
   14f5c:	aa04      	add	r2, sp, #16
   14f5e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14f62:	e9cd 4304 	strd	r4, r3, [sp, #16]
   14f66:	f00f fd4d 	bl	24a04 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
   14f6a:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   14f6c:	4b2c      	ldr	r3, [pc, #176]	; (15020 <usage_fault.constprop.0+0xe8>)
   14f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14f70:	01db      	lsls	r3, r3, #7
   14f72:	d50a      	bpl.n	14f8a <usage_fault.constprop.0+0x52>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
   14f74:	4b2c      	ldr	r3, [pc, #176]	; (15028 <usage_fault.constprop.0+0xf0>)
   14f76:	4829      	ldr	r0, [pc, #164]	; (1501c <usage_fault.constprop.0+0xe4>)
   14f78:	9305      	str	r3, [sp, #20]
   14f7a:	aa04      	add	r2, sp, #16
   14f7c:	2302      	movs	r3, #2
   14f7e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14f82:	9304      	str	r3, [sp, #16]
   14f84:	f00f fd3e 	bl	24a04 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
   14f88:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   14f8a:	4b25      	ldr	r3, [pc, #148]	; (15020 <usage_fault.constprop.0+0xe8>)
   14f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14f8e:	031c      	lsls	r4, r3, #12
   14f90:	d50a      	bpl.n	14fa8 <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
   14f92:	4b26      	ldr	r3, [pc, #152]	; (1502c <usage_fault.constprop.0+0xf4>)
   14f94:	4821      	ldr	r0, [pc, #132]	; (1501c <usage_fault.constprop.0+0xe4>)
   14f96:	9305      	str	r3, [sp, #20]
   14f98:	aa04      	add	r2, sp, #16
   14f9a:	2302      	movs	r3, #2
   14f9c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14fa0:	9304      	str	r3, [sp, #16]
   14fa2:	f00f fd2f 	bl	24a04 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
   14fa6:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   14fa8:	4b1d      	ldr	r3, [pc, #116]	; (15020 <usage_fault.constprop.0+0xe8>)
   14faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14fac:	0359      	lsls	r1, r3, #13
   14fae:	d50a      	bpl.n	14fc6 <usage_fault.constprop.0+0x8e>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   14fb0:	4b1f      	ldr	r3, [pc, #124]	; (15030 <usage_fault.constprop.0+0xf8>)
   14fb2:	481a      	ldr	r0, [pc, #104]	; (1501c <usage_fault.constprop.0+0xe4>)
   14fb4:	9305      	str	r3, [sp, #20]
   14fb6:	aa04      	add	r2, sp, #16
   14fb8:	2302      	movs	r3, #2
   14fba:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14fbe:	9304      	str	r3, [sp, #16]
   14fc0:	f00f fd20 	bl	24a04 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
   14fc4:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   14fc6:	4b16      	ldr	r3, [pc, #88]	; (15020 <usage_fault.constprop.0+0xe8>)
   14fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14fca:	039a      	lsls	r2, r3, #14
   14fcc:	d50a      	bpl.n	14fe4 <usage_fault.constprop.0+0xac>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
   14fce:	4b19      	ldr	r3, [pc, #100]	; (15034 <usage_fault.constprop.0+0xfc>)
   14fd0:	4812      	ldr	r0, [pc, #72]	; (1501c <usage_fault.constprop.0+0xe4>)
   14fd2:	9305      	str	r3, [sp, #20]
   14fd4:	aa04      	add	r2, sp, #16
   14fd6:	2302      	movs	r3, #2
   14fd8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14fdc:	9304      	str	r3, [sp, #16]
   14fde:	f00f fd11 	bl	24a04 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
   14fe2:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   14fe4:	4b0e      	ldr	r3, [pc, #56]	; (15020 <usage_fault.constprop.0+0xe8>)
   14fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   14fe8:	03db      	lsls	r3, r3, #15
   14fea:	d50a      	bpl.n	15002 <usage_fault.constprop.0+0xca>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   14fec:	4b12      	ldr	r3, [pc, #72]	; (15038 <usage_fault.constprop.0+0x100>)
   14fee:	480b      	ldr	r0, [pc, #44]	; (1501c <usage_fault.constprop.0+0xe4>)
   14ff0:	9305      	str	r3, [sp, #20]
   14ff2:	aa04      	add	r2, sp, #16
   14ff4:	2302      	movs	r3, #2
   14ff6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   14ffa:	9304      	str	r3, [sp, #16]
   14ffc:	f00f fd02 	bl	24a04 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
   15000:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   15002:	4a07      	ldr	r2, [pc, #28]	; (15020 <usage_fault.constprop.0+0xe8>)
   15004:	6a93      	ldr	r3, [r2, #40]	; 0x28
   15006:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   1500a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   1500e:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   15010:	b006      	add	sp, #24
   15012:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
   15014:	201d      	movs	r0, #29
   15016:	e7a9      	b.n	14f6c <usage_fault.constprop.0+0x34>
   15018:	000287a6 	.word	0x000287a6
   1501c:	000270a4 	.word	0x000270a4
   15020:	e000ed00 	.word	0xe000ed00
   15024:	000287be 	.word	0x000287be
   15028:	000287d1 	.word	0x000287d1
   1502c:	000287eb 	.word	0x000287eb
   15030:	00028809 	.word	0x00028809
   15034:	0002882e 	.word	0x0002882e
   15038:	00028848 	.word	0x00028848

0001503c <mem_manage_fault>:
{
   1503c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15040:	b086      	sub	sp, #24
   15042:	4681      	mov	r9, r0
   15044:	af00      	add	r7, sp, #0
   15046:	468a      	mov	sl, r1
   15048:	4690      	mov	r8, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   1504a:	4b5a      	ldr	r3, [pc, #360]	; (151b4 <mem_manage_fault+0x178>)
   1504c:	485a      	ldr	r0, [pc, #360]	; (151b8 <mem_manage_fault+0x17c>)
   1504e:	617b      	str	r3, [r7, #20]
   15050:	2402      	movs	r4, #2
   15052:	613c      	str	r4, [r7, #16]
   15054:	f107 0210 	add.w	r2, r7, #16
   15058:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1505c:	f00f fcd2 	bl	24a04 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   15060:	4b56      	ldr	r3, [pc, #344]	; (151bc <mem_manage_fault+0x180>)
   15062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15064:	06d8      	lsls	r0, r3, #27
   15066:	d545      	bpl.n	150f4 <mem_manage_fault+0xb8>
		PR_FAULT_INFO("  Stacking error (context area might be"
   15068:	4b55      	ldr	r3, [pc, #340]	; (151c0 <mem_manage_fault+0x184>)
   1506a:	4853      	ldr	r0, [pc, #332]	; (151b8 <mem_manage_fault+0x17c>)
   1506c:	e9c7 4304 	strd	r4, r3, [r7, #16]
   15070:	f107 0210 	add.w	r2, r7, #16
   15074:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_STACKING;
   15078:	2411      	movs	r4, #17
		PR_FAULT_INFO("  Stacking error (context area might be"
   1507a:	f00f fcc3 	bl	24a04 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   1507e:	4b4f      	ldr	r3, [pc, #316]	; (151bc <mem_manage_fault+0x180>)
   15080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15082:	0719      	lsls	r1, r3, #28
   15084:	d50b      	bpl.n	1509e <mem_manage_fault+0x62>
		PR_FAULT_INFO("  Unstacking error");
   15086:	4b4f      	ldr	r3, [pc, #316]	; (151c4 <mem_manage_fault+0x188>)
   15088:	617b      	str	r3, [r7, #20]
   1508a:	2302      	movs	r3, #2
   1508c:	484a      	ldr	r0, [pc, #296]	; (151b8 <mem_manage_fault+0x17c>)
   1508e:	613b      	str	r3, [r7, #16]
   15090:	f107 0210 	add.w	r2, r7, #16
   15094:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_UNSTACKING;
   15098:	2412      	movs	r4, #18
		PR_FAULT_INFO("  Unstacking error");
   1509a:	f00f fcb3 	bl	24a04 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   1509e:	4d47      	ldr	r5, [pc, #284]	; (151bc <mem_manage_fault+0x180>)
   150a0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   150a2:	079a      	lsls	r2, r3, #30
   150a4:	d528      	bpl.n	150f8 <mem_manage_fault+0xbc>
		PR_FAULT_INFO("  Data Access Violation");
   150a6:	466c      	mov	r4, sp
   150a8:	4b47      	ldr	r3, [pc, #284]	; (151c8 <mem_manage_fault+0x18c>)
   150aa:	617b      	str	r3, [r7, #20]
   150ac:	2302      	movs	r3, #2
   150ae:	613b      	str	r3, [r7, #16]
   150b0:	4841      	ldr	r0, [pc, #260]	; (151b8 <mem_manage_fault+0x17c>)
   150b2:	f107 0210 	add.w	r2, r7, #16
   150b6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   150ba:	f00f fca3 	bl	24a04 <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
   150be:	6b6e      	ldr	r6, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   150c0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   150c2:	061b      	lsls	r3, r3, #24
   150c4:	d560      	bpl.n	15188 <mem_manage_fault+0x14c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   150c6:	b088      	sub	sp, #32
   150c8:	466a      	mov	r2, sp
   150ca:	4b40      	ldr	r3, [pc, #256]	; (151cc <mem_manage_fault+0x190>)
   150cc:	483a      	ldr	r0, [pc, #232]	; (151b8 <mem_manage_fault+0x17c>)
   150ce:	e9c2 3605 	strd	r3, r6, [r2, #20]
   150d2:	2303      	movs	r3, #3
   150d4:	f842 3f10 	str.w	r3, [r2, #16]!
   150d8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   150dc:	f00f fc92 	bl	24a04 <z_log_msg_static_create.constprop.0>
   150e0:	46a5      	mov	sp, r4
			if (from_hard_fault != 0) {
   150e2:	f1ba 0f00 	cmp.w	sl, #0
   150e6:	d003      	beq.n	150f0 <mem_manage_fault+0xb4>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   150e8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   150ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   150ee:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
   150f0:	2413      	movs	r4, #19
   150f2:	e003      	b.n	150fc <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
   150f4:	2410      	movs	r4, #16
   150f6:	e7c2      	b.n	1507e <mem_manage_fault+0x42>
	uint32_t mmfar = -EINVAL;
   150f8:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   150fc:	4b2f      	ldr	r3, [pc, #188]	; (151bc <mem_manage_fault+0x180>)
   150fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15100:	07d8      	lsls	r0, r3, #31
   15102:	d50b      	bpl.n	1511c <mem_manage_fault+0xe0>
		PR_FAULT_INFO("  Instruction Access Violation");
   15104:	4b32      	ldr	r3, [pc, #200]	; (151d0 <mem_manage_fault+0x194>)
   15106:	617b      	str	r3, [r7, #20]
   15108:	2302      	movs	r3, #2
   1510a:	482b      	ldr	r0, [pc, #172]	; (151b8 <mem_manage_fault+0x17c>)
   1510c:	613b      	str	r3, [r7, #16]
   1510e:	f107 0210 	add.w	r2, r7, #16
   15112:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
   15116:	2414      	movs	r4, #20
		PR_FAULT_INFO("  Instruction Access Violation");
   15118:	f00f fc74 	bl	24a04 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1511c:	4b27      	ldr	r3, [pc, #156]	; (151bc <mem_manage_fault+0x180>)
   1511e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   15120:	0699      	lsls	r1, r3, #26
   15122:	d50b      	bpl.n	1513c <mem_manage_fault+0x100>
		PR_FAULT_INFO(
   15124:	4b2b      	ldr	r3, [pc, #172]	; (151d4 <mem_manage_fault+0x198>)
   15126:	617b      	str	r3, [r7, #20]
   15128:	2302      	movs	r3, #2
   1512a:	4823      	ldr	r0, [pc, #140]	; (151b8 <mem_manage_fault+0x17c>)
   1512c:	613b      	str	r3, [r7, #16]
   1512e:	f107 0210 	add.w	r2, r7, #16
   15132:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_FP_LAZY_STATE_PRESERVATION;
   15136:	2415      	movs	r4, #21
		PR_FAULT_INFO(
   15138:	f00f fc64 	bl	24a04 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1513c:	4d1f      	ldr	r5, [pc, #124]	; (151bc <mem_manage_fault+0x180>)
   1513e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15140:	06da      	lsls	r2, r3, #27
   15142:	d402      	bmi.n	1514a <mem_manage_fault+0x10e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   15144:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   15146:	079b      	lsls	r3, r3, #30
   15148:	d50a      	bpl.n	15160 <mem_manage_fault+0x124>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   1514a:	686b      	ldr	r3, [r5, #4]
   1514c:	0518      	lsls	r0, r3, #20
   1514e:	d507      	bpl.n	15160 <mem_manage_fault+0x124>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   15150:	4649      	mov	r1, r9
   15152:	4630      	mov	r0, r6
   15154:	f7ff fde4 	bl	14d20 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   15158:	b1c8      	cbz	r0, 1518e <mem_manage_fault+0x152>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1515a:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   1515e:	2402      	movs	r4, #2
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   15160:	4b16      	ldr	r3, [pc, #88]	; (151bc <mem_manage_fault+0x180>)
   15162:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   15164:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   15166:	bf42      	ittt	mi
   15168:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
   1516a:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
   1516e:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   15170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   15172:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   15176:	629a      	str	r2, [r3, #40]	; 0x28
}
   15178:	4620      	mov	r0, r4
	*recoverable = memory_fault_recoverable(esf, true);
   1517a:	2300      	movs	r3, #0
}
   1517c:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
   1517e:	f888 3000 	strb.w	r3, [r8]
}
   15182:	46bd      	mov	sp, r7
   15184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t mmfar = -EINVAL;
   15188:	f06f 0615 	mvn.w	r6, #21
   1518c:	e7b0      	b.n	150f0 <mem_manage_fault+0xb4>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   1518e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   15190:	06d9      	lsls	r1, r3, #27
   15192:	d5e5      	bpl.n	15160 <mem_manage_fault+0x124>
   15194:	4910      	ldr	r1, [pc, #64]	; (151d8 <mem_manage_fault+0x19c>)
   15196:	4a11      	ldr	r2, [pc, #68]	; (151dc <mem_manage_fault+0x1a0>)
   15198:	4811      	ldr	r0, [pc, #68]	; (151e0 <mem_manage_fault+0x1a4>)
   1519a:	f44f 73ae 	mov.w	r3, #348	; 0x15c
   1519e:	f00f f851 	bl	24244 <assert_print>
   151a2:	4810      	ldr	r0, [pc, #64]	; (151e4 <mem_manage_fault+0x1a8>)
   151a4:	f00f f84e 	bl	24244 <assert_print>
   151a8:	480c      	ldr	r0, [pc, #48]	; (151dc <mem_manage_fault+0x1a0>)
   151aa:	f44f 71ae 	mov.w	r1, #348	; 0x15c
   151ae:	f00f f842 	bl	24236 <assert_post_action>
   151b2:	bf00      	nop
   151b4:	00028873 	.word	0x00028873
   151b8:	000270a4 	.word	0x000270a4
   151bc:	e000ed00 	.word	0xe000ed00
   151c0:	00028889 	.word	0x00028889
   151c4:	00028703 	.word	0x00028703
   151c8:	000288bc 	.word	0x000288bc
   151cc:	000288d4 	.word	0x000288d4
   151d0:	000288ea 	.word	0x000288ea
   151d4:	00028777 	.word	0x00028777
   151d8:	00028943 	.word	0x00028943
   151dc:	00028909 	.word	0x00028909
   151e0:	00027c2a 	.word	0x00027c2a
   151e4:	0002898d 	.word	0x0002898d

000151e8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   151e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   151ec:	4b8a      	ldr	r3, [pc, #552]	; (15418 <z_arm_fault+0x230>)
{
   151ee:	b09d      	sub	sp, #116	; 0x74
   151f0:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   151f2:	6858      	ldr	r0, [r3, #4]
{
   151f4:	af00      	add	r7, sp, #0
   151f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
   151fa:	2600      	movs	r6, #0
   151fc:	f386 8811 	msr	BASEPRI, r6
   15200:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   15204:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
   15208:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
   1520c:	d10e      	bne.n	1522c <z_arm_fault+0x44>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   1520e:	f002 040c 	and.w	r4, r2, #12
   15212:	2c08      	cmp	r4, #8
   15214:	d119      	bne.n	1524a <z_arm_fault+0x62>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   15216:	4b81      	ldr	r3, [pc, #516]	; (1541c <z_arm_fault+0x234>)
   15218:	61fb      	str	r3, [r7, #28]
   1521a:	2302      	movs	r3, #2
   1521c:	4880      	ldr	r0, [pc, #512]	; (15420 <z_arm_fault+0x238>)
   1521e:	61bb      	str	r3, [r7, #24]
   15220:	f107 0218 	add.w	r2, r7, #24
   15224:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15228:	f00f fbec 	bl	24a04 <z_log_msg_static_create.constprop.0>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   1522c:	497d      	ldr	r1, [pc, #500]	; (15424 <z_arm_fault+0x23c>)
   1522e:	4a7e      	ldr	r2, [pc, #504]	; (15428 <z_arm_fault+0x240>)
   15230:	487e      	ldr	r0, [pc, #504]	; (1542c <z_arm_fault+0x244>)
   15232:	f240 433f 	movw	r3, #1087	; 0x43f
   15236:	f00f f805 	bl	24244 <assert_print>
   1523a:	487d      	ldr	r0, [pc, #500]	; (15430 <z_arm_fault+0x248>)
   1523c:	f00f f802 	bl	24244 <assert_print>
   15240:	f240 413f 	movw	r1, #1087	; 0x43f
			__ASSERT(0,
   15244:	4878      	ldr	r0, [pc, #480]	; (15428 <z_arm_fault+0x240>)
   15246:	f00e fff6 	bl	24236 <assert_post_action>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   1524a:	0714      	lsls	r4, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   1524c:	bf4c      	ite	mi
   1524e:	460d      	movmi	r5, r1
			*nested_exc = true;
   15250:	2601      	movpl	r6, #1
	__ASSERT(esf != NULL,
   15252:	2d00      	cmp	r5, #0
   15254:	d0ea      	beq.n	1522c <z_arm_fault+0x44>
	*recoverable = false;
   15256:	2200      	movs	r2, #0
   15258:	71fa      	strb	r2, [r7, #7]
	switch (fault) {
   1525a:	1eda      	subs	r2, r3, #3
   1525c:	2a09      	cmp	r2, #9
   1525e:	f200 80bb 	bhi.w	153d8 <z_arm_fault+0x1f0>
   15262:	e8df f002 	tbb	[pc, r2]
   15266:	ae05      	.short	0xae05
   15268:	b9b991b1 	.word	0xb9b991b1
   1526c:	b4b9b9b9 	.word	0xb4b9b9b9
	PR_FAULT_INFO("***** HARD FAULT *****");
   15270:	46e9      	mov	r9, sp
   15272:	4b70      	ldr	r3, [pc, #448]	; (15434 <z_arm_fault+0x24c>)
   15274:	61fb      	str	r3, [r7, #28]
   15276:	f04f 0802 	mov.w	r8, #2
   1527a:	f107 0218 	add.w	r2, r7, #24
   1527e:	4868      	ldr	r0, [pc, #416]	; (15420 <z_arm_fault+0x238>)
   15280:	f8c7 8018 	str.w	r8, [r7, #24]
   15284:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15288:	f00f fbbc 	bl	24a04 <z_log_msg_static_create.constprop.0>
	*recoverable = false;
   1528c:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1528e:	4c62      	ldr	r4, [pc, #392]	; (15418 <z_arm_fault+0x230>)
	*recoverable = false;
   15290:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   15292:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   15294:	079a      	lsls	r2, r3, #30
   15296:	d50b      	bpl.n	152b0 <z_arm_fault+0xc8>
		PR_EXC("  Bus fault on vector table read");
   15298:	4b67      	ldr	r3, [pc, #412]	; (15438 <z_arm_fault+0x250>)
		PR_EXC("  Debug event");
   1529a:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
   1529e:	4860      	ldr	r0, [pc, #384]	; (15420 <z_arm_fault+0x238>)
   152a0:	f107 0218 	add.w	r2, r7, #24
   152a4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   152a8:	f00f fbac 	bl	24a04 <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   152ac:	2400      	movs	r4, #0
   152ae:	e038      	b.n	15322 <z_arm_fault+0x13a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   152b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   152b2:	2b00      	cmp	r3, #0
   152b4:	da01      	bge.n	152ba <z_arm_fault+0xd2>
		PR_EXC("  Debug event");
   152b6:	4b61      	ldr	r3, [pc, #388]	; (1543c <z_arm_fault+0x254>)
   152b8:	e7ef      	b.n	1529a <z_arm_fault+0xb2>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   152ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   152bc:	005b      	lsls	r3, r3, #1
   152be:	d573      	bpl.n	153a8 <z_arm_fault+0x1c0>
		PR_EXC("  Fault escalation (see below)");
   152c0:	4b5f      	ldr	r3, [pc, #380]	; (15440 <z_arm_fault+0x258>)
   152c2:	4857      	ldr	r0, [pc, #348]	; (15420 <z_arm_fault+0x238>)
   152c4:	e9c7 8306 	strd	r8, r3, [r7, #24]
   152c8:	f107 0218 	add.w	r2, r7, #24
   152cc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   152d0:	f00f fb98 	bl	24a04 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   152d4:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   152d6:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   152d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   152dc:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   152de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   152e2:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   152e6:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   152e8:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   152ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   152f0:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   152f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   152f6:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   152fa:	f64d 7302 	movw	r3, #57090	; 0xdf02
   152fe:	429a      	cmp	r2, r3
   15300:	d12b      	bne.n	1535a <z_arm_fault+0x172>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   15302:	b088      	sub	sp, #32
   15304:	682b      	ldr	r3, [r5, #0]
   15306:	466a      	mov	r2, sp
   15308:	494e      	ldr	r1, [pc, #312]	; (15444 <z_arm_fault+0x25c>)
   1530a:	4845      	ldr	r0, [pc, #276]	; (15420 <z_arm_fault+0x238>)
   1530c:	e9c2 1305 	strd	r1, r3, [r2, #20]
   15310:	2303      	movs	r3, #3
   15312:	f842 3f10 	str.w	r3, [r2, #16]!
   15316:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1531a:	f00f fb73 	bl	24a04 <z_log_msg_static_create.constprop.0>
			reason = esf->basic.r0;
   1531e:	682c      	ldr	r4, [r5, #0]
   15320:	46cd      	mov	sp, r9
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   15322:	79fb      	ldrb	r3, [r7, #7]
   15324:	b9ab      	cbnz	r3, 15352 <z_arm_fault+0x16a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   15326:	2268      	movs	r2, #104	; 0x68
   15328:	4629      	mov	r1, r5
   1532a:	f107 0008 	add.w	r0, r7, #8
   1532e:	f00f fb8d 	bl	24a4c <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   15332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15334:	2e00      	cmp	r6, #0
   15336:	d06a      	beq.n	1540e <z_arm_fault+0x226>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   15338:	f3c3 0208 	ubfx	r2, r3, #0, #9
   1533c:	b922      	cbnz	r2, 15348 <z_arm_fault+0x160>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1533e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   15342:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   15346:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
   15348:	f107 0108 	add.w	r1, r7, #8
   1534c:	4620      	mov	r0, r4
   1534e:	f7ff fac5 	bl	148dc <z_arm_fatal_error>
}
   15352:	3774      	adds	r7, #116	; 0x74
   15354:	46bd      	mov	sp, r7
   15356:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   1535a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1535c:	b2db      	uxtb	r3, r3
   1535e:	b133      	cbz	r3, 1536e <z_arm_fault+0x186>
			reason = mem_manage_fault(esf, 1, recoverable);
   15360:	1dfa      	adds	r2, r7, #7
   15362:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   15364:	4628      	mov	r0, r5
   15366:	f7ff fe69 	bl	1503c <mem_manage_fault>
   1536a:	4604      	mov	r4, r0
		break;
   1536c:	e7d9      	b.n	15322 <z_arm_fault+0x13a>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   1536e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   15370:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   15374:	d004      	beq.n	15380 <z_arm_fault+0x198>
			reason = bus_fault(esf, 1, recoverable);
   15376:	1df9      	adds	r1, r7, #7
   15378:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   1537a:	f7ff fd33 	bl	14de4 <bus_fault.constprop.0>
   1537e:	e7f4      	b.n	1536a <z_arm_fault+0x182>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   15380:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   15382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   15386:	d302      	bcc.n	1538e <z_arm_fault+0x1a6>
		reason = usage_fault(esf);
   15388:	f7ff fdd6 	bl	14f38 <usage_fault.constprop.0>
   1538c:	e7ed      	b.n	1536a <z_arm_fault+0x182>
			__ASSERT(0,
   1538e:	492e      	ldr	r1, [pc, #184]	; (15448 <z_arm_fault+0x260>)
   15390:	4a25      	ldr	r2, [pc, #148]	; (15428 <z_arm_fault+0x240>)
   15392:	4826      	ldr	r0, [pc, #152]	; (1542c <z_arm_fault+0x244>)
   15394:	f240 3311 	movw	r3, #785	; 0x311
   15398:	f00e ff54 	bl	24244 <assert_print>
   1539c:	482b      	ldr	r0, [pc, #172]	; (1544c <z_arm_fault+0x264>)
   1539e:	f00e ff51 	bl	24244 <assert_print>
   153a2:	f240 3111 	movw	r1, #785	; 0x311
   153a6:	e74d      	b.n	15244 <z_arm_fault+0x5c>
		__ASSERT(0,
   153a8:	4927      	ldr	r1, [pc, #156]	; (15448 <z_arm_fault+0x260>)
   153aa:	4a1f      	ldr	r2, [pc, #124]	; (15428 <z_arm_fault+0x240>)
   153ac:	481f      	ldr	r0, [pc, #124]	; (1542c <z_arm_fault+0x244>)
   153ae:	f240 3315 	movw	r3, #789	; 0x315
   153b2:	f00e ff47 	bl	24244 <assert_print>
   153b6:	4826      	ldr	r0, [pc, #152]	; (15450 <z_arm_fault+0x268>)
   153b8:	f00e ff44 	bl	24244 <assert_print>
   153bc:	f240 3115 	movw	r1, #789	; 0x315
   153c0:	e740      	b.n	15244 <z_arm_fault+0x5c>
		reason = mem_manage_fault(esf, 0, recoverable);
   153c2:	1dfa      	adds	r2, r7, #7
   153c4:	2100      	movs	r1, #0
   153c6:	e7cd      	b.n	15364 <z_arm_fault+0x17c>
		reason = bus_fault(esf, 0, recoverable);
   153c8:	1df9      	adds	r1, r7, #7
   153ca:	2000      	movs	r0, #0
   153cc:	e7d5      	b.n	1537a <z_arm_fault+0x192>
	PR_FAULT_INFO(
   153ce:	4b21      	ldr	r3, [pc, #132]	; (15454 <z_arm_fault+0x26c>)
   153d0:	61fb      	str	r3, [r7, #28]
   153d2:	2302      	movs	r3, #2
   153d4:	61bb      	str	r3, [r7, #24]
   153d6:	e762      	b.n	1529e <z_arm_fault+0xb6>
	PR_FAULT_INFO("***** %s %d) *****",
   153d8:	4a1f      	ldr	r2, [pc, #124]	; (15458 <z_arm_fault+0x270>)
   153da:	4920      	ldr	r1, [pc, #128]	; (1545c <z_arm_fault+0x274>)
   153dc:	f410 7ff8 	tst.w	r0, #496	; 0x1f0
   153e0:	466c      	mov	r4, sp
   153e2:	b08a      	sub	sp, #40	; 0x28
   153e4:	bf18      	it	ne
   153e6:	4611      	movne	r1, r2
   153e8:	466a      	mov	r2, sp
   153ea:	3b10      	subs	r3, #16
   153ec:	61d3      	str	r3, [r2, #28]
   153ee:	481c      	ldr	r0, [pc, #112]	; (15460 <z_arm_fault+0x278>)
   153f0:	f44f 7300 	mov.w	r3, #512	; 0x200
   153f4:	8413      	strh	r3, [r2, #32]
   153f6:	4b1b      	ldr	r3, [pc, #108]	; (15464 <z_arm_fault+0x27c>)
   153f8:	e9c2 0105 	strd	r0, r1, [r2, #20]
   153fc:	f842 3f10 	str.w	r3, [r2, #16]!
   15400:	4807      	ldr	r0, [pc, #28]	; (15420 <z_arm_fault+0x238>)
   15402:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   15406:	f00f fafd 	bl	24a04 <z_log_msg_static_create.constprop.0>
   1540a:	46a5      	mov	sp, r4
}
   1540c:	e74e      	b.n	152ac <z_arm_fault+0xc4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1540e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   15412:	f023 0301 	bic.w	r3, r3, #1
   15416:	e796      	b.n	15346 <z_arm_fault+0x15e>
   15418:	e000ed00 	.word	0xe000ed00
   1541c:	000289de 	.word	0x000289de
   15420:	000270a4 	.word	0x000270a4
   15424:	00028a09 	.word	0x00028a09
   15428:	00028909 	.word	0x00028909
   1542c:	00027c2a 	.word	0x00027c2a
   15430:	00028a1c 	.word	0x00028a1c
   15434:	00028a5a 	.word	0x00028a5a
   15438:	00028a71 	.word	0x00028a71
   1543c:	00028a92 	.word	0x00028a92
   15440:	00028aa0 	.word	0x00028aa0
   15444:	00028abf 	.word	0x00028abf
   15448:	0002a7c0 	.word	0x0002a7c0
   1544c:	00028adb 	.word	0x00028adb
   15450:	00028aff 	.word	0x00028aff
   15454:	00028b2f 	.word	0x00028b2f
   15458:	000289c5 	.word	0x000289c5
   1545c:	000289b0 	.word	0x000289b0
   15460:	00028b53 	.word	0x00028b53
   15464:	01000004 	.word	0x01000004

00015468 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   15468:	4a02      	ldr	r2, [pc, #8]	; (15474 <z_arm_fault_init+0xc>)
   1546a:	6953      	ldr	r3, [r2, #20]
   1546c:	f043 0310 	orr.w	r3, r3, #16
   15470:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   15472:	4770      	bx	lr
   15474:	e000ed00 	.word	0xe000ed00

00015478 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   15478:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   1547c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   15480:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   15482:	4672      	mov	r2, lr
	bl z_arm_fault
   15484:	f7ff feb0 	bl	151e8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   15488:	bd01      	pop	{r0, pc}
   1548a:	bf00      	nop

0001548c <z_arm_interrupt_init>:
   1548c:	4804      	ldr	r0, [pc, #16]	; (154a0 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   1548e:	2300      	movs	r3, #0
   15490:	2140      	movs	r1, #64	; 0x40
   15492:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   15494:	3301      	adds	r3, #1
   15496:	2b27      	cmp	r3, #39	; 0x27
   15498:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   1549c:	d1f9      	bne.n	15492 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1549e:	4770      	bx	lr
   154a0:	e000e100 	.word	0xe000e100

000154a4 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   154a4:	2000      	movs	r0, #0
    msr CONTROL, r0
   154a6:	f380 8814 	msr	CONTROL, r0
    isb
   154aa:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   154ae:	f7fe f9f7 	bl	138a0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   154b2:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   154b4:	490d      	ldr	r1, [pc, #52]	; (154ec <__start+0x48>)
    str r0, [r1]
   154b6:	6008      	str	r0, [r1, #0]
    dsb
   154b8:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   154bc:	480c      	ldr	r0, [pc, #48]	; (154f0 <__start+0x4c>)
    msr msp, r0
   154be:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   154c2:	f000 f83d 	bl	15540 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   154c6:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   154c8:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   154cc:	4809      	ldr	r0, [pc, #36]	; (154f4 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   154ce:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   154d2:	1840      	adds	r0, r0, r1
    msr PSP, r0
   154d4:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   154d8:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   154dc:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   154de:	4308      	orrs	r0, r1
    msr CONTROL, r0
   154e0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   154e4:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   154e8:	f7ff fb12 	bl	14b10 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   154ec:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   154f0:	20007580 	.word	0x20007580
    ldr r0, =z_interrupt_stacks
   154f4:	20005b80 	.word	0x20005b80

000154f8 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   154f8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   154fc:	4905      	ldr	r1, [pc, #20]	; (15514 <sys_arch_reboot+0x1c>)
   154fe:	4b06      	ldr	r3, [pc, #24]	; (15518 <sys_arch_reboot+0x20>)
   15500:	68ca      	ldr	r2, [r1, #12]
   15502:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   15506:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   15508:	60cb      	str	r3, [r1, #12]
   1550a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1550e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   15510:	e7fd      	b.n	1550e <sys_arch_reboot+0x16>
   15512:	bf00      	nop
   15514:	e000ed00 	.word	0xe000ed00
   15518:	05fa0004 	.word	0x05fa0004

0001551c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   1551c:	4907      	ldr	r1, [pc, #28]	; (1553c <z_arm_clear_arm_mpu_config+0x20>)
   1551e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   15522:	2300      	movs	r3, #0
	int num_regions =
   15524:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   15528:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   1552a:	4293      	cmp	r3, r2
   1552c:	db00      	blt.n	15530 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   1552e:	4770      	bx	lr
  MPU->RNR = rnr;
   15530:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   15534:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   15538:	3301      	adds	r3, #1
   1553a:	e7f6      	b.n	1552a <z_arm_clear_arm_mpu_config+0xe>
   1553c:	e000ed00 	.word	0xe000ed00

00015540 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   15540:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   15542:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   15544:	2300      	movs	r3, #0
   15546:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   1554a:	f7ff ffe7 	bl	1551c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   1554e:	4b14      	ldr	r3, [pc, #80]	; (155a0 <z_arm_init_arch_hw_at_boot+0x60>)
   15550:	f04f 32ff 	mov.w	r2, #4294967295
   15554:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   15558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   1555c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   15560:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   15564:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   15568:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   1556c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   15570:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   15574:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   15578:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   1557c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   15580:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   15584:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   15588:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   1558c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   15590:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   15594:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   15596:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1559a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	barrier_dsync_fence_full();
	barrier_isync_fence_full();
}
   1559e:	bd08      	pop	{r3, pc}
   155a0:	e000e100 	.word	0xe000e100

000155a4 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   155a4:	4b08      	ldr	r3, [pc, #32]	; (155c8 <z_impl_k_thread_abort+0x24>)
   155a6:	689b      	ldr	r3, [r3, #8]
   155a8:	4283      	cmp	r3, r0
   155aa:	d10b      	bne.n	155c4 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   155ac:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   155b0:	b143      	cbz	r3, 155c4 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   155b2:	4b06      	ldr	r3, [pc, #24]	; (155cc <z_impl_k_thread_abort+0x28>)
   155b4:	685a      	ldr	r2, [r3, #4]
   155b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   155ba:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   155bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   155be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   155c2:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   155c4:	f00c bfb6 	b.w	22534 <z_thread_abort>
   155c8:	20002f78 	.word	0x20002f78
   155cc:	e000ed00 	.word	0xe000ed00

000155d0 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   155d0:	4b02      	ldr	r3, [pc, #8]	; (155dc <z_arm_configure_static_mpu_regions+0xc>)
   155d2:	4a03      	ldr	r2, [pc, #12]	; (155e0 <z_arm_configure_static_mpu_regions+0x10>)
   155d4:	4803      	ldr	r0, [pc, #12]	; (155e4 <z_arm_configure_static_mpu_regions+0x14>)
   155d6:	2101      	movs	r1, #1
   155d8:	f000 b898 	b.w	1570c <arm_core_mpu_configure_static_mpu_regions>
   155dc:	20010000 	.word	0x20010000
   155e0:	20000000 	.word	0x20000000
   155e4:	000272ac 	.word	0x000272ac

000155e8 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
   155e8:	b510      	push	{r4, lr}
   155ea:	4604      	mov	r4, r0
	/* Privileged stack guard */
	uintptr_t guard_start;
	size_t guard_size = MPU_GUARD_ALIGN_AND_SIZE;

#if defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
   155ec:	f7ff fb60 	bl	14cb0 <z_arm_mpu_stack_guard_and_fpu_adjust>
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   155f0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
   155f2:	4603      	mov	r3, r0
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   155f4:	4805      	ldr	r0, [pc, #20]	; (1560c <z_arm_configure_dynamic_mpu_regions+0x24>)
		guard_start = thread->stack_info.start - guard_size;
   155f6:	1ad2      	subs	r2, r2, r3
	dynamic_regions[region_num].size = guard_size;
   155f8:	e9c0 2300 	strd	r2, r3, [r0]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   155fc:	4b04      	ldr	r3, [pc, #16]	; (15610 <z_arm_configure_dynamic_mpu_regions+0x28>)
   155fe:	6083      	str	r3, [r0, #8]
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
						   region_num);
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_enable();
#endif
}
   15600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   15604:	2101      	movs	r1, #1
   15606:	f000 b8a7 	b.w	15758 <arm_core_mpu_configure_dynamic_mpu_regions>
   1560a:	bf00      	nop
   1560c:	20002c60 	.word	0x20002c60
   15610:	150b0000 	.word	0x150b0000

00015614 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   15614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   15618:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 156dc <mpu_configure_regions+0xc8>
   1561c:	469c      	mov	ip, r3
   1561e:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
   15620:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
   15622:	2300      	movs	r3, #0
   15624:	428b      	cmp	r3, r1
   15626:	da1a      	bge.n	1565e <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
   15628:	6844      	ldr	r4, [r0, #4]
   1562a:	2c00      	cmp	r4, #0
   1562c:	d04d      	beq.n	156ca <mpu_configure_regions+0xb6>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   1562e:	f1bc 0f00 	cmp.w	ip, #0
   15632:	d01d      	beq.n	15670 <mpu_configure_regions+0x5c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   15634:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   15636:	4234      	tst	r4, r6
   15638:	d015      	beq.n	15666 <mpu_configure_regions+0x52>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   1563a:	466c      	mov	r4, sp
   1563c:	b088      	sub	sp, #32
   1563e:	466a      	mov	r2, sp
   15640:	4923      	ldr	r1, [pc, #140]	; (156d0 <mpu_configure_regions+0xbc>)
   15642:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   15646:	2303      	movs	r3, #3
   15648:	f842 3f10 	str.w	r3, [r2, #16]!
   1564c:	4821      	ldr	r0, [pc, #132]	; (156d4 <mpu_configure_regions+0xc0>)
   1564e:	2300      	movs	r3, #0
   15650:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15654:	f7fe fc9a 	bl	13f8c <z_impl_z_log_msg_static_create>
			return -EINVAL;
   15658:	f06f 0515 	mvn.w	r5, #21
   1565c:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   1565e:	4628      	mov	r0, r5
   15660:	46bd      	mov	sp, r7
   15662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
   15666:	2c1f      	cmp	r4, #31
   15668:	d9e7      	bls.n	1563a <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
   1566a:	6802      	ldr	r2, [r0, #0]
		&&
   1566c:	4216      	tst	r6, r2
   1566e:	d1e4      	bne.n	1563a <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   15670:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   15672:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   15674:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   15676:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
   1567a:	d914      	bls.n	156a6 <mpu_configure_regions+0x92>
	if (size > (1UL << 31)) {
   1567c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   15680:	d813      	bhi.n	156aa <mpu_configure_regions+0x96>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   15682:	3c01      	subs	r4, #1
   15684:	fab4 f484 	clz	r4, r4
   15688:	f1c4 041f 	rsb	r4, r4, #31
   1568c:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   1568e:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   15692:	ea46 0604 	orr.w	r6, r6, r4
   15696:	d90a      	bls.n	156ae <mpu_configure_regions+0x9a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   15698:	466c      	mov	r4, sp
   1569a:	b088      	sub	sp, #32
   1569c:	466a      	mov	r2, sp
   1569e:	4b0e      	ldr	r3, [pc, #56]	; (156d8 <mpu_configure_regions+0xc4>)
   156a0:	e9c2 3505 	strd	r3, r5, [r2, #20]
   156a4:	e7cf      	b.n	15646 <mpu_configure_regions+0x32>
		return REGION_32B;
   156a6:	2408      	movs	r4, #8
   156a8:	e7f1      	b.n	1568e <mpu_configure_regions+0x7a>
		return REGION_4G;
   156aa:	243e      	movs	r4, #62	; 0x3e
   156ac:	e7ef      	b.n	1568e <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   156ae:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
   156b2:	432a      	orrs	r2, r5
   156b4:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   156b8:	f046 0601 	orr.w	r6, r6, #1
   156bc:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   156c0:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
   156c4:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   156c6:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
   156ca:	3301      	adds	r3, #1
   156cc:	300c      	adds	r0, #12
   156ce:	e7a9      	b.n	15624 <mpu_configure_regions+0x10>
   156d0:	00028b6a 	.word	0x00028b6a
   156d4:	0002708c 	.word	0x0002708c
   156d8:	00028b8d 	.word	0x00028b8d
   156dc:	e000ed00 	.word	0xe000ed00

000156e0 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   156e0:	4b04      	ldr	r3, [pc, #16]	; (156f4 <arm_core_mpu_enable+0x14>)
   156e2:	2205      	movs	r2, #5
   156e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   156e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   156ec:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	barrier_dsync_fence_full();
	barrier_isync_fence_full();
}
   156f0:	4770      	bx	lr
   156f2:	bf00      	nop
   156f4:	e000ed00 	.word	0xe000ed00

000156f8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   156f8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	barrier_dmem_fence_full();

	/* Disable MPU */
	MPU->CTRL = 0;
   156fc:	4b02      	ldr	r3, [pc, #8]	; (15708 <arm_core_mpu_disable+0x10>)
   156fe:	2200      	movs	r2, #0
   15700:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   15704:	4770      	bx	lr
   15706:	bf00      	nop
   15708:	e000ed00 	.word	0xe000ed00

0001570c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   1570c:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   1570e:	4d0d      	ldr	r5, [pc, #52]	; (15744 <arm_core_mpu_configure_static_mpu_regions+0x38>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   15710:	2301      	movs	r3, #1
   15712:	782a      	ldrb	r2, [r5, #0]
   15714:	460c      	mov	r4, r1
   15716:	f7ff ff7d 	bl	15614 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   1571a:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   1571c:	3016      	adds	r0, #22
   1571e:	d10f      	bne.n	15740 <arm_core_mpu_configure_static_mpu_regions+0x34>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   15720:	4a09      	ldr	r2, [pc, #36]	; (15748 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   15722:	490a      	ldr	r1, [pc, #40]	; (1574c <arm_core_mpu_configure_static_mpu_regions+0x40>)
   15724:	480a      	ldr	r0, [pc, #40]	; (15750 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   15726:	f240 131b 	movw	r3, #283	; 0x11b
   1572a:	f00e fd8b 	bl	24244 <assert_print>
   1572e:	4809      	ldr	r0, [pc, #36]	; (15754 <arm_core_mpu_configure_static_mpu_regions+0x48>)
   15730:	4621      	mov	r1, r4
   15732:	f00e fd87 	bl	24244 <assert_print>
   15736:	4804      	ldr	r0, [pc, #16]	; (15748 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
   15738:	f240 111b 	movw	r1, #283	; 0x11b
   1573c:	f00e fd7b 	bl	24236 <assert_post_action>
			regions_num);
	}
}
   15740:	bd38      	pop	{r3, r4, r5, pc}
   15742:	bf00      	nop
   15744:	2000300b 	.word	0x2000300b
   15748:	00028bb3 	.word	0x00028bb3
   1574c:	0002a7c0 	.word	0x0002a7c0
   15750:	00027c2a 	.word	0x00027c2a
   15754:	00028bea 	.word	0x00028bea

00015758 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
   15758:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   1575a:	4a12      	ldr	r2, [pc, #72]	; (157a4 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
   1575c:	2300      	movs	r3, #0
   1575e:	7812      	ldrb	r2, [r2, #0]
   15760:	460c      	mov	r4, r1
   15762:	f7ff ff57 	bl	15614 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   15766:	f110 0f16 	cmn.w	r0, #22
   1576a:	d004      	beq.n	15776 <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
  MPU->RNR = rnr;
   1576c:	4b0e      	ldr	r3, [pc, #56]	; (157a8 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
   1576e:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   15770:	2807      	cmp	r0, #7
   15772:	dd10      	ble.n	15796 <arm_core_mpu_configure_dynamic_mpu_regions+0x3e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   15774:	bd10      	pop	{r4, pc}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   15776:	4a0d      	ldr	r2, [pc, #52]	; (157ac <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
   15778:	490d      	ldr	r1, [pc, #52]	; (157b0 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
   1577a:	480e      	ldr	r0, [pc, #56]	; (157b4 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
   1577c:	f44f 739d 	mov.w	r3, #314	; 0x13a
   15780:	f00e fd60 	bl	24244 <assert_print>
   15784:	480c      	ldr	r0, [pc, #48]	; (157b8 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
   15786:	4621      	mov	r1, r4
   15788:	f00e fd5c 	bl	24244 <assert_print>
   1578c:	4807      	ldr	r0, [pc, #28]	; (157ac <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
   1578e:	f44f 719d 	mov.w	r1, #314	; 0x13a
   15792:	f00e fd50 	bl	24236 <assert_post_action>
  MPU->RNR = rnr;
   15796:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
   1579a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   1579e:	3001      	adds	r0, #1
   157a0:	e7e6      	b.n	15770 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
   157a2:	bf00      	nop
   157a4:	2000300b 	.word	0x2000300b
   157a8:	e000ed00 	.word	0xe000ed00
   157ac:	00028bb3 	.word	0x00028bb3
   157b0:	0002a7c0 	.word	0x0002a7c0
   157b4:	00027c2a 	.word	0x00027c2a
   157b8:	00028c16 	.word	0x00028c16

000157bc <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   157bc:	4925      	ldr	r1, [pc, #148]	; (15854 <z_arm_mpu_init+0x98>)
{
   157be:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   157c0:	680c      	ldr	r4, [r1, #0]
   157c2:	2c08      	cmp	r4, #8
   157c4:	d910      	bls.n	157e8 <z_arm_mpu_init+0x2c>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   157c6:	4a24      	ldr	r2, [pc, #144]	; (15858 <z_arm_mpu_init+0x9c>)
   157c8:	4924      	ldr	r1, [pc, #144]	; (1585c <z_arm_mpu_init+0xa0>)
   157ca:	4825      	ldr	r0, [pc, #148]	; (15860 <z_arm_mpu_init+0xa4>)
   157cc:	f44f 73a9 	mov.w	r3, #338	; 0x152
   157d0:	f00e fd38 	bl	24244 <assert_print>
   157d4:	4621      	mov	r1, r4
   157d6:	4823      	ldr	r0, [pc, #140]	; (15864 <z_arm_mpu_init+0xa8>)
   157d8:	2208      	movs	r2, #8
   157da:	f00e fd33 	bl	24244 <assert_print>
   157de:	f44f 71a9 	mov.w	r1, #338	; 0x152

	/* Sanity check for number of regions in Cortex-M0+, M3, and M4. */
#if defined(CONFIG_CPU_CORTEX_M0PLUS) || \
	defined(CONFIG_CPU_CORTEX_M3) || \
	defined(CONFIG_CPU_CORTEX_M4)
	__ASSERT(
   157e2:	481d      	ldr	r0, [pc, #116]	; (15858 <z_arm_mpu_init+0x9c>)
   157e4:	f00e fd27 	bl	24236 <assert_post_action>
	arm_core_mpu_disable();
   157e8:	f7ff ff86 	bl	156f8 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   157ec:	6848      	ldr	r0, [r1, #4]
   157ee:	491e      	ldr	r1, [pc, #120]	; (15868 <z_arm_mpu_init+0xac>)
   157f0:	2200      	movs	r2, #0
   157f2:	4294      	cmp	r4, r2
   157f4:	f100 000c 	add.w	r0, r0, #12
   157f8:	d116      	bne.n	15828 <z_arm_mpu_init+0x6c>
	static_regions_num = mpu_config.num_regions;
   157fa:	4b1c      	ldr	r3, [pc, #112]	; (1586c <z_arm_mpu_init+0xb0>)
   157fc:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   157fe:	f7ff ff6f 	bl	156e0 <arm_core_mpu_enable>
	__ASSERT(
   15802:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   15806:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1580a:	2b08      	cmp	r3, #8
   1580c:	d01f      	beq.n	1584e <z_arm_mpu_init+0x92>
   1580e:	4918      	ldr	r1, [pc, #96]	; (15870 <z_arm_mpu_init+0xb4>)
   15810:	4a11      	ldr	r2, [pc, #68]	; (15858 <z_arm_mpu_init+0x9c>)
   15812:	4813      	ldr	r0, [pc, #76]	; (15860 <z_arm_mpu_init+0xa4>)
   15814:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
   15818:	f00e fd14 	bl	24244 <assert_print>
   1581c:	4815      	ldr	r0, [pc, #84]	; (15874 <z_arm_mpu_init+0xb8>)
   1581e:	f00e fd11 	bl	24244 <assert_print>
   15822:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   15826:	e7dc      	b.n	157e2 <z_arm_mpu_init+0x26>
   15828:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   1582c:	f850 3c0c 	ldr.w	r3, [r0, #-12]
   15830:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   15834:	4313      	orrs	r3, r2
   15836:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   1583a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   1583e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   15842:	f043 0301 	orr.w	r3, r3, #1
   15846:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1584a:	3201      	adds	r2, #1
   1584c:	e7d1      	b.n	157f2 <z_arm_mpu_init+0x36>
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   1584e:	2000      	movs	r0, #0
   15850:	bd10      	pop	{r4, pc}
   15852:	bf00      	nop
   15854:	000272b8 	.word	0x000272b8
   15858:	00028bb3 	.word	0x00028bb3
   1585c:	0002a7c0 	.word	0x0002a7c0
   15860:	00027c2a 	.word	0x00027c2a
   15864:	00028c43 	.word	0x00028c43
   15868:	e000ed00 	.word	0xe000ed00
   1586c:	2000300b 	.word	0x2000300b
   15870:	00028c77 	.word	0x00028c77
   15874:	00028cc7 	.word	0x00028cc7

00015878 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   15878:	4b01      	ldr	r3, [pc, #4]	; (15880 <__stdout_hook_install+0x8>)
   1587a:	6018      	str	r0, [r3, #0]
}
   1587c:	4770      	bx	lr
   1587e:	bf00      	nop
   15880:	2000062c 	.word	0x2000062c

00015884 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *ZRESTRICT str, size_t len,
	     const char *ZRESTRICT format, ...)
{
   15884:	b40c      	push	{r2, r3}
   15886:	b510      	push	{r4, lr}
   15888:	b086      	sub	sp, #24

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
   1588a:	b909      	cbnz	r1, 15890 <snprintf+0xc>
		str = &dummy; /* write final NUL to dummy, can't change *s */
   1588c:	f10d 000b 	add.w	r0, sp, #11
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   15890:	2400      	movs	r4, #0
	}

	p.ptr = str;
	p.len = (int) len;
   15892:	e9cd 0104 	strd	r0, r1, [sp, #16]

	va_start(vargs, format);
   15896:	ab09      	add	r3, sp, #36	; 0x24
   15898:	9a08      	ldr	r2, [sp, #32]
   1589a:	9400      	str	r4, [sp, #0]
   1589c:	a904      	add	r1, sp, #16
   1589e:	4805      	ldr	r0, [pc, #20]	; (158b4 <snprintf+0x30>)
   158a0:	9303      	str	r3, [sp, #12]
   158a2:	f7fb fad1 	bl	10e48 <z_cbvprintf_impl>
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
	va_end(vargs);

	*(p.ptr) = 0;
   158a6:	9b04      	ldr	r3, [sp, #16]
   158a8:	701c      	strb	r4, [r3, #0]
	return r;
}
   158aa:	b006      	add	sp, #24
   158ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   158b0:	b002      	add	sp, #8
   158b2:	4770      	bx	lr
   158b4:	00024a7b 	.word	0x00024a7b

000158b8 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   158b8:	f04f 0340 	mov.w	r3, #64	; 0x40
   158bc:	f3ef 8211 	mrs	r2, BASEPRI
   158c0:	f383 8812 	msr	BASEPRI_MAX, r3
   158c4:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   158c8:	4906      	ldr	r1, [pc, #24]	; (158e4 <nordicsemi_nrf52_init+0x2c>)
   158ca:	2301      	movs	r3, #1
   158cc:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif // NRF_POWER_HAS_GPREGRET

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   158d0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   158d4:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   158d8:	f382 8811 	msr	BASEPRI, r2
   158dc:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   158e0:	2000      	movs	r0, #0
   158e2:	4770      	bx	lr
   158e4:	4001e000 	.word	0x4001e000

000158e8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   158e8:	b120      	cbz	r0, 158f4 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   158ea:	4b03      	ldr	r3, [pc, #12]	; (158f8 <arch_busy_wait+0x10>)
   158ec:	0180      	lsls	r0, r0, #6
   158ee:	f043 0301 	orr.w	r3, r3, #1
   158f2:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   158f4:	4770      	bx	lr
   158f6:	bf00      	nop
   158f8:	00027170 	.word	0x00027170

000158fc <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(void)
{
   158fc:	b508      	push	{r3, lr}
   158fe:	4804      	ldr	r0, [pc, #16]	; (15910 <xoshiro128_initialize+0x14>)
   15900:	f010 ffde 	bl	268c0 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   15904:	2800      	cmp	r0, #0
}
   15906:	bf0c      	ite	eq
   15908:	f06f 0012 	mvneq.w	r0, #18
   1590c:	2000      	movne	r0, #0
   1590e:	bd08      	pop	{r3, pc}
   15910:	00026dd4 	.word	0x00026dd4

00015914 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   15914:	4b0e      	ldr	r3, [pc, #56]	; (15950 <bt_hex+0x3c>)
   15916:	2940      	cmp	r1, #64	; 0x40
{
   15918:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   1591a:	bf28      	it	cs
   1591c:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   1591e:	4c0d      	ldr	r4, [pc, #52]	; (15954 <bt_hex+0x40>)
   15920:	1846      	adds	r6, r0, r1
   15922:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   15924:	42b0      	cmp	r0, r6
   15926:	f103 0302 	add.w	r3, r3, #2
   1592a:	d104      	bne.n	15936 <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   1592c:	2300      	movs	r3, #0
   1592e:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   15932:	4807      	ldr	r0, [pc, #28]	; (15950 <bt_hex+0x3c>)
   15934:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   15936:	7802      	ldrb	r2, [r0, #0]
   15938:	0912      	lsrs	r2, r2, #4
   1593a:	5ca2      	ldrb	r2, [r4, r2]
   1593c:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   15940:	f810 2b01 	ldrb.w	r2, [r0], #1
   15944:	f002 020f 	and.w	r2, r2, #15
   15948:	5ca2      	ldrb	r2, [r4, r2]
   1594a:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   1594e:	e7e9      	b.n	15924 <bt_hex+0x10>
   15950:	2000302a 	.word	0x2000302a
   15954:	00028d15 	.word	0x00028d15

00015958 <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   15958:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   1595a:	7803      	ldrb	r3, [r0, #0]
   1595c:	b08b      	sub	sp, #44	; 0x2c
   1595e:	4604      	mov	r4, r0
   15960:	ad07      	add	r5, sp, #28
   15962:	2b03      	cmp	r3, #3
   15964:	d821      	bhi.n	159aa <bt_addr_le_str+0x52>
   15966:	e8df f003 	tbb	[pc, r3]
   1596a:	1a02      	.short	0x1a02
   1596c:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   1596e:	4912      	ldr	r1, [pc, #72]	; (159b8 <bt_addr_le_str+0x60>)
		strcpy(type, "random");
   15970:	4628      	mov	r0, r5
   15972:	f00f f84a 	bl	24a0a <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   15976:	9505      	str	r5, [sp, #20]
   15978:	7863      	ldrb	r3, [r4, #1]
   1597a:	9304      	str	r3, [sp, #16]
   1597c:	78a3      	ldrb	r3, [r4, #2]
   1597e:	9303      	str	r3, [sp, #12]
   15980:	78e3      	ldrb	r3, [r4, #3]
   15982:	9302      	str	r3, [sp, #8]
   15984:	7923      	ldrb	r3, [r4, #4]
   15986:	9301      	str	r3, [sp, #4]
   15988:	7963      	ldrb	r3, [r4, #5]
   1598a:	9300      	str	r3, [sp, #0]
   1598c:	79a3      	ldrb	r3, [r4, #6]
   1598e:	4a0b      	ldr	r2, [pc, #44]	; (159bc <bt_addr_le_str+0x64>)
   15990:	480b      	ldr	r0, [pc, #44]	; (159c0 <bt_addr_le_str+0x68>)
   15992:	211e      	movs	r1, #30
   15994:	f00e fa2c 	bl	23df0 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   15998:	4809      	ldr	r0, [pc, #36]	; (159c0 <bt_addr_le_str+0x68>)
   1599a:	b00b      	add	sp, #44	; 0x2c
   1599c:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   1599e:	4909      	ldr	r1, [pc, #36]	; (159c4 <bt_addr_le_str+0x6c>)
   159a0:	e7e6      	b.n	15970 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   159a2:	4909      	ldr	r1, [pc, #36]	; (159c8 <bt_addr_le_str+0x70>)
   159a4:	e7e4      	b.n	15970 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   159a6:	4909      	ldr	r1, [pc, #36]	; (159cc <bt_addr_le_str+0x74>)
   159a8:	e7e2      	b.n	15970 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   159aa:	4a09      	ldr	r2, [pc, #36]	; (159d0 <bt_addr_le_str+0x78>)
   159ac:	210a      	movs	r1, #10
   159ae:	4628      	mov	r0, r5
   159b0:	f00e fa1e 	bl	23df0 <snprintk>
		break;
   159b4:	e7df      	b.n	15976 <bt_addr_le_str+0x1e>
   159b6:	bf00      	nop
   159b8:	00027900 	.word	0x00027900
   159bc:	00027922 	.word	0x00027922
   159c0:	2000300c 	.word	0x2000300c
   159c4:	00027907 	.word	0x00027907
   159c8:	0002790e 	.word	0x0002790e
   159cc:	00027918 	.word	0x00027918
   159d0:	00029e6c 	.word	0x00029e6c

000159d4 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(void)
{
   159d4:	b530      	push	{r4, r5, lr}

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
   159d6:	4d0a      	ldr	r5, [pc, #40]	; (15a00 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   159d8:	4b0a      	ldr	r3, [pc, #40]	; (15a04 <long_wq_init+0x30>)
{
   159da:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   159dc:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
   159de:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   159e0:	9302      	str	r3, [sp, #8]
   159e2:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   159e4:	f00b fa8e 	bl	20f04 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   159e8:	ab02      	add	r3, sp, #8
   159ea:	9300      	str	r3, [sp, #0]
   159ec:	4628      	mov	r0, r5
   159ee:	4906      	ldr	r1, [pc, #24]	; (15a08 <long_wq_init+0x34>)
   159f0:	230a      	movs	r3, #10
   159f2:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   159f6:	f00b fa9f 	bl	20f38 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   159fa:	4620      	mov	r0, r4
   159fc:	b005      	add	sp, #20
   159fe:	bd30      	pop	{r4, r5, pc}
   15a00:	20001b88 	.word	0x20001b88
   15a04:	00028d26 	.word	0x00028d26
   15a08:	20003e80 	.word	0x20003e80

00015a0c <bt_long_wq_schedule>:
{
   15a0c:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   15a0e:	4801      	ldr	r0, [pc, #4]	; (15a14 <bt_long_wq_schedule+0x8>)
   15a10:	f00b bb26 	b.w	21060 <k_work_schedule_for_queue>
   15a14:	20001b88 	.word	0x20001b88

00015a18 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   15a18:	b430      	push	{r4, r5}
   15a1a:	4603      	mov	r3, r0
   15a1c:	4608      	mov	r0, r1
	switch (src->type) {
   15a1e:	781a      	ldrb	r2, [r3, #0]
   15a20:	2a01      	cmp	r2, #1
   15a22:	d013      	beq.n	15a4c <uuid_to_uuid128+0x34>
   15a24:	2a02      	cmp	r2, #2
   15a26:	d026      	beq.n	15a76 <uuid_to_uuid128+0x5e>
   15a28:	b972      	cbnz	r2, 15a48 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   15a2a:	4a15      	ldr	r2, [pc, #84]	; (15a80 <uuid_to_uuid128+0x68>)
   15a2c:	f102 0410 	add.w	r4, r2, #16
   15a30:	f852 5b04 	ldr.w	r5, [r2], #4
   15a34:	f841 5b04 	str.w	r5, [r1], #4
   15a38:	42a2      	cmp	r2, r4
   15a3a:	d1f9      	bne.n	15a30 <uuid_to_uuid128+0x18>
   15a3c:	7812      	ldrb	r2, [r2, #0]
   15a3e:	700a      	strb	r2, [r1, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   15a40:	885b      	ldrh	r3, [r3, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   15a42:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   15a44:	0a1b      	lsrs	r3, r3, #8
   15a46:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   15a48:	bc30      	pop	{r4, r5}
   15a4a:	4770      	bx	lr
		*dst = uuid128_base;
   15a4c:	4a0c      	ldr	r2, [pc, #48]	; (15a80 <uuid_to_uuid128+0x68>)
   15a4e:	f102 0410 	add.w	r4, r2, #16
   15a52:	f852 5b04 	ldr.w	r5, [r2], #4
   15a56:	f841 5b04 	str.w	r5, [r1], #4
   15a5a:	42a2      	cmp	r2, r4
   15a5c:	d1f9      	bne.n	15a52 <uuid_to_uuid128+0x3a>
   15a5e:	7812      	ldrb	r2, [r2, #0]
   15a60:	700a      	strb	r2, [r1, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   15a62:	685b      	ldr	r3, [r3, #4]
	dst[0] = val;
   15a64:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   15a66:	f3c3 2207 	ubfx	r2, r3, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   15a6a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   15a6c:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   15a6e:	0a1b      	lsrs	r3, r3, #8
   15a70:	7382      	strb	r2, [r0, #14]
   15a72:	7403      	strb	r3, [r0, #16]
}
   15a74:	e7e8      	b.n	15a48 <uuid_to_uuid128+0x30>
}
   15a76:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   15a78:	2211      	movs	r2, #17
   15a7a:	4619      	mov	r1, r3
   15a7c:	f00e bfe6 	b.w	24a4c <memcpy>
   15a80:	00028d2f 	.word	0x00028d2f

00015a84 <bt_buf_get_rx>:

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   15a84:	2805      	cmp	r0, #5
{
   15a86:	b538      	push	{r3, r4, r5, lr}
   15a88:	4605      	mov	r5, r0
   15a8a:	d803      	bhi.n	15a94 <bt_buf_get_rx+0x10>
   15a8c:	212a      	movs	r1, #42	; 0x2a
   15a8e:	40c1      	lsrs	r1, r0
   15a90:	07c9      	lsls	r1, r1, #31
   15a92:	d40c      	bmi.n	15aae <bt_buf_get_rx+0x2a>
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   15a94:	490c      	ldr	r1, [pc, #48]	; (15ac8 <bt_buf_get_rx+0x44>)
   15a96:	4a0d      	ldr	r2, [pc, #52]	; (15acc <bt_buf_get_rx+0x48>)
   15a98:	480d      	ldr	r0, [pc, #52]	; (15ad0 <bt_buf_get_rx+0x4c>)
   15a9a:	233d      	movs	r3, #61	; 0x3d
   15a9c:	f00e fbd2 	bl	24244 <assert_print>
   15aa0:	480c      	ldr	r0, [pc, #48]	; (15ad4 <bt_buf_get_rx+0x50>)
   15aa2:	f00e fbcf 	bl	24244 <assert_print>
   15aa6:	4809      	ldr	r0, [pc, #36]	; (15acc <bt_buf_get_rx+0x48>)
   15aa8:	213d      	movs	r1, #61	; 0x3d
   15aaa:	f00e fbc4 	bl	24236 <assert_post_action>
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   15aae:	480a      	ldr	r0, [pc, #40]	; (15ad8 <bt_buf_get_rx+0x54>)
   15ab0:	f010 f9da 	bl	25e68 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   15ab4:	4604      	mov	r4, r0
   15ab6:	b120      	cbz	r0, 15ac2 <bt_buf_get_rx+0x3e>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   15ab8:	2100      	movs	r1, #0
   15aba:	300c      	adds	r0, #12
   15abc:	f006 f966 	bl	1bd8c <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   15ac0:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   15ac2:	4620      	mov	r0, r4
   15ac4:	bd38      	pop	{r3, r4, r5, pc}
   15ac6:	bf00      	nop
   15ac8:	00028d6f 	.word	0x00028d6f
   15acc:	00028d40 	.word	0x00028d40
   15ad0:	00027c2a 	.word	0x00027c2a
   15ad4:	00028db4 	.word	0x00028db4
   15ad8:	20000a9c 	.word	0x20000a9c

00015adc <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   15adc:	b570      	push	{r4, r5, r6, lr}
   15ade:	4602      	mov	r2, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_ptr_val_t atomic_ptr_set(atomic_ptr_t *target, atomic_ptr_val_t value)
{
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   15ae0:	480d      	ldr	r0, [pc, #52]	; (15b18 <bt_buf_get_cmd_complete+0x3c>)
   15ae2:	f3bf 8f5b 	dmb	ish
   15ae6:	460b      	mov	r3, r1
   15ae8:	2100      	movs	r1, #0
   15aea:	e850 4f00 	ldrex	r4, [r0]
   15aee:	e840 1500 	strex	r5, r1, [r0]
   15af2:	2d00      	cmp	r5, #0
   15af4:	d1f9      	bne.n	15aea <bt_buf_get_cmd_complete+0xe>
   15af6:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	buf = (struct net_buf *)atomic_ptr_clear((atomic_ptr_t *)&bt_dev.sent_cmd);
	if (buf) {
   15afa:	b924      	cbnz	r4, 15b06 <bt_buf_get_cmd_complete+0x2a>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   15afc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   15b00:	2001      	movs	r0, #1
   15b02:	f7ff bfbf 	b.w	15a84 <bt_buf_get_rx>
   15b06:	2301      	movs	r3, #1
   15b08:	f104 000c 	add.w	r0, r4, #12
   15b0c:	7623      	strb	r3, [r4, #24]
		buf->len = 0U;
   15b0e:	8221      	strh	r1, [r4, #16]
   15b10:	f006 f93c 	bl	1bd8c <net_buf_simple_reserve>
}
   15b14:	4620      	mov	r0, r4
   15b16:	bd70      	pop	{r4, r5, r6, pc}
   15b18:	200004e0 	.word	0x200004e0

00015b1c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   15b1c:	b570      	push	{r4, r5, r6, lr}
   15b1e:	4604      	mov	r4, r0
	switch (evt) {
   15b20:	2c0f      	cmp	r4, #15
{
   15b22:	460d      	mov	r5, r1
   15b24:	4610      	mov	r0, r2
   15b26:	4619      	mov	r1, r3
	switch (evt) {
   15b28:	d805      	bhi.n	15b36 <bt_buf_get_evt+0x1a>
   15b2a:	2c0d      	cmp	r4, #13
   15b2c:	d90d      	bls.n	15b4a <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   15b2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   15b32:	f7ff bfd3 	b.w	15adc <bt_buf_get_cmd_complete>
	switch (evt) {
   15b36:	2c13      	cmp	r4, #19
   15b38:	d107      	bne.n	15b4a <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   15b3a:	480c      	ldr	r0, [pc, #48]	; (15b6c <bt_buf_get_evt+0x50>)
   15b3c:	f010 f994 	bl	25e68 <net_buf_alloc_fixed>
			if (buf) {
   15b40:	4604      	mov	r4, r0
   15b42:	b938      	cbnz	r0, 15b54 <bt_buf_get_evt+0x38>
{
   15b44:	2400      	movs	r4, #0
}
   15b46:	4620      	mov	r0, r4
   15b48:	bd70      	pop	{r4, r5, r6, pc}
   15b4a:	4602      	mov	r2, r0
   15b4c:	460b      	mov	r3, r1
		if (discardable) {
   15b4e:	b145      	cbz	r5, 15b62 <bt_buf_get_evt+0x46>
   15b50:	4807      	ldr	r0, [pc, #28]	; (15b70 <bt_buf_get_evt+0x54>)
   15b52:	e7f3      	b.n	15b3c <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   15b54:	2100      	movs	r1, #0
   15b56:	300c      	adds	r0, #12
   15b58:	f006 f918 	bl	1bd8c <net_buf_simple_reserve>
   15b5c:	2301      	movs	r3, #1
   15b5e:	7623      	strb	r3, [r4, #24]
}
   15b60:	e7f1      	b.n	15b46 <bt_buf_get_evt+0x2a>
}
   15b62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   15b66:	2001      	movs	r0, #1
   15b68:	f7ff bf8c 	b.w	15a84 <bt_buf_get_rx>
   15b6c:	20000ad0 	.word	0x20000ad0
   15b70:	20000a00 	.word	0x20000a00

00015b74 <ver_str>:
	sys_put_le64(mask, ev->events);
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

static const char *ver_str(uint8_t ver)
{
   15b74:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
   15b76:	4d0c      	ldr	r5, [pc, #48]	; (15ba8 <ver_str+0x34>)
{
   15b78:	4606      	mov	r6, r0
	const char * const str[] = {
   15b7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   15b7c:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
   15b7e:	466c      	mov	r4, sp
   15b80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   15b82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   15b84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   15b86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   15b88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   15b8a:	e895 0003 	ldmia.w	r5, {r0, r1}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2", "5.3", "5.4"
	};

	if (ver < ARRAY_SIZE(str)) {
   15b8e:	2e0d      	cmp	r6, #13
	const char * const str[] = {
   15b90:	e884 0003 	stmia.w	r4, {r0, r1}
		return str[ver];
   15b94:	bf9b      	ittet	ls
   15b96:	ab0e      	addls	r3, sp, #56	; 0x38
   15b98:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
   15b9c:	4803      	ldrhi	r0, [pc, #12]	; (15bac <ver_str+0x38>)
		return str[ver];
   15b9e:	f856 0c38 	ldrls.w	r0, [r6, #-56]
}
   15ba2:	b00e      	add	sp, #56	; 0x38
   15ba4:	bd70      	pop	{r4, r5, r6, pc}
   15ba6:	bf00      	nop
   15ba8:	00027120 	.word	0x00027120
   15bac:	00028ddc 	.word	0x00028ddc

00015bb0 <hci_disconn_complete_prio>:
{
   15bb0:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   15bb2:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15bb4:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	if (evt->status) {
   15bb8:	781b      	ldrb	r3, [r3, #0]
   15bba:	b963      	cbnz	r3, 15bd6 <hci_disconn_complete_prio+0x26>
	conn = bt_conn_lookup_handle(handle);
   15bbc:	4620      	mov	r0, r4
   15bbe:	f002 fe37 	bl	18830 <bt_conn_lookup_handle>
	if (!conn) {
   15bc2:	4605      	mov	r5, r0
   15bc4:	b940      	cbnz	r0, 15bd8 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   15bc6:	4b08      	ldr	r3, [pc, #32]	; (15be8 <hci_disconn_complete_prio+0x38>)
   15bc8:	881a      	ldrh	r2, [r3, #0]
   15bca:	b922      	cbnz	r2, 15bd6 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   15bcc:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   15bd0:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   15bd4:	8018      	strh	r0, [r3, #0]
}
   15bd6:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   15bd8:	2101      	movs	r1, #1
   15bda:	f002 fe31 	bl	18840 <bt_conn_set_state>
	bt_conn_unref(conn);
   15bde:	4628      	mov	r0, r5
}
   15be0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   15be4:	f002 bdec 	b.w	187c0 <bt_conn_unref>
   15be8:	20002fd4 	.word	0x20002fd4

00015bec <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   15bec:	b510      	push	{r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   15bee:	4c08      	ldr	r4, [pc, #32]	; (15c10 <find_pending_connect.part.0+0x24>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   15bf0:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   15bf2:	2205      	movs	r2, #5
   15bf4:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
   15bf8:	f003 f8a2 	bl	18d40 <bt_conn_lookup_state_le>
		if (!conn) {
   15bfc:	b938      	cbnz	r0, 15c0e <find_pending_connect.part.0+0x22>
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   15bfe:	f894 006f 	ldrb.w	r0, [r4, #111]	; 0x6f
   15c02:	4904      	ldr	r1, [pc, #16]	; (15c14 <find_pending_connect.part.0+0x28>)
}
   15c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   15c08:	2204      	movs	r2, #4
   15c0a:	f003 b899 	b.w	18d40 <bt_conn_lookup_state_le>
}
   15c0e:	bd10      	pop	{r4, pc}
   15c10:	200003a8 	.word	0x200003a8
   15c14:	00028cfb 	.word	0x00028cfb

00015c18 <hci_data_buf_overflow>:
{
   15c18:	b580      	push	{r7, lr}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   15c1a:	68c3      	ldr	r3, [r0, #12]
{
   15c1c:	af00      	add	r7, sp, #0
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   15c1e:	b088      	sub	sp, #32
   15c20:	781b      	ldrb	r3, [r3, #0]
   15c22:	466a      	mov	r2, sp
   15c24:	4906      	ldr	r1, [pc, #24]	; (15c40 <hci_data_buf_overflow+0x28>)
   15c26:	4807      	ldr	r0, [pc, #28]	; (15c44 <hci_data_buf_overflow+0x2c>)
   15c28:	e9c2 1305 	strd	r1, r3, [r2, #20]
   15c2c:	2303      	movs	r3, #3
   15c2e:	f842 3f10 	str.w	r3, [r2, #16]!
   15c32:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   15c36:	f00e ffbd 	bl	24bb4 <z_log_msg_static_create.constprop.0>
}
   15c3a:	46bd      	mov	sp, r7
   15c3c:	bd80      	pop	{r7, pc}
   15c3e:	bf00      	nop
   15c40:	00028de4 	.word	0x00028de4
   15c44:	0002700c 	.word	0x0002700c

00015c48 <le_conn_param_neg_reply.part.0>:
static void le_conn_param_neg_reply(uint16_t handle, uint8_t reason)
   15c48:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		LOG_ERR("Unable to allocate buffer");
   15c4a:	4b06      	ldr	r3, [pc, #24]	; (15c64 <le_conn_param_neg_reply.part.0+0x1c>)
   15c4c:	9305      	str	r3, [sp, #20]
   15c4e:	4806      	ldr	r0, [pc, #24]	; (15c68 <le_conn_param_neg_reply.part.0+0x20>)
   15c50:	2302      	movs	r3, #2
   15c52:	aa04      	add	r2, sp, #16
   15c54:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   15c58:	9304      	str	r3, [sp, #16]
   15c5a:	f00e ffab 	bl	24bb4 <z_log_msg_static_create.constprop.0>
}
   15c5e:	b007      	add	sp, #28
   15c60:	f85d fb04 	ldr.w	pc, [sp], #4
   15c64:	00028e0c 	.word	0x00028e0c
   15c68:	0002700c 	.word	0x0002700c

00015c6c <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
   15c6c:	b598      	push	{r3, r4, r7, lr}
   15c6e:	4601      	mov	r1, r0
   15c70:	af00      	add	r7, sp, #0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   15c72:	480d      	ldr	r0, [pc, #52]	; (15ca8 <rx_queue_put+0x3c>)
   15c74:	f005 fed8 	bl	1ba28 <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   15c78:	490c      	ldr	r1, [pc, #48]	; (15cac <rx_queue_put+0x40>)
   15c7a:	480d      	ldr	r0, [pc, #52]	; (15cb0 <rx_queue_put+0x44>)
   15c7c:	f010 fef9 	bl	26a72 <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
   15c80:	2800      	cmp	r0, #0
   15c82:	da0e      	bge.n	15ca2 <rx_queue_put+0x36>
		LOG_ERR("Could not submit rx_work: %d", err);
   15c84:	466c      	mov	r4, sp
   15c86:	b088      	sub	sp, #32
   15c88:	466a      	mov	r2, sp
   15c8a:	4b0a      	ldr	r3, [pc, #40]	; (15cb4 <rx_queue_put+0x48>)
   15c8c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15c90:	2303      	movs	r3, #3
   15c92:	f842 3f10 	str.w	r3, [r2, #16]!
   15c96:	4808      	ldr	r0, [pc, #32]	; (15cb8 <rx_queue_put+0x4c>)
   15c98:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15c9c:	f00e ff8a 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   15ca0:	46a5      	mov	sp, r4
	}
}
   15ca2:	46bd      	mov	sp, r7
   15ca4:	bd98      	pop	{r3, r4, r7, pc}
   15ca6:	bf00      	nop
   15ca8:	200004e4 	.word	0x200004e4
   15cac:	2000066c 	.word	0x2000066c
   15cb0:	20001d38 	.word	0x20001d38
   15cb4:	00028e26 	.word	0x00028e26
   15cb8:	0002700c 	.word	0x0002700c

00015cbc <handle_event.part.0>:
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   15cbc:	b5b0      	push	{r4, r5, r7, lr}
   15cbe:	460b      	mov	r3, r1
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   15cc0:	8a0d      	ldrh	r5, [r1, #16]
static void handle_event(uint8_t event, struct net_buf *buf, const struct event_handler *handlers,
   15cc2:	af00      	add	r7, sp, #0
   15cc4:	4604      	mov	r4, r0
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   15cc6:	4629      	mov	r1, r5
   15cc8:	68d8      	ldr	r0, [r3, #12]
   15cca:	f7ff fe23 	bl	15914 <bt_hex>
   15cce:	b08a      	sub	sp, #40	; 0x28
   15cd0:	466a      	mov	r2, sp
   15cd2:	4b09      	ldr	r3, [pc, #36]	; (15cf8 <handle_event.part.0+0x3c>)
   15cd4:	e9c2 3405 	strd	r3, r4, [r2, #20]
   15cd8:	f240 4302 	movw	r3, #1026	; 0x402
   15cdc:	8493      	strh	r3, [r2, #36]	; 0x24
   15cde:	4b07      	ldr	r3, [pc, #28]	; (15cfc <handle_event.part.0+0x40>)
   15ce0:	e9c2 5007 	strd	r5, r0, [r2, #28]
   15ce4:	f44f 5132 	mov.w	r1, #11392	; 0x2c80
   15ce8:	f842 3f10 	str.w	r3, [r2, #16]!
   15cec:	4804      	ldr	r0, [pc, #16]	; (15d00 <handle_event.part.0+0x44>)
   15cee:	f00e ff61 	bl	24bb4 <z_log_msg_static_create.constprop.0>
}
   15cf2:	46bd      	mov	sp, r7
   15cf4:	bdb0      	pop	{r4, r5, r7, pc}
   15cf6:	bf00      	nop
   15cf8:	00028e43 	.word	0x00028e43
   15cfc:	01000005 	.word	0x01000005
   15d00:	0002700c 	.word	0x0002700c

00015d04 <hci_hardware_error>:
{
   15d04:	b580      	push	{r7, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   15d06:	2101      	movs	r1, #1
   15d08:	af00      	add	r7, sp, #0
   15d0a:	300c      	adds	r0, #12
   15d0c:	f006 f89e 	bl	1be4c <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   15d10:	b088      	sub	sp, #32
   15d12:	7803      	ldrb	r3, [r0, #0]
   15d14:	466a      	mov	r2, sp
   15d16:	4906      	ldr	r1, [pc, #24]	; (15d30 <hci_hardware_error+0x2c>)
   15d18:	4806      	ldr	r0, [pc, #24]	; (15d34 <hci_hardware_error+0x30>)
   15d1a:	e9c2 1305 	strd	r1, r3, [r2, #20]
   15d1e:	2303      	movs	r3, #3
   15d20:	f842 3f10 	str.w	r3, [r2, #16]!
   15d24:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15d28:	f00e ff44 	bl	24bb4 <z_log_msg_static_create.constprop.0>
}
   15d2c:	46bd      	mov	sp, r7
   15d2e:	bd80      	pop	{r7, pc}
   15d30:	00028e65 	.word	0x00028e65
   15d34:	0002700c 	.word	0x0002700c

00015d38 <le_data_len_change>:
{
   15d38:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15d3a:	68c3      	ldr	r3, [r0, #12]
   15d3c:	881c      	ldrh	r4, [r3, #0]
{
   15d3e:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   15d40:	4620      	mov	r0, r4
   15d42:	f002 fd75 	bl	18830 <bt_conn_lookup_handle>
	if (!conn) {
   15d46:	b980      	cbnz	r0, 15d6a <le_data_len_change+0x32>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   15d48:	466d      	mov	r5, sp
   15d4a:	b088      	sub	sp, #32
   15d4c:	466a      	mov	r2, sp
   15d4e:	4b08      	ldr	r3, [pc, #32]	; (15d70 <le_data_len_change+0x38>)
   15d50:	4808      	ldr	r0, [pc, #32]	; (15d74 <le_data_len_change+0x3c>)
   15d52:	e9c2 3405 	strd	r3, r4, [r2, #20]
   15d56:	2303      	movs	r3, #3
   15d58:	f842 3f10 	str.w	r3, [r2, #16]!
   15d5c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15d60:	f00e ff28 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   15d64:	46ad      	mov	sp, r5
}
   15d66:	46bd      	mov	sp, r7
   15d68:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   15d6a:	f002 fd29 	bl	187c0 <bt_conn_unref>
   15d6e:	e7fa      	b.n	15d66 <le_data_len_change+0x2e>
   15d70:	00028e87 	.word	0x00028e87
   15d74:	0002700c 	.word	0x0002700c

00015d78 <le_phy_update_complete>:
{
   15d78:	b5b0      	push	{r4, r5, r7, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15d7a:	68c3      	ldr	r3, [r0, #12]
   15d7c:	f8b3 4001 	ldrh.w	r4, [r3, #1]
{
   15d80:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   15d82:	4620      	mov	r0, r4
   15d84:	f002 fd54 	bl	18830 <bt_conn_lookup_handle>
	if (!conn) {
   15d88:	b980      	cbnz	r0, 15dac <le_phy_update_complete+0x34>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   15d8a:	466d      	mov	r5, sp
   15d8c:	b088      	sub	sp, #32
   15d8e:	466a      	mov	r2, sp
   15d90:	4b08      	ldr	r3, [pc, #32]	; (15db4 <le_phy_update_complete+0x3c>)
   15d92:	4809      	ldr	r0, [pc, #36]	; (15db8 <le_phy_update_complete+0x40>)
   15d94:	e9c2 3405 	strd	r3, r4, [r2, #20]
   15d98:	2303      	movs	r3, #3
   15d9a:	f842 3f10 	str.w	r3, [r2, #16]!
   15d9e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15da2:	f00e ff07 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   15da6:	46ad      	mov	sp, r5
}
   15da8:	46bd      	mov	sp, r7
   15daa:	bdb0      	pop	{r4, r5, r7, pc}
	bt_conn_unref(conn);
   15dac:	f002 fd08 	bl	187c0 <bt_conn_unref>
   15db0:	e7fa      	b.n	15da8 <le_phy_update_complete+0x30>
   15db2:	bf00      	nop
   15db4:	00028e87 	.word	0x00028e87
   15db8:	0002700c 	.word	0x0002700c

00015dbc <hci_disconn_complete>:
{
   15dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   15dc0:	68c5      	ldr	r5, [r0, #12]
	if (evt->status) {
   15dc2:	782e      	ldrb	r6, [r5, #0]
{
   15dc4:	af00      	add	r7, sp, #0
	if (evt->status) {
   15dc6:	b9ae      	cbnz	r6, 15df4 <hci_disconn_complete+0x38>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   15dc8:	f8b5 8001 	ldrh.w	r8, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   15dcc:	4640      	mov	r0, r8
   15dce:	f002 fd2f 	bl	18830 <bt_conn_lookup_handle>
	if (!conn) {
   15dd2:	4604      	mov	r4, r0
   15dd4:	b988      	cbnz	r0, 15dfa <hci_disconn_complete+0x3e>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   15dd6:	466c      	mov	r4, sp
   15dd8:	b088      	sub	sp, #32
   15dda:	466a      	mov	r2, sp
   15ddc:	4b0b      	ldr	r3, [pc, #44]	; (15e0c <hci_disconn_complete+0x50>)
   15dde:	480c      	ldr	r0, [pc, #48]	; (15e10 <hci_disconn_complete+0x54>)
   15de0:	e9c2 3805 	strd	r3, r8, [r2, #20]
   15de4:	2303      	movs	r3, #3
   15de6:	f842 3f10 	str.w	r3, [r2, #16]!
   15dea:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15dee:	f00e fee1 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   15df2:	46a5      	mov	sp, r4
}
   15df4:	46bd      	mov	sp, r7
   15df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn->err = evt->reason;
   15dfa:	78eb      	ldrb	r3, [r5, #3]
   15dfc:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15dfe:	4631      	mov	r1, r6
   15e00:	f002 fd1e 	bl	18840 <bt_conn_set_state>
		bt_conn_unref(conn);
   15e04:	4620      	mov	r0, r4
	bt_conn_unref(conn);
   15e06:	f002 fcdb 	bl	187c0 <bt_conn_unref>
   15e0a:	e7f3      	b.n	15df4 <hci_disconn_complete+0x38>
   15e0c:	00028eab 	.word	0x00028eab
   15e10:	0002700c 	.word	0x0002700c

00015e14 <handle_event>:
{
   15e14:	b5b0      	push	{r4, r5, r7, lr}
   15e16:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   15e1a:	af00      	add	r7, sp, #0
   15e1c:	4604      	mov	r4, r0
	for (i = 0; i < num_handlers; i++) {
   15e1e:	4293      	cmp	r3, r2
   15e20:	d103      	bne.n	15e2a <handle_event+0x16>
	if (err == -EOPNOTSUPP) {
   15e22:	4620      	mov	r0, r4
   15e24:	f7ff ff4a 	bl	15cbc <handle_event.part.0>
}
   15e28:	e018      	b.n	15e5c <handle_event+0x48>
		if (handler->event != event) {
   15e2a:	4610      	mov	r0, r2
   15e2c:	f810 5b08 	ldrb.w	r5, [r0], #8
   15e30:	42a5      	cmp	r5, r4
   15e32:	d119      	bne.n	15e68 <handle_event+0x54>
		if (buf->len < handler->min_len) {
   15e34:	8a0b      	ldrh	r3, [r1, #16]
   15e36:	7850      	ldrb	r0, [r2, #1]
   15e38:	4298      	cmp	r0, r3
   15e3a:	d911      	bls.n	15e60 <handle_event+0x4c>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   15e3c:	466d      	mov	r5, sp
   15e3e:	b088      	sub	sp, #32
   15e40:	466a      	mov	r2, sp
   15e42:	490a      	ldr	r1, [pc, #40]	; (15e6c <handle_event+0x58>)
   15e44:	61d4      	str	r4, [r2, #28]
   15e46:	e9c2 1305 	strd	r1, r3, [r2, #20]
   15e4a:	2304      	movs	r3, #4
   15e4c:	f842 3f10 	str.w	r3, [r2, #16]!
   15e50:	4807      	ldr	r0, [pc, #28]	; (15e70 <handle_event+0x5c>)
   15e52:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   15e56:	f00e fead 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   15e5a:	46ad      	mov	sp, r5
}
   15e5c:	46bd      	mov	sp, r7
   15e5e:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
   15e60:	6853      	ldr	r3, [r2, #4]
   15e62:	4608      	mov	r0, r1
   15e64:	4798      	blx	r3
	if (err == -EOPNOTSUPP) {
   15e66:	e7f9      	b.n	15e5c <handle_event+0x48>
   15e68:	4602      	mov	r2, r0
   15e6a:	e7d8      	b.n	15e1e <handle_event+0xa>
   15e6c:	00028ed1 	.word	0x00028ed1
   15e70:	0002700c 	.word	0x0002700c

00015e74 <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   15e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   15e76:	4855      	ldr	r0, [pc, #340]	; (15fcc <rx_work_handler+0x158>)
{
   15e78:	af00      	add	r7, sp, #0
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   15e7a:	f005 fe3f 	bl	1bafc <net_buf_slist_get>
	if (!buf) {
   15e7e:	4604      	mov	r4, r0
   15e80:	2800      	cmp	r0, #0
   15e82:	d06a      	beq.n	15f5a <rx_work_handler+0xe6>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   15e84:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   15e86:	2b01      	cmp	r3, #1
   15e88:	d069      	beq.n	15f5e <rx_work_handler+0xea>
   15e8a:	2b03      	cmp	r3, #3
   15e8c:	f040 8099 	bne.w	15fc2 <rx_work_handler+0x14e>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15e90:	8a03      	ldrh	r3, [r0, #16]
   15e92:	2b03      	cmp	r3, #3
   15e94:	d80c      	bhi.n	15eb0 <rx_work_handler+0x3c>
   15e96:	4a4e      	ldr	r2, [pc, #312]	; (15fd0 <rx_work_handler+0x15c>)
   15e98:	494e      	ldr	r1, [pc, #312]	; (15fd4 <rx_work_handler+0x160>)
   15e9a:	484f      	ldr	r0, [pc, #316]	; (15fd8 <rx_work_handler+0x164>)
   15e9c:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
   15ea0:	f00e f9d0 	bl	24244 <assert_print>
   15ea4:	4040      	eors	r0, r0
   15ea6:	f380 8811 	msr	BASEPRI, r0
   15eaa:	f04f 0003 	mov.w	r0, #3
   15eae:	df02      	svc	2
   15eb0:	2104      	movs	r1, #4
   15eb2:	f104 000c 	add.w	r0, r4, #12
   15eb6:	f005 ffc9 	bl	1be4c <net_buf_simple_pull_mem>
	if (buf->len != len) {
   15eba:	8a21      	ldrh	r1, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
   15ebc:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   15ebe:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   15ec0:	22ff      	movs	r2, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
   15ec2:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   15ec6:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
   15ec8:	8360      	strh	r0, [r4, #26]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   15eca:	7662      	strb	r2, [r4, #25]
	if (buf->len != len) {
   15ecc:	d010      	beq.n	15ef0 <rx_work_handler+0x7c>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   15ece:	466d      	mov	r5, sp
   15ed0:	b088      	sub	sp, #32
   15ed2:	466a      	mov	r2, sp
   15ed4:	4841      	ldr	r0, [pc, #260]	; (15fdc <rx_work_handler+0x168>)
   15ed6:	61d3      	str	r3, [r2, #28]
   15ed8:	2304      	movs	r3, #4
   15eda:	e9c2 0105 	strd	r0, r1, [r2, #20]
   15ede:	f842 3f10 	str.w	r3, [r2, #16]!
   15ee2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
#endif /* CONFIG_BT_ISO */
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   15ee6:	483e      	ldr	r0, [pc, #248]	; (15fe0 <rx_work_handler+0x16c>)
   15ee8:	f00e fe64 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   15eec:	46ad      	mov	sp, r5
   15eee:	e064      	b.n	15fba <rx_work_handler+0x146>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   15ef0:	f002 fc9e 	bl	18830 <bt_conn_lookup_handle>
	if (!conn) {
   15ef4:	4605      	mov	r5, r0
   15ef6:	b960      	cbnz	r0, 15f12 <rx_work_handler+0x9e>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   15ef8:	466d      	mov	r5, sp
   15efa:	b088      	sub	sp, #32
   15efc:	8b63      	ldrh	r3, [r4, #26]
   15efe:	466a      	mov	r2, sp
   15f00:	4938      	ldr	r1, [pc, #224]	; (15fe4 <rx_work_handler+0x170>)
	switch (bt_buf_get_type(buf)) {
   15f02:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   15f06:	2303      	movs	r3, #3
   15f08:	f842 3f10 	str.w	r3, [r2, #16]!
   15f0c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15f10:	e7e9      	b.n	15ee6 <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
   15f12:	f002 fd97 	bl	18a44 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   15f16:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   15f18:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   15f1a:	4621      	mov	r1, r4
   15f1c:	4628      	mov	r0, r5
   15f1e:	f002 fab5 	bl	1848c <bt_conn_recv>
	bt_conn_unref(conn);
   15f22:	4628      	mov	r0, r5
   15f24:	f002 fc4c 	bl	187c0 <bt_conn_unref>
	return list->head;
   15f28:	4b2f      	ldr	r3, [pc, #188]	; (15fe8 <rx_work_handler+0x174>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   15f2a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
   15f2e:	b1a3      	cbz	r3, 15f5a <rx_work_handler+0xe6>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   15f30:	492e      	ldr	r1, [pc, #184]	; (15fec <rx_work_handler+0x178>)
   15f32:	482f      	ldr	r0, [pc, #188]	; (15ff0 <rx_work_handler+0x17c>)
   15f34:	f010 fd9d 	bl	26a72 <k_work_submit_to_queue>
#endif
		if (err < 0) {
   15f38:	2800      	cmp	r0, #0
   15f3a:	da0e      	bge.n	15f5a <rx_work_handler+0xe6>
			LOG_ERR("Could not submit rx_work: %d", err);
   15f3c:	466c      	mov	r4, sp
   15f3e:	b088      	sub	sp, #32
   15f40:	466a      	mov	r2, sp
   15f42:	4b2c      	ldr	r3, [pc, #176]	; (15ff4 <rx_work_handler+0x180>)
   15f44:	e9c2 3005 	strd	r3, r0, [r2, #20]
   15f48:	2303      	movs	r3, #3
   15f4a:	f842 3f10 	str.w	r3, [r2, #16]!
   15f4e:	4824      	ldr	r0, [pc, #144]	; (15fe0 <rx_work_handler+0x16c>)
   15f50:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   15f54:	f00e fe2e 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   15f58:	46a5      	mov	sp, r4
		}
	}
}
   15f5a:	46bd      	mov	sp, r7
   15f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   15f5e:	8a03      	ldrh	r3, [r0, #16]
   15f60:	2b01      	cmp	r3, #1
   15f62:	d80c      	bhi.n	15f7e <rx_work_handler+0x10a>
   15f64:	4a1a      	ldr	r2, [pc, #104]	; (15fd0 <rx_work_handler+0x15c>)
   15f66:	491b      	ldr	r1, [pc, #108]	; (15fd4 <rx_work_handler+0x160>)
   15f68:	481b      	ldr	r0, [pc, #108]	; (15fd8 <rx_work_handler+0x164>)
   15f6a:	f640 234c 	movw	r3, #2636	; 0xa4c
   15f6e:	f00e f969 	bl	24244 <assert_print>
   15f72:	4040      	eors	r0, r0
   15f74:	f380 8811 	msr	BASEPRI, r0
   15f78:	f04f 0003 	mov.w	r0, #3
   15f7c:	df02      	svc	2
   15f7e:	2102      	movs	r1, #2
   15f80:	f104 000c 	add.w	r0, r4, #12
   15f84:	f005 ff62 	bl	1be4c <net_buf_simple_pull_mem>
   15f88:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   15f8a:	7800      	ldrb	r0, [r0, #0]
   15f8c:	f00e fdf0 	bl	24b70 <bt_hci_evt_get_flags>
   15f90:	0783      	lsls	r3, r0, #30
   15f92:	d40c      	bmi.n	15fae <rx_work_handler+0x13a>
   15f94:	4a0e      	ldr	r2, [pc, #56]	; (15fd0 <rx_work_handler+0x15c>)
   15f96:	4918      	ldr	r1, [pc, #96]	; (15ff8 <rx_work_handler+0x184>)
   15f98:	480f      	ldr	r0, [pc, #60]	; (15fd8 <rx_work_handler+0x164>)
   15f9a:	f44f 6325 	mov.w	r3, #2640	; 0xa50
   15f9e:	f00e f951 	bl	24244 <assert_print>
   15fa2:	4040      	eors	r0, r0
   15fa4:	f380 8811 	msr	BASEPRI, r0
   15fa8:	f04f 0003 	mov.w	r0, #3
   15fac:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   15fae:	4a13      	ldr	r2, [pc, #76]	; (15ffc <rx_work_handler+0x188>)
   15fb0:	7828      	ldrb	r0, [r5, #0]
   15fb2:	2304      	movs	r3, #4
   15fb4:	4621      	mov	r1, r4
   15fb6:	f7ff ff2d 	bl	15e14 <handle_event>
		net_buf_unref(buf);
   15fba:	4620      	mov	r0, r4
   15fbc:	f005 fe20 	bl	1bc00 <net_buf_unref>
		break;
   15fc0:	e7b2      	b.n	15f28 <rx_work_handler+0xb4>
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   15fc2:	466d      	mov	r5, sp
   15fc4:	b088      	sub	sp, #32
   15fc6:	466a      	mov	r2, sp
   15fc8:	490d      	ldr	r1, [pc, #52]	; (16000 <rx_work_handler+0x18c>)
   15fca:	e79a      	b.n	15f02 <rx_work_handler+0x8e>
   15fcc:	200004e4 	.word	0x200004e4
   15fd0:	00028ef3 	.word	0x00028ef3
   15fd4:	00028f27 	.word	0x00028f27
   15fd8:	00027c2a 	.word	0x00027c2a
   15fdc:	00028f40 	.word	0x00028f40
   15fe0:	0002700c 	.word	0x0002700c
   15fe4:	00028f64 	.word	0x00028f64
   15fe8:	200003a8 	.word	0x200003a8
   15fec:	2000066c 	.word	0x2000066c
   15ff0:	20001d38 	.word	0x20001d38
   15ff4:	00028e26 	.word	0x00028e26
   15ff8:	00028f86 	.word	0x00028f86
   15ffc:	00027360 	.word	0x00027360
   16000:	00028fb4 	.word	0x00028fb4

00016004 <hci_le_meta_event>:
{
   16004:	b510      	push	{r4, lr}
   16006:	2101      	movs	r1, #1
   16008:	4604      	mov	r4, r0
   1600a:	300c      	adds	r0, #12
   1600c:	f005 ff1e 	bl	1be4c <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   16010:	4621      	mov	r1, r4
   16012:	4a03      	ldr	r2, [pc, #12]	; (16020 <hci_le_meta_event+0x1c>)
   16014:	7800      	ldrb	r0, [r0, #0]
}
   16016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   1601a:	2307      	movs	r3, #7
   1601c:	f7ff befa 	b.w	15e14 <handle_event>
   16020:	00027380 	.word	0x00027380

00016024 <le_remote_feat_complete>:
{
   16024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   16026:	68c5      	ldr	r5, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   16028:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   1602c:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   1602e:	4630      	mov	r0, r6
   16030:	f002 fbfe 	bl	18830 <bt_conn_lookup_handle>
	if (!conn) {
   16034:	4604      	mov	r4, r0
   16036:	b980      	cbnz	r0, 1605a <le_remote_feat_complete+0x36>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   16038:	466c      	mov	r4, sp
   1603a:	b088      	sub	sp, #32
   1603c:	466a      	mov	r2, sp
   1603e:	4b0f      	ldr	r3, [pc, #60]	; (1607c <le_remote_feat_complete+0x58>)
   16040:	480f      	ldr	r0, [pc, #60]	; (16080 <le_remote_feat_complete+0x5c>)
   16042:	e9c2 3605 	strd	r3, r6, [r2, #20]
   16046:	2303      	movs	r3, #3
   16048:	f842 3f10 	str.w	r3, [r2, #16]!
   1604c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16050:	f00e fdb0 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   16054:	46a5      	mov	sp, r4
}
   16056:	46bd      	mov	sp, r7
   16058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!evt->status) {
   1605a:	782b      	ldrb	r3, [r5, #0]
   1605c:	b923      	cbnz	r3, 16068 <le_remote_feat_complete+0x44>
		memcpy(conn->le.features, evt->features,
   1605e:	2208      	movs	r2, #8
   16060:	1ce9      	adds	r1, r5, #3
   16062:	30b5      	adds	r0, #181	; 0xb5
   16064:	f00e fcf2 	bl	24a4c <memcpy>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16068:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1606c:	1d20      	adds	r0, r4, #4
   1606e:	f00e fd92 	bl	24b96 <atomic_or>
	bt_conn_unref(conn);
   16072:	4620      	mov	r0, r4
   16074:	f002 fba4 	bl	187c0 <bt_conn_unref>
   16078:	e7ed      	b.n	16056 <le_remote_feat_complete+0x32>
   1607a:	bf00      	nop
   1607c:	00028e87 	.word	0x00028e87
   16080:	0002700c 	.word	0x0002700c

00016084 <hci_cmd_done>:
{
   16084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16088:	4606      	mov	r6, r0
   1608a:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   1608c:	7a90      	ldrb	r0, [r2, #10]
   1608e:	4d43      	ldr	r5, [pc, #268]	; (1619c <hci_cmd_done+0x118>)
{
   16090:	4688      	mov	r8, r1
   16092:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   16094:	f005 fba0 	bl	1b7d8 <net_buf_pool_get>
   16098:	4285      	cmp	r5, r0
   1609a:	d018      	beq.n	160ce <hci_cmd_done+0x4a>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   1609c:	7aa4      	ldrb	r4, [r4, #10]
   1609e:	4620      	mov	r0, r4
   160a0:	f005 fb9a 	bl	1b7d8 <net_buf_pool_get>
   160a4:	46e8      	mov	r8, sp
   160a6:	b08a      	sub	sp, #40	; 0x28
   160a8:	466a      	mov	r2, sp
   160aa:	4b3d      	ldr	r3, [pc, #244]	; (161a0 <hci_cmd_done+0x11c>)
   160ac:	6255      	str	r5, [r2, #36]	; 0x24
   160ae:	e9c2 3605 	strd	r3, r6, [r2, #20]
   160b2:	2306      	movs	r3, #6
   160b4:	e9c2 4007 	strd	r4, r0, [r2, #28]
   160b8:	f44f 5142 	mov.w	r1, #12416	; 0x3080
   160bc:	f842 3f10 	str.w	r3, [r2, #16]!
   160c0:	4838      	ldr	r0, [pc, #224]	; (161a4 <hci_cmd_done+0x120>)
   160c2:	f00e fd77 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   160c6:	46c5      	mov	sp, r8
}
   160c8:	46bd      	mov	sp, r7
   160ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   160ce:	4620      	mov	r0, r4
   160d0:	f005 fb8a 	bl	1b7e8 <net_buf_id>
   160d4:	4d34      	ldr	r5, [pc, #208]	; (161a8 <hci_cmd_done+0x124>)
   160d6:	f04f 090c 	mov.w	r9, #12
   160da:	fb09 5000 	mla	r0, r9, r0, r5
   160de:	8843      	ldrh	r3, [r0, #2]
   160e0:	42b3      	cmp	r3, r6
   160e2:	d016      	beq.n	16112 <hci_cmd_done+0x8e>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   160e4:	4620      	mov	r0, r4
   160e6:	f005 fb7f 	bl	1b7e8 <net_buf_id>
   160ea:	fb09 5000 	mla	r0, r9, r0, r5
   160ee:	466c      	mov	r4, sp
   160f0:	b088      	sub	sp, #32
   160f2:	8843      	ldrh	r3, [r0, #2]
   160f4:	466a      	mov	r2, sp
   160f6:	492d      	ldr	r1, [pc, #180]	; (161ac <hci_cmd_done+0x128>)
   160f8:	61d3      	str	r3, [r2, #28]
   160fa:	2304      	movs	r3, #4
   160fc:	e9c2 1605 	strd	r1, r6, [r2, #20]
   16100:	4828      	ldr	r0, [pc, #160]	; (161a4 <hci_cmd_done+0x120>)
   16102:	f842 3f10 	str.w	r3, [r2, #16]!
   16106:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1610a:	f00e fd53 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   1610e:	46a5      	mov	sp, r4
		return;
   16110:	e7da      	b.n	160c8 <hci_cmd_done+0x44>
	if (bt_dev.sent_cmd) {
   16112:	4e27      	ldr	r6, [pc, #156]	; (161b0 <hci_cmd_done+0x12c>)
   16114:	f8d6 0138 	ldr.w	r0, [r6, #312]	; 0x138
   16118:	b120      	cbz	r0, 16124 <hci_cmd_done+0xa0>
		net_buf_unref(bt_dev.sent_cmd);
   1611a:	f005 fd71 	bl	1bc00 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1611e:	2300      	movs	r3, #0
   16120:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
	if (cmd(buf)->state && !status) {
   16124:	4620      	mov	r0, r4
   16126:	f005 fb5f 	bl	1b7e8 <net_buf_id>
   1612a:	260c      	movs	r6, #12
   1612c:	fb06 5000 	mla	r0, r6, r0, r5
   16130:	6843      	ldr	r3, [r0, #4]
   16132:	b1ab      	cbz	r3, 16160 <hci_cmd_done+0xdc>
   16134:	f1b8 0f00 	cmp.w	r8, #0
   16138:	d112      	bne.n	16160 <hci_cmd_done+0xdc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   1613a:	4620      	mov	r0, r4
   1613c:	f005 fb54 	bl	1b7e8 <net_buf_id>
   16140:	fb06 5000 	mla	r0, r6, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   16144:	2101      	movs	r1, #1
   16146:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   16148:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   1614c:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   1614e:	f003 061f 	and.w	r6, r3, #31
   16152:	40b1      	lsls	r1, r6
	if (val) {
   16154:	095b      	lsrs	r3, r3, #5
   16156:	b1da      	cbz	r2, 16190 <hci_cmd_done+0x10c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16158:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1615c:	f00e fd1b 	bl	24b96 <atomic_or>
	if (cmd(buf)->sync) {
   16160:	4620      	mov	r0, r4
   16162:	f005 fb41 	bl	1b7e8 <net_buf_id>
   16166:	260c      	movs	r6, #12
   16168:	fb06 5000 	mla	r0, r6, r0, r5
   1616c:	6883      	ldr	r3, [r0, #8]
   1616e:	2b00      	cmp	r3, #0
   16170:	d0aa      	beq.n	160c8 <hci_cmd_done+0x44>
		cmd(buf)->status = status;
   16172:	4620      	mov	r0, r4
   16174:	f005 fb38 	bl	1b7e8 <net_buf_id>
   16178:	4370      	muls	r0, r6
   1617a:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   1617e:	4620      	mov	r0, r4
   16180:	f005 fb32 	bl	1b7e8 <net_buf_id>
   16184:	fb06 5500 	mla	r5, r6, r0, r5
   16188:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
   1618a:	f00a fb47 	bl	2081c <z_impl_k_sem_give>
}
   1618e:	e79b      	b.n	160c8 <hci_cmd_done+0x44>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16190:	43c9      	mvns	r1, r1
   16192:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   16196:	f00e fd10 	bl	24bba <atomic_and.isra.0>
   1619a:	e7e1      	b.n	16160 <hci_cmd_done+0xdc>
   1619c:	20000a68 	.word	0x20000a68
   161a0:	00028fc8 	.word	0x00028fc8
   161a4:	0002700c 	.word	0x0002700c
   161a8:	20002c6c 	.word	0x20002c6c
   161ac:	00028ffd 	.word	0x00028ffd
   161b0:	200003a8 	.word	0x200003a8

000161b4 <hci_cmd_status>:
{
   161b4:	b538      	push	{r3, r4, r5, lr}
   161b6:	2104      	movs	r1, #4
   161b8:	4604      	mov	r4, r0
   161ba:	300c      	adds	r0, #12
   161bc:	f005 fe46 	bl	1be4c <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   161c0:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   161c2:	7801      	ldrb	r1, [r0, #0]
   161c4:	8840      	ldrh	r0, [r0, #2]
   161c6:	4622      	mov	r2, r4
   161c8:	f7ff ff5c 	bl	16084 <hci_cmd_done>
	if (ncmd) {
   161cc:	b125      	cbz	r5, 161d8 <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
   161ce:	4803      	ldr	r0, [pc, #12]	; (161dc <hci_cmd_status+0x28>)
}
   161d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   161d4:	f00a bb22 	b.w	2081c <z_impl_k_sem_give>
   161d8:	bd38      	pop	{r3, r4, r5, pc}
   161da:	bf00      	nop
   161dc:	200004c8 	.word	0x200004c8

000161e0 <hci_cmd_complete>:
{
   161e0:	b538      	push	{r3, r4, r5, lr}
   161e2:	2103      	movs	r1, #3
   161e4:	4604      	mov	r4, r0
   161e6:	300c      	adds	r0, #12
   161e8:	f005 fe30 	bl	1be4c <net_buf_simple_pull_mem>
	status = buf->data[0];
   161ec:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   161ee:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   161f0:	7819      	ldrb	r1, [r3, #0]
   161f2:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   161f6:	4622      	mov	r2, r4
   161f8:	f7ff ff44 	bl	16084 <hci_cmd_done>
	if (ncmd) {
   161fc:	b125      	cbz	r5, 16208 <hci_cmd_complete+0x28>
   161fe:	4803      	ldr	r0, [pc, #12]	; (1620c <hci_cmd_complete+0x2c>)
}
   16200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   16204:	f00a bb0a 	b.w	2081c <z_impl_k_sem_give>
   16208:	bd38      	pop	{r3, r4, r5, pc}
   1620a:	bf00      	nop
   1620c:	200004c8 	.word	0x200004c8

00016210 <hci_num_completed_packets>:
{
   16210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16214:	b087      	sub	sp, #28
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   16216:	f8d0 800c 	ldr.w	r8, [r0, #12]
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
   1621a:	8a01      	ldrh	r1, [r0, #16]
   1621c:	f898 4000 	ldrb.w	r4, [r8]
   16220:	2301      	movs	r3, #1
   16222:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   16226:	428b      	cmp	r3, r1
{
   16228:	af00      	add	r7, sp, #0
	if (sizeof(*evt) + sizeof(evt->h[0]) * evt->num_handles > buf->len) {
   1622a:	f240 808c 	bls.w	16346 <hci_num_completed_packets+0x136>
		LOG_ERR("evt num_handles (=%u) too large (%u > %u)",
   1622e:	466d      	mov	r5, sp
   16230:	b08a      	sub	sp, #40	; 0x28
   16232:	466a      	mov	r2, sp
   16234:	4846      	ldr	r0, [pc, #280]	; (16350 <hci_num_completed_packets+0x140>)
   16236:	e9c2 3107 	strd	r3, r1, [r2, #28]
   1623a:	2305      	movs	r3, #5
   1623c:	e9c2 0405 	strd	r0, r4, [r2, #20]
   16240:	f44f 5121 	mov.w	r1, #10304	; 0x2840
   16244:	f842 3f10 	str.w	r3, [r2, #16]!
   16248:	4842      	ldr	r0, [pc, #264]	; (16354 <hci_num_completed_packets+0x144>)
   1624a:	f00e fcb3 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   1624e:	46ad      	mov	sp, r5
}
   16250:	371c      	adds	r7, #28
   16252:	46bd      	mov	sp, r7
   16254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("No connection for handle %u", handle);
   16258:	466c      	mov	r4, sp
   1625a:	b088      	sub	sp, #32
   1625c:	466a      	mov	r2, sp
   1625e:	4b3e      	ldr	r3, [pc, #248]	; (16358 <hci_num_completed_packets+0x148>)
   16260:	483c      	ldr	r0, [pc, #240]	; (16354 <hci_num_completed_packets+0x144>)
   16262:	e9c2 3b05 	strd	r3, fp, [r2, #20]
   16266:	2303      	movs	r3, #3
   16268:	f842 3f10 	str.w	r3, [r2, #16]!
   1626c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16270:	f00e fca0 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   16274:	46a5      	mov	sp, r4
	for (i = 0; i < evt->num_handles; i++) {
   16276:	3501      	adds	r5, #1
   16278:	f898 3000 	ldrb.w	r3, [r8]
   1627c:	429d      	cmp	r5, r3
   1627e:	dae7      	bge.n	16250 <hci_num_completed_packets+0x40>
		handle = sys_le16_to_cpu(evt->h[i].handle);
   16280:	eb08 0385 	add.w	r3, r8, r5, lsl #2
   16284:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   16288:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   1628c:	4658      	mov	r0, fp
   1628e:	f002 facf 	bl	18830 <bt_conn_lookup_handle>
		if (!conn) {
   16292:	4604      	mov	r4, r0
   16294:	2800      	cmp	r0, #0
   16296:	d0df      	beq.n	16258 <hci_num_completed_packets+0x48>
			k_work_submit(&conn->tx_complete_work);
   16298:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   1629c:	b346      	cbz	r6, 162f0 <hci_num_completed_packets+0xe0>
	__asm__ volatile(
   1629e:	f04f 0340 	mov.w	r3, #64	; 0x40
   162a2:	f3ef 8211 	mrs	r2, BASEPRI
   162a6:	f383 8812 	msr	BASEPRI_MAX, r3
   162aa:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   162ae:	69e3      	ldr	r3, [r4, #28]
   162b0:	b16b      	cbz	r3, 162ce <hci_num_completed_packets+0xbe>
				conn->pending_no_cb--;
   162b2:	3b01      	subs	r3, #1
   162b4:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   162b6:	f382 8811 	msr	BASEPRI, r2
   162ba:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   162be:	4620      	mov	r0, r4
   162c0:	f002 f85c 	bl	1837c <bt_conn_get_pkts>
   162c4:	3e01      	subs	r6, #1
   162c6:	f00a faa9 	bl	2081c <z_impl_k_sem_give>
   162ca:	b2b6      	uxth	r6, r6
   162cc:	e7e6      	b.n	1629c <hci_num_completed_packets+0x8c>
   162ce:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   162d0:	b993      	cbnz	r3, 162f8 <hci_num_completed_packets+0xe8>
   162d2:	f382 8811 	msr	BASEPRI, r2
   162d6:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
   162da:	2302      	movs	r3, #2
   162dc:	481d      	ldr	r0, [pc, #116]	; (16354 <hci_num_completed_packets+0x144>)
   162de:	f8c7 a014 	str.w	sl, [r7, #20]
   162e2:	f107 0210 	add.w	r2, r7, #16
   162e6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   162ea:	613b      	str	r3, [r7, #16]
   162ec:	f00e fc62 	bl	24bb4 <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   162f0:	4620      	mov	r0, r4
   162f2:	f002 fa65 	bl	187c0 <bt_conn_unref>
   162f6:	e7be      	b.n	16276 <hci_num_completed_packets+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   162f8:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   162fa:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   162fc:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   162fe:	428b      	cmp	r3, r1
	list->tail = node;
   16300:	bf08      	it	eq
   16302:	61a0      	streq	r0, [r4, #24]
   16304:	f382 8811 	msr	BASEPRI, r2
   16308:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1630c:	f04f 0240 	mov.w	r2, #64	; 0x40
   16310:	f3ef 8111 	mrs	r1, BASEPRI
   16314:	f382 8812 	msr	BASEPRI_MAX, r2
   16318:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   1631c:	68da      	ldr	r2, [r3, #12]
   1631e:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   16320:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
   16324:	f8c3 9000 	str.w	r9, [r3]
	return list->tail;
   16328:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   1632a:	b94a      	cbnz	r2, 16340 <hci_num_completed_packets+0x130>
	list->head = node;
   1632c:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   16330:	f381 8811 	msr	BASEPRI, r1
   16334:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   16338:	4658      	mov	r0, fp
   1633a:	f00a fddd 	bl	20ef8 <k_work_submit>
   1633e:	e7be      	b.n	162be <hci_num_completed_packets+0xae>
	parent->next = child;
   16340:	6013      	str	r3, [r2, #0]
	list->tail = node;
   16342:	6263      	str	r3, [r4, #36]	; 0x24
}
   16344:	e7f4      	b.n	16330 <hci_num_completed_packets+0x120>
	for (i = 0; i < evt->num_handles; i++) {
   16346:	2500      	movs	r5, #0
				LOG_ERR("packets count mismatch");
   16348:	f8df a010 	ldr.w	sl, [pc, #16]	; 1635c <hci_num_completed_packets+0x14c>
			tx->pending_no_cb = 0U;
   1634c:	46a9      	mov	r9, r5
   1634e:	e793      	b.n	16278 <hci_num_completed_packets+0x68>
   16350:	00029030 	.word	0x00029030
   16354:	0002700c 	.word	0x0002700c
   16358:	0002905a 	.word	0x0002905a
   1635c:	00029076 	.word	0x00029076

00016360 <le_conn_update_complete>:
{
   16360:	b5f0      	push	{r4, r5, r6, r7, lr}
   16362:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   16364:	68c5      	ldr	r5, [r0, #12]
	handle = sys_le16_to_cpu(evt->handle);
   16366:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   1636a:	af00      	add	r7, sp, #0
	conn = bt_conn_lookup_handle(handle);
   1636c:	4630      	mov	r0, r6
   1636e:	f002 fa5f 	bl	18830 <bt_conn_lookup_handle>
	if (!conn) {
   16372:	4604      	mov	r4, r0
   16374:	b988      	cbnz	r0, 1639a <le_conn_update_complete+0x3a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   16376:	466c      	mov	r4, sp
   16378:	b088      	sub	sp, #32
   1637a:	466a      	mov	r2, sp
   1637c:	4b2d      	ldr	r3, [pc, #180]	; (16434 <le_conn_update_complete+0xd4>)
   1637e:	482e      	ldr	r0, [pc, #184]	; (16438 <le_conn_update_complete+0xd8>)
   16380:	e9c2 3605 	strd	r3, r6, [r2, #20]
   16384:	2303      	movs	r3, #3
   16386:	f842 3f10 	str.w	r3, [r2, #16]!
   1638a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1638e:	f00e fc11 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   16392:	46a5      	mov	sp, r4
}
   16394:	370c      	adds	r7, #12
   16396:	46bd      	mov	sp, r7
   16398:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1639a:	782b      	ldrb	r3, [r5, #0]
   1639c:	2b1a      	cmp	r3, #26
	    !atomic_test_and_set_bit(conn->flags,
   1639e:	f100 0604 	add.w	r6, r0, #4
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   163a2:	d117      	bne.n	163d4 <le_conn_update_complete+0x74>
   163a4:	78c3      	ldrb	r3, [r0, #3]
   163a6:	2b01      	cmp	r3, #1
   163a8:	d128      	bne.n	163fc <le_conn_update_complete+0x9c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   163aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
   163ae:	4630      	mov	r0, r6
   163b0:	f00e fbf1 	bl	24b96 <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   163b4:	0542      	lsls	r2, r0, #21
   163b6:	d40d      	bmi.n	163d4 <le_conn_update_complete+0x74>
		param.interval_min = conn->le.interval_min;
   163b8:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   163bc:	603b      	str	r3, [r7, #0]
		bt_l2cap_update_conn_param(conn, &param);
   163be:	4639      	mov	r1, r7
		param.latency = conn->le.pending_latency;
   163c0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   163c4:	607b      	str	r3, [r7, #4]
		bt_l2cap_update_conn_param(conn, &param);
   163c6:	4620      	mov	r0, r4
   163c8:	f003 f836 	bl	19438 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   163cc:	4620      	mov	r0, r4
   163ce:	f002 f9f7 	bl	187c0 <bt_conn_unref>
   163d2:	e7df      	b.n	16394 <le_conn_update_complete+0x34>
		if (!evt->status) {
   163d4:	782b      	ldrb	r3, [r5, #0]
   163d6:	b98b      	cbnz	r3, 163fc <le_conn_update_complete+0x9c>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   163d8:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   163dc:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   163e0:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   163e4:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   163e8:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   163ec:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   163f0:	f46f 7180 	mvn.w	r1, #256	; 0x100
   163f4:	4630      	mov	r0, r6
   163f6:	f00e fbe0 	bl	24bba <atomic_and.isra.0>
}
   163fa:	e017      	b.n	1642c <le_conn_update_complete+0xcc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   163fc:	f3bf 8f5b 	dmb	ish
   16400:	6863      	ldr	r3, [r4, #4]
   16402:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(conn->flags,
   16406:	05db      	lsls	r3, r3, #23
   16408:	d5f2      	bpl.n	163f0 <le_conn_update_complete+0x90>
					   BT_CONN_PERIPHERAL_PARAM_AUTO_UPDATE) &&
   1640a:	782b      	ldrb	r3, [r5, #0]
   1640c:	2b20      	cmp	r3, #32
   1640e:	d1ef      	bne.n	163f0 <le_conn_update_complete+0x90>
			   conn->le.conn_param_retry_countdown) {
   16410:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			   evt->status == BT_HCI_ERR_UNSUPP_LL_PARAM_VAL &&
   16414:	2b00      	cmp	r3, #0
   16416:	d0eb      	beq.n	163f0 <le_conn_update_complete+0x90>
			conn->le.conn_param_retry_countdown--;
   16418:	3b01      	subs	r3, #1
   1641a:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
   1641e:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   16422:	2300      	movs	r3, #0
   16424:	f104 0060 	add.w	r0, r4, #96	; 0x60
   16428:	f00a fe90 	bl	2114c <k_work_schedule>
		notify_le_param_updated(conn);
   1642c:	4620      	mov	r0, r4
   1642e:	f002 fb6d 	bl	18b0c <notify_le_param_updated>
   16432:	e7cb      	b.n	163cc <le_conn_update_complete+0x6c>
   16434:	00028e87 	.word	0x00028e87
   16438:	0002700c 	.word	0x0002700c

0001643c <bt_hci_cmd_state_set_init>:
{
   1643c:	b510      	push	{r4, lr}
	state->bit = bit;
   1643e:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   16442:	f89d 3008 	ldrb.w	r3, [sp, #8]
   16446:	720b      	strb	r3, [r1, #8]
{
   16448:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   1644a:	f005 f9cd 	bl	1b7e8 <net_buf_id>
   1644e:	4b03      	ldr	r3, [pc, #12]	; (1645c <bt_hci_cmd_state_set_init+0x20>)
   16450:	220c      	movs	r2, #12
   16452:	fb02 3300 	mla	r3, r2, r0, r3
   16456:	605c      	str	r4, [r3, #4]
}
   16458:	bd10      	pop	{r4, pc}
   1645a:	bf00      	nop
   1645c:	20002c6c 	.word	0x20002c6c

00016460 <bt_hci_cmd_create>:
{
   16460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   16464:	f04f 32ff 	mov.w	r2, #4294967295
   16468:	4606      	mov	r6, r0
   1646a:	f04f 33ff 	mov.w	r3, #4294967295
   1646e:	481e      	ldr	r0, [pc, #120]	; (164e8 <bt_hci_cmd_create+0x88>)
   16470:	460f      	mov	r7, r1
   16472:	f00f fcf9 	bl	25e68 <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   16476:	4604      	mov	r4, r0
   16478:	b958      	cbnz	r0, 16492 <bt_hci_cmd_create+0x32>
   1647a:	491c      	ldr	r1, [pc, #112]	; (164ec <bt_hci_cmd_create+0x8c>)
   1647c:	481c      	ldr	r0, [pc, #112]	; (164f0 <bt_hci_cmd_create+0x90>)
   1647e:	4a1d      	ldr	r2, [pc, #116]	; (164f4 <bt_hci_cmd_create+0x94>)
   16480:	f44f 7381 	mov.w	r3, #258	; 0x102
   16484:	f00d fede 	bl	24244 <assert_print>
   16488:	481a      	ldr	r0, [pc, #104]	; (164f4 <bt_hci_cmd_create+0x94>)
   1648a:	f44f 7181 	mov.w	r1, #258	; 0x102
   1648e:	f00d fed2 	bl	24236 <assert_post_action>
	net_buf_simple_reserve(&buf->b, reserve);
   16492:	f100 0a0c 	add.w	sl, r0, #12
   16496:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   16498:	f04f 0800 	mov.w	r8, #0
   1649c:	4650      	mov	r0, sl
   1649e:	f005 fc75 	bl	1bd8c <net_buf_simple_reserve>
   164a2:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
   164a6:	4620      	mov	r0, r4
   164a8:	f005 f99e 	bl	1b7e8 <net_buf_id>
   164ac:	4d12      	ldr	r5, [pc, #72]	; (164f8 <bt_hci_cmd_create+0x98>)
   164ae:	f04f 090c 	mov.w	r9, #12
   164b2:	fb09 5000 	mla	r0, r9, r0, r5
   164b6:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   164b8:	4620      	mov	r0, r4
   164ba:	f005 f995 	bl	1b7e8 <net_buf_id>
   164be:	fb09 5000 	mla	r0, r9, r0, r5
   164c2:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   164c6:	4620      	mov	r0, r4
   164c8:	f005 f98e 	bl	1b7e8 <net_buf_id>
   164cc:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   164d0:	2103      	movs	r1, #3
   164d2:	4650      	mov	r0, sl
   164d4:	f8c5 8004 	str.w	r8, [r5, #4]
   164d8:	f005 fcd6 	bl	1be88 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   164dc:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   164de:	7087      	strb	r7, [r0, #2]
}
   164e0:	4620      	mov	r0, r4
   164e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   164e6:	bf00      	nop
   164e8:	20000a68 	.word	0x20000a68
   164ec:	0002a23d 	.word	0x0002a23d
   164f0:	00027c2a 	.word	0x00027c2a
   164f4:	00028ef3 	.word	0x00028ef3
   164f8:	20002c6c 	.word	0x20002c6c

000164fc <bt_hci_cmd_send_sync>:
{
   164fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16500:	b087      	sub	sp, #28
   16502:	4680      	mov	r8, r0
   16504:	af00      	add	r7, sp, #0
   16506:	4615      	mov	r5, r2
	if (!buf) {
   16508:	460c      	mov	r4, r1
   1650a:	b921      	cbnz	r1, 16516 <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
   1650c:	f7ff ffa8 	bl	16460 <bt_hci_cmd_create>
		if (!buf) {
   16510:	4604      	mov	r4, r0
   16512:	2800      	cmp	r0, #0
   16514:	d05d      	beq.n	165d2 <bt_hci_cmd_send_sync+0xd6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   16516:	2201      	movs	r2, #1
   16518:	2100      	movs	r1, #0
   1651a:	4638      	mov	r0, r7
   1651c:	f010 fa45 	bl	269aa <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   16520:	4620      	mov	r0, r4
   16522:	f005 f961 	bl	1b7e8 <net_buf_id>
   16526:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 165fc <bt_hci_cmd_send_sync+0x100>
   1652a:	230c      	movs	r3, #12
   1652c:	fb03 9000 	mla	r0, r3, r0, r9
   16530:	6087      	str	r7, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   16532:	4620      	mov	r0, r4
   16534:	f005 fba8 	bl	1bc88 <net_buf_ref>
   16538:	4601      	mov	r1, r0
   1653a:	4829      	ldr	r0, [pc, #164]	; (165e0 <bt_hci_cmd_send_sync+0xe4>)
   1653c:	f005 fb3a 	bl	1bbb4 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   16540:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   16544:	2300      	movs	r3, #0
   16546:	4638      	mov	r0, r7
   16548:	f00a f9ac 	bl	208a4 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "command opcode 0x%04x timeout with err %d", opcode, err);
   1654c:	4606      	mov	r6, r0
   1654e:	b188      	cbz	r0, 16574 <bt_hci_cmd_send_sync+0x78>
   16550:	f44f 73a5 	mov.w	r3, #330	; 0x14a
   16554:	4a23      	ldr	r2, [pc, #140]	; (165e4 <bt_hci_cmd_send_sync+0xe8>)
   16556:	4924      	ldr	r1, [pc, #144]	; (165e8 <bt_hci_cmd_send_sync+0xec>)
   16558:	4824      	ldr	r0, [pc, #144]	; (165ec <bt_hci_cmd_send_sync+0xf0>)
   1655a:	f00d fe73 	bl	24244 <assert_print>
   1655e:	4824      	ldr	r0, [pc, #144]	; (165f0 <bt_hci_cmd_send_sync+0xf4>)
   16560:	4632      	mov	r2, r6
   16562:	4641      	mov	r1, r8
   16564:	f00d fe6e 	bl	24244 <assert_print>
   16568:	4040      	eors	r0, r0
   1656a:	f380 8811 	msr	BASEPRI, r0
   1656e:	f04f 0003 	mov.w	r0, #3
   16572:	df02      	svc	2
	status = cmd(buf)->status;
   16574:	4620      	mov	r0, r4
   16576:	f005 f937 	bl	1b7e8 <net_buf_id>
   1657a:	230c      	movs	r3, #12
   1657c:	4358      	muls	r0, r3
   1657e:	f819 6000 	ldrb.w	r6, [r9, r0]
	if (status) {
   16582:	b1f6      	cbz	r6, 165c2 <bt_hci_cmd_send_sync+0xc6>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   16584:	466d      	mov	r5, sp
   16586:	b088      	sub	sp, #32
   16588:	466a      	mov	r2, sp
   1658a:	4b1a      	ldr	r3, [pc, #104]	; (165f4 <bt_hci_cmd_send_sync+0xf8>)
   1658c:	61d6      	str	r6, [r2, #28]
   1658e:	e9c2 3805 	strd	r3, r8, [r2, #20]
   16592:	2304      	movs	r3, #4
   16594:	f842 3f10 	str.w	r3, [r2, #16]!
   16598:	4817      	ldr	r0, [pc, #92]	; (165f8 <bt_hci_cmd_send_sync+0xfc>)
   1659a:	f44f 5102 	mov.w	r1, #8320	; 0x2080
   1659e:	f00e fb09 	bl	24bb4 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   165a2:	4620      	mov	r0, r4
   165a4:	46ad      	mov	sp, r5
   165a6:	f005 fb2b 	bl	1bc00 <net_buf_unref>
		switch (status) {
   165aa:	2e09      	cmp	r6, #9
   165ac:	d014      	beq.n	165d8 <bt_hci_cmd_send_sync+0xdc>
			return -EIO;
   165ae:	2e0d      	cmp	r6, #13
   165b0:	bf0c      	ite	eq
   165b2:	f06f 000b 	mvneq.w	r0, #11
   165b6:	f06f 0004 	mvnne.w	r0, #4
}
   165ba:	371c      	adds	r7, #28
   165bc:	46bd      	mov	sp, r7
   165be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
   165c2:	b115      	cbz	r5, 165ca <bt_hci_cmd_send_sync+0xce>
		*rsp = buf;
   165c4:	602c      	str	r4, [r5, #0]
	return 0;
   165c6:	2000      	movs	r0, #0
   165c8:	e7f7      	b.n	165ba <bt_hci_cmd_send_sync+0xbe>
		net_buf_unref(buf);
   165ca:	4620      	mov	r0, r4
   165cc:	f005 fb18 	bl	1bc00 <net_buf_unref>
   165d0:	e7f9      	b.n	165c6 <bt_hci_cmd_send_sync+0xca>
			return -ENOBUFS;
   165d2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   165d6:	e7f0      	b.n	165ba <bt_hci_cmd_send_sync+0xbe>
			return -ECONNREFUSED;
   165d8:	f06f 006e 	mvn.w	r0, #110	; 0x6e
   165dc:	e7ed      	b.n	165ba <bt_hci_cmd_send_sync+0xbe>
   165de:	bf00      	nop
   165e0:	200004ec 	.word	0x200004ec
   165e4:	00028ef3 	.word	0x00028ef3
   165e8:	000280f3 	.word	0x000280f3
   165ec:	00027c2a 	.word	0x00027c2a
   165f0:	0002908d 	.word	0x0002908d
   165f4:	000290b9 	.word	0x000290b9
   165f8:	0002700c 	.word	0x0002700c
   165fc:	20002c6c 	.word	0x20002c6c

00016600 <hci_le_read_max_data_len>:
{
   16600:	b570      	push	{r4, r5, r6, lr}
   16602:	b088      	sub	sp, #32
   16604:	4606      	mov	r6, r0
   16606:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   16608:	aa01      	add	r2, sp, #4
   1660a:	2100      	movs	r1, #0
   1660c:	f242 002f 	movw	r0, #8239	; 0x202f
   16610:	f7ff ff74 	bl	164fc <bt_hci_cmd_send_sync>
	if (err) {
   16614:	4604      	mov	r4, r0
   16616:	b160      	cbz	r0, 16632 <hci_le_read_max_data_len+0x32>
		LOG_ERR("Failed to read DLE max data len");
   16618:	4b0b      	ldr	r3, [pc, #44]	; (16648 <hci_le_read_max_data_len+0x48>)
   1661a:	9307      	str	r3, [sp, #28]
   1661c:	480b      	ldr	r0, [pc, #44]	; (1664c <hci_le_read_max_data_len+0x4c>)
   1661e:	2302      	movs	r3, #2
   16620:	aa06      	add	r2, sp, #24
   16622:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16626:	9306      	str	r3, [sp, #24]
   16628:	f00e fac4 	bl	24bb4 <z_log_msg_static_create.constprop.0>
}
   1662c:	4620      	mov	r0, r4
   1662e:	b008      	add	sp, #32
   16630:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   16632:	9801      	ldr	r0, [sp, #4]
   16634:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   16636:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1663a:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   1663c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   16640:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   16642:	f005 fadd 	bl	1bc00 <net_buf_unref>
	return 0;
   16646:	e7f1      	b.n	1662c <hci_le_read_max_data_len+0x2c>
   16648:	000290d5 	.word	0x000290d5
   1664c:	0002700c 	.word	0x0002700c

00016650 <bt_hci_le_rand>:
{
   16650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   16652:	4b14      	ldr	r3, [pc, #80]	; (166a4 <bt_hci_le_rand+0x54>)
   16654:	f993 309b 	ldrsb.w	r3, [r3, #155]	; 0x9b
   16658:	2b00      	cmp	r3, #0
{
   1665a:	4605      	mov	r5, r0
   1665c:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   1665e:	da1d      	bge.n	1669c <bt_hci_le_rand+0x4c>
	while (len > 0) {
   16660:	b914      	cbnz	r4, 16668 <bt_hci_le_rand+0x18>
	return 0;
   16662:	4620      	mov	r0, r4
}
   16664:	b003      	add	sp, #12
   16666:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   16668:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   1666a:	aa01      	add	r2, sp, #4
   1666c:	f04f 0100 	mov.w	r1, #0
   16670:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   16674:	4626      	mov	r6, r4
   16676:	bf28      	it	cs
   16678:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   1667a:	f7ff ff3f 	bl	164fc <bt_hci_cmd_send_sync>
		if (err) {
   1667e:	2800      	cmp	r0, #0
   16680:	d1f0      	bne.n	16664 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   16682:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
   16684:	68f9      	ldr	r1, [r7, #12]
   16686:	4632      	mov	r2, r6
   16688:	3101      	adds	r1, #1
   1668a:	4628      	mov	r0, r5
   1668c:	f00e f9de 	bl	24a4c <memcpy>
		net_buf_unref(rsp);
   16690:	4638      	mov	r0, r7
   16692:	f005 fab5 	bl	1bc00 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   16696:	4435      	add	r5, r6
		len -= count;
   16698:	1ba4      	subs	r4, r4, r6
   1669a:	e7e1      	b.n	16660 <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   1669c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   166a0:	e7e0      	b.n	16664 <bt_hci_le_rand+0x14>
   166a2:	bf00      	nop
   166a4:	200003a8 	.word	0x200003a8

000166a8 <bt_hci_le_enh_conn_complete>:
{
   166a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   166ac:	b08c      	sub	sp, #48	; 0x30
		if (disconnected_handles[i] == handle) {
   166ae:	4bae      	ldr	r3, [pc, #696]	; (16968 <bt_hci_le_enh_conn_complete+0x2c0>)
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   166b0:	f8b0 8001 	ldrh.w	r8, [r0, #1]
		if (disconnected_handles[i] == handle) {
   166b4:	8819      	ldrh	r1, [r3, #0]
   166b6:	f448 4270 	orr.w	r2, r8, #61440	; 0xf000
   166ba:	4291      	cmp	r1, r2
   166bc:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
   166c0:	bf08      	it	eq
   166c2:	801e      	strheq	r6, [r3, #0]
	if (evt->status) {
   166c4:	7804      	ldrb	r4, [r0, #0]
{
   166c6:	af02      	add	r7, sp, #8
   166c8:	4605      	mov	r5, r0
			return true;
   166ca:	bf08      	it	eq
   166cc:	2601      	moveq	r6, #1
	if (evt->status) {
   166ce:	b3a4      	cbz	r4, 1673a <bt_hci_le_enh_conn_complete+0x92>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   166d0:	2c3c      	cmp	r4, #60	; 0x3c
   166d2:	d122      	bne.n	1671a <bt_hci_le_enh_conn_complete+0x72>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   166d4:	f001 fa90 	bl	17bf8 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   166d8:	f06f 0180 	mvn.w	r1, #128	; 0x80
   166dc:	3010      	adds	r0, #16
   166de:	f00e fa6c 	bl	24bba <atomic_and.isra.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   166e2:	2000      	movs	r0, #0
   166e4:	f7ff fa82 	bl	15bec <find_pending_connect.part.0>
		if (!conn) {
   166e8:	4605      	mov	r5, r0
   166ea:	b970      	cbnz	r0, 1670a <bt_hci_le_enh_conn_complete+0x62>
			LOG_ERR("No pending peripheral connection");
   166ec:	4b9f      	ldr	r3, [pc, #636]	; (1696c <bt_hci_le_enh_conn_complete+0x2c4>)
   166ee:	627b      	str	r3, [r7, #36]	; 0x24
   166f0:	2302      	movs	r3, #2
   166f2:	489f      	ldr	r0, [pc, #636]	; (16970 <bt_hci_le_enh_conn_complete+0x2c8>)
   166f4:	623b      	str	r3, [r7, #32]
   166f6:	f107 0220 	add.w	r2, r7, #32
   166fa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   166fe:	f00e fa59 	bl	24bb4 <z_log_msg_static_create.constprop.0>
}
   16702:	3728      	adds	r7, #40	; 0x28
   16704:	46bd      	mov	sp, r7
   16706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   1670a:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1670c:	2100      	movs	r1, #0
   1670e:	f002 f897 	bl	18840 <bt_conn_set_state>
		bt_conn_unref(conn);
   16712:	4628      	mov	r0, r5
	bt_conn_unref(conn);
   16714:	f002 f854 	bl	187c0 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   16718:	e7f3      	b.n	16702 <bt_hci_le_enh_conn_complete+0x5a>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   1671a:	466d      	mov	r5, sp
   1671c:	b088      	sub	sp, #32
   1671e:	aa02      	add	r2, sp, #8
   16720:	4b94      	ldr	r3, [pc, #592]	; (16974 <bt_hci_le_enh_conn_complete+0x2cc>)
   16722:	4893      	ldr	r0, [pc, #588]	; (16970 <bt_hci_le_enh_conn_complete+0x2c8>)
   16724:	e9c2 3405 	strd	r3, r4, [r2, #20]
   16728:	2303      	movs	r3, #3
   1672a:	f842 3f10 	str.w	r3, [r2, #16]!
   1672e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   16732:	f00e fa3f 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   16736:	46ad      	mov	sp, r5
		return;
   16738:	e7e3      	b.n	16702 <bt_hci_le_enh_conn_complete+0x5a>
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
   1673a:	78c3      	ldrb	r3, [r0, #3]
   1673c:	2b01      	cmp	r3, #1
   1673e:	bf08      	it	eq
   16740:	4b8d      	ldreq	r3, [pc, #564]	; (16978 <bt_hci_le_enh_conn_complete+0x2d0>)
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   16742:	f100 0904 	add.w	r9, r0, #4
   16746:	4648      	mov	r0, r9
	id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id : BT_ID_DEFAULT;
   16748:	bf08      	it	eq
   1674a:	f893 406f 	ldrbeq.w	r4, [r3, #111]	; 0x6f
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   1674e:	f00e fa0b 	bl	24b68 <bt_addr_le_is_resolved>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
   16752:	4649      	mov	r1, r9
	if (bt_addr_le_is_resolved(&evt->peer_addr)) {
   16754:	b348      	cbz	r0, 167aa <bt_hci_le_enh_conn_complete+0x102>
		bt_addr_le_copy_resolved(id_addr, &evt->peer_addr);
   16756:	f107 0010 	add.w	r0, r7, #16
   1675a:	f00e f9fb 	bl	24b54 <bt_addr_le_copy_resolved>
	memcpy(dst, src, sizeof(*dst));
   1675e:	2206      	movs	r2, #6
   16760:	f105 0111 	add.w	r1, r5, #17
   16764:	f107 0009 	add.w	r0, r7, #9
   16768:	f00e f970 	bl	24a4c <memcpy>
		peer_addr->type = BT_ADDR_LE_RANDOM;
   1676c:	2301      	movs	r3, #1
   1676e:	723b      	strb	r3, [r7, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
   16770:	78eb      	ldrb	r3, [r5, #3]
   16772:	2b01      	cmp	r3, #1
   16774:	d029      	beq.n	167ca <bt_hci_le_enh_conn_complete+0x122>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   16776:	4648      	mov	r0, r9
   16778:	f7ff f8ee 	bl	15958 <bt_addr_le_str>
   1677c:	466c      	mov	r4, sp
   1677e:	b088      	sub	sp, #32
   16780:	aa02      	add	r2, sp, #8
   16782:	4b7e      	ldr	r3, [pc, #504]	; (1697c <bt_hci_le_enh_conn_complete+0x2d4>)
   16784:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16788:	f44f 7300 	mov.w	r3, #512	; 0x200
   1678c:	8393      	strh	r3, [r2, #28]
   1678e:	4b7c      	ldr	r3, [pc, #496]	; (16980 <bt_hci_le_enh_conn_complete+0x2d8>)
   16790:	f842 3f10 	str.w	r3, [r2, #16]!
   16794:	4876      	ldr	r0, [pc, #472]	; (16970 <bt_hci_le_enh_conn_complete+0x2c8>)
   16796:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
   1679a:	f00e fa0b 	bl	24bb4 <z_log_msg_static_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   1679e:	2113      	movs	r1, #19
   167a0:	46a5      	mov	sp, r4
   167a2:	4640      	mov	r0, r8
   167a4:	f00e fa15 	bl	24bd2 <bt_hci_disconnect>
		return;
   167a8:	e7ab      	b.n	16702 <bt_hci_le_enh_conn_complete+0x5a>
		bt_addr_le_copy(id_addr, bt_lookup_id_addr(id, &evt->peer_addr));
   167aa:	4620      	mov	r0, r4
   167ac:	f00e fac1 	bl	24d32 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   167b0:	2207      	movs	r2, #7
   167b2:	4601      	mov	r1, r0
   167b4:	f107 0010 	add.w	r0, r7, #16
   167b8:	f00e f948 	bl	24a4c <memcpy>
   167bc:	2207      	movs	r2, #7
   167be:	4649      	mov	r1, r9
   167c0:	f107 0008 	add.w	r0, r7, #8
   167c4:	f00e f942 	bl	24a4c <memcpy>
}
   167c8:	e7d2      	b.n	16770 <bt_hci_le_enh_conn_complete+0xc8>
   167ca:	f107 0010 	add.w	r0, r7, #16
   167ce:	f7ff fa0d 	bl	15bec <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   167d2:	78eb      	ldrb	r3, [r5, #3]
   167d4:	2b01      	cmp	r3, #1
   167d6:	4604      	mov	r4, r0
   167d8:	d10a      	bne.n	167f0 <bt_hci_le_enh_conn_complete+0x148>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   167da:	f001 fa0d 	bl	17bf8 <bt_le_adv_lookup_legacy>
   167de:	f06f 0180 	mvn.w	r1, #128	; 0x80
   167e2:	4682      	mov	sl, r0
   167e4:	3010      	adds	r0, #16
   167e6:	f00e f9e8 	bl	24bba <atomic_and.isra.0>
		(void)bt_le_lim_adv_cancel_timeout(adv);
   167ea:	4650      	mov	r0, sl
   167ec:	f00e fbb2 	bl	24f54 <bt_le_lim_adv_cancel_timeout>
	if (!conn) {
   167f0:	2c00      	cmp	r4, #0
   167f2:	d0c0      	beq.n	16776 <bt_hci_le_enh_conn_complete+0xce>
	conn->handle = sys_le16_to_cpu(evt->handle);
   167f4:	4620      	mov	r0, r4
   167f6:	f8b5 3001 	ldrh.w	r3, [r5, #1]
   167fa:	f820 3b90 	strh.w	r3, [r0], #144
	memcpy(dst, src, sizeof(*dst));
   167fe:	2207      	movs	r2, #7
   16800:	f107 0110 	add.w	r1, r7, #16
   16804:	f00e f922 	bl	24a4c <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   16808:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   1680c:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   16810:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   16814:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   16818:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   1681c:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   16820:	78eb      	ldrb	r3, [r5, #3]
   16822:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   16824:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16826:	2b01      	cmp	r3, #1
	conn->err = 0U;
   16828:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1682a:	d118      	bne.n	1685e <bt_hci_le_enh_conn_complete+0x1b6>
   1682c:	2207      	movs	r2, #7
   1682e:	f107 0108 	add.w	r1, r7, #8
   16832:	f104 0097 	add.w	r0, r4, #151	; 0x97
   16836:	f00e f909 	bl	24a4c <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   1683a:	f001 f9dd 	bl	17bf8 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   1683e:	7a21      	ldrb	r1, [r4, #8]
   16840:	4d4d      	ldr	r5, [pc, #308]	; (16978 <bt_hci_le_enh_conn_complete+0x2d0>)
   16842:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   16846:	4429      	add	r1, r5
   16848:	2207      	movs	r2, #7
   1684a:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   1684e:	f00e f8fd 	bl	24a4c <memcpy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
   16852:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
   16856:	065d      	lsls	r5, r3, #25
   16858:	d501      	bpl.n	1685e <bt_hci_le_enh_conn_complete+0x1b6>
			bt_le_adv_resume();
   1685a:	f001 fb91 	bl	17f80 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   1685e:	2107      	movs	r1, #7
   16860:	4620      	mov	r0, r4
   16862:	f001 ffed 	bl	18840 <bt_conn_set_state>
	if (is_disconnected) {
   16866:	b11e      	cbz	r6, 16870 <bt_hci_le_enh_conn_complete+0x1c8>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   16868:	2101      	movs	r1, #1
   1686a:	4620      	mov	r0, r4
   1686c:	f001 ffe8 	bl	18840 <bt_conn_set_state>
	bt_conn_connected(conn);
   16870:	4620      	mov	r0, r4
   16872:	f00e fba3 	bl	24fbc <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   16876:	7aa3      	ldrb	r3, [r4, #10]
   16878:	2b07      	cmp	r3, #7
   1687a:	d170      	bne.n	1695e <bt_hci_le_enh_conn_complete+0x2b6>
   1687c:	f3bf 8f5b 	dmb	ish
   16880:	6863      	ldr	r3, [r4, #4]
   16882:	4d3d      	ldr	r5, [pc, #244]	; (16978 <bt_hci_le_enh_conn_complete+0x2d0>)
   16884:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   16888:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   1688c:	d129      	bne.n	168e2 <bt_hci_le_enh_conn_complete+0x23a>
   1688e:	78e3      	ldrb	r3, [r4, #3]
   16890:	b11b      	cbz	r3, 1689a <bt_hci_le_enh_conn_complete+0x1f2>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   16892:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   16896:	0718      	lsls	r0, r3, #28
   16898:	d523      	bpl.n	168e2 <bt_hci_le_enh_conn_complete+0x23a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   1689a:	2102      	movs	r1, #2
   1689c:	f242 0016 	movw	r0, #8214	; 0x2016
   168a0:	f7ff fdde 	bl	16460 <bt_hci_cmd_create>
	if (!buf) {
   168a4:	4606      	mov	r6, r0
   168a6:	2800      	cmp	r0, #0
   168a8:	d05b      	beq.n	16962 <bt_hci_le_enh_conn_complete+0x2ba>
   168aa:	2102      	movs	r1, #2
   168ac:	300c      	adds	r0, #12
   168ae:	f005 faeb 	bl	1be88 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   168b2:	8823      	ldrh	r3, [r4, #0]
   168b4:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   168b6:	2200      	movs	r2, #0
   168b8:	4631      	mov	r1, r6
   168ba:	f242 0016 	movw	r0, #8214	; 0x2016
   168be:	f7ff fe1d 	bl	164fc <bt_hci_cmd_send_sync>
		if (err) {
   168c2:	b170      	cbz	r0, 168e2 <bt_hci_le_enh_conn_complete+0x23a>
			LOG_ERR("Failed read remote features (%d)", err);
   168c4:	466e      	mov	r6, sp
   168c6:	b088      	sub	sp, #32
   168c8:	aa02      	add	r2, sp, #8
   168ca:	4b2e      	ldr	r3, [pc, #184]	; (16984 <bt_hci_le_enh_conn_complete+0x2dc>)
   168cc:	e9c2 3005 	strd	r3, r0, [r2, #20]
   168d0:	2303      	movs	r3, #3
   168d2:	f842 3f10 	str.w	r3, [r2, #16]!
   168d6:	4826      	ldr	r0, [pc, #152]	; (16970 <bt_hci_le_enh_conn_complete+0x2c8>)
   168d8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   168dc:	f00e f96a 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   168e0:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   168e2:	f895 30d9 	ldrb.w	r3, [r5, #217]	; 0xd9
   168e6:	07d9      	lsls	r1, r3, #31
   168e8:	d516      	bpl.n	16918 <bt_hci_le_enh_conn_complete+0x270>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   168ea:	2100      	movs	r1, #0
   168ec:	2302      	movs	r3, #2
   168ee:	9100      	str	r1, [sp, #0]
   168f0:	461a      	mov	r2, r3
   168f2:	4620      	mov	r0, r4
   168f4:	f00e f9a6 	bl	24c44 <bt_le_set_phy>
		if (err) {
   168f8:	b170      	cbz	r0, 16918 <bt_hci_le_enh_conn_complete+0x270>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   168fa:	466e      	mov	r6, sp
   168fc:	b088      	sub	sp, #32
   168fe:	aa02      	add	r2, sp, #8
   16900:	4b21      	ldr	r3, [pc, #132]	; (16988 <bt_hci_le_enh_conn_complete+0x2e0>)
   16902:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16906:	2303      	movs	r3, #3
   16908:	f842 3f10 	str.w	r3, [r2, #16]!
   1690c:	4818      	ldr	r0, [pc, #96]	; (16970 <bt_hci_le_enh_conn_complete+0x2c8>)
   1690e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16912:	f00e f94f 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   16916:	46b5      	mov	sp, r6
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   16918:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   1691c:	069a      	lsls	r2, r3, #26
   1691e:	d51e      	bpl.n	1695e <bt_hci_le_enh_conn_complete+0x2b6>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   16920:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   16924:	689b      	ldr	r3, [r3, #8]
   16926:	079b      	lsls	r3, r3, #30
   16928:	d519      	bpl.n	1695e <bt_hci_le_enh_conn_complete+0x2b6>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1692a:	1db9      	adds	r1, r7, #6
   1692c:	1d38      	adds	r0, r7, #4
   1692e:	f7ff fe67 	bl	16600 <hci_le_read_max_data_len>
			if (!err) {
   16932:	b9a0      	cbnz	r0, 1695e <bt_hci_le_enh_conn_complete+0x2b6>
				err = bt_le_set_data_len(conn,
   16934:	88fa      	ldrh	r2, [r7, #6]
   16936:	88b9      	ldrh	r1, [r7, #4]
   16938:	4620      	mov	r0, r4
   1693a:	f00e f965 	bl	24c08 <bt_le_set_data_len>
				if (err) {
   1693e:	b170      	cbz	r0, 1695e <bt_hci_le_enh_conn_complete+0x2b6>
					LOG_ERR("Failed to set data len (%d)", err);
   16940:	466d      	mov	r5, sp
   16942:	b088      	sub	sp, #32
   16944:	aa02      	add	r2, sp, #8
   16946:	4b11      	ldr	r3, [pc, #68]	; (1698c <bt_hci_le_enh_conn_complete+0x2e4>)
   16948:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1694c:	2303      	movs	r3, #3
   1694e:	f842 3f10 	str.w	r3, [r2, #16]!
   16952:	4807      	ldr	r0, [pc, #28]	; (16970 <bt_hci_le_enh_conn_complete+0x2c8>)
   16954:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16958:	f00e f92c 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   1695c:	46ad      	mov	sp, r5
	bt_conn_unref(conn);
   1695e:	4620      	mov	r0, r4
   16960:	e6d8      	b.n	16714 <bt_hci_le_enh_conn_complete+0x6c>
		return -ENOBUFS;
   16962:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16966:	e7ad      	b.n	168c4 <bt_hci_le_enh_conn_complete+0x21c>
   16968:	20002fd4 	.word	0x20002fd4
   1696c:	000290f5 	.word	0x000290f5
   16970:	0002700c 	.word	0x0002700c
   16974:	00029116 	.word	0x00029116
   16978:	200003a8 	.word	0x200003a8
   1697c:	0002912f 	.word	0x0002912f
   16980:	01000003 	.word	0x01000003
   16984:	0002914b 	.word	0x0002914b
   16988:	0002916c 	.word	0x0002916c
   1698c:	00029183 	.word	0x00029183

00016990 <le_legacy_conn_complete>:
{
   16990:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   16992:	68c1      	ldr	r1, [r0, #12]
	memcpy(dst, src, sizeof(*dst));
   16994:	4c18      	ldr	r4, [pc, #96]	; (169f8 <le_legacy_conn_complete+0x68>)
	enh.status         = evt->status;
   16996:	780b      	ldrb	r3, [r1, #0]
{
   16998:	b088      	sub	sp, #32
	memcpy(dst, src, sizeof(*dst));
   1699a:	2207      	movs	r2, #7
	enh.status         = evt->status;
   1699c:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   169a0:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   169a4:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   169a8:	78cb      	ldrb	r3, [r1, #3]
   169aa:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   169ae:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   169b2:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   169b6:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   169ba:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   169be:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   169c2:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   169c6:	7c4b      	ldrb	r3, [r1, #17]
   169c8:	f88d 301d 	strb.w	r3, [sp, #29]
   169cc:	3104      	adds	r1, #4
   169ce:	a801      	add	r0, sp, #4
   169d0:	f00e f83c 	bl	24a4c <memcpy>
	memcpy(dst, src, sizeof(*dst));
   169d4:	4621      	mov	r1, r4
   169d6:	2206      	movs	r2, #6
   169d8:	f10d 000b 	add.w	r0, sp, #11
   169dc:	f00e f836 	bl	24a4c <memcpy>
   169e0:	2206      	movs	r2, #6
   169e2:	4621      	mov	r1, r4
   169e4:	f10d 0011 	add.w	r0, sp, #17
   169e8:	f00e f830 	bl	24a4c <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   169ec:	4668      	mov	r0, sp
   169ee:	f7ff fe5b 	bl	166a8 <bt_hci_le_enh_conn_complete>
}
   169f2:	b008      	add	sp, #32
   169f4:	bd10      	pop	{r4, pc}
   169f6:	bf00      	nop
   169f8:	00028d0f 	.word	0x00028d0f

000169fc <bt_send>:
	return bt_dev.drv->send(buf);
   169fc:	4b02      	ldr	r3, [pc, #8]	; (16a08 <bt_send+0xc>)
   169fe:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
   16a02:	695b      	ldr	r3, [r3, #20]
   16a04:	4718      	bx	r3
   16a06:	bf00      	nop
   16a08:	200003a8 	.word	0x200003a8

00016a0c <bt_hci_cmd_send>:
{
   16a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16a0e:	4605      	mov	r5, r0
   16a10:	af00      	add	r7, sp, #0
	if (!buf) {
   16a12:	460c      	mov	r4, r1
   16a14:	b919      	cbnz	r1, 16a1e <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   16a16:	f7ff fd23 	bl	16460 <bt_hci_cmd_create>
		if (!buf) {
   16a1a:	4604      	mov	r4, r0
   16a1c:	b318      	cbz	r0, 16a66 <bt_hci_cmd_send+0x5a>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   16a1e:	f640 4335 	movw	r3, #3125	; 0xc35
   16a22:	429d      	cmp	r5, r3
   16a24:	d119      	bne.n	16a5a <bt_hci_cmd_send+0x4e>
		err = bt_send(buf);
   16a26:	4620      	mov	r0, r4
   16a28:	f7ff ffe8 	bl	169fc <bt_send>
		if (err) {
   16a2c:	4605      	mov	r5, r0
   16a2e:	b188      	cbz	r0, 16a54 <bt_hci_cmd_send+0x48>
			LOG_ERR("Unable to send to driver (err %d)", err);
   16a30:	466e      	mov	r6, sp
   16a32:	b088      	sub	sp, #32
   16a34:	466a      	mov	r2, sp
   16a36:	4b0d      	ldr	r3, [pc, #52]	; (16a6c <bt_hci_cmd_send+0x60>)
   16a38:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16a3c:	2303      	movs	r3, #3
   16a3e:	480c      	ldr	r0, [pc, #48]	; (16a70 <bt_hci_cmd_send+0x64>)
   16a40:	f842 3f10 	str.w	r3, [r2, #16]!
   16a44:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16a48:	f00e f8b4 	bl	24bb4 <z_log_msg_static_create.constprop.0>
			net_buf_unref(buf);
   16a4c:	4620      	mov	r0, r4
   16a4e:	46b5      	mov	sp, r6
   16a50:	f005 f8d6 	bl	1bc00 <net_buf_unref>
}
   16a54:	4628      	mov	r0, r5
   16a56:	46bd      	mov	sp, r7
   16a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   16a5a:	4806      	ldr	r0, [pc, #24]	; (16a74 <bt_hci_cmd_send+0x68>)
   16a5c:	4621      	mov	r1, r4
   16a5e:	f005 f8a9 	bl	1bbb4 <net_buf_put>
	return 0;
   16a62:	2500      	movs	r5, #0
   16a64:	e7f6      	b.n	16a54 <bt_hci_cmd_send+0x48>
			return -ENOBUFS;
   16a66:	f06f 0568 	mvn.w	r5, #104	; 0x68
   16a6a:	e7f3      	b.n	16a54 <bt_hci_cmd_send+0x48>
   16a6c:	0002919f 	.word	0x0002919f
   16a70:	0002700c 	.word	0x0002700c
   16a74:	200004ec 	.word	0x200004ec

00016a78 <le_conn_param_req>:
{
   16a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16a7c:	b082      	sub	sp, #8
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   16a7e:	68c3      	ldr	r3, [r0, #12]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   16a80:	78d9      	ldrb	r1, [r3, #3]
   16a82:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   16a84:	f8b3 8000 	ldrh.w	r8, [r3]
{
   16a88:	af00      	add	r7, sp, #0
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   16a8a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16a8e:	803a      	strh	r2, [r7, #0]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   16a90:	7959      	ldrb	r1, [r3, #5]
   16a92:	791a      	ldrb	r2, [r3, #4]
   16a94:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16a98:	807a      	strh	r2, [r7, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   16a9a:	799a      	ldrb	r2, [r3, #6]
   16a9c:	79d9      	ldrb	r1, [r3, #7]
   16a9e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16aa2:	80ba      	strh	r2, [r7, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16aa4:	7a1a      	ldrb	r2, [r3, #8]
   16aa6:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   16aa8:	fa1f f488 	uxth.w	r4, r8
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16aac:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   16ab0:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   16ab2:	80fb      	strh	r3, [r7, #6]
	conn = bt_conn_lookup_handle(handle);
   16ab4:	f001 febc 	bl	18830 <bt_conn_lookup_handle>
	if (!conn) {
   16ab8:	4606      	mov	r6, r0
   16aba:	b9b0      	cbnz	r0, 16aea <le_conn_param_req+0x72>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   16abc:	466d      	mov	r5, sp
   16abe:	b088      	sub	sp, #32
   16ac0:	466a      	mov	r2, sp
   16ac2:	4b20      	ldr	r3, [pc, #128]	; (16b44 <le_conn_param_req+0xcc>)
   16ac4:	4820      	ldr	r0, [pc, #128]	; (16b48 <le_conn_param_req+0xd0>)
   16ac6:	e9c2 3405 	strd	r3, r4, [r2, #20]
   16aca:	2303      	movs	r3, #3
   16acc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16ad0:	f842 3f10 	str.w	r3, [r2, #16]!
   16ad4:	f00e f86e 	bl	24bb4 <z_log_msg_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   16ad8:	2102      	movs	r1, #2
   16ada:	46ad      	mov	sp, r5
   16adc:	4620      	mov	r0, r4
   16ade:	f00e f8fd 	bl	24cdc <le_conn_param_neg_reply>
}
   16ae2:	3708      	adds	r7, #8
   16ae4:	46bd      	mov	sp, r7
   16ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!le_param_req(conn, &param)) {
   16aea:	4639      	mov	r1, r7
   16aec:	f002 f872 	bl	18bd4 <le_param_req>
   16af0:	b938      	cbnz	r0, 16b02 <le_conn_param_req+0x8a>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   16af2:	211e      	movs	r1, #30
   16af4:	4620      	mov	r0, r4
   16af6:	f00e f8f1 	bl	24cdc <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   16afa:	4630      	mov	r0, r6
   16afc:	f001 fe60 	bl	187c0 <bt_conn_unref>
   16b00:	e7ef      	b.n	16ae2 <le_conn_param_req+0x6a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   16b02:	210e      	movs	r1, #14
   16b04:	f242 0020 	movw	r0, #8224	; 0x2020
   16b08:	f7ff fcaa 	bl	16460 <bt_hci_cmd_create>
	if (!buf) {
   16b0c:	4605      	mov	r5, r0
   16b0e:	2800      	cmp	r0, #0
   16b10:	d0f3      	beq.n	16afa <le_conn_param_req+0x82>
   16b12:	210e      	movs	r1, #14
   16b14:	300c      	adds	r0, #12
   16b16:	f005 f9b7 	bl	1be88 <net_buf_simple_add>
   16b1a:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   16b1c:	220e      	movs	r2, #14
   16b1e:	2100      	movs	r1, #0
   16b20:	f00d ff9f 	bl	24a62 <memset>
	cp->handle = sys_cpu_to_le16(handle);
   16b24:	f8a4 8000 	strh.w	r8, [r4]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   16b28:	883b      	ldrh	r3, [r7, #0]
   16b2a:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   16b2c:	887b      	ldrh	r3, [r7, #2]
   16b2e:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   16b30:	88bb      	ldrh	r3, [r7, #4]
   16b32:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   16b34:	88fb      	ldrh	r3, [r7, #6]
   16b36:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   16b38:	4629      	mov	r1, r5
   16b3a:	f242 0020 	movw	r0, #8224	; 0x2020
   16b3e:	f7ff ff65 	bl	16a0c <bt_hci_cmd_send>
   16b42:	e7da      	b.n	16afa <le_conn_param_req+0x82>
   16b44:	00028e87 	.word	0x00028e87
   16b48:	0002700c 	.word	0x0002700c

00016b4c <hci_tx_thread>:
{
   16b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   16b50:	f8df 8158 	ldr.w	r8, [pc, #344]	; 16cac <hci_tx_thread+0x160>
		BT_ASSERT(err == 0);
   16b54:	f8df 9180 	ldr.w	r9, [pc, #384]	; 16cd8 <hci_tx_thread+0x18c>
{
   16b58:	b087      	sub	sp, #28
   16b5a:	af00      	add	r7, sp, #0
		events[0].state = K_POLL_STATE_NOT_READY;
   16b5c:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   16b60:	4851      	ldr	r0, [pc, #324]	; (16ca8 <hci_tx_thread+0x15c>)
		events[0].state = K_POLL_STATE_NOT_READY;
   16b62:	f36f 3394 	bfc	r3, #14, #7
   16b66:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   16b6a:	f001 fda7 	bl	186bc <bt_conn_prepare_events>
   16b6e:	1c45      	adds	r5, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   16b70:	484e      	ldr	r0, [pc, #312]	; (16cac <hci_tx_thread+0x160>)
   16b72:	f04f 32ff 	mov.w	r2, #4294967295
   16b76:	f04f 33ff 	mov.w	r3, #4294967295
   16b7a:	4629      	mov	r1, r5
   16b7c:	f00c fb74 	bl	23268 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   16b80:	b160      	cbz	r0, 16b9c <hci_tx_thread+0x50>
   16b82:	494b      	ldr	r1, [pc, #300]	; (16cb0 <hci_tx_thread+0x164>)
   16b84:	484b      	ldr	r0, [pc, #300]	; (16cb4 <hci_tx_thread+0x168>)
   16b86:	f640 23cd 	movw	r3, #2765	; 0xacd
   16b8a:	464a      	mov	r2, r9
   16b8c:	f00d fb5a 	bl	24244 <assert_print>
   16b90:	4040      	eors	r0, r0
   16b92:	f380 8811 	msr	BASEPRI, r0
   16b96:	f04f 0003 	mov.w	r0, #3
   16b9a:	df02      	svc	2
{
   16b9c:	4e43      	ldr	r6, [pc, #268]	; (16cac <hci_tx_thread+0x160>)
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   16b9e:	f04f 0a03 	mov.w	sl, #3
	for (; count; ev++, count--) {
   16ba2:	b915      	cbnz	r5, 16baa <hci_tx_thread+0x5e>
	z_impl_k_yield();
   16ba4:	f00b fb52 	bl	2224c <z_impl_k_yield>
	while (1) {
   16ba8:	e7d8      	b.n	16b5c <hci_tx_thread+0x10>
		switch (ev->state) {
   16baa:	68f3      	ldr	r3, [r6, #12]
   16bac:	f3c3 3386 	ubfx	r3, r3, #14, #7
   16bb0:	2b02      	cmp	r3, #2
   16bb2:	d960      	bls.n	16c76 <hci_tx_thread+0x12a>
   16bb4:	2b04      	cmp	r3, #4
   16bb6:	d168      	bne.n	16c8a <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
   16bb8:	7b33      	ldrb	r3, [r6, #12]
   16bba:	2b00      	cmp	r3, #0
   16bbc:	d15e      	bne.n	16c7c <hci_tx_thread+0x130>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   16bbe:	483e      	ldr	r0, [pc, #248]	; (16cb8 <hci_tx_thread+0x16c>)
   16bc0:	2200      	movs	r2, #0
   16bc2:	2300      	movs	r3, #0
   16bc4:	f00f f955 	bl	25e72 <net_buf_get>
	BT_ASSERT(buf);
   16bc8:	4604      	mov	r4, r0
   16bca:	b960      	cbnz	r0, 16be6 <hci_tx_thread+0x9a>
   16bcc:	493b      	ldr	r1, [pc, #236]	; (16cbc <hci_tx_thread+0x170>)
   16bce:	4839      	ldr	r0, [pc, #228]	; (16cb4 <hci_tx_thread+0x168>)
   16bd0:	f640 235f 	movw	r3, #2655	; 0xa5f
   16bd4:	464a      	mov	r2, r9
   16bd6:	f00d fb35 	bl	24244 <assert_print>
   16bda:	4040      	eors	r0, r0
   16bdc:	f380 8811 	msr	BASEPRI, r0
   16be0:	f04f 0003 	mov.w	r0, #3
   16be4:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   16be6:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 16cdc <hci_tx_thread+0x190>
	return z_impl_k_sem_take(sem, timeout);
   16bea:	4835      	ldr	r0, [pc, #212]	; (16cc0 <hci_tx_thread+0x174>)
   16bec:	f04f 33ff 	mov.w	r3, #4294967295
   16bf0:	f04f 32ff 	mov.w	r2, #4294967295
   16bf4:	f009 fe56 	bl	208a4 <z_impl_k_sem_take>
   16bf8:	f8db 3138 	ldr.w	r3, [fp, #312]	; 0x138
   16bfc:	b18b      	cbz	r3, 16c22 <hci_tx_thread+0xd6>
		LOG_ERR("Uncleared pending sent_cmd");
   16bfe:	4b31      	ldr	r3, [pc, #196]	; (16cc4 <hci_tx_thread+0x178>)
   16c00:	4831      	ldr	r0, [pc, #196]	; (16cc8 <hci_tx_thread+0x17c>)
   16c02:	617b      	str	r3, [r7, #20]
   16c04:	f107 0210 	add.w	r2, r7, #16
   16c08:	2302      	movs	r3, #2
   16c0a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   16c0e:	613b      	str	r3, [r7, #16]
   16c10:	f00d ffd0 	bl	24bb4 <z_log_msg_static_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
   16c14:	f8db 0138 	ldr.w	r0, [fp, #312]	; 0x138
   16c18:	f004 fff2 	bl	1bc00 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   16c1c:	2300      	movs	r3, #0
   16c1e:	f8cb 3138 	str.w	r3, [fp, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
   16c22:	4620      	mov	r0, r4
   16c24:	f005 f830 	bl	1bc88 <net_buf_ref>
   16c28:	f8cb 0138 	str.w	r0, [fp, #312]	; 0x138
	err = bt_send(buf);
   16c2c:	4620      	mov	r0, r4
   16c2e:	f7ff fee5 	bl	169fc <bt_send>
	if (err) {
   16c32:	b300      	cbz	r0, 16c76 <hci_tx_thread+0x12a>
		LOG_ERR("Unable to send to driver (err %d)", err);
   16c34:	46eb      	mov	fp, sp
   16c36:	b088      	sub	sp, #32
   16c38:	466a      	mov	r2, sp
   16c3a:	4b24      	ldr	r3, [pc, #144]	; (16ccc <hci_tx_thread+0x180>)
   16c3c:	e9c2 3005 	strd	r3, r0, [r2, #20]
   16c40:	2303      	movs	r3, #3
   16c42:	f842 3f10 	str.w	r3, [r2, #16]!
   16c46:	4820      	ldr	r0, [pc, #128]	; (16cc8 <hci_tx_thread+0x17c>)
   16c48:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16c4c:	f00d ffb2 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   16c50:	46dd      	mov	sp, fp
	z_impl_k_sem_give(sem);
   16c52:	481b      	ldr	r0, [pc, #108]	; (16cc0 <hci_tx_thread+0x174>)
   16c54:	f009 fde2 	bl	2081c <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   16c58:	4620      	mov	r0, r4
   16c5a:	f004 fdc5 	bl	1b7e8 <net_buf_id>
   16c5e:	4b1c      	ldr	r3, [pc, #112]	; (16cd0 <hci_tx_thread+0x184>)
   16c60:	220c      	movs	r2, #12
   16c62:	fb02 3000 	mla	r0, r2, r0, r3
   16c66:	211f      	movs	r1, #31
   16c68:	8840      	ldrh	r0, [r0, #2]
   16c6a:	4622      	mov	r2, r4
   16c6c:	f7ff fa0a 	bl	16084 <hci_cmd_done>
		net_buf_unref(buf);
   16c70:	4620      	mov	r0, r4
   16c72:	f004 ffc5 	bl	1bc00 <net_buf_unref>
	for (; count; ev++, count--) {
   16c76:	3614      	adds	r6, #20
   16c78:	3d01      	subs	r5, #1
   16c7a:	e792      	b.n	16ba2 <hci_tx_thread+0x56>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   16c7c:	2b01      	cmp	r3, #1
   16c7e:	d1fa      	bne.n	16c76 <hci_tx_thread+0x12a>
					conn = CONTAINER_OF(ev->fifo,
   16c80:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   16c82:	3838      	subs	r0, #56	; 0x38
   16c84:	f002 f9d2 	bl	1902c <bt_conn_process_tx>
   16c88:	e7f5      	b.n	16c76 <hci_tx_thread+0x12a>
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   16c8a:	466c      	mov	r4, sp
   16c8c:	b088      	sub	sp, #32
   16c8e:	466a      	mov	r2, sp
   16c90:	4910      	ldr	r1, [pc, #64]	; (16cd4 <hci_tx_thread+0x188>)
   16c92:	480d      	ldr	r0, [pc, #52]	; (16cc8 <hci_tx_thread+0x17c>)
		switch (ev->state) {
   16c94:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   16c98:	f842 af10 	str.w	sl, [r2, #16]!
   16c9c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   16ca0:	f00d ff88 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   16ca4:	46a5      	mov	sp, r4
   16ca6:	e7e6      	b.n	16c76 <hci_tx_thread+0x12a>
   16ca8:	20000644 	.word	0x20000644
   16cac:	20000630 	.word	0x20000630
   16cb0:	000280f3 	.word	0x000280f3
   16cb4:	00027c2a 	.word	0x00027c2a
   16cb8:	200004ec 	.word	0x200004ec
   16cbc:	0002a23d 	.word	0x0002a23d
   16cc0:	200004c8 	.word	0x200004c8
   16cc4:	000291c1 	.word	0x000291c1
   16cc8:	0002700c 	.word	0x0002700c
   16ccc:	0002919f 	.word	0x0002919f
   16cd0:	20002c6c 	.word	0x20002c6c
   16cd4:	000291dc 	.word	0x000291dc
   16cd8:	00028ef3 	.word	0x00028ef3
   16cdc:	200003a8 	.word	0x200003a8

00016ce0 <hci_event_prio>:
{
   16ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16ce4:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   16ce6:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   16cea:	4630      	mov	r0, r6
   16cec:	f00f f8cb 	bl	25e86 <net_buf_simple_headroom>
	state->len = buf->len;
   16cf0:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   16cf4:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   16cf8:	4605      	mov	r5, r0
   16cfa:	d80c      	bhi.n	16d16 <hci_event_prio+0x36>
   16cfc:	4a1c      	ldr	r2, [pc, #112]	; (16d70 <hci_event_prio+0x90>)
   16cfe:	491d      	ldr	r1, [pc, #116]	; (16d74 <hci_event_prio+0x94>)
   16d00:	481d      	ldr	r0, [pc, #116]	; (16d78 <hci_event_prio+0x98>)
   16d02:	f640 6374 	movw	r3, #3700	; 0xe74
   16d06:	f00d fa9d 	bl	24244 <assert_print>
   16d0a:	4040      	eors	r0, r0
   16d0c:	f380 8811 	msr	BASEPRI, r0
   16d10:	f04f 0003 	mov.w	r0, #3
   16d14:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   16d16:	4630      	mov	r0, r6
   16d18:	2102      	movs	r1, #2
   16d1a:	f005 f897 	bl	1be4c <net_buf_simple_pull_mem>
   16d1e:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16d20:	7800      	ldrb	r0, [r0, #0]
   16d22:	f00d ff25 	bl	24b70 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   16d26:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16d28:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   16d2a:	d40c      	bmi.n	16d46 <hci_event_prio+0x66>
   16d2c:	4a10      	ldr	r2, [pc, #64]	; (16d70 <hci_event_prio+0x90>)
   16d2e:	4913      	ldr	r1, [pc, #76]	; (16d7c <hci_event_prio+0x9c>)
   16d30:	4811      	ldr	r0, [pc, #68]	; (16d78 <hci_event_prio+0x98>)
   16d32:	f640 6378 	movw	r3, #3704	; 0xe78
   16d36:	f00d fa85 	bl	24244 <assert_print>
   16d3a:	4040      	eors	r0, r0
   16d3c:	f380 8811 	msr	BASEPRI, r0
   16d40:	f04f 0003 	mov.w	r0, #3
   16d44:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   16d46:	2305      	movs	r3, #5
   16d48:	4a0d      	ldr	r2, [pc, #52]	; (16d80 <hci_event_prio+0xa0>)
   16d4a:	7838      	ldrb	r0, [r7, #0]
   16d4c:	4621      	mov	r1, r4
   16d4e:	f7ff f861 	bl	15e14 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   16d52:	07b3      	lsls	r3, r6, #30
   16d54:	d507      	bpl.n	16d66 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   16d56:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   16d58:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   16d5c:	fa13 f585 	uxtah	r5, r3, r5
   16d60:	60e5      	str	r5, [r4, #12]
}
   16d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   16d66:	4620      	mov	r0, r4
}
   16d68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   16d6c:	f004 bf48 	b.w	1bc00 <net_buf_unref>
   16d70:	00028ef3 	.word	0x00028ef3
   16d74:	00028f27 	.word	0x00028f27
   16d78:	00027c2a 	.word	0x00027c2a
   16d7c:	000291fd 	.word	0x000291fd
   16d80:	00027338 	.word	0x00027338

00016d84 <bt_recv>:
{
   16d84:	b5b0      	push	{r4, r5, r7, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   16d86:	7e03      	ldrb	r3, [r0, #24]
	switch (bt_buf_get_type(buf)) {
   16d88:	2b01      	cmp	r3, #1
{
   16d8a:	af00      	add	r7, sp, #0
   16d8c:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   16d8e:	d006      	beq.n	16d9e <bt_recv+0x1a>
   16d90:	2b03      	cmp	r3, #3
   16d92:	d112      	bne.n	16dba <bt_recv+0x36>
			rx_queue_put(buf);
   16d94:	f7fe ff6a 	bl	15c6c <rx_queue_put>
		return 0;
   16d98:	2000      	movs	r0, #0
}
   16d9a:	46bd      	mov	sp, r7
   16d9c:	bdb0      	pop	{r4, r5, r7, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16d9e:	68c3      	ldr	r3, [r0, #12]
   16da0:	7818      	ldrb	r0, [r3, #0]
   16da2:	f00d fee5 	bl	24b70 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   16da6:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   16da8:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   16daa:	d502      	bpl.n	16db2 <bt_recv+0x2e>
			hci_event_prio(buf);
   16dac:	4620      	mov	r0, r4
   16dae:	f7ff ff97 	bl	16ce0 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   16db2:	07ab      	lsls	r3, r5, #30
   16db4:	d5f0      	bpl.n	16d98 <bt_recv+0x14>
			rx_queue_put(buf);
   16db6:	4620      	mov	r0, r4
   16db8:	e7ec      	b.n	16d94 <bt_recv+0x10>
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   16dba:	466d      	mov	r5, sp
   16dbc:	b088      	sub	sp, #32
   16dbe:	466a      	mov	r2, sp
   16dc0:	4908      	ldr	r1, [pc, #32]	; (16de4 <bt_recv+0x60>)
   16dc2:	4809      	ldr	r0, [pc, #36]	; (16de8 <bt_recv+0x64>)
	switch (bt_buf_get_type(buf)) {
   16dc4:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   16dc8:	2303      	movs	r3, #3
   16dca:	f842 3f10 	str.w	r3, [r2, #16]!
   16dce:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   16dd2:	f00d feef 	bl	24bb4 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   16dd6:	4620      	mov	r0, r4
   16dd8:	46ad      	mov	sp, r5
   16dda:	f004 ff11 	bl	1bc00 <net_buf_unref>
		return -EINVAL;
   16dde:	f06f 0015 	mvn.w	r0, #21
   16de2:	e7da      	b.n	16d9a <bt_recv+0x16>
   16de4:	00029216 	.word	0x00029216
   16de8:	0002700c 	.word	0x0002700c

00016dec <bt_hci_driver_register>:
	if (bt_dev.drv) {
   16dec:	4a08      	ldr	r2, [pc, #32]	; (16e10 <bt_hci_driver_register+0x24>)
{
   16dee:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   16df0:	f8d2 0160 	ldr.w	r0, [r2, #352]	; 0x160
   16df4:	b930      	cbnz	r0, 16e04 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   16df6:	68d9      	ldr	r1, [r3, #12]
   16df8:	b139      	cbz	r1, 16e0a <bt_hci_driver_register+0x1e>
   16dfa:	6959      	ldr	r1, [r3, #20]
   16dfc:	b129      	cbz	r1, 16e0a <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   16dfe:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	return 0;
   16e02:	4770      	bx	lr
		return -EALREADY;
   16e04:	f06f 0077 	mvn.w	r0, #119	; 0x77
   16e08:	4770      	bx	lr
		return -EINVAL;
   16e0a:	f06f 0015 	mvn.w	r0, #21
}
   16e0e:	4770      	bx	lr
   16e10:	200003a8 	.word	0x200003a8

00016e14 <bt_finalize_init>:
{
   16e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   16e18:	4c45      	ldr	r4, [pc, #276]	; (16f30 <bt_finalize_init+0x11c>)
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   16e1a:	4846      	ldr	r0, [pc, #280]	; (16f34 <bt_finalize_init+0x120>)
   16e1c:	4d46      	ldr	r5, [pc, #280]	; (16f38 <bt_finalize_init+0x124>)
{
   16e1e:	b083      	sub	sp, #12
   16e20:	2104      	movs	r1, #4
   16e22:	af00      	add	r7, sp, #0
   16e24:	f00d feb7 	bl	24b96 <atomic_or>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   16e28:	79e2      	ldrb	r2, [r4, #7]
   16e2a:	4b44      	ldr	r3, [pc, #272]	; (16f3c <bt_finalize_init+0x128>)
   16e2c:	4620      	mov	r0, r4
   16e2e:	2a01      	cmp	r2, #1
   16e30:	bf88      	it	hi
   16e32:	461d      	movhi	r5, r3
   16e34:	466e      	mov	r6, sp
   16e36:	f7fe fd8f 	bl	15958 <bt_addr_le_str>
   16e3a:	b08a      	sub	sp, #40	; 0x28
   16e3c:	466b      	mov	r3, sp
   16e3e:	4940      	ldr	r1, [pc, #256]	; (16f40 <bt_finalize_init+0x12c>)
   16e40:	61d8      	str	r0, [r3, #28]
   16e42:	e9c3 1505 	strd	r1, r5, [r3, #20]
   16e46:	493f      	ldr	r1, [pc, #252]	; (16f44 <bt_finalize_init+0x130>)
   16e48:	6079      	str	r1, [r7, #4]
   16e4a:	f103 0210 	add.w	r2, r3, #16
   16e4e:	1d38      	adds	r0, r7, #4
   16e50:	f103 011f 	add.w	r1, r3, #31
   16e54:	f103 0523 	add.w	r5, r3, #35	; 0x23
   16e58:	f810 cb01 	ldrb.w	ip, [r0], #1
   16e5c:	f801 cf01 	strb.w	ip, [r1, #1]!
   16e60:	42a9      	cmp	r1, r5
   16e62:	d1f9      	bne.n	16e58 <bt_finalize_init+0x44>
   16e64:	4938      	ldr	r1, [pc, #224]	; (16f48 <bt_finalize_init+0x134>)
   16e66:	6119      	str	r1, [r3, #16]
   16e68:	4838      	ldr	r0, [pc, #224]	; (16f4c <bt_finalize_init+0x138>)
   16e6a:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 16f30 <bt_finalize_init+0x11c>
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   16e6e:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 16f60 <bt_finalize_init+0x14c>
   16e72:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 16f4c <bt_finalize_init+0x138>
	LOG_INF("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   16e76:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
   16e7a:	f00d fe9b 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   16e7e:	46b5      	mov	sp, r6
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   16e80:	4e33      	ldr	r6, [pc, #204]	; (16f50 <bt_finalize_init+0x13c>)
	for (i = 1; i < bt_dev.id_count; i++) {
   16e82:	2501      	movs	r5, #1
   16e84:	79e3      	ldrb	r3, [r4, #7]
   16e86:	429d      	cmp	r5, r3
   16e88:	f10b 0b07 	add.w	fp, fp, #7
   16e8c:	db39      	blt.n	16f02 <bt_finalize_init+0xee>
	LOG_INF("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   16e8e:	f894 5070 	ldrb.w	r5, [r4, #112]	; 0x70
   16e92:	4628      	mov	r0, r5
   16e94:	f7fe fe6e 	bl	15b74 <ver_str>
   16e98:	466e      	mov	r6, sp
   16e9a:	b08c      	sub	sp, #48	; 0x30
   16e9c:	f8b4 1072 	ldrh.w	r1, [r4, #114]	; 0x72
   16ea0:	f8b4 3076 	ldrh.w	r3, [r4, #118]	; 0x76
   16ea4:	466a      	mov	r2, sp
   16ea6:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 16f64 <bt_finalize_init+0x150>
   16eaa:	6253      	str	r3, [r2, #36]	; 0x24
   16eac:	e9c2 5107 	strd	r5, r1, [r2, #28]
   16eb0:	4b28      	ldr	r3, [pc, #160]	; (16f54 <bt_finalize_init+0x140>)
   16eb2:	f44f 7500 	mov.w	r5, #512	; 0x200
   16eb6:	e9c2 c005 	strd	ip, r0, [r2, #20]
   16eba:	8515      	strh	r5, [r2, #40]	; 0x28
   16ebc:	f44f 5153 	mov.w	r1, #13504	; 0x34c0
   16ec0:	f842 3f10 	str.w	r3, [r2, #16]!
   16ec4:	4821      	ldr	r0, [pc, #132]	; (16f4c <bt_finalize_init+0x138>)
   16ec6:	f00d fe75 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   16eca:	46b5      	mov	sp, r6
	LOG_INF("LMP: version %s (0x%02x) subver 0x%04x", ver_str(bt_dev.lmp_version),
   16ecc:	f894 6071 	ldrb.w	r6, [r4, #113]	; 0x71
   16ed0:	4630      	mov	r0, r6
   16ed2:	f7fe fe4f 	bl	15b74 <ver_str>
   16ed6:	b08a      	sub	sp, #40	; 0x28
   16ed8:	f8b4 3074 	ldrh.w	r3, [r4, #116]	; 0x74
   16edc:	466a      	mov	r2, sp
   16ede:	491e      	ldr	r1, [pc, #120]	; (16f58 <bt_finalize_init+0x144>)
   16ee0:	8495      	strh	r5, [r2, #36]	; 0x24
   16ee2:	e9c2 6307 	strd	r6, r3, [r2, #28]
   16ee6:	4b1d      	ldr	r3, [pc, #116]	; (16f5c <bt_finalize_init+0x148>)
   16ee8:	e9c2 1005 	strd	r1, r0, [r2, #20]
   16eec:	f842 3f10 	str.w	r3, [r2, #16]!
   16ef0:	4816      	ldr	r0, [pc, #88]	; (16f4c <bt_finalize_init+0x138>)
   16ef2:	f44f 5133 	mov.w	r1, #11456	; 0x2cc0
   16ef6:	f00d fe5d 	bl	24bb4 <z_log_msg_static_create.constprop.0>
}
   16efa:	370c      	adds	r7, #12
   16efc:	46bd      	mov	sp, r7
   16efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LOG_INF("Identity[%d]: %s", i, bt_addr_le_str(&bt_dev.id_addr[i]));
   16f02:	4658      	mov	r0, fp
   16f04:	f7fe fd28 	bl	15958 <bt_addr_le_str>
   16f08:	46ea      	mov	sl, sp
   16f0a:	b08a      	sub	sp, #40	; 0x28
   16f0c:	466a      	mov	r2, sp
   16f0e:	f240 3301 	movw	r3, #769	; 0x301
   16f12:	e9c2 6505 	strd	r6, r5, [r2, #20]
   16f16:	61d0      	str	r0, [r2, #28]
   16f18:	8413      	strh	r3, [r2, #32]
   16f1a:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   16f1e:	f842 8f10 	str.w	r8, [r2, #16]!
   16f22:	4648      	mov	r0, r9
   16f24:	f00d fe46 	bl	24bb4 <z_log_msg_static_create.constprop.0>
	for (i = 1; i < bt_dev.id_count; i++) {
   16f28:	3501      	adds	r5, #1
   16f2a:	46d5      	mov	sp, sl
   16f2c:	e7aa      	b.n	16e84 <bt_finalize_init+0x70>
   16f2e:	bf00      	nop
   16f30:	200003a8 	.word	0x200003a8
   16f34:	2000047c 	.word	0x2000047c
   16f38:	0002a222 	.word	0x0002a222
   16f3c:	0002922a 	.word	0x0002922a
   16f40:	0002922e 	.word	0x0002922e
   16f44:	03010200 	.word	0x03010200
   16f48:	02000004 	.word	0x02000004
   16f4c:	0002700c 	.word	0x0002700c
   16f50:	0002923d 	.word	0x0002923d
   16f54:	01000006 	.word	0x01000006
   16f58:	0002928c 	.word	0x0002928c
   16f5c:	01000005 	.word	0x01000005
   16f60:	01000004 	.word	0x01000004
   16f64:	0002924e 	.word	0x0002924e

00016f68 <bt_init>:
{
   16f68:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   16f6a:	4dc0      	ldr	r5, [pc, #768]	; (1726c <bt_init+0x304>)
{
   16f6c:	b089      	sub	sp, #36	; 0x24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   16f6e:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   16f72:	6899      	ldr	r1, [r3, #8]
   16f74:	f011 0101 	ands.w	r1, r1, #1
{
   16f78:	af00      	add	r7, sp, #0
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   16f7a:	d122      	bne.n	16fc2 <bt_init+0x5a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   16f7c:	f107 0208 	add.w	r2, r7, #8
   16f80:	f640 4003 	movw	r0, #3075	; 0xc03
   16f84:	f7ff faba 	bl	164fc <bt_hci_cmd_send_sync>
		if (err) {
   16f88:	4604      	mov	r4, r0
   16f8a:	2800      	cmp	r0, #0
   16f8c:	d170      	bne.n	17070 <bt_init+0x108>
		hci_reset_complete(rsp);
   16f8e:	68b8      	ldr	r0, [r7, #8]
	uint8_t status = buf->data[0];
   16f90:	68c3      	ldr	r3, [r0, #12]
	if (status) {
   16f92:	781b      	ldrb	r3, [r3, #0]
   16f94:	b99b      	cbnz	r3, 16fbe <bt_init+0x56>
   16f96:	f3bf 8f5b 	dmb	ish
   16f9a:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
   16f9e:	f3bf 8f5b 	dmb	ish
   16fa2:	f105 02d4 	add.w	r2, r5, #212	; 0xd4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16fa6:	f003 0309 	and.w	r3, r3, #9
   16faa:	f3bf 8f5b 	dmb	ish
   16fae:	e852 1f00 	ldrex	r1, [r2]
   16fb2:	e842 3400 	strex	r4, r3, [r2]
   16fb6:	2c00      	cmp	r4, #0
   16fb8:	d1f9      	bne.n	16fae <bt_init+0x46>
   16fba:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   16fbe:	f004 fe1f 	bl	1bc00 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   16fc2:	f107 0208 	add.w	r2, r7, #8
   16fc6:	2100      	movs	r1, #0
   16fc8:	f241 0003 	movw	r0, #4099	; 0x1003
   16fcc:	f7ff fa96 	bl	164fc <bt_hci_cmd_send_sync>
	if (err) {
   16fd0:	4604      	mov	r4, r0
   16fd2:	2800      	cmp	r0, #0
   16fd4:	d14c      	bne.n	17070 <bt_init+0x108>
	read_local_features_complete(rsp);
   16fd6:	68be      	ldr	r6, [r7, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   16fd8:	48a5      	ldr	r0, [pc, #660]	; (17270 <bt_init+0x308>)
   16fda:	68f1      	ldr	r1, [r6, #12]
   16fdc:	2208      	movs	r2, #8
   16fde:	3101      	adds	r1, #1
   16fe0:	f00d fd34 	bl	24a4c <memcpy>
	net_buf_unref(rsp);
   16fe4:	4630      	mov	r0, r6
   16fe6:	f004 fe0b 	bl	1bc00 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   16fea:	4621      	mov	r1, r4
   16fec:	f107 0208 	add.w	r2, r7, #8
   16ff0:	f241 0001 	movw	r0, #4097	; 0x1001
   16ff4:	f7ff fa82 	bl	164fc <bt_hci_cmd_send_sync>
	if (err) {
   16ff8:	4604      	mov	r4, r0
   16ffa:	2800      	cmp	r0, #0
   16ffc:	d138      	bne.n	17070 <bt_init+0x108>
	read_local_ver_complete(rsp);
   16ffe:	68b8      	ldr	r0, [r7, #8]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   17000:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
   17002:	785a      	ldrb	r2, [r3, #1]
   17004:	f885 2070 	strb.w	r2, [r5, #112]	; 0x70
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   17008:	885a      	ldrh	r2, [r3, #2]
   1700a:	f8a5 2072 	strh.w	r2, [r5, #114]	; 0x72
	bt_dev.lmp_version = rp->lmp_version;
   1700e:	791a      	ldrb	r2, [r3, #4]
   17010:	f885 2071 	strb.w	r2, [r5, #113]	; 0x71
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   17014:	f8b3 2007 	ldrh.w	r2, [r3, #7]
   17018:	f8a5 2074 	strh.w	r2, [r5, #116]	; 0x74
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   1701c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   17020:	f8a5 3076 	strh.w	r3, [r5, #118]	; 0x76
	net_buf_unref(rsp);
   17024:	f004 fdec 	bl	1bc00 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   17028:	4621      	mov	r1, r4
   1702a:	f107 0208 	add.w	r2, r7, #8
   1702e:	f241 0002 	movw	r0, #4098	; 0x1002
   17032:	f7ff fa63 	bl	164fc <bt_hci_cmd_send_sync>
	if (err) {
   17036:	4604      	mov	r4, r0
   17038:	b9d0      	cbnz	r0, 17070 <bt_init+0x108>
	read_supported_commands_complete(rsp);
   1703a:	68be      	ldr	r6, [r7, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   1703c:	488d      	ldr	r0, [pc, #564]	; (17274 <bt_init+0x30c>)
   1703e:	68f1      	ldr	r1, [r6, #12]
   17040:	2240      	movs	r2, #64	; 0x40
   17042:	3101      	adds	r1, #1
   17044:	f00d fd02 	bl	24a4c <memcpy>
	net_buf_unref(rsp);
   17048:	4630      	mov	r0, r6
   1704a:	f004 fdd9 	bl	1bc00 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   1704e:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
   17052:	065e      	lsls	r6, r3, #25
   17054:	d410      	bmi.n	17078 <bt_init+0x110>
		LOG_ERR("Non-LE capable controller detected!");
   17056:	4b88      	ldr	r3, [pc, #544]	; (17278 <bt_init+0x310>)
   17058:	61fb      	str	r3, [r7, #28]
   1705a:	2302      	movs	r3, #2
   1705c:	4887      	ldr	r0, [pc, #540]	; (1727c <bt_init+0x314>)
   1705e:	61bb      	str	r3, [r7, #24]
   17060:	f107 0218 	add.w	r2, r7, #24
   17064:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   17068:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("Non-LE capable controller detected!");
   1706c:	f00d fda2 	bl	24bb4 <z_log_msg_static_create.constprop.0>
}
   17070:	4620      	mov	r0, r4
   17072:	3724      	adds	r7, #36	; 0x24
   17074:	46bd      	mov	sp, r7
   17076:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   17078:	4621      	mov	r1, r4
   1707a:	f107 0208 	add.w	r2, r7, #8
   1707e:	f242 0003 	movw	r0, #8195	; 0x2003
   17082:	f7ff fa3b 	bl	164fc <bt_hci_cmd_send_sync>
	if (err) {
   17086:	4604      	mov	r4, r0
   17088:	2800      	cmp	r0, #0
   1708a:	d1f1      	bne.n	17070 <bt_init+0x108>
	read_le_features_complete(rsp);
   1708c:	68be      	ldr	r6, [r7, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   1708e:	487c      	ldr	r0, [pc, #496]	; (17280 <bt_init+0x318>)
   17090:	68f1      	ldr	r1, [r6, #12]
   17092:	2208      	movs	r2, #8
   17094:	3101      	adds	r1, #1
   17096:	f00d fcd9 	bl	24a4c <memcpy>
	net_buf_unref(rsp);
   1709a:	4630      	mov	r0, r6
   1709c:	f004 fdb0 	bl	1bc00 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   170a0:	4621      	mov	r1, r4
   170a2:	f107 0208 	add.w	r2, r7, #8
   170a6:	f242 0002 	movw	r0, #8194	; 0x2002
   170aa:	f7ff fa27 	bl	164fc <bt_hci_cmd_send_sync>
		if (err) {
   170ae:	4604      	mov	r4, r0
   170b0:	2800      	cmp	r0, #0
   170b2:	d1dd      	bne.n	17070 <bt_init+0x108>
		le_read_buffer_size_complete(rsp);
   170b4:	68bc      	ldr	r4, [r7, #8]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   170b6:	68e3      	ldr	r3, [r4, #12]
	uint16_t acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   170b8:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   170bc:	b291      	uxth	r1, r2
	if (!acl_mtu || !rp->le_max_num) {
   170be:	b141      	cbz	r1, 170d2 <bt_init+0x16a>
   170c0:	78d9      	ldrb	r1, [r3, #3]
   170c2:	b131      	cbz	r1, 170d2 <bt_init+0x16a>
	bt_dev.le.acl_mtu = acl_mtu;
   170c4:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   170c8:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   170ca:	486e      	ldr	r0, [pc, #440]	; (17284 <bt_init+0x31c>)
   170cc:	4611      	mov	r1, r2
   170ce:	f00f fc6c 	bl	269aa <z_impl_k_sem_init>
		net_buf_unref(rsp);
   170d2:	4620      	mov	r0, r4
   170d4:	f004 fd94 	bl	1bc00 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   170d8:	f895 607c 	ldrb.w	r6, [r5, #124]	; 0x7c
   170dc:	f016 0620 	ands.w	r6, r6, #32
   170e0:	d118      	bne.n	17114 <bt_init+0x1ac>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   170e2:	2102      	movs	r1, #2
   170e4:	f640 406d 	movw	r0, #3181	; 0xc6d
   170e8:	f7ff f9ba 	bl	16460 <bt_hci_cmd_create>
		if (!buf) {
   170ec:	4604      	mov	r4, r0
   170ee:	2800      	cmp	r0, #0
   170f0:	f000 80a8 	beq.w	17244 <bt_init+0x2dc>
	return net_buf_simple_add(&buf->b, len);
   170f4:	2102      	movs	r1, #2
   170f6:	300c      	adds	r0, #12
   170f8:	f004 fec6 	bl	1be88 <net_buf_simple_add>
		cp_le->le = 0x01;
   170fc:	2301      	movs	r3, #1
   170fe:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   17100:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   17102:	4621      	mov	r1, r4
   17104:	4632      	mov	r2, r6
   17106:	f640 406d 	movw	r0, #3181	; 0xc6d
   1710a:	f7ff f9f7 	bl	164fc <bt_hci_cmd_send_sync>
		if (err) {
   1710e:	4604      	mov	r4, r0
   17110:	2800      	cmp	r0, #0
   17112:	d1ad      	bne.n	17070 <bt_init+0x108>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   17114:	f895 309c 	ldrb.w	r3, [r5, #156]	; 0x9c
   17118:	071c      	lsls	r4, r3, #28
   1711a:	d513      	bpl.n	17144 <bt_init+0x1dc>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   1711c:	f107 0208 	add.w	r2, r7, #8
   17120:	2100      	movs	r1, #0
   17122:	f242 001c 	movw	r0, #8220	; 0x201c
   17126:	f7ff f9e9 	bl	164fc <bt_hci_cmd_send_sync>
		if (err) {
   1712a:	4604      	mov	r4, r0
   1712c:	2800      	cmp	r0, #0
   1712e:	d19f      	bne.n	17070 <bt_init+0x108>
		le_read_supp_states_complete(rsp);
   17130:	68b8      	ldr	r0, [r7, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   17132:	68c3      	ldr	r3, [r0, #12]
   17134:	f8d3 2001 	ldr.w	r2, [r3, #1]
   17138:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   1713c:	e9c5 2338 	strd	r2, r3, [r5, #224]	; 0xe0
		net_buf_unref(rsp);
   17140:	f004 fd5e 	bl	1bc00 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   17144:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   17148:	0698      	lsls	r0, r3, #26
   1714a:	d520      	bpl.n	1718e <bt_init+0x226>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1714c:	1d39      	adds	r1, r7, #4
   1714e:	1cb8      	adds	r0, r7, #2
   17150:	f7ff fa56 	bl	16600 <hci_le_read_max_data_len>
		if (err) {
   17154:	4604      	mov	r4, r0
   17156:	2800      	cmp	r0, #0
   17158:	d18a      	bne.n	17070 <bt_init+0x108>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1715a:	2104      	movs	r1, #4
   1715c:	f242 0024 	movw	r0, #8228	; 0x2024
   17160:	f7ff f97e 	bl	16460 <bt_hci_cmd_create>
		if (!buf) {
   17164:	4606      	mov	r6, r0
   17166:	2800      	cmp	r0, #0
   17168:	d06c      	beq.n	17244 <bt_init+0x2dc>
   1716a:	2104      	movs	r1, #4
   1716c:	300c      	adds	r0, #12
   1716e:	f004 fe8b 	bl	1be88 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   17172:	887b      	ldrh	r3, [r7, #2]
   17174:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   17176:	88bb      	ldrh	r3, [r7, #4]
   17178:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1717a:	4622      	mov	r2, r4
   1717c:	4631      	mov	r1, r6
   1717e:	f242 0024 	movw	r0, #8228	; 0x2024
   17182:	f7ff f9bb 	bl	164fc <bt_hci_cmd_send_sync>
		if (err) {
   17186:	4604      	mov	r4, r0
   17188:	2800      	cmp	r0, #0
   1718a:	f47f af71 	bne.w	17070 <bt_init+0x108>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   1718e:	2108      	movs	r1, #8
   17190:	f242 0001 	movw	r0, #8193	; 0x2001
   17194:	f7ff f964 	bl	16460 <bt_hci_cmd_create>
	if (!buf) {
   17198:	4604      	mov	r4, r0
   1719a:	2800      	cmp	r0, #0
   1719c:	d052      	beq.n	17244 <bt_init+0x2dc>
   1719e:	2108      	movs	r1, #8
   171a0:	300c      	adds	r0, #12
   171a2:	f004 fe71 	bl	1be88 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   171a6:	f895 20d8 	ldrb.w	r2, [r5, #216]	; 0xd8
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   171aa:	f012 0f02 	tst.w	r2, #2
   171ae:	bf14      	ite	ne
   171b0:	232f      	movne	r3, #47	; 0x2f
   171b2:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   171b4:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   171b6:	f895 20d9 	ldrb.w	r2, [r5, #217]	; 0xd9
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   171ba:	bf48      	it	mi
   171bc:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   171c0:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   171c4:	bf18      	it	ne
   171c6:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
   171ca:	2200      	movs	r2, #0
   171cc:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   171ce:	f3c3 2307 	ubfx	r3, r3, #8, #8
   171d2:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   171d4:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   171d6:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   171d8:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   171da:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   171dc:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   171de:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   171e0:	4621      	mov	r1, r4
   171e2:	f242 0001 	movw	r0, #8193	; 0x2001
   171e6:	f7ff f989 	bl	164fc <bt_hci_cmd_send_sync>
	if (err) {
   171ea:	4604      	mov	r4, r0
   171ec:	2800      	cmp	r0, #0
   171ee:	f47f af3f 	bne.w	17070 <bt_init+0x108>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   171f2:	f895 307c 	ldrb.w	r3, [r5, #124]	; 0x7c
	if (bt_dev.le.acl_mtu) {
   171f6:	f8b5 1104 	ldrh.w	r1, [r5, #260]	; 0x104
	if (BT_FEAT_BREDR(bt_dev.features)) {
   171fa:	069a      	lsls	r2, r3, #26
   171fc:	d425      	bmi.n	1724a <bt_init+0x2e2>
	if (bt_dev.le.acl_mtu) {
   171fe:	b9d1      	cbnz	r1, 17236 <bt_init+0x2ce>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   17200:	f107 0208 	add.w	r2, r7, #8
   17204:	f241 0005 	movw	r0, #4101	; 0x1005
   17208:	f7ff f978 	bl	164fc <bt_hci_cmd_send_sync>
	if (err) {
   1720c:	4604      	mov	r4, r0
   1720e:	2800      	cmp	r0, #0
   17210:	f47f af2e 	bne.w	17070 <bt_init+0x108>
	if (bt_dev.le.acl_mtu) {
   17214:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	read_buffer_size_complete(rsp);
   17218:	68bc      	ldr	r4, [r7, #8]
	if (bt_dev.le.acl_mtu) {
   1721a:	b94b      	cbnz	r3, 17230 <bt_init+0x2c8>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   1721c:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   1721e:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   17222:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   17226:	889a      	ldrh	r2, [r3, #4]
   17228:	4816      	ldr	r0, [pc, #88]	; (17284 <bt_init+0x31c>)
   1722a:	4611      	mov	r1, r2
   1722c:	f00f fbbd 	bl	269aa <z_impl_k_sem_init>
	net_buf_unref(rsp);
   17230:	4620      	mov	r0, r4
   17232:	f004 fce5 	bl	1bc00 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   17236:	2108      	movs	r1, #8
   17238:	f640 4001 	movw	r0, #3073	; 0xc01
   1723c:	f7ff f910 	bl	16460 <bt_hci_cmd_create>
	if (!buf) {
   17240:	4604      	mov	r4, r0
   17242:	bb18      	cbnz	r0, 1728c <bt_init+0x324>
		return -ENOBUFS;
   17244:	f06f 0468 	mvn.w	r4, #104	; 0x68
   17248:	e712      	b.n	17070 <bt_init+0x108>
	else if (!bt_dev.le.acl_mtu) {
   1724a:	2900      	cmp	r1, #0
   1724c:	d1f3      	bne.n	17236 <bt_init+0x2ce>
		LOG_ERR("ACL BR/EDR buffers not initialized");
   1724e:	4b0e      	ldr	r3, [pc, #56]	; (17288 <bt_init+0x320>)
   17250:	61fb      	str	r3, [r7, #28]
   17252:	2302      	movs	r3, #2
   17254:	4809      	ldr	r0, [pc, #36]	; (1727c <bt_init+0x314>)
   17256:	61bb      	str	r3, [r7, #24]
   17258:	f107 0218 	add.w	r2, r7, #24
   1725c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17260:	f00d fca8 	bl	24bb4 <z_log_msg_static_create.constprop.0>
		return -EIO;
   17264:	f06f 0404 	mvn.w	r4, #4
   17268:	e702      	b.n	17070 <bt_init+0x108>
   1726a:	bf00      	nop
   1726c:	200003a8 	.word	0x200003a8
   17270:	20000420 	.word	0x20000420
   17274:	20000428 	.word	0x20000428
   17278:	000292b3 	.word	0x000292b3
   1727c:	0002700c 	.word	0x0002700c
   17280:	20000480 	.word	0x20000480
   17284:	200004b0 	.word	0x200004b0
   17288:	000292d7 	.word	0x000292d7
   1728c:	2108      	movs	r1, #8
   1728e:	300c      	adds	r0, #12
   17290:	f004 fdfa 	bl	1be88 <net_buf_simple_add>
	dst[0] = val;
   17294:	2310      	movs	r3, #16
   17296:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   17298:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
   1729a:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   1729c:	7043      	strb	r3, [r0, #1]
   1729e:	2602      	movs	r6, #2
   172a0:	2320      	movs	r3, #32
	dst[0] = val;
   172a2:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   172a4:	70c6      	strb	r6, [r0, #3]
	dst[0] = val;
   172a6:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   172a8:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   172aa:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   172ac:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   172ae:	4621      	mov	r1, r4
   172b0:	f640 4001 	movw	r0, #3073	; 0xc01
   172b4:	f7ff f922 	bl	164fc <bt_hci_cmd_send_sync>
	if (err) {
   172b8:	4604      	mov	r4, r0
   172ba:	2800      	cmp	r0, #0
   172bc:	f47f aed8 	bne.w	17070 <bt_init+0x108>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   172c0:	4601      	mov	r1, r0
   172c2:	1d3a      	adds	r2, r7, #4
   172c4:	f64f 4001 	movw	r0, #64513	; 0xfc01
   172c8:	f7ff f918 	bl	164fc <bt_hci_cmd_send_sync>
	if (err) {
   172cc:	b1c0      	cbz	r0, 17300 <bt_init+0x398>
		LOG_WRN("Vendor HCI extensions not available");
   172ce:	4b57      	ldr	r3, [pc, #348]	; (1742c <bt_init+0x4c4>)
   172d0:	e9c7 6306 	strd	r6, r3, [r7, #24]
			LOG_WRN("Failed to read supported vendor features");
   172d4:	4856      	ldr	r0, [pc, #344]	; (17430 <bt_init+0x4c8>)
   172d6:	f107 0218 	add.w	r2, r7, #24
   172da:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   172de:	f00d fc69 	bl	24bb4 <z_log_msg_static_create.constprop.0>
	err = bt_id_init();
   172e2:	f000 fb6b 	bl	179bc <bt_id_init>
	if (err) {
   172e6:	4604      	mov	r4, r0
   172e8:	2800      	cmp	r0, #0
   172ea:	f47f aec1 	bne.w	17070 <bt_init+0x108>
		err = bt_conn_init();
   172ee:	f001 ff2b 	bl	19148 <bt_conn_init>
		if (err) {
   172f2:	4604      	mov	r4, r0
   172f4:	2800      	cmp	r0, #0
   172f6:	f47f aebb 	bne.w	17070 <bt_init+0x108>
	bt_finalize_init();
   172fa:	f7ff fd8b 	bl	16e14 <bt_finalize_init>
	return 0;
   172fe:	e6b7      	b.n	17070 <bt_init+0x108>
	rp.info = (void *)rsp->data;
   17300:	687b      	ldr	r3, [r7, #4]
   17302:	68dc      	ldr	r4, [r3, #12]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   17304:	f8b4 3001 	ldrh.w	r3, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
   17308:	2b03      	cmp	r3, #3
		return plat_str[platform];
   1730a:	bf96      	itet	ls
   1730c:	4a49      	ldrls	r2, [pc, #292]	; (17434 <bt_init+0x4cc>)
	return "unknown";
   1730e:	494a      	ldrhi	r1, [pc, #296]	; (17438 <bt_init+0x4d0>)
		return plat_str[platform];
   17310:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Platform: %s (0x%04x)", vs_hw_platform(sys_le16_to_cpu(rp.info->hw_platform)),
   17314:	466e      	mov	r6, sp
   17316:	b08a      	sub	sp, #40	; 0x28
   17318:	466a      	mov	r2, sp
   1731a:	4848      	ldr	r0, [pc, #288]	; (1743c <bt_init+0x4d4>)
   1731c:	61d3      	str	r3, [r2, #28]
   1731e:	f44f 7300 	mov.w	r3, #512	; 0x200
   17322:	8413      	strh	r3, [r2, #32]
   17324:	4b46      	ldr	r3, [pc, #280]	; (17440 <bt_init+0x4d8>)
   17326:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1732a:	f842 3f10 	str.w	r3, [r2, #16]!
   1732e:	4840      	ldr	r0, [pc, #256]	; (17430 <bt_init+0x4c8>)
   17330:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   17334:	f00d fc3e 	bl	24bb4 <z_log_msg_static_create.constprop.0>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   17338:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	LOG_INF("HW Variant: %s (0x%04x)",
   1733c:	f8b4 3003 	ldrh.w	r3, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   17340:	2a02      	cmp	r2, #2
   17342:	46b5      	mov	sp, r6
   17344:	d14c      	bne.n	173e0 <bt_init+0x478>
	if (variant < ARRAY_SIZE(nordic_str)) {
   17346:	2b03      	cmp	r3, #3
   17348:	d84a      	bhi.n	173e0 <bt_init+0x478>
		return nordic_str[variant];
   1734a:	4a3e      	ldr	r2, [pc, #248]	; (17444 <bt_init+0x4dc>)
   1734c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
	LOG_INF("HW Variant: %s (0x%04x)",
   17350:	466e      	mov	r6, sp
   17352:	b08a      	sub	sp, #40	; 0x28
   17354:	466a      	mov	r2, sp
   17356:	483c      	ldr	r0, [pc, #240]	; (17448 <bt_init+0x4e0>)
   17358:	61d3      	str	r3, [r2, #28]
   1735a:	f44f 7300 	mov.w	r3, #512	; 0x200
   1735e:	8413      	strh	r3, [r2, #32]
   17360:	4b37      	ldr	r3, [pc, #220]	; (17440 <bt_init+0x4d8>)
   17362:	e9c2 0105 	strd	r0, r1, [r2, #20]
   17366:	f842 3f10 	str.w	r3, [r2, #16]!
   1736a:	f44f 5113 	mov.w	r1, #9408	; 0x24c0
   1736e:	4830      	ldr	r0, [pc, #192]	; (17430 <bt_init+0x4c8>)
   17370:	f00d fc20 	bl	24bb4 <z_log_msg_static_create.constprop.0>
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   17374:	7963      	ldrb	r3, [r4, #5]
   17376:	f894 c006 	ldrb.w	ip, [r4, #6]
   1737a:	f8d4 0009 	ldr.w	r0, [r4, #9]
	if (variant < ARRAY_SIZE(var_str)) {
   1737e:	2b03      	cmp	r3, #3
   17380:	46b5      	mov	sp, r6
		return var_str[variant];
   17382:	bf98      	it	ls
   17384:	4a31      	ldrls	r2, [pc, #196]	; (1744c <bt_init+0x4e4>)
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   17386:	f8b4 6007 	ldrh.w	r6, [r4, #7]
		return var_str[variant];
   1738a:	bf94      	ite	ls
   1738c:	f852 1023 	ldrls.w	r1, [r2, r3, lsl #2]
	return "unknown";
   17390:	4929      	ldrhi	r1, [pc, #164]	; (17438 <bt_init+0x4d0>)
	LOG_INF("Firmware: %s (0x%02x) Version %u.%u Build %u", vs_fw_variant(rp.info->fw_variant),
   17392:	466c      	mov	r4, sp
   17394:	b08c      	sub	sp, #48	; 0x30
   17396:	466a      	mov	r2, sp
   17398:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 17464 <bt_init+0x4fc>
   1739c:	e9c2 3c07 	strd	r3, ip, [r2, #28]
   173a0:	f44f 7300 	mov.w	r3, #512	; 0x200
   173a4:	8593      	strh	r3, [r2, #44]	; 0x2c
   173a6:	4b2a      	ldr	r3, [pc, #168]	; (17450 <bt_init+0x4e8>)
   173a8:	e9c2 e105 	strd	lr, r1, [r2, #20]
   173ac:	e9c2 6009 	strd	r6, r0, [r2, #36]	; 0x24
   173b0:	f44f 5173 	mov.w	r1, #15552	; 0x3cc0
   173b4:	f842 3f10 	str.w	r3, [r2, #16]!
   173b8:	481d      	ldr	r0, [pc, #116]	; (17430 <bt_init+0x4c8>)
   173ba:	f00d fbfb 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   173be:	46a5      	mov	sp, r4
	net_buf_unref(rsp);
   173c0:	6878      	ldr	r0, [r7, #4]
   173c2:	f004 fc1d 	bl	1bc00 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   173c6:	1d3a      	adds	r2, r7, #4
   173c8:	2100      	movs	r1, #0
   173ca:	f64f 4002 	movw	r0, #64514	; 0xfc02
   173ce:	f7ff f895 	bl	164fc <bt_hci_cmd_send_sync>
	if (err) {
   173d2:	4604      	mov	r4, r0
   173d4:	b130      	cbz	r0, 173e4 <bt_init+0x47c>
		LOG_WRN("Failed to read supported vendor commands");
   173d6:	4b1f      	ldr	r3, [pc, #124]	; (17454 <bt_init+0x4ec>)
			LOG_WRN("Failed to read supported vendor features");
   173d8:	61fb      	str	r3, [r7, #28]
   173da:	2302      	movs	r3, #2
   173dc:	61bb      	str	r3, [r7, #24]
   173de:	e779      	b.n	172d4 <bt_init+0x36c>
		return "unknown";
   173e0:	4915      	ldr	r1, [pc, #84]	; (17438 <bt_init+0x4d0>)
   173e2:	e7b5      	b.n	17350 <bt_init+0x3e8>
	rp.cmds = (void *)rsp->data;
   173e4:	687e      	ldr	r6, [r7, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   173e6:	481c      	ldr	r0, [pc, #112]	; (17458 <bt_init+0x4f0>)
   173e8:	68f1      	ldr	r1, [r6, #12]
   173ea:	2202      	movs	r2, #2
   173ec:	3101      	adds	r1, #1
   173ee:	f00d fb2d 	bl	24a4c <memcpy>
	net_buf_unref(rsp);
   173f2:	4630      	mov	r0, r6
   173f4:	f004 fc04 	bl	1bc00 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   173f8:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   173fc:	075b      	lsls	r3, r3, #29
   173fe:	f57f af70 	bpl.w	172e2 <bt_init+0x37a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   17402:	1d3a      	adds	r2, r7, #4
   17404:	4621      	mov	r1, r4
   17406:	f64f 4003 	movw	r0, #64515	; 0xfc03
   1740a:	f7ff f877 	bl	164fc <bt_hci_cmd_send_sync>
		if (err) {
   1740e:	b108      	cbz	r0, 17414 <bt_init+0x4ac>
			LOG_WRN("Failed to read supported vendor features");
   17410:	4b12      	ldr	r3, [pc, #72]	; (1745c <bt_init+0x4f4>)
   17412:	e7e1      	b.n	173d8 <bt_init+0x470>
		rp.feat = (void *)rsp->data;
   17414:	687c      	ldr	r4, [r7, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   17416:	4812      	ldr	r0, [pc, #72]	; (17460 <bt_init+0x4f8>)
   17418:	68e1      	ldr	r1, [r4, #12]
   1741a:	2201      	movs	r2, #1
   1741c:	4411      	add	r1, r2
   1741e:	f00d fb15 	bl	24a4c <memcpy>
		net_buf_unref(rsp);
   17422:	4620      	mov	r0, r4
   17424:	f004 fbec 	bl	1bc00 <net_buf_unref>
   17428:	e75b      	b.n	172e2 <bt_init+0x37a>
   1742a:	bf00      	nop
   1742c:	000292fa 	.word	0x000292fa
   17430:	0002700c 	.word	0x0002700c
   17434:	00027328 	.word	0x00027328
   17438:	00028ddc 	.word	0x00028ddc
   1743c:	0002931e 	.word	0x0002931e
   17440:	01000004 	.word	0x01000004
   17444:	00027318 	.word	0x00027318
   17448:	00029337 	.word	0x00029337
   1744c:	00027308 	.word	0x00027308
   17450:	01000007 	.word	0x01000007
   17454:	0002937c 	.word	0x0002937c
   17458:	20000469 	.word	0x20000469
   1745c:	000293a5 	.word	0x000293a5
   17460:	20000468 	.word	0x20000468
   17464:	0002934f 	.word	0x0002934f

00017468 <init_work>:
{
   17468:	b510      	push	{r4, lr}
	err = bt_init();
   1746a:	f7ff fd7d 	bl	16f68 <bt_init>
	if (ready_cb) {
   1746e:	4b03      	ldr	r3, [pc, #12]	; (1747c <init_work+0x14>)
   17470:	681b      	ldr	r3, [r3, #0]
   17472:	b113      	cbz	r3, 1747a <init_work+0x12>
}
   17474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   17478:	4718      	bx	r3
}
   1747a:	bd10      	pop	{r4, pc}
   1747c:	20002c84 	.word	0x20002c84

00017480 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   17480:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (!bt_dev.drv) {
   17482:	4d3c      	ldr	r5, [pc, #240]	; (17574 <bt_enable+0xf4>)
{
   17484:	b08f      	sub	sp, #60	; 0x3c
	if (!bt_dev.drv) {
   17486:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
{
   1748a:	af08      	add	r7, sp, #32
   1748c:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   1748e:	b983      	cbnz	r3, 174b2 <bt_enable+0x32>
		LOG_ERR("No HCI driver registered");
   17490:	4b39      	ldr	r3, [pc, #228]	; (17578 <bt_enable+0xf8>)
   17492:	617b      	str	r3, [r7, #20]
   17494:	4839      	ldr	r0, [pc, #228]	; (1757c <bt_enable+0xfc>)
   17496:	2302      	movs	r3, #2
   17498:	f107 0210 	add.w	r2, r7, #16
   1749c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   174a0:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("No HCI driver registered");
   174a4:	613b      	str	r3, [r7, #16]
   174a6:	f00d fb85 	bl	24bb4 <z_log_msg_static_create.constprop.0>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   174aa:	4620      	mov	r0, r4
   174ac:	371c      	adds	r7, #28
   174ae:	46bd      	mov	sp, r7
   174b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   174b2:	f06f 0102 	mvn.w	r1, #2
   174b6:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
   174ba:	f00d fb7e 	bl	24bba <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   174be:	2101      	movs	r1, #1
   174c0:	f00d fb69 	bl	24b96 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   174c4:	ea10 0401 	ands.w	r4, r0, r1
   174c8:	d150      	bne.n	1756c <bt_enable+0xec>
	ready_cb = cb;
   174ca:	4b2d      	ldr	r3, [pc, #180]	; (17580 <bt_enable+0x100>)
   174cc:	601e      	str	r6, [r3, #0]
   174ce:	460a      	mov	r2, r1
   174d0:	f505 7090 	add.w	r0, r5, #288	; 0x120
   174d4:	f00f fa69 	bl	269aa <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   174d8:	f505 70a2 	add.w	r0, r5, #324	; 0x144
   174dc:	f00f fa3f 	bl	2695e <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   174e0:	2200      	movs	r2, #0
   174e2:	2300      	movs	r3, #0
   174e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   174e8:	f06f 0308 	mvn.w	r3, #8
   174ec:	e9cd 4302 	strd	r4, r3, [sp, #8]
   174f0:	e9cd 4400 	strd	r4, r4, [sp]
   174f4:	4b23      	ldr	r3, [pc, #140]	; (17584 <bt_enable+0x104>)
   174f6:	4924      	ldr	r1, [pc, #144]	; (17588 <bt_enable+0x108>)
   174f8:	9404      	str	r4, [sp, #16]
   174fa:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   174fe:	4823      	ldr	r0, [pc, #140]	; (1758c <bt_enable+0x10c>)
   17500:	f008 fe16 	bl	20130 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   17504:	4922      	ldr	r1, [pc, #136]	; (17590 <bt_enable+0x110>)
   17506:	4821      	ldr	r0, [pc, #132]	; (1758c <bt_enable+0x10c>)
   17508:	f00f fa0e 	bl	26928 <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   1750c:	4821      	ldr	r0, [pc, #132]	; (17594 <bt_enable+0x114>)
   1750e:	f009 fcf9 	bl	20f04 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   17512:	4921      	ldr	r1, [pc, #132]	; (17598 <bt_enable+0x118>)
   17514:	481f      	ldr	r0, [pc, #124]	; (17594 <bt_enable+0x114>)
   17516:	9400      	str	r4, [sp, #0]
   17518:	f06f 0307 	mvn.w	r3, #7
   1751c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   17520:	f009 fd0a 	bl	20f38 <k_work_queue_start>
   17524:	491d      	ldr	r1, [pc, #116]	; (1759c <bt_enable+0x11c>)
   17526:	481b      	ldr	r0, [pc, #108]	; (17594 <bt_enable+0x114>)
   17528:	f00f f9fe 	bl	26928 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   1752c:	f8d5 3160 	ldr.w	r3, [r5, #352]	; 0x160
   17530:	68db      	ldr	r3, [r3, #12]
   17532:	4798      	blx	r3
	if (err) {
   17534:	4604      	mov	r4, r0
   17536:	b178      	cbz	r0, 17558 <bt_enable+0xd8>
		LOG_ERR("HCI driver open failed (%d)", err);
   17538:	466d      	mov	r5, sp
   1753a:	462a      	mov	r2, r5
   1753c:	b088      	sub	sp, #32
   1753e:	4b18      	ldr	r3, [pc, #96]	; (175a0 <bt_enable+0x120>)
   17540:	e9c5 3005 	strd	r3, r0, [r5, #20]
   17544:	2303      	movs	r3, #3
   17546:	f842 3f10 	str.w	r3, [r2, #16]!
   1754a:	480c      	ldr	r0, [pc, #48]	; (1757c <bt_enable+0xfc>)
   1754c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   17550:	f00d fb30 	bl	24bb4 <z_log_msg_static_create.constprop.0>
   17554:	46ad      	mov	sp, r5
		return err;
   17556:	e7a8      	b.n	174aa <bt_enable+0x2a>
	if (!cb) {
   17558:	b91e      	cbnz	r6, 17562 <bt_enable+0xe2>
		return bt_init();
   1755a:	f7ff fd05 	bl	16f68 <bt_init>
   1755e:	4604      	mov	r4, r0
   17560:	e7a3      	b.n	174aa <bt_enable+0x2a>
	k_work_submit(&bt_dev.init);
   17562:	f105 00c4 	add.w	r0, r5, #196	; 0xc4
   17566:	f009 fcc7 	bl	20ef8 <k_work_submit>
	return 0;
   1756a:	e79e      	b.n	174aa <bt_enable+0x2a>
		return -EALREADY;
   1756c:	f06f 0477 	mvn.w	r4, #119	; 0x77
   17570:	e79b      	b.n	174aa <bt_enable+0x2a>
   17572:	bf00      	nop
   17574:	200003a8 	.word	0x200003a8
   17578:	000293ce 	.word	0x000293ce
   1757c:	0002700c 	.word	0x0002700c
   17580:	20002c84 	.word	0x20002c84
   17584:	00016b4d 	.word	0x00016b4d
   17588:	20004400 	.word	0x20004400
   1758c:	20001c70 	.word	0x20001c70
   17590:	000293e7 	.word	0x000293e7
   17594:	20001d38 	.word	0x20001d38
   17598:	20004a80 	.word	0x20004a80
   1759c:	000293ed 	.word	0x000293ed
   175a0:	000293f3 	.word	0x000293f3

000175a4 <bt_is_ready>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   175a4:	4b04      	ldr	r3, [pc, #16]	; (175b8 <bt_is_ready+0x14>)
   175a6:	f3bf 8f5b 	dmb	ish
   175aa:	6818      	ldr	r0, [r3, #0]
   175ac:	f3bf 8f5b 	dmb	ish
}

bool bt_is_ready(void)
{
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   175b0:	f3c0 0080 	ubfx	r0, r0, #2, #1
   175b4:	4770      	bx	lr
   175b6:	bf00      	nop
   175b8:	2000047c 	.word	0x2000047c

000175bc <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   175bc:	4800      	ldr	r0, [pc, #0]	; (175c0 <bt_get_name+0x4>)
   175be:	4770      	bx	lr
   175c0:	00027be4 	.word	0x00027be4

000175c4 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   175c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   175c6:	4f0a      	ldr	r7, [pc, #40]	; (175f0 <id_find+0x2c>)
{
   175c8:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   175ca:	2500      	movs	r5, #0
   175cc:	79fb      	ldrb	r3, [r7, #7]
   175ce:	b2ec      	uxtb	r4, r5
   175d0:	42a3      	cmp	r3, r4
   175d2:	d802      	bhi.n	175da <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   175d4:	f06f 0001 	mvn.w	r0, #1
   175d8:	e009      	b.n	175ee <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   175da:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   175de:	4439      	add	r1, r7
   175e0:	4630      	mov	r0, r6
   175e2:	f00d fb9b 	bl	24d1c <bt_addr_le_eq>
   175e6:	3501      	adds	r5, #1
   175e8:	2800      	cmp	r0, #0
   175ea:	d0ef      	beq.n	175cc <id_find+0x8>
   175ec:	4620      	mov	r0, r4
}
   175ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   175f0:	200003a8 	.word	0x200003a8

000175f4 <set_random_address>:
{
   175f4:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   175f6:	4913      	ldr	r1, [pc, #76]	; (17644 <set_random_address+0x50>)
   175f8:	2206      	movs	r2, #6
   175fa:	4605      	mov	r5, r0
   175fc:	f00d fa16 	bl	24a2c <memcmp>
	if (bt_addr_eq(addr, &bt_dev.random_addr.a)) {
   17600:	b1d8      	cbz	r0, 1763a <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   17602:	2106      	movs	r1, #6
   17604:	f242 0005 	movw	r0, #8197	; 0x2005
   17608:	f7fe ff2a 	bl	16460 <bt_hci_cmd_create>
	if (!buf) {
   1760c:	4604      	mov	r4, r0
   1760e:	b1b0      	cbz	r0, 1763e <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17610:	2206      	movs	r2, #6
   17612:	4629      	mov	r1, r5
   17614:	300c      	adds	r0, #12
   17616:	f00e fc42 	bl	25e9e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   1761a:	2200      	movs	r2, #0
   1761c:	4621      	mov	r1, r4
   1761e:	f242 0005 	movw	r0, #8197	; 0x2005
   17622:	f7fe ff6b 	bl	164fc <bt_hci_cmd_send_sync>
	if (err) {
   17626:	b948      	cbnz	r0, 1763c <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
   17628:	2206      	movs	r2, #6
   1762a:	4806      	ldr	r0, [pc, #24]	; (17644 <set_random_address+0x50>)
   1762c:	4629      	mov	r1, r5
   1762e:	f00d fa0d 	bl	24a4c <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   17632:	4b05      	ldr	r3, [pc, #20]	; (17648 <set_random_address+0x54>)
   17634:	2201      	movs	r2, #1
   17636:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		return 0;
   1763a:	2000      	movs	r0, #0
}
   1763c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   1763e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17642:	e7fb      	b.n	1763c <set_random_address+0x48>
   17644:	20000411 	.word	0x20000411
   17648:	200003a8 	.word	0x200003a8

0001764c <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   1764c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1764e:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   17650:	460d      	mov	r5, r1
   17652:	b179      	cbz	r1, 17674 <id_create.constprop.0+0x28>
   17654:	4914      	ldr	r1, [pc, #80]	; (176a8 <id_create.constprop.0+0x5c>)
   17656:	4628      	mov	r0, r5
   17658:	f00d fb60 	bl	24d1c <bt_addr_le_eq>
   1765c:	b950      	cbnz	r0, 17674 <id_create.constprop.0+0x28>
	memcpy(dst, src, sizeof(*dst));
   1765e:	4813      	ldr	r0, [pc, #76]	; (176ac <id_create.constprop.0+0x60>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   17660:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   17664:	2207      	movs	r2, #7
   17666:	4629      	mov	r1, r5
   17668:	4420      	add	r0, r4
   1766a:	f00d f9ef 	bl	24a4c <memcpy>
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		(void)bt_settings_store_id();
		(void)bt_settings_store_irk();
	}

	return 0;
   1766e:	2000      	movs	r0, #0
}
   17670:	b003      	add	sp, #12
   17672:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   17674:	4668      	mov	r0, sp
   17676:	f00d fa5f 	bl	24b38 <bt_addr_le_create_static>
			if (err) {
   1767a:	2800      	cmp	r0, #0
   1767c:	d1f8      	bne.n	17670 <id_create.constprop.0+0x24>
		} while (id_find(&new_addr) >= 0);
   1767e:	4668      	mov	r0, sp
   17680:	f7ff ffa0 	bl	175c4 <id_find>
   17684:	2800      	cmp	r0, #0
   17686:	daf5      	bge.n	17674 <id_create.constprop.0+0x28>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   17688:	4b08      	ldr	r3, [pc, #32]	; (176ac <id_create.constprop.0+0x60>)
   1768a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1768e:	441c      	add	r4, r3
   17690:	2207      	movs	r2, #7
   17692:	4669      	mov	r1, sp
   17694:	4620      	mov	r0, r4
   17696:	f00d f9d9 	bl	24a4c <memcpy>
		if (addr) {
   1769a:	2d00      	cmp	r5, #0
   1769c:	d0e7      	beq.n	1766e <id_create.constprop.0+0x22>
   1769e:	2207      	movs	r2, #7
   176a0:	4621      	mov	r1, r4
   176a2:	4628      	mov	r0, r5
   176a4:	e7e1      	b.n	1766a <id_create.constprop.0+0x1e>
   176a6:	bf00      	nop
   176a8:	00028d02 	.word	0x00028d02
   176ac:	200003a8 	.word	0x200003a8

000176b0 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   176b0:	b570      	push	{r4, r5, r6, lr}
   176b2:	460d      	mov	r5, r1
   176b4:	b086      	sub	sp, #24
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   176b6:	4604      	mov	r4, r0
   176b8:	b920      	cbnz	r0, 176c4 <bt_id_create+0x14>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   176ba:	b31d      	cbz	r5, 17704 <bt_id_create+0x54>
			return -EINVAL;
   176bc:	f06f 0015 	mvn.w	r0, #21
		bt_dev.id_count--;
		return err;
	}

	return new_id;
}
   176c0:	b006      	add	sp, #24
   176c2:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   176c4:	4922      	ldr	r1, [pc, #136]	; (17750 <bt_id_create+0xa0>)
   176c6:	f00d fb29 	bl	24d1c <bt_addr_le_eq>
   176ca:	2800      	cmp	r0, #0
   176cc:	d1f5      	bne.n	176ba <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   176ce:	7823      	ldrb	r3, [r4, #0]
   176d0:	2b01      	cmp	r3, #1
   176d2:	d104      	bne.n	176de <bt_id_create+0x2e>
   176d4:	79a3      	ldrb	r3, [r4, #6]
   176d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   176da:	2bc0      	cmp	r3, #192	; 0xc0
   176dc:	d00a      	beq.n	176f4 <bt_id_create+0x44>
			LOG_ERR("Only static random identity address supported");
   176de:	4b1d      	ldr	r3, [pc, #116]	; (17754 <bt_id_create+0xa4>)
   176e0:	9305      	str	r3, [sp, #20]
   176e2:	481d      	ldr	r0, [pc, #116]	; (17758 <bt_id_create+0xa8>)
   176e4:	2302      	movs	r3, #2
   176e6:	aa04      	add	r2, sp, #16
   176e8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   176ec:	9304      	str	r3, [sp, #16]
   176ee:	f00d fb1d 	bl	24d2c <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   176f2:	e7e3      	b.n	176bc <bt_id_create+0xc>
		if (id_find(addr) >= 0) {
   176f4:	4620      	mov	r0, r4
   176f6:	f7ff ff65 	bl	175c4 <id_find>
   176fa:	2800      	cmp	r0, #0
   176fc:	dbdd      	blt.n	176ba <bt_id_create+0xa>
			return -EALREADY;
   176fe:	f06f 0077 	mvn.w	r0, #119	; 0x77
   17702:	e7dd      	b.n	176c0 <bt_id_create+0x10>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   17704:	4d15      	ldr	r5, [pc, #84]	; (1775c <bt_id_create+0xac>)
   17706:	79eb      	ldrb	r3, [r5, #7]
   17708:	2b01      	cmp	r3, #1
   1770a:	d01e      	beq.n	1774a <bt_id_create+0x9a>
   1770c:	f3bf 8f5b 	dmb	ish
   17710:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
   17714:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   17718:	07db      	lsls	r3, r3, #31
   1771a:	d50b      	bpl.n	17734 <bt_id_create+0x84>
	new_id = bt_dev.id_count++;
   1771c:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   1771e:	4621      	mov	r1, r4
	new_id = bt_dev.id_count++;
   17720:	1c73      	adds	r3, r6, #1
	err = id_create(new_id, addr, irk);
   17722:	4630      	mov	r0, r6
	new_id = bt_dev.id_count++;
   17724:	71eb      	strb	r3, [r5, #7]
	err = id_create(new_id, addr, irk);
   17726:	f7ff ff91 	bl	1764c <id_create.constprop.0>
	if (err) {
   1772a:	b160      	cbz	r0, 17746 <bt_id_create+0x96>
		bt_dev.id_count--;
   1772c:	79eb      	ldrb	r3, [r5, #7]
   1772e:	3b01      	subs	r3, #1
   17730:	71eb      	strb	r3, [r5, #7]
		return err;
   17732:	e7c5      	b.n	176c0 <bt_id_create+0x10>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   17734:	2c00      	cmp	r4, #0
   17736:	d0c1      	beq.n	176bc <bt_id_create+0xc>
   17738:	4905      	ldr	r1, [pc, #20]	; (17750 <bt_id_create+0xa0>)
   1773a:	4620      	mov	r0, r4
   1773c:	f00d faee 	bl	24d1c <bt_addr_le_eq>
   17740:	2800      	cmp	r0, #0
   17742:	d0eb      	beq.n	1771c <bt_id_create+0x6c>
   17744:	e7ba      	b.n	176bc <bt_id_create+0xc>
	new_id = bt_dev.id_count++;
   17746:	4630      	mov	r0, r6
   17748:	e7ba      	b.n	176c0 <bt_id_create+0x10>
		return -ENOMEM;
   1774a:	f06f 000b 	mvn.w	r0, #11
   1774e:	e7b7      	b.n	176c0 <bt_id_create+0x10>
   17750:	00028d02 	.word	0x00028d02
   17754:	00029502 	.word	0x00029502
   17758:	00027014 	.word	0x00027014
   1775c:	200003a8 	.word	0x200003a8

00017760 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   17760:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   17762:	4604      	mov	r4, r0
{
   17764:	b088      	sub	sp, #32
	CHECKIF(addr == NULL) {
   17766:	b960      	cbnz	r0, 17782 <bt_id_read_public_addr+0x22>
		LOG_WRN("Invalid input parameters");
   17768:	4b1a      	ldr	r3, [pc, #104]	; (177d4 <bt_id_read_public_addr+0x74>)
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
   1776a:	9307      	str	r3, [sp, #28]
   1776c:	481a      	ldr	r0, [pc, #104]	; (177d8 <bt_id_read_public_addr+0x78>)
   1776e:	2302      	movs	r3, #2
   17770:	aa06      	add	r2, sp, #24
   17772:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   17776:	9306      	str	r3, [sp, #24]
   17778:	f00d fad8 	bl	24d2c <z_log_msg_static_create.constprop.0>
		return 0U;
   1777c:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   1777e:	b008      	add	sp, #32
   17780:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   17782:	aa01      	add	r2, sp, #4
   17784:	2100      	movs	r1, #0
   17786:	f241 0009 	movw	r0, #4105	; 0x1009
   1778a:	f7fe feb7 	bl	164fc <bt_hci_cmd_send_sync>
	if (err) {
   1778e:	4606      	mov	r6, r0
   17790:	b108      	cbz	r0, 17796 <bt_id_read_public_addr+0x36>
		LOG_WRN("Failed to read public address");
   17792:	4b12      	ldr	r3, [pc, #72]	; (177dc <bt_id_read_public_addr+0x7c>)
   17794:	e7e9      	b.n	1776a <bt_id_read_public_addr+0xa>
	rp = (void *)rsp->data;
   17796:	9b01      	ldr	r3, [sp, #4]
	return memcmp(a, b, sizeof(*a));
   17798:	4911      	ldr	r1, [pc, #68]	; (177e0 <bt_id_read_public_addr+0x80>)
	if (bt_addr_eq(&rp->bdaddr, BT_ADDR_ANY) ||
   1779a:	68dd      	ldr	r5, [r3, #12]
   1779c:	3501      	adds	r5, #1
   1779e:	2206      	movs	r2, #6
   177a0:	4628      	mov	r0, r5
   177a2:	f00d f943 	bl	24a2c <memcmp>
   177a6:	b918      	cbnz	r0, 177b0 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   177a8:	9801      	ldr	r0, [sp, #4]
   177aa:	f004 fa29 	bl	1bc00 <net_buf_unref>
		return 0U;
   177ae:	e7e5      	b.n	1777c <bt_id_read_public_addr+0x1c>
   177b0:	490c      	ldr	r1, [pc, #48]	; (177e4 <bt_id_read_public_addr+0x84>)
   177b2:	2206      	movs	r2, #6
   177b4:	4628      	mov	r0, r5
   177b6:	f00d f939 	bl	24a2c <memcmp>
	if (bt_addr_eq(&rp->bdaddr, BT_ADDR_ANY) ||
   177ba:	2800      	cmp	r0, #0
   177bc:	d0f4      	beq.n	177a8 <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
   177be:	2206      	movs	r2, #6
   177c0:	4629      	mov	r1, r5
   177c2:	1c60      	adds	r0, r4, #1
   177c4:	f00d f942 	bl	24a4c <memcpy>
	net_buf_unref(rsp);
   177c8:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   177ca:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   177cc:	f004 fa18 	bl	1bc00 <net_buf_unref>
	return 1U;
   177d0:	2001      	movs	r0, #1
   177d2:	e7d4      	b.n	1777e <bt_id_read_public_addr+0x1e>
   177d4:	00029530 	.word	0x00029530
   177d8:	00027014 	.word	0x00027014
   177dc:	00029549 	.word	0x00029549
   177e0:	00028d0f 	.word	0x00028d0f
   177e4:	00028d09 	.word	0x00028d09

000177e8 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   177e8:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   177ea:	4668      	mov	r0, sp
   177ec:	f7ff ffb8 	bl	17760 <bt_id_read_public_addr>
   177f0:	4b04      	ldr	r3, [pc, #16]	; (17804 <bt_setup_public_id_addr+0x1c>)
   177f2:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   177f4:	b118      	cbz	r0, 177fe <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   177f6:	4669      	mov	r1, sp
   177f8:	2000      	movs	r0, #0
   177fa:	f7ff ff27 	bl	1764c <id_create.constprop.0>
}
   177fe:	b003      	add	sp, #12
   17800:	f85d fb04 	ldr.w	pc, [sp], #4
   17804:	200003a8 	.word	0x200003a8

00017808 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   17808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1780c:	4b22      	ldr	r3, [pc, #136]	; (17898 <bt_read_static_addr+0x90>)
   1780e:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
   17812:	07db      	lsls	r3, r3, #31
{
   17814:	b088      	sub	sp, #32
   17816:	4607      	mov	r7, r0
   17818:	4688      	mov	r8, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1781a:	d40e      	bmi.n	1783a <bt_read_static_addr+0x32>
		LOG_WRN("Read Static Addresses command not available");
   1781c:	4b1f      	ldr	r3, [pc, #124]	; (1789c <bt_read_static_addr+0x94>)
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
   1781e:	9307      	str	r3, [sp, #28]
   17820:	481f      	ldr	r0, [pc, #124]	; (178a0 <bt_read_static_addr+0x98>)
   17822:	2302      	movs	r3, #2
   17824:	aa06      	add	r2, sp, #24
   17826:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return 0;
   1782a:	2500      	movs	r5, #0
		LOG_WRN("Failed to read static addresses");
   1782c:	9306      	str	r3, [sp, #24]
   1782e:	f00d fa7d 	bl	24d2c <z_log_msg_static_create.constprop.0>
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   17832:	4628      	mov	r0, r5
   17834:	b008      	add	sp, #32
   17836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   1783a:	aa01      	add	r2, sp, #4
   1783c:	2100      	movs	r1, #0
   1783e:	f64f 4009 	movw	r0, #64521	; 0xfc09
   17842:	f7fe fe5b 	bl	164fc <bt_hci_cmd_send_sync>
	if (err) {
   17846:	4604      	mov	r4, r0
   17848:	b108      	cbz	r0, 1784e <bt_read_static_addr+0x46>
		LOG_WRN("Failed to read static addresses");
   1784a:	4b16      	ldr	r3, [pc, #88]	; (178a4 <bt_read_static_addr+0x9c>)
   1784c:	e7e7      	b.n	1781e <bt_read_static_addr+0x16>
	rp = (void *)rsp->data;
   1784e:	9b01      	ldr	r3, [sp, #4]
   17850:	68de      	ldr	r6, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
   17852:	7875      	ldrb	r5, [r6, #1]
   17854:	4545      	cmp	r5, r8
   17856:	bf28      	it	cs
   17858:	4645      	movcs	r5, r8
	for (i = 0; i < cnt; i++) {
   1785a:	3602      	adds	r6, #2
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   1785c:	f04f 0816 	mov.w	r8, #22
	for (i = 0; i < cnt; i++) {
   17860:	42a5      	cmp	r5, r4
   17862:	dc0f      	bgt.n	17884 <bt_read_static_addr+0x7c>
	net_buf_unref(rsp);
   17864:	9801      	ldr	r0, [sp, #4]
   17866:	f004 f9cb 	bl	1bc00 <net_buf_unref>
	if (!cnt) {
   1786a:	2d00      	cmp	r5, #0
   1786c:	d1e1      	bne.n	17832 <bt_read_static_addr+0x2a>
		LOG_WRN("No static addresses stored in controller");
   1786e:	4b0e      	ldr	r3, [pc, #56]	; (178a8 <bt_read_static_addr+0xa0>)
   17870:	9307      	str	r3, [sp, #28]
   17872:	480b      	ldr	r0, [pc, #44]	; (178a0 <bt_read_static_addr+0x98>)
   17874:	2302      	movs	r3, #2
   17876:	aa06      	add	r2, sp, #24
   17878:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1787c:	9306      	str	r3, [sp, #24]
   1787e:	f00d fa55 	bl	24d2c <z_log_msg_static_create.constprop.0>
   17882:	e7d6      	b.n	17832 <bt_read_static_addr+0x2a>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   17884:	4631      	mov	r1, r6
   17886:	fb08 7004 	mla	r0, r8, r4, r7
   1788a:	2216      	movs	r2, #22
   1788c:	f00d f8de 	bl	24a4c <memcpy>
	for (i = 0; i < cnt; i++) {
   17890:	3401      	adds	r4, #1
   17892:	3616      	adds	r6, #22
   17894:	e7e4      	b.n	17860 <bt_read_static_addr+0x58>
   17896:	bf00      	nop
   17898:	200003a8 	.word	0x200003a8
   1789c:	00029567 	.word	0x00029567
   178a0:	00027014 	.word	0x00027014
   178a4:	00029593 	.word	0x00029593
   178a8:	000295b3 	.word	0x000295b3

000178ac <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   178ac:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   178ae:	4e15      	ldr	r6, [pc, #84]	; (17904 <bt_setup_random_id_addr+0x58>)
   178b0:	79f4      	ldrb	r4, [r6, #7]
{
   178b2:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   178b4:	b92c      	cbnz	r4, 178c2 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   178b6:	2101      	movs	r1, #1
   178b8:	a802      	add	r0, sp, #8
   178ba:	f7ff ffa5 	bl	17808 <bt_read_static_addr>
   178be:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   178c0:	b9c8      	cbnz	r0, 178f6 <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   178c2:	2100      	movs	r1, #0
   178c4:	4608      	mov	r0, r1
}
   178c6:	b009      	add	sp, #36	; 0x24
   178c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   178cc:	f7ff bef0 	b.w	176b0 <bt_id_create>
   178d0:	ab02      	add	r3, sp, #8
   178d2:	fb07 3105 	mla	r1, r7, r5, r3
   178d6:	2206      	movs	r2, #6
   178d8:	f10d 0001 	add.w	r0, sp, #1
   178dc:	f00d f8b6 	bl	24a4c <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   178e0:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   178e2:	4669      	mov	r1, sp
   178e4:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   178e6:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   178ea:	f7ff feaf 	bl	1764c <id_create.constprop.0>
				if (err) {
   178ee:	3401      	adds	r4, #1
   178f0:	b110      	cbz	r0, 178f8 <bt_setup_random_id_addr+0x4c>
}
   178f2:	b009      	add	sp, #36	; 0x24
   178f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   178f6:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   178f8:	79f3      	ldrb	r3, [r6, #7]
   178fa:	b2e5      	uxtb	r5, r4
   178fc:	42ab      	cmp	r3, r5
   178fe:	d8e7      	bhi.n	178d0 <bt_setup_random_id_addr+0x24>
			return 0;
   17900:	2000      	movs	r0, #0
   17902:	e7f6      	b.n	178f2 <bt_setup_random_id_addr+0x46>
   17904:	200003a8 	.word	0x200003a8

00017908 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   17908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1790c:	4690      	mov	r8, r2
   1790e:	460e      	mov	r6, r1
   17910:	461d      	mov	r5, r3
	const bt_addr_le_t *id_addr;
	int err = 0;

	CHECKIF(adv == NULL || own_addr_type == NULL) {
   17912:	4602      	mov	r2, r0
   17914:	2800      	cmp	r0, #0
   17916:	d04b      	beq.n	179b0 <bt_id_set_adv_own_addr+0xa8>
   17918:	2b00      	cmp	r3, #0
   1791a:	d049      	beq.n	179b0 <bt_id_set_adv_own_addr+0xa8>
	}

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   1791c:	07cf      	lsls	r7, r1, #31
	id_addr = &bt_dev.id_addr[adv->id];
   1791e:	7804      	ldrb	r4, [r0, #0]
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   17920:	d531      	bpl.n	17986 <bt_id_set_adv_own_addr+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   17922:	4f25      	ldr	r7, [pc, #148]	; (179b8 <bt_id_set_adv_own_addr+0xb0>)
   17924:	f1b8 0f00 	cmp.w	r8, #0
   17928:	d013      	beq.n	17952 <bt_id_set_adv_own_addr+0x4a>
   1792a:	0688      	lsls	r0, r1, #26
   1792c:	d40a      	bmi.n	17944 <bt_id_set_adv_own_addr+0x3c>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1792e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   17932:	5cfb      	ldrb	r3, [r7, r3]
   17934:	2b01      	cmp	r3, #1
   17936:	d015      	beq.n	17964 <bt_id_set_adv_own_addr+0x5c>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   17938:	702b      	strb	r3, [r5, #0]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1793a:	06b2      	lsls	r2, r6, #26
   1793c:	d50f      	bpl.n	1795e <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   1793e:	f043 0302 	orr.w	r3, r3, #2
   17942:	e00b      	b.n	1795c <bt_id_set_adv_own_addr+0x54>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   17944:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
   17948:	0659      	lsls	r1, r3, #25
   1794a:	d4f0      	bmi.n	1792e <bt_id_set_adv_own_addr+0x26>
			return -ENOTSUP;
   1794c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   17950:	e006      	b.n	17960 <bt_id_set_adv_own_addr+0x58>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   17952:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   17956:	5cfb      	ldrb	r3, [r7, r3]
   17958:	2b01      	cmp	r3, #1
   1795a:	d003      	beq.n	17964 <bt_id_set_adv_own_addr+0x5c>
			*own_addr_type = id_addr->type;
   1795c:	702b      	strb	r3, [r5, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   1795e:	2000      	movs	r0, #0
}
   17960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   17964:	2107      	movs	r1, #7
   17966:	fb01 7104 	mla	r1, r1, r4, r7
   1796a:	3101      	adds	r1, #1
   1796c:	4610      	mov	r0, r2
   1796e:	f00d f9e5 	bl	24d3c <bt_id_set_adv_random_addr>
				if (err) {
   17972:	2800      	cmp	r0, #0
   17974:	d1f4      	bne.n	17960 <bt_id_set_adv_own_addr+0x58>
			*own_addr_type = id_addr->type;
   17976:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   1797a:	5d3b      	ldrb	r3, [r7, r4]
   1797c:	702b      	strb	r3, [r5, #0]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   1797e:	f1b8 0f00 	cmp.w	r8, #0
   17982:	d0ec      	beq.n	1795e <bt_id_set_adv_own_addr+0x56>
   17984:	e7d9      	b.n	1793a <bt_id_set_adv_own_addr+0x32>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   17986:	074b      	lsls	r3, r1, #29
   17988:	d50e      	bpl.n	179a8 <bt_id_set_adv_own_addr+0xa0>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   1798a:	4e0b      	ldr	r6, [pc, #44]	; (179b8 <bt_id_set_adv_own_addr+0xb0>)
   1798c:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
   17990:	5df3      	ldrb	r3, [r6, r7]
   17992:	2b01      	cmp	r3, #1
   17994:	d1e2      	bne.n	1795c <bt_id_set_adv_own_addr+0x54>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   17996:	2107      	movs	r1, #7
   17998:	fb11 3104 	smlabb	r1, r1, r4, r3
   1799c:	4431      	add	r1, r6
   1799e:	f00d f9cd 	bl	24d3c <bt_id_set_adv_random_addr>
			*own_addr_type = id_addr->type;
   179a2:	5df3      	ldrb	r3, [r6, r7]
   179a4:	702b      	strb	r3, [r5, #0]
		if (err) {
   179a6:	e7db      	b.n	17960 <bt_id_set_adv_own_addr+0x58>
			err = bt_id_set_adv_private_addr(adv);
   179a8:	f00d f9d0 	bl	24d4c <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   179ac:	2301      	movs	r3, #1
   179ae:	e7f9      	b.n	179a4 <bt_id_set_adv_own_addr+0x9c>
		return -EINVAL;
   179b0:	f06f 0015 	mvn.w	r0, #21
   179b4:	e7d4      	b.n	17960 <bt_id_set_adv_own_addr+0x58>
   179b6:	bf00      	nop
   179b8:	200003a8 	.word	0x200003a8

000179bc <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   179bc:	b530      	push	{r4, r5, lr}
#if defined(CONFIG_BT_PRIVACY)
	bt_addr_copy(&bt_dev.rpa[BT_ID_DEFAULT], BT_ADDR_NONE);
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   179be:	4d13      	ldr	r5, [pc, #76]	; (17a0c <bt_id_init+0x50>)
   179c0:	79eb      	ldrb	r3, [r5, #7]
{
   179c2:	b087      	sub	sp, #28
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   179c4:	b11b      	cbz	r3, 179ce <bt_id_init+0x12>
			LOG_ERR("Unable to set random address");
			return err;
		}
	}

	return 0;
   179c6:	2400      	movs	r4, #0
}
   179c8:	4620      	mov	r0, r4
   179ca:	b007      	add	sp, #28
   179cc:	bd30      	pop	{r4, r5, pc}
		err = bt_setup_public_id_addr();
   179ce:	f7ff ff0b 	bl	177e8 <bt_setup_public_id_addr>
		if (err) {
   179d2:	4604      	mov	r4, r0
   179d4:	b150      	cbz	r0, 179ec <bt_id_init+0x30>
			LOG_ERR("Unable to set identity address");
   179d6:	4b0e      	ldr	r3, [pc, #56]	; (17a10 <bt_id_init+0x54>)
			LOG_ERR("Unable to set random address");
   179d8:	9305      	str	r3, [sp, #20]
   179da:	480e      	ldr	r0, [pc, #56]	; (17a14 <bt_id_init+0x58>)
   179dc:	2302      	movs	r3, #2
   179de:	aa04      	add	r2, sp, #16
   179e0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   179e4:	9304      	str	r3, [sp, #16]
   179e6:	f00d f9a1 	bl	24d2c <z_log_msg_static_create.constprop.0>
			return err;
   179ea:	e7ed      	b.n	179c8 <bt_id_init+0xc>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   179ec:	79eb      	ldrb	r3, [r5, #7]
   179ee:	2b00      	cmp	r3, #0
   179f0:	d1e9      	bne.n	179c6 <bt_id_init+0xa>
		err = bt_setup_random_id_addr();
   179f2:	f7ff ff5b 	bl	178ac <bt_setup_random_id_addr>
		if (err) {
   179f6:	4604      	mov	r4, r0
   179f8:	2800      	cmp	r0, #0
   179fa:	d1ec      	bne.n	179d6 <bt_id_init+0x1a>
		err = set_random_address(&bt_dev.id_addr[0].a);
   179fc:	1c68      	adds	r0, r5, #1
   179fe:	f7ff fdf9 	bl	175f4 <set_random_address>
		if (err) {
   17a02:	4604      	mov	r4, r0
   17a04:	2800      	cmp	r0, #0
   17a06:	d0df      	beq.n	179c8 <bt_id_init+0xc>
			LOG_ERR("Unable to set random address");
   17a08:	4b03      	ldr	r3, [pc, #12]	; (17a18 <bt_id_init+0x5c>)
   17a0a:	e7e5      	b.n	179d8 <bt_id_init+0x1c>
   17a0c:	200003a8 	.word	0x200003a8
   17a10:	000295dc 	.word	0x000295dc
   17a14:	00027014 	.word	0x00027014
   17a18:	000295fb 	.word	0x000295fb

00017a1c <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   17a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a20:	b089      	sub	sp, #36	; 0x24
   17a22:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   17a24:	2120      	movs	r1, #32
{
   17a26:	9000      	str	r0, [sp, #0]
   17a28:	4692      	mov	sl, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   17a2a:	f7fe fd19 	bl	16460 <bt_hci_cmd_create>
	if (!buf) {
   17a2e:	4605      	mov	r5, r0
   17a30:	2800      	cmp	r0, #0
   17a32:	d05b      	beq.n	17aec <hci_set_ad+0xd0>
	return net_buf_simple_add(&buf->b, len);
   17a34:	2120      	movs	r1, #32
   17a36:	300c      	adds	r0, #12
   17a38:	f004 fa26 	bl	1be88 <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
   17a3c:	2220      	movs	r2, #32
   17a3e:	2100      	movs	r1, #0
   17a40:	4681      	mov	r9, r0
   17a42:	f00d f80e 	bl	24a62 <memset>

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   17a46:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   17a4a:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
	uint8_t set_data_len = 0;
   17a4e:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   17a50:	f8d4 8000 	ldr.w	r8, [r4]
   17a54:	2300      	movs	r3, #0
   17a56:	6862      	ldr	r2, [r4, #4]
   17a58:	4293      	cmp	r3, r2
   17a5a:	d30c      	bcc.n	17a76 <hci_set_ad+0x5a>
	for (size_t i = 0; i < ad_len; i++) {
   17a5c:	3408      	adds	r4, #8
   17a5e:	45a2      	cmp	sl, r4
   17a60:	d1f6      	bne.n	17a50 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   17a62:	9800      	ldr	r0, [sp, #0]
	*data_len = set_data_len;
   17a64:	f889 6000 	strb.w	r6, [r9]
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   17a68:	2200      	movs	r2, #0
   17a6a:	4629      	mov	r1, r5
}
   17a6c:	b009      	add	sp, #36	; 0x24
   17a6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   17a72:	f7fe bd43 	b.w	164fc <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   17a76:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   17a7a:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   17a7e:	1cb0      	adds	r0, r6, #2
   17a80:	1811      	adds	r1, r2, r0
   17a82:	291f      	cmp	r1, #31
   17a84:	d91b      	bls.n	17abe <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   17a86:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   17a8a:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
   17a8e:	d101      	bne.n	17a94 <hci_set_ad+0x78>
   17a90:	2a00      	cmp	r2, #0
   17a92:	dc12      	bgt.n	17aba <hci_set_ad+0x9e>
					LOG_ERR("Too big advertising data");
   17a94:	4b17      	ldr	r3, [pc, #92]	; (17af4 <hci_set_ad+0xd8>)
   17a96:	9307      	str	r3, [sp, #28]
   17a98:	2302      	movs	r3, #2
   17a9a:	9306      	str	r3, [sp, #24]
   17a9c:	4816      	ldr	r0, [pc, #88]	; (17af8 <hci_set_ad+0xdc>)
   17a9e:	2300      	movs	r3, #0
   17aa0:	aa06      	add	r2, sp, #24
   17aa2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17aa6:	f7fc fa71 	bl	13f8c <z_impl_z_log_msg_static_create>
		net_buf_unref(buf);
   17aaa:	4628      	mov	r0, r5
   17aac:	f004 f8a8 	bl	1bc00 <net_buf_unref>
					return -EINVAL;
   17ab0:	f06f 0015 	mvn.w	r0, #21
}
   17ab4:	b009      	add	sp, #36	; 0x24
   17ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   17aba:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   17abe:	b2d7      	uxtb	r7, r2
   17ac0:	1c79      	adds	r1, r7, #1
   17ac2:	f80b 1006 	strb.w	r1, [fp, r6]
   17ac6:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
   17ac8:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   17aca:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   17ace:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   17ad2:	f8d8 1004 	ldr.w	r1, [r8, #4]
   17ad6:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   17ad8:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   17ada:	f00c ffb7 	bl	24a4c <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   17ade:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   17ae0:	4437      	add	r7, r6
   17ae2:	b2fe      	uxtb	r6, r7
		for (size_t j = 0; j < ad[i].len; j++) {
   17ae4:	3301      	adds	r3, #1
   17ae6:	f108 0808 	add.w	r8, r8, #8
   17aea:	e7b4      	b.n	17a56 <hci_set_ad+0x3a>
		return -ENOBUFS;
   17aec:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17af0:	e7e0      	b.n	17ab4 <hci_set_ad+0x98>
   17af2:	bf00      	nop
   17af4:	0002961e 	.word	0x0002961e
   17af8:	00026fe4 	.word	0x00026fe4

00017afc <adv_is_directed>:

	return channel_map;
}

static inline bool adv_is_directed(const struct bt_le_ext_adv *adv)
{
   17afc:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   17afe:	4904      	ldr	r1, [pc, #16]	; (17b10 <adv_is_directed+0x14>)
   17b00:	2207      	movs	r2, #7
   17b02:	3009      	adds	r0, #9
   17b04:	f00c ff92 	bl	24a2c <memcmp>
	/* The advertiser is assumed to be directed when the peer address has
	 * been set.
	 */
	return !bt_addr_le_eq(&adv->target_addr, BT_ADDR_LE_ANY);
}
   17b08:	3800      	subs	r0, #0
   17b0a:	bf18      	it	ne
   17b0c:	2001      	movne	r0, #1
   17b0e:	bd08      	pop	{r3, pc}
   17b10:	00028d02 	.word	0x00028d02

00017b14 <le_adv_start_add_conn>:

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   17b14:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   17b16:	4b15      	ldr	r3, [pc, #84]	; (17b6c <le_adv_start_add_conn+0x58>)
   17b18:	7802      	ldrb	r2, [r0, #0]
   17b1a:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
{
   17b1e:	4604      	mov	r4, r0
   17b20:	460d      	mov	r5, r1

	if (!adv_is_directed(adv)) {
   17b22:	f7ff ffeb 	bl	17afc <adv_is_directed>
   17b26:	4603      	mov	r3, r0
   17b28:	7820      	ldrb	r0, [r4, #0]
   17b2a:	b96b      	cbnz	r3, 17b48 <le_adv_start_add_conn+0x34>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   17b2c:	4910      	ldr	r1, [pc, #64]	; (17b70 <le_adv_start_add_conn+0x5c>)
   17b2e:	f001 f8a3 	bl	18c78 <bt_conn_add_le>
		if (!conn) {
   17b32:	4604      	mov	r4, r0
   17b34:	b910      	cbnz	r0, 17b3c <le_adv_start_add_conn+0x28>
			return -ENOMEM;
   17b36:	f06f 000b 	mvn.w	r0, #11
	}

	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
	*out_conn = conn;
	return 0;
}
   17b3a:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_set_state(conn, BT_CONN_CONNECTING_ADV);
   17b3c:	2104      	movs	r1, #4
   17b3e:	f000 fe7f 	bl	18840 <bt_conn_set_state>
		*out_conn = conn;
   17b42:	602c      	str	r4, [r5, #0]
		return 0;
   17b44:	2000      	movs	r0, #0
   17b46:	e7f8      	b.n	17b3a <le_adv_start_add_conn+0x26>
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   17b48:	f104 0609 	add.w	r6, r4, #9
   17b4c:	4631      	mov	r1, r6
   17b4e:	f001 f8c7 	bl	18ce0 <bt_conn_exists_le>
   17b52:	b940      	cbnz	r0, 17b66 <le_adv_start_add_conn+0x52>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   17b54:	7820      	ldrb	r0, [r4, #0]
   17b56:	4631      	mov	r1, r6
   17b58:	f001 f88e 	bl	18c78 <bt_conn_add_le>
	if (!conn) {
   17b5c:	4604      	mov	r4, r0
   17b5e:	2800      	cmp	r0, #0
   17b60:	d0e9      	beq.n	17b36 <le_adv_start_add_conn+0x22>
	bt_conn_set_state(conn, BT_CONN_CONNECTING_DIR_ADV);
   17b62:	2105      	movs	r1, #5
   17b64:	e7eb      	b.n	17b3e <le_adv_start_add_conn+0x2a>
		return -EINVAL;
   17b66:	f06f 0015 	mvn.w	r0, #21
   17b6a:	e7e6      	b.n	17b3a <le_adv_start_add_conn+0x26>
   17b6c:	200003a8 	.word	0x200003a8
   17b70:	00028cfb 	.word	0x00028cfb

00017b74 <valid_adv_param>:
{
   17b74:	b538      	push	{r3, r4, r5, lr}
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   17b76:	6843      	ldr	r3, [r0, #4]
{
   17b78:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   17b7a:	0558      	lsls	r0, r3, #21
   17b7c:	d501      	bpl.n	17b82 <valid_adv_param+0xe>
		return false;
   17b7e:	2000      	movs	r0, #0
}
   17b80:	bd38      	pop	{r3, r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   17b82:	6922      	ldr	r2, [r4, #16]
   17b84:	b10a      	cbz	r2, 17b8a <valid_adv_param+0x16>
   17b86:	07d9      	lsls	r1, r3, #31
   17b88:	d5f9      	bpl.n	17b7e <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   17b8a:	4d19      	ldr	r5, [pc, #100]	; (17bf0 <valid_adv_param+0x7c>)
   17b8c:	7820      	ldrb	r0, [r4, #0]
   17b8e:	79eb      	ldrb	r3, [r5, #7]
   17b90:	4283      	cmp	r3, r0
   17b92:	d9f4      	bls.n	17b7e <valid_adv_param+0xa>
	    bt_addr_le_eq(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   17b94:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   17b98:	4916      	ldr	r1, [pc, #88]	; (17bf4 <valid_adv_param+0x80>)
   17b9a:	2207      	movs	r2, #7
   17b9c:	4428      	add	r0, r5
   17b9e:	f00c ff45 	bl	24a2c <memcmp>
	if (param->id >= bt_dev.id_count ||
   17ba2:	2800      	cmp	r0, #0
   17ba4:	d0eb      	beq.n	17b7e <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   17ba6:	6860      	ldr	r0, [r4, #4]
   17ba8:	07c2      	lsls	r2, r0, #31
   17baa:	d406      	bmi.n	17bba <valid_adv_param+0x46>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   17bac:	f895 3070 	ldrb.w	r3, [r5, #112]	; 0x70
   17bb0:	2b08      	cmp	r3, #8
   17bb2:	d802      	bhi.n	17bba <valid_adv_param+0x46>
   17bb4:	68a3      	ldr	r3, [r4, #8]
   17bb6:	2b9f      	cmp	r3, #159	; 0x9f
   17bb8:	d9e1      	bls.n	17b7e <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   17bba:	f010 0f30 	tst.w	r0, #48	; 0x30
   17bbe:	d002      	beq.n	17bc6 <valid_adv_param+0x52>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   17bc0:	6923      	ldr	r3, [r4, #16]
   17bc2:	2b00      	cmp	r3, #0
   17bc4:	d0db      	beq.n	17b7e <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   17bc6:	06c3      	lsls	r3, r0, #27
   17bc8:	d401      	bmi.n	17bce <valid_adv_param+0x5a>
   17bca:	6923      	ldr	r3, [r4, #16]
   17bcc:	b943      	cbnz	r3, 17be0 <valid_adv_param+0x6c>
		if (param->interval_min > param->interval_max ||
   17bce:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   17bd2:	429a      	cmp	r2, r3
   17bd4:	d8d3      	bhi.n	17b7e <valid_adv_param+0xa>
   17bd6:	2a1f      	cmp	r2, #31
   17bd8:	d9d1      	bls.n	17b7e <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   17bda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   17bde:	d8ce      	bhi.n	17b7e <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   17be0:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   17be4:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   17be8:	bf18      	it	ne
   17bea:	2001      	movne	r0, #1
   17bec:	e7c8      	b.n	17b80 <valid_adv_param+0xc>
   17bee:	bf00      	nop
   17bf0:	200003a8 	.word	0x200003a8
   17bf4:	00028d02 	.word	0x00028d02

00017bf8 <bt_le_adv_lookup_legacy>:
}
   17bf8:	4800      	ldr	r0, [pc, #0]	; (17bfc <bt_le_adv_lookup_legacy+0x4>)
   17bfa:	4770      	bx	lr
   17bfc:	200003c0 	.word	0x200003c0

00017c00 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   17c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c04:	b093      	sub	sp, #76	; 0x4c
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
   17c06:	f8d1 a010 	ldr.w	sl, [r1, #16]
{
   17c0a:	9305      	str	r3, [sp, #20]
	struct bt_conn *conn = NULL;
   17c0c:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
   17c0e:	ebba 0403 	subs.w	r4, sl, r3
{
   17c12:	4607      	mov	r7, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17c14:	4890      	ldr	r0, [pc, #576]	; (17e58 <bt_le_adv_start_legacy+0x258>)
	struct bt_conn *conn = NULL;
   17c16:	9307      	str	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable = false;
   17c18:	bf18      	it	ne
   17c1a:	2401      	movne	r4, #1
   17c1c:	f00d f8c0 	bl	24da0 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17c20:	0746      	lsls	r6, r0, #29
{
   17c22:	460d      	mov	r5, r1
   17c24:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17c26:	f140 810e 	bpl.w	17e46 <bt_le_adv_start_legacy+0x246>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   17c2a:	4608      	mov	r0, r1
   17c2c:	f7ff ffa2 	bl	17b74 <valid_adv_param>
   17c30:	b928      	cbnz	r0, 17c3e <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   17c32:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   17c36:	4620      	mov	r0, r4
   17c38:	b013      	add	sp, #76	; 0x4c
   17c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   17c3e:	4628      	mov	r0, r5
   17c40:	f00d f89b 	bl	24d7a <bt_id_adv_random_addr_check>
   17c44:	4681      	mov	r9, r0
   17c46:	2800      	cmp	r0, #0
   17c48:	d0f3      	beq.n	17c32 <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   17c4a:	f107 0810 	add.w	r8, r7, #16
   17c4e:	4640      	mov	r0, r8
   17c50:	f00d f8a6 	bl	24da0 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   17c54:	f3c0 16c0 	ubfx	r6, r0, #7, #1
   17c58:	0600      	lsls	r0, r0, #24
   17c5a:	f100 80f7 	bmi.w	17e4c <bt_le_adv_start_legacy+0x24c>
	(void)memset(&set_param, 0, sizeof(set_param));
   17c5e:	220f      	movs	r2, #15
   17c60:	4631      	mov	r1, r6
   17c62:	a808      	add	r0, sp, #32
   17c64:	f00c fefd 	bl	24a62 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   17c68:	68ab      	ldr	r3, [r5, #8]
	set_param.channel_map  = get_adv_channel_map(param->options);
   17c6a:	6868      	ldr	r0, [r5, #4]
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   17c6c:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   17c70:	68eb      	ldr	r3, [r5, #12]
   17c72:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
   17c76:	f00d f884 	bl	24d82 <get_adv_channel_map>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17c7a:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   17c7e:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
   17c82:	4875      	ldr	r0, [pc, #468]	; (17e58 <bt_le_adv_start_legacy+0x258>)
	set_param.filter_policy = get_filter_policy(param->options);
   17c84:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
   17c88:	f00d f890 	bl	24dac <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   17c8c:	4a73      	ldr	r2, [pc, #460]	; (17e5c <bt_le_adv_start_legacy+0x25c>)
	adv->id = param->id;
   17c8e:	782b      	ldrb	r3, [r5, #0]
   17c90:	703b      	strb	r3, [r7, #0]
	bt_dev.adv_conn_id = adv->id;
   17c92:	f882 306f 	strb.w	r3, [r2, #111]	; 0x6f
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   17c96:	6869      	ldr	r1, [r5, #4]
   17c98:	4622      	mov	r2, r4
   17c9a:	f10d 0325 	add.w	r3, sp, #37	; 0x25
   17c9e:	4638      	mov	r0, r7
   17ca0:	f7ff fe32 	bl	17908 <bt_id_set_adv_own_addr>
	if (err) {
   17ca4:	4604      	mov	r4, r0
   17ca6:	2800      	cmp	r0, #0
   17ca8:	d1c5      	bne.n	17c36 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   17caa:	f107 0009 	add.w	r0, r7, #9
	memcpy(dst, src, sizeof(*dst));
   17cae:	2207      	movs	r2, #7
	if (dir_adv) {
   17cb0:	f1ba 0f00 	cmp.w	sl, #0
   17cb4:	d013      	beq.n	17cde <bt_le_adv_start_legacy+0xde>
   17cb6:	6929      	ldr	r1, [r5, #16]
   17cb8:	f00c fec8 	bl	24a4c <memcpy>
	name_type = get_adv_name_type_param(param);
   17cbc:	4628      	mov	r0, r5
   17cbe:	f00d f914 	bl	24eea <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   17cc2:	686b      	ldr	r3, [r5, #4]
   17cc4:	07d9      	lsls	r1, r3, #31
	name_type = get_adv_name_type_param(param);
   17cc6:	4606      	mov	r6, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   17cc8:	d416      	bmi.n	17cf8 <bt_le_adv_start_legacy+0xf8>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
   17cca:	059b      	lsls	r3, r3, #22
   17ccc:	d403      	bmi.n	17cd6 <bt_le_adv_start_legacy+0xd6>
   17cce:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   17cd0:	b90b      	cbnz	r3, 17cd6 <bt_le_adv_start_legacy+0xd6>
   17cd2:	2e02      	cmp	r6, #2
   17cd4:	d15a      	bne.n	17d8c <bt_le_adv_start_legacy+0x18c>
		set_param.type = BT_HCI_ADV_SCAN_IND;
   17cd6:	2302      	movs	r3, #2
   17cd8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   17cdc:	e01a      	b.n	17d14 <bt_le_adv_start_legacy+0x114>
   17cde:	4960      	ldr	r1, [pc, #384]	; (17e60 <bt_le_adv_start_legacy+0x260>)
   17ce0:	f00c feb4 	bl	24a4c <memcpy>
	name_type = get_adv_name_type_param(param);
   17ce4:	4628      	mov	r0, r5
   17ce6:	f00d f900 	bl	24eea <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   17cea:	686b      	ldr	r3, [r5, #4]
   17cec:	07da      	lsls	r2, r3, #31
	name_type = get_adv_name_type_param(param);
   17cee:	4606      	mov	r6, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   17cf0:	d5eb      	bpl.n	17cca <bt_le_adv_start_legacy+0xca>
			set_param.type = BT_HCI_ADV_IND;
   17cf2:	f88d a024 	strb.w	sl, [sp, #36]	; 0x24
   17cf6:	e00d      	b.n	17d14 <bt_le_adv_start_legacy+0x114>
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
   17cf8:	f013 0f10 	tst.w	r3, #16
   17cfc:	bf0c      	ite	eq
   17cfe:	2301      	moveq	r3, #1
   17d00:	2304      	movne	r3, #4
   17d02:	6929      	ldr	r1, [r5, #16]
   17d04:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   17d08:	2207      	movs	r2, #7
   17d0a:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   17d0e:	f00c fe9d 	bl	24a4c <memcpy>
	bool dir_adv = (param->peer != NULL), scannable = false;
   17d12:	46a1      	mov	r9, r4
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   17d14:	210f      	movs	r1, #15
   17d16:	f242 0006 	movw	r0, #8198	; 0x2006
   17d1a:	f7fe fba1 	bl	16460 <bt_hci_cmd_create>
	if (!buf) {
   17d1e:	4604      	mov	r4, r0
   17d20:	2800      	cmp	r0, #0
   17d22:	f000 8096 	beq.w	17e52 <bt_le_adv_start_legacy+0x252>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   17d26:	220f      	movs	r2, #15
   17d28:	a908      	add	r1, sp, #32
   17d2a:	300c      	adds	r0, #12
   17d2c:	f00e f8b7 	bl	25e9e <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   17d30:	4621      	mov	r1, r4
   17d32:	2200      	movs	r2, #0
   17d34:	f242 0006 	movw	r0, #8198	; 0x2006
   17d38:	f7fe fbe0 	bl	164fc <bt_hci_cmd_send_sync>
	if (err) {
   17d3c:	4604      	mov	r4, r0
   17d3e:	2800      	cmp	r0, #0
   17d40:	f47f af79 	bne.w	17c36 <bt_le_adv_start_legacy+0x36>
	if (!dir_adv) {
   17d44:	f1ba 0f00 	cmp.w	sl, #0
   17d48:	d026      	beq.n	17d98 <bt_le_adv_start_legacy+0x198>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   17d4a:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   17d4c:	07dc      	lsls	r4, r3, #31
   17d4e:	d431      	bmi.n	17db4 <bt_le_adv_start_legacy+0x1b4>
	return bt_le_adv_set_enable_legacy(adv, enable);
   17d50:	2101      	movs	r1, #1
   17d52:	4638      	mov	r0, r7
   17d54:	f00d f8d9 	bl	24f0a <bt_le_adv_set_enable_legacy>
	if (err) {
   17d58:	4604      	mov	r4, r0
   17d5a:	2800      	cmp	r0, #0
   17d5c:	d06b      	beq.n	17e36 <bt_le_adv_start_legacy+0x236>
		LOG_ERR("Failed to start advertiser");
   17d5e:	4b41      	ldr	r3, [pc, #260]	; (17e64 <bt_le_adv_start_legacy+0x264>)
   17d60:	9311      	str	r3, [sp, #68]	; 0x44
   17d62:	2302      	movs	r3, #2
   17d64:	9310      	str	r3, [sp, #64]	; 0x40
   17d66:	4840      	ldr	r0, [pc, #256]	; (17e68 <bt_le_adv_start_legacy+0x268>)
   17d68:	2300      	movs	r3, #0
   17d6a:	aa10      	add	r2, sp, #64	; 0x40
   17d6c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   17d70:	f7fc f90c 	bl	13f8c <z_impl_z_log_msg_static_create>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   17d74:	9d07      	ldr	r5, [sp, #28]
   17d76:	2d00      	cmp	r5, #0
   17d78:	f43f af5d 	beq.w	17c36 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17d7c:	4628      	mov	r0, r5
   17d7e:	2100      	movs	r1, #0
   17d80:	f000 fd5e 	bl	18840 <bt_conn_set_state>
			bt_conn_unref(conn);
   17d84:	4628      	mov	r0, r5
   17d86:	f000 fd1b 	bl	187c0 <bt_conn_unref>
   17d8a:	e754      	b.n	17c36 <bt_le_adv_start_legacy+0x36>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   17d8c:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
   17d8e:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
		set_param.type = BT_HCI_ADV_NONCONN_IND;
   17d92:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   17d96:	e7bd      	b.n	17d14 <bt_le_adv_start_legacy+0x114>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   17d98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   17d9a:	9300      	str	r3, [sp, #0]
   17d9c:	e9cd 9601 	strd	r9, r6, [sp, #4]
   17da0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   17da2:	9a05      	ldr	r2, [sp, #20]
   17da4:	4659      	mov	r1, fp
   17da6:	4638      	mov	r0, r7
   17da8:	f00d f828 	bl	24dfc <le_adv_update.constprop.0>
		if (err) {
   17dac:	4604      	mov	r4, r0
   17dae:	2800      	cmp	r0, #0
   17db0:	d0cb      	beq.n	17d4a <bt_le_adv_start_legacy+0x14a>
   17db2:	e740      	b.n	17c36 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   17db4:	a907      	add	r1, sp, #28
   17db6:	4638      	mov	r0, r7
   17db8:	f7ff feac 	bl	17b14 <le_adv_start_add_conn>
		if (err) {
   17dbc:	4604      	mov	r4, r0
   17dbe:	2800      	cmp	r0, #0
   17dc0:	d0c6      	beq.n	17d50 <bt_le_adv_start_legacy+0x150>
			if (err == -ENOMEM && !dir_adv &&
   17dc2:	f110 0f0c 	cmn.w	r0, #12
   17dc6:	f47f af36 	bne.w	17c36 <bt_le_adv_start_legacy+0x36>
   17dca:	f1ba 0f00 	cmp.w	sl, #0
   17dce:	f47f af32 	bne.w	17c36 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   17dd2:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
   17dd4:	0798      	lsls	r0, r3, #30
   17dd6:	f53f af2e 	bmi.w	17c36 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   17dda:	686c      	ldr	r4, [r5, #4]
   17ddc:	f084 0402 	eor.w	r4, r4, #2
   17de0:	f3c4 0440 	ubfx	r4, r4, #1, #1
   17de4:	f004 0201 	and.w	r2, r4, #1
   17de8:	210e      	movs	r1, #14
   17dea:	4640      	mov	r0, r8
   17dec:	f00c ffed 	bl	24dca <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
   17df0:	1e73      	subs	r3, r6, #1
   17df2:	425a      	negs	r2, r3
   17df4:	415a      	adcs	r2, r3
   17df6:	2108      	movs	r1, #8
   17df8:	4640      	mov	r0, r8
   17dfa:	f00c ffe6 	bl	24dca <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
   17dfe:	1eb1      	subs	r1, r6, #2
   17e00:	424a      	negs	r2, r1
   17e02:	414a      	adcs	r2, r1
   17e04:	4640      	mov	r0, r8
   17e06:	2109      	movs	r1, #9
   17e08:	f00c ffdf 	bl	24dca <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   17e0c:	686a      	ldr	r2, [r5, #4]
   17e0e:	210a      	movs	r1, #10
   17e10:	f002 0201 	and.w	r2, r2, #1
   17e14:	4640      	mov	r0, r8
   17e16:	f00c ffd8 	bl	24dca <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   17e1a:	464a      	mov	r2, r9
   17e1c:	210b      	movs	r1, #11
   17e1e:	4640      	mov	r0, r8
   17e20:	f00c ffd3 	bl	24dca <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   17e24:	686a      	ldr	r2, [r5, #4]
   17e26:	210d      	movs	r1, #13
   17e28:	f3c2 0280 	ubfx	r2, r2, #2, #1
   17e2c:	4640      	mov	r0, r8
   17e2e:	f00c ffcc 	bl	24dca <atomic_set_bit_to>
	return 0;
   17e32:	2400      	movs	r4, #0
   17e34:	e6ff      	b.n	17c36 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   17e36:	9807      	ldr	r0, [sp, #28]
   17e38:	b108      	cbz	r0, 17e3e <bt_le_adv_start_legacy+0x23e>
		bt_conn_unref(conn);
   17e3a:	f000 fcc1 	bl	187c0 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   17e3e:	f1ba 0f00 	cmp.w	sl, #0
   17e42:	d1cf      	bne.n	17de4 <bt_le_adv_start_legacy+0x1e4>
   17e44:	e7c9      	b.n	17dda <bt_le_adv_start_legacy+0x1da>
		return -EAGAIN;
   17e46:	f06f 040a 	mvn.w	r4, #10
   17e4a:	e6f4      	b.n	17c36 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   17e4c:	f06f 0477 	mvn.w	r4, #119	; 0x77
   17e50:	e6f1      	b.n	17c36 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   17e52:	f06f 0468 	mvn.w	r4, #104	; 0x68
   17e56:	e6ee      	b.n	17c36 <bt_le_adv_start_legacy+0x36>
   17e58:	2000047c 	.word	0x2000047c
   17e5c:	200003a8 	.word	0x200003a8
   17e60:	00028d02 	.word	0x00028d02
   17e64:	00029637 	.word	0x00029637
   17e68:	00026fe4 	.word	0x00026fe4

00017e6c <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   17e6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   17e6e:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   17e70:	9a06      	ldr	r2, [sp, #24]
{
   17e72:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   17e74:	e9cd 3200 	strd	r3, r2, [sp]
   17e78:	462b      	mov	r3, r5
   17e7a:	460a      	mov	r2, r1
   17e7c:	4601      	mov	r1, r0
   17e7e:	4811      	ldr	r0, [pc, #68]	; (17ec4 <bt_le_adv_start+0x58>)
   17e80:	f7ff febe 	bl	17c00 <bt_le_adv_start_legacy>
   17e84:	4621      	mov	r1, r4
   17e86:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
   17e88:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
   17e8a:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
   17e8e:	429d      	cmp	r5, r3
   17e90:	d102      	bne.n	17e98 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
   17e92:	4630      	mov	r0, r6
   17e94:	b002      	add	sp, #8
   17e96:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
   17e98:	880a      	ldrh	r2, [r1, #0]
   17e9a:	4282      	cmp	r2, r0
   17e9c:	d104      	bne.n	17ea8 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
   17e9e:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
   17ea0:	b112      	cbz	r2, 17ea8 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
   17ea2:	7812      	ldrb	r2, [r2, #0]
   17ea4:	07d2      	lsls	r2, r2, #31
   17ea6:	d402      	bmi.n	17eae <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
   17ea8:	3301      	adds	r3, #1
   17eaa:	3108      	adds	r1, #8
   17eac:	e7ef      	b.n	17e8e <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
   17eae:	4906      	ldr	r1, [pc, #24]	; (17ec8 <bt_le_adv_start+0x5c>)
   17eb0:	4806      	ldr	r0, [pc, #24]	; (17ecc <bt_le_adv_start+0x60>)
   17eb2:	f009 f8a9 	bl	21008 <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
   17eb6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   17eba:	2300      	movs	r3, #0
   17ebc:	4803      	ldr	r0, [pc, #12]	; (17ecc <bt_le_adv_start+0x60>)
   17ebe:	f009 f9bf 	bl	21240 <k_work_reschedule>
   17ec2:	e7e6      	b.n	17e92 <bt_le_adv_start+0x26>
   17ec4:	200003c0 	.word	0x200003c0
   17ec8:	00017f49 	.word	0x00017f49
   17ecc:	200003d8 	.word	0x200003d8

00017ed0 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
   17ed0:	b510      	push	{r4, lr}
	if (!adv) {
		LOG_ERR("No valid legacy adv");
		return 0;
	}

	(void)bt_le_lim_adv_cancel_timeout(adv);
   17ed2:	4819      	ldr	r0, [pc, #100]	; (17f38 <bt_le_adv_stop+0x68>)
   17ed4:	f00d f83e 	bl	24f54 <bt_le_lim_adv_cancel_timeout>
   17ed8:	4818      	ldr	r0, [pc, #96]	; (17f3c <bt_le_adv_stop+0x6c>)
   17eda:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   17ede:	f00c ff65 	bl	24dac <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17ee2:	4816      	ldr	r0, [pc, #88]	; (17f3c <bt_le_adv_stop+0x6c>)
   17ee4:	f00c ff5c 	bl	24da0 <atomic_get>
   17ee8:	4603      	mov	r3, r0
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   17eea:	061a      	lsls	r2, r3, #24
   17eec:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   17ef0:	d521      	bpl.n	17f36 <bt_le_adv_stop+0x66>
   17ef2:	4812      	ldr	r0, [pc, #72]	; (17f3c <bt_le_adv_stop+0x6c>)
   17ef4:	f00c ff54 	bl	24da0 <atomic_get>
		 */
		bt_le_adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   17ef8:	0543      	lsls	r3, r0, #21
   17efa:	d512      	bpl.n	17f22 <bt_le_adv_stop+0x52>
	if (!adv_is_directed(adv)) {
   17efc:	480e      	ldr	r0, [pc, #56]	; (17f38 <bt_le_adv_stop+0x68>)
   17efe:	f7ff fdfd 	bl	17afc <adv_is_directed>
   17f02:	4b0f      	ldr	r3, [pc, #60]	; (17f40 <bt_le_adv_stop+0x70>)
   17f04:	b998      	cbnz	r0, 17f2e <bt_le_adv_stop+0x5e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
   17f06:	490f      	ldr	r1, [pc, #60]	; (17f44 <bt_le_adv_stop+0x74>)
   17f08:	2204      	movs	r2, #4
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   17f0a:	7e18      	ldrb	r0, [r3, #24]
   17f0c:	f000 ff18 	bl	18d40 <bt_conn_lookup_state_le>
   17f10:	4604      	mov	r4, r0
	if (conn) {
   17f12:	b130      	cbz	r0, 17f22 <bt_le_adv_stop+0x52>
		conn->err = status;
   17f14:	2100      	movs	r1, #0
   17f16:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   17f18:	f000 fc92 	bl	18840 <bt_conn_set_state>
		bt_conn_unref(conn);
   17f1c:	4620      	mov	r0, r4
   17f1e:	f000 fc4f 	bl	187c0 <bt_conn_unref>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
   17f22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = bt_le_adv_set_enable_legacy(adv, false);
   17f26:	4804      	ldr	r0, [pc, #16]	; (17f38 <bt_le_adv_stop+0x68>)
   17f28:	2100      	movs	r1, #0
   17f2a:	f00c bfee 	b.w	24f0a <bt_le_adv_set_enable_legacy>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
   17f2e:	2205      	movs	r2, #5
   17f30:	f103 0121 	add.w	r1, r3, #33	; 0x21
   17f34:	e7e9      	b.n	17f0a <bt_le_adv_stop+0x3a>
}
   17f36:	bd10      	pop	{r4, pc}
   17f38:	200003c0 	.word	0x200003c0
   17f3c:	200003d0 	.word	0x200003d0
   17f40:	200003a8 	.word	0x200003a8
   17f44:	00028cfb 	.word	0x00028cfb

00017f48 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
   17f48:	b598      	push	{r3, r4, r7, lr}
   17f4a:	af00      	add	r7, sp, #0
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
   17f4c:	f7ff ffc0 	bl	17ed0 <bt_le_adv_stop>
#endif
	if (err) {
   17f50:	b178      	cbz	r0, 17f72 <adv_timeout+0x2a>
		LOG_WRN("Failed to stop advertising: %d", err);
   17f52:	466c      	mov	r4, sp
   17f54:	b088      	sub	sp, #32
   17f56:	466a      	mov	r2, sp
   17f58:	4b07      	ldr	r3, [pc, #28]	; (17f78 <adv_timeout+0x30>)
   17f5a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   17f5e:	2303      	movs	r3, #3
   17f60:	f842 3f10 	str.w	r3, [r2, #16]!
   17f64:	4805      	ldr	r0, [pc, #20]	; (17f7c <adv_timeout+0x34>)
   17f66:	2300      	movs	r3, #0
   17f68:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   17f6c:	f7fc f80e 	bl	13f8c <z_impl_z_log_msg_static_create>
   17f70:	46a5      	mov	sp, r4
	}
}
   17f72:	46bd      	mov	sp, r7
   17f74:	bd98      	pop	{r3, r4, r7, pc}
   17f76:	bf00      	nop
   17f78:	00029652 	.word	0x00029652
   17f7c:	00026fe4 	.word	0x00026fe4

00017f80 <bt_le_adv_resume>:
{
   17f80:	b5f0      	push	{r4, r5, r6, r7, lr}
   17f82:	b083      	sub	sp, #12
   17f84:	4839      	ldr	r0, [pc, #228]	; (1806c <bt_le_adv_resume+0xec>)
   17f86:	4c39      	ldr	r4, [pc, #228]	; (1806c <bt_le_adv_resume+0xec>)
   17f88:	af00      	add	r7, sp, #0
   17f8a:	f00c ff09 	bl	24da0 <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   17f8e:	f410 4f80 	tst.w	r0, #16384	; 0x4000
   17f92:	d041      	beq.n	18018 <bt_le_adv_resume+0x98>
   17f94:	4620      	mov	r0, r4
   17f96:	f00c ff03 	bl	24da0 <atomic_get>
   17f9a:	0603      	lsls	r3, r0, #24
   17f9c:	d43c      	bmi.n	18018 <bt_le_adv_resume+0x98>
   17f9e:	4620      	mov	r0, r4
   17fa0:	f00c fefe 	bl	24da0 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   17fa4:	0546      	lsls	r6, r0, #21
   17fa6:	d537      	bpl.n	18018 <bt_le_adv_resume+0x98>
	err = le_adv_start_add_conn(adv, &conn);
   17fa8:	1d39      	adds	r1, r7, #4
   17faa:	f1a4 0010 	sub.w	r0, r4, #16
   17fae:	f7ff fdb1 	bl	17b14 <le_adv_start_add_conn>
	if (err) {
   17fb2:	bb88      	cbnz	r0, 18018 <bt_le_adv_resume+0x98>
		bool dir_adv = adv_is_directed(adv);
   17fb4:	f1a4 0010 	sub.w	r0, r4, #16
   17fb8:	f7ff fda0 	bl	17afc <adv_is_directed>
   17fbc:	4602      	mov	r2, r0
   17fbe:	4620      	mov	r0, r4
   17fc0:	f00c feee 	bl	24da0 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   17fc4:	f3c0 3180 	ubfx	r1, r0, #14, #1
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   17fc8:	4620      	mov	r0, r4
   17fca:	f00c fee9 	bl	24da0 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST)) {
   17fce:	f081 0101 	eor.w	r1, r1, #1
	if (atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   17fd2:	0545      	lsls	r5, r0, #21
	if (!atomic_test_bit(adv->flags, BT_ADV_PERSIST)) {
   17fd4:	ea4f 0141 	mov.w	r1, r1, lsl #1
   17fd8:	4824      	ldr	r0, [pc, #144]	; (1806c <bt_le_adv_resume+0xec>)
		options |= BT_LE_ADV_OPT_CONNECTABLE;
   17fda:	bf48      	it	mi
   17fdc:	f041 0101 	orrmi.w	r1, r1, #1
   17fe0:	f00c fede 	bl	24da0 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
   17fe4:	0480      	lsls	r0, r0, #18
		options |= BT_LE_ADV_OPT_USE_IDENTITY;
   17fe6:	bf48      	it	mi
   17fe8:	f041 0104 	orrmi.w	r1, r1, #4
		err = bt_id_set_adv_own_addr(adv, options, dir_adv, &own_addr_type);
   17fec:	4820      	ldr	r0, [pc, #128]	; (18070 <bt_le_adv_resume+0xf0>)
   17fee:	1cfb      	adds	r3, r7, #3
   17ff0:	f7ff fc8a 	bl	17908 <bt_id_set_adv_own_addr>
		if (err) {
   17ff4:	4605      	mov	r5, r0
   17ff6:	b190      	cbz	r0, 1801e <bt_le_adv_resume+0x9e>
			LOG_ERR("Controller cannot resume connectable advertising (%d)", err);
   17ff8:	466c      	mov	r4, sp
   17ffa:	b088      	sub	sp, #32
   17ffc:	466a      	mov	r2, sp
   17ffe:	4b1d      	ldr	r3, [pc, #116]	; (18074 <bt_le_adv_resume+0xf4>)
   18000:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18004:	2303      	movs	r3, #3
   18006:	f842 3f10 	str.w	r3, [r2, #16]!
   1800a:	481b      	ldr	r0, [pc, #108]	; (18078 <bt_le_adv_resume+0xf8>)
   1800c:	2300      	movs	r3, #0
   1800e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18012:	f7fb ffbb 	bl	13f8c <z_impl_z_log_msg_static_create>
   18016:	46a5      	mov	sp, r4
}
   18018:	370c      	adds	r7, #12
   1801a:	46bd      	mov	sp, r7
   1801c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_le_adv_set_enable_legacy(adv, enable);
   1801e:	4814      	ldr	r0, [pc, #80]	; (18070 <bt_le_adv_resume+0xf0>)
   18020:	2101      	movs	r1, #1
   18022:	f00c ff72 	bl	24f0a <bt_le_adv_set_enable_legacy>
	bt_conn_unref(conn);
   18026:	687e      	ldr	r6, [r7, #4]
	if (err) {
   18028:	b918      	cbnz	r0, 18032 <bt_le_adv_resume+0xb2>
	bt_conn_unref(conn);
   1802a:	4630      	mov	r0, r6
   1802c:	f000 fbc8 	bl	187c0 <bt_conn_unref>
	if (persist_paused) {
   18030:	e7f2      	b.n	18018 <bt_le_adv_resume+0x98>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   18032:	4629      	mov	r1, r5
   18034:	4630      	mov	r0, r6
   18036:	f000 fc03 	bl	18840 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1803a:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
   1803e:	480b      	ldr	r0, [pc, #44]	; (1806c <bt_le_adv_resume+0xec>)
   18040:	f00c feb4 	bl	24dac <atomic_and>
   18044:	4605      	mov	r5, r0
	bt_conn_unref(conn);
   18046:	4630      	mov	r0, r6
   18048:	f000 fbba 	bl	187c0 <bt_conn_unref>
	if (persist_paused) {
   1804c:	046b      	lsls	r3, r5, #17
   1804e:	d5e3      	bpl.n	18018 <bt_le_adv_resume+0x98>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18050:	f3bf 8f5b 	dmb	ish
   18054:	e854 3f00 	ldrex	r3, [r4]
   18058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1805c:	e844 3200 	strex	r2, r3, [r4]
   18060:	2a00      	cmp	r2, #0
   18062:	d1f7      	bne.n	18054 <bt_le_adv_resume+0xd4>
   18064:	f3bf 8f5b 	dmb	ish
   18068:	e7d6      	b.n	18018 <bt_le_adv_resume+0x98>
   1806a:	bf00      	nop
   1806c:	200003d0 	.word	0x200003d0
   18070:	200003c0 	.word	0x200003c0
   18074:	00029671 	.word	0x00029671
   18078:	00026fe4 	.word	0x00026fe4

0001807c <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   1807c:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1807e:	4b13      	ldr	r3, [pc, #76]	; (180cc <notify_connected+0x50>)
   18080:	681d      	ldr	r5, [r3, #0]
{
   18082:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   18084:	b995      	cbnz	r5, 180ac <notify_connected+0x30>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18086:	4d12      	ldr	r5, [pc, #72]	; (180d0 <notify_connected+0x54>)
   18088:	4e12      	ldr	r6, [pc, #72]	; (180d4 <notify_connected+0x58>)
   1808a:	42b5      	cmp	r5, r6
   1808c:	d91c      	bls.n	180c8 <notify_connected+0x4c>
   1808e:	4912      	ldr	r1, [pc, #72]	; (180d8 <notify_connected+0x5c>)
   18090:	4a12      	ldr	r2, [pc, #72]	; (180dc <notify_connected+0x60>)
   18092:	4813      	ldr	r0, [pc, #76]	; (180e0 <notify_connected+0x64>)
   18094:	f240 53f2 	movw	r3, #1522	; 0x5f2
   18098:	f00c f8d4 	bl	24244 <assert_print>
   1809c:	4811      	ldr	r0, [pc, #68]	; (180e4 <notify_connected+0x68>)
   1809e:	f00c f8d1 	bl	24244 <assert_print>
   180a2:	480e      	ldr	r0, [pc, #56]	; (180dc <notify_connected+0x60>)
   180a4:	f240 51f2 	movw	r1, #1522	; 0x5f2
   180a8:	f00c f8c5 	bl	24236 <assert_post_action>
		if (cb->connected) {
   180ac:	682b      	ldr	r3, [r5, #0]
   180ae:	b113      	cbz	r3, 180b6 <notify_connected+0x3a>
			cb->connected(conn, conn->err);
   180b0:	7a61      	ldrb	r1, [r4, #9]
   180b2:	4620      	mov	r0, r4
   180b4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   180b6:	692d      	ldr	r5, [r5, #16]
   180b8:	e7e4      	b.n	18084 <notify_connected+0x8>
		if (cb->connected) {
   180ba:	682b      	ldr	r3, [r5, #0]
   180bc:	b113      	cbz	r3, 180c4 <notify_connected+0x48>
			cb->connected(conn, conn->err);
   180be:	7a61      	ldrb	r1, [r4, #9]
   180c0:	4620      	mov	r0, r4
   180c2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   180c4:	3514      	adds	r5, #20
   180c6:	e7e0      	b.n	1808a <notify_connected+0xe>
   180c8:	d3f7      	bcc.n	180ba <notify_connected+0x3e>
		}
	}
}
   180ca:	bd70      	pop	{r4, r5, r6, pc}
   180cc:	20002cb8 	.word	0x20002cb8
   180d0:	00026f98 	.word	0x00026f98
   180d4:	00026fac 	.word	0x00026fac
   180d8:	000296de 	.word	0x000296de
   180dc:	000296ae 	.word	0x000296ae
   180e0:	00027c2a 	.word	0x00027c2a
   180e4:	00028176 	.word	0x00028176

000180e8 <tx_notify>:
{
   180e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
   180ec:	4f15      	ldr	r7, [pc, #84]	; (18144 <tx_notify+0x5c>)
{
   180ee:	4604      	mov	r4, r0
	tx->cb = NULL;
   180f0:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
   180f4:	f04f 0240 	mov.w	r2, #64	; 0x40
   180f8:	f3ef 8311 	mrs	r3, BASEPRI
   180fc:	f382 8812 	msr	BASEPRI_MAX, r2
   18100:	f3bf 8f6f 	isb	sy
	return list->head;
   18104:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   18106:	b929      	cbnz	r1, 18114 <tx_notify+0x2c>
	__asm__ volatile(
   18108:	f383 8811 	msr	BASEPRI, r3
   1810c:	f3bf 8f6f 	isb	sy
}
   18110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   18114:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   18116:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   18118:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1811a:	4281      	cmp	r1, r0
	list->tail = node;
   1811c:	bf08      	it	eq
   1811e:	6262      	streq	r2, [r4, #36]	; 0x24
   18120:	f383 8811 	msr	BASEPRI, r3
   18124:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   18128:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   1812c:	f8c1 800c 	str.w	r8, [r1, #12]
	tx->user_data = NULL;
   18130:	e9c1 8801 	strd	r8, r8, [r1, #4]
	k_fifo_put(&free_tx, tx);
   18134:	4638      	mov	r0, r7
   18136:	f00e fc1f 	bl	26978 <k_queue_append>
		cb(conn, user_data, 0);
   1813a:	2200      	movs	r2, #0
   1813c:	4631      	mov	r1, r6
   1813e:	4620      	mov	r0, r4
   18140:	47a8      	blx	r5
	while (1) {
   18142:	e7d7      	b.n	180f4 <tx_notify+0xc>
   18144:	200009b0 	.word	0x200009b0

00018148 <conn_tx_destroy>:
{
   18148:	b570      	push	{r4, r5, r6, lr}
   1814a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(tx);
   1814c:	b949      	cbnz	r1, 18162 <conn_tx_destroy+0x1a>
   1814e:	490d      	ldr	r1, [pc, #52]	; (18184 <conn_tx_destroy+0x3c>)
   18150:	480d      	ldr	r0, [pc, #52]	; (18188 <conn_tx_destroy+0x40>)
   18152:	4a0e      	ldr	r2, [pc, #56]	; (1818c <conn_tx_destroy+0x44>)
   18154:	2346      	movs	r3, #70	; 0x46
   18156:	f00c f875 	bl	24244 <assert_print>
   1815a:	480c      	ldr	r0, [pc, #48]	; (1818c <conn_tx_destroy+0x44>)
   1815c:	2146      	movs	r1, #70	; 0x46
   1815e:	f00c f86a 	bl	24236 <assert_post_action>
	void *user_data = tx->user_data;
   18162:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->cb = NULL;
   18166:	2200      	movs	r2, #0
	tx->user_data = NULL;
   18168:	e9c1 2201 	strd	r2, r2, [r1, #4]
	tx->pending_no_cb = 0U;
   1816c:	60ca      	str	r2, [r1, #12]
	k_fifo_put(&free_tx, tx);
   1816e:	4808      	ldr	r0, [pc, #32]	; (18190 <conn_tx_destroy+0x48>)
   18170:	f00e fc02 	bl	26978 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   18174:	4631      	mov	r1, r6
   18176:	4620      	mov	r0, r4
   18178:	462b      	mov	r3, r5
   1817a:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
   1817e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   18182:	4718      	bx	r3
   18184:	000296f9 	.word	0x000296f9
   18188:	00027c2a 	.word	0x00027c2a
   1818c:	000296ae 	.word	0x000296ae
   18190:	200009b0 	.word	0x200009b0

00018194 <send_frag>:
{
   18194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (bt_dev.le.acl_mtu) {
   18198:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 18378 <send_frag+0x1e4>
{
   1819c:	b083      	sub	sp, #12
   1819e:	4698      	mov	r8, r3
	if (bt_dev.le.acl_mtu) {
   181a0:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
	return NULL;
   181a4:	2b00      	cmp	r3, #0
{
   181a6:	af00      	add	r7, sp, #0
   181a8:	4604      	mov	r4, r0
   181aa:	460d      	mov	r5, r1
	return NULL;
   181ac:	f509 7084 	add.w	r0, r9, #264	; 0x108
{
   181b0:	4616      	mov	r6, r2
	return NULL;
   181b2:	bf08      	it	eq
   181b4:	2000      	moveq	r0, #0
	return z_impl_k_sem_take(sem, timeout);
   181b6:	2200      	movs	r2, #0
   181b8:	2300      	movs	r3, #0
   181ba:	f008 fb73 	bl	208a4 <z_impl_k_sem_take>
	if (k_sem_take(bt_conn_get_pkts(conn), K_NO_WAIT)) {
   181be:	2800      	cmp	r0, #0
   181c0:	f040 80ca 	bne.w	18358 <send_frag+0x1c4>
	if (frag) {
   181c4:	2e00      	cmp	r6, #0
   181c6:	f000 8090 	beq.w	182ea <send_frag+0x156>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   181ca:	f106 0b0c 	add.w	fp, r6, #12
		uint16_t frag_len = MIN(conn_mtu(conn) + iso_hdr,
   181ce:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
   181d2:	607b      	str	r3, [r7, #4]
   181d4:	4658      	mov	r0, fp
   181d6:	f00d fe5a 	bl	25e8e <net_buf_simple_tailroom>
   181da:	687b      	ldr	r3, [r7, #4]
   181dc:	4298      	cmp	r0, r3
   181de:	d97f      	bls.n	182e0 <send_frag+0x14c>
	return bt_dev.le.acl_mtu;
   181e0:	f8b9 2104 	ldrh.w	r2, [r9, #260]	; 0x104
	return net_buf_simple_add_mem(&buf->b, mem, len);
   181e4:	f855 1f0c 	ldr.w	r1, [r5, #12]!
   181e8:	607a      	str	r2, [r7, #4]
   181ea:	4658      	mov	r0, fp
   181ec:	f00d fe57 	bl	25e9e <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   181f0:	687a      	ldr	r2, [r7, #4]
   181f2:	4628      	mov	r0, r5
   181f4:	4611      	mov	r1, r2
   181f6:	f003 fe0b 	bl	1be10 <net_buf_simple_pull>
	if (conn->state != BT_CONN_CONNECTED) {
   181fa:	7aa3      	ldrb	r3, [r4, #10]
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   181fc:	69b5      	ldr	r5, [r6, #24]
	if (conn->state != BT_CONN_CONNECTED) {
   181fe:	2b07      	cmp	r3, #7
   18200:	f040 80a7 	bne.w	18352 <send_frag+0x1be>
	__asm__ volatile(
   18204:	f04f 0340 	mov.w	r3, #64	; 0x40
   18208:	f3ef 8211 	mrs	r2, BASEPRI
   1820c:	f383 8812 	msr	BASEPRI_MAX, r3
   18210:	f3bf 8f6f 	isb	sy
	if (tx) {
   18214:	2d00      	cmp	r5, #0
   18216:	d073      	beq.n	18300 <send_frag+0x16c>
	parent->next = child;
   18218:	2300      	movs	r3, #0
   1821a:	602b      	str	r3, [r5, #0]
	return list->tail;
   1821c:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   1821e:	2b00      	cmp	r3, #0
   18220:	d16b      	bne.n	182fa <send_frag+0x166>
	list->head = node;
   18222:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   18226:	f382 8811 	msr	BASEPRI, r2
   1822a:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   1822e:	2104      	movs	r1, #4
   18230:	f106 000c 	add.w	r0, r6, #12
   18234:	f003 fdcc 	bl	1bdd0 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   18238:	8823      	ldrh	r3, [r4, #0]
   1823a:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
   1823e:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
   18242:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   18246:	8a33      	ldrh	r3, [r6, #16]
   18248:	3b04      	subs	r3, #4
   1824a:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1824c:	2302      	movs	r3, #2
   1824e:	7633      	strb	r3, [r6, #24]
	return bt_send(buf);
   18250:	4630      	mov	r0, r6
   18252:	f7fe fbd3 	bl	169fc <bt_send>
	if (err) {
   18256:	4680      	mov	r8, r0
   18258:	2800      	cmp	r0, #0
   1825a:	d03c      	beq.n	182d6 <send_frag+0x142>
		LOG_ERR("Unable to send to driver (err %d)", err);
   1825c:	46eb      	mov	fp, sp
   1825e:	b088      	sub	sp, #32
   18260:	466a      	mov	r2, sp
   18262:	4b3f      	ldr	r3, [pc, #252]	; (18360 <send_frag+0x1cc>)
   18264:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18268:	2303      	movs	r3, #3
   1826a:	f842 3f10 	str.w	r3, [r2, #16]!
   1826e:	483d      	ldr	r0, [pc, #244]	; (18364 <send_frag+0x1d0>)
   18270:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18274:	f00c fe71 	bl	24f5a <z_log_msg_static_create.constprop.0>
   18278:	46dd      	mov	sp, fp
	__asm__ volatile(
   1827a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1827e:	f3ef 8111 	mrs	r1, BASEPRI
   18282:	f383 8812 	msr	BASEPRI_MAX, r3
   18286:	f3bf 8f6f 	isb	sy
		if (tx) {
   1828a:	2d00      	cmp	r5, #0
   1828c:	d04e      	beq.n	1832c <send_frag+0x198>
	return list->head;
   1828e:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18290:	2200      	movs	r2, #0
   18292:	b15b      	cbz	r3, 182ac <send_frag+0x118>
   18294:	429d      	cmp	r5, r3
   18296:	d146      	bne.n	18326 <send_frag+0x192>
	return node->next;
   18298:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   1829a:	2a00      	cmp	r2, #0
   1829c:	d13d      	bne.n	1831a <send_frag+0x186>
   1829e:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   182a0:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   182a2:	4295      	cmp	r5, r2
   182a4:	d100      	bne.n	182a8 <send_frag+0x114>
	list->tail = node;
   182a6:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   182a8:	2300      	movs	r3, #0
   182aa:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   182ac:	f381 8811 	msr	BASEPRI, r1
   182b0:	f3bf 8f6f 	isb	sy
		err = -EIO;
   182b4:	f06f 0804 	mvn.w	r8, #4
	if (bt_dev.le.acl_mtu) {
   182b8:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
	return NULL;
   182bc:	482a      	ldr	r0, [pc, #168]	; (18368 <send_frag+0x1d4>)
   182be:	2b00      	cmp	r3, #0
   182c0:	bf08      	it	eq
   182c2:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
   182c4:	f008 faaa 	bl	2081c <z_impl_k_sem_give>
	if (tx) {
   182c8:	b12d      	cbz	r5, 182d6 <send_frag+0x142>
		tx_data(buf)->tx = NULL;
   182ca:	2300      	movs	r3, #0
   182cc:	61b3      	str	r3, [r6, #24]
		conn_tx_destroy(conn, tx);
   182ce:	4629      	mov	r1, r5
   182d0:	4620      	mov	r0, r4
   182d2:	f7ff ff39 	bl	18148 <conn_tx_destroy>
}
   182d6:	4640      	mov	r0, r8
   182d8:	370c      	adds	r7, #12
   182da:	46bd      	mov	sp, r7
   182dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_tailroom(&buf->b);
   182e0:	4658      	mov	r0, fp
   182e2:	f00d fdd4 	bl	25e8e <net_buf_simple_tailroom>
		uint16_t frag_len = MIN(conn_mtu(conn) + iso_hdr,
   182e6:	b282      	uxth	r2, r0
   182e8:	e77c      	b.n	181e4 <send_frag+0x50>
		buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   182ea:	2200      	movs	r2, #0
   182ec:	2300      	movs	r3, #0
   182ee:	f104 0038 	add.w	r0, r4, #56	; 0x38
   182f2:	f00d fdbe 	bl	25e72 <net_buf_get>
   182f6:	4606      	mov	r6, r0
		frag = buf;
   182f8:	e77f      	b.n	181fa <send_frag+0x66>
   182fa:	601d      	str	r5, [r3, #0]
	list->tail = node;
   182fc:	61a5      	str	r5, [r4, #24]
}
   182fe:	e792      	b.n	18226 <send_frag+0x92>
	return list->tail;
   18300:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   18302:	b133      	cbz	r3, 18312 <send_frag+0x17e>
			pending_no_cb = &tail_tx->pending_no_cb;
   18304:	f103 0a0c 	add.w	sl, r3, #12
   18308:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   1830a:	3301      	adds	r3, #1
   1830c:	f8ca 3000 	str.w	r3, [sl]
   18310:	e789      	b.n	18226 <send_frag+0x92>
			pending_no_cb = &conn->pending_no_cb;
   18312:	69e3      	ldr	r3, [r4, #28]
   18314:	f104 0a1c 	add.w	sl, r4, #28
   18318:	e7f7      	b.n	1830a <send_frag+0x176>
	parent->next = child;
   1831a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1831c:	69a3      	ldr	r3, [r4, #24]
   1831e:	429d      	cmp	r5, r3
	list->tail = node;
   18320:	bf08      	it	eq
   18322:	61a2      	streq	r2, [r4, #24]
}
   18324:	e7c0      	b.n	182a8 <send_frag+0x114>
	return node->next;
   18326:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   18328:	681b      	ldr	r3, [r3, #0]
   1832a:	e7b2      	b.n	18292 <send_frag+0xfe>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   1832c:	f8da 3000 	ldr.w	r3, [sl]
   18330:	b95b      	cbnz	r3, 1834a <send_frag+0x1b6>
   18332:	490e      	ldr	r1, [pc, #56]	; (1836c <send_frag+0x1d8>)
   18334:	480e      	ldr	r0, [pc, #56]	; (18370 <send_frag+0x1dc>)
   18336:	4a0f      	ldr	r2, [pc, #60]	; (18374 <send_frag+0x1e0>)
   18338:	f240 2373 	movw	r3, #627	; 0x273
   1833c:	f00b ff82 	bl	24244 <assert_print>
   18340:	480c      	ldr	r0, [pc, #48]	; (18374 <send_frag+0x1e0>)
   18342:	f240 2173 	movw	r1, #627	; 0x273
   18346:	f00b ff76 	bl	24236 <assert_post_action>
			(*pending_no_cb)--;
   1834a:	3b01      	subs	r3, #1
   1834c:	f8ca 3000 	str.w	r3, [sl]
   18350:	e7ac      	b.n	182ac <send_frag+0x118>
		err = -ENOTCONN;
   18352:	f06f 087f 	mvn.w	r8, #127	; 0x7f
   18356:	e7af      	b.n	182b8 <send_frag+0x124>
		return -ENOBUFS;
   18358:	f06f 0868 	mvn.w	r8, #104	; 0x68
   1835c:	e7bb      	b.n	182d6 <send_frag+0x142>
   1835e:	bf00      	nop
   18360:	0002919f 	.word	0x0002919f
   18364:	00026ff4 	.word	0x00026ff4
   18368:	200004b0 	.word	0x200004b0
   1836c:	000296fc 	.word	0x000296fc
   18370:	00027c2a 	.word	0x00027c2a
   18374:	000296ae 	.word	0x000296ae
   18378:	200003a8 	.word	0x200003a8

0001837c <bt_conn_get_pkts>:
	if (bt_dev.le.acl_mtu) {
   1837c:	4804      	ldr	r0, [pc, #16]	; (18390 <bt_conn_get_pkts+0x14>)
   1837e:	f8b0 3104 	ldrh.w	r3, [r0, #260]	; 0x104
	return NULL;
   18382:	2b00      	cmp	r3, #0
   18384:	f500 7084 	add.w	r0, r0, #264	; 0x108
}
   18388:	bf08      	it	eq
   1838a:	2000      	moveq	r0, #0
   1838c:	4770      	bx	lr
   1838e:	bf00      	nop
   18390:	200003a8 	.word	0x200003a8

00018394 <bt_conn_new>:
{
   18394:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   18396:	2200      	movs	r2, #0
   18398:	4604      	mov	r4, r0
   1839a:	428a      	cmp	r2, r1
   1839c:	d102      	bne.n	183a4 <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1839e:	2400      	movs	r4, #0
}
   183a0:	4620      	mov	r0, r4
   183a2:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   183a4:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
   183a8:	2001      	movs	r0, #1
   183aa:	f3bf 8f5b 	dmb	ish
   183ae:	e853 5f00 	ldrex	r5, [r3]
   183b2:	2d00      	cmp	r5, #0
   183b4:	d104      	bne.n	183c0 <bt_conn_new+0x2c>
   183b6:	e843 0c00 	strex	ip, r0, [r3]
   183ba:	f1bc 0f00 	cmp.w	ip, #0
   183be:	d1f6      	bne.n	183ae <bt_conn_new+0x1a>
   183c0:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   183c4:	d002      	beq.n	183cc <bt_conn_new+0x38>
   183c6:	34c8      	adds	r4, #200	; 0xc8
	for (i = 0; i < size; i++) {
   183c8:	4402      	add	r2, r0
   183ca:	e7e6      	b.n	1839a <bt_conn_new+0x6>
	if (!conn) {
   183cc:	2c00      	cmp	r4, #0
   183ce:	d0e6      	beq.n	1839e <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   183d0:	22c4      	movs	r2, #196	; 0xc4
   183d2:	2100      	movs	r1, #0
   183d4:	4620      	mov	r0, r4
   183d6:	f00c fb44 	bl	24a62 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   183da:	f104 0060 	add.w	r0, r4, #96	; 0x60
   183de:	4904      	ldr	r1, [pc, #16]	; (183f0 <bt_conn_new+0x5c>)
   183e0:	f008 fe12 	bl	21008 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   183e4:	4903      	ldr	r1, [pc, #12]	; (183f4 <bt_conn_new+0x60>)
   183e6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   183ea:	f008 fcbf 	bl	20d6c <k_work_init>
	return conn;
   183ee:	e7d7      	b.n	183a0 <bt_conn_new+0xc>
   183f0:	00018ebd 	.word	0x00018ebd
   183f4:	00024f61 	.word	0x00024f61

000183f8 <conn_cleanup>:
{
   183f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   183fc:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   183fe:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   18400:	f104 0638 	add.w	r6, r4, #56	; 0x38
   18404:	2300      	movs	r3, #0
   18406:	2200      	movs	r2, #0
   18408:	4630      	mov	r0, r6
   1840a:	f00d fd32 	bl	25e72 <net_buf_get>
   1840e:	4603      	mov	r3, r0
   18410:	b980      	cbnz	r0, 18434 <conn_cleanup+0x3c>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   18412:	6963      	ldr	r3, [r4, #20]
   18414:	b1cb      	cbz	r3, 1844a <conn_cleanup+0x52>
   18416:	4918      	ldr	r1, [pc, #96]	; (18478 <conn_cleanup+0x80>)
   18418:	4a18      	ldr	r2, [pc, #96]	; (1847c <conn_cleanup+0x84>)
   1841a:	4819      	ldr	r0, [pc, #100]	; (18480 <conn_cleanup+0x88>)
   1841c:	f44f 734a 	mov.w	r3, #808	; 0x328
   18420:	f00b ff10 	bl	24244 <assert_print>
   18424:	4817      	ldr	r0, [pc, #92]	; (18484 <conn_cleanup+0x8c>)
   18426:	f00b ff0d 	bl	24244 <assert_print>
   1842a:	f44f 714a 	mov.w	r1, #808	; 0x328
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   1842e:	4813      	ldr	r0, [pc, #76]	; (1847c <conn_cleanup+0x84>)
   18430:	f00b ff01 	bl	24236 <assert_post_action>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   18434:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   18436:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   18438:	f003 fbe2 	bl	1bc00 <net_buf_unref>
		if (tx) {
   1843c:	2d00      	cmp	r5, #0
   1843e:	d0e1      	beq.n	18404 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   18440:	4629      	mov	r1, r5
   18442:	4620      	mov	r0, r4
   18444:	f7ff fe80 	bl	18148 <conn_tx_destroy>
   18448:	e7da      	b.n	18400 <conn_cleanup+0x8>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   1844a:	69e3      	ldr	r3, [r4, #28]
   1844c:	b14b      	cbz	r3, 18462 <conn_cleanup+0x6a>
   1844e:	490e      	ldr	r1, [pc, #56]	; (18488 <conn_cleanup+0x90>)
   18450:	4a0a      	ldr	r2, [pc, #40]	; (1847c <conn_cleanup+0x84>)
   18452:	480b      	ldr	r0, [pc, #44]	; (18480 <conn_cleanup+0x88>)
   18454:	f240 3329 	movw	r3, #809	; 0x329
   18458:	f00b fef4 	bl	24244 <assert_print>
   1845c:	f240 3129 	movw	r1, #809	; 0x329
   18460:	e7e5      	b.n	1842e <conn_cleanup+0x36>
	bt_conn_reset_rx_state(conn);
   18462:	4620      	mov	r0, r4
   18464:	f00c fd7f 	bl	24f66 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   18468:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1846c:	2200      	movs	r2, #0
}
   1846e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   18472:	2300      	movs	r3, #0
   18474:	f008 bee4 	b.w	21240 <k_work_reschedule>
   18478:	0002970f 	.word	0x0002970f
   1847c:	000296ae 	.word	0x000296ae
   18480:	00027c2a 	.word	0x00027c2a
   18484:	00029735 	.word	0x00029735
   18488:	0002974a 	.word	0x0002974a

0001848c <bt_conn_recv>:
{
   1848c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18490:	b086      	sub	sp, #24
   18492:	4616      	mov	r6, r2
   18494:	af00      	add	r7, sp, #0
   18496:	4604      	mov	r4, r0
   18498:	460d      	mov	r5, r1
	tx_notify(conn);
   1849a:	f7ff fe25 	bl	180e8 <tx_notify>
	switch (flags) {
   1849e:	2e01      	cmp	r6, #1
   184a0:	d030      	beq.n	18504 <bt_conn_recv+0x78>
   184a2:	2e02      	cmp	r6, #2
   184a4:	d16a      	bne.n	1857c <bt_conn_recv+0xf0>
		if (conn->rx) {
   184a6:	6923      	ldr	r3, [r4, #16]
   184a8:	b163      	cbz	r3, 184c4 <bt_conn_recv+0x38>
			LOG_ERR("Unexpected first L2CAP frame");
   184aa:	4b40      	ldr	r3, [pc, #256]	; (185ac <bt_conn_recv+0x120>)
   184ac:	4840      	ldr	r0, [pc, #256]	; (185b0 <bt_conn_recv+0x124>)
   184ae:	e9c7 6304 	strd	r6, r3, [r7, #16]
   184b2:	f107 0210 	add.w	r2, r7, #16
   184b6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   184ba:	f00c fd4e 	bl	24f5a <z_log_msg_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   184be:	4620      	mov	r0, r4
   184c0:	f00c fd51 	bl	24f66 <bt_conn_reset_rx_state>
		conn->rx = buf;
   184c4:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   184c6:	6921      	ldr	r1, [r4, #16]
   184c8:	8a08      	ldrh	r0, [r1, #16]
   184ca:	2801      	cmp	r0, #1
   184cc:	d930      	bls.n	18530 <bt_conn_recv+0xa4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   184ce:	68cb      	ldr	r3, [r1, #12]
   184d0:	881b      	ldrh	r3, [r3, #0]
   184d2:	3304      	adds	r3, #4
   184d4:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   184d6:	4298      	cmp	r0, r3
   184d8:	d32a      	bcc.n	18530 <bt_conn_recv+0xa4>
	if (conn->rx->len > acl_total_len) {
   184da:	d95f      	bls.n	1859c <bt_conn_recv+0x110>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   184dc:	466d      	mov	r5, sp
   184de:	b088      	sub	sp, #32
   184e0:	466a      	mov	r2, sp
   184e2:	4934      	ldr	r1, [pc, #208]	; (185b4 <bt_conn_recv+0x128>)
   184e4:	61d3      	str	r3, [r2, #28]
   184e6:	2304      	movs	r3, #4
   184e8:	e9c2 1005 	strd	r1, r0, [r2, #20]
   184ec:	f842 3f10 	str.w	r3, [r2, #16]!
   184f0:	482f      	ldr	r0, [pc, #188]	; (185b0 <bt_conn_recv+0x124>)
   184f2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   184f6:	f00c fd30 	bl	24f5a <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   184fa:	4620      	mov	r0, r4
   184fc:	46ad      	mov	sp, r5
   184fe:	f00c fd32 	bl	24f66 <bt_conn_reset_rx_state>
		return;
   18502:	e015      	b.n	18530 <bt_conn_recv+0xa4>
		if (!conn->rx) {
   18504:	6920      	ldr	r0, [r4, #16]
   18506:	b970      	cbnz	r0, 18526 <bt_conn_recv+0x9a>
			LOG_ERR("Unexpected L2CAP continuation");
   18508:	4b2b      	ldr	r3, [pc, #172]	; (185b8 <bt_conn_recv+0x12c>)
   1850a:	617b      	str	r3, [r7, #20]
   1850c:	2302      	movs	r3, #2
   1850e:	4828      	ldr	r0, [pc, #160]	; (185b0 <bt_conn_recv+0x124>)
   18510:	613b      	str	r3, [r7, #16]
   18512:	f107 0210 	add.w	r2, r7, #16
   18516:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1851a:	f00c fd1e 	bl	24f5a <z_log_msg_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   1851e:	4620      	mov	r0, r4
   18520:	f00c fd21 	bl	24f66 <bt_conn_reset_rx_state>
   18524:	e001      	b.n	1852a <bt_conn_recv+0x9e>
		if (!buf->len) {
   18526:	8a2e      	ldrh	r6, [r5, #16]
   18528:	b936      	cbnz	r6, 18538 <bt_conn_recv+0xac>
		net_buf_unref(buf);
   1852a:	4628      	mov	r0, r5
   1852c:	f003 fb68 	bl	1bc00 <net_buf_unref>
}
   18530:	3718      	adds	r7, #24
   18532:	46bd      	mov	sp, r7
   18534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18538:	300c      	adds	r0, #12
   1853a:	f00d fca8 	bl	25e8e <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1853e:	4286      	cmp	r6, r0
   18540:	d912      	bls.n	18568 <bt_conn_recv+0xdc>
			LOG_ERR("Not enough buffer space for L2CAP data");
   18542:	4b1e      	ldr	r3, [pc, #120]	; (185bc <bt_conn_recv+0x130>)
   18544:	617b      	str	r3, [r7, #20]
   18546:	2302      	movs	r3, #2
   18548:	613b      	str	r3, [r7, #16]
   1854a:	4819      	ldr	r0, [pc, #100]	; (185b0 <bt_conn_recv+0x124>)
   1854c:	f107 0210 	add.w	r2, r7, #16
   18550:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18554:	f00c fd01 	bl	24f5a <z_log_msg_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   18558:	2200      	movs	r2, #0
   1855a:	6921      	ldr	r1, [r4, #16]
   1855c:	4620      	mov	r0, r4
   1855e:	f000 ff2d 	bl	193bc <bt_l2cap_recv>
			conn->rx = NULL;
   18562:	2300      	movs	r3, #0
   18564:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
   18566:	e7e0      	b.n	1852a <bt_conn_recv+0x9e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   18568:	6920      	ldr	r0, [r4, #16]
   1856a:	8a2a      	ldrh	r2, [r5, #16]
   1856c:	68e9      	ldr	r1, [r5, #12]
   1856e:	300c      	adds	r0, #12
   18570:	f00d fc95 	bl	25e9e <net_buf_simple_add_mem>
		net_buf_unref(buf);
   18574:	4628      	mov	r0, r5
   18576:	f003 fb43 	bl	1bc00 <net_buf_unref>
		break;
   1857a:	e7a4      	b.n	184c6 <bt_conn_recv+0x3a>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   1857c:	46e8      	mov	r8, sp
   1857e:	b088      	sub	sp, #32
   18580:	466a      	mov	r2, sp
   18582:	4b0f      	ldr	r3, [pc, #60]	; (185c0 <bt_conn_recv+0x134>)
   18584:	480a      	ldr	r0, [pc, #40]	; (185b0 <bt_conn_recv+0x124>)
	switch (flags) {
   18586:	e9c2 3605 	strd	r3, r6, [r2, #20]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   1858a:	2303      	movs	r3, #3
   1858c:	f842 3f10 	str.w	r3, [r2, #16]!
   18590:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   18594:	f00c fce1 	bl	24f5a <z_log_msg_static_create.constprop.0>
   18598:	46c5      	mov	sp, r8
   1859a:	e7c0      	b.n	1851e <bt_conn_recv+0x92>
	conn->rx = NULL;
   1859c:	2300      	movs	r3, #0
   1859e:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   185a0:	2201      	movs	r2, #1
   185a2:	4620      	mov	r0, r4
   185a4:	f000 ff0a 	bl	193bc <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
   185a8:	e7c2      	b.n	18530 <bt_conn_recv+0xa4>
   185aa:	bf00      	nop
   185ac:	00029763 	.word	0x00029763
   185b0:	00026ff4 	.word	0x00026ff4
   185b4:	000297e3 	.word	0x000297e3
   185b8:	00029780 	.word	0x00029780
   185bc:	0002979e 	.word	0x0002979e
   185c0:	000297c5 	.word	0x000297c5

000185c4 <bt_conn_send_cb>:
{
   185c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   185c8:	b087      	sub	sp, #28
   185ca:	4699      	mov	r9, r3
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
   185cc:	7acb      	ldrb	r3, [r1, #11]
   185ce:	2b07      	cmp	r3, #7
{
   185d0:	af00      	add	r7, sp, #0
   185d2:	4606      	mov	r6, r0
   185d4:	460d      	mov	r5, r1
   185d6:	4690      	mov	r8, r2
	if (buf->user_data_size < CONFIG_BT_CONN_TX_USER_DATA_SIZE) {
   185d8:	d816      	bhi.n	18608 <bt_conn_send_cb+0x44>
		LOG_ERR("not enough room in user_data %d < %d",
   185da:	466c      	mov	r4, sp
   185dc:	b088      	sub	sp, #32
   185de:	466a      	mov	r2, sp
   185e0:	4930      	ldr	r1, [pc, #192]	; (186a4 <bt_conn_send_cb+0xe0>)
   185e2:	4831      	ldr	r0, [pc, #196]	; (186a8 <bt_conn_send_cb+0xe4>)
   185e4:	e9c2 1305 	strd	r1, r3, [r2, #20]
   185e8:	2308      	movs	r3, #8
   185ea:	61d3      	str	r3, [r2, #28]
   185ec:	2304      	movs	r3, #4
   185ee:	f842 3f10 	str.w	r3, [r2, #16]!
   185f2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   185f6:	f00c fcb0 	bl	24f5a <z_log_msg_static_create.constprop.0>
		return -EINVAL;
   185fa:	f06f 0015 	mvn.w	r0, #21
   185fe:	46a5      	mov	sp, r4
}
   18600:	371c      	adds	r7, #28
   18602:	46bd      	mov	sp, r7
   18604:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (conn->state != BT_CONN_CONNECTED) {
   18608:	7a83      	ldrb	r3, [r0, #10]
   1860a:	2b07      	cmp	r3, #7
   1860c:	d00d      	beq.n	1862a <bt_conn_send_cb+0x66>
		LOG_ERR("not connected!");
   1860e:	4b27      	ldr	r3, [pc, #156]	; (186ac <bt_conn_send_cb+0xe8>)
   18610:	617b      	str	r3, [r7, #20]
   18612:	2302      	movs	r3, #2
   18614:	4824      	ldr	r0, [pc, #144]	; (186a8 <bt_conn_send_cb+0xe4>)
   18616:	613b      	str	r3, [r7, #16]
   18618:	f107 0210 	add.w	r2, r7, #16
   1861c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   18620:	f00c fc9b 	bl	24f5a <z_log_msg_static_create.constprop.0>
		return -ENOTCONN;
   18624:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   18628:	e7ea      	b.n	18600 <bt_conn_send_cb+0x3c>
	if (cb) {
   1862a:	2a00      	cmp	r2, #0
   1862c:	d034      	beq.n	18698 <bt_conn_send_cb+0xd4>
	return z_impl_z_current_get();
   1862e:	f009 ff7b 	bl	22528 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   18632:	4b1f      	ldr	r3, [pc, #124]	; (186b0 <bt_conn_send_cb+0xec>)
   18634:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   18636:	481f      	ldr	r0, [pc, #124]	; (186b4 <bt_conn_send_cb+0xf0>)
   18638:	bf07      	ittee	eq
   1863a:	2200      	moveq	r2, #0
   1863c:	2300      	moveq	r3, #0
   1863e:	f04f 32ff 	movne.w	r2, #4294967295
   18642:	f04f 33ff 	movne.w	r3, #4294967295
   18646:	f008 f87f 	bl	20748 <z_impl_k_queue_get>
   1864a:	4604      	mov	r4, r0
		if (!tx) {
   1864c:	b330      	cbz	r0, 1869c <bt_conn_send_cb+0xd8>
		if (conn->state != BT_CONN_CONNECTED) {
   1864e:	7ab3      	ldrb	r3, [r6, #10]
   18650:	2b07      	cmp	r3, #7
   18652:	d013      	beq.n	1867c <bt_conn_send_cb+0xb8>
			LOG_WRN("Disconnected while allocating context");
   18654:	4b18      	ldr	r3, [pc, #96]	; (186b8 <bt_conn_send_cb+0xf4>)
   18656:	617b      	str	r3, [r7, #20]
   18658:	2302      	movs	r3, #2
   1865a:	613b      	str	r3, [r7, #16]
   1865c:	4812      	ldr	r0, [pc, #72]	; (186a8 <bt_conn_send_cb+0xe4>)
   1865e:	f107 0210 	add.w	r2, r7, #16
   18662:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18666:	f00c fc78 	bl	24f5a <z_log_msg_static_create.constprop.0>
	tx->cb = NULL;
   1866a:	2300      	movs	r3, #0
	tx->user_data = NULL;
   1866c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	k_fifo_put(&free_tx, tx);
   18670:	4810      	ldr	r0, [pc, #64]	; (186b4 <bt_conn_send_cb+0xf0>)
	tx->pending_no_cb = 0U;
   18672:	60e3      	str	r3, [r4, #12]
	k_fifo_put(&free_tx, tx);
   18674:	4621      	mov	r1, r4
   18676:	f00e f97f 	bl	26978 <k_queue_append>
}
   1867a:	e7d3      	b.n	18624 <bt_conn_send_cb+0x60>
		tx->user_data = user_data;
   1867c:	e9c0 8901 	strd	r8, r9, [r0, #4]
		tx->pending_no_cb = 0U;
   18680:	2300      	movs	r3, #0
   18682:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   18684:	61ac      	str	r4, [r5, #24]
	tx_data(buf)->is_cont = false;
   18686:	2400      	movs	r4, #0
	net_buf_put(&conn->tx_queue, buf);
   18688:	f106 0038 	add.w	r0, r6, #56	; 0x38
	tx_data(buf)->is_cont = false;
   1868c:	772c      	strb	r4, [r5, #28]
	net_buf_put(&conn->tx_queue, buf);
   1868e:	4629      	mov	r1, r5
   18690:	f003 fa90 	bl	1bbb4 <net_buf_put>
	return 0;
   18694:	4620      	mov	r0, r4
   18696:	e7b3      	b.n	18600 <bt_conn_send_cb+0x3c>
   18698:	4614      	mov	r4, r2
   1869a:	e7f3      	b.n	18684 <bt_conn_send_cb+0xc0>
			return -ENOBUFS;
   1869c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   186a0:	e7ae      	b.n	18600 <bt_conn_send_cb+0x3c>
   186a2:	bf00      	nop
   186a4:	000297fe 	.word	0x000297fe
   186a8:	00026ff4 	.word	0x00026ff4
   186ac:	00029823 	.word	0x00029823
   186b0:	20002ae8 	.word	0x20002ae8
   186b4:	200009b0 	.word	0x200009b0
   186b8:	00029832 	.word	0x00029832

000186bc <bt_conn_prepare_events>:
{
   186bc:	b570      	push	{r4, r5, r6, lr}
   186be:	4604      	mov	r4, r0
	z_impl_k_poll_signal_init(sig);
   186c0:	4823      	ldr	r0, [pc, #140]	; (18750 <bt_conn_prepare_events+0x94>)
   186c2:	f00e fb0a 	bl	26cda <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   186c6:	4b22      	ldr	r3, [pc, #136]	; (18750 <bt_conn_prepare_events+0x94>)
   186c8:	2200      	movs	r2, #0
   186ca:	4620      	mov	r0, r4
   186cc:	2101      	movs	r1, #1
   186ce:	f00a fd89 	bl	231e4 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   186d2:	f3bf 8f5b 	dmb	ish
   186d6:	4b1f      	ldr	r3, [pc, #124]	; (18754 <bt_conn_prepare_events+0x98>)
   186d8:	681a      	ldr	r2, [r3, #0]
   186da:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
   186de:	f104 0014 	add.w	r0, r4, #20
	if (!atomic_get(&conn->ref)) {
   186e2:	b90a      	cbnz	r2, 186e8 <bt_conn_prepare_events+0x2c>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   186e4:	2001      	movs	r0, #1
}
   186e6:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   186e8:	f1a3 01c4 	sub.w	r1, r3, #196	; 0xc4
   186ec:	f813 3cba 	ldrb.w	r3, [r3, #-186]
   186f0:	b993      	cbnz	r3, 18718 <bt_conn_prepare_events+0x5c>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   186f2:	f3bf 8f5b 	dmb	ish
   186f6:	1d0b      	adds	r3, r1, #4
   186f8:	e853 2f00 	ldrex	r2, [r3]
   186fc:	f022 0540 	bic.w	r5, r2, #64	; 0x40
   18700:	e843 5600 	strex	r6, r5, [r3]
   18704:	2e00      	cmp	r6, #0
   18706:	d1f7      	bne.n	186f8 <bt_conn_prepare_events+0x3c>
   18708:	f3bf 8f5b 	dmb	ish
   1870c:	0653      	lsls	r3, r2, #25
   1870e:	d503      	bpl.n	18718 <bt_conn_prepare_events+0x5c>
		conn_cleanup(conn);
   18710:	4608      	mov	r0, r1
   18712:	f7ff fe71 	bl	183f8 <conn_cleanup>
		return -ENOTCONN;
   18716:	e7e5      	b.n	186e4 <bt_conn_prepare_events+0x28>
	if (conn->state != BT_CONN_CONNECTED) {
   18718:	7a8b      	ldrb	r3, [r1, #10]
   1871a:	2b07      	cmp	r3, #7
   1871c:	d1e2      	bne.n	186e4 <bt_conn_prepare_events+0x28>
	if (bt_dev.le.acl_mtu) {
   1871e:	4b0e      	ldr	r3, [pc, #56]	; (18758 <bt_conn_prepare_events+0x9c>)
   18720:	f8b3 2104 	ldrh.w	r2, [r3, #260]	; 0x104
   18724:	2a00      	cmp	r2, #0
   18726:	d0dd      	beq.n	186e4 <bt_conn_prepare_events+0x28>
/**
 * @internal
 */
static inline unsigned int z_impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
   18728:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (packets_waiting && !buffers_available) {
   1872c:	6b89      	ldr	r1, [r1, #56]	; 0x38
   1872e:	b151      	cbz	r1, 18746 <bt_conn_prepare_events+0x8a>
   18730:	b94a      	cbnz	r2, 18746 <bt_conn_prepare_events+0x8a>
		k_poll_event_init(&events[0],
   18732:	f503 7384 	add.w	r3, r3, #264	; 0x108
   18736:	2102      	movs	r1, #2
		k_poll_event_init(&events[0],
   18738:	f00a fd54 	bl	231e4 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   1873c:	2301      	movs	r3, #1
   1873e:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   18742:	2002      	movs	r0, #2
	return ev_count;
   18744:	e7cf      	b.n	186e6 <bt_conn_prepare_events+0x2a>
		k_poll_event_init(&events[0],
   18746:	4b05      	ldr	r3, [pc, #20]	; (1875c <bt_conn_prepare_events+0xa0>)
   18748:	2200      	movs	r2, #0
   1874a:	2104      	movs	r1, #4
   1874c:	e7f4      	b.n	18738 <bt_conn_prepare_events+0x7c>
   1874e:	bf00      	nop
   18750:	2000067c 	.word	0x2000067c
   18754:	20001ee4 	.word	0x20001ee4
   18758:	200003a8 	.word	0x200003a8
   1875c:	20001e58 	.word	0x20001e58

00018760 <bt_conn_ref>:
{
   18760:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(conn);
   18762:	b958      	cbnz	r0, 1877c <bt_conn_ref+0x1c>
   18764:	4913      	ldr	r1, [pc, #76]	; (187b4 <bt_conn_ref+0x54>)
   18766:	4814      	ldr	r0, [pc, #80]	; (187b8 <bt_conn_ref+0x58>)
   18768:	4a14      	ldr	r2, [pc, #80]	; (187bc <bt_conn_ref+0x5c>)
   1876a:	f240 5313 	movw	r3, #1299	; 0x513
   1876e:	f00b fd69 	bl	24244 <assert_print>
   18772:	4812      	ldr	r0, [pc, #72]	; (187bc <bt_conn_ref+0x5c>)
   18774:	f240 5113 	movw	r1, #1299	; 0x513
   18778:	f00b fd5d 	bl	24236 <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1877c:	f3bf 8f5b 	dmb	ish
   18780:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   18784:	f3bf 8f5b 	dmb	ish
		old = atomic_get(&conn->ref);
   18788:	f100 02c4 	add.w	r2, r0, #196	; 0xc4
		if (!old) {
   1878c:	b17b      	cbz	r3, 187ae <bt_conn_ref+0x4e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1878e:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   18792:	1c59      	adds	r1, r3, #1
   18794:	e852 4f00 	ldrex	r4, [r2]
   18798:	429c      	cmp	r4, r3
   1879a:	d104      	bne.n	187a6 <bt_conn_ref+0x46>
   1879c:	e842 1c00 	strex	ip, r1, [r2]
   187a0:	f1bc 0f00 	cmp.w	ip, #0
   187a4:	d1f6      	bne.n	18794 <bt_conn_ref+0x34>
   187a6:	f3bf 8f5b 	dmb	ish
   187aa:	d1e7      	bne.n	1877c <bt_conn_ref+0x1c>
}
   187ac:	bd10      	pop	{r4, pc}
			return NULL;
   187ae:	4618      	mov	r0, r3
   187b0:	e7fc      	b.n	187ac <bt_conn_ref+0x4c>
   187b2:	bf00      	nop
   187b4:	00029aee 	.word	0x00029aee
   187b8:	00027c2a 	.word	0x00027c2a
   187bc:	000296ae 	.word	0x000296ae

000187c0 <bt_conn_unref>:
{
   187c0:	b510      	push	{r4, lr}
	old = atomic_dec(&conn->ref);
   187c2:	f100 03c4 	add.w	r3, r0, #196	; 0xc4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   187c6:	f3bf 8f5b 	dmb	ish
   187ca:	e853 2f00 	ldrex	r2, [r3]
   187ce:	1e51      	subs	r1, r2, #1
   187d0:	e843 1400 	strex	r4, r1, [r3]
   187d4:	2c00      	cmp	r4, #0
   187d6:	d1f8      	bne.n	187ca <bt_conn_unref+0xa>
   187d8:	f3bf 8f5b 	dmb	ish
	__ASSERT(old > 0, "Conn reference counter is 0");
   187dc:	2a00      	cmp	r2, #0
   187de:	dc0e      	bgt.n	187fe <bt_conn_unref+0x3e>
   187e0:	490f      	ldr	r1, [pc, #60]	; (18820 <bt_conn_unref+0x60>)
   187e2:	4a10      	ldr	r2, [pc, #64]	; (18824 <bt_conn_unref+0x64>)
   187e4:	4810      	ldr	r0, [pc, #64]	; (18828 <bt_conn_unref+0x68>)
   187e6:	f240 532f 	movw	r3, #1327	; 0x52f
   187ea:	f00b fd2b 	bl	24244 <assert_print>
   187ee:	480f      	ldr	r0, [pc, #60]	; (1882c <bt_conn_unref+0x6c>)
   187f0:	f00b fd28 	bl	24244 <assert_print>
   187f4:	480b      	ldr	r0, [pc, #44]	; (18824 <bt_conn_unref+0x64>)
   187f6:	f240 512f 	movw	r1, #1327	; 0x52f
   187fa:	f00b fd1c 	bl	24236 <assert_post_action>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   187fe:	8842      	ldrh	r2, [r0, #2]
   18800:	f240 1301 	movw	r3, #257	; 0x101
   18804:	429a      	cmp	r2, r3
   18806:	d10a      	bne.n	1881e <bt_conn_unref+0x5e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18808:	f3bf 8f5b 	dmb	ish
   1880c:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   18810:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_CONN_ROLE_PERIPHERAL && atomic_get(&conn->ref) == 0) {
   18814:	b91b      	cbnz	r3, 1881e <bt_conn_unref+0x5e>
}
   18816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_le_adv_resume();
   1881a:	f7ff bbb1 	b.w	17f80 <bt_le_adv_resume>
}
   1881e:	bd10      	pop	{r4, pc}
   18820:	00029858 	.word	0x00029858
   18824:	000296ae 	.word	0x000296ae
   18828:	00027c2a 	.word	0x00027c2a
   1882c:	00029860 	.word	0x00029860

00018830 <bt_conn_lookup_handle>:
{
   18830:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   18832:	2101      	movs	r1, #1
   18834:	4801      	ldr	r0, [pc, #4]	; (1883c <bt_conn_lookup_handle+0xc>)
   18836:	f00c bb9f 	b.w	24f78 <conn_lookup_handle>
   1883a:	bf00      	nop
   1883c:	20001e20 	.word	0x20001e20

00018840 <bt_conn_set_state>:
{
   18840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
   18844:	7a86      	ldrb	r6, [r0, #10]
   18846:	428e      	cmp	r6, r1
{
   18848:	af00      	add	r7, sp, #0
   1884a:	4604      	mov	r4, r0
   1884c:	460d      	mov	r5, r1
	if (conn->state == state) {
   1884e:	d118      	bne.n	18882 <bt_conn_set_state+0x42>
	switch (state) {
   18850:	2e08      	cmp	r6, #8
   18852:	bf96      	itet	ls
   18854:	4b72      	ldrls	r3, [pc, #456]	; (18a20 <bt_conn_set_state+0x1e0>)
	if (conn->state == state) {
   18856:	4b73      	ldrhi	r3, [pc, #460]	; (18a24 <bt_conn_set_state+0x1e4>)
   18858:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
		LOG_WRN("no transition %s", state2str(state));
   1885c:	466c      	mov	r4, sp
   1885e:	b088      	sub	sp, #32
   18860:	466a      	mov	r2, sp
   18862:	4971      	ldr	r1, [pc, #452]	; (18a28 <bt_conn_set_state+0x1e8>)
   18864:	e9c2 1305 	strd	r1, r3, [r2, #20]
   18868:	f44f 7300 	mov.w	r3, #512	; 0x200
   1886c:	8393      	strh	r3, [r2, #28]
   1886e:	4b6f      	ldr	r3, [pc, #444]	; (18a2c <bt_conn_set_state+0x1ec>)
   18870:	f842 3f10 	str.w	r3, [r2, #16]!
   18874:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
		LOG_WRN("no valid (%u) state was set", state);
   18878:	486d      	ldr	r0, [pc, #436]	; (18a30 <bt_conn_set_state+0x1f0>)
   1887a:	f00c fb6e 	bl	24f5a <z_log_msg_static_create.constprop.0>
   1887e:	46a5      	mov	sp, r4
   18880:	e04c      	b.n	1891c <bt_conn_set_state+0xdc>
	conn->state = state;
   18882:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   18884:	b926      	cbnz	r6, 18890 <bt_conn_set_state+0x50>
		if (conn->type != BT_CONN_TYPE_ISO) {
   18886:	7883      	ldrb	r3, [r0, #2]
   18888:	2b08      	cmp	r3, #8
   1888a:	d001      	beq.n	18890 <bt_conn_set_state+0x50>
			bt_conn_ref(conn);
   1888c:	f7ff ff68 	bl	18760 <bt_conn_ref>
	switch (conn->state) {
   18890:	7aa3      	ldrb	r3, [r4, #10]
   18892:	2b08      	cmp	r3, #8
   18894:	f200 80bf 	bhi.w	18a16 <bt_conn_set_state+0x1d6>
   18898:	e8df f003 	tbb	[pc, r3]
   1889c:	40400543 	.word	0x40400543
   188a0:	25404040 	.word	0x25404040
   188a4:	40          	.byte	0x40
   188a5:	00          	.byte	0x00
	if (bt_dev.le.acl_mtu) {
   188a6:	4d63      	ldr	r5, [pc, #396]	; (18a34 <bt_conn_set_state+0x1f4>)
		tx->pending_no_cb = 0U;
   188a8:	f04f 0800 	mov.w	r8, #0
	return NULL;
   188ac:	f505 7684 	add.w	r6, r5, #264	; 0x108
	__asm__ volatile(
   188b0:	f04f 0240 	mov.w	r2, #64	; 0x40
   188b4:	f3ef 8311 	mrs	r3, BASEPRI
   188b8:	f382 8812 	msr	BASEPRI_MAX, r2
   188bc:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   188c0:	69e2      	ldr	r2, [r4, #28]
   188c2:	2a00      	cmp	r2, #0
   188c4:	f000 8082 	beq.w	189cc <bt_conn_set_state+0x18c>
			conn->pending_no_cb--;
   188c8:	3a01      	subs	r2, #1
   188ca:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   188cc:	f383 8811 	msr	BASEPRI, r3
   188d0:	f3bf 8f6f 	isb	sy
	if (bt_dev.le.acl_mtu) {
   188d4:	f8b5 3104 	ldrh.w	r3, [r5, #260]	; 0x104
	return NULL;
   188d8:	2b00      	cmp	r3, #0
   188da:	bf14      	ite	ne
   188dc:	4630      	movne	r0, r6
   188de:	2000      	moveq	r0, #0
	z_impl_k_sem_give(sem);
   188e0:	f007 ff9c 	bl	2081c <z_impl_k_sem_give>
}
   188e4:	e7e4      	b.n	188b0 <bt_conn_set_state+0x70>
		if (conn->type == BT_CONN_TYPE_SCO) {
   188e6:	78a3      	ldrb	r3, [r4, #2]
   188e8:	2b04      	cmp	r3, #4
   188ea:	d017      	beq.n	1891c <bt_conn_set_state+0xdc>
	z_impl_k_queue_init(queue);
   188ec:	f104 0038 	add.w	r0, r4, #56	; 0x38
   188f0:	f00e f835 	bl	2695e <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   188f4:	4850      	ldr	r0, [pc, #320]	; (18a38 <bt_conn_set_state+0x1f8>)
   188f6:	2100      	movs	r1, #0
   188f8:	f00a fd92 	bl	23420 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   188fc:	2300      	movs	r3, #0
	list->tail = NULL;
   188fe:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   18902:	78e3      	ldrb	r3, [r4, #3]
   18904:	2b01      	cmp	r3, #1
   18906:	d109      	bne.n	1891c <bt_conn_set_state+0xdc>
			conn->le.conn_param_retry_countdown =
   18908:	2303      	movs	r3, #3
   1890a:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			k_work_schedule(&conn->deferred_work,
   1890e:	f44f 3220 	mov.w	r2, #163840	; 0x28000
   18912:	2300      	movs	r3, #0
   18914:	f104 0060 	add.w	r0, r4, #96	; 0x60
   18918:	f008 fc18 	bl	2114c <k_work_schedule>
}
   1891c:	46bd      	mov	sp, r7
   1891e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   18922:	78a3      	ldrb	r3, [r4, #2]
   18924:	2b04      	cmp	r3, #4
   18926:	d103      	bne.n	18930 <bt_conn_set_state+0xf0>
			bt_conn_unref(conn);
   18928:	4620      	mov	r0, r4
   1892a:	f7ff ff49 	bl	187c0 <bt_conn_unref>
			break;
   1892e:	e7f5      	b.n	1891c <bt_conn_set_state+0xdc>
		switch (old_state) {
   18930:	2e08      	cmp	r6, #8
   18932:	d8f3      	bhi.n	1891c <bt_conn_set_state+0xdc>
   18934:	a301      	add	r3, pc, #4	; (adr r3, 1893c <bt_conn_set_state+0xfc>)
   18936:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1893a:	bf00      	nop
   1893c:	000189b5 	.word	0x000189b5
   18940:	00018961 	.word	0x00018961
   18944:	000189a7 	.word	0x000189a7
   18948:	00018929 	.word	0x00018929
   1894c:	00018929 	.word	0x00018929
   18950:	000189a7 	.word	0x000189a7
   18954:	000189a7 	.word	0x000189a7
   18958:	000189b5 	.word	0x000189b5
   1895c:	000189b5 	.word	0x000189b5
			tx_notify(conn);
   18960:	4620      	mov	r0, r4
   18962:	f7ff fbc1 	bl	180e8 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   18966:	78a3      	ldrb	r3, [r4, #2]
   18968:	2b01      	cmp	r3, #1
   1896a:	d10a      	bne.n	18982 <bt_conn_set_state+0x142>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   1896c:	f104 0560 	add.w	r5, r4, #96	; 0x60
   18970:	4628      	mov	r0, r5
   18972:	f00e f88f 	bl	26a94 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   18976:	f010 0f0c 	tst.w	r0, #12
   1897a:	d002      	beq.n	18982 <bt_conn_set_state+0x142>
				k_work_cancel_delayable(&conn->deferred_work);
   1897c:	4628      	mov	r0, r5
   1897e:	f008 fc65 	bl	2124c <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18982:	f3bf 8f5b 	dmb	ish
   18986:	3404      	adds	r4, #4
   18988:	e854 3f00 	ldrex	r3, [r4]
   1898c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   18990:	e844 3200 	strex	r2, r3, [r4]
   18994:	2a00      	cmp	r2, #0
   18996:	d1f7      	bne.n	18988 <bt_conn_set_state+0x148>
   18998:	f3bf 8f5b 	dmb	ish
   1899c:	2100      	movs	r1, #0
   1899e:	4826      	ldr	r0, [pc, #152]	; (18a38 <bt_conn_set_state+0x1f8>)
   189a0:	f00a fd3e 	bl	23420 <z_impl_k_poll_signal_raise>
   189a4:	e7ba      	b.n	1891c <bt_conn_set_state+0xdc>
			if (conn->err) {
   189a6:	7a63      	ldrb	r3, [r4, #9]
   189a8:	2b00      	cmp	r3, #0
   189aa:	d0bd      	beq.n	18928 <bt_conn_set_state+0xe8>
				notify_connected(conn);
   189ac:	4620      	mov	r0, r4
   189ae:	f7ff fb65 	bl	1807c <notify_connected>
   189b2:	e7b9      	b.n	18928 <bt_conn_set_state+0xe8>
			LOG_WRN("Invalid (%u) old state", state);
   189b4:	466c      	mov	r4, sp
   189b6:	b088      	sub	sp, #32
   189b8:	466a      	mov	r2, sp
   189ba:	4b20      	ldr	r3, [pc, #128]	; (18a3c <bt_conn_set_state+0x1fc>)
		LOG_WRN("no valid (%u) state was set", state);
   189bc:	e9c2 3505 	strd	r3, r5, [r2, #20]
   189c0:	2303      	movs	r3, #3
   189c2:	f842 3f10 	str.w	r3, [r2, #16]!
   189c6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   189ca:	e755      	b.n	18878 <bt_conn_set_state+0x38>
	return list->head;
   189cc:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   189ce:	b921      	cbnz	r1, 189da <bt_conn_set_state+0x19a>
   189d0:	f383 8811 	msr	BASEPRI, r3
   189d4:	f3bf 8f6f 	isb	sy
		if (!node) {
   189d8:	e7a0      	b.n	1891c <bt_conn_set_state+0xdc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   189da:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   189dc:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   189de:	6162      	str	r2, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   189e0:	4281      	cmp	r1, r0
	list->tail = node;
   189e2:	bf08      	it	eq
   189e4:	61a2      	streq	r2, [r4, #24]
   189e6:	f383 8811 	msr	BASEPRI, r3
   189ea:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   189ee:	f04f 0240 	mov.w	r2, #64	; 0x40
   189f2:	f3ef 8311 	mrs	r3, BASEPRI
   189f6:	f382 8812 	msr	BASEPRI_MAX, r2
   189fa:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   189fe:	68ca      	ldr	r2, [r1, #12]
   18a00:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   18a02:	f8c1 800c 	str.w	r8, [r1, #12]
	__asm__ volatile(
   18a06:	f383 8811 	msr	BASEPRI, r3
   18a0a:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   18a0e:	4620      	mov	r0, r4
   18a10:	f7ff fb9a 	bl	18148 <conn_tx_destroy>
   18a14:	e75e      	b.n	188d4 <bt_conn_set_state+0x94>
		LOG_WRN("no valid (%u) state was set", state);
   18a16:	466c      	mov	r4, sp
   18a18:	b088      	sub	sp, #32
   18a1a:	466a      	mov	r2, sp
   18a1c:	4b08      	ldr	r3, [pc, #32]	; (18a40 <bt_conn_set_state+0x200>)
   18a1e:	e7cd      	b.n	189bc <bt_conn_set_state+0x17c>
   18a20:	000273c8 	.word	0x000273c8
   18a24:	0002987e 	.word	0x0002987e
   18a28:	00029888 	.word	0x00029888
   18a2c:	01000003 	.word	0x01000003
   18a30:	00026ff4 	.word	0x00026ff4
   18a34:	200003a8 	.word	0x200003a8
   18a38:	2000067c 	.word	0x2000067c
   18a3c:	00029899 	.word	0x00029899
   18a40:	000298b0 	.word	0x000298b0

00018a44 <bt_conn_index>:
		index = conn - acl_conns;
   18a44:	4a0c      	ldr	r2, [pc, #48]	; (18a78 <bt_conn_index+0x34>)
   18a46:	490d      	ldr	r1, [pc, #52]	; (18a7c <bt_conn_index+0x38>)
{
   18a48:	b508      	push	{r3, lr}
		index = conn - acl_conns;
   18a4a:	1a83      	subs	r3, r0, r2
   18a4c:	10db      	asrs	r3, r3, #3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   18a4e:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   18a50:	fb01 f303 	mul.w	r3, r1, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   18a54:	d00e      	beq.n	18a74 <bt_conn_index+0x30>
   18a56:	490a      	ldr	r1, [pc, #40]	; (18a80 <bt_conn_index+0x3c>)
   18a58:	4a0a      	ldr	r2, [pc, #40]	; (18a84 <bt_conn_index+0x40>)
   18a5a:	480b      	ldr	r0, [pc, #44]	; (18a88 <bt_conn_index+0x44>)
   18a5c:	f240 534d 	movw	r3, #1357	; 0x54d
   18a60:	f00b fbf0 	bl	24244 <assert_print>
   18a64:	4809      	ldr	r0, [pc, #36]	; (18a8c <bt_conn_index+0x48>)
   18a66:	f00b fbed 	bl	24244 <assert_print>
   18a6a:	4806      	ldr	r0, [pc, #24]	; (18a84 <bt_conn_index+0x40>)
   18a6c:	f240 514d 	movw	r1, #1357	; 0x54d
   18a70:	f00b fbe1 	bl	24236 <assert_post_action>
}
   18a74:	b2d8      	uxtb	r0, r3
   18a76:	bd08      	pop	{r3, pc}
   18a78:	20001e20 	.word	0x20001e20
   18a7c:	c28f5c29 	.word	0xc28f5c29
   18a80:	000298cc 	.word	0x000298cc
   18a84:	000296ae 	.word	0x000296ae
   18a88:	00027c2a 	.word	0x00027c2a
   18a8c:	00029995 	.word	0x00029995

00018a90 <bt_conn_create_pdu_timeout>:
{
   18a90:	b5f0      	push	{r4, r5, r6, r7, lr}
   18a92:	b087      	sub	sp, #28
   18a94:	4604      	mov	r4, r0
   18a96:	460d      	mov	r5, r1
   18a98:	4617      	mov	r7, r2
   18a9a:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   18a9c:	f00d ff3e 	bl	2691c <k_is_in_isr>
   18aa0:	b158      	cbz	r0, 18aba <bt_conn_create_pdu_timeout+0x2a>
   18aa2:	4914      	ldr	r1, [pc, #80]	; (18af4 <bt_conn_create_pdu_timeout+0x64>)
   18aa4:	4814      	ldr	r0, [pc, #80]	; (18af8 <bt_conn_create_pdu_timeout+0x68>)
   18aa6:	4a15      	ldr	r2, [pc, #84]	; (18afc <bt_conn_create_pdu_timeout+0x6c>)
   18aa8:	f240 5369 	movw	r3, #1385	; 0x569
   18aac:	f00b fbca 	bl	24244 <assert_print>
   18ab0:	4812      	ldr	r0, [pc, #72]	; (18afc <bt_conn_create_pdu_timeout+0x6c>)
   18ab2:	f240 5169 	movw	r1, #1385	; 0x569
   18ab6:	f00b fbbe 	bl	24236 <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   18aba:	4911      	ldr	r1, [pc, #68]	; (18b00 <bt_conn_create_pdu_timeout+0x70>)
   18abc:	463a      	mov	r2, r7
   18abe:	2c00      	cmp	r4, #0
   18ac0:	bf14      	ite	ne
   18ac2:	4620      	movne	r0, r4
   18ac4:	4608      	moveq	r0, r1
   18ac6:	4633      	mov	r3, r6
   18ac8:	f00d f9ce 	bl	25e68 <net_buf_alloc_fixed>
	if (!buf) {
   18acc:	4604      	mov	r4, r0
   18ace:	b960      	cbnz	r0, 18aea <bt_conn_create_pdu_timeout+0x5a>
		LOG_WRN("Unable to allocate buffer within timeout");
   18ad0:	4b0c      	ldr	r3, [pc, #48]	; (18b04 <bt_conn_create_pdu_timeout+0x74>)
   18ad2:	9305      	str	r3, [sp, #20]
   18ad4:	480c      	ldr	r0, [pc, #48]	; (18b08 <bt_conn_create_pdu_timeout+0x78>)
   18ad6:	2302      	movs	r3, #2
   18ad8:	aa04      	add	r2, sp, #16
   18ada:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   18ade:	9304      	str	r3, [sp, #16]
   18ae0:	f00c fa3b 	bl	24f5a <z_log_msg_static_create.constprop.0>
}
   18ae4:	4620      	mov	r0, r4
   18ae6:	b007      	add	sp, #28
   18ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   18aea:	1d29      	adds	r1, r5, #4
   18aec:	300c      	adds	r0, #12
   18aee:	f003 f94d 	bl	1bd8c <net_buf_simple_reserve>
	return buf;
   18af2:	e7f7      	b.n	18ae4 <bt_conn_create_pdu_timeout+0x54>
   18af4:	000299af 	.word	0x000299af
   18af8:	00027c2a 	.word	0x00027c2a
   18afc:	000296ae 	.word	0x000296ae
   18b00:	200009cc 	.word	0x200009cc
   18b04:	000299be 	.word	0x000299be
   18b08:	00026ff4 	.word	0x00026ff4

00018b0c <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   18b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18b0e:	f3bf 8f5b 	dmb	ish
   18b12:	6842      	ldr	r2, [r0, #4]
   18b14:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   18b18:	0592      	lsls	r2, r2, #22
{
   18b1a:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   18b1c:	f100 0304 	add.w	r3, r0, #4
   18b20:	d519      	bpl.n	18b56 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   18b22:	f8b0 20a6 	ldrh.w	r2, [r0, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   18b26:	f8b0 10a8 	ldrh.w	r1, [r0, #168]	; 0xa8
   18b2a:	4291      	cmp	r1, r2
   18b2c:	d813      	bhi.n	18b56 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   18b2e:	f8b0 10aa 	ldrh.w	r1, [r0, #170]	; 0xaa
   18b32:	4291      	cmp	r1, r2
   18b34:	d30f      	bcc.n	18b56 <notify_le_param_updated+0x4a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   18b36:	e9d0 122b 	ldrd	r1, r2, [r0, #172]	; 0xac
   18b3a:	4291      	cmp	r1, r2
   18b3c:	d10b      	bne.n	18b56 <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18b3e:	f3bf 8f5b 	dmb	ish
   18b42:	e853 1f00 	ldrex	r1, [r3]
   18b46:	f421 7100 	bic.w	r1, r1, #512	; 0x200
   18b4a:	e843 1200 	strex	r2, r1, [r3]
   18b4e:	2a00      	cmp	r2, #0
   18b50:	d1f7      	bne.n	18b42 <notify_le_param_updated+0x36>
   18b52:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   18b56:	4b18      	ldr	r3, [pc, #96]	; (18bb8 <notify_le_param_updated+0xac>)
   18b58:	681d      	ldr	r5, [r3, #0]
   18b5a:	b995      	cbnz	r5, 18b82 <notify_le_param_updated+0x76>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18b5c:	4d17      	ldr	r5, [pc, #92]	; (18bbc <notify_le_param_updated+0xb0>)
   18b5e:	4f18      	ldr	r7, [pc, #96]	; (18bc0 <notify_le_param_updated+0xb4>)
   18b60:	42bd      	cmp	r5, r7
   18b62:	d926      	bls.n	18bb2 <notify_le_param_updated+0xa6>
   18b64:	4917      	ldr	r1, [pc, #92]	; (18bc4 <notify_le_param_updated+0xb8>)
   18b66:	4a18      	ldr	r2, [pc, #96]	; (18bc8 <notify_le_param_updated+0xbc>)
   18b68:	4818      	ldr	r0, [pc, #96]	; (18bcc <notify_le_param_updated+0xc0>)
   18b6a:	f240 633c 	movw	r3, #1596	; 0x63c
   18b6e:	f00b fb69 	bl	24244 <assert_print>
   18b72:	4817      	ldr	r0, [pc, #92]	; (18bd0 <notify_le_param_updated+0xc4>)
   18b74:	f00b fb66 	bl	24244 <assert_print>
   18b78:	4813      	ldr	r0, [pc, #76]	; (18bc8 <notify_le_param_updated+0xbc>)
   18b7a:	f240 613c 	movw	r1, #1596	; 0x63c
   18b7e:	f00b fb5a 	bl	24236 <assert_post_action>
		if (cb->le_param_updated) {
   18b82:	68ee      	ldr	r6, [r5, #12]
   18b84:	b13e      	cbz	r6, 18b96 <notify_le_param_updated+0x8a>
			cb->le_param_updated(conn, conn->le.interval,
   18b86:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   18b8a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   18b8e:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   18b92:	4620      	mov	r0, r4
   18b94:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   18b96:	692d      	ldr	r5, [r5, #16]
   18b98:	e7df      	b.n	18b5a <notify_le_param_updated+0x4e>
		if (cb->le_param_updated) {
   18b9a:	68ee      	ldr	r6, [r5, #12]
   18b9c:	b13e      	cbz	r6, 18bae <notify_le_param_updated+0xa2>
			cb->le_param_updated(conn, conn->le.interval,
   18b9e:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   18ba2:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   18ba6:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   18baa:	4620      	mov	r0, r4
   18bac:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18bae:	3514      	adds	r5, #20
   18bb0:	e7d6      	b.n	18b60 <notify_le_param_updated+0x54>
   18bb2:	d3f2      	bcc.n	18b9a <notify_le_param_updated+0x8e>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   18bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18bb6:	bf00      	nop
   18bb8:	20002cb8 	.word	0x20002cb8
   18bbc:	00026f98 	.word	0x00026f98
   18bc0:	00026fac 	.word	0x00026fac
   18bc4:	000296de 	.word	0x000296de
   18bc8:	000296ae 	.word	0x000296ae
   18bcc:	00027c2a 	.word	0x00027c2a
   18bd0:	00028176 	.word	0x00028176

00018bd4 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   18bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18bd8:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   18bda:	4608      	mov	r0, r1
{
   18bdc:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   18bde:	f00c f85c 	bl	24c9a <bt_le_conn_params_valid>
   18be2:	4605      	mov	r5, r0
   18be4:	b918      	cbnz	r0, 18bee <le_param_req+0x1a>
		return false;
   18be6:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   18be8:	4628      	mov	r0, r5
   18bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   18bee:	4b1b      	ldr	r3, [pc, #108]	; (18c5c <le_param_req+0x88>)
   18bf0:	681e      	ldr	r6, [r3, #0]
   18bf2:	b99e      	cbnz	r6, 18c1c <le_param_req+0x48>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18bf4:	4e1a      	ldr	r6, [pc, #104]	; (18c60 <le_param_req+0x8c>)
   18bf6:	f8df 807c 	ldr.w	r8, [pc, #124]	; 18c74 <le_param_req+0xa0>
   18bfa:	4546      	cmp	r6, r8
   18bfc:	d927      	bls.n	18c4e <le_param_req+0x7a>
   18bfe:	4919      	ldr	r1, [pc, #100]	; (18c64 <le_param_req+0x90>)
   18c00:	4a19      	ldr	r2, [pc, #100]	; (18c68 <le_param_req+0x94>)
   18c02:	481a      	ldr	r0, [pc, #104]	; (18c6c <le_param_req+0x98>)
   18c04:	f240 6384 	movw	r3, #1668	; 0x684
   18c08:	f00b fb1c 	bl	24244 <assert_print>
   18c0c:	4818      	ldr	r0, [pc, #96]	; (18c70 <le_param_req+0x9c>)
   18c0e:	f00b fb19 	bl	24244 <assert_print>
   18c12:	4815      	ldr	r0, [pc, #84]	; (18c68 <le_param_req+0x94>)
   18c14:	f240 6184 	movw	r1, #1668	; 0x684
   18c18:	f00b fb0d 	bl	24236 <assert_post_action>
		if (!cb->le_param_req) {
   18c1c:	68b3      	ldr	r3, [r6, #8]
   18c1e:	b90b      	cbnz	r3, 18c24 <le_param_req+0x50>
	for (cb = callback_list; cb; cb = cb->_next) {
   18c20:	6936      	ldr	r6, [r6, #16]
   18c22:	e7e6      	b.n	18bf2 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   18c24:	4621      	mov	r1, r4
   18c26:	4638      	mov	r0, r7
   18c28:	4798      	blx	r3
   18c2a:	2800      	cmp	r0, #0
   18c2c:	d0db      	beq.n	18be6 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   18c2e:	4620      	mov	r0, r4
   18c30:	f00c f833 	bl	24c9a <bt_le_conn_params_valid>
   18c34:	2800      	cmp	r0, #0
   18c36:	d1f3      	bne.n	18c20 <le_param_req+0x4c>
   18c38:	e7d5      	b.n	18be6 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   18c3a:	4621      	mov	r1, r4
   18c3c:	4638      	mov	r0, r7
   18c3e:	4798      	blx	r3
   18c40:	2800      	cmp	r0, #0
   18c42:	d0d0      	beq.n	18be6 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   18c44:	4620      	mov	r0, r4
   18c46:	f00c f828 	bl	24c9a <bt_le_conn_params_valid>
   18c4a:	b920      	cbnz	r0, 18c56 <le_param_req+0x82>
   18c4c:	e7cb      	b.n	18be6 <le_param_req+0x12>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18c4e:	d2cb      	bcs.n	18be8 <le_param_req+0x14>
		if (!cb->le_param_req) {
   18c50:	68b3      	ldr	r3, [r6, #8]
   18c52:	2b00      	cmp	r3, #0
   18c54:	d1f1      	bne.n	18c3a <le_param_req+0x66>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18c56:	3614      	adds	r6, #20
   18c58:	e7cf      	b.n	18bfa <le_param_req+0x26>
   18c5a:	bf00      	nop
   18c5c:	20002cb8 	.word	0x20002cb8
   18c60:	00026f98 	.word	0x00026f98
   18c64:	000296de 	.word	0x000296de
   18c68:	000296ae 	.word	0x000296ae
   18c6c:	00027c2a 	.word	0x00027c2a
   18c70:	00028176 	.word	0x00028176
   18c74:	00026fac 	.word	0x00026fac

00018c78 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   18c78:	b570      	push	{r4, r5, r6, lr}
   18c7a:	4606      	mov	r6, r0
   18c7c:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   18c7e:	4809      	ldr	r0, [pc, #36]	; (18ca4 <bt_conn_add_le+0x2c>)
   18c80:	2101      	movs	r1, #1
   18c82:	f7ff fb87 	bl	18394 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   18c86:	4604      	mov	r4, r0
   18c88:	b150      	cbz	r0, 18ca0 <bt_conn_add_le+0x28>
		return NULL;
	}

	conn->id = id;
   18c8a:	7206      	strb	r6, [r0, #8]
   18c8c:	2207      	movs	r2, #7
   18c8e:	4629      	mov	r1, r5
   18c90:	3090      	adds	r0, #144	; 0x90
   18c92:	f00b fedb 	bl	24a4c <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   18c96:	2301      	movs	r3, #1
   18c98:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   18c9a:	4b03      	ldr	r3, [pc, #12]	; (18ca8 <bt_conn_add_le+0x30>)
   18c9c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   18ca0:	4620      	mov	r0, r4
   18ca2:	bd70      	pop	{r4, r5, r6, pc}
   18ca4:	20001e20 	.word	0x20001e20
   18ca8:	00280018 	.word	0x00280018

00018cac <bt_conn_lookup_addr_le>:

	return bt_addr_le_eq(peer, &conn->le.init_addr);
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   18cac:	b570      	push	{r4, r5, r6, lr}
   18cae:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   18cb0:	480a      	ldr	r0, [pc, #40]	; (18cdc <bt_conn_lookup_addr_le+0x30>)
{
   18cb2:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   18cb4:	f7ff fd54 	bl	18760 <bt_conn_ref>
   18cb8:	4604      	mov	r4, r0

		if (!conn) {
   18cba:	b120      	cbz	r0, 18cc6 <bt_conn_lookup_addr_le+0x1a>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   18cbc:	7883      	ldrb	r3, [r0, #2]
   18cbe:	2b01      	cmp	r3, #1
   18cc0:	d004      	beq.n	18ccc <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
			bt_conn_unref(conn);
   18cc2:	f7ff fd7d 	bl	187c0 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   18cc6:	2400      	movs	r4, #0
}
   18cc8:	4620      	mov	r0, r4
   18cca:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   18ccc:	4632      	mov	r2, r6
   18cce:	4629      	mov	r1, r5
   18cd0:	f00c f97f 	bl	24fd2 <bt_conn_is_peer_addr_le>
   18cd4:	2800      	cmp	r0, #0
   18cd6:	d1f7      	bne.n	18cc8 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   18cd8:	4620      	mov	r0, r4
   18cda:	e7f2      	b.n	18cc2 <bt_conn_lookup_addr_le+0x16>
   18cdc:	20001e20 	.word	0x20001e20

00018ce0 <bt_conn_exists_le>:
{
   18ce0:	b5b0      	push	{r4, r5, r7, lr}
   18ce2:	af00      	add	r7, sp, #0
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   18ce4:	f7ff ffe2 	bl	18cac <bt_conn_lookup_addr_le>
	if (conn) {
   18ce8:	4604      	mov	r4, r0
   18cea:	b1e0      	cbz	r0, 18d26 <bt_conn_exists_le+0x46>
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   18cec:	7a83      	ldrb	r3, [r0, #10]
	switch (state) {
   18cee:	2b08      	cmp	r3, #8
   18cf0:	bf96      	itet	ls
   18cf2:	4a0e      	ldrls	r2, [pc, #56]	; (18d2c <bt_conn_exists_le+0x4c>)
		LOG_WRN("Found valid connection in %s state", state2str(conn->state));
   18cf4:	4b0e      	ldrhi	r3, [pc, #56]	; (18d30 <bt_conn_exists_le+0x50>)
   18cf6:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   18cfa:	466d      	mov	r5, sp
   18cfc:	b088      	sub	sp, #32
   18cfe:	466a      	mov	r2, sp
   18d00:	490c      	ldr	r1, [pc, #48]	; (18d34 <bt_conn_exists_le+0x54>)
   18d02:	480d      	ldr	r0, [pc, #52]	; (18d38 <bt_conn_exists_le+0x58>)
   18d04:	e9c2 1305 	strd	r1, r3, [r2, #20]
   18d08:	f44f 7300 	mov.w	r3, #512	; 0x200
   18d0c:	8393      	strh	r3, [r2, #28]
   18d0e:	4b0b      	ldr	r3, [pc, #44]	; (18d3c <bt_conn_exists_le+0x5c>)
   18d10:	f842 3f10 	str.w	r3, [r2, #16]!
   18d14:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
   18d18:	f00c f91f 	bl	24f5a <z_log_msg_static_create.constprop.0>
		bt_conn_unref(conn);
   18d1c:	4620      	mov	r0, r4
   18d1e:	46ad      	mov	sp, r5
   18d20:	f7ff fd4e 	bl	187c0 <bt_conn_unref>
		return true;
   18d24:	2001      	movs	r0, #1
}
   18d26:	46bd      	mov	sp, r7
   18d28:	bdb0      	pop	{r4, r5, r7, pc}
   18d2a:	bf00      	nop
   18d2c:	000273c8 	.word	0x000273c8
   18d30:	0002987e 	.word	0x0002987e
   18d34:	000299e7 	.word	0x000299e7
   18d38:	00026ff4 	.word	0x00026ff4
   18d3c:	01000003 	.word	0x01000003

00018d40 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   18d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18d42:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   18d44:	480e      	ldr	r0, [pc, #56]	; (18d80 <bt_conn_lookup_state_le+0x40>)
{
   18d46:	460e      	mov	r6, r1
   18d48:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   18d4a:	f7ff fd09 	bl	18760 <bt_conn_ref>

		if (!conn) {
   18d4e:	4604      	mov	r4, r0
   18d50:	b120      	cbz	r0, 18d5c <bt_conn_lookup_state_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   18d52:	7883      	ldrb	r3, [r0, #2]
   18d54:	2b01      	cmp	r3, #1
   18d56:	d003      	beq.n	18d60 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   18d58:	f7ff fd32 	bl	187c0 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   18d5c:	2400      	movs	r4, #0
   18d5e:	e00d      	b.n	18d7c <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   18d60:	b136      	cbz	r6, 18d70 <bt_conn_lookup_state_le+0x30>
   18d62:	4632      	mov	r2, r6
   18d64:	4629      	mov	r1, r5
   18d66:	f00c f934 	bl	24fd2 <bt_conn_is_peer_addr_le>
   18d6a:	b908      	cbnz	r0, 18d70 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   18d6c:	4620      	mov	r0, r4
   18d6e:	e7f3      	b.n	18d58 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   18d70:	7aa3      	ldrb	r3, [r4, #10]
   18d72:	42bb      	cmp	r3, r7
   18d74:	d1fa      	bne.n	18d6c <bt_conn_lookup_state_le+0x2c>
   18d76:	7a23      	ldrb	r3, [r4, #8]
   18d78:	42ab      	cmp	r3, r5
   18d7a:	d1f7      	bne.n	18d6c <bt_conn_lookup_state_le+0x2c>
}
   18d7c:	4620      	mov	r0, r4
   18d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18d80:	20001e20 	.word	0x20001e20

00018d84 <bt_conn_get_info>:
		return 0;
	}
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
   18d84:	b510      	push	{r4, lr}
	info->type = conn->type;
   18d86:	7883      	ldrb	r3, [r0, #2]
   18d88:	700b      	strb	r3, [r1, #0]
	info->role = conn->role;
   18d8a:	78c3      	ldrb	r3, [r0, #3]
   18d8c:	704b      	strb	r3, [r1, #1]
	info->id = conn->id;
   18d8e:	7a03      	ldrb	r3, [r0, #8]
   18d90:	708b      	strb	r3, [r1, #2]
	info->state = conn_internal_to_public_state(conn->state);
   18d92:	7a84      	ldrb	r4, [r0, #10]
	switch (state) {
   18d94:	2c08      	cmp	r4, #8
   18d96:	d80c      	bhi.n	18db2 <bt_conn_get_info+0x2e>
	info->state = conn_internal_to_public_state(conn->state);
   18d98:	4b27      	ldr	r3, [pc, #156]	; (18e38 <bt_conn_get_info+0xb4>)
   18d9a:	5d1b      	ldrb	r3, [r3, r4]
   18d9c:	770b      	strb	r3, [r1, #28]
	info->security.flags = 0;
	info->security.level = bt_conn_get_security(conn);
   18d9e:	2301      	movs	r3, #1
   18da0:	774b      	strb	r3, [r1, #29]
#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
	info->security.enc_key_size = bt_conn_enc_key_size(conn);
#else
	info->security.enc_key_size = 0;
   18da2:	2300      	movs	r3, #0
   18da4:	83cb      	strh	r3, [r1, #30]
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

	switch (conn->type) {
   18da6:	7883      	ldrb	r3, [r0, #2]
   18da8:	2b01      	cmp	r3, #1
   18daa:	d012      	beq.n	18dd2 <bt_conn_get_info+0x4e>
		}
		return 0;
#endif
	}

	return -EINVAL;
   18dac:	f06f 0015 	mvn.w	r0, #21
}
   18db0:	bd10      	pop	{r4, pc}
		__ASSERT(false, "Invalid conn state %u", state);
   18db2:	4a22      	ldr	r2, [pc, #136]	; (18e3c <bt_conn_get_info+0xb8>)
   18db4:	4922      	ldr	r1, [pc, #136]	; (18e40 <bt_conn_get_info+0xbc>)
   18db6:	4823      	ldr	r0, [pc, #140]	; (18e44 <bt_conn_get_info+0xc0>)
   18db8:	f640 13bd 	movw	r3, #2493	; 0x9bd
   18dbc:	f00b fa42 	bl	24244 <assert_print>
   18dc0:	4821      	ldr	r0, [pc, #132]	; (18e48 <bt_conn_get_info+0xc4>)
   18dc2:	4621      	mov	r1, r4
   18dc4:	f00b fa3e 	bl	24244 <assert_print>
   18dc8:	481c      	ldr	r0, [pc, #112]	; (18e3c <bt_conn_get_info+0xb8>)
   18dca:	f640 11bd 	movw	r1, #2493	; 0x9bd
   18dce:	f00b fa32 	bl	24236 <assert_post_action>
		info->le.dst = &conn->le.dst;
   18dd2:	f100 0390 	add.w	r3, r0, #144	; 0x90
   18dd6:	608b      	str	r3, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
   18dd8:	7a03      	ldrb	r3, [r0, #8]
   18dda:	4a1c      	ldr	r2, [pc, #112]	; (18e4c <bt_conn_get_info+0xc8>)
   18ddc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   18de0:	4413      	add	r3, r2
   18de2:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   18de4:	78c4      	ldrb	r4, [r0, #3]
			info->le.remote = &conn->le.resp_addr;
   18de6:	f100 039e 	add.w	r3, r0, #158	; 0x9e
			info->le.local = &conn->le.init_addr;
   18dea:	f100 0297 	add.w	r2, r0, #151	; 0x97
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   18dee:	b114      	cbz	r4, 18df6 <bt_conn_get_info+0x72>
   18df0:	461c      	mov	r4, r3
   18df2:	4613      	mov	r3, r2
   18df4:	4622      	mov	r2, r4
			info->le.remote = &conn->le.resp_addr;
   18df6:	e9c1 2303 	strd	r2, r3, [r1, #12]
		info->le.interval = conn->le.interval;
   18dfa:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
   18dfe:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
   18e00:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	; 0xac
   18e04:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
   18e06:	f8b0 30ae 	ldrh.w	r3, [r0, #174]	; 0xae
   18e0a:	830b      	strh	r3, [r1, #24]
		if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_SC)) {
   18e0c:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   18e10:	b123      	cbz	r3, 18e1c <bt_conn_get_info+0x98>
   18e12:	7b5b      	ldrb	r3, [r3, #13]
   18e14:	06da      	lsls	r2, r3, #27
			info->security.flags |= BT_SECURITY_FLAG_SC;
   18e16:	bf44      	itt	mi
   18e18:	2301      	movmi	r3, #1
   18e1a:	77cb      	strbmi	r3, [r1, #31]
		if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_OOB)) {
   18e1c:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   18e20:	b113      	cbz	r3, 18e28 <bt_conn_get_info+0xa4>
   18e22:	7b5b      	ldrb	r3, [r3, #13]
   18e24:	069b      	lsls	r3, r3, #26
   18e26:	d401      	bmi.n	18e2c <bt_conn_get_info+0xa8>
		return 0;
   18e28:	2000      	movs	r0, #0
   18e2a:	e7c1      	b.n	18db0 <bt_conn_get_info+0x2c>
			info->security.flags |= BT_SECURITY_FLAG_OOB;
   18e2c:	7fcb      	ldrb	r3, [r1, #31]
   18e2e:	f043 0302 	orr.w	r3, r3, #2
   18e32:	77cb      	strb	r3, [r1, #31]
   18e34:	e7f8      	b.n	18e28 <bt_conn_get_info+0xa4>
   18e36:	bf00      	nop
   18e38:	00029a71 	.word	0x00029a71
   18e3c:	000296ae 	.word	0x000296ae
   18e40:	0002a7c0 	.word	0x0002a7c0
   18e44:	00027c2a 	.word	0x00027c2a
   18e48:	00029a0a 	.word	0x00029a0a
   18e4c:	200003a8 	.word	0x200003a8

00018e50 <send_conn_le_param_update>:
{
   18e50:	b538      	push	{r3, r4, r5, lr}
   18e52:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   18e54:	4608      	mov	r0, r1
{
   18e56:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   18e58:	f00b ff1f 	bl	24c9a <bt_le_conn_params_valid>
   18e5c:	b348      	cbz	r0, 18eb2 <send_conn_le_param_update+0x62>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   18e5e:	4b16      	ldr	r3, [pc, #88]	; (18eb8 <send_conn_le_param_update+0x68>)
   18e60:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
   18e64:	0799      	lsls	r1, r3, #30
   18e66:	d407      	bmi.n	18e78 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   18e68:	78e3      	ldrb	r3, [r4, #3]
   18e6a:	b183      	cbz	r3, 18e8e <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   18e6c:	4629      	mov	r1, r5
   18e6e:	4620      	mov	r0, r4
}
   18e70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   18e74:	f000 bae0 	b.w	19438 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   18e78:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
   18e7c:	079a      	lsls	r2, r3, #30
   18e7e:	d5f3      	bpl.n	18e68 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18e80:	f3bf 8f5b 	dmb	ish
   18e84:	6863      	ldr	r3, [r4, #4]
   18e86:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   18e8a:	055b      	lsls	r3, r3, #21
   18e8c:	d4ec      	bmi.n	18e68 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   18e8e:	4629      	mov	r1, r5
   18e90:	4620      	mov	r0, r4
   18e92:	f00c f8c0 	bl	25016 <bt_conn_le_conn_update>
		if (rc == 0) {
   18e96:	b958      	cbnz	r0, 18eb0 <send_conn_le_param_update+0x60>
			conn->le.interval_min = param->interval_min;
   18e98:	882b      	ldrh	r3, [r5, #0]
   18e9a:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   18e9e:	886b      	ldrh	r3, [r5, #2]
   18ea0:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   18ea4:	88ab      	ldrh	r3, [r5, #4]
   18ea6:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   18eaa:	88eb      	ldrh	r3, [r5, #6]
   18eac:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   18eb0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   18eb2:	f06f 0015 	mvn.w	r0, #21
   18eb6:	e7fb      	b.n	18eb0 <send_conn_le_param_update+0x60>
   18eb8:	200003a8 	.word	0x200003a8

00018ebc <deferred_work>:
{
   18ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18ec0:	b082      	sub	sp, #8
	if (conn->state == BT_CONN_DISCONNECTED) {
   18ec2:	f810 3c56 	ldrb.w	r3, [r0, #-86]
{
   18ec6:	af00      	add	r7, sp, #0
   18ec8:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   18eca:	f1a0 0660 	sub.w	r6, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   18ece:	bb8b      	cbnz	r3, 18f34 <deferred_work+0x78>
		bt_l2cap_disconnected(conn);
   18ed0:	4630      	mov	r0, r6
   18ed2:	f00c f8fd 	bl	250d0 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   18ed6:	4b47      	ldr	r3, [pc, #284]	; (18ff4 <deferred_work+0x138>)
   18ed8:	681d      	ldr	r5, [r3, #0]
   18eda:	b99d      	cbnz	r5, 18f04 <deferred_work+0x48>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18edc:	4d46      	ldr	r5, [pc, #280]	; (18ff8 <deferred_work+0x13c>)
   18ede:	f8df 813c 	ldr.w	r8, [pc, #316]	; 1901c <deferred_work+0x160>
   18ee2:	4545      	cmp	r5, r8
   18ee4:	d91e      	bls.n	18f24 <deferred_work+0x68>
   18ee6:	4945      	ldr	r1, [pc, #276]	; (18ffc <deferred_work+0x140>)
   18ee8:	4a45      	ldr	r2, [pc, #276]	; (19000 <deferred_work+0x144>)
   18eea:	4846      	ldr	r0, [pc, #280]	; (19004 <deferred_work+0x148>)
   18eec:	f240 6303 	movw	r3, #1539	; 0x603
   18ef0:	f00b f9a8 	bl	24244 <assert_print>
   18ef4:	4844      	ldr	r0, [pc, #272]	; (19008 <deferred_work+0x14c>)
   18ef6:	f00b f9a5 	bl	24244 <assert_print>
   18efa:	4841      	ldr	r0, [pc, #260]	; (19000 <deferred_work+0x144>)
   18efc:	f240 6103 	movw	r1, #1539	; 0x603
   18f00:	f00b f999 	bl	24236 <assert_post_action>
		if (cb->disconnected) {
   18f04:	686b      	ldr	r3, [r5, #4]
   18f06:	b11b      	cbz	r3, 18f10 <deferred_work+0x54>
			cb->disconnected(conn, conn->err);
   18f08:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   18f0c:	4630      	mov	r0, r6
   18f0e:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   18f10:	692d      	ldr	r5, [r5, #16]
   18f12:	e7e2      	b.n	18eda <deferred_work+0x1e>
		if (cb->disconnected) {
   18f14:	686b      	ldr	r3, [r5, #4]
   18f16:	b11b      	cbz	r3, 18f20 <deferred_work+0x64>
			cb->disconnected(conn, conn->err);
   18f18:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   18f1c:	4630      	mov	r0, r6
   18f1e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   18f20:	3514      	adds	r5, #20
   18f22:	e7de      	b.n	18ee2 <deferred_work+0x26>
   18f24:	d3f6      	bcc.n	18f14 <deferred_work+0x58>
		bt_conn_unref(conn);
   18f26:	4630      	mov	r0, r6
   18f28:	f7ff fc4a 	bl	187c0 <bt_conn_unref>
}
   18f2c:	3708      	adds	r7, #8
   18f2e:	46bd      	mov	sp, r7
   18f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (conn->type != BT_CONN_TYPE_LE) {
   18f34:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   18f38:	2b01      	cmp	r3, #1
   18f3a:	d1f7      	bne.n	18f2c <deferred_work+0x70>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   18f3c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   18f40:	f1a0 055c 	sub.w	r5, r0, #92	; 0x5c
   18f44:	e855 3f00 	ldrex	r3, [r5]
   18f48:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   18f4c:	e845 2100 	strex	r1, r2, [r5]
   18f50:	2900      	cmp	r1, #0
   18f52:	d1f7      	bne.n	18f44 <deferred_work+0x88>
   18f54:	f3bf 8f5b 	dmb	ish
   18f58:	0599      	lsls	r1, r3, #22
   18f5a:	d531      	bpl.n	18fc0 <deferred_work+0x104>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   18f5c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   18f5e:	603b      	str	r3, [r7, #0]
   18f60:	6d23      	ldr	r3, [r4, #80]	; 0x50
   18f62:	607b      	str	r3, [r7, #4]
		err = send_conn_le_param_update(conn, param);
   18f64:	4639      	mov	r1, r7
   18f66:	4630      	mov	r0, r6
   18f68:	f7ff ff72 	bl	18e50 <send_conn_le_param_update>
		if (!err) {
   18f6c:	b9c0      	cbnz	r0, 18fa0 <deferred_work+0xe4>
   18f6e:	f3bf 8f5b 	dmb	ish
   18f72:	e855 3f00 	ldrex	r3, [r5]
   18f76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   18f7a:	e845 3200 	strex	r2, r3, [r5]
   18f7e:	2a00      	cmp	r2, #0
   18f80:	d1f7      	bne.n	18f72 <deferred_work+0xb6>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18f82:	f3bf 8f5b 	dmb	ish
   18f86:	f3bf 8f5b 	dmb	ish
   18f8a:	e855 3f00 	ldrex	r3, [r5]
   18f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   18f92:	e845 3200 	strex	r2, r3, [r5]
   18f96:	2a00      	cmp	r2, #0
   18f98:	d1f7      	bne.n	18f8a <deferred_work+0xce>
   18f9a:	f3bf 8f5b 	dmb	ish
   18f9e:	e7c5      	b.n	18f2c <deferred_work+0x70>
			LOG_WRN("Send LE param update failed (err %d)", err);
   18fa0:	466c      	mov	r4, sp
   18fa2:	b088      	sub	sp, #32
   18fa4:	466a      	mov	r2, sp
   18fa6:	4b19      	ldr	r3, [pc, #100]	; (1900c <deferred_work+0x150>)
			LOG_WRN("Send auto LE param update failed (err %d)",
   18fa8:	e9c2 3005 	strd	r3, r0, [r2, #20]
   18fac:	2303      	movs	r3, #3
   18fae:	f842 3f10 	str.w	r3, [r2, #16]!
   18fb2:	4817      	ldr	r0, [pc, #92]	; (19010 <deferred_work+0x154>)
   18fb4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   18fb8:	f00b ffcf 	bl	24f5a <z_log_msg_static_create.constprop.0>
   18fbc:	46a5      	mov	sp, r4
   18fbe:	e7e2      	b.n	18f86 <deferred_work+0xca>
		param = BT_LE_CONN_PARAM(
   18fc0:	4a14      	ldr	r2, [pc, #80]	; (19014 <deferred_work+0x158>)
   18fc2:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
   18fc6:	e9c7 2300 	strd	r2, r3, [r7]
		err = send_conn_le_param_update(conn, param);
   18fca:	4639      	mov	r1, r7
   18fcc:	4630      	mov	r0, r6
   18fce:	f7ff ff3f 	bl	18e50 <send_conn_le_param_update>
		if (!err) {
   18fd2:	b950      	cbnz	r0, 18fea <deferred_work+0x12e>
   18fd4:	f3bf 8f5b 	dmb	ish
   18fd8:	e855 3f00 	ldrex	r3, [r5]
   18fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   18fe0:	e845 3200 	strex	r2, r3, [r5]
   18fe4:	2a00      	cmp	r2, #0
   18fe6:	d0cc      	beq.n	18f82 <deferred_work+0xc6>
   18fe8:	e7f6      	b.n	18fd8 <deferred_work+0x11c>
			LOG_WRN("Send auto LE param update failed (err %d)",
   18fea:	466c      	mov	r4, sp
   18fec:	b088      	sub	sp, #32
   18fee:	466a      	mov	r2, sp
   18ff0:	4b09      	ldr	r3, [pc, #36]	; (19018 <deferred_work+0x15c>)
   18ff2:	e7d9      	b.n	18fa8 <deferred_work+0xec>
   18ff4:	20002cb8 	.word	0x20002cb8
   18ff8:	00026f98 	.word	0x00026f98
   18ffc:	000296de 	.word	0x000296de
   19000:	000296ae 	.word	0x000296ae
   19004:	00027c2a 	.word	0x00027c2a
   19008:	00028176 	.word	0x00028176
   1900c:	00029a22 	.word	0x00029a22
   19010:	00026ff4 	.word	0x00026ff4
   19014:	03200320 	.word	0x03200320
   19018:	00029a47 	.word	0x00029a47
   1901c:	00026fac 	.word	0x00026fac

00019020 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   19020:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   19022:	4801      	ldr	r0, [pc, #4]	; (19028 <bt_conn_create_frag_timeout+0x8>)
   19024:	f7ff bd34 	b.w	18a90 <bt_conn_create_pdu_timeout>
   19028:	20000a34 	.word	0x20000a34

0001902c <bt_conn_process_tx>:
{
   1902c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   19030:	7a83      	ldrb	r3, [r0, #10]
{
   19032:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   19034:	b993      	cbnz	r3, 1905c <bt_conn_process_tx+0x30>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19036:	f3bf 8f5b 	dmb	ish
   1903a:	1d03      	adds	r3, r0, #4
   1903c:	e853 2f00 	ldrex	r2, [r3]
   19040:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   19044:	e843 1400 	strex	r4, r1, [r3]
   19048:	2c00      	cmp	r4, #0
   1904a:	d1f7      	bne.n	1903c <bt_conn_process_tx+0x10>
   1904c:	f3bf 8f5b 	dmb	ish
   19050:	0653      	lsls	r3, r2, #25
   19052:	d503      	bpl.n	1905c <bt_conn_process_tx+0x30>
}
   19054:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		conn_cleanup(conn);
   19058:	f7ff b9ce 	b.w	183f8 <conn_cleanup>
	return z_impl_k_queue_peek_head(queue);
   1905c:	f105 0038 	add.w	r0, r5, #56	; 0x38
   19060:	f00d fc9f 	bl	269a2 <z_impl_k_queue_peek_head>
	BT_ASSERT(buf);
   19064:	4604      	mov	r4, r0
   19066:	b960      	cbnz	r0, 19082 <bt_conn_process_tx+0x56>
   19068:	4a33      	ldr	r2, [pc, #204]	; (19138 <bt_conn_process_tx+0x10c>)
   1906a:	4934      	ldr	r1, [pc, #208]	; (1913c <bt_conn_process_tx+0x110>)
   1906c:	4834      	ldr	r0, [pc, #208]	; (19140 <bt_conn_process_tx+0x114>)
   1906e:	f44f 736b 	mov.w	r3, #940	; 0x3ac
   19072:	f00b f8e7 	bl	24244 <assert_print>
   19076:	4040      	eors	r0, r0
   19078:	f380 8811 	msr	BASEPRI, r0
   1907c:	f04f 0003 	mov.w	r0, #3
   19080:	df02      	svc	2
	buf = net_buf_ref(buf);
   19082:	4620      	mov	r0, r4
   19084:	f002 fe00 	bl	1bc88 <net_buf_ref>
	return bt_dev.le.acl_mtu;
   19088:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 19144 <bt_conn_process_tx+0x118>
	if (fits_single_ctlr_buf(buf, conn) && !tx_data(buf)->is_cont) {
   1908c:	8a02      	ldrh	r2, [r0, #16]
   1908e:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
   19092:	429a      	cmp	r2, r3
	buf = net_buf_ref(buf);
   19094:	4604      	mov	r4, r0
	return bt_dev.le.acl_mtu;
   19096:	7f02      	ldrb	r2, [r0, #28]
	if (fits_single_ctlr_buf(buf, conn) && !tx_data(buf)->is_cont) {
   19098:	d807      	bhi.n	190aa <bt_conn_process_tx+0x7e>
   1909a:	b932      	cbnz	r2, 190aa <bt_conn_process_tx+0x7e>
		return send_frag(conn, buf, NULL, FRAG_SINGLE);
   1909c:	2302      	movs	r3, #2
	return send_frag(conn, buf, NULL, FRAG_END);
   1909e:	4621      	mov	r1, r4
   190a0:	4628      	mov	r0, r5
   190a2:	f7ff f877 	bl	18194 <send_frag>
   190a6:	4606      	mov	r6, r0
   190a8:	e030      	b.n	1910c <bt_conn_process_tx+0xe0>
	if (tx_data(buf)->is_cont) {
   190aa:	4617      	mov	r7, r2
		frag = bt_conn_create_frag(0);
   190ac:	f04f 0a00 	mov.w	sl, #0
	while (buf->len > conn_mtu(conn)) {
   190b0:	8a22      	ldrh	r2, [r4, #16]
   190b2:	f8b9 3104 	ldrh.w	r3, [r9, #260]	; 0x104
   190b6:	429a      	cmp	r2, r3
   190b8:	d804      	bhi.n	190c4 <bt_conn_process_tx+0x98>
	tx_data(buf)->is_cont = true;
   190ba:	2301      	movs	r3, #1
   190bc:	7723      	strb	r3, [r4, #28]
	return send_frag(conn, buf, NULL, FRAG_END);
   190be:	2200      	movs	r2, #0
   190c0:	2303      	movs	r3, #3
   190c2:	e7ec      	b.n	1909e <bt_conn_process_tx+0x72>
		frag = bt_conn_create_frag(0);
   190c4:	f04f 33ff 	mov.w	r3, #4294967295
   190c8:	f04f 32ff 	mov.w	r2, #4294967295
   190cc:	2000      	movs	r0, #0
   190ce:	f7ff ffa7 	bl	19020 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   190d2:	7aab      	ldrb	r3, [r5, #10]
   190d4:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   190d6:	4680      	mov	r8, r0
	if (conn->state != BT_CONN_CONNECTED) {
   190d8:	d006      	beq.n	190e8 <bt_conn_process_tx+0xbc>
		net_buf_unref(frag);
   190da:	f002 fd91 	bl	1bc00 <net_buf_unref>
	net_buf_unref(buf);
   190de:	4620      	mov	r0, r4
}
   190e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	net_buf_unref(buf);
   190e4:	f002 bd8c 	b.w	1bc00 <net_buf_unref>
	tx_data(frag)->tx = NULL;
   190e8:	f8c0 a018 	str.w	sl, [r0, #24]
	tx_data(frag)->is_cont = false;
   190ec:	f880 a01c 	strb.w	sl, [r0, #28]
		err = send_frag(conn, buf, frag, flags);
   190f0:	4602      	mov	r2, r0
   190f2:	463b      	mov	r3, r7
   190f4:	4621      	mov	r1, r4
   190f6:	4628      	mov	r0, r5
   190f8:	f7ff f84c 	bl	18194 <send_frag>
		if (err) {
   190fc:	4606      	mov	r6, r0
   190fe:	b1b8      	cbz	r0, 19130 <bt_conn_process_tx+0x104>
			tx_data(buf)->is_cont = flags != FRAG_START;
   19100:	f007 0701 	and.w	r7, r7, #1
   19104:	7727      	strb	r7, [r4, #28]
			net_buf_unref(frag);
   19106:	4640      	mov	r0, r8
   19108:	f002 fd7a 	bl	1bc00 <net_buf_unref>
	net_buf_unref(buf);
   1910c:	4620      	mov	r0, r4
   1910e:	f002 fd77 	bl	1bc00 <net_buf_unref>
	if (err  == -EIO) {
   19112:	3605      	adds	r6, #5
   19114:	d10e      	bne.n	19134 <bt_conn_process_tx+0x108>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   19116:	69a6      	ldr	r6, [r4, #24]
		tx_data(buf)->tx = NULL;
   19118:	2300      	movs	r3, #0
   1911a:	61a3      	str	r3, [r4, #24]
		net_buf_unref(buf);
   1911c:	4620      	mov	r0, r4
   1911e:	f002 fd6f 	bl	1bc00 <net_buf_unref>
		if (tx) {
   19122:	b13e      	cbz	r6, 19134 <bt_conn_process_tx+0x108>
			conn_tx_destroy(conn, tx);
   19124:	4631      	mov	r1, r6
   19126:	4628      	mov	r0, r5
}
   19128:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			conn_tx_destroy(conn, tx);
   1912c:	f7ff b80c 	b.w	18148 <conn_tx_destroy>
		flags = FRAG_CONT;
   19130:	2701      	movs	r7, #1
   19132:	e7bd      	b.n	190b0 <bt_conn_process_tx+0x84>
}
   19134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19138:	000296ae 	.word	0x000296ae
   1913c:	0002a23d 	.word	0x0002a23d
   19140:	00027c2a 	.word	0x00027c2a
   19144:	200003a8 	.word	0x200003a8

00019148 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   19148:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   1914a:	480c      	ldr	r0, [pc, #48]	; (1917c <bt_conn_init+0x34>)
   1914c:	f00d fc07 	bl	2695e <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   19150:	490b      	ldr	r1, [pc, #44]	; (19180 <bt_conn_init+0x38>)
   19152:	480a      	ldr	r0, [pc, #40]	; (1917c <bt_conn_init+0x34>)
   19154:	f00d fc10 	bl	26978 <k_queue_append>
   19158:	490a      	ldr	r1, [pc, #40]	; (19184 <bt_conn_init+0x3c>)
   1915a:	4808      	ldr	r0, [pc, #32]	; (1917c <bt_conn_init+0x34>)
   1915c:	f00d fc0c 	bl	26978 <k_queue_append>
   19160:	4909      	ldr	r1, [pc, #36]	; (19188 <bt_conn_init+0x40>)
   19162:	4806      	ldr	r0, [pc, #24]	; (1917c <bt_conn_init+0x34>)
   19164:	f00d fc08 	bl	26978 <k_queue_append>
	}

	bt_att_init();
   19168:	f001 f976 	bl	1a458 <bt_att_init>

	err = bt_smp_init();
   1916c:	f00c fe79 	bl	25e62 <bt_smp_init>
	if (err) {
   19170:	4604      	mov	r4, r0
   19172:	b908      	cbnz	r0, 19178 <bt_conn_init+0x30>
		return err;
	}

	bt_l2cap_init();
   19174:	f00b ffea 	bl	2514c <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   19178:	4620      	mov	r0, r4
   1917a:	bd10      	pop	{r4, pc}
   1917c:	200009b0 	.word	0x200009b0
   19180:	20002c88 	.word	0x20002c88
   19184:	20002c98 	.word	0x20002c98
   19188:	20002ca8 	.word	0x20002ca8

0001918c <l2cap_create_le_sig_pdu.part.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1918c:	b580      	push	{r7, lr}
   1918e:	af00      	add	r7, sp, #0
	buf = bt_l2cap_create_pdu_timeout(pool, 0, L2CAP_RTX_TIMEOUT);
	if (!buf) {
		/* If it was not possible to allocate a buffer within the
		 * timeout return NULL.
		 */
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   19190:	b088      	sub	sp, #32
   19192:	466a      	mov	r2, sp
   19194:	4b06      	ldr	r3, [pc, #24]	; (191b0 <l2cap_create_le_sig_pdu.part.0+0x24>)
   19196:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1919a:	2303      	movs	r3, #3
   1919c:	f842 3f10 	str.w	r3, [r2, #16]!
   191a0:	4804      	ldr	r0, [pc, #16]	; (191b4 <l2cap_create_le_sig_pdu.part.0+0x28>)
   191a2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   191a6:	f00b ff5f 	bl	25068 <z_log_msg_static_create.constprop.0>
	hdr->code = code;
	hdr->ident = ident;
	hdr->len = sys_cpu_to_le16(len);

	return buf;
}
   191aa:	2000      	movs	r0, #0
   191ac:	46bd      	mov	sp, r7
   191ae:	bd80      	pop	{r7, pc}
   191b0:	00029af3 	.word	0x00029af3
   191b4:	0002701c 	.word	0x0002701c

000191b8 <l2cap_accept.part.0>:
	 */
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   191b8:	b580      	push	{r7, lr}
   191ba:	af00      	add	r7, sp, #0
		*chan = &l2cap->chan.chan;

		return 0;
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);
   191bc:	b088      	sub	sp, #32
   191be:	466a      	mov	r2, sp
   191c0:	4b07      	ldr	r3, [pc, #28]	; (191e0 <l2cap_accept.part.0+0x28>)
   191c2:	e9c2 3005 	strd	r3, r0, [r2, #20]
   191c6:	2303      	movs	r3, #3
   191c8:	f842 3f10 	str.w	r3, [r2, #16]!
   191cc:	4805      	ldr	r0, [pc, #20]	; (191e4 <l2cap_accept.part.0+0x2c>)
   191ce:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   191d2:	f00b ff49 	bl	25068 <z_log_msg_static_create.constprop.0>

	return -ENOMEM;
}
   191d6:	f06f 000b 	mvn.w	r0, #11
   191da:	46bd      	mov	sp, r7
   191dc:	bd80      	pop	{r7, pc}
   191de:	bf00      	nop
   191e0:	00029b1b 	.word	0x00029b1b
   191e4:	0002701c 	.word	0x0002701c

000191e8 <l2cap_accept>:
		if (l2cap->chan.chan.conn) {
   191e8:	4b04      	ldr	r3, [pc, #16]	; (191fc <l2cap_accept+0x14>)
   191ea:	681a      	ldr	r2, [r3, #0]
   191ec:	b10a      	cbz	r2, 191f2 <l2cap_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
   191ee:	f7ff bfe3 	b.w	191b8 <l2cap_accept.part.0>
		l2cap->chan.chan.ops = &ops;
   191f2:	4803      	ldr	r0, [pc, #12]	; (19200 <l2cap_accept+0x18>)
   191f4:	6058      	str	r0, [r3, #4]
		*chan = &l2cap->chan.chan;
   191f6:	600b      	str	r3, [r1, #0]
}
   191f8:	4610      	mov	r0, r2
   191fa:	4770      	bx	lr
   191fc:	20002cbc 	.word	0x20002cbc
   19200:	0002740c 	.word	0x0002740c

00019204 <bt_l2cap_connected>:
{
   19204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   19206:	4d2c      	ldr	r5, [pc, #176]	; (192b8 <bt_l2cap_connected+0xb4>)
   19208:	4f2c      	ldr	r7, [pc, #176]	; (192bc <bt_l2cap_connected+0xb8>)
{
   1920a:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1920c:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1920e:	42bd      	cmp	r5, r7
   19210:	d94e      	bls.n	192b0 <bt_l2cap_connected+0xac>
   19212:	492b      	ldr	r1, [pc, #172]	; (192c0 <bt_l2cap_connected+0xbc>)
   19214:	4a2b      	ldr	r2, [pc, #172]	; (192c4 <bt_l2cap_connected+0xc0>)
   19216:	482c      	ldr	r0, [pc, #176]	; (192c8 <bt_l2cap_connected+0xc4>)
   19218:	f44f 73c2 	mov.w	r3, #388	; 0x184
   1921c:	f00b f812 	bl	24244 <assert_print>
   19220:	482a      	ldr	r0, [pc, #168]	; (192cc <bt_l2cap_connected+0xc8>)
   19222:	f00b f80f 	bl	24244 <assert_print>
   19226:	4827      	ldr	r0, [pc, #156]	; (192c4 <bt_l2cap_connected+0xc0>)
   19228:	f44f 71c2 	mov.w	r1, #388	; 0x184
   1922c:	f00b f803 	bl	24236 <assert_post_action>
		if (fchan->accept(conn, &chan) < 0) {
   19230:	686b      	ldr	r3, [r5, #4]
   19232:	a901      	add	r1, sp, #4
   19234:	4620      	mov	r0, r4
   19236:	4798      	blx	r3
   19238:	2800      	cmp	r0, #0
   1923a:	db34      	blt.n	192a6 <bt_l2cap_connected+0xa2>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   1923c:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   1923e:	882a      	ldrh	r2, [r5, #0]
   19240:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   19242:	849a      	strh	r2, [r3, #36]	; 0x24
   19244:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   19248:	68a8      	ldr	r0, [r5, #8]
   1924a:	f3bf 8f5b 	dmb	ish
   1924e:	e852 1f00 	ldrex	r1, [r2]
   19252:	e842 6c00 	strex	ip, r6, [r2]
   19256:	f1bc 0f00 	cmp.w	ip, #0
   1925a:	d1f8      	bne.n	1924e <bt_l2cap_connected+0x4a>
   1925c:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   19260:	609e      	str	r6, [r3, #8]
	return list->tail;
   19262:	6da1      	ldr	r1, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   19264:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   19268:	b9f9      	cbnz	r1, 192aa <bt_l2cap_connected+0xa6>
	list->head = node;
   1926a:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
	chan->conn = conn;
   1926e:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   19270:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   19272:	9801      	ldr	r0, [sp, #4]
   19274:	6843      	ldr	r3, [r0, #4]
   19276:	681b      	ldr	r3, [r3, #0]
   19278:	b103      	cbz	r3, 1927c <bt_l2cap_connected+0x78>
			chan->ops->connected(chan);
   1927a:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1927c:	9b01      	ldr	r3, [sp, #4]
   1927e:	f3bf 8f5b 	dmb	ish
   19282:	3310      	adds	r3, #16
   19284:	e853 1f00 	ldrex	r1, [r3]
   19288:	f041 0101 	orr.w	r1, r1, #1
   1928c:	e843 1200 	strex	r2, r1, [r3]
   19290:	2a00      	cmp	r2, #0
   19292:	d1f7      	bne.n	19284 <bt_l2cap_connected+0x80>
   19294:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   19298:	9801      	ldr	r0, [sp, #4]
   1929a:	6843      	ldr	r3, [r0, #4]
   1929c:	69db      	ldr	r3, [r3, #28]
   1929e:	b113      	cbz	r3, 192a6 <bt_l2cap_connected+0xa2>
			chan->ops->status(chan, chan->status);
   192a0:	f100 0110 	add.w	r1, r0, #16
   192a4:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   192a6:	350c      	adds	r5, #12
   192a8:	e7b1      	b.n	1920e <bt_l2cap_connected+0xa>
	parent->next = child;
   192aa:	600a      	str	r2, [r1, #0]
	list->tail = node;
   192ac:	65a2      	str	r2, [r4, #88]	; 0x58
}
   192ae:	e7de      	b.n	1926e <bt_l2cap_connected+0x6a>
   192b0:	d3be      	bcc.n	19230 <bt_l2cap_connected+0x2c>
}
   192b2:	b003      	add	sp, #12
   192b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   192b6:	bf00      	nop
   192b8:	00026f74 	.word	0x00026f74
   192bc:	00026f98 	.word	0x00026f98
   192c0:	00029b73 	.word	0x00029b73
   192c4:	00029b42 	.word	0x00029b42
   192c8:	00027c2a 	.word	0x00027c2a
   192cc:	00028176 	.word	0x00028176

000192d0 <l2cap_recv>:
{
   192d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   192d2:	b089      	sub	sp, #36	; 0x24
	if (buf->len < sizeof(*hdr)) {
   192d4:	8a0b      	ldrh	r3, [r1, #16]
   192d6:	2b03      	cmp	r3, #3
{
   192d8:	af02      	add	r7, sp, #8
   192da:	4606      	mov	r6, r0
   192dc:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   192de:	d80b      	bhi.n	192f8 <l2cap_recv+0x28>
		LOG_ERR("Too small L2CAP signaling PDU");
   192e0:	4b30      	ldr	r3, [pc, #192]	; (193a4 <l2cap_recv+0xd4>)
		LOG_ERR("Invalid ident value in L2CAP PDU");
   192e2:	617b      	str	r3, [r7, #20]
   192e4:	2302      	movs	r3, #2
   192e6:	4830      	ldr	r0, [pc, #192]	; (193a8 <l2cap_recv+0xd8>)
   192e8:	613b      	str	r3, [r7, #16]
   192ea:	f107 0210 	add.w	r2, r7, #16
   192ee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   192f2:	f00b feb9 	bl	25068 <z_log_msg_static_create.constprop.0>
		return 0;
   192f6:	e019      	b.n	1932c <l2cap_recv+0x5c>
	return net_buf_simple_pull_mem(&buf->b, len);
   192f8:	2104      	movs	r1, #4
   192fa:	f105 000c 	add.w	r0, r5, #12
   192fe:	f002 fda5 	bl	1be4c <net_buf_simple_pull_mem>
	if (buf->len != len) {
   19302:	8a29      	ldrh	r1, [r5, #16]
	len = sys_le16_to_cpu(hdr->len);
   19304:	8843      	ldrh	r3, [r0, #2]
	if (buf->len != len) {
   19306:	4299      	cmp	r1, r3
   19308:	4604      	mov	r4, r0
   1930a:	d013      	beq.n	19334 <l2cap_recv+0x64>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1930c:	466c      	mov	r4, sp
   1930e:	b088      	sub	sp, #32
   19310:	aa02      	add	r2, sp, #8
   19312:	4826      	ldr	r0, [pc, #152]	; (193ac <l2cap_recv+0xdc>)
   19314:	61d3      	str	r3, [r2, #28]
   19316:	2304      	movs	r3, #4
   19318:	e9c2 0105 	strd	r0, r1, [r2, #20]
   1931c:	f842 3f10 	str.w	r3, [r2, #16]!
   19320:	4821      	ldr	r0, [pc, #132]	; (193a8 <l2cap_recv+0xd8>)
   19322:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   19326:	f00b fe9f 	bl	25068 <z_log_msg_static_create.constprop.0>
   1932a:	46a5      	mov	sp, r4
}
   1932c:	2000      	movs	r0, #0
   1932e:	371c      	adds	r7, #28
   19330:	46bd      	mov	sp, r7
   19332:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   19334:	7843      	ldrb	r3, [r0, #1]
   19336:	b90b      	cbnz	r3, 1933c <l2cap_recv+0x6c>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   19338:	4b1d      	ldr	r3, [pc, #116]	; (193b0 <l2cap_recv+0xe0>)
   1933a:	e7d2      	b.n	192e2 <l2cap_recv+0x12>
	switch (hdr->code) {
   1933c:	7803      	ldrb	r3, [r0, #0]
   1933e:	2b01      	cmp	r3, #1
   19340:	d0f4      	beq.n	1932c <l2cap_recv+0x5c>
   19342:	2b13      	cmp	r3, #19
   19344:	d103      	bne.n	1934e <l2cap_recv+0x7e>
	if (buf->len < sizeof(*rsp)) {
   19346:	2901      	cmp	r1, #1
   19348:	d8f0      	bhi.n	1932c <l2cap_recv+0x5c>
		LOG_ERR("Too small LE conn param rsp");
   1934a:	4b1a      	ldr	r3, [pc, #104]	; (193b4 <l2cap_recv+0xe4>)
   1934c:	e7c9      	b.n	192e2 <l2cap_recv+0x12>
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   1934e:	466d      	mov	r5, sp
   19350:	b088      	sub	sp, #32
   19352:	aa02      	add	r2, sp, #8
   19354:	4918      	ldr	r1, [pc, #96]	; (193b8 <l2cap_recv+0xe8>)
   19356:	4814      	ldr	r0, [pc, #80]	; (193a8 <l2cap_recv+0xd8>)
	switch (hdr->code) {
   19358:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   1935c:	2303      	movs	r3, #3
   1935e:	f842 3f10 	str.w	r3, [r2, #16]!
   19362:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19366:	f00b fe7f 	bl	25068 <z_log_msg_static_create.constprop.0>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1936a:	2202      	movs	r2, #2
   1936c:	7861      	ldrb	r1, [r4, #1]
   1936e:	46ad      	mov	sp, r5
   19370:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   19372:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   19374:	f00b fe7b 	bl	2506e <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   19378:	4604      	mov	r4, r0
   1937a:	2800      	cmp	r0, #0
   1937c:	d0d6      	beq.n	1932c <l2cap_recv+0x5c>
	return net_buf_simple_add(&buf->b, len);
   1937e:	2102      	movs	r1, #2
   19380:	300c      	adds	r0, #12
   19382:	f002 fd81 	bl	1be88 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   19386:	2300      	movs	r3, #0
   19388:	7003      	strb	r3, [r0, #0]
   1938a:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1938c:	4622      	mov	r2, r4
   1938e:	9300      	str	r3, [sp, #0]
   19390:	2105      	movs	r1, #5
   19392:	4628      	mov	r0, r5
   19394:	f00b feb7 	bl	25106 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   19398:	2800      	cmp	r0, #0
   1939a:	d0c7      	beq.n	1932c <l2cap_recv+0x5c>
		net_buf_unref(buf);
   1939c:	4620      	mov	r0, r4
   1939e:	f002 fc2f 	bl	1bc00 <net_buf_unref>
   193a2:	e7c3      	b.n	1932c <l2cap_recv+0x5c>
   193a4:	00029b9a 	.word	0x00029b9a
   193a8:	0002701c 	.word	0x0002701c
   193ac:	00029bb8 	.word	0x00029bb8
   193b0:	00029bd9 	.word	0x00029bd9
   193b4:	00029bfa 	.word	0x00029bfa
   193b8:	00029c16 	.word	0x00029c16

000193bc <bt_l2cap_recv>:
{
   193bc:	b5b0      	push	{r4, r5, r7, lr}
   193be:	b086      	sub	sp, #24
	if (buf->len < sizeof(*hdr)) {
   193c0:	8a0b      	ldrh	r3, [r1, #16]
   193c2:	2b03      	cmp	r3, #3
{
   193c4:	af00      	add	r7, sp, #0
   193c6:	4605      	mov	r5, r0
   193c8:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   193ca:	d810      	bhi.n	193ee <bt_l2cap_recv+0x32>
		LOG_ERR("Too small L2CAP PDU received");
   193cc:	4b17      	ldr	r3, [pc, #92]	; (1942c <bt_l2cap_recv+0x70>)
   193ce:	617b      	str	r3, [r7, #20]
   193d0:	4817      	ldr	r0, [pc, #92]	; (19430 <bt_l2cap_recv+0x74>)
   193d2:	2302      	movs	r3, #2
   193d4:	f107 0210 	add.w	r2, r7, #16
   193d8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   193dc:	613b      	str	r3, [r7, #16]
   193de:	f00b fe43 	bl	25068 <z_log_msg_static_create.constprop.0>
	net_buf_unref(buf);
   193e2:	4620      	mov	r0, r4
   193e4:	f002 fc0c 	bl	1bc00 <net_buf_unref>
}
   193e8:	3718      	adds	r7, #24
   193ea:	46bd      	mov	sp, r7
   193ec:	bdb0      	pop	{r4, r5, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   193ee:	2104      	movs	r1, #4
   193f0:	f104 000c 	add.w	r0, r4, #12
   193f4:	f002 fd2a 	bl	1be4c <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   193f8:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   193fa:	4628      	mov	r0, r5
   193fc:	f00b fe9c 	bl	25138 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   19400:	b978      	cbnz	r0, 19422 <bt_l2cap_recv+0x66>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   19402:	466d      	mov	r5, sp
   19404:	b088      	sub	sp, #32
   19406:	466a      	mov	r2, sp
   19408:	4b0a      	ldr	r3, [pc, #40]	; (19434 <bt_l2cap_recv+0x78>)
   1940a:	4809      	ldr	r0, [pc, #36]	; (19430 <bt_l2cap_recv+0x74>)
   1940c:	e9c2 3105 	strd	r3, r1, [r2, #20]
   19410:	2303      	movs	r3, #3
   19412:	f842 3f10 	str.w	r3, [r2, #16]!
   19416:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1941a:	f00b fe25 	bl	25068 <z_log_msg_static_create.constprop.0>
   1941e:	46ad      	mov	sp, r5
		net_buf_unref(buf);
   19420:	e7df      	b.n	193e2 <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   19422:	6843      	ldr	r3, [r0, #4]
   19424:	4621      	mov	r1, r4
   19426:	695b      	ldr	r3, [r3, #20]
   19428:	4798      	blx	r3
   1942a:	e7da      	b.n	193e2 <bt_l2cap_recv+0x26>
   1942c:	00029c3e 	.word	0x00029c3e
   19430:	0002701c 	.word	0x0002701c
   19434:	00029c5b 	.word	0x00029c5b

00019438 <bt_l2cap_update_conn_param>:
{
   19438:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   1943a:	4b17      	ldr	r3, [pc, #92]	; (19498 <bt_l2cap_update_conn_param+0x60>)
{
   1943c:	460e      	mov	r6, r1
	ident++;
   1943e:	7819      	ldrb	r1, [r3, #0]
   19440:	3101      	adds	r1, #1
   19442:	b2c9      	uxtb	r1, r1
   19444:	2901      	cmp	r1, #1
   19446:	bf38      	it	cc
   19448:	2101      	movcc	r1, #1
{
   1944a:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1944c:	2208      	movs	r2, #8
   1944e:	2012      	movs	r0, #18
	ident++;
   19450:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   19452:	f00b fe0c 	bl	2506e <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   19456:	4604      	mov	r4, r0
   19458:	b1d0      	cbz	r0, 19490 <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   1945a:	2108      	movs	r1, #8
   1945c:	300c      	adds	r0, #12
   1945e:	f002 fd13 	bl	1be88 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   19462:	8833      	ldrh	r3, [r6, #0]
   19464:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   19466:	8873      	ldrh	r3, [r6, #2]
   19468:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1946a:	88b3      	ldrh	r3, [r6, #4]
   1946c:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1946e:	88f3      	ldrh	r3, [r6, #6]
   19470:	80c3      	strh	r3, [r0, #6]
   19472:	2300      	movs	r3, #0
   19474:	4628      	mov	r0, r5
   19476:	9300      	str	r3, [sp, #0]
   19478:	4622      	mov	r2, r4
   1947a:	2105      	movs	r1, #5
   1947c:	f00b fe43 	bl	25106 <bt_l2cap_send_cb>
	if (err) {
   19480:	4605      	mov	r5, r0
   19482:	b110      	cbz	r0, 1948a <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   19484:	4620      	mov	r0, r4
   19486:	f002 fbbb 	bl	1bc00 <net_buf_unref>
}
   1948a:	4628      	mov	r0, r5
   1948c:	b002      	add	sp, #8
   1948e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   19490:	f06f 050b 	mvn.w	r5, #11
   19494:	e7f9      	b.n	1948a <bt_l2cap_update_conn_param+0x52>
   19496:	bf00      	nop
   19498:	200030ab 	.word	0x200030ab

0001949c <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   1949c:	2823      	cmp	r0, #35	; 0x23
   1949e:	d81f      	bhi.n	194e0 <att_op_get_type+0x44>
   194a0:	281a      	cmp	r0, #26
   194a2:	d804      	bhi.n	194ae <att_op_get_type+0x12>
   194a4:	1e43      	subs	r3, r0, #1
   194a6:	2b18      	cmp	r3, #24
   194a8:	d90e      	bls.n	194c8 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   194aa:	2006      	movs	r0, #6
   194ac:	4770      	bx	lr
	switch (op) {
   194ae:	f1a0 031b 	sub.w	r3, r0, #27
   194b2:	2b08      	cmp	r3, #8
   194b4:	d81e      	bhi.n	194f4 <att_op_get_type+0x58>
   194b6:	e8df f003 	tbb	[pc, r3]
   194ba:	1d05      	.short	0x1d05
   194bc:	191d231b 	.word	0x191d231b
   194c0:	1d25      	.short	0x1d25
   194c2:	05          	.byte	0x05
   194c3:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   194c4:	2003      	movs	r0, #3
   194c6:	4770      	bx	lr
	switch (op) {
   194c8:	4a0f      	ldr	r2, [pc, #60]	; (19508 <att_op_get_type+0x6c>)
   194ca:	2301      	movs	r3, #1
   194cc:	4083      	lsls	r3, r0
   194ce:	401a      	ands	r2, r3
   194d0:	b9c2      	cbnz	r2, 19504 <att_op_get_type+0x68>
   194d2:	4a0e      	ldr	r2, [pc, #56]	; (1950c <att_op_get_type+0x70>)
   194d4:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   194d6:	2a00      	cmp	r2, #0
   194d8:	bf14      	ite	ne
   194da:	2001      	movne	r0, #1
   194dc:	2006      	moveq	r0, #6
   194de:	4770      	bx	lr
	switch (op) {
   194e0:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   194e4:	2b52      	cmp	r3, #82	; 0x52
   194e6:	d105      	bne.n	194f4 <att_op_get_type+0x58>
		return ATT_COMMAND;
   194e8:	2000      	movs	r0, #0
}
   194ea:	4770      	bx	lr
		return ATT_REQUEST;
   194ec:	2001      	movs	r0, #1
   194ee:	4770      	bx	lr
		return ATT_INDICATION;
   194f0:	2005      	movs	r0, #5
   194f2:	4770      	bx	lr
		return ATT_COMMAND;
   194f4:	f010 0f40 	tst.w	r0, #64	; 0x40
   194f8:	bf0c      	ite	eq
   194fa:	2006      	moveq	r0, #6
   194fc:	2000      	movne	r0, #0
   194fe:	4770      	bx	lr
	switch (op) {
   19500:	2004      	movs	r0, #4
   19502:	4770      	bx	lr
		return ATT_RESPONSE;
   19504:	2002      	movs	r0, #2
   19506:	4770      	bx	lr
   19508:	028aaaaa 	.word	0x028aaaaa
   1950c:	01455554 	.word	0x01455554

00019510 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   19510:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   19512:	3804      	subs	r0, #4
   19514:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   19516:	a901      	add	r1, sp, #4
   19518:	4802      	ldr	r0, [pc, #8]	; (19524 <bt_att_released+0x14>)
   1951a:	f006 fd4f 	bl	1ffbc <k_mem_slab_free>
}
   1951e:	b003      	add	sp, #12
   19520:	f85d fb04 	ldr.w	pc, [sp], #4
   19524:	200008e0 	.word	0x200008e0

00019528 <tx_meta_data_free>:
{
   19528:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(data);
   1952a:	4604      	mov	r4, r0
   1952c:	b948      	cbnz	r0, 19542 <tx_meta_data_free+0x1a>
   1952e:	490a      	ldr	r1, [pc, #40]	; (19558 <tx_meta_data_free+0x30>)
   19530:	480a      	ldr	r0, [pc, #40]	; (1955c <tx_meta_data_free+0x34>)
   19532:	4a0b      	ldr	r2, [pc, #44]	; (19560 <tx_meta_data_free+0x38>)
   19534:	23c2      	movs	r3, #194	; 0xc2
   19536:	f00a fe85 	bl	24244 <assert_print>
   1953a:	4809      	ldr	r0, [pc, #36]	; (19560 <tx_meta_data_free+0x38>)
   1953c:	21c2      	movs	r1, #194	; 0xc2
   1953e:	f00a fe7a 	bl	24236 <assert_post_action>
	(void)memset(data, 0, sizeof(*data));
   19542:	2100      	movs	r1, #0
   19544:	2214      	movs	r2, #20
   19546:	f00b fa8c 	bl	24a62 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   1954a:	4621      	mov	r1, r4
   1954c:	4805      	ldr	r0, [pc, #20]	; (19564 <tx_meta_data_free+0x3c>)
}
   1954e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   19552:	f00d ba11 	b.w	26978 <k_queue_append>
   19556:	bf00      	nop
   19558:	000297c0 	.word	0x000297c0
   1955c:	00027c2a 	.word	0x00027c2a
   19560:	00029c97 	.word	0x00029c97
   19564:	20000994 	.word	0x20000994

00019568 <find_type_cb>:
{
   19568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1956c:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   1956e:	6816      	ldr	r6, [r2, #0]
{
   19570:	af02      	add	r7, sp, #8
	struct bt_conn *conn = chan->chan.chan.conn;
   19572:	6873      	ldr	r3, [r6, #4]
   19574:	607b      	str	r3, [r7, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   19576:	2500      	movs	r5, #0
   19578:	f642 0301 	movw	r3, #10241	; 0x2801
{
   1957c:	4681      	mov	r9, r0
   1957e:	4688      	mov	r8, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   19580:	6800      	ldr	r0, [r0, #0]
   19582:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   19586:	85fb      	strh	r3, [r7, #46]	; 0x2e
   19588:	f107 012c 	add.w	r1, r7, #44	; 0x2c
{
   1958c:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1958e:	f00b fa8a 	bl	24aa6 <bt_uuid_cmp>
   19592:	2800      	cmp	r0, #0
   19594:	d07e      	beq.n	19694 <find_type_cb+0x12c>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   19596:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1959a:	f8d9 0000 	ldr.w	r0, [r9]
   1959e:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
   195a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
   195a4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   195a8:	f00b fa7d 	bl	24aa6 <bt_uuid_cmp>
   195ac:	b140      	cbz	r0, 195c0 <find_type_cb+0x58>
		if (data->group &&
   195ae:	68a3      	ldr	r3, [r4, #8]
   195b0:	b123      	cbz	r3, 195bc <find_type_cb+0x54>
   195b2:	885a      	ldrh	r2, [r3, #2]
   195b4:	4542      	cmp	r2, r8
   195b6:	d201      	bcs.n	195bc <find_type_cb+0x54>
	data->group->end_handle = sys_cpu_to_le16(handle);
   195b8:	f8a3 8002 	strh.w	r8, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   195bc:	2001      	movs	r0, #1
   195be:	e00e      	b.n	195de <find_type_cb+0x76>
	if (bt_att_mtu(chan) - net_buf_frags_len(data->buf) <
   195c0:	6861      	ldr	r1, [r4, #4]
   195c2:	4608      	mov	r0, r1
   195c4:	f00b fdcd 	bl	25162 <net_buf_frags_len>
	return MIN(chan->chan.rx.mtu, chan->chan.tx.mtu);
   195c8:	8d72      	ldrh	r2, [r6, #42]	; 0x2a
   195ca:	8b73      	ldrh	r3, [r6, #26]
	if (bt_att_mtu(chan) - net_buf_frags_len(data->buf) <
   195cc:	429a      	cmp	r2, r3
   195ce:	bf94      	ite	ls
   195d0:	ebc0 0002 	rsbls	r0, r0, r2
   195d4:	ebc0 0003 	rsbhi	r0, r0, r3
   195d8:	2803      	cmp	r0, #3
   195da:	d804      	bhi.n	195e6 <find_type_cb+0x7e>
		return BT_GATT_ITER_STOP;
   195dc:	2000      	movs	r0, #0
}
   195de:	3744      	adds	r7, #68	; 0x44
   195e0:	46bd      	mov	sp, r7
   195e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   195e6:	4608      	mov	r0, r1
   195e8:	f002 fb66 	bl	1bcb8 <net_buf_frag_last>
   195ec:	4605      	mov	r5, r0
	len = MIN(bt_att_mtu(chan) - net_buf_frags_len(data->buf),
   195ee:	6860      	ldr	r0, [r4, #4]
   195f0:	f00b fdb7 	bl	25162 <net_buf_frags_len>
	return MIN(chan->chan.rx.mtu, chan->chan.tx.mtu);
   195f4:	8b72      	ldrh	r2, [r6, #26]
   195f6:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   195f8:	f105 0a0c 	add.w	sl, r5, #12
	len = MIN(bt_att_mtu(chan) - net_buf_frags_len(data->buf),
   195fc:	429a      	cmp	r2, r3
   195fe:	bf94      	ite	ls
   19600:	ebc0 0b02 	rsbls	fp, r0, r2
   19604:	ebc0 0b03 	rsbhi	fp, r0, r3
   19608:	4650      	mov	r0, sl
   1960a:	f00c fc40 	bl	25e8e <net_buf_simple_tailroom>
   1960e:	4583      	cmp	fp, r0
   19610:	d243      	bcs.n	1969a <find_type_cb+0x132>
   19612:	6860      	ldr	r0, [r4, #4]
   19614:	f00b fda5 	bl	25162 <net_buf_frags_len>
	return MIN(chan->chan.rx.mtu, chan->chan.tx.mtu);
   19618:	8d72      	ldrh	r2, [r6, #42]	; 0x2a
   1961a:	8b73      	ldrh	r3, [r6, #26]
	len = MIN(bt_att_mtu(chan) - net_buf_frags_len(data->buf),
   1961c:	429a      	cmp	r2, r3
   1961e:	bf94      	ite	ls
   19620:	ebc0 0002 	rsbls	r0, r0, r2
   19624:	ebc0 0003 	rsbhi	r0, r0, r3
	if (!len) {
   19628:	b970      	cbnz	r0, 19648 <find_type_cb+0xe0>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1962a:	6863      	ldr	r3, [r4, #4]
   1962c:	7a98      	ldrb	r0, [r3, #10]
   1962e:	f002 f8d3 	bl	1b7d8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   19632:	2200      	movs	r2, #0
   19634:	2300      	movs	r3, #0
   19636:	f00c fc17 	bl	25e68 <net_buf_alloc_fixed>
		if (!frag) {
   1963a:	4605      	mov	r5, r0
   1963c:	2800      	cmp	r0, #0
   1963e:	d0cd      	beq.n	195dc <find_type_cb+0x74>
		net_buf_frag_add(data->buf, frag);
   19640:	4601      	mov	r1, r0
   19642:	6860      	ldr	r0, [r4, #4]
   19644:	f002 fb7e 	bl	1bd44 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   19648:	2300      	movs	r3, #0
   1964a:	9300      	str	r3, [sp, #0]
   1964c:	f8d9 6004 	ldr.w	r6, [r9, #4]
   19650:	6878      	ldr	r0, [r7, #4]
   19652:	2310      	movs	r3, #16
   19654:	f107 0208 	add.w	r2, r7, #8
   19658:	4649      	mov	r1, r9
   1965a:	47b0      	blx	r6
	if (read < 0) {
   1965c:	1e06      	subs	r6, r0, #0
   1965e:	db19      	blt.n	19694 <find_type_cb+0x12c>
	if (read != data->value_len) {
   19660:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   19662:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   19664:	42b2      	cmp	r2, r6
   19666:	d03f      	beq.n	196e8 <find_type_cb+0x180>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   19668:	4601      	mov	r1, r0
   1966a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1966e:	f00b fa48 	bl	24b02 <bt_uuid_create>
   19672:	b9b0      	cbnz	r0, 196a2 <find_type_cb+0x13a>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   19674:	466d      	mov	r5, sp
   19676:	b088      	sub	sp, #32
   19678:	7c23      	ldrb	r3, [r4, #16]
   1967a:	aa02      	add	r2, sp, #8
   1967c:	491d      	ldr	r1, [pc, #116]	; (196f4 <find_type_cb+0x18c>)
   1967e:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_WRN("Unable to create UUID: size %d", read);
   19682:	2303      	movs	r3, #3
   19684:	f842 3f10 	str.w	r3, [r2, #16]!
   19688:	481b      	ldr	r0, [pc, #108]	; (196f8 <find_type_cb+0x190>)
   1968a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1968e:	f00b fe59 	bl	25344 <z_log_msg_static_create.constprop.0>
   19692:	46ad      	mov	sp, r5
	data->group = NULL;
   19694:	2300      	movs	r3, #0
   19696:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   19698:	e790      	b.n	195bc <find_type_cb+0x54>
	return net_buf_simple_tailroom(&buf->b);
   1969a:	4650      	mov	r0, sl
   1969c:	f00c fbf7 	bl	25e8e <net_buf_simple_tailroom>
   196a0:	e7c2      	b.n	19628 <find_type_cb+0xc0>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   196a2:	b2f2      	uxtb	r2, r6
   196a4:	f107 0108 	add.w	r1, r7, #8
   196a8:	f107 0018 	add.w	r0, r7, #24
   196ac:	f00b fa29 	bl	24b02 <bt_uuid_create>
   196b0:	b930      	cbnz	r0, 196c0 <find_type_cb+0x158>
			LOG_WRN("Unable to create UUID: size %d", read);
   196b2:	466d      	mov	r5, sp
   196b4:	b088      	sub	sp, #32
   196b6:	aa02      	add	r2, sp, #8
   196b8:	4b10      	ldr	r3, [pc, #64]	; (196fc <find_type_cb+0x194>)
   196ba:	e9c2 3605 	strd	r3, r6, [r2, #20]
   196be:	e7e0      	b.n	19682 <find_type_cb+0x11a>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   196c0:	f107 0118 	add.w	r1, r7, #24
   196c4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   196c8:	f00b f9ed 	bl	24aa6 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   196cc:	2800      	cmp	r0, #0
   196ce:	d1e1      	bne.n	19694 <find_type_cb+0x12c>
	data->err = 0x00;
   196d0:	2300      	movs	r3, #0
   196d2:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   196d4:	2104      	movs	r1, #4
   196d6:	f105 000c 	add.w	r0, r5, #12
   196da:	f002 fbd5 	bl	1be88 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   196de:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   196e0:	f8a0 8000 	strh.w	r8, [r0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   196e4:	68a3      	ldr	r3, [r4, #8]
   196e6:	e767      	b.n	195b8 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   196e8:	f107 0108 	add.w	r1, r7, #8
   196ec:	f00b f99e 	bl	24a2c <memcmp>
   196f0:	e7ec      	b.n	196cc <find_type_cb+0x164>
   196f2:	bf00      	nop
   196f4:	00029cc6 	.word	0x00029cc6
   196f8:	00026fec 	.word	0x00026fec
   196fc:	00029ce5 	.word	0x00029ce5

00019700 <att_get>:
{
   19700:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   19702:	7a83      	ldrb	r3, [r0, #10]
   19704:	2b07      	cmp	r3, #7
   19706:	d00d      	beq.n	19724 <att_get+0x24>
		LOG_WRN("Not connected");
   19708:	4b12      	ldr	r3, [pc, #72]	; (19754 <att_get+0x54>)
   1970a:	9305      	str	r3, [sp, #20]
   1970c:	2302      	movs	r3, #2
   1970e:	9304      	str	r3, [sp, #16]
   19710:	aa04      	add	r2, sp, #16
   19712:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		LOG_ERR("Unable to find ATT channel");
   19716:	4810      	ldr	r0, [pc, #64]	; (19758 <att_get+0x58>)
   19718:	f00b fe14 	bl	25344 <z_log_msg_static_create.constprop.0>
		return NULL;
   1971c:	2000      	movs	r0, #0
}
   1971e:	b007      	add	sp, #28
   19720:	f85d fb04 	ldr.w	pc, [sp], #4
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   19724:	2104      	movs	r1, #4
   19726:	f00b fd07 	bl	25138 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1972a:	b938      	cbnz	r0, 1973c <att_get+0x3c>
		LOG_ERR("Unable to find ATT channel");
   1972c:	4b0b      	ldr	r3, [pc, #44]	; (1975c <att_get+0x5c>)
   1972e:	9305      	str	r3, [sp, #20]
   19730:	2302      	movs	r3, #2
   19732:	9304      	str	r3, [sp, #16]
   19734:	aa04      	add	r2, sp, #16
   19736:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1973a:	e7ec      	b.n	19716 <att_get+0x16>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1973c:	f3bf 8f5b 	dmb	ish
   19740:	6b03      	ldr	r3, [r0, #48]	; 0x30
   19742:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_CONNECTED)) {
   19746:	075b      	lsls	r3, r3, #29
   19748:	d401      	bmi.n	1974e <att_get+0x4e>
		LOG_ERR("ATT channel not connected");
   1974a:	4b05      	ldr	r3, [pc, #20]	; (19760 <att_get+0x60>)
   1974c:	e7ef      	b.n	1972e <att_get+0x2e>
	return att_chan->att;
   1974e:	f850 0c04 	ldr.w	r0, [r0, #-4]
   19752:	e7e4      	b.n	1971e <att_get+0x1e>
   19754:	00029d04 	.word	0x00029d04
   19758:	00026fec 	.word	0x00026fec
   1975c:	00029d12 	.word	0x00029d12
   19760:	00029d2d 	.word	0x00029d2d

00019764 <bt_att_connected>:
{
   19764:	b510      	push	{r4, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19766:	f100 0330 	add.w	r3, r0, #48	; 0x30
   1976a:	4604      	mov	r4, r0
   1976c:	f3bf 8f5b 	dmb	ish
   19770:	e853 1f00 	ldrex	r1, [r3]
   19774:	f041 0104 	orr.w	r1, r1, #4
   19778:	e843 1200 	strex	r2, r1, [r3]
   1977c:	2a00      	cmp	r2, #0
   1977e:	d1f7      	bne.n	19770 <bt_att_connected+0xc>
   19780:	f3bf 8f5b 	dmb	ish
	att_chan_mtu_updated(att_chan);
   19784:	1f20      	subs	r0, r4, #4
   19786:	f00b fd9a 	bl	252be <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1978a:	f104 0054 	add.w	r0, r4, #84	; 0x54
   1978e:	4904      	ldr	r1, [pc, #16]	; (197a0 <bt_att_connected+0x3c>)
   19790:	f007 fc3a 	bl	21008 <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   19794:	6820      	ldr	r0, [r4, #0]
}
   19796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   1979a:	f001 bfaf 	b.w	1b6fc <bt_gatt_connected>
   1979e:	bf00      	nop
   197a0:	0001a661 	.word	0x0001a661

000197a4 <read_group_cb>:
{
   197a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   197a8:	4605      	mov	r5, r0
   197aa:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   197ac:	f04f 0800 	mov.w	r8, #0
   197b0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   197b4:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   197b6:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   197b8:	f88d 8008 	strb.w	r8, [sp, #8]
   197bc:	a902      	add	r1, sp, #8
{
   197be:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   197c0:	f8ad 300a 	strh.w	r3, [sp, #10]
   197c4:	f00b f96f 	bl	24aa6 <bt_uuid_cmp>
   197c8:	b1a0      	cbz	r0, 197f4 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   197ca:	f642 0301 	movw	r3, #10241	; 0x2801
   197ce:	6828      	ldr	r0, [r5, #0]
   197d0:	f88d 800c 	strb.w	r8, [sp, #12]
   197d4:	a903      	add	r1, sp, #12
   197d6:	f8ad 300e 	strh.w	r3, [sp, #14]
   197da:	f00b f964 	bl	24aa6 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   197de:	b148      	cbz	r0, 197f4 <read_group_cb+0x50>
		if (data->group &&
   197e0:	6923      	ldr	r3, [r4, #16]
   197e2:	b11b      	cbz	r3, 197ec <read_group_cb+0x48>
   197e4:	885a      	ldrh	r2, [r3, #2]
   197e6:	42b2      	cmp	r2, r6
   197e8:	d200      	bcs.n	197ec <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   197ea:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   197ec:	2001      	movs	r0, #1
}
   197ee:	b004      	add	sp, #16
   197f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   197f4:	6861      	ldr	r1, [r4, #4]
   197f6:	6828      	ldr	r0, [r5, #0]
   197f8:	f00b f955 	bl	24aa6 <bt_uuid_cmp>
   197fc:	b110      	cbz	r0, 19804 <read_group_cb+0x60>
		data->group = NULL;
   197fe:	2300      	movs	r3, #0
   19800:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   19802:	e7f3      	b.n	197ec <read_group_cb+0x48>
	if (data->rsp->len &&
   19804:	68e3      	ldr	r3, [r4, #12]
	    bt_att_mtu(chan) - data->buf->len < data->rsp->len) {
   19806:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   19808:	781a      	ldrb	r2, [r3, #0]
   1980a:	b16a      	cbz	r2, 19828 <read_group_cb+0x84>
	return MIN(chan->chan.rx.mtu, chan->chan.tx.mtu);
   1980c:	f8b7 c01a 	ldrh.w	ip, [r7, #26]
   19810:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
	    bt_att_mtu(chan) - data->buf->len < data->rsp->len) {
   19812:	8a03      	ldrh	r3, [r0, #16]
   19814:	458c      	cmp	ip, r1
   19816:	bf94      	ite	ls
   19818:	ebc3 030c 	rsbls	r3, r3, ip
   1981c:	ebc3 0301 	rsbhi	r3, r3, r1
	if (data->rsp->len &&
   19820:	4293      	cmp	r3, r2
   19822:	da01      	bge.n	19828 <read_group_cb+0x84>
		return BT_GATT_ITER_STOP;
   19824:	2000      	movs	r0, #0
   19826:	e7e2      	b.n	197ee <read_group_cb+0x4a>
   19828:	2104      	movs	r1, #4
   1982a:	300c      	adds	r0, #12
   1982c:	f002 fb2c 	bl	1be88 <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   19830:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   19832:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   19834:	6923      	ldr	r3, [r4, #16]
   19836:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   19838:	4b07      	ldr	r3, [pc, #28]	; (19858 <read_group_cb+0xb4>)
   1983a:	9300      	str	r3, [sp, #0]
   1983c:	9401      	str	r4, [sp, #4]
   1983e:	68a2      	ldr	r2, [r4, #8]
   19840:	2300      	movs	r3, #0
   19842:	4629      	mov	r1, r5
   19844:	4638      	mov	r0, r7
   19846:	f00b fd80 	bl	2534a <att_chan_read>
	if (read < 0) {
   1984a:	2800      	cmp	r0, #0
   1984c:	dbea      	blt.n	19824 <read_group_cb+0x80>
	if (!data->group) {
   1984e:	6920      	ldr	r0, [r4, #16]
   19850:	3800      	subs	r0, #0
   19852:	bf18      	it	ne
   19854:	2001      	movne	r0, #1
   19856:	e7ca      	b.n	197ee <read_group_cb+0x4a>
   19858:	00025325 	.word	0x00025325

0001985c <read_type_cb>:
{
   1985c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   19860:	6817      	ldr	r7, [r2, #0]
{
   19862:	4605      	mov	r5, r0
   19864:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   19866:	6800      	ldr	r0, [r0, #0]
   19868:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   1986a:	687e      	ldr	r6, [r7, #4]
{
   1986c:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1986e:	f00b f91a 	bl	24aa6 <bt_uuid_cmp>
   19872:	4681      	mov	r9, r0
   19874:	2800      	cmp	r0, #0
   19876:	d142      	bne.n	198fe <read_type_cb+0xa2>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   19878:	4630      	mov	r0, r6
   1987a:	2295      	movs	r2, #149	; 0x95
   1987c:	4629      	mov	r1, r5
   1987e:	f00c fa66 	bl	25d4e <bt_gatt_check_perm>
   19882:	4606      	mov	r6, r0
   19884:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   19886:	b140      	cbz	r0, 1989a <read_type_cb+0x3e>
		if (data->rsp->len) {
   19888:	68e3      	ldr	r3, [r4, #12]
   1988a:	781b      	ldrb	r3, [r3, #0]
   1988c:	b10b      	cbz	r3, 19892 <read_type_cb+0x36>
			data->err = 0x00;
   1988e:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   19892:	2000      	movs	r0, #0
}
   19894:	b003      	add	sp, #12
   19896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1989a:	68a0      	ldr	r0, [r4, #8]
   1989c:	f002 fa0c 	bl	1bcb8 <net_buf_frag_last>
   198a0:	2102      	movs	r1, #2
   198a2:	300c      	adds	r0, #12
   198a4:	f002 faf0 	bl	1be88 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   198a8:	4b16      	ldr	r3, [pc, #88]	; (19904 <read_type_cb+0xa8>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   198aa:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   198ac:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   198b0:	9300      	str	r3, [sp, #0]
   198b2:	9401      	str	r4, [sp, #4]
   198b4:	68a2      	ldr	r2, [r4, #8]
   198b6:	4633      	mov	r3, r6
   198b8:	4629      	mov	r1, r5
   198ba:	4638      	mov	r0, r7
   198bc:	f00b fd45 	bl	2534a <att_chan_read>
	if (read < 0) {
   198c0:	2800      	cmp	r0, #0
   198c2:	da07      	bge.n	198d4 <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   198c4:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   198c8:	bf26      	itte	cs
   198ca:	4240      	negcs	r0, r0
   198cc:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   198ce:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   198d0:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   198d2:	e7de      	b.n	19892 <read_type_cb+0x36>
	if (!data->item) {
   198d4:	6923      	ldr	r3, [r4, #16]
   198d6:	2b00      	cmp	r3, #0
   198d8:	d0db      	beq.n	19892 <read_type_cb+0x36>
	return bt_att_mtu(chan) - net_buf_frags_len(data->buf) >
   198da:	68a0      	ldr	r0, [r4, #8]
   198dc:	f00b fc41 	bl	25162 <net_buf_frags_len>
	return MIN(chan->chan.rx.mtu, chan->chan.tx.mtu);
   198e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   198e2:	8b7a      	ldrh	r2, [r7, #26]
	return bt_att_mtu(chan) - net_buf_frags_len(data->buf) >
   198e4:	429a      	cmp	r2, r3
   198e6:	bf94      	ite	ls
   198e8:	ebc0 0002 	rsbls	r0, r0, r2
   198ec:	ebc0 0003 	rsbhi	r0, r0, r3
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   198f0:	68e3      	ldr	r3, [r4, #12]
   198f2:	781b      	ldrb	r3, [r3, #0]
   198f4:	4298      	cmp	r0, r3
   198f6:	bf94      	ite	ls
   198f8:	2000      	movls	r0, #0
   198fa:	2001      	movhi	r0, #1
   198fc:	e7ca      	b.n	19894 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   198fe:	2001      	movs	r0, #1
   19900:	e7c8      	b.n	19894 <read_type_cb+0x38>
   19902:	bf00      	nop
   19904:	00025173 	.word	0x00025173

00019908 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   19908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1990c:	b082      	sub	sp, #8
   1990e:	af00      	add	r7, sp, #0
   19910:	4604      	mov	r4, r0
   19912:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   19914:	483c      	ldr	r0, [pc, #240]	; (19a08 <bt_att_accept+0x100>)
   19916:	2200      	movs	r2, #0
   19918:	2300      	movs	r3, #0
   1991a:	4639      	mov	r1, r7
   1991c:	f006 fae4 	bl	1fee8 <k_mem_slab_alloc>
   19920:	4605      	mov	r5, r0
   19922:	b1a8      	cbz	r0, 19950 <bt_att_accept+0x48>
		LOG_ERR("No available ATT context for conn %p", conn);
   19924:	466d      	mov	r5, sp
   19926:	b088      	sub	sp, #32
   19928:	466a      	mov	r2, sp
   1992a:	4b38      	ldr	r3, [pc, #224]	; (19a0c <bt_att_accept+0x104>)
   1992c:	4838      	ldr	r0, [pc, #224]	; (19a10 <bt_att_accept+0x108>)
   1992e:	e9c2 3405 	strd	r3, r4, [r2, #20]
   19932:	2303      	movs	r3, #3
   19934:	f842 3f10 	str.w	r3, [r2, #16]!
   19938:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1993c:	f00b fd02 	bl	25344 <z_log_msg_static_create.constprop.0>
   19940:	46ad      	mov	sp, r5
		return -ENOMEM;
   19942:	f06f 050b 	mvn.w	r5, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   19946:	4628      	mov	r0, r5
   19948:	3708      	adds	r7, #8
   1994a:	46bd      	mov	sp, r7
   1994c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return z_impl_z_current_get();
   19950:	f008 fdea 	bl	22528 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   19954:	4b2f      	ldr	r3, [pc, #188]	; (19a14 <bt_att_accept+0x10c>)
	(void)memset(att, 0, sizeof(*att));
   19956:	4629      	mov	r1, r5
	att_handle_rsp_thread = k_current_get();
   19958:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   1995a:	2230      	movs	r2, #48	; 0x30
   1995c:	6838      	ldr	r0, [r7, #0]
   1995e:	f00b f880 	bl	24a62 <memset>
	att->conn = conn;
   19962:	683b      	ldr	r3, [r7, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   19964:	482c      	ldr	r0, [pc, #176]	; (19a18 <bt_att_accept+0x110>)
	att->conn = conn;
   19966:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   19968:	683c      	ldr	r4, [r7, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1996a:	607d      	str	r5, [r7, #4]
	list->tail = NULL;
   1996c:	e9c4 5501 	strd	r5, r5, [r4, #4]
   19970:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   19974:	2200      	movs	r2, #0
   19976:	2300      	movs	r3, #0
   19978:	1d39      	adds	r1, r7, #4
   1997a:	f006 fab5 	bl	1fee8 <k_mem_slab_alloc>
   1997e:	4605      	mov	r5, r0
   19980:	b180      	cbz	r0, 199a4 <bt_att_accept+0x9c>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   19982:	6823      	ldr	r3, [r4, #0]
   19984:	466c      	mov	r4, sp
   19986:	b088      	sub	sp, #32
   19988:	466a      	mov	r2, sp
   1998a:	4924      	ldr	r1, [pc, #144]	; (19a1c <bt_att_accept+0x114>)
   1998c:	4820      	ldr	r0, [pc, #128]	; (19a10 <bt_att_accept+0x108>)
   1998e:	e9c2 1305 	strd	r1, r3, [r2, #20]
   19992:	2303      	movs	r3, #3
   19994:	f842 3f10 	str.w	r3, [r2, #16]!
   19998:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1999c:	f00b fcd2 	bl	25344 <z_log_msg_static_create.constprop.0>
   199a0:	46a5      	mov	sp, r4
	if (!chan) {
   199a2:	e7ce      	b.n	19942 <bt_att_accept+0x3a>
	(void)memset(chan, 0, sizeof(*chan));
   199a4:	4601      	mov	r1, r0
   199a6:	2290      	movs	r2, #144	; 0x90
   199a8:	6878      	ldr	r0, [r7, #4]
   199aa:	f00b f85a 	bl	24a62 <memset>
	chan->chan.chan.ops = &ops;
   199ae:	6878      	ldr	r0, [r7, #4]
   199b0:	4b1b      	ldr	r3, [pc, #108]	; (19a20 <bt_att_accept+0x118>)
   199b2:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   199b4:	303c      	adds	r0, #60	; 0x3c
   199b6:	f00c ffd2 	bl	2695e <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   199ba:	687b      	ldr	r3, [r7, #4]
   199bc:	f3bf 8f5b 	dmb	ish
   199c0:	3334      	adds	r3, #52	; 0x34
   199c2:	e853 2f00 	ldrex	r2, [r3]
   199c6:	e843 5100 	strex	r1, r5, [r3]
   199ca:	2900      	cmp	r1, #0
   199cc:	d1f9      	bne.n	199c2 <bt_att_accept+0xba>
   199ce:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   199d2:	687b      	ldr	r3, [r7, #4]
   199d4:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   199d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	att_chan_attach(att, chan);
   199d8:	f8d7 8004 	ldr.w	r8, [r7, #4]
	if (sys_slist_is_empty(&att->chans)) {
   199dc:	b91b      	cbnz	r3, 199e6 <bt_att_accept+0xde>
   199de:	f104 000c 	add.w	r0, r4, #12
   199e2:	f00c ffbc 	bl	2695e <z_impl_k_queue_init>
	return list->head;
   199e6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	parent->next = child;
   199e8:	f8c8 2088 	str.w	r2, [r8, #136]	; 0x88
Z_GENLIST_PREPEND(slist, snode)
   199ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	sys_slist_prepend(&att->chans, &chan->node);
   199ee:	f108 0388 	add.w	r3, r8, #136	; 0x88
	list->head = node;
   199f2:	62a3      	str	r3, [r4, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   199f4:	b902      	cbnz	r2, 199f8 <bt_att_accept+0xf0>
	list->tail = node;
   199f6:	62e3      	str	r3, [r4, #44]	; 0x2c
	if (bt_att_is_enhanced(chan)) {
   199f8:	687b      	ldr	r3, [r7, #4]
		chan->chan.tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   199fa:	2217      	movs	r2, #23
   199fc:	855a      	strh	r2, [r3, #42]	; 0x2a
		chan->chan.rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   199fe:	835a      	strh	r2, [r3, #26]
	*ch = &chan->chan.chan;
   19a00:	3304      	adds	r3, #4
   19a02:	6033      	str	r3, [r6, #0]
	return 0;
   19a04:	e79f      	b.n	19946 <bt_att_accept+0x3e>
   19a06:	bf00      	nop
   19a08:	200008c0 	.word	0x200008c0
   19a0c:	00029d47 	.word	0x00029d47
   19a10:	00026fec 	.word	0x00026fec
   19a14:	20002d28 	.word	0x20002d28
   19a18:	200008e0 	.word	0x200008e0
   19a1c:	00029d6c 	.word	0x00029d6c
   19a20:	2000068c 	.word	0x2000068c

00019a24 <chan_send>:
{
   19a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   19a28:	f8d1 8018 	ldr.w	r8, [r1, #24]
	hdr = (void *)buf->data;
   19a2c:	68cb      	ldr	r3, [r1, #12]
	struct bt_att_chan *prev_chan = data->att_chan;
   19a2e:	f8d8 9000 	ldr.w	r9, [r8]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19a32:	f3bf 8f5b 	dmb	ish
   19a36:	6b42      	ldr	r2, [r0, #52]	; 0x34
   19a38:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   19a3c:	0752      	lsls	r2, r2, #29
{
   19a3e:	b088      	sub	sp, #32
   19a40:	4606      	mov	r6, r0
   19a42:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   19a44:	d40f      	bmi.n	19a66 <chan_send+0x42>
		LOG_ERR("ATT channel not connected");
   19a46:	4b37      	ldr	r3, [pc, #220]	; (19b24 <chan_send+0x100>)
   19a48:	9307      	str	r3, [sp, #28]
   19a4a:	4837      	ldr	r0, [pc, #220]	; (19b28 <chan_send+0x104>)
   19a4c:	2302      	movs	r3, #2
   19a4e:	aa06      	add	r2, sp, #24
   19a50:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EINVAL;
   19a54:	f06f 0515 	mvn.w	r5, #21
		LOG_ERR("ATT channel not connected");
   19a58:	9306      	str	r3, [sp, #24]
   19a5a:	f00b fc73 	bl	25344 <z_log_msg_static_create.constprop.0>
}
   19a5e:	4628      	mov	r0, r5
   19a60:	b008      	add	sp, #32
   19a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   19a66:	781b      	ldrb	r3, [r3, #0]
   19a68:	2bd2      	cmp	r3, #210	; 0xd2
   19a6a:	d116      	bne.n	19a9a <chan_send+0x76>
		err = bt_smp_sign(chan->att->conn, buf);
   19a6c:	6803      	ldr	r3, [r0, #0]
   19a6e:	6818      	ldr	r0, [r3, #0]
   19a70:	f00c f9f4 	bl	25e5c <bt_smp_sign>
		if (err) {
   19a74:	4605      	mov	r5, r0
   19a76:	b180      	cbz	r0, 19a9a <chan_send+0x76>
			LOG_ERR("Error signing data");
   19a78:	4b2c      	ldr	r3, [pc, #176]	; (19b2c <chan_send+0x108>)
   19a7a:	9307      	str	r3, [sp, #28]
   19a7c:	aa06      	add	r2, sp, #24
   19a7e:	2302      	movs	r3, #2
   19a80:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19a84:	4828      	ldr	r0, [pc, #160]	; (19b28 <chan_send+0x104>)
   19a86:	9306      	str	r3, [sp, #24]
   19a88:	f00b fc5c 	bl	25344 <z_log_msg_static_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   19a8c:	69a0      	ldr	r0, [r4, #24]
   19a8e:	f7ff fd4b 	bl	19528 <tx_meta_data_free>
			net_buf_unref(buf);
   19a92:	4620      	mov	r0, r4
   19a94:	f002 f8b4 	bl	1bc00 <net_buf_unref>
			return err;
   19a98:	e7e1      	b.n	19a5e <chan_send+0x3a>
	state->offset = net_buf_simple_headroom(buf);
   19a9a:	f104 000c 	add.w	r0, r4, #12
   19a9e:	f00c f9f2 	bl	25e86 <net_buf_simple_headroom>
	state->len = buf->len;
   19aa2:	f8b4 a010 	ldrh.w	sl, [r4, #16]
	data->att_chan = chan;
   19aa6:	f8c8 6000 	str.w	r6, [r8]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   19aaa:	6833      	ldr	r3, [r6, #0]
   19aac:	681e      	ldr	r6, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   19aae:	68e3      	ldr	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   19ab0:	4607      	mov	r7, r0
   19ab2:	7818      	ldrb	r0, [r3, #0]
   19ab4:	f7ff fcf2 	bl	1949c <att_op_get_type>
   19ab8:	2805      	cmp	r0, #5
   19aba:	4605      	mov	r5, r0
	switch (op_type) {
   19abc:	d822      	bhi.n	19b04 <chan_send+0xe0>
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   19abe:	4b1c      	ldr	r3, [pc, #112]	; (19b30 <chan_send+0x10c>)
   19ac0:	f8cd 8000 	str.w	r8, [sp]
   19ac4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   19ac8:	4622      	mov	r2, r4
   19aca:	2104      	movs	r1, #4
   19acc:	4630      	mov	r0, r6
   19ace:	f00b fb1a 	bl	25106 <bt_l2cap_send_cb>
	if (err) {
   19ad2:	4605      	mov	r5, r0
   19ad4:	2800      	cmp	r0, #0
   19ad6:	d0c2      	beq.n	19a5e <chan_send+0x3a>
		if (err == -ENOBUFS) {
   19ad8:	f110 0f69 	cmn.w	r0, #105	; 0x69
   19adc:	d109      	bne.n	19af2 <chan_send+0xce>
			LOG_ERR("Ran out of TX buffers or contexts.");
   19ade:	4b15      	ldr	r3, [pc, #84]	; (19b34 <chan_send+0x110>)
   19ae0:	9307      	str	r3, [sp, #28]
   19ae2:	4811      	ldr	r0, [pc, #68]	; (19b28 <chan_send+0x104>)
   19ae4:	2302      	movs	r3, #2
   19ae6:	aa06      	add	r2, sp, #24
   19ae8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   19aec:	9306      	str	r3, [sp, #24]
   19aee:	f00b fc29 	bl	25344 <z_log_msg_static_create.constprop.0>
	buf->data = buf->__buf + state->offset;
   19af2:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   19af4:	f8a4 a010 	strh.w	sl, [r4, #16]
	buf->data = buf->__buf + state->offset;
   19af8:	fa13 f787 	uxtah	r7, r3, r7
   19afc:	60e7      	str	r7, [r4, #12]
		data->att_chan = prev_chan;
   19afe:	f8c8 9000 	str.w	r9, [r8]
   19b02:	e7ac      	b.n	19a5e <chan_send+0x3a>
		__ASSERT(false, "Unknown op type 0x%02X", op_type);
   19b04:	4a0c      	ldr	r2, [pc, #48]	; (19b38 <chan_send+0x114>)
   19b06:	490d      	ldr	r1, [pc, #52]	; (19b3c <chan_send+0x118>)
   19b08:	480d      	ldr	r0, [pc, #52]	; (19b40 <chan_send+0x11c>)
   19b0a:	f240 237b 	movw	r3, #635	; 0x27b
   19b0e:	f00a fb99 	bl	24244 <assert_print>
   19b12:	480c      	ldr	r0, [pc, #48]	; (19b44 <chan_send+0x120>)
   19b14:	4629      	mov	r1, r5
   19b16:	f00a fb95 	bl	24244 <assert_print>
   19b1a:	4807      	ldr	r0, [pc, #28]	; (19b38 <chan_send+0x114>)
   19b1c:	f240 217b 	movw	r1, #635	; 0x27b
   19b20:	f00a fb89 	bl	24236 <assert_post_action>
   19b24:	00029d2d 	.word	0x00029d2d
   19b28:	00026fec 	.word	0x00026fec
   19b2c:	00029d91 	.word	0x00029d91
   19b30:	00027434 	.word	0x00027434
   19b34:	00029dbd 	.word	0x00029dbd
   19b38:	00029c97 	.word	0x00029c97
   19b3c:	0002a7c0 	.word	0x0002a7c0
   19b40:	00027c2a 	.word	0x00027c2a
   19b44:	00029da4 	.word	0x00029da4

00019b48 <bt_att_chan_req_send>:
{
   19b48:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(chan);
   19b4a:	b958      	cbnz	r0, 19b64 <bt_att_chan_req_send+0x1c>
   19b4c:	4919      	ldr	r1, [pc, #100]	; (19bb4 <bt_att_chan_req_send+0x6c>)
   19b4e:	4a1a      	ldr	r2, [pc, #104]	; (19bb8 <bt_att_chan_req_send+0x70>)
   19b50:	481a      	ldr	r0, [pc, #104]	; (19bbc <bt_att_chan_req_send+0x74>)
   19b52:	f240 3339 	movw	r3, #825	; 0x339
   19b56:	f00a fb75 	bl	24244 <assert_print>
   19b5a:	f240 3139 	movw	r1, #825	; 0x339
	__ASSERT_NO_MSG(req);
   19b5e:	4816      	ldr	r0, [pc, #88]	; (19bb8 <bt_att_chan_req_send+0x70>)
   19b60:	f00a fb69 	bl	24236 <assert_post_action>
   19b64:	b949      	cbnz	r1, 19b7a <bt_att_chan_req_send+0x32>
   19b66:	4916      	ldr	r1, [pc, #88]	; (19bc0 <bt_att_chan_req_send+0x78>)
   19b68:	4a13      	ldr	r2, [pc, #76]	; (19bb8 <bt_att_chan_req_send+0x70>)
   19b6a:	4814      	ldr	r0, [pc, #80]	; (19bbc <bt_att_chan_req_send+0x74>)
   19b6c:	f240 333a 	movw	r3, #826	; 0x33a
   19b70:	f00a fb68 	bl	24244 <assert_print>
   19b74:	f240 313a 	movw	r1, #826	; 0x33a
   19b78:	e7f1      	b.n	19b5e <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(req->func);
   19b7a:	684a      	ldr	r2, [r1, #4]
   19b7c:	b94a      	cbnz	r2, 19b92 <bt_att_chan_req_send+0x4a>
   19b7e:	4911      	ldr	r1, [pc, #68]	; (19bc4 <bt_att_chan_req_send+0x7c>)
   19b80:	4a0d      	ldr	r2, [pc, #52]	; (19bb8 <bt_att_chan_req_send+0x70>)
   19b82:	480e      	ldr	r0, [pc, #56]	; (19bbc <bt_att_chan_req_send+0x74>)
   19b84:	f240 333b 	movw	r3, #827	; 0x33b
   19b88:	f00a fb5c 	bl	24244 <assert_print>
   19b8c:	f240 313b 	movw	r1, #827	; 0x33b
   19b90:	e7e5      	b.n	19b5e <bt_att_chan_req_send+0x16>
	__ASSERT_NO_MSG(!chan->req);
   19b92:	6b83      	ldr	r3, [r0, #56]	; 0x38
   19b94:	b14b      	cbz	r3, 19baa <bt_att_chan_req_send+0x62>
   19b96:	490c      	ldr	r1, [pc, #48]	; (19bc8 <bt_att_chan_req_send+0x80>)
   19b98:	4a07      	ldr	r2, [pc, #28]	; (19bb8 <bt_att_chan_req_send+0x70>)
   19b9a:	4808      	ldr	r0, [pc, #32]	; (19bbc <bt_att_chan_req_send+0x74>)
   19b9c:	f44f 734f 	mov.w	r3, #828	; 0x33c
   19ba0:	f00a fb50 	bl	24244 <assert_print>
   19ba4:	f44f 714f 	mov.w	r1, #828	; 0x33c
   19ba8:	e7d9      	b.n	19b5e <bt_att_chan_req_send+0x16>
}
   19baa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return chan_req_send(chan, req);
   19bae:	f00b bd0e 	b.w	255ce <chan_req_send>
   19bb2:	bf00      	nop
   19bb4:	00029de0 	.word	0x00029de0
   19bb8:	00029c97 	.word	0x00029c97
   19bbc:	00027c2a 	.word	0x00027c2a
   19bc0:	00029df6 	.word	0x00029df6
   19bc4:	00029de5 	.word	0x00029de5
   19bc8:	00029def 	.word	0x00029def

00019bcc <bt_att_chan_create_pdu>:
{
   19bcc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   19bd0:	b086      	sub	sp, #24
	if (len + sizeof(op) > bt_att_mtu(chan)) {
   19bd2:	1c53      	adds	r3, r2, #1
{
   19bd4:	460d      	mov	r5, r1
	return MIN(chan->chan.rx.mtu, chan->chan.tx.mtu);
   19bd6:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
   19bd8:	8b41      	ldrh	r1, [r0, #26]
   19bda:	4291      	cmp	r1, r2
   19bdc:	bf28      	it	cs
   19bde:	4611      	movcs	r1, r2
	if (len + sizeof(op) > bt_att_mtu(chan)) {
   19be0:	428b      	cmp	r3, r1
{
   19be2:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > bt_att_mtu(chan)) {
   19be4:	d915      	bls.n	19c12 <bt_att_chan_create_pdu+0x46>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", bt_att_mtu(chan),
   19be6:	466c      	mov	r4, sp
   19be8:	b088      	sub	sp, #32
   19bea:	466a      	mov	r2, sp
   19bec:	482d      	ldr	r0, [pc, #180]	; (19ca4 <bt_att_chan_create_pdu+0xd8>)
   19bee:	61d3      	str	r3, [r2, #28]
   19bf0:	2304      	movs	r3, #4
   19bf2:	e9c2 0105 	strd	r0, r1, [r2, #20]
   19bf6:	f842 3f10 	str.w	r3, [r2, #16]!
   19bfa:	f44f 5102 	mov.w	r1, #8320	; 0x2080
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   19bfe:	482a      	ldr	r0, [pc, #168]	; (19ca8 <bt_att_chan_create_pdu+0xdc>)
   19c00:	f00b fba0 	bl	25344 <z_log_msg_static_create.constprop.0>
   19c04:	46a5      	mov	sp, r4
		return NULL;
   19c06:	2400      	movs	r4, #0
}
   19c08:	4620      	mov	r0, r4
   19c0a:	3718      	adds	r7, #24
   19c0c:	46bd      	mov	sp, r7
   19c0e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	switch (att_op_get_type(op)) {
   19c12:	4628      	mov	r0, r5
   19c14:	f7ff fc42 	bl	1949c <att_op_get_type>
   19c18:	2802      	cmp	r0, #2
   19c1a:	d019      	beq.n	19c50 <bt_att_chan_create_pdu+0x84>
   19c1c:	2804      	cmp	r0, #4
   19c1e:	d017      	beq.n	19c50 <bt_att_chan_create_pdu+0x84>
		timeout = K_FOREVER;
   19c20:	f04f 38ff 	mov.w	r8, #4294967295
   19c24:	f04f 39ff 	mov.w	r9, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   19c28:	2100      	movs	r1, #0
   19c2a:	4642      	mov	r2, r8
   19c2c:	464b      	mov	r3, r9
   19c2e:	4608      	mov	r0, r1
   19c30:	f00b fa66 	bl	25100 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   19c34:	4604      	mov	r4, r0
   19c36:	b980      	cbnz	r0, 19c5a <bt_att_chan_create_pdu+0x8e>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   19c38:	466c      	mov	r4, sp
   19c3a:	b088      	sub	sp, #32
   19c3c:	466a      	mov	r2, sp
   19c3e:	4b1b      	ldr	r3, [pc, #108]	; (19cac <bt_att_chan_create_pdu+0xe0>)
   19c40:	e9c2 3505 	strd	r3, r5, [r2, #20]
   19c44:	2303      	movs	r3, #3
   19c46:	f842 3f10 	str.w	r3, [r2, #16]!
   19c4a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   19c4e:	e7d6      	b.n	19bfe <bt_att_chan_create_pdu+0x32>
	switch (att_op_get_type(op)) {
   19c50:	f44f 2870 	mov.w	r8, #983040	; 0xf0000
   19c54:	f04f 0900 	mov.w	r9, #0
   19c58:	e7e6      	b.n	19c28 <bt_att_chan_create_pdu+0x5c>
	return z_impl_z_current_get();
   19c5a:	f008 fc65 	bl	22528 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   19c5e:	4b14      	ldr	r3, [pc, #80]	; (19cb0 <bt_att_chan_create_pdu+0xe4>)
   19c60:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   19c62:	4814      	ldr	r0, [pc, #80]	; (19cb4 <bt_att_chan_create_pdu+0xe8>)
   19c64:	bf07      	ittee	eq
   19c66:	2200      	moveq	r2, #0
   19c68:	2300      	moveq	r3, #0
   19c6a:	4642      	movne	r2, r8
   19c6c:	464b      	movne	r3, r9
   19c6e:	f006 fd6b 	bl	20748 <z_impl_k_queue_get>
	if (!data) {
   19c72:	b970      	cbnz	r0, 19c92 <bt_att_chan_create_pdu+0xc6>
		LOG_WRN("Unable to allocate ATT TX meta");
   19c74:	4b10      	ldr	r3, [pc, #64]	; (19cb8 <bt_att_chan_create_pdu+0xec>)
   19c76:	617b      	str	r3, [r7, #20]
   19c78:	480b      	ldr	r0, [pc, #44]	; (19ca8 <bt_att_chan_create_pdu+0xdc>)
   19c7a:	2302      	movs	r3, #2
   19c7c:	f107 0210 	add.w	r2, r7, #16
   19c80:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   19c84:	613b      	str	r3, [r7, #16]
   19c86:	f00b fb5d 	bl	25344 <z_log_msg_static_create.constprop.0>
		net_buf_unref(buf);
   19c8a:	4620      	mov	r0, r4
   19c8c:	f001 ffb8 	bl	1bc00 <net_buf_unref>
		return NULL;
   19c90:	e7b9      	b.n	19c06 <bt_att_chan_create_pdu+0x3a>
	bt_att_tx_meta_data(buf) = data;
   19c92:	61a0      	str	r0, [r4, #24]
	return net_buf_simple_add(&buf->b, len);
   19c94:	2101      	movs	r1, #1
   19c96:	f104 000c 	add.w	r0, r4, #12
   19c9a:	f002 f8f5 	bl	1be88 <net_buf_simple_add>
	hdr->code = op;
   19c9e:	7005      	strb	r5, [r0, #0]
	return buf;
   19ca0:	e7b2      	b.n	19c08 <bt_att_chan_create_pdu+0x3c>
   19ca2:	bf00      	nop
   19ca4:	00029dfa 	.word	0x00029dfa
   19ca8:	00026fec 	.word	0x00026fec
   19cac:	00029af3 	.word	0x00029af3
   19cb0:	20002ae8 	.word	0x20002ae8
   19cb4:	20000994 	.word	0x20000994
   19cb8:	00029e1f 	.word	0x00029e1f

00019cbc <bt_att_recv>:
{
   19cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19cc0:	b087      	sub	sp, #28
	if (buf->len < sizeof(*hdr)) {
   19cc2:	8a0b      	ldrh	r3, [r1, #16]
{
   19cc4:	af00      	add	r7, sp, #0
   19cc6:	4682      	mov	sl, r0
   19cc8:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   19cca:	b97b      	cbnz	r3, 19cec <bt_att_recv+0x30>
		LOG_ERR("Too small ATT PDU received");
   19ccc:	4b4c      	ldr	r3, [pc, #304]	; (19e00 <bt_att_recv+0x144>)
   19cce:	617b      	str	r3, [r7, #20]
   19cd0:	2302      	movs	r3, #2
   19cd2:	613b      	str	r3, [r7, #16]
   19cd4:	f107 0210 	add.w	r2, r7, #16
   19cd8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			LOG_WRN("Ignoring unexpected request");
   19cdc:	4849      	ldr	r0, [pc, #292]	; (19e04 <bt_att_recv+0x148>)
   19cde:	f00b fb31 	bl	25344 <z_log_msg_static_create.constprop.0>
}
   19ce2:	2000      	movs	r0, #0
   19ce4:	371c      	adds	r7, #28
   19ce6:	46bd      	mov	sp, r7
   19ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   19cec:	2101      	movs	r1, #1
   19cee:	f104 000c 	add.w	r0, r4, #12
   19cf2:	f002 f8ab 	bl	1be4c <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   19cf6:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   19cfa:	4605      	mov	r5, r0
   19cfc:	2b00      	cmp	r3, #0
   19cfe:	d0f0      	beq.n	19ce2 <bt_att_recv+0x26>
		if (hdr->code == handlers[i].op) {
   19d00:	7801      	ldrb	r1, [r0, #0]
   19d02:	f8df 8114 	ldr.w	r8, [pc, #276]	; 19e18 <bt_att_recv+0x15c>
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   19d06:	f1aa 0604 	sub.w	r6, sl, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   19d0a:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   19d0c:	f818 0033 	ldrb.w	r0, [r8, r3, lsl #3]
   19d10:	4288      	cmp	r0, r1
   19d12:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
   19d16:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   19d1a:	d114      	bne.n	19d46 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   19d1c:	f892 9002 	ldrb.w	r9, [r2, #2]
   19d20:	f1b9 0f01 	cmp.w	r9, #1
   19d24:	d131      	bne.n	19d8a <bt_att_recv+0xce>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   19d26:	2100      	movs	r1, #0
   19d28:	f10a 0030 	add.w	r0, sl, #48	; 0x30
   19d2c:	f00b fbde 	bl	254ec <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   19d30:	2800      	cmp	r0, #0
   19d32:	d035      	beq.n	19da0 <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected request");
   19d34:	4b34      	ldr	r3, [pc, #208]	; (19e08 <bt_att_recv+0x14c>)
   19d36:	617b      	str	r3, [r7, #20]
   19d38:	2302      	movs	r3, #2
   19d3a:	613b      	str	r3, [r7, #16]
   19d3c:	f107 0210 	add.w	r2, r7, #16
   19d40:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   19d44:	e7ca      	b.n	19cdc <bt_att_recv+0x20>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   19d46:	3301      	adds	r3, #1
   19d48:	2b0e      	cmp	r3, #14
   19d4a:	d1df      	bne.n	19d0c <bt_att_recv+0x50>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   19d4c:	466c      	mov	r4, sp
   19d4e:	b088      	sub	sp, #32
   19d50:	466a      	mov	r2, sp
   19d52:	4b2e      	ldr	r3, [pc, #184]	; (19e0c <bt_att_recv+0x150>)
   19d54:	482b      	ldr	r0, [pc, #172]	; (19e04 <bt_att_recv+0x148>)
   19d56:	e9c2 3105 	strd	r3, r1, [r2, #20]
   19d5a:	2303      	movs	r3, #3
   19d5c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19d60:	f842 3f10 	str.w	r3, [r2, #16]!
   19d64:	f00b faee 	bl	25344 <z_log_msg_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   19d68:	7829      	ldrb	r1, [r5, #0]
   19d6a:	46a5      	mov	sp, r4
   19d6c:	4608      	mov	r0, r1
   19d6e:	f7ff fb95 	bl	1949c <att_op_get_type>
   19d72:	2800      	cmp	r0, #0
   19d74:	d0b5      	beq.n	19ce2 <bt_att_recv+0x26>
   19d76:	2805      	cmp	r0, #5
   19d78:	d0b3      	beq.n	19ce2 <bt_att_recv+0x26>
	if (!req) {
   19d7a:	2900      	cmp	r1, #0
   19d7c:	d0b1      	beq.n	19ce2 <bt_att_recv+0x26>
   19d7e:	2306      	movs	r3, #6
   19d80:	2200      	movs	r2, #0
   19d82:	4630      	mov	r0, r6
   19d84:	f00b fd3b 	bl	257fe <send_err_rsp.part.0>
   19d88:	e7ab      	b.n	19ce2 <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
   19d8a:	f1b9 0f05 	cmp.w	r9, #5
   19d8e:	d107      	bne.n	19da0 <bt_att_recv+0xe4>
			   atomic_test_and_set_bit(att_chan->flags,
   19d90:	2101      	movs	r1, #1
   19d92:	f10a 0030 	add.w	r0, sl, #48	; 0x30
   19d96:	f00b fba9 	bl	254ec <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   19d9a:	b108      	cbz	r0, 19da0 <bt_att_recv+0xe4>
			LOG_WRN("Ignoring unexpected indication");
   19d9c:	4b1c      	ldr	r3, [pc, #112]	; (19e10 <bt_att_recv+0x154>)
   19d9e:	e7ca      	b.n	19d36 <bt_att_recv+0x7a>
	if (buf->len < handler->expect_len) {
   19da0:	44d8      	add	r8, fp
   19da2:	8a23      	ldrh	r3, [r4, #16]
   19da4:	f898 2001 	ldrb.w	r2, [r8, #1]
   19da8:	429a      	cmp	r2, r3
   19daa:	d916      	bls.n	19dda <bt_att_recv+0x11e>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   19dac:	46e9      	mov	r9, sp
   19dae:	b088      	sub	sp, #32
   19db0:	7829      	ldrb	r1, [r5, #0]
   19db2:	466a      	mov	r2, sp
   19db4:	4817      	ldr	r0, [pc, #92]	; (19e14 <bt_att_recv+0x158>)
   19db6:	61d1      	str	r1, [r2, #28]
   19db8:	2404      	movs	r4, #4
   19dba:	e9c2 0305 	strd	r0, r3, [r2, #20]
   19dbe:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   19dc2:	f842 4f10 	str.w	r4, [r2, #16]!
   19dc6:	480f      	ldr	r0, [pc, #60]	; (19e04 <bt_att_recv+0x148>)
   19dc8:	f00b fabc 	bl	25344 <z_log_msg_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   19dcc:	f898 3002 	ldrb.w	r3, [r8, #2]
   19dd0:	2b01      	cmp	r3, #1
   19dd2:	46cd      	mov	sp, r9
   19dd4:	d185      	bne.n	19ce2 <bt_att_recv+0x26>
		err = BT_ATT_ERR_INVALID_PDU;
   19dd6:	4623      	mov	r3, r4
   19dd8:	e00c      	b.n	19df4 <bt_att_recv+0x138>
		err = handler->func(att_chan, buf);
   19dda:	f8d8 3004 	ldr.w	r3, [r8, #4]
   19dde:	4621      	mov	r1, r4
   19de0:	4630      	mov	r0, r6
   19de2:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   19de4:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   19de8:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   19dea:	f47f af7a 	bne.w	19ce2 <bt_att_recv+0x26>
   19dee:	2800      	cmp	r0, #0
   19df0:	f43f af77 	beq.w	19ce2 <bt_att_recv+0x26>
		send_err_rsp(att_chan, hdr->code, 0, err);
   19df4:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   19df6:	2900      	cmp	r1, #0
   19df8:	f43f af73 	beq.w	19ce2 <bt_att_recv+0x26>
   19dfc:	e7c0      	b.n	19d80 <bt_att_recv+0xc4>
   19dfe:	bf00      	nop
   19e00:	00029e3e 	.word	0x00029e3e
   19e04:	00026fec 	.word	0x00026fec
   19e08:	00029e73 	.word	0x00029e73
   19e0c:	00029e59 	.word	0x00029e59
   19e10:	00029e8f 	.word	0x00029e8f
   19e14:	00029eae 	.word	0x00029eae
   19e18:	0002744c 	.word	0x0002744c

00019e1c <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   19e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   19e1e:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   19e20:	6803      	ldr	r3, [r0, #0]
   19e22:	460d      	mov	r5, r1
   19e24:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   19e26:	b087      	sub	sp, #28
   19e28:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   19e2a:	bf18      	it	ne
   19e2c:	2101      	movne	r1, #1
   19e2e:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   19e30:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   19e32:	f00b ffa8 	bl	25d86 <bt_gatt_change_aware>
   19e36:	b948      	cbnz	r0, 19e4c <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   19e38:	2105      	movs	r1, #5
   19e3a:	f104 0034 	add.w	r0, r4, #52	; 0x34
   19e3e:	f00b fb55 	bl	254ec <atomic_test_and_set_bit>
   19e42:	2800      	cmp	r0, #0
   19e44:	d048      	beq.n	19ed8 <att_write_rsp.constprop.0+0xbc>
			return 0;
   19e46:	2000      	movs	r0, #0
}
   19e48:	b007      	add	sp, #28
   19e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   19e4c:	2e00      	cmp	r6, #0
   19e4e:	d045      	beq.n	19edc <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   19e50:	2218      	movs	r2, #24
   19e52:	2100      	movs	r1, #0
   19e54:	4668      	mov	r0, sp
   19e56:	f00a fe04 	bl	24a62 <memset>
	if (rsp) {
   19e5a:	bb67      	cbnz	r7, 19eb6 <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   19e5c:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   19e5e:	4a20      	ldr	r2, [pc, #128]	; (19ee0 <att_write_rsp.constprop.0+0xc4>)
	data.conn = chan->att->conn;
   19e60:	681b      	ldr	r3, [r3, #0]
   19e62:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   19e64:	2300      	movs	r3, #0
   19e66:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   19e6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19e6c:	9303      	str	r3, [sp, #12]
	data.len = len;
   19e6e:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   19e72:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   19e76:	2301      	movs	r3, #1
   19e78:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   19e7c:	4631      	mov	r1, r6
   19e7e:	466b      	mov	r3, sp
   19e80:	4630      	mov	r0, r6
	data.req = req;
   19e82:	f88d 5008 	strb.w	r5, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   19e86:	f00b f9b7 	bl	251f8 <bt_gatt_foreach_attr>
	if (data.err) {
   19e8a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   19e8e:	b1e3      	cbz	r3, 19eca <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   19e90:	2f00      	cmp	r7, #0
   19e92:	d0d8      	beq.n	19e46 <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19e94:	9b01      	ldr	r3, [sp, #4]
   19e96:	6998      	ldr	r0, [r3, #24]
   19e98:	f7ff fb46 	bl	19528 <tx_meta_data_free>
			net_buf_unref(data.buf);
   19e9c:	9801      	ldr	r0, [sp, #4]
   19e9e:	f001 feaf 	bl	1bc00 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   19ea2:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   19ea6:	2d00      	cmp	r5, #0
   19ea8:	d0cd      	beq.n	19e46 <att_write_rsp.constprop.0+0x2a>
   19eaa:	4632      	mov	r2, r6
   19eac:	4629      	mov	r1, r5
   19eae:	4620      	mov	r0, r4
   19eb0:	f00b fca5 	bl	257fe <send_err_rsp.part.0>
   19eb4:	e7c7      	b.n	19e46 <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   19eb6:	2200      	movs	r2, #0
   19eb8:	4639      	mov	r1, r7
   19eba:	4620      	mov	r0, r4
   19ebc:	f7ff fe86 	bl	19bcc <bt_att_chan_create_pdu>
   19ec0:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   19ec2:	2800      	cmp	r0, #0
   19ec4:	d1ca      	bne.n	19e5c <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   19ec6:	200e      	movs	r0, #14
   19ec8:	e7be      	b.n	19e48 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   19eca:	9901      	ldr	r1, [sp, #4]
   19ecc:	2900      	cmp	r1, #0
   19ece:	d0ba      	beq.n	19e46 <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   19ed0:	4620      	mov	r0, r4
   19ed2:	f00b fc2e 	bl	25732 <bt_att_chan_send_rsp>
   19ed6:	e7b6      	b.n	19e46 <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   19ed8:	2012      	movs	r0, #18
   19eda:	e7b5      	b.n	19e48 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   19edc:	2001      	movs	r0, #1
   19ede:	e7b3      	b.n	19e48 <att_write_rsp.constprop.0+0x2c>
   19ee0:	00025197 	.word	0x00025197

00019ee4 <bt_att_create_pdu>:
{
   19ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19ee8:	af00      	add	r7, sp, #0
   19eea:	4688      	mov	r8, r1
   19eec:	4616      	mov	r6, r2
	att = att_get(conn);
   19eee:	f7ff fc07 	bl	19700 <att_get>
	if (!att) {
   19ef2:	b300      	cbz	r0, 19f36 <bt_att_create_pdu+0x52>
	return list->head;
   19ef4:	6a83      	ldr	r3, [r0, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19ef6:	4618      	mov	r0, r3
   19ef8:	b11b      	cbz	r3, 19f02 <bt_att_create_pdu+0x1e>
	return node->next;
   19efa:	f850 3988 	ldr.w	r3, [r0], #-136
   19efe:	b103      	cbz	r3, 19f02 <bt_att_create_pdu+0x1e>
   19f00:	3b88      	subs	r3, #136	; 0x88
		if (len + sizeof(op) > bt_att_mtu(chan)) {
   19f02:	1c74      	adds	r4, r6, #1
   19f04:	4621      	mov	r1, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19f06:	b138      	cbz	r0, 19f18 <bt_att_create_pdu+0x34>
	return MIN(chan->chan.rx.mtu, chan->chan.tx.mtu);
   19f08:	8b42      	ldrh	r2, [r0, #26]
   19f0a:	8d45      	ldrh	r5, [r0, #42]	; 0x2a
		if (len + sizeof(op) > bt_att_mtu(chan)) {
   19f0c:	42aa      	cmp	r2, r5
   19f0e:	bf28      	it	cs
   19f10:	462a      	movcs	r2, r5
   19f12:	42a2      	cmp	r2, r4
   19f14:	d211      	bcs.n	19f3a <bt_att_create_pdu+0x56>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19f16:	b9bb      	cbnz	r3, 19f48 <bt_att_create_pdu+0x64>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   19f18:	466d      	mov	r5, sp
   19f1a:	b088      	sub	sp, #32
   19f1c:	466a      	mov	r2, sp
   19f1e:	4b0e      	ldr	r3, [pc, #56]	; (19f58 <bt_att_create_pdu+0x74>)
   19f20:	480e      	ldr	r0, [pc, #56]	; (19f5c <bt_att_create_pdu+0x78>)
   19f22:	e9c2 3405 	strd	r3, r4, [r2, #20]
   19f26:	2303      	movs	r3, #3
   19f28:	f842 3f10 	str.w	r3, [r2, #16]!
   19f2c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   19f30:	f00b fa08 	bl	25344 <z_log_msg_static_create.constprop.0>
   19f34:	46ad      	mov	sp, r5
		return NULL;
   19f36:	2000      	movs	r0, #0
   19f38:	e003      	b.n	19f42 <bt_att_create_pdu+0x5e>
		return bt_att_chan_create_pdu(chan, op, len);
   19f3a:	4632      	mov	r2, r6
   19f3c:	4641      	mov	r1, r8
   19f3e:	f7ff fe45 	bl	19bcc <bt_att_chan_create_pdu>
}
   19f42:	46bd      	mov	sp, r7
   19f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19f48:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   19f4c:	b105      	cbz	r5, 19f50 <bt_att_create_pdu+0x6c>
   19f4e:	3d88      	subs	r5, #136	; 0x88
		if (len + sizeof(op) > bt_att_mtu(chan)) {
   19f50:	4618      	mov	r0, r3
   19f52:	460c      	mov	r4, r1
   19f54:	462b      	mov	r3, r5
   19f56:	e7d7      	b.n	19f08 <bt_att_create_pdu+0x24>
   19f58:	00029ecd 	.word	0x00029ecd
   19f5c:	00026fec 	.word	0x00026fec

00019f60 <att_read_group_req>:
{
   19f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   19f64:	8a0e      	ldrh	r6, [r1, #16]
   19f66:	3e04      	subs	r6, #4
   19f68:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   19f6a:	2e02      	cmp	r6, #2
{
   19f6c:	4604      	mov	r4, r0
   19f6e:	b08c      	sub	sp, #48	; 0x30
   19f70:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   19f72:	d001      	beq.n	19f78 <att_read_group_req+0x18>
   19f74:	2e10      	cmp	r6, #16
   19f76:	d16a      	bne.n	1a04e <att_read_group_req+0xee>
   19f78:	2104      	movs	r1, #4
   19f7a:	300c      	adds	r0, #12
   19f7c:	f001 ff66 	bl	1be4c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19f80:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   19f84:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   19f86:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   19f88:	1d01      	adds	r1, r0, #4
   19f8a:	4632      	mov	r2, r6
   19f8c:	4640      	mov	r0, r8
   19f8e:	f00a fdb8 	bl	24b02 <bt_uuid_create>
   19f92:	2800      	cmp	r0, #0
   19f94:	d05d      	beq.n	1a052 <att_read_group_req+0xf2>
	if (!start || !end) {
   19f96:	2d00      	cmp	r5, #0
   19f98:	d03a      	beq.n	1a010 <att_read_group_req+0xb0>
   19f9a:	2600      	movs	r6, #0
   19f9c:	2f00      	cmp	r7, #0
   19f9e:	d036      	beq.n	1a00e <att_read_group_req+0xae>
	if (start > end) {
   19fa0:	42bd      	cmp	r5, r7
   19fa2:	d835      	bhi.n	1a010 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   19fa4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   19fa8:	a901      	add	r1, sp, #4
   19faa:	4640      	mov	r0, r8
   19fac:	f88d 6004 	strb.w	r6, [sp, #4]
   19fb0:	f8ad 3006 	strh.w	r3, [sp, #6]
   19fb4:	f00a fd77 	bl	24aa6 <bt_uuid_cmp>
   19fb8:	bb70      	cbnz	r0, 1a018 <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   19fba:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   19fbc:	2214      	movs	r2, #20
   19fbe:	2100      	movs	r1, #0
   19fc0:	a807      	add	r0, sp, #28
   19fc2:	f00a fd4e 	bl	24a62 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   19fc6:	2201      	movs	r2, #1
   19fc8:	2111      	movs	r1, #17
   19fca:	4630      	mov	r0, r6
   19fcc:	f7ff ff8a 	bl	19ee4 <bt_att_create_pdu>
   19fd0:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   19fd2:	2800      	cmp	r0, #0
   19fd4:	d03d      	beq.n	1a052 <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   19fd6:	2101      	movs	r1, #1
   19fd8:	300c      	adds	r0, #12
	data.uuid = uuid;
   19fda:	e9cd 4807 	strd	r4, r8, [sp, #28]
   19fde:	f001 ff53 	bl	1be88 <net_buf_simple_add>
	data.rsp->len = 0U;
   19fe2:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   19fe4:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   19fe6:	4a1c      	ldr	r2, [pc, #112]	; (1a058 <att_read_group_req+0xf8>)
	data.rsp->len = 0U;
   19fe8:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   19fea:	4639      	mov	r1, r7
	data.group = NULL;
   19fec:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   19fee:	4628      	mov	r0, r5
   19ff0:	ab07      	add	r3, sp, #28
   19ff2:	f00b f901 	bl	251f8 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   19ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19ff8:	781b      	ldrb	r3, [r3, #0]
   19ffa:	bb1b      	cbnz	r3, 1a044 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   19ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19ffe:	6998      	ldr	r0, [r3, #24]
   1a000:	f7ff fa92 	bl	19528 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1a004:	9809      	ldr	r0, [sp, #36]	; 0x24
   1a006:	f001 fdfb 	bl	1bc00 <net_buf_unref>
	if (!req) {
   1a00a:	230a      	movs	r3, #10
   1a00c:	e001      	b.n	1a012 <att_read_group_req+0xb2>
			*err = 0U;
   1a00e:	463d      	mov	r5, r7
	if (!req) {
   1a010:	2301      	movs	r3, #1
   1a012:	462a      	mov	r2, r5
   1a014:	2110      	movs	r1, #16
   1a016:	e00e      	b.n	1a036 <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   1a018:	f642 0301 	movw	r3, #10241	; 0x2801
   1a01c:	a907      	add	r1, sp, #28
   1a01e:	4640      	mov	r0, r8
   1a020:	f88d 601c 	strb.w	r6, [sp, #28]
   1a024:	f8ad 301e 	strh.w	r3, [sp, #30]
   1a028:	f00a fd3d 	bl	24aa6 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1a02c:	2800      	cmp	r0, #0
   1a02e:	d0c4      	beq.n	19fba <att_read_group_req+0x5a>
	if (!req) {
   1a030:	2310      	movs	r3, #16
   1a032:	462a      	mov	r2, r5
   1a034:	4619      	mov	r1, r3
   1a036:	4620      	mov	r0, r4
   1a038:	f00b fbe1 	bl	257fe <send_err_rsp.part.0>
		return 0;
   1a03c:	2000      	movs	r0, #0
}
   1a03e:	b00c      	add	sp, #48	; 0x30
   1a040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   1a044:	9909      	ldr	r1, [sp, #36]	; 0x24
   1a046:	4620      	mov	r0, r4
   1a048:	f00b fb73 	bl	25732 <bt_att_chan_send_rsp>
	return 0;
   1a04c:	e7f6      	b.n	1a03c <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   1a04e:	2004      	movs	r0, #4
   1a050:	e7f5      	b.n	1a03e <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   1a052:	200e      	movs	r0, #14
   1a054:	e7f3      	b.n	1a03e <att_read_group_req+0xde>
   1a056:	bf00      	nop
   1a058:	000197a5 	.word	0x000197a5

0001a05c <att_read_mult_vl_req>:
{
   1a05c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1a060:	6846      	ldr	r6, [r0, #4]
{
   1a062:	b085      	sub	sp, #20
   1a064:	4604      	mov	r4, r0
   1a066:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1a068:	4630      	mov	r0, r6
   1a06a:	2101      	movs	r1, #1
   1a06c:	f00b fe8b 	bl	25d86 <bt_gatt_change_aware>
   1a070:	b950      	cbnz	r0, 1a088 <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1a072:	2105      	movs	r1, #5
   1a074:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1a078:	f00b fa38 	bl	254ec <atomic_test_and_set_bit>
   1a07c:	2800      	cmp	r0, #0
   1a07e:	d13b      	bne.n	1a0f8 <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1a080:	2012      	movs	r0, #18
}
   1a082:	b005      	add	sp, #20
   1a084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1a088:	2210      	movs	r2, #16
   1a08a:	2100      	movs	r1, #0
   1a08c:	4668      	mov	r0, sp
   1a08e:	f00a fce8 	bl	24a62 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   1a092:	2200      	movs	r2, #0
   1a094:	2121      	movs	r1, #33	; 0x21
   1a096:	4630      	mov	r0, r6
   1a098:	f7ff ff24 	bl	19ee4 <bt_att_create_pdu>
   1a09c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1a09e:	b368      	cbz	r0, 1a0fc <att_read_mult_vl_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1a0a0:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1a100 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   1a0a4:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   1a0a6:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1a0aa:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   1a0ae:	8a2b      	ldrh	r3, [r5, #16]
   1a0b0:	2b01      	cmp	r3, #1
   1a0b2:	d804      	bhi.n	1a0be <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   1a0b4:	9902      	ldr	r1, [sp, #8]
   1a0b6:	4620      	mov	r0, r4
   1a0b8:	f00b fb3b 	bl	25732 <bt_att_chan_send_rsp>
	return 0;
   1a0bc:	e01c      	b.n	1a0f8 <att_read_mult_vl_req+0x9c>
   1a0be:	4638      	mov	r0, r7
   1a0c0:	f00b fed9 	bl	25e76 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1a0c4:	466b      	mov	r3, sp
   1a0c6:	464a      	mov	r2, r9
   1a0c8:	4601      	mov	r1, r0
   1a0ca:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1a0cc:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   1a0d0:	f00b f892 	bl	251f8 <bt_gatt_foreach_attr>
		if (data.err) {
   1a0d4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1a0d8:	2b00      	cmp	r3, #0
   1a0da:	d0e8      	beq.n	1a0ae <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1a0dc:	9b02      	ldr	r3, [sp, #8]
   1a0de:	6998      	ldr	r0, [r3, #24]
   1a0e0:	f7ff fa22 	bl	19528 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1a0e4:	9802      	ldr	r0, [sp, #8]
   1a0e6:	f001 fd8b 	bl	1bc00 <net_buf_unref>
	if (!req) {
   1a0ea:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1a0ee:	4632      	mov	r2, r6
   1a0f0:	2120      	movs	r1, #32
   1a0f2:	4620      	mov	r0, r4
   1a0f4:	f00b fb83 	bl	257fe <send_err_rsp.part.0>
			return 0;
   1a0f8:	2000      	movs	r0, #0
   1a0fa:	e7c2      	b.n	1a082 <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   1a0fc:	200e      	movs	r0, #14
   1a0fe:	e7c0      	b.n	1a082 <att_read_mult_vl_req+0x26>
   1a100:	0002555d 	.word	0x0002555d

0001a104 <att_read_mult_req>:
{
   1a104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1a108:	6846      	ldr	r6, [r0, #4]
{
   1a10a:	b085      	sub	sp, #20
   1a10c:	4604      	mov	r4, r0
   1a10e:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1a110:	4630      	mov	r0, r6
   1a112:	2101      	movs	r1, #1
   1a114:	f00b fe37 	bl	25d86 <bt_gatt_change_aware>
   1a118:	b950      	cbnz	r0, 1a130 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1a11a:	2105      	movs	r1, #5
   1a11c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1a120:	f00b f9e4 	bl	254ec <atomic_test_and_set_bit>
   1a124:	2800      	cmp	r0, #0
   1a126:	d13b      	bne.n	1a1a0 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1a128:	2012      	movs	r0, #18
}
   1a12a:	b005      	add	sp, #20
   1a12c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   1a130:	2210      	movs	r2, #16
   1a132:	2100      	movs	r1, #0
   1a134:	4668      	mov	r0, sp
   1a136:	f00a fc94 	bl	24a62 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1a13a:	2200      	movs	r2, #0
   1a13c:	210f      	movs	r1, #15
   1a13e:	4630      	mov	r0, r6
   1a140:	f7ff fed0 	bl	19ee4 <bt_att_create_pdu>
   1a144:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1a146:	b368      	cbz	r0, 1a1a4 <att_read_mult_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1a148:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1a1a8 <att_read_mult_req+0xa4>
	data.chan = chan;
   1a14c:	9400      	str	r4, [sp, #0]
   1a14e:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1a152:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   1a156:	8a2b      	ldrh	r3, [r5, #16]
   1a158:	2b01      	cmp	r3, #1
   1a15a:	d804      	bhi.n	1a166 <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   1a15c:	9902      	ldr	r1, [sp, #8]
   1a15e:	4620      	mov	r0, r4
   1a160:	f00b fae7 	bl	25732 <bt_att_chan_send_rsp>
	return 0;
   1a164:	e01c      	b.n	1a1a0 <att_read_mult_req+0x9c>
   1a166:	4638      	mov	r0, r7
   1a168:	f00b fe85 	bl	25e76 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1a16c:	466b      	mov	r3, sp
   1a16e:	464a      	mov	r2, r9
   1a170:	4601      	mov	r1, r0
   1a172:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1a174:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1a178:	f00b f83e 	bl	251f8 <bt_gatt_foreach_attr>
		if (data.err) {
   1a17c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1a180:	2b00      	cmp	r3, #0
   1a182:	d0e8      	beq.n	1a156 <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1a184:	9b02      	ldr	r3, [sp, #8]
   1a186:	6998      	ldr	r0, [r3, #24]
   1a188:	f7ff f9ce 	bl	19528 <tx_meta_data_free>
			net_buf_unref(data.buf);
   1a18c:	9802      	ldr	r0, [sp, #8]
   1a18e:	f001 fd37 	bl	1bc00 <net_buf_unref>
	if (!req) {
   1a192:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1a196:	4632      	mov	r2, r6
   1a198:	210e      	movs	r1, #14
   1a19a:	4620      	mov	r0, r4
   1a19c:	f00b fb2f 	bl	257fe <send_err_rsp.part.0>
			return 0;
   1a1a0:	2000      	movs	r0, #0
   1a1a2:	e7c2      	b.n	1a12a <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   1a1a4:	200e      	movs	r0, #14
   1a1a6:	e7c0      	b.n	1a12a <att_read_mult_req+0x26>
   1a1a8:	00025517 	.word	0x00025517

0001a1ac <att_read_rsp>:
{
   1a1ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1a1b0:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   1a1b4:	4604      	mov	r4, r0
   1a1b6:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1a1b8:	4640      	mov	r0, r8
   1a1ba:	2101      	movs	r1, #1
{
   1a1bc:	4617      	mov	r7, r2
   1a1be:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   1a1c0:	f00b fde1 	bl	25d86 <bt_gatt_change_aware>
   1a1c4:	b948      	cbnz	r0, 1a1da <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1a1c6:	2105      	movs	r1, #5
   1a1c8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1a1cc:	f00b f98e 	bl	254ec <atomic_test_and_set_bit>
   1a1d0:	bb78      	cbnz	r0, 1a232 <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1a1d2:	2012      	movs	r0, #18
}
   1a1d4:	b004      	add	sp, #16
   1a1d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   1a1da:	b38d      	cbz	r5, 1a240 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   1a1dc:	2210      	movs	r2, #16
   1a1de:	2100      	movs	r1, #0
   1a1e0:	4668      	mov	r0, sp
   1a1e2:	f00a fc3e 	bl	24a62 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1a1e6:	2200      	movs	r2, #0
   1a1e8:	4639      	mov	r1, r7
   1a1ea:	4640      	mov	r0, r8
   1a1ec:	f7ff fe7a 	bl	19ee4 <bt_att_create_pdu>
   1a1f0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1a1f2:	b338      	cbz	r0, 1a244 <att_read_rsp+0x98>
	data.offset = offset;
   1a1f4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1a1f8:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1a1fc:	2301      	movs	r3, #1
   1a1fe:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1a202:	4a11      	ldr	r2, [pc, #68]	; (1a248 <att_read_rsp+0x9c>)
	data.chan = chan;
   1a204:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1a206:	466b      	mov	r3, sp
   1a208:	4629      	mov	r1, r5
   1a20a:	4628      	mov	r0, r5
   1a20c:	f00a fff4 	bl	251f8 <bt_gatt_foreach_attr>
	if (data.err) {
   1a210:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1a214:	b17b      	cbz	r3, 1a236 <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1a216:	9b02      	ldr	r3, [sp, #8]
   1a218:	6998      	ldr	r0, [r3, #24]
   1a21a:	f7ff f985 	bl	19528 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1a21e:	9802      	ldr	r0, [sp, #8]
   1a220:	f001 fcee 	bl	1bc00 <net_buf_unref>
	if (!req) {
   1a224:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1a228:	462a      	mov	r2, r5
   1a22a:	4631      	mov	r1, r6
   1a22c:	4620      	mov	r0, r4
   1a22e:	f00b fae6 	bl	257fe <send_err_rsp.part.0>
			return 0;
   1a232:	2000      	movs	r0, #0
   1a234:	e7ce      	b.n	1a1d4 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   1a236:	9902      	ldr	r1, [sp, #8]
   1a238:	4620      	mov	r0, r4
   1a23a:	f00b fa7a 	bl	25732 <bt_att_chan_send_rsp>
	return 0;
   1a23e:	e7f8      	b.n	1a232 <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   1a240:	2001      	movs	r0, #1
   1a242:	e7c7      	b.n	1a1d4 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   1a244:	200e      	movs	r0, #14
   1a246:	e7c5      	b.n	1a1d4 <att_read_rsp+0x28>
   1a248:	00025517 	.word	0x00025517

0001a24c <att_read_type_req>:
{
   1a24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1a250:	8a0d      	ldrh	r5, [r1, #16]
   1a252:	3d04      	subs	r5, #4
   1a254:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   1a256:	2d02      	cmp	r5, #2
{
   1a258:	4604      	mov	r4, r0
   1a25a:	b08c      	sub	sp, #48	; 0x30
   1a25c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1a25e:	d001      	beq.n	1a264 <att_read_type_req+0x18>
   1a260:	2d10      	cmp	r5, #16
   1a262:	d150      	bne.n	1a306 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   1a264:	2104      	movs	r1, #4
   1a266:	300c      	adds	r0, #12
   1a268:	f001 fdf0 	bl	1be4c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1a26c:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   1a270:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1a272:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1a274:	1d01      	adds	r1, r0, #4
   1a276:	462a      	mov	r2, r5
   1a278:	4640      	mov	r0, r8
   1a27a:	f00a fc42 	bl	24b02 <bt_uuid_create>
   1a27e:	b188      	cbz	r0, 1a2a4 <att_read_type_req+0x58>
	if (!start || !end) {
   1a280:	b19e      	cbz	r6, 1a2aa <att_read_type_req+0x5e>
   1a282:	b18f      	cbz	r7, 1a2a8 <att_read_type_req+0x5c>
	if (start > end) {
   1a284:	42b7      	cmp	r7, r6
   1a286:	d310      	bcc.n	1a2aa <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   1a288:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   1a28a:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   1a28c:	2100      	movs	r1, #0
   1a28e:	eb0d 0002 	add.w	r0, sp, r2
   1a292:	f00a fbe6 	bl	24a62 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1a296:	2201      	movs	r2, #1
   1a298:	2109      	movs	r1, #9
   1a29a:	4628      	mov	r0, r5
   1a29c:	f7ff fe22 	bl	19ee4 <bt_att_create_pdu>
   1a2a0:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   1a2a2:	b960      	cbnz	r0, 1a2be <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   1a2a4:	200e      	movs	r0, #14
   1a2a6:	e007      	b.n	1a2b8 <att_read_type_req+0x6c>
			*err = 0U;
   1a2a8:	463e      	mov	r6, r7
	if (!req) {
   1a2aa:	2301      	movs	r3, #1
   1a2ac:	4632      	mov	r2, r6
   1a2ae:	2108      	movs	r1, #8
   1a2b0:	4620      	mov	r0, r4
   1a2b2:	f00b faa4 	bl	257fe <send_err_rsp.part.0>
		return 0;
   1a2b6:	2000      	movs	r0, #0
}
   1a2b8:	b00c      	add	sp, #48	; 0x30
   1a2ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   1a2be:	2101      	movs	r1, #1
   1a2c0:	300c      	adds	r0, #12
	data.uuid = uuid;
   1a2c2:	e9cd 4806 	strd	r4, r8, [sp, #24]
   1a2c6:	f001 fddf 	bl	1be88 <net_buf_simple_add>
	data.rsp->len = 0U;
   1a2ca:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1a2cc:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   1a2ce:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1a2d0:	230a      	movs	r3, #10
   1a2d2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1a2d6:	4a0d      	ldr	r2, [pc, #52]	; (1a30c <att_read_type_req+0xc0>)
   1a2d8:	ab06      	add	r3, sp, #24
   1a2da:	4639      	mov	r1, r7
   1a2dc:	4630      	mov	r0, r6
   1a2de:	f00a ff8b 	bl	251f8 <bt_gatt_foreach_attr>
	if (data.err) {
   1a2e2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1a2e6:	b14b      	cbz	r3, 1a2fc <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1a2e8:	9b08      	ldr	r3, [sp, #32]
   1a2ea:	6998      	ldr	r0, [r3, #24]
   1a2ec:	f7ff f91c 	bl	19528 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1a2f0:	9808      	ldr	r0, [sp, #32]
   1a2f2:	f001 fc85 	bl	1bc00 <net_buf_unref>
	if (!req) {
   1a2f6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1a2fa:	e7d7      	b.n	1a2ac <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   1a2fc:	9908      	ldr	r1, [sp, #32]
   1a2fe:	4620      	mov	r0, r4
   1a300:	f00b fa17 	bl	25732 <bt_att_chan_send_rsp>
	return 0;
   1a304:	e7d7      	b.n	1a2b6 <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   1a306:	2004      	movs	r0, #4
   1a308:	e7d6      	b.n	1a2b8 <att_read_type_req+0x6c>
   1a30a:	bf00      	nop
   1a30c:	0001985d 	.word	0x0001985d

0001a310 <att_find_type_req>:
{
   1a310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a314:	460f      	mov	r7, r1
   1a316:	b086      	sub	sp, #24
   1a318:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1a31a:	2106      	movs	r1, #6
   1a31c:	f107 000c 	add.w	r0, r7, #12
   1a320:	f001 fd94 	bl	1be4c <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1a324:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1a326:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   1a32a:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   1a32c:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   1a330:	b1c5      	cbz	r5, 1a364 <att_find_type_req+0x54>
   1a332:	2300      	movs	r3, #0
   1a334:	f1b8 0f00 	cmp.w	r8, #0
   1a338:	d013      	beq.n	1a362 <att_find_type_req+0x52>
	if (start > end) {
   1a33a:	4545      	cmp	r5, r8
   1a33c:	d812      	bhi.n	1a364 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1a33e:	f88d 3000 	strb.w	r3, [sp]
   1a342:	f88d 3004 	strb.w	r3, [sp, #4]
   1a346:	a901      	add	r1, sp, #4
   1a348:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1a34c:	4668      	mov	r0, sp
   1a34e:	f8ad 2002 	strh.w	r2, [sp, #2]
   1a352:	f8ad 3006 	strh.w	r3, [sp, #6]
   1a356:	f00a fba6 	bl	24aa6 <bt_uuid_cmp>
   1a35a:	4606      	mov	r6, r0
   1a35c:	b160      	cbz	r0, 1a378 <att_find_type_req+0x68>
	if (!req) {
   1a35e:	230a      	movs	r3, #10
   1a360:	e001      	b.n	1a366 <att_find_type_req+0x56>
			*err = 0U;
   1a362:	4645      	mov	r5, r8
	if (!req) {
   1a364:	2301      	movs	r3, #1
   1a366:	462a      	mov	r2, r5
   1a368:	2106      	movs	r1, #6
   1a36a:	4620      	mov	r0, r4
   1a36c:	f00b fa47 	bl	257fe <send_err_rsp.part.0>
		return 0;
   1a370:	2000      	movs	r0, #0
}
   1a372:	b006      	add	sp, #24
   1a374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   1a378:	f8d4 a004 	ldr.w	sl, [r4, #4]
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1a37c:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   1a37e:	4601      	mov	r1, r0
   1a380:	2214      	movs	r2, #20
   1a382:	a801      	add	r0, sp, #4
   1a384:	f00a fb6d 	bl	24a62 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1a388:	4632      	mov	r2, r6
   1a38a:	2107      	movs	r1, #7
   1a38c:	4650      	mov	r0, sl
   1a38e:	f7ff fda9 	bl	19ee4 <bt_att_create_pdu>
   1a392:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1a394:	b1f8      	cbz	r0, 1a3d6 <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1a396:	230a      	movs	r3, #10
   1a398:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1a39c:	4a0f      	ldr	r2, [pc, #60]	; (1a3dc <att_find_type_req+0xcc>)
	data.chan = chan;
   1a39e:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1a3a0:	ab01      	add	r3, sp, #4
   1a3a2:	4641      	mov	r1, r8
   1a3a4:	4628      	mov	r0, r5
	data.value = value;
   1a3a6:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.value_len = value_len;
   1a3aa:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1a3ae:	f00a ff23 	bl	251f8 <bt_gatt_foreach_attr>
	if (data.err) {
   1a3b2:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1a3b6:	b14b      	cbz	r3, 1a3cc <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1a3b8:	9b02      	ldr	r3, [sp, #8]
   1a3ba:	6998      	ldr	r0, [r3, #24]
   1a3bc:	f7ff f8b4 	bl	19528 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1a3c0:	9802      	ldr	r0, [sp, #8]
   1a3c2:	f001 fc1d 	bl	1bc00 <net_buf_unref>
	if (!req) {
   1a3c6:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1a3ca:	e7cc      	b.n	1a366 <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   1a3cc:	9902      	ldr	r1, [sp, #8]
   1a3ce:	4620      	mov	r0, r4
   1a3d0:	f00b f9af 	bl	25732 <bt_att_chan_send_rsp>
	return 0;
   1a3d4:	e7cc      	b.n	1a370 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   1a3d6:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1a3d8:	e7cb      	b.n	1a372 <att_find_type_req+0x62>
   1a3da:	bf00      	nop
   1a3dc:	00019569 	.word	0x00019569

0001a3e0 <att_find_info_req>:
{
   1a3e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1a3e2:	68cb      	ldr	r3, [r1, #12]
	start_handle = sys_le16_to_cpu(req->start_handle);
   1a3e4:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1a3e6:	885e      	ldrh	r6, [r3, #2]
{
   1a3e8:	b085      	sub	sp, #20
   1a3ea:	4604      	mov	r4, r0
	if (!start || !end) {
   1a3ec:	b195      	cbz	r5, 1a414 <att_find_info_req+0x34>
   1a3ee:	b186      	cbz	r6, 1a412 <att_find_info_req+0x32>
	if (start > end) {
   1a3f0:	42b5      	cmp	r5, r6
   1a3f2:	d80f      	bhi.n	1a414 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   1a3f4:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   1a3f6:	2210      	movs	r2, #16
   1a3f8:	2100      	movs	r1, #0
   1a3fa:	4668      	mov	r0, sp
   1a3fc:	f00a fb31 	bl	24a62 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1a400:	2200      	movs	r2, #0
   1a402:	2105      	movs	r1, #5
   1a404:	4638      	mov	r0, r7
   1a406:	f7ff fd6d 	bl	19ee4 <bt_att_create_pdu>
   1a40a:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   1a40c:	b958      	cbnz	r0, 1a426 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   1a40e:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   1a410:	e007      	b.n	1a422 <att_find_info_req+0x42>
			*err = 0U;
   1a412:	4635      	mov	r5, r6
	if (!req) {
   1a414:	2301      	movs	r3, #1
   1a416:	462a      	mov	r2, r5
   1a418:	2104      	movs	r1, #4
   1a41a:	4620      	mov	r0, r4
   1a41c:	f00b f9ef 	bl	257fe <send_err_rsp.part.0>
		return 0;
   1a420:	2000      	movs	r0, #0
}
   1a422:	b005      	add	sp, #20
   1a424:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1a426:	466b      	mov	r3, sp
   1a428:	4a0a      	ldr	r2, [pc, #40]	; (1a454 <att_find_info_req+0x74>)
	data.chan = chan;
   1a42a:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1a42c:	4631      	mov	r1, r6
   1a42e:	4628      	mov	r0, r5
   1a430:	f00a fee2 	bl	251f8 <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1a434:	9b02      	ldr	r3, [sp, #8]
   1a436:	b943      	cbnz	r3, 1a44a <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1a438:	9b01      	ldr	r3, [sp, #4]
   1a43a:	6998      	ldr	r0, [r3, #24]
   1a43c:	f7ff f874 	bl	19528 <tx_meta_data_free>
		net_buf_unref(data.buf);
   1a440:	9801      	ldr	r0, [sp, #4]
   1a442:	f001 fbdd 	bl	1bc00 <net_buf_unref>
	if (!req) {
   1a446:	230a      	movs	r3, #10
   1a448:	e7e5      	b.n	1a416 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   1a44a:	9901      	ldr	r1, [sp, #4]
   1a44c:	4620      	mov	r0, r4
   1a44e:	f00b f970 	bl	25732 <bt_att_chan_send_rsp>
	return 0;
   1a452:	e7e5      	b.n	1a420 <att_find_info_req+0x40>
   1a454:	0002520f 	.word	0x0002520f

0001a458 <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   1a458:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   1a45a:	4c0b      	ldr	r4, [pc, #44]	; (1a488 <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   1a45c:	4d0b      	ldr	r5, [pc, #44]	; (1a48c <bt_att_init+0x34>)
   1a45e:	4620      	mov	r0, r4
   1a460:	f00c fa7d 	bl	2695e <z_impl_k_queue_init>
   1a464:	4629      	mov	r1, r5
   1a466:	4620      	mov	r0, r4
   1a468:	f00c fa86 	bl	26978 <k_queue_append>
   1a46c:	f105 0114 	add.w	r1, r5, #20
   1a470:	4620      	mov	r0, r4
   1a472:	f00c fa81 	bl	26978 <k_queue_append>
   1a476:	f105 0128 	add.w	r1, r5, #40	; 0x28
   1a47a:	4620      	mov	r0, r4
   1a47c:	f00c fa7c 	bl	26978 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   1a480:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   1a484:	f000 bbbc 	b.w	1ac00 <bt_gatt_init>
   1a488:	20000994 	.word	0x20000994
   1a48c:	20002cec 	.word	0x20002cec

0001a490 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1a490:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   1a492:	2300      	movs	r3, #0
{
   1a494:	4605      	mov	r5, r0
   1a496:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   1a498:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   1a49a:	f008 f845 	bl	22528 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   1a49e:	4b0b      	ldr	r3, [pc, #44]	; (1a4cc <bt_att_req_alloc+0x3c>)
   1a4a0:	681b      	ldr	r3, [r3, #0]
   1a4a2:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   1a4a4:	bf04      	itt	eq
   1a4a6:	2500      	moveq	r5, #0
   1a4a8:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1a4aa:	a901      	add	r1, sp, #4
   1a4ac:	4808      	ldr	r0, [pc, #32]	; (1a4d0 <bt_att_req_alloc+0x40>)
   1a4ae:	462a      	mov	r2, r5
   1a4b0:	4623      	mov	r3, r4
   1a4b2:	f005 fd19 	bl	1fee8 <k_mem_slab_alloc>
   1a4b6:	4601      	mov	r1, r0
   1a4b8:	b930      	cbnz	r0, 1a4c8 <bt_att_req_alloc+0x38>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1a4ba:	9801      	ldr	r0, [sp, #4]
   1a4bc:	2210      	movs	r2, #16
   1a4be:	f00a fad0 	bl	24a62 <memset>

	return req;
   1a4c2:	9801      	ldr	r0, [sp, #4]
}
   1a4c4:	b003      	add	sp, #12
   1a4c6:	bd30      	pop	{r4, r5, pc}
		return NULL;
   1a4c8:	2000      	movs	r0, #0
   1a4ca:	e7fb      	b.n	1a4c4 <bt_att_req_alloc+0x34>
   1a4cc:	20002d28 	.word	0x20002d28
   1a4d0:	20000900 	.word	0x20000900

0001a4d4 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1a4d4:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   1a4d6:	6883      	ldr	r3, [r0, #8]
{
   1a4d8:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   1a4da:	b14b      	cbz	r3, 1a4f0 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   1a4dc:	6998      	ldr	r0, [r3, #24]
   1a4de:	f7ff f823 	bl	19528 <tx_meta_data_free>
		net_buf_unref(req->buf);
   1a4e2:	9b01      	ldr	r3, [sp, #4]
   1a4e4:	6898      	ldr	r0, [r3, #8]
   1a4e6:	f001 fb8b 	bl	1bc00 <net_buf_unref>
		req->buf = NULL;
   1a4ea:	9b01      	ldr	r3, [sp, #4]
   1a4ec:	2200      	movs	r2, #0
   1a4ee:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1a4f0:	4803      	ldr	r0, [pc, #12]	; (1a500 <bt_att_req_free+0x2c>)
   1a4f2:	a901      	add	r1, sp, #4
   1a4f4:	f005 fd62 	bl	1ffbc <k_mem_slab_free>
}
   1a4f8:	b003      	add	sp, #12
   1a4fa:	f85d fb04 	ldr.w	pc, [sp], #4
   1a4fe:	bf00      	nop
   1a500:	20000900 	.word	0x20000900

0001a504 <att_handle_rsp>:
{
   1a504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a508:	4604      	mov	r4, r0
   1a50a:	b088      	sub	sp, #32
	k_work_cancel_delayable(&chan->timeout_work);
   1a50c:	3058      	adds	r0, #88	; 0x58
{
   1a50e:	460e      	mov	r6, r1
   1a510:	4617      	mov	r7, r2
   1a512:	461d      	mov	r5, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1a514:	f006 fe9a 	bl	2124c <k_work_cancel_delayable>
	if (!chan->req) {
   1a518:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1a51a:	b980      	cbnz	r0, 1a53e <att_handle_rsp+0x3a>
		LOG_WRN("No pending ATT request");
   1a51c:	4b19      	ldr	r3, [pc, #100]	; (1a584 <att_handle_rsp+0x80>)
   1a51e:	9307      	str	r3, [sp, #28]
   1a520:	4819      	ldr	r0, [pc, #100]	; (1a588 <att_handle_rsp+0x84>)
   1a522:	2302      	movs	r3, #2
   1a524:	aa06      	add	r2, sp, #24
   1a526:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a52a:	9306      	str	r3, [sp, #24]
   1a52c:	f00a ff0a 	bl	25344 <z_log_msg_static_create.constprop.0>
	att_req_send_process(chan->att);
   1a530:	6820      	ldr	r0, [r4, #0]
   1a532:	f00b f88a 	bl	2564a <att_req_send_process>
}
   1a536:	2000      	movs	r0, #0
   1a538:	b008      	add	sp, #32
   1a53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   1a53e:	4b13      	ldr	r3, [pc, #76]	; (1a58c <att_handle_rsp+0x88>)
   1a540:	4298      	cmp	r0, r3
   1a542:	f04f 0800 	mov.w	r8, #0
   1a546:	d102      	bne.n	1a54e <att_handle_rsp+0x4a>
		chan->req = NULL;
   1a548:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
   1a54c:	e7f0      	b.n	1a530 <att_handle_rsp+0x2c>
	func = chan->req->func;
   1a54e:	f8d0 9004 	ldr.w	r9, [r0, #4]
	chan->req->func = NULL;
   1a552:	f8c0 8004 	str.w	r8, [r0, #4]
	params = chan->req->user_data;
   1a556:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   1a558:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
   1a55c:	f7ff ffba 	bl	1a4d4 <bt_att_req_free>
	att_req_send_process(chan->att);
   1a560:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   1a562:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
	att_req_send_process(chan->att);
   1a566:	f00b f870 	bl	2564a <att_req_send_process>
	if (func) {
   1a56a:	f1b9 0f00 	cmp.w	r9, #0
   1a56e:	d0e2      	beq.n	1a536 <att_handle_rsp+0x32>
		func(chan->att->conn, err, pdu, len, params);
   1a570:	6820      	ldr	r0, [r4, #0]
   1a572:	f8cd a000 	str.w	sl, [sp]
   1a576:	6800      	ldr	r0, [r0, #0]
   1a578:	463b      	mov	r3, r7
   1a57a:	4632      	mov	r2, r6
   1a57c:	4629      	mov	r1, r5
   1a57e:	47c8      	blx	r9
   1a580:	e7d9      	b.n	1a536 <att_handle_rsp+0x32>
   1a582:	bf00      	nop
   1a584:	00029ee8 	.word	0x00029ee8
   1a588:	00026fec 	.word	0x00026fec
   1a58c:	20002d2c 	.word	0x20002d2c

0001a590 <bt_att_disconnected>:
{
   1a590:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   1a594:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   1a598:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1a59a:	2e00      	cmp	r6, #0
   1a59c:	d05a      	beq.n	1a654 <bt_att_disconnected+0xc4>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1a59e:	f100 0184 	add.w	r1, r0, #132	; 0x84
   1a5a2:	f106 0028 	add.w	r0, r6, #40	; 0x28
   1a5a6:	f00a ff77 	bl	25498 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1a5aa:	1f27      	subs	r7, r4, #4
   1a5ac:	f104 0838 	add.w	r8, r4, #56	; 0x38
   1a5b0:	2200      	movs	r2, #0
   1a5b2:	2300      	movs	r3, #0
   1a5b4:	4640      	mov	r0, r8
   1a5b6:	f00b fc5c 	bl	25e72 <net_buf_get>
   1a5ba:	4605      	mov	r5, r0
   1a5bc:	bb48      	cbnz	r0, 1a612 <bt_att_disconnected+0x82>
	if (chan->req) {
   1a5be:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1a5c0:	b12b      	cbz	r3, 1a5ce <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1a5c2:	4602      	mov	r2, r0
   1a5c4:	4601      	mov	r1, r0
   1a5c6:	230e      	movs	r3, #14
   1a5c8:	4638      	mov	r0, r7
   1a5ca:	f7ff ff9b 	bl	1a504 <att_handle_rsp>
	chan->att = NULL;
   1a5ce:	2300      	movs	r3, #0
   1a5d0:	f844 3c04 	str.w	r3, [r4, #-4]
	atomic_clear_bit(chan->flags, ATT_CONNECTED);
   1a5d4:	2102      	movs	r1, #2
   1a5d6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1a5da:	f00a ff76 	bl	254ca <atomic_clear_bit>
	if (!sys_slist_is_empty(&att->chans)) {
   1a5de:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1a5e0:	2b00      	cmp	r3, #0
   1a5e2:	d137      	bne.n	1a654 <bt_att_disconnected+0xc4>
	att_reset(att);
   1a5e4:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1a5e6:	9803      	ldr	r0, [sp, #12]
   1a5e8:	2200      	movs	r2, #0
   1a5ea:	2300      	movs	r3, #0
   1a5ec:	300c      	adds	r0, #12
   1a5ee:	f00b fc40 	bl	25e72 <net_buf_get>
   1a5f2:	4605      	mov	r5, r0
   1a5f4:	b9a0      	cbnz	r0, 1a620 <bt_att_disconnected+0x90>
	while (!sys_slist_is_empty(&att->reqs)) {
   1a5f6:	9803      	ldr	r0, [sp, #12]
	return list->head;
   1a5f8:	6845      	ldr	r5, [r0, #4]
   1a5fa:	b9c5      	cbnz	r5, 1a62e <bt_att_disconnected+0x9e>
	att->conn = NULL;
   1a5fc:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   1a5fe:	a903      	add	r1, sp, #12
   1a600:	4816      	ldr	r0, [pc, #88]	; (1a65c <bt_att_disconnected+0xcc>)
   1a602:	f005 fcdb 	bl	1ffbc <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   1a606:	6820      	ldr	r0, [r4, #0]
}
   1a608:	b004      	add	sp, #16
   1a60a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   1a60e:	f001 b899 	b.w	1b744 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1a612:	69a8      	ldr	r0, [r5, #24]
   1a614:	f7fe ff88 	bl	19528 <tx_meta_data_free>
		net_buf_unref(buf);
   1a618:	4628      	mov	r0, r5
   1a61a:	f001 faf1 	bl	1bc00 <net_buf_unref>
   1a61e:	e7c7      	b.n	1a5b0 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1a620:	69a8      	ldr	r0, [r5, #24]
   1a622:	f7fe ff81 	bl	19528 <tx_meta_data_free>
		net_buf_unref(buf);
   1a626:	4628      	mov	r0, r5
   1a628:	f001 faea 	bl	1bc00 <net_buf_unref>
   1a62c:	e7db      	b.n	1a5e6 <bt_att_disconnected+0x56>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a62e:	6882      	ldr	r2, [r0, #8]
	return node->next;
   1a630:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1a632:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a634:	4295      	cmp	r5, r2
	list->tail = node;
   1a636:	bf08      	it	eq
   1a638:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   1a63a:	686e      	ldr	r6, [r5, #4]
   1a63c:	b136      	cbz	r6, 1a64c <bt_att_disconnected+0xbc>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1a63e:	68eb      	ldr	r3, [r5, #12]
   1a640:	9300      	str	r3, [sp, #0]
   1a642:	2300      	movs	r3, #0
   1a644:	6800      	ldr	r0, [r0, #0]
   1a646:	461a      	mov	r2, r3
   1a648:	210e      	movs	r1, #14
   1a64a:	47b0      	blx	r6
		bt_att_req_free(req);
   1a64c:	4628      	mov	r0, r5
   1a64e:	f7ff ff41 	bl	1a4d4 <bt_att_req_free>
   1a652:	e7d0      	b.n	1a5f6 <bt_att_disconnected+0x66>
}
   1a654:	b004      	add	sp, #16
   1a656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a65a:	bf00      	nop
   1a65c:	200008c0 	.word	0x200008c0

0001a660 <att_timeout>:
{
   1a660:	b510      	push	{r4, lr}
   1a662:	4604      	mov	r4, r0
   1a664:	b086      	sub	sp, #24
	LOG_ERR("ATT Timeout");
   1a666:	4b08      	ldr	r3, [pc, #32]	; (1a688 <att_timeout+0x28>)
   1a668:	9305      	str	r3, [sp, #20]
   1a66a:	4808      	ldr	r0, [pc, #32]	; (1a68c <att_timeout+0x2c>)
   1a66c:	2302      	movs	r3, #2
   1a66e:	aa04      	add	r2, sp, #16
   1a670:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a674:	9304      	str	r3, [sp, #16]
   1a676:	f00a fe65 	bl	25344 <z_log_msg_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   1a67a:	f1a4 0054 	sub.w	r0, r4, #84	; 0x54
}
   1a67e:	b006      	add	sp, #24
   1a680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   1a684:	f7ff bf84 	b.w	1a590 <bt_att_disconnected>
   1a688:	00029eff 	.word	0x00029eff
   1a68c:	00026fec 	.word	0x00026fec

0001a690 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   1a690:	b570      	push	{r4, r5, r6, lr}
   1a692:	460c      	mov	r4, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   1a694:	b958      	cbnz	r0, 1a6ae <bt_att_send+0x1e>
   1a696:	4922      	ldr	r1, [pc, #136]	; (1a720 <bt_att_send+0x90>)
   1a698:	4a22      	ldr	r2, [pc, #136]	; (1a724 <bt_att_send+0x94>)
   1a69a:	4823      	ldr	r0, [pc, #140]	; (1a728 <bt_att_send+0x98>)
   1a69c:	f640 63c1 	movw	r3, #3777	; 0xec1
   1a6a0:	f009 fdd0 	bl	24244 <assert_print>
   1a6a4:	f640 61c1 	movw	r1, #3777	; 0xec1
	__ASSERT_NO_MSG(buf);
   1a6a8:	481e      	ldr	r0, [pc, #120]	; (1a724 <bt_att_send+0x94>)
   1a6aa:	f009 fdc4 	bl	24236 <assert_post_action>
   1a6ae:	b949      	cbnz	r1, 1a6c4 <bt_att_send+0x34>
   1a6b0:	491e      	ldr	r1, [pc, #120]	; (1a72c <bt_att_send+0x9c>)
   1a6b2:	4a1c      	ldr	r2, [pc, #112]	; (1a724 <bt_att_send+0x94>)
   1a6b4:	481c      	ldr	r0, [pc, #112]	; (1a728 <bt_att_send+0x98>)
   1a6b6:	f640 63c2 	movw	r3, #3778	; 0xec2
   1a6ba:	f009 fdc3 	bl	24244 <assert_print>
   1a6be:	f640 61c2 	movw	r1, #3778	; 0xec2
   1a6c2:	e7f1      	b.n	1a6a8 <bt_att_send+0x18>

	att = att_get(conn);
   1a6c4:	f7ff f81c 	bl	19700 <att_get>
	if (!att) {
   1a6c8:	4606      	mov	r6, r0
   1a6ca:	b940      	cbnz	r0, 1a6de <bt_att_send+0x4e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1a6cc:	69a0      	ldr	r0, [r4, #24]
   1a6ce:	f7fe ff2b 	bl	19528 <tx_meta_data_free>
		net_buf_unref(buf);
   1a6d2:	4620      	mov	r0, r4
   1a6d4:	f001 fa94 	bl	1bc00 <net_buf_unref>
		return -ENOTCONN;
   1a6d8:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   1a6dc:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_put(&att->tx_queue, buf);
   1a6de:	f100 050c 	add.w	r5, r0, #12
   1a6e2:	4628      	mov	r0, r5
   1a6e4:	4621      	mov	r1, r4
   1a6e6:	f001 fa65 	bl	1bbb4 <net_buf_put>
	return list->head;
   1a6ea:	6ab0      	ldr	r0, [r6, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a6ec:	b138      	cbz	r0, 1a6fe <bt_att_send+0x6e>
	return node->next;
   1a6ee:	f850 4988 	ldr.w	r4, [r0], #-136
   1a6f2:	b104      	cbz	r4, 1a6f6 <bt_att_send+0x66>
   1a6f4:	3c88      	subs	r4, #136	; 0x88
		err = process_queue(chan, &att->tx_queue);
   1a6f6:	4629      	mov	r1, r5
   1a6f8:	f00a ffd6 	bl	256a8 <process_queue>
		if (!err) {
   1a6fc:	b920      	cbnz	r0, 1a708 <bt_att_send+0x78>
	return 0;
   1a6fe:	2000      	movs	r0, #0
   1a700:	e7ec      	b.n	1a6dc <bt_att_send+0x4c>
{
   1a702:	461c      	mov	r4, r3
   1a704:	f06f 0001 	mvn.w	r0, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a708:	2c00      	cmp	r4, #0
   1a70a:	d0f8      	beq.n	1a6fe <bt_att_send+0x6e>
   1a70c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   1a710:	b923      	cbnz	r3, 1a71c <bt_att_send+0x8c>
		if (err == -ENOENT && prev &&
   1a712:	3002      	adds	r0, #2
   1a714:	d0f5      	beq.n	1a702 <bt_att_send+0x72>
{
   1a716:	4620      	mov	r0, r4
   1a718:	461c      	mov	r4, r3
   1a71a:	e7ec      	b.n	1a6f6 <bt_att_send+0x66>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1a71c:	3b88      	subs	r3, #136	; 0x88
   1a71e:	e7f8      	b.n	1a712 <bt_att_send+0x82>
   1a720:	00029aee 	.word	0x00029aee
   1a724:	00029c97 	.word	0x00029c97
   1a728:	00027c2a 	.word	0x00027c2a
   1a72c:	0002a23d 	.word	0x0002a23d

0001a730 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1a730:	b510      	push	{r4, lr}
   1a732:	460c      	mov	r4, r1
	struct bt_att *att;

	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   1a734:	b958      	cbnz	r0, 1a74e <bt_att_req_send+0x1e>
   1a736:	4915      	ldr	r1, [pc, #84]	; (1a78c <bt_att_req_send+0x5c>)
   1a738:	4a15      	ldr	r2, [pc, #84]	; (1a790 <bt_att_req_send+0x60>)
   1a73a:	4816      	ldr	r0, [pc, #88]	; (1a794 <bt_att_req_send+0x64>)
   1a73c:	f640 63d7 	movw	r3, #3799	; 0xed7
   1a740:	f009 fd80 	bl	24244 <assert_print>
   1a744:	f640 61d7 	movw	r1, #3799	; 0xed7
	__ASSERT_NO_MSG(req);
   1a748:	4811      	ldr	r0, [pc, #68]	; (1a790 <bt_att_req_send+0x60>)
   1a74a:	f009 fd74 	bl	24236 <assert_post_action>
   1a74e:	b949      	cbnz	r1, 1a764 <bt_att_req_send+0x34>
   1a750:	4911      	ldr	r1, [pc, #68]	; (1a798 <bt_att_req_send+0x68>)
   1a752:	4a0f      	ldr	r2, [pc, #60]	; (1a790 <bt_att_req_send+0x60>)
   1a754:	480f      	ldr	r0, [pc, #60]	; (1a794 <bt_att_req_send+0x64>)
   1a756:	f640 63d8 	movw	r3, #3800	; 0xed8
   1a75a:	f009 fd73 	bl	24244 <assert_print>
   1a75e:	f640 61d8 	movw	r1, #3800	; 0xed8
   1a762:	e7f1      	b.n	1a748 <bt_att_req_send+0x18>

	att = att_get(conn);
   1a764:	f7fe ffcc 	bl	19700 <att_get>
	if (!att) {
   1a768:	b160      	cbz	r0, 1a784 <bt_att_req_send+0x54>
	parent->next = child;
   1a76a:	2300      	movs	r3, #0
   1a76c:	6023      	str	r3, [r4, #0]
	return list->tail;
   1a76e:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   1a770:	b92b      	cbnz	r3, 1a77e <bt_att_req_send+0x4e>
	list->head = node;
   1a772:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1a776:	f00a ff68 	bl	2564a <att_req_send_process>

	return 0;
   1a77a:	2000      	movs	r0, #0
}
   1a77c:	bd10      	pop	{r4, pc}
	parent->next = child;
   1a77e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1a780:	6084      	str	r4, [r0, #8]
}
   1a782:	e7f8      	b.n	1a776 <bt_att_req_send+0x46>
		return -ENOTCONN;
   1a784:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1a788:	e7f8      	b.n	1a77c <bt_att_req_send+0x4c>
   1a78a:	bf00      	nop
   1a78c:	00029aee 	.word	0x00029aee
   1a790:	00029c97 	.word	0x00029c97
   1a794:	00027c2a 	.word	0x00027c2a
   1a798:	00029df6 	.word	0x00029df6

0001a79c <find_cf_cfg>:
	}
#endif	/* CONFIG_BT_SETTINGS */
}

static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   1a79c:	b570      	push	{r4, r5, r6, lr}
   1a79e:	4d14      	ldr	r5, [pc, #80]	; (1a7f0 <find_cf_cfg+0x54>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   1a7a0:	4606      	mov	r6, r0
   1a7a2:	b140      	cbz	r0, 1a7b6 <find_cf_cfg+0x1a>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a7a4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   1a7a8:	462a      	mov	r2, r5
   1a7aa:	1e6c      	subs	r4, r5, #1
   1a7ac:	f00a fc11 	bl	24fd2 <bt_conn_is_peer_addr_le>
   1a7b0:	b198      	cbz	r0, 1a7da <find_cf_cfg+0x3e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1a7b2:	4620      	mov	r0, r4
   1a7b4:	e00c      	b.n	1a7d0 <find_cf_cfg+0x34>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1a7b6:	490f      	ldr	r1, [pc, #60]	; (1a7f4 <find_cf_cfg+0x58>)
   1a7b8:	4628      	mov	r0, r5
   1a7ba:	f00b f94c 	bl	25a56 <bt_addr_le_eq>
   1a7be:	b940      	cbnz	r0, 1a7d2 <find_cf_cfg+0x36>
   1a7c0:	490c      	ldr	r1, [pc, #48]	; (1a7f4 <find_cf_cfg+0x58>)
   1a7c2:	f105 0010 	add.w	r0, r5, #16
   1a7c6:	f00b f946 	bl	25a56 <bt_addr_le_eq>
   1a7ca:	b120      	cbz	r0, 1a7d6 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1a7cc:	f105 000f 	add.w	r0, r5, #15
			return cfg;
		}
	}

	return NULL;
}
   1a7d0:	bd70      	pop	{r4, r5, r6, pc}
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1a7d2:	1e68      	subs	r0, r5, #1
   1a7d4:	e7fc      	b.n	1a7d0 <find_cf_cfg+0x34>
	return NULL;
   1a7d6:	2000      	movs	r0, #0
   1a7d8:	e7fa      	b.n	1a7d0 <find_cf_cfg+0x34>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1a7da:	7c21      	ldrb	r1, [r4, #16]
   1a7dc:	f104 0211 	add.w	r2, r4, #17
   1a7e0:	4630      	mov	r0, r6
   1a7e2:	f00a fbf6 	bl	24fd2 <bt_conn_is_peer_addr_le>
   1a7e6:	2800      	cmp	r0, #0
   1a7e8:	d0f5      	beq.n	1a7d6 <find_cf_cfg+0x3a>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1a7ea:	f104 0010 	add.w	r0, r4, #16
   1a7ee:	e7ef      	b.n	1a7d0 <find_cf_cfg+0x34>
   1a7f0:	20002d55 	.word	0x20002d55
   1a7f4:	00028d02 	.word	0x00028d02

0001a7f8 <find_sc_cfg>:
{
   1a7f8:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
   1a7fa:	4c0e      	ldr	r4, [pc, #56]	; (1a834 <find_sc_cfg+0x3c>)
   1a7fc:	7823      	ldrb	r3, [r4, #0]
   1a7fe:	4283      	cmp	r3, r0
{
   1a800:	4605      	mov	r5, r0
   1a802:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
   1a804:	d00c      	beq.n	1a820 <find_sc_cfg+0x28>
   1a806:	7b23      	ldrb	r3, [r4, #12]
   1a808:	42ab      	cmp	r3, r5
   1a80a:	d110      	bne.n	1a82e <find_sc_cfg+0x36>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   1a80c:	480a      	ldr	r0, [pc, #40]	; (1a838 <find_sc_cfg+0x40>)
   1a80e:	4631      	mov	r1, r6
   1a810:	f00b f921 	bl	25a56 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   1a814:	b158      	cbz	r0, 1a82e <find_sc_cfg+0x36>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1a816:	2301      	movs	r3, #1
			return &sc_cfg[i];
   1a818:	220c      	movs	r2, #12
   1a81a:	fb02 4003 	mla	r0, r2, r3, r4
   1a81e:	e007      	b.n	1a830 <find_sc_cfg+0x38>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   1a820:	1c60      	adds	r0, r4, #1
   1a822:	f00b f918 	bl	25a56 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   1a826:	2800      	cmp	r0, #0
   1a828:	d0ed      	beq.n	1a806 <find_sc_cfg+0xe>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1a82a:	2300      	movs	r3, #0
   1a82c:	e7f4      	b.n	1a818 <find_sc_cfg+0x20>
	return NULL;
   1a82e:	2000      	movs	r0, #0
}
   1a830:	bd70      	pop	{r4, r5, r6, pc}
   1a832:	bf00      	nop
   1a834:	20002fda 	.word	0x20002fda
   1a838:	20002fe7 	.word	0x20002fe7

0001a83c <find_ccc_cfg>:
	return NULL;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   1a83c:	b538      	push	{r3, r4, r5, lr}
   1a83e:	460c      	mov	r4, r1
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
   1a840:	4605      	mov	r5, r0
   1a842:	b930      	cbnz	r0, 1a852 <find_ccc_cfg+0x16>
			if (bt_gatt_ccc_cfg_is_matching_conn(conn, cfg)) {
				return cfg;
			}
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1a844:	490e      	ldr	r1, [pc, #56]	; (1a880 <find_ccc_cfg+0x44>)
   1a846:	1c60      	adds	r0, r4, #1
   1a848:	f00b f905 	bl	25a56 <bt_addr_le_eq>
   1a84c:	b170      	cbz	r0, 1a86c <find_ccc_cfg+0x30>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1a84e:	4620      	mov	r0, r4
   1a850:	e00b      	b.n	1a86a <find_ccc_cfg+0x2e>
			if (bt_gatt_ccc_cfg_is_matching_conn(conn, cfg)) {
   1a852:	f00b f920 	bl	25a96 <bt_gatt_ccc_cfg_is_matching_conn>
   1a856:	2800      	cmp	r0, #0
   1a858:	d1f9      	bne.n	1a84e <find_ccc_cfg+0x12>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1a85a:	340c      	adds	r4, #12
			if (bt_gatt_ccc_cfg_is_matching_conn(conn, cfg)) {
   1a85c:	4621      	mov	r1, r4
   1a85e:	4628      	mov	r0, r5
   1a860:	f00b f919 	bl	25a96 <bt_gatt_ccc_cfg_is_matching_conn>
   1a864:	2800      	cmp	r0, #0
   1a866:	d1f2      	bne.n	1a84e <find_ccc_cfg+0x12>
			return cfg;
		}
	}

	return NULL;
   1a868:	2000      	movs	r0, #0
}
   1a86a:	bd38      	pop	{r3, r4, r5, pc}
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1a86c:	4904      	ldr	r1, [pc, #16]	; (1a880 <find_ccc_cfg+0x44>)
   1a86e:	f104 000d 	add.w	r0, r4, #13
   1a872:	f00b f8f0 	bl	25a56 <bt_addr_le_eq>
   1a876:	2800      	cmp	r0, #0
   1a878:	d0f6      	beq.n	1a868 <find_ccc_cfg+0x2c>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1a87a:	340c      	adds	r4, #12
   1a87c:	e7e7      	b.n	1a84e <find_ccc_cfg+0x12>
   1a87e:	bf00      	nop
   1a880:	00028d02 	.word	0x00028d02

0001a884 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   1a884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a888:	b087      	sub	sp, #28
   1a88a:	461e      	mov	r6, r3
   1a88c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1a890:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1a894:	4681      	mov	r9, r0
   1a896:	460f      	mov	r7, r1
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   1a898:	2b00      	cmp	r3, #0
   1a89a:	d154      	bne.n	1a946 <bt_gatt_attr_write_ccc+0xc2>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   1a89c:	1e73      	subs	r3, r6, #1
   1a89e:	2b01      	cmp	r3, #1
   1a8a0:	d854      	bhi.n	1a94c <bt_gatt_attr_write_ccc+0xc8>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   1a8a2:	2e01      	cmp	r6, #1
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   1a8a4:	4641      	mov	r1, r8
		value = *(uint8_t *)buf;
   1a8a6:	7815      	ldrb	r5, [r2, #0]
   1a8a8:	bf18      	it	ne
   1a8aa:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   1a8ac:	f7ff ffc6 	bl	1a83c <find_ccc_cfg>
	if (!cfg) {
   1a8b0:	4604      	mov	r4, r0
   1a8b2:	bb30      	cbnz	r0, 1a902 <bt_gatt_attr_write_ccc+0x7e>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
   1a8b4:	b91d      	cbnz	r5, 1a8be <bt_gatt_attr_write_ccc+0x3a>
			return len;
   1a8b6:	4630      	mov	r0, r6
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   1a8b8:	b007      	add	sp, #28
   1a8ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1a8be:	4641      	mov	r1, r8
   1a8c0:	f7ff ffbc 	bl	1a83c <find_ccc_cfg>
		if (!cfg) {
   1a8c4:	4604      	mov	r4, r0
   1a8c6:	b960      	cbnz	r0, 1a8e2 <bt_gatt_attr_write_ccc+0x5e>
			LOG_WRN("No space to store CCC cfg");
   1a8c8:	4b22      	ldr	r3, [pc, #136]	; (1a954 <bt_gatt_attr_write_ccc+0xd0>)
   1a8ca:	4823      	ldr	r0, [pc, #140]	; (1a958 <bt_gatt_attr_write_ccc+0xd4>)
   1a8cc:	9305      	str	r3, [sp, #20]
   1a8ce:	aa04      	add	r2, sp, #16
   1a8d0:	2302      	movs	r3, #2
   1a8d2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1a8d6:	9304      	str	r3, [sp, #16]
   1a8d8:	f00b f8f0 	bl	25abc <z_log_msg_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1a8dc:	f06f 0010 	mvn.w	r0, #16
   1a8e0:	e7ea      	b.n	1a8b8 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1a8e2:	f109 0190 	add.w	r1, r9, #144	; 0x90
   1a8e6:	3001      	adds	r0, #1
   1a8e8:	f00b f8d2 	bl	25a90 <bt_addr_le_copy>
		cfg->id = conn->id;
   1a8ec:	f899 3008 	ldrb.w	r3, [r9, #8]
   1a8f0:	7023      	strb	r3, [r4, #0]
		cfg->link_encrypted = (bt_conn_get_security(conn) >= BT_SECURITY_L2);
   1a8f2:	4648      	mov	r0, r9
   1a8f4:	f00a fb6b 	bl	24fce <bt_conn_get_security>
   1a8f8:	2801      	cmp	r0, #1
   1a8fa:	bf94      	ite	ls
   1a8fc:	2000      	movls	r0, #0
   1a8fe:	2001      	movhi	r0, #1
   1a900:	7220      	strb	r0, [r4, #8]
	if (ccc->cfg_write) {
   1a902:	f8d8 3020 	ldr.w	r3, [r8, #32]
   1a906:	b993      	cbnz	r3, 1a92e <bt_gatt_attr_write_ccc+0xaa>
	cfg->value = value;
   1a908:	8165      	strh	r5, [r4, #10]
	if (cfg->value != ccc->value) {
   1a90a:	f8b8 3018 	ldrh.w	r3, [r8, #24]
   1a90e:	42ab      	cmp	r3, r5
   1a910:	d003      	beq.n	1a91a <bt_gatt_attr_write_ccc+0x96>
		gatt_ccc_changed(attr, ccc);
   1a912:	4641      	mov	r1, r8
   1a914:	4638      	mov	r0, r7
   1a916:	f00b f826 	bl	25966 <gatt_ccc_changed>
	if (!value) {
   1a91a:	2d00      	cmp	r5, #0
   1a91c:	d1cb      	bne.n	1a8b6 <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1a91e:	490f      	ldr	r1, [pc, #60]	; (1a95c <bt_gatt_attr_write_ccc+0xd8>)
   1a920:	1c60      	adds	r0, r4, #1
   1a922:	f00b f8b5 	bl	25a90 <bt_addr_le_copy>
	cfg->id = 0U;
   1a926:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1a928:	8165      	strh	r5, [r4, #10]
	cfg->link_encrypted = false;
   1a92a:	7225      	strb	r5, [r4, #8]
}
   1a92c:	e7c3      	b.n	1a8b6 <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1a92e:	462a      	mov	r2, r5
   1a930:	4639      	mov	r1, r7
   1a932:	4648      	mov	r0, r9
   1a934:	4798      	blx	r3
		if (write < 0) {
   1a936:	2800      	cmp	r0, #0
   1a938:	dbbe      	blt.n	1a8b8 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   1a93a:	3801      	subs	r0, #1
   1a93c:	2801      	cmp	r0, #1
   1a93e:	d9e3      	bls.n	1a908 <bt_gatt_attr_write_ccc+0x84>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1a940:	f06f 000d 	mvn.w	r0, #13
   1a944:	e7b8      	b.n	1a8b8 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1a946:	f06f 0006 	mvn.w	r0, #6
   1a94a:	e7b5      	b.n	1a8b8 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1a94c:	f06f 000c 	mvn.w	r0, #12
   1a950:	e7b2      	b.n	1a8b8 <bt_gatt_attr_write_ccc+0x34>
   1a952:	bf00      	nop
   1a954:	00029f12 	.word	0x00029f12
   1a958:	00027004 	.word	0x00027004
   1a95c:	00028d02 	.word	0x00028d02

0001a960 <clear_cf_cfg>:
{
   1a960:	b510      	push	{r4, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1a962:	490c      	ldr	r1, [pc, #48]	; (1a994 <clear_cf_cfg+0x34>)
{
   1a964:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1a966:	3001      	adds	r0, #1
   1a968:	f00b f892 	bl	25a90 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1a96c:	f104 0008 	add.w	r0, r4, #8
   1a970:	2201      	movs	r2, #1
   1a972:	2100      	movs	r1, #0
   1a974:	f00a f875 	bl	24a62 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a978:	f3bf 8f5b 	dmb	ish
   1a97c:	340c      	adds	r4, #12
   1a97e:	2300      	movs	r3, #0
   1a980:	e854 2f00 	ldrex	r2, [r4]
   1a984:	e844 3100 	strex	r1, r3, [r4]
   1a988:	2900      	cmp	r1, #0
   1a98a:	d1f9      	bne.n	1a980 <clear_cf_cfg+0x20>
   1a98c:	f3bf 8f5b 	dmb	ish
}
   1a990:	bd10      	pop	{r4, pc}
   1a992:	bf00      	nop
   1a994:	00028d02 	.word	0x00028d02

0001a998 <sc_save>:
{
   1a998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a99c:	b086      	sub	sp, #24
   1a99e:	4680      	mov	r8, r0
   1a9a0:	460f      	mov	r7, r1
   1a9a2:	4616      	mov	r6, r2
   1a9a4:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1a9a6:	f7ff ff27 	bl	1a7f8 <find_sc_cfg>
	if (!cfg) {
   1a9aa:	4604      	mov	r4, r0
   1a9ac:	b9b0      	cbnz	r0, 1a9dc <sc_save+0x44>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1a9ae:	4912      	ldr	r1, [pc, #72]	; (1a9f8 <sc_save+0x60>)
   1a9b0:	f7ff ff22 	bl	1a7f8 <find_sc_cfg>
		if (!cfg) {
   1a9b4:	4604      	mov	r4, r0
   1a9b6:	b960      	cbnz	r0, 1a9d2 <sc_save+0x3a>
			LOG_ERR("unable to save SC: no cfg left");
   1a9b8:	4b10      	ldr	r3, [pc, #64]	; (1a9fc <sc_save+0x64>)
   1a9ba:	9305      	str	r3, [sp, #20]
   1a9bc:	4810      	ldr	r0, [pc, #64]	; (1aa00 <sc_save+0x68>)
   1a9be:	2302      	movs	r3, #2
   1a9c0:	aa04      	add	r2, sp, #16
   1a9c2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1a9c6:	9304      	str	r3, [sp, #16]
   1a9c8:	f00b f878 	bl	25abc <z_log_msg_static_create.constprop.0>
}
   1a9cc:	b006      	add	sp, #24
   1a9ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   1a9d2:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1a9d6:	4639      	mov	r1, r7
   1a9d8:	f00b f85a 	bl	25a90 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1a9dc:	8922      	ldrh	r2, [r4, #8]
   1a9de:	8963      	ldrh	r3, [r4, #10]
   1a9e0:	b91a      	cbnz	r2, 1a9ea <sc_save+0x52>
   1a9e2:	b92b      	cbnz	r3, 1a9f0 <sc_save+0x58>
		cfg->data.start = start;
   1a9e4:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1a9e6:	8165      	strh	r5, [r4, #10]
   1a9e8:	e7f0      	b.n	1a9cc <sc_save+0x34>
	if (new_start >= *start && new_end <= *end) {
   1a9ea:	4296      	cmp	r6, r2
		*start = new_start;
   1a9ec:	bf38      	it	cc
   1a9ee:	8126      	strhcc	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
   1a9f0:	429d      	cmp	r5, r3
   1a9f2:	d9eb      	bls.n	1a9cc <sc_save+0x34>
   1a9f4:	e7f7      	b.n	1a9e6 <sc_save+0x4e>
   1a9f6:	bf00      	nop
   1a9f8:	00028d02 	.word	0x00028d02
   1a9fc:	00029f2c 	.word	0x00029f2c
   1aa00:	00027004 	.word	0x00027004

0001aa04 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   1aa04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1aa08:	4b2d      	ldr	r3, [pc, #180]	; (1aac0 <disconnected_cb+0xbc>)
{
   1aa0a:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1aa0c:	6882      	ldr	r2, [r0, #8]
   1aa0e:	429a      	cmp	r2, r3
{
   1aa10:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1aa12:	d134      	bne.n	1aa7e <disconnected_cb+0x7a>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   1aa14:	68c5      	ldr	r5, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   1aa16:	8b2b      	ldrh	r3, [r5, #24]
   1aa18:	b38b      	cbz	r3, 1aa7e <disconnected_cb+0x7a>
   1aa1a:	1c6c      	adds	r4, r5, #1
   1aa1c:	f105 0a19 	add.w	sl, r5, #25
		return BT_GATT_ITER_CONTINUE;
	}

	/* Checking if all values are disabled */
	value_used = false;
   1aa20:	f04f 0900 	mov.w	r9, #0

	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		/* Ignore configurations with disabled value */
		if (!cfg->value) {
   1aa24:	f8b4 3009 	ldrh.w	r3, [r4, #9]
   1aa28:	b1e3      	cbz	r3, 1aa64 <disconnected_cb+0x60>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1aa2a:	1e67      	subs	r7, r4, #1
			continue;
		}

		if (!bt_gatt_ccc_cfg_is_matching_conn(conn, cfg)) {
   1aa2c:	4639      	mov	r1, r7
   1aa2e:	4630      	mov	r0, r6
   1aa30:	f00b f831 	bl	25a96 <bt_gatt_ccc_cfg_is_matching_conn>
   1aa34:	bb30      	cbnz	r0, 1aa84 <disconnected_cb+0x80>
	conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1aa36:	4621      	mov	r1, r4
   1aa38:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1aa3c:	f7fe f936 	bl	18cac <bt_conn_lookup_addr_le>
	if (bt_gatt_ccc_cfg_is_matching_conn(conn, cfg)) {
   1aa40:	4639      	mov	r1, r7
	conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1aa42:	4683      	mov	fp, r0
	if (bt_gatt_ccc_cfg_is_matching_conn(conn, cfg)) {
   1aa44:	f00b f827 	bl	25a96 <bt_gatt_ccc_cfg_is_matching_conn>
   1aa48:	4607      	mov	r7, r0
   1aa4a:	b158      	cbz	r0, 1aa64 <disconnected_cb+0x60>
			struct bt_conn *tmp;

			/* Skip if there is another peer connected */
			tmp = bt_gatt_ccc_cfg_conn_lookup(cfg);
			if (tmp) {
   1aa4c:	f1bb 0f00 	cmp.w	fp, #0
   1aa50:	d008      	beq.n	1aa64 <disconnected_cb+0x60>
				if (tmp->state == BT_CONN_CONNECTED) {
   1aa52:	f89b 300a 	ldrb.w	r3, [fp, #10]
					value_used = true;
				}

				bt_conn_unref(tmp);
   1aa56:	4658      	mov	r0, fp
				if (tmp->state == BT_CONN_CONNECTED) {
   1aa58:	2b07      	cmp	r3, #7
   1aa5a:	bf18      	it	ne
   1aa5c:	464f      	movne	r7, r9
				bt_conn_unref(tmp);
   1aa5e:	f7fd feaf 	bl	187c0 <bt_conn_unref>
   1aa62:	46b9      	mov	r9, r7
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1aa64:	340c      	adds	r4, #12
   1aa66:	4554      	cmp	r4, sl
   1aa68:	d1dc      	bne.n	1aa24 <disconnected_cb+0x20>
			}
		}
	}

	/* If all values are now disabled, reset value while disconnected */
	if (!value_used) {
   1aa6a:	f1b9 0f00 	cmp.w	r9, #0
   1aa6e:	d106      	bne.n	1aa7e <disconnected_cb+0x7a>
		ccc->value = 0U;
		if (ccc->cfg_changed) {
   1aa70:	69eb      	ldr	r3, [r5, #28]
		ccc->value = 0U;
   1aa72:	f8a5 9018 	strh.w	r9, [r5, #24]
		if (ccc->cfg_changed) {
   1aa76:	b113      	cbz	r3, 1aa7e <disconnected_cb+0x7a>
			ccc->cfg_changed(attr, ccc->value);
   1aa78:	4649      	mov	r1, r9
   1aa7a:	4640      	mov	r0, r8
   1aa7c:	4798      	blx	r3

		LOG_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   1aa7e:	2001      	movs	r0, #1
   1aa80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1aa84:	f106 0790 	add.w	r7, r6, #144	; 0x90
   1aa88:	7a30      	ldrb	r0, [r6, #8]
   1aa8a:	4639      	mov	r1, r7
   1aa8c:	f00a f944 	bl	24d18 <bt_addr_le_is_bonded>
   1aa90:	b980      	cbnz	r0, 1aab4 <disconnected_cb+0xb0>
				if (ccc == &sc_ccc) {
   1aa92:	4b0c      	ldr	r3, [pc, #48]	; (1aac4 <disconnected_cb+0xc0>)
   1aa94:	429d      	cmp	r5, r3
   1aa96:	d102      	bne.n	1aa9e <disconnected_cb+0x9a>
					sc_clear(conn);
   1aa98:	4630      	mov	r0, r6
   1aa9a:	f00b f812 	bl	25ac2 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1aa9e:	490a      	ldr	r1, [pc, #40]	; (1aac8 <disconnected_cb+0xc4>)
   1aaa0:	4620      	mov	r0, r4
   1aaa2:	f00a fff5 	bl	25a90 <bt_addr_le_copy>
	cfg->id = 0U;
   1aaa6:	2300      	movs	r3, #0
   1aaa8:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
   1aaac:	f8a4 3009 	strh.w	r3, [r4, #9]
	cfg->link_encrypted = false;
   1aab0:	71e3      	strb	r3, [r4, #7]
}
   1aab2:	e7d7      	b.n	1aa64 <disconnected_cb+0x60>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1aab4:	4639      	mov	r1, r7
   1aab6:	4620      	mov	r0, r4
   1aab8:	f00a ffea 	bl	25a90 <bt_addr_le_copy>
   1aabc:	e7d2      	b.n	1aa64 <disconnected_cb+0x60>
   1aabe:	bf00      	nop
   1aac0:	0001a885 	.word	0x0001a885
   1aac4:	200006cc 	.word	0x200006cc
   1aac8:	00028d02 	.word	0x00028d02

0001aacc <read_ppcp>:
{
   1aacc:	b513      	push	{r0, r1, r4, lr}
   1aace:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1aad2:	4c0b      	ldr	r4, [pc, #44]	; (1ab00 <read_ppcp+0x34>)
{
   1aad4:	4610      	mov	r0, r2
	if (offset > value_len) {
   1aad6:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   1aad8:	f04f 72c8 	mov.w	r2, #26214400	; 0x1900000
   1aadc:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
   1aae0:	d80b      	bhi.n	1aafa <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
   1aae2:	f1c1 0408 	rsb	r4, r1, #8
   1aae6:	429c      	cmp	r4, r3
   1aae8:	bfa8      	it	ge
   1aaea:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1aaec:	4622      	mov	r2, r4
   1aaee:	4469      	add	r1, sp
   1aaf0:	f009 ffac 	bl	24a4c <memcpy>
}
   1aaf4:	4620      	mov	r0, r4
   1aaf6:	b002      	add	sp, #8
   1aaf8:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1aafa:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1aafe:	e7f9      	b.n	1aaf4 <read_ppcp+0x28>
   1ab00:	03200320 	.word	0x03200320

0001ab04 <cf_write>:
{
   1ab04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ab08:	b086      	sub	sp, #24
   1ab0a:	461f      	mov	r7, r3
   1ab0c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	if (offset > sizeof(cfg->data)) {
   1ab10:	2b01      	cmp	r3, #1
{
   1ab12:	4606      	mov	r6, r0
   1ab14:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   1ab16:	d83a      	bhi.n	1ab8e <cf_write+0x8a>
	if (offset + len > sizeof(cfg->data)) {
   1ab18:	443b      	add	r3, r7
   1ab1a:	2b01      	cmp	r3, #1
   1ab1c:	463d      	mov	r5, r7
   1ab1e:	dc39      	bgt.n	1ab94 <cf_write+0x90>
	cfg = find_cf_cfg(conn);
   1ab20:	f7ff fe3c 	bl	1a79c <find_cf_cfg>
	if (!cfg) {
   1ab24:	4604      	mov	r4, r0
   1ab26:	b998      	cbnz	r0, 1ab50 <cf_write+0x4c>
		cfg = find_cf_cfg(NULL);
   1ab28:	f7ff fe38 	bl	1a79c <find_cf_cfg>
	if (!cfg) {
   1ab2c:	4604      	mov	r4, r0
   1ab2e:	b978      	cbnz	r0, 1ab50 <cf_write+0x4c>
		LOG_WRN("No space to store Client Supported Features");
   1ab30:	4b1b      	ldr	r3, [pc, #108]	; (1aba0 <cf_write+0x9c>)
   1ab32:	9305      	str	r3, [sp, #20]
   1ab34:	481b      	ldr	r0, [pc, #108]	; (1aba4 <cf_write+0xa0>)
   1ab36:	2302      	movs	r3, #2
   1ab38:	aa04      	add	r2, sp, #16
   1ab3a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1ab3e:	f06f 0510 	mvn.w	r5, #16
		LOG_WRN("No space to store Client Supported Features");
   1ab42:	9304      	str	r3, [sp, #16]
   1ab44:	f00a ffba 	bl	25abc <z_log_msg_static_create.constprop.0>
}
   1ab48:	4628      	mov	r0, r5
   1ab4a:	b006      	add	sp, #24
   1ab4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1ab50:	b197      	cbz	r7, 1ab78 <cf_write+0x74>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1ab52:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   1ab54:	f898 2000 	ldrb.w	r2, [r8]
   1ab58:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1ab5a:	fa21 f003 	lsr.w	r0, r1, r3
   1ab5e:	07c7      	lsls	r7, r0, #31
   1ab60:	d503      	bpl.n	1ab6a <cf_write+0x66>
		    !(value[i / 8] & BIT(i % 8))) {
   1ab62:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1ab66:	07c0      	lsls	r0, r0, #31
   1ab68:	d517      	bpl.n	1ab9a <cf_write+0x96>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1ab6a:	3301      	adds	r3, #1
   1ab6c:	2b03      	cmp	r3, #3
   1ab6e:	d1f4      	bne.n	1ab5a <cf_write+0x56>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1ab70:	f002 0207 	and.w	r2, r2, #7
   1ab74:	4311      	orrs	r1, r2
   1ab76:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1ab78:	1c60      	adds	r0, r4, #1
   1ab7a:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1ab7e:	f00a ff87 	bl	25a90 <bt_addr_le_copy>
	cfg->id = conn->id;
   1ab82:	7a33      	ldrb	r3, [r6, #8]
   1ab84:	7023      	strb	r3, [r4, #0]
	bool changed = set_change_aware_no_store(cfg, aware);
   1ab86:	4620      	mov	r0, r4
   1ab88:	f00b f866 	bl	25c58 <set_change_aware_no_store.constprop.0.isra.0>
	return len;
   1ab8c:	e7dc      	b.n	1ab48 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ab8e:	f06f 0506 	mvn.w	r5, #6
   1ab92:	e7d9      	b.n	1ab48 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1ab94:	f06f 050c 	mvn.w	r5, #12
   1ab98:	e7d6      	b.n	1ab48 <cf_write+0x44>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1ab9a:	f06f 0512 	mvn.w	r5, #18
   1ab9e:	e7d3      	b.n	1ab48 <cf_write+0x44>
   1aba0:	00029f4b 	.word	0x00029f4b
   1aba4:	00027004 	.word	0x00027004

0001aba8 <sc_indicate_rsp>:
{
   1aba8:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1abaa:	4914      	ldr	r1, [pc, #80]	; (1abfc <sc_indicate_rsp+0x54>)
   1abac:	f3bf 8f5b 	dmb	ish
   1abb0:	4604      	mov	r4, r0
   1abb2:	e851 3f00 	ldrex	r3, [r1]
   1abb6:	f023 0302 	bic.w	r3, r3, #2
   1abba:	e841 3200 	strex	r2, r3, [r1]
   1abbe:	2a00      	cmp	r2, #0
   1abc0:	d1f7      	bne.n	1abb2 <sc_indicate_rsp+0xa>
   1abc2:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1abc6:	4608      	mov	r0, r1
   1abc8:	f00a ff4d 	bl	25a66 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1abcc:	07c2      	lsls	r2, r0, #31
   1abce:	d505      	bpl.n	1abdc <sc_indicate_rsp+0x34>
	k_work_reschedule(&gatt_sc.work, timeout);
   1abd0:	2200      	movs	r2, #0
   1abd2:	2300      	movs	r3, #0
   1abd4:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   1abd8:	f006 fb32 	bl	21240 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   1abdc:	4620      	mov	r0, r4
   1abde:	f00a fe99 	bl	25914 <bt_att_fixed_chan_only>
   1abe2:	b150      	cbz	r0, 1abfa <sc_indicate_rsp+0x52>
		cfg = find_cf_cfg(conn);
   1abe4:	4620      	mov	r0, r4
   1abe6:	f7ff fdd9 	bl	1a79c <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1abea:	b130      	cbz	r0, 1abfa <sc_indicate_rsp+0x52>
   1abec:	7a03      	ldrb	r3, [r0, #8]
   1abee:	07db      	lsls	r3, r3, #31
   1abf0:	d503      	bpl.n	1abfa <sc_indicate_rsp+0x52>
}
   1abf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bool changed = set_change_aware_no_store(cfg, aware);
   1abf6:	f00b b82f 	b.w	25c58 <set_change_aware_no_store.constprop.0.isra.0>
}
   1abfa:	bd10      	pop	{r4, pc}
   1abfc:	20001fa0 	.word	0x20001fa0

0001ac00 <bt_gatt_init>:
{
   1ac00:	b510      	push	{r4, lr}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1ac02:	4820      	ldr	r0, [pc, #128]	; (1ac84 <bt_gatt_init+0x84>)
   1ac04:	2101      	movs	r1, #1
   1ac06:	f00a ff34 	bl	25a72 <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_INITIALIZED)) {
   1ac0a:	07c3      	lsls	r3, r0, #31
   1ac0c:	d439      	bmi.n	1ac82 <bt_gatt_init+0x82>
   1ac0e:	2102      	movs	r1, #2
   1ac10:	481c      	ldr	r0, [pc, #112]	; (1ac84 <bt_gatt_init+0x84>)
   1ac12:	f00a ff2e 	bl	25a72 <atomic_or>
	if (atomic_test_and_set_bit(gatt_flags, GATT_SERVICE_INITIALIZED)) {
   1ac16:	4008      	ands	r0, r1
   1ac18:	d11f      	bne.n	1ac5a <bt_gatt_init+0x5a>
   1ac1a:	491b      	ldr	r1, [pc, #108]	; (1ac88 <bt_gatt_init+0x88>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1ac1c:	4a1b      	ldr	r2, [pc, #108]	; (1ac8c <bt_gatt_init+0x8c>)
   1ac1e:	880b      	ldrh	r3, [r1, #0]
   1ac20:	4c1b      	ldr	r4, [pc, #108]	; (1ac90 <bt_gatt_init+0x90>)
   1ac22:	42a2      	cmp	r2, r4
   1ac24:	d916      	bls.n	1ac54 <bt_gatt_init+0x54>
   1ac26:	b100      	cbz	r0, 1ac2a <bt_gatt_init+0x2a>
   1ac28:	800b      	strh	r3, [r1, #0]
   1ac2a:	491a      	ldr	r1, [pc, #104]	; (1ac94 <bt_gatt_init+0x94>)
   1ac2c:	4a1a      	ldr	r2, [pc, #104]	; (1ac98 <bt_gatt_init+0x98>)
   1ac2e:	481b      	ldr	r0, [pc, #108]	; (1ac9c <bt_gatt_init+0x9c>)
   1ac30:	f240 53ae 	movw	r3, #1454	; 0x5ae
   1ac34:	f009 fb06 	bl	24244 <assert_print>
   1ac38:	4819      	ldr	r0, [pc, #100]	; (1aca0 <bt_gatt_init+0xa0>)
   1ac3a:	f009 fb03 	bl	24244 <assert_print>
   1ac3e:	4816      	ldr	r0, [pc, #88]	; (1ac98 <bt_gatt_init+0x98>)
   1ac40:	f240 51ae 	movw	r1, #1454	; 0x5ae
   1ac44:	f009 faf7 	bl	24236 <assert_post_action>
		last_static_handle += svc->attr_count;
   1ac48:	6850      	ldr	r0, [r2, #4]
   1ac4a:	4403      	add	r3, r0
   1ac4c:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1ac4e:	3208      	adds	r2, #8
   1ac50:	2001      	movs	r0, #1
   1ac52:	e7e6      	b.n	1ac22 <bt_gatt_init+0x22>
   1ac54:	d3f8      	bcc.n	1ac48 <bt_gatt_init+0x48>
   1ac56:	b100      	cbz	r0, 1ac5a <bt_gatt_init+0x5a>
   1ac58:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   1ac5a:	4b12      	ldr	r3, [pc, #72]	; (1aca4 <bt_gatt_init+0xa4>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1ac5c:	4912      	ldr	r1, [pc, #72]	; (1aca8 <bt_gatt_init+0xa8>)
   1ac5e:	4813      	ldr	r0, [pc, #76]	; (1acac <bt_gatt_init+0xac>)
   1ac60:	2200      	movs	r2, #0
	list->tail = NULL;
   1ac62:	e9c3 2200 	strd	r2, r2, [r3]
   1ac66:	f006 f9cf 	bl	21008 <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1ac6a:	4810      	ldr	r0, [pc, #64]	; (1acac <bt_gatt_init+0xac>)
   1ac6c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1ac70:	2300      	movs	r3, #0
   1ac72:	f7fa fecb 	bl	15a0c <bt_long_wq_schedule>
}
   1ac76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1ac7a:	490d      	ldr	r1, [pc, #52]	; (1acb0 <bt_gatt_init+0xb0>)
   1ac7c:	480d      	ldr	r0, [pc, #52]	; (1acb4 <bt_gatt_init+0xb4>)
   1ac7e:	f006 b9c3 	b.w	21008 <k_work_init_delayable>
}
   1ac82:	bd10      	pop	{r4, pc}
   1ac84:	20002d74 	.word	0x20002d74
   1ac88:	20002ff2 	.word	0x20002ff2
   1ac8c:	00026fac 	.word	0x00026fac
   1ac90:	00026fc4 	.word	0x00026fc4
   1ac94:	00029fae 	.word	0x00029fae
   1ac98:	00029f77 	.word	0x00029f77
   1ac9c:	00027c2a 	.word	0x00027c2a
   1aca0:	00028176 	.word	0x00028176
   1aca4:	20002d78 	.word	0x20002d78
   1aca8:	0001af29 	.word	0x0001af29
   1acac:	20001ef8 	.word	0x20001ef8
   1acb0:	0001b349 	.word	0x0001b349
   1acb4:	20001f70 	.word	0x20001f70

0001acb8 <bt_gatt_attr_get_handle>:
{
   1acb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1acbc:	4603      	mov	r3, r0
   1acbe:	b398      	cbz	r0, 1ad28 <bt_gatt_attr_get_handle+0x70>
	if (attr->handle) {
   1acc0:	8a00      	ldrh	r0, [r0, #16]
   1acc2:	bb88      	cbnz	r0, 1ad28 <bt_gatt_attr_get_handle+0x70>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1acc4:	491a      	ldr	r1, [pc, #104]	; (1ad30 <bt_gatt_attr_get_handle+0x78>)
   1acc6:	f8df e07c 	ldr.w	lr, [pc, #124]	; 1ad44 <bt_gatt_attr_get_handle+0x8c>
	uint16_t handle = 1;
   1acca:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1accc:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1acd0:	4571      	cmp	r1, lr
   1acd2:	d928      	bls.n	1ad26 <bt_gatt_attr_get_handle+0x6e>
   1acd4:	4917      	ldr	r1, [pc, #92]	; (1ad34 <bt_gatt_attr_get_handle+0x7c>)
   1acd6:	4a18      	ldr	r2, [pc, #96]	; (1ad38 <bt_gatt_attr_get_handle+0x80>)
   1acd8:	4818      	ldr	r0, [pc, #96]	; (1ad3c <bt_gatt_attr_get_handle+0x84>)
   1acda:	f240 7314 	movw	r3, #1812	; 0x714
   1acde:	f009 fab1 	bl	24244 <assert_print>
   1ace2:	4817      	ldr	r0, [pc, #92]	; (1ad40 <bt_gatt_attr_get_handle+0x88>)
   1ace4:	f009 faae 	bl	24244 <assert_print>
   1ace8:	4813      	ldr	r0, [pc, #76]	; (1ad38 <bt_gatt_attr_get_handle+0x80>)
   1acea:	f240 7114 	movw	r1, #1812	; 0x714
   1acee:	f009 faa2 	bl	24236 <assert_post_action>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1acf2:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   1acf6:	42bb      	cmp	r3, r7
   1acf8:	d304      	bcc.n	1ad04 <bt_gatt_attr_get_handle+0x4c>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1acfa:	fb0c 7206 	mla	r2, ip, r6, r7
   1acfe:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   1ad00:	4293      	cmp	r3, r2
   1ad02:	d90e      	bls.n	1ad22 <bt_gatt_attr_get_handle+0x6a>
			handle += static_svc->attr_count;
   1ad04:	4434      	add	r4, r6
   1ad06:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1ad08:	3108      	adds	r1, #8
   1ad0a:	4614      	mov	r4, r2
   1ad0c:	e7e0      	b.n	1acd0 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   1ad0e:	fb0c 7805 	mla	r8, ip, r5, r7
   1ad12:	4543      	cmp	r3, r8
   1ad14:	d00a      	beq.n	1ad2c <bt_gatt_attr_get_handle+0x74>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1ad16:	3501      	adds	r5, #1
   1ad18:	1962      	adds	r2, r4, r5
   1ad1a:	42b5      	cmp	r5, r6
   1ad1c:	b292      	uxth	r2, r2
   1ad1e:	d1f6      	bne.n	1ad0e <bt_gatt_attr_get_handle+0x56>
   1ad20:	e7f2      	b.n	1ad08 <bt_gatt_attr_get_handle+0x50>
   1ad22:	2500      	movs	r5, #0
   1ad24:	e7f8      	b.n	1ad18 <bt_gatt_attr_get_handle+0x60>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1ad26:	d3e4      	bcc.n	1acf2 <bt_gatt_attr_get_handle+0x3a>
}
   1ad28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ad2c:	4610      	mov	r0, r2
   1ad2e:	e7fb      	b.n	1ad28 <bt_gatt_attr_get_handle+0x70>
   1ad30:	00026fac 	.word	0x00026fac
   1ad34:	00029fa7 	.word	0x00029fa7
   1ad38:	00029f77 	.word	0x00029f77
   1ad3c:	00027c2a 	.word	0x00027c2a
   1ad40:	00028176 	.word	0x00028176
   1ad44:	00026fc4 	.word	0x00026fc4

0001ad48 <bt_gatt_foreach_attr_type>:
{
   1ad48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad4c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   1ad50:	9100      	str	r1, [sp, #0]
   1ad52:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   1ad54:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ad58:	2d00      	cmp	r5, #0
   1ad5a:	bf08      	it	eq
   1ad5c:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1ad5e:	4b2b      	ldr	r3, [pc, #172]	; (1ae0c <bt_gatt_foreach_attr_type+0xc4>)
   1ad60:	881b      	ldrh	r3, [r3, #0]
   1ad62:	4283      	cmp	r3, r0
{
   1ad64:	4607      	mov	r7, r0
   1ad66:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1ad68:	d232      	bcs.n	1add0 <bt_gatt_foreach_attr_type+0x88>
}
   1ad6a:	b003      	add	sp, #12
   1ad6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1ad70:	5889      	ldr	r1, [r1, r2]
   1ad72:	9301      	str	r3, [sp, #4]
   1ad74:	4640      	mov	r0, r8
   1ad76:	f009 fe96 	bl	24aa6 <bt_uuid_cmp>
   1ad7a:	9b01      	ldr	r3, [sp, #4]
   1ad7c:	b190      	cbz	r0, 1ada4 <bt_gatt_foreach_attr_type+0x5c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1ad7e:	3401      	adds	r4, #1
   1ad80:	f10a 0a01 	add.w	sl, sl, #1
   1ad84:	b2a4      	uxth	r4, r4
   1ad86:	6873      	ldr	r3, [r6, #4]
   1ad88:	4553      	cmp	r3, sl
   1ad8a:	d92c      	bls.n	1ade6 <bt_gatt_foreach_attr_type+0x9e>
	if (handle > end_handle) {
   1ad8c:	9b00      	ldr	r3, [sp, #0]
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1ad8e:	6831      	ldr	r1, [r6, #0]
	if (handle > end_handle) {
   1ad90:	429c      	cmp	r4, r3
   1ad92:	d8ea      	bhi.n	1ad6a <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   1ad94:	42bc      	cmp	r4, r7
   1ad96:	d3f2      	bcc.n	1ad7e <bt_gatt_foreach_attr_type+0x36>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1ad98:	fb0b f20a 	mul.w	r2, fp, sl
   1ad9c:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1ad9e:	f1b8 0f00 	cmp.w	r8, #0
   1ada2:	d1e5      	bne.n	1ad70 <bt_gatt_foreach_attr_type+0x28>
	if (attr_data && attr_data != attr->user_data) {
   1ada4:	f1b9 0f00 	cmp.w	r9, #0
   1ada8:	d10b      	bne.n	1adc2 <bt_gatt_foreach_attr_type+0x7a>
	*num_matches -= 1;
   1adaa:	3d01      	subs	r5, #1
   1adac:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1adae:	4618      	mov	r0, r3
   1adb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1adb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1adb4:	4621      	mov	r1, r4
   1adb6:	4798      	blx	r3
	if (!*num_matches) {
   1adb8:	2d00      	cmp	r5, #0
   1adba:	d0d6      	beq.n	1ad6a <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1adbc:	2800      	cmp	r0, #0
   1adbe:	d1de      	bne.n	1ad7e <bt_gatt_foreach_attr_type+0x36>
   1adc0:	e7d3      	b.n	1ad6a <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   1adc2:	68da      	ldr	r2, [r3, #12]
   1adc4:	4591      	cmp	r9, r2
   1adc6:	d1da      	bne.n	1ad7e <bt_gatt_foreach_attr_type+0x36>
   1adc8:	e7ef      	b.n	1adaa <bt_gatt_foreach_attr_type+0x62>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1adca:	f04f 0a00 	mov.w	sl, #0
   1adce:	e7da      	b.n	1ad86 <bt_gatt_foreach_attr_type+0x3e>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1add0:	4e0f      	ldr	r6, [pc, #60]	; (1ae10 <bt_gatt_foreach_attr_type+0xc8>)
		uint16_t handle = 1;
   1add2:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1add4:	f04f 0b14 	mov.w	fp, #20
   1add8:	e006      	b.n	1ade8 <bt_gatt_foreach_attr_type+0xa0>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1adda:	d2c6      	bcs.n	1ad6a <bt_gatt_foreach_attr_type+0x22>
			if (handle + static_svc->attr_count < start_handle) {
   1addc:	6873      	ldr	r3, [r6, #4]
   1adde:	4423      	add	r3, r4
   1ade0:	42bb      	cmp	r3, r7
   1ade2:	d2f2      	bcs.n	1adca <bt_gatt_foreach_attr_type+0x82>
				handle += static_svc->attr_count;
   1ade4:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1ade6:	3608      	adds	r6, #8
   1ade8:	4b0a      	ldr	r3, [pc, #40]	; (1ae14 <bt_gatt_foreach_attr_type+0xcc>)
   1adea:	429e      	cmp	r6, r3
   1adec:	d9f5      	bls.n	1adda <bt_gatt_foreach_attr_type+0x92>
   1adee:	490a      	ldr	r1, [pc, #40]	; (1ae18 <bt_gatt_foreach_attr_type+0xd0>)
   1adf0:	4a0a      	ldr	r2, [pc, #40]	; (1ae1c <bt_gatt_foreach_attr_type+0xd4>)
   1adf2:	480b      	ldr	r0, [pc, #44]	; (1ae20 <bt_gatt_foreach_attr_type+0xd8>)
   1adf4:	f44f 63fb 	mov.w	r3, #2008	; 0x7d8
   1adf8:	f009 fa24 	bl	24244 <assert_print>
   1adfc:	4809      	ldr	r0, [pc, #36]	; (1ae24 <bt_gatt_foreach_attr_type+0xdc>)
   1adfe:	f009 fa21 	bl	24244 <assert_print>
   1ae02:	4806      	ldr	r0, [pc, #24]	; (1ae1c <bt_gatt_foreach_attr_type+0xd4>)
   1ae04:	f44f 61fb 	mov.w	r1, #2008	; 0x7d8
   1ae08:	f009 fa15 	bl	24236 <assert_post_action>
   1ae0c:	20002ff2 	.word	0x20002ff2
   1ae10:	00026fac 	.word	0x00026fac
   1ae14:	00026fc4 	.word	0x00026fc4
   1ae18:	00029fa7 	.word	0x00029fa7
   1ae1c:	00029f77 	.word	0x00029f77
   1ae20:	00027c2a 	.word	0x00027c2a
   1ae24:	00028176 	.word	0x00028176

0001ae28 <db_hash_gen>:
{
   1ae28:	b510      	push	{r4, lr}
   1ae2a:	b0ce      	sub	sp, #312	; 0x138
	uint8_t key[16] = {};
   1ae2c:	2400      	movs	r4, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1ae2e:	aa22      	add	r2, sp, #136	; 0x88
   1ae30:	4669      	mov	r1, sp
   1ae32:	a80a      	add	r0, sp, #40	; 0x28
	uint8_t key[16] = {};
   1ae34:	e9cd 4400 	strd	r4, r4, [sp]
   1ae38:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1ae3c:	f009 fd09 	bl	24852 <tc_cmac_setup>
   1ae40:	b958      	cbnz	r0, 1ae5a <db_hash_gen+0x32>
		LOG_ERR("Unable to setup AES CMAC");
   1ae42:	4b15      	ldr	r3, [pc, #84]	; (1ae98 <db_hash_gen+0x70>)
		LOG_ERR("Unable to calculate hash");
   1ae44:	9309      	str	r3, [sp, #36]	; 0x24
   1ae46:	4815      	ldr	r0, [pc, #84]	; (1ae9c <db_hash_gen+0x74>)
   1ae48:	2302      	movs	r3, #2
   1ae4a:	aa08      	add	r2, sp, #32
   1ae4c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1ae50:	9308      	str	r3, [sp, #32]
   1ae52:	f00a fe33 	bl	25abc <z_log_msg_static_create.constprop.0>
}
   1ae56:	b04e      	add	sp, #312	; 0x138
   1ae58:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1ae5a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1ae5e:	2001      	movs	r0, #1
   1ae60:	4a0f      	ldr	r2, [pc, #60]	; (1aea0 <db_hash_gen+0x78>)
   1ae62:	ab0a      	add	r3, sp, #40	; 0x28
   1ae64:	f00a ff68 	bl	25d38 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1ae68:	480e      	ldr	r0, [pc, #56]	; (1aea4 <db_hash_gen+0x7c>)
   1ae6a:	a90a      	add	r1, sp, #40	; 0x28
   1ae6c:	f009 fd86 	bl	2497c <tc_cmac_final>
   1ae70:	b908      	cbnz	r0, 1ae76 <db_hash_gen+0x4e>
		LOG_ERR("Unable to calculate hash");
   1ae72:	4b0d      	ldr	r3, [pc, #52]	; (1aea8 <db_hash_gen+0x80>)
   1ae74:	e7e6      	b.n	1ae44 <db_hash_gen+0x1c>
   1ae76:	4b0b      	ldr	r3, [pc, #44]	; (1aea4 <db_hash_gen+0x7c>)
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   1ae78:	4621      	mov	r1, r4
   1ae7a:	f103 0210 	add.w	r2, r3, #16
   1ae7e:	3101      	adds	r1, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
   1ae80:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1ae82:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1ae86:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   1ae8a:	2908      	cmp	r1, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1ae8c:	7010      	strb	r0, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   1ae8e:	d1f6      	bne.n	1ae7e <db_hash_gen+0x56>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1ae90:	4806      	ldr	r0, [pc, #24]	; (1aeac <db_hash_gen+0x84>)
   1ae92:	f00a fdee 	bl	25a72 <atomic_or>
   1ae96:	e7de      	b.n	1ae56 <db_hash_gen+0x2e>
   1ae98:	00029fd6 	.word	0x00029fd6
   1ae9c:	00027004 	.word	0x00027004
   1aea0:	000259b1 	.word	0x000259b1
   1aea4:	20001ee8 	.word	0x20001ee8
   1aea8:	00029fef 	.word	0x00029fef
   1aeac:	20001fa0 	.word	0x20001fa0

0001aeb0 <db_hash_read>:
{
   1aeb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1aeb2:	491a      	ldr	r1, [pc, #104]	; (1af1c <db_hash_read+0x6c>)
{
   1aeb4:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1aeb8:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1aeba:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1aebe:	4615      	mov	r5, r2
   1aec0:	461f      	mov	r7, r3
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1aec2:	f006 fa1d 	bl	21300 <k_work_cancel_delayable_sync>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1aec6:	4816      	ldr	r0, [pc, #88]	; (1af20 <db_hash_read+0x70>)
   1aec8:	f00a fdcd 	bl	25a66 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1aecc:	0701      	lsls	r1, r0, #28
   1aece:	d401      	bmi.n	1aed4 <db_hash_read+0x24>
		db_hash_gen();
   1aed0:	f7ff ffaa 	bl	1ae28 <db_hash_gen>
	cfg = find_cf_cfg(conn);
   1aed4:	4620      	mov	r0, r4
   1aed6:	f7ff fc61 	bl	1a79c <find_cf_cfg>
	if (cfg &&
   1aeda:	b168      	cbz	r0, 1aef8 <db_hash_read+0x48>
   1aedc:	7a03      	ldrb	r3, [r0, #8]
   1aede:	07da      	lsls	r2, r3, #31
   1aee0:	d50a      	bpl.n	1aef8 <db_hash_read+0x48>
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1aee2:	f100 040c 	add.w	r4, r0, #12
   1aee6:	4620      	mov	r0, r4
   1aee8:	f00a fdbd 	bl	25a66 <atomic_get>
	    CF_ROBUST_CACHING(cfg) &&
   1aeec:	07c3      	lsls	r3, r0, #31
   1aeee:	d403      	bmi.n	1aef8 <db_hash_read+0x48>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1aef0:	2102      	movs	r1, #2
   1aef2:	4620      	mov	r0, r4
   1aef4:	f00a fdbd 	bl	25a72 <atomic_or>
	if (offset > value_len) {
   1aef8:	2e10      	cmp	r6, #16
   1aefa:	d80c      	bhi.n	1af16 <db_hash_read+0x66>
	len = MIN(buf_len, value_len - offset);
   1aefc:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   1af00:	4908      	ldr	r1, [pc, #32]	; (1af24 <db_hash_read+0x74>)
	len = MIN(buf_len, value_len - offset);
   1af02:	42bc      	cmp	r4, r7
   1af04:	bfa8      	it	ge
   1af06:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1af08:	4622      	mov	r2, r4
   1af0a:	4431      	add	r1, r6
   1af0c:	4628      	mov	r0, r5
   1af0e:	f009 fd9d 	bl	24a4c <memcpy>
}
   1af12:	4620      	mov	r0, r4
   1af14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1af16:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1af1a:	e7fa      	b.n	1af12 <db_hash_read+0x62>
   1af1c:	20001f28 	.word	0x20001f28
   1af20:	20001fa0 	.word	0x20001fa0
   1af24:	20001ee8 	.word	0x20001ee8

0001af28 <db_hash_process>:
{
   1af28:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1af2a:	4805      	ldr	r0, [pc, #20]	; (1af40 <db_hash_process+0x18>)
   1af2c:	f00a fd9b 	bl	25a66 <atomic_get>
	if (new_hash) {
   1af30:	0703      	lsls	r3, r0, #28
   1af32:	d403      	bmi.n	1af3c <db_hash_process+0x14>
}
   1af34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		db_hash_gen();
   1af38:	f7ff bf76 	b.w	1ae28 <db_hash_gen>
}
   1af3c:	bd08      	pop	{r3, pc}
   1af3e:	bf00      	nop
   1af40:	20001fa0 	.word	0x20001fa0

0001af44 <bt_gatt_attr_next>:
{
   1af44:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   1af46:	2300      	movs	r3, #0
   1af48:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   1af4a:	f7ff feb5 	bl	1acb8 <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   1af4e:	1c41      	adds	r1, r0, #1
   1af50:	b289      	uxth	r1, r1
   1af52:	4608      	mov	r0, r1
   1af54:	4a03      	ldr	r2, [pc, #12]	; (1af64 <bt_gatt_attr_next+0x20>)
   1af56:	ab01      	add	r3, sp, #4
   1af58:	f00a feee 	bl	25d38 <bt_gatt_foreach_attr>
}
   1af5c:	9801      	ldr	r0, [sp, #4]
   1af5e:	b003      	add	sp, #12
   1af60:	f85d fb04 	ldr.w	pc, [sp], #4
   1af64:	00025961 	.word	0x00025961

0001af68 <bt_gatt_is_subscribed>:

bool bt_gatt_is_subscribed(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, uint16_t ccc_type)
{
   1af68:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1af6c:	460c      	mov	r4, r1
   1af6e:	4616      	mov	r6, r2
	const struct _bt_gatt_ccc *ccc;

	__ASSERT(conn, "invalid parameter\n");
   1af70:	4605      	mov	r5, r0
   1af72:	b970      	cbnz	r0, 1af92 <bt_gatt_is_subscribed+0x2a>
   1af74:	495f      	ldr	r1, [pc, #380]	; (1b0f4 <bt_gatt_is_subscribed+0x18c>)
   1af76:	4a60      	ldr	r2, [pc, #384]	; (1b0f8 <bt_gatt_is_subscribed+0x190>)
   1af78:	4860      	ldr	r0, [pc, #384]	; (1b0fc <bt_gatt_is_subscribed+0x194>)
   1af7a:	f640 5332 	movw	r3, #3378	; 0xd32
   1af7e:	f009 f961 	bl	24244 <assert_print>
   1af82:	485f      	ldr	r0, [pc, #380]	; (1b100 <bt_gatt_is_subscribed+0x198>)
   1af84:	f009 f95e 	bl	24244 <assert_print>
   1af88:	f640 5132 	movw	r1, #3378	; 0xd32
	__ASSERT(attr, "invalid parameter\n");
   1af8c:	485a      	ldr	r0, [pc, #360]	; (1b0f8 <bt_gatt_is_subscribed+0x190>)
   1af8e:	f009 f952 	bl	24236 <assert_post_action>
   1af92:	b961      	cbnz	r1, 1afae <bt_gatt_is_subscribed+0x46>
   1af94:	495b      	ldr	r1, [pc, #364]	; (1b104 <bt_gatt_is_subscribed+0x19c>)
   1af96:	4a58      	ldr	r2, [pc, #352]	; (1b0f8 <bt_gatt_is_subscribed+0x190>)
   1af98:	4858      	ldr	r0, [pc, #352]	; (1b0fc <bt_gatt_is_subscribed+0x194>)
   1af9a:	f640 5333 	movw	r3, #3379	; 0xd33
   1af9e:	f009 f951 	bl	24244 <assert_print>
   1afa2:	4857      	ldr	r0, [pc, #348]	; (1b100 <bt_gatt_is_subscribed+0x198>)
   1afa4:	f009 f94e 	bl	24244 <assert_print>
   1afa8:	f640 5133 	movw	r1, #3379	; 0xd33
   1afac:	e7ee      	b.n	1af8c <bt_gatt_is_subscribed+0x24>

	if (conn->state != BT_CONN_CONNECTED) {
   1afae:	7a83      	ldrb	r3, [r0, #10]
   1afb0:	2b07      	cmp	r3, #7
   1afb2:	d110      	bne.n	1afd6 <bt_gatt_is_subscribed+0x6e>
		return false;
	}

	/* Check if attribute is a characteristic declaration */
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   1afb4:	2300      	movs	r3, #0
   1afb6:	f88d 300c 	strb.w	r3, [sp, #12]
   1afba:	6820      	ldr	r0, [r4, #0]
   1afbc:	f642 0303 	movw	r3, #10243	; 0x2803
   1afc0:	a903      	add	r1, sp, #12
   1afc2:	f8ad 300e 	strh.w	r3, [sp, #14]
   1afc6:	f009 fd6e 	bl	24aa6 <bt_uuid_cmp>
   1afca:	b9d0      	cbnz	r0, 1b002 <bt_gatt_is_subscribed+0x9a>
		struct bt_gatt_chrc *chrc = attr->user_data;

		if (!(chrc->properties &
   1afcc:	68e3      	ldr	r3, [r4, #12]
   1afce:	799b      	ldrb	r3, [r3, #6]
   1afd0:	f013 0f30 	tst.w	r3, #48	; 0x30
   1afd4:	d103      	bne.n	1afde <bt_gatt_is_subscribed+0x76>
		return false;
   1afd6:	2000      	movs	r0, #0
			return true;
		}
	}

	return false;
}
   1afd8:	b004      	add	sp, #16
   1afda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   1afde:	4620      	mov	r0, r4
   1afe0:	f7ff ffb0 	bl	1af44 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   1afe4:	4604      	mov	r4, r0
   1afe6:	b960      	cbnz	r0, 1b002 <bt_gatt_is_subscribed+0x9a>
   1afe8:	4946      	ldr	r1, [pc, #280]	; (1b104 <bt_gatt_is_subscribed+0x19c>)
   1afea:	4a43      	ldr	r2, [pc, #268]	; (1b0f8 <bt_gatt_is_subscribed+0x190>)
   1afec:	4843      	ldr	r0, [pc, #268]	; (1b0fc <bt_gatt_is_subscribed+0x194>)
   1afee:	f640 5344 	movw	r3, #3396	; 0xd44
   1aff2:	f009 f927 	bl	24244 <assert_print>
   1aff6:	4844      	ldr	r0, [pc, #272]	; (1b108 <bt_gatt_is_subscribed+0x1a0>)
   1aff8:	f009 f924 	bl	24244 <assert_print>
   1affc:	f640 5144 	movw	r1, #3396	; 0xd44
   1b000:	e7c4      	b.n	1af8c <bt_gatt_is_subscribed+0x24>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1b002:	2300      	movs	r3, #0
   1b004:	6820      	ldr	r0, [r4, #0]
   1b006:	f88d 300c 	strb.w	r3, [sp, #12]
   1b00a:	a903      	add	r1, sp, #12
   1b00c:	f642 1302 	movw	r3, #10498	; 0x2902
   1b010:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b014:	f009 fd47 	bl	24aa6 <bt_uuid_cmp>
   1b018:	b188      	cbz	r0, 1b03e <bt_gatt_is_subscribed+0xd6>
		attr = bt_gatt_attr_next(attr);
   1b01a:	4620      	mov	r0, r4
   1b01c:	f7ff ff92 	bl	1af44 <bt_gatt_attr_next>
		__ASSERT(attr, "No more attributes\n");
   1b020:	4604      	mov	r4, r0
   1b022:	b960      	cbnz	r0, 1b03e <bt_gatt_is_subscribed+0xd6>
   1b024:	4937      	ldr	r1, [pc, #220]	; (1b104 <bt_gatt_is_subscribed+0x19c>)
   1b026:	4a34      	ldr	r2, [pc, #208]	; (1b0f8 <bt_gatt_is_subscribed+0x190>)
   1b028:	4834      	ldr	r0, [pc, #208]	; (1b0fc <bt_gatt_is_subscribed+0x194>)
   1b02a:	f640 534a 	movw	r3, #3402	; 0xd4a
   1b02e:	f009 f909 	bl	24244 <assert_print>
   1b032:	4835      	ldr	r0, [pc, #212]	; (1b108 <bt_gatt_is_subscribed+0x1a0>)
   1b034:	f009 f906 	bl	24244 <assert_print>
   1b038:	f640 514a 	movw	r1, #3402	; 0xd4a
   1b03c:	e7a6      	b.n	1af8c <bt_gatt_is_subscribed+0x24>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1b03e:	2700      	movs	r7, #0
   1b040:	f642 1802 	movw	r8, #10498	; 0x2902
   1b044:	6820      	ldr	r0, [r4, #0]
   1b046:	f88d 7000 	strb.w	r7, [sp]
   1b04a:	4669      	mov	r1, sp
   1b04c:	f8ad 8002 	strh.w	r8, [sp, #2]
   1b050:	f009 fd29 	bl	24aa6 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1b054:	bb10      	cbnz	r0, 1b09c <bt_gatt_is_subscribed+0x134>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1b056:	2300      	movs	r3, #0
   1b058:	6820      	ldr	r0, [r4, #0]
   1b05a:	f88d 300c 	strb.w	r3, [sp, #12]
   1b05e:	a903      	add	r1, sp, #12
   1b060:	f642 1302 	movw	r3, #10498	; 0x2902
   1b064:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b068:	f009 fd1d 	bl	24aa6 <bt_uuid_cmp>
   1b06c:	2800      	cmp	r0, #0
   1b06e:	d1b2      	bne.n	1afd6 <bt_gatt_is_subscribed+0x6e>
	ccc = attr->user_data;
   1b070:	68e4      	ldr	r4, [r4, #12]
		if (bt_gatt_ccc_cfg_is_matching_conn(conn, cfg) &&
   1b072:	4628      	mov	r0, r5
   1b074:	4621      	mov	r1, r4
   1b076:	f00a fd0e 	bl	25a96 <bt_gatt_ccc_cfg_is_matching_conn>
   1b07a:	b110      	cbz	r0, 1b082 <bt_gatt_is_subscribed+0x11a>
   1b07c:	8963      	ldrh	r3, [r4, #10]
   1b07e:	421e      	tst	r6, r3
   1b080:	d1aa      	bne.n	1afd8 <bt_gatt_is_subscribed+0x70>
   1b082:	f104 010c 	add.w	r1, r4, #12
   1b086:	4628      	mov	r0, r5
   1b088:	f00a fd05 	bl	25a96 <bt_gatt_ccc_cfg_is_matching_conn>
   1b08c:	2800      	cmp	r0, #0
   1b08e:	d0a2      	beq.n	1afd6 <bt_gatt_is_subscribed+0x6e>
   1b090:	8ae3      	ldrh	r3, [r4, #22]
   1b092:	421e      	tst	r6, r3
   1b094:	bf14      	ite	ne
   1b096:	2001      	movne	r0, #1
   1b098:	2000      	moveq	r0, #0
   1b09a:	e79d      	b.n	1afd8 <bt_gatt_is_subscribed+0x70>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1b09c:	6820      	ldr	r0, [r4, #0]
   1b09e:	f88d 7004 	strb.w	r7, [sp, #4]
   1b0a2:	f642 0303 	movw	r3, #10243	; 0x2803
   1b0a6:	a901      	add	r1, sp, #4
   1b0a8:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b0ac:	f009 fcfb 	bl	24aa6 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1b0b0:	2800      	cmp	r0, #0
   1b0b2:	d0d0      	beq.n	1b056 <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1b0b4:	6820      	ldr	r0, [r4, #0]
   1b0b6:	f88d 7008 	strb.w	r7, [sp, #8]
   1b0ba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1b0be:	a902      	add	r1, sp, #8
   1b0c0:	f8ad 300a 	strh.w	r3, [sp, #10]
   1b0c4:	f009 fcef 	bl	24aa6 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1b0c8:	2800      	cmp	r0, #0
   1b0ca:	d0c4      	beq.n	1b056 <bt_gatt_is_subscribed+0xee>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1b0cc:	6820      	ldr	r0, [r4, #0]
   1b0ce:	f88d 700c 	strb.w	r7, [sp, #12]
   1b0d2:	f642 0301 	movw	r3, #10241	; 0x2801
   1b0d6:	a903      	add	r1, sp, #12
   1b0d8:	f8ad 300e 	strh.w	r3, [sp, #14]
   1b0dc:	f009 fce3 	bl	24aa6 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1b0e0:	2800      	cmp	r0, #0
   1b0e2:	d0b8      	beq.n	1b056 <bt_gatt_is_subscribed+0xee>
		attr = bt_gatt_attr_next(attr);
   1b0e4:	4620      	mov	r0, r4
   1b0e6:	f7ff ff2d 	bl	1af44 <bt_gatt_attr_next>
		if (!attr) {
   1b0ea:	4604      	mov	r4, r0
   1b0ec:	2800      	cmp	r0, #0
   1b0ee:	d1a9      	bne.n	1b044 <bt_gatt_is_subscribed+0xdc>
   1b0f0:	e771      	b.n	1afd6 <bt_gatt_is_subscribed+0x6e>
   1b0f2:	bf00      	nop
   1b0f4:	00029aee 	.word	0x00029aee
   1b0f8:	00029f77 	.word	0x00029f77
   1b0fc:	00027c2a 	.word	0x00027c2a
   1b100:	0002a008 	.word	0x0002a008
   1b104:	0002a01d 	.word	0x0002a01d
   1b108:	0002a022 	.word	0x0002a022

0001b10c <gatt_indicate>:
{
   1b10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b110:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1b112:	6851      	ldr	r1, [r2, #4]
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   1b114:	8a4f      	ldrh	r7, [r1, #18]
   1b116:	f017 0714 	ands.w	r7, r7, #20
{
   1b11a:	b086      	sub	sp, #24
   1b11c:	4680      	mov	r8, r0
   1b11e:	4615      	mov	r5, r2
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   1b120:	d00f      	beq.n	1b142 <gatt_indicate+0x36>
		LOG_WRN("Link is not encrypted");
   1b122:	4b33      	ldr	r3, [pc, #204]	; (1b1f0 <gatt_indicate+0xe4>)
   1b124:	9305      	str	r3, [sp, #20]
   1b126:	4833      	ldr	r0, [pc, #204]	; (1b1f4 <gatt_indicate+0xe8>)
   1b128:	2302      	movs	r3, #2
   1b12a:	aa04      	add	r2, sp, #16
   1b12c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return -EPERM;
   1b130:	f04f 35ff 	mov.w	r5, #4294967295
		LOG_WRN("Link is not encrypted");
   1b134:	9304      	str	r3, [sp, #16]
   1b136:	f00a fcc1 	bl	25abc <z_log_msg_static_create.constprop.0>
}
   1b13a:	4628      	mov	r0, r5
   1b13c:	b006      	add	sp, #24
   1b13e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   1b142:	2202      	movs	r2, #2
   1b144:	f7ff ff10 	bl	1af68 <bt_gatt_is_subscribed>
   1b148:	b960      	cbnz	r0, 1b164 <gatt_indicate+0x58>
			LOG_WRN("Device is not subscribed to characteristic");
   1b14a:	4b2b      	ldr	r3, [pc, #172]	; (1b1f8 <gatt_indicate+0xec>)
   1b14c:	9305      	str	r3, [sp, #20]
   1b14e:	4829      	ldr	r0, [pc, #164]	; (1b1f4 <gatt_indicate+0xe8>)
   1b150:	2302      	movs	r3, #2
   1b152:	aa04      	add	r2, sp, #16
   1b154:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1b158:	9304      	str	r3, [sp, #16]
			return -EINVAL;
   1b15a:	f06f 0515 	mvn.w	r5, #21
			LOG_WRN("Device is not subscribed to characteristic");
   1b15e:	f00a fcad 	bl	25abc <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1b162:	e7ea      	b.n	1b13a <gatt_indicate+0x2e>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1b164:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1b168:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1b16a:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1b16c:	f7ff f990 	bl	1a490 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1b170:	3602      	adds	r6, #2
	if (!req) {
   1b172:	4604      	mov	r4, r0
   1b174:	b1b0      	cbz	r0, 1b1a4 <gatt_indicate+0x98>
	req->func = func;
   1b176:	4b21      	ldr	r3, [pc, #132]	; (1b1fc <gatt_indicate+0xf0>)
   1b178:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1b17a:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1b17c:	4632      	mov	r2, r6
   1b17e:	211d      	movs	r1, #29
   1b180:	4640      	mov	r0, r8
   1b182:	f7fe feaf 	bl	19ee4 <bt_att_create_pdu>
	if (!buf) {
   1b186:	4606      	mov	r6, r0
   1b188:	b978      	cbnz	r0, 1b1aa <gatt_indicate+0x9e>
		LOG_WRN("No buffer available to send indication");
   1b18a:	4b1d      	ldr	r3, [pc, #116]	; (1b200 <gatt_indicate+0xf4>)
   1b18c:	4819      	ldr	r0, [pc, #100]	; (1b1f4 <gatt_indicate+0xe8>)
   1b18e:	9305      	str	r3, [sp, #20]
   1b190:	aa04      	add	r2, sp, #16
   1b192:	2302      	movs	r3, #2
   1b194:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1b198:	9304      	str	r3, [sp, #16]
   1b19a:	f00a fc8f 	bl	25abc <z_log_msg_static_create.constprop.0>
		bt_att_req_free(req);
   1b19e:	4620      	mov	r0, r4
   1b1a0:	f7ff f998 	bl	1a4d4 <bt_att_req_free>
		return -ENOMEM;
   1b1a4:	f06f 050b 	mvn.w	r5, #11
   1b1a8:	e7c7      	b.n	1b13a <gatt_indicate+0x2e>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   1b1aa:	2301      	movs	r3, #1
   1b1ac:	463a      	mov	r2, r7
   1b1ae:	4639      	mov	r1, r7
	return net_buf_simple_add(&buf->b, len);
   1b1b0:	f106 0a0c 	add.w	sl, r6, #12
   1b1b4:	f00a fbcd 	bl	25952 <bt_att_set_tx_meta_data>
   1b1b8:	2102      	movs	r1, #2
   1b1ba:	4650      	mov	r0, sl
   1b1bc:	f000 fe64 	bl	1be88 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1b1c0:	4607      	mov	r7, r0
   1b1c2:	4650      	mov	r0, sl
   1b1c4:	f827 9b02 	strh.w	r9, [r7], #2
   1b1c8:	8aa9      	ldrh	r1, [r5, #20]
   1b1ca:	f000 fe5d 	bl	1be88 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   1b1ce:	8aaa      	ldrh	r2, [r5, #20]
   1b1d0:	6929      	ldr	r1, [r5, #16]
   1b1d2:	4638      	mov	r0, r7
   1b1d4:	f009 fc3a 	bl	24a4c <memcpy>
	req->buf = buf;
   1b1d8:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   1b1da:	4621      	mov	r1, r4
   1b1dc:	4640      	mov	r0, r8
   1b1de:	f7ff faa7 	bl	1a730 <bt_att_req_send>
	if (err) {
   1b1e2:	4605      	mov	r5, r0
   1b1e4:	2800      	cmp	r0, #0
   1b1e6:	d0a8      	beq.n	1b13a <gatt_indicate+0x2e>
		bt_att_req_free(req);
   1b1e8:	4620      	mov	r0, r4
   1b1ea:	f7ff f973 	bl	1a4d4 <bt_att_req_free>
   1b1ee:	e7a4      	b.n	1b13a <gatt_indicate+0x2e>
   1b1f0:	0002a038 	.word	0x0002a038
   1b1f4:	00027004 	.word	0x00027004
   1b1f8:	0002a04e 	.word	0x0002a04e
   1b1fc:	00025983 	.word	0x00025983
   1b200:	0002a079 	.word	0x0002a079

0001b204 <bt_gatt_indicate>:
{
   1b204:	b530      	push	{r4, r5, lr}
   1b206:	4605      	mov	r5, r0
   1b208:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   1b20a:	460c      	mov	r4, r1
   1b20c:	b971      	cbnz	r1, 1b22c <bt_gatt_indicate+0x28>
   1b20e:	4946      	ldr	r1, [pc, #280]	; (1b328 <bt_gatt_indicate+0x124>)
   1b210:	4a46      	ldr	r2, [pc, #280]	; (1b32c <bt_gatt_indicate+0x128>)
   1b212:	4847      	ldr	r0, [pc, #284]	; (1b330 <bt_gatt_indicate+0x12c>)
   1b214:	f640 33de 	movw	r3, #3038	; 0xbde
   1b218:	f009 f814 	bl	24244 <assert_print>
   1b21c:	4845      	ldr	r0, [pc, #276]	; (1b334 <bt_gatt_indicate+0x130>)
   1b21e:	f009 f811 	bl	24244 <assert_print>
   1b222:	f640 31de 	movw	r1, #3038	; 0xbde
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1b226:	4841      	ldr	r0, [pc, #260]	; (1b32c <bt_gatt_indicate+0x128>)
   1b228:	f009 f805 	bl	24236 <assert_post_action>
   1b22c:	684b      	ldr	r3, [r1, #4]
   1b22e:	b973      	cbnz	r3, 1b24e <bt_gatt_indicate+0x4a>
   1b230:	680b      	ldr	r3, [r1, #0]
   1b232:	b963      	cbnz	r3, 1b24e <bt_gatt_indicate+0x4a>
   1b234:	4940      	ldr	r1, [pc, #256]	; (1b338 <bt_gatt_indicate+0x134>)
   1b236:	4a3d      	ldr	r2, [pc, #244]	; (1b32c <bt_gatt_indicate+0x128>)
   1b238:	483d      	ldr	r0, [pc, #244]	; (1b330 <bt_gatt_indicate+0x12c>)
   1b23a:	f640 33df 	movw	r3, #3039	; 0xbdf
   1b23e:	f009 f801 	bl	24244 <assert_print>
   1b242:	483c      	ldr	r0, [pc, #240]	; (1b334 <bt_gatt_indicate+0x130>)
   1b244:	f008 fffe 	bl	24244 <assert_print>
   1b248:	f640 31df 	movw	r1, #3039	; 0xbdf
   1b24c:	e7eb      	b.n	1b226 <bt_gatt_indicate+0x22>
   1b24e:	483b      	ldr	r0, [pc, #236]	; (1b33c <bt_gatt_indicate+0x138>)
   1b250:	f00a fc09 	bl	25a66 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1b254:	0742      	lsls	r2, r0, #29
   1b256:	d561      	bpl.n	1b31c <bt_gatt_indicate+0x118>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1b258:	b115      	cbz	r5, 1b260 <bt_gatt_indicate+0x5c>
   1b25a:	7aab      	ldrb	r3, [r5, #10]
   1b25c:	2b07      	cmp	r3, #7
   1b25e:	d160      	bne.n	1b322 <bt_gatt_indicate+0x11e>
	data.attr = params->attr;
   1b260:	6860      	ldr	r0, [r4, #4]
   1b262:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1b264:	f7ff fd28 	bl	1acb8 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1b268:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1b26a:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1b26e:	b33a      	cbz	r2, 1b2c0 <bt_gatt_indicate+0xbc>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1b270:	a905      	add	r1, sp, #20
   1b272:	9102      	str	r1, [sp, #8]
   1b274:	4932      	ldr	r1, [pc, #200]	; (1b340 <bt_gatt_indicate+0x13c>)
   1b276:	9101      	str	r1, [sp, #4]
   1b278:	2101      	movs	r1, #1
	found->attr = NULL;
   1b27a:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1b27c:	9100      	str	r1, [sp, #0]
   1b27e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1b282:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1b284:	f7ff fd60 	bl	1ad48 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1b288:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1b28a:	b91b      	cbnz	r3, 1b294 <bt_gatt_indicate+0x90>
			return -ENOENT;
   1b28c:	f06f 0001 	mvn.w	r0, #1
}
   1b290:	b00b      	add	sp, #44	; 0x2c
   1b292:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1b294:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1b296:	9b05      	ldr	r3, [sp, #20]
   1b298:	6818      	ldr	r0, [r3, #0]
   1b29a:	2300      	movs	r3, #0
   1b29c:	f88d 3010 	strb.w	r3, [sp, #16]
   1b2a0:	a904      	add	r1, sp, #16
   1b2a2:	f642 0303 	movw	r3, #10243	; 0x2803
   1b2a6:	f8ad 3012 	strh.w	r3, [sp, #18]
   1b2aa:	f009 fbfc 	bl	24aa6 <bt_uuid_cmp>
   1b2ae:	b970      	cbnz	r0, 1b2ce <bt_gatt_indicate+0xca>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1b2b0:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1b2b2:	68c3      	ldr	r3, [r0, #12]
   1b2b4:	799b      	ldrb	r3, [r3, #6]
   1b2b6:	069b      	lsls	r3, r3, #26
   1b2b8:	d405      	bmi.n	1b2c6 <bt_gatt_indicate+0xc2>
			return -EINVAL;
   1b2ba:	f06f 0015 	mvn.w	r0, #21
   1b2be:	e7e7      	b.n	1b290 <bt_gatt_indicate+0x8c>
		if (!data.handle) {
   1b2c0:	2800      	cmp	r0, #0
   1b2c2:	d1e8      	bne.n	1b296 <bt_gatt_indicate+0x92>
   1b2c4:	e7e2      	b.n	1b28c <bt_gatt_indicate+0x88>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1b2c6:	f00a fce9 	bl	25c9c <bt_gatt_attr_value_handle>
   1b2ca:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   1b2ce:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   1b2d2:	b13d      	cbz	r5, 1b2e4 <bt_gatt_indicate+0xe0>
		params->_ref = 1;
   1b2d4:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1b2d6:	4601      	mov	r1, r0
		params->_ref = 1;
   1b2d8:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1b2da:	4622      	mov	r2, r4
   1b2dc:	4628      	mov	r0, r5
   1b2de:	f7ff ff15 	bl	1b10c <gatt_indicate>
   1b2e2:	e7d5      	b.n	1b290 <bt_gatt_indicate+0x8c>
	data.err = -ENOTCONN;
   1b2e4:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1b2e8:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1b2ea:	2302      	movs	r3, #2
   1b2ec:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b2f0:	f642 1302 	movw	r3, #10498	; 0x2902
   1b2f4:	f8ad 3012 	strh.w	r3, [sp, #18]
   1b2f8:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1b2fa:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b2fc:	9302      	str	r3, [sp, #8]
   1b2fe:	4b11      	ldr	r3, [pc, #68]	; (1b344 <bt_gatt_indicate+0x140>)
   1b300:	9301      	str	r3, [sp, #4]
   1b302:	2301      	movs	r3, #1
   1b304:	9300      	str	r3, [sp, #0]
   1b306:	aa04      	add	r2, sp, #16
   1b308:	462b      	mov	r3, r5
   1b30a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   1b30e:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1b310:	f88d 5010 	strb.w	r5, [sp, #16]
   1b314:	f7ff fd18 	bl	1ad48 <bt_gatt_foreach_attr_type>
	return data.err;
   1b318:	9807      	ldr	r0, [sp, #28]
   1b31a:	e7b9      	b.n	1b290 <bt_gatt_indicate+0x8c>
		return -EAGAIN;
   1b31c:	f06f 000a 	mvn.w	r0, #10
   1b320:	e7b6      	b.n	1b290 <bt_gatt_indicate+0x8c>
		return -ENOTCONN;
   1b322:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1b326:	e7b3      	b.n	1b290 <bt_gatt_indicate+0x8c>
   1b328:	0002a0a0 	.word	0x0002a0a0
   1b32c:	00029f77 	.word	0x00029f77
   1b330:	00027c2a 	.word	0x00027c2a
   1b334:	0002a0a7 	.word	0x0002a0a7
   1b338:	0002a0bd 	.word	0x0002a0bd
   1b33c:	2000047c 	.word	0x2000047c
   1b340:	000259a9 	.word	0x000259a9
   1b344:	0001b5c9 	.word	0x0001b5c9

0001b348 <sc_process>:
{
   1b348:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1b34a:	f100 0430 	add.w	r4, r0, #48	; 0x30
{
   1b34e:	4603      	mov	r3, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1b350:	f1a0 0120 	sub.w	r1, r0, #32
   1b354:	4620      	mov	r0, r4
   1b356:	f00a fb86 	bl	25a66 <atomic_get>
   1b35a:	f3c0 0240 	ubfx	r2, r0, #1, #1
   1b35e:	0780      	lsls	r0, r0, #30
   1b360:	d50e      	bpl.n	1b380 <sc_process+0x38>
   1b362:	491c      	ldr	r1, [pc, #112]	; (1b3d4 <sc_process+0x8c>)
   1b364:	4a1c      	ldr	r2, [pc, #112]	; (1b3d8 <sc_process+0x90>)
   1b366:	481d      	ldr	r0, [pc, #116]	; (1b3dc <sc_process+0x94>)
   1b368:	f240 5307 	movw	r3, #1287	; 0x507
   1b36c:	f008 ff6a 	bl	24244 <assert_print>
   1b370:	481b      	ldr	r0, [pc, #108]	; (1b3e0 <sc_process+0x98>)
   1b372:	f008 ff67 	bl	24244 <assert_print>
   1b376:	4818      	ldr	r0, [pc, #96]	; (1b3d8 <sc_process+0x90>)
   1b378:	f240 5107 	movw	r1, #1287	; 0x507
   1b37c:	f008 ff5b 	bl	24236 <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1b380:	f853 0c08 	ldr.w	r0, [r3, #-8]
   1b384:	9001      	str	r0, [sp, #4]
   1b386:	f3bf 8f5b 	dmb	ish
   1b38a:	e854 0f00 	ldrex	r0, [r4]
   1b38e:	f020 0001 	bic.w	r0, r0, #1
   1b392:	e844 0500 	strex	r5, r0, [r4]
   1b396:	2d00      	cmp	r5, #0
   1b398:	d1f7      	bne.n	1b38a <sc_process+0x42>
   1b39a:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1b39e:	4811      	ldr	r0, [pc, #68]	; (1b3e4 <sc_process+0x9c>)
   1b3a0:	f843 0c1c 	str.w	r0, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   1b3a4:	4810      	ldr	r0, [pc, #64]	; (1b3e8 <sc_process+0xa0>)
   1b3a6:	f843 0c18 	str.w	r0, [r3, #-24]
	sc->params.data = &sc_range[0];
   1b3aa:	a801      	add	r0, sp, #4
   1b3ac:	f843 0c10 	str.w	r0, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   1b3b0:	2004      	movs	r0, #4
   1b3b2:	f823 0c0c 	strh.w	r0, [r3, #-12]
	sc->start = 0U;
   1b3b6:	f823 2c08 	strh.w	r2, [r3, #-8]
	sc->end = 0U;
   1b3ba:	f823 2c06 	strh.w	r2, [r3, #-6]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1b3be:	4610      	mov	r0, r2
   1b3c0:	f7ff ff20 	bl	1b204 <bt_gatt_indicate>
   1b3c4:	b918      	cbnz	r0, 1b3ce <sc_process+0x86>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1b3c6:	2102      	movs	r1, #2
   1b3c8:	4620      	mov	r0, r4
   1b3ca:	f00a fb52 	bl	25a72 <atomic_or>
}
   1b3ce:	b003      	add	sp, #12
   1b3d0:	bd30      	pop	{r4, r5, pc}
   1b3d2:	bf00      	nop
   1b3d4:	0002a0da 	.word	0x0002a0da
   1b3d8:	00029f77 	.word	0x00029f77
   1b3dc:	00027c2a 	.word	0x00027c2a
   1b3e0:	0002a10b 	.word	0x0002a10b
   1b3e4:	000274e4 	.word	0x000274e4
   1b3e8:	0001aba9 	.word	0x0001aba9

0001b3ec <update_ccc>:
{
   1b3ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b3f0:	b086      	sub	sp, #24
	struct bt_conn *conn = data->conn;
   1b3f2:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b3f4:	4b37      	ldr	r3, [pc, #220]	; (1b4d4 <update_ccc+0xe8>)
   1b3f6:	6882      	ldr	r2, [r0, #8]
   1b3f8:	429a      	cmp	r2, r3
{
   1b3fa:	af00      	add	r7, sp, #0
   1b3fc:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b3fe:	d164      	bne.n	1b4ca <update_ccc+0xde>
	ccc = attr->user_data;
   1b400:	f8d0 800c 	ldr.w	r8, [r0, #12]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1b404:	4646      	mov	r6, r8
   1b406:	f108 0918 	add.w	r9, r8, #24
		if (!cfg->value || !bt_gatt_ccc_cfg_is_matching_conn(conn, cfg)) {
   1b40a:	8973      	ldrh	r3, [r6, #10]
   1b40c:	b1d3      	cbz	r3, 1b444 <update_ccc+0x58>
   1b40e:	4631      	mov	r1, r6
   1b410:	4628      	mov	r0, r5
   1b412:	f00a fb40 	bl	25a96 <bt_gatt_ccc_cfg_is_matching_conn>
   1b416:	b1a8      	cbz	r0, 1b444 <update_ccc+0x58>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1b418:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1b41c:	4621      	mov	r1, r4
   1b41e:	4628      	mov	r0, r5
   1b420:	f00a fc95 	bl	25d4e <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1b424:	2803      	cmp	r0, #3
   1b426:	d111      	bne.n	1b44c <update_ccc+0x60>
				LOG_WRN("CCC %p not writable", attr);
   1b428:	46ea      	mov	sl, sp
   1b42a:	b088      	sub	sp, #32
   1b42c:	466a      	mov	r2, sp
   1b42e:	4b2a      	ldr	r3, [pc, #168]	; (1b4d8 <update_ccc+0xec>)
   1b430:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1b434:	e9c2 3405 	strd	r3, r4, [r2, #20]
   1b438:	f842 0f10 	str.w	r0, [r2, #16]!
   1b43c:	4827      	ldr	r0, [pc, #156]	; (1b4dc <update_ccc+0xf0>)
   1b43e:	f00a fb3d 	bl	25abc <z_log_msg_static_create.constprop.0>
   1b442:	46d5      	mov	sp, sl
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1b444:	360c      	adds	r6, #12
   1b446:	454e      	cmp	r6, r9
   1b448:	d1df      	bne.n	1b40a <update_ccc+0x1e>
   1b44a:	e03e      	b.n	1b4ca <update_ccc+0xde>
		gatt_ccc_changed(attr, ccc);
   1b44c:	4641      	mov	r1, r8
   1b44e:	4620      	mov	r0, r4
   1b450:	f00a fa89 	bl	25966 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1b454:	4b22      	ldr	r3, [pc, #136]	; (1b4e0 <update_ccc+0xf4>)
   1b456:	4598      	cmp	r8, r3
   1b458:	d137      	bne.n	1b4ca <update_ccc+0xde>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1b45a:	7a28      	ldrb	r0, [r5, #8]
   1b45c:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1b460:	f7ff f9ca 	bl	1a7f8 <find_sc_cfg>
	if (!cfg) {
   1b464:	4604      	mov	r4, r0
   1b466:	2800      	cmp	r0, #0
   1b468:	d02f      	beq.n	1b4ca <update_ccc+0xde>
	if (!(cfg->data.start || cfg->data.end)) {
   1b46a:	8903      	ldrh	r3, [r0, #8]
   1b46c:	b90b      	cbnz	r3, 1b472 <update_ccc+0x86>
   1b46e:	8943      	ldrh	r3, [r0, #10]
   1b470:	b35b      	cbz	r3, 1b4ca <update_ccc+0xde>
	index = bt_conn_index(conn);
   1b472:	4628      	mov	r0, r5
   1b474:	f7fd fae6 	bl	18a44 <bt_conn_index>
	sc_range[index][0] = sys_cpu_to_le16(cfg->data.start);
   1b478:	4a1a      	ldr	r2, [pc, #104]	; (1b4e4 <update_ccc+0xf8>)
   1b47a:	8923      	ldrh	r3, [r4, #8]
   1b47c:	f822 3020 	strh.w	r3, [r2, r0, lsl #2]
	sc_range[index][1] = sys_cpu_to_le16(cfg->data.end);
   1b480:	eb02 0380 	add.w	r3, r2, r0, lsl #2
   1b484:	8961      	ldrh	r1, [r4, #10]
   1b486:	8059      	strh	r1, [r3, #2]
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1b488:	4917      	ldr	r1, [pc, #92]	; (1b4e8 <update_ccc+0xfc>)
   1b48a:	4c18      	ldr	r4, [pc, #96]	; (1b4ec <update_ccc+0x100>)
   1b48c:	2318      	movs	r3, #24
   1b48e:	fb03 1300 	mla	r3, r3, r0, r1
	sc_restore_params[index].data = &sc_range[index][0];
   1b492:	b200      	sxth	r0, r0
   1b494:	eb02 0280 	add.w	r2, r2, r0, lsl #2
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1b498:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1b49c:	605c      	str	r4, [r3, #4]
	sc_restore_params[index].data = &sc_range[index][0];
   1b49e:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].func = sc_restore_rsp;
   1b4a0:	4c13      	ldr	r4, [pc, #76]	; (1b4f0 <update_ccc+0x104>)
   1b4a2:	609c      	str	r4, [r3, #8]
	sc_restore_params[index].len = sizeof(sc_range[index]);
   1b4a4:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1b4a6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   1b4aa:	4628      	mov	r0, r5
	sc_restore_params[index].len = sizeof(sc_range[index]);
   1b4ac:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1b4ae:	f7ff fea9 	bl	1b204 <bt_gatt_indicate>
   1b4b2:	b150      	cbz	r0, 1b4ca <update_ccc+0xde>
		LOG_ERR("SC restore indication failed");
   1b4b4:	4b0f      	ldr	r3, [pc, #60]	; (1b4f4 <update_ccc+0x108>)
   1b4b6:	617b      	str	r3, [r7, #20]
   1b4b8:	4808      	ldr	r0, [pc, #32]	; (1b4dc <update_ccc+0xf0>)
   1b4ba:	2302      	movs	r3, #2
   1b4bc:	f107 0210 	add.w	r2, r7, #16
   1b4c0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1b4c4:	613b      	str	r3, [r7, #16]
   1b4c6:	f00a faf9 	bl	25abc <z_log_msg_static_create.constprop.0>
}
   1b4ca:	2001      	movs	r0, #1
   1b4cc:	3718      	adds	r7, #24
   1b4ce:	46bd      	mov	sp, r7
   1b4d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b4d4:	0001a885 	.word	0x0001a885
   1b4d8:	0002a126 	.word	0x0002a126
   1b4dc:	00027004 	.word	0x00027004
   1b4e0:	200006cc 	.word	0x200006cc
   1b4e4:	20002fd6 	.word	0x20002fd6
   1b4e8:	20002d3c 	.word	0x20002d3c
   1b4ec:	000274e4 	.word	0x000274e4
   1b4f0:	00025c61 	.word	0x00025c61
   1b4f4:	0002a13a 	.word	0x0002a13a

0001b4f8 <gatt_notify>:
{
   1b4f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b4fc:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   1b4fe:	6851      	ldr	r1, [r2, #4]
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   1b500:	8a4b      	ldrh	r3, [r1, #18]
   1b502:	f003 0314 	and.w	r3, r3, #20
{
   1b506:	b087      	sub	sp, #28
   1b508:	4607      	mov	r7, r0
   1b50a:	4614      	mov	r4, r2
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   1b50c:	b173      	cbz	r3, 1b52c <gatt_notify+0x34>
		LOG_WRN("Link is not encrypted");
   1b50e:	4b2a      	ldr	r3, [pc, #168]	; (1b5b8 <gatt_notify+0xc0>)
   1b510:	482a      	ldr	r0, [pc, #168]	; (1b5bc <gatt_notify+0xc4>)
   1b512:	9305      	str	r3, [sp, #20]
   1b514:	aa04      	add	r2, sp, #16
   1b516:	2302      	movs	r3, #2
   1b518:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1b51c:	9304      	str	r3, [sp, #16]
   1b51e:	f00a facd 	bl	25abc <z_log_msg_static_create.constprop.0>
		return -EPERM;
   1b522:	f04f 30ff 	mov.w	r0, #4294967295
}
   1b526:	b007      	add	sp, #28
   1b528:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   1b52c:	2201      	movs	r2, #1
   1b52e:	f7ff fd1b 	bl	1af68 <bt_gatt_is_subscribed>
   1b532:	b960      	cbnz	r0, 1b54e <gatt_notify+0x56>
			LOG_WRN("Device is not subscribed to characteristic");
   1b534:	4b22      	ldr	r3, [pc, #136]	; (1b5c0 <gatt_notify+0xc8>)
   1b536:	4821      	ldr	r0, [pc, #132]	; (1b5bc <gatt_notify+0xc4>)
   1b538:	9305      	str	r3, [sp, #20]
   1b53a:	aa04      	add	r2, sp, #16
   1b53c:	2302      	movs	r3, #2
   1b53e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1b542:	9304      	str	r3, [sp, #16]
   1b544:	f00a faba 	bl	25abc <z_log_msg_static_create.constprop.0>
			return -EINVAL;
   1b548:	f06f 0015 	mvn.w	r0, #21
   1b54c:	e7eb      	b.n	1b526 <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   1b54e:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1b550:	211b      	movs	r1, #27
   1b552:	3202      	adds	r2, #2
   1b554:	4638      	mov	r0, r7
   1b556:	f7fe fcc5 	bl	19ee4 <bt_att_create_pdu>
	if (!buf) {
   1b55a:	4605      	mov	r5, r0
   1b55c:	b960      	cbnz	r0, 1b578 <gatt_notify+0x80>
		LOG_WRN("No buffer available to send notification");
   1b55e:	4b19      	ldr	r3, [pc, #100]	; (1b5c4 <gatt_notify+0xcc>)
   1b560:	4816      	ldr	r0, [pc, #88]	; (1b5bc <gatt_notify+0xc4>)
   1b562:	9305      	str	r3, [sp, #20]
   1b564:	aa04      	add	r2, sp, #16
   1b566:	2302      	movs	r3, #2
   1b568:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1b56c:	9304      	str	r3, [sp, #16]
   1b56e:	f00a faa5 	bl	25abc <z_log_msg_static_create.constprop.0>
		return -ENOMEM;
   1b572:	f06f 000b 	mvn.w	r0, #11
   1b576:	e7d6      	b.n	1b526 <gatt_notify+0x2e>
   1b578:	f100 090c 	add.w	r9, r0, #12
   1b57c:	2102      	movs	r1, #2
   1b57e:	4648      	mov	r0, r9
   1b580:	f000 fc82 	bl	1be88 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1b584:	4606      	mov	r6, r0
   1b586:	4648      	mov	r0, r9
   1b588:	f826 8b02 	strh.w	r8, [r6], #2
   1b58c:	89a1      	ldrh	r1, [r4, #12]
   1b58e:	f000 fc7b 	bl	1be88 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1b592:	89a2      	ldrh	r2, [r4, #12]
   1b594:	68a1      	ldr	r1, [r4, #8]
   1b596:	4630      	mov	r0, r6
   1b598:	f009 fa58 	bl	24a4c <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   1b59c:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   1b5a0:	4628      	mov	r0, r5
   1b5a2:	2301      	movs	r3, #1
   1b5a4:	f00a f9d5 	bl	25952 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   1b5a8:	4629      	mov	r1, r5
   1b5aa:	4638      	mov	r0, r7
}
   1b5ac:	b007      	add	sp, #28
   1b5ae:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   1b5b2:	f7ff b86d 	b.w	1a690 <bt_att_send>
   1b5b6:	bf00      	nop
   1b5b8:	0002a038 	.word	0x0002a038
   1b5bc:	00027004 	.word	0x00027004
   1b5c0:	0002a04e 	.word	0x0002a04e
   1b5c4:	0002a157 	.word	0x0002a157

0001b5c8 <notify_cb>:
{
   1b5c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b5cc:	4b45      	ldr	r3, [pc, #276]	; (1b6e4 <notify_cb+0x11c>)
{
   1b5ce:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b5d0:	6882      	ldr	r2, [r0, #8]
   1b5d2:	429a      	cmp	r2, r3
{
   1b5d4:	b086      	sub	sp, #24
   1b5d6:	4680      	mov	r8, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1b5d8:	d136      	bne.n	1b648 <notify_cb+0x80>
	ccc = attr->user_data;
   1b5da:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1b5de:	4b42      	ldr	r3, [pc, #264]	; (1b6e8 <notify_cb+0x120>)
   1b5e0:	4599      	cmp	r9, r3
   1b5e2:	d119      	bne.n	1b618 <notify_cb+0x50>
   1b5e4:	4c41      	ldr	r4, [pc, #260]	; (1b6ec <notify_cb+0x124>)
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1b5e6:	4f42      	ldr	r7, [pc, #264]	; (1b6f0 <notify_cb+0x128>)
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1b5e8:	2600      	movs	r6, #0
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   1b5ea:	4639      	mov	r1, r7
   1b5ec:	4620      	mov	r0, r4
   1b5ee:	f00a fa32 	bl	25a56 <bt_addr_le_eq>
   1b5f2:	b978      	cbnz	r0, 1b614 <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1b5f4:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1b5f8:	2207      	movs	r2, #7
   1b5fa:	4621      	mov	r1, r4
   1b5fc:	f7fd fba0 	bl	18d40 <bt_conn_lookup_state_le>
			if (!conn) {
   1b600:	bb40      	cbnz	r0, 1b654 <notify_cb+0x8c>
				sc = (struct sc_data *)data->ind_params->data;
   1b602:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   1b604:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   1b608:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1b60a:	4621      	mov	r1, r4
   1b60c:	8853      	ldrh	r3, [r2, #2]
   1b60e:	8812      	ldrh	r2, [r2, #0]
   1b610:	f7ff f9c2 	bl	1a998 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1b614:	340c      	adds	r4, #12
   1b616:	b1de      	cbz	r6, 1b650 <notify_cb+0x88>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1b618:	f109 0601 	add.w	r6, r9, #1
   1b61c:	f109 0a19 	add.w	sl, r9, #25
		if (cfg->value != data->type) {
   1b620:	f8b6 2009 	ldrh.w	r2, [r6, #9]
   1b624:	89ab      	ldrh	r3, [r5, #12]
   1b626:	429a      	cmp	r2, r3
   1b628:	d10b      	bne.n	1b642 <notify_cb+0x7a>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1b62a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   1b62e:	4631      	mov	r1, r6
   1b630:	f7fd fb3c 	bl	18cac <bt_conn_lookup_addr_le>
		if (!conn) {
   1b634:	4604      	mov	r4, r0
   1b636:	b120      	cbz	r0, 1b642 <notify_cb+0x7a>
		if (conn->state != BT_CONN_CONNECTED) {
   1b638:	7a83      	ldrb	r3, [r0, #10]
   1b63a:	2b07      	cmp	r3, #7
   1b63c:	d00d      	beq.n	1b65a <notify_cb+0x92>
			bt_conn_unref(conn);
   1b63e:	f7fd f8bf 	bl	187c0 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1b642:	360c      	adds	r6, #12
   1b644:	4556      	cmp	r6, sl
   1b646:	d1eb      	bne.n	1b620 <notify_cb+0x58>
		return BT_GATT_ITER_CONTINUE;
   1b648:	2001      	movs	r0, #1
}
   1b64a:	b006      	add	sp, #24
   1b64c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1b650:	2601      	movs	r6, #1
   1b652:	e7ca      	b.n	1b5ea <notify_cb+0x22>
			bt_conn_unref(conn);
   1b654:	f7fd f8b4 	bl	187c0 <bt_conn_unref>
   1b658:	e7dc      	b.n	1b614 <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1b65a:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
   1b65e:	b123      	cbz	r3, 1b66a <notify_cb+0xa2>
   1b660:	4641      	mov	r1, r8
   1b662:	4798      	blx	r3
   1b664:	b908      	cbnz	r0, 1b66a <notify_cb+0xa2>
			bt_conn_unref(conn);
   1b666:	4620      	mov	r0, r4
   1b668:	e7e9      	b.n	1b63e <notify_cb+0x76>
	if (mask & (BT_GATT_PERM_ENCRYPT_MASK | BT_GATT_PERM_AUTHEN_MASK)) {
   1b66a:	f8b8 3012 	ldrh.w	r3, [r8, #18]
   1b66e:	f003 0314 	and.w	r3, r3, #20
   1b672:	b153      	cbz	r3, 1b68a <notify_cb+0xc2>
			LOG_WRN("Link is not encrypted");
   1b674:	4b1f      	ldr	r3, [pc, #124]	; (1b6f4 <notify_cb+0x12c>)
   1b676:	9305      	str	r3, [sp, #20]
   1b678:	481f      	ldr	r0, [pc, #124]	; (1b6f8 <notify_cb+0x130>)
   1b67a:	2302      	movs	r3, #2
   1b67c:	aa04      	add	r2, sp, #16
   1b67e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1b682:	9304      	str	r3, [sp, #16]
   1b684:	f00a fa1a 	bl	25abc <z_log_msg_static_create.constprop.0>
			bt_conn_unref(conn);
   1b688:	e7ed      	b.n	1b666 <notify_cb+0x9e>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1b68a:	89ab      	ldrh	r3, [r5, #12]
   1b68c:	2b02      	cmp	r3, #2
   1b68e:	d115      	bne.n	1b6bc <notify_cb+0xf4>
   1b690:	f8b6 3009 	ldrh.w	r3, [r6, #9]
   1b694:	079a      	lsls	r2, r3, #30
   1b696:	d405      	bmi.n	1b6a4 <notify_cb+0xdc>
		bt_conn_unref(conn);
   1b698:	4620      	mov	r0, r4
   1b69a:	f7fd f891 	bl	187c0 <bt_conn_unref>
		data->err = 0;
   1b69e:	2300      	movs	r3, #0
   1b6a0:	60ab      	str	r3, [r5, #8]
   1b6a2:	e7ce      	b.n	1b642 <notify_cb+0x7a>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   1b6a4:	692a      	ldr	r2, [r5, #16]
   1b6a6:	88a9      	ldrh	r1, [r5, #4]
   1b6a8:	4620      	mov	r0, r4
   1b6aa:	f7ff fd2f 	bl	1b10c <gatt_indicate>
			if (err == 0) {
   1b6ae:	4607      	mov	r7, r0
   1b6b0:	b980      	cbnz	r0, 1b6d4 <notify_cb+0x10c>
				data->ind_params->_ref++;
   1b6b2:	692a      	ldr	r2, [r5, #16]
   1b6b4:	7d93      	ldrb	r3, [r2, #22]
   1b6b6:	3301      	adds	r3, #1
   1b6b8:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1b6ba:	e7ed      	b.n	1b698 <notify_cb+0xd0>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1b6bc:	2b01      	cmp	r3, #1
   1b6be:	d1eb      	bne.n	1b698 <notify_cb+0xd0>
   1b6c0:	f8b6 3009 	ldrh.w	r3, [r6, #9]
   1b6c4:	07db      	lsls	r3, r3, #31
   1b6c6:	d5e7      	bpl.n	1b698 <notify_cb+0xd0>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1b6c8:	692a      	ldr	r2, [r5, #16]
   1b6ca:	88a9      	ldrh	r1, [r5, #4]
   1b6cc:	4620      	mov	r0, r4
   1b6ce:	f7ff ff13 	bl	1b4f8 <gatt_notify>
   1b6d2:	4607      	mov	r7, r0
		bt_conn_unref(conn);
   1b6d4:	4620      	mov	r0, r4
   1b6d6:	f7fd f873 	bl	187c0 <bt_conn_unref>
		if (err < 0) {
   1b6da:	2f00      	cmp	r7, #0
   1b6dc:	dadf      	bge.n	1b69e <notify_cb+0xd6>
			return BT_GATT_ITER_STOP;
   1b6de:	2000      	movs	r0, #0
   1b6e0:	e7b3      	b.n	1b64a <notify_cb+0x82>
   1b6e2:	bf00      	nop
   1b6e4:	0001a885 	.word	0x0001a885
   1b6e8:	200006cc 	.word	0x200006cc
   1b6ec:	20002fdb 	.word	0x20002fdb
   1b6f0:	00028d02 	.word	0x00028d02
   1b6f4:	0002a038 	.word	0x0002a038
   1b6f8:	00027004 	.word	0x00027004

0001b6fc <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   1b6fc:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1b6fe:	4a06      	ldr	r2, [pc, #24]	; (1b718 <bt_gatt_connected+0x1c>)
	data.conn = conn;
   1b700:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1b702:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   1b704:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1b706:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   1b70a:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1b70e:	f00a fb13 	bl	25d38 <bt_gatt_foreach_attr>
	err = bt_gatt_exchange_mtu(conn, &gatt_exchange_params);
	if (err) {
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
}
   1b712:	b003      	add	sp, #12
   1b714:	f85d fb04 	ldr.w	pc, [sp], #4
   1b718:	0001b3ed 	.word	0x0001b3ed

0001b71c <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   1b71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   1b71e:	4b08      	ldr	r3, [pc, #32]	; (1b740 <bt_gatt_att_max_mtu_changed+0x24>)
   1b720:	681c      	ldr	r4, [r3, #0]
   1b722:	4605      	mov	r5, r0
   1b724:	460e      	mov	r6, r1
   1b726:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1b728:	b14c      	cbz	r4, 1b73e <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   1b72a:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1b72e:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1b730:	b11b      	cbz	r3, 1b73a <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1b732:	463a      	mov	r2, r7
   1b734:	4631      	mov	r1, r6
   1b736:	4628      	mov	r0, r5
   1b738:	4798      	blx	r3
	return node->next;
   1b73a:	6864      	ldr	r4, [r4, #4]
   1b73c:	e7f4      	b.n	1b728 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   1b73e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b740:	20002d78 	.word	0x20002d78

0001b744 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1b744:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1b746:	4603      	mov	r3, r0
   1b748:	4a0f      	ldr	r2, [pc, #60]	; (1b788 <bt_gatt_disconnected+0x44>)
{
   1b74a:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1b74c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1b750:	2001      	movs	r0, #1
   1b752:	f00a faf1 	bl	25d38 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   1b756:	4620      	mov	r0, r4
   1b758:	f7ff f820 	bl	1a79c <find_cf_cfg>
	if (!cfg) {
   1b75c:	4605      	mov	r5, r0
   1b75e:	b188      	cbz	r0, 1b784 <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1b760:	f104 0690 	add.w	r6, r4, #144	; 0x90
   1b764:	7a20      	ldrb	r0, [r4, #8]
   1b766:	4631      	mov	r1, r6
   1b768:	f009 fad6 	bl	24d18 <bt_addr_le_is_bonded>
   1b76c:	b920      	cbnz	r0, 1b778 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   1b76e:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1b770:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   1b774:	f7ff b8f4 	b.w	1a960 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1b778:	4631      	mov	r1, r6
   1b77a:	1c68      	adds	r0, r5, #1
}
   1b77c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1b780:	f00a b986 	b.w	25a90 <bt_addr_le_copy>
}
   1b784:	bd70      	pop	{r4, r5, r6, pc}
   1b786:	bf00      	nop
   1b788:	0001aa05 	.word	0x0001aa05

0001b78c <bt_smp_accept.part.0>:
	}

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
   1b78c:	b580      	push	{r7, lr}
   1b78e:	af00      	add	r7, sp, #0
		*chan = &smp->chan;

		return 0;
	}

	LOG_ERR("No available SMP context for conn %p", conn);
   1b790:	b088      	sub	sp, #32
   1b792:	466a      	mov	r2, sp
   1b794:	4b07      	ldr	r3, [pc, #28]	; (1b7b4 <bt_smp_accept.part.0+0x28>)
   1b796:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1b79a:	2303      	movs	r3, #3
   1b79c:	f842 3f10 	str.w	r3, [r2, #16]!
   1b7a0:	4805      	ldr	r0, [pc, #20]	; (1b7b8 <bt_smp_accept.part.0+0x2c>)
   1b7a2:	2300      	movs	r3, #0
   1b7a4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1b7a8:	f7f8 fbf0 	bl	13f8c <z_impl_z_log_msg_static_create>

	return -ENOMEM;
}
   1b7ac:	f06f 000b 	mvn.w	r0, #11
   1b7b0:	46bd      	mov	sp, r7
   1b7b2:	bd80      	pop	{r7, pc}
   1b7b4:	0002a18f 	.word	0x0002a18f
   1b7b8:	00027044 	.word	0x00027044

0001b7bc <bt_smp_accept>:
		if (smp->chan.conn) {
   1b7bc:	4b04      	ldr	r3, [pc, #16]	; (1b7d0 <bt_smp_accept+0x14>)
   1b7be:	681a      	ldr	r2, [r3, #0]
   1b7c0:	b10a      	cbz	r2, 1b7c6 <bt_smp_accept+0xa>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
   1b7c2:	f7ff bfe3 	b.w	1b78c <bt_smp_accept.part.0>
		smp->chan.ops = &ops;
   1b7c6:	4803      	ldr	r0, [pc, #12]	; (1b7d4 <bt_smp_accept+0x18>)
   1b7c8:	6058      	str	r0, [r3, #4]
		*chan = &smp->chan;
   1b7ca:	600b      	str	r3, [r1, #0]
}
   1b7cc:	4610      	mov	r0, r2
   1b7ce:	4770      	bx	lr
   1b7d0:	20002d80 	.word	0x20002d80
   1b7d4:	000275e8 	.word	0x000275e8

0001b7d8 <net_buf_pool_get>:
	struct net_buf_pool *pool;

	STRUCT_SECTION_GET(net_buf_pool, id, &pool);

	return pool;
}
   1b7d8:	4b02      	ldr	r3, [pc, #8]	; (1b7e4 <net_buf_pool_get+0xc>)
   1b7da:	2234      	movs	r2, #52	; 0x34
   1b7dc:	fb02 3000 	mla	r0, r2, r0, r3
   1b7e0:	4770      	bx	lr
   1b7e2:	bf00      	nop
   1b7e4:	200009cc 	.word	0x200009cc

0001b7e8 <net_buf_id>:
	return pool - TYPE_SECTION_START(net_buf_pool);
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b7e8:	7a82      	ldrb	r2, [r0, #10]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1b7ea:	4b07      	ldr	r3, [pc, #28]	; (1b808 <net_buf_id+0x20>)
   1b7ec:	2134      	movs	r1, #52	; 0x34
   1b7ee:	fb01 3302 	mla	r3, r1, r2, r3
   1b7f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1b7f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1b7f8:	331b      	adds	r3, #27
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1b7fa:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1b7fc:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1b800:	fbb0 f0f3 	udiv	r0, r0, r3
   1b804:	4770      	bx	lr
   1b806:	bf00      	nop
   1b808:	200009cc 	.word	0x200009cc

0001b80c <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1b80c:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1b80e:	4b0a      	ldr	r3, [pc, #40]	; (1b838 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b810:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1b812:	2434      	movs	r4, #52	; 0x34
   1b814:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1b818:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1b81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b81c:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1b81e:	681a      	ldr	r2, [r3, #0]
   1b820:	4294      	cmp	r4, r2
   1b822:	bf94      	ite	ls
   1b824:	600c      	strls	r4, [r1, #0]
   1b826:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1b828:	e9d3 5400 	ldrd	r5, r4, [r3]
   1b82c:	f7ff ffdc 	bl	1b7e8 <net_buf_id>
}
   1b830:	fb05 4000 	mla	r0, r5, r0, r4
   1b834:	bd38      	pop	{r3, r4, r5, pc}
   1b836:	bf00      	nop
   1b838:	200009cc 	.word	0x200009cc

0001b83c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1b83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b840:	b085      	sub	sp, #20
   1b842:	4605      	mov	r5, r0
   1b844:	9103      	str	r1, [sp, #12]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1b846:	4610      	mov	r0, r2
   1b848:	4619      	mov	r1, r3
{
   1b84a:	4692      	mov	sl, r2
   1b84c:	4699      	mov	r9, r3
   1b84e:	4690      	mov	r8, r2
   1b850:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1b852:	f00b f95e 	bl	26b12 <sys_clock_timeout_end_calc>
   1b856:	e9cd 0101 	strd	r0, r1, [sp, #4]
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   1b85a:	b945      	cbnz	r5, 1b86e <net_buf_alloc_len+0x32>
   1b85c:	4966      	ldr	r1, [pc, #408]	; (1b9f8 <net_buf_alloc_len+0x1bc>)
   1b85e:	4a67      	ldr	r2, [pc, #412]	; (1b9fc <net_buf_alloc_len+0x1c0>)
   1b860:	4867      	ldr	r0, [pc, #412]	; (1ba00 <net_buf_alloc_len+0x1c4>)
   1b862:	23f8      	movs	r3, #248	; 0xf8
   1b864:	f008 fcee 	bl	24244 <assert_print>
   1b868:	21f8      	movs	r1, #248	; 0xf8
			net_buf_destroy(buf);
			return NULL;
		}

#if __ASSERT_ON
		NET_BUF_ASSERT(req_size <= size);
   1b86a:	4864      	ldr	r0, [pc, #400]	; (1b9fc <net_buf_alloc_len+0x1c0>)
   1b86c:	e019      	b.n	1b8a2 <net_buf_alloc_len+0x66>
	key = k_spin_lock(&pool->lock);
   1b86e:	f105 061c 	add.w	r6, r5, #28
	__asm__ volatile(
   1b872:	f04f 0340 	mov.w	r3, #64	; 0x40
   1b876:	f3ef 8b11 	mrs	fp, BASEPRI
   1b87a:	f383 8812 	msr	BASEPRI_MAX, r3
   1b87e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1b882:	4630      	mov	r0, r6
   1b884:	f004 fd1e 	bl	202c4 <z_spin_lock_valid>
   1b888:	b968      	cbnz	r0, 1b8a6 <net_buf_alloc_len+0x6a>
   1b88a:	4a5e      	ldr	r2, [pc, #376]	; (1ba04 <net_buf_alloc_len+0x1c8>)
   1b88c:	495e      	ldr	r1, [pc, #376]	; (1ba08 <net_buf_alloc_len+0x1cc>)
   1b88e:	485c      	ldr	r0, [pc, #368]	; (1ba00 <net_buf_alloc_len+0x1c4>)
   1b890:	2394      	movs	r3, #148	; 0x94
   1b892:	f008 fcd7 	bl	24244 <assert_print>
   1b896:	4631      	mov	r1, r6
   1b898:	485c      	ldr	r0, [pc, #368]	; (1ba0c <net_buf_alloc_len+0x1d0>)
   1b89a:	f008 fcd3 	bl	24244 <assert_print>
   1b89e:	2194      	movs	r1, #148	; 0x94
   1b8a0:	4858      	ldr	r0, [pc, #352]	; (1ba04 <net_buf_alloc_len+0x1c8>)
   1b8a2:	f008 fcc8 	bl	24236 <assert_post_action>
	z_spin_lock_set_owner(l);
   1b8a6:	4630      	mov	r0, r6
   1b8a8:	f004 fd2a 	bl	20300 <z_spin_lock_set_owner>
	if (pool->uninit_count) {
   1b8ac:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   1b8ae:	2b00      	cmp	r3, #0
   1b8b0:	d070      	beq.n	1b994 <net_buf_alloc_len+0x158>
		if (pool->uninit_count < pool->buf_count) {
   1b8b2:	8c2a      	ldrh	r2, [r5, #32]
   1b8b4:	429a      	cmp	r2, r3
   1b8b6:	d94d      	bls.n	1b954 <net_buf_alloc_len+0x118>
	return z_impl_k_queue_get(queue, timeout);
   1b8b8:	2200      	movs	r2, #0
   1b8ba:	2300      	movs	r3, #0
   1b8bc:	4628      	mov	r0, r5
   1b8be:	f004 ff43 	bl	20748 <z_impl_k_queue_get>
			if (buf) {
   1b8c2:	4604      	mov	r4, r0
   1b8c4:	2800      	cmp	r0, #0
   1b8c6:	d045      	beq.n	1b954 <net_buf_alloc_len+0x118>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1b8c8:	4630      	mov	r0, r6
   1b8ca:	f004 fd09 	bl	202e0 <z_spin_unlock_valid>
   1b8ce:	b958      	cbnz	r0, 1b8e8 <net_buf_alloc_len+0xac>
   1b8d0:	4a4c      	ldr	r2, [pc, #304]	; (1ba04 <net_buf_alloc_len+0x1c8>)
   1b8d2:	494f      	ldr	r1, [pc, #316]	; (1ba10 <net_buf_alloc_len+0x1d4>)
   1b8d4:	484a      	ldr	r0, [pc, #296]	; (1ba00 <net_buf_alloc_len+0x1c4>)
   1b8d6:	23c3      	movs	r3, #195	; 0xc3
   1b8d8:	f008 fcb4 	bl	24244 <assert_print>
   1b8dc:	4631      	mov	r1, r6
   1b8de:	484d      	ldr	r0, [pc, #308]	; (1ba14 <net_buf_alloc_len+0x1d8>)
   1b8e0:	f008 fcb0 	bl	24244 <assert_print>
   1b8e4:	21c3      	movs	r1, #195	; 0xc3
   1b8e6:	e7db      	b.n	1b8a0 <net_buf_alloc_len+0x64>
	__asm__ volatile(
   1b8e8:	f38b 8811 	msr	BASEPRI, fp
   1b8ec:	f3bf 8f6f 	isb	sy
	if (size) {
   1b8f0:	9d03      	ldr	r5, [sp, #12]
   1b8f2:	2d00      	cmp	r5, #0
   1b8f4:	d074      	beq.n	1b9e0 <net_buf_alloc_len+0x1a4>
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1b8f6:	ea59 030a 	orrs.w	r3, r9, sl
   1b8fa:	d012      	beq.n	1b922 <net_buf_alloc_len+0xe6>
   1b8fc:	f1b9 3fff 	cmp.w	r9, #4294967295
   1b900:	bf08      	it	eq
   1b902:	f1ba 3fff 	cmpeq.w	sl, #4294967295
   1b906:	d00c      	beq.n	1b922 <net_buf_alloc_len+0xe6>
			int64_t remaining = end - sys_clock_tick_get();
   1b908:	f007 f966 	bl	22bd8 <sys_clock_tick_get>
   1b90c:	9b01      	ldr	r3, [sp, #4]
   1b90e:	ebb3 0800 	subs.w	r8, r3, r0
   1b912:	9b02      	ldr	r3, [sp, #8]
   1b914:	eb63 0701 	sbc.w	r7, r3, r1
			if (remaining <= 0) {
   1b918:	2f00      	cmp	r7, #0
   1b91a:	bfbc      	itt	lt
   1b91c:	f04f 0800 	movlt.w	r8, #0
   1b920:	4647      	movlt	r7, r8
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1b922:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1b924:	4e3c      	ldr	r6, [pc, #240]	; (1ba18 <net_buf_alloc_len+0x1dc>)
   1b926:	f04f 0934 	mov.w	r9, #52	; 0x34
   1b92a:	fb09 6303 	mla	r3, r9, r3, r6
   1b92e:	4642      	mov	r2, r8
   1b930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b932:	681b      	ldr	r3, [r3, #0]
   1b934:	a903      	add	r1, sp, #12
   1b936:	f8d3 a000 	ldr.w	sl, [r3]
   1b93a:	4620      	mov	r0, r4
   1b93c:	463b      	mov	r3, r7
   1b93e:	47d0      	blx	sl
		buf->__buf = data_alloc(buf, &size, timeout);
   1b940:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   1b942:	2800      	cmp	r0, #0
   1b944:	d13c      	bne.n	1b9c0 <net_buf_alloc_len+0x184>
	k_lifo_put(&pool->free, buf);
   1b946:	7aa0      	ldrb	r0, [r4, #10]
   1b948:	4621      	mov	r1, r4
   1b94a:	fb00 6009 	mla	r0, r0, r9, r6
   1b94e:	f00b f81e 	bl	2698e <k_queue_prepend>
}
   1b952:	e030      	b.n	1b9b6 <net_buf_alloc_len+0x17a>
		uninit_count = pool->uninit_count--;
   1b954:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   1b956:	1e63      	subs	r3, r4, #1
   1b958:	846b      	strh	r3, [r5, #34]	; 0x22
   1b95a:	4630      	mov	r0, r6
   1b95c:	f004 fcc0 	bl	202e0 <z_spin_unlock_valid>
   1b960:	2800      	cmp	r0, #0
   1b962:	d0b5      	beq.n	1b8d0 <net_buf_alloc_len+0x94>
   1b964:	f38b 8811 	msr	BASEPRI, fp
   1b968:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1b96c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1b970:	8c2a      	ldrh	r2, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1b972:	331b      	adds	r3, #27
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1b974:	1b12      	subs	r2, r2, r4
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1b976:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1b978:	f023 0303 	bic.w	r3, r3, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1b97c:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - TYPE_SECTION_START(net_buf_pool);
   1b980:	4b25      	ldr	r3, [pc, #148]	; (1ba18 <net_buf_alloc_len+0x1dc>)
   1b982:	4a26      	ldr	r2, [pc, #152]	; (1ba1c <net_buf_alloc_len+0x1e0>)
   1b984:	1aeb      	subs	r3, r5, r3
   1b986:	109b      	asrs	r3, r3, #2
   1b988:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   1b98a:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   1b98c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1b990:	72e3      	strb	r3, [r4, #11]
		goto success;
   1b992:	e7ad      	b.n	1b8f0 <net_buf_alloc_len+0xb4>
   1b994:	4630      	mov	r0, r6
   1b996:	f004 fca3 	bl	202e0 <z_spin_unlock_valid>
   1b99a:	2800      	cmp	r0, #0
   1b99c:	d098      	beq.n	1b8d0 <net_buf_alloc_len+0x94>
   1b99e:	f38b 8811 	msr	BASEPRI, fp
   1b9a2:	f3bf 8f6f 	isb	sy
   1b9a6:	4652      	mov	r2, sl
   1b9a8:	464b      	mov	r3, r9
   1b9aa:	4628      	mov	r0, r5
   1b9ac:	f004 fecc 	bl	20748 <z_impl_k_queue_get>
	if (!buf) {
   1b9b0:	4604      	mov	r4, r0
   1b9b2:	2800      	cmp	r0, #0
   1b9b4:	d19c      	bne.n	1b8f0 <net_buf_alloc_len+0xb4>
		return NULL;
   1b9b6:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1b9b8:	4620      	mov	r0, r4
   1b9ba:	b005      	add	sp, #20
   1b9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   1b9c0:	9b03      	ldr	r3, [sp, #12]
   1b9c2:	429d      	cmp	r5, r3
   1b9c4:	d90d      	bls.n	1b9e2 <net_buf_alloc_len+0x1a6>
   1b9c6:	4916      	ldr	r1, [pc, #88]	; (1ba20 <net_buf_alloc_len+0x1e4>)
   1b9c8:	4a0c      	ldr	r2, [pc, #48]	; (1b9fc <net_buf_alloc_len+0x1c0>)
   1b9ca:	480d      	ldr	r0, [pc, #52]	; (1ba00 <net_buf_alloc_len+0x1c4>)
   1b9cc:	f240 1359 	movw	r3, #345	; 0x159
   1b9d0:	f008 fc38 	bl	24244 <assert_print>
   1b9d4:	4813      	ldr	r0, [pc, #76]	; (1ba24 <net_buf_alloc_len+0x1e8>)
   1b9d6:	f008 fc35 	bl	24244 <assert_print>
   1b9da:	f240 1159 	movw	r1, #345	; 0x159
   1b9de:	e744      	b.n	1b86a <net_buf_alloc_len+0x2e>
		buf->__buf = NULL;
   1b9e0:	6165      	str	r5, [r4, #20]
	buf->frags = NULL;
   1b9e2:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1b9e4:	2201      	movs	r2, #1
	buf->frags = NULL;
   1b9e6:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   1b9e8:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   1b9ea:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   1b9ec:	9a03      	ldr	r2, [sp, #12]
	buf->data = buf->__buf;
   1b9ee:	6963      	ldr	r3, [r4, #20]
   1b9f0:	8262      	strh	r2, [r4, #18]
   1b9f2:	60e3      	str	r3, [r4, #12]
}
   1b9f4:	e7e0      	b.n	1b9b8 <net_buf_alloc_len+0x17c>
   1b9f6:	bf00      	nop
   1b9f8:	0002a20a 	.word	0x0002a20a
   1b9fc:	0002a1bb 	.word	0x0002a1bb
   1ba00:	00027c2a 	.word	0x00027c2a
   1ba04:	0002801e 	.word	0x0002801e
   1ba08:	00028077 	.word	0x00028077
   1ba0c:	0002808c 	.word	0x0002808c
   1ba10:	0002804b 	.word	0x0002804b
   1ba14:	00028062 	.word	0x00028062
   1ba18:	200009cc 	.word	0x200009cc
   1ba1c:	c4ec4ec5 	.word	0xc4ec4ec5
   1ba20:	0002a20f 	.word	0x0002a20f
   1ba24:	0002a220 	.word	0x0002a220

0001ba28 <net_buf_slist_put>:
}

static struct k_spinlock net_buf_slist_lock;

void net_buf_slist_put(sys_slist_t *list, struct net_buf *buf)
{
   1ba28:	b570      	push	{r4, r5, r6, lr}
   1ba2a:	460c      	mov	r4, r1
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1ba2c:	4605      	mov	r5, r0
   1ba2e:	b958      	cbnz	r0, 1ba48 <net_buf_slist_put+0x20>
   1ba30:	4928      	ldr	r1, [pc, #160]	; (1bad4 <net_buf_slist_put+0xac>)
   1ba32:	4a29      	ldr	r2, [pc, #164]	; (1bad8 <net_buf_slist_put+0xb0>)
   1ba34:	4829      	ldr	r0, [pc, #164]	; (1badc <net_buf_slist_put+0xb4>)
   1ba36:	f240 13b7 	movw	r3, #439	; 0x1b7
   1ba3a:	f008 fc03 	bl	24244 <assert_print>
   1ba3e:	f240 11b7 	movw	r1, #439	; 0x1b7
	__ASSERT_NO_MSG(buf);
   1ba42:	4825      	ldr	r0, [pc, #148]	; (1bad8 <net_buf_slist_put+0xb0>)
   1ba44:	f008 fbf7 	bl	24236 <assert_post_action>
   1ba48:	b949      	cbnz	r1, 1ba5e <net_buf_slist_put+0x36>
   1ba4a:	4925      	ldr	r1, [pc, #148]	; (1bae0 <net_buf_slist_put+0xb8>)
   1ba4c:	4a22      	ldr	r2, [pc, #136]	; (1bad8 <net_buf_slist_put+0xb0>)
   1ba4e:	4823      	ldr	r0, [pc, #140]	; (1badc <net_buf_slist_put+0xb4>)
   1ba50:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
   1ba54:	f008 fbf6 	bl	24244 <assert_print>
   1ba58:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   1ba5c:	e7f1      	b.n	1ba42 <net_buf_slist_put+0x1a>
	__asm__ volatile(
   1ba5e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ba62:	f3ef 8611 	mrs	r6, BASEPRI
   1ba66:	f383 8812 	msr	BASEPRI_MAX, r3
   1ba6a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ba6e:	481d      	ldr	r0, [pc, #116]	; (1bae4 <net_buf_slist_put+0xbc>)
   1ba70:	f004 fc28 	bl	202c4 <z_spin_lock_valid>
   1ba74:	b960      	cbnz	r0, 1ba90 <net_buf_slist_put+0x68>
   1ba76:	4a1c      	ldr	r2, [pc, #112]	; (1bae8 <net_buf_slist_put+0xc0>)
   1ba78:	491c      	ldr	r1, [pc, #112]	; (1baec <net_buf_slist_put+0xc4>)
   1ba7a:	4818      	ldr	r0, [pc, #96]	; (1badc <net_buf_slist_put+0xb4>)
   1ba7c:	2394      	movs	r3, #148	; 0x94
   1ba7e:	f008 fbe1 	bl	24244 <assert_print>
   1ba82:	4918      	ldr	r1, [pc, #96]	; (1bae4 <net_buf_slist_put+0xbc>)
   1ba84:	481a      	ldr	r0, [pc, #104]	; (1baf0 <net_buf_slist_put+0xc8>)
   1ba86:	f008 fbdd 	bl	24244 <assert_print>
   1ba8a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ba8c:	4816      	ldr	r0, [pc, #88]	; (1bae8 <net_buf_slist_put+0xc0>)
   1ba8e:	e7d9      	b.n	1ba44 <net_buf_slist_put+0x1c>
	z_spin_lock_set_owner(l);
   1ba90:	4814      	ldr	r0, [pc, #80]	; (1bae4 <net_buf_slist_put+0xbc>)
   1ba92:	f004 fc35 	bl	20300 <z_spin_lock_set_owner>
	parent->next = child;
   1ba96:	2300      	movs	r3, #0
   1ba98:	6023      	str	r3, [r4, #0]
	return list->tail;
   1ba9a:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   1ba9c:	b98b      	cbnz	r3, 1bac2 <net_buf_slist_put+0x9a>
	list->head = node;
   1ba9e:	e9c5 4400 	strd	r4, r4, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1baa2:	4810      	ldr	r0, [pc, #64]	; (1bae4 <net_buf_slist_put+0xbc>)
   1baa4:	f004 fc1c 	bl	202e0 <z_spin_unlock_valid>
   1baa8:	b970      	cbnz	r0, 1bac8 <net_buf_slist_put+0xa0>
   1baaa:	4a0f      	ldr	r2, [pc, #60]	; (1bae8 <net_buf_slist_put+0xc0>)
   1baac:	4911      	ldr	r1, [pc, #68]	; (1baf4 <net_buf_slist_put+0xcc>)
   1baae:	480b      	ldr	r0, [pc, #44]	; (1badc <net_buf_slist_put+0xb4>)
   1bab0:	23c3      	movs	r3, #195	; 0xc3
   1bab2:	f008 fbc7 	bl	24244 <assert_print>
   1bab6:	490b      	ldr	r1, [pc, #44]	; (1bae4 <net_buf_slist_put+0xbc>)
   1bab8:	480f      	ldr	r0, [pc, #60]	; (1baf8 <net_buf_slist_put+0xd0>)
   1baba:	f008 fbc3 	bl	24244 <assert_print>
   1babe:	21c3      	movs	r1, #195	; 0xc3
   1bac0:	e7e4      	b.n	1ba8c <net_buf_slist_put+0x64>
	parent->next = child;
   1bac2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1bac4:	606c      	str	r4, [r5, #4]
}
   1bac6:	e7ec      	b.n	1baa2 <net_buf_slist_put+0x7a>
	__asm__ volatile(
   1bac8:	f386 8811 	msr	BASEPRI, r6
   1bacc:	f3bf 8f6f 	isb	sy

	key = k_spin_lock(&net_buf_slist_lock);
	sys_slist_append(list, &buf->node);
	k_spin_unlock(&net_buf_slist_lock, key);
}
   1bad0:	bd70      	pop	{r4, r5, r6, pc}
   1bad2:	bf00      	nop
   1bad4:	0002a223 	.word	0x0002a223
   1bad8:	0002a1bb 	.word	0x0002a1bb
   1badc:	00027c2a 	.word	0x00027c2a
   1bae0:	0002a23d 	.word	0x0002a23d
   1bae4:	20002db0 	.word	0x20002db0
   1bae8:	0002801e 	.word	0x0002801e
   1baec:	00028077 	.word	0x00028077
   1baf0:	0002808c 	.word	0x0002808c
   1baf4:	0002804b 	.word	0x0002804b
   1baf8:	00028062 	.word	0x00028062

0001bafc <net_buf_slist_get>:

struct net_buf *net_buf_slist_get(sys_slist_t *list)
{
   1bafc:	b570      	push	{r4, r5, r6, lr}
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(list);
   1bafe:	4604      	mov	r4, r0
   1bb00:	b958      	cbnz	r0, 1bb1a <net_buf_slist_get+0x1e>
   1bb02:	4923      	ldr	r1, [pc, #140]	; (1bb90 <net_buf_slist_get+0x94>)
   1bb04:	4823      	ldr	r0, [pc, #140]	; (1bb94 <net_buf_slist_get+0x98>)
   1bb06:	4a24      	ldr	r2, [pc, #144]	; (1bb98 <net_buf_slist_get+0x9c>)
   1bb08:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   1bb0c:	f008 fb9a 	bl	24244 <assert_print>
   1bb10:	4821      	ldr	r0, [pc, #132]	; (1bb98 <net_buf_slist_get+0x9c>)
   1bb12:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1bb16:	f008 fb8e 	bl	24236 <assert_post_action>
	__asm__ volatile(
   1bb1a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bb1e:	f3ef 8611 	mrs	r6, BASEPRI
   1bb22:	f383 8812 	msr	BASEPRI_MAX, r3
   1bb26:	f3bf 8f6f 	isb	sy
   1bb2a:	481c      	ldr	r0, [pc, #112]	; (1bb9c <net_buf_slist_get+0xa0>)
   1bb2c:	f004 fbca 	bl	202c4 <z_spin_lock_valid>
   1bb30:	b960      	cbnz	r0, 1bb4c <net_buf_slist_get+0x50>
   1bb32:	4a1b      	ldr	r2, [pc, #108]	; (1bba0 <net_buf_slist_get+0xa4>)
   1bb34:	491b      	ldr	r1, [pc, #108]	; (1bba4 <net_buf_slist_get+0xa8>)
   1bb36:	4817      	ldr	r0, [pc, #92]	; (1bb94 <net_buf_slist_get+0x98>)
   1bb38:	2394      	movs	r3, #148	; 0x94
   1bb3a:	f008 fb83 	bl	24244 <assert_print>
   1bb3e:	4917      	ldr	r1, [pc, #92]	; (1bb9c <net_buf_slist_get+0xa0>)
   1bb40:	4819      	ldr	r0, [pc, #100]	; (1bba8 <net_buf_slist_get+0xac>)
   1bb42:	f008 fb7f 	bl	24244 <assert_print>
   1bb46:	2194      	movs	r1, #148	; 0x94
   1bb48:	4815      	ldr	r0, [pc, #84]	; (1bba0 <net_buf_slist_get+0xa4>)
   1bb4a:	e7e4      	b.n	1bb16 <net_buf_slist_get+0x1a>
	z_spin_lock_set_owner(l);
   1bb4c:	4813      	ldr	r0, [pc, #76]	; (1bb9c <net_buf_slist_get+0xa0>)
   1bb4e:	f004 fbd7 	bl	20300 <z_spin_lock_set_owner>
	return list->head;
   1bb52:	6825      	ldr	r5, [r4, #0]
Z_GENLIST_GET(slist, snode)
   1bb54:	b12d      	cbz	r5, 1bb62 <net_buf_slist_get+0x66>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1bb56:	6862      	ldr	r2, [r4, #4]
	return node->next;
   1bb58:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1bb5a:	6023      	str	r3, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1bb5c:	4295      	cmp	r5, r2
	list->tail = node;
   1bb5e:	bf08      	it	eq
   1bb60:	6063      	streq	r3, [r4, #4]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1bb62:	480e      	ldr	r0, [pc, #56]	; (1bb9c <net_buf_slist_get+0xa0>)
   1bb64:	f004 fbbc 	bl	202e0 <z_spin_unlock_valid>
   1bb68:	b958      	cbnz	r0, 1bb82 <net_buf_slist_get+0x86>
   1bb6a:	4a0d      	ldr	r2, [pc, #52]	; (1bba0 <net_buf_slist_get+0xa4>)
   1bb6c:	490f      	ldr	r1, [pc, #60]	; (1bbac <net_buf_slist_get+0xb0>)
   1bb6e:	4809      	ldr	r0, [pc, #36]	; (1bb94 <net_buf_slist_get+0x98>)
   1bb70:	23c3      	movs	r3, #195	; 0xc3
   1bb72:	f008 fb67 	bl	24244 <assert_print>
   1bb76:	4909      	ldr	r1, [pc, #36]	; (1bb9c <net_buf_slist_get+0xa0>)
   1bb78:	480d      	ldr	r0, [pc, #52]	; (1bbb0 <net_buf_slist_get+0xb4>)
   1bb7a:	f008 fb63 	bl	24244 <assert_print>
   1bb7e:	21c3      	movs	r1, #195	; 0xc3
   1bb80:	e7e2      	b.n	1bb48 <net_buf_slist_get+0x4c>
	__asm__ volatile(
   1bb82:	f386 8811 	msr	BASEPRI, r6
   1bb86:	f3bf 8f6f 	isb	sy
	buf = (void *)sys_slist_get(list);

	k_spin_unlock(&net_buf_slist_lock, key);

	return buf;
}
   1bb8a:	4628      	mov	r0, r5
   1bb8c:	bd70      	pop	{r4, r5, r6, pc}
   1bb8e:	bf00      	nop
   1bb90:	0002a223 	.word	0x0002a223
   1bb94:	00027c2a 	.word	0x00027c2a
   1bb98:	0002a1bb 	.word	0x0002a1bb
   1bb9c:	20002db0 	.word	0x20002db0
   1bba0:	0002801e 	.word	0x0002801e
   1bba4:	00028077 	.word	0x00028077
   1bba8:	0002808c 	.word	0x0002808c
   1bbac:	0002804b 	.word	0x0002804b
   1bbb0:	00028062 	.word	0x00028062

0001bbb4 <net_buf_put>:

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1bbb4:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(fifo);
   1bbb6:	b958      	cbnz	r0, 1bbd0 <net_buf_put+0x1c>
   1bbb8:	490d      	ldr	r1, [pc, #52]	; (1bbf0 <net_buf_put+0x3c>)
   1bbba:	4a0e      	ldr	r2, [pc, #56]	; (1bbf4 <net_buf_put+0x40>)
   1bbbc:	480e      	ldr	r0, [pc, #56]	; (1bbf8 <net_buf_put+0x44>)
   1bbbe:	f240 13d1 	movw	r3, #465	; 0x1d1
   1bbc2:	f008 fb3f 	bl	24244 <assert_print>
   1bbc6:	f240 11d1 	movw	r1, #465	; 0x1d1
	__ASSERT_NO_MSG(buf);
   1bbca:	480a      	ldr	r0, [pc, #40]	; (1bbf4 <net_buf_put+0x40>)
   1bbcc:	f008 fb33 	bl	24236 <assert_post_action>
   1bbd0:	b949      	cbnz	r1, 1bbe6 <net_buf_put+0x32>
   1bbd2:	490a      	ldr	r1, [pc, #40]	; (1bbfc <net_buf_put+0x48>)
   1bbd4:	4a07      	ldr	r2, [pc, #28]	; (1bbf4 <net_buf_put+0x40>)
   1bbd6:	4808      	ldr	r0, [pc, #32]	; (1bbf8 <net_buf_put+0x44>)
   1bbd8:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
   1bbdc:	f008 fb32 	bl	24244 <assert_print>
   1bbe0:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
   1bbe4:	e7f1      	b.n	1bbca <net_buf_put+0x16>

	k_fifo_put(fifo, buf);
}
   1bbe6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_fifo_put(fifo, buf);
   1bbea:	f00a bec5 	b.w	26978 <k_queue_append>
   1bbee:	bf00      	nop
   1bbf0:	0002a228 	.word	0x0002a228
   1bbf4:	0002a1bb 	.word	0x0002a1bb
   1bbf8:	00027c2a 	.word	0x00027c2a
   1bbfc:	0002a23d 	.word	0x0002a23d

0001bc00 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1bc00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   1bc04:	4605      	mov	r5, r0
   1bc06:	b328      	cbz	r0, 1bc54 <net_buf_unref+0x54>
   1bc08:	4e1b      	ldr	r6, [pc, #108]	; (1bc78 <net_buf_unref+0x78>)
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1bc0a:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   1bc0c:	f04f 0834 	mov.w	r8, #52	; 0x34
		struct net_buf *frags = buf->frags;
   1bc10:	462c      	mov	r4, r5
   1bc12:	686d      	ldr	r5, [r5, #4]
		if (--buf->ref > 0) {
   1bc14:	7a23      	ldrb	r3, [r4, #8]
   1bc16:	3b01      	subs	r3, #1
   1bc18:	b2db      	uxtb	r3, r3
   1bc1a:	7223      	strb	r3, [r4, #8]
   1bc1c:	b9c3      	cbnz	r3, 1bc50 <net_buf_unref+0x50>
		if (buf->__buf) {
   1bc1e:	6961      	ldr	r1, [r4, #20]
   1bc20:	b159      	cbz	r1, 1bc3a <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1bc22:	7a63      	ldrb	r3, [r4, #9]
   1bc24:	07db      	lsls	r3, r3, #31
   1bc26:	d407      	bmi.n	1bc38 <net_buf_unref+0x38>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1bc28:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   1bc2a:	fb08 6303 	mla	r3, r8, r3, r6
   1bc2e:	4620      	mov	r0, r4
   1bc30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bc32:	681b      	ldr	r3, [r3, #0]
   1bc34:	689b      	ldr	r3, [r3, #8]
   1bc36:	4798      	blx	r3
			buf->__buf = NULL;
   1bc38:	6167      	str	r7, [r4, #20]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   1bc3a:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   1bc3c:	60e7      	str	r7, [r4, #12]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   1bc3e:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   1bc42:	6067      	str	r7, [r4, #4]
		if (pool->destroy) {
   1bc44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1bc46:	b18b      	cbz	r3, 1bc6c <net_buf_unref+0x6c>
			pool->destroy(buf);
   1bc48:	4620      	mov	r0, r4
   1bc4a:	4798      	blx	r3
	while (buf) {
   1bc4c:	2d00      	cmp	r5, #0
   1bc4e:	d1df      	bne.n	1bc10 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1bc50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   1bc54:	4909      	ldr	r1, [pc, #36]	; (1bc7c <net_buf_unref+0x7c>)
   1bc56:	480a      	ldr	r0, [pc, #40]	; (1bc80 <net_buf_unref+0x80>)
   1bc58:	4a0a      	ldr	r2, [pc, #40]	; (1bc84 <net_buf_unref+0x84>)
   1bc5a:	f240 13dd 	movw	r3, #477	; 0x1dd
   1bc5e:	f008 faf1 	bl	24244 <assert_print>
   1bc62:	4808      	ldr	r0, [pc, #32]	; (1bc84 <net_buf_unref+0x84>)
   1bc64:	f240 11dd 	movw	r1, #477	; 0x1dd
   1bc68:	f008 fae5 	bl	24236 <assert_post_action>
	k_lifo_put(&pool->free, buf);
   1bc6c:	4621      	mov	r1, r4
   1bc6e:	fb00 6008 	mla	r0, r0, r8, r6
   1bc72:	f00a fe8c 	bl	2698e <k_queue_prepend>
}
   1bc76:	e7e9      	b.n	1bc4c <net_buf_unref+0x4c>
   1bc78:	200009cc 	.word	0x200009cc
   1bc7c:	0002a23d 	.word	0x0002a23d
   1bc80:	00027c2a 	.word	0x00027c2a
   1bc84:	0002a1bb 	.word	0x0002a1bb

0001bc88 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   1bc88:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1bc8a:	b958      	cbnz	r0, 1bca4 <net_buf_ref+0x1c>
   1bc8c:	4907      	ldr	r1, [pc, #28]	; (1bcac <net_buf_ref+0x24>)
   1bc8e:	4808      	ldr	r0, [pc, #32]	; (1bcb0 <net_buf_ref+0x28>)
   1bc90:	4a08      	ldr	r2, [pc, #32]	; (1bcb4 <net_buf_ref+0x2c>)
   1bc92:	f44f 7303 	mov.w	r3, #524	; 0x20c
   1bc96:	f008 fad5 	bl	24244 <assert_print>
   1bc9a:	4806      	ldr	r0, [pc, #24]	; (1bcb4 <net_buf_ref+0x2c>)
   1bc9c:	f44f 7103 	mov.w	r1, #524	; 0x20c
   1bca0:	f008 fac9 	bl	24236 <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1bca4:	7a02      	ldrb	r2, [r0, #8]
   1bca6:	3201      	adds	r2, #1
   1bca8:	7202      	strb	r2, [r0, #8]
	return buf;
}
   1bcaa:	bd08      	pop	{r3, pc}
   1bcac:	0002a23d 	.word	0x0002a23d
   1bcb0:	00027c2a 	.word	0x00027c2a
   1bcb4:	0002a1bb 	.word	0x0002a1bb

0001bcb8 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1bcb8:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1bcba:	4603      	mov	r3, r0
   1bcbc:	b958      	cbnz	r0, 1bcd6 <net_buf_frag_last+0x1e>
   1bcbe:	4908      	ldr	r1, [pc, #32]	; (1bce0 <net_buf_frag_last+0x28>)
   1bcc0:	4808      	ldr	r0, [pc, #32]	; (1bce4 <net_buf_frag_last+0x2c>)
   1bcc2:	4a09      	ldr	r2, [pc, #36]	; (1bce8 <net_buf_frag_last+0x30>)
   1bcc4:	f240 2349 	movw	r3, #585	; 0x249
   1bcc8:	f008 fabc 	bl	24244 <assert_print>
   1bccc:	4806      	ldr	r0, [pc, #24]	; (1bce8 <net_buf_frag_last+0x30>)
   1bcce:	f240 2149 	movw	r1, #585	; 0x249
   1bcd2:	f008 fab0 	bl	24236 <assert_post_action>

	while (buf->frags) {
   1bcd6:	4618      	mov	r0, r3
   1bcd8:	685b      	ldr	r3, [r3, #4]
   1bcda:	2b00      	cmp	r3, #0
   1bcdc:	d1fb      	bne.n	1bcd6 <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
   1bcde:	bd08      	pop	{r3, pc}
   1bce0:	0002a23d 	.word	0x0002a23d
   1bce4:	00027c2a 	.word	0x00027c2a
   1bce8:	0002a1bb 	.word	0x0002a1bb

0001bcec <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1bcec:	b570      	push	{r4, r5, r6, lr}
   1bcee:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   1bcf0:	4604      	mov	r4, r0
   1bcf2:	b958      	cbnz	r0, 1bd0c <net_buf_frag_insert+0x20>
   1bcf4:	490f      	ldr	r1, [pc, #60]	; (1bd34 <net_buf_frag_insert+0x48>)
   1bcf6:	4a10      	ldr	r2, [pc, #64]	; (1bd38 <net_buf_frag_insert+0x4c>)
   1bcf8:	4810      	ldr	r0, [pc, #64]	; (1bd3c <net_buf_frag_insert+0x50>)
   1bcfa:	f44f 7315 	mov.w	r3, #596	; 0x254
   1bcfe:	f008 faa1 	bl	24244 <assert_print>
   1bd02:	f44f 7115 	mov.w	r1, #596	; 0x254
	__ASSERT_NO_MSG(frag);
   1bd06:	480c      	ldr	r0, [pc, #48]	; (1bd38 <net_buf_frag_insert+0x4c>)
   1bd08:	f008 fa95 	bl	24236 <assert_post_action>
   1bd0c:	b949      	cbnz	r1, 1bd22 <net_buf_frag_insert+0x36>
   1bd0e:	490c      	ldr	r1, [pc, #48]	; (1bd40 <net_buf_frag_insert+0x54>)
   1bd10:	4a09      	ldr	r2, [pc, #36]	; (1bd38 <net_buf_frag_insert+0x4c>)
   1bd12:	480a      	ldr	r0, [pc, #40]	; (1bd3c <net_buf_frag_insert+0x50>)
   1bd14:	f240 2355 	movw	r3, #597	; 0x255
   1bd18:	f008 fa94 	bl	24244 <assert_print>
   1bd1c:	f240 2155 	movw	r1, #597	; 0x255
   1bd20:	e7f1      	b.n	1bd06 <net_buf_frag_insert+0x1a>

	if (parent->frags) {
   1bd22:	6846      	ldr	r6, [r0, #4]
   1bd24:	b11e      	cbz	r6, 1bd2e <net_buf_frag_insert+0x42>
		net_buf_frag_last(frag)->frags = parent->frags;
   1bd26:	4608      	mov	r0, r1
   1bd28:	f7ff ffc6 	bl	1bcb8 <net_buf_frag_last>
   1bd2c:	6046      	str	r6, [r0, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1bd2e:	6065      	str	r5, [r4, #4]
}
   1bd30:	bd70      	pop	{r4, r5, r6, pc}
   1bd32:	bf00      	nop
   1bd34:	0002a22d 	.word	0x0002a22d
   1bd38:	0002a1bb 	.word	0x0002a1bb
   1bd3c:	00027c2a 	.word	0x00027c2a
   1bd40:	0002a234 	.word	0x0002a234

0001bd44 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1bd44:	b538      	push	{r3, r4, r5, lr}
   1bd46:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(frag);
   1bd48:	460c      	mov	r4, r1
   1bd4a:	b959      	cbnz	r1, 1bd64 <net_buf_frag_add+0x20>
   1bd4c:	490c      	ldr	r1, [pc, #48]	; (1bd80 <net_buf_frag_add+0x3c>)
   1bd4e:	480d      	ldr	r0, [pc, #52]	; (1bd84 <net_buf_frag_add+0x40>)
   1bd50:	4a0d      	ldr	r2, [pc, #52]	; (1bd88 <net_buf_frag_add+0x44>)
   1bd52:	f44f 7318 	mov.w	r3, #608	; 0x260
   1bd56:	f008 fa75 	bl	24244 <assert_print>
   1bd5a:	480b      	ldr	r0, [pc, #44]	; (1bd88 <net_buf_frag_add+0x44>)
   1bd5c:	f44f 7118 	mov.w	r1, #608	; 0x260
   1bd60:	f008 fa69 	bl	24236 <assert_post_action>

	if (!head) {
   1bd64:	b920      	cbnz	r0, 1bd70 <net_buf_frag_add+0x2c>
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1bd66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   1bd6a:	4608      	mov	r0, r1
   1bd6c:	f7ff bf8c 	b.w	1bc88 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1bd70:	f7ff ffa2 	bl	1bcb8 <net_buf_frag_last>
   1bd74:	4621      	mov	r1, r4
   1bd76:	f7ff ffb9 	bl	1bcec <net_buf_frag_insert>
}
   1bd7a:	4628      	mov	r0, r5
   1bd7c:	bd38      	pop	{r3, r4, r5, pc}
   1bd7e:	bf00      	nop
   1bd80:	0002a234 	.word	0x0002a234
   1bd84:	00027c2a 	.word	0x00027c2a
   1bd88:	0002a1bb 	.word	0x0002a1bb

0001bd8c <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1bd8c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf);
   1bd8e:	b948      	cbnz	r0, 1bda4 <net_buf_simple_reserve+0x18>
   1bd90:	490b      	ldr	r1, [pc, #44]	; (1bdc0 <net_buf_simple_reserve+0x34>)
   1bd92:	4a0c      	ldr	r2, [pc, #48]	; (1bdc4 <net_buf_simple_reserve+0x38>)
   1bd94:	480c      	ldr	r0, [pc, #48]	; (1bdc8 <net_buf_simple_reserve+0x3c>)
   1bd96:	232b      	movs	r3, #43	; 0x2b
   1bd98:	f008 fa54 	bl	24244 <assert_print>
   1bd9c:	212b      	movs	r1, #43	; 0x2b
	__ASSERT_NO_MSG(buf->len == 0U);
   1bd9e:	4809      	ldr	r0, [pc, #36]	; (1bdc4 <net_buf_simple_reserve+0x38>)
   1bda0:	f008 fa49 	bl	24236 <assert_post_action>
   1bda4:	8883      	ldrh	r3, [r0, #4]
   1bda6:	b13b      	cbz	r3, 1bdb8 <net_buf_simple_reserve+0x2c>
   1bda8:	4908      	ldr	r1, [pc, #32]	; (1bdcc <net_buf_simple_reserve+0x40>)
   1bdaa:	4a06      	ldr	r2, [pc, #24]	; (1bdc4 <net_buf_simple_reserve+0x38>)
   1bdac:	4806      	ldr	r0, [pc, #24]	; (1bdc8 <net_buf_simple_reserve+0x3c>)
   1bdae:	232c      	movs	r3, #44	; 0x2c
   1bdb0:	f008 fa48 	bl	24244 <assert_print>
   1bdb4:	212c      	movs	r1, #44	; 0x2c
   1bdb6:	e7f2      	b.n	1bd9e <net_buf_simple_reserve+0x12>
	NET_BUF_SIMPLE_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1bdb8:	6883      	ldr	r3, [r0, #8]
   1bdba:	440b      	add	r3, r1
   1bdbc:	6003      	str	r3, [r0, #0]
}
   1bdbe:	bd08      	pop	{r3, pc}
   1bdc0:	0002a23d 	.word	0x0002a23d
   1bdc4:	0002a241 	.word	0x0002a241
   1bdc8:	00027c2a 	.word	0x00027c2a
   1bdcc:	0002a26c 	.word	0x0002a26c

0001bdd0 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1bdd0:	b508      	push	{r3, lr}
   1bdd2:	4603      	mov	r3, r0
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1bdd4:	6800      	ldr	r0, [r0, #0]
   1bdd6:	689a      	ldr	r2, [r3, #8]
   1bdd8:	1a82      	subs	r2, r0, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   1bdda:	4291      	cmp	r1, r2
   1bddc:	d90b      	bls.n	1bdf6 <net_buf_simple_push+0x26>
   1bdde:	4909      	ldr	r1, [pc, #36]	; (1be04 <net_buf_simple_push+0x34>)
   1bde0:	4809      	ldr	r0, [pc, #36]	; (1be08 <net_buf_simple_push+0x38>)
   1bde2:	4a0a      	ldr	r2, [pc, #40]	; (1be0c <net_buf_simple_push+0x3c>)
   1bde4:	f240 132d 	movw	r3, #301	; 0x12d
   1bde8:	f008 fa2c 	bl	24244 <assert_print>
   1bdec:	4807      	ldr	r0, [pc, #28]	; (1be0c <net_buf_simple_push+0x3c>)
   1bdee:	f240 112d 	movw	r1, #301	; 0x12d
   1bdf2:	f008 fa20 	bl	24236 <assert_post_action>
	buf->len += len;
   1bdf6:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1bdf8:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1bdfa:	4411      	add	r1, r2
	buf->data -= len;
   1bdfc:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1bdfe:	8099      	strh	r1, [r3, #4]
}
   1be00:	bd08      	pop	{r3, pc}
   1be02:	bf00      	nop
   1be04:	0002a28b 	.word	0x0002a28b
   1be08:	00027c2a 	.word	0x00027c2a
   1be0c:	0002a241 	.word	0x0002a241

0001be10 <net_buf_simple_pull>:
{
   1be10:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   1be12:	8882      	ldrh	r2, [r0, #4]
   1be14:	428a      	cmp	r2, r1
{
   1be16:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf->len >= len);
   1be18:	d20b      	bcs.n	1be32 <net_buf_simple_pull+0x22>
   1be1a:	4909      	ldr	r1, [pc, #36]	; (1be40 <net_buf_simple_pull+0x30>)
   1be1c:	4809      	ldr	r0, [pc, #36]	; (1be44 <net_buf_simple_pull+0x34>)
   1be1e:	4a0a      	ldr	r2, [pc, #40]	; (1be48 <net_buf_simple_pull+0x38>)
   1be20:	f240 138d 	movw	r3, #397	; 0x18d
   1be24:	f008 fa0e 	bl	24244 <assert_print>
   1be28:	4807      	ldr	r0, [pc, #28]	; (1be48 <net_buf_simple_pull+0x38>)
   1be2a:	f240 118d 	movw	r1, #397	; 0x18d
   1be2e:	f008 fa02 	bl	24236 <assert_post_action>
	buf->len -= len;
   1be32:	1a52      	subs	r2, r2, r1
   1be34:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1be36:	6800      	ldr	r0, [r0, #0]
   1be38:	4408      	add	r0, r1
   1be3a:	6018      	str	r0, [r3, #0]
}
   1be3c:	bd08      	pop	{r3, pc}
   1be3e:	bf00      	nop
   1be40:	0002a27b 	.word	0x0002a27b
   1be44:	00027c2a 	.word	0x00027c2a
   1be48:	0002a241 	.word	0x0002a241

0001be4c <net_buf_simple_pull_mem>:
{
   1be4c:	b508      	push	{r3, lr}
   1be4e:	4603      	mov	r3, r0
	void *data = buf->data;
   1be50:	6800      	ldr	r0, [r0, #0]
	__ASSERT_NO_MSG(buf->len >= len);
   1be52:	889a      	ldrh	r2, [r3, #4]
   1be54:	428a      	cmp	r2, r1
   1be56:	d20b      	bcs.n	1be70 <net_buf_simple_pull_mem+0x24>
   1be58:	4908      	ldr	r1, [pc, #32]	; (1be7c <net_buf_simple_pull_mem+0x30>)
   1be5a:	4809      	ldr	r0, [pc, #36]	; (1be80 <net_buf_simple_pull_mem+0x34>)
   1be5c:	4a09      	ldr	r2, [pc, #36]	; (1be84 <net_buf_simple_pull_mem+0x38>)
   1be5e:	f240 1399 	movw	r3, #409	; 0x199
   1be62:	f008 f9ef 	bl	24244 <assert_print>
   1be66:	4807      	ldr	r0, [pc, #28]	; (1be84 <net_buf_simple_pull_mem+0x38>)
   1be68:	f240 1199 	movw	r1, #409	; 0x199
   1be6c:	f008 f9e3 	bl	24236 <assert_post_action>
	buf->len -= len;
   1be70:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1be72:	4401      	add	r1, r0
	buf->len -= len;
   1be74:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1be76:	6019      	str	r1, [r3, #0]
}
   1be78:	bd08      	pop	{r3, pc}
   1be7a:	bf00      	nop
   1be7c:	0002a27b 	.word	0x0002a27b
   1be80:	00027c2a 	.word	0x00027c2a
   1be84:	0002a241 	.word	0x0002a241

0001be88 <net_buf_simple_add>:
{
   1be88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return buf->data + buf->len;
   1be8a:	8885      	ldrh	r5, [r0, #4]
   1be8c:	6803      	ldr	r3, [r0, #0]
   1be8e:	460e      	mov	r6, r1
   1be90:	4604      	mov	r4, r0
   1be92:	195f      	adds	r7, r3, r5
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   1be94:	f009 fffb 	bl	25e8e <net_buf_simple_tailroom>
   1be98:	42b0      	cmp	r0, r6
   1be9a:	d209      	bcs.n	1beb0 <net_buf_simple_add+0x28>
   1be9c:	4906      	ldr	r1, [pc, #24]	; (1beb8 <net_buf_simple_add+0x30>)
   1be9e:	4807      	ldr	r0, [pc, #28]	; (1bebc <net_buf_simple_add+0x34>)
   1bea0:	4a07      	ldr	r2, [pc, #28]	; (1bec0 <net_buf_simple_add+0x38>)
   1bea2:	233e      	movs	r3, #62	; 0x3e
   1bea4:	f008 f9ce 	bl	24244 <assert_print>
   1bea8:	4805      	ldr	r0, [pc, #20]	; (1bec0 <net_buf_simple_add+0x38>)
   1beaa:	213e      	movs	r1, #62	; 0x3e
   1beac:	f008 f9c3 	bl	24236 <assert_post_action>
	buf->len += len;
   1beb0:	4435      	add	r5, r6
   1beb2:	80a5      	strh	r5, [r4, #4]
}
   1beb4:	4638      	mov	r0, r7
   1beb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1beb8:	0002a2af 	.word	0x0002a2af
   1bebc:	00027c2a 	.word	0x00027c2a
   1bec0:	0002a241 	.word	0x0002a241

0001bec4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1bec4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1bec6:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1bec8:	490a      	ldr	r1, [pc, #40]	; (1bef4 <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1beca:	4a0b      	ldr	r2, [pc, #44]	; (1bef8 <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
   1becc:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1bece:	2340      	movs	r3, #64	; 0x40
   1bed0:	9300      	str	r3, [sp, #0]
   1bed2:	1149      	asrs	r1, r1, #5
{
   1bed4:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1bed6:	4623      	mov	r3, r4
   1bed8:	4808      	ldr	r0, [pc, #32]	; (1befc <onoff_start+0x38>)
   1beda:	f00a f806 	bl	25eea <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1bede:	1e01      	subs	r1, r0, #0
   1bee0:	da05      	bge.n	1beee <onoff_start+0x2a>
		notify(mgr, err);
   1bee2:	4628      	mov	r0, r5
   1bee4:	4623      	mov	r3, r4
	}
}
   1bee6:	b003      	add	sp, #12
   1bee8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
   1beec:	4718      	bx	r3
}
   1beee:	b003      	add	sp, #12
   1bef0:	bd30      	pop	{r4, r5, pc}
   1bef2:	bf00      	nop
   1bef4:	20002dc8 	.word	0x20002dc8
   1bef8:	00025f55 	.word	0x00025f55
   1befc:	00026da4 	.word	0x00026da4

0001bf00 <get_status>:
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1bf00:	b2c9      	uxtb	r1, r1
   1bf02:	2901      	cmp	r1, #1
{
   1bf04:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1bf06:	d909      	bls.n	1bf1c <get_status+0x1c>
   1bf08:	4908      	ldr	r1, [pc, #32]	; (1bf2c <get_status+0x2c>)
   1bf0a:	4809      	ldr	r0, [pc, #36]	; (1bf30 <get_status+0x30>)
   1bf0c:	4a09      	ldr	r2, [pc, #36]	; (1bf34 <get_status+0x34>)
   1bf0e:	237a      	movs	r3, #122	; 0x7a
   1bf10:	f008 f998 	bl	24244 <assert_print>
   1bf14:	4807      	ldr	r0, [pc, #28]	; (1bf34 <get_status+0x34>)
   1bf16:	217a      	movs	r1, #122	; 0x7a
   1bf18:	f008 f98d 	bl	24236 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1bf1c:	6903      	ldr	r3, [r0, #16]
   1bf1e:	220c      	movs	r2, #12
   1bf20:	fb01 3302 	mla	r3, r1, r2, r3
   1bf24:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
   1bf26:	f000 0007 	and.w	r0, r0, #7
   1bf2a:	bd08      	pop	{r3, pc}
   1bf2c:	0002a31f 	.word	0x0002a31f
   1bf30:	00027c2a 	.word	0x00027c2a
   1bf34:	0002a2e2 	.word	0x0002a2e2

0001bf38 <stop>:
{
   1bf38:	b570      	push	{r4, r5, r6, lr}
   1bf3a:	b2c9      	uxtb	r1, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1bf3c:	2901      	cmp	r1, #1
	struct nrf_clock_control_data *data = dev->data;
   1bf3e:	6903      	ldr	r3, [r0, #16]
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   1bf40:	d90b      	bls.n	1bf5a <stop+0x22>
   1bf42:	4919      	ldr	r1, [pc, #100]	; (1bfa8 <stop+0x70>)
   1bf44:	4819      	ldr	r0, [pc, #100]	; (1bfac <stop+0x74>)
   1bf46:	4a1a      	ldr	r2, [pc, #104]	; (1bfb0 <stop+0x78>)
   1bf48:	f240 135d 	movw	r3, #349	; 0x15d
   1bf4c:	f008 f97a 	bl	24244 <assert_print>
   1bf50:	4817      	ldr	r0, [pc, #92]	; (1bfb0 <stop+0x78>)
   1bf52:	f240 115d 	movw	r1, #349	; 0x15d
   1bf56:	f008 f96e 	bl	24236 <assert_post_action>
	__asm__ volatile(
   1bf5a:	f04f 0440 	mov.w	r4, #64	; 0x40
   1bf5e:	f3ef 8511 	mrs	r5, BASEPRI
   1bf62:	f384 8812 	msr	BASEPRI_MAX, r4
   1bf66:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1bf6a:	260c      	movs	r6, #12
   1bf6c:	fb06 3401 	mla	r4, r6, r1, r3
   1bf70:	6ca4      	ldr	r4, [r4, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1bf72:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1bf76:	d008      	beq.n	1bf8a <stop+0x52>
   1bf78:	42a2      	cmp	r2, r4
   1bf7a:	d006      	beq.n	1bf8a <stop+0x52>
	__asm__ volatile(
   1bf7c:	f385 8811 	msr	BASEPRI, r5
   1bf80:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   1bf84:	f04f 30ff 	mov.w	r0, #4294967295
}
   1bf88:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1bf8a:	4371      	muls	r1, r6
   1bf8c:	440b      	add	r3, r1
   1bf8e:	2201      	movs	r2, #1
   1bf90:	649a      	str	r2, [r3, #72]	; 0x48
   1bf92:	f385 8811 	msr	BASEPRI, r5
   1bf96:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   1bf9a:	6843      	ldr	r3, [r0, #4]
   1bf9c:	440b      	add	r3, r1
   1bf9e:	685b      	ldr	r3, [r3, #4]
   1bfa0:	4798      	blx	r3
	return 0;
   1bfa2:	2000      	movs	r0, #0
   1bfa4:	e7f0      	b.n	1bf88 <stop+0x50>
   1bfa6:	bf00      	nop
   1bfa8:	0002a31f 	.word	0x0002a31f
   1bfac:	00027c2a 	.word	0x00027c2a
   1bfb0:	0002a2e2 	.word	0x0002a2e2

0001bfb4 <onoff_stop>:
{
   1bfb4:	b570      	push	{r4, r5, r6, lr}
   1bfb6:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   1bfb8:	4906      	ldr	r1, [pc, #24]	; (1bfd4 <onoff_stop+0x20>)
   1bfba:	1a41      	subs	r1, r0, r1
{
   1bfbc:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1bfbe:	1149      	asrs	r1, r1, #5
   1bfc0:	4805      	ldr	r0, [pc, #20]	; (1bfd8 <onoff_stop+0x24>)
   1bfc2:	2240      	movs	r2, #64	; 0x40
   1bfc4:	f7ff ffb8 	bl	1bf38 <stop>
	notify(mgr, res);
   1bfc8:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1bfca:	4601      	mov	r1, r0
	notify(mgr, res);
   1bfcc:	4620      	mov	r0, r4
}
   1bfce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1bfd2:	4718      	bx	r3
   1bfd4:	20002dc8 	.word	0x20002dc8
   1bfd8:	00026da4 	.word	0x00026da4

0001bfdc <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1bfdc:	2200      	movs	r2, #0
{
   1bfde:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1bfe0:	2101      	movs	r1, #1
{
   1bfe2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1bfe4:	4610      	mov	r0, r2
   1bfe6:	f7f8 fd59 	bl	14a9c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1bfea:	480f      	ldr	r0, [pc, #60]	; (1c028 <clk_init+0x4c>)
   1bfec:	f002 fe1e 	bl	1ec2c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1bff0:	4b0e      	ldr	r3, [pc, #56]	; (1c02c <clk_init+0x50>)
   1bff2:	4298      	cmp	r0, r3
   1bff4:	d115      	bne.n	1c022 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1bff6:	f00a fbcd 	bl	26794 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1bffa:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1bffc:	490c      	ldr	r1, [pc, #48]	; (1c030 <clk_init+0x54>)
   1bffe:	4630      	mov	r0, r6
   1c000:	f008 f866 	bl	240d0 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1c004:	2800      	cmp	r0, #0
   1c006:	db0b      	blt.n	1c020 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1c008:	2501      	movs	r5, #1
   1c00a:	64b5      	str	r5, [r6, #72]	; 0x48
	struct nrf_clock_control_data *data = dev->data;
   1c00c:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1c00e:	4908      	ldr	r1, [pc, #32]	; (1c030 <clk_init+0x54>)
   1c010:	f104 0020 	add.w	r0, r4, #32
   1c014:	f008 f85c 	bl	240d0 <onoff_manager_init>
		if (err < 0) {
   1c018:	2800      	cmp	r0, #0
   1c01a:	db01      	blt.n	1c020 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1c01c:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
   1c01e:	2000      	movs	r0, #0
}
   1c020:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1c022:	f06f 0004 	mvn.w	r0, #4
   1c026:	e7fb      	b.n	1c020 <clk_init+0x44>
   1c028:	0001c069 	.word	0x0001c069
   1c02c:	0bad0000 	.word	0x0bad0000
   1c030:	0002761c 	.word	0x0002761c

0001c034 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1c034:	b570      	push	{r4, r5, r6, lr}
   1c036:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1c038:	230c      	movs	r3, #12
   1c03a:	4809      	ldr	r0, [pc, #36]	; (1c060 <clkstarted_handle.constprop.0+0x2c>)
   1c03c:	434b      	muls	r3, r1
   1c03e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1c040:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   1c044:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
   1c046:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1c048:	4418      	add	r0, r3
	sub_data->cb = NULL;
   1c04a:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   1c04c:	f009 ff3a 	bl	25ec4 <set_on_state>
	if (callback) {
   1c050:	b12d      	cbz	r5, 1c05e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1c052:	4632      	mov	r2, r6
   1c054:	462b      	mov	r3, r5
   1c056:	4803      	ldr	r0, [pc, #12]	; (1c064 <clkstarted_handle.constprop.0+0x30>)
}
   1c058:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1c05c:	4718      	bx	r3
}
   1c05e:	bd70      	pop	{r4, r5, r6, pc}
   1c060:	20002dc8 	.word	0x20002dc8
   1c064:	00026da4 	.word	0x00026da4

0001c068 <clock_event_handler>:
	switch (event) {
   1c068:	2801      	cmp	r0, #1
{
   1c06a:	b508      	push	{r3, lr}
	switch (event) {
   1c06c:	d006      	beq.n	1c07c <clock_event_handler+0x14>
   1c06e:	2804      	cmp	r0, #4
   1c070:	d008      	beq.n	1c084 <clock_event_handler+0x1c>
   1c072:	b998      	cbnz	r0, 1c09c <clock_event_handler+0x34>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1c074:	4b0f      	ldr	r3, [pc, #60]	; (1c0b4 <clock_event_handler+0x4c>)
   1c076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c078:	075b      	lsls	r3, r3, #29
   1c07a:	d119      	bne.n	1c0b0 <clock_event_handler+0x48>
}
   1c07c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1c080:	f7ff bfd8 	b.w	1c034 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   1c084:	490c      	ldr	r1, [pc, #48]	; (1c0b8 <clock_event_handler+0x50>)
   1c086:	4a0d      	ldr	r2, [pc, #52]	; (1c0bc <clock_event_handler+0x54>)
   1c088:	480d      	ldr	r0, [pc, #52]	; (1c0c0 <clock_event_handler+0x58>)
   1c08a:	f240 236e 	movw	r3, #622	; 0x26e
   1c08e:	f008 f8d9 	bl	24244 <assert_print>
   1c092:	f240 216e 	movw	r1, #622	; 0x26e
		__ASSERT_NO_MSG(0);
   1c096:	4809      	ldr	r0, [pc, #36]	; (1c0bc <clock_event_handler+0x54>)
   1c098:	f008 f8cd 	bl	24236 <assert_post_action>
   1c09c:	4906      	ldr	r1, [pc, #24]	; (1c0b8 <clock_event_handler+0x50>)
   1c09e:	4a07      	ldr	r2, [pc, #28]	; (1c0bc <clock_event_handler+0x54>)
   1c0a0:	4807      	ldr	r0, [pc, #28]	; (1c0c0 <clock_event_handler+0x58>)
   1c0a2:	f240 2372 	movw	r3, #626	; 0x272
   1c0a6:	f008 f8cd 	bl	24244 <assert_print>
   1c0aa:	f240 2172 	movw	r1, #626	; 0x272
   1c0ae:	e7f2      	b.n	1c096 <clock_event_handler+0x2e>
}
   1c0b0:	bd08      	pop	{r3, pc}
   1c0b2:	bf00      	nop
   1c0b4:	20002dc8 	.word	0x20002dc8
   1c0b8:	0002a7c0 	.word	0x0002a7c0
   1c0bc:	0002a2e2 	.word	0x0002a2e2
   1c0c0:	00027c2a 	.word	0x00027c2a

0001c0c4 <generic_hfclk_start>:
{
   1c0c4:	b508      	push	{r3, lr}
	__asm__ volatile(
   1c0c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c0ca:	f3ef 8111 	mrs	r1, BASEPRI
   1c0ce:	f383 8812 	msr	BASEPRI_MAX, r3
   1c0d2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1c0d6:	4a12      	ldr	r2, [pc, #72]	; (1c120 <generic_hfclk_start+0x5c>)
   1c0d8:	6813      	ldr	r3, [r2, #0]
   1c0da:	f043 0002 	orr.w	r0, r3, #2
   1c0de:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1c0e0:	07da      	lsls	r2, r3, #31
   1c0e2:	d408      	bmi.n	1c0f6 <generic_hfclk_start+0x32>
	__asm__ volatile(
   1c0e4:	f381 8811 	msr	BASEPRI, r1
   1c0e8:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1c0ec:	2001      	movs	r0, #1
}
   1c0ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1c0f2:	f002 bd55 	b.w	1eba0 <nrfx_clock_start>
                    (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_SRC_Msk)
                                        >> NRF_CLOCK_LFCLKSTAT_SRC_Pos);
            }
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            clock_running = p_reg->NRF_HFCLKSTAT & NRF_CLOCK_HFCLKSTAT_STATE_Msk;
   1c0f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c0fa:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                 * It has to be derived from HFCLK state. */
                (*(nrf_clock_hfclk_t *)p_clk_src) = clock_running ? NRF_CLOCK_HFCLK_HIGH_ACCURACY :
                                                                    NRF_CLOCK_HFCLK_LOW_ACCURACY;
#else
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->NRF_HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1c0fe:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1c102:	07db      	lsls	r3, r3, #31
   1c104:	d5ee      	bpl.n	1c0e4 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   1c106:	4807      	ldr	r0, [pc, #28]	; (1c124 <generic_hfclk_start+0x60>)
   1c108:	f009 fedc 	bl	25ec4 <set_on_state>
   1c10c:	f381 8811 	msr	BASEPRI, r1
   1c110:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   1c114:	2000      	movs	r0, #0
}
   1c116:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1c11a:	f7ff bf8b 	b.w	1c034 <clkstarted_handle.constprop.0>
   1c11e:	bf00      	nop
   1c120:	20002e20 	.word	0x20002e20
   1c124:	20002e10 	.word	0x20002e10

0001c128 <api_blocking_start>:
{
   1c128:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1c12a:	2200      	movs	r2, #0
   1c12c:	2301      	movs	r3, #1
   1c12e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1c132:	ab04      	add	r3, sp, #16
   1c134:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1c138:	4a09      	ldr	r2, [pc, #36]	; (1c160 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1c13a:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1c13e:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1c140:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1c144:	f009 feff 	bl	25f46 <api_start>
	if (err < 0) {
   1c148:	2800      	cmp	r0, #0
   1c14a:	db05      	blt.n	1c158 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1c14c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1c150:	2300      	movs	r3, #0
   1c152:	4668      	mov	r0, sp
   1c154:	f004 fba6 	bl	208a4 <z_impl_k_sem_take>
}
   1c158:	b007      	add	sp, #28
   1c15a:	f85d fb04 	ldr.w	pc, [sp], #4
   1c15e:	bf00      	nop
   1c160:	00025f67 	.word	0x00025f67

0001c164 <lfclk_start>:
{
   1c164:	b510      	push	{r4, lr}
	if (!once) {
   1c166:	4c07      	ldr	r4, [pc, #28]	; (1c184 <lfclk_start+0x20>)
   1c168:	7823      	ldrb	r3, [r4, #0]
   1c16a:	b92b      	cbnz	r3, 1c178 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
   1c16c:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   1c170:	f00a fccb 	bl	26b0a <z_impl_k_busy_wait>
		once = true;
   1c174:	2301      	movs	r3, #1
   1c176:	7023      	strb	r3, [r4, #0]
}
   1c178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1c17c:	2000      	movs	r0, #0
   1c17e:	f002 bd0f 	b.w	1eba0 <nrfx_clock_start>
   1c182:	bf00      	nop
   1c184:	200030ac 	.word	0x200030ac

0001c188 <generic_hfclk_stop>:
{
   1c188:	b510      	push	{r4, lr}
	__asm__ volatile(
   1c18a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c18e:	f3ef 8411 	mrs	r4, BASEPRI
   1c192:	f383 8812 	msr	BASEPRI_MAX, r3
   1c196:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   1c19a:	4a07      	ldr	r2, [pc, #28]	; (1c1b8 <generic_hfclk_stop+0x30>)
   1c19c:	6813      	ldr	r3, [r2, #0]
   1c19e:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   1c1a2:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   1c1a4:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   1c1a6:	d402      	bmi.n	1c1ae <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1c1a8:	2001      	movs	r0, #1
   1c1aa:	f002 fd21 	bl	1ebf0 <nrfx_clock_stop>
	__asm__ volatile(
   1c1ae:	f384 8811 	msr	BASEPRI, r4
   1c1b2:	f3bf 8f6f 	isb	sy
}
   1c1b6:	bd10      	pop	{r4, pc}
   1c1b8:	20002e20 	.word	0x20002e20

0001c1bc <z_nrf_clock_control_lf_on>:
{
   1c1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1c1c0:	4945      	ldr	r1, [pc, #276]	; (1c2d8 <z_nrf_clock_control_lf_on+0x11c>)
   1c1c2:	f3bf 8f5b 	dmb	ish
   1c1c6:	4606      	mov	r6, r0
   1c1c8:	2201      	movs	r2, #1
   1c1ca:	e851 3f00 	ldrex	r3, [r1]
   1c1ce:	e841 2000 	strex	r0, r2, [r1]
   1c1d2:	2800      	cmp	r0, #0
   1c1d4:	d1f9      	bne.n	1c1ca <z_nrf_clock_control_lf_on+0xe>
   1c1d6:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1c1da:	b9a3      	cbnz	r3, 1c206 <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1c1dc:	493f      	ldr	r1, [pc, #252]	; (1c2dc <z_nrf_clock_control_lf_on+0x120>)
		err = onoff_request(mgr, &cli);
   1c1de:	4840      	ldr	r0, [pc, #256]	; (1c2e0 <z_nrf_clock_control_lf_on+0x124>)
   1c1e0:	604b      	str	r3, [r1, #4]
   1c1e2:	60cb      	str	r3, [r1, #12]
   1c1e4:	608a      	str	r2, [r1, #8]
   1c1e6:	f7f7 f857 	bl	13298 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   1c1ea:	2800      	cmp	r0, #0
   1c1ec:	da0b      	bge.n	1c206 <z_nrf_clock_control_lf_on+0x4a>
   1c1ee:	493d      	ldr	r1, [pc, #244]	; (1c2e4 <z_nrf_clock_control_lf_on+0x128>)
   1c1f0:	4a3d      	ldr	r2, [pc, #244]	; (1c2e8 <z_nrf_clock_control_lf_on+0x12c>)
   1c1f2:	483e      	ldr	r0, [pc, #248]	; (1c2ec <z_nrf_clock_control_lf_on+0x130>)
   1c1f4:	f44f 730c 	mov.w	r3, #560	; 0x230
   1c1f8:	f008 f824 	bl	24244 <assert_print>
   1c1fc:	f44f 710c 	mov.w	r1, #560	; 0x230
		__ASSERT_NO_MSG(false);
   1c200:	4839      	ldr	r0, [pc, #228]	; (1c2e8 <z_nrf_clock_control_lf_on+0x12c>)
   1c202:	f008 f818 	bl	24236 <assert_post_action>
	switch (start_mode) {
   1c206:	b376      	cbz	r6, 1c266 <z_nrf_clock_control_lf_on+0xaa>
   1c208:	1e73      	subs	r3, r6, #1
   1c20a:	2b01      	cmp	r3, #1
   1c20c:	d859      	bhi.n	1c2c2 <z_nrf_clock_control_lf_on+0x106>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   1c20e:	2e01      	cmp	r6, #1
   1c210:	d107      	bne.n	1c222 <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSRCCOPY & NRF_CLOCK_LFCLKSRCCOPY_SRC_Msk)
   1c212:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c216:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1c21a:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_XTAL) &&
   1c21e:	2b01      	cmp	r3, #1
   1c220:	d021      	beq.n	1c266 <z_nrf_clock_control_lf_on+0xaa>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1c222:	f00a fb7b 	bl	2691c <k_is_in_isr>
   1c226:	4605      	mov	r5, r0
   1c228:	b9f8      	cbnz	r0, 1c26a <z_nrf_clock_control_lf_on+0xae>
	return !z_sys_post_kernel;
   1c22a:	4b31      	ldr	r3, [pc, #196]	; (1c2f0 <z_nrf_clock_control_lf_on+0x134>)
   1c22c:	781b      	ldrb	r3, [r3, #0]
   1c22e:	b1e3      	cbz	r3, 1c26a <z_nrf_clock_control_lf_on+0xae>
    p_reg->INTENCLR = mask;
   1c230:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c234:	2202      	movs	r2, #2
   1c236:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1c23a:	4607      	mov	r7, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c23c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 1c2f8 <z_nrf_clock_control_lf_on+0x13c>
            clock_running = p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_STATE_Msk;
   1c240:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   1c244:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
                    (nrf_clock_lfclk_t)((p_reg->NRF_LFCLKSTAT & NRF_CLOCK_LFCLKSTAT_SRC_Msk)
   1c248:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
	while (!(nrfx_clock_is_running(d, (void *)&type)
   1c24c:	03d2      	lsls	r2, r2, #15
   1c24e:	d516      	bpl.n	1c27e <z_nrf_clock_control_lf_on+0xc2>
                                        >> NRF_CLOCK_LFCLKSTAT_SRC_Pos);
   1c250:	f003 0303 	and.w	r3, r3, #3
   1c254:	2b01      	cmp	r3, #1
   1c256:	d001      	beq.n	1c25c <z_nrf_clock_control_lf_on+0xa0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1c258:	2e01      	cmp	r6, #1
   1c25a:	d110      	bne.n	1c27e <z_nrf_clock_control_lf_on+0xc2>
	if (isr_mode) {
   1c25c:	b35d      	cbz	r5, 1c2b6 <z_nrf_clock_control_lf_on+0xfa>
   1c25e:	f387 8811 	msr	BASEPRI, r7
   1c262:	f3bf 8f6f 	isb	sy
}
   1c266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1c26a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c26e:	f3ef 8711 	mrs	r7, BASEPRI
   1c272:	f383 8812 	msr	BASEPRI_MAX, r3
   1c276:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1c27a:	2501      	movs	r5, #1
   1c27c:	e7de      	b.n	1c23c <z_nrf_clock_control_lf_on+0x80>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   1c27e:	b1ad      	cbz	r5, 1c2ac <z_nrf_clock_control_lf_on+0xf0>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1c280:	4638      	mov	r0, r7
   1c282:	f7f8 fb1f 	bl	148c4 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->NRF_LFCLKSRC);
   1c286:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_XTAL)
   1c28a:	2b00      	cmp	r3, #0
   1c28c:	d1da      	bne.n	1c244 <z_nrf_clock_control_lf_on+0x88>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1c28e:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1c292:	2a00      	cmp	r2, #0
   1c294:	d0d6      	beq.n	1c244 <z_nrf_clock_control_lf_on+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1c296:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   1c29a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->NRF_LFCLKSRC = (uint32_t)(source);
   1c29e:	2301      	movs	r3, #1
   1c2a0:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
   1c2a4:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c2a8:	60a3      	str	r3, [r4, #8]
}
   1c2aa:	e7cb      	b.n	1c244 <z_nrf_clock_control_lf_on+0x88>
	return z_impl_k_sleep(timeout);
   1c2ac:	2100      	movs	r1, #0
   1c2ae:	2021      	movs	r0, #33	; 0x21
   1c2b0:	f006 f906 	bl	224c0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1c2b4:	e7e7      	b.n	1c286 <z_nrf_clock_control_lf_on+0xca>
    p_reg->INTENSET = mask;
   1c2b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c2ba:	2202      	movs	r2, #2
   1c2bc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1c2c0:	e7d1      	b.n	1c266 <z_nrf_clock_control_lf_on+0xaa>
		__ASSERT_NO_MSG(false);
   1c2c2:	490c      	ldr	r1, [pc, #48]	; (1c2f4 <z_nrf_clock_control_lf_on+0x138>)
   1c2c4:	4a08      	ldr	r2, [pc, #32]	; (1c2e8 <z_nrf_clock_control_lf_on+0x12c>)
   1c2c6:	4809      	ldr	r0, [pc, #36]	; (1c2ec <z_nrf_clock_control_lf_on+0x130>)
   1c2c8:	f240 2342 	movw	r3, #578	; 0x242
   1c2cc:	f007 ffba 	bl	24244 <assert_print>
   1c2d0:	f240 2142 	movw	r1, #578	; 0x242
   1c2d4:	e794      	b.n	1c200 <z_nrf_clock_control_lf_on+0x44>
   1c2d6:	bf00      	nop
   1c2d8:	20002dc4 	.word	0x20002dc4
   1c2dc:	20002db4 	.word	0x20002db4
   1c2e0:	20002de8 	.word	0x20002de8
   1c2e4:	00028375 	.word	0x00028375
   1c2e8:	0002a2e2 	.word	0x0002a2e2
   1c2ec:	00027c2a 	.word	0x00027c2a
   1c2f0:	200035b4 	.word	0x200035b4
   1c2f4:	0002a7c0 	.word	0x0002a7c0
   1c2f8:	e000e100 	.word	0xe000e100

0001c2fc <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(void)
{
   1c2fc:	b508      	push	{r3, lr}
   1c2fe:	4807      	ldr	r0, [pc, #28]	; (1c31c <uart_console_init+0x20>)
   1c300:	f00a fade 	bl	268c0 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
   1c304:	b138      	cbz	r0, 1c316 <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
   1c306:	4806      	ldr	r0, [pc, #24]	; (1c320 <uart_console_init+0x24>)
   1c308:	f7f9 fab6 	bl	15878 <__stdout_hook_install>
	__printk_hook_install(console_out);
   1c30c:	4804      	ldr	r0, [pc, #16]	; (1c320 <uart_console_init+0x24>)
   1c30e:	f7f6 fc4d 	bl	12bac <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   1c312:	2000      	movs	r0, #0
}
   1c314:	bd08      	pop	{r3, pc}
		return -ENODEV;
   1c316:	f06f 0012 	mvn.w	r0, #18
   1c31a:	e7fb      	b.n	1c314 <uart_console_init+0x18>
   1c31c:	00026e04 	.word	0x00026e04
   1c320:	0001c325 	.word	0x0001c325

0001c324 <console_out>:
	if ('\n' == c) {
   1c324:	280a      	cmp	r0, #10
{
   1c326:	b538      	push	{r3, r4, r5, lr}
   1c328:	4d07      	ldr	r5, [pc, #28]	; (1c348 <console_out+0x24>)
   1c32a:	4604      	mov	r4, r0
	if ('\n' == c) {
   1c32c:	d104      	bne.n	1c338 <console_out+0x14>
   1c32e:	68ab      	ldr	r3, [r5, #8]
   1c330:	210d      	movs	r1, #13
   1c332:	69db      	ldr	r3, [r3, #28]
   1c334:	4628      	mov	r0, r5
   1c336:	4798      	blx	r3
   1c338:	68ab      	ldr	r3, [r5, #8]
   1c33a:	4803      	ldr	r0, [pc, #12]	; (1c348 <console_out+0x24>)
   1c33c:	69db      	ldr	r3, [r3, #28]
   1c33e:	b2e1      	uxtb	r1, r4
   1c340:	4798      	blx	r3
}
   1c342:	4620      	mov	r0, r4
   1c344:	bd38      	pop	{r3, r4, r5, pc}
   1c346:	bf00      	nop
   1c348:	00026e04 	.word	0x00026e04

0001c34c <random_byte_get>:
   1c34c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c350:	f3ef 8211 	mrs	r2, BASEPRI
   1c354:	f383 8812 	msr	BASEPRI_MAX, r3
   1c358:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1c35c:	4b09      	ldr	r3, [pc, #36]	; (1c384 <random_byte_get+0x38>)
   1c35e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1c362:	b161      	cbz	r1, 1c37e <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c364:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1c366:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c36a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1c36e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1c372:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1c374:	f382 8811 	msr	BASEPRI, r2
   1c378:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1c37c:	4770      	bx	lr
	int retval = -EAGAIN;
   1c37e:	f06f 000a 	mvn.w	r0, #10
   1c382:	e7f7      	b.n	1c374 <random_byte_get+0x28>
   1c384:	4000d000 	.word	0x4000d000

0001c388 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1c388:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c38a:	4603      	mov	r3, r0
   1c38c:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
   1c38e:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
   1c390:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
   1c394:	f04f 0540 	mov.w	r5, #64	; 0x40
   1c398:	f3ef 8211 	mrs	r2, BASEPRI
   1c39c:	f385 8812 	msr	BASEPRI_MAX, r5
   1c3a0:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1c3a4:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1c3a6:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   1c3aa:	1be4      	subs	r4, r4, r7
   1c3ac:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
   1c3b0:	42a0      	cmp	r0, r4
		len = available;
   1c3b2:	bf88      	it	hi
   1c3b4:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1c3b6:	183e      	adds	r6, r7, r0
   1c3b8:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
   1c3bc:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
   1c3be:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
   1c3c0:	f382 8811 	msr	BASEPRI, r2
   1c3c4:	f3bf 8f6f 	isb	sy
   1c3c8:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
   1c3ca:	428a      	cmp	r2, r1
   1c3cc:	d117      	bne.n	1c3fe <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1c3ce:	4577      	cmp	r7, lr
   1c3d0:	d10d      	bne.n	1c3ee <rng_pool_get+0x66>
	__asm__ volatile(
   1c3d2:	f04f 0140 	mov.w	r1, #64	; 0x40
   1c3d6:	f3ef 8211 	mrs	r2, BASEPRI
   1c3da:	f381 8812 	msr	BASEPRI_MAX, r1
   1c3de:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1c3e2:	7819      	ldrb	r1, [r3, #0]
   1c3e4:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
   1c3e6:	f382 8811 	msr	BASEPRI, r2
   1c3ea:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
   1c3ee:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
   1c3f0:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
   1c3f2:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1c3f4:	bf22      	ittt	cs
   1c3f6:	4b06      	ldrcs	r3, [pc, #24]	; (1c410 <rng_pool_get+0x88>)
   1c3f8:	2201      	movcs	r2, #1
   1c3fa:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1c3fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1c3fe:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
   1c400:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1c402:	7976      	ldrb	r6, [r6, #5]
   1c404:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
   1c408:	ea05 050c 	and.w	r5, r5, ip
   1c40c:	e7dd      	b.n	1c3ca <rng_pool_get+0x42>
   1c40e:	bf00      	nop
   1c410:	4000d000 	.word	0x4000d000

0001c414 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   1c414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1c418:	4d2e      	ldr	r5, [pc, #184]	; (1c4d4 <entropy_nrf5_get_entropy_isr+0xc0>)
   1c41a:	6900      	ldr	r0, [r0, #16]
   1c41c:	42a8      	cmp	r0, r5
{
   1c41e:	460e      	mov	r6, r1
   1c420:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1c422:	d00b      	beq.n	1c43c <entropy_nrf5_get_entropy_isr+0x28>
   1c424:	492c      	ldr	r1, [pc, #176]	; (1c4d8 <entropy_nrf5_get_entropy_isr+0xc4>)
   1c426:	482d      	ldr	r0, [pc, #180]	; (1c4dc <entropy_nrf5_get_entropy_isr+0xc8>)
   1c428:	4a2d      	ldr	r2, [pc, #180]	; (1c4e0 <entropy_nrf5_get_entropy_isr+0xcc>)
   1c42a:	f240 1307 	movw	r3, #263	; 0x107
   1c42e:	f007 ff09 	bl	24244 <assert_print>
   1c432:	482b      	ldr	r0, [pc, #172]	; (1c4e0 <entropy_nrf5_get_entropy_isr+0xcc>)
   1c434:	f240 1107 	movw	r1, #263	; 0x107
   1c438:	f007 fefd 	bl	24236 <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1c43c:	43db      	mvns	r3, r3
   1c43e:	f013 0501 	ands.w	r5, r3, #1
   1c442:	d004      	beq.n	1c44e <entropy_nrf5_get_entropy_isr+0x3a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1c444:	3030      	adds	r0, #48	; 0x30
   1c446:	f7ff ff9f 	bl	1c388 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1c44a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1c44e:	b3a2      	cbz	r2, 1c4ba <entropy_nrf5_get_entropy_isr+0xa6>
	__asm__ volatile(
   1c450:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c454:	f3ef 8811 	mrs	r8, BASEPRI
   1c458:	f383 8812 	msr	BASEPRI_MAX, r3
   1c45c:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1c460:	200d      	movs	r0, #13
   1c462:	f7f8 fb0d 	bl	14a80 <arch_irq_is_enabled>
   1c466:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1c468:	200d      	movs	r0, #13
   1c46a:	f7f8 faf5 	bl	14a58 <arch_irq_disable>
	__asm__ volatile(
   1c46e:	f388 8811 	msr	BASEPRI, r8
   1c472:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c476:	f8df a06c 	ldr.w	sl, [pc, #108]	; 1c4e4 <entropy_nrf5_get_entropy_isr+0xd0>
   1c47a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1c4e8 <entropy_nrf5_get_entropy_isr+0xd4>
   1c47e:	f8ca 5100 	str.w	r5, [sl, #256]	; 0x100
   1c482:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   1c486:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1c48a:	2301      	movs	r3, #1
   1c48c:	f8ca 3000 	str.w	r3, [sl]
   1c490:	4625      	mov	r5, r4
   1c492:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1c496:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1c49a:	b183      	cbz	r3, 1c4be <entropy_nrf5_get_entropy_isr+0xaa>
			byte = random_byte_get();
   1c49c:	f7ff ff56 	bl	1c34c <random_byte_get>
			if (byte < 0) {
   1c4a0:	1e03      	subs	r3, r0, #0
   1c4a2:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
   1c4a6:	dbf6      	blt.n	1c496 <entropy_nrf5_get_entropy_isr+0x82>
			buf[--len] = byte;
   1c4a8:	3d01      	subs	r5, #1
   1c4aa:	b2ad      	uxth	r5, r5
   1c4ac:	5573      	strb	r3, [r6, r5]
		} while (len);
   1c4ae:	2d00      	cmp	r5, #0
   1c4b0:	d1f1      	bne.n	1c496 <entropy_nrf5_get_entropy_isr+0x82>
		if (irq_enabled) {
   1c4b2:	b117      	cbz	r7, 1c4ba <entropy_nrf5_get_entropy_isr+0xa6>
			irq_enable(IRQN);
   1c4b4:	200d      	movs	r0, #13
   1c4b6:	f7f8 fac1 	bl	14a3c <arch_irq_enable>
	return cnt;
   1c4ba:	4620      	mov	r0, r4
   1c4bc:	e7c5      	b.n	1c44a <entropy_nrf5_get_entropy_isr+0x36>
	__asm__ volatile(
   1c4be:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c4c2:	f3ef 8011 	mrs	r0, BASEPRI
   1c4c6:	f383 8812 	msr	BASEPRI_MAX, r3
   1c4ca:	f3bf 8f6f 	isb	sy
	arch_cpu_atomic_idle(key);
   1c4ce:	f7f8 f9f9 	bl	148c4 <arch_cpu_atomic_idle>
}
   1c4d2:	e7e0      	b.n	1c496 <entropy_nrf5_get_entropy_isr+0x82>
   1c4d4:	20002e24 	.word	0x20002e24
   1c4d8:	0002a39e 	.word	0x0002a39e
   1c4dc:	00027c2a 	.word	0x00027c2a
   1c4e0:	0002a36c 	.word	0x0002a36c
   1c4e4:	4000d000 	.word	0x4000d000
   1c4e8:	e000e100 	.word	0xe000e100

0001c4ec <entropy_nrf5_get_entropy>:
{
   1c4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1c4f0:	4b19      	ldr	r3, [pc, #100]	; (1c558 <entropy_nrf5_get_entropy+0x6c>)
   1c4f2:	6907      	ldr	r7, [r0, #16]
   1c4f4:	429f      	cmp	r7, r3
{
   1c4f6:	460d      	mov	r5, r1
   1c4f8:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1c4fa:	d105      	bne.n	1c508 <entropy_nrf5_get_entropy+0x1c>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1c4fc:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
   1c500:	b964      	cbnz	r4, 1c51c <entropy_nrf5_get_entropy+0x30>
}
   1c502:	4620      	mov	r0, r4
   1c504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1c508:	4914      	ldr	r1, [pc, #80]	; (1c55c <entropy_nrf5_get_entropy+0x70>)
   1c50a:	4815      	ldr	r0, [pc, #84]	; (1c560 <entropy_nrf5_get_entropy+0x74>)
   1c50c:	4a15      	ldr	r2, [pc, #84]	; (1c564 <entropy_nrf5_get_entropy+0x78>)
   1c50e:	23e9      	movs	r3, #233	; 0xe9
   1c510:	f007 fe98 	bl	24244 <assert_print>
   1c514:	4813      	ldr	r0, [pc, #76]	; (1c564 <entropy_nrf5_get_entropy+0x78>)
   1c516:	21e9      	movs	r1, #233	; 0xe9
   1c518:	f007 fe8d 	bl	24236 <assert_post_action>
	return z_impl_k_sem_take(sem, timeout);
   1c51c:	f04f 33ff 	mov.w	r3, #4294967295
   1c520:	f04f 32ff 	mov.w	r2, #4294967295
   1c524:	4638      	mov	r0, r7
   1c526:	f004 f9bd 	bl	208a4 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1c52a:	4622      	mov	r2, r4
   1c52c:	4629      	mov	r1, r5
   1c52e:	4640      	mov	r0, r8
   1c530:	f7ff ff2a 	bl	1c388 <rng_pool_get>
   1c534:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1c536:	4638      	mov	r0, r7
   1c538:	f004 f970 	bl	2081c <z_impl_k_sem_give>
		if (bytes == 0U) {
   1c53c:	b93e      	cbnz	r6, 1c54e <entropy_nrf5_get_entropy+0x62>
	return z_impl_k_sem_take(sem, timeout);
   1c53e:	f04f 32ff 	mov.w	r2, #4294967295
   1c542:	f04f 33ff 	mov.w	r3, #4294967295
   1c546:	4808      	ldr	r0, [pc, #32]	; (1c568 <entropy_nrf5_get_entropy+0x7c>)
   1c548:	f004 f9ac 	bl	208a4 <z_impl_k_sem_take>
	while (len) {
   1c54c:	e7e6      	b.n	1c51c <entropy_nrf5_get_entropy+0x30>
		len -= bytes;
   1c54e:	1ba4      	subs	r4, r4, r6
   1c550:	b2a4      	uxth	r4, r4
		buf += bytes;
   1c552:	4435      	add	r5, r6
   1c554:	e7d4      	b.n	1c500 <entropy_nrf5_get_entropy+0x14>
   1c556:	bf00      	nop
   1c558:	20002e24 	.word	0x20002e24
   1c55c:	0002a39e 	.word	0x0002a39e
   1c560:	00027c2a 	.word	0x00027c2a
   1c564:	0002a36c 	.word	0x0002a36c
   1c568:	20002e3c 	.word	0x20002e3c

0001c56c <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   1c56c:	b538      	push	{r3, r4, r5, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);
   1c56e:	4b21      	ldr	r3, [pc, #132]	; (1c5f4 <entropy_nrf5_init+0x88>)
   1c570:	6904      	ldr	r4, [r0, #16]
   1c572:	429c      	cmp	r4, r3
   1c574:	d00b      	beq.n	1c58e <entropy_nrf5_init+0x22>
   1c576:	4920      	ldr	r1, [pc, #128]	; (1c5f8 <entropy_nrf5_init+0x8c>)
   1c578:	4820      	ldr	r0, [pc, #128]	; (1c5fc <entropy_nrf5_init+0x90>)
   1c57a:	4a21      	ldr	r2, [pc, #132]	; (1c600 <entropy_nrf5_init+0x94>)
   1c57c:	f240 134b 	movw	r3, #331	; 0x14b
   1c580:	f007 fe60 	bl	24244 <assert_print>
   1c584:	481e      	ldr	r0, [pc, #120]	; (1c600 <entropy_nrf5_init+0x94>)
   1c586:	f240 114b 	movw	r1, #331	; 0x14b
   1c58a:	f007 fe54 	bl	24236 <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1c58e:	2201      	movs	r2, #1
   1c590:	4611      	mov	r1, r2
   1c592:	4620      	mov	r0, r4
   1c594:	f00a fa09 	bl	269aa <z_impl_k_sem_init>
   1c598:	2201      	movs	r2, #1
   1c59a:	2100      	movs	r1, #0
   1c59c:	f104 0018 	add.w	r0, r4, #24
   1c5a0:	f00a fa03 	bl	269aa <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1c5a4:	f240 4307 	movw	r3, #1031	; 0x407
   1c5a8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1c5ac:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1c5b0:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1c5b2:	230c      	movs	r3, #12
   1c5b4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1c5b8:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   1c5ba:	4b12      	ldr	r3, [pc, #72]	; (1c604 <entropy_nrf5_init+0x98>)
   1c5bc:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1c5c0:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1c5c4:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1c5c8:	f022 0201 	bic.w	r2, r2, #1
   1c5cc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   1c5d0:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1c5d2:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   1c5d6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1c5da:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1c5de:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1c5e0:	6019      	str	r1, [r3, #0]
   1c5e2:	200d      	movs	r0, #13
   1c5e4:	f7f8 fa5a 	bl	14a9c <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1c5e8:	200d      	movs	r0, #13
   1c5ea:	f7f8 fa27 	bl	14a3c <arch_irq_enable>

	return 0;
}
   1c5ee:	4628      	mov	r0, r5
   1c5f0:	bd38      	pop	{r3, r4, r5, pc}
   1c5f2:	bf00      	nop
   1c5f4:	20002e24 	.word	0x20002e24
   1c5f8:	0002a39e 	.word	0x0002a39e
   1c5fc:	00027c2a 	.word	0x00027c2a
   1c600:	0002a36c 	.word	0x0002a36c
   1c604:	4000d000 	.word	0x4000d000

0001c608 <isr>:
{
   1c608:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1c60a:	f7ff fe9f 	bl	1c34c <random_byte_get>
	if (byte < 0) {
   1c60e:	2800      	cmp	r0, #0
   1c610:	db20      	blt.n	1c654 <isr+0x4c>
	uint8_t last  = rngp->last;
   1c612:	4b17      	ldr	r3, [pc, #92]	; (1c670 <isr+0x68>)
   1c614:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1c618:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1c61c:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1c620:	1b14      	subs	r4, r2, r4
   1c622:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1c626:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1c628:	d10d      	bne.n	1c646 <isr+0x3e>
	uint8_t last  = rngp->last;
   1c62a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1c62e:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1c632:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1c636:	1b14      	subs	r4, r2, r4
   1c638:	ea31 0404 	bics.w	r4, r1, r4
   1c63c:	d10b      	bne.n	1c656 <isr+0x4e>
   1c63e:	4b0d      	ldr	r3, [pc, #52]	; (1c674 <isr+0x6c>)
   1c640:	2201      	movs	r2, #1
   1c642:	605a      	str	r2, [r3, #4]
}
   1c644:	e00e      	b.n	1c664 <isr+0x5c>
	rngp->buffer[last] = byte;
   1c646:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   1c648:	3201      	adds	r2, #1
   1c64a:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   1c64c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1c650:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
   1c654:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1c656:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   1c658:	3201      	adds	r2, #1
   1c65a:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   1c65c:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1c660:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1c664:	4804      	ldr	r0, [pc, #16]	; (1c678 <isr+0x70>)
}
   1c666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c66a:	f004 b8d7 	b.w	2081c <z_impl_k_sem_give>
   1c66e:	bf00      	nop
   1c670:	20002e24 	.word	0x20002e24
   1c674:	4000d000 	.word	0x4000d000
   1c678:	20002e3c 	.word	0x20002e3c

0001c67c <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   1c67c:	b510      	push	{r4, lr}
	return port->data;
   1c67e:	6903      	ldr	r3, [r0, #16]
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   1c680:	b961      	cbnz	r1, 1c69c <gpio_nrfx_manage_callback+0x20>
   1c682:	4920      	ldr	r1, [pc, #128]	; (1c704 <gpio_nrfx_manage_callback+0x88>)
   1c684:	4a20      	ldr	r2, [pc, #128]	; (1c708 <gpio_nrfx_manage_callback+0x8c>)
   1c686:	4821      	ldr	r0, [pc, #132]	; (1c70c <gpio_nrfx_manage_callback+0x90>)
   1c688:	232a      	movs	r3, #42	; 0x2a
   1c68a:	f007 fddb 	bl	24244 <assert_print>
   1c68e:	4820      	ldr	r0, [pc, #128]	; (1c710 <gpio_nrfx_manage_callback+0x94>)
   1c690:	f007 fdd8 	bl	24244 <assert_print>
   1c694:	212a      	movs	r1, #42	; 0x2a
	__ASSERT(callback->handler, "No callback handler!");
   1c696:	481c      	ldr	r0, [pc, #112]	; (1c708 <gpio_nrfx_manage_callback+0x8c>)
   1c698:	f007 fdcd 	bl	24236 <assert_post_action>
   1c69c:	6848      	ldr	r0, [r1, #4]
   1c69e:	b950      	cbnz	r0, 1c6b6 <gpio_nrfx_manage_callback+0x3a>
   1c6a0:	491c      	ldr	r1, [pc, #112]	; (1c714 <gpio_nrfx_manage_callback+0x98>)
   1c6a2:	4a19      	ldr	r2, [pc, #100]	; (1c708 <gpio_nrfx_manage_callback+0x8c>)
   1c6a4:	4819      	ldr	r0, [pc, #100]	; (1c70c <gpio_nrfx_manage_callback+0x90>)
   1c6a6:	232b      	movs	r3, #43	; 0x2b
   1c6a8:	f007 fdcc 	bl	24244 <assert_print>
   1c6ac:	481a      	ldr	r0, [pc, #104]	; (1c718 <gpio_nrfx_manage_callback+0x9c>)
   1c6ae:	f007 fdc9 	bl	24244 <assert_print>
   1c6b2:	212b      	movs	r1, #43	; 0x2b
   1c6b4:	e7ef      	b.n	1c696 <gpio_nrfx_manage_callback+0x1a>
	return list->head;
   1c6b6:	6858      	ldr	r0, [r3, #4]

	if (!sys_slist_is_empty(callbacks)) {
   1c6b8:	b1f8      	cbz	r0, 1c6fa <gpio_nrfx_manage_callback+0x7e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c6ba:	4288      	cmp	r0, r1
   1c6bc:	d119      	bne.n	1c6f2 <gpio_nrfx_manage_callback+0x76>
Z_GENLIST_REMOVE(slist, snode)
   1c6be:	689c      	ldr	r4, [r3, #8]
	return node->next;
   1c6c0:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   1c6c2:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1c6c4:	42a1      	cmp	r1, r4
   1c6c6:	d100      	bne.n	1c6ca <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   1c6c8:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1c6ca:	2000      	movs	r0, #0
   1c6cc:	6008      	str	r0, [r1, #0]
		}
	} else if (!set) {
		return -EINVAL;
	}

	if (set) {
   1c6ce:	b12a      	cbz	r2, 1c6dc <gpio_nrfx_manage_callback+0x60>
	return list->head;
   1c6d0:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1c6d2:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1c6d4:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1c6d6:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1c6d8:	b902      	cbnz	r2, 1c6dc <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   1c6da:	6099      	str	r1, [r3, #8]
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1c6dc:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1c6de:	e010      	b.n	1c702 <gpio_nrfx_manage_callback+0x86>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c6e0:	4281      	cmp	r1, r0
   1c6e2:	d106      	bne.n	1c6f2 <gpio_nrfx_manage_callback+0x76>
	return node->next;
   1c6e4:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   1c6e6:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c6e8:	6898      	ldr	r0, [r3, #8]
   1c6ea:	4281      	cmp	r1, r0
   1c6ec:	d1ed      	bne.n	1c6ca <gpio_nrfx_manage_callback+0x4e>
	list->tail = node;
   1c6ee:	609c      	str	r4, [r3, #8]
}
   1c6f0:	e7eb      	b.n	1c6ca <gpio_nrfx_manage_callback+0x4e>
	return node->next;
   1c6f2:	4604      	mov	r4, r0
   1c6f4:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c6f6:	2800      	cmp	r0, #0
   1c6f8:	d1f2      	bne.n	1c6e0 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   1c6fa:	2a00      	cmp	r2, #0
   1c6fc:	d1e8      	bne.n	1c6d0 <gpio_nrfx_manage_callback+0x54>
				return -EINVAL;
   1c6fe:	f06f 0015 	mvn.w	r0, #21
				     callback, set);
}
   1c702:	bd10      	pop	{r4, pc}
   1c704:	00027b28 	.word	0x00027b28
   1c708:	0002a3dd 	.word	0x0002a3dd
   1c70c:	00027c2a 	.word	0x00027c2a
   1c710:	0002a419 	.word	0x0002a419
   1c714:	0002a428 	.word	0x0002a428
   1c718:	0002a43a 	.word	0x0002a43a

0001c71c <gpio_nrfx_pin_interrupt_configure>:
{
   1c71c:	b530      	push	{r4, r5, lr}
	return port->config;
   1c71e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1c720:	7b05      	ldrb	r5, [r0, #12]
   1c722:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
   1c726:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   1c72a:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1c72c:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   1c730:	d105      	bne.n	1c73e <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1c732:	4620      	mov	r0, r4
   1c734:	f002 ff36 	bl	1f5a4 <nrfx_gpiote_trigger_disable>
		return 0;
   1c738:	2000      	movs	r0, #0
}
   1c73a:	b005      	add	sp, #20
   1c73c:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c73e:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   1c740:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c744:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   1c748:	d114      	bne.n	1c774 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   1c74a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c74e:	bf0c      	ite	eq
   1c750:	2304      	moveq	r3, #4
   1c752:	2305      	movne	r3, #5
   1c754:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1c758:	2300      	movs	r3, #0
   1c75a:	4619      	mov	r1, r3
   1c75c:	aa02      	add	r2, sp, #8
   1c75e:	4620      	mov	r0, r4
   1c760:	f002 fd0a 	bl	1f178 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1c764:	4b27      	ldr	r3, [pc, #156]	; (1c804 <gpio_nrfx_pin_interrupt_configure+0xe8>)
   1c766:	4298      	cmp	r0, r3
   1c768:	d148      	bne.n	1c7fc <gpio_nrfx_pin_interrupt_configure+0xe0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   1c76a:	2101      	movs	r1, #1
   1c76c:	4620      	mov	r0, r4
   1c76e:	f002 fea7 	bl	1f4c0 <nrfx_gpiote_trigger_enable>
	return 0;
   1c772:	e7e1      	b.n	1c738 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1c774:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   1c778:	d029      	beq.n	1c7ce <gpio_nrfx_pin_interrupt_configure+0xb2>
   1c77a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   1c77e:	bf14      	ite	ne
   1c780:	2301      	movne	r3, #1
   1c782:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c784:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   1c788:	6883      	ldr	r3, [r0, #8]
   1c78a:	40cb      	lsrs	r3, r1
   1c78c:	07d9      	lsls	r1, r3, #31
   1c78e:	d4e3      	bmi.n	1c758 <gpio_nrfx_pin_interrupt_configure+0x3c>
   1c790:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   1c794:	d1e0      	bne.n	1c758 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
   1c796:	0963      	lsrs	r3, r4, #5
   1c798:	d11b      	bne.n	1c7d2 <gpio_nrfx_pin_interrupt_configure+0xb6>
#endif // defined(NRF52820_XXAA) && defined(DEVELOP_IN_NRF52833)
#endif

    pin_number &= 0x1F;

    return (mask & (1UL << pin_number)) ? true : false;
   1c79a:	f04f 33ff 	mov.w	r3, #4294967295
   1c79e:	40e3      	lsrs	r3, r4
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1c7a0:	07da      	lsls	r2, r3, #31
   1c7a2:	d516      	bpl.n	1c7d2 <gpio_nrfx_pin_interrupt_configure+0xb6>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
   1c7a4:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1c7a8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1c7ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1c7b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   1c7b4:	07db      	lsls	r3, r3, #31
   1c7b6:	d4cf      	bmi.n	1c758 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c7b8:	f10d 0507 	add.w	r5, sp, #7
   1c7bc:	4629      	mov	r1, r5
   1c7be:	4620      	mov	r0, r4
   1c7c0:	f002 fe02 	bl	1f3c8 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   1c7c4:	4b10      	ldr	r3, [pc, #64]	; (1c808 <gpio_nrfx_pin_interrupt_configure+0xec>)
   1c7c6:	4298      	cmp	r0, r3
   1c7c8:	d00f      	beq.n	1c7ea <gpio_nrfx_pin_interrupt_configure+0xce>
		trigger_config.p_in_channel = &ch;
   1c7ca:	9503      	str	r5, [sp, #12]
   1c7cc:	e7c4      	b.n	1c758 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   1c7ce:	2303      	movs	r3, #3
   1c7d0:	e7d8      	b.n	1c784 <gpio_nrfx_pin_interrupt_configure+0x68>
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1c7d2:	490e      	ldr	r1, [pc, #56]	; (1c80c <gpio_nrfx_pin_interrupt_configure+0xf0>)
   1c7d4:	480e      	ldr	r0, [pc, #56]	; (1c810 <gpio_nrfx_pin_interrupt_configure+0xf4>)
   1c7d6:	4a0f      	ldr	r2, [pc, #60]	; (1c814 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   1c7d8:	f240 332f 	movw	r3, #815	; 0x32f
   1c7dc:	f007 fd32 	bl	24244 <assert_print>
   1c7e0:	480c      	ldr	r0, [pc, #48]	; (1c814 <gpio_nrfx_pin_interrupt_configure+0xf8>)
   1c7e2:	f240 312f 	movw	r1, #815	; 0x32f
   1c7e6:	f007 fd26 	bl	24236 <assert_post_action>
			err = nrfx_gpiote_channel_alloc(&ch);
   1c7ea:	4628      	mov	r0, r5
   1c7ec:	f002 fe62 	bl	1f4b4 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1c7f0:	4b04      	ldr	r3, [pc, #16]	; (1c804 <gpio_nrfx_pin_interrupt_configure+0xe8>)
   1c7f2:	4298      	cmp	r0, r3
   1c7f4:	d0e9      	beq.n	1c7ca <gpio_nrfx_pin_interrupt_configure+0xae>
				return -ENOMEM;
   1c7f6:	f06f 000b 	mvn.w	r0, #11
   1c7fa:	e79e      	b.n	1c73a <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   1c7fc:	f06f 0015 	mvn.w	r0, #21
   1c800:	e79b      	b.n	1c73a <gpio_nrfx_pin_interrupt_configure+0x1e>
   1c802:	bf00      	nop
   1c804:	0bad0000 	.word	0x0bad0000
   1c808:	0bad0004 	.word	0x0bad0004
   1c80c:	0002a484 	.word	0x0002a484
   1c810:	00027c2a 	.word	0x00027c2a
   1c814:	0002a451 	.word	0x0002a451

0001c818 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1c818:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1c81a:	f002 fe3b 	bl	1f494 <nrfx_gpiote_is_init>
   1c81e:	4604      	mov	r4, r0
   1c820:	b968      	cbnz	r0, 1c83e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   1c822:	f002 fdfb 	bl	1f41c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   1c826:	4b08      	ldr	r3, [pc, #32]	; (1c848 <gpio_nrfx_init+0x30>)
   1c828:	4298      	cmp	r0, r3
   1c82a:	d10a      	bne.n	1c842 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1c82c:	4807      	ldr	r0, [pc, #28]	; (1c84c <gpio_nrfx_init+0x34>)
   1c82e:	4621      	mov	r1, r4
   1c830:	f002 fdc4 	bl	1f3bc <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1c834:	4622      	mov	r2, r4
   1c836:	2105      	movs	r1, #5
   1c838:	2006      	movs	r0, #6
   1c83a:	f7f8 f92f 	bl	14a9c <z_arm_irq_priority_set>
		return 0;
   1c83e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   1c840:	bd10      	pop	{r4, pc}
		return -EIO;
   1c842:	f06f 0004 	mvn.w	r0, #4
   1c846:	e7fb      	b.n	1c840 <gpio_nrfx_init+0x28>
   1c848:	0bad0000 	.word	0x0bad0000
   1c84c:	0001c851 	.word	0x0001c851

0001c850 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c850:	0943      	lsrs	r3, r0, #5
{
   1c852:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1c854:	d107      	bne.n	1c866 <nrfx_gpio_handler+0x16>
	return list->head;
   1c856:	4b12      	ldr	r3, [pc, #72]	; (1c8a0 <nrfx_gpio_handler+0x50>)
   1c858:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1c85a:	b121      	cbz	r1, 1c866 <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
   1c85c:	2501      	movs	r5, #1
	return node->next;
   1c85e:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1c860:	4e10      	ldr	r6, [pc, #64]	; (1c8a4 <nrfx_gpio_handler+0x54>)
   1c862:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1c864:	b901      	cbnz	r1, 1c868 <nrfx_gpio_handler+0x18>
}
   1c866:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
   1c868:	688a      	ldr	r2, [r1, #8]
   1c86a:	402a      	ands	r2, r5
   1c86c:	d010      	beq.n	1c890 <nrfx_gpio_handler+0x40>
			__ASSERT(cb->handler, "No callback handler!");
   1c86e:	684b      	ldr	r3, [r1, #4]
   1c870:	b963      	cbnz	r3, 1c88c <nrfx_gpio_handler+0x3c>
   1c872:	490d      	ldr	r1, [pc, #52]	; (1c8a8 <nrfx_gpio_handler+0x58>)
   1c874:	4a0d      	ldr	r2, [pc, #52]	; (1c8ac <nrfx_gpio_handler+0x5c>)
   1c876:	480e      	ldr	r0, [pc, #56]	; (1c8b0 <nrfx_gpio_handler+0x60>)
   1c878:	234d      	movs	r3, #77	; 0x4d
   1c87a:	f007 fce3 	bl	24244 <assert_print>
   1c87e:	480d      	ldr	r0, [pc, #52]	; (1c8b4 <nrfx_gpio_handler+0x64>)
   1c880:	f007 fce0 	bl	24244 <assert_print>
   1c884:	4809      	ldr	r0, [pc, #36]	; (1c8ac <nrfx_gpio_handler+0x5c>)
   1c886:	214d      	movs	r1, #77	; 0x4d
   1c888:	f007 fcd5 	bl	24236 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   1c88c:	4630      	mov	r0, r6
   1c88e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1c890:	b11c      	cbz	r4, 1c89a <nrfx_gpio_handler+0x4a>
   1c892:	6823      	ldr	r3, [r4, #0]
   1c894:	4621      	mov	r1, r4
   1c896:	461c      	mov	r4, r3
   1c898:	e7e4      	b.n	1c864 <nrfx_gpio_handler+0x14>
   1c89a:	4623      	mov	r3, r4
   1c89c:	e7fa      	b.n	1c894 <nrfx_gpio_handler+0x44>
   1c89e:	bf00      	nop
   1c8a0:	20002e78 	.word	0x20002e78
   1c8a4:	00026dbc 	.word	0x00026dbc
   1c8a8:	0002a4a7 	.word	0x0002a4a7
   1c8ac:	0002a3dd 	.word	0x0002a3dd
   1c8b0:	00027c2a 	.word	0x00027c2a
   1c8b4:	0002a43a 	.word	0x0002a43a

0001c8b8 <gpio_nrfx_pin_configure>:
{
   1c8b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   1c8bc:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1c8c0:	f898 300c 	ldrb.w	r3, [r8, #12]
   1c8c4:	f001 051f 	and.w	r5, r1, #31
   1c8c8:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   1c8cc:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c8ce:	4628      	mov	r0, r5
   1c8d0:	f10d 0103 	add.w	r1, sp, #3
{
   1c8d4:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c8d6:	f002 fd77 	bl	1f3c8 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1c8da:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   1c8de:	4606      	mov	r6, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   1c8e0:	d115      	bne.n	1c90e <gpio_nrfx_pin_configure+0x56>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   1c8e2:	4628      	mov	r0, r5
   1c8e4:	f002 fe84 	bl	1f5f0 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   1c8e8:	4b49      	ldr	r3, [pc, #292]	; (1ca10 <gpio_nrfx_pin_configure+0x158>)
   1c8ea:	429e      	cmp	r6, r3
   1c8ec:	d171      	bne.n	1c9d2 <gpio_nrfx_pin_configure+0x11a>
			err = nrfx_gpiote_channel_free(ch);
   1c8ee:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1c8f2:	f002 fdd9 	bl	1f4a8 <nrfx_gpiote_channel_free>
			__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1c8f6:	42b0      	cmp	r0, r6
   1c8f8:	d06b      	beq.n	1c9d2 <gpio_nrfx_pin_configure+0x11a>
   1c8fa:	4946      	ldr	r1, [pc, #280]	; (1ca14 <gpio_nrfx_pin_configure+0x15c>)
   1c8fc:	4a46      	ldr	r2, [pc, #280]	; (1ca18 <gpio_nrfx_pin_configure+0x160>)
   1c8fe:	4847      	ldr	r0, [pc, #284]	; (1ca1c <gpio_nrfx_pin_configure+0x164>)
   1c900:	236a      	movs	r3, #106	; 0x6a
   1c902:	f007 fc9f 	bl	24244 <assert_print>
   1c906:	216a      	movs	r1, #106	; 0x6a
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1c908:	4843      	ldr	r0, [pc, #268]	; (1ca18 <gpio_nrfx_pin_configure+0x160>)
   1c90a:	f007 fc94 	bl	24236 <assert_post_action>
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c90e:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1c910:	4619      	mov	r1, r3
   1c912:	aa02      	add	r2, sp, #8
   1c914:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
   1c916:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   1c91a:	f002 fc2d 	bl	1f178 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1c91e:	4b3c      	ldr	r3, [pc, #240]	; (1ca10 <gpio_nrfx_pin_configure+0x158>)
   1c920:	4298      	cmp	r0, r3
   1c922:	d004      	beq.n	1c92e <gpio_nrfx_pin_configure+0x76>
		return NRF_GPIO_PIN_PULLUP;
   1c924:	f06f 0015 	mvn.w	r0, #21
}
   1c928:	b004      	add	sp, #16
   1c92a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   1c92e:	4286      	cmp	r6, r0
   1c930:	d10d      	bne.n	1c94e <gpio_nrfx_pin_configure+0x96>
		err = nrfx_gpiote_channel_free(ch);
   1c932:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1c936:	f002 fdb7 	bl	1f4a8 <nrfx_gpiote_channel_free>
		__ASSERT_NO_MSG(err == NRFX_SUCCESS);
   1c93a:	42b0      	cmp	r0, r6
   1c93c:	d007      	beq.n	1c94e <gpio_nrfx_pin_configure+0x96>
   1c93e:	4935      	ldr	r1, [pc, #212]	; (1ca14 <gpio_nrfx_pin_configure+0x15c>)
   1c940:	4a35      	ldr	r2, [pc, #212]	; (1ca18 <gpio_nrfx_pin_configure+0x160>)
   1c942:	4836      	ldr	r0, [pc, #216]	; (1ca1c <gpio_nrfx_pin_configure+0x164>)
   1c944:	237c      	movs	r3, #124	; 0x7c
   1c946:	f007 fc7d 	bl	24244 <assert_print>
   1c94a:	217c      	movs	r1, #124	; 0x7c
   1c94c:	e7dc      	b.n	1c908 <gpio_nrfx_pin_configure+0x50>
	if (flags & GPIO_OUTPUT) {
   1c94e:	03a6      	lsls	r6, r4, #14
   1c950:	d54e      	bpl.n	1c9f0 <gpio_nrfx_pin_configure+0x138>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c952:	f240 3306 	movw	r3, #774	; 0x306
   1c956:	4023      	ands	r3, r4
   1c958:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   1c95c:	d019      	beq.n	1c992 <gpio_nrfx_pin_configure+0xda>
   1c95e:	d80c      	bhi.n	1c97a <gpio_nrfx_pin_configure+0xc2>
   1c960:	2b06      	cmp	r3, #6
   1c962:	d017      	beq.n	1c994 <gpio_nrfx_pin_configure+0xdc>
   1c964:	d804      	bhi.n	1c970 <gpio_nrfx_pin_configure+0xb8>
   1c966:	b1ab      	cbz	r3, 1c994 <gpio_nrfx_pin_configure+0xdc>
   1c968:	2b02      	cmp	r3, #2
   1c96a:	d1db      	bne.n	1c924 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_D0S1;
   1c96c:	2304      	movs	r3, #4
   1c96e:	e011      	b.n	1c994 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1c974:	d1d6      	bne.n	1c924 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_H0S1;
   1c976:	2301      	movs	r3, #1
   1c978:	e00c      	b.n	1c994 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c97a:	f240 2202 	movw	r2, #514	; 0x202
   1c97e:	4293      	cmp	r3, r2
   1c980:	d029      	beq.n	1c9d6 <gpio_nrfx_pin_configure+0x11e>
   1c982:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1c986:	d028      	beq.n	1c9da <gpio_nrfx_pin_configure+0x122>
   1c988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1c98c:	d1ca      	bne.n	1c924 <gpio_nrfx_pin_configure+0x6c>
		*drive = NRF_GPIO_PIN_S0H1;
   1c98e:	2302      	movs	r3, #2
   1c990:	e000      	b.n	1c994 <gpio_nrfx_pin_configure+0xdc>
		*drive = NRF_GPIO_PIN_H0D1;
   1c992:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   1c994:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   1c998:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   1c99c:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   1c9a0:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1c9a2:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   1c9a6:	bf54      	ite	pl
   1c9a8:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1c9ac:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1c9ae:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   1c9b0:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1c9b4:	d513      	bpl.n	1c9de <gpio_nrfx_pin_configure+0x126>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1c9b6:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1c9ba:	2301      	movs	r3, #1
   1c9bc:	40bb      	lsls	r3, r7
    p_reg->OUTSET = set_mask;
   1c9be:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   1c9c2:	2200      	movs	r2, #0
   1c9c4:	a901      	add	r1, sp, #4
   1c9c6:	4628      	mov	r0, r5
   1c9c8:	f002 fc82 	bl	1f2d0 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   1c9cc:	4b10      	ldr	r3, [pc, #64]	; (1ca10 <gpio_nrfx_pin_configure+0x158>)
   1c9ce:	4298      	cmp	r0, r3
   1c9d0:	d1a8      	bne.n	1c924 <gpio_nrfx_pin_configure+0x6c>
   1c9d2:	2000      	movs	r0, #0
   1c9d4:	e7a8      	b.n	1c928 <gpio_nrfx_pin_configure+0x70>
		*drive = NRF_GPIO_PIN_D0H1;
   1c9d6:	2305      	movs	r3, #5
   1c9d8:	e7dc      	b.n	1c994 <gpio_nrfx_pin_configure+0xdc>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1c9da:	2303      	movs	r3, #3
   1c9dc:	e7da      	b.n	1c994 <gpio_nrfx_pin_configure+0xdc>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   1c9de:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   1c9e0:	bf41      	itttt	mi
   1c9e2:	2301      	movmi	r3, #1
   1c9e4:	f8d8 2004 	ldrmi.w	r2, [r8, #4]
   1c9e8:	40bb      	lslmi	r3, r7
    p_reg->OUTCLR = clr_mask;
   1c9ea:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   1c9ee:	e7e8      	b.n	1c9c2 <gpio_nrfx_pin_configure+0x10a>
	if (flags & GPIO_PULL_UP) {
   1c9f0:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1c9f2:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   1c9f6:	bf54      	ite	pl
   1c9f8:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   1c9fc:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1c9fe:	461a      	mov	r2, r3
   1ca00:	a901      	add	r1, sp, #4
   1ca02:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   1ca04:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   1ca08:	f002 fbb6 	bl	1f178 <nrfx_gpiote_input_configure>
   1ca0c:	e7de      	b.n	1c9cc <gpio_nrfx_pin_configure+0x114>
   1ca0e:	bf00      	nop
   1ca10:	0bad0000 	.word	0x0bad0000
   1ca14:	0002a4df 	.word	0x0002a4df
   1ca18:	0002a4b3 	.word	0x0002a4b3
   1ca1c:	00027c2a 	.word	0x00027c2a

0001ca20 <nrf_gpio_pin_port_decode>:
{
   1ca20:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ca22:	6802      	ldr	r2, [r0, #0]
    switch (port)
   1ca24:	0953      	lsrs	r3, r2, #5
   1ca26:	d104      	bne.n	1ca32 <nrf_gpio_pin_port_decode+0x12>
    return (mask & (1UL << pin_number)) ? true : false;
   1ca28:	f04f 33ff 	mov.w	r3, #4294967295
   1ca2c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1ca2e:	07db      	lsls	r3, r3, #31
   1ca30:	d40b      	bmi.n	1ca4a <nrf_gpio_pin_port_decode+0x2a>
   1ca32:	4907      	ldr	r1, [pc, #28]	; (1ca50 <nrf_gpio_pin_port_decode+0x30>)
   1ca34:	4807      	ldr	r0, [pc, #28]	; (1ca54 <nrf_gpio_pin_port_decode+0x34>)
   1ca36:	4a08      	ldr	r2, [pc, #32]	; (1ca58 <nrf_gpio_pin_port_decode+0x38>)
   1ca38:	f240 332f 	movw	r3, #815	; 0x32f
   1ca3c:	f007 fc02 	bl	24244 <assert_print>
   1ca40:	4805      	ldr	r0, [pc, #20]	; (1ca58 <nrf_gpio_pin_port_decode+0x38>)
   1ca42:	f240 312f 	movw	r1, #815	; 0x32f
   1ca46:	f007 fbf6 	bl	24236 <assert_post_action>
}
   1ca4a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1ca4e:	bd08      	pop	{r3, pc}
   1ca50:	0002a484 	.word	0x0002a484
   1ca54:	00027c2a 	.word	0x00027c2a
   1ca58:	0002a451 	.word	0x0002a451

0001ca5c <uarte_nrfx_tx>:
}

static int uarte_nrfx_tx(const struct device *dev, const uint8_t *buf,
			 size_t len,
			 int32_t timeout)
{
   1ca5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ca5e:	461d      	mov	r5, r3
	return config->uarte_regs;
   1ca60:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   1ca62:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1ca64:	f8d3 c000 	ldr.w	ip, [r3]
{
   1ca68:	4606      	mov	r6, r0
   1ca6a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ca6e:	f3ef 8711 	mrs	r7, BASEPRI
   1ca72:	f383 8812 	msr	BASEPRI_MAX, r3
   1ca76:	f3bf 8f6f 	isb	sy
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	unsigned int key = irq_lock();

	if (data->async->tx_size) {
   1ca7a:	68e3      	ldr	r3, [r4, #12]
   1ca7c:	68d8      	ldr	r0, [r3, #12]
   1ca7e:	b138      	cbz	r0, 1ca90 <uarte_nrfx_tx+0x34>
	__asm__ volatile(
   1ca80:	f387 8811 	msr	BASEPRI, r7
   1ca84:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
		return -EBUSY;
   1ca88:	f06f 000f 	mvn.w	r0, #15
	    && timeout != SYS_FOREVER_US) {
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
			      K_NO_WAIT);
	}
	return 0;
}
   1ca8c:	b003      	add	sp, #12
   1ca8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->async->tx_size = len;
   1ca90:	60da      	str	r2, [r3, #12]
	data->async->tx_buf = buf;
   1ca92:	68e3      	ldr	r3, [r4, #12]
   1ca94:	6099      	str	r1, [r3, #8]
   1ca96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1ca9a:	f8cc 3304 	str.w	r3, [ip, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   1ca9e:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
   1caa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   1caa6:	68e3      	ldr	r3, [r4, #12]
   1caa8:	d111      	bne.n	1cace <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
   1caaa:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
   1caac:	68e3      	ldr	r3, [r4, #12]
   1caae:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
   1cab0:	4621      	mov	r1, r4
   1cab2:	4630      	mov	r0, r6
   1cab4:	f009 fcd4 	bl	26460 <start_tx_locked>
   1cab8:	f387 8811 	msr	BASEPRI, r7
   1cabc:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   1cac0:	7ae3      	ldrb	r3, [r4, #11]
   1cac2:	2b01      	cmp	r3, #1
   1cac4:	d101      	bne.n	1caca <uarte_nrfx_tx+0x6e>
	    && timeout != SYS_FOREVER_US) {
   1cac6:	1c6b      	adds	r3, r5, #1
   1cac8:	d106      	bne.n	1cad8 <uarte_nrfx_tx+0x7c>
	return 0;
   1caca:	2000      	movs	r0, #0
   1cacc:	e7de      	b.n	1ca8c <uarte_nrfx_tx+0x30>
		data->async->tx_cache_offset = 0;
   1cace:	61d8      	str	r0, [r3, #28]
		(void)setup_tx_cache(data);
   1cad0:	4620      	mov	r0, r4
   1cad2:	f009 fc3f 	bl	26354 <setup_tx_cache>
   1cad6:	e7eb      	b.n	1cab0 <uarte_nrfx_tx+0x54>
   1cad8:	480b      	ldr	r0, [pc, #44]	; (1cb08 <uarte_nrfx_tx+0xac>)
   1cada:	4a0c      	ldr	r2, [pc, #48]	; (1cb0c <uarte_nrfx_tx+0xb0>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
   1cadc:	68e4      	ldr	r4, [r4, #12]
   1cade:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   1cae2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1cae6:	2100      	movs	r1, #0
   1cae8:	2300      	movs	r3, #0
   1caea:	fbc5 0106 	smlal	r0, r1, r5, r6
   1caee:	f7e3 fec5 	bl	87c <__aeabi_uldivmod>
   1caf2:	3420      	adds	r4, #32
   1caf4:	4602      	mov	r2, r0
   1caf6:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1caf8:	2000      	movs	r0, #0
   1cafa:	2100      	movs	r1, #0
   1cafc:	e9cd 0100 	strd	r0, r1, [sp]
   1cb00:	4620      	mov	r0, r4
   1cb02:	f006 f96f 	bl	22de4 <z_impl_k_timer_start>
   1cb06:	e7e0      	b.n	1caca <uarte_nrfx_tx+0x6e>
   1cb08:	000f423f 	.word	0x000f423f
   1cb0c:	000f4240 	.word	0x000f4240

0001cb10 <uarte_nrfx_configure>:
{
   1cb10:	b570      	push	{r4, r5, r6, lr}
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   1cb12:	794b      	ldrb	r3, [r1, #5]
   1cb14:	2b01      	cmp	r3, #1
   1cb16:	d120      	bne.n	1cb5a <uarte_nrfx_configure+0x4a>
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1cb18:	798b      	ldrb	r3, [r1, #6]
   1cb1a:	2b03      	cmp	r3, #3
   1cb1c:	d11d      	bne.n	1cb5a <uarte_nrfx_configure+0x4a>
	switch (cfg->flow_ctrl) {
   1cb1e:	79cd      	ldrb	r5, [r1, #7]
   1cb20:	b10d      	cbz	r5, 1cb26 <uarte_nrfx_configure+0x16>
   1cb22:	2d01      	cmp	r5, #1
   1cb24:	d119      	bne.n	1cb5a <uarte_nrfx_configure+0x4a>
	switch (cfg->parity) {
   1cb26:	790a      	ldrb	r2, [r1, #4]
   1cb28:	b112      	cbz	r2, 1cb30 <uarte_nrfx_configure+0x20>
   1cb2a:	2a02      	cmp	r2, #2
   1cb2c:	d115      	bne.n	1cb5a <uarte_nrfx_configure+0x4a>
   1cb2e:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1cb30:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1cb32:	6844      	ldr	r4, [r0, #4]
	switch (baudrate) {
   1cb34:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1cb38:	6826      	ldr	r6, [r4, #0]
	switch (baudrate) {
   1cb3a:	d064      	beq.n	1cc06 <uarte_nrfx_configure+0xf6>
   1cb3c:	d82b      	bhi.n	1cb96 <uarte_nrfx_configure+0x86>
   1cb3e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1cb42:	d063      	beq.n	1cc0c <uarte_nrfx_configure+0xfc>
   1cb44:	d814      	bhi.n	1cb70 <uarte_nrfx_configure+0x60>
   1cb46:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1cb4a:	d061      	beq.n	1cc10 <uarte_nrfx_configure+0x100>
   1cb4c:	d808      	bhi.n	1cb60 <uarte_nrfx_configure+0x50>
   1cb4e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1cb52:	d060      	beq.n	1cc16 <uarte_nrfx_configure+0x106>
   1cb54:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1cb58:	d060      	beq.n	1cc1c <uarte_nrfx_configure+0x10c>
   1cb5a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1cb5e:	e051      	b.n	1cc04 <uarte_nrfx_configure+0xf4>
   1cb60:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1cb64:	d05d      	beq.n	1cc22 <uarte_nrfx_configure+0x112>
   1cb66:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1cb6a:	d1f6      	bne.n	1cb5a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1cb6c:	4b37      	ldr	r3, [pc, #220]	; (1cc4c <uarte_nrfx_configure+0x13c>)
   1cb6e:	e03c      	b.n	1cbea <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1cb70:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1cb74:	d058      	beq.n	1cc28 <uarte_nrfx_configure+0x118>
   1cb76:	d807      	bhi.n	1cb88 <uarte_nrfx_configure+0x78>
   1cb78:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1cb7c:	d056      	beq.n	1cc2c <uarte_nrfx_configure+0x11c>
   1cb7e:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1cb82:	d1ea      	bne.n	1cb5a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1cb84:	4b32      	ldr	r3, [pc, #200]	; (1cc50 <uarte_nrfx_configure+0x140>)
   1cb86:	e030      	b.n	1cbea <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1cb88:	f647 2412 	movw	r4, #31250	; 0x7a12
   1cb8c:	42a3      	cmp	r3, r4
   1cb8e:	d1e4      	bne.n	1cb5a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1cb90:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1cb94:	e029      	b.n	1cbea <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1cb96:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1cb9a:	d049      	beq.n	1cc30 <uarte_nrfx_configure+0x120>
   1cb9c:	d813      	bhi.n	1cbc6 <uarte_nrfx_configure+0xb6>
   1cb9e:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1cba2:	d048      	beq.n	1cc36 <uarte_nrfx_configure+0x126>
   1cba4:	d809      	bhi.n	1cbba <uarte_nrfx_configure+0xaa>
   1cba6:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   1cbaa:	42a3      	cmp	r3, r4
   1cbac:	d045      	beq.n	1cc3a <uarte_nrfx_configure+0x12a>
   1cbae:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1cbb2:	d1d2      	bne.n	1cb5a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1cbb4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1cbb8:	e017      	b.n	1cbea <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1cbba:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1cbbe:	d1cc      	bne.n	1cb5a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1cbc0:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1cbc4:	e011      	b.n	1cbea <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1cbc6:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1cbca:	d039      	beq.n	1cc40 <uarte_nrfx_configure+0x130>
   1cbcc:	d808      	bhi.n	1cbe0 <uarte_nrfx_configure+0xd0>
   1cbce:	4c21      	ldr	r4, [pc, #132]	; (1cc54 <uarte_nrfx_configure+0x144>)
   1cbd0:	42a3      	cmp	r3, r4
   1cbd2:	d038      	beq.n	1cc46 <uarte_nrfx_configure+0x136>
   1cbd4:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1cbd8:	d1bf      	bne.n	1cb5a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1cbda:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1cbde:	e004      	b.n	1cbea <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1cbe0:	4c1d      	ldr	r4, [pc, #116]	; (1cc58 <uarte_nrfx_configure+0x148>)
   1cbe2:	42a3      	cmp	r3, r4
   1cbe4:	d1b9      	bne.n	1cb5a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1cbe6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   1cbea:	6904      	ldr	r4, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1cbec:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
	return config->uarte_regs;
   1cbf0:	6843      	ldr	r3, [r0, #4]
   1cbf2:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
   1cbf4:	432a      	orrs	r2, r5
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1cbf6:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
	data->uart_config = *cfg;
   1cbfa:	c903      	ldmia	r1, {r0, r1}
   1cbfc:	1d23      	adds	r3, r4, #4
   1cbfe:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
   1cc02:	2000      	movs	r0, #0
}
   1cc04:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1cc06:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1cc0a:	e7ee      	b.n	1cbea <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1cc0c:	4b13      	ldr	r3, [pc, #76]	; (1cc5c <uarte_nrfx_configure+0x14c>)
   1cc0e:	e7ec      	b.n	1cbea <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1cc10:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1cc14:	e7e9      	b.n	1cbea <uarte_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
   1cc16:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1cc1a:	e7e6      	b.n	1cbea <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   1cc1c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1cc20:	e7e3      	b.n	1cbea <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1cc22:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1cc26:	e7e0      	b.n	1cbea <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1cc28:	4b0d      	ldr	r3, [pc, #52]	; (1cc60 <uarte_nrfx_configure+0x150>)
   1cc2a:	e7de      	b.n	1cbea <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1cc2c:	4b0d      	ldr	r3, [pc, #52]	; (1cc64 <uarte_nrfx_configure+0x154>)
   1cc2e:	e7dc      	b.n	1cbea <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1cc30:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1cc34:	e7d9      	b.n	1cbea <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1cc36:	4b0c      	ldr	r3, [pc, #48]	; (1cc68 <uarte_nrfx_configure+0x158>)
   1cc38:	e7d7      	b.n	1cbea <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1cc3a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1cc3e:	e7d4      	b.n	1cbea <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1cc40:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1cc44:	e7d1      	b.n	1cbea <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1cc46:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1cc4a:	e7ce      	b.n	1cbea <uarte_nrfx_configure+0xda>
   1cc4c:	0013b000 	.word	0x0013b000
   1cc50:	004ea000 	.word	0x004ea000
   1cc54:	0003d090 	.word	0x0003d090
   1cc58:	000f4240 	.word	0x000f4240
   1cc5c:	00275000 	.word	0x00275000
   1cc60:	0075c000 	.word	0x0075c000
   1cc64:	003af000 	.word	0x003af000
   1cc68:	013a9000 	.word	0x013a9000

0001cc6c <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1cc6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cc70:	2200      	movs	r2, #0
   1cc72:	b087      	sub	sp, #28
   1cc74:	4607      	mov	r7, r0
   1cc76:	2101      	movs	r1, #1
   1cc78:	2002      	movs	r0, #2
   1cc7a:	f7f7 ff0f 	bl	14a9c <z_arm_irq_priority_set>
   1cc7e:	2002      	movs	r0, #2
   1cc80:	f7f7 fedc 	bl	14a3c <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
   1cc84:	f8d7 9004 	ldr.w	r9, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   1cc88:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
   1cc8a:	f8d9 4000 	ldr.w	r4, [r9]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1cc8e:	2100      	movs	r1, #0
   1cc90:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
   1cc94:	6037      	str	r7, [r6, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
   1cc96:	f8d9 800c 	ldr.w	r8, [r9, #12]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   1cc9a:	466a      	mov	r2, sp
   1cc9c:	4640      	mov	r0, r8
   1cc9e:	f009 f9a5 	bl	25fec <pinctrl_lookup_state>
	if (ret < 0) {
   1cca2:	1e05      	subs	r5, r0, #0
   1cca4:	db26      	blt.n	1ccf4 <uarte_0_init+0x88>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   1cca6:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   1cca8:	f8d8 2000 	ldr.w	r2, [r8]
   1ccac:	7919      	ldrb	r1, [r3, #4]
   1ccae:	6818      	ldr	r0, [r3, #0]
   1ccb0:	f009 f9af 	bl	26012 <pinctrl_configure_pins>
	if (err < 0) {
   1ccb4:	1e05      	subs	r5, r0, #0
   1ccb6:	db1d      	blt.n	1ccf4 <uarte_0_init+0x88>
	err = uarte_nrfx_configure(dev, &data->uart_config);
   1ccb8:	1d31      	adds	r1, r6, #4
   1ccba:	4638      	mov	r0, r7
   1ccbc:	f7ff ff28 	bl	1cb10 <uarte_nrfx_configure>
	if (err) {
   1ccc0:	4605      	mov	r5, r0
   1ccc2:	b9b8      	cbnz	r0, 1ccf4 <uarte_0_init+0x88>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1ccc4:	f8d9 3004 	ldr.w	r3, [r9, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   1ccc8:	0799      	lsls	r1, r3, #30
   1ccca:	d523      	bpl.n	1cd14 <uarte_0_init+0xa8>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1cccc:	f106 001c 	add.w	r0, r6, #28
   1ccd0:	f002 fd78 	bl	1f7c4 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1ccd4:	4b47      	ldr	r3, [pc, #284]	; (1cdf4 <uarte_0_init+0x188>)
   1ccd6:	4298      	cmp	r0, r3
   1ccd8:	d010      	beq.n	1ccfc <uarte_0_init+0x90>
		LOG_ERR("Failed to allocate PPI Channel");
   1ccda:	4b47      	ldr	r3, [pc, #284]	; (1cdf8 <uarte_0_init+0x18c>)
   1ccdc:	9305      	str	r3, [sp, #20]
   1ccde:	2302      	movs	r3, #2
   1cce0:	9304      	str	r3, [sp, #16]
   1cce2:	4846      	ldr	r0, [pc, #280]	; (1cdfc <uarte_0_init+0x190>)
   1cce4:	462b      	mov	r3, r5
   1cce6:	aa04      	add	r2, sp, #16
   1cce8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
   1ccec:	f06f 0504 	mvn.w	r5, #4
   1ccf0:	f7f7 f94c 	bl	13f8c <z_impl_z_log_msg_static_create>
UART_NRF_UARTE_DEVICE(0);
   1ccf4:	4628      	mov	r0, r5
   1ccf6:	b007      	add	sp, #28
   1ccf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1ccfc:	7f30      	ldrb	r0, [r6, #28]
   1ccfe:	f104 020c 	add.w	r2, r4, #12
   1cd02:	f504 7190 	add.w	r1, r4, #288	; 0x120
   1cd06:	f009 fd59 	bl	267bc <nrfx_gppi_channel_endpoints_setup>
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1cd0a:	7f33      	ldrb	r3, [r6, #28]
   1cd0c:	2001      	movs	r0, #1
   1cd0e:	4098      	lsls	r0, r3
   1cd10:	f002 f93a 	bl	1ef88 <nrfx_gppi_channels_enable>
	if (data->async) {
   1cd14:	68f3      	ldr	r3, [r6, #12]
   1cd16:	2b00      	cmp	r3, #0
   1cd18:	d059      	beq.n	1cdce <uarte_0_init+0x162>
	return config->uarte_regs;
   1cd1a:	687b      	ldr	r3, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
   1cd1c:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return config->uarte_regs;
   1cd20:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1cd22:	2204      	movs	r2, #4
   1cd24:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   1cd28:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1cd2c:	2201      	movs	r2, #1
   1cd2e:	f8c1 20c0 	str.w	r2, [r1, #192]	; 0xc0
   1cd32:	4933      	ldr	r1, [pc, #204]	; (1ce00 <uarte_0_init+0x194>)
   1cd34:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1cd38:	2108      	movs	r1, #8
   1cd3a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1cd3e:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1cd42:	b1a1      	cbz	r1, 1cd6e <uarte_0_init+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cd44:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1cd46:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1cd4a:	b91a      	cbnz	r2, 1cd54 <uarte_0_init+0xe8>
   1cd4c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   1cd50:	2a00      	cmp	r2, #0
   1cd52:	d0f8      	beq.n	1cd46 <uarte_0_init+0xda>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cd54:	2200      	movs	r2, #0
   1cd56:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
   1cd5a:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
   1cd5e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   1cd62:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   1cd66:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   1cd6a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   1cd6e:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1cd72:	4924      	ldr	r1, [pc, #144]	; (1ce04 <uarte_0_init+0x198>)
   1cd74:	2200      	movs	r2, #0
   1cd76:	3080      	adds	r0, #128	; 0x80
   1cd78:	f009 feed 	bl	26b56 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   1cd7c:	f8d8 300c 	ldr.w	r3, [r8, #12]
	timer->user_data = user_data;
   1cd80:	f8c3 80b4 	str.w	r8, [r3, #180]	; 0xb4
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   1cd84:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1cd88:	491f      	ldr	r1, [pc, #124]	; (1ce08 <uarte_0_init+0x19c>)
   1cd8a:	2200      	movs	r2, #0
   1cd8c:	3020      	adds	r0, #32
   1cd8e:	f009 fee2 	bl	26b56 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   1cd92:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1cd96:	f8c3 8054 	str.w	r8, [r3, #84]	; 0x54
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1cd9a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1cd9e:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   1cda0:	bf5c      	itt	pl
   1cda2:	f44f 7380 	movpl.w	r3, #256	; 0x100
   1cda6:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1cdaa:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1cdae:	06db      	lsls	r3, r3, #27
   1cdb0:	bf44      	itt	mi
   1cdb2:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   1cdb6:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
{
#if NRF_UARTE_HAS_DMA_REG
    p_reg->DMA.TX.PTR    = (uint32_t)p_buffer;
    p_reg->DMA.TX.MAXCNT = length;
#else
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1cdba:	6973      	ldr	r3, [r6, #20]
   1cdbc:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1cdc0:	2300      	movs	r3, #0
   1cdc2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cdc6:	2301      	movs	r3, #1
   1cdc8:	60a3      	str	r3, [r4, #8]
   1cdca:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   1cdcc:	e792      	b.n	1ccf4 <uarte_0_init+0x88>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1cdce:	2308      	movs	r3, #8
   1cdd0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   1cdd4:	f899 3008 	ldrb.w	r3, [r9, #8]
   1cdd8:	2b00      	cmp	r3, #0
   1cdda:	d1de      	bne.n	1cd9a <uarte_0_init+0x12e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cddc:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1cde0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
{
#if NRF_UARTE_HAS_DMA_REG
    p_reg->DMA.RX.PTR    = (uint32_t)p_buffer;
    p_reg->DMA.RX.MAXCNT = length;
#else
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1cde4:	69b3      	ldr	r3, [r6, #24]
   1cde6:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1cdea:	2301      	movs	r3, #1
   1cdec:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cdf0:	6023      	str	r3, [r4, #0]
}
   1cdf2:	e7d2      	b.n	1cd9a <uarte_0_init+0x12e>
   1cdf4:	0bad0000 	.word	0x0bad0000
   1cdf8:	0002a501 	.word	0x0002a501
   1cdfc:	000270b4 	.word	0x000270b4
   1ce00:	000a0210 	.word	0x000a0210
   1ce04:	00026497 	.word	0x00026497
   1ce08:	00026567 	.word	0x00026567

0001ce0c <uarte_nrfx_poll_out>:
{
   1ce0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ce10:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   1ce12:	6905      	ldr	r5, [r0, #16]
{
   1ce14:	460e      	mov	r6, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1ce16:	f009 fd81 	bl	2691c <k_is_in_isr>
   1ce1a:	b9b0      	cbnz	r0, 1ce4a <uarte_nrfx_poll_out+0x3e>
	return !z_sys_post_kernel;
   1ce1c:	4b2a      	ldr	r3, [pc, #168]	; (1cec8 <uarte_nrfx_poll_out+0xbc>)
   1ce1e:	781b      	ldrb	r3, [r3, #0]
   1ce20:	b19b      	cbz	r3, 1ce4a <uarte_nrfx_poll_out+0x3e>
{
   1ce22:	2764      	movs	r7, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1ce24:	6860      	ldr	r0, [r4, #4]
   1ce26:	f009 fb0b 	bl	26440 <is_tx_ready.isra.0>
   1ce2a:	2800      	cmp	r0, #0
   1ce2c:	d138      	bne.n	1cea0 <uarte_nrfx_poll_out+0x94>
   1ce2e:	2001      	movs	r0, #1
   1ce30:	f009 fcc2 	bl	267b8 <nrfx_busy_wait>
   1ce34:	3f01      	subs	r7, #1
   1ce36:	d1f5      	bne.n	1ce24 <uarte_nrfx_poll_out+0x18>
	return z_impl_k_sleep(timeout);
   1ce38:	2100      	movs	r1, #0
   1ce3a:	2021      	movs	r0, #33	; 0x21
   1ce3c:	f005 fb40 	bl	224c0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1ce40:	e7ef      	b.n	1ce22 <uarte_nrfx_poll_out+0x16>
   1ce42:	f381 8811 	msr	BASEPRI, r1
   1ce46:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1ce4a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ce4e:	f3ef 8111 	mrs	r1, BASEPRI
   1ce52:	f383 8812 	msr	BASEPRI_MAX, r3
   1ce56:	f3bf 8f6f 	isb	sy
   1ce5a:	f8d4 8004 	ldr.w	r8, [r4, #4]
			if (is_tx_ready(dev)) {
   1ce5e:	4640      	mov	r0, r8
   1ce60:	460f      	mov	r7, r1
   1ce62:	f009 faed 	bl	26440 <is_tx_ready.isra.0>
   1ce66:	2800      	cmp	r0, #0
   1ce68:	d0eb      	beq.n	1ce42 <uarte_nrfx_poll_out+0x36>
				if (data->async && data->async->tx_size &&
   1ce6a:	68eb      	ldr	r3, [r5, #12]
   1ce6c:	b15b      	cbz	r3, 1ce86 <uarte_nrfx_poll_out+0x7a>
   1ce6e:	68da      	ldr	r2, [r3, #12]
   1ce70:	b14a      	cbz	r2, 1ce86 <uarte_nrfx_poll_out+0x7a>
					data->async->tx_amount < 0) {
   1ce72:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
				if (data->async && data->async->tx_size &&
   1ce76:	2a00      	cmp	r2, #0
   1ce78:	da05      	bge.n	1ce86 <uarte_nrfx_poll_out+0x7a>
	return config->uarte_regs;
   1ce7a:	f8d8 2000 	ldr.w	r2, [r8]
    return p_reg->TXD.AMOUNT;
   1ce7e:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   1ce82:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	*data->char_out = c;
   1ce86:	696b      	ldr	r3, [r5, #20]
   1ce88:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
   1ce8a:	6969      	ldr	r1, [r5, #20]
   1ce8c:	2201      	movs	r2, #1
   1ce8e:	4620      	mov	r0, r4
   1ce90:	f009 f97d 	bl	2618e <tx_start>
	__asm__ volatile(
   1ce94:	f387 8811 	msr	BASEPRI, r7
   1ce98:	f3bf 8f6f 	isb	sy
}
   1ce9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1cea0:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cea4:	f3ef 8111 	mrs	r1, BASEPRI
   1cea8:	f383 8812 	msr	BASEPRI_MAX, r3
   1ceac:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1ceb0:	6860      	ldr	r0, [r4, #4]
   1ceb2:	460f      	mov	r7, r1
   1ceb4:	f009 fac4 	bl	26440 <is_tx_ready.isra.0>
   1ceb8:	2800      	cmp	r0, #0
   1ceba:	d1e4      	bne.n	1ce86 <uarte_nrfx_poll_out+0x7a>
	__asm__ volatile(
   1cebc:	f381 8811 	msr	BASEPRI, r1
   1cec0:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1cec4:	e7b8      	b.n	1ce38 <uarte_nrfx_poll_out+0x2c>
   1cec6:	bf00      	nop
   1cec8:	200035b4 	.word	0x200035b4

0001cecc <uarte_nrfx_rx_enable>:
{
   1cecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct uarte_nrfx_config *cfg = dev->config;
   1ced0:	f8d0 a004 	ldr.w	sl, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   1ced4:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
   1ced6:	f8da 9000 	ldr.w	r9, [sl]
{
   1ceda:	4617      	mov	r7, r2
	if (cfg->disable_rx) {
   1cedc:	f89a 2008 	ldrb.w	r2, [sl, #8]
{
   1cee0:	4605      	mov	r5, r0
   1cee2:	4688      	mov	r8, r1
	if (cfg->disable_rx) {
   1cee4:	b172      	cbz	r2, 1cf04 <uarte_nrfx_rx_enable+0x38>
		__ASSERT(false, "TX only UARTE instance");
   1cee6:	4946      	ldr	r1, [pc, #280]	; (1d000 <uarte_nrfx_rx_enable+0x134>)
   1cee8:	4a46      	ldr	r2, [pc, #280]	; (1d004 <uarte_nrfx_rx_enable+0x138>)
   1ceea:	4847      	ldr	r0, [pc, #284]	; (1d008 <uarte_nrfx_rx_enable+0x13c>)
   1ceec:	f240 3342 	movw	r3, #834	; 0x342
   1cef0:	f007 f9a8 	bl	24244 <assert_print>
   1cef4:	4845      	ldr	r0, [pc, #276]	; (1d00c <uarte_nrfx_rx_enable+0x140>)
   1cef6:	f007 f9a5 	bl	24244 <assert_print>
   1cefa:	4842      	ldr	r0, [pc, #264]	; (1d004 <uarte_nrfx_rx_enable+0x138>)
   1cefc:	f240 3142 	movw	r1, #834	; 0x342
   1cf00:	f007 f999 	bl	24236 <assert_post_action>
	if (data->async->rx_enabled || data->async->discard_rx_fifo) {
   1cf04:	68e2      	ldr	r2, [r4, #12]
   1cf06:	f892 10ca 	ldrb.w	r1, [r2, #202]	; 0xca
   1cf0a:	2900      	cmp	r1, #0
   1cf0c:	d175      	bne.n	1cffa <uarte_nrfx_rx_enable+0x12e>
   1cf0e:	f892 10cb 	ldrb.w	r1, [r2, #203]	; 0xcb
   1cf12:	2900      	cmp	r1, #0
   1cf14:	d171      	bne.n	1cffa <uarte_nrfx_rx_enable+0x12e>
	data->async->rx_timeout = timeout;
   1cf16:	6753      	str	r3, [r2, #116]	; 0x74
		MAX(timeout / RX_TIMEOUT_DIV,
   1cf18:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
   1cf1c:	bfc4      	itt	gt
   1cf1e:	2205      	movgt	r2, #5
   1cf20:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
   1cf24:	68e2      	ldr	r2, [r4, #12]
		MAX(timeout / RX_TIMEOUT_DIV,
   1cf26:	bfd8      	it	le
   1cf28:	235c      	movle	r3, #92	; 0x5c
	data->async->rx_timeout_slab =
   1cf2a:	6793      	str	r3, [r2, #120]	; 0x78
	data->async->rx_buf = buf;
   1cf2c:	68e3      	ldr	r3, [r4, #12]
   1cf2e:	f8c3 8058 	str.w	r8, [r3, #88]	; 0x58
	data->async->rx_buf_len = len;
   1cf32:	68e3      	ldr	r3, [r4, #12]
   1cf34:	65df      	str	r7, [r3, #92]	; 0x5c
	data->async->rx_offset = 0;
   1cf36:	68e2      	ldr	r2, [r4, #12]
   1cf38:	2300      	movs	r3, #0
   1cf3a:	6613      	str	r3, [r2, #96]	; 0x60
	data->async->rx_next_buf = NULL;
   1cf3c:	68e2      	ldr	r2, [r4, #12]
   1cf3e:	6653      	str	r3, [r2, #100]	; 0x64
	data->async->rx_next_buf_len = 0;
   1cf40:	68e2      	ldr	r2, [r4, #12]
   1cf42:	6693      	str	r3, [r2, #104]	; 0x68
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1cf44:	f8da 3004 	ldr.w	r3, [sl, #4]
   1cf48:	06da      	lsls	r2, r3, #27
   1cf4a:	d523      	bpl.n	1cf94 <uarte_nrfx_rx_enable+0xc8>
		if (data->async->rx_flush_cnt) {
   1cf4c:	68e1      	ldr	r1, [r4, #12]
   1cf4e:	f891 60c9 	ldrb.w	r6, [r1, #201]	; 0xc9
   1cf52:	b1fe      	cbz	r6, 1cf94 <uarte_nrfx_rx_enable+0xc8>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   1cf54:	42be      	cmp	r6, r7
   1cf56:	bf28      	it	cs
   1cf58:	463e      	movcs	r6, r7
			memcpy(buf, data->async->rx_flush_buffer, cpy_len);
   1cf5a:	4640      	mov	r0, r8
   1cf5c:	4632      	mov	r2, r6
   1cf5e:	31c4      	adds	r1, #196	; 0xc4
   1cf60:	f007 fd74 	bl	24a4c <memcpy>
			if (!len) {
   1cf64:	1bbf      	subs	r7, r7, r6
			buf += cpy_len;
   1cf66:	44b0      	add	r8, r6
			if (!len) {
   1cf68:	d114      	bne.n	1cf94 <uarte_nrfx_rx_enable+0xc8>
				data->async->rx_flush_cnt -= cpy_len;
   1cf6a:	68e2      	ldr	r2, [r4, #12]
   1cf6c:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
   1cf70:	1b9b      	subs	r3, r3, r6
   1cf72:	f882 30c9 	strb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
   1cf76:	4631      	mov	r1, r6
   1cf78:	4628      	mov	r0, r5
   1cf7a:	f009 f937 	bl	261ec <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
   1cf7e:	68e1      	ldr	r1, [r4, #12]
   1cf80:	4628      	mov	r0, r5
   1cf82:	3158      	adds	r1, #88	; 0x58
   1cf84:	f009 f94b 	bl	2621e <rx_buf_release>
				notify_rx_disable(dev);
   1cf88:	4628      	mov	r0, r5
   1cf8a:	f009 f960 	bl	2624e <notify_rx_disable>
	return 0;
   1cf8e:	2000      	movs	r0, #0
}
   1cf90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cf94:	2300      	movs	r3, #0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1cf96:	f8c9 8534 	str.w	r8, [r9, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1cf9a:	f8c9 7538 	str.w	r7, [r9, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1cf9e:	f8c9 3110 	str.w	r3, [r9, #272]	; 0x110
   1cfa2:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
   1cfa6:	f8c9 314c 	str.w	r3, [r9, #332]	; 0x14c
   1cfaa:	f8d9 314c 	ldr.w	r3, [r9, #332]	; 0x14c
	data->async->rx_enabled = true;
   1cfae:	68e3      	ldr	r3, [r4, #12]
   1cfb0:	2201      	movs	r2, #1
   1cfb2:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1cfb6:	f8da 3004 	ldr.w	r3, [sl, #4]
   1cfba:	06db      	lsls	r3, r3, #27
   1cfbc:	d519      	bpl.n	1cff2 <uarte_nrfx_rx_enable+0x126>
	__asm__ volatile(
   1cfbe:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cfc2:	f3ef 8111 	mrs	r1, BASEPRI
   1cfc6:	f383 8812 	msr	BASEPRI_MAX, r3
   1cfca:	f3bf 8f6f 	isb	sy
	if (data->async) {
   1cfce:	692b      	ldr	r3, [r5, #16]
   1cfd0:	68db      	ldr	r3, [r3, #12]
   1cfd2:	b12b      	cbz	r3, 1cfe0 <uarte_nrfx_rx_enable+0x114>
		data->async->low_power_mask |= mask;
   1cfd4:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
   1cfd8:	f042 0202 	orr.w	r2, r2, #2
   1cfdc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	return config->uarte_regs;
   1cfe0:	686b      	ldr	r3, [r5, #4]
   1cfe2:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1cfe4:	2208      	movs	r2, #8
   1cfe6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   1cfea:	f381 8811 	msr	BASEPRI, r1
   1cfee:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cff2:	2301      	movs	r3, #1
   1cff4:	f8c9 3000 	str.w	r3, [r9]
	return 0;
   1cff8:	e7c9      	b.n	1cf8e <uarte_nrfx_rx_enable+0xc2>
		return -EBUSY;
   1cffa:	f06f 000f 	mvn.w	r0, #15
   1cffe:	e7c7      	b.n	1cf90 <uarte_nrfx_rx_enable+0xc4>
   1d000:	0002a7c0 	.word	0x0002a7c0
   1d004:	0002a520 	.word	0x0002a520
   1d008:	00027c2a 	.word	0x00027c2a
   1d00c:	0002a554 	.word	0x0002a554

0001d010 <uarte_nrfx_isr_async>:
{
   1d010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   1d014:	6843      	ldr	r3, [r0, #4]
   1d016:	681d      	ldr	r5, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
   1d018:	6903      	ldr	r3, [r0, #16]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d01a:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
{
   1d01e:	b088      	sub	sp, #32
   1d020:	4604      	mov	r4, r0
	if (!HW_RX_COUNTING_ENABLED(data)
   1d022:	b169      	cbz	r1, 1d040 <uarte_nrfx_isr_async+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d024:	2200      	movs	r2, #0
   1d026:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
   1d02a:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
   1d02e:	68da      	ldr	r2, [r3, #12]
   1d030:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   1d034:	3301      	adds	r3, #1
   1d036:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
}
   1d03a:	b008      	add	sp, #32
   1d03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d040:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   1d044:	b323      	cbz	r3, 1d090 <uarte_nrfx_isr_async+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d046:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
   1d04a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	return config->uarte_regs;
   1d04e:	6843      	ldr	r3, [r0, #4]
   1d050:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1d052:	f8d3 6480 	ldr.w	r6, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1d056:	f8c3 6480 	str.w	r6, [r3, #1152]	; 0x480
	struct uart_event evt = {
   1d05a:	2214      	movs	r2, #20
   1d05c:	a803      	add	r0, sp, #12
   1d05e:	f007 fd00 	bl	24a62 <memset>
   1d062:	2306      	movs	r3, #6
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1d064:	07f2      	lsls	r2, r6, #31
	struct uart_event evt = {
   1d066:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1d06a:	f100 810c 	bmi.w	1d286 <uarte_nrfx_isr_async+0x276>
   1d06e:	07b3      	lsls	r3, r6, #30
   1d070:	f100 810b 	bmi.w	1d28a <uarte_nrfx_isr_async+0x27a>
   1d074:	0777      	lsls	r7, r6, #29
   1d076:	f100 810a 	bmi.w	1d28e <uarte_nrfx_isr_async+0x27e>
   1d07a:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
   1d07e:	4620      	mov	r0, r4
   1d080:	a903      	add	r1, sp, #12
	struct uart_event evt = {
   1d082:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
   1d086:	f009 f8aa 	bl	261de <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
   1d08a:	4620      	mov	r0, r4
   1d08c:	f009 f93d 	bl	2630a <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d090:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
   1d094:	2b00      	cmp	r3, #0
   1d096:	d033      	beq.n	1d100 <uarte_nrfx_isr_async+0xf0>
    return p_reg->INTENSET & mask;
   1d098:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
   1d09c:	06d8      	lsls	r0, r3, #27
   1d09e:	d52f      	bpl.n	1d100 <uarte_nrfx_isr_async+0xf0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d0a0:	f04f 0800 	mov.w	r8, #0
   1d0a4:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
	struct uarte_nrfx_data *data = dev->data;
   1d0a8:	6926      	ldr	r6, [r4, #16]
   1d0aa:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
   1d0ae:	6863      	ldr	r3, [r4, #4]
   1d0b0:	681f      	ldr	r7, [r3, #0]
	data->async->is_in_irq = true;
   1d0b2:	68f3      	ldr	r3, [r6, #12]
   1d0b4:	2201      	movs	r2, #1
   1d0b6:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	k_timer_stop(&data->async->rx_timeout_timer);
   1d0ba:	68f0      	ldr	r0, [r6, #12]
   1d0bc:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   1d0be:	f009 fd56 	bl	26b6e <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
   1d0c2:	68f2      	ldr	r2, [r6, #12]
NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
#if NRF_UARTE_HAS_DMA_REG
    return p_reg->DMA.RX.AMOUNT;
#else
    return p_reg->RXD.AMOUNT;
   1d0c4:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
   1d0c8:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
	data->async->rx_flush_cnt = 0;
   1d0cc:	f882 80c9 	strb.w	r8, [r2, #201]	; 0xc9
	int rx_len = rx_amount - data->async->rx_offset;
   1d0d0:	68f2      	ldr	r2, [r6, #12]
   1d0d2:	6e10      	ldr	r0, [r2, #96]	; 0x60
   1d0d4:	1a1b      	subs	r3, r3, r0
   1d0d6:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
   1d0d8:	6f10      	ldr	r0, [r2, #112]	; 0x70
	if (rx_len < 0) {
   1d0da:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
	data->async->rx_total_user_byte_cnt += rx_len;
   1d0de:	4408      	add	r0, r1
	if (rx_len > 0) {
   1d0e0:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
   1d0e2:	6710      	str	r0, [r2, #112]	; 0x70
	if (rx_len > 0) {
   1d0e4:	dd02      	ble.n	1d0ec <uarte_nrfx_isr_async+0xdc>
		notify_uart_rx_rdy(dev, rx_len);
   1d0e6:	4620      	mov	r0, r4
   1d0e8:	f009 f880 	bl	261ec <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
   1d0ec:	68f1      	ldr	r1, [r6, #12]
   1d0ee:	f891 30ca 	ldrb.w	r3, [r1, #202]	; 0xca
   1d0f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   1d0f6:	2b00      	cmp	r3, #0
   1d0f8:	f040 80cb 	bne.w	1d292 <uarte_nrfx_isr_async+0x282>
		data->async->is_in_irq = false;
   1d0fc:	f881 20ce 	strb.w	r2, [r1, #206]	; 0xce
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d100:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
   1d104:	b383      	cbz	r3, 1d168 <uarte_nrfx_isr_async+0x158>
   1d106:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1d10a:	bb6e      	cbnz	r6, 1d168 <uarte_nrfx_isr_async+0x158>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d10c:	f8c5 614c 	str.w	r6, [r5, #332]	; 0x14c
	struct uart_event evt = {
   1d110:	2214      	movs	r2, #20
	struct uarte_nrfx_data *data = dev->data;
   1d112:	6927      	ldr	r7, [r4, #16]
   1d114:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	struct uart_event evt = {
   1d118:	4631      	mov	r1, r6
   1d11a:	a803      	add	r0, sp, #12
   1d11c:	f007 fca1 	bl	24a62 <memset>
   1d120:	2303      	movs	r3, #3
	user_callback(dev, &evt);
   1d122:	a903      	add	r1, sp, #12
   1d124:	4620      	mov	r0, r4
	struct uart_event evt = {
   1d126:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
   1d12a:	f009 f858 	bl	261de <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
   1d12e:	68fb      	ldr	r3, [r7, #12]
   1d130:	6f5a      	ldr	r2, [r3, #116]	; 0x74
   1d132:	1c51      	adds	r1, r2, #1
   1d134:	d018      	beq.n	1d168 <uarte_nrfx_isr_async+0x158>
		data->async->rx_timeout_left = data->async->rx_timeout;
   1d136:	67da      	str	r2, [r3, #124]	; 0x7c
		k_timer_start(&data->async->rx_timeout_timer,
   1d138:	68ff      	ldr	r7, [r7, #12]
   1d13a:	498f      	ldr	r1, [pc, #572]	; (1d378 <uarte_nrfx_isr_async+0x368>)
			      K_USEC(data->async->rx_timeout_slab),
   1d13c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
   1d13e:	4a8f      	ldr	r2, [pc, #572]	; (1d37c <uarte_nrfx_isr_async+0x36c>)
   1d140:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
   1d144:	468e      	mov	lr, r1
   1d146:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1d14a:	4631      	mov	r1, r6
   1d14c:	fbcc e100 	smlal	lr, r1, ip, r0
   1d150:	2300      	movs	r3, #0
   1d152:	4670      	mov	r0, lr
   1d154:	f7e3 fb92 	bl	87c <__aeabi_uldivmod>
   1d158:	4602      	mov	r2, r0
   1d15a:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   1d15c:	e9cd 0100 	strd	r0, r1, [sp]
   1d160:	f107 0080 	add.w	r0, r7, #128	; 0x80
   1d164:	f005 fe3e 	bl	22de4 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d168:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   1d16c:	b363      	cbz	r3, 1d1c8 <uarte_nrfx_isr_async+0x1b8>
   1d16e:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
   1d172:	bb4e      	cbnz	r6, 1d1c8 <uarte_nrfx_isr_async+0x1b8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d174:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	struct uarte_nrfx_data *data = dev->data;
   1d178:	6927      	ldr	r7, [r4, #16]
   1d17a:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	rx_buf_release(dev, &data->async->rx_buf);
   1d17e:	68f9      	ldr	r1, [r7, #12]
	const struct uarte_nrfx_config *config = dev->config;
   1d180:	f8d4 8004 	ldr.w	r8, [r4, #4]
	rx_buf_release(dev, &data->async->rx_buf);
   1d184:	3158      	adds	r1, #88	; 0x58
   1d186:	4620      	mov	r0, r4
   1d188:	f009 f849 	bl	2621e <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
   1d18c:	68f9      	ldr	r1, [r7, #12]
   1d18e:	4620      	mov	r0, r4
   1d190:	3164      	adds	r1, #100	; 0x64
   1d192:	f009 f844 	bl	2621e <rx_buf_release>
	data->async->rx_enabled = false;
   1d196:	68fb      	ldr	r3, [r7, #12]
   1d198:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
	if (data->async->discard_rx_fifo) {
   1d19c:	68fb      	ldr	r3, [r7, #12]
   1d19e:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
   1d1a2:	b132      	cbz	r2, 1d1b2 <uarte_nrfx_isr_async+0x1a2>
		data->async->discard_rx_fifo = false;
   1d1a4:	f883 60cb 	strb.w	r6, [r3, #203]	; 0xcb
		(void)rx_flush(dev, NULL, 0);
   1d1a8:	6860      	ldr	r0, [r4, #4]
   1d1aa:	4632      	mov	r2, r6
   1d1ac:	4631      	mov	r1, r6
   1d1ae:	f009 f8e9 	bl	26384 <rx_flush.isra.0>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d1b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1d1b6:	06d8      	lsls	r0, r3, #27
   1d1b8:	d503      	bpl.n	1d1c2 <uarte_nrfx_isr_async+0x1b2>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
   1d1ba:	2102      	movs	r1, #2
   1d1bc:	4620      	mov	r0, r4
   1d1be:	f009 f915 	bl	263ec <async_uart_release>
	notify_rx_disable(dev);
   1d1c2:	4620      	mov	r0, r4
   1d1c4:	f009 f843 	bl	2624e <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d1c8:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
   1d1cc:	b1db      	cbz	r3, 1d206 <uarte_nrfx_isr_async+0x1f6>
    return p_reg->INTENSET & mask;
   1d1ce:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
   1d1d2:	05d9      	lsls	r1, r3, #23
   1d1d4:	d517      	bpl.n	1d206 <uarte_nrfx_isr_async+0x1f6>
	return config->uarte_regs;
   1d1d6:	6863      	ldr	r3, [r4, #4]
   1d1d8:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   1d1da:	f04f 0140 	mov.w	r1, #64	; 0x40
   1d1de:	f3ef 8211 	mrs	r2, BASEPRI
   1d1e2:	f381 8812 	msr	BASEPRI_MAX, r1
   1d1e6:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d1ea:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1d1ee:	b131      	cbz	r1, 1d1fe <uarte_nrfx_isr_async+0x1ee>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1d1f0:	2100      	movs	r1, #0
   1d1f2:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1d1f6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d1fa:	2101      	movs	r1, #1
   1d1fc:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1d1fe:	f382 8811 	msr	BASEPRI, r2
   1d202:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d206:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
   1d20a:	2b00      	cmp	r3, #0
   1d20c:	f43f af15 	beq.w	1d03a <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
   1d210:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
   1d214:	025a      	lsls	r2, r3, #9
   1d216:	f57f af10 	bpl.w	1d03a <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = dev->config;
   1d21a:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = dev->data;
   1d21c:	6925      	ldr	r5, [r4, #16]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1d21e:	e9d3 7300 	ldrd	r7, r3, [r3]
   1d222:	06db      	lsls	r3, r3, #27
   1d224:	d466      	bmi.n	1d2f4 <uarte_nrfx_isr_async+0x2e4>
	if (!data->async->tx_buf) {
   1d226:	68eb      	ldr	r3, [r5, #12]
   1d228:	689b      	ldr	r3, [r3, #8]
   1d22a:	2b00      	cmp	r3, #0
   1d22c:	f43f af05 	beq.w	1d03a <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
   1d230:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d234:	f3ef 8211 	mrs	r2, BASEPRI
   1d238:	f383 8812 	msr	BASEPRI_MAX, r3
   1d23c:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
   1d240:	68eb      	ldr	r3, [r5, #12]
   1d242:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
   1d246:	2900      	cmp	r1, #0
   1d248:	bfac      	ite	ge
   1d24a:	f8d3 60bc 	ldrge.w	r6, [r3, #188]	; 0xbc
    return p_reg->TXD.AMOUNT;
   1d24e:	f8d7 654c 	ldrlt.w	r6, [r7, #1356]	; 0x54c
	__asm__ volatile(
   1d252:	f382 8811 	msr	BASEPRI, r2
   1d256:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
   1d25a:	68eb      	ldr	r3, [r5, #12]
   1d25c:	f893 20cd 	ldrb.w	r2, [r3, #205]	; 0xcd
   1d260:	2a00      	cmp	r2, #0
   1d262:	d054      	beq.n	1d30e <uarte_nrfx_isr_async+0x2fe>
	__asm__ volatile(
   1d264:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d268:	f3ef 8611 	mrs	r6, BASEPRI
   1d26c:	f383 8812 	msr	BASEPRI_MAX, r3
   1d270:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
   1d274:	4629      	mov	r1, r5
   1d276:	4620      	mov	r0, r4
   1d278:	f009 f8f2 	bl	26460 <start_tx_locked>
	__asm__ volatile(
   1d27c:	f386 8811 	msr	BASEPRI, r6
   1d280:	f3bf 8f6f 	isb	sy
				return;
   1d284:	e6d9      	b.n	1d03a <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
   1d286:	2601      	movs	r6, #1
   1d288:	e6f9      	b.n	1d07e <uarte_nrfx_isr_async+0x6e>
   1d28a:	2602      	movs	r6, #2
   1d28c:	e6f7      	b.n	1d07e <uarte_nrfx_isr_async+0x6e>
   1d28e:	2604      	movs	r6, #4
   1d290:	e6f5      	b.n	1d07e <uarte_nrfx_isr_async+0x6e>
	rx_buf_release(dev, &data->async->rx_buf);
   1d292:	3158      	adds	r1, #88	; 0x58
   1d294:	4620      	mov	r0, r4
   1d296:	f008 ffc2 	bl	2621e <rx_buf_release>
	__asm__ volatile(
   1d29a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d29e:	f3ef 8111 	mrs	r1, BASEPRI
   1d2a2:	f383 8812 	msr	BASEPRI_MAX, r3
   1d2a6:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
   1d2aa:	68f3      	ldr	r3, [r6, #12]
   1d2ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   1d2ae:	b1f2      	cbz	r2, 1d2ee <uarte_nrfx_isr_async+0x2de>
		data->async->rx_buf = data->async->rx_next_buf;
   1d2b0:	659a      	str	r2, [r3, #88]	; 0x58
		data->async->rx_buf_len = data->async->rx_next_buf_len;
   1d2b2:	68f3      	ldr	r3, [r6, #12]
   1d2b4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   1d2b6:	65da      	str	r2, [r3, #92]	; 0x5c
		data->async->rx_next_buf = NULL;
   1d2b8:	68f2      	ldr	r2, [r6, #12]
   1d2ba:	2300      	movs	r3, #0
   1d2bc:	6653      	str	r3, [r2, #100]	; 0x64
		data->async->rx_next_buf_len = 0;
   1d2be:	68f2      	ldr	r2, [r6, #12]
   1d2c0:	6693      	str	r3, [r2, #104]	; 0x68
		data->async->rx_offset = 0;
   1d2c2:	68f2      	ldr	r2, [r6, #12]
   1d2c4:	6613      	str	r3, [r2, #96]	; 0x60
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d2c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   1d2ca:	b90b      	cbnz	r3, 1d2d0 <uarte_nrfx_isr_async+0x2c0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d2cc:	2301      	movs	r3, #1
   1d2ce:	603b      	str	r3, [r7, #0]
    p_reg->SHORTS &= ~(mask);
   1d2d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
   1d2d4:	f023 0320 	bic.w	r3, r3, #32
   1d2d8:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	__asm__ volatile(
   1d2dc:	f381 8811 	msr	BASEPRI, r1
   1d2e0:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
   1d2e4:	68f3      	ldr	r3, [r6, #12]
   1d2e6:	2200      	movs	r2, #0
   1d2e8:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
   1d2ec:	e708      	b.n	1d100 <uarte_nrfx_isr_async+0xf0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1d2ee:	2301      	movs	r3, #1
   1d2f0:	607b      	str	r3, [r7, #4]
}
   1d2f2:	e7f3      	b.n	1d2dc <uarte_nrfx_isr_async+0x2cc>
    p_reg->INTENCLR = mask;
   1d2f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1d2f8:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
   1d2fc:	2101      	movs	r1, #1
   1d2fe:	4620      	mov	r0, r4
   1d300:	f009 f874 	bl	263ec <async_uart_release>
		if (!data->async->tx_size) {
   1d304:	68eb      	ldr	r3, [r5, #12]
   1d306:	68db      	ldr	r3, [r3, #12]
   1d308:	2b00      	cmp	r3, #0
   1d30a:	d18c      	bne.n	1d226 <uarte_nrfx_isr_async+0x216>
   1d30c:	e695      	b.n	1d03a <uarte_nrfx_isr_async+0x2a>
	if (data->async->tx_buf != data->async->xfer_buf) {
   1d30e:	6899      	ldr	r1, [r3, #8]
   1d310:	691a      	ldr	r2, [r3, #16]
   1d312:	4291      	cmp	r1, r2
   1d314:	d00c      	beq.n	1d330 <uarte_nrfx_isr_async+0x320>
		if (amount == data->async->xfer_len) {
   1d316:	6959      	ldr	r1, [r3, #20]
			data->async->tx_cache_offset += amount;
   1d318:	69da      	ldr	r2, [r3, #28]
		if (amount == data->async->xfer_len) {
   1d31a:	42b1      	cmp	r1, r6
			data->async->tx_cache_offset += amount;
   1d31c:	4432      	add	r2, r6
		if (amount == data->async->xfer_len) {
   1d31e:	d128      	bne.n	1d372 <uarte_nrfx_isr_async+0x362>
			data->async->tx_cache_offset += amount;
   1d320:	61da      	str	r2, [r3, #28]
			if (setup_tx_cache(data)) {
   1d322:	4628      	mov	r0, r5
   1d324:	f009 f816 	bl	26354 <setup_tx_cache>
   1d328:	2800      	cmp	r0, #0
   1d32a:	d19b      	bne.n	1d264 <uarte_nrfx_isr_async+0x254>
			amount = data->async->tx_cache_offset;
   1d32c:	68eb      	ldr	r3, [r5, #12]
   1d32e:	69de      	ldr	r6, [r3, #28]
	k_timer_stop(&data->async->tx_timeout_timer);
   1d330:	68e8      	ldr	r0, [r5, #12]
   1d332:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   1d334:	f009 fc1b 	bl	26b6e <z_impl_k_timer_stop>
	struct uart_event evt = {
   1d338:	2214      	movs	r2, #20
   1d33a:	2100      	movs	r1, #0
   1d33c:	a803      	add	r0, sp, #12
   1d33e:	f007 fb90 	bl	24a62 <memset>
		.data.tx.buf = data->async->tx_buf,
   1d342:	68eb      	ldr	r3, [r5, #12]
	struct uart_event evt = {
   1d344:	689a      	ldr	r2, [r3, #8]
   1d346:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
   1d34a:	68db      	ldr	r3, [r3, #12]
   1d34c:	429e      	cmp	r6, r3
		evt.type = UART_TX_ABORTED;
   1d34e:	bf1c      	itt	ne
   1d350:	2301      	movne	r3, #1
   1d352:	f88d 300c 	strbne.w	r3, [sp, #12]
   1d356:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1d35a:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
   1d35e:	68ea      	ldr	r2, [r5, #12]
   1d360:	2300      	movs	r3, #0
   1d362:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
   1d364:	68ea      	ldr	r2, [r5, #12]
	user_callback(dev, &evt);
   1d366:	a903      	add	r1, sp, #12
	data->async->tx_size = 0;
   1d368:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
   1d36a:	4620      	mov	r0, r4
   1d36c:	f008 ff37 	bl	261de <user_callback>
   1d370:	e663      	b.n	1d03a <uarte_nrfx_isr_async+0x2a>
			amount += data->async->tx_cache_offset;
   1d372:	4616      	mov	r6, r2
   1d374:	e7dc      	b.n	1d330 <uarte_nrfx_isr_async+0x320>
   1d376:	bf00      	nop
   1d378:	000f423f 	.word	0x000f423f
   1d37c:	000f4240 	.word	0x000f4240

0001d380 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   1d380:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   1d382:	490e      	ldr	r1, [pc, #56]	; (1d3bc <sys_clock_timeout_handler+0x3c>)
   1d384:	e9d1 3400 	ldrd	r3, r4, [r1]
   1d388:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   1d38a:	18c3      	adds	r3, r0, r3
   1d38c:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
   1d390:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
   1d394:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   1d398:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   1d39c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   1d3a0:	d209      	bcs.n	1d3b6 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   1d3a2:	4b07      	ldr	r3, [pc, #28]	; (1d3c0 <sys_clock_timeout_handler+0x40>)
   1d3a4:	681b      	ldr	r3, [r3, #0]
   1d3a6:	0a1a      	lsrs	r2, r3, #8
   1d3a8:	061b      	lsls	r3, r3, #24
   1d3aa:	199c      	adds	r4, r3, r6
   1d3ac:	4b05      	ldr	r3, [pc, #20]	; (1d3c4 <sys_clock_timeout_handler+0x44>)
   1d3ae:	f142 0500 	adc.w	r5, r2, #0
   1d3b2:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL, false);
	}

	sys_clock_announce(dticks);
}
   1d3b6:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   1d3b8:	f005 bb60 	b.w	22a7c <sys_clock_announce>
   1d3bc:	20001fb8 	.word	0x20001fb8
   1d3c0:	20002e8c 	.word	0x20002e8c
   1d3c4:	20001fc0 	.word	0x20001fc0

0001d3c8 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   1d3c8:	4b0d      	ldr	r3, [pc, #52]	; (1d400 <z_nrf_rtc_timer_read+0x38>)
   1d3ca:	6818      	ldr	r0, [r3, #0]
   1d3cc:	0a01      	lsrs	r1, r0, #8
   1d3ce:	0600      	lsls	r0, r0, #24
   1d3d0:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   1d3d4:	4b0b      	ldr	r3, [pc, #44]	; (1d404 <z_nrf_rtc_timer_read+0x3c>)
   1d3d6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   1d3da:	1818      	adds	r0, r3, r0
   1d3dc:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   1d3e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1d3e4:	d20a      	bcs.n	1d3fc <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   1d3e6:	4b08      	ldr	r3, [pc, #32]	; (1d408 <z_nrf_rtc_timer_read+0x40>)
   1d3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   1d3ec:	4290      	cmp	r0, r2
   1d3ee:	eb71 0303 	sbcs.w	r3, r1, r3
   1d3f2:	d203      	bcs.n	1d3fc <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   1d3f4:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   1d3f8:	f141 0100 	adc.w	r1, r1, #0
}
   1d3fc:	4770      	bx	lr
   1d3fe:	bf00      	nop
   1d400:	20002e8c 	.word	0x20002e8c
   1d404:	40011000 	.word	0x40011000
   1d408:	20001fc0 	.word	0x20001fc0

0001d40c <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   1d40c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   1d410:	4c2b      	ldr	r4, [pc, #172]	; (1d4c0 <rtc_nrf_isr+0xb4>)
   1d412:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   1d416:	0799      	lsls	r1, r3, #30
   1d418:	d50b      	bpl.n	1d432 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d41a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1d41e:	b143      	cbz	r3, 1d432 <rtc_nrf_isr+0x26>
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
   1d420:	4a28      	ldr	r2, [pc, #160]	; (1d4c4 <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d422:	2300      	movs	r3, #0
   1d424:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   1d428:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1d42c:	6813      	ldr	r3, [r2, #0]
   1d42e:	3301      	adds	r3, #1
   1d430:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   1d432:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_CHANNEL_INT_MASK(chan))) {
   1d436:	03da      	lsls	r2, r3, #15
   1d438:	d523      	bpl.n	1d482 <rtc_nrf_isr+0x76>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d43a:	f3bf 8f5b 	dmb	ish
   1d43e:	4b22      	ldr	r3, [pc, #136]	; (1d4c8 <rtc_nrf_isr+0xbc>)
   1d440:	e853 2f00 	ldrex	r2, [r3]
   1d444:	f022 0101 	bic.w	r1, r2, #1
   1d448:	e843 1000 	strex	r0, r1, [r3]
   1d44c:	2800      	cmp	r0, #0
   1d44e:	d1f7      	bne.n	1d440 <rtc_nrf_isr+0x34>
   1d450:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   1d454:	07d3      	lsls	r3, r2, #31
   1d456:	d402      	bmi.n	1d45e <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d458:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1d45c:	b18b      	cbz	r3, 1d482 <rtc_nrf_isr+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d45e:	2500      	movs	r5, #0
   1d460:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1d464:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   1d468:	f7ff ffae 	bl	1d3c8 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1d46c:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1d470:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   1d472:	4b16      	ldr	r3, [pc, #88]	; (1d4cc <rtc_nrf_isr+0xc0>)
   1d474:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   1d478:	42b0      	cmp	r0, r6
   1d47a:	41b9      	sbcs	r1, r7
   1d47c:	d204      	bcs.n	1d488 <rtc_nrf_isr+0x7c>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1d47e:	f382 8810 	msr	PRIMASK, r2
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		process_channel(chan);
	}
}
   1d482:	b003      	add	sp, #12
   1d484:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   1d488:	f04f 38ff 	mov.w	r8, #4294967295
   1d48c:	f04f 39ff 	mov.w	r9, #4294967295
   1d490:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
   1d494:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
   1d498:	601d      	str	r5, [r3, #0]
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1d49a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1d49e:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d4a2:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   1d4a6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1d4aa:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   1d4ae:	2900      	cmp	r1, #0
   1d4b0:	d0e7      	beq.n	1d482 <rtc_nrf_isr+0x76>
			handler(chan, expire_time, user_context);
   1d4b2:	9000      	str	r0, [sp, #0]
   1d4b4:	4632      	mov	r2, r6
   1d4b6:	463b      	mov	r3, r7
   1d4b8:	4628      	mov	r0, r5
   1d4ba:	4788      	blx	r1
   1d4bc:	e7e1      	b.n	1d482 <rtc_nrf_isr+0x76>
   1d4be:	bf00      	nop
   1d4c0:	40011000 	.word	0x40011000
   1d4c4:	20002e8c 	.word	0x20002e8c
   1d4c8:	20002e84 	.word	0x20002e84
   1d4cc:	20001fa8 	.word	0x20001fa8

0001d4d0 <compare_set.constprop.0.isra.0>:
static int compare_set(int32_t chan, uint64_t target_time,
   1d4d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d4d4:	4d4b      	ldr	r5, [pc, #300]	; (1d604 <compare_set.constprop.0.isra.0+0x134>)
   1d4d6:	f3bf 8f5b 	dmb	ish
   1d4da:	4606      	mov	r6, r0
   1d4dc:	460f      	mov	r7, r1
   1d4de:	e855 8f00 	ldrex	r8, [r5]
   1d4e2:	f028 0301 	bic.w	r3, r8, #1
   1d4e6:	e845 3200 	strex	r2, r3, [r5]
   1d4ea:	2a00      	cmp	r2, #0
   1d4ec:	d1f7      	bne.n	1d4de <compare_set.constprop.0.isra.0+0xe>
   1d4ee:	f3bf 8f5b 	dmb	ish
    p_reg->INTENCLR = mask;
   1d4f2:	4c45      	ldr	r4, [pc, #276]	; (1d608 <compare_set.constprop.0.isra.0+0x138>)
   1d4f4:	f44f 3980 	mov.w	r9, #65536	; 0x10000
   1d4f8:	f8c4 9308 	str.w	r9, [r4, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   1d4fc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1d500:	f3bf 8f6f 	isb	sy
	uint64_t curr_time = z_nrf_rtc_timer_read();
   1d504:	f7ff ff60 	bl	1d3c8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   1d508:	42b0      	cmp	r0, r6
   1d50a:	eb71 0307 	sbcs.w	r3, r1, r7
	return prev & BIT(chan);
   1d50e:	f008 0801 	and.w	r8, r8, #1
	if (curr_time < target_time) {
   1d512:	d240      	bcs.n	1d596 <compare_set.constprop.0.isra.0+0xc6>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   1d514:	4b3d      	ldr	r3, [pc, #244]	; (1d60c <compare_set.constprop.0.isra.0+0x13c>)
   1d516:	1a30      	subs	r0, r6, r0
   1d518:	eb67 0101 	sbc.w	r1, r7, r1
   1d51c:	4298      	cmp	r0, r3
   1d51e:	f171 0100 	sbcs.w	r1, r1, #0
   1d522:	d24c      	bcs.n	1d5be <compare_set.constprop.0.isra.0+0xee>
		if (target_time != cc_data[chan].target_time) {
   1d524:	4b3a      	ldr	r3, [pc, #232]	; (1d610 <compare_set.constprop.0.isra.0+0x140>)
   1d526:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   1d52a:	429f      	cmp	r7, r3
   1d52c:	bf08      	it	eq
   1d52e:	4296      	cmpeq	r6, r2
   1d530:	d03e      	beq.n	1d5b0 <compare_set.constprop.0.isra.0+0xe0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d532:	f04f 0c00 	mov.w	ip, #0
    p_reg->EVTENCLR = mask;
   1d536:	f8c4 9348 	str.w	r9, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d53a:	f8c4 c140 	str.w	ip, [r4, #320]	; 0x140
	return absolute_time & COUNTER_MAX;
   1d53e:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
   1d542:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1d546:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 1d620 <compare_set.constprop.0.isra.0+0x150>
	uint32_t cc_val = req_cc;
   1d54a:	4683      	mov	fp, r0
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   1d54c:	2103      	movs	r1, #3
	return (a - b) & COUNTER_MAX;
   1d54e:	f06f 0e02 	mvn.w	lr, #2
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   1d552:	f02b 437f 	bic.w	r3, fp, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1d556:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   1d55a:	f8c4 9344 	str.w	r9, [r4, #836]	; 0x344
     return p_reg->COUNTER;
   1d55e:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1d562:	ebae 0302 	sub.w	r3, lr, r2
   1d566:	445b      	add	r3, fp
   1d568:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   1d56c:	4553      	cmp	r3, sl
   1d56e:	d91f      	bls.n	1d5b0 <compare_set.constprop.0.isra.0+0xe0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d570:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
			if (event_check(chan)) {
   1d574:	b15b      	cbz	r3, 1d58e <compare_set.constprop.0.isra.0+0xbe>
     return p_reg->COUNTER;
   1d576:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   1d57a:	1a13      	subs	r3, r2, r0
   1d57c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   1d580:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1d584:	d914      	bls.n	1d5b0 <compare_set.constprop.0.isra.0+0xe0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1d586:	f8c4 c140 	str.w	ip, [r4, #320]	; 0x140
   1d58a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
			cc_val = now + cc_inc;
   1d58e:	eb01 0b02 	add.w	fp, r1, r2
			cc_inc++;
   1d592:	3101      	adds	r1, #1
	for (;;) {
   1d594:	e7dd      	b.n	1d552 <compare_set.constprop.0.isra.0+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d596:	4b1f      	ldr	r3, [pc, #124]	; (1d614 <compare_set.constprop.0.isra.0+0x144>)
   1d598:	f3bf 8f5b 	dmb	ish
   1d59c:	e853 1f00 	ldrex	r1, [r3]
   1d5a0:	f041 0101 	orr.w	r1, r1, #1
   1d5a4:	e843 1200 	strex	r2, r1, [r3]
   1d5a8:	2a00      	cmp	r2, #0
   1d5aa:	d1f7      	bne.n	1d59c <compare_set.constprop.0.isra.0+0xcc>
   1d5ac:	f3bf 8f5b 	dmb	ish
		cc_data[chan].target_time = target_time;
   1d5b0:	4b17      	ldr	r3, [pc, #92]	; (1d610 <compare_set.constprop.0.isra.0+0x140>)
		cc_data[chan].callback = handler;
   1d5b2:	4a19      	ldr	r2, [pc, #100]	; (1d618 <compare_set.constprop.0.isra.0+0x148>)
   1d5b4:	601a      	str	r2, [r3, #0]
		cc_data[chan].target_time = target_time;
   1d5b6:	e9c3 6702 	strd	r6, r7, [r3, #8]
		cc_data[chan].user_context = user_data;
   1d5ba:	2200      	movs	r2, #0
   1d5bc:	605a      	str	r2, [r3, #4]
	if (key) {
   1d5be:	f1b8 0f00 	cmp.w	r8, #0
   1d5c2:	d01c      	beq.n	1d5fe <compare_set.constprop.0.isra.0+0x12e>
   1d5c4:	f3bf 8f5b 	dmb	ish
   1d5c8:	e855 3f00 	ldrex	r3, [r5]
   1d5cc:	f043 0301 	orr.w	r3, r3, #1
   1d5d0:	e845 3200 	strex	r2, r3, [r5]
   1d5d4:	2a00      	cmp	r2, #0
   1d5d6:	d1f7      	bne.n	1d5c8 <compare_set.constprop.0.isra.0+0xf8>
   1d5d8:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   1d5dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1d5e0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d5e4:	4b0b      	ldr	r3, [pc, #44]	; (1d614 <compare_set.constprop.0.isra.0+0x144>)
   1d5e6:	f3bf 8f5b 	dmb	ish
   1d5ea:	681b      	ldr	r3, [r3, #0]
   1d5ec:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   1d5f0:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d5f2:	bf42      	ittt	mi
   1d5f4:	4b09      	ldrmi	r3, [pc, #36]	; (1d61c <compare_set.constprop.0.isra.0+0x14c>)
   1d5f6:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   1d5fa:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   1d5fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d602:	bf00      	nop
   1d604:	20002e88 	.word	0x20002e88
   1d608:	40011000 	.word	0x40011000
   1d60c:	00800001 	.word	0x00800001
   1d610:	20001fa8 	.word	0x20001fa8
   1d614:	20002e84 	.word	0x20002e84
   1d618:	0001d381 	.word	0x0001d381
   1d61c:	e000e100 	.word	0xe000e100
   1d620:	007ffffd 	.word	0x007ffffd

0001d624 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
   1d624:	b570      	push	{r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
   1d626:	4c19      	ldr	r4, [pc, #100]	; (1d68c <sys_clock_driver_init+0x68>)
   1d628:	4b19      	ldr	r3, [pc, #100]	; (1d690 <sys_clock_driver_init+0x6c>)
   1d62a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
   1d62e:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   1d632:	4b18      	ldr	r3, [pc, #96]	; (1d694 <sys_clock_driver_init+0x70>)
    p_reg->PRESCALER = val;
   1d634:	2500      	movs	r5, #0
   1d636:	f04f 30ff 	mov.w	r0, #4294967295
   1d63a:	f04f 31ff 	mov.w	r1, #4294967295
   1d63e:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
   1d642:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   1d646:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1d64a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d64e:	4b12      	ldr	r3, [pc, #72]	; (1d698 <sys_clock_driver_init+0x74>)
   1d650:	2602      	movs	r6, #2
   1d652:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1d656:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   1d65a:	2101      	movs	r1, #1
   1d65c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   1d660:	2011      	movs	r0, #17
   1d662:	462a      	mov	r2, r5
   1d664:	f7f7 fa1a 	bl	14a9c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   1d668:	2011      	movs	r0, #17
   1d66a:	f7f7 f9e7 	bl	14a3c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1d66e:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   1d670:	4a0a      	ldr	r2, [pc, #40]	; (1d69c <sys_clock_driver_init+0x78>)
   1d672:	60a3      	str	r3, [r4, #8]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL, false);
   1d674:	2100      	movs	r1, #0
   1d676:	6023      	str	r3, [r4, #0]
   1d678:	4809      	ldr	r0, [pc, #36]	; (1d6a0 <sys_clock_driver_init+0x7c>)
	int_mask = BIT_MASK(CHAN_COUNT);
   1d67a:	6013      	str	r3, [r2, #0]
	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL, false);
   1d67c:	f7ff ff28 	bl	1d4d0 <compare_set.constprop.0.isra.0>

	z_nrf_clock_control_lf_on(mode);
   1d680:	4630      	mov	r0, r6
   1d682:	f7fe fd9b 	bl	1c1bc <z_nrf_clock_control_lf_on>

	return 0;
}
   1d686:	4628      	mov	r0, r5
   1d688:	bd70      	pop	{r4, r5, r6, pc}
   1d68a:	bf00      	nop
   1d68c:	40011000 	.word	0x40011000
   1d690:	000f0003 	.word	0x000f0003
   1d694:	20001fa8 	.word	0x20001fa8
   1d698:	e000e100 	.word	0xe000e100
   1d69c:	20002e88 	.word	0x20002e88
   1d6a0:	007fffff 	.word	0x007fffff

0001d6a4 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   1d6a4:	1c43      	adds	r3, r0, #1
{
   1d6a6:	b510      	push	{r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   1d6a8:	d01d      	beq.n	1d6e6 <sys_clock_set_timeout+0x42>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1d6aa:	2801      	cmp	r0, #1
   1d6ac:	dd1d      	ble.n	1d6ea <sys_clock_set_timeout+0x46>
   1d6ae:	4a10      	ldr	r2, [pc, #64]	; (1d6f0 <sys_clock_set_timeout+0x4c>)
   1d6b0:	4b10      	ldr	r3, [pc, #64]	; (1d6f4 <sys_clock_set_timeout+0x50>)
   1d6b2:	4290      	cmp	r0, r2
   1d6b4:	bfd4      	ite	le
   1d6b6:	4604      	movle	r4, r0
   1d6b8:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   1d6ba:	f7ff fe85 	bl	1d3c8 <z_nrf_rtc_timer_read>
   1d6be:	4a0e      	ldr	r2, [pc, #56]	; (1d6f8 <sys_clock_set_timeout+0x54>)
   1d6c0:	e9d2 3100 	ldrd	r3, r1, [r2]
   1d6c4:	1ac0      	subs	r0, r0, r3
		cyc = 0;
   1d6c6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
	if (cyc > MAX_CYCLES) {
   1d6ca:	4a0a      	ldr	r2, [pc, #40]	; (1d6f4 <sys_clock_set_timeout+0x50>)
		cyc = 0;
   1d6cc:	bf28      	it	cs
   1d6ce:	2400      	movcs	r4, #0
	cyc += unannounced;
   1d6d0:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   1d6d2:	4294      	cmp	r4, r2
   1d6d4:	bf28      	it	cs
   1d6d6:	4614      	movcs	r4, r2
	uint64_t target_time = cyc + last_count;
   1d6d8:	18e0      	adds	r0, r4, r3
	compare_set(0, target_time, sys_clock_timeout_handler, NULL, false);
   1d6da:	f141 0100 	adc.w	r1, r1, #0
}
   1d6de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	compare_set(0, target_time, sys_clock_timeout_handler, NULL, false);
   1d6e2:	f7ff bef5 	b.w	1d4d0 <compare_set.constprop.0.isra.0>
		cyc = MAX_TICKS * CYC_PER_TICK;
   1d6e6:	4c03      	ldr	r4, [pc, #12]	; (1d6f4 <sys_clock_set_timeout+0x50>)
   1d6e8:	e7e7      	b.n	1d6ba <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   1d6ea:	2401      	movs	r4, #1
   1d6ec:	e7e5      	b.n	1d6ba <sys_clock_set_timeout+0x16>
   1d6ee:	bf00      	nop
   1d6f0:	007ffffe 	.word	0x007ffffe
   1d6f4:	007fffff 	.word	0x007fffff
   1d6f8:	20001fb8 	.word	0x20001fb8

0001d6fc <sys_clock_elapsed>:
{
   1d6fc:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   1d6fe:	f7ff fe63 	bl	1d3c8 <z_nrf_rtc_timer_read>
   1d702:	4b02      	ldr	r3, [pc, #8]	; (1d70c <sys_clock_elapsed+0x10>)
   1d704:	681b      	ldr	r3, [r3, #0]
}
   1d706:	1ac0      	subs	r0, r0, r3
   1d708:	bd08      	pop	{r3, pc}
   1d70a:	bf00      	nop
   1d70c:	20001fb8 	.word	0x20001fb8

0001d710 <z_impl_gpio_pin_configure>:
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
   1d710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
		(struct gpio_driver_data *)port->data;

	__ASSERT((flags & GPIO_INT_MASK) == 0,
   1d714:	f012 6ffc 	tst.w	r2, #132120576	; 0x7e00000
	__unused const struct gpio_driver_config *const cfg =
   1d718:	e9d0 4701 	ldrd	r4, r7, [r0, #4]
	struct gpio_driver_data *data =
   1d71c:	6906      	ldr	r6, [r0, #16]
{
   1d71e:	4613      	mov	r3, r2
	__ASSERT((flags & GPIO_INT_MASK) == 0,
   1d720:	d00e      	beq.n	1d740 <z_impl_gpio_pin_configure+0x30>
   1d722:	4942      	ldr	r1, [pc, #264]	; (1d82c <z_impl_gpio_pin_configure+0x11c>)
   1d724:	4a42      	ldr	r2, [pc, #264]	; (1d830 <z_impl_gpio_pin_configure+0x120>)
   1d726:	4843      	ldr	r0, [pc, #268]	; (1d834 <z_impl_gpio_pin_configure+0x124>)
   1d728:	f44f 7335 	mov.w	r3, #724	; 0x2d4
   1d72c:	f006 fd8a 	bl	24244 <assert_print>
   1d730:	4841      	ldr	r0, [pc, #260]	; (1d838 <z_impl_gpio_pin_configure+0x128>)
   1d732:	f006 fd87 	bl	24244 <assert_print>
   1d736:	f44f 7135 	mov.w	r1, #724	; 0x2d4
		 "Interrupt flags are not supported");

	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
   1d73a:	483d      	ldr	r0, [pc, #244]	; (1d830 <z_impl_gpio_pin_configure+0x120>)
   1d73c:	f006 fd7b 	bl	24236 <assert_post_action>
   1d740:	f002 0230 	and.w	r2, r2, #48	; 0x30
   1d744:	2a30      	cmp	r2, #48	; 0x30
   1d746:	d10c      	bne.n	1d762 <z_impl_gpio_pin_configure+0x52>
   1d748:	493c      	ldr	r1, [pc, #240]	; (1d83c <z_impl_gpio_pin_configure+0x12c>)
   1d74a:	4a39      	ldr	r2, [pc, #228]	; (1d830 <z_impl_gpio_pin_configure+0x120>)
   1d74c:	4839      	ldr	r0, [pc, #228]	; (1d834 <z_impl_gpio_pin_configure+0x124>)
   1d74e:	f240 23d7 	movw	r3, #727	; 0x2d7
   1d752:	f006 fd77 	bl	24244 <assert_print>
   1d756:	483a      	ldr	r0, [pc, #232]	; (1d840 <z_impl_gpio_pin_configure+0x130>)
   1d758:	f006 fd74 	bl	24244 <assert_print>
   1d75c:	f240 21d7 	movw	r1, #727	; 0x2d7
   1d760:	e7eb      	b.n	1d73a <z_impl_gpio_pin_configure+0x2a>
		 (GPIO_PULL_UP | GPIO_PULL_DOWN),
		 "Pull Up and Pull Down should not be enabled simultaneously");

	__ASSERT(!((flags & GPIO_INPUT) && !(flags & GPIO_OUTPUT) && (flags & GPIO_SINGLE_ENDED)),
   1d762:	4a38      	ldr	r2, [pc, #224]	; (1d844 <z_impl_gpio_pin_configure+0x134>)
   1d764:	4d38      	ldr	r5, [pc, #224]	; (1d848 <z_impl_gpio_pin_configure+0x138>)
   1d766:	401a      	ands	r2, r3
   1d768:	42aa      	cmp	r2, r5
   1d76a:	d10c      	bne.n	1d786 <z_impl_gpio_pin_configure+0x76>
   1d76c:	4937      	ldr	r1, [pc, #220]	; (1d84c <z_impl_gpio_pin_configure+0x13c>)
   1d76e:	4a30      	ldr	r2, [pc, #192]	; (1d830 <z_impl_gpio_pin_configure+0x120>)
   1d770:	4830      	ldr	r0, [pc, #192]	; (1d834 <z_impl_gpio_pin_configure+0x124>)
   1d772:	f240 23db 	movw	r3, #731	; 0x2db
   1d776:	f006 fd65 	bl	24244 <assert_print>
   1d77a:	4835      	ldr	r0, [pc, #212]	; (1d850 <z_impl_gpio_pin_configure+0x140>)
   1d77c:	f006 fd62 	bl	24244 <assert_print>
   1d780:	f240 21db 	movw	r1, #731	; 0x2db
   1d784:	e7d9      	b.n	1d73a <z_impl_gpio_pin_configure+0x2a>
		 "Input cannot be enabled for 'Open Drain', 'Open Source' modes without Output");

	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
   1d786:	f003 0206 	and.w	r2, r3, #6
   1d78a:	2a04      	cmp	r2, #4
   1d78c:	d109      	bne.n	1d7a2 <z_impl_gpio_pin_configure+0x92>
   1d78e:	4931      	ldr	r1, [pc, #196]	; (1d854 <z_impl_gpio_pin_configure+0x144>)
   1d790:	4a27      	ldr	r2, [pc, #156]	; (1d830 <z_impl_gpio_pin_configure+0x120>)
   1d792:	4828      	ldr	r0, [pc, #160]	; (1d834 <z_impl_gpio_pin_configure+0x124>)
   1d794:	f240 23de 	movw	r3, #734	; 0x2de
   1d798:	f006 fd54 	bl	24244 <assert_print>
   1d79c:	f240 21de 	movw	r1, #734	; 0x2de
   1d7a0:	e7cb      	b.n	1d73a <z_impl_gpio_pin_configure+0x2a>
			(flags & GPIO_LINE_OPEN_DRAIN) == 0);

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
   1d7a2:	f413 2240 	ands.w	r2, r3, #786432	; 0xc0000
   1d7a6:	d016      	beq.n	1d7d6 <z_impl_gpio_pin_configure+0xc6>
   1d7a8:	039d      	lsls	r5, r3, #14
   1d7aa:	d40c      	bmi.n	1d7c6 <z_impl_gpio_pin_configure+0xb6>
   1d7ac:	492a      	ldr	r1, [pc, #168]	; (1d858 <z_impl_gpio_pin_configure+0x148>)
   1d7ae:	4a20      	ldr	r2, [pc, #128]	; (1d830 <z_impl_gpio_pin_configure+0x120>)
   1d7b0:	4820      	ldr	r0, [pc, #128]	; (1d834 <z_impl_gpio_pin_configure+0x124>)
   1d7b2:	f240 23e1 	movw	r3, #737	; 0x2e1
   1d7b6:	f006 fd45 	bl	24244 <assert_print>
   1d7ba:	4828      	ldr	r0, [pc, #160]	; (1d85c <z_impl_gpio_pin_configure+0x14c>)
   1d7bc:	f006 fd42 	bl	24244 <assert_print>
   1d7c0:	f240 21e1 	movw	r1, #737	; 0x2e1
   1d7c4:	e7b9      	b.n	1d73a <z_impl_gpio_pin_configure+0x2a>
		 || (flags & GPIO_OUTPUT) != 0,
		 "Output needs to be enabled to be initialized low or high");

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   1d7c6:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
   1d7ca:	d018      	beq.n	1d7fe <z_impl_gpio_pin_configure+0xee>
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1d7cc:	4a24      	ldr	r2, [pc, #144]	; (1d860 <z_impl_gpio_pin_configure+0x150>)
   1d7ce:	439a      	bics	r2, r3
   1d7d0:	d101      	bne.n	1d7d6 <z_impl_gpio_pin_configure+0xc6>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   1d7d2:	f483 2340 	eor.w	r3, r3, #786432	; 0xc0000
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1d7d6:	6824      	ldr	r4, [r4, #0]
   1d7d8:	2501      	movs	r5, #1
   1d7da:	408d      	lsls	r5, r1
   1d7dc:	4225      	tst	r5, r4
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   1d7de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1d7e2:	d119      	bne.n	1d818 <z_impl_gpio_pin_configure+0x108>
   1d7e4:	491f      	ldr	r1, [pc, #124]	; (1d864 <z_impl_gpio_pin_configure+0x154>)
   1d7e6:	4a12      	ldr	r2, [pc, #72]	; (1d830 <z_impl_gpio_pin_configure+0x120>)
   1d7e8:	4812      	ldr	r0, [pc, #72]	; (1d834 <z_impl_gpio_pin_configure+0x124>)
   1d7ea:	f240 23f1 	movw	r3, #753	; 0x2f1
   1d7ee:	f006 fd29 	bl	24244 <assert_print>
   1d7f2:	481d      	ldr	r0, [pc, #116]	; (1d868 <z_impl_gpio_pin_configure+0x158>)
   1d7f4:	f006 fd26 	bl	24244 <assert_print>
   1d7f8:	f240 21f1 	movw	r1, #753	; 0x2f1
   1d7fc:	e79d      	b.n	1d73a <z_impl_gpio_pin_configure+0x2a>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
   1d7fe:	491b      	ldr	r1, [pc, #108]	; (1d86c <z_impl_gpio_pin_configure+0x15c>)
   1d800:	4a0b      	ldr	r2, [pc, #44]	; (1d830 <z_impl_gpio_pin_configure+0x120>)
   1d802:	480c      	ldr	r0, [pc, #48]	; (1d834 <z_impl_gpio_pin_configure+0x124>)
   1d804:	f240 23e5 	movw	r3, #741	; 0x2e5
   1d808:	f006 fd1c 	bl	24244 <assert_print>
   1d80c:	4818      	ldr	r0, [pc, #96]	; (1d870 <z_impl_gpio_pin_configure+0x160>)
   1d80e:	f006 fd19 	bl	24244 <assert_print>
   1d812:	f240 21e5 	movw	r1, #741	; 0x2e5
   1d816:	e790      	b.n	1d73a <z_impl_gpio_pin_configure+0x2a>
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1d818:	6834      	ldr	r4, [r6, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1d81a:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1d81c:	bf4c      	ite	mi
   1d81e:	432c      	orrmi	r4, r5
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1d820:	43ac      	bicpl	r4, r5
   1d822:	6034      	str	r4, [r6, #0]
	}

	return api->pin_configure(port, pin, flags);
   1d824:	683b      	ldr	r3, [r7, #0]
}
   1d826:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->pin_configure(port, pin, flags);
   1d82a:	4718      	bx	r3
   1d82c:	0002a5bc 	.word	0x0002a5bc
   1d830:	0002a58b 	.word	0x0002a58b
   1d834:	00027c2a 	.word	0x00027c2a
   1d838:	0002a619 	.word	0x0002a619
   1d83c:	0002a63d 	.word	0x0002a63d
   1d840:	0002a676 	.word	0x0002a676
   1d844:	00030002 	.word	0x00030002
   1d848:	00010002 	.word	0x00010002
   1d84c:	0002a6b3 	.word	0x0002a6b3
   1d850:	0002a6fa 	.word	0x0002a6fa
   1d854:	0002a749 	.word	0x0002a749
   1d858:	0002a77c 	.word	0x0002a77c
   1d85c:	0002a7c2 	.word	0x0002a7c2
   1d860:	00100001 	.word	0x00100001
   1d864:	0002a86a 	.word	0x0002a86a
   1d868:	0002a8a8 	.word	0x0002a8a8
   1d86c:	0002a7fd 	.word	0x0002a7fd
   1d870:	0002a83e 	.word	0x0002a83e

0001d874 <gpio_pin_set>:
 * @retval -EIO I/O error when accessing an external GPIO chip.
 * @retval -EWOULDBLOCK if operation would block.
 */
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
			       int value)
{
   1d874:	b510      	push	{r4, lr}
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
			(const struct gpio_driver_data *)port->data;

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1d876:	2301      	movs	r3, #1
   1d878:	fa03 f101 	lsl.w	r1, r3, r1
   1d87c:	6843      	ldr	r3, [r0, #4]
	const struct gpio_driver_data *const data =
   1d87e:	6904      	ldr	r4, [r0, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
   1d880:	681b      	ldr	r3, [r3, #0]
   1d882:	4219      	tst	r1, r3
   1d884:	d10e      	bne.n	1d8a4 <gpio_pin_set+0x30>
   1d886:	490e      	ldr	r1, [pc, #56]	; (1d8c0 <gpio_pin_set+0x4c>)
   1d888:	4a0e      	ldr	r2, [pc, #56]	; (1d8c4 <gpio_pin_set+0x50>)
   1d88a:	480f      	ldr	r0, [pc, #60]	; (1d8c8 <gpio_pin_set+0x54>)
   1d88c:	f240 535c 	movw	r3, #1372	; 0x55c
   1d890:	f006 fcd8 	bl	24244 <assert_print>
   1d894:	480d      	ldr	r0, [pc, #52]	; (1d8cc <gpio_pin_set+0x58>)
   1d896:	f006 fcd5 	bl	24244 <assert_print>
   1d89a:	480a      	ldr	r0, [pc, #40]	; (1d8c4 <gpio_pin_set+0x50>)
   1d89c:	f240 515c 	movw	r1, #1372	; 0x55c
   1d8a0:	f006 fcc9 	bl	24236 <assert_post_action>
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1d8a4:	6823      	ldr	r3, [r4, #0]
   1d8a6:	4219      	tst	r1, r3
   1d8a8:	d003      	beq.n	1d8b2 <gpio_pin_set+0x3e>
	if (value != 0)	{
   1d8aa:	b122      	cbz	r2, 1d8b6 <gpio_pin_set+0x42>
	return api->port_clear_bits_raw(port, pins);
   1d8ac:	6883      	ldr	r3, [r0, #8]
   1d8ae:	691b      	ldr	r3, [r3, #16]
   1d8b0:	e003      	b.n	1d8ba <gpio_pin_set+0x46>
	if (value != 0)	{
   1d8b2:	2a00      	cmp	r2, #0
   1d8b4:	d0fa      	beq.n	1d8ac <gpio_pin_set+0x38>
	return api->port_set_bits_raw(port, pins);
   1d8b6:	6883      	ldr	r3, [r0, #8]
   1d8b8:	68db      	ldr	r3, [r3, #12]
		value = (value != 0) ? 0 : 1;
	}

	return gpio_pin_set_raw(port, pin, value);
}
   1d8ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return api->port_clear_bits_raw(port, pins);
   1d8be:	4718      	bx	r3
   1d8c0:	0002a86a 	.word	0x0002a86a
   1d8c4:	0002a58b 	.word	0x0002a58b
   1d8c8:	00027c2a 	.word	0x00027c2a
   1d8cc:	0002a8a8 	.word	0x0002a8a8

0001d8d0 <dk_set_leds_state.part.0>:
int dk_set_leds(uint32_t leds)
{
	return dk_set_leds_state(leds, DK_ALL_LEDS_MSK);
}

int dk_set_leds_state(uint32_t leds_on_mask, uint32_t leds_off_mask)
   1d8d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d8d4:	4e15      	ldr	r6, [pc, #84]	; (1d92c <dk_set_leds_state.part.0+0x5c>)
   1d8d6:	b086      	sub	sp, #24
   1d8d8:	4607      	mov	r7, r0
   1d8da:	4688      	mov	r8, r1
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
	   (leds_off_mask & ~DK_ALL_LEDS_MSK) != 0) {
		return -EINVAL;
	}

	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1d8dc:	2500      	movs	r5, #0
		int val, err;

		if (BIT(i) & leds_on_mask) {
   1d8de:	fa27 f205 	lsr.w	r2, r7, r5
   1d8e2:	f012 0201 	ands.w	r2, r2, #1
   1d8e6:	d117      	bne.n	1d918 <dk_set_leds_state.part.0+0x48>
			val = 1;
		} else if (BIT(i) & leds_off_mask) {
   1d8e8:	fa28 f305 	lsr.w	r3, r8, r5
   1d8ec:	07db      	lsls	r3, r3, #31
   1d8ee:	d515      	bpl.n	1d91c <dk_set_leds_state.part.0+0x4c>
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
   1d8f0:	7931      	ldrb	r1, [r6, #4]
   1d8f2:	6830      	ldr	r0, [r6, #0]
   1d8f4:	f7ff ffbe 	bl	1d874 <gpio_pin_set>
		} else {
			continue;
		}

		err = gpio_pin_set_dt(&leds[i], val);
		if (err) {
   1d8f8:	4604      	mov	r4, r0
   1d8fa:	b178      	cbz	r0, 1d91c <dk_set_leds_state.part.0+0x4c>
			LOG_ERR("Cannot write LED gpio");
   1d8fc:	4b0c      	ldr	r3, [pc, #48]	; (1d930 <dk_set_leds_state.part.0+0x60>)
   1d8fe:	9305      	str	r3, [sp, #20]
   1d900:	480c      	ldr	r0, [pc, #48]	; (1d934 <dk_set_leds_state.part.0+0x64>)
   1d902:	2302      	movs	r3, #2
   1d904:	aa04      	add	r2, sp, #16
   1d906:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d90a:	9304      	str	r3, [sp, #16]
   1d90c:	f008 fe33 	bl	26576 <z_log_msg_static_create.constprop.0>
			return err;
		}
	}

	return 0;
}
   1d910:	4620      	mov	r0, r4
   1d912:	b006      	add	sp, #24
   1d914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			val = 1;
   1d918:	2201      	movs	r2, #1
   1d91a:	e7e9      	b.n	1d8f0 <dk_set_leds_state.part.0+0x20>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1d91c:	3501      	adds	r5, #1
   1d91e:	2d04      	cmp	r5, #4
   1d920:	f106 0608 	add.w	r6, r6, #8
   1d924:	d1db      	bne.n	1d8de <dk_set_leds_state.part.0+0xe>
	return 0;
   1d926:	2400      	movs	r4, #0
   1d928:	e7f2      	b.n	1d910 <dk_set_leds_state.part.0+0x40>
   1d92a:	bf00      	nop
   1d92c:	00027708 	.word	0x00027708
   1d930:	0002a8ba 	.word	0x0002a8ba
   1d934:	0002705c 	.word	0x0002705c

0001d938 <dk_leds_init>:
{
   1d938:	b570      	push	{r4, r5, r6, lr}
   1d93a:	4c12      	ldr	r4, [pc, #72]	; (1d984 <dk_leds_init+0x4c>)
   1d93c:	b086      	sub	sp, #24
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1d93e:	2600      	movs	r6, #0
				  spec->dt_flags | extra_flags);
   1d940:	88e2      	ldrh	r2, [r4, #6]
	return gpio_pin_configure(spec->port,
   1d942:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   1d944:	7921      	ldrb	r1, [r4, #4]
	return gpio_pin_configure(spec->port,
   1d946:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
   1d94a:	f7ff fee1 	bl	1d710 <z_impl_gpio_pin_configure>
		if (err) {
   1d94e:	4605      	mov	r5, r0
   1d950:	b950      	cbnz	r0, 1d968 <dk_leds_init+0x30>
	for (size_t i = 0; i < ARRAY_SIZE(leds); i++) {
   1d952:	3601      	adds	r6, #1
   1d954:	2e04      	cmp	r6, #4
   1d956:	f104 0408 	add.w	r4, r4, #8
   1d95a:	d1f1      	bne.n	1d940 <dk_leds_init+0x8>
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   1d95c:	210f      	movs	r1, #15
}
   1d95e:	b006      	add	sp, #24
   1d960:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d964:	f7ff bfb4 	b.w	1d8d0 <dk_set_leds_state.part.0>
			LOG_ERR("Cannot configure LED gpio");
   1d968:	4b07      	ldr	r3, [pc, #28]	; (1d988 <dk_leds_init+0x50>)
   1d96a:	9305      	str	r3, [sp, #20]
   1d96c:	4807      	ldr	r0, [pc, #28]	; (1d98c <dk_leds_init+0x54>)
   1d96e:	2302      	movs	r3, #2
   1d970:	aa04      	add	r2, sp, #16
   1d972:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d976:	9304      	str	r3, [sp, #16]
   1d978:	f008 fdfd 	bl	26576 <z_log_msg_static_create.constprop.0>
}
   1d97c:	4628      	mov	r0, r5
   1d97e:	b006      	add	sp, #24
   1d980:	bd70      	pop	{r4, r5, r6, pc}
   1d982:	bf00      	nop
   1d984:	00027708 	.word	0x00027708
   1d988:	0002a8d0 	.word	0x0002a8d0
   1d98c:	0002705c 	.word	0x0002705c

0001d990 <dk_set_led>:

int dk_set_led(uint8_t led_idx, uint32_t val)
{
   1d990:	b510      	push	{r4, lr}
	int err;

	if (led_idx >= ARRAY_SIZE(leds)) {
   1d992:	2803      	cmp	r0, #3
{
   1d994:	b086      	sub	sp, #24
   1d996:	460a      	mov	r2, r1
	if (led_idx >= ARRAY_SIZE(leds)) {
   1d998:	d90e      	bls.n	1d9b8 <dk_set_led+0x28>
		LOG_ERR("LED index out of the range");
   1d99a:	4b12      	ldr	r3, [pc, #72]	; (1d9e4 <dk_set_led+0x54>)
   1d99c:	9305      	str	r3, [sp, #20]
   1d99e:	4812      	ldr	r0, [pc, #72]	; (1d9e8 <dk_set_led+0x58>)
   1d9a0:	2302      	movs	r3, #2
   1d9a2:	aa04      	add	r2, sp, #16
   1d9a4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EINVAL;
   1d9a8:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("LED index out of the range");
   1d9ac:	9304      	str	r3, [sp, #16]
   1d9ae:	f008 fde2 	bl	26576 <z_log_msg_static_create.constprop.0>
	err = gpio_pin_set_dt(&leds[led_idx], val);
	if (err) {
		LOG_ERR("Cannot write LED gpio");
	}
	return err;
}
   1d9b2:	4620      	mov	r0, r4
   1d9b4:	b006      	add	sp, #24
   1d9b6:	bd10      	pop	{r4, pc}
	return gpio_pin_set(spec->port, spec->pin, value);
   1d9b8:	4b0c      	ldr	r3, [pc, #48]	; (1d9ec <dk_set_led+0x5c>)
   1d9ba:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   1d9be:	f853 0030 	ldr.w	r0, [r3, r0, lsl #3]
   1d9c2:	7909      	ldrb	r1, [r1, #4]
   1d9c4:	f7ff ff56 	bl	1d874 <gpio_pin_set>
	if (err) {
   1d9c8:	4604      	mov	r4, r0
   1d9ca:	2800      	cmp	r0, #0
   1d9cc:	d0f1      	beq.n	1d9b2 <dk_set_led+0x22>
		LOG_ERR("Cannot write LED gpio");
   1d9ce:	4b08      	ldr	r3, [pc, #32]	; (1d9f0 <dk_set_led+0x60>)
   1d9d0:	9305      	str	r3, [sp, #20]
   1d9d2:	4805      	ldr	r0, [pc, #20]	; (1d9e8 <dk_set_led+0x58>)
   1d9d4:	2302      	movs	r3, #2
   1d9d6:	aa04      	add	r2, sp, #16
   1d9d8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1d9dc:	9304      	str	r3, [sp, #16]
   1d9de:	f008 fdca 	bl	26576 <z_log_msg_static_create.constprop.0>
   1d9e2:	e7e6      	b.n	1d9b2 <dk_set_led+0x22>
   1d9e4:	0002a8ea 	.word	0x0002a8ea
   1d9e8:	0002705c 	.word	0x0002705c
   1d9ec:	00027708 	.word	0x00027708
   1d9f0:	0002a8ba 	.word	0x0002a8ba

0001d9f4 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1d9f4:	4602      	mov	r2, r0
   1d9f6:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1d9f8:	4801      	ldr	r0, [pc, #4]	; (1da00 <multithreading_lock_acquire+0xc>)
   1d9fa:	f002 bcad 	b.w	20358 <z_impl_k_mutex_lock>
   1d9fe:	bf00      	nop
   1da00:	20000938 	.word	0x20000938

0001da04 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   1da04:	4801      	ldr	r0, [pc, #4]	; (1da0c <multithreading_lock_release+0x8>)
   1da06:	f002 bd77 	b.w	204f8 <z_impl_k_mutex_unlock>
   1da0a:	bf00      	nop
   1da0c:	20000938 	.word	0x20000938

0001da10 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1da10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
   1da12:	f7f6 f955 	bl	13cc0 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1da16:	4b07      	ldr	r3, [pc, #28]	; (1da34 <k_sys_fatal_error_handler+0x24>)
   1da18:	9305      	str	r3, [sp, #20]
   1da1a:	2302      	movs	r3, #2
   1da1c:	9304      	str	r3, [sp, #16]
   1da1e:	4806      	ldr	r0, [pc, #24]	; (1da38 <k_sys_fatal_error_handler+0x28>)
   1da20:	2300      	movs	r3, #0
   1da22:	aa04      	add	r2, sp, #16
   1da24:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1da28:	f7f6 fab0 	bl	13f8c <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
   1da2c:	2000      	movs	r0, #0
   1da2e:	f7f7 fd63 	bl	154f8 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1da32:	bf00      	nop
   1da34:	0002a919 	.word	0x0002a919
   1da38:	00027064 	.word	0x00027064

0001da3c <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   1da3c:	b598      	push	{r3, r4, r7, lr}
   1da3e:	af00      	add	r7, sp, #0
	LOG_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   1da40:	466c      	mov	r4, sp
   1da42:	b08a      	sub	sp, #40	; 0x28
   1da44:	466a      	mov	r2, sp
   1da46:	4b0c      	ldr	r3, [pc, #48]	; (1da78 <sdc_assertion_handler+0x3c>)
   1da48:	61d1      	str	r1, [r2, #28]
   1da4a:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1da4e:	f44f 7300 	mov.w	r3, #512	; 0x200
   1da52:	8413      	strh	r3, [r2, #32]
   1da54:	4b09      	ldr	r3, [pc, #36]	; (1da7c <sdc_assertion_handler+0x40>)
   1da56:	f842 3f10 	str.w	r3, [r2, #16]!
   1da5a:	4809      	ldr	r0, [pc, #36]	; (1da80 <sdc_assertion_handler+0x44>)
   1da5c:	2300      	movs	r3, #0
   1da5e:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1da62:	f7f6 fa93 	bl	13f8c <z_impl_z_log_msg_static_create>
   1da66:	46a5      	mov	sp, r4
	k_oops();
   1da68:	4040      	eors	r0, r0
   1da6a:	f380 8811 	msr	BASEPRI, r0
   1da6e:	f04f 0003 	mov.w	r0, #3
   1da72:	df02      	svc	2
}
   1da74:	46bd      	mov	sp, r7
   1da76:	bd98      	pop	{r3, r4, r7, pc}
   1da78:	0002a936 	.word	0x0002a936
   1da7c:	01000004 	.word	0x01000004
   1da80:	0002703c 	.word	0x0002703c

0001da84 <rand_prio_low_vector_get_blocking>:
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
	return ret >= 0 ? ret : 0;
}

static void rand_prio_low_vector_get_blocking(uint8_t *p_buff, uint8_t length)
{
   1da84:	b510      	push	{r4, lr}
   1da86:	4603      	mov	r3, r0
   1da88:	460a      	mov	r2, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   1da8a:	4811      	ldr	r0, [pc, #68]	; (1dad0 <rand_prio_low_vector_get_blocking+0x4c>)
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   1da8c:	6881      	ldr	r1, [r0, #8]
   1da8e:	680c      	ldr	r4, [r1, #0]
   1da90:	b964      	cbnz	r4, 1daac <rand_prio_low_vector_get_blocking+0x28>
   1da92:	4910      	ldr	r1, [pc, #64]	; (1dad4 <rand_prio_low_vector_get_blocking+0x50>)
   1da94:	4a10      	ldr	r2, [pc, #64]	; (1dad8 <rand_prio_low_vector_get_blocking+0x54>)
   1da96:	4811      	ldr	r0, [pc, #68]	; (1dadc <rand_prio_low_vector_get_blocking+0x58>)
   1da98:	234d      	movs	r3, #77	; 0x4d
   1da9a:	f006 fbd3 	bl	24244 <assert_print>
   1da9e:	4810      	ldr	r0, [pc, #64]	; (1dae0 <rand_prio_low_vector_get_blocking+0x5c>)
   1daa0:	f006 fbd0 	bl	24244 <assert_print>
   1daa4:	480c      	ldr	r0, [pc, #48]	; (1dad8 <rand_prio_low_vector_get_blocking+0x54>)
   1daa6:	214d      	movs	r1, #77	; 0x4d
	int err = entropy_get_entropy(entropy_source, p_buff, length);

	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   1daa8:	f006 fbc5 	bl	24236 <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1daac:	4619      	mov	r1, r3
   1daae:	47a0      	blx	r4
   1dab0:	b168      	cbz	r0, 1dace <rand_prio_low_vector_get_blocking+0x4a>
   1dab2:	490c      	ldr	r1, [pc, #48]	; (1dae4 <rand_prio_low_vector_get_blocking+0x60>)
   1dab4:	4a0c      	ldr	r2, [pc, #48]	; (1dae8 <rand_prio_low_vector_get_blocking+0x64>)
   1dab6:	4809      	ldr	r0, [pc, #36]	; (1dadc <rand_prio_low_vector_get_blocking+0x58>)
   1dab8:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
   1dabc:	f006 fbc2 	bl	24244 <assert_print>
   1dac0:	480a      	ldr	r0, [pc, #40]	; (1daec <rand_prio_low_vector_get_blocking+0x68>)
   1dac2:	f006 fbbf 	bl	24244 <assert_print>
   1dac6:	4808      	ldr	r0, [pc, #32]	; (1dae8 <rand_prio_low_vector_get_blocking+0x64>)
   1dac8:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
   1dacc:	e7ec      	b.n	1daa8 <rand_prio_low_vector_get_blocking+0x24>
	(void) err;
}
   1dace:	bd10      	pop	{r4, pc}
   1dad0:	00026dd4 	.word	0x00026dd4
   1dad4:	0002a98f 	.word	0x0002a98f
   1dad8:	0002a95b 	.word	0x0002a95b
   1dadc:	00027c2a 	.word	0x00027c2a
   1dae0:	0002a9af 	.word	0x0002a9af
   1dae4:	000280f3 	.word	0x000280f3
   1dae8:	0002a9d5 	.word	0x0002a9d5
   1daec:	0002aa0e 	.word	0x0002aa0e

0001daf0 <rand_prio_low_vector_get>:
{
   1daf0:	b538      	push	{r3, r4, r5, lr}
   1daf2:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   1daf4:	480d      	ldr	r0, [pc, #52]	; (1db2c <rand_prio_low_vector_get+0x3c>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1daf6:	6883      	ldr	r3, [r0, #8]
   1daf8:	685d      	ldr	r5, [r3, #4]
   1dafa:	460a      	mov	r2, r1
   1dafc:	b975      	cbnz	r5, 1db1c <rand_prio_low_vector_get+0x2c>
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   1dafe:	490c      	ldr	r1, [pc, #48]	; (1db30 <rand_prio_low_vector_get+0x40>)
   1db00:	4a0c      	ldr	r2, [pc, #48]	; (1db34 <rand_prio_low_vector_get+0x44>)
   1db02:	480d      	ldr	r0, [pc, #52]	; (1db38 <rand_prio_low_vector_get+0x48>)
   1db04:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
   1db08:	f006 fb9c 	bl	24244 <assert_print>
   1db0c:	480b      	ldr	r0, [pc, #44]	; (1db3c <rand_prio_low_vector_get+0x4c>)
   1db0e:	f006 fb99 	bl	24244 <assert_print>
   1db12:	4808      	ldr	r0, [pc, #32]	; (1db34 <rand_prio_low_vector_get+0x44>)
   1db14:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
   1db18:	f006 fb8d 	bl	24236 <assert_post_action>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1db1c:	2300      	movs	r3, #0
   1db1e:	4621      	mov	r1, r4
   1db20:	47a8      	blx	r5
   1db22:	2800      	cmp	r0, #0
   1db24:	dbeb      	blt.n	1dafe <rand_prio_low_vector_get+0xe>
}
   1db26:	b2c0      	uxtb	r0, r0
   1db28:	bd38      	pop	{r3, r4, r5, pc}
   1db2a:	bf00      	nop
   1db2c:	00026dd4 	.word	0x00026dd4
   1db30:	0002aa48 	.word	0x0002aa48
   1db34:	0002a9d5 	.word	0x0002a9d5
   1db38:	00027c2a 	.word	0x00027c2a
   1db3c:	0002aa51 	.word	0x0002aa51

0001db40 <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   1db40:	4901      	ldr	r1, [pc, #4]	; (1db48 <receive_signal_raise+0x8>)
   1db42:	4802      	ldr	r0, [pc, #8]	; (1db4c <receive_signal_raise+0xc>)
   1db44:	f008 bf95 	b.w	26a72 <k_work_submit_to_queue>
   1db48:	20002e90 	.word	0x20002e90
   1db4c:	20002870 	.word	0x20002870

0001db50 <rand_prio_high_vector_get>:
{
   1db50:	b538      	push	{r3, r4, r5, lr}
   1db52:	4604      	mov	r4, r0
	const struct entropy_driver_api *api =
   1db54:	480d      	ldr	r0, [pc, #52]	; (1db8c <rand_prio_high_vector_get+0x3c>)
	if (unlikely(!api->get_entropy_isr)) {
   1db56:	6883      	ldr	r3, [r0, #8]
   1db58:	685d      	ldr	r5, [r3, #4]
   1db5a:	460a      	mov	r2, r1
   1db5c:	b975      	cbnz	r5, 1db7c <rand_prio_high_vector_get+0x2c>
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   1db5e:	490c      	ldr	r1, [pc, #48]	; (1db90 <rand_prio_high_vector_get+0x40>)
   1db60:	4a0c      	ldr	r2, [pc, #48]	; (1db94 <rand_prio_high_vector_get+0x44>)
   1db62:	480d      	ldr	r0, [pc, #52]	; (1db98 <rand_prio_high_vector_get+0x48>)
   1db64:	f44f 73e5 	mov.w	r3, #458	; 0x1ca
   1db68:	f006 fb6c 	bl	24244 <assert_print>
   1db6c:	480b      	ldr	r0, [pc, #44]	; (1db9c <rand_prio_high_vector_get+0x4c>)
   1db6e:	f006 fb69 	bl	24244 <assert_print>
   1db72:	4808      	ldr	r0, [pc, #32]	; (1db94 <rand_prio_high_vector_get+0x44>)
   1db74:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
   1db78:	f006 fb5d 	bl	24236 <assert_post_action>
	return api->get_entropy_isr(dev, buffer, length, flags);
   1db7c:	2300      	movs	r3, #0
   1db7e:	4621      	mov	r1, r4
   1db80:	47a8      	blx	r5
   1db82:	2800      	cmp	r0, #0
   1db84:	dbeb      	blt.n	1db5e <rand_prio_high_vector_get+0xe>
}
   1db86:	b2c0      	uxtb	r0, r0
   1db88:	bd38      	pop	{r3, r4, r5, pc}
   1db8a:	bf00      	nop
   1db8c:	00026dd4 	.word	0x00026dd4
   1db90:	0002aa48 	.word	0x0002aa48
   1db94:	0002a9d5 	.word	0x0002a9d5
   1db98:	00027c2a 	.word	0x00027c2a
   1db9c:	0002aa94 	.word	0x0002aa94

0001dba0 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(void)
{
   1dba0:	b5b0      	push	{r4, r5, r7, lr}
   1dba2:	b082      	sub	sp, #8
	int err = 0;

	bt_hci_driver_register(&drv);
   1dba4:	4835      	ldr	r0, [pc, #212]	; (1dc7c <hci_driver_init+0xdc>)
{
   1dba6:	af00      	add	r7, sp, #0
	bt_hci_driver_register(&drv);
   1dba8:	f7f9 f920 	bl	16dec <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   1dbac:	4834      	ldr	r0, [pc, #208]	; (1dc80 <hci_driver_init+0xe0>)
   1dbae:	f7e3 fa77 	bl	10a0 <sdc_init>
		err = sdc_support_adv();
   1dbb2:	f7e3 faef 	bl	1194 <sdc_support_adv>
		if (err) {
   1dbb6:	b120      	cbz	r0, 1dbc2 <hci_driver_init+0x22>
			return -ENOTSUP;
   1dbb8:	f06f 0085 	mvn.w	r0, #133	; 0x85
	if (err) {
		return err;
	}

	return err;
}
   1dbbc:	3708      	adds	r7, #8
   1dbbe:	46bd      	mov	sp, r7
   1dbc0:	bdb0      	pop	{r4, r5, r7, pc}
		err = sdc_support_peripheral();
   1dbc2:	f7e3 fb17 	bl	11f4 <sdc_support_peripheral>
		if (err) {
   1dbc6:	2800      	cmp	r0, #0
   1dbc8:	d1f6      	bne.n	1dbb8 <hci_driver_init+0x18>
			err = sdc_support_dle_peripheral();
   1dbca:	f7e3 faf3 	bl	11b4 <sdc_support_dle_peripheral>
			if (err) {
   1dbce:	2800      	cmp	r0, #0
   1dbd0:	d1f2      	bne.n	1dbb8 <hci_driver_init+0x18>
		err = sdc_support_le_2m_phy();
   1dbd2:	f7e3 faff 	bl	11d4 <sdc_support_le_2m_phy>
		if (err) {
   1dbd6:	2800      	cmp	r0, #0
   1dbd8:	d1ee      	bne.n	1dbb8 <hci_driver_init+0x18>
			err = sdc_support_phy_update_peripheral();
   1dbda:	f7e3 fb1b 	bl	1214 <sdc_support_phy_update_peripheral>
			if (err) {
   1dbde:	4604      	mov	r4, r0
   1dbe0:	2800      	cmp	r0, #0
   1dbe2:	d1e9      	bne.n	1dbb8 <hci_driver_init+0x18>
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1dbe4:	2501      	movs	r5, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1dbe6:	1d3a      	adds	r2, r7, #4
   1dbe8:	2102      	movs	r1, #2
	cfg.peripheral_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   1dbea:	713d      	strb	r5, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1dbec:	f7e3 f9d2 	bl	f94 <sdc_cfg_set>
	if (required_memory < 0) {
   1dbf0:	2800      	cmp	r0, #0
   1dbf2:	dbe3      	blt.n	1dbbc <hci_driver_init+0x1c>
	cfg.fal_size = CONFIG_BT_CTLR_FAL_SIZE;
   1dbf4:	2308      	movs	r3, #8
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1dbf6:	1d3a      	adds	r2, r7, #4
   1dbf8:	2107      	movs	r1, #7
   1dbfa:	4620      	mov	r0, r4
	cfg.fal_size = CONFIG_BT_CTLR_FAL_SIZE;
   1dbfc:	80bb      	strh	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1dbfe:	f7e3 f9c9 	bl	f94 <sdc_cfg_set>
	if (required_memory < 0) {
   1dc02:	2800      	cmp	r0, #0
   1dc04:	dbda      	blt.n	1dbbc <hci_driver_init+0x1c>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1dc06:	4b1f      	ldr	r3, [pc, #124]	; (1dc84 <hci_driver_init+0xe4>)
   1dc08:	607b      	str	r3, [r7, #4]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1dc0a:	1d3a      	adds	r2, r7, #4
   1dc0c:	2103      	movs	r1, #3
   1dc0e:	4620      	mov	r0, r4
   1dc10:	f7e3 f9c0 	bl	f94 <sdc_cfg_set>
	if (required_memory < 0) {
   1dc14:	2800      	cmp	r0, #0
   1dc16:	dbd1      	blt.n	1dbbc <hci_driver_init+0x1c>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1dc18:	1d3a      	adds	r2, r7, #4
   1dc1a:	2104      	movs	r1, #4
   1dc1c:	4620      	mov	r0, r4
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   1dc1e:	713d      	strb	r5, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1dc20:	f7e3 f9b8 	bl	f94 <sdc_cfg_set>
	if (required_memory < 0) {
   1dc24:	2800      	cmp	r0, #0
   1dc26:	dbc9      	blt.n	1dbbc <hci_driver_init+0x1c>
	cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1dc28:	231f      	movs	r3, #31
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1dc2a:	1d3a      	adds	r2, r7, #4
   1dc2c:	2106      	movs	r1, #6
   1dc2e:	4620      	mov	r0, r4
	cfg.adv_buffer_cfg.max_adv_data = SDC_DEFAULT_ADV_BUF_SIZE;
   1dc30:	80bb      	strh	r3, [r7, #4]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1dc32:	f7e3 f9af 	bl	f94 <sdc_cfg_set>
	if (required_memory < 0) {
   1dc36:	2800      	cmp	r0, #0
   1dc38:	dbc0      	blt.n	1dbbc <hci_driver_init+0x1c>
	if (required_memory > sizeof(sdc_mempool)) {
   1dc3a:	f240 73da 	movw	r3, #2010	; 0x7da
   1dc3e:	4298      	cmp	r0, r3
   1dc40:	dd19      	ble.n	1dc76 <hci_driver_init+0xd6>
		LOG_ERR("Allocated memory too low: %u < %u",
   1dc42:	466c      	mov	r4, sp
   1dc44:	b088      	sub	sp, #32
   1dc46:	466a      	mov	r2, sp
   1dc48:	490f      	ldr	r1, [pc, #60]	; (1dc88 <hci_driver_init+0xe8>)
   1dc4a:	61d0      	str	r0, [r2, #28]
   1dc4c:	e9c2 1305 	strd	r1, r3, [r2, #20]
   1dc50:	2304      	movs	r3, #4
   1dc52:	f842 3f10 	str.w	r3, [r2, #16]!
   1dc56:	480d      	ldr	r0, [pc, #52]	; (1dc8c <hci_driver_init+0xec>)
   1dc58:	2300      	movs	r3, #0
   1dc5a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   1dc5e:	f7f6 f995 	bl	13f8c <z_impl_z_log_msg_static_create>
   1dc62:	46a5      	mov	sp, r4
		k_panic();
   1dc64:	4040      	eors	r0, r0
   1dc66:	f380 8811 	msr	BASEPRI, r0
   1dc6a:	f04f 0004 	mov.w	r0, #4
   1dc6e:	df02      	svc	2
		return -ENOMEM;
   1dc70:	f06f 000b 	mvn.w	r0, #11
   1dc74:	e7a2      	b.n	1dbbc <hci_driver_init+0x1c>
	return 0;
   1dc76:	2000      	movs	r0, #0
	if (err) {
   1dc78:	e7a0      	b.n	1dbbc <hci_driver_init+0x1c>
   1dc7a:	bf00      	nop
   1dc7c:	00027728 	.word	0x00027728
   1dc80:	0001da3d 	.word	0x0001da3d
   1dc84:	02031b1b 	.word	0x02031b1b
   1dc88:	0002aad8 	.word	0x0002aad8
   1dc8c:	0002703c 	.word	0x0002703c

0001dc90 <hci_driver_open>:
{
   1dc90:	b590      	push	{r4, r7, lr}
   1dc92:	b08d      	sub	sp, #52	; 0x34
	k_work_init(&receive_work, receive_work_handler);
   1dc94:	4936      	ldr	r1, [pc, #216]	; (1dd70 <hci_driver_open+0xe0>)
   1dc96:	4837      	ldr	r0, [pc, #220]	; (1dd74 <hci_driver_open+0xe4>)
{
   1dc98:	af00      	add	r7, sp, #0
	k_work_init(&receive_work, receive_work_handler);
   1dc9a:	f003 f867 	bl	20d6c <k_work_init>
		hci_ecdh_init();
   1dc9e:	f000 fe67 	bl	1e970 <hci_ecdh_init>
	sdc_build_revision_get(build_revision);
   1dca2:	1d38      	adds	r0, r7, #4
   1dca4:	f7e3 f968 	bl	f78 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1dca8:	466c      	mov	r4, sp
   1dcaa:	b088      	sub	sp, #32
   1dcac:	466a      	mov	r2, sp
   1dcae:	4b32      	ldr	r3, [pc, #200]	; (1dd78 <hci_driver_open+0xe8>)
   1dcb0:	6153      	str	r3, [r2, #20]
   1dcb2:	4b32      	ldr	r3, [pc, #200]	; (1dd7c <hci_driver_open+0xec>)
   1dcb4:	6193      	str	r3, [r2, #24]
   1dcb6:	f44f 7300 	mov.w	r3, #512	; 0x200
   1dcba:	8393      	strh	r3, [r2, #28]
   1dcbc:	4b30      	ldr	r3, [pc, #192]	; (1dd80 <hci_driver_open+0xf0>)
   1dcbe:	f842 3f10 	str.w	r3, [r2, #16]!
   1dcc2:	4930      	ldr	r1, [pc, #192]	; (1dd84 <hci_driver_open+0xf4>)
   1dcc4:	4830      	ldr	r0, [pc, #192]	; (1dd88 <hci_driver_open+0xf8>)
   1dcc6:	1d3b      	adds	r3, r7, #4
   1dcc8:	f7f6 f960 	bl	13f8c <z_impl_z_log_msg_static_create>
   1dccc:	46a5      	mov	sp, r4
   1dcce:	482f      	ldr	r0, [pc, #188]	; (1dd8c <hci_driver_open+0xfc>)
   1dcd0:	f008 fdf6 	bl	268c0 <z_device_is_ready>
	if (!device_is_ready(entropy_source)) {
   1dcd4:	4603      	mov	r3, r0
   1dcd6:	b980      	cbnz	r0, 1dcfa <hci_driver_open+0x6a>
		LOG_ERR("Entropy source device not ready");
   1dcd8:	4a2d      	ldr	r2, [pc, #180]	; (1dd90 <hci_driver_open+0x100>)
   1dcda:	62fa      	str	r2, [r7, #44]	; 0x2c
   1dcdc:	2202      	movs	r2, #2
   1dcde:	62ba      	str	r2, [r7, #40]	; 0x28
   1dce0:	4829      	ldr	r0, [pc, #164]	; (1dd88 <hci_driver_open+0xf8>)
   1dce2:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1dce6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
   1dcea:	f06f 0412 	mvn.w	r4, #18
   1dcee:	f7f6 f94d 	bl	13f8c <z_impl_z_log_msg_static_create>
}
   1dcf2:	4620      	mov	r0, r4
   1dcf4:	3734      	adds	r7, #52	; 0x34
   1dcf6:	46bd      	mov	sp, r7
   1dcf8:	bd90      	pop	{r4, r7, pc}
	sdc_rand_source_t rand_functions = {
   1dcfa:	4a26      	ldr	r2, [pc, #152]	; (1dd94 <hci_driver_open+0x104>)
   1dcfc:	ca07      	ldmia	r2, {r0, r1, r2}
   1dcfe:	f107 0318 	add.w	r3, r7, #24
   1dd02:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1dd06:	4618      	mov	r0, r3
   1dd08:	f7e3 fac8 	bl	129c <sdc_rand_source_register>
	if (err) {
   1dd0c:	b188      	cbz	r0, 1dd32 <hci_driver_open+0xa2>
		LOG_ERR("Failed to register rand source (%d)", err);
   1dd0e:	b088      	sub	sp, #32
   1dd10:	466a      	mov	r2, sp
   1dd12:	4b21      	ldr	r3, [pc, #132]	; (1dd98 <hci_driver_open+0x108>)
   1dd14:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1dd18:	2303      	movs	r3, #3
   1dd1a:	f842 3f10 	str.w	r3, [r2, #16]!
   1dd1e:	481a      	ldr	r0, [pc, #104]	; (1dd88 <hci_driver_open+0xf8>)
   1dd20:	2300      	movs	r3, #0
   1dd22:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1dd26:	f7f6 f931 	bl	13f8c <z_impl_z_log_msg_static_create>
   1dd2a:	46a5      	mov	sp, r4
		return -EINVAL;
   1dd2c:	f06f 0415 	mvn.w	r4, #21
   1dd30:	e7df      	b.n	1dcf2 <hci_driver_open+0x62>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1dd32:	f04f 30ff 	mov.w	r0, #4294967295
   1dd36:	f04f 31ff 	mov.w	r1, #4294967295
   1dd3a:	f7ff fe5b 	bl	1d9f4 <multithreading_lock_acquire>
	if (err) {
   1dd3e:	4604      	mov	r4, r0
   1dd40:	2800      	cmp	r0, #0
   1dd42:	d1d6      	bne.n	1dcf2 <hci_driver_open+0x62>
	err = sdc_enable(receive_signal_raise, sdc_mempool);
   1dd44:	4915      	ldr	r1, [pc, #84]	; (1dd9c <hci_driver_open+0x10c>)
   1dd46:	4816      	ldr	r0, [pc, #88]	; (1dda0 <hci_driver_open+0x110>)
   1dd48:	f7e3 f980 	bl	104c <sdc_enable>
	if (err) {
   1dd4c:	4604      	mov	r4, r0
   1dd4e:	b110      	cbz	r0, 1dd56 <hci_driver_open+0xc6>
	MULTITHREADING_LOCK_RELEASE();
   1dd50:	f7ff fe58 	bl	1da04 <multithreading_lock_release>
	return 0;
   1dd54:	e7cd      	b.n	1dcf2 <hci_driver_open+0x62>
		sdc_hci_cmd_vs_event_length_set_t params = {
   1dd56:	f641 534c 	movw	r3, #7500	; 0x1d4c
		err = sdc_hci_cmd_vs_event_length_set(&params);
   1dd5a:	4638      	mov	r0, r7
		sdc_hci_cmd_vs_event_length_set_t params = {
   1dd5c:	603b      	str	r3, [r7, #0]
		err = sdc_hci_cmd_vs_event_length_set(&params);
   1dd5e:	f7ef fade 	bl	d31e <sdc_hci_cmd_vs_event_length_set>
		if (err) {
   1dd62:	2800      	cmp	r0, #0
   1dd64:	d0f4      	beq.n	1dd50 <hci_driver_open+0xc0>
			MULTITHREADING_LOCK_RELEASE();
   1dd66:	f7ff fe4d 	bl	1da04 <multithreading_lock_release>
			return -ENOTSUP;
   1dd6a:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1dd6e:	e7c0      	b.n	1dcf2 <hci_driver_open+0x62>
   1dd70:	0002662b 	.word	0x0002662b
   1dd74:	20002e90 	.word	0x20002e90
   1dd78:	0002924b 	.word	0x0002924b
   1dd7c:	0002aafa 	.word	0x0002aafa
   1dd80:	01000003 	.word	0x01000003
   1dd84:	01401cc0 	.word	0x01401cc0
   1dd88:	0002703c 	.word	0x0002703c
   1dd8c:	00026dd4 	.word	0x00026dd4
   1dd90:	0002ab21 	.word	0x0002ab21
   1dd94:	00027158 	.word	0x00027158
   1dd98:	0002ab41 	.word	0x0002ab41
   1dd9c:	20001fc8 	.word	0x20001fc8
   1dda0:	0001db41 	.word	0x0001db41

0001dda4 <hci_driver_receive_process>:
{
   1dda4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dda6:	b089      	sub	sp, #36	; 0x24
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1dda8:	f04f 30ff 	mov.w	r0, #4294967295
{
   1ddac:	af00      	add	r7, sp, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1ddae:	f04f 31ff 	mov.w	r1, #4294967295
   1ddb2:	f7ff fe1f 	bl	1d9f4 <multithreading_lock_acquire>
	if (!errcode) {
   1ddb6:	bb40      	cbnz	r0, 1de0a <hci_driver_receive_process+0x66>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   1ddb8:	4d33      	ldr	r5, [pc, #204]	; (1de88 <hci_driver_receive_process+0xe4>)
   1ddba:	1df9      	adds	r1, r7, #7
   1ddbc:	4628      	mov	r0, r5
   1ddbe:	f000 fc61 	bl	1e684 <hci_internal_msg_get>
   1ddc2:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1ddc4:	f7ff fe1e 	bl	1da04 <multithreading_lock_release>
	if (errcode) {
   1ddc8:	b9fc      	cbnz	r4, 1de0a <hci_driver_receive_process+0x66>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   1ddca:	79fe      	ldrb	r6, [r7, #7]
   1ddcc:	2e04      	cmp	r6, #4
   1ddce:	d133      	bne.n	1de38 <hci_driver_receive_process+0x94>
	switch (hdr->evt) {
   1ddd0:	7828      	ldrb	r0, [r5, #0]
   1ddd2:	283e      	cmp	r0, #62	; 0x3e
   1ddd4:	d01c      	beq.n	1de10 <hci_driver_receive_process+0x6c>
   1ddd6:	28ff      	cmp	r0, #255	; 0xff
   1ddd8:	d021      	beq.n	1de1e <hci_driver_receive_process+0x7a>
		switch (subevent) {
   1ddda:	f04f 32ff 	mov.w	r2, #4294967295
   1ddde:	f04f 33ff 	mov.w	r3, #4294967295
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1dde2:	4621      	mov	r1, r4
   1dde4:	f7f7 fe9a 	bl	15b1c <bt_buf_get_evt>
	if (!evt_buf) {
   1dde8:	4606      	mov	r6, r0
   1ddea:	b9d8      	cbnz	r0, 1de24 <hci_driver_receive_process+0x80>
		if (discardable) {
   1ddec:	b95c      	cbnz	r4, 1de06 <hci_driver_receive_process+0x62>
		LOG_ERR("No event buffer available");
   1ddee:	4b27      	ldr	r3, [pc, #156]	; (1de8c <hci_driver_receive_process+0xe8>)
   1ddf0:	61fb      	str	r3, [r7, #28]
   1ddf2:	2302      	movs	r3, #2
   1ddf4:	61bb      	str	r3, [r7, #24]
   1ddf6:	4826      	ldr	r0, [pc, #152]	; (1de90 <hci_driver_receive_process+0xec>)
   1ddf8:	4623      	mov	r3, r4
   1ddfa:	f107 0218 	add.w	r2, r7, #24
   1ddfe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1de02:	f7f6 f8c3 	bl	13f8c <z_impl_z_log_msg_static_create>
		receive_signal_raise();
   1de06:	f7ff fe9b 	bl	1db40 <receive_signal_raise>
}
   1de0a:	3724      	adds	r7, #36	; 0x24
   1de0c:	46bd      	mov	sp, r7
   1de0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (me->subevent) {
   1de10:	78ab      	ldrb	r3, [r5, #2]
   1de12:	2b02      	cmp	r3, #2
		switch (subevent) {
   1de14:	d1e1      	bne.n	1ddda <hci_driver_receive_process+0x36>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1de16:	2200      	movs	r2, #0
   1de18:	2300      	movs	r3, #0
			return true;
   1de1a:	2401      	movs	r4, #1
   1de1c:	e7e1      	b.n	1dde2 <hci_driver_receive_process+0x3e>
		switch (subevent) {
   1de1e:	78ab      	ldrb	r3, [r5, #2]
   1de20:	2b80      	cmp	r3, #128	; 0x80
   1de22:	e7f7      	b.n	1de14 <hci_driver_receive_process+0x70>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1de24:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1de26:	4918      	ldr	r1, [pc, #96]	; (1de88 <hci_driver_receive_process+0xe4>)
   1de28:	3202      	adds	r2, #2
   1de2a:	300c      	adds	r0, #12
   1de2c:	f008 f837 	bl	25e9e <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1de30:	4630      	mov	r0, r6
	bt_recv(data_buf);
   1de32:	f7f8 ffa7 	bl	16d84 <bt_recv>
   1de36:	e7e6      	b.n	1de06 <hci_driver_receive_process+0x62>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   1de38:	2e02      	cmp	r6, #2
   1de3a:	d114      	bne.n	1de66 <hci_driver_receive_process+0xc2>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1de3c:	f04f 32ff 	mov.w	r2, #4294967295
   1de40:	f04f 33ff 	mov.w	r3, #4294967295
   1de44:	2003      	movs	r0, #3
   1de46:	f7f7 fe1d 	bl	15a84 <bt_buf_get_rx>
	if (!data_buf) {
   1de4a:	4604      	mov	r4, r0
   1de4c:	b918      	cbnz	r0, 1de56 <hci_driver_receive_process+0xb2>
		LOG_ERR("No data buffer available");
   1de4e:	4b11      	ldr	r3, [pc, #68]	; (1de94 <hci_driver_receive_process+0xf0>)
   1de50:	e9c7 6306 	strd	r6, r3, [r7, #24]
   1de54:	e7cf      	b.n	1ddf6 <hci_driver_receive_process+0x52>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1de56:	886a      	ldrh	r2, [r5, #2]
   1de58:	4629      	mov	r1, r5
   1de5a:	3204      	adds	r2, #4
   1de5c:	300c      	adds	r0, #12
   1de5e:	f008 f81e 	bl	25e9e <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1de62:	4620      	mov	r0, r4
   1de64:	e7e5      	b.n	1de32 <hci_driver_receive_process+0x8e>
			LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch",
   1de66:	466d      	mov	r5, sp
   1de68:	b088      	sub	sp, #32
   1de6a:	466a      	mov	r2, sp
   1de6c:	4b0a      	ldr	r3, [pc, #40]	; (1de98 <hci_driver_receive_process+0xf4>)
   1de6e:	e9c2 3605 	strd	r3, r6, [r2, #20]
   1de72:	2303      	movs	r3, #3
   1de74:	f842 3f10 	str.w	r3, [r2, #16]!
   1de78:	4805      	ldr	r0, [pc, #20]	; (1de90 <hci_driver_receive_process+0xec>)
   1de7a:	4623      	mov	r3, r4
   1de7c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1de80:	f7f6 f884 	bl	13f8c <z_impl_z_log_msg_static_create>
   1de84:	46ad      	mov	sp, r5
   1de86:	e7be      	b.n	1de06 <hci_driver_receive_process+0x62>
   1de88:	200030b7 	.word	0x200030b7
   1de8c:	0002ab65 	.word	0x0002ab65
   1de90:	0002703c 	.word	0x0002703c
   1de94:	0002ab7f 	.word	0x0002ab7f
   1de98:	0002ab98 	.word	0x0002ab98

0001de9c <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   1de9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1de9e:	4ca6      	ldr	r4, [pc, #664]	; (1e138 <hci_internal_cmd_put+0x29c>)
   1dea0:	8806      	ldrh	r6, [r0, #0]
   1dea2:	7823      	ldrb	r3, [r4, #0]
{
   1dea4:	4605      	mov	r5, r0
	if (cmd_complete_or_status.occurred) {
   1dea6:	2b00      	cmp	r3, #0
   1dea8:	f040 83e6 	bne.w	1e678 <hci_internal_cmd_put+0x7dc>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1deac:	2304      	movs	r3, #4
   1deae:	f88d 3007 	strb.w	r3, [sp, #7]
	if (user_cmd_handler) {
   1deb2:	4ba2      	ldr	r3, [pc, #648]	; (1e13c <hci_internal_cmd_put+0x2a0>)
   1deb4:	681f      	ldr	r7, [r3, #0]
   1deb6:	b1b7      	cbz	r7, 1dee6 <hci_internal_cmd_put+0x4a>
		status = user_cmd_handler(cmd_in,
   1deb8:	f10d 0306 	add.w	r3, sp, #6
   1debc:	f10d 0207 	add.w	r2, sp, #7
   1dec0:	1c61      	adds	r1, r4, #1
   1dec2:	47b8      	blx	r7
	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   1dec4:	2801      	cmp	r0, #1
   1dec6:	d00e      	beq.n	1dee6 <hci_internal_cmd_put+0x4a>
	if (generate_command_status_event ||
   1dec8:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1decc:	2b00      	cmp	r3, #0
   1dece:	f040 83b1 	bne.w	1e634 <hci_internal_cmd_put+0x798>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   1ded2:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   1ded6:	70a3      	strb	r3, [r4, #2]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1ded8:	220e      	movs	r2, #14
	evt_data->ncmd = 1;
   1deda:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1dedc:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   1dede:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1dee0:	80a6      	strh	r6, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1dee2:	71a0      	strb	r0, [r4, #6]
}
   1dee4:	e3af      	b.n	1e646 <hci_internal_cmd_put+0x7aa>
		switch (BT_OGF(opcode)) {
   1dee6:	f5b6 5f10 	cmp.w	r6, #9216	; 0x2400
   1deea:	ea4f 2396 	mov.w	r3, r6, lsr #10
   1deee:	d20f      	bcs.n	1df10 <hci_internal_cmd_put+0x74>
   1def0:	2b00      	cmp	r3, #0
   1def2:	d079      	beq.n	1dfe8 <hci_internal_cmd_put+0x14c>
   1def4:	3b01      	subs	r3, #1
   1def6:	2b07      	cmp	r3, #7
   1def8:	f200 8392 	bhi.w	1e620 <hci_internal_cmd_put+0x784>
   1defc:	e8df f013 	tbh	[pc, r3, lsl #1]
   1df00:	0390000d 	.word	0x0390000d
   1df04:	008e003f 	.word	0x008e003f
   1df08:	03900390 	.word	0x03900390
   1df0c:	00f20390 	.word	0x00f20390
   1df10:	2b3f      	cmp	r3, #63	; 0x3f
   1df12:	f000 82b9 	beq.w	1e488 <hci_internal_cmd_put+0x5ec>
	switch (opcode)	{
   1df16:	2001      	movs	r0, #1
   1df18:	e310      	b.n	1e53c <hci_internal_cmd_put+0x6a0>
	return ((uint16_t)src[1] << 8) | src[0];
   1df1a:	4628      	mov	r0, r5
	switch (opcode)	{
   1df1c:	f240 4206 	movw	r2, #1030	; 0x406
   1df20:	f930 3b03 	ldrsh.w	r3, [r0], #3
   1df24:	4293      	cmp	r3, r2
   1df26:	d010      	beq.n	1df4a <hci_internal_cmd_put+0xae>
   1df28:	f240 421d 	movw	r2, #1053	; 0x41d
   1df2c:	4293      	cmp	r3, r2
   1df2e:	d023      	beq.n	1df78 <hci_internal_cmd_put+0xdc>
   1df30:	2001      	movs	r0, #1
	switch (hci_opcode) {
   1df32:	f240 4306 	movw	r3, #1030	; 0x406
   1df36:	429e      	cmp	r6, r3
   1df38:	f040 836c 	bne.w	1e614 <hci_internal_cmd_put+0x778>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1df3c:	230f      	movs	r3, #15
   1df3e:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1df40:	2304      	movs	r3, #4
   1df42:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   1df44:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1df46:	2301      	movs	r3, #1
   1df48:	e033      	b.n	1dfb2 <hci_internal_cmd_put+0x116>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1df4a:	f7ef fa4e 	bl	d3ea <sdc_hci_cmd_lc_disconnect>
	switch (hci_opcode) {
   1df4e:	f242 0332 	movw	r3, #8242	; 0x2032
   1df52:	429e      	cmp	r6, r3
   1df54:	f240 8354 	bls.w	1e600 <hci_internal_cmd_put+0x764>
   1df58:	f242 0385 	movw	r3, #8325	; 0x2085
   1df5c:	429e      	cmp	r6, r3
   1df5e:	d840      	bhi.n	1dfe2 <hci_internal_cmd_put+0x146>
   1df60:	f242 036c 	movw	r3, #8300	; 0x206c
   1df64:	429e      	cmp	r6, r3
   1df66:	f5a6 5301 	sub.w	r3, r6, #8256	; 0x2040
   1df6a:	f200 835b 	bhi.w	1e624 <hci_internal_cmd_put+0x788>
   1df6e:	3b03      	subs	r3, #3
   1df70:	b29b      	uxth	r3, r3
   1df72:	2b01      	cmp	r3, #1
   1df74:	d835      	bhi.n	1dfe2 <hci_internal_cmd_put+0x146>
   1df76:	e7e1      	b.n	1df3c <hci_internal_cmd_put+0xa0>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   1df78:	f7ef fa39 	bl	d3ee <sdc_hci_cmd_lc_read_remote_version_information>
	switch (hci_opcode) {
   1df7c:	e7e7      	b.n	1df4e <hci_internal_cmd_put+0xb2>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1df7e:	4628      	mov	r0, r5
	switch (opcode)	{
   1df80:	f640 4263 	movw	r2, #3171	; 0xc63
   1df84:	f930 3b03 	ldrsh.w	r3, [r0], #3
   1df88:	4293      	cmp	r3, r2
   1df8a:	d03b      	beq.n	1e004 <hci_internal_cmd_put+0x168>
   1df8c:	dc16      	bgt.n	1dfbc <hci_internal_cmd_put+0x120>
   1df8e:	f640 4203 	movw	r2, #3075	; 0xc03
   1df92:	4293      	cmp	r3, r2
   1df94:	d02a      	beq.n	1dfec <hci_internal_cmd_put+0x150>
   1df96:	f640 422d 	movw	r2, #3117	; 0xc2d
   1df9a:	4293      	cmp	r3, r2
   1df9c:	d029      	beq.n	1dff2 <hci_internal_cmd_put+0x156>
   1df9e:	f640 4201 	movw	r2, #3073	; 0xc01
   1dfa2:	4293      	cmp	r3, r2
   1dfa4:	d01b      	beq.n	1dfde <hci_internal_cmd_put+0x142>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1dfa6:	230f      	movs	r3, #15
   1dfa8:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1dfaa:	2304      	movs	r3, #4
   1dfac:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   1dfae:	2301      	movs	r3, #1
   1dfb0:	70e3      	strb	r3, [r4, #3]
	evt_data->ncmd = 1;
   1dfb2:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1dfb4:	f8a4 6005 	strh.w	r6, [r4, #5]
		cmd_complete_or_status.raw_event[0] == BT_HCI_EVT_CMD_COMPLETE) {
		/* SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
		 * will generate command complete at a later time (unless unsupported)
		 */

		cmd_complete_or_status.occurred = false;
   1dfb8:	7023      	strb	r3, [r4, #0]
   1dfba:	e087      	b.n	1e0cc <hci_internal_cmd_put+0x230>
	switch (opcode)	{
   1dfbc:	f640 427b 	movw	r2, #3195	; 0xc7b
   1dfc0:	4293      	cmp	r3, r2
   1dfc2:	d022      	beq.n	1e00a <hci_internal_cmd_put+0x16e>
   1dfc4:	f640 427c 	movw	r2, #3196	; 0xc7c
   1dfc8:	4293      	cmp	r3, r2
   1dfca:	d1ec      	bne.n	1dfa6 <hci_internal_cmd_put+0x10a>
		*param_length_out +=
   1dfcc:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1dfd0:	495b      	ldr	r1, [pc, #364]	; (1e140 <hci_internal_cmd_put+0x2a4>)
		*param_length_out +=
   1dfd2:	3302      	adds	r3, #2
   1dfd4:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1dfd8:	f7ef f99b 	bl	d312 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
	if (generate_command_status_event ||
   1dfdc:	e001      	b.n	1dfe2 <hci_internal_cmd_put+0x146>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1dfde:	f7ef f98e 	bl	d2fe <sdc_hci_cmd_cb_set_event_mask>
	if (generate_command_status_event ||
   1dfe2:	2801      	cmp	r0, #1
   1dfe4:	f47f af75 	bne.w	1ded2 <hci_internal_cmd_put+0x36>
	switch (hci_opcode) {
   1dfe8:	2001      	movs	r0, #1
   1dfea:	e323      	b.n	1e634 <hci_internal_cmd_put+0x798>
		return sdc_hci_cmd_cb_reset();
   1dfec:	f7e3 fa44 	bl	1478 <sdc_hci_cmd_cb_reset>
	if (generate_command_status_event ||
   1dff0:	e7f7      	b.n	1dfe2 <hci_internal_cmd_put+0x146>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   1dff2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1dff6:	4952      	ldr	r1, [pc, #328]	; (1e140 <hci_internal_cmd_put+0x2a4>)
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   1dff8:	3303      	adds	r3, #3
   1dffa:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1dffe:	f7ef f97c 	bl	d2fa <sdc_hci_cmd_cb_read_transmit_power_level>
	if (generate_command_status_event ||
   1e002:	e7ee      	b.n	1dfe2 <hci_internal_cmd_put+0x146>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   1e004:	f7ef f980 	bl	d308 <sdc_hci_cmd_cb_set_event_mask_page_2>
	if (generate_command_status_event ||
   1e008:	e7eb      	b.n	1dfe2 <hci_internal_cmd_put+0x146>
		*param_length_out +=
   1e00a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1e00e:	494c      	ldr	r1, [pc, #304]	; (1e140 <hci_internal_cmd_put+0x2a4>)
		*param_length_out +=
   1e010:	3304      	adds	r3, #4
   1e012:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1e016:	f7ef f96e 	bl	d2f6 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
	if (generate_command_status_event ||
   1e01a:	e7e2      	b.n	1dfe2 <hci_internal_cmd_put+0x146>
	switch (opcode)	{
   1e01c:	882b      	ldrh	r3, [r5, #0]
   1e01e:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   1e022:	3b01      	subs	r3, #1
   1e024:	2b08      	cmp	r3, #8
   1e026:	d8be      	bhi.n	1dfa6 <hci_internal_cmd_put+0x10a>
   1e028:	a201      	add	r2, pc, #4	; (adr r2, 1e030 <hci_internal_cmd_put+0x194>)
   1e02a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e02e:	bf00      	nop
   1e030:	0001e055 	.word	0x0001e055
   1e034:	0001e067 	.word	0x0001e067
   1e038:	0001e093 	.word	0x0001e093
   1e03c:	0001dfa7 	.word	0x0001dfa7
   1e040:	0001dfa7 	.word	0x0001dfa7
   1e044:	0001dfa7 	.word	0x0001dfa7
   1e048:	0001dfa7 	.word	0x0001dfa7
   1e04c:	0001dfa7 	.word	0x0001dfa7
   1e050:	0001e0d3 	.word	0x0001e0d3
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   1e054:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1e058:	4839      	ldr	r0, [pc, #228]	; (1e140 <hci_internal_cmd_put+0x2a4>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   1e05a:	3308      	adds	r3, #8
   1e05c:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1e060:	f7ef f984 	bl	d36c <sdc_hci_cmd_ip_read_local_version_information>
	if (generate_command_status_event ||
   1e064:	e7bd      	b.n	1dfe2 <hci_internal_cmd_put+0x146>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1e066:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hci_internal_supported_commands((void *)event_out_params);
   1e06a:	4d35      	ldr	r5, [pc, #212]	; (1e140 <hci_internal_cmd_put+0x2a4>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1e06c:	3340      	adds	r3, #64	; 0x40
		hci_internal_supported_commands((void *)event_out_params);
   1e06e:	4628      	mov	r0, r5
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1e070:	f88d 3007 	strb.w	r3, [sp, #7]
		hci_internal_supported_commands((void *)event_out_params);
   1e074:	f008 fadb 	bl	2662e <hci_internal_supported_commands>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   1e078:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   1e07c:	70a3      	strb	r3, [r4, #2]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1e07e:	220e      	movs	r2, #14
	evt_data->ncmd = 1;
   1e080:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1e082:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   1e084:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1e086:	80a6      	strh	r6, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1e088:	2200      	movs	r2, #0
	evt_data->opcode = hci_opcode;
   1e08a:	71a2      	strb	r2, [r4, #6]
	cmd_complete_or_status.occurred = true;
   1e08c:	f805 3c07 	strb.w	r3, [r5, #-7]
	if (opcode == SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
   1e090:	e01c      	b.n	1e0cc <hci_internal_cmd_put+0x230>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1e092:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1e096:	4d2a      	ldr	r5, [pc, #168]	; (1e140 <hci_internal_cmd_put+0x2a4>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1e098:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   1e09a:	2208      	movs	r2, #8
   1e09c:	2100      	movs	r1, #0
   1e09e:	4628      	mov	r0, r5
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1e0a0:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1e0a4:	f006 fcdd 	bl	24a62 <memset>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   1e0a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   1e0ac:	70a3      	strb	r3, [r4, #2]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1e0ae:	2300      	movs	r3, #0
   1e0b0:	71a3      	strb	r3, [r4, #6]
	features->bdedr_not_supported = 1;
   1e0b2:	7ae3      	ldrb	r3, [r4, #11]
	evt_data->opcode = hci_opcode;
   1e0b4:	80a6      	strh	r6, [r4, #4]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1e0b6:	220e      	movs	r2, #14
	features->bdedr_not_supported = 1;
   1e0b8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1e0bc:	7062      	strb	r2, [r4, #1]
	features->bdedr_not_supported = 1;
   1e0be:	f043 0360 	orr.w	r3, r3, #96	; 0x60
	evt_data->ncmd = 1;
   1e0c2:	2201      	movs	r2, #1
   1e0c4:	70e2      	strb	r2, [r4, #3]
	features->bdedr_not_supported = 1;
   1e0c6:	72e3      	strb	r3, [r4, #11]
	cmd_complete_or_status.occurred = true;
   1e0c8:	f805 2c07 	strb.w	r2, [r5, #-7]
	}

	return 0;
   1e0cc:	2000      	movs	r0, #0
}
   1e0ce:	b003      	add	sp, #12
   1e0d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1e0d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1e0d6:	481a      	ldr	r0, [pc, #104]	; (1e140 <hci_internal_cmd_put+0x2a4>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1e0d8:	3306      	adds	r3, #6
   1e0da:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1e0de:	f7ef f943 	bl	d368 <sdc_hci_cmd_ip_read_bd_addr>
	if (generate_command_status_event ||
   1e0e2:	e77e      	b.n	1dfe2 <hci_internal_cmd_put+0x146>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1e0e4:	4628      	mov	r0, r5
	switch (opcode)	{
   1e0e6:	f242 014b 	movw	r1, #8267	; 0x204b
   1e0ea:	f830 3b03 	ldrh.w	r3, [r0], #3
   1e0ee:	b21a      	sxth	r2, r3
   1e0f0:	428a      	cmp	r2, r1
   1e0f2:	f300 80c7 	bgt.w	1e284 <hci_internal_cmd_put+0x3e8>
   1e0f6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1e0fa:	f242 0232 	movw	r2, #8242	; 0x2032
   1e0fe:	dc23      	bgt.n	1e148 <hci_internal_cmd_put+0x2ac>
	switch (hci_opcode) {
   1e100:	4296      	cmp	r6, r2
   1e102:	f000 80cc 	beq.w	1e29e <hci_internal_cmd_put+0x402>
   1e106:	f200 82b1 	bhi.w	1e66c <hci_internal_cmd_put+0x7d0>
   1e10a:	f242 0326 	movw	r3, #8230	; 0x2026
   1e10e:	429e      	cmp	r6, r3
   1e110:	f63f af6a 	bhi.w	1dfe8 <hci_internal_cmd_put+0x14c>
   1e114:	2001      	movs	r0, #1
   1e116:	f242 030c 	movw	r3, #8204	; 0x200c
   1e11a:	429e      	cmp	r6, r3
   1e11c:	f67f af09 	bls.w	1df32 <hci_internal_cmd_put+0x96>
   1e120:	f5a6 5300 	sub.w	r3, r6, #8192	; 0x2000
   1e124:	4a07      	ldr	r2, [pc, #28]	; (1e144 <hci_internal_cmd_put+0x2a8>)
   1e126:	3b0d      	subs	r3, #13
   1e128:	b29b      	uxth	r3, r3
   1e12a:	fa22 f303 	lsr.w	r3, r2, r3
   1e12e:	07db      	lsls	r3, r3, #31
   1e130:	f57f af57 	bpl.w	1dfe2 <hci_internal_cmd_put+0x146>
   1e134:	e702      	b.n	1df3c <hci_internal_cmd_put+0xa0>
   1e136:	bf00      	nop
   1e138:	200030fd 	.word	0x200030fd
   1e13c:	20002ea0 	.word	0x20002ea0
   1e140:	20003104 	.word	0x20003104
   1e144:	03001241 	.word	0x03001241
	switch (opcode)	{
   1e148:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   1e14c:	3b01      	subs	r3, #1
   1e14e:	2b4a      	cmp	r3, #74	; 0x4a
   1e150:	d8d6      	bhi.n	1e100 <hci_internal_cmd_put+0x264>
   1e152:	a101      	add	r1, pc, #4	; (adr r1, 1e158 <hci_internal_cmd_put+0x2bc>)
   1e154:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1e158:	0001e2b7 	.word	0x0001e2b7
   1e15c:	0001e2d1 	.word	0x0001e2d1
   1e160:	0001e2e3 	.word	0x0001e2e3
   1e164:	0001e101 	.word	0x0001e101
   1e168:	0001e327 	.word	0x0001e327
   1e16c:	0001e32d 	.word	0x0001e32d
   1e170:	0001e333 	.word	0x0001e333
   1e174:	0001e345 	.word	0x0001e345
   1e178:	0001e34b 	.word	0x0001e34b
   1e17c:	0001e351 	.word	0x0001e351
   1e180:	0001e101 	.word	0x0001e101
   1e184:	0001e101 	.word	0x0001e101
   1e188:	0001e101 	.word	0x0001e101
   1e18c:	0001e101 	.word	0x0001e101
   1e190:	0001e35d 	.word	0x0001e35d
   1e194:	0001e36f 	.word	0x0001e36f
   1e198:	0001e375 	.word	0x0001e375
   1e19c:	0001e37b 	.word	0x0001e37b
   1e1a0:	0001e101 	.word	0x0001e101
   1e1a4:	0001e101 	.word	0x0001e101
   1e1a8:	0001e381 	.word	0x0001e381
   1e1ac:	0001e393 	.word	0x0001e393
   1e1b0:	0001e399 	.word	0x0001e399
   1e1b4:	0001e3ab 	.word	0x0001e3ab
   1e1b8:	0001e101 	.word	0x0001e101
   1e1bc:	0001e3bd 	.word	0x0001e3bd
   1e1c0:	0001e3cf 	.word	0x0001e3cf
   1e1c4:	0001e3e1 	.word	0x0001e3e1
   1e1c8:	0001e101 	.word	0x0001e101
   1e1cc:	0001e101 	.word	0x0001e101
   1e1d0:	0001e101 	.word	0x0001e101
   1e1d4:	0001e101 	.word	0x0001e101
   1e1d8:	0001e101 	.word	0x0001e101
   1e1dc:	0001e40b 	.word	0x0001e40b
   1e1e0:	0001e41d 	.word	0x0001e41d
   1e1e4:	0001e42f 	.word	0x0001e42f
   1e1e8:	0001e435 	.word	0x0001e435
   1e1ec:	0001e43b 	.word	0x0001e43b
   1e1f0:	0001e101 	.word	0x0001e101
   1e1f4:	0001e101 	.word	0x0001e101
   1e1f8:	0001e101 	.word	0x0001e101
   1e1fc:	0001e101 	.word	0x0001e101
   1e200:	0001e101 	.word	0x0001e101
   1e204:	0001e101 	.word	0x0001e101
   1e208:	0001e101 	.word	0x0001e101
   1e20c:	0001e101 	.word	0x0001e101
   1e210:	0001e447 	.word	0x0001e447
   1e214:	0001e459 	.word	0x0001e459
   1e218:	0001e46b 	.word	0x0001e46b
   1e21c:	0001e471 	.word	0x0001e471
   1e220:	0001e101 	.word	0x0001e101
   1e224:	0001e101 	.word	0x0001e101
   1e228:	0001e101 	.word	0x0001e101
   1e22c:	0001e101 	.word	0x0001e101
   1e230:	0001e101 	.word	0x0001e101
   1e234:	0001e101 	.word	0x0001e101
   1e238:	0001e101 	.word	0x0001e101
   1e23c:	0001e101 	.word	0x0001e101
   1e240:	0001e101 	.word	0x0001e101
   1e244:	0001e101 	.word	0x0001e101
   1e248:	0001e101 	.word	0x0001e101
   1e24c:	0001e101 	.word	0x0001e101
   1e250:	0001e101 	.word	0x0001e101
   1e254:	0001e101 	.word	0x0001e101
   1e258:	0001e101 	.word	0x0001e101
   1e25c:	0001e101 	.word	0x0001e101
   1e260:	0001e101 	.word	0x0001e101
   1e264:	0001e101 	.word	0x0001e101
   1e268:	0001e101 	.word	0x0001e101
   1e26c:	0001e101 	.word	0x0001e101
   1e270:	0001e101 	.word	0x0001e101
   1e274:	0001e101 	.word	0x0001e101
   1e278:	0001e101 	.word	0x0001e101
   1e27c:	0001e101 	.word	0x0001e101
   1e280:	0001e477 	.word	0x0001e477
   1e284:	f242 035e 	movw	r3, #8286	; 0x205e
   1e288:	429a      	cmp	r2, r3
   1e28a:	f000 80d9 	beq.w	1e440 <hci_internal_cmd_put+0x5a4>
   1e28e:	f242 037c 	movw	r3, #8316	; 0x207c
   1e292:	429a      	cmp	r2, r3
   1e294:	d05f      	beq.n	1e356 <hci_internal_cmd_put+0x4ba>
	switch (hci_opcode) {
   1e296:	f242 0332 	movw	r3, #8242	; 0x2032
   1e29a:	429e      	cmp	r6, r3
   1e29c:	e731      	b.n	1e102 <hci_internal_cmd_put+0x266>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1e29e:	230f      	movs	r3, #15
   1e2a0:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1e2a2:	2304      	movs	r3, #4
   1e2a4:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   1e2a6:	2301      	movs	r3, #1
   1e2a8:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1e2aa:	2232      	movs	r2, #50	; 0x32
   1e2ac:	7162      	strb	r2, [r4, #5]
   1e2ae:	2220      	movs	r2, #32
	evt_data->ncmd = 1;
   1e2b0:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1e2b2:	71a2      	strb	r2, [r4, #6]
	cmd_complete_or_status.occurred = true;
   1e2b4:	e680      	b.n	1dfb8 <hci_internal_cmd_put+0x11c>
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1e2b6:	f7ef f88b 	bl	d3d0 <sdc_hci_cmd_le_set_event_mask>
	switch (hci_opcode) {
   1e2ba:	f242 0332 	movw	r3, #8242	; 0x2032
   1e2be:	429e      	cmp	r6, r3
   1e2c0:	f47f ae45 	bne.w	1df4e <hci_internal_cmd_put+0xb2>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1e2c4:	230f      	movs	r3, #15
   1e2c6:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1e2c8:	2304      	movs	r3, #4
   1e2ca:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   1e2cc:	70e0      	strb	r0, [r4, #3]
   1e2ce:	e09a      	b.n	1e406 <hci_internal_cmd_put+0x56a>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1e2d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1e2d4:	48ce      	ldr	r0, [pc, #824]	; (1e610 <hci_internal_cmd_put+0x774>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1e2d6:	3303      	adds	r3, #3
   1e2d8:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1e2dc:	f7ef f85a 	bl	d394 <sdc_hci_cmd_le_read_buffer_size>
   1e2e0:	e7eb      	b.n	1e2ba <hci_internal_cmd_put+0x41e>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1e2e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		hci_internal_le_supported_features((void *)event_out_params);
   1e2e6:	4dca      	ldr	r5, [pc, #808]	; (1e610 <hci_internal_cmd_put+0x774>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1e2e8:	3308      	adds	r3, #8
		hci_internal_le_supported_features((void *)event_out_params);
   1e2ea:	4628      	mov	r0, r5
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1e2ec:	f88d 3007 	strb.w	r3, [sp, #7]
		hci_internal_le_supported_features((void *)event_out_params);
   1e2f0:	f008 fa08 	bl	26704 <hci_internal_le_supported_features>
	switch (hci_opcode) {
   1e2f4:	f242 0332 	movw	r3, #8242	; 0x2032
   1e2f8:	429e      	cmp	r6, r3
   1e2fa:	d008      	beq.n	1e30e <hci_internal_cmd_put+0x472>
   1e2fc:	f200 81b0 	bhi.w	1e660 <hci_internal_cmd_put+0x7c4>
   1e300:	f242 0326 	movw	r3, #8230	; 0x2026
   1e304:	429e      	cmp	r6, r3
   1e306:	f240 8181 	bls.w	1e60c <hci_internal_cmd_put+0x770>
		return 0;
   1e30a:	2000      	movs	r0, #0
   1e30c:	e5e1      	b.n	1ded2 <hci_internal_cmd_put+0x36>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1e30e:	230f      	movs	r3, #15
   1e310:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1e312:	2304      	movs	r3, #4
   1e314:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   1e316:	2300      	movs	r3, #0
	evt_data->opcode = hci_opcode;
   1e318:	2232      	movs	r2, #50	; 0x32
	evt_data->status = status_code;
   1e31a:	70e3      	strb	r3, [r4, #3]
	evt_data->ncmd = 1;
   1e31c:	2301      	movs	r3, #1
	evt_data->opcode = hci_opcode;
   1e31e:	7162      	strb	r2, [r4, #5]
	evt_data->ncmd = 1;
   1e320:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1e322:	2220      	movs	r2, #32
   1e324:	e6b1      	b.n	1e08a <hci_internal_cmd_put+0x1ee>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1e326:	f7ef f85a 	bl	d3de <sdc_hci_cmd_le_set_random_address>
   1e32a:	e7c6      	b.n	1e2ba <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_set_adv_params((void *)cmd_params);
   1e32c:	f7ef f848 	bl	d3c0 <sdc_hci_cmd_le_set_adv_params>
   1e330:	e7c3      	b.n	1e2ba <hci_internal_cmd_put+0x41e>
		*param_length_out +=
   1e332:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1e336:	48b6      	ldr	r0, [pc, #728]	; (1e610 <hci_internal_cmd_put+0x774>)
		*param_length_out +=
   1e338:	3301      	adds	r3, #1
   1e33a:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_adv_physical_channel_tx_power((void *)event_out_params);
   1e33e:	f7ef f827 	bl	d390 <sdc_hci_cmd_le_read_adv_physical_channel_tx_power>
   1e342:	e7ba      	b.n	1e2ba <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_set_adv_data((void *)cmd_params);
   1e344:	f7ef f838 	bl	d3b8 <sdc_hci_cmd_le_set_adv_data>
   1e348:	e7b7      	b.n	1e2ba <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_set_scan_response_data((void *)cmd_params);
   1e34a:	f7ef f84a 	bl	d3e2 <sdc_hci_cmd_le_set_scan_response_data>
   1e34e:	e7b4      	b.n	1e2ba <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_set_adv_enable((void *)cmd_params);
   1e350:	f7ef f834 	bl	d3bc <sdc_hci_cmd_le_set_adv_enable>
   1e354:	e7b1      	b.n	1e2ba <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_set_data_related_address_changes((void *)cmd_params);
   1e356:	f7ef f837 	bl	d3c8 <sdc_hci_cmd_le_set_data_related_address_changes>
   1e35a:	e7ae      	b.n	1e2ba <hci_internal_cmd_put+0x41e>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   1e35c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1e360:	48ab      	ldr	r0, [pc, #684]	; (1e610 <hci_internal_cmd_put+0x774>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   1e362:	3301      	adds	r3, #1
   1e364:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1e368:	f7ef f818 	bl	d39c <sdc_hci_cmd_le_read_filter_accept_list_size>
   1e36c:	e7a5      	b.n	1e2ba <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   1e36e:	f7ef f801 	bl	d374 <sdc_hci_cmd_le_clear_filter_accept_list>
   1e372:	e7a2      	b.n	1e2ba <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   1e374:	f7ee fffc 	bl	d370 <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   1e378:	e79f      	b.n	1e2ba <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   1e37a:	f7ef f81b 	bl	d3b4 <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   1e37e:	e79c      	b.n	1e2ba <hci_internal_cmd_put+0x41e>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1e380:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1e384:	49a2      	ldr	r1, [pc, #648]	; (1e610 <hci_internal_cmd_put+0x774>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1e386:	3307      	adds	r3, #7
   1e388:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1e38c:	f7ef f804 	bl	d398 <sdc_hci_cmd_le_read_channel_map>
   1e390:	e793      	b.n	1e2ba <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   1e392:	f7ef f809 	bl	d3a8 <sdc_hci_cmd_le_read_remote_features>
   1e396:	e790      	b.n	1e2ba <hci_internal_cmd_put+0x41e>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1e398:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1e39c:	499c      	ldr	r1, [pc, #624]	; (1e610 <hci_internal_cmd_put+0x774>)
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1e39e:	3310      	adds	r3, #16
   1e3a0:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1e3a4:	f7ee ffe8 	bl	d378 <sdc_hci_cmd_le_encrypt>
   1e3a8:	e787      	b.n	1e2ba <hci_internal_cmd_put+0x41e>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   1e3aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1e3ae:	4898      	ldr	r0, [pc, #608]	; (1e610 <hci_internal_cmd_put+0x774>)
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   1e3b0:	3308      	adds	r3, #8
   1e3b2:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1e3b6:	f7ee ffe9 	bl	d38c <sdc_hci_cmd_le_rand>
   1e3ba:	e77e      	b.n	1e2ba <hci_internal_cmd_put+0x41e>
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   1e3bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1e3c0:	4993      	ldr	r1, [pc, #588]	; (1e610 <hci_internal_cmd_put+0x774>)
		*param_length_out += sizeof(sdc_hci_cmd_le_long_term_key_request_reply_return_t);
   1e3c2:	3302      	adds	r3, #2
   1e3c4:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_reply((void *)cmd_params,
   1e3c8:	f7ee ffdc 	bl	d384 <sdc_hci_cmd_le_long_term_key_request_reply>
   1e3cc:	e775      	b.n	1e2ba <hci_internal_cmd_put+0x41e>
		*param_length_out +=
   1e3ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1e3d2:	498f      	ldr	r1, [pc, #572]	; (1e610 <hci_internal_cmd_put+0x774>)
		*param_length_out +=
   1e3d4:	3302      	adds	r3, #2
   1e3d6:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_long_term_key_request_negative_reply(
   1e3da:	f7ee ffcf 	bl	d37c <sdc_hci_cmd_le_long_term_key_request_negative_reply>
   1e3de:	e76c      	b.n	1e2ba <hci_internal_cmd_put+0x41e>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1e3e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1e3e4:	3308      	adds	r3, #8
   1e3e6:	f88d 3007 	strb.w	r3, [sp, #7]
	*buf = states1;
   1e3ea:	238f      	movs	r3, #143	; 0x8f
   1e3ec:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   1e3ee:	23c0      	movs	r3, #192	; 0xc0
   1e3f0:	72e3      	strb	r3, [r4, #11]
	switch (hci_opcode) {
   1e3f2:	f242 0332 	movw	r3, #8242	; 0x2032
   1e3f6:	429e      	cmp	r6, r3
   1e3f8:	d180      	bne.n	1e2fc <hci_internal_cmd_put+0x460>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1e3fa:	230f      	movs	r3, #15
   1e3fc:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1e3fe:	2304      	movs	r3, #4
   1e400:	70a3      	strb	r3, [r4, #2]
	evt_data->status = status_code;
   1e402:	2300      	movs	r3, #0
   1e404:	70e3      	strb	r3, [r4, #3]
	evt_data->ncmd = 1;
   1e406:	2301      	movs	r3, #1
   1e408:	e74f      	b.n	1e2aa <hci_internal_cmd_put+0x40e>
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   1e40a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1e40e:	4980      	ldr	r1, [pc, #512]	; (1e610 <hci_internal_cmd_put+0x774>)
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   1e410:	3302      	adds	r3, #2
   1e412:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1e416:	f7ee ffd5 	bl	d3c4 <sdc_hci_cmd_le_set_data_length>
   1e41a:	e74e      	b.n	1e2ba <hci_internal_cmd_put+0x41e>
		*param_length_out +=
   1e41c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1e420:	487b      	ldr	r0, [pc, #492]	; (1e610 <hci_internal_cmd_put+0x774>)
		*param_length_out +=
   1e422:	3304      	adds	r3, #4
   1e424:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1e428:	f7ee ffc0 	bl	d3ac <sdc_hci_cmd_le_read_suggested_default_data_length>
   1e42c:	e745      	b.n	1e2ba <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   1e42e:	f7ee ffda 	bl	d3e6 <sdc_hci_cmd_le_write_suggested_default_data_length>
   1e432:	e742      	b.n	1e2ba <hci_internal_cmd_put+0x41e>
		return hci_cmd_le_read_local_p256_public_key();
   1e434:	f000 facc 	bl	1e9d0 <hci_cmd_le_read_local_p256_public_key>
   1e438:	e73f      	b.n	1e2ba <hci_internal_cmd_put+0x41e>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   1e43a:	f008 f976 	bl	2672a <hci_cmd_le_generate_dhkey>
   1e43e:	e73c      	b.n	1e2ba <hci_internal_cmd_put+0x41e>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   1e440:	f008 f976 	bl	26730 <hci_cmd_le_generate_dhkey_v2>
   1e444:	e739      	b.n	1e2ba <hci_internal_cmd_put+0x41e>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1e446:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1e44a:	4871      	ldr	r0, [pc, #452]	; (1e610 <hci_internal_cmd_put+0x774>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1e44c:	3308      	adds	r3, #8
   1e44e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1e452:	f7ee ffa5 	bl	d3a0 <sdc_hci_cmd_le_read_max_data_length>
   1e456:	e730      	b.n	1e2ba <hci_internal_cmd_put+0x41e>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1e458:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1e45c:	496c      	ldr	r1, [pc, #432]	; (1e610 <hci_internal_cmd_put+0x774>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1e45e:	3304      	adds	r3, #4
   1e460:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1e464:	f7ee ff9e 	bl	d3a4 <sdc_hci_cmd_le_read_phy>
   1e468:	e727      	b.n	1e2ba <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   1e46a:	f7ee ffaf 	bl	d3cc <sdc_hci_cmd_le_set_default_phy>
   1e46e:	e724      	b.n	1e2ba <hci_internal_cmd_put+0x41e>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   1e470:	f7ee ffb3 	bl	d3da <sdc_hci_cmd_le_set_phy>
   1e474:	e721      	b.n	1e2ba <hci_internal_cmd_put+0x41e>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1e476:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1e47a:	4865      	ldr	r0, [pc, #404]	; (1e610 <hci_internal_cmd_put+0x774>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1e47c:	3302      	adds	r3, #2
   1e47e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1e482:	f7ee ff95 	bl	d3b0 <sdc_hci_cmd_le_read_transmit_power>
   1e486:	e718      	b.n	1e2ba <hci_internal_cmd_put+0x41e>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1e488:	4628      	mov	r0, r5
	switch (opcode)	{
   1e48a:	f64f 420b 	movw	r2, #64523	; 0xfc0b
   1e48e:	f830 3b03 	ldrh.w	r3, [r0], #3
   1e492:	4293      	cmp	r3, r2
   1e494:	d822      	bhi.n	1e4dc <hci_internal_cmd_put+0x640>
   1e496:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   1e49a:	f67f ad3c 	bls.w	1df16 <hci_internal_cmd_put+0x7a>
   1e49e:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   1e4a2:	3b01      	subs	r3, #1
   1e4a4:	2b0a      	cmp	r3, #10
   1e4a6:	f63f ad36 	bhi.w	1df16 <hci_internal_cmd_put+0x7a>
   1e4aa:	a201      	add	r2, pc, #4	; (adr r2, 1e4b0 <hci_internal_cmd_put+0x614>)
   1e4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e4b0:	0001e52d 	.word	0x0001e52d
   1e4b4:	0001e549 	.word	0x0001e549
   1e4b8:	0001df17 	.word	0x0001df17
   1e4bc:	0001df17 	.word	0x0001df17
   1e4c0:	0001df17 	.word	0x0001df17
   1e4c4:	0001e59d 	.word	0x0001e59d
   1e4c8:	0001df17 	.word	0x0001df17
   1e4cc:	0001df17 	.word	0x0001df17
   1e4d0:	0001e579 	.word	0x0001e579
   1e4d4:	0001e58b 	.word	0x0001e58b
   1e4d8:	0001e5a3 	.word	0x0001e5a3
   1e4dc:	f503 7240 	add.w	r2, r3, #768	; 0x300
   1e4e0:	b292      	uxth	r2, r2
   1e4e2:	2a0c      	cmp	r2, #12
   1e4e4:	f63f ad17 	bhi.w	1df16 <hci_internal_cmd_put+0x7a>
   1e4e8:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   1e4ec:	2b0c      	cmp	r3, #12
   1e4ee:	f63f ad12 	bhi.w	1df16 <hci_internal_cmd_put+0x7a>
   1e4f2:	a201      	add	r2, pc, #4	; (adr r2, 1e4f8 <hci_internal_cmd_put+0x65c>)
   1e4f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e4f8:	0001e5b5 	.word	0x0001e5b5
   1e4fc:	0001e5d7 	.word	0x0001e5d7
   1e500:	0001e5dd 	.word	0x0001e5dd
   1e504:	0001e5e3 	.word	0x0001e5e3
   1e508:	0001e5e9 	.word	0x0001e5e9
   1e50c:	0001e5ef 	.word	0x0001e5ef
   1e510:	0001df17 	.word	0x0001df17
   1e514:	0001df17 	.word	0x0001df17
   1e518:	0001df17 	.word	0x0001df17
   1e51c:	0001e5f5 	.word	0x0001e5f5
   1e520:	0001df17 	.word	0x0001df17
   1e524:	0001df17 	.word	0x0001df17
   1e528:	0001e5fb 	.word	0x0001e5fb
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1e52c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1e530:	4837      	ldr	r0, [pc, #220]	; (1e610 <hci_internal_cmd_put+0x774>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1e532:	330c      	adds	r3, #12
   1e534:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1e538:	f7e3 f846 	bl	15c8 <sdc_hci_cmd_vs_zephyr_read_version_info>
	switch (hci_opcode) {
   1e53c:	f026 0308 	bic.w	r3, r6, #8
   1e540:	f64f 5202 	movw	r2, #64770	; 0xfd02
   1e544:	4293      	cmp	r3, r2
   1e546:	e068      	b.n	1e61a <hci_internal_cmd_put+0x77e>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1e548:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1e54c:	4830      	ldr	r0, [pc, #192]	; (1e610 <hci_internal_cmd_put+0x774>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1e54e:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1e550:	2202      	movs	r2, #2
   1e552:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1e554:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1e558:	f006 fa83 	bl	24a62 <memset>
	cmds->read_version_info = 1;
   1e55c:	79e3      	ldrb	r3, [r4, #7]
   1e55e:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   1e562:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1e566:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   1e568:	7a23      	ldrb	r3, [r4, #8]
   1e56a:	f023 0307 	bic.w	r3, r3, #7
   1e56e:	f043 0307 	orr.w	r3, r3, #7
   1e572:	7223      	strb	r3, [r4, #8]
		return 0;
   1e574:	2000      	movs	r0, #0
   1e576:	e7e1      	b.n	1e53c <hci_internal_cmd_put+0x6a0>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1e578:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1e57c:	4824      	ldr	r0, [pc, #144]	; (1e610 <hci_internal_cmd_put+0x774>)
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1e57e:	3317      	adds	r3, #23
   1e580:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1e584:	f7e2 ffd4 	bl	1530 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   1e588:	e7d8      	b.n	1e53c <hci_internal_cmd_put+0x6a0>
		*param_length_out +=
   1e58a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1e58e:	4820      	ldr	r0, [pc, #128]	; (1e610 <hci_internal_cmd_put+0x774>)
		*param_length_out +=
   1e590:	3320      	adds	r3, #32
   1e592:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1e596:	f7e2 ff83 	bl	14a0 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   1e59a:	e7cf      	b.n	1e53c <hci_internal_cmd_put+0x6a0>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1e59c:	f7ee fee2 	bl	d364 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   1e5a0:	e7cc      	b.n	1e53c <hci_internal_cmd_put+0x6a0>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   1e5a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   1e5a6:	481a      	ldr	r0, [pc, #104]	; (1e610 <hci_internal_cmd_put+0x774>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   1e5a8:	3301      	adds	r3, #1
   1e5aa:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   1e5ae:	f7ee fec5 	bl	d33c <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   1e5b2:	e7c3      	b.n	1e53c <hci_internal_cmd_put+0x6a0>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1e5b4:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1e5b8:	4815      	ldr	r0, [pc, #84]	; (1e610 <hci_internal_cmd_put+0x774>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1e5ba:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1e5bc:	2202      	movs	r2, #2
   1e5be:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1e5c0:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1e5c4:	f006 fa4d 	bl	24a62 <memset>
	cmds->read_supported_vs_commands = 1;
   1e5c8:	79e3      	ldrb	r3, [r4, #7]
   1e5ca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1e5ce:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   1e5d2:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
   1e5d4:	e7ce      	b.n	1e574 <hci_internal_cmd_put+0x6d8>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1e5d6:	f7ee fea4 	bl	d322 <sdc_hci_cmd_vs_llpm_mode_set>
   1e5da:	e7af      	b.n	1e53c <hci_internal_cmd_put+0x6a0>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1e5dc:	f7ee fe9d 	bl	d31a <sdc_hci_cmd_vs_conn_update>
   1e5e0:	e7ac      	b.n	1e53c <hci_internal_cmd_put+0x6a0>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1e5e2:	f7ee fe98 	bl	d316 <sdc_hci_cmd_vs_conn_event_extend>
   1e5e6:	e7a9      	b.n	1e53c <hci_internal_cmd_put+0x6a0>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1e5e8:	f7ee fea1 	bl	d32e <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1e5ec:	e7a6      	b.n	1e53c <hci_internal_cmd_put+0x6a0>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1e5ee:	f7ee fe96 	bl	d31e <sdc_hci_cmd_vs_event_length_set>
   1e5f2:	e7a3      	b.n	1e53c <hci_internal_cmd_put+0x6a0>
		return sdc_hci_cmd_vs_peripheral_latency_mode_set((void *)cmd_params);
   1e5f4:	f7ee fe97 	bl	d326 <sdc_hci_cmd_vs_peripheral_latency_mode_set>
   1e5f8:	e7a0      	b.n	1e53c <hci_internal_cmd_put+0x6a0>
		return sdc_hci_cmd_vs_set_adv_randomness((void *)cmd_params);
   1e5fa:	f7ee fe9d 	bl	d338 <sdc_hci_cmd_vs_set_adv_randomness>
   1e5fe:	e79d      	b.n	1e53c <hci_internal_cmd_put+0x6a0>
	switch (hci_opcode) {
   1e600:	f242 0326 	movw	r3, #8230	; 0x2026
   1e604:	429e      	cmp	r6, r3
   1e606:	f67f ad86 	bls.w	1e116 <hci_internal_cmd_put+0x27a>
   1e60a:	e4ea      	b.n	1dfe2 <hci_internal_cmd_put+0x146>
		return 0;
   1e60c:	2000      	movs	r0, #0
   1e60e:	e582      	b.n	1e116 <hci_internal_cmd_put+0x27a>
   1e610:	20003104 	.word	0x20003104
	switch (hci_opcode) {
   1e614:	f240 431d 	movw	r3, #1053	; 0x41d
   1e618:	429e      	cmp	r6, r3
   1e61a:	f43f ac8f 	beq.w	1df3c <hci_internal_cmd_put+0xa0>
   1e61e:	e4e0      	b.n	1dfe2 <hci_internal_cmd_put+0x146>
		switch (BT_OGF(opcode)) {
   1e620:	2001      	movs	r0, #1
	if (generate_command_status_event ||
   1e622:	e4de      	b.n	1dfe2 <hci_internal_cmd_put+0x146>
	switch (hci_opcode) {
   1e624:	4a16      	ldr	r2, [pc, #88]	; (1e680 <hci_internal_cmd_put+0x7e4>)
   1e626:	3b2d      	subs	r3, #45	; 0x2d
   1e628:	b29b      	uxth	r3, r3
   1e62a:	fa22 f303 	lsr.w	r3, r2, r3
   1e62e:	07da      	lsls	r2, r3, #31
   1e630:	f57f acd7 	bpl.w	1dfe2 <hci_internal_cmd_put+0x146>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1e634:	230f      	movs	r3, #15
   1e636:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1e638:	2304      	movs	r3, #4
   1e63a:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1e63c:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1e63e:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1e640:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1e642:	f8a4 6005 	strh.w	r6, [r4, #5]
	cmd_complete_or_status.occurred = true;
   1e646:	2301      	movs	r3, #1
   1e648:	7023      	strb	r3, [r4, #0]
	if (opcode == SDC_HCI_OPCODE_CMD_LE_SET_PERIODIC_ADV_RESPONSE_DATA
   1e64a:	f242 0383 	movw	r3, #8323	; 0x2083
   1e64e:	429e      	cmp	r6, r3
   1e650:	f47f ad3c 	bne.w	1e0cc <hci_internal_cmd_put+0x230>
		&&
   1e654:	7863      	ldrb	r3, [r4, #1]
   1e656:	2b0e      	cmp	r3, #14
   1e658:	f47f ad38 	bne.w	1e0cc <hci_internal_cmd_put+0x230>
		cmd_complete_or_status.occurred = false;
   1e65c:	2300      	movs	r3, #0
   1e65e:	e4ab      	b.n	1dfb8 <hci_internal_cmd_put+0x11c>
	switch (hci_opcode) {
   1e660:	f242 0385 	movw	r3, #8325	; 0x2085
   1e664:	429e      	cmp	r6, r3
   1e666:	d905      	bls.n	1e674 <hci_internal_cmd_put+0x7d8>
		return 0;
   1e668:	2000      	movs	r0, #0
   1e66a:	e4ba      	b.n	1dfe2 <hci_internal_cmd_put+0x146>
	switch (hci_opcode) {
   1e66c:	f242 0385 	movw	r3, #8325	; 0x2085
   1e670:	2001      	movs	r0, #1
   1e672:	e473      	b.n	1df5c <hci_internal_cmd_put+0xc0>
		return 0;
   1e674:	2000      	movs	r0, #0
   1e676:	e473      	b.n	1df60 <hci_internal_cmd_put+0xc4>
		return -NRF_EPERM;
   1e678:	f04f 30ff 	mov.w	r0, #4294967295
   1e67c:	e527      	b.n	1e0ce <hci_internal_cmd_put+0x232>
   1e67e:	bf00      	nop
   1e680:	01000401 	.word	0x01000401

0001e684 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   1e684:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
   1e686:	4c09      	ldr	r4, [pc, #36]	; (1e6ac <hci_internal_msg_get+0x28>)
   1e688:	7823      	ldrb	r3, [r4, #0]
{
   1e68a:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
   1e68c:	b91b      	cbnz	r3, 1e696 <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   1e68e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
   1e692:	f7ee be20 	b.w	d2d6 <sdc_hci_get>
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1e696:	78a2      	ldrb	r2, [r4, #2]
		memcpy(msg_out,
   1e698:	1c61      	adds	r1, r4, #1
   1e69a:	3202      	adds	r2, #2
   1e69c:	f006 f9d6 	bl	24a4c <memcpy>
		cmd_complete_or_status.occurred = false;
   1e6a0:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1e6a2:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
   1e6a4:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1e6a6:	702b      	strb	r3, [r5, #0]
}
   1e6a8:	bd38      	pop	{r3, r4, r5, pc}
   1e6aa:	bf00      	nop
   1e6ac:	200030fd 	.word	0x200030fd

0001e6b0 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   1e6b0:	b570      	push	{r4, r5, r6, lr}
   1e6b2:	4606      	mov	r6, r0
   1e6b4:	460c      	mov	r4, r1
   1e6b6:	4d0f      	ldr	r5, [pc, #60]	; (1e6f4 <bt_rand+0x44>)
   1e6b8:	4628      	mov	r0, r5
   1e6ba:	f008 f901 	bl	268c0 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   1e6be:	b1a8      	cbz	r0, 1e6ec <bt_rand+0x3c>
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   1e6c0:	b2a2      	uxth	r2, r4
	__ASSERT(api->get_entropy != NULL,
   1e6c2:	68ab      	ldr	r3, [r5, #8]
   1e6c4:	681b      	ldr	r3, [r3, #0]
   1e6c6:	b963      	cbnz	r3, 1e6e2 <bt_rand+0x32>
   1e6c8:	490b      	ldr	r1, [pc, #44]	; (1e6f8 <bt_rand+0x48>)
   1e6ca:	4a0c      	ldr	r2, [pc, #48]	; (1e6fc <bt_rand+0x4c>)
   1e6cc:	480c      	ldr	r0, [pc, #48]	; (1e700 <bt_rand+0x50>)
   1e6ce:	234d      	movs	r3, #77	; 0x4d
   1e6d0:	f005 fdb8 	bl	24244 <assert_print>
   1e6d4:	480b      	ldr	r0, [pc, #44]	; (1e704 <bt_rand+0x54>)
   1e6d6:	f005 fdb5 	bl	24244 <assert_print>
   1e6da:	4808      	ldr	r0, [pc, #32]	; (1e6fc <bt_rand+0x4c>)
   1e6dc:	214d      	movs	r1, #77	; 0x4d
   1e6de:	f005 fdaa 	bl	24236 <assert_post_action>
	return api->get_entropy(dev, buffer, length);
   1e6e2:	4631      	mov	r1, r6
   1e6e4:	4628      	mov	r0, r5
}
   1e6e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1e6ea:	4718      	bx	r3
   1e6ec:	f06f 0012 	mvn.w	r0, #18
   1e6f0:	bd70      	pop	{r4, r5, r6, pc}
   1e6f2:	bf00      	nop
   1e6f4:	00026dd4 	.word	0x00026dd4
   1e6f8:	0002a98f 	.word	0x0002a98f
   1e6fc:	0002a95b 	.word	0x0002a95b
   1e700:	00027c2a 	.word	0x00027c2a
   1e704:	0002a9af 	.word	0x0002a9af

0001e708 <sys_memcpy_swap.constprop.0>:
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1e708:	4288      	cmp	r0, r1
static inline void sys_memcpy_swap(void *dst, const void *src, size_t length)
   1e70a:	b508      	push	{r3, lr}
   1e70c:	f101 0320 	add.w	r3, r1, #32
	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
   1e710:	d910      	bls.n	1e734 <sys_memcpy_swap.constprop.0+0x2c>
   1e712:	4298      	cmp	r0, r3
   1e714:	d213      	bcs.n	1e73e <sys_memcpy_swap.constprop.0+0x36>
   1e716:	490e      	ldr	r1, [pc, #56]	; (1e750 <sys_memcpy_swap.constprop.0+0x48>)
   1e718:	4a0e      	ldr	r2, [pc, #56]	; (1e754 <sys_memcpy_swap.constprop.0+0x4c>)
   1e71a:	480f      	ldr	r0, [pc, #60]	; (1e758 <sys_memcpy_swap.constprop.0+0x50>)
   1e71c:	f240 2315 	movw	r3, #533	; 0x215
   1e720:	f005 fd90 	bl	24244 <assert_print>
   1e724:	480d      	ldr	r0, [pc, #52]	; (1e75c <sys_memcpy_swap.constprop.0+0x54>)
   1e726:	f005 fd8d 	bl	24244 <assert_print>
   1e72a:	480a      	ldr	r0, [pc, #40]	; (1e754 <sys_memcpy_swap.constprop.0+0x4c>)
   1e72c:	f240 2115 	movw	r1, #533	; 0x215
   1e730:	f005 fd81 	bl	24236 <assert_post_action>
   1e734:	d0ef      	beq.n	1e716 <sys_memcpy_swap.constprop.0+0xe>
   1e736:	f100 0220 	add.w	r2, r0, #32
   1e73a:	4291      	cmp	r1, r2
   1e73c:	e7ea      	b.n	1e714 <sys_memcpy_swap.constprop.0+0xc>
	for (; length > 0; length--) {
   1e73e:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   1e740:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1e744:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   1e748:	428b      	cmp	r3, r1
   1e74a:	d1f9      	bne.n	1e740 <sys_memcpy_swap.constprop.0+0x38>
}
   1e74c:	bd08      	pop	{r3, pc}
   1e74e:	bf00      	nop
   1e750:	0002ac2b 	.word	0x0002ac2b
   1e754:	0002abf9 	.word	0x0002abf9
   1e758:	00027c2a 	.word	0x00027c2a
   1e75c:	0002ac82 	.word	0x0002ac82

0001e760 <ecdh_p256_common_secret>:

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   1e760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1e762:	4b24      	ldr	r3, [pc, #144]	; (1e7f4 <ecdh_p256_common_secret+0x94>)
   1e764:	4924      	ldr	r1, [pc, #144]	; (1e7f8 <ecdh_p256_common_secret+0x98>)
   1e766:	f103 0220 	add.w	r2, r3, #32
   1e76a:	2800      	cmp	r0, #0
   1e76c:	bf08      	it	eq
   1e76e:	4619      	moveq	r1, r3
{
   1e770:	af00      	add	r7, sp, #0
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1e772:	4610      	mov	r0, r2
   1e774:	f004 ff50 	bl	23618 <ocrypto_ecdh_p256_common_secret>
	if (err) {
   1e778:	4604      	mov	r4, r0
   1e77a:	b180      	cbz	r0, 1e79e <ecdh_p256_common_secret+0x3e>
		LOG_ERR("public key is not valid (err %d)", err);
   1e77c:	466d      	mov	r5, sp
   1e77e:	b088      	sub	sp, #32
   1e780:	466a      	mov	r2, sp
   1e782:	4b1e      	ldr	r3, [pc, #120]	; (1e7fc <ecdh_p256_common_secret+0x9c>)
   1e784:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1e788:	2303      	movs	r3, #3
   1e78a:	f842 3f10 	str.w	r3, [r2, #16]!
   1e78e:	481c      	ldr	r0, [pc, #112]	; (1e800 <ecdh_p256_common_secret+0xa0>)
   1e790:	2300      	movs	r3, #0
   1e792:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1e796:	f7f5 fbf9 	bl	13f8c <z_impl_z_log_msg_static_create>
		return BT_HCI_ERR_INVALID_PARAM;
   1e79a:	2412      	movs	r4, #18
   1e79c:	46ad      	mov	sp, r5
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1e79e:	f04f 32ff 	mov.w	r2, #4294967295
   1e7a2:	f04f 33ff 	mov.w	r3, #4294967295
   1e7a6:	2001      	movs	r0, #1
   1e7a8:	f7f7 f96c 	bl	15a84 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   1e7ac:	f100 060c 	add.w	r6, r0, #12
   1e7b0:	2102      	movs	r1, #2
   1e7b2:	4605      	mov	r5, r0
   1e7b4:	4630      	mov	r0, r6
   1e7b6:	f7fd fb67 	bl	1be88 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1e7ba:	233e      	movs	r3, #62	; 0x3e
   1e7bc:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1e7be:	2322      	movs	r3, #34	; 0x22
   1e7c0:	7043      	strb	r3, [r0, #1]
   1e7c2:	2101      	movs	r1, #1
   1e7c4:	4630      	mov	r0, r6
   1e7c6:	f7fd fb5f 	bl	1be88 <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   1e7ca:	2309      	movs	r3, #9
   1e7cc:	7003      	strb	r3, [r0, #0]
   1e7ce:	2121      	movs	r1, #33	; 0x21
   1e7d0:	4630      	mov	r0, r6
   1e7d2:	f7fd fb59 	bl	1be88 <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   1e7d6:	f800 4b01 	strb.w	r4, [r0], #1

	if (status) {
   1e7da:	b134      	cbz	r4, 1e7ea <ecdh_p256_common_secret+0x8a>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   1e7dc:	2220      	movs	r2, #32
   1e7de:	21ff      	movs	r1, #255	; 0xff
   1e7e0:	f006 f93f 	bl	24a62 <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   1e7e4:	4628      	mov	r0, r5
   1e7e6:	46bd      	mov	sp, r7
   1e7e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   1e7ea:	4906      	ldr	r1, [pc, #24]	; (1e804 <ecdh_p256_common_secret+0xa4>)
   1e7ec:	f7ff ff8c 	bl	1e708 <sys_memcpy_swap.constprop.0>
   1e7f0:	e7f8      	b.n	1e7e4 <ecdh_p256_common_secret+0x84>
   1e7f2:	bf00      	nop
   1e7f4:	20003144 	.word	0x20003144
   1e7f8:	0002ad00 	.word	0x0002ad00
   1e7fc:	0002acc2 	.word	0x0002acc2
   1e800:	00027034 	.word	0x00027034
   1e804:	20003164 	.word	0x20003164

0001e808 <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   1e808:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e80a:	4c42      	ldr	r4, [pc, #264]	; (1e914 <ecdh_cmd_process+0x10c>)
   1e80c:	f3bf 8f5b 	dmb	ish
   1e810:	6823      	ldr	r3, [r4, #0]
   1e812:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   1e816:	2b02      	cmp	r3, #2
{
   1e818:	b087      	sub	sp, #28
   1e81a:	4627      	mov	r7, r4
	switch (atomic_get(&cmd)) {
   1e81c:	d05a      	beq.n	1e8d4 <ecdh_cmd_process+0xcc>
   1e81e:	2b04      	cmp	r3, #4
   1e820:	d05d      	beq.n	1e8de <ecdh_cmd_process+0xd6>
   1e822:	2b01      	cmp	r3, #1
   1e824:	d15d      	bne.n	1e8e2 <ecdh_cmd_process+0xda>
		err = bt_rand(ecdh.private_key_be, 32);
   1e826:	4c3c      	ldr	r4, [pc, #240]	; (1e918 <ecdh_cmd_process+0x110>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1e828:	4e3c      	ldr	r6, [pc, #240]	; (1e91c <ecdh_cmd_process+0x114>)
		err = bt_rand(ecdh.private_key_be, 32);
   1e82a:	2120      	movs	r1, #32
   1e82c:	4620      	mov	r0, r4
   1e82e:	f7ff ff3f 	bl	1e6b0 <bt_rand>
		if (err) {
   1e832:	2800      	cmp	r0, #0
   1e834:	d143      	bne.n	1e8be <ecdh_cmd_process+0xb6>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1e836:	2220      	movs	r2, #32
   1e838:	4631      	mov	r1, r6
   1e83a:	4620      	mov	r0, r4
   1e83c:	f006 f8f6 	bl	24a2c <memcmp>
   1e840:	2800      	cmp	r0, #0
   1e842:	d0f2      	beq.n	1e82a <ecdh_cmd_process+0x22>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   1e844:	4836      	ldr	r0, [pc, #216]	; (1e920 <ecdh_cmd_process+0x118>)
   1e846:	4621      	mov	r1, r4
   1e848:	f004 fed2 	bl	235f0 <ocrypto_ecdh_p256_public_key>
	} while (err);
   1e84c:	4605      	mov	r5, r0
   1e84e:	2800      	cmp	r0, #0
   1e850:	d1eb      	bne.n	1e82a <ecdh_cmd_process+0x22>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1e852:	f04f 32ff 	mov.w	r2, #4294967295
   1e856:	f04f 33ff 	mov.w	r3, #4294967295
   1e85a:	2001      	movs	r0, #1
   1e85c:	f7f7 f912 	bl	15a84 <bt_buf_get_rx>
   1e860:	f100 060c 	add.w	r6, r0, #12
   1e864:	2102      	movs	r1, #2
   1e866:	4604      	mov	r4, r0
   1e868:	4630      	mov	r0, r6
   1e86a:	f7fd fb0d 	bl	1be88 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1e86e:	233e      	movs	r3, #62	; 0x3e
   1e870:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1e872:	2342      	movs	r3, #66	; 0x42
   1e874:	7043      	strb	r3, [r0, #1]
   1e876:	2101      	movs	r1, #1
   1e878:	4630      	mov	r0, r6
   1e87a:	f7fd fb05 	bl	1be88 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   1e87e:	2308      	movs	r3, #8
   1e880:	7003      	strb	r3, [r0, #0]
   1e882:	2141      	movs	r1, #65	; 0x41
   1e884:	4630      	mov	r0, r6
   1e886:	f7fd faff 	bl	1be88 <net_buf_simple_add>
   1e88a:	4606      	mov	r6, r0
	evt->status = status;
   1e88c:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   1e890:	b1bd      	cbz	r5, 1e8c2 <ecdh_cmd_process+0xba>
		(void)memset(evt->key, 0, sizeof(evt->key));
   1e892:	2240      	movs	r2, #64	; 0x40
   1e894:	2100      	movs	r1, #0
   1e896:	f006 f8e4 	bl	24a62 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1e89a:	f3bf 8f5b 	dmb	ish
   1e89e:	2300      	movs	r3, #0
   1e8a0:	e857 2f00 	ldrex	r2, [r7]
   1e8a4:	e847 3100 	strex	r1, r3, [r7]
   1e8a8:	2900      	cmp	r1, #0
   1e8aa:	d1f9      	bne.n	1e8a0 <ecdh_cmd_process+0x98>
   1e8ac:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   1e8b0:	b36c      	cbz	r4, 1e90e <ecdh_cmd_process+0x106>
		bt_recv(buf);
   1e8b2:	4620      	mov	r0, r4
	}
}
   1e8b4:	b007      	add	sp, #28
   1e8b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_recv(buf);
   1e8ba:	f7f8 ba63 	b.w	16d84 <bt_recv>
			return BT_HCI_ERR_UNSPECIFIED;
   1e8be:	251f      	movs	r5, #31
   1e8c0:	e7c7      	b.n	1e852 <ecdh_cmd_process+0x4a>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   1e8c2:	4917      	ldr	r1, [pc, #92]	; (1e920 <ecdh_cmd_process+0x118>)
   1e8c4:	f7ff ff20 	bl	1e708 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   1e8c8:	4916      	ldr	r1, [pc, #88]	; (1e924 <ecdh_cmd_process+0x11c>)
   1e8ca:	f106 0021 	add.w	r0, r6, #33	; 0x21
   1e8ce:	f7ff ff1b 	bl	1e708 <sys_memcpy_swap.constprop.0>
		break;
   1e8d2:	e7e2      	b.n	1e89a <ecdh_cmd_process+0x92>
		buf = ecdh_p256_common_secret(false);
   1e8d4:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   1e8d6:	f7ff ff43 	bl	1e760 <ecdh_p256_common_secret>
   1e8da:	4604      	mov	r4, r0
		break;
   1e8dc:	e7dd      	b.n	1e89a <ecdh_cmd_process+0x92>
		buf = ecdh_p256_common_secret(true);
   1e8de:	2001      	movs	r0, #1
   1e8e0:	e7f9      	b.n	1e8d6 <ecdh_cmd_process+0xce>
		LOG_WRN("Unknown command");
   1e8e2:	4b11      	ldr	r3, [pc, #68]	; (1e928 <ecdh_cmd_process+0x120>)
   1e8e4:	9305      	str	r3, [sp, #20]
   1e8e6:	2302      	movs	r3, #2
   1e8e8:	9304      	str	r3, [sp, #16]
   1e8ea:	2300      	movs	r3, #0
   1e8ec:	480f      	ldr	r0, [pc, #60]	; (1e92c <ecdh_cmd_process+0x124>)
   1e8ee:	aa04      	add	r2, sp, #16
   1e8f0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   1e8f4:	f7f5 fb4a 	bl	13f8c <z_impl_z_log_msg_static_create>
   1e8f8:	f3bf 8f5b 	dmb	ish
   1e8fc:	2300      	movs	r3, #0
   1e8fe:	e854 2f00 	ldrex	r2, [r4]
   1e902:	e844 3100 	strex	r1, r3, [r4]
   1e906:	2900      	cmp	r1, #0
   1e908:	d1f9      	bne.n	1e8fe <ecdh_cmd_process+0xf6>
   1e90a:	f3bf 8f5b 	dmb	ish
}
   1e90e:	b007      	add	sp, #28
   1e910:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e912:	bf00      	nop
   1e914:	20002eb4 	.word	0x20002eb4
   1e918:	20003144 	.word	0x20003144
   1e91c:	0002ad00 	.word	0x0002ad00
   1e920:	20003164 	.word	0x20003164
   1e924:	20003184 	.word	0x20003184
   1e928:	0002ace3 	.word	0x0002ace3
   1e92c:	00027034 	.word	0x00027034

0001e930 <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   1e930:	b510      	push	{r4, lr}
   1e932:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   1e934:	2210      	movs	r2, #16
   1e936:	2100      	movs	r1, #0
   1e938:	a801      	add	r0, sp, #4
   1e93a:	f006 f892 	bl	24a62 <memset>
   1e93e:	4c0b      	ldr	r4, [pc, #44]	; (1e96c <ecdh_thread+0x3c>)
   1e940:	9405      	str	r4, [sp, #20]
   1e942:	2301      	movs	r3, #1
   1e944:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   1e948:	f04f 32ff 	mov.w	r2, #4294967295
   1e94c:	f04f 33ff 	mov.w	r3, #4294967295
   1e950:	2101      	movs	r1, #1
   1e952:	a801      	add	r0, sp, #4
   1e954:	f004 fc88 	bl	23268 <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   1e958:	4620      	mov	r0, r4
   1e95a:	f008 f9c3 	bl	26ce4 <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   1e95e:	9b04      	ldr	r3, [sp, #16]
   1e960:	f36f 3394 	bfc	r3, #14, #7
   1e964:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   1e966:	f7ff ff4f 	bl	1e808 <ecdh_cmd_process>
	while (true) {
   1e96a:	e7ed      	b.n	1e948 <ecdh_thread+0x18>
   1e96c:	20002ea4 	.word	0x20002ea4

0001e970 <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   1e970:	b510      	push	{r4, lr}
   1e972:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   1e974:	480e      	ldr	r0, [pc, #56]	; (1e9b0 <hci_ecdh_init+0x40>)
   1e976:	f008 f9b0 	bl	26cda <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1e97a:	4c0e      	ldr	r4, [pc, #56]	; (1e9b4 <hci_ecdh_init+0x44>)
   1e97c:	490e      	ldr	r1, [pc, #56]	; (1e9b8 <hci_ecdh_init+0x48>)
   1e97e:	2200      	movs	r2, #0
   1e980:	2300      	movs	r3, #0
   1e982:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1e986:	2300      	movs	r3, #0
   1e988:	220a      	movs	r2, #10
   1e98a:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1e98e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1e992:	9300      	str	r3, [sp, #0]
   1e994:	f44f 7262 	mov.w	r2, #904	; 0x388
   1e998:	4b08      	ldr	r3, [pc, #32]	; (1e9bc <hci_ecdh_init+0x4c>)
   1e99a:	4620      	mov	r0, r4
   1e99c:	f001 fbc8 	bl	20130 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1e9a0:	4907      	ldr	r1, [pc, #28]	; (1e9c0 <hci_ecdh_init+0x50>)
   1e9a2:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   1e9a4:	b008      	add	sp, #32
   1e9a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e9aa:	f007 bfbd 	b.w	26928 <z_impl_k_thread_name_set>
   1e9ae:	bf00      	nop
   1e9b0:	20002ea4 	.word	0x20002ea4
   1e9b4:	200027a8 	.word	0x200027a8
   1e9b8:	20005300 	.word	0x20005300
   1e9bc:	0001e931 	.word	0x0001e931
   1e9c0:	0002acf3 	.word	0x0002acf3

0001e9c4 <hci_ecdh_uninit>:
	z_impl_k_thread_abort(thread);
   1e9c4:	4801      	ldr	r0, [pc, #4]	; (1e9cc <hci_ecdh_uninit+0x8>)
   1e9c6:	f7f6 bded 	b.w	155a4 <z_impl_k_thread_abort>
   1e9ca:	bf00      	nop
   1e9cc:	200027a8 	.word	0x200027a8

0001e9d0 <hci_cmd_le_read_local_p256_public_key>:
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}


uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   1e9d0:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1e9d2:	4b0b      	ldr	r3, [pc, #44]	; (1ea00 <hci_cmd_le_read_local_p256_public_key+0x30>)
   1e9d4:	f3bf 8f5b 	dmb	ish
   1e9d8:	2201      	movs	r2, #1
   1e9da:	e853 1f00 	ldrex	r1, [r3]
   1e9de:	2900      	cmp	r1, #0
   1e9e0:	d103      	bne.n	1e9ea <hci_cmd_le_read_local_p256_public_key+0x1a>
   1e9e2:	e843 2000 	strex	r0, r2, [r3]
   1e9e6:	2800      	cmp	r0, #0
   1e9e8:	d1f7      	bne.n	1e9da <hci_cmd_le_read_local_p256_public_key+0xa>
   1e9ea:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   1e9ee:	d105      	bne.n	1e9fc <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   1e9f0:	4804      	ldr	r0, [pc, #16]	; (1ea04 <hci_cmd_le_read_local_p256_public_key+0x34>)
   1e9f2:	2100      	movs	r1, #0
   1e9f4:	f004 fd14 	bl	23420 <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   1e9f8:	2000      	movs	r0, #0
}
   1e9fa:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1e9fc:	200c      	movs	r0, #12
   1e9fe:	e7fc      	b.n	1e9fa <hci_cmd_le_read_local_p256_public_key+0x2a>
   1ea00:	20002eb4 	.word	0x20002eb4
   1ea04:	20002ea4 	.word	0x20002ea4

0001ea08 <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   1ea08:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1ea0a:	2900      	cmp	r1, #0
   1ea0c:	4b11      	ldr	r3, [pc, #68]	; (1ea54 <cmd_le_generate_dhkey+0x4c>)
   1ea0e:	f3bf 8f5b 	dmb	ish
{
   1ea12:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1ea14:	bf0c      	ite	eq
   1ea16:	2202      	moveq	r2, #2
   1ea18:	2204      	movne	r2, #4
   1ea1a:	e853 1f00 	ldrex	r1, [r3]
   1ea1e:	2900      	cmp	r1, #0
   1ea20:	d103      	bne.n	1ea2a <cmd_le_generate_dhkey+0x22>
   1ea22:	e843 2000 	strex	r0, r2, [r3]
   1ea26:	2800      	cmp	r0, #0
   1ea28:	d1f7      	bne.n	1ea1a <cmd_le_generate_dhkey+0x12>
   1ea2a:	f3bf 8f5b 	dmb	ish
   1ea2e:	d10e      	bne.n	1ea4e <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   1ea30:	4621      	mov	r1, r4
   1ea32:	4809      	ldr	r0, [pc, #36]	; (1ea58 <cmd_le_generate_dhkey+0x50>)
   1ea34:	f7ff fe68 	bl	1e708 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   1ea38:	4808      	ldr	r0, [pc, #32]	; (1ea5c <cmd_le_generate_dhkey+0x54>)
   1ea3a:	f104 0120 	add.w	r1, r4, #32
   1ea3e:	f7ff fe63 	bl	1e708 <sys_memcpy_swap.constprop.0>
   1ea42:	4807      	ldr	r0, [pc, #28]	; (1ea60 <cmd_le_generate_dhkey+0x58>)
   1ea44:	2100      	movs	r1, #0
   1ea46:	f004 fceb 	bl	23420 <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   1ea4a:	2000      	movs	r0, #0
}
   1ea4c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ea4e:	200c      	movs	r0, #12
   1ea50:	e7fc      	b.n	1ea4c <cmd_le_generate_dhkey+0x44>
   1ea52:	bf00      	nop
   1ea54:	20002eb4 	.word	0x20002eb4
   1ea58:	20003164 	.word	0x20003164
   1ea5c:	20003184 	.word	0x20003184
   1ea60:	20002ea4 	.word	0x20002ea4

0001ea64 <mpsl_low_prio_irq_handler>:
static uint8_t __aligned(4) timeslot_context[TIMESLOT_MEM_SIZE];
#endif

static void mpsl_low_prio_irq_handler(const void *arg)
{
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   1ea64:	4901      	ldr	r1, [pc, #4]	; (1ea6c <mpsl_low_prio_irq_handler+0x8>)
   1ea66:	4802      	ldr	r0, [pc, #8]	; (1ea70 <mpsl_low_prio_irq_handler+0xc>)
   1ea68:	f008 b803 	b.w	26a72 <k_work_submit_to_queue>
   1ea6c:	20002eb8 	.word	0x20002eb8
   1ea70:	20002870 	.word	0x20002870

0001ea74 <mpsl_lib_init_sys>:

	return 0;
}

static int mpsl_lib_init_sys(void)
{
   1ea74:	b537      	push	{r0, r1, r2, r4, r5, lr}
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1ea76:	2332      	movs	r3, #50	; 0x32
   1ea78:	f8ad 3004 	strh.w	r3, [sp, #4]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1ea7c:	4a10      	ldr	r2, [pc, #64]	; (1eac0 <mpsl_lib_init_sys+0x4c>)
	clock_cfg.skip_wait_lfclk_started =
   1ea7e:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   1ea80:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1ea82:	2119      	movs	r1, #25
   1ea84:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   1ea86:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   1ea8a:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   1ea8e:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1ea92:	f7ed fe6d 	bl	c770 <mpsl_init>
	int err = 0;

	err = mpsl_lib_init_internal();
	if (err) {
   1ea96:	4604      	mov	r4, r0
   1ea98:	b970      	cbnz	r0, 1eab8 <mpsl_lib_init_sys+0x44>
	ARM_IRQ_DIRECT_DYNAMIC_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			IRQ_CONNECT_FLAGS, reschedule);

	mpsl_lib_irq_connect();
#else /* !IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1ea9a:	4601      	mov	r1, r0
   1ea9c:	462a      	mov	r2, r5
   1ea9e:	2008      	movs	r0, #8
   1eaa0:	f7f5 fffc 	bl	14a9c <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1eaa4:	462a      	mov	r2, r5
   1eaa6:	4621      	mov	r1, r4
   1eaa8:	200b      	movs	r0, #11
   1eaaa:	f7f5 fff7 	bl	14a9c <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1eaae:	462a      	mov	r2, r5
   1eab0:	4621      	mov	r1, r4
   1eab2:	4628      	mov	r0, r5
   1eab4:	f7f5 fff2 	bl	14a9c <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);
#endif /* IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */

	return 0;
}
   1eab8:	4620      	mov	r0, r4
   1eaba:	b003      	add	sp, #12
   1eabc:	bd30      	pop	{r4, r5, pc}
   1eabe:	bf00      	nop
   1eac0:	0001eb01 	.word	0x0001eb01

0001eac4 <mpsl_low_prio_work_handler>:
{
   1eac4:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1eac6:	f04f 30ff 	mov.w	r0, #4294967295
   1eaca:	f04f 31ff 	mov.w	r1, #4294967295
   1eace:	f7fe ff91 	bl	1d9f4 <multithreading_lock_acquire>
	__ASSERT_NO_MSG(errcode == 0);
   1ead2:	b148      	cbz	r0, 1eae8 <mpsl_low_prio_work_handler+0x24>
   1ead4:	4907      	ldr	r1, [pc, #28]	; (1eaf4 <mpsl_low_prio_work_handler+0x30>)
   1ead6:	4808      	ldr	r0, [pc, #32]	; (1eaf8 <mpsl_low_prio_work_handler+0x34>)
   1ead8:	4a08      	ldr	r2, [pc, #32]	; (1eafc <mpsl_low_prio_work_handler+0x38>)
   1eada:	234b      	movs	r3, #75	; 0x4b
   1eadc:	f005 fbb2 	bl	24244 <assert_print>
   1eae0:	4806      	ldr	r0, [pc, #24]	; (1eafc <mpsl_low_prio_work_handler+0x38>)
   1eae2:	214b      	movs	r1, #75	; 0x4b
   1eae4:	f005 fba7 	bl	24236 <assert_post_action>
	mpsl_low_priority_process();
   1eae8:	f7f2 f80b 	bl	10b02 <mpsl_low_priority_process>
}
   1eaec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   1eaf0:	f7fe bf88 	b.w	1da04 <multithreading_lock_release>
   1eaf4:	0002ad59 	.word	0x0002ad59
   1eaf8:	00027c2a 	.word	0x00027c2a
   1eafc:	0002ad2c 	.word	0x0002ad2c

0001eb00 <m_assert_handler>:
{
   1eb00:	b598      	push	{r3, r4, r7, lr}
   1eb02:	af00      	add	r7, sp, #0
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   1eb04:	466c      	mov	r4, sp
   1eb06:	b08a      	sub	sp, #40	; 0x28
   1eb08:	466a      	mov	r2, sp
   1eb0a:	4b0c      	ldr	r3, [pc, #48]	; (1eb3c <m_assert_handler+0x3c>)
   1eb0c:	61d1      	str	r1, [r2, #28]
   1eb0e:	e9c2 3005 	strd	r3, r0, [r2, #20]
   1eb12:	f44f 7300 	mov.w	r3, #512	; 0x200
   1eb16:	8413      	strh	r3, [r2, #32]
   1eb18:	4b09      	ldr	r3, [pc, #36]	; (1eb40 <m_assert_handler+0x40>)
   1eb1a:	f842 3f10 	str.w	r3, [r2, #16]!
   1eb1e:	4809      	ldr	r0, [pc, #36]	; (1eb44 <m_assert_handler+0x44>)
   1eb20:	2300      	movs	r3, #0
   1eb22:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1eb26:	f7f5 fa31 	bl	13f8c <z_impl_z_log_msg_static_create>
   1eb2a:	46a5      	mov	sp, r4
	k_oops();
   1eb2c:	4040      	eors	r0, r0
   1eb2e:	f380 8811 	msr	BASEPRI, r0
   1eb32:	f04f 0003 	mov.w	r0, #3
   1eb36:	df02      	svc	2
}
   1eb38:	46bd      	mov	sp, r7
   1eb3a:	bd98      	pop	{r3, r4, r7, pc}
   1eb3c:	0002ad66 	.word	0x0002ad66
   1eb40:	01000004 	.word	0x01000004
   1eb44:	00027084 	.word	0x00027084

0001eb48 <mpsl_low_prio_init>:

static int mpsl_low_prio_init(void)
{
   1eb48:	b537      	push	{r0, r1, r2, r4, r5, lr}

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   1eb4a:	4d0d      	ldr	r5, [pc, #52]	; (1eb80 <mpsl_low_prio_init+0x38>)
   1eb4c:	490d      	ldr	r1, [pc, #52]	; (1eb84 <mpsl_low_prio_init+0x3c>)
   1eb4e:	2400      	movs	r4, #0
   1eb50:	9400      	str	r4, [sp, #0]
   1eb52:	f06f 0309 	mvn.w	r3, #9
   1eb56:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1eb5a:	4628      	mov	r0, r5
   1eb5c:	f002 f9ec 	bl	20f38 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   1eb60:	4909      	ldr	r1, [pc, #36]	; (1eb88 <mpsl_low_prio_init+0x40>)
   1eb62:	4628      	mov	r0, r5
   1eb64:	f007 fee0 	bl	26928 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   1eb68:	4908      	ldr	r1, [pc, #32]	; (1eb8c <mpsl_low_prio_init+0x44>)
   1eb6a:	4809      	ldr	r0, [pc, #36]	; (1eb90 <mpsl_low_prio_init+0x48>)
   1eb6c:	f002 f8fe 	bl	20d6c <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1eb70:	4622      	mov	r2, r4
   1eb72:	2104      	movs	r1, #4
   1eb74:	2019      	movs	r0, #25
   1eb76:	f7f5 ff91 	bl	14a9c <z_arm_irq_priority_set>
	k_work_schedule_for_queue(&mpsl_work_q, &calibration_work,
				  K_MSEC(CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD));
#endif /* CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC */

	return 0;
}
   1eb7a:	4620      	mov	r0, r4
   1eb7c:	b003      	add	sp, #12
   1eb7e:	bd30      	pop	{r4, r5, pc}
   1eb80:	20002870 	.word	0x20002870
   1eb84:	20005700 	.word	0x20005700
   1eb88:	0002ad7a 	.word	0x0002ad7a
   1eb8c:	0001eac5 	.word	0x0001eac5
   1eb90:	20002eb8 	.word	0x20002eb8

0001eb94 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1eb94:	4b01      	ldr	r3, [pc, #4]	; (1eb9c <mpsl_hfclk_callback+0x8>)
   1eb96:	2000      	movs	r0, #0
   1eb98:	681b      	ldr	r3, [r3, #0]
   1eb9a:	4718      	bx	r3
   1eb9c:	20002ec8 	.word	0x20002ec8

0001eba0 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1eba0:	b510      	push	{r4, lr}
	switch (domain) {
   1eba2:	b130      	cbz	r0, 1ebb2 <nrfx_clock_start+0x12>
   1eba4:	2801      	cmp	r0, #1
   1eba6:	d10a      	bne.n	1ebbe <nrfx_clock_start+0x1e>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1eba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1ebac:	480a      	ldr	r0, [pc, #40]	; (1ebd8 <nrfx_clock_start+0x38>)
   1ebae:	f7ec bf87 	b.w	bac0 <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1ebb2:	4b0a      	ldr	r3, [pc, #40]	; (1ebdc <nrfx_clock_start+0x3c>)
}
   1ebb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1ebb8:	681b      	ldr	r3, [r3, #0]
   1ebba:	2001      	movs	r0, #1
   1ebbc:	4718      	bx	r3
		__ASSERT(0, "Not supported");
   1ebbe:	4908      	ldr	r1, [pc, #32]	; (1ebe0 <nrfx_clock_start+0x40>)
   1ebc0:	4a08      	ldr	r2, [pc, #32]	; (1ebe4 <nrfx_clock_start+0x44>)
   1ebc2:	4809      	ldr	r0, [pc, #36]	; (1ebe8 <nrfx_clock_start+0x48>)
   1ebc4:	231c      	movs	r3, #28
   1ebc6:	f005 fb3d 	bl	24244 <assert_print>
   1ebca:	4808      	ldr	r0, [pc, #32]	; (1ebec <nrfx_clock_start+0x4c>)
   1ebcc:	f005 fb3a 	bl	24244 <assert_print>
   1ebd0:	4804      	ldr	r0, [pc, #16]	; (1ebe4 <nrfx_clock_start+0x44>)
   1ebd2:	211c      	movs	r1, #28
   1ebd4:	f005 fb2f 	bl	24236 <assert_post_action>
   1ebd8:	0001eb95 	.word	0x0001eb95
   1ebdc:	20002ec8 	.word	0x20002ec8
   1ebe0:	0002a7c0 	.word	0x0002a7c0
   1ebe4:	0002ad8e 	.word	0x0002ad8e
   1ebe8:	00027c2a 	.word	0x00027c2a
   1ebec:	0002adcb 	.word	0x0002adcb

0001ebf0 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1ebf0:	b508      	push	{r3, lr}
	switch (domain) {
   1ebf2:	b190      	cbz	r0, 1ec1a <nrfx_clock_stop+0x2a>
   1ebf4:	2801      	cmp	r0, #1
   1ebf6:	d103      	bne.n	1ec00 <nrfx_clock_stop+0x10>
		/* empty */
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1ebf8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mpsl_clock_hfclk_release();
   1ebfc:	f7ec bf52 	b.w	baa4 <mpsl_clock_hfclk_release>
		__ASSERT(0, "Not supported");
   1ec00:	4906      	ldr	r1, [pc, #24]	; (1ec1c <nrfx_clock_stop+0x2c>)
   1ec02:	4a07      	ldr	r2, [pc, #28]	; (1ec20 <nrfx_clock_stop+0x30>)
   1ec04:	4807      	ldr	r0, [pc, #28]	; (1ec24 <nrfx_clock_stop+0x34>)
   1ec06:	232a      	movs	r3, #42	; 0x2a
   1ec08:	f005 fb1c 	bl	24244 <assert_print>
   1ec0c:	4806      	ldr	r0, [pc, #24]	; (1ec28 <nrfx_clock_stop+0x38>)
   1ec0e:	f005 fb19 	bl	24244 <assert_print>
   1ec12:	4803      	ldr	r0, [pc, #12]	; (1ec20 <nrfx_clock_stop+0x30>)
   1ec14:	212a      	movs	r1, #42	; 0x2a
   1ec16:	f005 fb0e 	bl	24236 <assert_post_action>
}
   1ec1a:	bd08      	pop	{r3, pc}
   1ec1c:	0002a7c0 	.word	0x0002a7c0
   1ec20:	0002ad8e 	.word	0x0002ad8e
   1ec24:	00027c2a 	.word	0x00027c2a
   1ec28:	0002adcb 	.word	0x0002adcb

0001ec2c <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1ec2c:	4b01      	ldr	r3, [pc, #4]	; (1ec34 <nrfx_clock_init+0x8>)
   1ec2e:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1ec30:	4801      	ldr	r0, [pc, #4]	; (1ec38 <nrfx_clock_init+0xc>)
   1ec32:	4770      	bx	lr
   1ec34:	20002ec8 	.word	0x20002ec8
   1ec38:	0bad0000 	.word	0x0bad0000

0001ec3c <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1ec3c:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   1ec40:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1ec44:	2a06      	cmp	r2, #6
   1ec46:	d109      	bne.n	1ec5c <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1ec48:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   1ec4c:	f3c3 1303 	ubfx	r3, r3, #4, #4
   1ec50:	3b03      	subs	r3, #3
   1ec52:	2b04      	cmp	r3, #4
   1ec54:	d802      	bhi.n	1ec5c <nrf52_errata_16+0x20>
   1ec56:	4a02      	ldr	r2, [pc, #8]	; (1ec60 <nrf52_errata_16+0x24>)
   1ec58:	5cd0      	ldrb	r0, [r2, r3]
   1ec5a:	4770      	bx	lr
                switch(var2)
                {
                    case 0x03ul:
                        return true;
                    case 0x04ul:
                        return false;
   1ec5c:	2000      	movs	r0, #0
                }
            }
        #endif
        return false;
    #endif
}
   1ec5e:	4770      	bx	lr
   1ec60:	0002adea 	.word	0x0002adea

0001ec64 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1ec64:	4a02      	ldr	r2, [pc, #8]	; (1ec70 <nvmc_wait+0xc>)
   1ec66:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1ec6a:	2b00      	cmp	r3, #0
   1ec6c:	d0fb      	beq.n	1ec66 <nvmc_wait+0x2>
}
   1ec6e:	4770      	bx	lr
   1ec70:	4001e000 	.word	0x4001e000

0001ec74 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
   1ec74:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   1ec76:	f007 fd90 	bl	2679a <nrf52_errata_108>
   1ec7a:	b140      	cbz	r0, 1ec8e <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   1ec7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1ec80:	4a93      	ldr	r2, [pc, #588]	; (1eed0 <SystemInit+0x25c>)
   1ec82:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
   1ec86:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1ec8a:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   1ec8e:	f7ff ffd5 	bl	1ec3c <nrf52_errata_16>
   1ec92:	b110      	cbz	r0, 1ec9a <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   1ec94:	4b8f      	ldr	r3, [pc, #572]	; (1eed4 <SystemInit+0x260>)
   1ec96:	4a90      	ldr	r2, [pc, #576]	; (1eed8 <SystemInit+0x264>)
   1ec98:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   1ec9a:	f007 fd7e 	bl	2679a <nrf52_errata_108>
   1ec9e:	b148      	cbz	r0, 1ecb4 <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   1eca0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1eca4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1eca8:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
   1ecac:	f3c3 3342 	ubfx	r3, r3, #13, #3
   1ecb0:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   1ecb4:	f7ff ffc2 	bl	1ec3c <nrf52_errata_16>
   1ecb8:	b130      	cbz	r0, 1ecc8 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   1ecba:	4a88      	ldr	r2, [pc, #544]	; (1eedc <SystemInit+0x268>)
   1ecbc:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   1ecc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1ecc4:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1ecc8:	f007 fd67 	bl	2679a <nrf52_errata_108>
   1eccc:	b140      	cbz	r0, 1ece0 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
   1ecce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ecd2:	2200      	movs	r2, #0
   1ecd4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1ecd8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1ecdc:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   1ece0:	f7ff ffac 	bl	1ec3c <nrf52_errata_16>
   1ece4:	b120      	cbz	r0, 1ecf0 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   1ece6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ecea:	2203      	movs	r2, #3
   1ecec:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   1ecf0:	f7ff ffa4 	bl	1ec3c <nrf52_errata_16>
   1ecf4:	b160      	cbz	r0, 1ed10 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   1ecf6:	4b7a      	ldr	r3, [pc, #488]	; (1eee0 <SystemInit+0x26c>)
   1ecf8:	2205      	movs	r2, #5
   1ecfa:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   1ecfe:	2201      	movs	r2, #1
   1ed00:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   1ed04:	2200      	movs	r2, #0
   1ed06:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   1ed0a:	223f      	movs	r2, #63	; 0x3f
   1ed0c:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1ed10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1ed14:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1ed18:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1ed1a:	bf09      	itett	eq
   1ed1c:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   1ed20:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1ed24:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1ed28:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
   1ed2c:	bf08      	it	eq
   1ed2e:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1ed32:	2a06      	cmp	r2, #6
   1ed34:	d14d      	bne.n	1edd2 <SystemInit+0x15e>
            {
                switch(var2)
   1ed36:	3b03      	subs	r3, #3
   1ed38:	2b04      	cmp	r3, #4
   1ed3a:	d803      	bhi.n	1ed44 <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1ed3c:	4a69      	ldr	r2, [pc, #420]	; (1eee4 <SystemInit+0x270>)
   1ed3e:	5cd3      	ldrb	r3, [r2, r3]
   1ed40:	2b00      	cmp	r3, #0
   1ed42:	d046      	beq.n	1edd2 <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1ed44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1ed48:	4b67      	ldr	r3, [pc, #412]	; (1eee8 <SystemInit+0x274>)
   1ed4a:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1ed4e:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1ed52:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1ed56:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1ed5a:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1ed5e:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1ed62:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1ed66:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1ed6a:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1ed6e:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1ed72:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1ed76:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1ed7a:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1ed7e:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1ed82:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1ed86:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1ed8a:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1ed8e:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1ed92:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1ed96:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1ed9a:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1ed9e:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1eda2:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1eda6:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1edaa:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1edae:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1edb2:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1edb6:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1edba:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1edbe:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1edc2:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1edc6:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1edca:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1edce:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   1edd2:	f007 fce2 	bl	2679a <nrf52_errata_108>
   1edd6:	b148      	cbz	r0, 1edec <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   1edd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1eddc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1ede0:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1ede4:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   1ede8:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1edec:	f007 fcd5 	bl	2679a <nrf52_errata_108>
   1edf0:	b148      	cbz	r0, 1ee06 <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1edf2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1edf6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1edfa:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1edfc:	bf44      	itt	mi
   1edfe:	f06f 0201 	mvnmi.w	r2, #1
   1ee02:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1ee06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1ee0a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1ee0e:	2a06      	cmp	r2, #6
   1ee10:	d10e      	bne.n	1ee30 <SystemInit+0x1bc>
            {
                switch(var2)
   1ee12:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   1ee16:	3b03      	subs	r3, #3
   1ee18:	2b04      	cmp	r3, #4
   1ee1a:	d802      	bhi.n	1ee22 <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   1ee1c:	4a33      	ldr	r2, [pc, #204]	; (1eeec <SystemInit+0x278>)
   1ee1e:	5cd3      	ldrb	r3, [r2, r3]
   1ee20:	b133      	cbz	r3, 1ee30 <SystemInit+0x1bc>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   1ee22:	4a33      	ldr	r2, [pc, #204]	; (1eef0 <SystemInit+0x27c>)
   1ee24:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
   1ee28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1ee2c:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c

    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
     * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
     * operations are not used in your code. */
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
   1ee30:	4a2a      	ldr	r2, [pc, #168]	; (1eedc <SystemInit+0x268>)
   1ee32:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   1ee36:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   1ee3a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   1ee3e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1ee42:	f3bf 8f6f 	isb	sy
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1ee46:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1ee4a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1ee4e:	2a06      	cmp	r2, #6
   1ee50:	d10f      	bne.n	1ee72 <SystemInit+0x1fe>
            {
                switch(var2)
   1ee52:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   1ee56:	3b03      	subs	r3, #3
   1ee58:	2b04      	cmp	r3, #4
   1ee5a:	d802      	bhi.n	1ee62 <SystemInit+0x1ee>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   1ee5c:	4a25      	ldr	r2, [pc, #148]	; (1eef4 <SystemInit+0x280>)
   1ee5e:	5cd3      	ldrb	r3, [r2, r3]
   1ee60:	b13b      	cbz	r3, 1ee72 <SystemInit+0x1fe>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1ee62:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1ee66:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1ee6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ee6e:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1ee72:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1ee76:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1ee7a:	2a00      	cmp	r2, #0
   1ee7c:	db03      	blt.n	1ee86 <SystemInit+0x212>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1ee7e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1ee82:	2b00      	cmp	r3, #0
   1ee84:	da22      	bge.n	1eecc <SystemInit+0x258>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1ee86:	491c      	ldr	r1, [pc, #112]	; (1eef8 <SystemInit+0x284>)
   1ee88:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1ee8a:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1ee8e:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1ee92:	2415      	movs	r4, #21
    nvmc_wait();
   1ee94:	f7ff fee6 	bl	1ec64 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1ee98:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1ee9c:	f7ff fee2 	bl	1ec64 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1eea0:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1eea4:	f7ff fede 	bl	1ec64 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1eea8:	2300      	movs	r3, #0
   1eeaa:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1eeae:	f7ff fed9 	bl	1ec64 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   1eeb2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1eeb6:	4909      	ldr	r1, [pc, #36]	; (1eedc <SystemInit+0x268>)
   1eeb8:	4b10      	ldr	r3, [pc, #64]	; (1eefc <SystemInit+0x288>)
   1eeba:	68ca      	ldr	r2, [r1, #12]
   1eebc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1eec0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1eec2:	60cb      	str	r3, [r1, #12]
   1eec4:	f3bf 8f4f 	dsb	sy
    __NOP();
   1eec8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1eeca:	e7fd      	b.n	1eec8 <SystemInit+0x254>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
   1eecc:	bd10      	pop	{r4, pc}
   1eece:	bf00      	nop
   1eed0:	40013000 	.word	0x40013000
   1eed4:	4007c000 	.word	0x4007c000
   1eed8:	baadf00d 	.word	0xbaadf00d
   1eedc:	e000ed00 	.word	0xe000ed00
   1eee0:	40005000 	.word	0x40005000
   1eee4:	0002ade5 	.word	0x0002ade5
   1eee8:	4000c000 	.word	0x4000c000
   1eeec:	0002ade0 	.word	0x0002ade0
   1eef0:	40001000 	.word	0x40001000
   1eef4:	0002addb 	.word	0x0002addb
   1eef8:	4001e000 	.word	0x4001e000
   1eefc:	05fa0004 	.word	0x05fa0004

0001ef00 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1ef00:	b530      	push	{r4, r5, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
   1ef02:	6804      	ldr	r4, [r0, #0]
        if (prev_mask == 0)
   1ef04:	b1cc      	cbz	r4, 1ef3a <nrfx_flag32_alloc+0x3a>
   1ef06:	f3bf 8f5b 	dmb	ish
        {
            return NRFX_ERROR_NO_MEM;
        }

        idx = 31 - NRF_CLZ(prev_mask);
   1ef0a:	fab4 f384 	clz	r3, r4
   1ef0e:	f1c3 031f 	rsb	r3, r3, #31
   1ef12:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1ef14:	2201      	movs	r2, #1
   1ef16:	409a      	lsls	r2, r3
   1ef18:	ea24 0202 	bic.w	r2, r4, r2
   1ef1c:	e850 5f00 	ldrex	r5, [r0]
   1ef20:	42a5      	cmp	r5, r4
   1ef22:	d104      	bne.n	1ef2e <nrfx_flag32_alloc+0x2e>
   1ef24:	e840 2c00 	strex	ip, r2, [r0]
   1ef28:	f1bc 0f00 	cmp.w	ip, #0
   1ef2c:	d1f6      	bne.n	1ef1c <nrfx_flag32_alloc+0x1c>
   1ef2e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1ef32:	d1e6      	bne.n	1ef02 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;

    return NRFX_SUCCESS;
   1ef34:	4802      	ldr	r0, [pc, #8]	; (1ef40 <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
   1ef36:	700b      	strb	r3, [r1, #0]
}
   1ef38:	bd30      	pop	{r4, r5, pc}
            return NRFX_ERROR_NO_MEM;
   1ef3a:	4802      	ldr	r0, [pc, #8]	; (1ef44 <nrfx_flag32_alloc+0x44>)
   1ef3c:	e7fc      	b.n	1ef38 <nrfx_flag32_alloc+0x38>
   1ef3e:	bf00      	nop
   1ef40:	0bad0000 	.word	0x0bad0000
   1ef44:	0bad0002 	.word	0x0bad0002

0001ef48 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   1ef48:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1ef4a:	6803      	ldr	r3, [r0, #0]
   1ef4c:	40cb      	lsrs	r3, r1
   1ef4e:	07db      	lsls	r3, r3, #31
   1ef50:	d414      	bmi.n	1ef7c <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1ef52:	2301      	movs	r3, #1
   1ef54:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   1ef56:	6802      	ldr	r2, [r0, #0]
   1ef58:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   1ef5c:	ea43 0102 	orr.w	r1, r3, r2
   1ef60:	e850 4f00 	ldrex	r4, [r0]
   1ef64:	4294      	cmp	r4, r2
   1ef66:	d104      	bne.n	1ef72 <nrfx_flag32_free+0x2a>
   1ef68:	e840 1c00 	strex	ip, r1, [r0]
   1ef6c:	f1bc 0f00 	cmp.w	ip, #0
   1ef70:	d1f6      	bne.n	1ef60 <nrfx_flag32_free+0x18>
   1ef72:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1ef76:	d1ee      	bne.n	1ef56 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   1ef78:	4801      	ldr	r0, [pc, #4]	; (1ef80 <nrfx_flag32_free+0x38>)
}
   1ef7a:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1ef7c:	4801      	ldr	r0, [pc, #4]	; (1ef84 <nrfx_flag32_free+0x3c>)
   1ef7e:	e7fc      	b.n	1ef7a <nrfx_flag32_free+0x32>
   1ef80:	0bad0000 	.word	0x0bad0000
   1ef84:	0bad0004 	.word	0x0bad0004

0001ef88 <nrfx_gppi_channels_enable>:
    p_reg->CHENCLR = ((uint32_t)0xFFFFFFFFuL);
}

NRF_STATIC_INLINE void nrf_ppi_channels_enable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
   1ef88:	4b01      	ldr	r3, [pc, #4]	; (1ef90 <nrfx_gppi_channels_enable+0x8>)
   1ef8a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}

void nrfx_gppi_channels_enable(uint32_t mask)
{
    nrf_ppi_channels_enable(NRF_PPI, mask);
}
   1ef8e:	4770      	bx	lr
   1ef90:	4001f000 	.word	0x4001f000

0001ef94 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[get_pin_idx(pin)] & PIN_FLAG_TE_USED;
   1ef94:	b2c0      	uxtb	r0, r0
   1ef96:	4b03      	ldr	r3, [pc, #12]	; (1efa4 <pin_in_use_by_te+0x10>)
   1ef98:	3008      	adds	r0, #8
   1ef9a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1ef9e:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1efa2:	4770      	bx	lr
   1efa4:	2000072c 	.word	0x2000072c

0001efa8 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[get_pin_idx(pin)]);
   1efa8:	b2c0      	uxtb	r0, r0
   1efaa:	4b03      	ldr	r3, [pc, #12]	; (1efb8 <pin_is_output+0x10>)
   1efac:	3008      	adds	r0, #8
   1efae:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1efb2:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1efb6:	4770      	bx	lr
   1efb8:	2000072c 	.word	0x2000072c

0001efbc <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[get_pin_idx(pin)]);
   1efbc:	b2c0      	uxtb	r0, r0
   1efbe:	4b03      	ldr	r3, [pc, #12]	; (1efcc <pin_te_get+0x10>)
   1efc0:	3008      	adds	r0, #8
   1efc2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1efc6:	0b40      	lsrs	r0, r0, #13
   1efc8:	4770      	bx	lr
   1efca:	bf00      	nop
   1efcc:	2000072c 	.word	0x2000072c

0001efd0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrfy_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1efd0:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[get_pin_idx(pin)]);
   1efd2:	f100 0308 	add.w	r3, r0, #8
   1efd6:	4c0c      	ldr	r4, [pc, #48]	; (1f008 <call_handler+0x38>)
   1efd8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   1efdc:	05da      	lsls	r2, r3, #23
{
   1efde:	4605      	mov	r5, r0
   1efe0:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[get_pin_idx(pin)]);
   1efe2:	d507      	bpl.n	1eff4 <call_handler+0x24>
   1efe4:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1efe8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1efec:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1eff0:	6852      	ldr	r2, [r2, #4]
   1eff2:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1eff4:	68a3      	ldr	r3, [r4, #8]
   1eff6:	b12b      	cbz	r3, 1f004 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1eff8:	68e2      	ldr	r2, [r4, #12]
   1effa:	4631      	mov	r1, r6
   1effc:	4628      	mov	r0, r5
    }
}
   1effe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1f002:	4718      	bx	r3
}
   1f004:	bd70      	pop	{r4, r5, r6, pc}
   1f006:	bf00      	nop
   1f008:	2000072c 	.word	0x2000072c

0001f00c <release_handler>:
{
   1f00c:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[idx]);
   1f00e:	b2c0      	uxtb	r0, r0
   1f010:	4a18      	ldr	r2, [pc, #96]	; (1f074 <release_handler+0x68>)
   1f012:	3008      	adds	r0, #8
   1f014:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1f018:	05d9      	lsls	r1, r3, #23
   1f01a:	d51d      	bpl.n	1f058 <release_handler+0x4c>
   1f01c:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[idx] &= ~PIN_HANDLER_MASK;
   1f020:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1f024:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1f028:	f102 040e 	add.w	r4, r2, #14
   1f02c:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1f02e:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   1f032:	f413 7f80 	tst.w	r3, #256	; 0x100
   1f036:	d003      	beq.n	1f040 <release_handler+0x34>
   1f038:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1f03c:	4299      	cmp	r1, r3
   1f03e:	d00b      	beq.n	1f058 <release_handler+0x4c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1f040:	3001      	adds	r0, #1
   1f042:	2820      	cmp	r0, #32
   1f044:	d1f3      	bne.n	1f02e <release_handler+0x22>
        m_cb.handlers[handler_id].handler = NULL;
   1f046:	2300      	movs	r3, #0
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1f048:	480b      	ldr	r0, [pc, #44]	; (1f078 <release_handler+0x6c>)
        m_cb.handlers[handler_id].handler = NULL;
   1f04a:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1f04e:	f7ff ff7b 	bl	1ef48 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1f052:	4b0a      	ldr	r3, [pc, #40]	; (1f07c <release_handler+0x70>)
   1f054:	4298      	cmp	r0, r3
   1f056:	d100      	bne.n	1f05a <release_handler+0x4e>
}
   1f058:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   1f05a:	4909      	ldr	r1, [pc, #36]	; (1f080 <release_handler+0x74>)
   1f05c:	4809      	ldr	r0, [pc, #36]	; (1f084 <release_handler+0x78>)
   1f05e:	4a0a      	ldr	r2, [pc, #40]	; (1f088 <release_handler+0x7c>)
   1f060:	f44f 73ad 	mov.w	r3, #346	; 0x15a
   1f064:	f005 f8ee 	bl	24244 <assert_print>
   1f068:	4807      	ldr	r0, [pc, #28]	; (1f088 <release_handler+0x7c>)
   1f06a:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   1f06e:	f005 f8e2 	bl	24236 <assert_post_action>
   1f072:	bf00      	nop
   1f074:	2000072c 	.word	0x2000072c
   1f078:	20000780 	.word	0x20000780
   1f07c:	0bad0000 	.word	0x0bad0000
   1f080:	0002a4df 	.word	0x0002a4df
   1f084:	00027c2a 	.word	0x00027c2a
   1f088:	0002ae2e 	.word	0x0002ae2e

0001f08c <nrf_gpio_pin_port_decode>:
{
   1f08c:	b508      	push	{r3, lr}
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f08e:	6802      	ldr	r2, [r0, #0]
{
   1f090:	4601      	mov	r1, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   1f092:	4610      	mov	r0, r2
   1f094:	f007 fb9c 	bl	267d0 <nrf_gpio_pin_present_check>
   1f098:	b958      	cbnz	r0, 1f0b2 <nrf_gpio_pin_port_decode+0x26>
   1f09a:	490f      	ldr	r1, [pc, #60]	; (1f0d8 <nrf_gpio_pin_port_decode+0x4c>)
   1f09c:	4a0f      	ldr	r2, [pc, #60]	; (1f0dc <nrf_gpio_pin_port_decode+0x50>)
   1f09e:	4810      	ldr	r0, [pc, #64]	; (1f0e0 <nrf_gpio_pin_port_decode+0x54>)
   1f0a0:	f240 332f 	movw	r3, #815	; 0x32f
   1f0a4:	f005 f8ce 	bl	24244 <assert_print>
   1f0a8:	f240 312f 	movw	r1, #815	; 0x32f
            NRFX_ASSERT(0);
   1f0ac:	480b      	ldr	r0, [pc, #44]	; (1f0dc <nrf_gpio_pin_port_decode+0x50>)
   1f0ae:	f005 f8c2 	bl	24236 <assert_post_action>
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
   1f0b2:	f002 031f 	and.w	r3, r2, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f0b6:	0952      	lsrs	r2, r2, #5
    *p_pin = NRF_PIN_NUMBER_TO_PIN(pin_number);
   1f0b8:	600b      	str	r3, [r1, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1f0ba:	d009      	beq.n	1f0d0 <nrf_gpio_pin_port_decode+0x44>
            NRFX_ASSERT(0);
   1f0bc:	4909      	ldr	r1, [pc, #36]	; (1f0e4 <nrf_gpio_pin_port_decode+0x58>)
   1f0be:	4a07      	ldr	r2, [pc, #28]	; (1f0dc <nrf_gpio_pin_port_decode+0x50>)
   1f0c0:	4807      	ldr	r0, [pc, #28]	; (1f0e0 <nrf_gpio_pin_port_decode+0x54>)
   1f0c2:	f44f 734e 	mov.w	r3, #824	; 0x338
   1f0c6:	f005 f8bd 	bl	24244 <assert_print>
   1f0ca:	f44f 714e 	mov.w	r1, #824	; 0x338
   1f0ce:	e7ed      	b.n	1f0ac <nrf_gpio_pin_port_decode+0x20>
}
   1f0d0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1f0d4:	bd08      	pop	{r3, pc}
   1f0d6:	bf00      	nop
   1f0d8:	0002a484 	.word	0x0002a484
   1f0dc:	0002a451 	.word	0x0002a451
   1f0e0:	00027c2a 	.word	0x00027c2a
   1f0e4:	0002a7c0 	.word	0x0002a7c0

0001f0e8 <nrf_gpiote_in_event_get>:
}
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
   1f0e8:	2807      	cmp	r0, #7
{
   1f0ea:	b508      	push	{r3, lr}
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
   1f0ec:	d90b      	bls.n	1f106 <nrf_gpiote_in_event_get+0x1e>
   1f0ee:	4908      	ldr	r1, [pc, #32]	; (1f110 <nrf_gpiote_in_event_get+0x28>)
   1f0f0:	4808      	ldr	r0, [pc, #32]	; (1f114 <nrf_gpiote_in_event_get+0x2c>)
   1f0f2:	4a09      	ldr	r2, [pc, #36]	; (1f118 <nrf_gpiote_in_event_get+0x30>)
   1f0f4:	f240 23aa 	movw	r3, #682	; 0x2aa
   1f0f8:	f005 f8a4 	bl	24244 <assert_print>
   1f0fc:	4806      	ldr	r0, [pc, #24]	; (1f118 <nrf_gpiote_in_event_get+0x30>)
   1f0fe:	f240 21aa 	movw	r1, #682	; 0x2aa
   1f102:	f005 f898 	bl	24236 <assert_post_action>
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1f106:	0080      	lsls	r0, r0, #2
}
   1f108:	f500 7080 	add.w	r0, r0, #256	; 0x100
   1f10c:	bd08      	pop	{r3, pc}
   1f10e:	bf00      	nop
   1f110:	0002ae24 	.word	0x0002ae24
   1f114:	00027c2a 	.word	0x00027c2a
   1f118:	0002adef 	.word	0x0002adef

0001f11c <__nrfy_internal_gpiote_events_process.constprop.0>:
        return true;
    }
    return false;
}

NRFY_STATIC_INLINE uint32_t __nrfy_internal_gpiote_events_process(NRF_GPIOTE_Type * p_reg,
   1f11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f120:	2400      	movs	r4, #0
   1f122:	4606      	mov	r6, r0
                                                                  uint32_t          mask)
{
    uint32_t event_mask = 0;
   1f124:	4625      	mov	r5, r4
    if ((mask & NRFY_EVENT_TO_INT_BITMASK(event)) && nrf_gpiote_event_check(p_reg, event))
   1f126:	2701      	movs	r7, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f128:	46a0      	mov	r8, r4

    nrf_barrier_r();
    for (uint8_t i = 0; i < GPIOTE_CH_NUM; i++)
    {
        (void)__nrfy_internal_gpiote_event_handle(p_reg,
   1f12a:	b2e0      	uxtb	r0, r4
   1f12c:	f7ff ffdc 	bl	1f0e8 <nrf_gpiote_in_event_get>
    if ((mask & NRFY_EVENT_TO_INT_BITMASK(event)) && nrf_gpiote_event_check(p_reg, event))
   1f130:	f5a0 7280 	sub.w	r2, r0, #256	; 0x100
   1f134:	0892      	lsrs	r2, r2, #2
   1f136:	fa07 f202 	lsl.w	r2, r7, r2
   1f13a:	4216      	tst	r6, r2
   1f13c:	d009      	beq.n	1f152 <__nrfy_internal_gpiote_events_process.constprop.0+0x36>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f13e:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   1f142:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1f146:	6819      	ldr	r1, [r3, #0]
   1f148:	b119      	cbz	r1, 1f152 <__nrfy_internal_gpiote_events_process.constprop.0+0x36>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f14a:	f8c3 8000 	str.w	r8, [r3]
   1f14e:	681b      	ldr	r3, [r3, #0]
            *p_evt_mask |= NRFY_EVENT_TO_INT_BITMASK(event);
   1f150:	4315      	orrs	r5, r2
    for (uint8_t i = 0; i < GPIOTE_CH_NUM; i++)
   1f152:	3401      	adds	r4, #1
   1f154:	2c08      	cmp	r4, #8
   1f156:	d1e8      	bne.n	1f12a <__nrfy_internal_gpiote_events_process.constprop.0+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f158:	4b06      	ldr	r3, [pc, #24]	; (1f174 <__nrfy_internal_gpiote_events_process.constprop.0+0x58>)
   1f15a:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    if ((mask & NRFY_EVENT_TO_INT_BITMASK(event)) && nrf_gpiote_event_check(p_reg, event))
   1f15e:	b132      	cbz	r2, 1f16e <__nrfy_internal_gpiote_events_process.constprop.0+0x52>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f160:	2200      	movs	r2, #0
   1f162:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
   1f166:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
            *p_evt_mask |= NRFY_EVENT_TO_INT_BITMASK(event);
   1f16a:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    }

    (void)__nrfy_internal_gpiote_event_handle(p_reg, mask, NRF_GPIOTE_EVENT_PORT, &event_mask);

    return event_mask;
}
   1f16e:	4628      	mov	r0, r5
   1f170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f174:	40006000 	.word	0x40006000

0001f178 <nrfx_gpiote_input_configure>:
{
   1f178:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f17a:	4604      	mov	r4, r0
   1f17c:	b085      	sub	sp, #20
   1f17e:	4617      	mov	r7, r2
   1f180:	461d      	mov	r5, r3
    if (p_input_config)
   1f182:	b1d9      	cbz	r1, 1f1bc <nrfx_gpiote_input_configure+0x44>
        if (pin_is_task_output(pin))
   1f184:	f007 fb2e 	bl	267e4 <pin_is_task_output>
   1f188:	bb00      	cbnz	r0, 1f1cc <nrfx_gpiote_input_configure+0x54>
                                              const nrf_gpio_pin_input_t * p_input,
                                              const nrf_gpio_pin_pull_t *  p_pull,
                                              const nrf_gpio_pin_drive_t * p_drive,
                                              const nrf_gpio_pin_sense_t * p_sense)
{
    nrf_gpio_reconfigure(pin_number, p_dir, p_input, p_pull, p_drive, p_sense);
   1f18a:	460b      	mov	r3, r1
   1f18c:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1f190:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1f194:	f88d 000f 	strb.w	r0, [sp, #15]
   1f198:	f10d 020f 	add.w	r2, sp, #15
   1f19c:	f10d 010e 	add.w	r1, sp, #14
   1f1a0:	4620      	mov	r0, r4
   1f1a2:	f007 fb2a 	bl	267fa <nrf_gpio_reconfigure>
        m_cb.pin_flags[idx] &= ~PIN_FLAG_OUTPUT;
   1f1a6:	b2e3      	uxtb	r3, r4
        m_cb.pin_flags[idx] |= PIN_FLAG_IN_USE;
   1f1a8:	4944      	ldr	r1, [pc, #272]	; (1f2bc <nrfx_gpiote_input_configure+0x144>)
   1f1aa:	3308      	adds	r3, #8
        m_cb.pin_flags[idx] &= ~PIN_FLAG_OUTPUT;
   1f1ac:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   1f1b0:	f022 0202 	bic.w	r2, r2, #2
        m_cb.pin_flags[idx] |= PIN_FLAG_IN_USE;
   1f1b4:	f042 0201 	orr.w	r2, r2, #1
   1f1b8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    if (p_trigger_config)
   1f1bc:	b357      	cbz	r7, 1f214 <nrfx_gpiote_input_configure+0x9c>
        if (pin_is_output(pin))
   1f1be:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1f1c0:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1f1c2:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
   1f1c4:	f7ff fef0 	bl	1efa8 <pin_is_output>
   1f1c8:	b110      	cbz	r0, 1f1d0 <nrfx_gpiote_input_configure+0x58>
            if (use_evt)
   1f1ca:	b1c2      	cbz	r2, 1f1fe <nrfx_gpiote_input_configure+0x86>
            return NRFX_ERROR_INVALID_PARAM;
   1f1cc:	483c      	ldr	r0, [pc, #240]	; (1f2c0 <nrfx_gpiote_input_configure+0x148>)
   1f1ce:	e023      	b.n	1f218 <nrfx_gpiote_input_configure+0xa0>
            m_cb.pin_flags[idx] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1f1d0:	b2e3      	uxtb	r3, r4
   1f1d2:	f8df c0e8 	ldr.w	ip, [pc, #232]	; 1f2bc <nrfx_gpiote_input_configure+0x144>
   1f1d6:	3308      	adds	r3, #8
   1f1d8:	f83c 1013 	ldrh.w	r1, [ip, r3, lsl #1]
   1f1dc:	f021 0120 	bic.w	r1, r1, #32
   1f1e0:	04c9      	lsls	r1, r1, #19
   1f1e2:	0cc9      	lsrs	r1, r1, #19
   1f1e4:	f82c 1013 	strh.w	r1, [ip, r3, lsl #1]
            if (use_evt)
   1f1e8:	b14a      	cbz	r2, 1f1fe <nrfx_gpiote_input_configure+0x86>
                if (!edge)
   1f1ea:	2e03      	cmp	r6, #3
   1f1ec:	d8ee      	bhi.n	1f1cc <nrfx_gpiote_input_configure+0x54>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1f1ee:	687a      	ldr	r2, [r7, #4]
   1f1f0:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1f1f2:	b99e      	cbnz	r6, 1f21c <nrfx_gpiote_input_configure+0xa4>
    p_reg->CONFIG[idx] = 0;
   1f1f4:	4b33      	ldr	r3, [pc, #204]	; (1f2c4 <nrfx_gpiote_input_configure+0x14c>)
   1f1f6:	f507 77a2 	add.w	r7, r7, #324	; 0x144
   1f1fa:	f843 6027 	str.w	r6, [r3, r7, lsl #2]
        m_cb.pin_flags[idx] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1f1fe:	b2e3      	uxtb	r3, r4
        m_cb.pin_flags[idx] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1f200:	492e      	ldr	r1, [pc, #184]	; (1f2bc <nrfx_gpiote_input_configure+0x144>)
   1f202:	3308      	adds	r3, #8
        m_cb.pin_flags[idx] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1f204:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
   1f208:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[idx] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1f20c:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   1f210:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    if (p_handler_config)
   1f214:	bb3d      	cbnz	r5, 1f266 <nrfx_gpiote_input_configure+0xee>
        err = NRFX_SUCCESS;
   1f216:	482c      	ldr	r0, [pc, #176]	; (1f2c8 <nrfx_gpiote_input_configure+0x150>)
}
   1f218:	b005      	add	sp, #20
   1f21a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1f21c:	00ba      	lsls	r2, r7, #2
   1f21e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1f222:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[idx] |= PIN_FLAG_TE_ID(ch);
   1f226:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   1f22a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1f22e:	f020 0003 	bic.w	r0, r0, #3
   1f232:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1f236:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1f23a:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
   1f23e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   1f242:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f246:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1f24a:	0220      	lsls	r0, r4, #8
   1f24c:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
   1f250:	ea40 000e 	orr.w	r0, r0, lr
   1f254:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   1f258:	f041 0120 	orr.w	r1, r1, #32
   1f25c:	f82c 1013 	strh.w	r1, [ip, r3, lsl #1]
   1f260:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   1f264:	e7cb      	b.n	1f1fe <nrfx_gpiote_input_configure+0x86>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1f266:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1f26a:	4620      	mov	r0, r4
   1f26c:	f7ff fece 	bl	1f00c <release_handler>
    if (!handler)
   1f270:	2e00      	cmp	r6, #0
   1f272:	d0d0      	beq.n	1f216 <nrfx_gpiote_input_configure+0x9e>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1f274:	4d11      	ldr	r5, [pc, #68]	; (1f2bc <nrfx_gpiote_input_configure+0x144>)
   1f276:	e9d5 2300 	ldrd	r2, r3, [r5]
   1f27a:	4296      	cmp	r6, r2
   1f27c:	d101      	bne.n	1f282 <nrfx_gpiote_input_configure+0x10a>
   1f27e:	429f      	cmp	r7, r3
   1f280:	d019      	beq.n	1f2b6 <nrfx_gpiote_input_configure+0x13e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1f282:	4812      	ldr	r0, [pc, #72]	; (1f2cc <nrfx_gpiote_input_configure+0x154>)
   1f284:	f10d 010f 	add.w	r1, sp, #15
   1f288:	f7ff fe3a 	bl	1ef00 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1f28c:	4b0e      	ldr	r3, [pc, #56]	; (1f2c8 <nrfx_gpiote_input_configure+0x150>)
   1f28e:	4298      	cmp	r0, r3
   1f290:	d1c2      	bne.n	1f218 <nrfx_gpiote_input_configure+0xa0>
        handler_id = (int32_t)id;
   1f292:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   1f296:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[get_pin_idx(pin)] |= PIN_FLAG_HANDLER(handler_id);
   1f29a:	b2e4      	uxtb	r4, r4
    m_cb.handlers[handler_id].p_context = p_context;
   1f29c:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[get_pin_idx(pin)] |= PIN_FLAG_HANDLER(handler_id);
   1f2a0:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1f2a2:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[get_pin_idx(pin)] |= PIN_FLAG_HANDLER(handler_id);
   1f2a4:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   1f2a8:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1f2ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1f2b0:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   1f2b4:	e7af      	b.n	1f216 <nrfx_gpiote_input_configure+0x9e>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1f2b6:	2200      	movs	r2, #0
   1f2b8:	e7ed      	b.n	1f296 <nrfx_gpiote_input_configure+0x11e>
   1f2ba:	bf00      	nop
   1f2bc:	2000072c 	.word	0x2000072c
   1f2c0:	0bad0004 	.word	0x0bad0004
   1f2c4:	40006000 	.word	0x40006000
   1f2c8:	0bad0000 	.word	0x0bad0000
   1f2cc:	20000780 	.word	0x20000780

0001f2d0 <nrfx_gpiote_output_configure>:
{
   1f2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f2d2:	4604      	mov	r4, r0
   1f2d4:	b085      	sub	sp, #20
   1f2d6:	4616      	mov	r6, r2
    if (p_config)
   1f2d8:	b329      	cbz	r1, 1f326 <nrfx_gpiote_output_configure+0x56>
    return !pin_is_output(pin);
   1f2da:	f7ff fe65 	bl	1efa8 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1f2de:	b920      	cbnz	r0, 1f2ea <nrfx_gpiote_output_configure+0x1a>
   1f2e0:	4620      	mov	r0, r4
   1f2e2:	f7ff fe57 	bl	1ef94 <pin_in_use_by_te>
   1f2e6:	2800      	cmp	r0, #0
   1f2e8:	d15f      	bne.n	1f3aa <nrfx_gpiote_output_configure+0xda>
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[get_pin_idx(pin)]) != NRFX_GPIOTE_TRIGGER_NONE;
   1f2ea:	b2e5      	uxtb	r5, r4
   1f2ec:	4f30      	ldr	r7, [pc, #192]	; (1f3b0 <nrfx_gpiote_output_configure+0xe0>)
   1f2ee:	3508      	adds	r5, #8
   1f2f0:	f837 3015 	ldrh.w	r3, [r7, r5, lsl #1]
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1f2f4:	f013 0f1c 	tst.w	r3, #28
   1f2f8:	d002      	beq.n	1f300 <nrfx_gpiote_output_configure+0x30>
   1f2fa:	784b      	ldrb	r3, [r1, #1]
   1f2fc:	2b01      	cmp	r3, #1
   1f2fe:	d054      	beq.n	1f3aa <nrfx_gpiote_output_configure+0xda>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1f300:	2301      	movs	r3, #1
   1f302:	f88d 300f 	strb.w	r3, [sp, #15]
   1f306:	2300      	movs	r3, #0
   1f308:	e9cd 1300 	strd	r1, r3, [sp]
   1f30c:	1c4a      	adds	r2, r1, #1
   1f30e:	1c8b      	adds	r3, r1, #2
   1f310:	4620      	mov	r0, r4
   1f312:	f10d 010f 	add.w	r1, sp, #15
   1f316:	f007 fa70 	bl	267fa <nrf_gpio_reconfigure>
        m_cb.pin_flags[idx] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1f31a:	f837 3015 	ldrh.w	r3, [r7, r5, lsl #1]
   1f31e:	f043 0303 	orr.w	r3, r3, #3
   1f322:	f827 3015 	strh.w	r3, [r7, r5, lsl #1]
    if (p_task_config)
   1f326:	b916      	cbnz	r6, 1f32e <nrfx_gpiote_output_configure+0x5e>
    return NRFX_SUCCESS;
   1f328:	4822      	ldr	r0, [pc, #136]	; (1f3b4 <nrfx_gpiote_output_configure+0xe4>)
}
   1f32a:	b005      	add	sp, #20
   1f32c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
   1f32e:	4620      	mov	r0, r4
   1f330:	f7ff fe3a 	bl	1efa8 <pin_is_output>
        if (pin_is_input(pin))
   1f334:	b3c8      	cbz	r0, 1f3aa <nrfx_gpiote_output_configure+0xda>
        m_cb.pin_flags[idx] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1f336:	b2e5      	uxtb	r5, r4
   1f338:	4f1d      	ldr	r7, [pc, #116]	; (1f3b0 <nrfx_gpiote_output_configure+0xe0>)
        uint32_t ch = p_task_config->task_ch;
   1f33a:	f896 c000 	ldrb.w	ip, [r6]
        m_cb.pin_flags[idx] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1f33e:	3508      	adds	r5, #8
   1f340:	4661      	mov	r1, ip
   1f342:	f837 0015 	ldrh.w	r0, [r7, r5, lsl #1]
   1f346:	0089      	lsls	r1, r1, #2
   1f348:	f020 0020 	bic.w	r0, r0, #32
   1f34c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1f350:	04c0      	lsls	r0, r0, #19
   1f352:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   1f356:	0cc0      	lsrs	r0, r0, #19
   1f358:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
    p_reg->CONFIG[idx] = 0;
   1f35c:	2300      	movs	r3, #0
   1f35e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1f362:	7872      	ldrb	r2, [r6, #1]
   1f364:	2a00      	cmp	r2, #0
   1f366:	d0df      	beq.n	1f328 <nrfx_gpiote_output_configure+0x58>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1f368:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                       p_task_config->init_val);
   1f36c:	78b6      	ldrb	r6, [r6, #2]
   1f36e:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   1f372:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1f376:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1f37a:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f37c:	0223      	lsls	r3, r4, #8
   1f37e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1f382:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f386:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
   1f38a:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1f38c:	0532      	lsls	r2, r6, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f38e:	ea43 030e 	orr.w	r3, r3, lr
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1f392:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[idx] |= PIN_FLAG_TE_ID(ch);
   1f396:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1f39a:	4313      	orrs	r3, r2
   1f39c:	f040 0020 	orr.w	r0, r0, #32
   1f3a0:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
   1f3a4:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1f3a8:	e7be      	b.n	1f328 <nrfx_gpiote_output_configure+0x58>
{
   1f3aa:	4803      	ldr	r0, [pc, #12]	; (1f3b8 <nrfx_gpiote_output_configure+0xe8>)
   1f3ac:	e7bd      	b.n	1f32a <nrfx_gpiote_output_configure+0x5a>
   1f3ae:	bf00      	nop
   1f3b0:	2000072c 	.word	0x2000072c
   1f3b4:	0bad0000 	.word	0x0bad0000
   1f3b8:	0bad0004 	.word	0x0bad0004

0001f3bc <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1f3bc:	4b01      	ldr	r3, [pc, #4]	; (1f3c4 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1f3be:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1f3c2:	4770      	bx	lr
   1f3c4:	2000072c 	.word	0x2000072c

0001f3c8 <nrfx_gpiote_channel_get>:
{
   1f3c8:	b508      	push	{r3, lr}
   1f3ca:	4602      	mov	r2, r0
    NRFX_ASSERT(p_channel);
   1f3cc:	b959      	cbnz	r1, 1f3e6 <nrfx_gpiote_channel_get+0x1e>
   1f3ce:	490d      	ldr	r1, [pc, #52]	; (1f404 <nrfx_gpiote_channel_get+0x3c>)
   1f3d0:	480d      	ldr	r0, [pc, #52]	; (1f408 <nrfx_gpiote_channel_get+0x40>)
   1f3d2:	4a0e      	ldr	r2, [pc, #56]	; (1f40c <nrfx_gpiote_channel_get+0x44>)
   1f3d4:	f44f 7318 	mov.w	r3, #608	; 0x260
   1f3d8:	f004 ff34 	bl	24244 <assert_print>
   1f3dc:	480b      	ldr	r0, [pc, #44]	; (1f40c <nrfx_gpiote_channel_get+0x44>)
   1f3de:	f44f 7118 	mov.w	r1, #608	; 0x260
   1f3e2:	f004 ff28 	bl	24236 <assert_post_action>
    if (pin_in_use_by_te(pin))
   1f3e6:	f7ff fdd5 	bl	1ef94 <pin_in_use_by_te>
   1f3ea:	b140      	cbz	r0, 1f3fe <nrfx_gpiote_channel_get+0x36>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[get_pin_idx(pin)]);
   1f3ec:	b2d2      	uxtb	r2, r2
   1f3ee:	4b08      	ldr	r3, [pc, #32]	; (1f410 <nrfx_gpiote_channel_get+0x48>)
        return NRFX_SUCCESS;
   1f3f0:	4808      	ldr	r0, [pc, #32]	; (1f414 <nrfx_gpiote_channel_get+0x4c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[get_pin_idx(pin)]);
   1f3f2:	3208      	adds	r2, #8
   1f3f4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   1f3f8:	0b5b      	lsrs	r3, r3, #13
   1f3fa:	700b      	strb	r3, [r1, #0]
}
   1f3fc:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1f3fe:	4806      	ldr	r0, [pc, #24]	; (1f418 <nrfx_gpiote_channel_get+0x50>)
   1f400:	e7fc      	b.n	1f3fc <nrfx_gpiote_channel_get+0x34>
   1f402:	bf00      	nop
   1f404:	0002ae6c 	.word	0x0002ae6c
   1f408:	00027c2a 	.word	0x00027c2a
   1f40c:	0002ae2e 	.word	0x0002ae2e
   1f410:	2000072c 	.word	0x2000072c
   1f414:	0bad0000 	.word	0x0bad0000
   1f418:	0bad0004 	.word	0x0bad0004

0001f41c <nrfx_gpiote_init>:
{
   1f41c:	b570      	push	{r4, r5, r6, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1f41e:	4d19      	ldr	r5, [pc, #100]	; (1f484 <nrfx_gpiote_init+0x68>)
   1f420:	f895 4058 	ldrb.w	r4, [r5, #88]	; 0x58
   1f424:	bb64      	cbnz	r4, 1f480 <nrfx_gpiote_init+0x64>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1f426:	2240      	movs	r2, #64	; 0x40
   1f428:	4621      	mov	r1, r4
   1f42a:	f105 0010 	add.w	r0, r5, #16
   1f42e:	f005 fb18 	bl	24a62 <memset>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f432:	4626      	mov	r6, r4
        __nrfy_internal_gpiote_event_enabled_clear(p_reg, mask, nrf_gpiote_in_event_get(i));
   1f434:	b2e0      	uxtb	r0, r4
   1f436:	f7ff fe57 	bl	1f0e8 <nrf_gpiote_in_event_get>
    if (mask & NRFY_EVENT_TO_INT_BITMASK(event))
   1f43a:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   1f43e:	089b      	lsrs	r3, r3, #2
   1f440:	2b1f      	cmp	r3, #31
    return ((uint32_t)p_reg + event);
   1f442:	bf04      	itt	eq
   1f444:	f100 4080 	addeq.w	r0, r0, #1073741824	; 0x40000000
   1f448:	f500 40c0 	addeq.w	r0, r0, #24576	; 0x6000
    for (uint8_t i = 0; i < GPIOTE_CH_NUM; i++)
   1f44c:	f104 0401 	add.w	r4, r4, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f450:	bf04      	itt	eq
   1f452:	6006      	streq	r6, [r0, #0]
   1f454:	6803      	ldreq	r3, [r0, #0]
   1f456:	2c08      	cmp	r4, #8
   1f458:	d1ec      	bne.n	1f434 <nrfx_gpiote_init+0x18>
   1f45a:	4c0b      	ldr	r4, [pc, #44]	; (1f488 <nrfx_gpiote_init+0x6c>)
   1f45c:	2300      	movs	r3, #0
   1f45e:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
    NRFX_IRQ_ENABLE(irqn);
   1f462:	2006      	movs	r0, #6
   1f464:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   1f468:	f7f5 fae8 	bl	14a3c <arch_irq_enable>
    p_reg->NRFX_CONCAT_2(INTENSET, NRF_GPIOTE_IRQ_GROUP) = mask;
   1f46c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1f470:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    return err_code;
   1f474:	4805      	ldr	r0, [pc, #20]	; (1f48c <nrfx_gpiote_init+0x70>)
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1f476:	2301      	movs	r3, #1
   1f478:	f885 3058 	strb.w	r3, [r5, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1f47c:	656b      	str	r3, [r5, #84]	; 0x54
}
   1f47e:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
   1f480:	4803      	ldr	r0, [pc, #12]	; (1f490 <nrfx_gpiote_init+0x74>)
   1f482:	e7fc      	b.n	1f47e <nrfx_gpiote_init+0x62>
   1f484:	2000072c 	.word	0x2000072c
   1f488:	40006000 	.word	0x40006000
   1f48c:	0bad0000 	.word	0x0bad0000
   1f490:	0bad0005 	.word	0x0bad0005

0001f494 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1f494:	4b03      	ldr	r3, [pc, #12]	; (1f4a4 <nrfx_gpiote_is_init+0x10>)
   1f496:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   1f49a:	3800      	subs	r0, #0
   1f49c:	bf18      	it	ne
   1f49e:	2001      	movne	r0, #1
   1f4a0:	4770      	bx	lr
   1f4a2:	bf00      	nop
   1f4a4:	2000072c 	.word	0x2000072c

0001f4a8 <nrfx_gpiote_channel_free>:
{
   1f4a8:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1f4aa:	4801      	ldr	r0, [pc, #4]	; (1f4b0 <nrfx_gpiote_channel_free+0x8>)
   1f4ac:	f7ff bd4c 	b.w	1ef48 <nrfx_flag32_free>
   1f4b0:	2000077c 	.word	0x2000077c

0001f4b4 <nrfx_gpiote_channel_alloc>:
{
   1f4b4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1f4b6:	4801      	ldr	r0, [pc, #4]	; (1f4bc <nrfx_gpiote_channel_alloc+0x8>)
   1f4b8:	f7ff bd22 	b.w	1ef00 <nrfx_flag32_alloc>
   1f4bc:	2000077c 	.word	0x2000077c

0001f4c0 <nrfx_gpiote_trigger_enable>:
{
   1f4c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[get_pin_idx(pin)]) != NRFX_GPIOTE_TRIGGER_NONE;
   1f4c2:	b2c3      	uxtb	r3, r0
   1f4c4:	4a31      	ldr	r2, [pc, #196]	; (1f58c <nrfx_gpiote_trigger_enable+0xcc>)
   1f4c6:	3308      	adds	r3, #8
{
   1f4c8:	4604      	mov	r4, r0
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[get_pin_idx(pin)]) != NRFX_GPIOTE_TRIGGER_NONE;
   1f4ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    NRFX_ASSERT(pin_has_trigger(pin));
   1f4ce:	f013 0f1c 	tst.w	r3, #28
{
   1f4d2:	460d      	mov	r5, r1
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[get_pin_idx(pin)]) != NRFX_GPIOTE_TRIGGER_NONE;
   1f4d4:	f3c3 0282 	ubfx	r2, r3, #2, #3
    NRFX_ASSERT(pin_has_trigger(pin));
   1f4d8:	d10b      	bne.n	1f4f2 <nrfx_gpiote_trigger_enable+0x32>
   1f4da:	492d      	ldr	r1, [pc, #180]	; (1f590 <nrfx_gpiote_trigger_enable+0xd0>)
   1f4dc:	4a2d      	ldr	r2, [pc, #180]	; (1f594 <nrfx_gpiote_trigger_enable+0xd4>)
   1f4de:	482e      	ldr	r0, [pc, #184]	; (1f598 <nrfx_gpiote_trigger_enable+0xd8>)
   1f4e0:	f240 335f 	movw	r3, #863	; 0x35f
   1f4e4:	f004 feae 	bl	24244 <assert_print>
   1f4e8:	f240 315f 	movw	r1, #863	; 0x35f
        NRFX_ASSERT(int_enable);
   1f4ec:	4829      	ldr	r0, [pc, #164]	; (1f594 <nrfx_gpiote_trigger_enable+0xd4>)
   1f4ee:	f004 fea2 	bl	24236 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f4f2:	f7ff fd4f 	bl	1ef94 <pin_in_use_by_te>
   1f4f6:	b320      	cbz	r0, 1f542 <nrfx_gpiote_trigger_enable+0x82>
    return !pin_is_output(pin);
   1f4f8:	4620      	mov	r0, r4
   1f4fa:	f7ff fd55 	bl	1efa8 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f4fe:	4606      	mov	r6, r0
   1f500:	b9f8      	cbnz	r0, 1f542 <nrfx_gpiote_trigger_enable+0x82>
        uint8_t ch = pin_te_get(pin);
   1f502:	4620      	mov	r0, r4
   1f504:	f7ff fd5a 	bl	1efbc <pin_te_get>
   1f508:	4604      	mov	r4, r0
        nrfy_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
   1f50a:	f7ff fded 	bl	1f0e8 <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
   1f50e:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   1f512:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1f516:	601e      	str	r6, [r3, #0]
   1f518:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1f51a:	b223      	sxth	r3, r4
   1f51c:	009b      	lsls	r3, r3, #2
   1f51e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f522:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1f526:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1f52a:	f042 0201 	orr.w	r2, r2, #1
   1f52e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
   1f532:	b125      	cbz	r5, 1f53e <nrfx_gpiote_trigger_enable+0x7e>
    p_reg->NRFX_CONCAT_2(INTENSET, NRF_GPIOTE_IRQ_GROUP) = mask;
   1f534:	4a19      	ldr	r2, [pc, #100]	; (1f59c <nrfx_gpiote_trigger_enable+0xdc>)
            nrfy_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1f536:	2301      	movs	r3, #1
   1f538:	40a3      	lsls	r3, r4
   1f53a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1f53e:	b002      	add	sp, #8
   1f540:	bd70      	pop	{r4, r5, r6, pc}
        NRFX_ASSERT(int_enable);
   1f542:	b94d      	cbnz	r5, 1f558 <nrfx_gpiote_trigger_enable+0x98>
   1f544:	4916      	ldr	r1, [pc, #88]	; (1f5a0 <nrfx_gpiote_trigger_enable+0xe0>)
   1f546:	4a13      	ldr	r2, [pc, #76]	; (1f594 <nrfx_gpiote_trigger_enable+0xd4>)
   1f548:	4813      	ldr	r0, [pc, #76]	; (1f598 <nrfx_gpiote_trigger_enable+0xd8>)
   1f54a:	f240 336e 	movw	r3, #878	; 0x36e
   1f54e:	f004 fe79 	bl	24244 <assert_print>
   1f552:	f240 316e 	movw	r1, #878	; 0x36e
   1f556:	e7c9      	b.n	1f4ec <nrfx_gpiote_trigger_enable+0x2c>
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1f558:	2a04      	cmp	r2, #4
   1f55a:	d012      	beq.n	1f582 <nrfx_gpiote_trigger_enable+0xc2>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1f55c:	2a05      	cmp	r2, #5
   1f55e:	d012      	beq.n	1f586 <nrfx_gpiote_trigger_enable+0xc6>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f560:	a801      	add	r0, sp, #4
   1f562:	9401      	str	r4, [sp, #4]
   1f564:	f7ff fd92 	bl	1f08c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1f568:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1f56a:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1f56e:	40d9      	lsrs	r1, r3
   1f570:	f001 0101 	and.w	r1, r1, #1
NRFY_STATIC_INLINE uint32_t nrfy_gpio_pin_read(uint32_t pin_number)
{
    nrf_barrier_r();
    uint32_t pin = nrf_gpio_pin_read(pin_number);
    nrf_barrier_r();
    return pin;
   1f574:	3102      	adds	r1, #2
    nrf_gpio_cfg_sense_set(pin_number, sense_config);
   1f576:	4620      	mov	r0, r4
}
   1f578:	b002      	add	sp, #8
   1f57a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1f57e:	f007 b989 	b.w	26894 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1f582:	2103      	movs	r1, #3
   1f584:	e7f7      	b.n	1f576 <nrfx_gpiote_trigger_enable+0xb6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1f586:	2102      	movs	r1, #2
   1f588:	e7f5      	b.n	1f576 <nrfx_gpiote_trigger_enable+0xb6>
   1f58a:	bf00      	nop
   1f58c:	2000072c 	.word	0x2000072c
   1f590:	0002ae76 	.word	0x0002ae76
   1f594:	0002ae2e 	.word	0x0002ae2e
   1f598:	00027c2a 	.word	0x00027c2a
   1f59c:	40006000 	.word	0x40006000
   1f5a0:	0002ae8b 	.word	0x0002ae8b

0001f5a4 <nrfx_gpiote_trigger_disable>:
{
   1f5a4:	b508      	push	{r3, lr}
   1f5a6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f5a8:	f7ff fcf4 	bl	1ef94 <pin_in_use_by_te>
   1f5ac:	b1c0      	cbz	r0, 1f5e0 <nrfx_gpiote_trigger_disable+0x3c>
    return !pin_is_output(pin);
   1f5ae:	4610      	mov	r0, r2
   1f5b0:	f7ff fcfa 	bl	1efa8 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1f5b4:	b9a0      	cbnz	r0, 1f5e0 <nrfx_gpiote_trigger_disable+0x3c>
        uint8_t ch = pin_te_get(pin);
   1f5b6:	4610      	mov	r0, r2
   1f5b8:	f7ff fd00 	bl	1efbc <pin_te_get>
    p_reg->NRFX_CONCAT_2(INTENCLR, NRF_GPIOTE_IRQ_GROUP) = mask;
   1f5bc:	4a0b      	ldr	r2, [pc, #44]	; (1f5ec <nrfx_gpiote_trigger_disable+0x48>)
        nrfy_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1f5be:	2301      	movs	r3, #1
   1f5c0:	4083      	lsls	r3, r0
   1f5c2:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1f5c6:	b203      	sxth	r3, r0
   1f5c8:	009b      	lsls	r3, r3, #2
   1f5ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f5ce:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1f5d2:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1f5d6:	f022 0203 	bic.w	r2, r2, #3
   1f5da:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1f5de:	bd08      	pop	{r3, pc}
   1f5e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1f5e4:	2100      	movs	r1, #0
   1f5e6:	4610      	mov	r0, r2
   1f5e8:	f007 b954 	b.w	26894 <nrf_gpio_cfg_sense_set>
   1f5ec:	40006000 	.word	0x40006000

0001f5f0 <nrfx_gpiote_pin_uninit>:
{
   1f5f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return m_cb.pin_flags[get_pin_idx(pin)] & PIN_FLAG_IN_USE;
   1f5f2:	b2c5      	uxtb	r5, r0
   1f5f4:	4e17      	ldr	r6, [pc, #92]	; (1f654 <nrfx_gpiote_pin_uninit+0x64>)
   1f5f6:	3508      	adds	r5, #8
{
   1f5f8:	4604      	mov	r4, r0
    return m_cb.pin_flags[get_pin_idx(pin)] & PIN_FLAG_IN_USE;
   1f5fa:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
    if (!pin_in_use(pin))
   1f5fe:	07db      	lsls	r3, r3, #31
   1f600:	d526      	bpl.n	1f650 <nrfx_gpiote_pin_uninit+0x60>
    nrfx_gpiote_trigger_disable(pin);
   1f602:	f7ff ffcf 	bl	1f5a4 <nrfx_gpiote_trigger_disable>
    if (pin_in_use_by_te(pin))
   1f606:	4620      	mov	r0, r4
   1f608:	f7ff fcc4 	bl	1ef94 <pin_in_use_by_te>
   1f60c:	b140      	cbz	r0, 1f620 <nrfx_gpiote_pin_uninit+0x30>
        nrfy_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1f60e:	4620      	mov	r0, r4
   1f610:	f7ff fcd4 	bl	1efbc <pin_te_get>
    p_reg->CONFIG[idx] = 0;
   1f614:	4b10      	ldr	r3, [pc, #64]	; (1f658 <nrfx_gpiote_pin_uninit+0x68>)
   1f616:	f500 70a2 	add.w	r0, r0, #324	; 0x144
   1f61a:	2200      	movs	r2, #0
   1f61c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
   1f620:	4620      	mov	r0, r4
   1f622:	f7ff fcf3 	bl	1f00c <release_handler>
    m_cb.pin_flags[get_pin_idx(pin)] = PIN_FLAG_NOT_USED;
   1f626:	2300      	movs	r3, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f628:	a801      	add	r0, sp, #4
   1f62a:	f826 3015 	strh.w	r3, [r6, r5, lsl #1]
    nrf_gpio_cfg(
   1f62e:	9401      	str	r4, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f630:	f7ff fd2c 	bl	1f08c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1f634:	9b01      	ldr	r3, [sp, #4]
   1f636:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    cnf &= ~to_update;
   1f63a:	4b08      	ldr	r3, [pc, #32]	; (1f65c <nrfx_gpiote_pin_uninit+0x6c>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
   1f63c:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
    cnf &= ~to_update;
   1f640:	4013      	ands	r3, r2
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
   1f642:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
   1f646:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    nrf_gpio_cfg(
   1f64a:	4805      	ldr	r0, [pc, #20]	; (1f660 <nrfx_gpiote_pin_uninit+0x70>)
}
   1f64c:	b002      	add	sp, #8
   1f64e:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1f650:	4804      	ldr	r0, [pc, #16]	; (1f664 <nrfx_gpiote_pin_uninit+0x74>)
   1f652:	e7fb      	b.n	1f64c <nrfx_gpiote_pin_uninit+0x5c>
   1f654:	2000072c 	.word	0x2000072c
   1f658:	40006000 	.word	0x40006000
   1f65c:	fffcf8f0 	.word	0xfffcf8f0
   1f660:	0bad0000 	.word	0x0bad0000
   1f664:	0bad0004 	.word	0x0bad0004

0001f668 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1f668:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return p_reg->NRFX_CONCAT_2(INTENSET, NRF_GPIOTE_IRQ_GROUP) & mask;
   1f66c:	4b53      	ldr	r3, [pc, #332]	; (1f7bc <nrfx_gpiote_irq_handler+0x154>)
   1f66e:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
   1f672:	b2c0      	uxtb	r0, r0
    uint32_t evt_mask = __nrfy_internal_gpiote_events_process(p_reg, mask);
   1f674:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   1f678:	f7ff fd50 	bl	1f11c <__nrfy_internal_gpiote_events_process.constprop.0>
    uint32_t evt_mask = nrfy_gpiote_events_process(NRF_GPIOTE,
                                                   enabled_in_events |
                                                   (uint32_t)NRF_GPIOTE_INT_PORT_MASK);

    /* Handle PORT event. */
    if (evt_mask & (uint32_t)NRF_GPIOTE_INT_PORT_MASK)
   1f67c:	1e05      	subs	r5, r0, #0
   1f67e:	da1a      	bge.n	1f6b6 <nrfx_gpiote_irq_handler+0x4e>
        *p_masks = gpio_regs[i]->LATCH;
   1f680:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
                    PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[get_pin_idx(abs_pin)]);
   1f684:	f8df 8138 	ldr.w	r8, [pc, #312]	; 1f7c0 <nrfx_gpiote_irq_handler+0x158>
   1f688:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   1f68c:	9200      	str	r2, [sp, #0]
        gpio_regs[i]->LATCH = *p_masks;
   1f68e:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1f692:	2701      	movs	r7, #1
            while (latch[i])
   1f694:	9c00      	ldr	r4, [sp, #0]
   1f696:	b9a4      	cbnz	r4, 1f6c2 <nrfx_gpiote_irq_handler+0x5a>
   1f698:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   1f69c:	f7ff fd3e 	bl	1f11c <__nrfy_internal_gpiote_events_process.constprop.0>
        *p_masks = gpio_regs[i]->LATCH;
   1f6a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1f6a4:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   1f6a8:	9300      	str	r3, [sp, #0]
        gpio_regs[i]->LATCH = *p_masks;
   1f6aa:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        if (latch[port_idx])
   1f6ae:	2b00      	cmp	r3, #0
   1f6b0:	d1ef      	bne.n	1f692 <nrfx_gpiote_irq_handler+0x2a>
    {
        port_event_handle();
        evt_mask &= ~(uint32_t)NRF_GPIOTE_INT_PORT_MASK;
   1f6b2:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
        mask &= ~NRFX_BIT(ch);
   1f6b6:	2401      	movs	r4, #1
    while (mask)
   1f6b8:	2d00      	cmp	r5, #0
   1f6ba:	d167      	bne.n	1f78c <nrfx_gpiote_irq_handler+0x124>
    }

    /* Process pin events. */
    gpiote_evt_handle(evt_mask);
}
   1f6bc:	b003      	add	sp, #12
   1f6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
   1f6c2:	fa94 f4a4 	rbit	r4, r4
   1f6c6:	fab4 f484 	clz	r4, r4
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1f6ca:	08e1      	lsrs	r1, r4, #3
                    PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[get_pin_idx(abs_pin)]);
   1f6cc:	f104 0308 	add.w	r3, r4, #8
    bit = BITMASK_RELBIT_GET(bit);
   1f6d0:	f004 0207 	and.w	r2, r4, #7
   1f6d4:	f838 9013 	ldrh.w	r9, [r8, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   1f6d8:	f81d 3001 	ldrb.w	r3, [sp, r1]
   1f6dc:	9401      	str	r4, [sp, #4]
   1f6de:	fa07 f202 	lsl.w	r2, r7, r2
   1f6e2:	ea23 0302 	bic.w	r3, r3, r2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f6e6:	a801      	add	r0, sp, #4
   1f6e8:	f80d 3001 	strb.w	r3, [sp, r1]
   1f6ec:	f7ff fcce 	bl	1f08c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1f6f0:	9b01      	ldr	r3, [sp, #4]
   1f6f2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1f6f6:	ea4f 0b99 	mov.w	fp, r9, lsr #2
   1f6fa:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
   1f6fe:	f3c9 0a82 	ubfx	sl, r9, #2, #3
    if (is_level(trigger))
   1f702:	f01b 0f04 	tst.w	fp, #4
                nrfx_gpiote_trigger_t trigger =
   1f706:	46d1      	mov	r9, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1f708:	f3c6 4601 	ubfx	r6, r6, #16, #2
    if (is_level(trigger))
   1f70c:	d023      	beq.n	1f756 <nrfx_gpiote_irq_handler+0xee>
        call_handler(pin, trigger);
   1f70e:	4651      	mov	r1, sl
   1f710:	4620      	mov	r0, r4
   1f712:	f7ff fc5d 	bl	1efd0 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f716:	a801      	add	r0, sp, #4
   1f718:	9401      	str	r4, [sp, #4]
   1f71a:	f7ff fcb7 	bl	1f08c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1f71e:	9b01      	ldr	r3, [sp, #4]
   1f720:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1f724:	b2f6      	uxtb	r6, r6
   1f726:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrfy_gpio_pin_sense_get(pin) == sense)
   1f72a:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1f72e:	429e      	cmp	r6, r3
   1f730:	d107      	bne.n	1f742 <nrfx_gpiote_irq_handler+0xda>
   1f732:	2100      	movs	r1, #0
   1f734:	4620      	mov	r0, r4
   1f736:	f007 f8ad 	bl	26894 <nrf_gpio_cfg_sense_set>
   1f73a:	4631      	mov	r1, r6
   1f73c:	4620      	mov	r0, r4
   1f73e:	f007 f8a9 	bl	26894 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f742:	a801      	add	r0, sp, #4
   1f744:	9401      	str	r4, [sp, #4]
   1f746:	f7ff fca1 	bl	1f08c <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1f74a:	9b01      	ldr	r3, [sp, #4]
   1f74c:	fa07 f303 	lsl.w	r3, r7, r3
   1f750:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
/** @refhal{nrf_gpio_pin_latch_clear} */
NRFY_STATIC_INLINE void nrfy_gpio_pin_latch_clear(uint32_t pin_number)
{
    nrf_gpio_pin_latch_clear(pin_number);
    nrf_barrier_w();
}
   1f754:	e79e      	b.n	1f694 <nrfx_gpiote_irq_handler+0x2c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1f756:	2e02      	cmp	r6, #2
   1f758:	d10c      	bne.n	1f774 <nrfx_gpiote_irq_handler+0x10c>
    nrf_gpio_cfg_sense_set(pin_number, sense_config);
   1f75a:	2103      	movs	r1, #3
   1f75c:	4620      	mov	r0, r4
   1f75e:	f007 f899 	bl	26894 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1f762:	f00a 0305 	and.w	r3, sl, #5
   1f766:	2b01      	cmp	r3, #1
   1f768:	d1eb      	bne.n	1f742 <nrfx_gpiote_irq_handler+0xda>
            call_handler(pin, trigger);
   1f76a:	4649      	mov	r1, r9
   1f76c:	4620      	mov	r0, r4
   1f76e:	f7ff fc2f 	bl	1efd0 <call_handler>
   1f772:	e7e6      	b.n	1f742 <nrfx_gpiote_irq_handler+0xda>
   1f774:	2102      	movs	r1, #2
   1f776:	4620      	mov	r0, r4
   1f778:	f007 f88c 	bl	26894 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1f77c:	f1ba 0f03 	cmp.w	sl, #3
   1f780:	d0f3      	beq.n	1f76a <nrfx_gpiote_irq_handler+0x102>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1f782:	2e03      	cmp	r6, #3
   1f784:	d1dd      	bne.n	1f742 <nrfx_gpiote_irq_handler+0xda>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1f786:	f1ba 0f02 	cmp.w	sl, #2
   1f78a:	e7ed      	b.n	1f768 <nrfx_gpiote_irq_handler+0x100>
        uint32_t ch = NRF_CTZ(mask);
   1f78c:	fa95 f3a5 	rbit	r3, r5
   1f790:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1f794:	fa04 f203 	lsl.w	r2, r4, r3
   1f798:	009b      	lsls	r3, r3, #2
   1f79a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f79e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1f7a2:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1f7a6:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1f7aa:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1f7ae:	f3c0 2004 	ubfx	r0, r0, #8, #5
   1f7b2:	f3c1 4101 	ubfx	r1, r1, #16, #2
   1f7b6:	f7ff fc0b 	bl	1efd0 <call_handler>
   1f7ba:	e77d      	b.n	1f6b8 <nrfx_gpiote_irq_handler+0x50>
   1f7bc:	40006000 	.word	0x40006000
   1f7c0:	2000072c 	.word	0x2000072c

0001f7c4 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   1f7c4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   1f7c6:	4801      	ldr	r0, [pc, #4]	; (1f7cc <nrfx_ppi_channel_alloc+0x8>)
   1f7c8:	f7ff bb9a 	b.w	1ef00 <nrfx_flag32_alloc>
   1f7cc:	20000788 	.word	0x20000788

0001f7d0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   1f7d0:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1f7d2:	4c11      	ldr	r4, [pc, #68]	; (1f818 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1f7d4:	4a11      	ldr	r2, [pc, #68]	; (1f81c <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1f7d6:	4912      	ldr	r1, [pc, #72]	; (1f820 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1f7d8:	2303      	movs	r3, #3
   1f7da:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1f7dc:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1f7de:	4b11      	ldr	r3, [pc, #68]	; (1f824 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   1f7e0:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1f7e2:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1f7e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1f7e8:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   1f7ea:	2300      	movs	r3, #0
   1f7ec:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1f7ee:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1f7f0:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   1f7f2:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1f7f4:	4a0c      	ldr	r2, [pc, #48]	; (1f828 <_DoInit+0x58>)
   1f7f6:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   1f7f8:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1f7fa:	2210      	movs	r2, #16
   1f7fc:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   1f7fe:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1f800:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1f802:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   1f804:	f005 f901 	bl	24a0a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   1f808:	4908      	ldr	r1, [pc, #32]	; (1f82c <_DoInit+0x5c>)
   1f80a:	4620      	mov	r0, r4
   1f80c:	f005 f8fd 	bl	24a0a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   1f810:	2320      	movs	r3, #32
   1f812:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   1f814:	bd10      	pop	{r4, pc}
   1f816:	bf00      	nop
   1f818:	20002ecc 	.word	0x20002ecc
   1f81c:	0002aeb6 	.word	0x0002aeb6
   1f820:	0002aebf 	.word	0x0002aebf
   1f824:	200031b4 	.word	0x200031b4
   1f828:	200031a4 	.word	0x200031a4
   1f82c:	0002aec3 	.word	0x0002aec3

0001f830 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1f830:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   1f834:	4f21      	ldr	r7, [pc, #132]	; (1f8bc <SEGGER_RTT_WriteSkipNoLock+0x8c>)
   1f836:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1f83a:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   1f83c:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1f840:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   1f842:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   1f844:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1f846:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1f848:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1f84a:	d831      	bhi.n	1f8b0 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   1f84c:	f8d2 a020 	ldr.w	sl, [r2, #32]
   1f850:	ebaa 0905 	sub.w	r9, sl, r5
   1f854:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   1f858:	4294      	cmp	r4, r2
   1f85a:	d811      	bhi.n	1f880 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1f85c:	2318      	movs	r3, #24
   1f85e:	fb06 3303 	mla	r3, r6, r3, r3
   1f862:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
   1f864:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1f866:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   1f868:	4641      	mov	r1, r8
   1f86a:	4428      	add	r0, r5
   1f86c:	f005 f8ee 	bl	24a4c <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   1f870:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   1f872:	2318      	movs	r3, #24
   1f874:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
   1f878:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   1f87a:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   1f87c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   1f880:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   1f882:	429c      	cmp	r4, r3
   1f884:	d818      	bhi.n	1f8b8 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1f886:	fb00 bb0b 	mla	fp, r0, fp, fp
   1f88a:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   1f88c:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1f88e:	f8db 0004 	ldr.w	r0, [fp, #4]
   1f892:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   1f894:	4428      	add	r0, r5
   1f896:	f005 f8d9 	bl	24a4c <memcpy>
      if (NumBytes) {
   1f89a:	ebb4 040a 	subs.w	r4, r4, sl
   1f89e:	d0e8      	beq.n	1f872 <SEGGER_RTT_WriteSkipNoLock+0x42>
        memcpy((void*)pDst, pData + Rem, NumBytes);
   1f8a0:	f8db 0004 	ldr.w	r0, [fp, #4]
   1f8a4:	4622      	mov	r2, r4
   1f8a6:	eb08 0109 	add.w	r1, r8, r9
   1f8aa:	f005 f8cf 	bl	24a4c <memcpy>
      return 1;
   1f8ae:	e7e0      	b.n	1f872 <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
   1f8b0:	3b01      	subs	r3, #1
   1f8b2:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   1f8b4:	42a3      	cmp	r3, r4
   1f8b6:	d2d1      	bcs.n	1f85c <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   1f8b8:	2000      	movs	r0, #0
   1f8ba:	e7df      	b.n	1f87c <SEGGER_RTT_WriteSkipNoLock+0x4c>
   1f8bc:	20002ecc 	.word	0x20002ecc

0001f8c0 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   1f8c0:	4b03      	ldr	r3, [pc, #12]	; (1f8d0 <SEGGER_RTT_HasDataUp+0x10>)
   1f8c2:	2218      	movs	r2, #24
   1f8c4:	fb02 3300 	mla	r3, r2, r0, r3
   1f8c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   1f8ca:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   1f8cc:	1a80      	subs	r0, r0, r2
   1f8ce:	4770      	bx	lr
   1f8d0:	20002ecc 	.word	0x20002ecc

0001f8d4 <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   1f8d4:	4803      	ldr	r0, [pc, #12]	; (1f8e4 <zephyr_rtt_mutex_lock+0x10>)
   1f8d6:	f04f 32ff 	mov.w	r2, #4294967295
   1f8da:	f04f 33ff 	mov.w	r3, #4294967295
   1f8de:	f000 bd3b 	b.w	20358 <z_impl_k_mutex_lock>
   1f8e2:	bf00      	nop
   1f8e4:	2000094c 	.word	0x2000094c

0001f8e8 <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   1f8e8:	4801      	ldr	r0, [pc, #4]	; (1f8f0 <zephyr_rtt_mutex_unlock+0x8>)
   1f8ea:	f000 be05 	b.w	204f8 <z_impl_k_mutex_unlock>
   1f8ee:	bf00      	nop
   1f8f0:	2000094c 	.word	0x2000094c

0001f8f4 <z_device_state_init>:
 *
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
   1f8f4:	b508      	push	{r3, lr}
	STRUCT_SECTION_FOREACH(device, dev) {
   1f8f6:	4a0a      	ldr	r2, [pc, #40]	; (1f920 <z_device_state_init+0x2c>)
   1f8f8:	4b0a      	ldr	r3, [pc, #40]	; (1f924 <z_device_state_init+0x30>)
   1f8fa:	4293      	cmp	r3, r2
   1f8fc:	d90e      	bls.n	1f91c <z_device_state_init+0x28>
   1f8fe:	490a      	ldr	r1, [pc, #40]	; (1f928 <z_device_state_init+0x34>)
   1f900:	4a0a      	ldr	r2, [pc, #40]	; (1f92c <z_device_state_init+0x38>)
   1f902:	480b      	ldr	r0, [pc, #44]	; (1f930 <z_device_state_init+0x3c>)
   1f904:	2317      	movs	r3, #23
   1f906:	f004 fc9d 	bl	24244 <assert_print>
   1f90a:	480a      	ldr	r0, [pc, #40]	; (1f934 <z_device_state_init+0x40>)
   1f90c:	f004 fc9a 	bl	24244 <assert_print>
   1f910:	4806      	ldr	r0, [pc, #24]	; (1f92c <z_device_state_init+0x38>)
   1f912:	2117      	movs	r1, #23
   1f914:	f004 fc8f 	bl	24236 <assert_post_action>
   1f918:	3318      	adds	r3, #24
   1f91a:	e7ee      	b.n	1f8fa <z_device_state_init+0x6>
   1f91c:	d3fc      	bcc.n	1f918 <z_device_state_init+0x24>
		z_object_init(dev);
	}
}
   1f91e:	bd08      	pop	{r3, pc}
   1f920:	00026e1c 	.word	0x00026e1c
   1f924:	00026da4 	.word	0x00026da4
   1f928:	0002aeed 	.word	0x0002aeed
   1f92c:	0002aeca 	.word	0x0002aeca
   1f930:	00027c2a 	.word	0x00027c2a
   1f934:	00028176 	.word	0x00028176

0001f938 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1f938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f93c:	b086      	sub	sp, #24
   1f93e:	4604      	mov	r4, r0
   1f940:	af00      	add	r7, sp, #0
   1f942:	460e      	mov	r6, r1
	__asm__ volatile(
   1f944:	f04f 0340 	mov.w	r3, #64	; 0x40
   1f948:	f3ef 8811 	mrs	r8, BASEPRI
   1f94c:	f383 8812 	msr	BASEPRI_MAX, r3
   1f950:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1f954:	f002 fde8 	bl	22528 <z_impl_z_current_get>
   1f958:	2c04      	cmp	r4, #4
   1f95a:	bf96      	itet	ls
   1f95c:	4b33      	ldrls	r3, [pc, #204]	; (1fa2c <z_fatal_error+0xf4>)
   1f95e:	4b34      	ldrhi	r3, [pc, #208]	; (1fa30 <z_fatal_error+0xf8>)
   1f960:	f853 3024 	ldrls.w	r3, [r3, r4, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1f964:	46e9      	mov	r9, sp
   1f966:	b08a      	sub	sp, #40	; 0x28
   1f968:	4605      	mov	r5, r0
   1f96a:	466a      	mov	r2, sp
   1f96c:	4931      	ldr	r1, [pc, #196]	; (1fa34 <z_fatal_error+0xfc>)
   1f96e:	61d3      	str	r3, [r2, #28]
   1f970:	f240 3301 	movw	r3, #769	; 0x301
   1f974:	8493      	strh	r3, [r2, #36]	; 0x24
   1f976:	f04f 0a00 	mov.w	sl, #0
   1f97a:	4b2f      	ldr	r3, [pc, #188]	; (1fa38 <z_fatal_error+0x100>)
   1f97c:	f8c2 a020 	str.w	sl, [r2, #32]
   1f980:	e9c2 1405 	strd	r1, r4, [r2, #20]
   1f984:	f842 3f10 	str.w	r3, [r2, #16]!
   1f988:	482c      	ldr	r0, [pc, #176]	; (1fa3c <z_fatal_error+0x104>)
   1f98a:	4653      	mov	r3, sl
   1f98c:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
   1f990:	f7f4 fafc 	bl	13f8c <z_impl_z_log_msg_static_create>
   1f994:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1f996:	b17e      	cbz	r6, 1f9b8 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1f998:	69f3      	ldr	r3, [r6, #28]
   1f99a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1f99e:	b15b      	cbz	r3, 1f9b8 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
   1f9a0:	4b27      	ldr	r3, [pc, #156]	; (1fa40 <z_fatal_error+0x108>)
   1f9a2:	617b      	str	r3, [r7, #20]
   1f9a4:	2302      	movs	r3, #2
   1f9a6:	613b      	str	r3, [r7, #16]
   1f9a8:	4824      	ldr	r0, [pc, #144]	; (1fa3c <z_fatal_error+0x104>)
   1f9aa:	4653      	mov	r3, sl
   1f9ac:	f107 0210 	add.w	r2, r7, #16
   1f9b0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   1f9b4:	f7f4 faea 	bl	13f8c <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1f9b8:	b12d      	cbz	r5, 1f9c6 <z_fatal_error+0x8e>
   1f9ba:	4628      	mov	r0, r5
   1f9bc:	f006 ffb7 	bl	2692e <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1f9c0:	b108      	cbz	r0, 1f9c6 <z_fatal_error+0x8e>
   1f9c2:	7803      	ldrb	r3, [r0, #0]
   1f9c4:	b903      	cbnz	r3, 1f9c8 <z_fatal_error+0x90>
		thread_name = "unknown";
   1f9c6:	481f      	ldr	r0, [pc, #124]	; (1fa44 <z_fatal_error+0x10c>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1f9c8:	46e9      	mov	r9, sp
   1f9ca:	b08a      	sub	sp, #40	; 0x28
   1f9cc:	466a      	mov	r2, sp
   1f9ce:	4b1e      	ldr	r3, [pc, #120]	; (1fa48 <z_fatal_error+0x110>)
   1f9d0:	61d0      	str	r0, [r2, #28]
   1f9d2:	e9c2 3505 	strd	r3, r5, [r2, #20]
   1f9d6:	f240 3301 	movw	r3, #769	; 0x301
   1f9da:	8413      	strh	r3, [r2, #32]
   1f9dc:	4b1b      	ldr	r3, [pc, #108]	; (1fa4c <z_fatal_error+0x114>)
   1f9de:	f842 3f10 	str.w	r3, [r2, #16]!
   1f9e2:	4816      	ldr	r0, [pc, #88]	; (1fa3c <z_fatal_error+0x104>)
   1f9e4:	2300      	movs	r3, #0
   1f9e6:	f44f 5111 	mov.w	r1, #9280	; 0x2440
   1f9ea:	f7f4 facf 	bl	13f8c <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   1f9ee:	4631      	mov	r1, r6
   1f9f0:	46cd      	mov	sp, r9
   1f9f2:	4620      	mov	r0, r4
   1f9f4:	f7fe f80c 	bl	1da10 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   1f9f8:	2c04      	cmp	r4, #4
   1f9fa:	d10c      	bne.n	1fa16 <z_fatal_error+0xde>
   1f9fc:	4914      	ldr	r1, [pc, #80]	; (1fa50 <z_fatal_error+0x118>)
   1f9fe:	4a15      	ldr	r2, [pc, #84]	; (1fa54 <z_fatal_error+0x11c>)
   1fa00:	4815      	ldr	r0, [pc, #84]	; (1fa58 <z_fatal_error+0x120>)
   1fa02:	2393      	movs	r3, #147	; 0x93
   1fa04:	f004 fc1e 	bl	24244 <assert_print>
   1fa08:	4814      	ldr	r0, [pc, #80]	; (1fa5c <z_fatal_error+0x124>)
   1fa0a:	f004 fc1b 	bl	24244 <assert_print>
   1fa0e:	4811      	ldr	r0, [pc, #68]	; (1fa54 <z_fatal_error+0x11c>)
   1fa10:	2193      	movs	r1, #147	; 0x93
   1fa12:	f004 fc10 	bl	24236 <assert_post_action>
	__asm__ volatile(
   1fa16:	f388 8811 	msr	BASEPRI, r8
   1fa1a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1fa1e:	4628      	mov	r0, r5
   1fa20:	f7f5 fdc0 	bl	155a4 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1fa24:	3718      	adds	r7, #24
   1fa26:	46bd      	mov	sp, r7
   1fa28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1fa2c:	00027744 	.word	0x00027744
   1fa30:	0002af05 	.word	0x0002af05
   1fa34:	0002af13 	.word	0x0002af13
   1fa38:	01000005 	.word	0x01000005
   1fa3c:	000270a4 	.word	0x000270a4
   1fa40:	0002af3b 	.word	0x0002af3b
   1fa44:	00028ddc 	.word	0x00028ddc
   1fa48:	0002af5c 	.word	0x0002af5c
   1fa4c:	01000004 	.word	0x01000004
   1fa50:	0002af96 	.word	0x0002af96
   1fa54:	0002af74 	.word	0x0002af74
   1fa58:	00027c2a 	.word	0x00027c2a
   1fa5c:	0002afb3 	.word	0x0002afb3

0001fa60 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1fa60:	4b10      	ldr	r3, [pc, #64]	; (1faa4 <z_sys_init_run_level+0x44>)
{
   1fa62:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1fa64:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1fa68:	3001      	adds	r0, #1
   1fa6a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1fa6e:	42a6      	cmp	r6, r4
   1fa70:	d800      	bhi.n	1fa74 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
   1fa72:	bd70      	pop	{r4, r5, r6, pc}
			if (entry->init_fn.dev != NULL) {
   1fa74:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
   1fa78:	b195      	cbz	r5, 1faa0 <z_sys_init_run_level+0x40>
			if (entry->init_fn.dev != NULL) {
   1fa7a:	b153      	cbz	r3, 1fa92 <z_sys_init_run_level+0x32>
				rc = entry->init_fn.dev(dev);
   1fa7c:	4628      	mov	r0, r5
   1fa7e:	4798      	blx	r3
				if (rc != 0) {
   1fa80:	b138      	cbz	r0, 1fa92 <z_sys_init_run_level+0x32>
					if (rc < 0) {
   1fa82:	2800      	cmp	r0, #0
   1fa84:	bfb8      	it	lt
   1fa86:	4240      	neglt	r0, r0
					dev->state->init_res = rc;
   1fa88:	68eb      	ldr	r3, [r5, #12]
					if (rc > UINT8_MAX) {
   1fa8a:	28ff      	cmp	r0, #255	; 0xff
   1fa8c:	bfa8      	it	ge
   1fa8e:	20ff      	movge	r0, #255	; 0xff
					dev->state->init_res = rc;
   1fa90:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1fa92:	68ea      	ldr	r2, [r5, #12]
   1fa94:	7853      	ldrb	r3, [r2, #1]
   1fa96:	f043 0301 	orr.w	r3, r3, #1
   1fa9a:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1fa9c:	3408      	adds	r4, #8
   1fa9e:	e7e6      	b.n	1fa6e <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
   1faa0:	4798      	blx	r3
   1faa2:	e7fb      	b.n	1fa9c <z_sys_init_run_level+0x3c>
   1faa4:	00027758 	.word	0x00027758

0001faa8 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1faa8:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1faaa:	4b0a      	ldr	r3, [pc, #40]	; (1fad4 <bg_thread_main+0x2c>)
   1faac:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1faae:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   1fab0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1fab2:	f7ff ffd5 	bl	1fa60 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1fab6:	f003 fd95 	bl	235e4 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   1faba:	2004      	movs	r0, #4
   1fabc:	f7ff ffd0 	bl	1fa60 <z_sys_init_run_level>

	z_init_static_threads();
   1fac0:	f000 fb7c 	bl	201bc <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
   1fac4:	f7f2 facc 	bl	12060 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1fac8:	4a03      	ldr	r2, [pc, #12]	; (1fad8 <bg_thread_main+0x30>)
   1faca:	7b13      	ldrb	r3, [r2, #12]
   1facc:	f023 0301 	bic.w	r3, r3, #1
   1fad0:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1fad2:	bd08      	pop	{r3, pc}
   1fad4:	200035b4 	.word	0x200035b4
   1fad8:	20002a20 	.word	0x20002a20

0001fadc <z_bss_zero>:
{
   1fadc:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   1fade:	4803      	ldr	r0, [pc, #12]	; (1faec <z_bss_zero+0x10>)
   1fae0:	4a03      	ldr	r2, [pc, #12]	; (1faf0 <z_bss_zero+0x14>)
   1fae2:	2100      	movs	r1, #0
   1fae4:	1a12      	subs	r2, r2, r0
   1fae6:	f006 fef6 	bl	268d6 <z_early_memset>
}
   1faea:	bd08      	pop	{r3, pc}
   1faec:	20000b08 	.word	0x20000b08
   1faf0:	200035b8 	.word	0x200035b8

0001faf4 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   1faf4:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   1faf6:	4e1c      	ldr	r6, [pc, #112]	; (1fb68 <z_init_cpu+0x74>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1faf8:	4d1c      	ldr	r5, [pc, #112]	; (1fb6c <z_init_cpu+0x78>)
	z_setup_new_thread(thread, stack,
   1fafa:	491d      	ldr	r1, [pc, #116]	; (1fb70 <z_init_cpu+0x7c>)
	struct k_thread *thread = &z_idle_threads[i];
   1fafc:	23c8      	movs	r3, #200	; 0xc8
   1fafe:	fb03 6600 	mla	r6, r3, r0, r6
{
   1fb02:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   1fb04:	2300      	movs	r3, #0
   1fb06:	2201      	movs	r2, #1
   1fb08:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1fb0c:	220f      	movs	r2, #15
   1fb0e:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1fb12:	9301      	str	r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1fb14:	2318      	movs	r3, #24
   1fb16:	fb03 5500 	mla	r5, r3, r0, r5
{
   1fb1a:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   1fb1c:	f44f 70c0 	mov.w	r0, #384	; 0x180
   1fb20:	4b14      	ldr	r3, [pc, #80]	; (1fb74 <z_init_cpu+0x80>)
   1fb22:	9500      	str	r5, [sp, #0]
   1fb24:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1fb28:	fb00 1104 	mla	r1, r0, r4, r1
   1fb2c:	4630      	mov	r0, r6
   1fb2e:	f000 faa7 	bl	20080 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1fb32:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1fb34:	4a10      	ldr	r2, [pc, #64]	; (1fb78 <z_init_cpu+0x84>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   1fb36:	60ee      	str	r6, [r5, #12]
   1fb38:	f023 0304 	bic.w	r3, r3, #4
   1fb3c:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1fb3e:	f44f 6308 	mov.w	r3, #2176	; 0x880
   1fb42:	fb04 3303 	mla	r3, r4, r3, r3
   1fb46:	4413      	add	r3, r2
	_kernel.cpus[id].irq_stack =
   1fb48:	606b      	str	r3, [r5, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1fb4a:	4b0c      	ldr	r3, [pc, #48]	; (1fb7c <z_init_cpu+0x88>)
	_kernel.cpus[id].id = id;
   1fb4c:	742c      	strb	r4, [r5, #16]
   1fb4e:	f3bf 8f5b 	dmb	ish
   1fb52:	e853 1f00 	ldrex	r1, [r3]
   1fb56:	3101      	adds	r1, #1
   1fb58:	e843 1200 	strex	r2, r1, [r3]
   1fb5c:	2a00      	cmp	r2, #0
   1fb5e:	d1f8      	bne.n	1fb52 <z_init_cpu+0x5e>
   1fb60:	f3bf 8f5b 	dmb	ish
	/*
	 * Increment number of CPUs active. The pm subsystem
	 * will keep track of this from here.
	 */
	atomic_inc(&_cpus_active);
}
   1fb64:	b006      	add	sp, #24
   1fb66:	bd70      	pop	{r4, r5, r6, pc}
   1fb68:	20002958 	.word	0x20002958
   1fb6c:	20002f78 	.word	0x20002f78
   1fb70:	20006400 	.word	0x20006400
   1fb74:	00020311 	.word	0x00020311
   1fb78:	20005b80 	.word	0x20005b80
   1fb7c:	20002f74 	.word	0x20002f74

0001fb80 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
   1fb80:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1fb82:	2000      	movs	r0, #0
{
   1fb84:	b0b8      	sub	sp, #224	; 0xe0
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1fb86:	f7ff ff6b 	bl	1fa60 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1fb8a:	4b2f      	ldr	r3, [pc, #188]	; (1fc48 <z_cstart+0xc8>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1fb8c:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1fb90:	4c2e      	ldr	r4, [pc, #184]	; (1fc4c <z_cstart+0xcc>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   1fb92:	4e2f      	ldr	r6, [pc, #188]	; (1fc50 <z_cstart+0xd0>)
   1fb94:	6963      	ldr	r3, [r4, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1fb96:	4f2f      	ldr	r7, [pc, #188]	; (1fc54 <z_cstart+0xd4>)
   1fb98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1fb9c:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1fb9e:	23e0      	movs	r3, #224	; 0xe0
   1fba0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
   1fba4:	2500      	movs	r5, #0
   1fba6:	2320      	movs	r3, #32
   1fba8:	77e3      	strb	r3, [r4, #31]
   1fbaa:	7625      	strb	r5, [r4, #24]
   1fbac:	7665      	strb	r5, [r4, #25]
   1fbae:	76a5      	strb	r5, [r4, #26]
   1fbb0:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1fbb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1fbb6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1fbba:	6263      	str	r3, [r4, #36]	; 0x24
   1fbbc:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1fbc0:	f7f5 fc52 	bl	15468 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1fbc4:	f7f4 fe6a 	bl	1489c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1fbc8:	f04f 33ff 	mov.w	r3, #4294967295
   1fbcc:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1fbce:	62e3      	str	r3, [r4, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
   1fbd0:	ac06      	add	r4, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1fbd2:	f7f5 fdf3 	bl	157bc <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1fbd6:	f7f5 fcfb 	bl	155d0 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   1fbda:	f7f3 ffc5 	bl	13b68 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1fbde:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
   1fbe2:	4620      	mov	r0, r4
	dummy_thread->base.user_options = K_ESSENTIAL;
   1fbe4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
   1fbe8:	e9cd 5520 	strd	r5, r5, [sp, #128]	; 0x80
	k_thread_system_pool_assign(dummy_thread);
   1fbec:	f003 fcdc 	bl	235a8 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
   1fbf0:	60b4      	str	r4, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1fbf2:	f7ff fe7f 	bl	1f8f4 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   1fbf6:	2001      	movs	r0, #1
   1fbf8:	f7ff ff32 	bl	1fa60 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1fbfc:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   1fbfe:	4c16      	ldr	r4, [pc, #88]	; (1fc58 <z_cstart+0xd8>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1fc00:	f7ff ff2e 	bl	1fa60 <z_sys_init_run_level>
	z_sched_init();
   1fc04:	f002 fb1a 	bl	2223c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1fc08:	4b14      	ldr	r3, [pc, #80]	; (1fc5c <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   1fc0a:	61b4      	str	r4, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1fc0c:	9305      	str	r3, [sp, #20]
   1fc0e:	2301      	movs	r3, #1
   1fc10:	4913      	ldr	r1, [pc, #76]	; (1fc60 <z_cstart+0xe0>)
   1fc12:	9500      	str	r5, [sp, #0]
   1fc14:	e9cd 5303 	strd	r5, r3, [sp, #12]
   1fc18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1fc1c:	463b      	mov	r3, r7
   1fc1e:	e9cd 5501 	strd	r5, r5, [sp, #4]
   1fc22:	4620      	mov	r0, r4
   1fc24:	f000 fa2c 	bl	20080 <z_setup_new_thread>
   1fc28:	7b62      	ldrb	r2, [r4, #13]
   1fc2a:	4606      	mov	r6, r0
   1fc2c:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   1fc30:	4620      	mov	r0, r4
   1fc32:	7362      	strb	r2, [r4, #13]
   1fc34:	f001 fce8 	bl	21608 <z_ready_thread>
	z_init_cpu(0);
   1fc38:	4628      	mov	r0, r5
   1fc3a:	f7ff ff5b 	bl	1faf4 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1fc3e:	463a      	mov	r2, r7
   1fc40:	4631      	mov	r1, r6
   1fc42:	4620      	mov	r0, r4
   1fc44:	f7f5 f888 	bl	14d58 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1fc48:	20006400 	.word	0x20006400
   1fc4c:	e000ed00 	.word	0xe000ed00
   1fc50:	20002f78 	.word	0x20002f78
   1fc54:	0001faa9 	.word	0x0001faa9
   1fc58:	20002a20 	.word	0x20002a20
   1fc5c:	0002b032 	.word	0x0002b032
   1fc60:	20006580 	.word	0x20006580

0001fc64 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
   1fc64:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1fc66:	4c0d      	ldr	r4, [pc, #52]	; (1fc9c <statics_init+0x38>)
   1fc68:	4d0d      	ldr	r5, [pc, #52]	; (1fca0 <statics_init+0x3c>)
   1fc6a:	42ac      	cmp	r4, r5
   1fc6c:	d913      	bls.n	1fc96 <statics_init+0x32>
   1fc6e:	490d      	ldr	r1, [pc, #52]	; (1fca4 <statics_init+0x40>)
   1fc70:	4a0d      	ldr	r2, [pc, #52]	; (1fca8 <statics_init+0x44>)
   1fc72:	480e      	ldr	r0, [pc, #56]	; (1fcac <statics_init+0x48>)
   1fc74:	2318      	movs	r3, #24
   1fc76:	f004 fae5 	bl	24244 <assert_print>
   1fc7a:	480d      	ldr	r0, [pc, #52]	; (1fcb0 <statics_init+0x4c>)
   1fc7c:	f004 fae2 	bl	24244 <assert_print>
   1fc80:	4809      	ldr	r0, [pc, #36]	; (1fca8 <statics_init+0x44>)
   1fc82:	2118      	movs	r1, #24
   1fc84:	f004 fad7 	bl	24236 <assert_post_action>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1fc88:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1fc8c:	4620      	mov	r0, r4
   1fc8e:	f006 fe26 	bl	268de <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1fc92:	3418      	adds	r4, #24
   1fc94:	e7e9      	b.n	1fc6a <statics_init+0x6>
   1fc96:	d3f7      	bcc.n	1fc88 <statics_init+0x24>
		}
	}
	return 0;
}
   1fc98:	2000      	movs	r0, #0
   1fc9a:	bd38      	pop	{r3, r4, r5, pc}
   1fc9c:	20000920 	.word	0x20000920
   1fca0:	20000938 	.word	0x20000938
   1fca4:	0002b05c 	.word	0x0002b05c
   1fca8:	0002b03a 	.word	0x0002b03a
   1fcac:	00027c2a 	.word	0x00027c2a
   1fcb0:	00028176 	.word	0x00028176

0001fcb4 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1fcb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fcb8:	b085      	sub	sp, #20
   1fcba:	e9dd 9b0e 	ldrd	r9, fp, [sp, #56]	; 0x38
   1fcbe:	4680      	mov	r8, r0
   1fcc0:	9103      	str	r1, [sp, #12]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1fcc2:	4648      	mov	r0, r9
   1fcc4:	4659      	mov	r1, fp
{
   1fcc6:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1fcc8:	f006 ff23 	bl	26b12 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1fccc:	f1bb 3fff 	cmp.w	fp, #4294967295
   1fcd0:	bf08      	it	eq
   1fcd2:	f1b9 3fff 	cmpeq.w	r9, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   1fcd6:	4606      	mov	r6, r0
   1fcd8:	460f      	mov	r7, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   1fcda:	bf04      	itt	eq
   1fcdc:	f04f 36ff 	moveq.w	r6, #4294967295
   1fce0:	f06f 4700 	mvneq.w	r7, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1fce4:	f108 0414 	add.w	r4, r8, #20
	__asm__ volatile(
   1fce8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fcec:	f3ef 8511 	mrs	r5, BASEPRI
   1fcf0:	f383 8812 	msr	BASEPRI_MAX, r3
   1fcf4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fcf8:	4620      	mov	r0, r4
   1fcfa:	f000 fae3 	bl	202c4 <z_spin_lock_valid>
   1fcfe:	b960      	cbnz	r0, 1fd1a <k_heap_aligned_alloc+0x66>
   1fd00:	4a33      	ldr	r2, [pc, #204]	; (1fdd0 <k_heap_aligned_alloc+0x11c>)
   1fd02:	4934      	ldr	r1, [pc, #208]	; (1fdd4 <k_heap_aligned_alloc+0x120>)
   1fd04:	4834      	ldr	r0, [pc, #208]	; (1fdd8 <k_heap_aligned_alloc+0x124>)
   1fd06:	2394      	movs	r3, #148	; 0x94
   1fd08:	f004 fa9c 	bl	24244 <assert_print>
   1fd0c:	4621      	mov	r1, r4
   1fd0e:	4833      	ldr	r0, [pc, #204]	; (1fddc <k_heap_aligned_alloc+0x128>)
   1fd10:	f004 fa98 	bl	24244 <assert_print>
   1fd14:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fd16:	482e      	ldr	r0, [pc, #184]	; (1fdd0 <k_heap_aligned_alloc+0x11c>)
   1fd18:	e031      	b.n	1fd7e <k_heap_aligned_alloc+0xca>
	z_spin_lock_set_owner(l);
   1fd1a:	4620      	mov	r0, r4
   1fd1c:	f000 faf0 	bl	20300 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1fd20:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   1fd24:	b113      	cbz	r3, 1fd2c <k_heap_aligned_alloc+0x78>
   1fd26:	ea5b 0909 	orrs.w	r9, fp, r9
   1fd2a:	d11d      	bne.n	1fd68 <k_heap_aligned_alloc+0xb4>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1fd2c:	f108 0b0c 	add.w	fp, r8, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   1fd30:	9903      	ldr	r1, [sp, #12]
   1fd32:	4652      	mov	r2, sl
   1fd34:	4640      	mov	r0, r8
   1fd36:	f7f2 ff9b 	bl	12c70 <sys_heap_aligned_alloc>
   1fd3a:	4681      	mov	r9, r0
		now = sys_clock_tick_get();
   1fd3c:	f002 ff4c 	bl	22bd8 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   1fd40:	f1b9 0f00 	cmp.w	r9, #0
   1fd44:	d01d      	beq.n	1fd82 <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fd46:	4620      	mov	r0, r4
   1fd48:	f000 faca 	bl	202e0 <z_spin_unlock_valid>
   1fd4c:	2800      	cmp	r0, #0
   1fd4e:	d137      	bne.n	1fdc0 <k_heap_aligned_alloc+0x10c>
   1fd50:	4a1f      	ldr	r2, [pc, #124]	; (1fdd0 <k_heap_aligned_alloc+0x11c>)
   1fd52:	4923      	ldr	r1, [pc, #140]	; (1fde0 <k_heap_aligned_alloc+0x12c>)
   1fd54:	4820      	ldr	r0, [pc, #128]	; (1fdd8 <k_heap_aligned_alloc+0x124>)
   1fd56:	23c3      	movs	r3, #195	; 0xc3
   1fd58:	f004 fa74 	bl	24244 <assert_print>
   1fd5c:	4621      	mov	r1, r4
   1fd5e:	4821      	ldr	r0, [pc, #132]	; (1fde4 <k_heap_aligned_alloc+0x130>)
   1fd60:	f004 fa70 	bl	24244 <assert_print>
   1fd64:	21c3      	movs	r1, #195	; 0xc3
   1fd66:	e7d6      	b.n	1fd16 <k_heap_aligned_alloc+0x62>
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   1fd68:	491f      	ldr	r1, [pc, #124]	; (1fde8 <k_heap_aligned_alloc+0x134>)
   1fd6a:	4a20      	ldr	r2, [pc, #128]	; (1fdec <k_heap_aligned_alloc+0x138>)
   1fd6c:	481a      	ldr	r0, [pc, #104]	; (1fdd8 <k_heap_aligned_alloc+0x124>)
   1fd6e:	234c      	movs	r3, #76	; 0x4c
   1fd70:	f004 fa68 	bl	24244 <assert_print>
   1fd74:	481e      	ldr	r0, [pc, #120]	; (1fdf0 <k_heap_aligned_alloc+0x13c>)
   1fd76:	f004 fa65 	bl	24244 <assert_print>
   1fd7a:	481c      	ldr	r0, [pc, #112]	; (1fdec <k_heap_aligned_alloc+0x138>)
   1fd7c:	214c      	movs	r1, #76	; 0x4c
   1fd7e:	f004 fa5a 	bl	24236 <assert_post_action>
		    (ret != NULL) || ((end - now) <= 0)) {
   1fd82:	1a30      	subs	r0, r6, r0
   1fd84:	eb67 0101 	sbc.w	r1, r7, r1
   1fd88:	2801      	cmp	r0, #1
   1fd8a:	f171 0300 	sbcs.w	r3, r1, #0
   1fd8e:	dbda      	blt.n	1fd46 <k_heap_aligned_alloc+0x92>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1fd90:	e9cd 0100 	strd	r0, r1, [sp]
   1fd94:	465a      	mov	r2, fp
   1fd96:	4629      	mov	r1, r5
   1fd98:	4620      	mov	r0, r4
   1fd9a:	f001 ff7f 	bl	21c9c <z_pend_curr>
   1fd9e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fda2:	f3ef 8511 	mrs	r5, BASEPRI
   1fda6:	f383 8812 	msr	BASEPRI_MAX, r3
   1fdaa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fdae:	4620      	mov	r0, r4
   1fdb0:	f000 fa88 	bl	202c4 <z_spin_lock_valid>
   1fdb4:	2800      	cmp	r0, #0
   1fdb6:	d0a3      	beq.n	1fd00 <k_heap_aligned_alloc+0x4c>
	z_spin_lock_set_owner(l);
   1fdb8:	4620      	mov	r0, r4
   1fdba:	f000 faa1 	bl	20300 <z_spin_lock_set_owner>
	return k;
   1fdbe:	e7b7      	b.n	1fd30 <k_heap_aligned_alloc+0x7c>
	__asm__ volatile(
   1fdc0:	f385 8811 	msr	BASEPRI, r5
   1fdc4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1fdc8:	4648      	mov	r0, r9
   1fdca:	b005      	add	sp, #20
   1fdcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fdd0:	0002801e 	.word	0x0002801e
   1fdd4:	00028077 	.word	0x00028077
   1fdd8:	00027c2a 	.word	0x00027c2a
   1fddc:	0002808c 	.word	0x0002808c
   1fde0:	0002804b 	.word	0x0002804b
   1fde4:	00028062 	.word	0x00028062
   1fde8:	0002b072 	.word	0x0002b072
   1fdec:	0002b03a 	.word	0x0002b03a
   1fdf0:	0002a220 	.word	0x0002a220

0001fdf4 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   1fdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fdf6:	4605      	mov	r5, r0
   1fdf8:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1fdfa:	f100 0414 	add.w	r4, r0, #20
	__asm__ volatile(
   1fdfe:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fe02:	f3ef 8711 	mrs	r7, BASEPRI
   1fe06:	f383 8812 	msr	BASEPRI_MAX, r3
   1fe0a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fe0e:	4620      	mov	r0, r4
   1fe10:	f000 fa58 	bl	202c4 <z_spin_lock_valid>
   1fe14:	b968      	cbnz	r0, 1fe32 <k_heap_free+0x3e>
   1fe16:	4a1a      	ldr	r2, [pc, #104]	; (1fe80 <k_heap_free+0x8c>)
   1fe18:	491a      	ldr	r1, [pc, #104]	; (1fe84 <k_heap_free+0x90>)
   1fe1a:	481b      	ldr	r0, [pc, #108]	; (1fe88 <k_heap_free+0x94>)
   1fe1c:	2394      	movs	r3, #148	; 0x94
   1fe1e:	f004 fa11 	bl	24244 <assert_print>
   1fe22:	4621      	mov	r1, r4
   1fe24:	4819      	ldr	r0, [pc, #100]	; (1fe8c <k_heap_free+0x98>)
   1fe26:	f004 fa0d 	bl	24244 <assert_print>
   1fe2a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fe2c:	4814      	ldr	r0, [pc, #80]	; (1fe80 <k_heap_free+0x8c>)
   1fe2e:	f004 fa02 	bl	24236 <assert_post_action>
	z_spin_lock_set_owner(l);
   1fe32:	4620      	mov	r0, r4
   1fe34:	f000 fa64 	bl	20300 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   1fe38:	4628      	mov	r0, r5
   1fe3a:	4631      	mov	r1, r6
   1fe3c:	f7f2 fed2 	bl	12be4 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   1fe40:	f105 000c 	add.w	r0, r5, #12
   1fe44:	f006 fe4b 	bl	26ade <z_unpend_all>
   1fe48:	b128      	cbz	r0, 1fe56 <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   1fe4a:	4639      	mov	r1, r7
   1fe4c:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1fe4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   1fe52:	f001 bc67 	b.w	21724 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fe56:	4620      	mov	r0, r4
   1fe58:	f000 fa42 	bl	202e0 <z_spin_unlock_valid>
   1fe5c:	b958      	cbnz	r0, 1fe76 <k_heap_free+0x82>
   1fe5e:	4a08      	ldr	r2, [pc, #32]	; (1fe80 <k_heap_free+0x8c>)
   1fe60:	490b      	ldr	r1, [pc, #44]	; (1fe90 <k_heap_free+0x9c>)
   1fe62:	4809      	ldr	r0, [pc, #36]	; (1fe88 <k_heap_free+0x94>)
   1fe64:	23c3      	movs	r3, #195	; 0xc3
   1fe66:	f004 f9ed 	bl	24244 <assert_print>
   1fe6a:	4621      	mov	r1, r4
   1fe6c:	4809      	ldr	r0, [pc, #36]	; (1fe94 <k_heap_free+0xa0>)
   1fe6e:	f004 f9e9 	bl	24244 <assert_print>
   1fe72:	21c3      	movs	r1, #195	; 0xc3
   1fe74:	e7da      	b.n	1fe2c <k_heap_free+0x38>
	__asm__ volatile(
   1fe76:	f387 8811 	msr	BASEPRI, r7
   1fe7a:	f3bf 8f6f 	isb	sy
}
   1fe7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1fe80:	0002801e 	.word	0x0002801e
   1fe84:	00028077 	.word	0x00028077
   1fe88:	00027c2a 	.word	0x00027c2a
   1fe8c:	0002808c 	.word	0x0002808c
   1fe90:	0002804b 	.word	0x0002804b
   1fe94:	00028062 	.word	0x00028062

0001fe98 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
   1fe98:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1fe9a:	4c0d      	ldr	r4, [pc, #52]	; (1fed0 <init_mem_slab_module+0x38>)
   1fe9c:	4d0d      	ldr	r5, [pc, #52]	; (1fed4 <init_mem_slab_module+0x3c>)
	int rc = 0;
   1fe9e:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1fea0:	42ac      	cmp	r4, r5
   1fea2:	d913      	bls.n	1fecc <init_mem_slab_module+0x34>
   1fea4:	490c      	ldr	r1, [pc, #48]	; (1fed8 <init_mem_slab_module+0x40>)
   1fea6:	4a0d      	ldr	r2, [pc, #52]	; (1fedc <init_mem_slab_module+0x44>)
   1fea8:	480d      	ldr	r0, [pc, #52]	; (1fee0 <init_mem_slab_module+0x48>)
   1feaa:	233d      	movs	r3, #61	; 0x3d
   1feac:	f004 f9ca 	bl	24244 <assert_print>
   1feb0:	480c      	ldr	r0, [pc, #48]	; (1fee4 <init_mem_slab_module+0x4c>)
   1feb2:	f004 f9c7 	bl	24244 <assert_print>
   1feb6:	4809      	ldr	r0, [pc, #36]	; (1fedc <init_mem_slab_module+0x44>)
   1feb8:	213d      	movs	r1, #61	; 0x3d
   1feba:	f004 f9bc 	bl	24236 <assert_post_action>
		rc = create_free_list(slab);
   1febe:	4620      	mov	r0, r4
   1fec0:	f006 fd16 	bl	268f0 <create_free_list>
		if (rc < 0) {
   1fec4:	2800      	cmp	r0, #0
   1fec6:	db02      	blt.n	1fece <init_mem_slab_module+0x36>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1fec8:	3420      	adds	r4, #32
   1feca:	e7e9      	b.n	1fea0 <init_mem_slab_module+0x8>
   1fecc:	d3f7      	bcc.n	1febe <init_mem_slab_module+0x26>
		z_object_init(slab);
	}

out:
	return rc;
}
   1fece:	bd38      	pop	{r3, r4, r5, pc}
   1fed0:	200008c0 	.word	0x200008c0
   1fed4:	20000920 	.word	0x20000920
   1fed8:	0002b0dd 	.word	0x0002b0dd
   1fedc:	0002b0b8 	.word	0x0002b0b8
   1fee0:	00027c2a 	.word	0x00027c2a
   1fee4:	00028176 	.word	0x00028176

0001fee8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1fee8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1feec:	4604      	mov	r4, r0
   1feee:	460e      	mov	r6, r1
   1fef0:	4690      	mov	r8, r2
   1fef2:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   1fef4:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1fef8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fefc:	f3ef 8911 	mrs	r9, BASEPRI
   1ff00:	f383 8812 	msr	BASEPRI_MAX, r3
   1ff04:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ff08:	4628      	mov	r0, r5
   1ff0a:	f000 f9db 	bl	202c4 <z_spin_lock_valid>
   1ff0e:	b968      	cbnz	r0, 1ff2c <k_mem_slab_alloc+0x44>
   1ff10:	4a23      	ldr	r2, [pc, #140]	; (1ffa0 <k_mem_slab_alloc+0xb8>)
   1ff12:	4924      	ldr	r1, [pc, #144]	; (1ffa4 <k_mem_slab_alloc+0xbc>)
   1ff14:	4824      	ldr	r0, [pc, #144]	; (1ffa8 <k_mem_slab_alloc+0xc0>)
   1ff16:	2394      	movs	r3, #148	; 0x94
   1ff18:	f004 f994 	bl	24244 <assert_print>
   1ff1c:	4629      	mov	r1, r5
   1ff1e:	4823      	ldr	r0, [pc, #140]	; (1ffac <k_mem_slab_alloc+0xc4>)
   1ff20:	f004 f990 	bl	24244 <assert_print>
   1ff24:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ff26:	481e      	ldr	r0, [pc, #120]	; (1ffa0 <k_mem_slab_alloc+0xb8>)
   1ff28:	f004 f985 	bl	24236 <assert_post_action>
	z_spin_lock_set_owner(l);
   1ff2c:	4628      	mov	r0, r5
   1ff2e:	f000 f9e7 	bl	20300 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1ff32:	69a3      	ldr	r3, [r4, #24]
   1ff34:	b1b3      	cbz	r3, 1ff64 <k_mem_slab_alloc+0x7c>
		/* take a free block */
		*mem = slab->free_list;
   1ff36:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   1ff38:	681b      	ldr	r3, [r3, #0]
   1ff3a:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   1ff3c:	69e3      	ldr	r3, [r4, #28]
   1ff3e:	3301      	adds	r3, #1
   1ff40:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1ff42:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1ff44:	4628      	mov	r0, r5
   1ff46:	f000 f9cb 	bl	202e0 <z_spin_unlock_valid>
   1ff4a:	bb18      	cbnz	r0, 1ff94 <k_mem_slab_alloc+0xac>
   1ff4c:	4a14      	ldr	r2, [pc, #80]	; (1ffa0 <k_mem_slab_alloc+0xb8>)
   1ff4e:	4918      	ldr	r1, [pc, #96]	; (1ffb0 <k_mem_slab_alloc+0xc8>)
   1ff50:	4815      	ldr	r0, [pc, #84]	; (1ffa8 <k_mem_slab_alloc+0xc0>)
   1ff52:	23c3      	movs	r3, #195	; 0xc3
   1ff54:	f004 f976 	bl	24244 <assert_print>
   1ff58:	4629      	mov	r1, r5
   1ff5a:	4816      	ldr	r0, [pc, #88]	; (1ffb4 <k_mem_slab_alloc+0xcc>)
   1ff5c:	f004 f972 	bl	24244 <assert_print>
   1ff60:	21c3      	movs	r1, #195	; 0xc3
   1ff62:	e7e0      	b.n	1ff26 <k_mem_slab_alloc+0x3e>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1ff64:	ea58 0207 	orrs.w	r2, r8, r7
   1ff68:	d103      	bne.n	1ff72 <k_mem_slab_alloc+0x8a>
		   !IS_ENABLED(CONFIG_MULTITHREADING)) {
		/* don't wait for a free block to become available */
		*mem = NULL;
   1ff6a:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   1ff6c:	f06f 040b 	mvn.w	r4, #11
   1ff70:	e7e8      	b.n	1ff44 <k_mem_slab_alloc+0x5c>
	} else {
		SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_mem_slab, alloc, slab, timeout);

		/* wait for a free block or timeout */
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1ff72:	4622      	mov	r2, r4
   1ff74:	e9cd 8700 	strd	r8, r7, [sp]
   1ff78:	4649      	mov	r1, r9
   1ff7a:	4628      	mov	r0, r5
   1ff7c:	f001 fe8e 	bl	21c9c <z_pend_curr>
		if (result == 0) {
   1ff80:	4604      	mov	r4, r0
   1ff82:	b918      	cbnz	r0, 1ff8c <k_mem_slab_alloc+0xa4>
			*mem = _current->base.swap_data;
   1ff84:	4b0c      	ldr	r3, [pc, #48]	; (1ffb8 <k_mem_slab_alloc+0xd0>)
   1ff86:	689b      	ldr	r3, [r3, #8]
   1ff88:	695b      	ldr	r3, [r3, #20]
   1ff8a:	6033      	str	r3, [r6, #0]
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
   1ff8c:	4620      	mov	r0, r4
   1ff8e:	b003      	add	sp, #12
   1ff90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__asm__ volatile(
   1ff94:	f389 8811 	msr	BASEPRI, r9
   1ff98:	f3bf 8f6f 	isb	sy
	return result;
   1ff9c:	e7f6      	b.n	1ff8c <k_mem_slab_alloc+0xa4>
   1ff9e:	bf00      	nop
   1ffa0:	0002801e 	.word	0x0002801e
   1ffa4:	00028077 	.word	0x00028077
   1ffa8:	00027c2a 	.word	0x00027c2a
   1ffac:	0002808c 	.word	0x0002808c
   1ffb0:	0002804b 	.word	0x0002804b
   1ffb4:	00028062 	.word	0x00028062
   1ffb8:	20002f78 	.word	0x20002f78

0001ffbc <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1ffbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ffc0:	4604      	mov	r4, r0
   1ffc2:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   1ffc4:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   1ffc8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ffcc:	f3ef 8711 	mrs	r7, BASEPRI
   1ffd0:	f383 8812 	msr	BASEPRI_MAX, r3
   1ffd4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1ffd8:	4628      	mov	r0, r5
   1ffda:	f000 f973 	bl	202c4 <z_spin_lock_valid>
   1ffde:	b968      	cbnz	r0, 1fffc <k_mem_slab_free+0x40>
   1ffe0:	4a21      	ldr	r2, [pc, #132]	; (20068 <k_mem_slab_free+0xac>)
   1ffe2:	4922      	ldr	r1, [pc, #136]	; (2006c <k_mem_slab_free+0xb0>)
   1ffe4:	4822      	ldr	r0, [pc, #136]	; (20070 <k_mem_slab_free+0xb4>)
   1ffe6:	2394      	movs	r3, #148	; 0x94
   1ffe8:	f004 f92c 	bl	24244 <assert_print>
   1ffec:	4629      	mov	r1, r5
   1ffee:	4821      	ldr	r0, [pc, #132]	; (20074 <k_mem_slab_free+0xb8>)
   1fff0:	f004 f928 	bl	24244 <assert_print>
   1fff4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fff6:	481c      	ldr	r0, [pc, #112]	; (20068 <k_mem_slab_free+0xac>)
   1fff8:	f004 f91d 	bl	24236 <assert_post_action>
	z_spin_lock_set_owner(l);
   1fffc:	4628      	mov	r0, r5
   1fffe:	f000 f97f 	bl	20300 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   20002:	f8d4 8018 	ldr.w	r8, [r4, #24]
   20006:	f1b8 0f00 	cmp.w	r8, #0
   2000a:	d10f      	bne.n	2002c <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2000c:	4620      	mov	r0, r4
   2000e:	f002 f8c5 	bl	2219c <z_unpend_first_thread>

		if (pending_thread != NULL) {
   20012:	b158      	cbz	r0, 2002c <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   20014:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   20016:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   20018:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   2001c:	f001 faf4 	bl	21608 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   20020:	4639      	mov	r1, r7
   20022:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   20024:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   20028:	f001 bb7c 	b.w	21724 <z_reschedule>
	**(char ***) mem = slab->free_list;
   2002c:	6833      	ldr	r3, [r6, #0]
   2002e:	69a2      	ldr	r2, [r4, #24]
   20030:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   20032:	6833      	ldr	r3, [r6, #0]
   20034:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   20036:	69e3      	ldr	r3, [r4, #28]
   20038:	3b01      	subs	r3, #1
   2003a:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2003c:	4628      	mov	r0, r5
   2003e:	f000 f94f 	bl	202e0 <z_spin_unlock_valid>
   20042:	b958      	cbnz	r0, 2005c <k_mem_slab_free+0xa0>
   20044:	4a08      	ldr	r2, [pc, #32]	; (20068 <k_mem_slab_free+0xac>)
   20046:	490c      	ldr	r1, [pc, #48]	; (20078 <k_mem_slab_free+0xbc>)
   20048:	4809      	ldr	r0, [pc, #36]	; (20070 <k_mem_slab_free+0xb4>)
   2004a:	23c3      	movs	r3, #195	; 0xc3
   2004c:	f004 f8fa 	bl	24244 <assert_print>
   20050:	4629      	mov	r1, r5
   20052:	480a      	ldr	r0, [pc, #40]	; (2007c <k_mem_slab_free+0xc0>)
   20054:	f004 f8f6 	bl	24244 <assert_print>
   20058:	21c3      	movs	r1, #195	; 0xc3
   2005a:	e7cc      	b.n	1fff6 <k_mem_slab_free+0x3a>
	__asm__ volatile(
   2005c:	f387 8811 	msr	BASEPRI, r7
   20060:	f3bf 8f6f 	isb	sy
}
   20064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20068:	0002801e 	.word	0x0002801e
   2006c:	00028077 	.word	0x00028077
   20070:	00027c2a 	.word	0x00027c2a
   20074:	0002808c 	.word	0x0002808c
   20078:	0002804b 	.word	0x0002804b
   2007c:	00028062 	.word	0x00028062

00020080 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   20080:	b5f0      	push	{r4, r5, r6, r7, lr}
   20082:	b085      	sub	sp, #20
   20084:	4604      	mov	r4, r0
   20086:	9d0d      	ldr	r5, [sp, #52]	; 0x34
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
   20088:	2d0f      	cmp	r5, #15
   2008a:	d12e      	bne.n	200ea <z_setup_new_thread+0x6a>
   2008c:	4822      	ldr	r0, [pc, #136]	; (20118 <z_setup_new_thread+0x98>)
   2008e:	4283      	cmp	r3, r0
   20090:	d12f      	bne.n	200f2 <z_setup_new_thread+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   20092:	f104 0058 	add.w	r0, r4, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   20096:	3207      	adds	r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   20098:	e9c4 0016 	strd	r0, r0, [r4, #88]	; 0x58
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
	thread_base->thread_state = (uint8_t)initial_state;

	thread_base->prio = priority;
   2009c:	73a5      	strb	r5, [r4, #14]
	thread_base->user_options = (uint8_t)options;
   2009e:	980e      	ldr	r0, [sp, #56]	; 0x38
   200a0:	7320      	strb	r0, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   200a2:	f022 0507 	bic.w	r5, r2, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   200a6:	f101 0240 	add.w	r2, r1, #64	; 0x40
	new_thread->stack_info.size = stack_buf_size;
   200aa:	e9c4 251a 	strd	r2, r5, [r4, #104]	; 0x68
	thread_base->pended_on = NULL;
   200ae:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   200b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   200b2:	60a6      	str	r6, [r4, #8]
	thread_base->thread_state = (uint8_t)initial_state;
   200b4:	2004      	movs	r0, #4
   200b6:	7360      	strb	r0, [r4, #13]
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   200b8:	e9c4 6606 	strd	r6, r6, [r4, #24]

	thread_base->sched_locked = 0U;
   200bc:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
   200be:	6726      	str	r6, [r4, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   200c0:	f105 0740 	add.w	r7, r5, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   200c4:	9202      	str	r2, [sp, #8]
   200c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   200c8:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   200ca:	440f      	add	r7, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   200cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   200ce:	9200      	str	r2, [sp, #0]
   200d0:	4620      	mov	r0, r4
   200d2:	463a      	mov	r2, r7
   200d4:	f7f4 fdbc 	bl	14c50 <arch_new_thread>
	if (!_current) {
   200d8:	4b10      	ldr	r3, [pc, #64]	; (2011c <z_setup_new_thread+0x9c>)
	new_thread->init_data = NULL;
   200da:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
   200dc:	689b      	ldr	r3, [r3, #8]
   200de:	b103      	cbz	r3, 200e2 <z_setup_new_thread+0x62>
	new_thread->resource_pool = _current->resource_pool;
   200e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   200e2:	6763      	str	r3, [r4, #116]	; 0x74
}
   200e4:	4638      	mov	r0, r7
   200e6:	b005      	add	sp, #20
   200e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   200ea:	f105 0010 	add.w	r0, r5, #16
   200ee:	281e      	cmp	r0, #30
   200f0:	d9cf      	bls.n	20092 <z_setup_new_thread+0x12>
   200f2:	4a0b      	ldr	r2, [pc, #44]	; (20120 <z_setup_new_thread+0xa0>)
   200f4:	490b      	ldr	r1, [pc, #44]	; (20124 <z_setup_new_thread+0xa4>)
   200f6:	480c      	ldr	r0, [pc, #48]	; (20128 <z_setup_new_thread+0xa8>)
   200f8:	f240 231a 	movw	r3, #538	; 0x21a
   200fc:	f004 f8a2 	bl	24244 <assert_print>
   20100:	480a      	ldr	r0, [pc, #40]	; (2012c <z_setup_new_thread+0xac>)
   20102:	4629      	mov	r1, r5
   20104:	f06f 030f 	mvn.w	r3, #15
   20108:	220e      	movs	r2, #14
   2010a:	f004 f89b 	bl	24244 <assert_print>
   2010e:	4804      	ldr	r0, [pc, #16]	; (20120 <z_setup_new_thread+0xa0>)
   20110:	f240 211a 	movw	r1, #538	; 0x21a
   20114:	f004 f88f 	bl	24236 <assert_post_action>
   20118:	00020311 	.word	0x00020311
   2011c:	20002f78 	.word	0x20002f78
   20120:	0002b0fa 	.word	0x0002b0fa
   20124:	0002b11d 	.word	0x0002b11d
   20128:	00027c2a 	.word	0x00027c2a
   2012c:	0002b19d 	.word	0x0002b19d

00020130 <z_impl_k_thread_create>:
{
   20130:	b5f0      	push	{r4, r5, r6, r7, lr}
   20132:	b087      	sub	sp, #28
   20134:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
   20138:	4604      	mov	r4, r0
   2013a:	f3ef 8505 	mrs	r5, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   2013e:	b175      	cbz	r5, 2015e <z_impl_k_thread_create+0x2e>
   20140:	4919      	ldr	r1, [pc, #100]	; (201a8 <z_impl_k_thread_create+0x78>)
   20142:	4a1a      	ldr	r2, [pc, #104]	; (201ac <z_impl_k_thread_create+0x7c>)
   20144:	481a      	ldr	r0, [pc, #104]	; (201b0 <z_impl_k_thread_create+0x80>)
   20146:	f44f 7323 	mov.w	r3, #652	; 0x28c
   2014a:	f004 f87b 	bl	24244 <assert_print>
   2014e:	4819      	ldr	r0, [pc, #100]	; (201b4 <z_impl_k_thread_create+0x84>)
   20150:	f004 f878 	bl	24244 <assert_print>
   20154:	4815      	ldr	r0, [pc, #84]	; (201ac <z_impl_k_thread_create+0x7c>)
   20156:	f44f 7123 	mov.w	r1, #652	; 0x28c
   2015a:	f004 f86c 	bl	24236 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2015e:	9505      	str	r5, [sp, #20]
   20160:	9d10      	ldr	r5, [sp, #64]	; 0x40
   20162:	9504      	str	r5, [sp, #16]
   20164:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   20166:	9503      	str	r5, [sp, #12]
   20168:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   2016a:	9502      	str	r5, [sp, #8]
   2016c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   2016e:	9501      	str	r5, [sp, #4]
   20170:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   20172:	9500      	str	r5, [sp, #0]
   20174:	f7ff ff84 	bl	20080 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   20178:	f1b6 3fff 	cmp.w	r6, #4294967295
   2017c:	bf08      	it	eq
   2017e:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   20182:	d005      	beq.n	20190 <z_impl_k_thread_create+0x60>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20184:	ea56 0307 	orrs.w	r3, r6, r7
   20188:	d105      	bne.n	20196 <z_impl_k_thread_create+0x66>
	z_sched_start(thread);
   2018a:	4620      	mov	r0, r4
   2018c:	f001 fb0c 	bl	217a8 <z_sched_start>
}
   20190:	4620      	mov	r0, r4
   20192:	b007      	add	sp, #28
   20194:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   20196:	4908      	ldr	r1, [pc, #32]	; (201b8 <z_impl_k_thread_create+0x88>)
   20198:	463a      	mov	r2, r7
   2019a:	4633      	mov	r3, r6
   2019c:	f104 0018 	add.w	r0, r4, #24
   201a0:	f002 fb60 	bl	22864 <z_add_timeout>
   201a4:	e7f4      	b.n	20190 <z_impl_k_thread_create+0x60>
   201a6:	bf00      	nop
   201a8:	0002b1ce 	.word	0x0002b1ce
   201ac:	0002b0fa 	.word	0x0002b0fa
   201b0:	00027c2a 	.word	0x00027c2a
   201b4:	0002b1e0 	.word	0x0002b1e0
   201b8:	00026ad7 	.word	0x00026ad7

000201bc <z_init_static_threads>:
{
   201bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   201c0:	4c39      	ldr	r4, [pc, #228]	; (202a8 <z_init_static_threads+0xec>)
	_FOREACH_STATIC_THREAD(thread_data) {
   201c2:	4d3a      	ldr	r5, [pc, #232]	; (202ac <z_init_static_threads+0xf0>)
{
   201c4:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   201c6:	42ac      	cmp	r4, r5
   201c8:	4626      	mov	r6, r4
   201ca:	d92a      	bls.n	20222 <z_init_static_threads+0x66>
   201cc:	4938      	ldr	r1, [pc, #224]	; (202b0 <z_init_static_threads+0xf4>)
   201ce:	4a39      	ldr	r2, [pc, #228]	; (202b4 <z_init_static_threads+0xf8>)
   201d0:	4839      	ldr	r0, [pc, #228]	; (202b8 <z_init_static_threads+0xfc>)
   201d2:	f240 23f3 	movw	r3, #755	; 0x2f3
   201d6:	f004 f835 	bl	24244 <assert_print>
   201da:	4838      	ldr	r0, [pc, #224]	; (202bc <z_init_static_threads+0x100>)
   201dc:	f004 f832 	bl	24244 <assert_print>
   201e0:	f240 21f3 	movw	r1, #755	; 0x2f3
	_FOREACH_STATIC_THREAD(thread_data) {
   201e4:	4833      	ldr	r0, [pc, #204]	; (202b4 <z_init_static_threads+0xf8>)
   201e6:	f004 f826 	bl	24236 <assert_post_action>
		z_setup_new_thread(
   201ea:	f854 3c04 	ldr.w	r3, [r4, #-4]
   201ee:	9305      	str	r3, [sp, #20]
   201f0:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   201f4:	9304      	str	r3, [sp, #16]
   201f6:	f854 3c10 	ldr.w	r3, [r4, #-16]
   201fa:	9303      	str	r3, [sp, #12]
   201fc:	f854 3c14 	ldr.w	r3, [r4, #-20]
   20200:	9302      	str	r3, [sp, #8]
   20202:	f854 3c18 	ldr.w	r3, [r4, #-24]
   20206:	9301      	str	r3, [sp, #4]
   20208:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2020c:	9300      	str	r3, [sp, #0]
   2020e:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
   20212:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
   20216:	f7ff ff33 	bl	20080 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   2021a:	f854 3c2c 	ldr.w	r3, [r4, #-44]
   2021e:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   20220:	e7d1      	b.n	201c6 <z_init_static_threads+0xa>
   20222:	42ae      	cmp	r6, r5
   20224:	f104 042c 	add.w	r4, r4, #44	; 0x2c
   20228:	d3df      	bcc.n	201ea <z_init_static_threads+0x2e>
	k_sched_lock();
   2022a:	f001 fb0f 	bl	2184c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   2022e:	4c1e      	ldr	r4, [pc, #120]	; (202a8 <z_init_static_threads+0xec>)
   20230:	f8df 908c 	ldr.w	r9, [pc, #140]	; 202c0 <z_init_static_threads+0x104>
   20234:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   20238:	f240 37e7 	movw	r7, #999	; 0x3e7
   2023c:	42ac      	cmp	r4, r5
   2023e:	d92c      	bls.n	2029a <z_init_static_threads+0xde>
   20240:	491b      	ldr	r1, [pc, #108]	; (202b0 <z_init_static_threads+0xf4>)
   20242:	4a1c      	ldr	r2, [pc, #112]	; (202b4 <z_init_static_threads+0xf8>)
   20244:	481c      	ldr	r0, [pc, #112]	; (202b8 <z_init_static_threads+0xfc>)
   20246:	f240 3312 	movw	r3, #786	; 0x312
   2024a:	f003 fffb 	bl	24244 <assert_print>
   2024e:	481b      	ldr	r0, [pc, #108]	; (202bc <z_init_static_threads+0x100>)
   20250:	f003 fff8 	bl	24244 <assert_print>
   20254:	f240 3112 	movw	r1, #786	; 0x312
   20258:	e7c4      	b.n	201e4 <z_init_static_threads+0x28>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   2025a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2025c:	1c5a      	adds	r2, r3, #1
   2025e:	d00d      	beq.n	2027c <z_init_static_threads+0xc0>
					    K_MSEC(thread_data->init_delay));
   20260:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   20264:	2100      	movs	r1, #0
   20266:	4638      	mov	r0, r7
   20268:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2026c:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   20270:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20274:	d104      	bne.n	20280 <z_init_static_threads+0xc4>
	z_sched_start(thread);
   20276:	4640      	mov	r0, r8
   20278:	f001 fa96 	bl	217a8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   2027c:	342c      	adds	r4, #44	; 0x2c
   2027e:	e7dd      	b.n	2023c <z_init_static_threads+0x80>
   20280:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20284:	2300      	movs	r3, #0
   20286:	f7e0 faf9 	bl	87c <__aeabi_uldivmod>
   2028a:	4602      	mov	r2, r0
   2028c:	460b      	mov	r3, r1
   2028e:	f108 0018 	add.w	r0, r8, #24
   20292:	4649      	mov	r1, r9
   20294:	f002 fae6 	bl	22864 <z_add_timeout>
   20298:	e7f0      	b.n	2027c <z_init_static_threads+0xc0>
   2029a:	d3de      	bcc.n	2025a <z_init_static_threads+0x9e>
}
   2029c:	b007      	add	sp, #28
   2029e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   202a2:	f001 bb3f 	b.w	21924 <k_sched_unlock>
   202a6:	bf00      	nop
   202a8:	00026f54 	.word	0x00026f54
   202ac:	00026f54 	.word	0x00026f54
   202b0:	0002b205 	.word	0x0002b205
   202b4:	0002b0fa 	.word	0x0002b0fa
   202b8:	00027c2a 	.word	0x00027c2a
   202bc:	00028176 	.word	0x00028176
   202c0:	00026ad7 	.word	0x00026ad7

000202c4 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   202c4:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   202c6:	b138      	cbz	r0, 202d8 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   202c8:	4b04      	ldr	r3, [pc, #16]	; (202dc <z_spin_lock_valid+0x18>)
   202ca:	7c1b      	ldrb	r3, [r3, #16]
   202cc:	f000 0003 	and.w	r0, r0, #3
   202d0:	1ac0      	subs	r0, r0, r3
   202d2:	bf18      	it	ne
   202d4:	2001      	movne	r0, #1
   202d6:	4770      	bx	lr
			return false;
		}
	}
	return true;
   202d8:	2001      	movs	r0, #1
}
   202da:	4770      	bx	lr
   202dc:	20002f78 	.word	0x20002f78

000202e0 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   202e0:	4a06      	ldr	r2, [pc, #24]	; (202fc <z_spin_unlock_valid+0x1c>)
   202e2:	7c11      	ldrb	r1, [r2, #16]
   202e4:	6892      	ldr	r2, [r2, #8]
   202e6:	430a      	orrs	r2, r1
   202e8:	6801      	ldr	r1, [r0, #0]
{
   202ea:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   202ec:	4291      	cmp	r1, r2
   202ee:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
   202f2:	bf04      	itt	eq
   202f4:	6018      	streq	r0, [r3, #0]
	return true;
   202f6:	2001      	moveq	r0, #1
}
   202f8:	4770      	bx	lr
   202fa:	bf00      	nop
   202fc:	20002f78 	.word	0x20002f78

00020300 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   20300:	4b02      	ldr	r3, [pc, #8]	; (2030c <z_spin_lock_set_owner+0xc>)
   20302:	7c1a      	ldrb	r2, [r3, #16]
   20304:	689b      	ldr	r3, [r3, #8]
   20306:	4313      	orrs	r3, r2
   20308:	6003      	str	r3, [r0, #0]
}
   2030a:	4770      	bx	lr
   2030c:	20002f78 	.word	0x20002f78

00020310 <idle>:
	sys_clock_idle_exit();
#endif
}

void idle(void *unused1, void *unused2, void *unused3)
{
   20310:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   20312:	4b0d      	ldr	r3, [pc, #52]	; (20348 <idle+0x38>)
   20314:	689b      	ldr	r3, [r3, #8]
   20316:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2031a:	2b00      	cmp	r3, #0
   2031c:	da09      	bge.n	20332 <idle+0x22>
   2031e:	490b      	ldr	r1, [pc, #44]	; (2034c <idle+0x3c>)
   20320:	480b      	ldr	r0, [pc, #44]	; (20350 <idle+0x40>)
   20322:	4a0c      	ldr	r2, [pc, #48]	; (20354 <idle+0x44>)
   20324:	2329      	movs	r3, #41	; 0x29
   20326:	f003 ff8d 	bl	24244 <assert_print>
   2032a:	480a      	ldr	r0, [pc, #40]	; (20354 <idle+0x44>)
   2032c:	2129      	movs	r1, #41	; 0x29
   2032e:	f003 ff82 	bl	24236 <assert_post_action>
	__asm__ volatile(
   20332:	f04f 0240 	mov.w	r2, #64	; 0x40
   20336:	f3ef 8311 	mrs	r3, BASEPRI
   2033a:	f382 8812 	msr	BASEPRI_MAX, r2
   2033e:	f3bf 8f6f 	isb	sy
	arch_cpu_idle();
   20342:	f7f4 fab1 	bl	148a8 <arch_cpu_idle>
   20346:	e7f4      	b.n	20332 <idle+0x22>
   20348:	20002f78 	.word	0x20002f78
   2034c:	0002b253 	.word	0x0002b253
   20350:	00027c2a 	.word	0x00027c2a
   20354:	0002b232 	.word	0x0002b232

00020358 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   20358:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2035c:	4604      	mov	r4, r0
   2035e:	4617      	mov	r7, r2
   20360:	461e      	mov	r6, r3
   20362:	f3ef 8505 	mrs	r5, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   20366:	b165      	cbz	r5, 20382 <z_impl_k_mutex_lock+0x2a>
   20368:	4958      	ldr	r1, [pc, #352]	; (204cc <z_impl_k_mutex_lock+0x174>)
   2036a:	4a59      	ldr	r2, [pc, #356]	; (204d0 <z_impl_k_mutex_lock+0x178>)
   2036c:	4859      	ldr	r0, [pc, #356]	; (204d4 <z_impl_k_mutex_lock+0x17c>)
   2036e:	2365      	movs	r3, #101	; 0x65
   20370:	f003 ff68 	bl	24244 <assert_print>
   20374:	4858      	ldr	r0, [pc, #352]	; (204d8 <z_impl_k_mutex_lock+0x180>)
   20376:	f003 ff65 	bl	24244 <assert_print>
   2037a:	4855      	ldr	r0, [pc, #340]	; (204d0 <z_impl_k_mutex_lock+0x178>)
   2037c:	2165      	movs	r1, #101	; 0x65
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2037e:	f003 ff5a 	bl	24236 <assert_post_action>
   20382:	f04f 0340 	mov.w	r3, #64	; 0x40
   20386:	f3ef 8811 	mrs	r8, BASEPRI
   2038a:	f383 8812 	msr	BASEPRI_MAX, r3
   2038e:	f3bf 8f6f 	isb	sy
   20392:	4852      	ldr	r0, [pc, #328]	; (204dc <z_impl_k_mutex_lock+0x184>)
   20394:	f7ff ff96 	bl	202c4 <z_spin_lock_valid>
   20398:	b960      	cbnz	r0, 203b4 <z_impl_k_mutex_lock+0x5c>
   2039a:	4a51      	ldr	r2, [pc, #324]	; (204e0 <z_impl_k_mutex_lock+0x188>)
   2039c:	4951      	ldr	r1, [pc, #324]	; (204e4 <z_impl_k_mutex_lock+0x18c>)
   2039e:	484d      	ldr	r0, [pc, #308]	; (204d4 <z_impl_k_mutex_lock+0x17c>)
   203a0:	2394      	movs	r3, #148	; 0x94
   203a2:	f003 ff4f 	bl	24244 <assert_print>
   203a6:	494d      	ldr	r1, [pc, #308]	; (204dc <z_impl_k_mutex_lock+0x184>)
   203a8:	484f      	ldr	r0, [pc, #316]	; (204e8 <z_impl_k_mutex_lock+0x190>)
   203aa:	f003 ff4b 	bl	24244 <assert_print>
   203ae:	2194      	movs	r1, #148	; 0x94
   203b0:	484b      	ldr	r0, [pc, #300]	; (204e0 <z_impl_k_mutex_lock+0x188>)
   203b2:	e7e4      	b.n	2037e <z_impl_k_mutex_lock+0x26>
	z_spin_lock_set_owner(l);
   203b4:	4849      	ldr	r0, [pc, #292]	; (204dc <z_impl_k_mutex_lock+0x184>)
   203b6:	f7ff ffa3 	bl	20300 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   203ba:	68e3      	ldr	r3, [r4, #12]
   203bc:	4a4b      	ldr	r2, [pc, #300]	; (204ec <z_impl_k_mutex_lock+0x194>)
   203be:	b19b      	cbz	r3, 203e8 <z_impl_k_mutex_lock+0x90>
   203c0:	68a0      	ldr	r0, [r4, #8]
   203c2:	6891      	ldr	r1, [r2, #8]
   203c4:	4288      	cmp	r0, r1
   203c6:	d027      	beq.n	20418 <z_impl_k_mutex_lock+0xc0>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   203c8:	ea57 0306 	orrs.w	r3, r7, r6
   203cc:	d12c      	bne.n	20428 <z_impl_k_mutex_lock+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   203ce:	4843      	ldr	r0, [pc, #268]	; (204dc <z_impl_k_mutex_lock+0x184>)
   203d0:	f7ff ff86 	bl	202e0 <z_spin_unlock_valid>
   203d4:	b1a0      	cbz	r0, 20400 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   203d6:	f388 8811 	msr	BASEPRI, r8
   203da:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   203de:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   203e2:	b002      	add	sp, #8
   203e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   203e8:	6891      	ldr	r1, [r2, #8]
   203ea:	f991 100e 	ldrsb.w	r1, [r1, #14]
   203ee:	483b      	ldr	r0, [pc, #236]	; (204dc <z_impl_k_mutex_lock+0x184>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   203f0:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   203f2:	3301      	adds	r3, #1
   203f4:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   203f6:	6893      	ldr	r3, [r2, #8]
   203f8:	60a3      	str	r3, [r4, #8]
   203fa:	f7ff ff71 	bl	202e0 <z_spin_unlock_valid>
   203fe:	b968      	cbnz	r0, 2041c <z_impl_k_mutex_lock+0xc4>
   20400:	4a37      	ldr	r2, [pc, #220]	; (204e0 <z_impl_k_mutex_lock+0x188>)
   20402:	493b      	ldr	r1, [pc, #236]	; (204f0 <z_impl_k_mutex_lock+0x198>)
   20404:	4833      	ldr	r0, [pc, #204]	; (204d4 <z_impl_k_mutex_lock+0x17c>)
   20406:	23c3      	movs	r3, #195	; 0xc3
   20408:	f003 ff1c 	bl	24244 <assert_print>
   2040c:	4933      	ldr	r1, [pc, #204]	; (204dc <z_impl_k_mutex_lock+0x184>)
   2040e:	4839      	ldr	r0, [pc, #228]	; (204f4 <z_impl_k_mutex_lock+0x19c>)
   20410:	f003 ff18 	bl	24244 <assert_print>
   20414:	21c3      	movs	r1, #195	; 0xc3
   20416:	e7cb      	b.n	203b0 <z_impl_k_mutex_lock+0x58>
					_current->base.prio :
   20418:	6921      	ldr	r1, [r4, #16]
   2041a:	e7e8      	b.n	203ee <z_impl_k_mutex_lock+0x96>
   2041c:	f388 8811 	msr	BASEPRI, r8
   20420:	f3bf 8f6f 	isb	sy
		return 0;
   20424:	2000      	movs	r0, #0
   20426:	e7dc      	b.n	203e2 <z_impl_k_mutex_lock+0x8a>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   20428:	f991 100e 	ldrsb.w	r1, [r1, #14]
   2042c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   20430:	4299      	cmp	r1, r3
   20432:	bfa8      	it	ge
   20434:	4619      	movge	r1, r3
   20436:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   2043a:	4291      	cmp	r1, r2
   2043c:	bfb8      	it	lt
   2043e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   20440:	428b      	cmp	r3, r1
   20442:	dd02      	ble.n	2044a <z_impl_k_mutex_lock+0xf2>
		resched = adjust_owner_prio(mutex, new_prio);
   20444:	f006 fa77 	bl	26936 <adjust_owner_prio.isra.0>
   20448:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   2044a:	e9cd 7600 	strd	r7, r6, [sp]
   2044e:	4823      	ldr	r0, [pc, #140]	; (204dc <z_impl_k_mutex_lock+0x184>)
   20450:	4622      	mov	r2, r4
   20452:	4641      	mov	r1, r8
   20454:	f001 fc22 	bl	21c9c <z_pend_curr>
	if (got_mutex == 0) {
   20458:	2800      	cmp	r0, #0
   2045a:	d0e3      	beq.n	20424 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   2045c:	f04f 0340 	mov.w	r3, #64	; 0x40
   20460:	f3ef 8611 	mrs	r6, BASEPRI
   20464:	f383 8812 	msr	BASEPRI_MAX, r3
   20468:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2046c:	481b      	ldr	r0, [pc, #108]	; (204dc <z_impl_k_mutex_lock+0x184>)
   2046e:	f7ff ff29 	bl	202c4 <z_spin_lock_valid>
   20472:	2800      	cmp	r0, #0
   20474:	d091      	beq.n	2039a <z_impl_k_mutex_lock+0x42>
	z_spin_lock_set_owner(l);
   20476:	4819      	ldr	r0, [pc, #100]	; (204dc <z_impl_k_mutex_lock+0x184>)
   20478:	f7ff ff42 	bl	20300 <z_spin_lock_set_owner>
	if (likely(mutex->owner != NULL)) {
   2047c:	68a0      	ldr	r0, [r4, #8]
   2047e:	b1c0      	cbz	r0, 204b2 <z_impl_k_mutex_lock+0x15a>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   20480:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   20482:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20484:	429c      	cmp	r4, r3
   20486:	d00a      	beq.n	2049e <z_impl_k_mutex_lock+0x146>
   20488:	b14b      	cbz	r3, 2049e <z_impl_k_mutex_lock+0x146>
   2048a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2048e:	4299      	cmp	r1, r3
   20490:	bfa8      	it	ge
   20492:	4619      	movge	r1, r3
   20494:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   20498:	4299      	cmp	r1, r3
   2049a:	bfb8      	it	lt
   2049c:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   2049e:	f006 fa4a 	bl	26936 <adjust_owner_prio.isra.0>
   204a2:	b130      	cbz	r0, 204b2 <z_impl_k_mutex_lock+0x15a>
		z_reschedule(&lock, key);
   204a4:	480d      	ldr	r0, [pc, #52]	; (204dc <z_impl_k_mutex_lock+0x184>)
   204a6:	4631      	mov	r1, r6
   204a8:	f001 f93c 	bl	21724 <z_reschedule>
	return -EAGAIN;
   204ac:	f06f 000a 	mvn.w	r0, #10
   204b0:	e797      	b.n	203e2 <z_impl_k_mutex_lock+0x8a>
	if (resched) {
   204b2:	2d00      	cmp	r5, #0
   204b4:	d1f6      	bne.n	204a4 <z_impl_k_mutex_lock+0x14c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   204b6:	4809      	ldr	r0, [pc, #36]	; (204dc <z_impl_k_mutex_lock+0x184>)
   204b8:	f7ff ff12 	bl	202e0 <z_spin_unlock_valid>
   204bc:	2800      	cmp	r0, #0
   204be:	d09f      	beq.n	20400 <z_impl_k_mutex_lock+0xa8>
	__asm__ volatile(
   204c0:	f386 8811 	msr	BASEPRI, r6
   204c4:	f3bf 8f6f 	isb	sy
   204c8:	e7f0      	b.n	204ac <z_impl_k_mutex_lock+0x154>
   204ca:	bf00      	nop
   204cc:	0002b1ce 	.word	0x0002b1ce
   204d0:	0002b27b 	.word	0x0002b27b
   204d4:	00027c2a 	.word	0x00027c2a
   204d8:	0002b29d 	.word	0x0002b29d
   204dc:	20002fa0 	.word	0x20002fa0
   204e0:	0002801e 	.word	0x0002801e
   204e4:	00028077 	.word	0x00028077
   204e8:	0002808c 	.word	0x0002808c
   204ec:	20002f78 	.word	0x20002f78
   204f0:	0002804b 	.word	0x0002804b
   204f4:	00028062 	.word	0x00028062

000204f8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   204f8:	b570      	push	{r4, r5, r6, lr}
   204fa:	4604      	mov	r4, r0
   204fc:	f3ef 8605 	mrs	r6, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   20500:	b166      	cbz	r6, 2051c <z_impl_k_mutex_unlock+0x24>
   20502:	4938      	ldr	r1, [pc, #224]	; (205e4 <z_impl_k_mutex_unlock+0xec>)
   20504:	4a38      	ldr	r2, [pc, #224]	; (205e8 <z_impl_k_mutex_unlock+0xf0>)
   20506:	4839      	ldr	r0, [pc, #228]	; (205ec <z_impl_k_mutex_unlock+0xf4>)
   20508:	23cd      	movs	r3, #205	; 0xcd
   2050a:	f003 fe9b 	bl	24244 <assert_print>
   2050e:	4838      	ldr	r0, [pc, #224]	; (205f0 <z_impl_k_mutex_unlock+0xf8>)
   20510:	f003 fe98 	bl	24244 <assert_print>
   20514:	21cd      	movs	r1, #205	; 0xcd
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   20516:	4834      	ldr	r0, [pc, #208]	; (205e8 <z_impl_k_mutex_unlock+0xf0>)
   20518:	f003 fe8d 	bl	24236 <assert_post_action>
	CHECKIF(mutex->owner == NULL) {
   2051c:	6883      	ldr	r3, [r0, #8]
   2051e:	2b00      	cmp	r3, #0
   20520:	d059      	beq.n	205d6 <z_impl_k_mutex_unlock+0xde>
	CHECKIF(mutex->owner != _current) {
   20522:	4a34      	ldr	r2, [pc, #208]	; (205f4 <z_impl_k_mutex_unlock+0xfc>)
   20524:	6892      	ldr	r2, [r2, #8]
   20526:	4293      	cmp	r3, r2
   20528:	d158      	bne.n	205dc <z_impl_k_mutex_unlock+0xe4>
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   2052a:	68c3      	ldr	r3, [r0, #12]
   2052c:	b93b      	cbnz	r3, 2053e <z_impl_k_mutex_unlock+0x46>
   2052e:	4932      	ldr	r1, [pc, #200]	; (205f8 <z_impl_k_mutex_unlock+0x100>)
   20530:	4a2d      	ldr	r2, [pc, #180]	; (205e8 <z_impl_k_mutex_unlock+0xf0>)
   20532:	482e      	ldr	r0, [pc, #184]	; (205ec <z_impl_k_mutex_unlock+0xf4>)
   20534:	23e5      	movs	r3, #229	; 0xe5
   20536:	f003 fe85 	bl	24244 <assert_print>
   2053a:	21e5      	movs	r1, #229	; 0xe5
   2053c:	e7eb      	b.n	20516 <z_impl_k_mutex_unlock+0x1e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   2053e:	2b01      	cmp	r3, #1
   20540:	d003      	beq.n	2054a <z_impl_k_mutex_unlock+0x52>
		mutex->lock_count--;
   20542:	3b01      	subs	r3, #1
   20544:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   20546:	2000      	movs	r0, #0
}
   20548:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   2054a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2054e:	f3ef 8511 	mrs	r5, BASEPRI
   20552:	f383 8812 	msr	BASEPRI_MAX, r3
   20556:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2055a:	4828      	ldr	r0, [pc, #160]	; (205fc <z_impl_k_mutex_unlock+0x104>)
   2055c:	f7ff feb2 	bl	202c4 <z_spin_lock_valid>
   20560:	b960      	cbnz	r0, 2057c <z_impl_k_mutex_unlock+0x84>
   20562:	4a27      	ldr	r2, [pc, #156]	; (20600 <z_impl_k_mutex_unlock+0x108>)
   20564:	4927      	ldr	r1, [pc, #156]	; (20604 <z_impl_k_mutex_unlock+0x10c>)
   20566:	4821      	ldr	r0, [pc, #132]	; (205ec <z_impl_k_mutex_unlock+0xf4>)
   20568:	2394      	movs	r3, #148	; 0x94
   2056a:	f003 fe6b 	bl	24244 <assert_print>
   2056e:	4923      	ldr	r1, [pc, #140]	; (205fc <z_impl_k_mutex_unlock+0x104>)
   20570:	4825      	ldr	r0, [pc, #148]	; (20608 <z_impl_k_mutex_unlock+0x110>)
   20572:	f003 fe67 	bl	24244 <assert_print>
   20576:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20578:	4821      	ldr	r0, [pc, #132]	; (20600 <z_impl_k_mutex_unlock+0x108>)
   2057a:	e7cd      	b.n	20518 <z_impl_k_mutex_unlock+0x20>
	z_spin_lock_set_owner(l);
   2057c:	481f      	ldr	r0, [pc, #124]	; (205fc <z_impl_k_mutex_unlock+0x104>)
   2057e:	f7ff febf 	bl	20300 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   20582:	6921      	ldr	r1, [r4, #16]
   20584:	68a0      	ldr	r0, [r4, #8]
   20586:	f006 f9d6 	bl	26936 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   2058a:	4620      	mov	r0, r4
   2058c:	f001 fe06 	bl	2219c <z_unpend_first_thread>
	mutex->owner = new_owner;
   20590:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   20592:	b150      	cbz	r0, 205aa <z_impl_k_mutex_unlock+0xb2>
		mutex->owner_orig_prio = new_owner->base.prio;
   20594:	f990 200e 	ldrsb.w	r2, [r0, #14]
   20598:	6122      	str	r2, [r4, #16]
   2059a:	67c6      	str	r6, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   2059c:	f001 f834 	bl	21608 <z_ready_thread>
		z_reschedule(&lock, key);
   205a0:	4816      	ldr	r0, [pc, #88]	; (205fc <z_impl_k_mutex_unlock+0x104>)
   205a2:	4629      	mov	r1, r5
   205a4:	f001 f8be 	bl	21724 <z_reschedule>
   205a8:	e7cd      	b.n	20546 <z_impl_k_mutex_unlock+0x4e>
		mutex->lock_count = 0U;
   205aa:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   205ac:	4813      	ldr	r0, [pc, #76]	; (205fc <z_impl_k_mutex_unlock+0x104>)
   205ae:	f7ff fe97 	bl	202e0 <z_spin_unlock_valid>
   205b2:	b958      	cbnz	r0, 205cc <z_impl_k_mutex_unlock+0xd4>
   205b4:	4a12      	ldr	r2, [pc, #72]	; (20600 <z_impl_k_mutex_unlock+0x108>)
   205b6:	4915      	ldr	r1, [pc, #84]	; (2060c <z_impl_k_mutex_unlock+0x114>)
   205b8:	480c      	ldr	r0, [pc, #48]	; (205ec <z_impl_k_mutex_unlock+0xf4>)
   205ba:	23c3      	movs	r3, #195	; 0xc3
   205bc:	f003 fe42 	bl	24244 <assert_print>
   205c0:	490e      	ldr	r1, [pc, #56]	; (205fc <z_impl_k_mutex_unlock+0x104>)
   205c2:	4813      	ldr	r0, [pc, #76]	; (20610 <z_impl_k_mutex_unlock+0x118>)
   205c4:	f003 fe3e 	bl	24244 <assert_print>
   205c8:	21c3      	movs	r1, #195	; 0xc3
   205ca:	e7d5      	b.n	20578 <z_impl_k_mutex_unlock+0x80>
	__asm__ volatile(
   205cc:	f385 8811 	msr	BASEPRI, r5
   205d0:	f3bf 8f6f 	isb	sy
   205d4:	e7b7      	b.n	20546 <z_impl_k_mutex_unlock+0x4e>
		return -EINVAL;
   205d6:	f06f 0015 	mvn.w	r0, #21
   205da:	e7b5      	b.n	20548 <z_impl_k_mutex_unlock+0x50>
		return -EPERM;
   205dc:	f04f 30ff 	mov.w	r0, #4294967295
   205e0:	e7b2      	b.n	20548 <z_impl_k_mutex_unlock+0x50>
   205e2:	bf00      	nop
   205e4:	0002b1ce 	.word	0x0002b1ce
   205e8:	0002b27b 	.word	0x0002b27b
   205ec:	00027c2a 	.word	0x00027c2a
   205f0:	0002b29d 	.word	0x0002b29d
   205f4:	20002f78 	.word	0x20002f78
   205f8:	0002b2c2 	.word	0x0002b2c2
   205fc:	20002fa0 	.word	0x20002fa0
   20600:	0002801e 	.word	0x0002801e
   20604:	00028077 	.word	0x00028077
   20608:	0002808c 	.word	0x0002808c
   2060c:	0002804b 	.word	0x0002804b
   20610:	00028062 	.word	0x00028062

00020614 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   20614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20618:	4604      	mov	r4, r0
   2061a:	f89d a020 	ldrb.w	sl, [sp, #32]
   2061e:	460e      	mov	r6, r1
   20620:	4690      	mov	r8, r2
   20622:	4699      	mov	r9, r3
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   20624:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   20628:	f04f 0340 	mov.w	r3, #64	; 0x40
   2062c:	f3ef 8711 	mrs	r7, BASEPRI
   20630:	f383 8812 	msr	BASEPRI_MAX, r3
   20634:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20638:	4628      	mov	r0, r5
   2063a:	f7ff fe43 	bl	202c4 <z_spin_lock_valid>
   2063e:	b968      	cbnz	r0, 2065c <queue_insert+0x48>
   20640:	4a3b      	ldr	r2, [pc, #236]	; (20730 <queue_insert+0x11c>)
   20642:	493c      	ldr	r1, [pc, #240]	; (20734 <queue_insert+0x120>)
   20644:	483c      	ldr	r0, [pc, #240]	; (20738 <queue_insert+0x124>)
   20646:	2394      	movs	r3, #148	; 0x94
   20648:	f003 fdfc 	bl	24244 <assert_print>
   2064c:	4629      	mov	r1, r5
   2064e:	483b      	ldr	r0, [pc, #236]	; (2073c <queue_insert+0x128>)
   20650:	f003 fdf8 	bl	24244 <assert_print>
   20654:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20656:	4836      	ldr	r0, [pc, #216]	; (20730 <queue_insert+0x11c>)
   20658:	f003 fded 	bl	24236 <assert_post_action>
	z_spin_lock_set_owner(l);
   2065c:	4628      	mov	r0, r5
   2065e:	f7ff fe4f 	bl	20300 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   20662:	f1ba 0f00 	cmp.w	sl, #0
   20666:	d000      	beq.n	2066a <queue_insert+0x56>
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
   20668:	6866      	ldr	r6, [r4, #4]
		prev = sys_sflist_peek_tail(&queue->data_q);
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2066a:	f104 000c 	add.w	r0, r4, #12
   2066e:	f001 fd95 	bl	2219c <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   20672:	b158      	cbz	r0, 2068c <queue_insert+0x78>
   20674:	2300      	movs	r3, #0
   20676:	67c3      	str	r3, [r0, #124]	; 0x7c
   20678:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   2067c:	f000 ffc4 	bl	21608 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   20680:	4628      	mov	r0, r5
   20682:	4639      	mov	r1, r7
   20684:	f001 f84e 	bl	21724 <z_reschedule>
		return 0;
   20688:	2000      	movs	r0, #0
   2068a:	e01c      	b.n	206c6 <queue_insert+0xb2>
	if (alloc) {
   2068c:	f1b9 0f00 	cmp.w	r9, #0
   20690:	d02b      	beq.n	206ea <queue_insert+0xd6>
	return z_thread_aligned_alloc(0, size);
   20692:	2108      	movs	r1, #8
   20694:	f002 ff8e 	bl	235b4 <z_thread_aligned_alloc>
		if (anode == NULL) {
   20698:	b9b8      	cbnz	r0, 206ca <queue_insert+0xb6>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2069a:	4628      	mov	r0, r5
   2069c:	f7ff fe20 	bl	202e0 <z_spin_unlock_valid>
   206a0:	b958      	cbnz	r0, 206ba <queue_insert+0xa6>
   206a2:	4a23      	ldr	r2, [pc, #140]	; (20730 <queue_insert+0x11c>)
   206a4:	4926      	ldr	r1, [pc, #152]	; (20740 <queue_insert+0x12c>)
   206a6:	4824      	ldr	r0, [pc, #144]	; (20738 <queue_insert+0x124>)
   206a8:	23c3      	movs	r3, #195	; 0xc3
   206aa:	f003 fdcb 	bl	24244 <assert_print>
   206ae:	4629      	mov	r1, r5
   206b0:	4824      	ldr	r0, [pc, #144]	; (20744 <queue_insert+0x130>)
   206b2:	f003 fdc7 	bl	24244 <assert_print>
   206b6:	21c3      	movs	r1, #195	; 0xc3
   206b8:	e7cd      	b.n	20656 <queue_insert+0x42>
	__asm__ volatile(
   206ba:	f387 8811 	msr	BASEPRI, r7
   206be:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   206c2:	f06f 000b 	mvn.w	r0, #11

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
}
   206c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   206ca:	2201      	movs	r2, #1
		anode->data = data;
   206cc:	f8c0 8004 	str.w	r8, [r0, #4]
   206d0:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   206d2:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   206d4:	f001 0103 	and.w	r1, r1, #3
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   206d8:	b95e      	cbnz	r6, 206f2 <queue_insert+0xde>
	parent->next_and_flags = cur_flags | (unative_t)child;
   206da:	6822      	ldr	r2, [r4, #0]
   206dc:	430a      	orrs	r2, r1
   206de:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   206e0:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   206e2:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   206e4:	b96a      	cbnz	r2, 20702 <queue_insert+0xee>
	list->tail = node;
   206e6:	6060      	str	r0, [r4, #4]
}
   206e8:	e00b      	b.n	20702 <queue_insert+0xee>
	node->next_and_flags = flags;
   206ea:	f8c8 9000 	str.w	r9, [r8]
}
   206ee:	4640      	mov	r0, r8
   206f0:	e7ef      	b.n	206d2 <queue_insert+0xbe>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   206f2:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   206f4:	2a03      	cmp	r2, #3
   206f6:	d810      	bhi.n	2071a <queue_insert+0x106>
	parent->next_and_flags = cur_flags | (unative_t)child;
   206f8:	6001      	str	r1, [r0, #0]
	return list->tail;
   206fa:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   206fc:	b939      	cbnz	r1, 2070e <queue_insert+0xfa>
	list->head = node;
   206fe:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   20702:	2104      	movs	r1, #4
   20704:	f104 0014 	add.w	r0, r4, #20
   20708:	f006 fad9 	bl	26cbe <z_handle_obj_poll_events>
   2070c:	e7b8      	b.n	20680 <queue_insert+0x6c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2070e:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20710:	f002 0203 	and.w	r2, r2, #3
   20714:	4302      	orrs	r2, r0
   20716:	600a      	str	r2, [r1, #0]
   20718:	e7e5      	b.n	206e6 <queue_insert+0xd2>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2071a:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   2071e:	430a      	orrs	r2, r1
   20720:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20722:	6832      	ldr	r2, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20724:	f002 0203 	and.w	r2, r2, #3
   20728:	ea40 0302 	orr.w	r3, r0, r2
   2072c:	6033      	str	r3, [r6, #0]
}
   2072e:	e7e8      	b.n	20702 <queue_insert+0xee>
   20730:	0002801e 	.word	0x0002801e
   20734:	00028077 	.word	0x00028077
   20738:	00027c2a 	.word	0x00027c2a
   2073c:	0002808c 	.word	0x0002808c
   20740:	0002804b 	.word	0x0002804b
   20744:	00028062 	.word	0x00028062

00020748 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   20748:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2074c:	4606      	mov	r6, r0
   2074e:	4691      	mov	r9, r2
   20750:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   20752:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   20756:	f04f 0340 	mov.w	r3, #64	; 0x40
   2075a:	f3ef 8811 	mrs	r8, BASEPRI
   2075e:	f383 8812 	msr	BASEPRI_MAX, r3
   20762:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20766:	4628      	mov	r0, r5
   20768:	f7ff fdac 	bl	202c4 <z_spin_lock_valid>
   2076c:	b968      	cbnz	r0, 2078a <z_impl_k_queue_get+0x42>
   2076e:	4a24      	ldr	r2, [pc, #144]	; (20800 <z_impl_k_queue_get+0xb8>)
   20770:	4924      	ldr	r1, [pc, #144]	; (20804 <z_impl_k_queue_get+0xbc>)
   20772:	4825      	ldr	r0, [pc, #148]	; (20808 <z_impl_k_queue_get+0xc0>)
   20774:	2394      	movs	r3, #148	; 0x94
   20776:	f003 fd65 	bl	24244 <assert_print>
   2077a:	4629      	mov	r1, r5
   2077c:	4823      	ldr	r0, [pc, #140]	; (2080c <z_impl_k_queue_get+0xc4>)
   2077e:	f003 fd61 	bl	24244 <assert_print>
   20782:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20784:	481e      	ldr	r0, [pc, #120]	; (20800 <z_impl_k_queue_get+0xb8>)
   20786:	f003 fd56 	bl	24236 <assert_post_action>
	z_spin_lock_set_owner(l);
   2078a:	4628      	mov	r0, r5
   2078c:	f7ff fdb8 	bl	20300 <z_spin_lock_set_owner>
	return list->head;
   20790:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   20792:	b1e4      	cbz	r4, 207ce <z_impl_k_queue_get+0x86>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20794:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   20796:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20798:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2079c:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   2079e:	4620      	mov	r0, r4
	list->head = node;
   207a0:	6033      	str	r3, [r6, #0]
	list->tail = node;
   207a2:	bf08      	it	eq
   207a4:	6073      	streq	r3, [r6, #4]
   207a6:	2101      	movs	r1, #1
   207a8:	f006 f8cd 	bl	26946 <z_queue_node_peek>
   207ac:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   207ae:	4628      	mov	r0, r5
   207b0:	f7ff fd96 	bl	202e0 <z_spin_unlock_valid>
   207b4:	b9d8      	cbnz	r0, 207ee <z_impl_k_queue_get+0xa6>
   207b6:	4a12      	ldr	r2, [pc, #72]	; (20800 <z_impl_k_queue_get+0xb8>)
   207b8:	4915      	ldr	r1, [pc, #84]	; (20810 <z_impl_k_queue_get+0xc8>)
   207ba:	4813      	ldr	r0, [pc, #76]	; (20808 <z_impl_k_queue_get+0xc0>)
   207bc:	23c3      	movs	r3, #195	; 0xc3
   207be:	f003 fd41 	bl	24244 <assert_print>
   207c2:	4629      	mov	r1, r5
   207c4:	4813      	ldr	r0, [pc, #76]	; (20814 <z_impl_k_queue_get+0xcc>)
   207c6:	f003 fd3d 	bl	24244 <assert_print>
   207ca:	21c3      	movs	r1, #195	; 0xc3
   207cc:	e7da      	b.n	20784 <z_impl_k_queue_get+0x3c>
		return data;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, get, queue, timeout);

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   207ce:	ea59 0307 	orrs.w	r3, r9, r7
   207d2:	d0ec      	beq.n	207ae <z_impl_k_queue_get+0x66>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout, NULL);

		return NULL;
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   207d4:	e9cd 9700 	strd	r9, r7, [sp]
   207d8:	f106 020c 	add.w	r2, r6, #12
   207dc:	4641      	mov	r1, r8
   207de:	4628      	mov	r0, r5
   207e0:	f001 fa5c 	bl	21c9c <z_pend_curr>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
   207e4:	b938      	cbnz	r0, 207f6 <z_impl_k_queue_get+0xae>
   207e6:	4b0c      	ldr	r3, [pc, #48]	; (20818 <z_impl_k_queue_get+0xd0>)
   207e8:	689b      	ldr	r3, [r3, #8]
   207ea:	695c      	ldr	r4, [r3, #20]
   207ec:	e003      	b.n	207f6 <z_impl_k_queue_get+0xae>
	__asm__ volatile(
   207ee:	f388 8811 	msr	BASEPRI, r8
   207f2:	f3bf 8f6f 	isb	sy
}
   207f6:	4620      	mov	r0, r4
   207f8:	b003      	add	sp, #12
   207fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   207fe:	bf00      	nop
   20800:	0002801e 	.word	0x0002801e
   20804:	00028077 	.word	0x00028077
   20808:	00027c2a 	.word	0x00027c2a
   2080c:	0002808c 	.word	0x0002808c
   20810:	0002804b 	.word	0x0002804b
   20814:	00028062 	.word	0x00028062
   20818:	20002f78 	.word	0x20002f78

0002081c <z_impl_k_sem_give>:
	return false;
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   2081c:	b538      	push	{r3, r4, r5, lr}
   2081e:	4604      	mov	r4, r0
	__asm__ volatile(
   20820:	f04f 0340 	mov.w	r3, #64	; 0x40
   20824:	f3ef 8511 	mrs	r5, BASEPRI
   20828:	f383 8812 	msr	BASEPRI_MAX, r3
   2082c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20830:	4817      	ldr	r0, [pc, #92]	; (20890 <z_impl_k_sem_give+0x74>)
   20832:	f7ff fd47 	bl	202c4 <z_spin_lock_valid>
   20836:	b968      	cbnz	r0, 20854 <z_impl_k_sem_give+0x38>
   20838:	4a16      	ldr	r2, [pc, #88]	; (20894 <z_impl_k_sem_give+0x78>)
   2083a:	4917      	ldr	r1, [pc, #92]	; (20898 <z_impl_k_sem_give+0x7c>)
   2083c:	4817      	ldr	r0, [pc, #92]	; (2089c <z_impl_k_sem_give+0x80>)
   2083e:	2394      	movs	r3, #148	; 0x94
   20840:	f003 fd00 	bl	24244 <assert_print>
   20844:	4912      	ldr	r1, [pc, #72]	; (20890 <z_impl_k_sem_give+0x74>)
   20846:	4816      	ldr	r0, [pc, #88]	; (208a0 <z_impl_k_sem_give+0x84>)
   20848:	f003 fcfc 	bl	24244 <assert_print>
   2084c:	4811      	ldr	r0, [pc, #68]	; (20894 <z_impl_k_sem_give+0x78>)
   2084e:	2194      	movs	r1, #148	; 0x94
   20850:	f003 fcf1 	bl	24236 <assert_post_action>
	z_spin_lock_set_owner(l);
   20854:	480e      	ldr	r0, [pc, #56]	; (20890 <z_impl_k_sem_give+0x74>)
   20856:	f7ff fd53 	bl	20300 <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool resched = true;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   2085a:	4620      	mov	r0, r4
   2085c:	f001 fc9e 	bl	2219c <z_unpend_first_thread>

	if (thread != NULL) {
   20860:	b148      	cbz	r0, 20876 <z_impl_k_sem_give+0x5a>
   20862:	2200      	movs	r2, #0
   20864:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   20866:	f000 fecf 	bl	21608 <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		resched = handle_poll_events(sem);
	}

	if (resched) {
		z_reschedule(&lock, key);
   2086a:	4629      	mov	r1, r5
   2086c:	4808      	ldr	r0, [pc, #32]	; (20890 <z_impl_k_sem_give+0x74>)
	} else {
		k_spin_unlock(&lock, key);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   2086e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
   20872:	f000 bf57 	b.w	21724 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   20876:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   2087a:	429a      	cmp	r2, r3
   2087c:	bf18      	it	ne
   2087e:	3301      	addne	r3, #1
   20880:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   20882:	2102      	movs	r1, #2
   20884:	f104 0010 	add.w	r0, r4, #16
   20888:	f006 fa19 	bl	26cbe <z_handle_obj_poll_events>
	return true;
   2088c:	e7ed      	b.n	2086a <z_impl_k_sem_give+0x4e>
   2088e:	bf00      	nop
   20890:	20002fa4 	.word	0x20002fa4
   20894:	0002801e 	.word	0x0002801e
   20898:	00028077 	.word	0x00028077
   2089c:	00027c2a 	.word	0x00027c2a
   208a0:	0002808c 	.word	0x0002808c

000208a4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   208a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   208a6:	4604      	mov	r4, r0
   208a8:	4616      	mov	r6, r2
   208aa:	461d      	mov	r5, r3
   208ac:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   208b0:	b17b      	cbz	r3, 208d2 <z_impl_k_sem_take+0x2e>
   208b2:	ea52 0305 	orrs.w	r3, r2, r5
   208b6:	d00c      	beq.n	208d2 <z_impl_k_sem_take+0x2e>
   208b8:	492d      	ldr	r1, [pc, #180]	; (20970 <z_impl_k_sem_take+0xcc>)
   208ba:	4a2e      	ldr	r2, [pc, #184]	; (20974 <z_impl_k_sem_take+0xd0>)
   208bc:	482e      	ldr	r0, [pc, #184]	; (20978 <z_impl_k_sem_take+0xd4>)
   208be:	2380      	movs	r3, #128	; 0x80
   208c0:	f003 fcc0 	bl	24244 <assert_print>
   208c4:	482d      	ldr	r0, [pc, #180]	; (2097c <z_impl_k_sem_take+0xd8>)
   208c6:	f003 fcbd 	bl	24244 <assert_print>
   208ca:	482a      	ldr	r0, [pc, #168]	; (20974 <z_impl_k_sem_take+0xd0>)
   208cc:	2180      	movs	r1, #128	; 0x80
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   208ce:	f003 fcb2 	bl	24236 <assert_post_action>
   208d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   208d6:	f3ef 8711 	mrs	r7, BASEPRI
   208da:	f383 8812 	msr	BASEPRI_MAX, r3
   208de:	f3bf 8f6f 	isb	sy
   208e2:	4827      	ldr	r0, [pc, #156]	; (20980 <z_impl_k_sem_take+0xdc>)
   208e4:	f7ff fcee 	bl	202c4 <z_spin_lock_valid>
   208e8:	b960      	cbnz	r0, 20904 <z_impl_k_sem_take+0x60>
   208ea:	4a26      	ldr	r2, [pc, #152]	; (20984 <z_impl_k_sem_take+0xe0>)
   208ec:	4926      	ldr	r1, [pc, #152]	; (20988 <z_impl_k_sem_take+0xe4>)
   208ee:	4822      	ldr	r0, [pc, #136]	; (20978 <z_impl_k_sem_take+0xd4>)
   208f0:	2394      	movs	r3, #148	; 0x94
   208f2:	f003 fca7 	bl	24244 <assert_print>
   208f6:	4922      	ldr	r1, [pc, #136]	; (20980 <z_impl_k_sem_take+0xdc>)
   208f8:	4824      	ldr	r0, [pc, #144]	; (2098c <z_impl_k_sem_take+0xe8>)
   208fa:	f003 fca3 	bl	24244 <assert_print>
   208fe:	2194      	movs	r1, #148	; 0x94
   20900:	4820      	ldr	r0, [pc, #128]	; (20984 <z_impl_k_sem_take+0xe0>)
   20902:	e7e4      	b.n	208ce <z_impl_k_sem_take+0x2a>
	z_spin_lock_set_owner(l);
   20904:	481e      	ldr	r0, [pc, #120]	; (20980 <z_impl_k_sem_take+0xdc>)
   20906:	f7ff fcfb 	bl	20300 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   2090a:	68a3      	ldr	r3, [r4, #8]
   2090c:	b1c3      	cbz	r3, 20940 <z_impl_k_sem_take+0x9c>
		sem->count--;
   2090e:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20910:	481b      	ldr	r0, [pc, #108]	; (20980 <z_impl_k_sem_take+0xdc>)
   20912:	60a3      	str	r3, [r4, #8]
   20914:	f7ff fce4 	bl	202e0 <z_spin_unlock_valid>
   20918:	b958      	cbnz	r0, 20932 <z_impl_k_sem_take+0x8e>
   2091a:	4a1a      	ldr	r2, [pc, #104]	; (20984 <z_impl_k_sem_take+0xe0>)
   2091c:	491c      	ldr	r1, [pc, #112]	; (20990 <z_impl_k_sem_take+0xec>)
   2091e:	4816      	ldr	r0, [pc, #88]	; (20978 <z_impl_k_sem_take+0xd4>)
   20920:	23c3      	movs	r3, #195	; 0xc3
   20922:	f003 fc8f 	bl	24244 <assert_print>
   20926:	4916      	ldr	r1, [pc, #88]	; (20980 <z_impl_k_sem_take+0xdc>)
   20928:	481a      	ldr	r0, [pc, #104]	; (20994 <z_impl_k_sem_take+0xf0>)
   2092a:	f003 fc8b 	bl	24244 <assert_print>
   2092e:	21c3      	movs	r1, #195	; 0xc3
   20930:	e7e6      	b.n	20900 <z_impl_k_sem_take+0x5c>
	__asm__ volatile(
   20932:	f387 8811 	msr	BASEPRI, r7
   20936:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   2093a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   2093c:	b003      	add	sp, #12
   2093e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20940:	ea56 0305 	orrs.w	r3, r6, r5
   20944:	d10b      	bne.n	2095e <z_impl_k_sem_take+0xba>
   20946:	480e      	ldr	r0, [pc, #56]	; (20980 <z_impl_k_sem_take+0xdc>)
   20948:	f7ff fcca 	bl	202e0 <z_spin_unlock_valid>
   2094c:	2800      	cmp	r0, #0
   2094e:	d0e4      	beq.n	2091a <z_impl_k_sem_take+0x76>
   20950:	f387 8811 	msr	BASEPRI, r7
   20954:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   20958:	f06f 000f 	mvn.w	r0, #15
   2095c:	e7ee      	b.n	2093c <z_impl_k_sem_take+0x98>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   2095e:	e9cd 6500 	strd	r6, r5, [sp]
   20962:	4622      	mov	r2, r4
   20964:	4639      	mov	r1, r7
   20966:	4806      	ldr	r0, [pc, #24]	; (20980 <z_impl_k_sem_take+0xdc>)
   20968:	f001 f998 	bl	21c9c <z_pend_curr>
	return ret;
   2096c:	e7e6      	b.n	2093c <z_impl_k_sem_take+0x98>
   2096e:	bf00      	nop
   20970:	0002b2f9 	.word	0x0002b2f9
   20974:	0002b2d9 	.word	0x0002b2d9
   20978:	00027c2a 	.word	0x00027c2a
   2097c:	0002a220 	.word	0x0002a220
   20980:	20002fa4 	.word	0x20002fa4
   20984:	0002801e 	.word	0x0002801e
   20988:	00028077 	.word	0x00028077
   2098c:	0002808c 	.word	0x0002808c
   20990:	0002804b 	.word	0x0002804b
   20994:	00028062 	.word	0x00028062

00020998 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
   20998:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
   2099a:	4b09      	ldr	r3, [pc, #36]	; (209c0 <k_sys_work_q_init+0x28>)
   2099c:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   2099e:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   209a0:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   209a2:	9300      	str	r3, [sp, #0]
   209a4:	4907      	ldr	r1, [pc, #28]	; (209c4 <k_sys_work_q_init+0x2c>)
   209a6:	4808      	ldr	r0, [pc, #32]	; (209c8 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   209a8:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   209ac:	f04f 33ff 	mov.w	r3, #4294967295
   209b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
   209b4:	f000 fac0 	bl	20f38 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   209b8:	4620      	mov	r0, r4
   209ba:	b004      	add	sp, #16
   209bc:	bd10      	pop	{r4, pc}
   209be:	bf00      	nop
   209c0:	0002b347 	.word	0x0002b347
   209c4:	20007600 	.word	0x20007600
   209c8:	20002ae8 	.word	0x20002ae8

000209cc <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   209cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   209d0:	4e6e      	ldr	r6, [pc, #440]	; (20b8c <work_queue_main+0x1c0>)
	return list->head;
   209d2:	4f6f      	ldr	r7, [pc, #444]	; (20b90 <work_queue_main+0x1c4>)
   209d4:	b085      	sub	sp, #20
   209d6:	4604      	mov	r4, r0
	__asm__ volatile(
   209d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   209dc:	f3ef 8811 	mrs	r8, BASEPRI
   209e0:	f383 8812 	msr	BASEPRI_MAX, r3
   209e4:	f3bf 8f6f 	isb	sy
   209e8:	4630      	mov	r0, r6
   209ea:	f7ff fc6b 	bl	202c4 <z_spin_lock_valid>
   209ee:	b968      	cbnz	r0, 20a0c <work_queue_main+0x40>
   209f0:	4a68      	ldr	r2, [pc, #416]	; (20b94 <work_queue_main+0x1c8>)
   209f2:	4969      	ldr	r1, [pc, #420]	; (20b98 <work_queue_main+0x1cc>)
   209f4:	4869      	ldr	r0, [pc, #420]	; (20b9c <work_queue_main+0x1d0>)
   209f6:	2394      	movs	r3, #148	; 0x94
   209f8:	f003 fc24 	bl	24244 <assert_print>
   209fc:	4963      	ldr	r1, [pc, #396]	; (20b8c <work_queue_main+0x1c0>)
   209fe:	4868      	ldr	r0, [pc, #416]	; (20ba0 <work_queue_main+0x1d4>)
   20a00:	f003 fc20 	bl	24244 <assert_print>
   20a04:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20a06:	4863      	ldr	r0, [pc, #396]	; (20b94 <work_queue_main+0x1c8>)
   20a08:	f003 fc15 	bl	24236 <assert_post_action>
	z_spin_lock_set_owner(l);
   20a0c:	4630      	mov	r0, r6
   20a0e:	f7ff fc77 	bl	20300 <z_spin_lock_set_owner>
   20a12:	f8d4 50c8 	ldr.w	r5, [r4, #200]	; 0xc8
Z_GENLIST_GET(slist, snode)
   20a16:	b9a5      	cbnz	r5, 20a42 <work_queue_main+0x76>
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   20a18:	2102      	movs	r1, #2
   20a1a:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   20a1e:	f005 ffd4 	bl	269ca <flag_test_and_clear>
   20a22:	bba8      	cbnz	r0, 20a90 <work_queue_main+0xc4>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   20a24:	2300      	movs	r3, #0
   20a26:	9302      	str	r3, [sp, #8]
   20a28:	f04f 32ff 	mov.w	r2, #4294967295
   20a2c:	f04f 33ff 	mov.w	r3, #4294967295
   20a30:	e9cd 2300 	strd	r2, r3, [sp]
   20a34:	4641      	mov	r1, r8
   20a36:	f104 02d0 	add.w	r2, r4, #208	; 0xd0
   20a3a:	4630      	mov	r0, r6
   20a3c:	f001 fea0 	bl	22780 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   20a40:	e7ca      	b.n	209d8 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20a42:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
	return node->next;
   20a46:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   20a48:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   20a4c:	4295      	cmp	r5, r2
	list->tail = node;
   20a4e:	bf08      	it	eq
   20a50:	f8c4 30cc 	streq.w	r3, [r4, #204]	; 0xcc
	*flagp |= BIT(bit);
   20a54:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
   20a58:	f043 0302 	orr.w	r3, r3, #2
   20a5c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	*flagp &= ~BIT(bit);
   20a60:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   20a62:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   20a66:	f023 0304 	bic.w	r3, r3, #4
   20a6a:	f043 0301 	orr.w	r3, r3, #1
   20a6e:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20a70:	4630      	mov	r0, r6
   20a72:	f7ff fc35 	bl	202e0 <z_spin_unlock_valid>
   20a76:	b9a8      	cbnz	r0, 20aa4 <work_queue_main+0xd8>
   20a78:	4a46      	ldr	r2, [pc, #280]	; (20b94 <work_queue_main+0x1c8>)
   20a7a:	494a      	ldr	r1, [pc, #296]	; (20ba4 <work_queue_main+0x1d8>)
   20a7c:	4847      	ldr	r0, [pc, #284]	; (20b9c <work_queue_main+0x1d0>)
   20a7e:	23c3      	movs	r3, #195	; 0xc3
   20a80:	f003 fbe0 	bl	24244 <assert_print>
   20a84:	4941      	ldr	r1, [pc, #260]	; (20b8c <work_queue_main+0x1c0>)
   20a86:	4848      	ldr	r0, [pc, #288]	; (20ba8 <work_queue_main+0x1dc>)
   20a88:	f003 fbdc 	bl	24244 <assert_print>
   20a8c:	21c3      	movs	r1, #195	; 0xc3
   20a8e:	e7ba      	b.n	20a06 <work_queue_main+0x3a>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   20a90:	f104 05d8 	add.w	r5, r4, #216	; 0xd8
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   20a94:	2200      	movs	r2, #0
   20a96:	2101      	movs	r1, #1
   20a98:	4628      	mov	r0, r5
   20a9a:	f001 fe13 	bl	226c4 <z_sched_wake>
   20a9e:	2800      	cmp	r0, #0
   20aa0:	d1f8      	bne.n	20a94 <work_queue_main+0xc8>
   20aa2:	e7bf      	b.n	20a24 <work_queue_main+0x58>
	__asm__ volatile(
   20aa4:	f388 8811 	msr	BASEPRI, r8
   20aa8:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   20aac:	f1b9 0f00 	cmp.w	r9, #0
   20ab0:	d10a      	bne.n	20ac8 <work_queue_main+0xfc>
   20ab2:	493e      	ldr	r1, [pc, #248]	; (20bac <work_queue_main+0x1e0>)
   20ab4:	4839      	ldr	r0, [pc, #228]	; (20b9c <work_queue_main+0x1d0>)
   20ab6:	4a3e      	ldr	r2, [pc, #248]	; (20bb0 <work_queue_main+0x1e4>)
   20ab8:	f240 239b 	movw	r3, #667	; 0x29b
   20abc:	f003 fbc2 	bl	24244 <assert_print>
   20ac0:	483b      	ldr	r0, [pc, #236]	; (20bb0 <work_queue_main+0x1e4>)
   20ac2:	f240 219b 	movw	r1, #667	; 0x29b
   20ac6:	e79f      	b.n	20a08 <work_queue_main+0x3c>
		handler(work);
   20ac8:	4628      	mov	r0, r5
   20aca:	47c8      	blx	r9
	__asm__ volatile(
   20acc:	f04f 0340 	mov.w	r3, #64	; 0x40
   20ad0:	f3ef 8a11 	mrs	sl, BASEPRI
   20ad4:	f383 8812 	msr	BASEPRI_MAX, r3
   20ad8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20adc:	4630      	mov	r0, r6
   20ade:	f7ff fbf1 	bl	202c4 <z_spin_lock_valid>
   20ae2:	2800      	cmp	r0, #0
   20ae4:	d084      	beq.n	209f0 <work_queue_main+0x24>
	z_spin_lock_set_owner(l);
   20ae6:	4630      	mov	r0, r6
   20ae8:	f7ff fc0a 	bl	20300 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   20aec:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   20aee:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   20af0:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   20af4:	d417      	bmi.n	20b26 <work_queue_main+0x15a>
	*flagp &= ~BIT(bit);
   20af6:	60ea      	str	r2, [r5, #12]
   20af8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
   20afc:	f023 0302 	bic.w	r3, r3, #2
   20b00:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20b04:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
   20b06:	f3c3 2500 	ubfx	r5, r3, #8, #1
   20b0a:	f7ff fbe9 	bl	202e0 <z_spin_unlock_valid>
   20b0e:	2800      	cmp	r0, #0
   20b10:	d0b2      	beq.n	20a78 <work_queue_main+0xac>
	__asm__ volatile(
   20b12:	f38a 8811 	msr	BASEPRI, sl
   20b16:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   20b1a:	2d00      	cmp	r5, #0
   20b1c:	f47f af5c 	bne.w	209d8 <work_queue_main+0xc>
	z_impl_k_yield();
   20b20:	f001 fb94 	bl	2224c <z_impl_k_yield>
}
   20b24:	e758      	b.n	209d8 <work_queue_main+0xc>
	return list->head;
   20b26:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   20b28:	f023 0303 	bic.w	r3, r3, #3
   20b2c:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   20b2e:	2800      	cmp	r0, #0
   20b30:	d0e2      	beq.n	20af8 <work_queue_main+0x12c>
	return node->next;
   20b32:	f04f 0800 	mov.w	r8, #0
   20b36:	f8d0 9000 	ldr.w	r9, [r0]
	parent->next = child;
   20b3a:	46c3      	mov	fp, r8
   20b3c:	2800      	cmp	r0, #0
   20b3e:	d0db      	beq.n	20af8 <work_queue_main+0x12c>
		if (wc->work == work) {
   20b40:	6843      	ldr	r3, [r0, #4]
   20b42:	429d      	cmp	r5, r3
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   20b44:	4602      	mov	r2, r0
		if (wc->work == work) {
   20b46:	d10d      	bne.n	20b64 <work_queue_main+0x198>
	return node->next;
   20b48:	6802      	ldr	r2, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   20b4a:	f1b8 0f00 	cmp.w	r8, #0
   20b4e:	d112      	bne.n	20b76 <work_queue_main+0x1aa>
   20b50:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   20b52:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   20b54:	4283      	cmp	r3, r0
   20b56:	d100      	bne.n	20b5a <work_queue_main+0x18e>
	list->tail = node;
   20b58:	607a      	str	r2, [r7, #4]
	parent->next = child;
   20b5a:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   20b5e:	f7ff fe5d 	bl	2081c <z_impl_k_sem_give>
}
   20b62:	4642      	mov	r2, r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   20b64:	f1b9 0f00 	cmp.w	r9, #0
   20b68:	d00d      	beq.n	20b86 <work_queue_main+0x1ba>
	return node->next;
   20b6a:	f8d9 3000 	ldr.w	r3, [r9]
   20b6e:	4648      	mov	r0, r9
   20b70:	4690      	mov	r8, r2
   20b72:	4699      	mov	r9, r3
   20b74:	e7e2      	b.n	20b3c <work_queue_main+0x170>
	parent->next = child;
   20b76:	f8c8 2000 	str.w	r2, [r8]
Z_GENLIST_REMOVE(slist, snode)
   20b7a:	687b      	ldr	r3, [r7, #4]
   20b7c:	4283      	cmp	r3, r0
	list->tail = node;
   20b7e:	bf08      	it	eq
   20b80:	f8c7 8004 	streq.w	r8, [r7, #4]
}
   20b84:	e7e9      	b.n	20b5a <work_queue_main+0x18e>
   20b86:	464b      	mov	r3, r9
   20b88:	e7f1      	b.n	20b6e <work_queue_main+0x1a2>
   20b8a:	bf00      	nop
   20b8c:	20002fb0 	.word	0x20002fb0
   20b90:	20002fa8 	.word	0x20002fa8
   20b94:	0002801e 	.word	0x0002801e
   20b98:	00028077 	.word	0x00028077
   20b9c:	00027c2a 	.word	0x00027c2a
   20ba0:	0002808c 	.word	0x0002808c
   20ba4:	0002804b 	.word	0x0002804b
   20ba8:	00028062 	.word	0x00028062
   20bac:	0002b371 	.word	0x0002b371
   20bb0:	0002b350 	.word	0x0002b350

00020bb4 <cancel_sync_locked>:
{
   20bb4:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   20bb6:	68c3      	ldr	r3, [r0, #12]
   20bb8:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   20bbc:	079b      	lsls	r3, r3, #30
{
   20bbe:	4605      	mov	r5, r0
   20bc0:	460c      	mov	r4, r1
	if (ret) {
   20bc2:	d50d      	bpl.n	20be0 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   20bc4:	2201      	movs	r2, #1
   20bc6:	2100      	movs	r1, #0
   20bc8:	f104 0008 	add.w	r0, r4, #8
   20bcc:	f005 feed 	bl	269aa <z_impl_k_sem_init>
	parent->next = child;
   20bd0:	2300      	movs	r3, #0
   20bd2:	6023      	str	r3, [r4, #0]
	return list->tail;
   20bd4:	4b05      	ldr	r3, [pc, #20]	; (20bec <cancel_sync_locked+0x38>)
	canceler->work = work;
   20bd6:	6065      	str	r5, [r4, #4]
   20bd8:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   20bda:	b91a      	cbnz	r2, 20be4 <cancel_sync_locked+0x30>
	list->head = node;
   20bdc:	e9c3 4400 	strd	r4, r4, [r3]
}
   20be0:	4630      	mov	r0, r6
   20be2:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   20be4:	6014      	str	r4, [r2, #0]
	list->tail = node;
   20be6:	605c      	str	r4, [r3, #4]
}
   20be8:	e7fa      	b.n	20be0 <cancel_sync_locked+0x2c>
   20bea:	bf00      	nop
   20bec:	20002fa8 	.word	0x20002fa8

00020bf0 <submit_to_queue_locked>:
{
   20bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   20bf2:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   20bf4:	079a      	lsls	r2, r3, #30
{
   20bf6:	4604      	mov	r4, r0
   20bf8:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   20bfa:	f3c3 0640 	ubfx	r6, r3, #1, #1
   20bfe:	d439      	bmi.n	20c74 <submit_to_queue_locked+0x84>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   20c00:	075b      	lsls	r3, r3, #29
   20c02:	d425      	bmi.n	20c50 <submit_to_queue_locked+0x60>
		if (*queuep == NULL) {
   20c04:	680b      	ldr	r3, [r1, #0]
   20c06:	b90b      	cbnz	r3, 20c0c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   20c08:	6883      	ldr	r3, [r0, #8]
   20c0a:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   20c0c:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   20c0e:	07dd      	lsls	r5, r3, #31
   20c10:	d521      	bpl.n	20c56 <submit_to_queue_locked+0x66>
			__ASSERT_NO_MSG(work->queue != NULL);
   20c12:	68a3      	ldr	r3, [r4, #8]
   20c14:	b95b      	cbnz	r3, 20c2e <submit_to_queue_locked+0x3e>
   20c16:	4928      	ldr	r1, [pc, #160]	; (20cb8 <submit_to_queue_locked+0xc8>)
   20c18:	4828      	ldr	r0, [pc, #160]	; (20cbc <submit_to_queue_locked+0xcc>)
   20c1a:	4a29      	ldr	r2, [pc, #164]	; (20cc0 <submit_to_queue_locked+0xd0>)
   20c1c:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   20c20:	f003 fb10 	bl	24244 <assert_print>
   20c24:	4826      	ldr	r0, [pc, #152]	; (20cc0 <submit_to_queue_locked+0xd0>)
   20c26:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   20c2a:	f003 fb04 	bl	24236 <assert_post_action>
			*queuep = work->queue;
   20c2e:	603b      	str	r3, [r7, #0]
			ret = 2;
   20c30:	2602      	movs	r6, #2
		int rc = queue_submit_locked(*queuep, work);
   20c32:	683d      	ldr	r5, [r7, #0]
	if (queue == NULL) {
   20c34:	2d00      	cmp	r5, #0
   20c36:	d03c      	beq.n	20cb2 <submit_to_queue_locked+0xc2>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   20c38:	4b22      	ldr	r3, [pc, #136]	; (20cc4 <submit_to_queue_locked+0xd4>)
   20c3a:	689b      	ldr	r3, [r3, #8]
   20c3c:	42ab      	cmp	r3, r5
   20c3e:	d00c      	beq.n	20c5a <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   20c40:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   20c44:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   20c46:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   20c4a:	d416      	bmi.n	20c7a <submit_to_queue_locked+0x8a>
		ret = -EBUSY;
   20c4c:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   20c50:	2300      	movs	r3, #0
   20c52:	603b      	str	r3, [r7, #0]
	return ret;
   20c54:	e027      	b.n	20ca6 <submit_to_queue_locked+0xb6>
		ret = 1;
   20c56:	2601      	movs	r6, #1
   20c58:	e7eb      	b.n	20c32 <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   20c5a:	f005 fe5f 	bl	2691c <k_is_in_isr>
   20c5e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
   20c62:	2800      	cmp	r0, #0
   20c64:	d1ee      	bne.n	20c44 <submit_to_queue_locked+0x54>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   20c66:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   20c68:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   20c6c:	d5ee      	bpl.n	20c4c <submit_to_queue_locked+0x5c>
	} else if (plugged && !draining) {
   20c6e:	b152      	cbz	r2, 20c86 <submit_to_queue_locked+0x96>
   20c70:	075b      	lsls	r3, r3, #29
   20c72:	d408      	bmi.n	20c86 <submit_to_queue_locked+0x96>
		ret = -EBUSY;
   20c74:	f06f 060f 	mvn.w	r6, #15
   20c78:	e7ea      	b.n	20c50 <submit_to_queue_locked+0x60>
	} else if (draining && !chained) {
   20c7a:	2a00      	cmp	r2, #0
   20c7c:	d1fa      	bne.n	20c74 <submit_to_queue_locked+0x84>
	return (*flagp & BIT(bit)) != 0U;
   20c7e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   20c82:	2b00      	cmp	r3, #0
   20c84:	d1f6      	bne.n	20c74 <submit_to_queue_locked+0x84>
	parent->next = child;
   20c86:	2300      	movs	r3, #0
   20c88:	6023      	str	r3, [r4, #0]
	return list->tail;
   20c8a:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
Z_GENLIST_APPEND(slist, snode)
   20c8e:	b963      	cbnz	r3, 20caa <submit_to_queue_locked+0xba>
	list->head = node;
   20c90:	e9c5 4432 	strd	r4, r4, [r5, #200]	; 0xc8
		(void)notify_queue_locked(queue);
   20c94:	4628      	mov	r0, r5
   20c96:	f005 feb2 	bl	269fe <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   20c9a:	68e3      	ldr	r3, [r4, #12]
   20c9c:	f043 0304 	orr.w	r3, r3, #4
   20ca0:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   20ca2:	683b      	ldr	r3, [r7, #0]
   20ca4:	60a3      	str	r3, [r4, #8]
}
   20ca6:	4630      	mov	r0, r6
   20ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   20caa:	601c      	str	r4, [r3, #0]
	list->tail = node;
   20cac:	f8c5 40cc 	str.w	r4, [r5, #204]	; 0xcc
}
   20cb0:	e7f0      	b.n	20c94 <submit_to_queue_locked+0xa4>
		return -EINVAL;
   20cb2:	f06f 0615 	mvn.w	r6, #21
   20cb6:	e7cb      	b.n	20c50 <submit_to_queue_locked+0x60>
   20cb8:	0002b388 	.word	0x0002b388
   20cbc:	00027c2a 	.word	0x00027c2a
   20cc0:	0002b350 	.word	0x0002b350
   20cc4:	20002f78 	.word	0x20002f78

00020cc8 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   20cc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   20cca:	4604      	mov	r4, r0
	__asm__ volatile(
   20ccc:	f04f 0340 	mov.w	r3, #64	; 0x40
   20cd0:	f3ef 8511 	mrs	r5, BASEPRI
   20cd4:	f383 8812 	msr	BASEPRI_MAX, r3
   20cd8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20cdc:	481c      	ldr	r0, [pc, #112]	; (20d50 <work_timeout+0x88>)
   20cde:	f7ff faf1 	bl	202c4 <z_spin_lock_valid>
   20ce2:	b968      	cbnz	r0, 20d00 <work_timeout+0x38>
   20ce4:	4a1b      	ldr	r2, [pc, #108]	; (20d54 <work_timeout+0x8c>)
   20ce6:	491c      	ldr	r1, [pc, #112]	; (20d58 <work_timeout+0x90>)
   20ce8:	481c      	ldr	r0, [pc, #112]	; (20d5c <work_timeout+0x94>)
   20cea:	2394      	movs	r3, #148	; 0x94
   20cec:	f003 faaa 	bl	24244 <assert_print>
   20cf0:	4917      	ldr	r1, [pc, #92]	; (20d50 <work_timeout+0x88>)
   20cf2:	481b      	ldr	r0, [pc, #108]	; (20d60 <work_timeout+0x98>)
   20cf4:	f003 faa6 	bl	24244 <assert_print>
   20cf8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20cfa:	4816      	ldr	r0, [pc, #88]	; (20d54 <work_timeout+0x8c>)
   20cfc:	f003 fa9b 	bl	24236 <assert_post_action>
	z_spin_lock_set_owner(l);
   20d00:	4813      	ldr	r0, [pc, #76]	; (20d50 <work_timeout+0x88>)
   20d02:	f7ff fafd 	bl	20300 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   20d06:	2300      	movs	r3, #0
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   20d08:	2103      	movs	r1, #3
   20d0a:	1f20      	subs	r0, r4, #4
	struct k_work_q *queue = NULL;
   20d0c:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   20d0e:	f1a4 0610 	sub.w	r6, r4, #16
   20d12:	f005 fe5a 	bl	269ca <flag_test_and_clear>
   20d16:	b128      	cbz	r0, 20d24 <work_timeout+0x5c>
		queue = dw->queue;
   20d18:	69a3      	ldr	r3, [r4, #24]
   20d1a:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   20d1c:	a901      	add	r1, sp, #4
   20d1e:	4630      	mov	r0, r6
   20d20:	f7ff ff66 	bl	20bf0 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20d24:	480a      	ldr	r0, [pc, #40]	; (20d50 <work_timeout+0x88>)
   20d26:	f7ff fadb 	bl	202e0 <z_spin_unlock_valid>
   20d2a:	b958      	cbnz	r0, 20d44 <work_timeout+0x7c>
   20d2c:	4a09      	ldr	r2, [pc, #36]	; (20d54 <work_timeout+0x8c>)
   20d2e:	490d      	ldr	r1, [pc, #52]	; (20d64 <work_timeout+0x9c>)
   20d30:	480a      	ldr	r0, [pc, #40]	; (20d5c <work_timeout+0x94>)
   20d32:	23c3      	movs	r3, #195	; 0xc3
   20d34:	f003 fa86 	bl	24244 <assert_print>
   20d38:	4905      	ldr	r1, [pc, #20]	; (20d50 <work_timeout+0x88>)
   20d3a:	480b      	ldr	r0, [pc, #44]	; (20d68 <work_timeout+0xa0>)
   20d3c:	f003 fa82 	bl	24244 <assert_print>
   20d40:	21c3      	movs	r1, #195	; 0xc3
   20d42:	e7da      	b.n	20cfa <work_timeout+0x32>
	__asm__ volatile(
   20d44:	f385 8811 	msr	BASEPRI, r5
   20d48:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   20d4c:	b002      	add	sp, #8
   20d4e:	bd70      	pop	{r4, r5, r6, pc}
   20d50:	20002fb0 	.word	0x20002fb0
   20d54:	0002801e 	.word	0x0002801e
   20d58:	00028077 	.word	0x00028077
   20d5c:	00027c2a 	.word	0x00027c2a
   20d60:	0002808c 	.word	0x0002808c
   20d64:	0002804b 	.word	0x0002804b
   20d68:	00028062 	.word	0x00028062

00020d6c <k_work_init>:
{
   20d6c:	b538      	push	{r3, r4, r5, lr}
   20d6e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   20d70:	4604      	mov	r4, r0
   20d72:	b948      	cbnz	r0, 20d88 <k_work_init+0x1c>
   20d74:	490c      	ldr	r1, [pc, #48]	; (20da8 <k_work_init+0x3c>)
   20d76:	4a0d      	ldr	r2, [pc, #52]	; (20dac <k_work_init+0x40>)
   20d78:	480d      	ldr	r0, [pc, #52]	; (20db0 <k_work_init+0x44>)
   20d7a:	2389      	movs	r3, #137	; 0x89
   20d7c:	f003 fa62 	bl	24244 <assert_print>
   20d80:	2189      	movs	r1, #137	; 0x89
	__ASSERT_NO_MSG(handler != NULL);
   20d82:	480a      	ldr	r0, [pc, #40]	; (20dac <k_work_init+0x40>)
   20d84:	f003 fa57 	bl	24236 <assert_post_action>
   20d88:	b939      	cbnz	r1, 20d9a <k_work_init+0x2e>
   20d8a:	490a      	ldr	r1, [pc, #40]	; (20db4 <k_work_init+0x48>)
   20d8c:	4a07      	ldr	r2, [pc, #28]	; (20dac <k_work_init+0x40>)
   20d8e:	4808      	ldr	r0, [pc, #32]	; (20db0 <k_work_init+0x44>)
   20d90:	238a      	movs	r3, #138	; 0x8a
   20d92:	f003 fa57 	bl	24244 <assert_print>
   20d96:	218a      	movs	r1, #138	; 0x8a
   20d98:	e7f3      	b.n	20d82 <k_work_init+0x16>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   20d9a:	2210      	movs	r2, #16
   20d9c:	2100      	movs	r1, #0
   20d9e:	f003 fe60 	bl	24a62 <memset>
   20da2:	6065      	str	r5, [r4, #4]
}
   20da4:	bd38      	pop	{r3, r4, r5, pc}
   20da6:	bf00      	nop
   20da8:	0002b427 	.word	0x0002b427
   20dac:	0002b350 	.word	0x0002b350
   20db0:	00027c2a 	.word	0x00027c2a
   20db4:	0002b371 	.word	0x0002b371

00020db8 <k_work_busy_get>:
{
   20db8:	b538      	push	{r3, r4, r5, lr}
   20dba:	4604      	mov	r4, r0
	__asm__ volatile(
   20dbc:	f04f 0340 	mov.w	r3, #64	; 0x40
   20dc0:	f3ef 8511 	mrs	r5, BASEPRI
   20dc4:	f383 8812 	msr	BASEPRI_MAX, r3
   20dc8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20dcc:	4816      	ldr	r0, [pc, #88]	; (20e28 <k_work_busy_get+0x70>)
   20dce:	f7ff fa79 	bl	202c4 <z_spin_lock_valid>
   20dd2:	b968      	cbnz	r0, 20df0 <k_work_busy_get+0x38>
   20dd4:	4a15      	ldr	r2, [pc, #84]	; (20e2c <k_work_busy_get+0x74>)
   20dd6:	4916      	ldr	r1, [pc, #88]	; (20e30 <k_work_busy_get+0x78>)
   20dd8:	4816      	ldr	r0, [pc, #88]	; (20e34 <k_work_busy_get+0x7c>)
   20dda:	2394      	movs	r3, #148	; 0x94
   20ddc:	f003 fa32 	bl	24244 <assert_print>
   20de0:	4911      	ldr	r1, [pc, #68]	; (20e28 <k_work_busy_get+0x70>)
   20de2:	4815      	ldr	r0, [pc, #84]	; (20e38 <k_work_busy_get+0x80>)
   20de4:	f003 fa2e 	bl	24244 <assert_print>
   20de8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20dea:	4810      	ldr	r0, [pc, #64]	; (20e2c <k_work_busy_get+0x74>)
   20dec:	f003 fa23 	bl	24236 <assert_post_action>
	z_spin_lock_set_owner(l);
   20df0:	480d      	ldr	r0, [pc, #52]	; (20e28 <k_work_busy_get+0x70>)
   20df2:	f7ff fa85 	bl	20300 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   20df6:	68e4      	ldr	r4, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20df8:	480b      	ldr	r0, [pc, #44]	; (20e28 <k_work_busy_get+0x70>)
   20dfa:	f004 040f 	and.w	r4, r4, #15
   20dfe:	f7ff fa6f 	bl	202e0 <z_spin_unlock_valid>
   20e02:	b958      	cbnz	r0, 20e1c <k_work_busy_get+0x64>
   20e04:	4a09      	ldr	r2, [pc, #36]	; (20e2c <k_work_busy_get+0x74>)
   20e06:	490d      	ldr	r1, [pc, #52]	; (20e3c <k_work_busy_get+0x84>)
   20e08:	480a      	ldr	r0, [pc, #40]	; (20e34 <k_work_busy_get+0x7c>)
   20e0a:	23c3      	movs	r3, #195	; 0xc3
   20e0c:	f003 fa1a 	bl	24244 <assert_print>
   20e10:	4905      	ldr	r1, [pc, #20]	; (20e28 <k_work_busy_get+0x70>)
   20e12:	480b      	ldr	r0, [pc, #44]	; (20e40 <k_work_busy_get+0x88>)
   20e14:	f003 fa16 	bl	24244 <assert_print>
   20e18:	21c3      	movs	r1, #195	; 0xc3
   20e1a:	e7e6      	b.n	20dea <k_work_busy_get+0x32>
	__asm__ volatile(
   20e1c:	f385 8811 	msr	BASEPRI, r5
   20e20:	f3bf 8f6f 	isb	sy
}
   20e24:	4620      	mov	r0, r4
   20e26:	bd38      	pop	{r3, r4, r5, pc}
   20e28:	20002fb0 	.word	0x20002fb0
   20e2c:	0002801e 	.word	0x0002801e
   20e30:	00028077 	.word	0x00028077
   20e34:	00027c2a 	.word	0x00027c2a
   20e38:	0002808c 	.word	0x0002808c
   20e3c:	0002804b 	.word	0x0002804b
   20e40:	00028062 	.word	0x00028062

00020e44 <z_work_submit_to_queue>:
{
   20e44:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   20e46:	460c      	mov	r4, r1
{
   20e48:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   20e4a:	b959      	cbnz	r1, 20e64 <z_work_submit_to_queue+0x20>
   20e4c:	4921      	ldr	r1, [pc, #132]	; (20ed4 <z_work_submit_to_queue+0x90>)
   20e4e:	4822      	ldr	r0, [pc, #136]	; (20ed8 <z_work_submit_to_queue+0x94>)
   20e50:	4a22      	ldr	r2, [pc, #136]	; (20edc <z_work_submit_to_queue+0x98>)
   20e52:	f44f 73ba 	mov.w	r3, #372	; 0x174
   20e56:	f003 f9f5 	bl	24244 <assert_print>
   20e5a:	4820      	ldr	r0, [pc, #128]	; (20edc <z_work_submit_to_queue+0x98>)
   20e5c:	f44f 71ba 	mov.w	r1, #372	; 0x174
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20e60:	f003 f9e9 	bl	24236 <assert_post_action>
	__asm__ volatile(
   20e64:	f04f 0340 	mov.w	r3, #64	; 0x40
   20e68:	f3ef 8511 	mrs	r5, BASEPRI
   20e6c:	f383 8812 	msr	BASEPRI_MAX, r3
   20e70:	f3bf 8f6f 	isb	sy
   20e74:	481a      	ldr	r0, [pc, #104]	; (20ee0 <z_work_submit_to_queue+0x9c>)
   20e76:	f7ff fa25 	bl	202c4 <z_spin_lock_valid>
   20e7a:	b960      	cbnz	r0, 20e96 <z_work_submit_to_queue+0x52>
   20e7c:	4a19      	ldr	r2, [pc, #100]	; (20ee4 <z_work_submit_to_queue+0xa0>)
   20e7e:	491a      	ldr	r1, [pc, #104]	; (20ee8 <z_work_submit_to_queue+0xa4>)
   20e80:	4815      	ldr	r0, [pc, #84]	; (20ed8 <z_work_submit_to_queue+0x94>)
   20e82:	2394      	movs	r3, #148	; 0x94
   20e84:	f003 f9de 	bl	24244 <assert_print>
   20e88:	4915      	ldr	r1, [pc, #84]	; (20ee0 <z_work_submit_to_queue+0x9c>)
   20e8a:	4818      	ldr	r0, [pc, #96]	; (20eec <z_work_submit_to_queue+0xa8>)
   20e8c:	f003 f9da 	bl	24244 <assert_print>
   20e90:	2194      	movs	r1, #148	; 0x94
   20e92:	4814      	ldr	r0, [pc, #80]	; (20ee4 <z_work_submit_to_queue+0xa0>)
   20e94:	e7e4      	b.n	20e60 <z_work_submit_to_queue+0x1c>
	z_spin_lock_set_owner(l);
   20e96:	4812      	ldr	r0, [pc, #72]	; (20ee0 <z_work_submit_to_queue+0x9c>)
   20e98:	f7ff fa32 	bl	20300 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   20e9c:	4620      	mov	r0, r4
   20e9e:	a901      	add	r1, sp, #4
   20ea0:	f7ff fea6 	bl	20bf0 <submit_to_queue_locked>
   20ea4:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20ea6:	480e      	ldr	r0, [pc, #56]	; (20ee0 <z_work_submit_to_queue+0x9c>)
   20ea8:	f7ff fa1a 	bl	202e0 <z_spin_unlock_valid>
   20eac:	b958      	cbnz	r0, 20ec6 <z_work_submit_to_queue+0x82>
   20eae:	4a0d      	ldr	r2, [pc, #52]	; (20ee4 <z_work_submit_to_queue+0xa0>)
   20eb0:	490f      	ldr	r1, [pc, #60]	; (20ef0 <z_work_submit_to_queue+0xac>)
   20eb2:	4809      	ldr	r0, [pc, #36]	; (20ed8 <z_work_submit_to_queue+0x94>)
   20eb4:	23c3      	movs	r3, #195	; 0xc3
   20eb6:	f003 f9c5 	bl	24244 <assert_print>
   20eba:	4909      	ldr	r1, [pc, #36]	; (20ee0 <z_work_submit_to_queue+0x9c>)
   20ebc:	480d      	ldr	r0, [pc, #52]	; (20ef4 <z_work_submit_to_queue+0xb0>)
   20ebe:	f003 f9c1 	bl	24244 <assert_print>
   20ec2:	21c3      	movs	r1, #195	; 0xc3
   20ec4:	e7e5      	b.n	20e92 <z_work_submit_to_queue+0x4e>
	__asm__ volatile(
   20ec6:	f385 8811 	msr	BASEPRI, r5
   20eca:	f3bf 8f6f 	isb	sy
}
   20ece:	4620      	mov	r0, r4
   20ed0:	b003      	add	sp, #12
   20ed2:	bd30      	pop	{r4, r5, pc}
   20ed4:	0002b427 	.word	0x0002b427
   20ed8:	00027c2a 	.word	0x00027c2a
   20edc:	0002b350 	.word	0x0002b350
   20ee0:	20002fb0 	.word	0x20002fb0
   20ee4:	0002801e 	.word	0x0002801e
   20ee8:	00028077 	.word	0x00028077
   20eec:	0002808c 	.word	0x0002808c
   20ef0:	0002804b 	.word	0x0002804b
   20ef4:	00028062 	.word	0x00028062

00020ef8 <k_work_submit>:
{
   20ef8:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   20efa:	4801      	ldr	r0, [pc, #4]	; (20f00 <k_work_submit+0x8>)
   20efc:	f005 bdb9 	b.w	26a72 <k_work_submit_to_queue>
   20f00:	20002ae8 	.word	0x20002ae8

00020f04 <k_work_queue_init>:
{
   20f04:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(queue != NULL);
   20f06:	b958      	cbnz	r0, 20f20 <k_work_queue_init+0x1c>
   20f08:	4908      	ldr	r1, [pc, #32]	; (20f2c <k_work_queue_init+0x28>)
   20f0a:	4809      	ldr	r0, [pc, #36]	; (20f30 <k_work_queue_init+0x2c>)
   20f0c:	4a09      	ldr	r2, [pc, #36]	; (20f34 <k_work_queue_init+0x30>)
   20f0e:	f240 23b9 	movw	r3, #697	; 0x2b9
   20f12:	f003 f997 	bl	24244 <assert_print>
   20f16:	4807      	ldr	r0, [pc, #28]	; (20f34 <k_work_queue_init+0x30>)
   20f18:	f240 21b9 	movw	r1, #697	; 0x2b9
   20f1c:	f003 f98b 	bl	24236 <assert_post_action>
	*queue = (struct k_work_q) {
   20f20:	22e8      	movs	r2, #232	; 0xe8
   20f22:	2100      	movs	r1, #0
   20f24:	f003 fd9d 	bl	24a62 <memset>
}
   20f28:	bd08      	pop	{r3, pc}
   20f2a:	bf00      	nop
   20f2c:	0002b38e 	.word	0x0002b38e
   20f30:	00027c2a 	.word	0x00027c2a
   20f34:	0002b350 	.word	0x0002b350

00020f38 <k_work_queue_start>:
{
   20f38:	b5f0      	push	{r4, r5, r6, r7, lr}
   20f3a:	b089      	sub	sp, #36	; 0x24
	__ASSERT_NO_MSG(queue);
   20f3c:	4604      	mov	r4, r0
{
   20f3e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	__ASSERT_NO_MSG(queue);
   20f40:	b958      	cbnz	r0, 20f5a <k_work_queue_start+0x22>
   20f42:	492b      	ldr	r1, [pc, #172]	; (20ff0 <k_work_queue_start+0xb8>)
   20f44:	4a2b      	ldr	r2, [pc, #172]	; (20ff4 <k_work_queue_start+0xbc>)
   20f46:	482c      	ldr	r0, [pc, #176]	; (20ff8 <k_work_queue_start+0xc0>)
   20f48:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   20f4c:	f003 f97a 	bl	24244 <assert_print>
   20f50:	f44f 7132 	mov.w	r1, #712	; 0x2c8
	__ASSERT_NO_MSG(stack);
   20f54:	4827      	ldr	r0, [pc, #156]	; (20ff4 <k_work_queue_start+0xbc>)
   20f56:	f003 f96e 	bl	24236 <assert_post_action>
   20f5a:	b949      	cbnz	r1, 20f70 <k_work_queue_start+0x38>
   20f5c:	4927      	ldr	r1, [pc, #156]	; (20ffc <k_work_queue_start+0xc4>)
   20f5e:	4a25      	ldr	r2, [pc, #148]	; (20ff4 <k_work_queue_start+0xbc>)
   20f60:	4825      	ldr	r0, [pc, #148]	; (20ff8 <k_work_queue_start+0xc0>)
   20f62:	f240 23c9 	movw	r3, #713	; 0x2c9
   20f66:	f003 f96d 	bl	24244 <assert_print>
   20f6a:	f240 21c9 	movw	r1, #713	; 0x2c9
   20f6e:	e7f1      	b.n	20f54 <k_work_queue_start+0x1c>
	return (*flagp & BIT(bit)) != 0U;
   20f70:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   20f74:	f010 0001 	ands.w	r0, r0, #1
   20f78:	d009      	beq.n	20f8e <k_work_queue_start+0x56>
   20f7a:	4921      	ldr	r1, [pc, #132]	; (21000 <k_work_queue_start+0xc8>)
   20f7c:	4a1d      	ldr	r2, [pc, #116]	; (20ff4 <k_work_queue_start+0xbc>)
   20f7e:	481e      	ldr	r0, [pc, #120]	; (20ff8 <k_work_queue_start+0xc0>)
   20f80:	f240 23ca 	movw	r3, #714	; 0x2ca
   20f84:	f003 f95e 	bl	24244 <assert_print>
   20f88:	f240 21ca 	movw	r1, #714	; 0x2ca
   20f8c:	e7e2      	b.n	20f54 <k_work_queue_start+0x1c>
	list->tail = NULL;
   20f8e:	e9c4 0032 	strd	r0, r0, [r4, #200]	; 0xc8
   20f92:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
	list->tail = (sys_dnode_t *)list;
   20f96:	e9c4 0034 	strd	r0, r0, [r4, #208]	; 0xd0
   20f9a:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
   20f9e:	e9c4 0036 	strd	r0, r0, [r4, #216]	; 0xd8
	if ((cfg != NULL) && cfg->no_yield) {
   20fa2:	b31d      	cbz	r5, 20fec <k_work_queue_start+0xb4>
   20fa4:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   20fa6:	2800      	cmp	r0, #0
   20fa8:	f240 1001 	movw	r0, #257	; 0x101
   20fac:	bf08      	it	eq
   20fae:	2001      	moveq	r0, #1
	*flagp = flags;
   20fb0:	f8c4 00e0 	str.w	r0, [r4, #224]	; 0xe0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   20fb4:	2000      	movs	r0, #0
   20fb6:	f04f 36ff 	mov.w	r6, #4294967295
   20fba:	f04f 37ff 	mov.w	r7, #4294967295
   20fbe:	e9cd 3003 	strd	r3, r0, [sp, #12]
   20fc2:	e9cd 0001 	strd	r0, r0, [sp, #4]
   20fc6:	e9cd 6706 	strd	r6, r7, [sp, #24]
   20fca:	4b0e      	ldr	r3, [pc, #56]	; (21004 <k_work_queue_start+0xcc>)
   20fcc:	9400      	str	r4, [sp, #0]
   20fce:	4620      	mov	r0, r4
   20fd0:	f7ff f8ae 	bl	20130 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   20fd4:	b125      	cbz	r5, 20fe0 <k_work_queue_start+0xa8>
   20fd6:	6829      	ldr	r1, [r5, #0]
   20fd8:	b111      	cbz	r1, 20fe0 <k_work_queue_start+0xa8>
	return z_impl_k_thread_name_set(thread, str);
   20fda:	4620      	mov	r0, r4
   20fdc:	f005 fca4 	bl	26928 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   20fe0:	4620      	mov	r0, r4
}
   20fe2:	b009      	add	sp, #36	; 0x24
   20fe4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   20fe8:	f005 bca3 	b.w	26932 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   20fec:	2001      	movs	r0, #1
   20fee:	e7df      	b.n	20fb0 <k_work_queue_start+0x78>
   20ff0:	0002b3e6 	.word	0x0002b3e6
   20ff4:	0002b350 	.word	0x0002b350
   20ff8:	00027c2a 	.word	0x00027c2a
   20ffc:	0002b3ec 	.word	0x0002b3ec
   21000:	0002b3f2 	.word	0x0002b3f2
   21004:	000209cd 	.word	0x000209cd

00021008 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   21008:	b538      	push	{r3, r4, r5, lr}
   2100a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   2100c:	4604      	mov	r4, r0
   2100e:	b958      	cbnz	r0, 21028 <k_work_init_delayable+0x20>
   21010:	490f      	ldr	r1, [pc, #60]	; (21050 <k_work_init_delayable+0x48>)
   21012:	4a10      	ldr	r2, [pc, #64]	; (21054 <k_work_init_delayable+0x4c>)
   21014:	4810      	ldr	r0, [pc, #64]	; (21058 <k_work_init_delayable+0x50>)
   21016:	f44f 7350 	mov.w	r3, #832	; 0x340
   2101a:	f003 f913 	bl	24244 <assert_print>
   2101e:	f44f 7150 	mov.w	r1, #832	; 0x340
	__ASSERT_NO_MSG(handler != NULL);
   21022:	480c      	ldr	r0, [pc, #48]	; (21054 <k_work_init_delayable+0x4c>)
   21024:	f003 f907 	bl	24236 <assert_post_action>
   21028:	b949      	cbnz	r1, 2103e <k_work_init_delayable+0x36>
   2102a:	490c      	ldr	r1, [pc, #48]	; (2105c <k_work_init_delayable+0x54>)
   2102c:	4a09      	ldr	r2, [pc, #36]	; (21054 <k_work_init_delayable+0x4c>)
   2102e:	480a      	ldr	r0, [pc, #40]	; (21058 <k_work_init_delayable+0x50>)
   21030:	f240 3341 	movw	r3, #833	; 0x341
   21034:	f003 f906 	bl	24244 <assert_print>
   21038:	f240 3141 	movw	r1, #833	; 0x341
   2103c:	e7f1      	b.n	21022 <k_work_init_delayable+0x1a>

	*dwork = (struct k_work_delayable){
   2103e:	2230      	movs	r2, #48	; 0x30
   21040:	2100      	movs	r1, #0
   21042:	f003 fd0e 	bl	24a62 <memset>
   21046:	f44f 7380 	mov.w	r3, #256	; 0x100
   2104a:	6065      	str	r5, [r4, #4]
   2104c:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   2104e:	bd38      	pop	{r3, r4, r5, pc}
   21050:	0002b426 	.word	0x0002b426
   21054:	0002b350 	.word	0x0002b350
   21058:	00027c2a 	.word	0x00027c2a
   2105c:	0002b371 	.word	0x0002b371

00021060 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   21060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21062:	4616      	mov	r6, r2
   21064:	9001      	str	r0, [sp, #4]
   21066:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   21068:	460c      	mov	r4, r1
   2106a:	b959      	cbnz	r1, 21084 <k_work_schedule_for_queue+0x24>
   2106c:	492d      	ldr	r1, [pc, #180]	; (21124 <k_work_schedule_for_queue+0xc4>)
   2106e:	482e      	ldr	r0, [pc, #184]	; (21128 <k_work_schedule_for_queue+0xc8>)
   21070:	4a2e      	ldr	r2, [pc, #184]	; (2112c <k_work_schedule_for_queue+0xcc>)
   21072:	f240 33ba 	movw	r3, #954	; 0x3ba
   21076:	f003 f8e5 	bl	24244 <assert_print>
   2107a:	482c      	ldr	r0, [pc, #176]	; (2112c <k_work_schedule_for_queue+0xcc>)
   2107c:	f240 31ba 	movw	r1, #954	; 0x3ba
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21080:	f003 f8d9 	bl	24236 <assert_post_action>
	__asm__ volatile(
   21084:	f04f 0340 	mov.w	r3, #64	; 0x40
   21088:	f3ef 8711 	mrs	r7, BASEPRI
   2108c:	f383 8812 	msr	BASEPRI_MAX, r3
   21090:	f3bf 8f6f 	isb	sy
   21094:	4826      	ldr	r0, [pc, #152]	; (21130 <k_work_schedule_for_queue+0xd0>)
   21096:	f7ff f915 	bl	202c4 <z_spin_lock_valid>
   2109a:	b960      	cbnz	r0, 210b6 <k_work_schedule_for_queue+0x56>
   2109c:	4a25      	ldr	r2, [pc, #148]	; (21134 <k_work_schedule_for_queue+0xd4>)
   2109e:	4926      	ldr	r1, [pc, #152]	; (21138 <k_work_schedule_for_queue+0xd8>)
   210a0:	4821      	ldr	r0, [pc, #132]	; (21128 <k_work_schedule_for_queue+0xc8>)
   210a2:	2394      	movs	r3, #148	; 0x94
   210a4:	f003 f8ce 	bl	24244 <assert_print>
   210a8:	4921      	ldr	r1, [pc, #132]	; (21130 <k_work_schedule_for_queue+0xd0>)
   210aa:	4824      	ldr	r0, [pc, #144]	; (2113c <k_work_schedule_for_queue+0xdc>)
   210ac:	f003 f8ca 	bl	24244 <assert_print>
   210b0:	2194      	movs	r1, #148	; 0x94
   210b2:	4820      	ldr	r0, [pc, #128]	; (21134 <k_work_schedule_for_queue+0xd4>)
   210b4:	e7e4      	b.n	21080 <k_work_schedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   210b6:	481e      	ldr	r0, [pc, #120]	; (21130 <k_work_schedule_for_queue+0xd0>)
   210b8:	f7ff f922 	bl	20300 <z_spin_lock_set_owner>
	return *flagp;
   210bc:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   210be:	f013 0f0e 	tst.w	r3, #14
   210c2:	d125      	bne.n	21110 <k_work_schedule_for_queue+0xb0>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   210c4:	ea55 0206 	orrs.w	r2, r5, r6
   210c8:	d114      	bne.n	210f4 <k_work_schedule_for_queue+0x94>
		return submit_to_queue_locked(work, queuep);
   210ca:	4620      	mov	r0, r4
   210cc:	a901      	add	r1, sp, #4
   210ce:	f7ff fd8f 	bl	20bf0 <submit_to_queue_locked>
   210d2:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   210d4:	4816      	ldr	r0, [pc, #88]	; (21130 <k_work_schedule_for_queue+0xd0>)
   210d6:	f7ff f903 	bl	202e0 <z_spin_unlock_valid>
   210da:	b9d8      	cbnz	r0, 21114 <k_work_schedule_for_queue+0xb4>
   210dc:	4a15      	ldr	r2, [pc, #84]	; (21134 <k_work_schedule_for_queue+0xd4>)
   210de:	4918      	ldr	r1, [pc, #96]	; (21140 <k_work_schedule_for_queue+0xe0>)
   210e0:	4811      	ldr	r0, [pc, #68]	; (21128 <k_work_schedule_for_queue+0xc8>)
   210e2:	23c3      	movs	r3, #195	; 0xc3
   210e4:	f003 f8ae 	bl	24244 <assert_print>
   210e8:	4911      	ldr	r1, [pc, #68]	; (21130 <k_work_schedule_for_queue+0xd0>)
   210ea:	4816      	ldr	r0, [pc, #88]	; (21144 <k_work_schedule_for_queue+0xe4>)
   210ec:	f003 f8aa 	bl	24244 <assert_print>
   210f0:	21c3      	movs	r1, #195	; 0xc3
   210f2:	e7de      	b.n	210b2 <k_work_schedule_for_queue+0x52>
	*flagp |= BIT(bit);
   210f4:	f043 0308 	orr.w	r3, r3, #8
   210f8:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   210fa:	9b01      	ldr	r3, [sp, #4]
   210fc:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   210fe:	f104 0010 	add.w	r0, r4, #16
   21102:	4911      	ldr	r1, [pc, #68]	; (21148 <k_work_schedule_for_queue+0xe8>)
   21104:	4632      	mov	r2, r6
   21106:	462b      	mov	r3, r5
   21108:	f001 fbac 	bl	22864 <z_add_timeout>
	return ret;
   2110c:	2401      	movs	r4, #1
   2110e:	e7e1      	b.n	210d4 <k_work_schedule_for_queue+0x74>
	int ret = 0;
   21110:	2400      	movs	r4, #0
   21112:	e7df      	b.n	210d4 <k_work_schedule_for_queue+0x74>
	__asm__ volatile(
   21114:	f387 8811 	msr	BASEPRI, r7
   21118:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   2111c:	4620      	mov	r0, r4
   2111e:	b003      	add	sp, #12
   21120:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21122:	bf00      	nop
   21124:	0002b426 	.word	0x0002b426
   21128:	00027c2a 	.word	0x00027c2a
   2112c:	0002b350 	.word	0x0002b350
   21130:	20002fb0 	.word	0x20002fb0
   21134:	0002801e 	.word	0x0002801e
   21138:	00028077 	.word	0x00028077
   2113c:	0002808c 	.word	0x0002808c
   21140:	0002804b 	.word	0x0002804b
   21144:	00028062 	.word	0x00028062
   21148:	00020cc9 	.word	0x00020cc9

0002114c <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   2114c:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   2114e:	4801      	ldr	r0, [pc, #4]	; (21154 <k_work_schedule+0x8>)
   21150:	f7ff bf86 	b.w	21060 <k_work_schedule_for_queue>
   21154:	20002ae8 	.word	0x20002ae8

00021158 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   21158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2115a:	4616      	mov	r6, r2
   2115c:	9001      	str	r0, [sp, #4]
   2115e:	461d      	mov	r5, r3
	__ASSERT_NO_MSG(dwork != NULL);
   21160:	460c      	mov	r4, r1
   21162:	b959      	cbnz	r1, 2117c <k_work_reschedule_for_queue+0x24>
   21164:	492c      	ldr	r1, [pc, #176]	; (21218 <k_work_reschedule_for_queue+0xc0>)
   21166:	482d      	ldr	r0, [pc, #180]	; (2121c <k_work_reschedule_for_queue+0xc4>)
   21168:	4a2d      	ldr	r2, [pc, #180]	; (21220 <k_work_reschedule_for_queue+0xc8>)
   2116a:	f240 33de 	movw	r3, #990	; 0x3de
   2116e:	f003 f869 	bl	24244 <assert_print>
   21172:	482b      	ldr	r0, [pc, #172]	; (21220 <k_work_reschedule_for_queue+0xc8>)
   21174:	f240 31de 	movw	r1, #990	; 0x3de
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21178:	f003 f85d 	bl	24236 <assert_post_action>
	__asm__ volatile(
   2117c:	f04f 0340 	mov.w	r3, #64	; 0x40
   21180:	f3ef 8711 	mrs	r7, BASEPRI
   21184:	f383 8812 	msr	BASEPRI_MAX, r3
   21188:	f3bf 8f6f 	isb	sy
   2118c:	4825      	ldr	r0, [pc, #148]	; (21224 <k_work_reschedule_for_queue+0xcc>)
   2118e:	f7ff f899 	bl	202c4 <z_spin_lock_valid>
   21192:	b960      	cbnz	r0, 211ae <k_work_reschedule_for_queue+0x56>
   21194:	4a24      	ldr	r2, [pc, #144]	; (21228 <k_work_reschedule_for_queue+0xd0>)
   21196:	4925      	ldr	r1, [pc, #148]	; (2122c <k_work_reschedule_for_queue+0xd4>)
   21198:	4820      	ldr	r0, [pc, #128]	; (2121c <k_work_reschedule_for_queue+0xc4>)
   2119a:	2394      	movs	r3, #148	; 0x94
   2119c:	f003 f852 	bl	24244 <assert_print>
   211a0:	4920      	ldr	r1, [pc, #128]	; (21224 <k_work_reschedule_for_queue+0xcc>)
   211a2:	4823      	ldr	r0, [pc, #140]	; (21230 <k_work_reschedule_for_queue+0xd8>)
   211a4:	f003 f84e 	bl	24244 <assert_print>
   211a8:	2194      	movs	r1, #148	; 0x94
   211aa:	481f      	ldr	r0, [pc, #124]	; (21228 <k_work_reschedule_for_queue+0xd0>)
   211ac:	e7e4      	b.n	21178 <k_work_reschedule_for_queue+0x20>
	z_spin_lock_set_owner(l);
   211ae:	481d      	ldr	r0, [pc, #116]	; (21224 <k_work_reschedule_for_queue+0xcc>)
   211b0:	f7ff f8a6 	bl	20300 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   211b4:	4620      	mov	r0, r4
   211b6:	f005 fc13 	bl	269e0 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   211ba:	ea55 0306 	orrs.w	r3, r5, r6
   211be:	d114      	bne.n	211ea <k_work_reschedule_for_queue+0x92>
		return submit_to_queue_locked(work, queuep);
   211c0:	4620      	mov	r0, r4
   211c2:	a901      	add	r1, sp, #4
   211c4:	f7ff fd14 	bl	20bf0 <submit_to_queue_locked>
   211c8:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   211ca:	4816      	ldr	r0, [pc, #88]	; (21224 <k_work_reschedule_for_queue+0xcc>)
   211cc:	f7ff f888 	bl	202e0 <z_spin_unlock_valid>
   211d0:	b9d0      	cbnz	r0, 21208 <k_work_reschedule_for_queue+0xb0>
   211d2:	4a15      	ldr	r2, [pc, #84]	; (21228 <k_work_reschedule_for_queue+0xd0>)
   211d4:	4917      	ldr	r1, [pc, #92]	; (21234 <k_work_reschedule_for_queue+0xdc>)
   211d6:	4811      	ldr	r0, [pc, #68]	; (2121c <k_work_reschedule_for_queue+0xc4>)
   211d8:	23c3      	movs	r3, #195	; 0xc3
   211da:	f003 f833 	bl	24244 <assert_print>
   211de:	4911      	ldr	r1, [pc, #68]	; (21224 <k_work_reschedule_for_queue+0xcc>)
   211e0:	4815      	ldr	r0, [pc, #84]	; (21238 <k_work_reschedule_for_queue+0xe0>)
   211e2:	f003 f82f 	bl	24244 <assert_print>
   211e6:	21c3      	movs	r1, #195	; 0xc3
   211e8:	e7df      	b.n	211aa <k_work_reschedule_for_queue+0x52>
	*flagp |= BIT(bit);
   211ea:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   211ec:	4913      	ldr	r1, [pc, #76]	; (2123c <k_work_reschedule_for_queue+0xe4>)
	*flagp |= BIT(bit);
   211ee:	f043 0308 	orr.w	r3, r3, #8
   211f2:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   211f4:	9b01      	ldr	r3, [sp, #4]
   211f6:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   211f8:	f104 0010 	add.w	r0, r4, #16
   211fc:	4632      	mov	r2, r6
   211fe:	462b      	mov	r3, r5
   21200:	f001 fb30 	bl	22864 <z_add_timeout>
	return ret;
   21204:	2401      	movs	r4, #1
   21206:	e7e0      	b.n	211ca <k_work_reschedule_for_queue+0x72>
	__asm__ volatile(
   21208:	f387 8811 	msr	BASEPRI, r7
   2120c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   21210:	4620      	mov	r0, r4
   21212:	b003      	add	sp, #12
   21214:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21216:	bf00      	nop
   21218:	0002b426 	.word	0x0002b426
   2121c:	00027c2a 	.word	0x00027c2a
   21220:	0002b350 	.word	0x0002b350
   21224:	20002fb0 	.word	0x20002fb0
   21228:	0002801e 	.word	0x0002801e
   2122c:	00028077 	.word	0x00028077
   21230:	0002808c 	.word	0x0002808c
   21234:	0002804b 	.word	0x0002804b
   21238:	00028062 	.word	0x00028062
   2123c:	00020cc9 	.word	0x00020cc9

00021240 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   21240:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   21242:	4801      	ldr	r0, [pc, #4]	; (21248 <k_work_reschedule+0x8>)
   21244:	f7ff bf88 	b.w	21158 <k_work_reschedule_for_queue>
   21248:	20002ae8 	.word	0x20002ae8

0002124c <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2124c:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   2124e:	4604      	mov	r4, r0
   21250:	b958      	cbnz	r0, 2126a <k_work_cancel_delayable+0x1e>
   21252:	4922      	ldr	r1, [pc, #136]	; (212dc <k_work_cancel_delayable+0x90>)
   21254:	4822      	ldr	r0, [pc, #136]	; (212e0 <k_work_cancel_delayable+0x94>)
   21256:	4a23      	ldr	r2, [pc, #140]	; (212e4 <k_work_cancel_delayable+0x98>)
   21258:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2125c:	f002 fff2 	bl	24244 <assert_print>
   21260:	4820      	ldr	r0, [pc, #128]	; (212e4 <k_work_cancel_delayable+0x98>)
   21262:	f44f 6180 	mov.w	r1, #1024	; 0x400
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21266:	f002 ffe6 	bl	24236 <assert_post_action>
	__asm__ volatile(
   2126a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2126e:	f3ef 8511 	mrs	r5, BASEPRI
   21272:	f383 8812 	msr	BASEPRI_MAX, r3
   21276:	f3bf 8f6f 	isb	sy
   2127a:	481b      	ldr	r0, [pc, #108]	; (212e8 <k_work_cancel_delayable+0x9c>)
   2127c:	f7ff f822 	bl	202c4 <z_spin_lock_valid>
   21280:	b960      	cbnz	r0, 2129c <k_work_cancel_delayable+0x50>
   21282:	4a1a      	ldr	r2, [pc, #104]	; (212ec <k_work_cancel_delayable+0xa0>)
   21284:	491a      	ldr	r1, [pc, #104]	; (212f0 <k_work_cancel_delayable+0xa4>)
   21286:	4816      	ldr	r0, [pc, #88]	; (212e0 <k_work_cancel_delayable+0x94>)
   21288:	2394      	movs	r3, #148	; 0x94
   2128a:	f002 ffdb 	bl	24244 <assert_print>
   2128e:	4916      	ldr	r1, [pc, #88]	; (212e8 <k_work_cancel_delayable+0x9c>)
   21290:	4818      	ldr	r0, [pc, #96]	; (212f4 <k_work_cancel_delayable+0xa8>)
   21292:	f002 ffd7 	bl	24244 <assert_print>
   21296:	2194      	movs	r1, #148	; 0x94
   21298:	4814      	ldr	r0, [pc, #80]	; (212ec <k_work_cancel_delayable+0xa0>)
   2129a:	e7e4      	b.n	21266 <k_work_cancel_delayable+0x1a>
	z_spin_lock_set_owner(l);
   2129c:	4812      	ldr	r0, [pc, #72]	; (212e8 <k_work_cancel_delayable+0x9c>)
   2129e:	f7ff f82f 	bl	20300 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   212a2:	4620      	mov	r0, r4
   212a4:	f005 fb9c 	bl	269e0 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   212a8:	4620      	mov	r0, r4
   212aa:	f005 fbaf 	bl	26a0c <cancel_async_locked>
   212ae:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   212b0:	480d      	ldr	r0, [pc, #52]	; (212e8 <k_work_cancel_delayable+0x9c>)
   212b2:	f7ff f815 	bl	202e0 <z_spin_unlock_valid>
   212b6:	b958      	cbnz	r0, 212d0 <k_work_cancel_delayable+0x84>
   212b8:	4a0c      	ldr	r2, [pc, #48]	; (212ec <k_work_cancel_delayable+0xa0>)
   212ba:	490f      	ldr	r1, [pc, #60]	; (212f8 <k_work_cancel_delayable+0xac>)
   212bc:	4808      	ldr	r0, [pc, #32]	; (212e0 <k_work_cancel_delayable+0x94>)
   212be:	23c3      	movs	r3, #195	; 0xc3
   212c0:	f002 ffc0 	bl	24244 <assert_print>
   212c4:	4908      	ldr	r1, [pc, #32]	; (212e8 <k_work_cancel_delayable+0x9c>)
   212c6:	480d      	ldr	r0, [pc, #52]	; (212fc <k_work_cancel_delayable+0xb0>)
   212c8:	f002 ffbc 	bl	24244 <assert_print>
   212cc:	21c3      	movs	r1, #195	; 0xc3
   212ce:	e7e3      	b.n	21298 <k_work_cancel_delayable+0x4c>
	__asm__ volatile(
   212d0:	f385 8811 	msr	BASEPRI, r5
   212d4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   212d8:	4620      	mov	r0, r4
   212da:	bd38      	pop	{r3, r4, r5, pc}
   212dc:	0002b426 	.word	0x0002b426
   212e0:	00027c2a 	.word	0x00027c2a
   212e4:	0002b350 	.word	0x0002b350
   212e8:	20002fb0 	.word	0x20002fb0
   212ec:	0002801e 	.word	0x0002801e
   212f0:	00028077 	.word	0x00028077
   212f4:	0002808c 	.word	0x0002808c
   212f8:	0002804b 	.word	0x0002804b
   212fc:	00028062 	.word	0x00028062

00021300 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   21300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21304:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   21306:	4605      	mov	r5, r0
   21308:	b958      	cbnz	r0, 21322 <k_work_cancel_delayable_sync+0x22>
   2130a:	493a      	ldr	r1, [pc, #232]	; (213f4 <k_work_cancel_delayable_sync+0xf4>)
   2130c:	4a3a      	ldr	r2, [pc, #232]	; (213f8 <k_work_cancel_delayable_sync+0xf8>)
   2130e:	483b      	ldr	r0, [pc, #236]	; (213fc <k_work_cancel_delayable_sync+0xfc>)
   21310:	f240 4311 	movw	r3, #1041	; 0x411
   21314:	f002 ff96 	bl	24244 <assert_print>
   21318:	f240 4111 	movw	r1, #1041	; 0x411
	__ASSERT_NO_MSG(sync != NULL);
   2131c:	4836      	ldr	r0, [pc, #216]	; (213f8 <k_work_cancel_delayable_sync+0xf8>)
   2131e:	f002 ff8a 	bl	24236 <assert_post_action>
   21322:	b949      	cbnz	r1, 21338 <k_work_cancel_delayable_sync+0x38>
   21324:	4936      	ldr	r1, [pc, #216]	; (21400 <k_work_cancel_delayable_sync+0x100>)
   21326:	4a34      	ldr	r2, [pc, #208]	; (213f8 <k_work_cancel_delayable_sync+0xf8>)
   21328:	4834      	ldr	r0, [pc, #208]	; (213fc <k_work_cancel_delayable_sync+0xfc>)
   2132a:	f240 4312 	movw	r3, #1042	; 0x412
   2132e:	f002 ff89 	bl	24244 <assert_print>
   21332:	f240 4112 	movw	r1, #1042	; 0x412
   21336:	e7f1      	b.n	2131c <k_work_cancel_delayable_sync+0x1c>
	__ASSERT_NO_MSG(!k_is_in_isr());
   21338:	f005 faf0 	bl	2691c <k_is_in_isr>
   2133c:	4604      	mov	r4, r0
   2133e:	b148      	cbz	r0, 21354 <k_work_cancel_delayable_sync+0x54>
   21340:	4930      	ldr	r1, [pc, #192]	; (21404 <k_work_cancel_delayable_sync+0x104>)
   21342:	4a2d      	ldr	r2, [pc, #180]	; (213f8 <k_work_cancel_delayable_sync+0xf8>)
   21344:	482d      	ldr	r0, [pc, #180]	; (213fc <k_work_cancel_delayable_sync+0xfc>)
   21346:	f240 4313 	movw	r3, #1043	; 0x413
   2134a:	f002 ff7b 	bl	24244 <assert_print>
   2134e:	f240 4113 	movw	r1, #1043	; 0x413
   21352:	e7e3      	b.n	2131c <k_work_cancel_delayable_sync+0x1c>
	__asm__ volatile(
   21354:	f04f 0340 	mov.w	r3, #64	; 0x40
   21358:	f3ef 8811 	mrs	r8, BASEPRI
   2135c:	f383 8812 	msr	BASEPRI_MAX, r3
   21360:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21364:	4828      	ldr	r0, [pc, #160]	; (21408 <k_work_cancel_delayable_sync+0x108>)
   21366:	f7fe ffad 	bl	202c4 <z_spin_lock_valid>
   2136a:	b960      	cbnz	r0, 21386 <k_work_cancel_delayable_sync+0x86>
   2136c:	4a27      	ldr	r2, [pc, #156]	; (2140c <k_work_cancel_delayable_sync+0x10c>)
   2136e:	4928      	ldr	r1, [pc, #160]	; (21410 <k_work_cancel_delayable_sync+0x110>)
   21370:	4822      	ldr	r0, [pc, #136]	; (213fc <k_work_cancel_delayable_sync+0xfc>)
   21372:	2394      	movs	r3, #148	; 0x94
   21374:	f002 ff66 	bl	24244 <assert_print>
   21378:	4923      	ldr	r1, [pc, #140]	; (21408 <k_work_cancel_delayable_sync+0x108>)
   2137a:	4826      	ldr	r0, [pc, #152]	; (21414 <k_work_cancel_delayable_sync+0x114>)
   2137c:	f002 ff62 	bl	24244 <assert_print>
   21380:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21382:	4822      	ldr	r0, [pc, #136]	; (2140c <k_work_cancel_delayable_sync+0x10c>)
   21384:	e7cb      	b.n	2131e <k_work_cancel_delayable_sync+0x1e>
	z_spin_lock_set_owner(l);
   21386:	4820      	ldr	r0, [pc, #128]	; (21408 <k_work_cancel_delayable_sync+0x108>)
   21388:	f7fe ffba 	bl	20300 <z_spin_lock_set_owner>
	return *flagp;
   2138c:	68eb      	ldr	r3, [r5, #12]
   2138e:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   21392:	2b00      	cmp	r3, #0
   21394:	bf14      	ite	ne
   21396:	2701      	movne	r7, #1
   21398:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   2139a:	d00a      	beq.n	213b2 <k_work_cancel_delayable_sync+0xb2>
	(void)unschedule_locked(dwork);
   2139c:	4628      	mov	r0, r5
   2139e:	f005 fb1f 	bl	269e0 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   213a2:	4628      	mov	r0, r5
   213a4:	f005 fb32 	bl	26a0c <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   213a8:	4631      	mov	r1, r6
   213aa:	4628      	mov	r0, r5
   213ac:	f7ff fc02 	bl	20bb4 <cancel_sync_locked>
   213b0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   213b2:	4815      	ldr	r0, [pc, #84]	; (21408 <k_work_cancel_delayable_sync+0x108>)
   213b4:	f7fe ff94 	bl	202e0 <z_spin_unlock_valid>
   213b8:	b958      	cbnz	r0, 213d2 <k_work_cancel_delayable_sync+0xd2>
   213ba:	4a14      	ldr	r2, [pc, #80]	; (2140c <k_work_cancel_delayable_sync+0x10c>)
   213bc:	4916      	ldr	r1, [pc, #88]	; (21418 <k_work_cancel_delayable_sync+0x118>)
   213be:	480f      	ldr	r0, [pc, #60]	; (213fc <k_work_cancel_delayable_sync+0xfc>)
   213c0:	23c3      	movs	r3, #195	; 0xc3
   213c2:	f002 ff3f 	bl	24244 <assert_print>
   213c6:	4910      	ldr	r1, [pc, #64]	; (21408 <k_work_cancel_delayable_sync+0x108>)
   213c8:	4814      	ldr	r0, [pc, #80]	; (2141c <k_work_cancel_delayable_sync+0x11c>)
   213ca:	f002 ff3b 	bl	24244 <assert_print>
   213ce:	21c3      	movs	r1, #195	; 0xc3
   213d0:	e7d7      	b.n	21382 <k_work_cancel_delayable_sync+0x82>
	__asm__ volatile(
   213d2:	f388 8811 	msr	BASEPRI, r8
   213d6:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   213da:	b13c      	cbz	r4, 213ec <k_work_cancel_delayable_sync+0xec>
	return z_impl_k_sem_take(sem, timeout);
   213dc:	f04f 32ff 	mov.w	r2, #4294967295
   213e0:	f04f 33ff 	mov.w	r3, #4294967295
   213e4:	f106 0008 	add.w	r0, r6, #8
   213e8:	f7ff fa5c 	bl	208a4 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   213ec:	4638      	mov	r0, r7
   213ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   213f2:	bf00      	nop
   213f4:	0002b426 	.word	0x0002b426
   213f8:	0002b350 	.word	0x0002b350
   213fc:	00027c2a 	.word	0x00027c2a
   21400:	0002b3d2 	.word	0x0002b3d2
   21404:	000299af 	.word	0x000299af
   21408:	20002fb0 	.word	0x20002fb0
   2140c:	0002801e 	.word	0x0002801e
   21410:	00028077 	.word	0x00028077
   21414:	0002808c 	.word	0x0002808c
   21418:	0002804b 	.word	0x0002804b
   2141c:	00028062 	.word	0x00028062

00021420 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
   21420:	89c3      	ldrh	r3, [r0, #14]
   21422:	2b7f      	cmp	r3, #127	; 0x7f
   21424:	d812      	bhi.n	2144c <sliceable+0x2c>
	int ret = slice_ticks;
   21426:	4b0a      	ldr	r3, [pc, #40]	; (21450 <sliceable+0x30>)
   21428:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
   2142a:	b163      	cbz	r3, 21446 <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   2142c:	4b09      	ldr	r3, [pc, #36]	; (21454 <sliceable+0x34>)
   2142e:	f990 200e 	ldrsb.w	r2, [r0, #14]
   21432:	681b      	ldr	r3, [r3, #0]
   21434:	429a      	cmp	r2, r3
   21436:	db09      	blt.n	2144c <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
   21438:	7b43      	ldrb	r3, [r0, #13]
   2143a:	06db      	lsls	r3, r3, #27
   2143c:	d106      	bne.n	2144c <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
   2143e:	4b06      	ldr	r3, [pc, #24]	; (21458 <sliceable+0x38>)
   21440:	1ac3      	subs	r3, r0, r3
   21442:	bf18      	it	ne
   21444:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
   21446:	f003 0001 	and.w	r0, r3, #1
   2144a:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
   2144c:	2300      	movs	r3, #0
   2144e:	e7fa      	b.n	21446 <sliceable+0x26>
   21450:	20002fbc 	.word	0x20002fbc
   21454:	20002fb8 	.word	0x20002fb8
   21458:	20002958 	.word	0x20002958

0002145c <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
   2145c:	b508      	push	{r3, lr}
	int cpu = ARRAY_INDEX(slice_timeouts, t);
   2145e:	b168      	cbz	r0, 2147c <slice_timeout+0x20>
   21460:	4b10      	ldr	r3, [pc, #64]	; (214a4 <slice_timeout+0x48>)
   21462:	4298      	cmp	r0, r3
   21464:	d30a      	bcc.n	2147c <slice_timeout+0x20>
   21466:	f103 0218 	add.w	r2, r3, #24
   2146a:	4290      	cmp	r0, r2
   2146c:	d206      	bcs.n	2147c <slice_timeout+0x20>
   2146e:	1ac0      	subs	r0, r0, r3
   21470:	2218      	movs	r2, #24
   21472:	fbb0 f3f2 	udiv	r3, r0, r2
   21476:	fb02 0313 	mls	r3, r2, r3, r0
   2147a:	b15b      	cbz	r3, 21494 <slice_timeout+0x38>
   2147c:	490a      	ldr	r1, [pc, #40]	; (214a8 <slice_timeout+0x4c>)
   2147e:	480b      	ldr	r0, [pc, #44]	; (214ac <slice_timeout+0x50>)
   21480:	4a0b      	ldr	r2, [pc, #44]	; (214b0 <slice_timeout+0x54>)
   21482:	f240 13c7 	movw	r3, #455	; 0x1c7
   21486:	f002 fedd 	bl	24244 <assert_print>
   2148a:	4809      	ldr	r0, [pc, #36]	; (214b0 <slice_timeout+0x54>)
   2148c:	f240 11c7 	movw	r1, #455	; 0x1c7
   21490:	f002 fed1 	bl	24236 <assert_post_action>
   21494:	4b07      	ldr	r3, [pc, #28]	; (214b4 <slice_timeout+0x58>)
   21496:	10c0      	asrs	r0, r0, #3
   21498:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
   2149a:	4b07      	ldr	r3, [pc, #28]	; (214b8 <slice_timeout+0x5c>)
   2149c:	2201      	movs	r2, #1
   2149e:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
   214a0:	bd08      	pop	{r3, pc}
   214a2:	bf00      	nop
   214a4:	20002bd0 	.word	0x20002bd0
   214a8:	0002b45d 	.word	0x0002b45d
   214ac:	00027c2a 	.word	0x00027c2a
   214b0:	0002b43b 	.word	0x0002b43b
   214b4:	aaaaaaab 	.word	0xaaaaaaab
   214b8:	200035b5 	.word	0x200035b5

000214bc <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
   214bc:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
   214be:	4b0e      	ldr	r3, [pc, #56]	; (214f8 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
   214c0:	4c0e      	ldr	r4, [pc, #56]	; (214fc <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
   214c2:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
   214c4:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   214c8:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
   214cc:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
   214ce:	4620      	mov	r0, r4
   214d0:	f001 fa88 	bl	229e4 <z_abort_timeout>
	slice_expired[cpu] = false;
   214d4:	4b0a      	ldr	r3, [pc, #40]	; (21500 <z_reset_time_slice+0x44>)
   214d6:	2200      	movs	r2, #0
	if (sliceable(curr)) {
   214d8:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
   214da:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
   214dc:	f7ff ffa0 	bl	21420 <sliceable>
   214e0:	b148      	cbz	r0, 214f6 <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
   214e2:	4b08      	ldr	r3, [pc, #32]	; (21504 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   214e4:	4908      	ldr	r1, [pc, #32]	; (21508 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
   214e6:	681a      	ldr	r2, [r3, #0]
   214e8:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   214ea:	4620      	mov	r0, r4
   214ec:	17d3      	asrs	r3, r2, #31
	}
}
   214ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
   214f2:	f001 b9b7 	b.w	22864 <z_add_timeout>
}
   214f6:	bd70      	pop	{r4, r5, r6, pc}
   214f8:	20002f78 	.word	0x20002f78
   214fc:	20002bd0 	.word	0x20002bd0
   21500:	200035b5 	.word	0x200035b5
   21504:	20002fbc 	.word	0x20002fbc
   21508:	0002145d 	.word	0x0002145d

0002150c <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   2150c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   2150e:	4d14      	ldr	r5, [pc, #80]	; (21560 <update_cache+0x54>)
   21510:	462b      	mov	r3, r5
   21512:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21516:	429c      	cmp	r4, r3
   21518:	d000      	beq.n	2151c <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   2151a:	b904      	cbnz	r4, 2151e <update_cache+0x12>
   2151c:	68ec      	ldr	r4, [r5, #12]
	__ASSERT(_current != NULL, "");
   2151e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   21520:	b9a8      	cbnz	r0, 2154e <update_cache+0x42>
	__ASSERT(_current != NULL, "");
   21522:	b963      	cbnz	r3, 2153e <update_cache+0x32>
   21524:	490f      	ldr	r1, [pc, #60]	; (21564 <update_cache+0x58>)
   21526:	4a10      	ldr	r2, [pc, #64]	; (21568 <update_cache+0x5c>)
   21528:	4810      	ldr	r0, [pc, #64]	; (2156c <update_cache+0x60>)
   2152a:	238a      	movs	r3, #138	; 0x8a
   2152c:	f002 fe8a 	bl	24244 <assert_print>
   21530:	480f      	ldr	r0, [pc, #60]	; (21570 <update_cache+0x64>)
   21532:	f002 fe87 	bl	24244 <assert_print>
   21536:	480c      	ldr	r0, [pc, #48]	; (21568 <update_cache+0x5c>)
   21538:	218a      	movs	r1, #138	; 0x8a
   2153a:	f002 fe7c 	bl	24236 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   2153e:	7b5a      	ldrb	r2, [r3, #13]
   21540:	06d2      	lsls	r2, r2, #27
   21542:	d104      	bne.n	2154e <update_cache+0x42>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   21544:	69a2      	ldr	r2, [r4, #24]
   21546:	b912      	cbnz	r2, 2154e <update_cache+0x42>
	if (is_preempt(_current) || is_metairq(thread)) {
   21548:	89da      	ldrh	r2, [r3, #14]
   2154a:	2a7f      	cmp	r2, #127	; 0x7f
   2154c:	d805      	bhi.n	2155a <update_cache+0x4e>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   2154e:	429c      	cmp	r4, r3
   21550:	d002      	beq.n	21558 <update_cache+0x4c>
			z_reset_time_slice(thread);
   21552:	4620      	mov	r0, r4
   21554:	f7ff ffb2 	bl	214bc <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   21558:	4623      	mov	r3, r4
   2155a:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   2155c:	bd38      	pop	{r3, r4, r5, pc}
   2155e:	bf00      	nop
   21560:	20002f78 	.word	0x20002f78
   21564:	0002b5f6 	.word	0x0002b5f6
   21568:	0002b43b 	.word	0x0002b43b
   2156c:	00027c2a 	.word	0x00027c2a
   21570:	0002a220 	.word	0x0002a220

00021574 <ready_thread>:
#endif
	return false;
}

static void ready_thread(struct k_thread *thread)
{
   21574:	b570      	push	{r4, r5, r6, lr}
#endif

	/* If thread is queued already, do not try and added it to the
	 * run queue again
	 */
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   21576:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   2157a:	7b42      	ldrb	r2, [r0, #13]
   2157c:	2b00      	cmp	r3, #0
   2157e:	db38      	blt.n	215f2 <ready_thread+0x7e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   21580:	06d3      	lsls	r3, r2, #27
   21582:	d136      	bne.n	215f2 <ready_thread+0x7e>
	return node->next != NULL;
   21584:	6983      	ldr	r3, [r0, #24]
   21586:	2b00      	cmp	r3, #0
   21588:	d133      	bne.n	215f2 <ready_thread+0x7e>
	thread->base.thread_state |= _THREAD_QUEUED;
   2158a:	f062 027f 	orn	r2, r2, #127	; 0x7f
   2158e:	7342      	strb	r2, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21590:	4a18      	ldr	r2, [pc, #96]	; (215f4 <ready_thread+0x80>)
   21592:	4290      	cmp	r0, r2
   21594:	d109      	bne.n	215aa <ready_thread+0x36>
   21596:	4918      	ldr	r1, [pc, #96]	; (215f8 <ready_thread+0x84>)
   21598:	4818      	ldr	r0, [pc, #96]	; (215fc <ready_thread+0x88>)
   2159a:	4a19      	ldr	r2, [pc, #100]	; (21600 <ready_thread+0x8c>)
   2159c:	23bc      	movs	r3, #188	; 0xbc
   2159e:	f002 fe51 	bl	24244 <assert_print>
   215a2:	4817      	ldr	r0, [pc, #92]	; (21600 <ready_thread+0x8c>)
   215a4:	21bc      	movs	r1, #188	; 0xbc
   215a6:	f002 fe46 	bl	24236 <assert_post_action>
	return list->head == list;
   215aa:	4916      	ldr	r1, [pc, #88]	; (21604 <ready_thread+0x90>)
   215ac:	460a      	mov	r2, r1
   215ae:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   215b2:	4294      	cmp	r4, r2
   215b4:	bf18      	it	ne
   215b6:	4623      	movne	r3, r4
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   215b8:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   215ba:	b923      	cbnz	r3, 215c6 <ready_thread+0x52>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   215bc:	e9c0 2400 	strd	r2, r4, [r0]

	tail->next = node;
   215c0:	6020      	str	r0, [r4, #0]
	list->tail = node;
   215c2:	6208      	str	r0, [r1, #32]
}
   215c4:	e00c      	b.n	215e0 <ready_thread+0x6c>
	int32_t b1 = thread_1->base.prio;
   215c6:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   215ca:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   215ce:	42b5      	cmp	r5, r6
   215d0:	d00b      	beq.n	215ea <ready_thread+0x76>
		if (z_sched_prio_cmp(thread, t) > 0) {
   215d2:	42ae      	cmp	r6, r5
   215d4:	dd09      	ble.n	215ea <ready_thread+0x76>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   215d6:	685a      	ldr	r2, [r3, #4]

	node->prev = prev;
	node->next = successor;
   215d8:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   215dc:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   215de:	6058      	str	r0, [r3, #4]

		queue_thread(thread);
		update_cache(0);
		flag_ipi();
	}
}
   215e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   215e4:	2000      	movs	r0, #0
   215e6:	f7ff bf91 	b.w	2150c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   215ea:	42a3      	cmp	r3, r4
   215ec:	d0e6      	beq.n	215bc <ready_thread+0x48>
   215ee:	681b      	ldr	r3, [r3, #0]
   215f0:	e7e3      	b.n	215ba <ready_thread+0x46>
}
   215f2:	bd70      	pop	{r4, r5, r6, pc}
   215f4:	20002958 	.word	0x20002958
   215f8:	0002b61d 	.word	0x0002b61d
   215fc:	00027c2a 	.word	0x00027c2a
   21600:	0002b43b 	.word	0x0002b43b
   21604:	20002f78 	.word	0x20002f78

00021608 <z_ready_thread>:

void z_ready_thread(struct k_thread *thread)
{
   21608:	b538      	push	{r3, r4, r5, lr}
   2160a:	4604      	mov	r4, r0
	__asm__ volatile(
   2160c:	f04f 0340 	mov.w	r3, #64	; 0x40
   21610:	f3ef 8511 	mrs	r5, BASEPRI
   21614:	f383 8812 	msr	BASEPRI_MAX, r3
   21618:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2161c:	4816      	ldr	r0, [pc, #88]	; (21678 <z_ready_thread+0x70>)
   2161e:	f7fe fe51 	bl	202c4 <z_spin_lock_valid>
   21622:	b968      	cbnz	r0, 21640 <z_ready_thread+0x38>
   21624:	4a15      	ldr	r2, [pc, #84]	; (2167c <z_ready_thread+0x74>)
   21626:	4916      	ldr	r1, [pc, #88]	; (21680 <z_ready_thread+0x78>)
   21628:	4816      	ldr	r0, [pc, #88]	; (21684 <z_ready_thread+0x7c>)
   2162a:	2394      	movs	r3, #148	; 0x94
   2162c:	f002 fe0a 	bl	24244 <assert_print>
   21630:	4911      	ldr	r1, [pc, #68]	; (21678 <z_ready_thread+0x70>)
   21632:	4815      	ldr	r0, [pc, #84]	; (21688 <z_ready_thread+0x80>)
   21634:	f002 fe06 	bl	24244 <assert_print>
   21638:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2163a:	4810      	ldr	r0, [pc, #64]	; (2167c <z_ready_thread+0x74>)
   2163c:	f002 fdfb 	bl	24236 <assert_post_action>
	z_spin_lock_set_owner(l);
   21640:	480d      	ldr	r0, [pc, #52]	; (21678 <z_ready_thread+0x70>)
   21642:	f7fe fe5d 	bl	20300 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (!thread_active_elsewhere(thread)) {
			ready_thread(thread);
   21646:	4620      	mov	r0, r4
   21648:	f7ff ff94 	bl	21574 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2164c:	480a      	ldr	r0, [pc, #40]	; (21678 <z_ready_thread+0x70>)
   2164e:	f7fe fe47 	bl	202e0 <z_spin_unlock_valid>
   21652:	b958      	cbnz	r0, 2166c <z_ready_thread+0x64>
   21654:	4a09      	ldr	r2, [pc, #36]	; (2167c <z_ready_thread+0x74>)
   21656:	490d      	ldr	r1, [pc, #52]	; (2168c <z_ready_thread+0x84>)
   21658:	480a      	ldr	r0, [pc, #40]	; (21684 <z_ready_thread+0x7c>)
   2165a:	23c3      	movs	r3, #195	; 0xc3
   2165c:	f002 fdf2 	bl	24244 <assert_print>
   21660:	4905      	ldr	r1, [pc, #20]	; (21678 <z_ready_thread+0x70>)
   21662:	480b      	ldr	r0, [pc, #44]	; (21690 <z_ready_thread+0x88>)
   21664:	f002 fdee 	bl	24244 <assert_print>
   21668:	21c3      	movs	r1, #195	; 0xc3
   2166a:	e7e6      	b.n	2163a <z_ready_thread+0x32>
	__asm__ volatile(
   2166c:	f385 8811 	msr	BASEPRI, r5
   21670:	f3bf 8f6f 	isb	sy
		}
	}
}
   21674:	bd38      	pop	{r3, r4, r5, pc}
   21676:	bf00      	nop
   21678:	20002fc0 	.word	0x20002fc0
   2167c:	0002801e 	.word	0x0002801e
   21680:	00028077 	.word	0x00028077
   21684:	00027c2a 	.word	0x00027c2a
   21688:	0002808c 	.word	0x0002808c
   2168c:	0002804b 	.word	0x0002804b
   21690:	00028062 	.word	0x00028062

00021694 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   21694:	b538      	push	{r3, r4, r5, lr}
   21696:	4604      	mov	r4, r0
	__asm__ volatile(
   21698:	f04f 0340 	mov.w	r3, #64	; 0x40
   2169c:	f3ef 8511 	mrs	r5, BASEPRI
   216a0:	f383 8812 	msr	BASEPRI_MAX, r3
   216a4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   216a8:	4817      	ldr	r0, [pc, #92]	; (21708 <z_unpend_thread_no_timeout+0x74>)
   216aa:	f7fe fe0b 	bl	202c4 <z_spin_lock_valid>
   216ae:	b968      	cbnz	r0, 216cc <z_unpend_thread_no_timeout+0x38>
   216b0:	4a16      	ldr	r2, [pc, #88]	; (2170c <z_unpend_thread_no_timeout+0x78>)
   216b2:	4917      	ldr	r1, [pc, #92]	; (21710 <z_unpend_thread_no_timeout+0x7c>)
   216b4:	4817      	ldr	r0, [pc, #92]	; (21714 <z_unpend_thread_no_timeout+0x80>)
   216b6:	2394      	movs	r3, #148	; 0x94
   216b8:	f002 fdc4 	bl	24244 <assert_print>
   216bc:	4912      	ldr	r1, [pc, #72]	; (21708 <z_unpend_thread_no_timeout+0x74>)
   216be:	4816      	ldr	r0, [pc, #88]	; (21718 <z_unpend_thread_no_timeout+0x84>)
   216c0:	f002 fdc0 	bl	24244 <assert_print>
   216c4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   216c6:	4811      	ldr	r0, [pc, #68]	; (2170c <z_unpend_thread_no_timeout+0x78>)
   216c8:	f002 fdb5 	bl	24236 <assert_post_action>
	z_spin_lock_set_owner(l);
   216cc:	480e      	ldr	r0, [pc, #56]	; (21708 <z_unpend_thread_no_timeout+0x74>)
   216ce:	f7fe fe17 	bl	20300 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		if (thread->base.pended_on != NULL) {
   216d2:	68a3      	ldr	r3, [r4, #8]
   216d4:	b113      	cbz	r3, 216dc <z_unpend_thread_no_timeout+0x48>
			unpend_thread_no_timeout(thread);
   216d6:	4620      	mov	r0, r4
   216d8:	f000 fc50 	bl	21f7c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   216dc:	480a      	ldr	r0, [pc, #40]	; (21708 <z_unpend_thread_no_timeout+0x74>)
   216de:	f7fe fdff 	bl	202e0 <z_spin_unlock_valid>
   216e2:	b958      	cbnz	r0, 216fc <z_unpend_thread_no_timeout+0x68>
   216e4:	4a09      	ldr	r2, [pc, #36]	; (2170c <z_unpend_thread_no_timeout+0x78>)
   216e6:	490d      	ldr	r1, [pc, #52]	; (2171c <z_unpend_thread_no_timeout+0x88>)
   216e8:	480a      	ldr	r0, [pc, #40]	; (21714 <z_unpend_thread_no_timeout+0x80>)
   216ea:	23c3      	movs	r3, #195	; 0xc3
   216ec:	f002 fdaa 	bl	24244 <assert_print>
   216f0:	4905      	ldr	r1, [pc, #20]	; (21708 <z_unpend_thread_no_timeout+0x74>)
   216f2:	480b      	ldr	r0, [pc, #44]	; (21720 <z_unpend_thread_no_timeout+0x8c>)
   216f4:	f002 fda6 	bl	24244 <assert_print>
   216f8:	21c3      	movs	r1, #195	; 0xc3
   216fa:	e7e4      	b.n	216c6 <z_unpend_thread_no_timeout+0x32>
	__asm__ volatile(
   216fc:	f385 8811 	msr	BASEPRI, r5
   21700:	f3bf 8f6f 	isb	sy
		}
	}
}
   21704:	bd38      	pop	{r3, r4, r5, pc}
   21706:	bf00      	nop
   21708:	20002fc0 	.word	0x20002fc0
   2170c:	0002801e 	.word	0x0002801e
   21710:	00028077 	.word	0x00028077
   21714:	00027c2a 	.word	0x00027c2a
   21718:	0002808c 	.word	0x0002808c
   2171c:	0002804b 	.word	0x0002804b
   21720:	00028062 	.word	0x00028062

00021724 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   21724:	b570      	push	{r4, r5, r6, lr}
   21726:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   21728:	460d      	mov	r5, r1
   2172a:	b9e9      	cbnz	r1, 21768 <z_reschedule+0x44>
   2172c:	f3ef 8605 	mrs	r6, IPSR
   21730:	b9d6      	cbnz	r6, 21768 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   21732:	4b18      	ldr	r3, [pc, #96]	; (21794 <z_reschedule+0x70>)
	if (resched(key.key) && need_swap()) {
   21734:	699a      	ldr	r2, [r3, #24]
   21736:	689b      	ldr	r3, [r3, #8]
   21738:	429a      	cmp	r2, r3
   2173a:	d015      	beq.n	21768 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2173c:	f7fe fdd0 	bl	202e0 <z_spin_unlock_valid>
   21740:	b968      	cbnz	r0, 2175e <z_reschedule+0x3a>
   21742:	4a15      	ldr	r2, [pc, #84]	; (21798 <z_reschedule+0x74>)
   21744:	4915      	ldr	r1, [pc, #84]	; (2179c <z_reschedule+0x78>)
   21746:	4816      	ldr	r0, [pc, #88]	; (217a0 <z_reschedule+0x7c>)
   21748:	23e2      	movs	r3, #226	; 0xe2
   2174a:	f002 fd7b 	bl	24244 <assert_print>
   2174e:	4621      	mov	r1, r4
   21750:	4814      	ldr	r0, [pc, #80]	; (217a4 <z_reschedule+0x80>)
   21752:	f002 fd77 	bl	24244 <assert_print>
   21756:	21e2      	movs	r1, #226	; 0xe2
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21758:	480f      	ldr	r0, [pc, #60]	; (21798 <z_reschedule+0x74>)
   2175a:	f002 fd6c 	bl	24236 <assert_post_action>
	ret = arch_swap(key);
   2175e:	4630      	mov	r0, r6
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
   21760:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21764:	f7f3 ba02 	b.w	14b6c <arch_swap>
   21768:	4620      	mov	r0, r4
   2176a:	f7fe fdb9 	bl	202e0 <z_spin_unlock_valid>
   2176e:	b958      	cbnz	r0, 21788 <z_reschedule+0x64>
   21770:	4a09      	ldr	r2, [pc, #36]	; (21798 <z_reschedule+0x74>)
   21772:	490a      	ldr	r1, [pc, #40]	; (2179c <z_reschedule+0x78>)
   21774:	480a      	ldr	r0, [pc, #40]	; (217a0 <z_reschedule+0x7c>)
   21776:	23c3      	movs	r3, #195	; 0xc3
   21778:	f002 fd64 	bl	24244 <assert_print>
   2177c:	4621      	mov	r1, r4
   2177e:	4809      	ldr	r0, [pc, #36]	; (217a4 <z_reschedule+0x80>)
   21780:	f002 fd60 	bl	24244 <assert_print>
   21784:	21c3      	movs	r1, #195	; 0xc3
   21786:	e7e7      	b.n	21758 <z_reschedule+0x34>
   21788:	f385 8811 	msr	BASEPRI, r5
   2178c:	f3bf 8f6f 	isb	sy
   21790:	bd70      	pop	{r4, r5, r6, pc}
   21792:	bf00      	nop
   21794:	20002f78 	.word	0x20002f78
   21798:	0002801e 	.word	0x0002801e
   2179c:	0002804b 	.word	0x0002804b
   217a0:	00027c2a 	.word	0x00027c2a
   217a4:	00028062 	.word	0x00028062

000217a8 <z_sched_start>:
{
   217a8:	b538      	push	{r3, r4, r5, lr}
   217aa:	4604      	mov	r4, r0
	__asm__ volatile(
   217ac:	f04f 0340 	mov.w	r3, #64	; 0x40
   217b0:	f3ef 8511 	mrs	r5, BASEPRI
   217b4:	f383 8812 	msr	BASEPRI_MAX, r3
   217b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   217bc:	481c      	ldr	r0, [pc, #112]	; (21830 <z_sched_start+0x88>)
   217be:	f7fe fd81 	bl	202c4 <z_spin_lock_valid>
   217c2:	b968      	cbnz	r0, 217e0 <z_sched_start+0x38>
   217c4:	4a1b      	ldr	r2, [pc, #108]	; (21834 <z_sched_start+0x8c>)
   217c6:	491c      	ldr	r1, [pc, #112]	; (21838 <z_sched_start+0x90>)
   217c8:	481c      	ldr	r0, [pc, #112]	; (2183c <z_sched_start+0x94>)
   217ca:	2394      	movs	r3, #148	; 0x94
   217cc:	f002 fd3a 	bl	24244 <assert_print>
   217d0:	4917      	ldr	r1, [pc, #92]	; (21830 <z_sched_start+0x88>)
   217d2:	481b      	ldr	r0, [pc, #108]	; (21840 <z_sched_start+0x98>)
   217d4:	f002 fd36 	bl	24244 <assert_print>
   217d8:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   217da:	4816      	ldr	r0, [pc, #88]	; (21834 <z_sched_start+0x8c>)
   217dc:	f002 fd2b 	bl	24236 <assert_post_action>
	z_spin_lock_set_owner(l);
   217e0:	4813      	ldr	r0, [pc, #76]	; (21830 <z_sched_start+0x88>)
   217e2:	f7fe fd8d 	bl	20300 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   217e6:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
   217e8:	075a      	lsls	r2, r3, #29
   217ea:	d414      	bmi.n	21816 <z_sched_start+0x6e>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   217ec:	4810      	ldr	r0, [pc, #64]	; (21830 <z_sched_start+0x88>)
   217ee:	f7fe fd77 	bl	202e0 <z_spin_unlock_valid>
   217f2:	b958      	cbnz	r0, 2180c <z_sched_start+0x64>
   217f4:	4a0f      	ldr	r2, [pc, #60]	; (21834 <z_sched_start+0x8c>)
   217f6:	4913      	ldr	r1, [pc, #76]	; (21844 <z_sched_start+0x9c>)
   217f8:	4810      	ldr	r0, [pc, #64]	; (2183c <z_sched_start+0x94>)
   217fa:	23c3      	movs	r3, #195	; 0xc3
   217fc:	f002 fd22 	bl	24244 <assert_print>
   21800:	490b      	ldr	r1, [pc, #44]	; (21830 <z_sched_start+0x88>)
   21802:	4811      	ldr	r0, [pc, #68]	; (21848 <z_sched_start+0xa0>)
   21804:	f002 fd1e 	bl	24244 <assert_print>
   21808:	21c3      	movs	r1, #195	; 0xc3
   2180a:	e7e6      	b.n	217da <z_sched_start+0x32>
	__asm__ volatile(
   2180c:	f385 8811 	msr	BASEPRI, r5
   21810:	f3bf 8f6f 	isb	sy
}
   21814:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21816:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   2181a:	4620      	mov	r0, r4
   2181c:	7363      	strb	r3, [r4, #13]
   2181e:	f7ff fea9 	bl	21574 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   21822:	4629      	mov	r1, r5
   21824:	4802      	ldr	r0, [pc, #8]	; (21830 <z_sched_start+0x88>)
}
   21826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   2182a:	f7ff bf7b 	b.w	21724 <z_reschedule>
   2182e:	bf00      	nop
   21830:	20002fc0 	.word	0x20002fc0
   21834:	0002801e 	.word	0x0002801e
   21838:	00028077 	.word	0x00028077
   2183c:	00027c2a 	.word	0x00027c2a
   21840:	0002808c 	.word	0x0002808c
   21844:	0002804b 	.word	0x0002804b
   21848:	00028062 	.word	0x00028062

0002184c <k_sched_lock>:
		signal_pending_ipi();
	}
}

void k_sched_lock(void)
{
   2184c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2184e:	f04f 0340 	mov.w	r3, #64	; 0x40
   21852:	f3ef 8411 	mrs	r4, BASEPRI
   21856:	f383 8812 	msr	BASEPRI_MAX, r3
   2185a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2185e:	4825      	ldr	r0, [pc, #148]	; (218f4 <k_sched_lock+0xa8>)
   21860:	f7fe fd30 	bl	202c4 <z_spin_lock_valid>
   21864:	b960      	cbnz	r0, 21880 <k_sched_lock+0x34>
   21866:	4a24      	ldr	r2, [pc, #144]	; (218f8 <k_sched_lock+0xac>)
   21868:	4924      	ldr	r1, [pc, #144]	; (218fc <k_sched_lock+0xb0>)
   2186a:	4825      	ldr	r0, [pc, #148]	; (21900 <k_sched_lock+0xb4>)
   2186c:	2394      	movs	r3, #148	; 0x94
   2186e:	f002 fce9 	bl	24244 <assert_print>
   21872:	4920      	ldr	r1, [pc, #128]	; (218f4 <k_sched_lock+0xa8>)
   21874:	4823      	ldr	r0, [pc, #140]	; (21904 <k_sched_lock+0xb8>)
   21876:	f002 fce5 	bl	24244 <assert_print>
   2187a:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2187c:	481e      	ldr	r0, [pc, #120]	; (218f8 <k_sched_lock+0xac>)
   2187e:	e010      	b.n	218a2 <k_sched_lock+0x56>
	z_spin_lock_set_owner(l);
   21880:	481c      	ldr	r0, [pc, #112]	; (218f4 <k_sched_lock+0xa8>)
   21882:	f7fe fd3d 	bl	20300 <z_spin_lock_set_owner>
   21886:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   2188a:	b163      	cbz	r3, 218a6 <k_sched_lock+0x5a>
   2188c:	491e      	ldr	r1, [pc, #120]	; (21908 <k_sched_lock+0xbc>)
   2188e:	4a1f      	ldr	r2, [pc, #124]	; (2190c <k_sched_lock+0xc0>)
   21890:	481b      	ldr	r0, [pc, #108]	; (21900 <k_sched_lock+0xb4>)
   21892:	23fd      	movs	r3, #253	; 0xfd
   21894:	f002 fcd6 	bl	24244 <assert_print>
   21898:	481d      	ldr	r0, [pc, #116]	; (21910 <k_sched_lock+0xc4>)
   2189a:	f002 fcd3 	bl	24244 <assert_print>
   2189e:	21fd      	movs	r1, #253	; 0xfd
   218a0:	481a      	ldr	r0, [pc, #104]	; (2190c <k_sched_lock+0xc0>)
   218a2:	f002 fcc8 	bl	24236 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   218a6:	4b1b      	ldr	r3, [pc, #108]	; (21914 <k_sched_lock+0xc8>)
   218a8:	689a      	ldr	r2, [r3, #8]
   218aa:	7bd3      	ldrb	r3, [r2, #15]
   218ac:	2b01      	cmp	r3, #1
   218ae:	d10a      	bne.n	218c6 <k_sched_lock+0x7a>
   218b0:	4919      	ldr	r1, [pc, #100]	; (21918 <k_sched_lock+0xcc>)
   218b2:	4a16      	ldr	r2, [pc, #88]	; (2190c <k_sched_lock+0xc0>)
   218b4:	4812      	ldr	r0, [pc, #72]	; (21900 <k_sched_lock+0xb4>)
   218b6:	23fe      	movs	r3, #254	; 0xfe
   218b8:	f002 fcc4 	bl	24244 <assert_print>
   218bc:	4814      	ldr	r0, [pc, #80]	; (21910 <k_sched_lock+0xc4>)
   218be:	f002 fcc1 	bl	24244 <assert_print>
   218c2:	21fe      	movs	r1, #254	; 0xfe
   218c4:	e7ec      	b.n	218a0 <k_sched_lock+0x54>
	--_current->base.sched_locked;
   218c6:	3b01      	subs	r3, #1
   218c8:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   218ca:	480a      	ldr	r0, [pc, #40]	; (218f4 <k_sched_lock+0xa8>)
   218cc:	f7fe fd08 	bl	202e0 <z_spin_unlock_valid>
   218d0:	b958      	cbnz	r0, 218ea <k_sched_lock+0x9e>
   218d2:	4a09      	ldr	r2, [pc, #36]	; (218f8 <k_sched_lock+0xac>)
   218d4:	4911      	ldr	r1, [pc, #68]	; (2191c <k_sched_lock+0xd0>)
   218d6:	480a      	ldr	r0, [pc, #40]	; (21900 <k_sched_lock+0xb4>)
   218d8:	23c3      	movs	r3, #195	; 0xc3
   218da:	f002 fcb3 	bl	24244 <assert_print>
   218de:	4905      	ldr	r1, [pc, #20]	; (218f4 <k_sched_lock+0xa8>)
   218e0:	480f      	ldr	r0, [pc, #60]	; (21920 <k_sched_lock+0xd4>)
   218e2:	f002 fcaf 	bl	24244 <assert_print>
   218e6:	21c3      	movs	r1, #195	; 0xc3
   218e8:	e7c8      	b.n	2187c <k_sched_lock+0x30>
	__asm__ volatile(
   218ea:	f384 8811 	msr	BASEPRI, r4
   218ee:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   218f2:	bd10      	pop	{r4, pc}
   218f4:	20002fc0 	.word	0x20002fc0
   218f8:	0002801e 	.word	0x0002801e
   218fc:	00028077 	.word	0x00028077
   21900:	00027c2a 	.word	0x00027c2a
   21904:	0002808c 	.word	0x0002808c
   21908:	0002b1ce 	.word	0x0002b1ce
   2190c:	0002b63e 	.word	0x0002b63e
   21910:	0002a220 	.word	0x0002a220
   21914:	20002f78 	.word	0x20002f78
   21918:	0002b669 	.word	0x0002b669
   2191c:	0002804b 	.word	0x0002804b
   21920:	00028062 	.word	0x00028062

00021924 <k_sched_unlock>:

void k_sched_unlock(void)
{
   21924:	b510      	push	{r4, lr}
	__asm__ volatile(
   21926:	f04f 0340 	mov.w	r3, #64	; 0x40
   2192a:	f3ef 8411 	mrs	r4, BASEPRI
   2192e:	f383 8812 	msr	BASEPRI_MAX, r3
   21932:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21936:	4829      	ldr	r0, [pc, #164]	; (219dc <k_sched_unlock+0xb8>)
   21938:	f7fe fcc4 	bl	202c4 <z_spin_lock_valid>
   2193c:	b960      	cbnz	r0, 21958 <k_sched_unlock+0x34>
   2193e:	4a28      	ldr	r2, [pc, #160]	; (219e0 <k_sched_unlock+0xbc>)
   21940:	4928      	ldr	r1, [pc, #160]	; (219e4 <k_sched_unlock+0xc0>)
   21942:	4829      	ldr	r0, [pc, #164]	; (219e8 <k_sched_unlock+0xc4>)
   21944:	2394      	movs	r3, #148	; 0x94
   21946:	f002 fc7d 	bl	24244 <assert_print>
   2194a:	4924      	ldr	r1, [pc, #144]	; (219dc <k_sched_unlock+0xb8>)
   2194c:	4827      	ldr	r0, [pc, #156]	; (219ec <k_sched_unlock+0xc8>)
   2194e:	f002 fc79 	bl	24244 <assert_print>
   21952:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21954:	4822      	ldr	r0, [pc, #136]	; (219e0 <k_sched_unlock+0xbc>)
   21956:	e013      	b.n	21980 <k_sched_unlock+0x5c>
	z_spin_lock_set_owner(l);
   21958:	4820      	ldr	r0, [pc, #128]	; (219dc <k_sched_unlock+0xb8>)
   2195a:	f7fe fcd1 	bl	20300 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		__ASSERT(_current->base.sched_locked != 0U, "");
   2195e:	4b24      	ldr	r3, [pc, #144]	; (219f0 <k_sched_unlock+0xcc>)
   21960:	689a      	ldr	r2, [r3, #8]
   21962:	7bd3      	ldrb	r3, [r2, #15]
   21964:	b973      	cbnz	r3, 21984 <k_sched_unlock+0x60>
   21966:	4923      	ldr	r1, [pc, #140]	; (219f4 <k_sched_unlock+0xd0>)
   21968:	4a23      	ldr	r2, [pc, #140]	; (219f8 <k_sched_unlock+0xd4>)
   2196a:	481f      	ldr	r0, [pc, #124]	; (219e8 <k_sched_unlock+0xc4>)
   2196c:	f240 33eb 	movw	r3, #1003	; 0x3eb
   21970:	f002 fc68 	bl	24244 <assert_print>
   21974:	4821      	ldr	r0, [pc, #132]	; (219fc <k_sched_unlock+0xd8>)
   21976:	f002 fc65 	bl	24244 <assert_print>
   2197a:	f240 31eb 	movw	r1, #1003	; 0x3eb
   2197e:	481e      	ldr	r0, [pc, #120]	; (219f8 <k_sched_unlock+0xd4>)
   21980:	f002 fc59 	bl	24236 <assert_post_action>
   21984:	f3ef 8005 	mrs	r0, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   21988:	b160      	cbz	r0, 219a4 <k_sched_unlock+0x80>
   2198a:	491d      	ldr	r1, [pc, #116]	; (21a00 <k_sched_unlock+0xdc>)
   2198c:	4a1a      	ldr	r2, [pc, #104]	; (219f8 <k_sched_unlock+0xd4>)
   2198e:	4816      	ldr	r0, [pc, #88]	; (219e8 <k_sched_unlock+0xc4>)
   21990:	f44f 737b 	mov.w	r3, #1004	; 0x3ec
   21994:	f002 fc56 	bl	24244 <assert_print>
   21998:	4818      	ldr	r0, [pc, #96]	; (219fc <k_sched_unlock+0xd8>)
   2199a:	f002 fc53 	bl	24244 <assert_print>
   2199e:	f44f 717b 	mov.w	r1, #1004	; 0x3ec
   219a2:	e7ec      	b.n	2197e <k_sched_unlock+0x5a>

		++_current->base.sched_locked;
   219a4:	3301      	adds	r3, #1
   219a6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   219a8:	f7ff fdb0 	bl	2150c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   219ac:	480b      	ldr	r0, [pc, #44]	; (219dc <k_sched_unlock+0xb8>)
   219ae:	f7fe fc97 	bl	202e0 <z_spin_unlock_valid>
   219b2:	b958      	cbnz	r0, 219cc <k_sched_unlock+0xa8>
   219b4:	4a0a      	ldr	r2, [pc, #40]	; (219e0 <k_sched_unlock+0xbc>)
   219b6:	4913      	ldr	r1, [pc, #76]	; (21a04 <k_sched_unlock+0xe0>)
   219b8:	480b      	ldr	r0, [pc, #44]	; (219e8 <k_sched_unlock+0xc4>)
   219ba:	23c3      	movs	r3, #195	; 0xc3
   219bc:	f002 fc42 	bl	24244 <assert_print>
   219c0:	4906      	ldr	r1, [pc, #24]	; (219dc <k_sched_unlock+0xb8>)
   219c2:	4811      	ldr	r0, [pc, #68]	; (21a08 <k_sched_unlock+0xe4>)
   219c4:	f002 fc3e 	bl	24244 <assert_print>
   219c8:	21c3      	movs	r1, #195	; 0xc3
   219ca:	e7c3      	b.n	21954 <k_sched_unlock+0x30>
	__asm__ volatile(
   219cc:	f384 8811 	msr	BASEPRI, r4
   219d0:	f3bf 8f6f 	isb	sy
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   219d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   219d8:	f005 b873 	b.w	26ac2 <z_reschedule_unlocked>
   219dc:	20002fc0 	.word	0x20002fc0
   219e0:	0002801e 	.word	0x0002801e
   219e4:	00028077 	.word	0x00028077
   219e8:	00027c2a 	.word	0x00027c2a
   219ec:	0002808c 	.word	0x0002808c
   219f0:	20002f78 	.word	0x20002f78
   219f4:	0002b69a 	.word	0x0002b69a
   219f8:	0002b43b 	.word	0x0002b43b
   219fc:	0002a220 	.word	0x0002a220
   21a00:	0002b1ce 	.word	0x0002b1ce
   21a04:	0002804b 	.word	0x0002804b
   21a08:	00028062 	.word	0x00028062

00021a0c <z_priq_dumb_remove>:
#endif
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
   21a0c:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21a0e:	4b0b      	ldr	r3, [pc, #44]	; (21a3c <z_priq_dumb_remove+0x30>)
   21a10:	4299      	cmp	r1, r3
   21a12:	d10b      	bne.n	21a2c <z_priq_dumb_remove+0x20>
   21a14:	490a      	ldr	r1, [pc, #40]	; (21a40 <z_priq_dumb_remove+0x34>)
   21a16:	480b      	ldr	r0, [pc, #44]	; (21a44 <z_priq_dumb_remove+0x38>)
   21a18:	4a0b      	ldr	r2, [pc, #44]	; (21a48 <z_priq_dumb_remove+0x3c>)
   21a1a:	f240 437b 	movw	r3, #1147	; 0x47b
   21a1e:	f002 fc11 	bl	24244 <assert_print>
   21a22:	4809      	ldr	r0, [pc, #36]	; (21a48 <z_priq_dumb_remove+0x3c>)
   21a24:	f240 417b 	movw	r1, #1147	; 0x47b
   21a28:	f002 fc05 	bl	24236 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   21a2c:	e9d1 3200 	ldrd	r3, r2, [r1]

	prev->next = next;
   21a30:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   21a32:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   21a34:	2300      	movs	r3, #0
	node->prev = NULL;
   21a36:	e9c1 3300 	strd	r3, r3, [r1]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   21a3a:	bd08      	pop	{r3, pc}
   21a3c:	20002958 	.word	0x20002958
   21a40:	0002b61d 	.word	0x0002b61d
   21a44:	00027c2a 	.word	0x00027c2a
   21a48:	0002b43b 	.word	0x0002b43b

00021a4c <move_thread_to_end_of_prio_q>:
{
   21a4c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   21a4e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   21a52:	7b43      	ldrb	r3, [r0, #13]
   21a54:	2a00      	cmp	r2, #0
{
   21a56:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   21a58:	da06      	bge.n	21a68 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21a5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21a5e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21a60:	4601      	mov	r1, r0
   21a62:	481d      	ldr	r0, [pc, #116]	; (21ad8 <move_thread_to_end_of_prio_q+0x8c>)
   21a64:	f7ff ffd2 	bl	21a0c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   21a68:	7b63      	ldrb	r3, [r4, #13]
   21a6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   21a6e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21a70:	4b1a      	ldr	r3, [pc, #104]	; (21adc <move_thread_to_end_of_prio_q+0x90>)
   21a72:	429c      	cmp	r4, r3
   21a74:	d109      	bne.n	21a8a <move_thread_to_end_of_prio_q+0x3e>
   21a76:	491a      	ldr	r1, [pc, #104]	; (21ae0 <move_thread_to_end_of_prio_q+0x94>)
   21a78:	481a      	ldr	r0, [pc, #104]	; (21ae4 <move_thread_to_end_of_prio_q+0x98>)
   21a7a:	4a1b      	ldr	r2, [pc, #108]	; (21ae8 <move_thread_to_end_of_prio_q+0x9c>)
   21a7c:	23bc      	movs	r3, #188	; 0xbc
   21a7e:	f002 fbe1 	bl	24244 <assert_print>
   21a82:	4819      	ldr	r0, [pc, #100]	; (21ae8 <move_thread_to_end_of_prio_q+0x9c>)
   21a84:	21bc      	movs	r1, #188	; 0xbc
   21a86:	f002 fbd6 	bl	24236 <assert_post_action>
	return list->head == list;
   21a8a:	4a18      	ldr	r2, [pc, #96]	; (21aec <move_thread_to_end_of_prio_q+0xa0>)
   21a8c:	4611      	mov	r1, r2
	return (node == list->tail) ? NULL : node->next;
   21a8e:	6a10      	ldr	r0, [r2, #32]
	return list->head == list;
   21a90:	f851 3f1c 	ldr.w	r3, [r1, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21a94:	428b      	cmp	r3, r1
   21a96:	bf08      	it	eq
   21a98:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21a9a:	b923      	cbnz	r3, 21aa6 <move_thread_to_end_of_prio_q+0x5a>
	node->prev = tail;
   21a9c:	e9c4 1000 	strd	r1, r0, [r4]
	tail->next = node;
   21aa0:	6004      	str	r4, [r0, #0]
	list->tail = node;
   21aa2:	6214      	str	r4, [r2, #32]
}
   21aa4:	e00c      	b.n	21ac0 <move_thread_to_end_of_prio_q+0x74>
	int32_t b1 = thread_1->base.prio;
   21aa6:	f994 500e 	ldrsb.w	r5, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   21aaa:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   21aae:	42b5      	cmp	r5, r6
   21ab0:	d00e      	beq.n	21ad0 <move_thread_to_end_of_prio_q+0x84>
		if (z_sched_prio_cmp(thread, t) > 0) {
   21ab2:	42ae      	cmp	r6, r5
   21ab4:	dd0c      	ble.n	21ad0 <move_thread_to_end_of_prio_q+0x84>
	sys_dnode_t *const prev = successor->prev;
   21ab6:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   21ab8:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   21abc:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   21abe:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   21ac0:	6890      	ldr	r0, [r2, #8]
   21ac2:	1b03      	subs	r3, r0, r4
   21ac4:	4258      	negs	r0, r3
}
   21ac6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   21aca:	4158      	adcs	r0, r3
   21acc:	f7ff bd1e 	b.w	2150c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   21ad0:	4298      	cmp	r0, r3
   21ad2:	d0e3      	beq.n	21a9c <move_thread_to_end_of_prio_q+0x50>
   21ad4:	681b      	ldr	r3, [r3, #0]
   21ad6:	e7e0      	b.n	21a9a <move_thread_to_end_of_prio_q+0x4e>
   21ad8:	20002f94 	.word	0x20002f94
   21adc:	20002958 	.word	0x20002958
   21ae0:	0002b61d 	.word	0x0002b61d
   21ae4:	00027c2a 	.word	0x00027c2a
   21ae8:	0002b43b 	.word	0x0002b43b
   21aec:	20002f78 	.word	0x20002f78

00021af0 <z_time_slice>:
{
   21af0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   21af2:	f04f 0340 	mov.w	r3, #64	; 0x40
   21af6:	f3ef 8511 	mrs	r5, BASEPRI
   21afa:	f383 8812 	msr	BASEPRI_MAX, r3
   21afe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21b02:	4823      	ldr	r0, [pc, #140]	; (21b90 <z_time_slice+0xa0>)
   21b04:	f7fe fbde 	bl	202c4 <z_spin_lock_valid>
   21b08:	b968      	cbnz	r0, 21b26 <z_time_slice+0x36>
   21b0a:	4a22      	ldr	r2, [pc, #136]	; (21b94 <z_time_slice+0xa4>)
   21b0c:	4922      	ldr	r1, [pc, #136]	; (21b98 <z_time_slice+0xa8>)
   21b0e:	4823      	ldr	r0, [pc, #140]	; (21b9c <z_time_slice+0xac>)
   21b10:	2394      	movs	r3, #148	; 0x94
   21b12:	f002 fb97 	bl	24244 <assert_print>
   21b16:	491e      	ldr	r1, [pc, #120]	; (21b90 <z_time_slice+0xa0>)
   21b18:	4821      	ldr	r0, [pc, #132]	; (21ba0 <z_time_slice+0xb0>)
   21b1a:	f002 fb93 	bl	24244 <assert_print>
   21b1e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21b20:	481c      	ldr	r0, [pc, #112]	; (21b94 <z_time_slice+0xa4>)
   21b22:	f002 fb88 	bl	24236 <assert_post_action>
	z_spin_lock_set_owner(l);
   21b26:	481a      	ldr	r0, [pc, #104]	; (21b90 <z_time_slice+0xa0>)
   21b28:	f7fe fbea 	bl	20300 <z_spin_lock_set_owner>
	struct k_thread *curr = _current;
   21b2c:	4b1d      	ldr	r3, [pc, #116]	; (21ba4 <z_time_slice+0xb4>)
	if (pending_current == curr) {
   21b2e:	4a1e      	ldr	r2, [pc, #120]	; (21ba8 <z_time_slice+0xb8>)
	struct k_thread *curr = _current;
   21b30:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
   21b32:	6810      	ldr	r0, [r2, #0]
   21b34:	42a0      	cmp	r0, r4
   21b36:	d111      	bne.n	21b5c <z_time_slice+0x6c>
		z_reset_time_slice(curr);
   21b38:	f7ff fcc0 	bl	214bc <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21b3c:	4814      	ldr	r0, [pc, #80]	; (21b90 <z_time_slice+0xa0>)
   21b3e:	f7fe fbcf 	bl	202e0 <z_spin_unlock_valid>
   21b42:	b9f8      	cbnz	r0, 21b84 <z_time_slice+0x94>
   21b44:	4a13      	ldr	r2, [pc, #76]	; (21b94 <z_time_slice+0xa4>)
   21b46:	4919      	ldr	r1, [pc, #100]	; (21bac <z_time_slice+0xbc>)
   21b48:	4814      	ldr	r0, [pc, #80]	; (21b9c <z_time_slice+0xac>)
   21b4a:	23c3      	movs	r3, #195	; 0xc3
   21b4c:	f002 fb7a 	bl	24244 <assert_print>
   21b50:	490f      	ldr	r1, [pc, #60]	; (21b90 <z_time_slice+0xa0>)
   21b52:	4817      	ldr	r0, [pc, #92]	; (21bb0 <z_time_slice+0xc0>)
   21b54:	f002 fb76 	bl	24244 <assert_print>
   21b58:	21c3      	movs	r1, #195	; 0xc3
   21b5a:	e7e1      	b.n	21b20 <z_time_slice+0x30>
	pending_current = NULL;
   21b5c:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   21b5e:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
   21b60:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
   21b62:	4a14      	ldr	r2, [pc, #80]	; (21bb4 <z_time_slice+0xc4>)
   21b64:	5cd3      	ldrb	r3, [r2, r3]
   21b66:	2b00      	cmp	r3, #0
   21b68:	d0e8      	beq.n	21b3c <z_time_slice+0x4c>
   21b6a:	4620      	mov	r0, r4
   21b6c:	f7ff fc58 	bl	21420 <sliceable>
   21b70:	2800      	cmp	r0, #0
   21b72:	d0e3      	beq.n	21b3c <z_time_slice+0x4c>
		if (!z_is_thread_prevented_from_running(curr)) {
   21b74:	7b63      	ldrb	r3, [r4, #13]
   21b76:	06db      	lsls	r3, r3, #27
   21b78:	d102      	bne.n	21b80 <z_time_slice+0x90>
			move_thread_to_end_of_prio_q(curr);
   21b7a:	4620      	mov	r0, r4
   21b7c:	f7ff ff66 	bl	21a4c <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
   21b80:	4620      	mov	r0, r4
   21b82:	e7d9      	b.n	21b38 <z_time_slice+0x48>
	__asm__ volatile(
   21b84:	f385 8811 	msr	BASEPRI, r5
   21b88:	f3bf 8f6f 	isb	sy
}
   21b8c:	bd38      	pop	{r3, r4, r5, pc}
   21b8e:	bf00      	nop
   21b90:	20002fc0 	.word	0x20002fc0
   21b94:	0002801e 	.word	0x0002801e
   21b98:	00028077 	.word	0x00028077
   21b9c:	00027c2a 	.word	0x00027c2a
   21ba0:	0002808c 	.word	0x0002808c
   21ba4:	20002f78 	.word	0x20002f78
   21ba8:	20002fb4 	.word	0x20002fb4
   21bac:	0002804b 	.word	0x0002804b
   21bb0:	00028062 	.word	0x00028062
   21bb4:	200035b5 	.word	0x200035b5

00021bb8 <unready_thread>:
{
   21bb8:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   21bba:	f990 200d 	ldrsb.w	r2, [r0, #13]
   21bbe:	7b43      	ldrb	r3, [r0, #13]
   21bc0:	2a00      	cmp	r2, #0
{
   21bc2:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   21bc4:	da06      	bge.n	21bd4 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21bca:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21bcc:	4601      	mov	r1, r0
   21bce:	4806      	ldr	r0, [pc, #24]	; (21be8 <unready_thread+0x30>)
   21bd0:	f7ff ff1c 	bl	21a0c <z_priq_dumb_remove>
	update_cache(thread == _current);
   21bd4:	4b05      	ldr	r3, [pc, #20]	; (21bec <unready_thread+0x34>)
   21bd6:	6898      	ldr	r0, [r3, #8]
   21bd8:	1b03      	subs	r3, r0, r4
   21bda:	4258      	negs	r0, r3
}
   21bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   21be0:	4158      	adcs	r0, r3
   21be2:	f7ff bc93 	b.w	2150c <update_cache>
   21be6:	bf00      	nop
   21be8:	20002f94 	.word	0x20002f94
   21bec:	20002f78 	.word	0x20002f78

00021bf0 <add_to_waitq_locked>:
{
   21bf0:	b538      	push	{r3, r4, r5, lr}
   21bf2:	4604      	mov	r4, r0
   21bf4:	460d      	mov	r5, r1
	unready_thread(thread);
   21bf6:	f7ff ffdf 	bl	21bb8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   21bfa:	7b63      	ldrb	r3, [r4, #13]
   21bfc:	f043 0302 	orr.w	r3, r3, #2
   21c00:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   21c02:	b34d      	cbz	r5, 21c58 <add_to_waitq_locked+0x68>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21c04:	4b15      	ldr	r3, [pc, #84]	; (21c5c <add_to_waitq_locked+0x6c>)
		thread->base.pended_on = wait_q;
   21c06:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21c08:	429c      	cmp	r4, r3
   21c0a:	d109      	bne.n	21c20 <add_to_waitq_locked+0x30>
   21c0c:	4914      	ldr	r1, [pc, #80]	; (21c60 <add_to_waitq_locked+0x70>)
   21c0e:	4815      	ldr	r0, [pc, #84]	; (21c64 <add_to_waitq_locked+0x74>)
   21c10:	4a15      	ldr	r2, [pc, #84]	; (21c68 <add_to_waitq_locked+0x78>)
   21c12:	23bc      	movs	r3, #188	; 0xbc
   21c14:	f002 fb16 	bl	24244 <assert_print>
   21c18:	4813      	ldr	r0, [pc, #76]	; (21c68 <add_to_waitq_locked+0x78>)
   21c1a:	21bc      	movs	r1, #188	; 0xbc
   21c1c:	f002 fb0b 	bl	24236 <assert_post_action>
	return list->head == list;
   21c20:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21c22:	429d      	cmp	r5, r3
   21c24:	d109      	bne.n	21c3a <add_to_waitq_locked+0x4a>
	sys_dnode_t *const tail = list->tail;
   21c26:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   21c28:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   21c2c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   21c2e:	606c      	str	r4, [r5, #4]
}
   21c30:	e012      	b.n	21c58 <add_to_waitq_locked+0x68>
	return (node == list->tail) ? NULL : node->next;
   21c32:	686a      	ldr	r2, [r5, #4]
   21c34:	4293      	cmp	r3, r2
   21c36:	d0f6      	beq.n	21c26 <add_to_waitq_locked+0x36>
   21c38:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21c3a:	2b00      	cmp	r3, #0
   21c3c:	d0f3      	beq.n	21c26 <add_to_waitq_locked+0x36>
	int32_t b1 = thread_1->base.prio;
   21c3e:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   21c42:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   21c46:	428a      	cmp	r2, r1
   21c48:	d0f3      	beq.n	21c32 <add_to_waitq_locked+0x42>
		if (z_sched_prio_cmp(thread, t) > 0) {
   21c4a:	4291      	cmp	r1, r2
   21c4c:	ddf1      	ble.n	21c32 <add_to_waitq_locked+0x42>
	sys_dnode_t *const prev = successor->prev;
   21c4e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   21c50:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   21c54:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   21c56:	605c      	str	r4, [r3, #4]
}
   21c58:	bd38      	pop	{r3, r4, r5, pc}
   21c5a:	bf00      	nop
   21c5c:	20002958 	.word	0x20002958
   21c60:	0002b61d 	.word	0x0002b61d
   21c64:	00027c2a 	.word	0x00027c2a
   21c68:	0002b43b 	.word	0x0002b43b

00021c6c <pend_locked>:
{
   21c6c:	b570      	push	{r4, r5, r6, lr}
   21c6e:	4615      	mov	r5, r2
   21c70:	461c      	mov	r4, r3
   21c72:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   21c74:	f7ff ffbc 	bl	21bf0 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21c78:	f1b4 3fff 	cmp.w	r4, #4294967295
   21c7c:	bf08      	it	eq
   21c7e:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   21c82:	d008      	beq.n	21c96 <pend_locked+0x2a>
   21c84:	462a      	mov	r2, r5
   21c86:	4623      	mov	r3, r4
   21c88:	f106 0018 	add.w	r0, r6, #24
   21c8c:	4902      	ldr	r1, [pc, #8]	; (21c98 <pend_locked+0x2c>)
}
   21c8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   21c92:	f000 bde7 	b.w	22864 <z_add_timeout>
   21c96:	bd70      	pop	{r4, r5, r6, pc}
   21c98:	00026ad7 	.word	0x00026ad7

00021c9c <z_pend_curr>:
{
   21c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	pending_current = _current;
   21ca0:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 21d84 <z_pend_curr+0xe8>
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   21ca4:	4c2d      	ldr	r4, [pc, #180]	; (21d5c <z_pend_curr+0xc0>)
	pending_current = _current;
   21ca6:	4b2e      	ldr	r3, [pc, #184]	; (21d60 <z_pend_curr+0xc4>)
{
   21ca8:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   21caa:	42a0      	cmp	r0, r4
	pending_current = _current;
   21cac:	f8da 2008 	ldr.w	r2, [sl, #8]
   21cb0:	601a      	str	r2, [r3, #0]
{
   21cb2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   21cb6:	4605      	mov	r5, r0
   21cb8:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(sizeof(sched_spinlock) == 0 || lock != &sched_spinlock);
   21cba:	d10b      	bne.n	21cd4 <z_pend_curr+0x38>
   21cbc:	4929      	ldr	r1, [pc, #164]	; (21d64 <z_pend_curr+0xc8>)
   21cbe:	482a      	ldr	r0, [pc, #168]	; (21d68 <z_pend_curr+0xcc>)
   21cc0:	4a2a      	ldr	r2, [pc, #168]	; (21d6c <z_pend_curr+0xd0>)
   21cc2:	f240 3352 	movw	r3, #850	; 0x352
   21cc6:	f002 fabd 	bl	24244 <assert_print>
   21cca:	4828      	ldr	r0, [pc, #160]	; (21d6c <z_pend_curr+0xd0>)
   21ccc:	f240 3152 	movw	r1, #850	; 0x352
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21cd0:	f002 fab1 	bl	24236 <assert_post_action>
	__asm__ volatile(
   21cd4:	f04f 0240 	mov.w	r2, #64	; 0x40
   21cd8:	f3ef 8311 	mrs	r3, BASEPRI
   21cdc:	f382 8812 	msr	BASEPRI_MAX, r2
   21ce0:	f3bf 8f6f 	isb	sy
   21ce4:	4620      	mov	r0, r4
   21ce6:	f7fe faed 	bl	202c4 <z_spin_lock_valid>
   21cea:	b960      	cbnz	r0, 21d06 <z_pend_curr+0x6a>
   21cec:	4a20      	ldr	r2, [pc, #128]	; (21d70 <z_pend_curr+0xd4>)
   21cee:	4921      	ldr	r1, [pc, #132]	; (21d74 <z_pend_curr+0xd8>)
   21cf0:	481d      	ldr	r0, [pc, #116]	; (21d68 <z_pend_curr+0xcc>)
   21cf2:	2394      	movs	r3, #148	; 0x94
   21cf4:	f002 faa6 	bl	24244 <assert_print>
   21cf8:	4621      	mov	r1, r4
   21cfa:	481f      	ldr	r0, [pc, #124]	; (21d78 <z_pend_curr+0xdc>)
   21cfc:	f002 faa2 	bl	24244 <assert_print>
   21d00:	2194      	movs	r1, #148	; 0x94
   21d02:	481b      	ldr	r0, [pc, #108]	; (21d70 <z_pend_curr+0xd4>)
   21d04:	e7e4      	b.n	21cd0 <z_pend_curr+0x34>
	z_spin_lock_set_owner(l);
   21d06:	4620      	mov	r0, r4
   21d08:	f7fe fafa 	bl	20300 <z_spin_lock_set_owner>
	pend_locked(_current, wait_q, timeout);
   21d0c:	f8da 0008 	ldr.w	r0, [sl, #8]
   21d10:	4642      	mov	r2, r8
   21d12:	464b      	mov	r3, r9
   21d14:	4639      	mov	r1, r7
   21d16:	f7ff ffa9 	bl	21c6c <pend_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21d1a:	4628      	mov	r0, r5
   21d1c:	f7fe fae0 	bl	202e0 <z_spin_unlock_valid>
   21d20:	b958      	cbnz	r0, 21d3a <z_pend_curr+0x9e>
   21d22:	4916      	ldr	r1, [pc, #88]	; (21d7c <z_pend_curr+0xe0>)
   21d24:	4a12      	ldr	r2, [pc, #72]	; (21d70 <z_pend_curr+0xd4>)
   21d26:	4810      	ldr	r0, [pc, #64]	; (21d68 <z_pend_curr+0xcc>)
   21d28:	23e2      	movs	r3, #226	; 0xe2
   21d2a:	f002 fa8b 	bl	24244 <assert_print>
   21d2e:	4629      	mov	r1, r5
   21d30:	4813      	ldr	r0, [pc, #76]	; (21d80 <z_pend_curr+0xe4>)
   21d32:	f002 fa87 	bl	24244 <assert_print>
   21d36:	21e2      	movs	r1, #226	; 0xe2
   21d38:	e7e3      	b.n	21d02 <z_pend_curr+0x66>
   21d3a:	4620      	mov	r0, r4
   21d3c:	f7fe fad0 	bl	202e0 <z_spin_unlock_valid>
   21d40:	b938      	cbnz	r0, 21d52 <z_pend_curr+0xb6>
   21d42:	490e      	ldr	r1, [pc, #56]	; (21d7c <z_pend_curr+0xe0>)
   21d44:	4a0a      	ldr	r2, [pc, #40]	; (21d70 <z_pend_curr+0xd4>)
   21d46:	4808      	ldr	r0, [pc, #32]	; (21d68 <z_pend_curr+0xcc>)
   21d48:	23e2      	movs	r3, #226	; 0xe2
   21d4a:	f002 fa7b 	bl	24244 <assert_print>
   21d4e:	4621      	mov	r1, r4
   21d50:	e7ee      	b.n	21d30 <z_pend_curr+0x94>
   21d52:	4630      	mov	r0, r6
}
   21d54:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21d58:	f7f2 bf08 	b.w	14b6c <arch_swap>
   21d5c:	20002fc0 	.word	0x20002fc0
   21d60:	20002fb4 	.word	0x20002fb4
   21d64:	0002b6cb 	.word	0x0002b6cb
   21d68:	00027c2a 	.word	0x00027c2a
   21d6c:	0002b43b 	.word	0x0002b43b
   21d70:	0002801e 	.word	0x0002801e
   21d74:	00028077 	.word	0x00028077
   21d78:	0002808c 	.word	0x0002808c
   21d7c:	0002804b 	.word	0x0002804b
   21d80:	00028062 	.word	0x00028062
   21d84:	20002f78 	.word	0x20002f78

00021d88 <z_set_prio>:
{
   21d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21d8c:	4604      	mov	r4, r0
   21d8e:	460e      	mov	r6, r1
   21d90:	f04f 0340 	mov.w	r3, #64	; 0x40
   21d94:	f3ef 8911 	mrs	r9, BASEPRI
   21d98:	f383 8812 	msr	BASEPRI_MAX, r3
   21d9c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21da0:	4837      	ldr	r0, [pc, #220]	; (21e80 <z_set_prio+0xf8>)
   21da2:	f7fe fa8f 	bl	202c4 <z_spin_lock_valid>
   21da6:	4607      	mov	r7, r0
   21da8:	b960      	cbnz	r0, 21dc4 <z_set_prio+0x3c>
   21daa:	4a36      	ldr	r2, [pc, #216]	; (21e84 <z_set_prio+0xfc>)
   21dac:	4936      	ldr	r1, [pc, #216]	; (21e88 <z_set_prio+0x100>)
   21dae:	4837      	ldr	r0, [pc, #220]	; (21e8c <z_set_prio+0x104>)
   21db0:	2394      	movs	r3, #148	; 0x94
   21db2:	f002 fa47 	bl	24244 <assert_print>
   21db6:	4932      	ldr	r1, [pc, #200]	; (21e80 <z_set_prio+0xf8>)
   21db8:	4835      	ldr	r0, [pc, #212]	; (21e90 <z_set_prio+0x108>)
   21dba:	f002 fa43 	bl	24244 <assert_print>
   21dbe:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21dc0:	4830      	ldr	r0, [pc, #192]	; (21e84 <z_set_prio+0xfc>)
   21dc2:	e021      	b.n	21e08 <z_set_prio+0x80>
	z_spin_lock_set_owner(l);
   21dc4:	482e      	ldr	r0, [pc, #184]	; (21e80 <z_set_prio+0xf8>)
   21dc6:	f7fe fa9b 	bl	20300 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
   21dca:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   21dcc:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   21dce:	b276      	sxtb	r6, r6
   21dd0:	d11c      	bne.n	21e0c <z_set_prio+0x84>
	return node->next != NULL;
   21dd2:	69a5      	ldr	r5, [r4, #24]
   21dd4:	b9d5      	cbnz	r5, 21e0c <z_set_prio+0x84>
	_priq_run_remove(thread_runq(thread), thread);
   21dd6:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 21ea8 <z_set_prio+0x120>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21dda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   21dde:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21de0:	4621      	mov	r1, r4
   21de2:	4640      	mov	r0, r8
   21de4:	f7ff fe12 	bl	21a0c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   21de8:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   21dea:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   21dec:	f063 037f 	orn	r3, r3, #127	; 0x7f
   21df0:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   21df2:	4b28      	ldr	r3, [pc, #160]	; (21e94 <z_set_prio+0x10c>)
   21df4:	429c      	cmp	r4, r3
   21df6:	d11b      	bne.n	21e30 <z_set_prio+0xa8>
   21df8:	4927      	ldr	r1, [pc, #156]	; (21e98 <z_set_prio+0x110>)
   21dfa:	4824      	ldr	r0, [pc, #144]	; (21e8c <z_set_prio+0x104>)
   21dfc:	4a27      	ldr	r2, [pc, #156]	; (21e9c <z_set_prio+0x114>)
   21dfe:	23bc      	movs	r3, #188	; 0xbc
   21e00:	f002 fa20 	bl	24244 <assert_print>
   21e04:	4825      	ldr	r0, [pc, #148]	; (21e9c <z_set_prio+0x114>)
   21e06:	21bc      	movs	r1, #188	; 0xbc
   21e08:	f002 fa15 	bl	24236 <assert_post_action>
			thread->base.prio = prio;
   21e0c:	73a6      	strb	r6, [r4, #14]
   21e0e:	2700      	movs	r7, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21e10:	481b      	ldr	r0, [pc, #108]	; (21e80 <z_set_prio+0xf8>)
   21e12:	f7fe fa65 	bl	202e0 <z_spin_unlock_valid>
   21e16:	bb58      	cbnz	r0, 21e70 <z_set_prio+0xe8>
   21e18:	4a1a      	ldr	r2, [pc, #104]	; (21e84 <z_set_prio+0xfc>)
   21e1a:	4921      	ldr	r1, [pc, #132]	; (21ea0 <z_set_prio+0x118>)
   21e1c:	481b      	ldr	r0, [pc, #108]	; (21e8c <z_set_prio+0x104>)
   21e1e:	23c3      	movs	r3, #195	; 0xc3
   21e20:	f002 fa10 	bl	24244 <assert_print>
   21e24:	4916      	ldr	r1, [pc, #88]	; (21e80 <z_set_prio+0xf8>)
   21e26:	481f      	ldr	r0, [pc, #124]	; (21ea4 <z_set_prio+0x11c>)
   21e28:	f002 fa0c 	bl	24244 <assert_print>
   21e2c:	21c3      	movs	r1, #195	; 0xc3
   21e2e:	e7c7      	b.n	21dc0 <z_set_prio+0x38>
	return list->head == list;
   21e30:	4643      	mov	r3, r8
   21e32:	f853 291c 	ldr.w	r2, [r3], #-28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   21e36:	4542      	cmp	r2, r8
   21e38:	bf18      	it	ne
   21e3a:	4615      	movne	r5, r2
	return (node == list->tail) ? NULL : node->next;
   21e3c:	6a1a      	ldr	r2, [r3, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21e3e:	b925      	cbnz	r5, 21e4a <z_set_prio+0xc2>
	node->prev = tail;
   21e40:	e9c4 8200 	strd	r8, r2, [r4]
	tail->next = node;
   21e44:	6014      	str	r4, [r2, #0]
	list->tail = node;
   21e46:	621c      	str	r4, [r3, #32]
}
   21e48:	e00a      	b.n	21e60 <z_set_prio+0xd8>
	int32_t b2 = thread_2->base.prio;
   21e4a:	f995 100e 	ldrsb.w	r1, [r5, #14]
	if (b1 != b2) {
   21e4e:	428e      	cmp	r6, r1
   21e50:	d00a      	beq.n	21e68 <z_set_prio+0xe0>
		if (z_sched_prio_cmp(thread, t) > 0) {
   21e52:	42b1      	cmp	r1, r6
   21e54:	dd08      	ble.n	21e68 <z_set_prio+0xe0>
	sys_dnode_t *const prev = successor->prev;
   21e56:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   21e58:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   21e5c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   21e5e:	606c      	str	r4, [r5, #4]
			update_cache(1);
   21e60:	2001      	movs	r0, #1
   21e62:	f7ff fb53 	bl	2150c <update_cache>
   21e66:	e7d3      	b.n	21e10 <z_set_prio+0x88>
	return (node == list->tail) ? NULL : node->next;
   21e68:	42aa      	cmp	r2, r5
   21e6a:	d0e9      	beq.n	21e40 <z_set_prio+0xb8>
   21e6c:	682d      	ldr	r5, [r5, #0]
   21e6e:	e7e6      	b.n	21e3e <z_set_prio+0xb6>
	__asm__ volatile(
   21e70:	f389 8811 	msr	BASEPRI, r9
   21e74:	f3bf 8f6f 	isb	sy
}
   21e78:	4638      	mov	r0, r7
   21e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21e7e:	bf00      	nop
   21e80:	20002fc0 	.word	0x20002fc0
   21e84:	0002801e 	.word	0x0002801e
   21e88:	00028077 	.word	0x00028077
   21e8c:	00027c2a 	.word	0x00027c2a
   21e90:	0002808c 	.word	0x0002808c
   21e94:	20002958 	.word	0x20002958
   21e98:	0002b61d 	.word	0x0002b61d
   21e9c:	0002b43b 	.word	0x0002b43b
   21ea0:	0002804b 	.word	0x0002804b
   21ea4:	00028062 	.word	0x00028062
   21ea8:	20002f94 	.word	0x20002f94

00021eac <z_impl_k_thread_suspend>:
{
   21eac:	b570      	push	{r4, r5, r6, lr}
   21eae:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   21eb0:	3018      	adds	r0, #24
   21eb2:	f000 fd97 	bl	229e4 <z_abort_timeout>
	__asm__ volatile(
   21eb6:	f04f 0340 	mov.w	r3, #64	; 0x40
   21eba:	f3ef 8611 	mrs	r6, BASEPRI
   21ebe:	f383 8812 	msr	BASEPRI_MAX, r3
   21ec2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21ec6:	4824      	ldr	r0, [pc, #144]	; (21f58 <z_impl_k_thread_suspend+0xac>)
   21ec8:	f7fe f9fc 	bl	202c4 <z_spin_lock_valid>
   21ecc:	b968      	cbnz	r0, 21eea <z_impl_k_thread_suspend+0x3e>
   21ece:	4a23      	ldr	r2, [pc, #140]	; (21f5c <z_impl_k_thread_suspend+0xb0>)
   21ed0:	4923      	ldr	r1, [pc, #140]	; (21f60 <z_impl_k_thread_suspend+0xb4>)
   21ed2:	4824      	ldr	r0, [pc, #144]	; (21f64 <z_impl_k_thread_suspend+0xb8>)
   21ed4:	2394      	movs	r3, #148	; 0x94
   21ed6:	f002 f9b5 	bl	24244 <assert_print>
   21eda:	491f      	ldr	r1, [pc, #124]	; (21f58 <z_impl_k_thread_suspend+0xac>)
   21edc:	4822      	ldr	r0, [pc, #136]	; (21f68 <z_impl_k_thread_suspend+0xbc>)
   21ede:	f002 f9b1 	bl	24244 <assert_print>
   21ee2:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21ee4:	481d      	ldr	r0, [pc, #116]	; (21f5c <z_impl_k_thread_suspend+0xb0>)
   21ee6:	f002 f9a6 	bl	24236 <assert_post_action>
	z_spin_lock_set_owner(l);
   21eea:	481b      	ldr	r0, [pc, #108]	; (21f58 <z_impl_k_thread_suspend+0xac>)
   21eec:	f7fe fa08 	bl	20300 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   21ef0:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   21ef4:	7b63      	ldrb	r3, [r4, #13]
   21ef6:	2a00      	cmp	r2, #0
   21ef8:	da06      	bge.n	21f08 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21efa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   21efe:	481b      	ldr	r0, [pc, #108]	; (21f6c <z_impl_k_thread_suspend+0xc0>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   21f00:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   21f02:	4621      	mov	r1, r4
   21f04:	f7ff fd82 	bl	21a0c <z_priq_dumb_remove>
		update_cache(thread == _current);
   21f08:	4d19      	ldr	r5, [pc, #100]	; (21f70 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   21f0a:	7b63      	ldrb	r3, [r4, #13]
   21f0c:	68a8      	ldr	r0, [r5, #8]
   21f0e:	f043 0310 	orr.w	r3, r3, #16
   21f12:	7363      	strb	r3, [r4, #13]
   21f14:	1b03      	subs	r3, r0, r4
   21f16:	4258      	negs	r0, r3
   21f18:	4158      	adcs	r0, r3
   21f1a:	f7ff faf7 	bl	2150c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21f1e:	480e      	ldr	r0, [pc, #56]	; (21f58 <z_impl_k_thread_suspend+0xac>)
   21f20:	f7fe f9de 	bl	202e0 <z_spin_unlock_valid>
   21f24:	b958      	cbnz	r0, 21f3e <z_impl_k_thread_suspend+0x92>
   21f26:	4a0d      	ldr	r2, [pc, #52]	; (21f5c <z_impl_k_thread_suspend+0xb0>)
   21f28:	4912      	ldr	r1, [pc, #72]	; (21f74 <z_impl_k_thread_suspend+0xc8>)
   21f2a:	480e      	ldr	r0, [pc, #56]	; (21f64 <z_impl_k_thread_suspend+0xb8>)
   21f2c:	23c3      	movs	r3, #195	; 0xc3
   21f2e:	f002 f989 	bl	24244 <assert_print>
   21f32:	4909      	ldr	r1, [pc, #36]	; (21f58 <z_impl_k_thread_suspend+0xac>)
   21f34:	4810      	ldr	r0, [pc, #64]	; (21f78 <z_impl_k_thread_suspend+0xcc>)
   21f36:	f002 f985 	bl	24244 <assert_print>
   21f3a:	21c3      	movs	r1, #195	; 0xc3
   21f3c:	e7d2      	b.n	21ee4 <z_impl_k_thread_suspend+0x38>
	__asm__ volatile(
   21f3e:	f386 8811 	msr	BASEPRI, r6
   21f42:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   21f46:	68ab      	ldr	r3, [r5, #8]
   21f48:	42a3      	cmp	r3, r4
   21f4a:	d103      	bne.n	21f54 <z_impl_k_thread_suspend+0xa8>
}
   21f4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   21f50:	f004 bdb7 	b.w	26ac2 <z_reschedule_unlocked>
}
   21f54:	bd70      	pop	{r4, r5, r6, pc}
   21f56:	bf00      	nop
   21f58:	20002fc0 	.word	0x20002fc0
   21f5c:	0002801e 	.word	0x0002801e
   21f60:	00028077 	.word	0x00028077
   21f64:	00027c2a 	.word	0x00027c2a
   21f68:	0002808c 	.word	0x0002808c
   21f6c:	20002f94 	.word	0x20002f94
   21f70:	20002f78 	.word	0x20002f78
   21f74:	0002804b 	.word	0x0002804b
   21f78:	00028062 	.word	0x00028062

00021f7c <unpend_thread_no_timeout>:
{
   21f7c:	b510      	push	{r4, lr}
   21f7e:	4604      	mov	r4, r0
   21f80:	6880      	ldr	r0, [r0, #8]
	__ASSERT_NO_MSG(thread->base.pended_on);
   21f82:	b958      	cbnz	r0, 21f9c <unpend_thread_no_timeout+0x20>
   21f84:	490a      	ldr	r1, [pc, #40]	; (21fb0 <unpend_thread_no_timeout+0x34>)
   21f86:	480b      	ldr	r0, [pc, #44]	; (21fb4 <unpend_thread_no_timeout+0x38>)
   21f88:	4a0b      	ldr	r2, [pc, #44]	; (21fb8 <unpend_thread_no_timeout+0x3c>)
   21f8a:	f240 23c5 	movw	r3, #709	; 0x2c5
   21f8e:	f002 f959 	bl	24244 <assert_print>
   21f92:	4809      	ldr	r0, [pc, #36]	; (21fb8 <unpend_thread_no_timeout+0x3c>)
   21f94:	f240 21c5 	movw	r1, #709	; 0x2c5
   21f98:	f002 f94d 	bl	24236 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   21f9c:	4621      	mov	r1, r4
   21f9e:	f7ff fd35 	bl	21a0c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   21fa2:	7b63      	ldrb	r3, [r4, #13]
   21fa4:	f023 0302 	bic.w	r3, r3, #2
   21fa8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   21faa:	2300      	movs	r3, #0
   21fac:	60a3      	str	r3, [r4, #8]
}
   21fae:	bd10      	pop	{r4, pc}
   21fb0:	0002b702 	.word	0x0002b702
   21fb4:	00027c2a 	.word	0x00027c2a
   21fb8:	0002b43b 	.word	0x0002b43b

00021fbc <z_unpend_thread>:
{
   21fbc:	b538      	push	{r3, r4, r5, lr}
   21fbe:	4604      	mov	r4, r0
	__asm__ volatile(
   21fc0:	f04f 0340 	mov.w	r3, #64	; 0x40
   21fc4:	f3ef 8511 	mrs	r5, BASEPRI
   21fc8:	f383 8812 	msr	BASEPRI_MAX, r3
   21fcc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   21fd0:	4819      	ldr	r0, [pc, #100]	; (22038 <z_unpend_thread+0x7c>)
   21fd2:	f7fe f977 	bl	202c4 <z_spin_lock_valid>
   21fd6:	b968      	cbnz	r0, 21ff4 <z_unpend_thread+0x38>
   21fd8:	4a18      	ldr	r2, [pc, #96]	; (2203c <z_unpend_thread+0x80>)
   21fda:	4919      	ldr	r1, [pc, #100]	; (22040 <z_unpend_thread+0x84>)
   21fdc:	4819      	ldr	r0, [pc, #100]	; (22044 <z_unpend_thread+0x88>)
   21fde:	2394      	movs	r3, #148	; 0x94
   21fe0:	f002 f930 	bl	24244 <assert_print>
   21fe4:	4914      	ldr	r1, [pc, #80]	; (22038 <z_unpend_thread+0x7c>)
   21fe6:	4818      	ldr	r0, [pc, #96]	; (22048 <z_unpend_thread+0x8c>)
   21fe8:	f002 f92c 	bl	24244 <assert_print>
   21fec:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   21fee:	4813      	ldr	r0, [pc, #76]	; (2203c <z_unpend_thread+0x80>)
   21ff0:	f002 f921 	bl	24236 <assert_post_action>
	z_spin_lock_set_owner(l);
   21ff4:	4810      	ldr	r0, [pc, #64]	; (22038 <z_unpend_thread+0x7c>)
   21ff6:	f7fe f983 	bl	20300 <z_spin_lock_set_owner>
		if (thread->base.pended_on != NULL) {
   21ffa:	68a3      	ldr	r3, [r4, #8]
   21ffc:	b113      	cbz	r3, 22004 <z_unpend_thread+0x48>
			unpend_thread_no_timeout(thread);
   21ffe:	4620      	mov	r0, r4
   22000:	f7ff ffbc 	bl	21f7c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22004:	480c      	ldr	r0, [pc, #48]	; (22038 <z_unpend_thread+0x7c>)
   22006:	f7fe f96b 	bl	202e0 <z_spin_unlock_valid>
   2200a:	b958      	cbnz	r0, 22024 <z_unpend_thread+0x68>
   2200c:	4a0b      	ldr	r2, [pc, #44]	; (2203c <z_unpend_thread+0x80>)
   2200e:	490f      	ldr	r1, [pc, #60]	; (2204c <z_unpend_thread+0x90>)
   22010:	480c      	ldr	r0, [pc, #48]	; (22044 <z_unpend_thread+0x88>)
   22012:	23c3      	movs	r3, #195	; 0xc3
   22014:	f002 f916 	bl	24244 <assert_print>
   22018:	4907      	ldr	r1, [pc, #28]	; (22038 <z_unpend_thread+0x7c>)
   2201a:	480d      	ldr	r0, [pc, #52]	; (22050 <z_unpend_thread+0x94>)
   2201c:	f002 f912 	bl	24244 <assert_print>
   22020:	21c3      	movs	r1, #195	; 0xc3
   22022:	e7e4      	b.n	21fee <z_unpend_thread+0x32>
	__asm__ volatile(
   22024:	f385 8811 	msr	BASEPRI, r5
   22028:	f3bf 8f6f 	isb	sy
   2202c:	f104 0018 	add.w	r0, r4, #24
}
   22030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   22034:	f000 bcd6 	b.w	229e4 <z_abort_timeout>
   22038:	20002fc0 	.word	0x20002fc0
   2203c:	0002801e 	.word	0x0002801e
   22040:	00028077 	.word	0x00028077
   22044:	00027c2a 	.word	0x00027c2a
   22048:	0002808c 	.word	0x0002808c
   2204c:	0002804b 	.word	0x0002804b
   22050:	00028062 	.word	0x00028062

00022054 <z_sched_wake_thread>:
{
   22054:	b570      	push	{r4, r5, r6, lr}
   22056:	4604      	mov	r4, r0
   22058:	460d      	mov	r5, r1
	__asm__ volatile(
   2205a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2205e:	f3ef 8611 	mrs	r6, BASEPRI
   22062:	f383 8812 	msr	BASEPRI_MAX, r3
   22066:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2206a:	481f      	ldr	r0, [pc, #124]	; (220e8 <z_sched_wake_thread+0x94>)
   2206c:	f7fe f92a 	bl	202c4 <z_spin_lock_valid>
   22070:	b968      	cbnz	r0, 2208e <z_sched_wake_thread+0x3a>
   22072:	4a1e      	ldr	r2, [pc, #120]	; (220ec <z_sched_wake_thread+0x98>)
   22074:	491e      	ldr	r1, [pc, #120]	; (220f0 <z_sched_wake_thread+0x9c>)
   22076:	481f      	ldr	r0, [pc, #124]	; (220f4 <z_sched_wake_thread+0xa0>)
   22078:	2394      	movs	r3, #148	; 0x94
   2207a:	f002 f8e3 	bl	24244 <assert_print>
   2207e:	491a      	ldr	r1, [pc, #104]	; (220e8 <z_sched_wake_thread+0x94>)
   22080:	481d      	ldr	r0, [pc, #116]	; (220f8 <z_sched_wake_thread+0xa4>)
   22082:	f002 f8df 	bl	24244 <assert_print>
   22086:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22088:	4818      	ldr	r0, [pc, #96]	; (220ec <z_sched_wake_thread+0x98>)
   2208a:	f002 f8d4 	bl	24236 <assert_post_action>
	z_spin_lock_set_owner(l);
   2208e:	4816      	ldr	r0, [pc, #88]	; (220e8 <z_sched_wake_thread+0x94>)
   22090:	f7fe f936 	bl	20300 <z_spin_lock_set_owner>
		if (!killed) {
   22094:	7b63      	ldrb	r3, [r4, #13]
   22096:	f013 0f28 	tst.w	r3, #40	; 0x28
   2209a:	d10c      	bne.n	220b6 <z_sched_wake_thread+0x62>
			if (thread->base.pended_on != NULL) {
   2209c:	68a3      	ldr	r3, [r4, #8]
   2209e:	b113      	cbz	r3, 220a6 <z_sched_wake_thread+0x52>
				unpend_thread_no_timeout(thread);
   220a0:	4620      	mov	r0, r4
   220a2:	f7ff ff6b 	bl	21f7c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   220a6:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
   220a8:	b9ad      	cbnz	r5, 220d6 <z_sched_wake_thread+0x82>
   220aa:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   220ae:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
   220b0:	4620      	mov	r0, r4
   220b2:	f7ff fa5f 	bl	21574 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   220b6:	480c      	ldr	r0, [pc, #48]	; (220e8 <z_sched_wake_thread+0x94>)
   220b8:	f7fe f912 	bl	202e0 <z_spin_unlock_valid>
   220bc:	b970      	cbnz	r0, 220dc <z_sched_wake_thread+0x88>
   220be:	4a0b      	ldr	r2, [pc, #44]	; (220ec <z_sched_wake_thread+0x98>)
   220c0:	490e      	ldr	r1, [pc, #56]	; (220fc <z_sched_wake_thread+0xa8>)
   220c2:	480c      	ldr	r0, [pc, #48]	; (220f4 <z_sched_wake_thread+0xa0>)
   220c4:	23c3      	movs	r3, #195	; 0xc3
   220c6:	f002 f8bd 	bl	24244 <assert_print>
   220ca:	4907      	ldr	r1, [pc, #28]	; (220e8 <z_sched_wake_thread+0x94>)
   220cc:	480c      	ldr	r0, [pc, #48]	; (22100 <z_sched_wake_thread+0xac>)
   220ce:	f002 f8b9 	bl	24244 <assert_print>
   220d2:	21c3      	movs	r1, #195	; 0xc3
   220d4:	e7d8      	b.n	22088 <z_sched_wake_thread+0x34>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   220d6:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
   220da:	e7e8      	b.n	220ae <z_sched_wake_thread+0x5a>
	__asm__ volatile(
   220dc:	f386 8811 	msr	BASEPRI, r6
   220e0:	f3bf 8f6f 	isb	sy
}
   220e4:	bd70      	pop	{r4, r5, r6, pc}
   220e6:	bf00      	nop
   220e8:	20002fc0 	.word	0x20002fc0
   220ec:	0002801e 	.word	0x0002801e
   220f0:	00028077 	.word	0x00028077
   220f4:	00027c2a 	.word	0x00027c2a
   220f8:	0002808c 	.word	0x0002808c
   220fc:	0002804b 	.word	0x0002804b
   22100:	00028062 	.word	0x00028062

00022104 <z_unpend1_no_timeout>:
{
   22104:	b570      	push	{r4, r5, r6, lr}
   22106:	4605      	mov	r5, r0
	__asm__ volatile(
   22108:	f04f 0340 	mov.w	r3, #64	; 0x40
   2210c:	f3ef 8611 	mrs	r6, BASEPRI
   22110:	f383 8812 	msr	BASEPRI_MAX, r3
   22114:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22118:	4819      	ldr	r0, [pc, #100]	; (22180 <z_unpend1_no_timeout+0x7c>)
   2211a:	f7fe f8d3 	bl	202c4 <z_spin_lock_valid>
   2211e:	b968      	cbnz	r0, 2213c <z_unpend1_no_timeout+0x38>
   22120:	4a18      	ldr	r2, [pc, #96]	; (22184 <z_unpend1_no_timeout+0x80>)
   22122:	4919      	ldr	r1, [pc, #100]	; (22188 <z_unpend1_no_timeout+0x84>)
   22124:	4819      	ldr	r0, [pc, #100]	; (2218c <z_unpend1_no_timeout+0x88>)
   22126:	2394      	movs	r3, #148	; 0x94
   22128:	f002 f88c 	bl	24244 <assert_print>
   2212c:	4914      	ldr	r1, [pc, #80]	; (22180 <z_unpend1_no_timeout+0x7c>)
   2212e:	4818      	ldr	r0, [pc, #96]	; (22190 <z_unpend1_no_timeout+0x8c>)
   22130:	f002 f888 	bl	24244 <assert_print>
   22134:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22136:	4813      	ldr	r0, [pc, #76]	; (22184 <z_unpend1_no_timeout+0x80>)
   22138:	f002 f87d 	bl	24236 <assert_post_action>
	z_spin_lock_set_owner(l);
   2213c:	4810      	ldr	r0, [pc, #64]	; (22180 <z_unpend1_no_timeout+0x7c>)
   2213e:	f7fe f8df 	bl	20300 <z_spin_lock_set_owner>
	return list->head == list;
   22142:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22144:	42a5      	cmp	r5, r4
   22146:	d013      	beq.n	22170 <z_unpend1_no_timeout+0x6c>
		if (thread != NULL) {
   22148:	b114      	cbz	r4, 22150 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
   2214a:	4620      	mov	r0, r4
   2214c:	f7ff ff16 	bl	21f7c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22150:	480b      	ldr	r0, [pc, #44]	; (22180 <z_unpend1_no_timeout+0x7c>)
   22152:	f7fe f8c5 	bl	202e0 <z_spin_unlock_valid>
   22156:	b968      	cbnz	r0, 22174 <z_unpend1_no_timeout+0x70>
   22158:	4a0a      	ldr	r2, [pc, #40]	; (22184 <z_unpend1_no_timeout+0x80>)
   2215a:	490e      	ldr	r1, [pc, #56]	; (22194 <z_unpend1_no_timeout+0x90>)
   2215c:	480b      	ldr	r0, [pc, #44]	; (2218c <z_unpend1_no_timeout+0x88>)
   2215e:	23c3      	movs	r3, #195	; 0xc3
   22160:	f002 f870 	bl	24244 <assert_print>
   22164:	4906      	ldr	r1, [pc, #24]	; (22180 <z_unpend1_no_timeout+0x7c>)
   22166:	480c      	ldr	r0, [pc, #48]	; (22198 <z_unpend1_no_timeout+0x94>)
   22168:	f002 f86c 	bl	24244 <assert_print>
   2216c:	21c3      	movs	r1, #195	; 0xc3
   2216e:	e7e2      	b.n	22136 <z_unpend1_no_timeout+0x32>
   22170:	2400      	movs	r4, #0
   22172:	e7ed      	b.n	22150 <z_unpend1_no_timeout+0x4c>
	__asm__ volatile(
   22174:	f386 8811 	msr	BASEPRI, r6
   22178:	f3bf 8f6f 	isb	sy
}
   2217c:	4620      	mov	r0, r4
   2217e:	bd70      	pop	{r4, r5, r6, pc}
   22180:	20002fc0 	.word	0x20002fc0
   22184:	0002801e 	.word	0x0002801e
   22188:	00028077 	.word	0x00028077
   2218c:	00027c2a 	.word	0x00027c2a
   22190:	0002808c 	.word	0x0002808c
   22194:	0002804b 	.word	0x0002804b
   22198:	00028062 	.word	0x00028062

0002219c <z_unpend_first_thread>:
{
   2219c:	b570      	push	{r4, r5, r6, lr}
   2219e:	4605      	mov	r5, r0
	__asm__ volatile(
   221a0:	f04f 0340 	mov.w	r3, #64	; 0x40
   221a4:	f3ef 8611 	mrs	r6, BASEPRI
   221a8:	f383 8812 	msr	BASEPRI_MAX, r3
   221ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   221b0:	481b      	ldr	r0, [pc, #108]	; (22220 <z_unpend_first_thread+0x84>)
   221b2:	f7fe f887 	bl	202c4 <z_spin_lock_valid>
   221b6:	b968      	cbnz	r0, 221d4 <z_unpend_first_thread+0x38>
   221b8:	4a1a      	ldr	r2, [pc, #104]	; (22224 <z_unpend_first_thread+0x88>)
   221ba:	491b      	ldr	r1, [pc, #108]	; (22228 <z_unpend_first_thread+0x8c>)
   221bc:	481b      	ldr	r0, [pc, #108]	; (2222c <z_unpend_first_thread+0x90>)
   221be:	2394      	movs	r3, #148	; 0x94
   221c0:	f002 f840 	bl	24244 <assert_print>
   221c4:	4916      	ldr	r1, [pc, #88]	; (22220 <z_unpend_first_thread+0x84>)
   221c6:	481a      	ldr	r0, [pc, #104]	; (22230 <z_unpend_first_thread+0x94>)
   221c8:	f002 f83c 	bl	24244 <assert_print>
   221cc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   221ce:	4815      	ldr	r0, [pc, #84]	; (22224 <z_unpend_first_thread+0x88>)
   221d0:	f002 f831 	bl	24236 <assert_post_action>
	z_spin_lock_set_owner(l);
   221d4:	4812      	ldr	r0, [pc, #72]	; (22220 <z_unpend_first_thread+0x84>)
   221d6:	f7fe f893 	bl	20300 <z_spin_lock_set_owner>
	return list->head == list;
   221da:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   221dc:	42a5      	cmp	r5, r4
   221de:	d017      	beq.n	22210 <z_unpend_first_thread+0x74>
		if (thread != NULL) {
   221e0:	b134      	cbz	r4, 221f0 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   221e2:	4620      	mov	r0, r4
   221e4:	f7ff feca 	bl	21f7c <unpend_thread_no_timeout>
   221e8:	f104 0018 	add.w	r0, r4, #24
   221ec:	f000 fbfa 	bl	229e4 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   221f0:	480b      	ldr	r0, [pc, #44]	; (22220 <z_unpend_first_thread+0x84>)
   221f2:	f7fe f875 	bl	202e0 <z_spin_unlock_valid>
   221f6:	b968      	cbnz	r0, 22214 <z_unpend_first_thread+0x78>
   221f8:	4a0a      	ldr	r2, [pc, #40]	; (22224 <z_unpend_first_thread+0x88>)
   221fa:	490e      	ldr	r1, [pc, #56]	; (22234 <z_unpend_first_thread+0x98>)
   221fc:	480b      	ldr	r0, [pc, #44]	; (2222c <z_unpend_first_thread+0x90>)
   221fe:	23c3      	movs	r3, #195	; 0xc3
   22200:	f002 f820 	bl	24244 <assert_print>
   22204:	4906      	ldr	r1, [pc, #24]	; (22220 <z_unpend_first_thread+0x84>)
   22206:	480c      	ldr	r0, [pc, #48]	; (22238 <z_unpend_first_thread+0x9c>)
   22208:	f002 f81c 	bl	24244 <assert_print>
   2220c:	21c3      	movs	r1, #195	; 0xc3
   2220e:	e7de      	b.n	221ce <z_unpend_first_thread+0x32>
   22210:	2400      	movs	r4, #0
   22212:	e7ed      	b.n	221f0 <z_unpend_first_thread+0x54>
	__asm__ volatile(
   22214:	f386 8811 	msr	BASEPRI, r6
   22218:	f3bf 8f6f 	isb	sy
}
   2221c:	4620      	mov	r0, r4
   2221e:	bd70      	pop	{r4, r5, r6, pc}
   22220:	20002fc0 	.word	0x20002fc0
   22224:	0002801e 	.word	0x0002801e
   22228:	00028077 	.word	0x00028077
   2222c:	00027c2a 	.word	0x00027c2a
   22230:	0002808c 	.word	0x0002808c
   22234:	0002804b 	.word	0x0002804b
   22238:	00028062 	.word	0x00028062

0002223c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   2223c:	4b02      	ldr	r3, [pc, #8]	; (22248 <z_sched_init+0xc>)
   2223e:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
   22242:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
   22246:	4770      	bx	lr
   22248:	20002f78 	.word	0x20002f78

0002224c <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   2224c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2224e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   22252:	b16b      	cbz	r3, 22270 <z_impl_k_yield+0x24>
   22254:	493c      	ldr	r1, [pc, #240]	; (22348 <z_impl_k_yield+0xfc>)
   22256:	4a3d      	ldr	r2, [pc, #244]	; (2234c <z_impl_k_yield+0x100>)
   22258:	483d      	ldr	r0, [pc, #244]	; (22350 <z_impl_k_yield+0x104>)
   2225a:	f240 5371 	movw	r3, #1393	; 0x571
   2225e:	f001 fff1 	bl	24244 <assert_print>
   22262:	483c      	ldr	r0, [pc, #240]	; (22354 <z_impl_k_yield+0x108>)
   22264:	f001 ffee 	bl	24244 <assert_print>
   22268:	f240 5171 	movw	r1, #1393	; 0x571
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2226c:	4837      	ldr	r0, [pc, #220]	; (2234c <z_impl_k_yield+0x100>)
   2226e:	e017      	b.n	222a0 <z_impl_k_yield+0x54>
	__asm__ volatile(
   22270:	f04f 0340 	mov.w	r3, #64	; 0x40
   22274:	f3ef 8611 	mrs	r6, BASEPRI
   22278:	f383 8812 	msr	BASEPRI_MAX, r3
   2227c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22280:	4835      	ldr	r0, [pc, #212]	; (22358 <z_impl_k_yield+0x10c>)
   22282:	f7fe f81f 	bl	202c4 <z_spin_lock_valid>
   22286:	b968      	cbnz	r0, 222a4 <z_impl_k_yield+0x58>
   22288:	4a34      	ldr	r2, [pc, #208]	; (2235c <z_impl_k_yield+0x110>)
   2228a:	4935      	ldr	r1, [pc, #212]	; (22360 <z_impl_k_yield+0x114>)
   2228c:	4830      	ldr	r0, [pc, #192]	; (22350 <z_impl_k_yield+0x104>)
   2228e:	2394      	movs	r3, #148	; 0x94
   22290:	f001 ffd8 	bl	24244 <assert_print>
   22294:	4930      	ldr	r1, [pc, #192]	; (22358 <z_impl_k_yield+0x10c>)
   22296:	4833      	ldr	r0, [pc, #204]	; (22364 <z_impl_k_yield+0x118>)
   22298:	f001 ffd4 	bl	24244 <assert_print>
   2229c:	2194      	movs	r1, #148	; 0x94
   2229e:	482f      	ldr	r0, [pc, #188]	; (2235c <z_impl_k_yield+0x110>)
   222a0:	f001 ffc9 	bl	24236 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   222a4:	4c30      	ldr	r4, [pc, #192]	; (22368 <z_impl_k_yield+0x11c>)
	z_spin_lock_set_owner(l);
   222a6:	482c      	ldr	r0, [pc, #176]	; (22358 <z_impl_k_yield+0x10c>)
   222a8:	f7fe f82a 	bl	20300 <z_spin_lock_set_owner>
   222ac:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   222ae:	7b4b      	ldrb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   222b0:	f104 051c 	add.w	r5, r4, #28
	thread->base.thread_state &= ~_THREAD_QUEUED;
   222b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   222b8:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   222ba:	4628      	mov	r0, r5
   222bc:	f7ff fba6 	bl	21a0c <z_priq_dumb_remove>
	}
	queue_thread(_current);
   222c0:	68a3      	ldr	r3, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   222c2:	7b5a      	ldrb	r2, [r3, #13]
   222c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   222c8:	735a      	strb	r2, [r3, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   222ca:	4a28      	ldr	r2, [pc, #160]	; (2236c <z_impl_k_yield+0x120>)
   222cc:	4293      	cmp	r3, r2
   222ce:	d107      	bne.n	222e0 <z_impl_k_yield+0x94>
   222d0:	4927      	ldr	r1, [pc, #156]	; (22370 <z_impl_k_yield+0x124>)
   222d2:	4a1e      	ldr	r2, [pc, #120]	; (2234c <z_impl_k_yield+0x100>)
   222d4:	481e      	ldr	r0, [pc, #120]	; (22350 <z_impl_k_yield+0x104>)
   222d6:	23bc      	movs	r3, #188	; 0xbc
   222d8:	f001 ffb4 	bl	24244 <assert_print>
   222dc:	21bc      	movs	r1, #188	; 0xbc
   222de:	e7c5      	b.n	2226c <z_impl_k_yield+0x20>
	return list->head == list;
   222e0:	69e2      	ldr	r2, [r4, #28]
	return (node == list->tail) ? NULL : node->next;
   222e2:	6a21      	ldr	r1, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   222e4:	42aa      	cmp	r2, r5
   222e6:	bf08      	it	eq
   222e8:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   222ea:	b922      	cbnz	r2, 222f6 <z_impl_k_yield+0xaa>
	node->prev = tail;
   222ec:	e9c3 5100 	strd	r5, r1, [r3]
	tail->next = node;
   222f0:	600b      	str	r3, [r1, #0]
	list->tail = node;
   222f2:	6223      	str	r3, [r4, #32]
}
   222f4:	e00c      	b.n	22310 <z_impl_k_yield+0xc4>
	int32_t b1 = thread_1->base.prio;
   222f6:	f993 000e 	ldrsb.w	r0, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   222fa:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   222fe:	42b8      	cmp	r0, r7
   22300:	d019      	beq.n	22336 <z_impl_k_yield+0xea>
		if (z_sched_prio_cmp(thread, t) > 0) {
   22302:	4287      	cmp	r7, r0
   22304:	dd17      	ble.n	22336 <z_impl_k_yield+0xea>
	sys_dnode_t *const prev = successor->prev;
   22306:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   22308:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   2230c:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   2230e:	6053      	str	r3, [r2, #4]
	update_cache(1);
   22310:	2001      	movs	r0, #1
   22312:	f7ff f8fb 	bl	2150c <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22316:	4810      	ldr	r0, [pc, #64]	; (22358 <z_impl_k_yield+0x10c>)
   22318:	f7fd ffe2 	bl	202e0 <z_spin_unlock_valid>
   2231c:	b978      	cbnz	r0, 2233e <z_impl_k_yield+0xf2>
   2231e:	4a0f      	ldr	r2, [pc, #60]	; (2235c <z_impl_k_yield+0x110>)
   22320:	4914      	ldr	r1, [pc, #80]	; (22374 <z_impl_k_yield+0x128>)
   22322:	480b      	ldr	r0, [pc, #44]	; (22350 <z_impl_k_yield+0x104>)
   22324:	23e2      	movs	r3, #226	; 0xe2
   22326:	f001 ff8d 	bl	24244 <assert_print>
   2232a:	490b      	ldr	r1, [pc, #44]	; (22358 <z_impl_k_yield+0x10c>)
   2232c:	4812      	ldr	r0, [pc, #72]	; (22378 <z_impl_k_yield+0x12c>)
   2232e:	f001 ff89 	bl	24244 <assert_print>
   22332:	21e2      	movs	r1, #226	; 0xe2
   22334:	e7b3      	b.n	2229e <z_impl_k_yield+0x52>
	return (node == list->tail) ? NULL : node->next;
   22336:	428a      	cmp	r2, r1
   22338:	d0d8      	beq.n	222ec <z_impl_k_yield+0xa0>
   2233a:	6812      	ldr	r2, [r2, #0]
   2233c:	e7d5      	b.n	222ea <z_impl_k_yield+0x9e>
   2233e:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   22340:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   22344:	f7f2 bc12 	b.w	14b6c <arch_swap>
   22348:	0002b1ce 	.word	0x0002b1ce
   2234c:	0002b43b 	.word	0x0002b43b
   22350:	00027c2a 	.word	0x00027c2a
   22354:	0002a220 	.word	0x0002a220
   22358:	20002fc0 	.word	0x20002fc0
   2235c:	0002801e 	.word	0x0002801e
   22360:	00028077 	.word	0x00028077
   22364:	0002808c 	.word	0x0002808c
   22368:	20002f78 	.word	0x20002f78
   2236c:	20002958 	.word	0x20002958
   22370:	0002b61d 	.word	0x0002b61d
   22374:	0002804b 	.word	0x0002804b
   22378:	00028062 	.word	0x00028062

0002237c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   2237c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22380:	4605      	mov	r5, r0
   22382:	460e      	mov	r6, r1
   22384:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   22388:	b16b      	cbz	r3, 223a6 <z_tick_sleep+0x2a>
   2238a:	493f      	ldr	r1, [pc, #252]	; (22488 <z_tick_sleep+0x10c>)
   2238c:	4a3f      	ldr	r2, [pc, #252]	; (2248c <z_tick_sleep+0x110>)
   2238e:	4840      	ldr	r0, [pc, #256]	; (22490 <z_tick_sleep+0x114>)
   22390:	f240 538d 	movw	r3, #1421	; 0x58d
   22394:	f001 ff56 	bl	24244 <assert_print>
   22398:	483e      	ldr	r0, [pc, #248]	; (22494 <z_tick_sleep+0x118>)
   2239a:	f001 ff53 	bl	24244 <assert_print>
   2239e:	f240 518d 	movw	r1, #1421	; 0x58d
	z_add_thread_timeout(_current, timeout);
	z_mark_thread_as_suspended(_current);

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   223a2:	483a      	ldr	r0, [pc, #232]	; (2248c <z_tick_sleep+0x110>)
   223a4:	e025      	b.n	223f2 <z_tick_sleep+0x76>
	if (ticks == 0) {
   223a6:	ea50 0301 	orrs.w	r3, r0, r1
   223aa:	d103      	bne.n	223b4 <z_tick_sleep+0x38>
	z_impl_k_yield();
   223ac:	f7ff ff4e 	bl	2224c <z_impl_k_yield>
		return 0;
   223b0:	2000      	movs	r0, #0
   223b2:	e066      	b.n	22482 <z_tick_sleep+0x106>
	if (Z_TICK_ABS(ticks) <= 0) {
   223b4:	1c82      	adds	r2, r0, #2
   223b6:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   223ba:	db1c      	blt.n	223f6 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   223bc:	f004 fb9f 	bl	26afe <sys_clock_tick_get_32>
   223c0:	182c      	adds	r4, r5, r0
   223c2:	f04f 0340 	mov.w	r3, #64	; 0x40
   223c6:	f3ef 8811 	mrs	r8, BASEPRI
   223ca:	f383 8812 	msr	BASEPRI_MAX, r3
   223ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   223d2:	4831      	ldr	r0, [pc, #196]	; (22498 <z_tick_sleep+0x11c>)
   223d4:	f7fd ff76 	bl	202c4 <z_spin_lock_valid>
   223d8:	b988      	cbnz	r0, 223fe <z_tick_sleep+0x82>
   223da:	4a30      	ldr	r2, [pc, #192]	; (2249c <z_tick_sleep+0x120>)
   223dc:	4930      	ldr	r1, [pc, #192]	; (224a0 <z_tick_sleep+0x124>)
   223de:	482c      	ldr	r0, [pc, #176]	; (22490 <z_tick_sleep+0x114>)
   223e0:	2394      	movs	r3, #148	; 0x94
   223e2:	f001 ff2f 	bl	24244 <assert_print>
   223e6:	492c      	ldr	r1, [pc, #176]	; (22498 <z_tick_sleep+0x11c>)
   223e8:	482e      	ldr	r0, [pc, #184]	; (224a4 <z_tick_sleep+0x128>)
   223ea:	f001 ff2b 	bl	24244 <assert_print>
   223ee:	2194      	movs	r1, #148	; 0x94
   223f0:	482a      	ldr	r0, [pc, #168]	; (2249c <z_tick_sleep+0x120>)
   223f2:	f001 ff20 	bl	24236 <assert_post_action>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   223f6:	f06f 0401 	mvn.w	r4, #1
   223fa:	1a24      	subs	r4, r4, r0
   223fc:	e7e1      	b.n	223c2 <z_tick_sleep+0x46>
	pending_current = _current;
   223fe:	4f2a      	ldr	r7, [pc, #168]	; (224a8 <z_tick_sleep+0x12c>)
	z_spin_lock_set_owner(l);
   22400:	4825      	ldr	r0, [pc, #148]	; (22498 <z_tick_sleep+0x11c>)
   22402:	f7fd ff7d 	bl	20300 <z_spin_lock_set_owner>
   22406:	4b29      	ldr	r3, [pc, #164]	; (224ac <z_tick_sleep+0x130>)
   22408:	68b8      	ldr	r0, [r7, #8]
   2240a:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   2240c:	f7ff fbd4 	bl	21bb8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   22410:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   22412:	4927      	ldr	r1, [pc, #156]	; (224b0 <z_tick_sleep+0x134>)
   22414:	462a      	mov	r2, r5
   22416:	4633      	mov	r3, r6
   22418:	3018      	adds	r0, #24
   2241a:	f000 fa23 	bl	22864 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   2241e:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22420:	481d      	ldr	r0, [pc, #116]	; (22498 <z_tick_sleep+0x11c>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   22422:	7b53      	ldrb	r3, [r2, #13]
   22424:	f043 0310 	orr.w	r3, r3, #16
   22428:	7353      	strb	r3, [r2, #13]
   2242a:	f7fd ff59 	bl	202e0 <z_spin_unlock_valid>
   2242e:	b958      	cbnz	r0, 22448 <z_tick_sleep+0xcc>
   22430:	4a1a      	ldr	r2, [pc, #104]	; (2249c <z_tick_sleep+0x120>)
   22432:	4920      	ldr	r1, [pc, #128]	; (224b4 <z_tick_sleep+0x138>)
   22434:	4816      	ldr	r0, [pc, #88]	; (22490 <z_tick_sleep+0x114>)
   22436:	23e2      	movs	r3, #226	; 0xe2
   22438:	f001 ff04 	bl	24244 <assert_print>
   2243c:	4916      	ldr	r1, [pc, #88]	; (22498 <z_tick_sleep+0x11c>)
   2243e:	481e      	ldr	r0, [pc, #120]	; (224b8 <z_tick_sleep+0x13c>)
   22440:	f001 ff00 	bl	24244 <assert_print>
   22444:	21e2      	movs	r1, #226	; 0xe2
   22446:	e7d3      	b.n	223f0 <z_tick_sleep+0x74>
   22448:	4640      	mov	r0, r8
   2244a:	f7f2 fb8f 	bl	14b6c <arch_swap>
	return (thread->base.thread_state & state) != 0U;
   2244e:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   22450:	7b5b      	ldrb	r3, [r3, #13]
   22452:	06db      	lsls	r3, r3, #27
   22454:	d50c      	bpl.n	22470 <z_tick_sleep+0xf4>
   22456:	4919      	ldr	r1, [pc, #100]	; (224bc <z_tick_sleep+0x140>)
   22458:	4a0c      	ldr	r2, [pc, #48]	; (2248c <z_tick_sleep+0x110>)
   2245a:	480d      	ldr	r0, [pc, #52]	; (22490 <z_tick_sleep+0x114>)
   2245c:	f240 53a9 	movw	r3, #1449	; 0x5a9
   22460:	f001 fef0 	bl	24244 <assert_print>
   22464:	480b      	ldr	r0, [pc, #44]	; (22494 <z_tick_sleep+0x118>)
   22466:	f001 feed 	bl	24244 <assert_print>
   2246a:	f240 51a9 	movw	r1, #1449	; 0x5a9
   2246e:	e798      	b.n	223a2 <z_tick_sleep+0x26>

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   22470:	f004 fb45 	bl	26afe <sys_clock_tick_get_32>
   22474:	1a20      	subs	r0, r4, r0
   22476:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   2247a:	2801      	cmp	r0, #1
   2247c:	f173 0300 	sbcs.w	r3, r3, #0
   22480:	db96      	blt.n	223b0 <z_tick_sleep+0x34>
		return ticks;
	}
#endif

	return 0;
}
   22482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22486:	bf00      	nop
   22488:	0002b1ce 	.word	0x0002b1ce
   2248c:	0002b43b 	.word	0x0002b43b
   22490:	00027c2a 	.word	0x00027c2a
   22494:	0002a220 	.word	0x0002a220
   22498:	20002fc0 	.word	0x20002fc0
   2249c:	0002801e 	.word	0x0002801e
   224a0:	00028077 	.word	0x00028077
   224a4:	0002808c 	.word	0x0002808c
   224a8:	20002f78 	.word	0x20002f78
   224ac:	20002fb4 	.word	0x20002fb4
   224b0:	00026ad7 	.word	0x00026ad7
   224b4:	0002804b 	.word	0x0002804b
   224b8:	00028062 	.word	0x00028062
   224bc:	0002b719 	.word	0x0002b719

000224c0 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   224c0:	b508      	push	{r3, lr}
   224c2:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   224c6:	b173      	cbz	r3, 224e6 <z_impl_k_sleep+0x26>
   224c8:	4912      	ldr	r1, [pc, #72]	; (22514 <z_impl_k_sleep+0x54>)
   224ca:	4a13      	ldr	r2, [pc, #76]	; (22518 <z_impl_k_sleep+0x58>)
   224cc:	4813      	ldr	r0, [pc, #76]	; (2251c <z_impl_k_sleep+0x5c>)
   224ce:	f44f 63b7 	mov.w	r3, #1464	; 0x5b8
   224d2:	f001 feb7 	bl	24244 <assert_print>
   224d6:	4812      	ldr	r0, [pc, #72]	; (22520 <z_impl_k_sleep+0x60>)
   224d8:	f001 feb4 	bl	24244 <assert_print>
   224dc:	480e      	ldr	r0, [pc, #56]	; (22518 <z_impl_k_sleep+0x58>)
   224de:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
   224e2:	f001 fea8 	bl	24236 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   224e6:	f1b1 3fff 	cmp.w	r1, #4294967295
   224ea:	bf08      	it	eq
   224ec:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   224f0:	d106      	bne.n	22500 <z_impl_k_sleep+0x40>
		k_thread_suspend(_current);
   224f2:	4b0c      	ldr	r3, [pc, #48]	; (22524 <z_impl_k_sleep+0x64>)
   224f4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   224f6:	f7ff fcd9 	bl	21eac <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   224fa:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   224fe:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   22500:	f7ff ff3c 	bl	2237c <z_tick_sleep>
   22504:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   22508:	fb80 0303 	smull	r0, r3, r0, r3
   2250c:	0bc0      	lsrs	r0, r0, #15
   2250e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   22512:	e7f4      	b.n	224fe <z_impl_k_sleep+0x3e>
   22514:	0002b1ce 	.word	0x0002b1ce
   22518:	0002b43b 	.word	0x0002b43b
   2251c:	00027c2a 	.word	0x00027c2a
   22520:	0002a220 	.word	0x0002a220
   22524:	20002f78 	.word	0x20002f78

00022528 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   22528:	4b01      	ldr	r3, [pc, #4]	; (22530 <z_impl_z_current_get+0x8>)
   2252a:	6898      	ldr	r0, [r3, #8]
   2252c:	4770      	bx	lr
   2252e:	bf00      	nop
   22530:	20002f78 	.word	0x20002f78

00022534 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   22534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22538:	4604      	mov	r4, r0
   2253a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2253e:	f3ef 8611 	mrs	r6, BASEPRI
   22542:	f383 8812 	msr	BASEPRI_MAX, r3
   22546:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2254a:	4851      	ldr	r0, [pc, #324]	; (22690 <z_thread_abort+0x15c>)
   2254c:	f7fd feba 	bl	202c4 <z_spin_lock_valid>
   22550:	b968      	cbnz	r0, 2256e <z_thread_abort+0x3a>
   22552:	4a50      	ldr	r2, [pc, #320]	; (22694 <z_thread_abort+0x160>)
   22554:	4950      	ldr	r1, [pc, #320]	; (22698 <z_thread_abort+0x164>)
   22556:	4851      	ldr	r0, [pc, #324]	; (2269c <z_thread_abort+0x168>)
   22558:	2394      	movs	r3, #148	; 0x94
   2255a:	f001 fe73 	bl	24244 <assert_print>
   2255e:	494c      	ldr	r1, [pc, #304]	; (22690 <z_thread_abort+0x15c>)
   22560:	484f      	ldr	r0, [pc, #316]	; (226a0 <z_thread_abort+0x16c>)
   22562:	f001 fe6f 	bl	24244 <assert_print>
   22566:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22568:	484a      	ldr	r0, [pc, #296]	; (22694 <z_thread_abort+0x160>)
   2256a:	f001 fe64 	bl	24236 <assert_post_action>
	z_spin_lock_set_owner(l);
   2256e:	4848      	ldr	r0, [pc, #288]	; (22690 <z_thread_abort+0x15c>)
   22570:	f7fd fec6 	bl	20300 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   22574:	7b23      	ldrb	r3, [r4, #12]
   22576:	07d9      	lsls	r1, r3, #31
   22578:	d522      	bpl.n	225c0 <z_thread_abort+0x8c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2257a:	4845      	ldr	r0, [pc, #276]	; (22690 <z_thread_abort+0x15c>)
   2257c:	f7fd feb0 	bl	202e0 <z_spin_unlock_valid>
   22580:	b958      	cbnz	r0, 2259a <z_thread_abort+0x66>
   22582:	4a44      	ldr	r2, [pc, #272]	; (22694 <z_thread_abort+0x160>)
   22584:	4947      	ldr	r1, [pc, #284]	; (226a4 <z_thread_abort+0x170>)
   22586:	4845      	ldr	r0, [pc, #276]	; (2269c <z_thread_abort+0x168>)
   22588:	23c3      	movs	r3, #195	; 0xc3
   2258a:	f001 fe5b 	bl	24244 <assert_print>
   2258e:	4940      	ldr	r1, [pc, #256]	; (22690 <z_thread_abort+0x15c>)
   22590:	4845      	ldr	r0, [pc, #276]	; (226a8 <z_thread_abort+0x174>)
   22592:	f001 fe57 	bl	24244 <assert_print>
   22596:	21c3      	movs	r1, #195	; 0xc3
   22598:	e7e6      	b.n	22568 <z_thread_abort+0x34>
	__asm__ volatile(
   2259a:	f386 8811 	msr	BASEPRI, r6
   2259e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
   225a2:	4a42      	ldr	r2, [pc, #264]	; (226ac <z_thread_abort+0x178>)
   225a4:	4942      	ldr	r1, [pc, #264]	; (226b0 <z_thread_abort+0x17c>)
   225a6:	483d      	ldr	r0, [pc, #244]	; (2269c <z_thread_abort+0x168>)
   225a8:	f240 63ca 	movw	r3, #1738	; 0x6ca
   225ac:	f001 fe4a 	bl	24244 <assert_print>
   225b0:	4621      	mov	r1, r4
   225b2:	4840      	ldr	r0, [pc, #256]	; (226b4 <z_thread_abort+0x180>)
   225b4:	f001 fe46 	bl	24244 <assert_print>
   225b8:	f240 61ca 	movw	r1, #1738	; 0x6ca
	}
#endif
	end_thread(thread);
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
   225bc:	483b      	ldr	r0, [pc, #236]	; (226ac <z_thread_abort+0x178>)
   225be:	e7d4      	b.n	2256a <z_thread_abort+0x36>
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   225c0:	7b63      	ldrb	r3, [r4, #13]
   225c2:	071a      	lsls	r2, r3, #28
   225c4:	d50a      	bpl.n	225dc <z_thread_abort+0xa8>
   225c6:	4832      	ldr	r0, [pc, #200]	; (22690 <z_thread_abort+0x15c>)
   225c8:	f7fd fe8a 	bl	202e0 <z_spin_unlock_valid>
   225cc:	2800      	cmp	r0, #0
   225ce:	d0d8      	beq.n	22582 <z_thread_abort+0x4e>
   225d0:	f386 8811 	msr	BASEPRI, r6
   225d4:	f3bf 8f6f 	isb	sy
	}
	k_spin_unlock(&sched_spinlock, key);
}
   225d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   225dc:	f023 0220 	bic.w	r2, r3, #32
   225e0:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   225e4:	09d2      	lsrs	r2, r2, #7
   225e6:	d12c      	bne.n	22642 <z_thread_abort+0x10e>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   225e8:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   225ea:	68a3      	ldr	r3, [r4, #8]
   225ec:	b113      	cbz	r3, 225f4 <z_thread_abort+0xc0>
			unpend_thread_no_timeout(thread);
   225ee:	4620      	mov	r0, r4
   225f0:	f7ff fcc4 	bl	21f7c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   225f4:	f104 0018 	add.w	r0, r4, #24
   225f8:	f000 f9f4 	bl	229e4 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   225fc:	f104 0758 	add.w	r7, r4, #88	; 0x58
   22600:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   22604:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22606:	42bd      	cmp	r5, r7
   22608:	d000      	beq.n	2260c <z_thread_abort+0xd8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2260a:	bb25      	cbnz	r5, 22656 <z_thread_abort+0x122>
		update_cache(1);
   2260c:	2001      	movs	r0, #1
   2260e:	f7fe ff7d 	bl	2150c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   22612:	4b29      	ldr	r3, [pc, #164]	; (226b8 <z_thread_abort+0x184>)
   22614:	689b      	ldr	r3, [r3, #8]
   22616:	42a3      	cmp	r3, r4
   22618:	d1d5      	bne.n	225c6 <z_thread_abort+0x92>
   2261a:	f3ef 8305 	mrs	r3, IPSR
   2261e:	2b00      	cmp	r3, #0
   22620:	d1d1      	bne.n	225c6 <z_thread_abort+0x92>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22622:	481b      	ldr	r0, [pc, #108]	; (22690 <z_thread_abort+0x15c>)
   22624:	f7fd fe5c 	bl	202e0 <z_spin_unlock_valid>
   22628:	bb10      	cbnz	r0, 22670 <z_thread_abort+0x13c>
   2262a:	4a1a      	ldr	r2, [pc, #104]	; (22694 <z_thread_abort+0x160>)
   2262c:	491d      	ldr	r1, [pc, #116]	; (226a4 <z_thread_abort+0x170>)
   2262e:	481b      	ldr	r0, [pc, #108]	; (2269c <z_thread_abort+0x168>)
   22630:	23e2      	movs	r3, #226	; 0xe2
   22632:	f001 fe07 	bl	24244 <assert_print>
   22636:	4916      	ldr	r1, [pc, #88]	; (22690 <z_thread_abort+0x15c>)
   22638:	481b      	ldr	r0, [pc, #108]	; (226a8 <z_thread_abort+0x174>)
   2263a:	f001 fe03 	bl	24244 <assert_print>
   2263e:	21e2      	movs	r1, #226	; 0xe2
   22640:	e792      	b.n	22568 <z_thread_abort+0x34>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22642:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   22646:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   2264a:	481c      	ldr	r0, [pc, #112]	; (226bc <z_thread_abort+0x188>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2264c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2264e:	4621      	mov	r1, r4
   22650:	f7ff f9dc 	bl	21a0c <z_priq_dumb_remove>
}
   22654:	e7c9      	b.n	225ea <z_thread_abort+0xb6>
		unpend_thread_no_timeout(thread);
   22656:	4628      	mov	r0, r5
   22658:	f7ff fc90 	bl	21f7c <unpend_thread_no_timeout>
   2265c:	f105 0018 	add.w	r0, r5, #24
   22660:	f000 f9c0 	bl	229e4 <z_abort_timeout>
   22664:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   22668:	4628      	mov	r0, r5
   2266a:	f7fe ff83 	bl	21574 <ready_thread>
   2266e:	e7c9      	b.n	22604 <z_thread_abort+0xd0>
   22670:	4630      	mov	r0, r6
   22672:	f7f2 fa7b 	bl	14b6c <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   22676:	490e      	ldr	r1, [pc, #56]	; (226b0 <z_thread_abort+0x17c>)
   22678:	4a0c      	ldr	r2, [pc, #48]	; (226ac <z_thread_abort+0x178>)
   2267a:	4808      	ldr	r0, [pc, #32]	; (2269c <z_thread_abort+0x168>)
   2267c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
   22680:	f001 fde0 	bl	24244 <assert_print>
   22684:	480e      	ldr	r0, [pc, #56]	; (226c0 <z_thread_abort+0x18c>)
   22686:	f001 fddd 	bl	24244 <assert_print>
   2268a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
   2268e:	e795      	b.n	225bc <z_thread_abort+0x88>
   22690:	20002fc0 	.word	0x20002fc0
   22694:	0002801e 	.word	0x0002801e
   22698:	00028077 	.word	0x00028077
   2269c:	00027c2a 	.word	0x00027c2a
   226a0:	0002808c 	.word	0x0002808c
   226a4:	0002804b 	.word	0x0002804b
   226a8:	00028062 	.word	0x00028062
   226ac:	0002b43b 	.word	0x0002b43b
   226b0:	0002a7c0 	.word	0x0002a7c0
   226b4:	0002b759 	.word	0x0002b759
   226b8:	20002f78 	.word	0x20002f78
   226bc:	20002f94 	.word	0x20002f94
   226c0:	0002b778 	.word	0x0002b778

000226c4 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   226c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   226c8:	4606      	mov	r6, r0
   226ca:	4688      	mov	r8, r1
   226cc:	4617      	mov	r7, r2
	__asm__ volatile(
   226ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   226d2:	f3ef 8911 	mrs	r9, BASEPRI
   226d6:	f383 8812 	msr	BASEPRI_MAX, r3
   226da:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   226de:	4821      	ldr	r0, [pc, #132]	; (22764 <z_sched_wake+0xa0>)
   226e0:	f7fd fdf0 	bl	202c4 <z_spin_lock_valid>
   226e4:	4605      	mov	r5, r0
   226e6:	b968      	cbnz	r0, 22704 <z_sched_wake+0x40>
   226e8:	4a1f      	ldr	r2, [pc, #124]	; (22768 <z_sched_wake+0xa4>)
   226ea:	4920      	ldr	r1, [pc, #128]	; (2276c <z_sched_wake+0xa8>)
   226ec:	4820      	ldr	r0, [pc, #128]	; (22770 <z_sched_wake+0xac>)
   226ee:	2394      	movs	r3, #148	; 0x94
   226f0:	f001 fda8 	bl	24244 <assert_print>
   226f4:	491b      	ldr	r1, [pc, #108]	; (22764 <z_sched_wake+0xa0>)
   226f6:	481f      	ldr	r0, [pc, #124]	; (22774 <z_sched_wake+0xb0>)
   226f8:	f001 fda4 	bl	24244 <assert_print>
   226fc:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   226fe:	481a      	ldr	r0, [pc, #104]	; (22768 <z_sched_wake+0xa4>)
   22700:	f001 fd99 	bl	24236 <assert_post_action>
	z_spin_lock_set_owner(l);
   22704:	4817      	ldr	r0, [pc, #92]	; (22764 <z_sched_wake+0xa0>)
   22706:	f7fd fdfb 	bl	20300 <z_spin_lock_set_owner>
	return list->head == list;
   2270a:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2270c:	42a6      	cmp	r6, r4
   2270e:	d01d      	beq.n	2274c <z_sched_wake+0x88>
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);

		if (thread != NULL) {
   22710:	b1f4      	cbz	r4, 22750 <z_sched_wake+0x8c>
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   22712:	4620      	mov	r0, r4
   22714:	f8c4 807c 	str.w	r8, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   22718:	6167      	str	r7, [r4, #20]
   2271a:	f7ff fc2f 	bl	21f7c <unpend_thread_no_timeout>
   2271e:	f104 0018 	add.w	r0, r4, #24
   22722:	f000 f95f 	bl	229e4 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   22726:	4620      	mov	r0, r4
   22728:	f7fe ff24 	bl	21574 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2272c:	480d      	ldr	r0, [pc, #52]	; (22764 <z_sched_wake+0xa0>)
   2272e:	f7fd fdd7 	bl	202e0 <z_spin_unlock_valid>
   22732:	b978      	cbnz	r0, 22754 <z_sched_wake+0x90>
   22734:	4a0c      	ldr	r2, [pc, #48]	; (22768 <z_sched_wake+0xa4>)
   22736:	4910      	ldr	r1, [pc, #64]	; (22778 <z_sched_wake+0xb4>)
   22738:	480d      	ldr	r0, [pc, #52]	; (22770 <z_sched_wake+0xac>)
   2273a:	23c3      	movs	r3, #195	; 0xc3
   2273c:	f001 fd82 	bl	24244 <assert_print>
   22740:	4908      	ldr	r1, [pc, #32]	; (22764 <z_sched_wake+0xa0>)
   22742:	480e      	ldr	r0, [pc, #56]	; (2277c <z_sched_wake+0xb8>)
   22744:	f001 fd7e 	bl	24244 <assert_print>
   22748:	21c3      	movs	r1, #195	; 0xc3
   2274a:	e7d8      	b.n	226fe <z_sched_wake+0x3a>
	bool ret = false;
   2274c:	2500      	movs	r5, #0
   2274e:	e7ed      	b.n	2272c <z_sched_wake+0x68>
   22750:	4625      	mov	r5, r4
   22752:	e7eb      	b.n	2272c <z_sched_wake+0x68>
	__asm__ volatile(
   22754:	f389 8811 	msr	BASEPRI, r9
   22758:	f3bf 8f6f 	isb	sy
			ret = true;
		}
	}

	return ret;
}
   2275c:	4628      	mov	r0, r5
   2275e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22762:	bf00      	nop
   22764:	20002fc0 	.word	0x20002fc0
   22768:	0002801e 	.word	0x0002801e
   2276c:	00028077 	.word	0x00028077
   22770:	00027c2a 	.word	0x00027c2a
   22774:	0002808c 	.word	0x0002808c
   22778:	0002804b 	.word	0x0002804b
   2277c:	00028062 	.word	0x00028062

00022780 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   22780:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   22782:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   22786:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   22788:	e9cd 6700 	strd	r6, r7, [sp]
   2278c:	f7ff fa86 	bl	21c9c <z_pend_curr>

	if (data != NULL) {
   22790:	b11c      	cbz	r4, 2279a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   22792:	4b03      	ldr	r3, [pc, #12]	; (227a0 <z_sched_wait+0x20>)
   22794:	689b      	ldr	r3, [r3, #8]
   22796:	695b      	ldr	r3, [r3, #20]
   22798:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   2279a:	b002      	add	sp, #8
   2279c:	bdd0      	pop	{r4, r6, r7, pc}
   2279e:	bf00      	nop
   227a0:	20002f78 	.word	0x20002f78

000227a4 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   227a4:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   227a6:	4806      	ldr	r0, [pc, #24]	; (227c0 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   227a8:	4a06      	ldr	r2, [pc, #24]	; (227c4 <z_data_copy+0x20>)
   227aa:	4907      	ldr	r1, [pc, #28]	; (227c8 <z_data_copy+0x24>)
   227ac:	1a12      	subs	r2, r2, r0
   227ae:	f004 f894 	bl	268da <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   227b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   227b6:	4a05      	ldr	r2, [pc, #20]	; (227cc <z_data_copy+0x28>)
   227b8:	4905      	ldr	r1, [pc, #20]	; (227d0 <z_data_copy+0x2c>)
   227ba:	4806      	ldr	r0, [pc, #24]	; (227d4 <z_data_copy+0x30>)
   227bc:	f004 b88d 	b.w	268da <z_early_memcpy>
   227c0:	20000000 	.word	0x20000000
   227c4:	20000b04 	.word	0x20000b04
   227c8:	0002baf8 	.word	0x0002baf8
   227cc:	00000000 	.word	0x00000000
   227d0:	0002baf8 	.word	0x0002baf8
   227d4:	20000000 	.word	0x20000000

000227d8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   227d8:	4b03      	ldr	r3, [pc, #12]	; (227e8 <elapsed+0x10>)
   227da:	681b      	ldr	r3, [r3, #0]
   227dc:	b90b      	cbnz	r3, 227e2 <elapsed+0xa>
   227de:	f7fa bf8d 	b.w	1d6fc <sys_clock_elapsed>
}
   227e2:	2000      	movs	r0, #0
   227e4:	4770      	bx	lr
   227e6:	bf00      	nop
   227e8:	20002fc4 	.word	0x20002fc4

000227ec <next_timeout>:

static int32_t next_timeout(void)
{
   227ec:	b510      	push	{r4, lr}
	return list->head == list;
   227ee:	4b0e      	ldr	r3, [pc, #56]	; (22828 <next_timeout+0x3c>)
   227f0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   227f2:	429c      	cmp	r4, r3
   227f4:	d104      	bne.n	22800 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   227f6:	f7ff ffef 	bl	227d8 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   227fa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
   227fe:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   22800:	f7ff ffea 	bl	227d8 <elapsed>
	if ((to == NULL) ||
   22804:	2c00      	cmp	r4, #0
   22806:	d0f8      	beq.n	227fa <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   22808:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   2280c:	1a1b      	subs	r3, r3, r0
   2280e:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   22812:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   22816:	f172 0100 	sbcs.w	r1, r2, #0
   2281a:	daee      	bge.n	227fa <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   2281c:	2a00      	cmp	r2, #0
   2281e:	bfac      	ite	ge
   22820:	4618      	movge	r0, r3
   22822:	2000      	movlt	r0, #0
	return ret;
   22824:	e7eb      	b.n	227fe <next_timeout+0x12>
   22826:	bf00      	nop
   22828:	2000078c 	.word	0x2000078c

0002282c <remove_timeout>:
{
   2282c:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2282e:	b170      	cbz	r0, 2284e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   22830:	4b0b      	ldr	r3, [pc, #44]	; (22860 <remove_timeout+0x34>)
   22832:	685b      	ldr	r3, [r3, #4]
   22834:	4298      	cmp	r0, r3
   22836:	d00a      	beq.n	2284e <remove_timeout+0x22>
   22838:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   2283a:	b143      	cbz	r3, 2284e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   2283c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   22840:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   22844:	1912      	adds	r2, r2, r4
   22846:	eb41 0105 	adc.w	r1, r1, r5
   2284a:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const next = node->next;
   2284e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   22852:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   22854:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   22856:	2300      	movs	r3, #0
	node->prev = NULL;
   22858:	e9c0 3300 	strd	r3, r3, [r0]
}
   2285c:	bd30      	pop	{r4, r5, pc}
   2285e:	bf00      	nop
   22860:	2000078c 	.word	0x2000078c

00022864 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22864:	f1b3 3fff 	cmp.w	r3, #4294967295
   22868:	bf08      	it	eq
   2286a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   2286e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22872:	4604      	mov	r4, r0
   22874:	4692      	mov	sl, r2
   22876:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22878:	f000 8099 	beq.w	229ae <z_add_timeout+0x14a>
	return node->next != NULL;
   2287c:	6806      	ldr	r6, [r0, #0]

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   2287e:	b166      	cbz	r6, 2289a <z_add_timeout+0x36>
   22880:	494c      	ldr	r1, [pc, #304]	; (229b4 <z_add_timeout+0x150>)
   22882:	4a4d      	ldr	r2, [pc, #308]	; (229b8 <z_add_timeout+0x154>)
   22884:	484d      	ldr	r0, [pc, #308]	; (229bc <z_add_timeout+0x158>)
   22886:	235e      	movs	r3, #94	; 0x5e
   22888:	f001 fcdc 	bl	24244 <assert_print>
   2288c:	484c      	ldr	r0, [pc, #304]	; (229c0 <z_add_timeout+0x15c>)
   2288e:	f001 fcd9 	bl	24244 <assert_print>
   22892:	4849      	ldr	r0, [pc, #292]	; (229b8 <z_add_timeout+0x154>)
   22894:	215e      	movs	r1, #94	; 0x5e
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22896:	f001 fcce 	bl	24236 <assert_post_action>
	to->fn = fn;
   2289a:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   2289c:	f04f 0340 	mov.w	r3, #64	; 0x40
   228a0:	f3ef 8711 	mrs	r7, BASEPRI
   228a4:	f383 8812 	msr	BASEPRI_MAX, r3
   228a8:	f3bf 8f6f 	isb	sy
   228ac:	4845      	ldr	r0, [pc, #276]	; (229c4 <z_add_timeout+0x160>)
   228ae:	f7fd fd09 	bl	202c4 <z_spin_lock_valid>
   228b2:	b960      	cbnz	r0, 228ce <z_add_timeout+0x6a>
   228b4:	4a44      	ldr	r2, [pc, #272]	; (229c8 <z_add_timeout+0x164>)
   228b6:	4945      	ldr	r1, [pc, #276]	; (229cc <z_add_timeout+0x168>)
   228b8:	4840      	ldr	r0, [pc, #256]	; (229bc <z_add_timeout+0x158>)
   228ba:	2394      	movs	r3, #148	; 0x94
   228bc:	f001 fcc2 	bl	24244 <assert_print>
   228c0:	4940      	ldr	r1, [pc, #256]	; (229c4 <z_add_timeout+0x160>)
   228c2:	4843      	ldr	r0, [pc, #268]	; (229d0 <z_add_timeout+0x16c>)
   228c4:	f001 fcbe 	bl	24244 <assert_print>
   228c8:	2194      	movs	r1, #148	; 0x94
   228ca:	483f      	ldr	r0, [pc, #252]	; (229c8 <z_add_timeout+0x164>)
   228cc:	e7e3      	b.n	22896 <z_add_timeout+0x32>
	z_spin_lock_set_owner(l);
   228ce:	483d      	ldr	r0, [pc, #244]	; (229c4 <z_add_timeout+0x160>)
   228d0:	f7fd fd16 	bl	20300 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   228d4:	f1ba 3fff 	cmp.w	sl, #4294967295
   228d8:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   228dc:	da23      	bge.n	22926 <z_add_timeout+0xc2>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   228de:	493d      	ldr	r1, [pc, #244]	; (229d4 <z_add_timeout+0x170>)
   228e0:	e9d1 2000 	ldrd	r2, r0, [r1]
   228e4:	f06f 0301 	mvn.w	r3, #1
   228e8:	1a9b      	subs	r3, r3, r2
   228ea:	f04f 32ff 	mov.w	r2, #4294967295
   228ee:	eb62 0000 	sbc.w	r0, r2, r0
   228f2:	ebb3 030a 	subs.w	r3, r3, sl
   228f6:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   228fa:	2b01      	cmp	r3, #1
   228fc:	f170 0200 	sbcs.w	r2, r0, #0
   22900:	da01      	bge.n	22906 <z_add_timeout+0xa2>
   22902:	2301      	movs	r3, #1
   22904:	4630      	mov	r0, r6
   22906:	e9c4 3004 	strd	r3, r0, [r4, #16]
	return list->head == list;
   2290a:	4b33      	ldr	r3, [pc, #204]	; (229d8 <z_add_timeout+0x174>)
   2290c:	681a      	ldr	r2, [r3, #0]
	return (node == list->tail) ? NULL : node->next;
   2290e:	f8d3 c004 	ldr.w	ip, [r3, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22912:	429a      	cmp	r2, r3
   22914:	bf18      	it	ne
   22916:	4616      	movne	r6, r2
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   22918:	b986      	cbnz	r6, 2293c <z_add_timeout+0xd8>
	node->prev = tail;
   2291a:	e9c4 3c00 	strd	r3, ip, [r4]
	tail->next = node;
   2291e:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   22922:	605c      	str	r4, [r3, #4]
}
   22924:	e01c      	b.n	22960 <z_add_timeout+0xfc>
			to->dticks = timeout.ticks + 1 + elapsed();
   22926:	f7ff ff57 	bl	227d8 <elapsed>
   2292a:	f11a 0801 	adds.w	r8, sl, #1
   2292e:	f145 0500 	adc.w	r5, r5, #0
   22932:	eb18 0300 	adds.w	r3, r8, r0
   22936:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   2293a:	e7e4      	b.n	22906 <z_add_timeout+0xa2>
			if (t->dticks > to->dticks) {
   2293c:	e9d6 1504 	ldrd	r1, r5, [r6, #16]
   22940:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
   22944:	428a      	cmp	r2, r1
   22946:	eb70 0e05 	sbcs.w	lr, r0, r5
   2294a:	da23      	bge.n	22994 <z_add_timeout+0x130>
				t->dticks -= to->dticks;
   2294c:	1a89      	subs	r1, r1, r2
	sys_dnode_t *const prev = successor->prev;
   2294e:	6872      	ldr	r2, [r6, #4]
   22950:	eb65 0500 	sbc.w	r5, r5, r0
   22954:	e9c6 1504 	strd	r1, r5, [r6, #16]
	node->next = successor;
   22958:	e9c4 6200 	strd	r6, r2, [r4]
	prev->next = node;
   2295c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2295e:	6074      	str	r4, [r6, #4]
	return list->head == list;
   22960:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22962:	429a      	cmp	r2, r3
   22964:	d006      	beq.n	22974 <z_add_timeout+0x110>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   22966:	4294      	cmp	r4, r2
   22968:	d104      	bne.n	22974 <z_add_timeout+0x110>
			sys_clock_set_timeout(next_timeout(), false);
   2296a:	f7ff ff3f 	bl	227ec <next_timeout>
   2296e:	2100      	movs	r1, #0
   22970:	f7fa fe98 	bl	1d6a4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22974:	4813      	ldr	r0, [pc, #76]	; (229c4 <z_add_timeout+0x160>)
   22976:	f7fd fcb3 	bl	202e0 <z_spin_unlock_valid>
   2297a:	b9a0      	cbnz	r0, 229a6 <z_add_timeout+0x142>
   2297c:	4a12      	ldr	r2, [pc, #72]	; (229c8 <z_add_timeout+0x164>)
   2297e:	4917      	ldr	r1, [pc, #92]	; (229dc <z_add_timeout+0x178>)
   22980:	480e      	ldr	r0, [pc, #56]	; (229bc <z_add_timeout+0x158>)
   22982:	23c3      	movs	r3, #195	; 0xc3
   22984:	f001 fc5e 	bl	24244 <assert_print>
   22988:	490e      	ldr	r1, [pc, #56]	; (229c4 <z_add_timeout+0x160>)
   2298a:	4815      	ldr	r0, [pc, #84]	; (229e0 <z_add_timeout+0x17c>)
   2298c:	f001 fc5a 	bl	24244 <assert_print>
   22990:	21c3      	movs	r1, #195	; 0xc3
   22992:	e79a      	b.n	228ca <z_add_timeout+0x66>
			to->dticks -= t->dticks;
   22994:	1a52      	subs	r2, r2, r1
   22996:	eb60 0005 	sbc.w	r0, r0, r5
	return (node == list->tail) ? NULL : node->next;
   2299a:	4566      	cmp	r6, ip
   2299c:	e9c4 2004 	strd	r2, r0, [r4, #16]
   229a0:	d0bb      	beq.n	2291a <z_add_timeout+0xb6>
   229a2:	6836      	ldr	r6, [r6, #0]
   229a4:	e7b8      	b.n	22918 <z_add_timeout+0xb4>
	__asm__ volatile(
   229a6:	f387 8811 	msr	BASEPRI, r7
   229aa:	f3bf 8f6f 	isb	sy
		}
	}
}
   229ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   229b2:	bf00      	nop
   229b4:	0002b7be 	.word	0x0002b7be
   229b8:	0002b79a 	.word	0x0002b79a
   229bc:	00027c2a 	.word	0x00027c2a
   229c0:	0002a220 	.word	0x0002a220
   229c4:	20002fc8 	.word	0x20002fc8
   229c8:	0002801e 	.word	0x0002801e
   229cc:	00028077 	.word	0x00028077
   229d0:	0002808c 	.word	0x0002808c
   229d4:	20002be8 	.word	0x20002be8
   229d8:	2000078c 	.word	0x2000078c
   229dc:	0002804b 	.word	0x0002804b
   229e0:	00028062 	.word	0x00028062

000229e4 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   229e4:	b538      	push	{r3, r4, r5, lr}
   229e6:	4604      	mov	r4, r0
	__asm__ volatile(
   229e8:	f04f 0340 	mov.w	r3, #64	; 0x40
   229ec:	f3ef 8511 	mrs	r5, BASEPRI
   229f0:	f383 8812 	msr	BASEPRI_MAX, r3
   229f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   229f8:	4819      	ldr	r0, [pc, #100]	; (22a60 <z_abort_timeout+0x7c>)
   229fa:	f7fd fc63 	bl	202c4 <z_spin_lock_valid>
   229fe:	b968      	cbnz	r0, 22a1c <z_abort_timeout+0x38>
   22a00:	4a18      	ldr	r2, [pc, #96]	; (22a64 <z_abort_timeout+0x80>)
   22a02:	4919      	ldr	r1, [pc, #100]	; (22a68 <z_abort_timeout+0x84>)
   22a04:	4819      	ldr	r0, [pc, #100]	; (22a6c <z_abort_timeout+0x88>)
   22a06:	2394      	movs	r3, #148	; 0x94
   22a08:	f001 fc1c 	bl	24244 <assert_print>
   22a0c:	4914      	ldr	r1, [pc, #80]	; (22a60 <z_abort_timeout+0x7c>)
   22a0e:	4818      	ldr	r0, [pc, #96]	; (22a70 <z_abort_timeout+0x8c>)
   22a10:	f001 fc18 	bl	24244 <assert_print>
   22a14:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22a16:	4813      	ldr	r0, [pc, #76]	; (22a64 <z_abort_timeout+0x80>)
   22a18:	f001 fc0d 	bl	24236 <assert_post_action>
	z_spin_lock_set_owner(l);
   22a1c:	4810      	ldr	r0, [pc, #64]	; (22a60 <z_abort_timeout+0x7c>)
   22a1e:	f7fd fc6f 	bl	20300 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   22a22:	6823      	ldr	r3, [r4, #0]
   22a24:	b19b      	cbz	r3, 22a4e <z_abort_timeout+0x6a>
			remove_timeout(to);
   22a26:	4620      	mov	r0, r4
   22a28:	f7ff ff00 	bl	2282c <remove_timeout>
			ret = 0;
   22a2c:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22a2e:	480c      	ldr	r0, [pc, #48]	; (22a60 <z_abort_timeout+0x7c>)
   22a30:	f7fd fc56 	bl	202e0 <z_spin_unlock_valid>
   22a34:	b970      	cbnz	r0, 22a54 <z_abort_timeout+0x70>
   22a36:	4a0b      	ldr	r2, [pc, #44]	; (22a64 <z_abort_timeout+0x80>)
   22a38:	490e      	ldr	r1, [pc, #56]	; (22a74 <z_abort_timeout+0x90>)
   22a3a:	480c      	ldr	r0, [pc, #48]	; (22a6c <z_abort_timeout+0x88>)
   22a3c:	23c3      	movs	r3, #195	; 0xc3
   22a3e:	f001 fc01 	bl	24244 <assert_print>
   22a42:	4907      	ldr	r1, [pc, #28]	; (22a60 <z_abort_timeout+0x7c>)
   22a44:	480c      	ldr	r0, [pc, #48]	; (22a78 <z_abort_timeout+0x94>)
   22a46:	f001 fbfd 	bl	24244 <assert_print>
   22a4a:	21c3      	movs	r1, #195	; 0xc3
   22a4c:	e7e3      	b.n	22a16 <z_abort_timeout+0x32>
	int ret = -EINVAL;
   22a4e:	f06f 0415 	mvn.w	r4, #21
   22a52:	e7ec      	b.n	22a2e <z_abort_timeout+0x4a>
	__asm__ volatile(
   22a54:	f385 8811 	msr	BASEPRI, r5
   22a58:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   22a5c:	4620      	mov	r0, r4
   22a5e:	bd38      	pop	{r3, r4, r5, pc}
   22a60:	20002fc8 	.word	0x20002fc8
   22a64:	0002801e 	.word	0x0002801e
   22a68:	00028077 	.word	0x00028077
   22a6c:	00027c2a 	.word	0x00027c2a
   22a70:	0002808c 	.word	0x0002808c
   22a74:	0002804b 	.word	0x0002804b
   22a78:	00028062 	.word	0x00028062

00022a7c <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
   22a7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22a80:	4604      	mov	r4, r0
	__asm__ volatile(
   22a82:	f04f 0340 	mov.w	r3, #64	; 0x40
   22a86:	f3ef 8711 	mrs	r7, BASEPRI
   22a8a:	f383 8812 	msr	BASEPRI_MAX, r3
   22a8e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22a92:	4847      	ldr	r0, [pc, #284]	; (22bb0 <sys_clock_announce+0x134>)
   22a94:	f7fd fc16 	bl	202c4 <z_spin_lock_valid>
   22a98:	b968      	cbnz	r0, 22ab6 <sys_clock_announce+0x3a>
   22a9a:	4a46      	ldr	r2, [pc, #280]	; (22bb4 <sys_clock_announce+0x138>)
   22a9c:	4946      	ldr	r1, [pc, #280]	; (22bb8 <sys_clock_announce+0x13c>)
   22a9e:	4847      	ldr	r0, [pc, #284]	; (22bbc <sys_clock_announce+0x140>)
   22aa0:	2394      	movs	r3, #148	; 0x94
   22aa2:	f001 fbcf 	bl	24244 <assert_print>
   22aa6:	4942      	ldr	r1, [pc, #264]	; (22bb0 <sys_clock_announce+0x134>)
   22aa8:	4845      	ldr	r0, [pc, #276]	; (22bc0 <sys_clock_announce+0x144>)
   22aaa:	f001 fbcb 	bl	24244 <assert_print>
   22aae:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22ab0:	4840      	ldr	r0, [pc, #256]	; (22bb4 <sys_clock_announce+0x138>)
   22ab2:	f001 fbc0 	bl	24236 <assert_post_action>
	return list->head == list;
   22ab6:	f8df 9118 	ldr.w	r9, [pc, #280]	; 22bd0 <sys_clock_announce+0x154>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   22aba:	f8df 8118 	ldr.w	r8, [pc, #280]	; 22bd4 <sys_clock_announce+0x158>
	z_spin_lock_set_owner(l);
   22abe:	483c      	ldr	r0, [pc, #240]	; (22bb0 <sys_clock_announce+0x134>)
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
   22ac0:	4e40      	ldr	r6, [pc, #256]	; (22bc4 <sys_clock_announce+0x148>)
   22ac2:	f7fd fc1d 	bl	20300 <z_spin_lock_set_owner>
	announce_remaining = ticks;
   22ac6:	f8c8 4000 	str.w	r4, [r8]
   22aca:	f8d9 4000 	ldr.w	r4, [r9]
		t->dticks = 0;
   22ace:	f04f 0a00 	mov.w	sl, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22ad2:	454c      	cmp	r4, r9
   22ad4:	bf08      	it	eq
   22ad6:	2400      	moveq	r4, #0
   22ad8:	f04f 0b00 	mov.w	fp, #0
		curr_tick += dt;
   22adc:	e9d6 2c00 	ldrd	r2, ip, [r6]
	     (t != NULL) && (t->dticks <= announce_remaining);
   22ae0:	f8d8 3000 	ldr.w	r3, [r8]
   22ae4:	2c00      	cmp	r4, #0
   22ae6:	d048      	beq.n	22b7a <sys_clock_announce+0xfe>
   22ae8:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
   22aec:	17d8      	asrs	r0, r3, #31
   22aee:	42ab      	cmp	r3, r5
   22af0:	eb70 0e01 	sbcs.w	lr, r0, r1
   22af4:	da05      	bge.n	22b02 <sys_clock_announce+0x86>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
   22af6:	1aed      	subs	r5, r5, r3
   22af8:	eb61 0100 	sbc.w	r1, r1, r0
   22afc:	e9c4 5104 	strd	r5, r1, [r4, #16]
   22b00:	e03b      	b.n	22b7a <sys_clock_announce+0xfe>
		curr_tick += dt;
   22b02:	18aa      	adds	r2, r5, r2
   22b04:	eb4c 73e5 	adc.w	r3, ip, r5, asr #31
		remove_timeout(t);
   22b08:	4620      	mov	r0, r4
		t->dticks = 0;
   22b0a:	e9c4 ab04 	strd	sl, fp, [r4, #16]
		curr_tick += dt;
   22b0e:	e9c6 2300 	strd	r2, r3, [r6]
		remove_timeout(t);
   22b12:	f7ff fe8b 	bl	2282c <remove_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22b16:	4826      	ldr	r0, [pc, #152]	; (22bb0 <sys_clock_announce+0x134>)
   22b18:	f7fd fbe2 	bl	202e0 <z_spin_unlock_valid>
   22b1c:	b958      	cbnz	r0, 22b36 <sys_clock_announce+0xba>
   22b1e:	4a25      	ldr	r2, [pc, #148]	; (22bb4 <sys_clock_announce+0x138>)
   22b20:	4929      	ldr	r1, [pc, #164]	; (22bc8 <sys_clock_announce+0x14c>)
   22b22:	4826      	ldr	r0, [pc, #152]	; (22bbc <sys_clock_announce+0x140>)
   22b24:	23c3      	movs	r3, #195	; 0xc3
   22b26:	f001 fb8d 	bl	24244 <assert_print>
   22b2a:	4921      	ldr	r1, [pc, #132]	; (22bb0 <sys_clock_announce+0x134>)
   22b2c:	4827      	ldr	r0, [pc, #156]	; (22bcc <sys_clock_announce+0x150>)
   22b2e:	f001 fb89 	bl	24244 <assert_print>
   22b32:	21c3      	movs	r1, #195	; 0xc3
   22b34:	e7bc      	b.n	22ab0 <sys_clock_announce+0x34>
	__asm__ volatile(
   22b36:	f387 8811 	msr	BASEPRI, r7
   22b3a:	f3bf 8f6f 	isb	sy
		t->fn(t);
   22b3e:	68a3      	ldr	r3, [r4, #8]
   22b40:	4620      	mov	r0, r4
   22b42:	4798      	blx	r3
	__asm__ volatile(
   22b44:	f04f 0340 	mov.w	r3, #64	; 0x40
   22b48:	f3ef 8711 	mrs	r7, BASEPRI
   22b4c:	f383 8812 	msr	BASEPRI_MAX, r3
   22b50:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22b54:	4816      	ldr	r0, [pc, #88]	; (22bb0 <sys_clock_announce+0x134>)
   22b56:	f7fd fbb5 	bl	202c4 <z_spin_lock_valid>
   22b5a:	2800      	cmp	r0, #0
   22b5c:	d09d      	beq.n	22a9a <sys_clock_announce+0x1e>
	z_spin_lock_set_owner(l);
   22b5e:	4814      	ldr	r0, [pc, #80]	; (22bb0 <sys_clock_announce+0x134>)
   22b60:	f7fd fbce 	bl	20300 <z_spin_lock_set_owner>
		announce_remaining -= dt;
   22b64:	f8d8 3000 	ldr.w	r3, [r8]
	return list->head == list;
   22b68:	f8d9 4000 	ldr.w	r4, [r9]
   22b6c:	1b5b      	subs	r3, r3, r5
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22b6e:	454c      	cmp	r4, r9
   22b70:	f8c8 3000 	str.w	r3, [r8]
   22b74:	d1b2      	bne.n	22adc <sys_clock_announce+0x60>
		curr_tick += dt;
   22b76:	e9d6 2c00 	ldrd	r2, ip, [r6]
	}

	curr_tick += announce_remaining;
   22b7a:	189a      	adds	r2, r3, r2
   22b7c:	eb4c 73e3 	adc.w	r3, ip, r3, asr #31
	announce_remaining = 0;
   22b80:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   22b82:	e9c6 2300 	strd	r2, r3, [r6]
	announce_remaining = 0;
   22b86:	f8c8 4000 	str.w	r4, [r8]

	sys_clock_set_timeout(next_timeout(), false);
   22b8a:	f7ff fe2f 	bl	227ec <next_timeout>
   22b8e:	4621      	mov	r1, r4
   22b90:	f7fa fd88 	bl	1d6a4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22b94:	4806      	ldr	r0, [pc, #24]	; (22bb0 <sys_clock_announce+0x134>)
   22b96:	f7fd fba3 	bl	202e0 <z_spin_unlock_valid>
   22b9a:	2800      	cmp	r0, #0
   22b9c:	d0bf      	beq.n	22b1e <sys_clock_announce+0xa2>
	__asm__ volatile(
   22b9e:	f387 8811 	msr	BASEPRI, r7
   22ba2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
   22ba6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
   22baa:	f7fe bfa1 	b.w	21af0 <z_time_slice>
   22bae:	bf00      	nop
   22bb0:	20002fc8 	.word	0x20002fc8
   22bb4:	0002801e 	.word	0x0002801e
   22bb8:	00028077 	.word	0x00028077
   22bbc:	00027c2a 	.word	0x00027c2a
   22bc0:	0002808c 	.word	0x0002808c
   22bc4:	20002be8 	.word	0x20002be8
   22bc8:	0002804b 	.word	0x0002804b
   22bcc:	00028062 	.word	0x00028062
   22bd0:	2000078c 	.word	0x2000078c
   22bd4:	20002fc4 	.word	0x20002fc4

00022bd8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   22bd8:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   22bda:	f04f 0340 	mov.w	r3, #64	; 0x40
   22bde:	f3ef 8611 	mrs	r6, BASEPRI
   22be2:	f383 8812 	msr	BASEPRI_MAX, r3
   22be6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22bea:	481a      	ldr	r0, [pc, #104]	; (22c54 <sys_clock_tick_get+0x7c>)
   22bec:	f7fd fb6a 	bl	202c4 <z_spin_lock_valid>
   22bf0:	b968      	cbnz	r0, 22c0e <sys_clock_tick_get+0x36>
   22bf2:	4a19      	ldr	r2, [pc, #100]	; (22c58 <sys_clock_tick_get+0x80>)
   22bf4:	4919      	ldr	r1, [pc, #100]	; (22c5c <sys_clock_tick_get+0x84>)
   22bf6:	481a      	ldr	r0, [pc, #104]	; (22c60 <sys_clock_tick_get+0x88>)
   22bf8:	2394      	movs	r3, #148	; 0x94
   22bfa:	f001 fb23 	bl	24244 <assert_print>
   22bfe:	4915      	ldr	r1, [pc, #84]	; (22c54 <sys_clock_tick_get+0x7c>)
   22c00:	4818      	ldr	r0, [pc, #96]	; (22c64 <sys_clock_tick_get+0x8c>)
   22c02:	f001 fb1f 	bl	24244 <assert_print>
   22c06:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22c08:	4813      	ldr	r0, [pc, #76]	; (22c58 <sys_clock_tick_get+0x80>)
   22c0a:	f001 fb14 	bl	24236 <assert_post_action>
	z_spin_lock_set_owner(l);
   22c0e:	4811      	ldr	r0, [pc, #68]	; (22c54 <sys_clock_tick_get+0x7c>)
   22c10:	f7fd fb76 	bl	20300 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   22c14:	f7ff fde0 	bl	227d8 <elapsed>
   22c18:	4a13      	ldr	r2, [pc, #76]	; (22c68 <sys_clock_tick_get+0x90>)
   22c1a:	e9d2 4500 	ldrd	r4, r5, [r2]
   22c1e:	1904      	adds	r4, r0, r4
   22c20:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22c24:	480b      	ldr	r0, [pc, #44]	; (22c54 <sys_clock_tick_get+0x7c>)
   22c26:	f7fd fb5b 	bl	202e0 <z_spin_unlock_valid>
   22c2a:	b958      	cbnz	r0, 22c44 <sys_clock_tick_get+0x6c>
   22c2c:	4a0a      	ldr	r2, [pc, #40]	; (22c58 <sys_clock_tick_get+0x80>)
   22c2e:	490f      	ldr	r1, [pc, #60]	; (22c6c <sys_clock_tick_get+0x94>)
   22c30:	480b      	ldr	r0, [pc, #44]	; (22c60 <sys_clock_tick_get+0x88>)
   22c32:	23c3      	movs	r3, #195	; 0xc3
   22c34:	f001 fb06 	bl	24244 <assert_print>
   22c38:	4906      	ldr	r1, [pc, #24]	; (22c54 <sys_clock_tick_get+0x7c>)
   22c3a:	480d      	ldr	r0, [pc, #52]	; (22c70 <sys_clock_tick_get+0x98>)
   22c3c:	f001 fb02 	bl	24244 <assert_print>
   22c40:	21c3      	movs	r1, #195	; 0xc3
   22c42:	e7e1      	b.n	22c08 <sys_clock_tick_get+0x30>
	__asm__ volatile(
   22c44:	f386 8811 	msr	BASEPRI, r6
   22c48:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   22c4c:	4620      	mov	r0, r4
   22c4e:	4629      	mov	r1, r5
   22c50:	bd70      	pop	{r4, r5, r6, pc}
   22c52:	bf00      	nop
   22c54:	20002fc8 	.word	0x20002fc8
   22c58:	0002801e 	.word	0x0002801e
   22c5c:	00028077 	.word	0x00028077
   22c60:	00027c2a 	.word	0x00027c2a
   22c64:	0002808c 	.word	0x0002808c
   22c68:	20002be8 	.word	0x20002be8
   22c6c:	0002804b 	.word	0x0002804b
   22c70:	00028062 	.word	0x00028062

00022c74 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   22c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22c76:	4604      	mov	r4, r0
	__asm__ volatile(
   22c78:	f04f 0340 	mov.w	r3, #64	; 0x40
   22c7c:	f3ef 8711 	mrs	r7, BASEPRI
   22c80:	f383 8812 	msr	BASEPRI_MAX, r3
   22c84:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22c88:	484e      	ldr	r0, [pc, #312]	; (22dc4 <z_timer_expiration_handler+0x150>)
   22c8a:	f7fd fb1b 	bl	202c4 <z_spin_lock_valid>
   22c8e:	b968      	cbnz	r0, 22cac <z_timer_expiration_handler+0x38>
   22c90:	4a4d      	ldr	r2, [pc, #308]	; (22dc8 <z_timer_expiration_handler+0x154>)
   22c92:	494e      	ldr	r1, [pc, #312]	; (22dcc <z_timer_expiration_handler+0x158>)
   22c94:	484e      	ldr	r0, [pc, #312]	; (22dd0 <z_timer_expiration_handler+0x15c>)
   22c96:	2394      	movs	r3, #148	; 0x94
   22c98:	f001 fad4 	bl	24244 <assert_print>
   22c9c:	4949      	ldr	r1, [pc, #292]	; (22dc4 <z_timer_expiration_handler+0x150>)
   22c9e:	484d      	ldr	r0, [pc, #308]	; (22dd4 <z_timer_expiration_handler+0x160>)
   22ca0:	f001 fad0 	bl	24244 <assert_print>
   22ca4:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22ca6:	4848      	ldr	r0, [pc, #288]	; (22dc8 <z_timer_expiration_handler+0x154>)
   22ca8:	f001 fac5 	bl	24236 <assert_post_action>
	z_spin_lock_set_owner(l);
   22cac:	4845      	ldr	r0, [pc, #276]	; (22dc4 <z_timer_expiration_handler+0x150>)
   22cae:	f7fd fb27 	bl	20300 <z_spin_lock_set_owner>
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
   22cb2:	6822      	ldr	r2, [r4, #0]
   22cb4:	b182      	cbz	r2, 22cd8 <z_timer_expiration_handler+0x64>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22cb6:	4843      	ldr	r0, [pc, #268]	; (22dc4 <z_timer_expiration_handler+0x150>)
   22cb8:	f7fd fb12 	bl	202e0 <z_spin_unlock_valid>
   22cbc:	2800      	cmp	r0, #0
   22cbe:	d17b      	bne.n	22db8 <z_timer_expiration_handler+0x144>
   22cc0:	4a41      	ldr	r2, [pc, #260]	; (22dc8 <z_timer_expiration_handler+0x154>)
   22cc2:	4945      	ldr	r1, [pc, #276]	; (22dd8 <z_timer_expiration_handler+0x164>)
   22cc4:	4842      	ldr	r0, [pc, #264]	; (22dd0 <z_timer_expiration_handler+0x15c>)
   22cc6:	23c3      	movs	r3, #195	; 0xc3
   22cc8:	f001 fabc 	bl	24244 <assert_print>
   22ccc:	493d      	ldr	r1, [pc, #244]	; (22dc4 <z_timer_expiration_handler+0x150>)
   22cce:	4843      	ldr	r0, [pc, #268]	; (22ddc <z_timer_expiration_handler+0x168>)
   22cd0:	f001 fab8 	bl	24244 <assert_print>
   22cd4:	21c3      	movs	r1, #195	; 0xc3
   22cd6:	e7e6      	b.n	22ca6 <z_timer_expiration_handler+0x32>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   22cd8:	e9d4 360a 	ldrd	r3, r6, [r4, #40]	; 0x28
   22cdc:	1c58      	adds	r0, r3, #1
   22cde:	f146 0100 	adc.w	r1, r6, #0
   22ce2:	2802      	cmp	r0, #2
   22ce4:	f171 0100 	sbcs.w	r1, r1, #0
   22ce8:	d327      	bcc.n	22d3a <z_timer_expiration_handler+0xc6>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		k_timeout_t next = timer->period;

		/* see note about z_add_timeout() in z_impl_k_timer_start() */
		next.ticks = MAX(next.ticks - 1, 0);
   22cea:	2b01      	cmp	r3, #1
   22cec:	f176 0100 	sbcs.w	r1, r6, #0
   22cf0:	bfbc      	itt	lt
   22cf2:	2301      	movlt	r3, #1
   22cf4:	4616      	movlt	r6, r2
   22cf6:	1e5d      	subs	r5, r3, #1
   22cf8:	f146 36ff 	adc.w	r6, r6, #4294967295
	return z_impl_k_uptime_ticks();
   22cfc:	f003 ff03 	bl	26b06 <z_impl_k_uptime_ticks>
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   22d00:	3001      	adds	r0, #1
   22d02:	f141 0100 	adc.w	r1, r1, #0
   22d06:	1940      	adds	r0, r0, r5
   22d08:	eb46 0101 	adc.w	r1, r6, r1
   22d0c:	2801      	cmp	r0, #1
   22d0e:	f171 0100 	sbcs.w	r1, r1, #0
   22d12:	db4c      	blt.n	22dae <z_timer_expiration_handler+0x13a>
   22d14:	f003 fef7 	bl	26b06 <z_impl_k_uptime_ticks>
   22d18:	3001      	adds	r0, #1
   22d1a:	f141 0100 	adc.w	r1, r1, #0
   22d1e:	f06f 0201 	mvn.w	r2, #1
   22d22:	1940      	adds	r0, r0, r5
   22d24:	eb46 0301 	adc.w	r3, r6, r1
   22d28:	1a12      	subs	r2, r2, r0
   22d2a:	f04f 31ff 	mov.w	r1, #4294967295
   22d2e:	eb61 0303 	sbc.w	r3, r1, r3
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   22d32:	492b      	ldr	r1, [pc, #172]	; (22de0 <z_timer_expiration_handler+0x16c>)
   22d34:	4620      	mov	r0, r4
   22d36:	f7ff fd95 	bl	22864 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
   22d3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   22d3c:	3301      	adds	r3, #1
   22d3e:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   22d40:	6a23      	ldr	r3, [r4, #32]
   22d42:	b1db      	cbz	r3, 22d7c <z_timer_expiration_handler+0x108>
   22d44:	481f      	ldr	r0, [pc, #124]	; (22dc4 <z_timer_expiration_handler+0x150>)
   22d46:	f7fd facb 	bl	202e0 <z_spin_unlock_valid>
   22d4a:	2800      	cmp	r0, #0
   22d4c:	d0b8      	beq.n	22cc0 <z_timer_expiration_handler+0x4c>
	__asm__ volatile(
   22d4e:	f387 8811 	msr	BASEPRI, r7
   22d52:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   22d56:	6a23      	ldr	r3, [r4, #32]
   22d58:	4620      	mov	r0, r4
   22d5a:	4798      	blx	r3
	__asm__ volatile(
   22d5c:	f04f 0340 	mov.w	r3, #64	; 0x40
   22d60:	f3ef 8711 	mrs	r7, BASEPRI
   22d64:	f383 8812 	msr	BASEPRI_MAX, r3
   22d68:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22d6c:	4815      	ldr	r0, [pc, #84]	; (22dc4 <z_timer_expiration_handler+0x150>)
   22d6e:	f7fd faa9 	bl	202c4 <z_spin_lock_valid>
   22d72:	2800      	cmp	r0, #0
   22d74:	d08c      	beq.n	22c90 <z_timer_expiration_handler+0x1c>
	z_spin_lock_set_owner(l);
   22d76:	4813      	ldr	r0, [pc, #76]	; (22dc4 <z_timer_expiration_handler+0x150>)
   22d78:	f7fd fac2 	bl	20300 <z_spin_lock_set_owner>
	return list->head == list;
   22d7c:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22d80:	42a5      	cmp	r5, r4
   22d82:	d098      	beq.n	22cb6 <z_timer_expiration_handler+0x42>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   22d84:	2d00      	cmp	r5, #0
   22d86:	d096      	beq.n	22cb6 <z_timer_expiration_handler+0x42>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
   22d88:	4628      	mov	r0, r5
   22d8a:	f7fe fc83 	bl	21694 <z_unpend_thread_no_timeout>
   22d8e:	2300      	movs	r3, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22d90:	480c      	ldr	r0, [pc, #48]	; (22dc4 <z_timer_expiration_handler+0x150>)
   22d92:	67eb      	str	r3, [r5, #124]	; 0x7c
   22d94:	f7fd faa4 	bl	202e0 <z_spin_unlock_valid>
   22d98:	2800      	cmp	r0, #0
   22d9a:	d091      	beq.n	22cc0 <z_timer_expiration_handler+0x4c>
	__asm__ volatile(
   22d9c:	f387 8811 	msr	BASEPRI, r7
   22da0:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
   22da4:	4628      	mov	r0, r5
}
   22da6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   22daa:	f7fe bc2d 	b.w	21608 <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
   22dae:	f06f 0201 	mvn.w	r2, #1
   22db2:	f04f 33ff 	mov.w	r3, #4294967295
   22db6:	e7bc      	b.n	22d32 <z_timer_expiration_handler+0xbe>
   22db8:	f387 8811 	msr	BASEPRI, r7
   22dbc:	f3bf 8f6f 	isb	sy
}
   22dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22dc2:	bf00      	nop
   22dc4:	20002fcc 	.word	0x20002fcc
   22dc8:	0002801e 	.word	0x0002801e
   22dcc:	00028077 	.word	0x00028077
   22dd0:	00027c2a 	.word	0x00027c2a
   22dd4:	0002808c 	.word	0x0002808c
   22dd8:	0002804b 	.word	0x0002804b
   22ddc:	00028062 	.word	0x00028062
   22de0:	00022c75 	.word	0x00022c75

00022de4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   22de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   22de8:	f1b3 3fff 	cmp.w	r3, #4294967295
   22dec:	bf08      	it	eq
   22dee:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   22df2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   22df6:	4605      	mov	r5, r0
   22df8:	461c      	mov	r4, r3
   22dfa:	4617      	mov	r7, r2
   22dfc:	461e      	mov	r6, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   22dfe:	d01b      	beq.n	22e38 <z_impl_k_timer_start+0x54>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
   22e00:	1c53      	adds	r3, r2, #1
   22e02:	f174 33ff 	sbcs.w	r3, r4, #4294967295
   22e06:	db08      	blt.n	22e1a <z_impl_k_timer_start+0x36>
		duration.ticks = MAX(duration.ticks - 1, 0);
   22e08:	2a01      	cmp	r2, #1
   22e0a:	f174 0300 	sbcs.w	r3, r4, #0
   22e0e:	bfbc      	itt	lt
   22e10:	2201      	movlt	r2, #1
   22e12:	2400      	movlt	r4, #0
   22e14:	1e57      	subs	r7, r2, #1
   22e16:	f144 36ff 	adc.w	r6, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
   22e1a:	4628      	mov	r0, r5
   22e1c:	f7ff fde2 	bl	229e4 <z_abort_timeout>
	timer->period = period;
   22e20:	e9c5 890a 	strd	r8, r9, [r5, #40]	; 0x28
	timer->status = 0U;
   22e24:	2300      	movs	r3, #0
   22e26:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   22e28:	463a      	mov	r2, r7
   22e2a:	4633      	mov	r3, r6
   22e2c:	4628      	mov	r0, r5
   22e2e:	4903      	ldr	r1, [pc, #12]	; (22e3c <z_impl_k_timer_start+0x58>)
		     duration);
}
   22e30:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   22e34:	f7ff bd16 	b.w	22864 <z_add_timeout>
}
   22e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22e3c:	00022c75 	.word	0x00022c75

00022e40 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   22e40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   22e44:	2600      	movs	r6, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   22e46:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 2301c <register_events+0x1dc>
{
   22e4a:	9301      	str	r3, [sp, #4]
   22e4c:	4688      	mov	r8, r1
   22e4e:	4615      	mov	r5, r2
	for (int ii = 0; ii < num_events; ii++) {
   22e50:	4604      	mov	r4, r0
	int events_registered = 0;
   22e52:	4637      	mov	r7, r6
	event->poller = NULL;
   22e54:	46b2      	mov	sl, r6
	for (int ii = 0; ii < num_events; ii++) {
   22e56:	4546      	cmp	r6, r8
   22e58:	db03      	blt.n	22e62 <register_events+0x22>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   22e5a:	4638      	mov	r0, r7
   22e5c:	b003      	add	sp, #12
   22e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   22e62:	f04f 0340 	mov.w	r3, #64	; 0x40
   22e66:	f3ef 8b11 	mrs	fp, BASEPRI
   22e6a:	f383 8812 	msr	BASEPRI_MAX, r3
   22e6e:	f3bf 8f6f 	isb	sy
   22e72:	4648      	mov	r0, r9
   22e74:	f7fd fa26 	bl	202c4 <z_spin_lock_valid>
   22e78:	b960      	cbnz	r0, 22e94 <register_events+0x54>
   22e7a:	4a65      	ldr	r2, [pc, #404]	; (23010 <register_events+0x1d0>)
   22e7c:	4965      	ldr	r1, [pc, #404]	; (23014 <register_events+0x1d4>)
   22e7e:	4866      	ldr	r0, [pc, #408]	; (23018 <register_events+0x1d8>)
   22e80:	2394      	movs	r3, #148	; 0x94
   22e82:	f001 f9df 	bl	24244 <assert_print>
   22e86:	4965      	ldr	r1, [pc, #404]	; (2301c <register_events+0x1dc>)
   22e88:	4865      	ldr	r0, [pc, #404]	; (23020 <register_events+0x1e0>)
   22e8a:	f001 f9db 	bl	24244 <assert_print>
   22e8e:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22e90:	485f      	ldr	r0, [pc, #380]	; (23010 <register_events+0x1d0>)
   22e92:	e060      	b.n	22f56 <register_events+0x116>
	z_spin_lock_set_owner(l);
   22e94:	4648      	mov	r0, r9
   22e96:	f7fd fa33 	bl	20300 <z_spin_lock_set_owner>
	switch (event->type) {
   22e9a:	7b63      	ldrb	r3, [r4, #13]
   22e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   22ea0:	2b08      	cmp	r3, #8
   22ea2:	d84a      	bhi.n	22f3a <register_events+0xfa>
   22ea4:	e8df f003 	tbb	[pc, r3]
   22ea8:	49053d2b 	.word	0x49053d2b
   22eac:	49494927 	.word	0x49494927
   22eb0:	43          	.byte	0x43
   22eb1:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   22eb2:	6923      	ldr	r3, [r4, #16]
   22eb4:	689b      	ldr	r3, [r3, #8]
   22eb6:	b313      	cbz	r3, 22efe <register_events+0xbe>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   22eb8:	2302      	movs	r3, #2
	event->state |= state;
   22eba:	68e2      	ldr	r2, [r4, #12]
	event->poller = NULL;
   22ebc:	f8c4 a008 	str.w	sl, [r4, #8]
	event->state |= state;
   22ec0:	f3c2 3186 	ubfx	r1, r2, #14, #7
   22ec4:	430b      	orrs	r3, r1
   22ec6:	f363 3294 	bfi	r2, r3, #14, #7
   22eca:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   22ecc:	f885 a000 	strb.w	sl, [r5]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   22ed0:	4648      	mov	r0, r9
   22ed2:	f7fd fa05 	bl	202e0 <z_spin_unlock_valid>
   22ed6:	3414      	adds	r4, #20
   22ed8:	2800      	cmp	r0, #0
   22eda:	f040 8092 	bne.w	23002 <register_events+0x1c2>
   22ede:	4a4c      	ldr	r2, [pc, #304]	; (23010 <register_events+0x1d0>)
   22ee0:	4950      	ldr	r1, [pc, #320]	; (23024 <register_events+0x1e4>)
   22ee2:	484d      	ldr	r0, [pc, #308]	; (23018 <register_events+0x1d8>)
   22ee4:	23c3      	movs	r3, #195	; 0xc3
   22ee6:	f001 f9ad 	bl	24244 <assert_print>
   22eea:	494c      	ldr	r1, [pc, #304]	; (2301c <register_events+0x1dc>)
   22eec:	484e      	ldr	r0, [pc, #312]	; (23028 <register_events+0x1e8>)
   22eee:	f001 f9a9 	bl	24244 <assert_print>
   22ef2:	21c3      	movs	r1, #195	; 0xc3
   22ef4:	e7cc      	b.n	22e90 <register_events+0x50>
		if (!k_queue_is_empty(event->queue)) {
   22ef6:	6923      	ldr	r3, [r4, #16]
   22ef8:	681b      	ldr	r3, [r3, #0]
   22efa:	2b00      	cmp	r3, #0
   22efc:	d12d      	bne.n	22f5a <register_events+0x11a>
		} else if (!just_check && poller->is_polling) {
   22efe:	9b01      	ldr	r3, [sp, #4]
   22f00:	2b00      	cmp	r3, #0
   22f02:	d1e5      	bne.n	22ed0 <register_events+0x90>
   22f04:	782b      	ldrb	r3, [r5, #0]
   22f06:	2b00      	cmp	r3, #0
   22f08:	d0e2      	beq.n	22ed0 <register_events+0x90>
	switch (event->type) {
   22f0a:	7b63      	ldrb	r3, [r4, #13]
   22f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   22f10:	2b08      	cmp	r3, #8
   22f12:	d86b      	bhi.n	22fec <register_events+0x1ac>
   22f14:	e8df f003 	tbb	[pc, r3]
   22f18:	6a234935 	.word	0x6a234935
   22f1c:	6a6a6a38 	.word	0x6a6a6a38
   22f20:	59          	.byte	0x59
   22f21:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   22f22:	6923      	ldr	r3, [r4, #16]
   22f24:	689b      	ldr	r3, [r3, #8]
   22f26:	2b00      	cmp	r3, #0
   22f28:	d0e9      	beq.n	22efe <register_events+0xbe>
			*state = K_POLL_STATE_SIGNALED;
   22f2a:	2301      	movs	r3, #1
   22f2c:	e7c5      	b.n	22eba <register_events+0x7a>
		if (event->msgq->used_msgs > 0) {
   22f2e:	6923      	ldr	r3, [r4, #16]
   22f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   22f32:	2b00      	cmp	r3, #0
   22f34:	d0e3      	beq.n	22efe <register_events+0xbe>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   22f36:	2310      	movs	r3, #16
   22f38:	e7bf      	b.n	22eba <register_events+0x7a>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   22f3a:	4a3c      	ldr	r2, [pc, #240]	; (2302c <register_events+0x1ec>)
   22f3c:	493c      	ldr	r1, [pc, #240]	; (23030 <register_events+0x1f0>)
   22f3e:	4836      	ldr	r0, [pc, #216]	; (23018 <register_events+0x1d8>)
   22f40:	2363      	movs	r3, #99	; 0x63
   22f42:	f001 f97f 	bl	24244 <assert_print>
   22f46:	7b61      	ldrb	r1, [r4, #13]
   22f48:	483a      	ldr	r0, [pc, #232]	; (23034 <register_events+0x1f4>)
   22f4a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   22f4e:	f001 f979 	bl	24244 <assert_print>
   22f52:	2163      	movs	r1, #99	; 0x63
   22f54:	4835      	ldr	r0, [pc, #212]	; (2302c <register_events+0x1ec>)
   22f56:	f001 f96e 	bl	24236 <assert_post_action>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   22f5a:	2304      	movs	r3, #4
   22f5c:	e7ad      	b.n	22eba <register_events+0x7a>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   22f5e:	6920      	ldr	r0, [r4, #16]
   22f60:	b950      	cbnz	r0, 22f78 <register_events+0x138>
   22f62:	4935      	ldr	r1, [pc, #212]	; (23038 <register_events+0x1f8>)
   22f64:	4a31      	ldr	r2, [pc, #196]	; (2302c <register_events+0x1ec>)
   22f66:	482c      	ldr	r0, [pc, #176]	; (23018 <register_events+0x1d8>)
   22f68:	238d      	movs	r3, #141	; 0x8d
   22f6a:	f001 f96b 	bl	24244 <assert_print>
   22f6e:	4833      	ldr	r0, [pc, #204]	; (2303c <register_events+0x1fc>)
   22f70:	f001 f968 	bl	24244 <assert_print>
   22f74:	218d      	movs	r1, #141	; 0x8d
   22f76:	e7ed      	b.n	22f54 <register_events+0x114>
		add_event(&event->sem->poll_events, event, poller);
   22f78:	462a      	mov	r2, r5
   22f7a:	4621      	mov	r1, r4
   22f7c:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   22f7e:	f003 fe13 	bl	26ba8 <add_event>
	event->poller = poller;
   22f82:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   22f84:	3701      	adds	r7, #1
   22f86:	e7a3      	b.n	22ed0 <register_events+0x90>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   22f88:	6920      	ldr	r0, [r4, #16]
   22f8a:	b950      	cbnz	r0, 22fa2 <register_events+0x162>
   22f8c:	492c      	ldr	r1, [pc, #176]	; (23040 <register_events+0x200>)
   22f8e:	4a27      	ldr	r2, [pc, #156]	; (2302c <register_events+0x1ec>)
   22f90:	4821      	ldr	r0, [pc, #132]	; (23018 <register_events+0x1d8>)
   22f92:	2391      	movs	r3, #145	; 0x91
   22f94:	f001 f956 	bl	24244 <assert_print>
   22f98:	482a      	ldr	r0, [pc, #168]	; (23044 <register_events+0x204>)
   22f9a:	f001 f953 	bl	24244 <assert_print>
   22f9e:	2191      	movs	r1, #145	; 0x91
   22fa0:	e7d8      	b.n	22f54 <register_events+0x114>
		add_event(&event->queue->poll_events, event, poller);
   22fa2:	462a      	mov	r2, r5
   22fa4:	4621      	mov	r1, r4
   22fa6:	3014      	adds	r0, #20
   22fa8:	e7e9      	b.n	22f7e <register_events+0x13e>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   22faa:	6920      	ldr	r0, [r4, #16]
   22fac:	b950      	cbnz	r0, 22fc4 <register_events+0x184>
   22fae:	4926      	ldr	r1, [pc, #152]	; (23048 <register_events+0x208>)
   22fb0:	4a1e      	ldr	r2, [pc, #120]	; (2302c <register_events+0x1ec>)
   22fb2:	4819      	ldr	r0, [pc, #100]	; (23018 <register_events+0x1d8>)
   22fb4:	2395      	movs	r3, #149	; 0x95
   22fb6:	f001 f945 	bl	24244 <assert_print>
   22fba:	4824      	ldr	r0, [pc, #144]	; (2304c <register_events+0x20c>)
   22fbc:	f001 f942 	bl	24244 <assert_print>
   22fc0:	2195      	movs	r1, #149	; 0x95
   22fc2:	e7c7      	b.n	22f54 <register_events+0x114>
		add_event(&event->signal->poll_events, event, poller);
   22fc4:	462a      	mov	r2, r5
   22fc6:	4621      	mov	r1, r4
   22fc8:	e7d9      	b.n	22f7e <register_events+0x13e>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   22fca:	6920      	ldr	r0, [r4, #16]
   22fcc:	b950      	cbnz	r0, 22fe4 <register_events+0x1a4>
   22fce:	4920      	ldr	r1, [pc, #128]	; (23050 <register_events+0x210>)
   22fd0:	4a16      	ldr	r2, [pc, #88]	; (2302c <register_events+0x1ec>)
   22fd2:	4811      	ldr	r0, [pc, #68]	; (23018 <register_events+0x1d8>)
   22fd4:	2399      	movs	r3, #153	; 0x99
   22fd6:	f001 f935 	bl	24244 <assert_print>
   22fda:	481e      	ldr	r0, [pc, #120]	; (23054 <register_events+0x214>)
   22fdc:	f001 f932 	bl	24244 <assert_print>
   22fe0:	2199      	movs	r1, #153	; 0x99
   22fe2:	e7b7      	b.n	22f54 <register_events+0x114>
		add_event(&event->msgq->poll_events, event, poller);
   22fe4:	462a      	mov	r2, r5
   22fe6:	4621      	mov	r1, r4
   22fe8:	3028      	adds	r0, #40	; 0x28
   22fea:	e7c8      	b.n	22f7e <register_events+0x13e>
		__ASSERT(false, "invalid event type\n");
   22fec:	4910      	ldr	r1, [pc, #64]	; (23030 <register_events+0x1f0>)
   22fee:	4a0f      	ldr	r2, [pc, #60]	; (2302c <register_events+0x1ec>)
   22ff0:	4809      	ldr	r0, [pc, #36]	; (23018 <register_events+0x1d8>)
   22ff2:	23a6      	movs	r3, #166	; 0xa6
   22ff4:	f001 f926 	bl	24244 <assert_print>
   22ff8:	4817      	ldr	r0, [pc, #92]	; (23058 <register_events+0x218>)
   22ffa:	f001 f923 	bl	24244 <assert_print>
   22ffe:	21a6      	movs	r1, #166	; 0xa6
   23000:	e7a8      	b.n	22f54 <register_events+0x114>
	__asm__ volatile(
   23002:	f38b 8811 	msr	BASEPRI, fp
   23006:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2300a:	3601      	adds	r6, #1
   2300c:	e723      	b.n	22e56 <register_events+0x16>
   2300e:	bf00      	nop
   23010:	0002801e 	.word	0x0002801e
   23014:	00028077 	.word	0x00028077
   23018:	00027c2a 	.word	0x00027c2a
   2301c:	20002fd0 	.word	0x20002fd0
   23020:	0002808c 	.word	0x0002808c
   23024:	0002804b 	.word	0x0002804b
   23028:	00028062 	.word	0x00028062
   2302c:	0002b7de 	.word	0x0002b7de
   23030:	0002a7c0 	.word	0x0002a7c0
   23034:	0002b7ff 	.word	0x0002b7ff
   23038:	0002b81c 	.word	0x0002b81c
   2303c:	0002b836 	.word	0x0002b836
   23040:	0002b84b 	.word	0x0002b84b
   23044:	0002b867 	.word	0x0002b867
   23048:	0002b878 	.word	0x0002b878
   2304c:	0002b895 	.word	0x0002b895
   23050:	0002b8ac 	.word	0x0002b8ac
   23054:	0002b8c7 	.word	0x0002b8c7
   23058:	0002b8e0 	.word	0x0002b8e0

0002305c <clear_event_registrations>:
{
   2305c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23060:	2314      	movs	r3, #20
   23062:	4f4e      	ldr	r7, [pc, #312]	; (2319c <clear_event_registrations+0x140>)
   23064:	4615      	mov	r5, r2
	while (num_events--) {
   23066:	460c      	mov	r4, r1
   23068:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   2306c:	2600      	movs	r6, #0
	while (num_events--) {
   2306e:	b90c      	cbnz	r4, 23074 <clear_event_registrations+0x18>
}
   23070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (event->type) {
   23074:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   23078:	f840 6c0c 	str.w	r6, [r0, #-12]
	switch (event->type) {
   2307c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   23080:	f1a0 0814 	sub.w	r8, r0, #20
   23084:	2b08      	cmp	r3, #8
   23086:	d842      	bhi.n	2310e <clear_event_registrations+0xb2>
   23088:	e8df f003 	tbb	[pc, r3]
   2308c:	41052555 	.word	0x41052555
   23090:	41414116 	.word	0x41414116
   23094:	33          	.byte	0x33
   23095:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   23096:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2309a:	2b00      	cmp	r3, #0
   2309c:	d142      	bne.n	23124 <clear_event_registrations+0xc8>
   2309e:	4940      	ldr	r1, [pc, #256]	; (231a0 <clear_event_registrations+0x144>)
   230a0:	4a40      	ldr	r2, [pc, #256]	; (231a4 <clear_event_registrations+0x148>)
   230a2:	4841      	ldr	r0, [pc, #260]	; (231a8 <clear_event_registrations+0x14c>)
   230a4:	23b6      	movs	r3, #182	; 0xb6
   230a6:	f001 f8cd 	bl	24244 <assert_print>
   230aa:	4840      	ldr	r0, [pc, #256]	; (231ac <clear_event_registrations+0x150>)
   230ac:	f001 f8ca 	bl	24244 <assert_print>
   230b0:	21b6      	movs	r1, #182	; 0xb6
		__ASSERT(event->queue != NULL, "invalid queue\n");
   230b2:	483c      	ldr	r0, [pc, #240]	; (231a4 <clear_event_registrations+0x148>)
   230b4:	f001 f8bf 	bl	24236 <assert_post_action>
   230b8:	f850 3c04 	ldr.w	r3, [r0, #-4]
   230bc:	2b00      	cmp	r3, #0
   230be:	d131      	bne.n	23124 <clear_event_registrations+0xc8>
   230c0:	493b      	ldr	r1, [pc, #236]	; (231b0 <clear_event_registrations+0x154>)
   230c2:	4a38      	ldr	r2, [pc, #224]	; (231a4 <clear_event_registrations+0x148>)
   230c4:	4838      	ldr	r0, [pc, #224]	; (231a8 <clear_event_registrations+0x14c>)
   230c6:	23ba      	movs	r3, #186	; 0xba
   230c8:	f001 f8bc 	bl	24244 <assert_print>
   230cc:	4839      	ldr	r0, [pc, #228]	; (231b4 <clear_event_registrations+0x158>)
   230ce:	f001 f8b9 	bl	24244 <assert_print>
   230d2:	21ba      	movs	r1, #186	; 0xba
   230d4:	e7ed      	b.n	230b2 <clear_event_registrations+0x56>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   230d6:	f850 3c04 	ldr.w	r3, [r0, #-4]
   230da:	bb1b      	cbnz	r3, 23124 <clear_event_registrations+0xc8>
   230dc:	4936      	ldr	r1, [pc, #216]	; (231b8 <clear_event_registrations+0x15c>)
   230de:	4a31      	ldr	r2, [pc, #196]	; (231a4 <clear_event_registrations+0x148>)
   230e0:	4831      	ldr	r0, [pc, #196]	; (231a8 <clear_event_registrations+0x14c>)
   230e2:	23be      	movs	r3, #190	; 0xbe
   230e4:	f001 f8ae 	bl	24244 <assert_print>
   230e8:	4834      	ldr	r0, [pc, #208]	; (231bc <clear_event_registrations+0x160>)
   230ea:	f001 f8ab 	bl	24244 <assert_print>
   230ee:	21be      	movs	r1, #190	; 0xbe
   230f0:	e7df      	b.n	230b2 <clear_event_registrations+0x56>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   230f2:	f850 3c04 	ldr.w	r3, [r0, #-4]
   230f6:	b9ab      	cbnz	r3, 23124 <clear_event_registrations+0xc8>
   230f8:	4931      	ldr	r1, [pc, #196]	; (231c0 <clear_event_registrations+0x164>)
   230fa:	4a2a      	ldr	r2, [pc, #168]	; (231a4 <clear_event_registrations+0x148>)
   230fc:	482a      	ldr	r0, [pc, #168]	; (231a8 <clear_event_registrations+0x14c>)
   230fe:	23c2      	movs	r3, #194	; 0xc2
   23100:	f001 f8a0 	bl	24244 <assert_print>
   23104:	482f      	ldr	r0, [pc, #188]	; (231c4 <clear_event_registrations+0x168>)
   23106:	f001 f89d 	bl	24244 <assert_print>
   2310a:	21c2      	movs	r1, #194	; 0xc2
   2310c:	e7d1      	b.n	230b2 <clear_event_registrations+0x56>
		__ASSERT(false, "invalid event type\n");
   2310e:	492e      	ldr	r1, [pc, #184]	; (231c8 <clear_event_registrations+0x16c>)
   23110:	4a24      	ldr	r2, [pc, #144]	; (231a4 <clear_event_registrations+0x148>)
   23112:	4825      	ldr	r0, [pc, #148]	; (231a8 <clear_event_registrations+0x14c>)
   23114:	23cf      	movs	r3, #207	; 0xcf
   23116:	f001 f895 	bl	24244 <assert_print>
   2311a:	482c      	ldr	r0, [pc, #176]	; (231cc <clear_event_registrations+0x170>)
   2311c:	f001 f892 	bl	24244 <assert_print>
   23120:	21cf      	movs	r1, #207	; 0xcf
   23122:	e7c6      	b.n	230b2 <clear_event_registrations+0x56>
	return node->next != NULL;
   23124:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   23128:	b12b      	cbz	r3, 23136 <clear_event_registrations+0xda>
	sys_dnode_t *const prev = node->prev;
   2312a:	f850 2c10 	ldr.w	r2, [r0, #-16]
	prev->next = next;
   2312e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   23130:	605a      	str	r2, [r3, #4]
	node->prev = NULL;
   23132:	e940 6605 	strd	r6, r6, [r0, #-20]
   23136:	4638      	mov	r0, r7
   23138:	f7fd f8d2 	bl	202e0 <z_spin_unlock_valid>
   2313c:	b960      	cbnz	r0, 23158 <clear_event_registrations+0xfc>
   2313e:	4a24      	ldr	r2, [pc, #144]	; (231d0 <clear_event_registrations+0x174>)
   23140:	4924      	ldr	r1, [pc, #144]	; (231d4 <clear_event_registrations+0x178>)
   23142:	4819      	ldr	r0, [pc, #100]	; (231a8 <clear_event_registrations+0x14c>)
   23144:	23c3      	movs	r3, #195	; 0xc3
   23146:	f001 f87d 	bl	24244 <assert_print>
   2314a:	4914      	ldr	r1, [pc, #80]	; (2319c <clear_event_registrations+0x140>)
   2314c:	4822      	ldr	r0, [pc, #136]	; (231d8 <clear_event_registrations+0x17c>)
   2314e:	f001 f879 	bl	24244 <assert_print>
   23152:	21c3      	movs	r1, #195	; 0xc3
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23154:	481e      	ldr	r0, [pc, #120]	; (231d0 <clear_event_registrations+0x174>)
   23156:	e7ad      	b.n	230b4 <clear_event_registrations+0x58>
   23158:	f385 8811 	msr	BASEPRI, r5
   2315c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   23160:	f04f 0340 	mov.w	r3, #64	; 0x40
   23164:	f3ef 8511 	mrs	r5, BASEPRI
   23168:	f383 8812 	msr	BASEPRI_MAX, r3
   2316c:	f3bf 8f6f 	isb	sy
   23170:	4638      	mov	r0, r7
   23172:	f7fd f8a7 	bl	202c4 <z_spin_lock_valid>
   23176:	3c01      	subs	r4, #1
   23178:	b958      	cbnz	r0, 23192 <clear_event_registrations+0x136>
   2317a:	4a15      	ldr	r2, [pc, #84]	; (231d0 <clear_event_registrations+0x174>)
   2317c:	4917      	ldr	r1, [pc, #92]	; (231dc <clear_event_registrations+0x180>)
   2317e:	480a      	ldr	r0, [pc, #40]	; (231a8 <clear_event_registrations+0x14c>)
   23180:	2394      	movs	r3, #148	; 0x94
   23182:	f001 f85f 	bl	24244 <assert_print>
   23186:	4905      	ldr	r1, [pc, #20]	; (2319c <clear_event_registrations+0x140>)
   23188:	4815      	ldr	r0, [pc, #84]	; (231e0 <clear_event_registrations+0x184>)
   2318a:	f001 f85b 	bl	24244 <assert_print>
   2318e:	2194      	movs	r1, #148	; 0x94
   23190:	e7e0      	b.n	23154 <clear_event_registrations+0xf8>
	z_spin_lock_set_owner(l);
   23192:	4638      	mov	r0, r7
   23194:	f7fd f8b4 	bl	20300 <z_spin_lock_set_owner>
	return k;
   23198:	4640      	mov	r0, r8
   2319a:	e768      	b.n	2306e <clear_event_registrations+0x12>
   2319c:	20002fd0 	.word	0x20002fd0
   231a0:	0002b81c 	.word	0x0002b81c
   231a4:	0002b7de 	.word	0x0002b7de
   231a8:	00027c2a 	.word	0x00027c2a
   231ac:	0002b836 	.word	0x0002b836
   231b0:	0002b84b 	.word	0x0002b84b
   231b4:	0002b867 	.word	0x0002b867
   231b8:	0002b878 	.word	0x0002b878
   231bc:	0002b895 	.word	0x0002b895
   231c0:	0002b8ac 	.word	0x0002b8ac
   231c4:	0002b8c7 	.word	0x0002b8c7
   231c8:	0002a7c0 	.word	0x0002a7c0
   231cc:	0002b8e0 	.word	0x0002b8e0
   231d0:	0002801e 	.word	0x0002801e
   231d4:	0002804b 	.word	0x0002804b
   231d8:	00028062 	.word	0x00028062
   231dc:	00028077 	.word	0x00028077
   231e0:	0002808c 	.word	0x0002808c

000231e4 <k_poll_event_init>:
{
   231e4:	b508      	push	{r3, lr}
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   231e6:	b162      	cbz	r2, 23202 <k_poll_event_init+0x1e>
   231e8:	4917      	ldr	r1, [pc, #92]	; (23248 <k_poll_event_init+0x64>)
   231ea:	4a18      	ldr	r2, [pc, #96]	; (2324c <k_poll_event_init+0x68>)
   231ec:	4818      	ldr	r0, [pc, #96]	; (23250 <k_poll_event_init+0x6c>)
   231ee:	232d      	movs	r3, #45	; 0x2d
   231f0:	f001 f828 	bl	24244 <assert_print>
   231f4:	4817      	ldr	r0, [pc, #92]	; (23254 <k_poll_event_init+0x70>)
   231f6:	f001 f825 	bl	24244 <assert_print>
   231fa:	212d      	movs	r1, #45	; 0x2d
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   231fc:	4813      	ldr	r0, [pc, #76]	; (2324c <k_poll_event_init+0x68>)
   231fe:	f001 f81a 	bl	24236 <assert_post_action>
   23202:	293f      	cmp	r1, #63	; 0x3f
   23204:	d90a      	bls.n	2321c <k_poll_event_init+0x38>
   23206:	4914      	ldr	r1, [pc, #80]	; (23258 <k_poll_event_init+0x74>)
   23208:	4a10      	ldr	r2, [pc, #64]	; (2324c <k_poll_event_init+0x68>)
   2320a:	4811      	ldr	r0, [pc, #68]	; (23250 <k_poll_event_init+0x6c>)
   2320c:	232f      	movs	r3, #47	; 0x2f
   2320e:	f001 f819 	bl	24244 <assert_print>
   23212:	4812      	ldr	r0, [pc, #72]	; (2325c <k_poll_event_init+0x78>)
   23214:	f001 f816 	bl	24244 <assert_print>
   23218:	212f      	movs	r1, #47	; 0x2f
   2321a:	e7ef      	b.n	231fc <k_poll_event_init+0x18>
	__ASSERT(obj != NULL, "must provide an object\n");
   2321c:	b953      	cbnz	r3, 23234 <k_poll_event_init+0x50>
   2321e:	4910      	ldr	r1, [pc, #64]	; (23260 <k_poll_event_init+0x7c>)
   23220:	4a0a      	ldr	r2, [pc, #40]	; (2324c <k_poll_event_init+0x68>)
   23222:	480b      	ldr	r0, [pc, #44]	; (23250 <k_poll_event_init+0x6c>)
   23224:	2330      	movs	r3, #48	; 0x30
   23226:	f001 f80d 	bl	24244 <assert_print>
   2322a:	480e      	ldr	r0, [pc, #56]	; (23264 <k_poll_event_init+0x80>)
   2322c:	f001 f80a 	bl	24244 <assert_print>
   23230:	2130      	movs	r1, #48	; 0x30
   23232:	e7e3      	b.n	231fc <k_poll_event_init+0x18>
	event->poller = NULL;
   23234:	6082      	str	r2, [r0, #8]
	event->type = type;
   23236:	0209      	lsls	r1, r1, #8
   23238:	7b02      	ldrb	r2, [r0, #12]
   2323a:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   2323e:	4311      	orrs	r1, r2
	event->obj = obj;
   23240:	e9c0 1303 	strd	r1, r3, [r0, #12]
}
   23244:	bd08      	pop	{r3, pc}
   23246:	bf00      	nop
   23248:	0002b8f6 	.word	0x0002b8f6
   2324c:	0002b7de 	.word	0x0002b7de
   23250:	00027c2a 	.word	0x00027c2a
   23254:	0002b916 	.word	0x0002b916
   23258:	0002b93c 	.word	0x0002b93c
   2325c:	0002b960 	.word	0x0002b960
   23260:	0002b970 	.word	0x0002b970
   23264:	0002b983 	.word	0x0002b983

00023268 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   23268:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2326c:	461e      	mov	r6, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   2326e:	4b5c      	ldr	r3, [pc, #368]	; (233e0 <z_impl_k_poll+0x178>)
   23270:	f8d3 8008 	ldr.w	r8, [r3, #8]

	poller->is_polling = true;
   23274:	2301      	movs	r3, #1
{
   23276:	4617      	mov	r7, r2
   23278:	4605      	mov	r5, r0
	struct z_poller *poller = &_current->poller;
   2327a:	f108 0260 	add.w	r2, r8, #96	; 0x60
	poller->is_polling = true;
   2327e:	f888 3060 	strb.w	r3, [r8, #96]	; 0x60
	poller->mode = MODE_POLL;
   23282:	f888 3061 	strb.w	r3, [r8, #97]	; 0x61
   23286:	f3ef 8b05 	mrs	fp, IPSR

	__ASSERT(!arch_is_in_isr(), "");
   2328a:	f1bb 0f00 	cmp.w	fp, #0
   2328e:	d00e      	beq.n	232ae <z_impl_k_poll+0x46>
   23290:	4954      	ldr	r1, [pc, #336]	; (233e4 <z_impl_k_poll+0x17c>)
   23292:	4a55      	ldr	r2, [pc, #340]	; (233e8 <z_impl_k_poll+0x180>)
   23294:	4855      	ldr	r0, [pc, #340]	; (233ec <z_impl_k_poll+0x184>)
   23296:	f240 132d 	movw	r3, #301	; 0x12d
   2329a:	f000 ffd3 	bl	24244 <assert_print>
   2329e:	4854      	ldr	r0, [pc, #336]	; (233f0 <z_impl_k_poll+0x188>)
   232a0:	f000 ffd0 	bl	24244 <assert_print>
   232a4:	f240 112d 	movw	r1, #301	; 0x12d
	__ASSERT(events != NULL, "NULL events\n");
   232a8:	484f      	ldr	r0, [pc, #316]	; (233e8 <z_impl_k_poll+0x180>)
   232aa:	f000 ffc4 	bl	24236 <assert_post_action>
   232ae:	b960      	cbnz	r0, 232ca <z_impl_k_poll+0x62>
   232b0:	4950      	ldr	r1, [pc, #320]	; (233f4 <z_impl_k_poll+0x18c>)
   232b2:	4a4d      	ldr	r2, [pc, #308]	; (233e8 <z_impl_k_poll+0x180>)
   232b4:	484d      	ldr	r0, [pc, #308]	; (233ec <z_impl_k_poll+0x184>)
   232b6:	f44f 7397 	mov.w	r3, #302	; 0x12e
   232ba:	f000 ffc3 	bl	24244 <assert_print>
   232be:	484e      	ldr	r0, [pc, #312]	; (233f8 <z_impl_k_poll+0x190>)
   232c0:	f000 ffc0 	bl	24244 <assert_print>
   232c4:	f44f 7197 	mov.w	r1, #302	; 0x12e
   232c8:	e7ee      	b.n	232a8 <z_impl_k_poll+0x40>
	__ASSERT(num_events >= 0, "<0 events\n");
   232ca:	2900      	cmp	r1, #0
   232cc:	da0c      	bge.n	232e8 <z_impl_k_poll+0x80>
   232ce:	494b      	ldr	r1, [pc, #300]	; (233fc <z_impl_k_poll+0x194>)
   232d0:	4a45      	ldr	r2, [pc, #276]	; (233e8 <z_impl_k_poll+0x180>)
   232d2:	4846      	ldr	r0, [pc, #280]	; (233ec <z_impl_k_poll+0x184>)
   232d4:	f240 132f 	movw	r3, #303	; 0x12f
   232d8:	f000 ffb4 	bl	24244 <assert_print>
   232dc:	4848      	ldr	r0, [pc, #288]	; (23400 <z_impl_k_poll+0x198>)
   232de:	f000 ffb1 	bl	24244 <assert_print>
   232e2:	f240 112f 	movw	r1, #303	; 0x12f
   232e6:	e7df      	b.n	232a8 <z_impl_k_poll+0x40>

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   232e8:	ea57 0306 	orrs.w	r3, r7, r6
   232ec:	bf0c      	ite	eq
   232ee:	2301      	moveq	r3, #1
   232f0:	2300      	movne	r3, #0
   232f2:	f7ff fda5 	bl	22e40 <register_events>
   232f6:	4681      	mov	r9, r0
   232f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   232fc:	f3ef 8a11 	mrs	sl, BASEPRI
   23300:	f383 8812 	msr	BASEPRI_MAX, r3
   23304:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23308:	483e      	ldr	r0, [pc, #248]	; (23404 <z_impl_k_poll+0x19c>)
   2330a:	f7fc ffdb 	bl	202c4 <z_spin_lock_valid>
   2330e:	b960      	cbnz	r0, 2332a <z_impl_k_poll+0xc2>
   23310:	4a3d      	ldr	r2, [pc, #244]	; (23408 <z_impl_k_poll+0x1a0>)
   23312:	493e      	ldr	r1, [pc, #248]	; (2340c <z_impl_k_poll+0x1a4>)
   23314:	4835      	ldr	r0, [pc, #212]	; (233ec <z_impl_k_poll+0x184>)
   23316:	2394      	movs	r3, #148	; 0x94
   23318:	f000 ff94 	bl	24244 <assert_print>
   2331c:	4939      	ldr	r1, [pc, #228]	; (23404 <z_impl_k_poll+0x19c>)
   2331e:	483c      	ldr	r0, [pc, #240]	; (23410 <z_impl_k_poll+0x1a8>)
   23320:	f000 ff90 	bl	24244 <assert_print>
   23324:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23326:	4838      	ldr	r0, [pc, #224]	; (23408 <z_impl_k_poll+0x1a0>)
   23328:	e7bf      	b.n	232aa <z_impl_k_poll+0x42>
	z_spin_lock_set_owner(l);
   2332a:	4836      	ldr	r0, [pc, #216]	; (23404 <z_impl_k_poll+0x19c>)
   2332c:	f7fc ffe8 	bl	20300 <z_spin_lock_set_owner>
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   23330:	f898 4060 	ldrb.w	r4, [r8, #96]	; 0x60
   23334:	b9e4      	cbnz	r4, 23370 <z_impl_k_poll+0x108>
		clear_event_registrations(events, events_registered, key);
   23336:	4628      	mov	r0, r5
   23338:	4652      	mov	r2, sl
   2333a:	4649      	mov	r1, r9
   2333c:	f7ff fe8e 	bl	2305c <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23340:	4830      	ldr	r0, [pc, #192]	; (23404 <z_impl_k_poll+0x19c>)
   23342:	f7fc ffcd 	bl	202e0 <z_spin_unlock_valid>
   23346:	b958      	cbnz	r0, 23360 <z_impl_k_poll+0xf8>
   23348:	4a2f      	ldr	r2, [pc, #188]	; (23408 <z_impl_k_poll+0x1a0>)
   2334a:	4932      	ldr	r1, [pc, #200]	; (23414 <z_impl_k_poll+0x1ac>)
   2334c:	4827      	ldr	r0, [pc, #156]	; (233ec <z_impl_k_poll+0x184>)
   2334e:	23c3      	movs	r3, #195	; 0xc3
   23350:	f000 ff78 	bl	24244 <assert_print>
   23354:	492b      	ldr	r1, [pc, #172]	; (23404 <z_impl_k_poll+0x19c>)
   23356:	4830      	ldr	r0, [pc, #192]	; (23418 <z_impl_k_poll+0x1b0>)
   23358:	f000 ff74 	bl	24244 <assert_print>
   2335c:	21c3      	movs	r1, #195	; 0xc3
   2335e:	e7e2      	b.n	23326 <z_impl_k_poll+0xbe>
	__asm__ volatile(
   23360:	f38a 8811 	msr	BASEPRI, sl
   23364:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   23368:	4620      	mov	r0, r4
   2336a:	b003      	add	sp, #12
   2336c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23370:	ea57 0306 	orrs.w	r3, r7, r6
	poller->is_polling = false;
   23374:	f888 b060 	strb.w	fp, [r8, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   23378:	d10b      	bne.n	23392 <z_impl_k_poll+0x12a>
   2337a:	4822      	ldr	r0, [pc, #136]	; (23404 <z_impl_k_poll+0x19c>)
   2337c:	f7fc ffb0 	bl	202e0 <z_spin_unlock_valid>
   23380:	2800      	cmp	r0, #0
   23382:	d0e1      	beq.n	23348 <z_impl_k_poll+0xe0>
   23384:	f38a 8811 	msr	BASEPRI, sl
   23388:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   2338c:	f06f 040a 	mvn.w	r4, #10
   23390:	e7ea      	b.n	23368 <z_impl_k_poll+0x100>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   23392:	e9cd 7600 	strd	r7, r6, [sp]
   23396:	4a21      	ldr	r2, [pc, #132]	; (2341c <z_impl_k_poll+0x1b4>)
   23398:	481a      	ldr	r0, [pc, #104]	; (23404 <z_impl_k_poll+0x19c>)
   2339a:	4651      	mov	r1, sl
   2339c:	f7fe fc7e 	bl	21c9c <z_pend_curr>
   233a0:	4604      	mov	r4, r0
	__asm__ volatile(
   233a2:	f04f 0340 	mov.w	r3, #64	; 0x40
   233a6:	f3ef 8611 	mrs	r6, BASEPRI
   233aa:	f383 8812 	msr	BASEPRI_MAX, r3
   233ae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   233b2:	4814      	ldr	r0, [pc, #80]	; (23404 <z_impl_k_poll+0x19c>)
   233b4:	f7fc ff86 	bl	202c4 <z_spin_lock_valid>
   233b8:	2800      	cmp	r0, #0
   233ba:	d0a9      	beq.n	23310 <z_impl_k_poll+0xa8>
	z_spin_lock_set_owner(l);
   233bc:	4811      	ldr	r0, [pc, #68]	; (23404 <z_impl_k_poll+0x19c>)
   233be:	f7fc ff9f 	bl	20300 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   233c2:	4628      	mov	r0, r5
   233c4:	4632      	mov	r2, r6
   233c6:	4649      	mov	r1, r9
   233c8:	f7ff fe48 	bl	2305c <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   233cc:	480d      	ldr	r0, [pc, #52]	; (23404 <z_impl_k_poll+0x19c>)
   233ce:	f7fc ff87 	bl	202e0 <z_spin_unlock_valid>
   233d2:	2800      	cmp	r0, #0
   233d4:	d0b8      	beq.n	23348 <z_impl_k_poll+0xe0>
	__asm__ volatile(
   233d6:	f386 8811 	msr	BASEPRI, r6
   233da:	f3bf 8f6f 	isb	sy
	return swap_rc;
   233de:	e7c3      	b.n	23368 <z_impl_k_poll+0x100>
   233e0:	20002f78 	.word	0x20002f78
   233e4:	0002b1ce 	.word	0x0002b1ce
   233e8:	0002b7de 	.word	0x0002b7de
   233ec:	00027c2a 	.word	0x00027c2a
   233f0:	0002a220 	.word	0x0002a220
   233f4:	0002b99d 	.word	0x0002b99d
   233f8:	0002b9b3 	.word	0x0002b9b3
   233fc:	0002b9c2 	.word	0x0002b9c2
   23400:	0002b9d2 	.word	0x0002b9d2
   23404:	20002fd0 	.word	0x20002fd0
   23408:	0002801e 	.word	0x0002801e
   2340c:	00028077 	.word	0x00028077
   23410:	0002808c 	.word	0x0002808c
   23414:	0002804b 	.word	0x0002804b
   23418:	00028062 	.word	0x00028062
   2341c:	20000794 	.word	0x20000794

00023420 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   23420:	b570      	push	{r4, r5, r6, lr}
   23422:	4604      	mov	r4, r0
   23424:	460d      	mov	r5, r1
	__asm__ volatile(
   23426:	f04f 0340 	mov.w	r3, #64	; 0x40
   2342a:	f3ef 8611 	mrs	r6, BASEPRI
   2342e:	f383 8812 	msr	BASEPRI_MAX, r3
   23432:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23436:	4820      	ldr	r0, [pc, #128]	; (234b8 <z_impl_k_poll_signal_raise+0x98>)
   23438:	f7fc ff44 	bl	202c4 <z_spin_lock_valid>
   2343c:	b968      	cbnz	r0, 2345a <z_impl_k_poll_signal_raise+0x3a>
   2343e:	4a1f      	ldr	r2, [pc, #124]	; (234bc <z_impl_k_poll_signal_raise+0x9c>)
   23440:	491f      	ldr	r1, [pc, #124]	; (234c0 <z_impl_k_poll_signal_raise+0xa0>)
   23442:	4820      	ldr	r0, [pc, #128]	; (234c4 <z_impl_k_poll_signal_raise+0xa4>)
   23444:	2394      	movs	r3, #148	; 0x94
   23446:	f000 fefd 	bl	24244 <assert_print>
   2344a:	491b      	ldr	r1, [pc, #108]	; (234b8 <z_impl_k_poll_signal_raise+0x98>)
   2344c:	481e      	ldr	r0, [pc, #120]	; (234c8 <z_impl_k_poll_signal_raise+0xa8>)
   2344e:	f000 fef9 	bl	24244 <assert_print>
   23452:	2194      	movs	r1, #148	; 0x94
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23454:	4819      	ldr	r0, [pc, #100]	; (234bc <z_impl_k_poll_signal_raise+0x9c>)
   23456:	f000 feee 	bl	24236 <assert_post_action>
	z_spin_lock_set_owner(l);
   2345a:	4817      	ldr	r0, [pc, #92]	; (234b8 <z_impl_k_poll_signal_raise+0x98>)
   2345c:	f7fc ff50 	bl	20300 <z_spin_lock_set_owner>
	return list->head == list;
   23460:	6820      	ldr	r0, [r4, #0]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   23462:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
   23464:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   23466:	4284      	cmp	r4, r0
   23468:	60a1      	str	r1, [r4, #8]
   2346a:	d10f      	bne.n	2348c <z_impl_k_poll_signal_raise+0x6c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2346c:	4812      	ldr	r0, [pc, #72]	; (234b8 <z_impl_k_poll_signal_raise+0x98>)
   2346e:	f7fc ff37 	bl	202e0 <z_spin_unlock_valid>
   23472:	b9d8      	cbnz	r0, 234ac <z_impl_k_poll_signal_raise+0x8c>
   23474:	4a11      	ldr	r2, [pc, #68]	; (234bc <z_impl_k_poll_signal_raise+0x9c>)
   23476:	4915      	ldr	r1, [pc, #84]	; (234cc <z_impl_k_poll_signal_raise+0xac>)
   23478:	4812      	ldr	r0, [pc, #72]	; (234c4 <z_impl_k_poll_signal_raise+0xa4>)
   2347a:	23c3      	movs	r3, #195	; 0xc3
   2347c:	f000 fee2 	bl	24244 <assert_print>
   23480:	490d      	ldr	r1, [pc, #52]	; (234b8 <z_impl_k_poll_signal_raise+0x98>)
   23482:	4813      	ldr	r0, [pc, #76]	; (234d0 <z_impl_k_poll_signal_raise+0xb0>)
   23484:	f000 fede 	bl	24244 <assert_print>
   23488:	21c3      	movs	r1, #195	; 0xc3
   2348a:	e7e3      	b.n	23454 <z_impl_k_poll_signal_raise+0x34>
	sys_dnode_t *const next = node->next;
   2348c:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   23490:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   23492:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   23494:	2300      	movs	r3, #0
	node->prev = NULL;
   23496:	e9c0 3300 	strd	r3, r3, [r0]
		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
	}

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2349a:	f003 fbb6 	bl	26c0a <signal_poll_event>

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
   2349e:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   234a0:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   234a2:	4805      	ldr	r0, [pc, #20]	; (234b8 <z_impl_k_poll_signal_raise+0x98>)
   234a4:	f7fe f93e 	bl	21724 <z_reschedule>
	return rc;
}
   234a8:	4620      	mov	r0, r4
   234aa:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
   234ac:	f386 8811 	msr	BASEPRI, r6
   234b0:	f3bf 8f6f 	isb	sy
		return 0;
   234b4:	2400      	movs	r4, #0
   234b6:	e7f7      	b.n	234a8 <z_impl_k_poll_signal_raise+0x88>
   234b8:	20002fd0 	.word	0x20002fd0
   234bc:	0002801e 	.word	0x0002801e
   234c0:	00028077 	.word	0x00028077
   234c4:	00027c2a 	.word	0x00027c2a
   234c8:	0002808c 	.word	0x0002808c
   234cc:	0002804b 	.word	0x0002804b
   234d0:	00028062 	.word	0x00028062

000234d4 <z_heap_aligned_alloc>:
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   234d4:	3204      	adds	r2, #4
#include <string.h>
#include <zephyr/sys/math_extras.h>
#include <zephyr/sys/util.h>

static void *z_heap_aligned_alloc(struct k_heap *heap, size_t align, size_t size)
{
   234d6:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
   234da:	4606      	mov	r6, r0
   234dc:	460d      	mov	r5, r1
   234de:	d220      	bcs.n	23522 <z_heap_aligned_alloc+0x4e>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
		return NULL;
	}
	__align = align | sizeof(heap_ref);

	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   234e0:	f04f 0800 	mov.w	r8, #0
   234e4:	f04f 0900 	mov.w	r9, #0
   234e8:	e9cd 8900 	strd	r8, r9, [sp]
   234ec:	f041 0104 	orr.w	r1, r1, #4
   234f0:	f7fc fbe0 	bl	1fcb4 <k_heap_aligned_alloc>
	if (mem == NULL) {
   234f4:	4604      	mov	r4, r0
   234f6:	b1a0      	cbz	r0, 23522 <z_heap_aligned_alloc+0x4e>
		return NULL;
	}

	heap_ref = mem;
	*heap_ref = heap;
   234f8:	f844 6b04 	str.w	r6, [r4], #4
	mem = ++heap_ref;
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   234fc:	b195      	cbz	r5, 23524 <z_heap_aligned_alloc+0x50>
   234fe:	1e6b      	subs	r3, r5, #1
   23500:	421c      	tst	r4, r3
   23502:	d00f      	beq.n	23524 <z_heap_aligned_alloc+0x50>
   23504:	4a09      	ldr	r2, [pc, #36]	; (2352c <z_heap_aligned_alloc+0x58>)
   23506:	490a      	ldr	r1, [pc, #40]	; (23530 <z_heap_aligned_alloc+0x5c>)
   23508:	480a      	ldr	r0, [pc, #40]	; (23534 <z_heap_aligned_alloc+0x60>)
   2350a:	2325      	movs	r3, #37	; 0x25
   2350c:	f000 fe9a 	bl	24244 <assert_print>
   23510:	4809      	ldr	r0, [pc, #36]	; (23538 <z_heap_aligned_alloc+0x64>)
   23512:	4621      	mov	r1, r4
   23514:	462a      	mov	r2, r5
   23516:	f000 fe95 	bl	24244 <assert_print>
   2351a:	4804      	ldr	r0, [pc, #16]	; (2352c <z_heap_aligned_alloc+0x58>)
   2351c:	2125      	movs	r1, #37	; 0x25
   2351e:	f000 fe8a 	bl	24236 <assert_post_action>
		return NULL;
   23522:	2400      	movs	r4, #0
		 "misaligned memory at %p (align = %zu)", mem, align);

	return mem;
}
   23524:	4620      	mov	r0, r4
   23526:	b002      	add	sp, #8
   23528:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
   2352c:	0002b9df 	.word	0x0002b9df
   23530:	0002ba03 	.word	0x0002ba03
   23534:	00027c2a 	.word	0x00027c2a
   23538:	0002ba35 	.word	0x0002ba35

0002353c <k_aligned_alloc>:
K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
	__ASSERT(align / sizeof(void *) >= 1
   2353c:	2803      	cmp	r0, #3
{
   2353e:	b508      	push	{r3, lr}
   23540:	460a      	mov	r2, r1
	__ASSERT(align / sizeof(void *) >= 1
   23542:	d901      	bls.n	23548 <k_aligned_alloc+0xc>
   23544:	0783      	lsls	r3, r0, #30
   23546:	d00c      	beq.n	23562 <k_aligned_alloc+0x26>
   23548:	4910      	ldr	r1, [pc, #64]	; (2358c <k_aligned_alloc+0x50>)
   2354a:	4a11      	ldr	r2, [pc, #68]	; (23590 <k_aligned_alloc+0x54>)
   2354c:	4811      	ldr	r0, [pc, #68]	; (23594 <k_aligned_alloc+0x58>)
   2354e:	2342      	movs	r3, #66	; 0x42
   23550:	f000 fe78 	bl	24244 <assert_print>
   23554:	4810      	ldr	r0, [pc, #64]	; (23598 <k_aligned_alloc+0x5c>)
   23556:	f000 fe75 	bl	24244 <assert_print>
   2355a:	2142      	movs	r1, #66	; 0x42
		&& (align % sizeof(void *)) == 0,
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
   2355c:	480c      	ldr	r0, [pc, #48]	; (23590 <k_aligned_alloc+0x54>)
   2355e:	f000 fe6a 	bl	24236 <assert_post_action>
   23562:	1e43      	subs	r3, r0, #1
   23564:	4203      	tst	r3, r0
   23566:	d00a      	beq.n	2357e <k_aligned_alloc+0x42>
   23568:	490c      	ldr	r1, [pc, #48]	; (2359c <k_aligned_alloc+0x60>)
   2356a:	4a09      	ldr	r2, [pc, #36]	; (23590 <k_aligned_alloc+0x54>)
   2356c:	4809      	ldr	r0, [pc, #36]	; (23594 <k_aligned_alloc+0x58>)
   2356e:	2346      	movs	r3, #70	; 0x46
   23570:	f000 fe68 	bl	24244 <assert_print>
   23574:	480a      	ldr	r0, [pc, #40]	; (235a0 <k_aligned_alloc+0x64>)
   23576:	f000 fe65 	bl	24244 <assert_print>
   2357a:	2146      	movs	r1, #70	; 0x46
   2357c:	e7ee      	b.n	2355c <k_aligned_alloc+0x20>
		"align must be a power of 2");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP);

	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   2357e:	4601      	mov	r1, r0

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap_sys, k_aligned_alloc, _SYSTEM_HEAP, ret);

	return ret;
}
   23580:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	void *ret = z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   23584:	4807      	ldr	r0, [pc, #28]	; (235a4 <k_aligned_alloc+0x68>)
   23586:	f7ff bfa5 	b.w	234d4 <z_heap_aligned_alloc>
   2358a:	bf00      	nop
   2358c:	0002ba5d 	.word	0x0002ba5d
   23590:	0002b9df 	.word	0x0002b9df
   23594:	00027c2a 	.word	0x00027c2a
   23598:	0002ba9a 	.word	0x0002ba9a
   2359c:	00027e88 	.word	0x00027e88
   235a0:	00027ea3 	.word	0x00027ea3
   235a4:	20000920 	.word	0x20000920

000235a8 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
   235a8:	4b01      	ldr	r3, [pc, #4]	; (235b0 <k_thread_system_pool_assign+0x8>)
   235aa:	6743      	str	r3, [r0, #116]	; 0x74
}
   235ac:	4770      	bx	lr
   235ae:	bf00      	nop
   235b0:	20000920 	.word	0x20000920

000235b4 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   235b4:	b538      	push	{r3, r4, r5, lr}
   235b6:	4604      	mov	r4, r0
   235b8:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   235ba:	f003 f9af 	bl	2691c <k_is_in_isr>
   235be:	b920      	cbnz	r0, 235ca <z_thread_aligned_alloc+0x16>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   235c0:	4b06      	ldr	r3, [pc, #24]	; (235dc <z_thread_aligned_alloc+0x28>)
   235c2:	689b      	ldr	r3, [r3, #8]
   235c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   235c6:	b90b      	cbnz	r3, 235cc <z_thread_aligned_alloc+0x18>
	} else {
		ret = NULL;
	}

	return ret;
}
   235c8:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   235ca:	4b05      	ldr	r3, [pc, #20]	; (235e0 <z_thread_aligned_alloc+0x2c>)
		ret = z_heap_aligned_alloc(heap, align, size);
   235cc:	462a      	mov	r2, r5
   235ce:	4621      	mov	r1, r4
   235d0:	4618      	mov	r0, r3
}
   235d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   235d6:	f7ff bf7d 	b.w	234d4 <z_heap_aligned_alloc>
   235da:	bf00      	nop
   235dc:	20002f78 	.word	0x20002f78
   235e0:	20000920 	.word	0x20000920

000235e4 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#ifdef CONFIG_BOOT_BANNER
	printk("*** " CONFIG_BOOT_BANNER_STRING " " BANNER_VERSION BANNER_POSTFIX " ***\n");
   235e4:	4801      	ldr	r0, [pc, #4]	; (235ec <boot_banner+0x8>)
   235e6:	f000 bbf6 	b.w	23dd6 <printk>
   235ea:	bf00      	nop
   235ec:	0002bac7 	.word	0x0002bac7

000235f0 <ocrypto_ecdh_p256_public_key>:
   235f0:	b530      	push	{r4, r5, lr}
   235f2:	b099      	sub	sp, #100	; 0x64
   235f4:	4605      	mov	r5, r0
   235f6:	4668      	mov	r0, sp
   235f8:	f000 f828 	bl	2364c <ocrypto_sc_p256_from32bytes>
   235fc:	4669      	mov	r1, sp
   235fe:	4604      	mov	r4, r0
   23600:	a808      	add	r0, sp, #32
   23602:	f000 fa53 	bl	23aac <ocrypto_curve_p256_scalarmult_base>
   23606:	a908      	add	r1, sp, #32
   23608:	4304      	orrs	r4, r0
   2360a:	4628      	mov	r0, r5
   2360c:	f000 f98a 	bl	23924 <ocrypto_curve_p256_to64bytes>
   23610:	4620      	mov	r0, r4
   23612:	b019      	add	sp, #100	; 0x64
   23614:	bd30      	pop	{r4, r5, pc}
   23616:	bf00      	nop

00023618 <ocrypto_ecdh_p256_common_secret>:
   23618:	b570      	push	{r4, r5, r6, lr}
   2361a:	b098      	sub	sp, #96	; 0x60
   2361c:	4605      	mov	r5, r0
   2361e:	4668      	mov	r0, sp
   23620:	4616      	mov	r6, r2
   23622:	f000 f813 	bl	2364c <ocrypto_sc_p256_from32bytes>
   23626:	4631      	mov	r1, r6
   23628:	4604      	mov	r4, r0
   2362a:	a808      	add	r0, sp, #32
   2362c:	f000 f946 	bl	238bc <ocrypto_curve_p256_from64bytes>
   23630:	a908      	add	r1, sp, #32
   23632:	466a      	mov	r2, sp
   23634:	4304      	orrs	r4, r0
   23636:	4608      	mov	r0, r1
   23638:	f000 f982 	bl	23940 <ocrypto_curve_p256_scalarmult>
   2363c:	a908      	add	r1, sp, #32
   2363e:	4304      	orrs	r4, r0
   23640:	4628      	mov	r0, r5
   23642:	f000 f96d 	bl	23920 <ocrypto_curve_p256_to32bytes>
   23646:	4620      	mov	r0, r4
   23648:	b018      	add	sp, #96	; 0x60
   2364a:	bd70      	pop	{r4, r5, r6, pc}

0002364c <ocrypto_sc_p256_from32bytes>:
   2364c:	b570      	push	{r4, r5, r6, lr}
   2364e:	680b      	ldr	r3, [r1, #0]
   23650:	4e12      	ldr	r6, [pc, #72]	; (2369c <ocrypto_sc_p256_from32bytes+0x50>)
   23652:	ba1b      	rev	r3, r3
   23654:	61c3      	str	r3, [r0, #28]
   23656:	684b      	ldr	r3, [r1, #4]
   23658:	ba1b      	rev	r3, r3
   2365a:	6183      	str	r3, [r0, #24]
   2365c:	688b      	ldr	r3, [r1, #8]
   2365e:	ba1b      	rev	r3, r3
   23660:	6143      	str	r3, [r0, #20]
   23662:	68cb      	ldr	r3, [r1, #12]
   23664:	ba1b      	rev	r3, r3
   23666:	6103      	str	r3, [r0, #16]
   23668:	690b      	ldr	r3, [r1, #16]
   2366a:	ba1b      	rev	r3, r3
   2366c:	60c3      	str	r3, [r0, #12]
   2366e:	694b      	ldr	r3, [r1, #20]
   23670:	ba1b      	rev	r3, r3
   23672:	6083      	str	r3, [r0, #8]
   23674:	698b      	ldr	r3, [r1, #24]
   23676:	ba1b      	rev	r3, r3
   23678:	6043      	str	r3, [r0, #4]
   2367a:	69cb      	ldr	r3, [r1, #28]
   2367c:	ba1b      	rev	r3, r3
   2367e:	4632      	mov	r2, r6
   23680:	6003      	str	r3, [r0, #0]
   23682:	4601      	mov	r1, r0
   23684:	4604      	mov	r4, r0
   23686:	f7dd f933 	bl	8f0 <ocrypto_bigint_sub256>
   2368a:	4631      	mov	r1, r6
   2368c:	4605      	mov	r5, r0
   2368e:	4602      	mov	r2, r0
   23690:	4620      	mov	r0, r4
   23692:	f7dd f94d 	bl	930 <ocrypto_bigint_cadd256>
   23696:	1e68      	subs	r0, r5, #1
   23698:	bd70      	pop	{r4, r5, r6, pc}
   2369a:	bf00      	nop
   2369c:	00027770 	.word	0x00027770

000236a0 <p256_zdblu>:
   236a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   236a4:	b088      	sub	sp, #32
   236a6:	460c      	mov	r4, r1
   236a8:	4606      	mov	r6, r0
   236aa:	f102 0120 	add.w	r1, r2, #32
   236ae:	4668      	mov	r0, sp
   236b0:	f106 0720 	add.w	r7, r6, #32
   236b4:	4690      	mov	r8, r2
   236b6:	f7dd fc21 	bl	efc <ocrypto_mod_p256_sqr>
   236ba:	466a      	mov	r2, sp
   236bc:	4669      	mov	r1, sp
   236be:	4668      	mov	r0, sp
   236c0:	f7dd fb3e 	bl	d40 <ocrypto_mod_p256_add>
   236c4:	4669      	mov	r1, sp
   236c6:	4638      	mov	r0, r7
   236c8:	f7dd fc18 	bl	efc <ocrypto_mod_p256_sqr>
   236cc:	463a      	mov	r2, r7
   236ce:	4639      	mov	r1, r7
   236d0:	4638      	mov	r0, r7
   236d2:	f104 0520 	add.w	r5, r4, #32
   236d6:	f7dd fb33 	bl	d40 <ocrypto_mod_p256_add>
   236da:	466a      	mov	r2, sp
   236dc:	4669      	mov	r1, sp
   236de:	4668      	mov	r0, sp
   236e0:	f7dd fb2e 	bl	d40 <ocrypto_mod_p256_add>
   236e4:	4641      	mov	r1, r8
   236e6:	4628      	mov	r0, r5
   236e8:	f7dd fc08 	bl	efc <ocrypto_mod_p256_sqr>
   236ec:	466a      	mov	r2, sp
   236ee:	4641      	mov	r1, r8
   236f0:	4630      	mov	r0, r6
   236f2:	f7dd fbeb 	bl	ecc <ocrypto_mod_p256_mul>
   236f6:	462a      	mov	r2, r5
   236f8:	4629      	mov	r1, r5
   236fa:	4668      	mov	r0, sp
   236fc:	f7dd fb20 	bl	d40 <ocrypto_mod_p256_add>
   23700:	462a      	mov	r2, r5
   23702:	4669      	mov	r1, sp
   23704:	4668      	mov	r0, sp
   23706:	f7dd fb1b 	bl	d40 <ocrypto_mod_p256_add>
   2370a:	4a12      	ldr	r2, [pc, #72]	; (23754 <p256_zdblu+0xb4>)
   2370c:	4669      	mov	r1, sp
   2370e:	4668      	mov	r0, sp
   23710:	f7dd fb16 	bl	d40 <ocrypto_mod_p256_add>
   23714:	4669      	mov	r1, sp
   23716:	4620      	mov	r0, r4
   23718:	f7dd fbf0 	bl	efc <ocrypto_mod_p256_sqr>
   2371c:	4632      	mov	r2, r6
   2371e:	4621      	mov	r1, r4
   23720:	4620      	mov	r0, r4
   23722:	f7dd fb4b 	bl	dbc <ocrypto_mod_p256_sub>
   23726:	4632      	mov	r2, r6
   23728:	4621      	mov	r1, r4
   2372a:	4620      	mov	r0, r4
   2372c:	f7dd fb46 	bl	dbc <ocrypto_mod_p256_sub>
   23730:	4622      	mov	r2, r4
   23732:	4631      	mov	r1, r6
   23734:	4628      	mov	r0, r5
   23736:	f7dd fb41 	bl	dbc <ocrypto_mod_p256_sub>
   2373a:	466a      	mov	r2, sp
   2373c:	4629      	mov	r1, r5
   2373e:	4628      	mov	r0, r5
   23740:	f7dd fbc4 	bl	ecc <ocrypto_mod_p256_mul>
   23744:	463a      	mov	r2, r7
   23746:	4629      	mov	r1, r5
   23748:	4628      	mov	r0, r5
   2374a:	f7dd fb37 	bl	dbc <ocrypto_mod_p256_sub>
   2374e:	b008      	add	sp, #32
   23750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23754:	00027850 	.word	0x00027850

00023758 <p256_zaddc>:
   23758:	b5f0      	push	{r4, r5, r6, r7, lr}
   2375a:	b099      	sub	sp, #100	; 0x64
   2375c:	4604      	mov	r4, r0
   2375e:	460d      	mov	r5, r1
   23760:	460a      	mov	r2, r1
   23762:	4601      	mov	r1, r0
   23764:	4668      	mov	r0, sp
   23766:	f7dd fb29 	bl	dbc <ocrypto_mod_p256_sub>
   2376a:	4669      	mov	r1, sp
   2376c:	4668      	mov	r0, sp
   2376e:	f7dd fbc5 	bl	efc <ocrypto_mod_p256_sqr>
   23772:	466a      	mov	r2, sp
   23774:	4621      	mov	r1, r4
   23776:	a808      	add	r0, sp, #32
   23778:	f105 0620 	add.w	r6, r5, #32
   2377c:	f104 0720 	add.w	r7, r4, #32
   23780:	f7dd fba4 	bl	ecc <ocrypto_mod_p256_mul>
   23784:	466a      	mov	r2, sp
   23786:	4629      	mov	r1, r5
   23788:	4668      	mov	r0, sp
   2378a:	f7dd fb9f 	bl	ecc <ocrypto_mod_p256_mul>
   2378e:	4632      	mov	r2, r6
   23790:	4639      	mov	r1, r7
   23792:	a810      	add	r0, sp, #64	; 0x40
   23794:	f7dd fad4 	bl	d40 <ocrypto_mod_p256_add>
   23798:	4632      	mov	r2, r6
   2379a:	4639      	mov	r1, r7
   2379c:	4630      	mov	r0, r6
   2379e:	f7dd fb0d 	bl	dbc <ocrypto_mod_p256_sub>
   237a2:	4631      	mov	r1, r6
   237a4:	4628      	mov	r0, r5
   237a6:	f7dd fba9 	bl	efc <ocrypto_mod_p256_sqr>
   237aa:	466a      	mov	r2, sp
   237ac:	a908      	add	r1, sp, #32
   237ae:	4620      	mov	r0, r4
   237b0:	f7dd fac6 	bl	d40 <ocrypto_mod_p256_add>
   237b4:	4622      	mov	r2, r4
   237b6:	4629      	mov	r1, r5
   237b8:	4628      	mov	r0, r5
   237ba:	f7dd faff 	bl	dbc <ocrypto_mod_p256_sub>
   237be:	466a      	mov	r2, sp
   237c0:	a908      	add	r1, sp, #32
   237c2:	4668      	mov	r0, sp
   237c4:	f7dd fafa 	bl	dbc <ocrypto_mod_p256_sub>
   237c8:	466a      	mov	r2, sp
   237ca:	4639      	mov	r1, r7
   237cc:	4638      	mov	r0, r7
   237ce:	f7dd fb7d 	bl	ecc <ocrypto_mod_p256_mul>
   237d2:	462a      	mov	r2, r5
   237d4:	a908      	add	r1, sp, #32
   237d6:	4668      	mov	r0, sp
   237d8:	f7dd faf0 	bl	dbc <ocrypto_mod_p256_sub>
   237dc:	466a      	mov	r2, sp
   237de:	4631      	mov	r1, r6
   237e0:	4630      	mov	r0, r6
   237e2:	f7dd fb73 	bl	ecc <ocrypto_mod_p256_mul>
   237e6:	463a      	mov	r2, r7
   237e8:	4631      	mov	r1, r6
   237ea:	4630      	mov	r0, r6
   237ec:	f7dd fae6 	bl	dbc <ocrypto_mod_p256_sub>
   237f0:	a910      	add	r1, sp, #64	; 0x40
   237f2:	4668      	mov	r0, sp
   237f4:	f7dd fb82 	bl	efc <ocrypto_mod_p256_sqr>
   237f8:	4622      	mov	r2, r4
   237fa:	4669      	mov	r1, sp
   237fc:	4620      	mov	r0, r4
   237fe:	f7dd fadd 	bl	dbc <ocrypto_mod_p256_sub>
   23802:	a908      	add	r1, sp, #32
   23804:	4622      	mov	r2, r4
   23806:	4608      	mov	r0, r1
   23808:	f7dd fad8 	bl	dbc <ocrypto_mod_p256_sub>
   2380c:	a910      	add	r1, sp, #64	; 0x40
   2380e:	aa08      	add	r2, sp, #32
   23810:	4608      	mov	r0, r1
   23812:	f7dd fb5b 	bl	ecc <ocrypto_mod_p256_mul>
   23816:	463a      	mov	r2, r7
   23818:	a910      	add	r1, sp, #64	; 0x40
   2381a:	4638      	mov	r0, r7
   2381c:	f7dd face 	bl	dbc <ocrypto_mod_p256_sub>
   23820:	b019      	add	sp, #100	; 0x64
   23822:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023824 <p256_zaddu>:
   23824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23828:	b088      	sub	sp, #32
   2382a:	460c      	mov	r4, r1
   2382c:	4605      	mov	r5, r0
   2382e:	4690      	mov	r8, r2
   23830:	460a      	mov	r2, r1
   23832:	4601      	mov	r1, r0
   23834:	4668      	mov	r0, sp
   23836:	f7dd fac1 	bl	dbc <ocrypto_mod_p256_sub>
   2383a:	4669      	mov	r1, sp
   2383c:	4668      	mov	r0, sp
   2383e:	f7dd fb5d 	bl	efc <ocrypto_mod_p256_sqr>
   23842:	466a      	mov	r2, sp
   23844:	4629      	mov	r1, r5
   23846:	4628      	mov	r0, r5
   23848:	f104 0620 	add.w	r6, r4, #32
   2384c:	f7dd fb3e 	bl	ecc <ocrypto_mod_p256_mul>
   23850:	f105 0720 	add.w	r7, r5, #32
   23854:	466a      	mov	r2, sp
   23856:	4621      	mov	r1, r4
   23858:	4668      	mov	r0, sp
   2385a:	f7dd fb37 	bl	ecc <ocrypto_mod_p256_mul>
   2385e:	4632      	mov	r2, r6
   23860:	4639      	mov	r1, r7
   23862:	4630      	mov	r0, r6
   23864:	f7dd faaa 	bl	dbc <ocrypto_mod_p256_sub>
   23868:	4631      	mov	r1, r6
   2386a:	4620      	mov	r0, r4
   2386c:	f7dd fb46 	bl	efc <ocrypto_mod_p256_sqr>
   23870:	462a      	mov	r2, r5
   23872:	4621      	mov	r1, r4
   23874:	4620      	mov	r0, r4
   23876:	f7dd faa1 	bl	dbc <ocrypto_mod_p256_sub>
   2387a:	466a      	mov	r2, sp
   2387c:	4621      	mov	r1, r4
   2387e:	4620      	mov	r0, r4
   23880:	f7dd fa9c 	bl	dbc <ocrypto_mod_p256_sub>
   23884:	466a      	mov	r2, sp
   23886:	4629      	mov	r1, r5
   23888:	4640      	mov	r0, r8
   2388a:	f7dd fa97 	bl	dbc <ocrypto_mod_p256_sub>
   2388e:	4642      	mov	r2, r8
   23890:	4639      	mov	r1, r7
   23892:	4638      	mov	r0, r7
   23894:	f7dd fb1a 	bl	ecc <ocrypto_mod_p256_mul>
   23898:	4622      	mov	r2, r4
   2389a:	4629      	mov	r1, r5
   2389c:	4668      	mov	r0, sp
   2389e:	f7dd fa8d 	bl	dbc <ocrypto_mod_p256_sub>
   238a2:	466a      	mov	r2, sp
   238a4:	4631      	mov	r1, r6
   238a6:	4630      	mov	r0, r6
   238a8:	f7dd fb10 	bl	ecc <ocrypto_mod_p256_mul>
   238ac:	463a      	mov	r2, r7
   238ae:	4631      	mov	r1, r6
   238b0:	4630      	mov	r0, r6
   238b2:	f7dd fa83 	bl	dbc <ocrypto_mod_p256_sub>
   238b6:	b008      	add	sp, #32
   238b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000238bc <ocrypto_curve_p256_from64bytes>:
   238bc:	b570      	push	{r4, r5, r6, lr}
   238be:	f100 0620 	add.w	r6, r0, #32
   238c2:	b090      	sub	sp, #64	; 0x40
   238c4:	460d      	mov	r5, r1
   238c6:	4604      	mov	r4, r0
   238c8:	f000 f914 	bl	23af4 <ocrypto_mod_p256_from_bytes>
   238cc:	f105 0120 	add.w	r1, r5, #32
   238d0:	4630      	mov	r0, r6
   238d2:	f000 f90f 	bl	23af4 <ocrypto_mod_p256_from_bytes>
   238d6:	4621      	mov	r1, r4
   238d8:	a808      	add	r0, sp, #32
   238da:	f7dd fb0f 	bl	efc <ocrypto_mod_p256_sqr>
   238de:	a908      	add	r1, sp, #32
   238e0:	4608      	mov	r0, r1
   238e2:	4a0d      	ldr	r2, [pc, #52]	; (23918 <ocrypto_curve_p256_from64bytes+0x5c>)
   238e4:	f7dd fa2c 	bl	d40 <ocrypto_mod_p256_add>
   238e8:	a908      	add	r1, sp, #32
   238ea:	4622      	mov	r2, r4
   238ec:	4608      	mov	r0, r1
   238ee:	f7dd faed 	bl	ecc <ocrypto_mod_p256_mul>
   238f2:	a908      	add	r1, sp, #32
   238f4:	4a09      	ldr	r2, [pc, #36]	; (2391c <ocrypto_curve_p256_from64bytes+0x60>)
   238f6:	4608      	mov	r0, r1
   238f8:	f7dd fa22 	bl	d40 <ocrypto_mod_p256_add>
   238fc:	4631      	mov	r1, r6
   238fe:	4668      	mov	r0, sp
   23900:	f7dd fafc 	bl	efc <ocrypto_mod_p256_sqr>
   23904:	2220      	movs	r2, #32
   23906:	4669      	mov	r1, sp
   23908:	eb0d 0002 	add.w	r0, sp, r2
   2390c:	f7dd f9ea 	bl	ce4 <ocrypto_constant_time_equal>
   23910:	3801      	subs	r0, #1
   23912:	b010      	add	sp, #64	; 0x40
   23914:	bd70      	pop	{r4, r5, r6, pc}
   23916:	bf00      	nop
   23918:	00027850 	.word	0x00027850
   2391c:	00027830 	.word	0x00027830

00023920 <ocrypto_curve_p256_to32bytes>:
   23920:	f000 b902 	b.w	23b28 <ocrypto_mod_p256_to_bytes>

00023924 <ocrypto_curve_p256_to64bytes>:
   23924:	b538      	push	{r3, r4, r5, lr}
   23926:	4604      	mov	r4, r0
   23928:	460d      	mov	r5, r1
   2392a:	f000 f8fd 	bl	23b28 <ocrypto_mod_p256_to_bytes>
   2392e:	f105 0120 	add.w	r1, r5, #32
   23932:	f104 0020 	add.w	r0, r4, #32
   23936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2393a:	f000 b8f5 	b.w	23b28 <ocrypto_mod_p256_to_bytes>
   2393e:	bf00      	nop

00023940 <ocrypto_curve_p256_scalarmult>:
   23940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23944:	4613      	mov	r3, r2
   23946:	b0b8      	sub	sp, #224	; 0xe0
   23948:	4a54      	ldr	r2, [pc, #336]	; (23a9c <ocrypto_curve_p256_scalarmult+0x15c>)
   2394a:	4689      	mov	r9, r1
   2394c:	4680      	mov	r8, r0
   2394e:	4619      	mov	r1, r3
   23950:	a810      	add	r0, sp, #64	; 0x40
   23952:	f7dc ffcd 	bl	8f0 <ocrypto_bigint_sub256>
   23956:	4952      	ldr	r1, [pc, #328]	; (23aa0 <ocrypto_curve_p256_scalarmult+0x160>)
   23958:	4602      	mov	r2, r0
   2395a:	a810      	add	r0, sp, #64	; 0x40
   2395c:	f7dc ffe8 	bl	930 <ocrypto_bigint_cadd256>
   23960:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   23962:	494e      	ldr	r1, [pc, #312]	; (23a9c <ocrypto_curve_p256_scalarmult+0x15c>)
   23964:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   23968:	4607      	mov	r7, r0
   2396a:	f1c6 0201 	rsb	r2, r6, #1
   2396e:	a810      	add	r0, sp, #64	; 0x40
   23970:	f7dc ffde 	bl	930 <ocrypto_bigint_cadd256>
   23974:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   23976:	464a      	mov	r2, r9
   23978:	ea6f 0a03 	mvn.w	sl, r3
   2397c:	a928      	add	r1, sp, #160	; 0xa0
   2397e:	a818      	add	r0, sp, #96	; 0x60
   23980:	f7ff fe8e 	bl	236a0 <p256_zdblu>
   23984:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   23988:	a920      	add	r1, sp, #128	; 0x80
   2398a:	f1ca 0201 	rsb	r2, sl, #1
   2398e:	4608      	mov	r0, r1
   23990:	f000 f892 	bl	23ab8 <ocrypto_mod_p256_cneg>
   23994:	f1c7 0701 	rsb	r7, r7, #1
   23998:	24fe      	movs	r4, #254	; 0xfe
   2399a:	466a      	mov	r2, sp
   2399c:	a918      	add	r1, sp, #96	; 0x60
   2399e:	a828      	add	r0, sp, #160	; 0xa0
   239a0:	f7ff ff40 	bl	23824 <p256_zaddu>
   239a4:	1163      	asrs	r3, r4, #5
   239a6:	aa38      	add	r2, sp, #224	; 0xe0
   239a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   239ac:	f004 021f 	and.w	r2, r4, #31
   239b0:	f853 3ca0 	ldr.w	r3, [r3, #-160]
   239b4:	40d3      	lsrs	r3, r2
   239b6:	4655      	mov	r5, sl
   239b8:	f003 0a01 	and.w	sl, r3, #1
   239bc:	ea8a 0505 	eor.w	r5, sl, r5
   239c0:	462a      	mov	r2, r5
   239c2:	a928      	add	r1, sp, #160	; 0xa0
   239c4:	a818      	add	r0, sp, #96	; 0x60
   239c6:	f7dd f80f 	bl	9e8 <ocrypto_bigint_cswap256>
   239ca:	462a      	mov	r2, r5
   239cc:	a930      	add	r1, sp, #192	; 0xc0
   239ce:	a820      	add	r0, sp, #128	; 0x80
   239d0:	f7dd f80a 	bl	9e8 <ocrypto_bigint_cswap256>
   239d4:	3c01      	subs	r4, #1
   239d6:	a928      	add	r1, sp, #160	; 0xa0
   239d8:	a818      	add	r0, sp, #96	; 0x60
   239da:	f7ff febd 	bl	23758 <p256_zaddc>
   239de:	1c63      	adds	r3, r4, #1
   239e0:	d1db      	bne.n	2399a <ocrypto_curve_p256_scalarmult+0x5a>
   239e2:	f1ca 0201 	rsb	r2, sl, #1
   239e6:	a920      	add	r1, sp, #128	; 0x80
   239e8:	a808      	add	r0, sp, #32
   239ea:	f000 f865 	bl	23ab8 <ocrypto_mod_p256_cneg>
   239ee:	ea86 060a 	eor.w	r6, r6, sl
   239f2:	466a      	mov	r2, sp
   239f4:	a918      	add	r1, sp, #96	; 0x60
   239f6:	a828      	add	r0, sp, #160	; 0xa0
   239f8:	f7ff ff14 	bl	23824 <p256_zaddu>
   239fc:	a928      	add	r1, sp, #160	; 0xa0
   239fe:	4632      	mov	r2, r6
   23a00:	a818      	add	r0, sp, #96	; 0x60
   23a02:	f7dc fff1 	bl	9e8 <ocrypto_bigint_cswap256>
   23a06:	4632      	mov	r2, r6
   23a08:	a930      	add	r1, sp, #192	; 0xc0
   23a0a:	a820      	add	r0, sp, #128	; 0x80
   23a0c:	f7dc ffec 	bl	9e8 <ocrypto_bigint_cswap256>
   23a10:	a908      	add	r1, sp, #32
   23a12:	466a      	mov	r2, sp
   23a14:	4608      	mov	r0, r1
   23a16:	f7dd fa59 	bl	ecc <ocrypto_mod_p256_mul>
   23a1a:	a908      	add	r1, sp, #32
   23a1c:	4608      	mov	r0, r1
   23a1e:	f000 f89d 	bl	23b5c <ocrypto_mod_p256_inv>
   23a22:	a908      	add	r1, sp, #32
   23a24:	f108 0420 	add.w	r4, r8, #32
   23a28:	f109 0220 	add.w	r2, r9, #32
   23a2c:	4608      	mov	r0, r1
   23a2e:	f7dd fa4d 	bl	ecc <ocrypto_mod_p256_mul>
   23a32:	a920      	add	r1, sp, #128	; 0x80
   23a34:	aa08      	add	r2, sp, #32
   23a36:	4620      	mov	r0, r4
   23a38:	f7dd fa48 	bl	ecc <ocrypto_mod_p256_mul>
   23a3c:	aa08      	add	r2, sp, #32
   23a3e:	a918      	add	r1, sp, #96	; 0x60
   23a40:	4668      	mov	r0, sp
   23a42:	f7dd fa43 	bl	ecc <ocrypto_mod_p256_mul>
   23a46:	4669      	mov	r1, sp
   23a48:	4668      	mov	r0, sp
   23a4a:	f7dd fa57 	bl	efc <ocrypto_mod_p256_sqr>
   23a4e:	aa18      	add	r2, sp, #96	; 0x60
   23a50:	4669      	mov	r1, sp
   23a52:	a808      	add	r0, sp, #32
   23a54:	f7dd fa3a 	bl	ecc <ocrypto_mod_p256_mul>
   23a58:	4621      	mov	r1, r4
   23a5a:	4668      	mov	r0, sp
   23a5c:	f7dd fa4e 	bl	efc <ocrypto_mod_p256_sqr>
   23a60:	aa08      	add	r2, sp, #32
   23a62:	4669      	mov	r1, sp
   23a64:	4610      	mov	r0, r2
   23a66:	f7dd f9a9 	bl	dbc <ocrypto_mod_p256_sub>
   23a6a:	4a0e      	ldr	r2, [pc, #56]	; (23aa4 <ocrypto_curve_p256_scalarmult+0x164>)
   23a6c:	a908      	add	r1, sp, #32
   23a6e:	4668      	mov	r0, sp
   23a70:	f7dd f9a4 	bl	dbc <ocrypto_mod_p256_sub>
   23a74:	4620      	mov	r0, r4
   23a76:	2120      	movs	r1, #32
   23a78:	f7dd f948 	bl	d0c <ocrypto_constant_time_is_zero>
   23a7c:	a908      	add	r1, sp, #32
   23a7e:	4602      	mov	r2, r0
   23a80:	4244      	negs	r4, r0
   23a82:	4668      	mov	r0, sp
   23a84:	f7dc ffb0 	bl	9e8 <ocrypto_bigint_cswap256>
   23a88:	4640      	mov	r0, r8
   23a8a:	4a07      	ldr	r2, [pc, #28]	; (23aa8 <ocrypto_curve_p256_scalarmult+0x168>)
   23a8c:	4669      	mov	r1, sp
   23a8e:	f7dd fa1d 	bl	ecc <ocrypto_mod_p256_mul>
   23a92:	433c      	orrs	r4, r7
   23a94:	4620      	mov	r0, r4
   23a96:	b038      	add	sp, #224	; 0xe0
   23a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23a9c:	000277b0 	.word	0x000277b0
   23aa0:	000277d0 	.word	0x000277d0
   23aa4:	00027830 	.word	0x00027830
   23aa8:	00027790 	.word	0x00027790

00023aac <ocrypto_curve_p256_scalarmult_base>:
   23aac:	460a      	mov	r2, r1
   23aae:	4901      	ldr	r1, [pc, #4]	; (23ab4 <ocrypto_curve_p256_scalarmult_base+0x8>)
   23ab0:	f7ff bf46 	b.w	23940 <ocrypto_curve_p256_scalarmult>
   23ab4:	000277f0 	.word	0x000277f0

00023ab8 <ocrypto_mod_p256_cneg>:
   23ab8:	b570      	push	{r4, r5, r6, lr}
   23aba:	b088      	sub	sp, #32
   23abc:	4604      	mov	r4, r0
   23abe:	460d      	mov	r5, r1
   23ac0:	4616      	mov	r6, r2
   23ac2:	2100      	movs	r1, #0
   23ac4:	2220      	movs	r2, #32
   23ac6:	4668      	mov	r0, sp
   23ac8:	f000 ffcb 	bl	24a62 <memset>
   23acc:	2300      	movs	r3, #0
   23ace:	4629      	mov	r1, r5
   23ad0:	2220      	movs	r2, #32
   23ad2:	4620      	mov	r0, r4
   23ad4:	9300      	str	r3, [sp, #0]
   23ad6:	f000 ffb9 	bl	24a4c <memcpy>
   23ada:	462a      	mov	r2, r5
   23adc:	4669      	mov	r1, sp
   23ade:	4668      	mov	r0, sp
   23ae0:	f7dd f96c 	bl	dbc <ocrypto_mod_p256_sub>
   23ae4:	4632      	mov	r2, r6
   23ae6:	4669      	mov	r1, sp
   23ae8:	4620      	mov	r0, r4
   23aea:	f7dc ff7d 	bl	9e8 <ocrypto_bigint_cswap256>
   23aee:	b008      	add	sp, #32
   23af0:	bd70      	pop	{r4, r5, r6, pc}
   23af2:	bf00      	nop

00023af4 <ocrypto_mod_p256_from_bytes>:
   23af4:	680b      	ldr	r3, [r1, #0]
   23af6:	ba1b      	rev	r3, r3
   23af8:	61c3      	str	r3, [r0, #28]
   23afa:	684b      	ldr	r3, [r1, #4]
   23afc:	ba1b      	rev	r3, r3
   23afe:	6183      	str	r3, [r0, #24]
   23b00:	688b      	ldr	r3, [r1, #8]
   23b02:	ba1b      	rev	r3, r3
   23b04:	6143      	str	r3, [r0, #20]
   23b06:	68cb      	ldr	r3, [r1, #12]
   23b08:	ba1b      	rev	r3, r3
   23b0a:	6103      	str	r3, [r0, #16]
   23b0c:	690b      	ldr	r3, [r1, #16]
   23b0e:	ba1b      	rev	r3, r3
   23b10:	60c3      	str	r3, [r0, #12]
   23b12:	694b      	ldr	r3, [r1, #20]
   23b14:	ba1b      	rev	r3, r3
   23b16:	6083      	str	r3, [r0, #8]
   23b18:	698b      	ldr	r3, [r1, #24]
   23b1a:	ba1b      	rev	r3, r3
   23b1c:	6043      	str	r3, [r0, #4]
   23b1e:	69cb      	ldr	r3, [r1, #28]
   23b20:	ba1b      	rev	r3, r3
   23b22:	6003      	str	r3, [r0, #0]
   23b24:	4770      	bx	lr
   23b26:	bf00      	nop

00023b28 <ocrypto_mod_p256_to_bytes>:
   23b28:	69cb      	ldr	r3, [r1, #28]
   23b2a:	ba1b      	rev	r3, r3
   23b2c:	6003      	str	r3, [r0, #0]
   23b2e:	698b      	ldr	r3, [r1, #24]
   23b30:	ba1b      	rev	r3, r3
   23b32:	6043      	str	r3, [r0, #4]
   23b34:	694b      	ldr	r3, [r1, #20]
   23b36:	ba1b      	rev	r3, r3
   23b38:	6083      	str	r3, [r0, #8]
   23b3a:	690b      	ldr	r3, [r1, #16]
   23b3c:	ba1b      	rev	r3, r3
   23b3e:	60c3      	str	r3, [r0, #12]
   23b40:	68cb      	ldr	r3, [r1, #12]
   23b42:	ba1b      	rev	r3, r3
   23b44:	6103      	str	r3, [r0, #16]
   23b46:	688b      	ldr	r3, [r1, #8]
   23b48:	ba1b      	rev	r3, r3
   23b4a:	6143      	str	r3, [r0, #20]
   23b4c:	684b      	ldr	r3, [r1, #4]
   23b4e:	ba1b      	rev	r3, r3
   23b50:	6183      	str	r3, [r0, #24]
   23b52:	680b      	ldr	r3, [r1, #0]
   23b54:	ba1b      	rev	r3, r3
   23b56:	61c3      	str	r3, [r0, #28]
   23b58:	4770      	bx	lr
   23b5a:	bf00      	nop

00023b5c <ocrypto_mod_p256_inv>:
   23b5c:	b570      	push	{r4, r5, r6, lr}
   23b5e:	b098      	sub	sp, #96	; 0x60
   23b60:	460d      	mov	r5, r1
   23b62:	4606      	mov	r6, r0
   23b64:	a810      	add	r0, sp, #64	; 0x40
   23b66:	f7dd f9c9 	bl	efc <ocrypto_mod_p256_sqr>
   23b6a:	462a      	mov	r2, r5
   23b6c:	a910      	add	r1, sp, #64	; 0x40
   23b6e:	4668      	mov	r0, sp
   23b70:	f7dd f9ac 	bl	ecc <ocrypto_mod_p256_mul>
   23b74:	4669      	mov	r1, sp
   23b76:	a810      	add	r0, sp, #64	; 0x40
   23b78:	f7dd f9c0 	bl	efc <ocrypto_mod_p256_sqr>
   23b7c:	a910      	add	r1, sp, #64	; 0x40
   23b7e:	4608      	mov	r0, r1
   23b80:	f7dd f9bc 	bl	efc <ocrypto_mod_p256_sqr>
   23b84:	466a      	mov	r2, sp
   23b86:	a910      	add	r1, sp, #64	; 0x40
   23b88:	a808      	add	r0, sp, #32
   23b8a:	f7dd f99f 	bl	ecc <ocrypto_mod_p256_mul>
   23b8e:	a908      	add	r1, sp, #32
   23b90:	a810      	add	r0, sp, #64	; 0x40
   23b92:	f7dd f9b3 	bl	efc <ocrypto_mod_p256_sqr>
   23b96:	a910      	add	r1, sp, #64	; 0x40
   23b98:	4608      	mov	r0, r1
   23b9a:	f7dd f9af 	bl	efc <ocrypto_mod_p256_sqr>
   23b9e:	a910      	add	r1, sp, #64	; 0x40
   23ba0:	4608      	mov	r0, r1
   23ba2:	f7dd f9ab 	bl	efc <ocrypto_mod_p256_sqr>
   23ba6:	a910      	add	r1, sp, #64	; 0x40
   23ba8:	4608      	mov	r0, r1
   23baa:	f7dd f9a7 	bl	efc <ocrypto_mod_p256_sqr>
   23bae:	a910      	add	r1, sp, #64	; 0x40
   23bb0:	aa08      	add	r2, sp, #32
   23bb2:	4608      	mov	r0, r1
   23bb4:	f7dd f98a 	bl	ecc <ocrypto_mod_p256_mul>
   23bb8:	a910      	add	r1, sp, #64	; 0x40
   23bba:	4608      	mov	r0, r1
   23bbc:	f7dd f99e 	bl	efc <ocrypto_mod_p256_sqr>
   23bc0:	a910      	add	r1, sp, #64	; 0x40
   23bc2:	4608      	mov	r0, r1
   23bc4:	f7dd f99a 	bl	efc <ocrypto_mod_p256_sqr>
   23bc8:	a910      	add	r1, sp, #64	; 0x40
   23bca:	466a      	mov	r2, sp
   23bcc:	a808      	add	r0, sp, #32
   23bce:	f7dd f97d 	bl	ecc <ocrypto_mod_p256_mul>
   23bd2:	2405      	movs	r4, #5
   23bd4:	a908      	add	r1, sp, #32
   23bd6:	a810      	add	r0, sp, #64	; 0x40
   23bd8:	f7dd f990 	bl	efc <ocrypto_mod_p256_sqr>
   23bdc:	a910      	add	r1, sp, #64	; 0x40
   23bde:	4608      	mov	r0, r1
   23be0:	f7dd f98c 	bl	efc <ocrypto_mod_p256_sqr>
   23be4:	3c01      	subs	r4, #1
   23be6:	a910      	add	r1, sp, #64	; 0x40
   23be8:	d1f5      	bne.n	23bd6 <ocrypto_mod_p256_inv+0x7a>
   23bea:	aa08      	add	r2, sp, #32
   23bec:	4608      	mov	r0, r1
   23bee:	f7dd f96d 	bl	ecc <ocrypto_mod_p256_mul>
   23bf2:	2405      	movs	r4, #5
   23bf4:	a910      	add	r1, sp, #64	; 0x40
   23bf6:	4608      	mov	r0, r1
   23bf8:	f7dd f980 	bl	efc <ocrypto_mod_p256_sqr>
   23bfc:	a910      	add	r1, sp, #64	; 0x40
   23bfe:	4608      	mov	r0, r1
   23c00:	f7dd f97c 	bl	efc <ocrypto_mod_p256_sqr>
   23c04:	3c01      	subs	r4, #1
   23c06:	d1f5      	bne.n	23bf4 <ocrypto_mod_p256_inv+0x98>
   23c08:	a910      	add	r1, sp, #64	; 0x40
   23c0a:	aa08      	add	r2, sp, #32
   23c0c:	4608      	mov	r0, r1
   23c0e:	f7dd f95d 	bl	ecc <ocrypto_mod_p256_mul>
   23c12:	a910      	add	r1, sp, #64	; 0x40
   23c14:	a808      	add	r0, sp, #32
   23c16:	f7dd f971 	bl	efc <ocrypto_mod_p256_sqr>
   23c1a:	a908      	add	r1, sp, #32
   23c1c:	4608      	mov	r0, r1
   23c1e:	f7dd f96d 	bl	efc <ocrypto_mod_p256_sqr>
   23c22:	a908      	add	r1, sp, #32
   23c24:	466a      	mov	r2, sp
   23c26:	4668      	mov	r0, sp
   23c28:	f7dd f950 	bl	ecc <ocrypto_mod_p256_mul>
   23c2c:	2410      	movs	r4, #16
   23c2e:	4669      	mov	r1, sp
   23c30:	a810      	add	r0, sp, #64	; 0x40
   23c32:	f7dd f963 	bl	efc <ocrypto_mod_p256_sqr>
   23c36:	a910      	add	r1, sp, #64	; 0x40
   23c38:	4608      	mov	r0, r1
   23c3a:	f7dd f95f 	bl	efc <ocrypto_mod_p256_sqr>
   23c3e:	3c01      	subs	r4, #1
   23c40:	a910      	add	r1, sp, #64	; 0x40
   23c42:	d1f5      	bne.n	23c30 <ocrypto_mod_p256_inv+0xd4>
   23c44:	462a      	mov	r2, r5
   23c46:	4608      	mov	r0, r1
   23c48:	f7dd f940 	bl	ecc <ocrypto_mod_p256_mul>
   23c4c:	2440      	movs	r4, #64	; 0x40
   23c4e:	a910      	add	r1, sp, #64	; 0x40
   23c50:	4608      	mov	r0, r1
   23c52:	f7dd f953 	bl	efc <ocrypto_mod_p256_sqr>
   23c56:	a910      	add	r1, sp, #64	; 0x40
   23c58:	4608      	mov	r0, r1
   23c5a:	f7dd f94f 	bl	efc <ocrypto_mod_p256_sqr>
   23c5e:	3c01      	subs	r4, #1
   23c60:	d1f5      	bne.n	23c4e <ocrypto_mod_p256_inv+0xf2>
   23c62:	a910      	add	r1, sp, #64	; 0x40
   23c64:	466a      	mov	r2, sp
   23c66:	4608      	mov	r0, r1
   23c68:	f7dd f930 	bl	ecc <ocrypto_mod_p256_mul>
   23c6c:	2410      	movs	r4, #16
   23c6e:	a910      	add	r1, sp, #64	; 0x40
   23c70:	4608      	mov	r0, r1
   23c72:	f7dd f943 	bl	efc <ocrypto_mod_p256_sqr>
   23c76:	a910      	add	r1, sp, #64	; 0x40
   23c78:	4608      	mov	r0, r1
   23c7a:	f7dd f93f 	bl	efc <ocrypto_mod_p256_sqr>
   23c7e:	3c01      	subs	r4, #1
   23c80:	d1f5      	bne.n	23c6e <ocrypto_mod_p256_inv+0x112>
   23c82:	a910      	add	r1, sp, #64	; 0x40
   23c84:	466a      	mov	r2, sp
   23c86:	4608      	mov	r0, r1
   23c88:	f7dd f920 	bl	ecc <ocrypto_mod_p256_mul>
   23c8c:	2410      	movs	r4, #16
   23c8e:	a910      	add	r1, sp, #64	; 0x40
   23c90:	4608      	mov	r0, r1
   23c92:	f7dd f933 	bl	efc <ocrypto_mod_p256_sqr>
   23c96:	a910      	add	r1, sp, #64	; 0x40
   23c98:	4608      	mov	r0, r1
   23c9a:	f7dd f92f 	bl	efc <ocrypto_mod_p256_sqr>
   23c9e:	3c01      	subs	r4, #1
   23ca0:	d1f5      	bne.n	23c8e <ocrypto_mod_p256_inv+0x132>
   23ca2:	a910      	add	r1, sp, #64	; 0x40
   23ca4:	aa08      	add	r2, sp, #32
   23ca6:	4608      	mov	r0, r1
   23ca8:	f7dd f910 	bl	ecc <ocrypto_mod_p256_mul>
   23cac:	462a      	mov	r2, r5
   23cae:	a910      	add	r1, sp, #64	; 0x40
   23cb0:	4630      	mov	r0, r6
   23cb2:	f7dd f90b 	bl	ecc <ocrypto_mod_p256_mul>
   23cb6:	b018      	add	sp, #96	; 0x60
   23cb8:	bd70      	pop	{r4, r5, r6, pc}
   23cba:	bf00      	nop

00023cbc <z_log_msg_static_create.constprop.0>:
   23cbc:	2300      	movs	r3, #0
   23cbe:	f7f0 b965 	b.w	13f8c <z_impl_z_log_msg_static_create>

00023cc2 <uart_rx_enable.constprop.0>:


extern int z_impl_uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout);

__pinned_func
static inline int uart_rx_enable(const struct device * dev, uint8_t * buf, size_t len, int32_t timeout)
   23cc2:	b410      	push	{r4}
	return api->rx_enable(dev, buf, len, timeout);
   23cc4:	6883      	ldr	r3, [r0, #8]
   23cc6:	68dc      	ldr	r4, [r3, #12]
   23cc8:	2210      	movs	r2, #16
   23cca:	46a4      	mov	ip, r4
   23ccc:	2332      	movs	r3, #50	; 0x32
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_UART_RX_ENABLE);
	}
#endif
	compiler_barrier();
	return z_impl_uart_rx_enable(dev, buf, len, timeout);
}
   23cce:	f85d 4b04 	ldr.w	r4, [sp], #4
   23cd2:	4760      	bx	ip

00023cd4 <uart_tx.constprop.0>:
static inline int uart_tx(const struct device * dev, const uint8_t * buf, size_t len, int32_t timeout)
   23cd4:	b410      	push	{r4}
	return api->tx(dev, buf, len, timeout);
   23cd6:	6883      	ldr	r3, [r0, #8]
   23cd8:	685c      	ldr	r4, [r3, #4]
   23cda:	f04f 33ff 	mov.w	r3, #4294967295
   23cde:	46a4      	mov	ip, r4
}
   23ce0:	f85d 4b04 	ldr.w	r4, [sp], #4
   23ce4:	4760      	bx	ip

00023ce6 <error>:
{
   23ce6:	b508      	push	{r3, lr}
	dk_set_leds_state(DK_ALL_LEDS_MSK, DK_NO_LEDS_MSK);
   23ce8:	2100      	movs	r1, #0
   23cea:	200f      	movs	r0, #15
   23cec:	f002 fc46 	bl	2657c <dk_set_leds_state>
	return z_impl_k_sleep(timeout);
   23cf0:	2100      	movs	r1, #0
   23cf2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   23cf6:	f7fe fbe3 	bl	224c0 <z_impl_k_sleep>
	while (true) {
   23cfa:	e7f9      	b.n	23cf0 <error+0xa>

00023cfc <cbpprintf_external>:
{
   23cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23d00:	4606      	mov	r6, r0
   23d02:	460d      	mov	r5, r1
   23d04:	4617      	mov	r7, r2
	if (buf == NULL) {
   23d06:	4698      	mov	r8, r3
   23d08:	b32b      	cbz	r3, 23d56 <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
   23d0a:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   23d0e:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   23d12:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   23d14:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   23d16:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   23d1a:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   23d1e:	441c      	add	r4, r3
   23d20:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
   23d22:	f04f 0a00 	mov.w	sl, #0
   23d26:	45ca      	cmp	sl, r9
   23d28:	d309      	bcc.n	23d3e <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   23d2a:	f8d8 2004 	ldr.w	r2, [r8, #4]
   23d2e:	f108 0308 	add.w	r3, r8, #8
   23d32:	4639      	mov	r1, r7
   23d34:	4630      	mov	r0, r6
   23d36:	46ac      	mov	ip, r5
}
   23d38:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   23d3c:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   23d3e:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   23d42:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   23d46:	4620      	mov	r0, r4
   23d48:	f000 fe69 	bl	24a1e <strlen>
   23d4c:	3001      	adds	r0, #1
   23d4e:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   23d50:	f10a 0a01 	add.w	sl, sl, #1
   23d54:	e7e7      	b.n	23d26 <cbpprintf_external+0x2a>
}
   23d56:	f06f 0015 	mvn.w	r0, #21
   23d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00023d5e <is_ptr>:
{
   23d5e:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
   23d60:	2500      	movs	r5, #0
{
   23d62:	4602      	mov	r2, r0
	bool mod = false;
   23d64:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
   23d66:	4614      	mov	r4, r2
   23d68:	f814 3b01 	ldrb.w	r3, [r4], #1
   23d6c:	b90b      	cbnz	r3, 23d72 <is_ptr+0x14>
					return false;
   23d6e:	4618      	mov	r0, r3
   23d70:	e009      	b.n	23d86 <is_ptr+0x28>
		if (mod) {
   23d72:	b198      	cbz	r0, 23d9c <is_ptr+0x3e>
			if (cnt == n) {
   23d74:	428d      	cmp	r5, r1
   23d76:	d107      	bne.n	23d88 <is_ptr+0x2a>
				if (c == 'p') {
   23d78:	2b70      	cmp	r3, #112	; 0x70
   23d7a:	d004      	beq.n	23d86 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
   23d7c:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
   23d80:	2a3a      	cmp	r2, #58	; 0x3a
   23d82:	d80b      	bhi.n	23d9c <is_ptr+0x3e>
					return false;
   23d84:	2000      	movs	r0, #0
}
   23d86:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
   23d88:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
   23d8c:	2e3a      	cmp	r6, #58	; 0x3a
   23d8e:	d805      	bhi.n	23d9c <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
   23d90:	7853      	ldrb	r3, [r2, #1]
				cnt++;
   23d92:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
   23d94:	1c94      	adds	r4, r2, #2
   23d96:	2b00      	cmp	r3, #0
   23d98:	d0e9      	beq.n	23d6e <is_ptr+0x10>
   23d9a:	2000      	movs	r0, #0
		if (c == '%') {
   23d9c:	2b25      	cmp	r3, #37	; 0x25
			mod = !mod;
   23d9e:	bf08      	it	eq
   23da0:	f080 0001 	eoreq.w	r0, r0, #1
	while ((c = *fmt++) != '\0') {
   23da4:	4622      	mov	r2, r4
   23da6:	e7de      	b.n	23d66 <is_ptr+0x8>

00023da8 <arch_printk_char_out>:
}
   23da8:	2000      	movs	r0, #0
   23daa:	4770      	bx	lr

00023dac <str_out>:
{
   23dac:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   23dae:	688a      	ldr	r2, [r1, #8]
   23db0:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   23db2:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   23db4:	b114      	cbz	r4, 23dbc <str_out+0x10>
   23db6:	684b      	ldr	r3, [r1, #4]
   23db8:	4293      	cmp	r3, r2
   23dba:	dc01      	bgt.n	23dc0 <str_out+0x14>
		ctx->count++;
   23dbc:	608d      	str	r5, [r1, #8]
}
   23dbe:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   23dc0:	3b01      	subs	r3, #1
   23dc2:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   23dc4:	bf08      	it	eq
   23dc6:	2200      	moveq	r2, #0
   23dc8:	608d      	str	r5, [r1, #8]
   23dca:	bf0c      	ite	eq
   23dcc:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   23dce:	54a0      	strbne	r0, [r4, r2]
   23dd0:	e7f5      	b.n	23dbe <str_out+0x12>

00023dd2 <vprintk>:
		z_log_vprintk(fmt, ap);
   23dd2:	f000 bb6d 	b.w	244b0 <z_log_vprintk>

00023dd6 <printk>:
{
   23dd6:	b40f      	push	{r0, r1, r2, r3}
   23dd8:	b507      	push	{r0, r1, r2, lr}
   23dda:	a904      	add	r1, sp, #16
   23ddc:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   23de0:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   23de2:	f000 fb65 	bl	244b0 <z_log_vprintk>
}
   23de6:	b003      	add	sp, #12
   23de8:	f85d eb04 	ldr.w	lr, [sp], #4
   23dec:	b004      	add	sp, #16
   23dee:	4770      	bx	lr

00023df0 <snprintk>:
{
   23df0:	b40c      	push	{r2, r3}
   23df2:	b507      	push	{r0, r1, r2, lr}
   23df4:	ab04      	add	r3, sp, #16
   23df6:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   23dfa:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   23dfc:	f7ee fedc 	bl	12bb8 <vsnprintk>
}
   23e00:	b003      	add	sp, #12
   23e02:	f85d eb04 	ldr.w	lr, [sp], #4
   23e06:	b002      	add	sp, #8
   23e08:	4770      	bx	lr

00023e0a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   23e0a:	4604      	mov	r4, r0
   23e0c:	b508      	push	{r3, lr}
   23e0e:	4608      	mov	r0, r1
   23e10:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   23e12:	461a      	mov	r2, r3
   23e14:	47a0      	blx	r4
	return z_impl_z_current_get();
   23e16:	f7fe fb87 	bl	22528 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   23e1a:	f7f1 fbc3 	bl	155a4 <z_impl_k_thread_abort>

00023e1e <chunk_size>:
		return ((uint16_t *)cmem)[f];
   23e1e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   23e22:	8840      	ldrh	r0, [r0, #2]
}
   23e24:	0840      	lsrs	r0, r0, #1
   23e26:	4770      	bx	lr

00023e28 <free_list_add>:
{
   23e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23e2a:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   23e2c:	f7ff fff7 	bl	23e1e <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   23e30:	fab0 f080 	clz	r0, r0
   23e34:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   23e38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   23e3c:	00ca      	lsls	r2, r1, #3
   23e3e:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   23e42:	1d17      	adds	r7, r2, #4
{
   23e44:	460c      	mov	r4, r1
   23e46:	3206      	adds	r2, #6
   23e48:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   23e4a:	b956      	cbnz	r6, 23e62 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   23e4c:	2101      	movs	r1, #1
   23e4e:	fa01 f000 	lsl.w	r0, r1, r0
   23e52:	68d9      	ldr	r1, [r3, #12]
   23e54:	4301      	orrs	r1, r0
   23e56:	60d9      	str	r1, [r3, #12]
		b->next = c;
   23e58:	f8cc 4010 	str.w	r4, [ip, #16]
   23e5c:	53dd      	strh	r5, [r3, r7]
   23e5e:	529d      	strh	r5, [r3, r2]
}
   23e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   23e62:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   23e64:	3104      	adds	r1, #4
   23e66:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   23e68:	53d8      	strh	r0, [r3, r7]
   23e6a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   23e6e:	529e      	strh	r6, [r3, r2]
   23e70:	80c5      	strh	r5, [r0, #6]
   23e72:	525d      	strh	r5, [r3, r1]
   23e74:	e7f4      	b.n	23e60 <free_list_add+0x38>

00023e76 <free_list_remove_bidx>:
{
   23e76:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   23e78:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   23e7c:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   23e7e:	4299      	cmp	r1, r3
   23e80:	f102 0104 	add.w	r1, r2, #4
   23e84:	d10a      	bne.n	23e9c <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   23e86:	2301      	movs	r3, #1
   23e88:	fa03 f202 	lsl.w	r2, r3, r2
   23e8c:	68c3      	ldr	r3, [r0, #12]
   23e8e:	ea23 0302 	bic.w	r3, r3, r2
   23e92:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   23e94:	2300      	movs	r3, #0
   23e96:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   23e9a:	bd10      	pop	{r4, pc}
   23e9c:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   23e9e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   23ea2:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   23ea6:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   23eaa:	80cb      	strh	r3, [r1, #6]
   23eac:	8082      	strh	r2, [r0, #4]
}
   23eae:	e7f4      	b.n	23e9a <free_list_remove_bidx+0x24>

00023eb0 <free_list_remove>:
{
   23eb0:	b508      	push	{r3, lr}
   23eb2:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   23eb4:	f7ff ffb3 	bl	23e1e <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   23eb8:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   23ebc:	f1c2 021f 	rsb	r2, r2, #31
   23ec0:	4618      	mov	r0, r3
}
   23ec2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   23ec6:	f7ff bfd6 	b.w	23e76 <free_list_remove_bidx>

00023eca <alloc_chunk>:
{
   23eca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23ece:	fab1 f581 	clz	r5, r1
   23ed2:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   23ed6:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   23eda:	4603      	mov	r3, r0
	if (b->next) {
   23edc:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   23ee0:	460e      	mov	r6, r1
	if (b->next) {
   23ee2:	b1c2      	cbz	r2, 23f16 <alloc_chunk+0x4c>
   23ee4:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   23ee6:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   23eea:	4618      	mov	r0, r3
   23eec:	4621      	mov	r1, r4
   23eee:	f7ff ff96 	bl	23e1e <chunk_size>
   23ef2:	42b0      	cmp	r0, r6
   23ef4:	d306      	bcc.n	23f04 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   23ef6:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   23ef8:	4618      	mov	r0, r3
   23efa:	f7ff ffbc 	bl	23e76 <free_list_remove_bidx>
}
   23efe:	4620      	mov	r0, r4
   23f00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   23f04:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   23f08:	3f01      	subs	r7, #1
   23f0a:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   23f0c:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   23f10:	d001      	beq.n	23f16 <alloc_chunk+0x4c>
   23f12:	4282      	cmp	r2, r0
   23f14:	d1e7      	bne.n	23ee6 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   23f16:	f1c5 0220 	rsb	r2, r5, #32
   23f1a:	f04f 34ff 	mov.w	r4, #4294967295
   23f1e:	4094      	lsls	r4, r2
   23f20:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   23f22:	4014      	ands	r4, r2
   23f24:	d0eb      	beq.n	23efe <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   23f26:	fa94 f2a4 	rbit	r2, r4
   23f2a:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   23f2e:	1d11      	adds	r1, r2, #4
   23f30:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   23f34:	4621      	mov	r1, r4
   23f36:	e7df      	b.n	23ef8 <alloc_chunk+0x2e>

00023f38 <merge_chunks>:
{
   23f38:	b538      	push	{r3, r4, r5, lr}
   23f3a:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   23f3c:	f7ff ff6f 	bl	23e1e <chunk_size>
{
   23f40:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   23f42:	4604      	mov	r4, r0
   23f44:	4611      	mov	r1, r2
   23f46:	4618      	mov	r0, r3
   23f48:	f7ff ff69 	bl	23e1e <chunk_size>
		((uint16_t *)cmem)[f] = val;
   23f4c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   23f50:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   23f52:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   23f54:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   23f56:	4618      	mov	r0, r3
   23f58:	f7ff ff61 	bl	23e1e <chunk_size>
	void *cmem = &buf[c];
   23f5c:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   23f5e:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   23f62:	bd38      	pop	{r3, r4, r5, pc}

00023f64 <split_chunks>:
{
   23f64:	b538      	push	{r3, r4, r5, lr}
   23f66:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   23f68:	f7ff ff59 	bl	23e1e <chunk_size>
{
   23f6c:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   23f6e:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   23f70:	1a51      	subs	r1, r2, r1
   23f72:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   23f76:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   23f78:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   23f7a:	8060      	strh	r0, [r4, #2]
   23f7c:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   23f80:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   23f82:	8044      	strh	r4, [r0, #2]
   23f84:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   23f88:	4618      	mov	r0, r3
   23f8a:	4611      	mov	r1, r2
   23f8c:	f7ff ff47 	bl	23e1e <chunk_size>
	void *cmem = &buf[c];
   23f90:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   23f92:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   23f96:	bd38      	pop	{r3, r4, r5, pc}

00023f98 <free_chunk>:
{
   23f98:	b538      	push	{r3, r4, r5, lr}
   23f9a:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   23f9c:	f7ff ff3f 	bl	23e1e <chunk_size>
   23fa0:	460c      	mov	r4, r1
   23fa2:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   23fa4:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   23fa8:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   23faa:	07da      	lsls	r2, r3, #31
   23fac:	d40a      	bmi.n	23fc4 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   23fae:	4628      	mov	r0, r5
   23fb0:	f7ff ff7e 	bl	23eb0 <free_list_remove>
	return c + chunk_size(h, c);
   23fb4:	4621      	mov	r1, r4
   23fb6:	4628      	mov	r0, r5
   23fb8:	f7ff ff31 	bl	23e1e <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   23fbc:	1822      	adds	r2, r4, r0
   23fbe:	4628      	mov	r0, r5
   23fc0:	f7ff ffba 	bl	23f38 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   23fc4:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   23fc8:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   23fca:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   23fce:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   23fd0:	07db      	lsls	r3, r3, #31
   23fd2:	d40c      	bmi.n	23fee <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   23fd4:	4628      	mov	r0, r5
   23fd6:	f7ff ff6b 	bl	23eb0 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   23fda:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   23fde:	4622      	mov	r2, r4
   23fe0:	1a61      	subs	r1, r4, r1
   23fe2:	4628      	mov	r0, r5
   23fe4:	f7ff ffa8 	bl	23f38 <merge_chunks>
   23fe8:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   23fec:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   23fee:	4621      	mov	r1, r4
   23ff0:	4628      	mov	r0, r5
}
   23ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   23ff6:	f7ff bf17 	b.w	23e28 <free_list_add>

00023ffa <sys_heap_alloc>:
{
   23ffa:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   23ffc:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   23ffe:	b909      	cbnz	r1, 24004 <sys_heap_alloc+0xa>
		return NULL;
   24000:	2000      	movs	r0, #0
}
   24002:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   24004:	68ab      	ldr	r3, [r5, #8]
   24006:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   2400a:	d9f9      	bls.n	24000 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2400c:	310b      	adds	r1, #11
   2400e:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   24010:	4621      	mov	r1, r4
   24012:	4628      	mov	r0, r5
   24014:	f7ff ff59 	bl	23eca <alloc_chunk>
	if (c == 0U) {
   24018:	4606      	mov	r6, r0
   2401a:	2800      	cmp	r0, #0
   2401c:	d0f0      	beq.n	24000 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2401e:	4601      	mov	r1, r0
   24020:	4628      	mov	r0, r5
   24022:	f7ff fefc 	bl	23e1e <chunk_size>
   24026:	42a0      	cmp	r0, r4
   24028:	d907      	bls.n	2403a <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   2402a:	1932      	adds	r2, r6, r4
   2402c:	4628      	mov	r0, r5
   2402e:	f7ff ff99 	bl	23f64 <split_chunks>
		free_list_add(h, c + chunk_sz);
   24032:	4611      	mov	r1, r2
   24034:	4628      	mov	r0, r5
   24036:	f7ff fef7 	bl	23e28 <free_list_add>
	void *cmem = &buf[c];
   2403a:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2403e:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   24040:	8853      	ldrh	r3, [r2, #2]
   24042:	f043 0301 	orr.w	r3, r3, #1
   24046:	8053      	strh	r3, [r2, #2]
   24048:	3004      	adds	r0, #4
	return mem;
   2404a:	e7da      	b.n	24002 <sys_heap_alloc+0x8>

0002404c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2404c:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   2404e:	f013 0307 	ands.w	r3, r3, #7
   24052:	d105      	bne.n	24060 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   24054:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   24056:	2b00      	cmp	r3, #0
   24058:	bf0c      	ite	eq
   2405a:	2000      	moveq	r0, #0
   2405c:	2003      	movne	r0, #3
   2405e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   24060:	2b02      	cmp	r3, #2
   24062:	d105      	bne.n	24070 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   24064:	8bc0      	ldrh	r0, [r0, #30]
   24066:	fab0 f080 	clz	r0, r0
   2406a:	0940      	lsrs	r0, r0, #5
   2406c:	0080      	lsls	r0, r0, #2
   2406e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   24070:	2b01      	cmp	r3, #1
   24072:	d105      	bne.n	24080 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   24074:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   24076:	2b00      	cmp	r3, #0
   24078:	bf0c      	ite	eq
   2407a:	2000      	moveq	r0, #0
   2407c:	2005      	movne	r0, #5
   2407e:	4770      	bx	lr
	int evt = EVT_NOP;
   24080:	2000      	movs	r0, #0
}
   24082:	4770      	bx	lr

00024084 <validate_args>:
{
   24084:	b510      	push	{r4, lr}
   24086:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   24088:	b100      	cbz	r0, 2408c <validate_args+0x8>
   2408a:	b911      	cbnz	r1, 24092 <validate_args+0xe>
		return -EINVAL;
   2408c:	f06f 0015 	mvn.w	r0, #21
}
   24090:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   24092:	1d08      	adds	r0, r1, #4
   24094:	f000 f82f 	bl	240f6 <sys_notify_validate>
	if ((rv == 0)
   24098:	2800      	cmp	r0, #0
   2409a:	d1f9      	bne.n	24090 <validate_args+0xc>
	    && ((cli->notify.flags
   2409c:	68a3      	ldr	r3, [r4, #8]
   2409e:	2b03      	cmp	r3, #3
   240a0:	d9f6      	bls.n	24090 <validate_args+0xc>
   240a2:	e7f3      	b.n	2408c <validate_args+0x8>

000240a4 <notify_one>:
{
   240a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   240a8:	460d      	mov	r5, r1
   240aa:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   240ac:	4619      	mov	r1, r3
   240ae:	1d28      	adds	r0, r5, #4
{
   240b0:	4690      	mov	r8, r2
   240b2:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   240b4:	f7ef f988 	bl	133c8 <sys_notify_finalize>
	if (cb) {
   240b8:	4604      	mov	r4, r0
   240ba:	b138      	cbz	r0, 240cc <notify_one+0x28>
		cb(mgr, cli, state, res);
   240bc:	4633      	mov	r3, r6
   240be:	4642      	mov	r2, r8
   240c0:	4629      	mov	r1, r5
   240c2:	4638      	mov	r0, r7
   240c4:	46a4      	mov	ip, r4
}
   240c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   240ca:	4760      	bx	ip
}
   240cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000240d0 <onoff_manager_init>:
{
   240d0:	b538      	push	{r3, r4, r5, lr}
   240d2:	460c      	mov	r4, r1
	if ((mgr == NULL)
   240d4:	4605      	mov	r5, r0
   240d6:	b158      	cbz	r0, 240f0 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   240d8:	b151      	cbz	r1, 240f0 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   240da:	680b      	ldr	r3, [r1, #0]
   240dc:	b143      	cbz	r3, 240f0 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   240de:	684b      	ldr	r3, [r1, #4]
   240e0:	b133      	cbz	r3, 240f0 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   240e2:	2220      	movs	r2, #32
   240e4:	2100      	movs	r1, #0
   240e6:	f000 fcbc 	bl	24a62 <memset>
   240ea:	612c      	str	r4, [r5, #16]
	return 0;
   240ec:	2000      	movs	r0, #0
}
   240ee:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   240f0:	f06f 0015 	mvn.w	r0, #21
   240f4:	e7fb      	b.n	240ee <onoff_manager_init+0x1e>

000240f6 <sys_notify_validate>:
	if (notify == NULL) {
   240f6:	4603      	mov	r3, r0
   240f8:	b140      	cbz	r0, 2410c <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   240fa:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   240fc:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   24100:	2a02      	cmp	r2, #2
   24102:	d006      	beq.n	24112 <sys_notify_validate+0x1c>
   24104:	2a03      	cmp	r2, #3
   24106:	d004      	beq.n	24112 <sys_notify_validate+0x1c>
   24108:	2a01      	cmp	r2, #1
   2410a:	d005      	beq.n	24118 <sys_notify_validate+0x22>
   2410c:	f06f 0015 	mvn.w	r0, #21
}
   24110:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   24112:	681a      	ldr	r2, [r3, #0]
   24114:	2a00      	cmp	r2, #0
   24116:	d0f9      	beq.n	2410c <sys_notify_validate+0x16>
		notify->result = 0;
   24118:	2000      	movs	r0, #0
   2411a:	6098      	str	r0, [r3, #8]
   2411c:	4770      	bx	lr

0002411e <_ldiv5>:
	uint32_t v_lo = *v;
   2411e:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   24122:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   24124:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   24128:	fba2 2403 	umull	r2, r4, r2, r3
   2412c:	18d5      	adds	r5, r2, r3
   2412e:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   24132:	fba1 1303 	umull	r1, r3, r1, r3
   24136:	1852      	adds	r2, r2, r1
   24138:	eb44 0403 	adc.w	r4, r4, r3
   2413c:	1952      	adds	r2, r2, r5
   2413e:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   24142:	1889      	adds	r1, r1, r2
   24144:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   24148:	e9c0 1300 	strd	r1, r3, [r0]
}
   2414c:	bd30      	pop	{r4, r5, pc}

0002414e <_get_digit>:
{
   2414e:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
   24150:	680a      	ldr	r2, [r1, #0]
   24152:	2a00      	cmp	r2, #0
{
   24154:	4603      	mov	r3, r0
	if (*digit_count > 0) {
   24156:	dd0f      	ble.n	24178 <_get_digit+0x2a>
		--*digit_count;
   24158:	3a01      	subs	r2, #1
   2415a:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
   2415c:	681a      	ldr	r2, [r3, #0]
   2415e:	6844      	ldr	r4, [r0, #4]
   24160:	200a      	movs	r0, #10
   24162:	fba2 1200 	umull	r1, r2, r2, r0
   24166:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   2416a:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
   2416c:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   24170:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
   24174:	3030      	adds	r0, #48	; 0x30
}
   24176:	bd10      	pop	{r4, pc}
		rval = '0';
   24178:	2030      	movs	r0, #48	; 0x30
   2417a:	e7fc      	b.n	24176 <_get_digit+0x28>

0002417c <encode_uint>:
{
   2417c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24180:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
   24182:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   24184:	2b6f      	cmp	r3, #111	; 0x6f
{
   24186:	4680      	mov	r8, r0
   24188:	460f      	mov	r7, r1
   2418a:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2418c:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   24190:	d029      	beq.n	241e6 <encode_uint+0x6a>
   24192:	d824      	bhi.n	241de <encode_uint+0x62>
		return 10;
   24194:	2b58      	cmp	r3, #88	; 0x58
   24196:	bf0c      	ite	eq
   24198:	2610      	moveq	r6, #16
   2419a:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   2419c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   241a0:	4632      	mov	r2, r6
   241a2:	2300      	movs	r3, #0
   241a4:	4640      	mov	r0, r8
   241a6:	4639      	mov	r1, r7
   241a8:	f7dc fb68 	bl	87c <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   241ac:	2a09      	cmp	r2, #9
   241ae:	b2d4      	uxtb	r4, r2
   241b0:	d81e      	bhi.n	241f0 <encode_uint+0x74>
   241b2:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   241b4:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   241b6:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   241b8:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   241bc:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   241c0:	d301      	bcc.n	241c6 <encode_uint+0x4a>
   241c2:	45d1      	cmp	r9, sl
   241c4:	d811      	bhi.n	241ea <encode_uint+0x6e>
	if (conv->flag_hash) {
   241c6:	782b      	ldrb	r3, [r5, #0]
   241c8:	069b      	lsls	r3, r3, #26
   241ca:	d505      	bpl.n	241d8 <encode_uint+0x5c>
		if (radix == 8) {
   241cc:	2e08      	cmp	r6, #8
   241ce:	d115      	bne.n	241fc <encode_uint+0x80>
			conv->altform_0 = true;
   241d0:	78ab      	ldrb	r3, [r5, #2]
   241d2:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   241d6:	70ab      	strb	r3, [r5, #2]
}
   241d8:	4648      	mov	r0, r9
   241da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   241de:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   241e2:	2b70      	cmp	r3, #112	; 0x70
   241e4:	e7d7      	b.n	24196 <encode_uint+0x1a>
	switch (specifier) {
   241e6:	2608      	movs	r6, #8
   241e8:	e7d8      	b.n	2419c <encode_uint+0x20>
		value /= radix;
   241ea:	4680      	mov	r8, r0
   241ec:	460f      	mov	r7, r1
   241ee:	e7d7      	b.n	241a0 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   241f0:	f1bb 0f19 	cmp.w	fp, #25
   241f4:	bf94      	ite	ls
   241f6:	3437      	addls	r4, #55	; 0x37
   241f8:	3457      	addhi	r4, #87	; 0x57
   241fa:	e7db      	b.n	241b4 <encode_uint+0x38>
		} else if (radix == 16) {
   241fc:	2e10      	cmp	r6, #16
   241fe:	d1eb      	bne.n	241d8 <encode_uint+0x5c>
			conv->altform_0c = true;
   24200:	78ab      	ldrb	r3, [r5, #2]
   24202:	f043 0310 	orr.w	r3, r3, #16
   24206:	e7e6      	b.n	241d6 <encode_uint+0x5a>

00024208 <outs>:
{
   24208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2420c:	4607      	mov	r7, r0
   2420e:	4688      	mov	r8, r1
   24210:	4615      	mov	r5, r2
   24212:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   24214:	4614      	mov	r4, r2
   24216:	42b4      	cmp	r4, r6
   24218:	d305      	bcc.n	24226 <outs+0x1e>
   2421a:	b10e      	cbz	r6, 24220 <outs+0x18>
	return (int)count;
   2421c:	1b60      	subs	r0, r4, r5
   2421e:	e008      	b.n	24232 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   24220:	7823      	ldrb	r3, [r4, #0]
   24222:	2b00      	cmp	r3, #0
   24224:	d0fa      	beq.n	2421c <outs+0x14>
		int rc = out((int)*sp++, ctx);
   24226:	f814 0b01 	ldrb.w	r0, [r4], #1
   2422a:	4641      	mov	r1, r8
   2422c:	47b8      	blx	r7
		if (rc < 0) {
   2422e:	2800      	cmp	r0, #0
   24230:	daf1      	bge.n	24216 <outs+0xe>
}
   24232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024236 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   24236:	4040      	eors	r0, r0
   24238:	f380 8811 	msr	BASEPRI, r0
   2423c:	f04f 0004 	mov.w	r0, #4
   24240:	df02      	svc	2
}
   24242:	4770      	bx	lr

00024244 <assert_print>:

void assert_print(const char *fmt, ...)
{
   24244:	b40f      	push	{r0, r1, r2, r3}
   24246:	b507      	push	{r0, r1, r2, lr}
   24248:	a904      	add	r1, sp, #16
   2424a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   2424e:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   24250:	f7ff fdbf 	bl	23dd2 <vprintk>

	va_end(ap);
}
   24254:	b003      	add	sp, #12
   24256:	f85d eb04 	ldr.w	lr, [sp], #4
   2425a:	b004      	add	sp, #16
   2425c:	4770      	bx	lr

0002425e <free_space>:
{
   2425e:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
   24260:	6903      	ldr	r3, [r0, #16]
{
   24262:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
   24264:	f013 0008 	ands.w	r0, r3, #8
   24268:	d109      	bne.n	2427e <free_space+0x20>
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   2426a:	6813      	ldr	r3, [r2, #0]
   2426c:	68d4      	ldr	r4, [r2, #12]
   2426e:	429c      	cmp	r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
   24270:	bf97      	itett	ls
   24272:	6a52      	ldrls	r2, [r2, #36]	; 0x24
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   24274:	1ae3      	subhi	r3, r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
   24276:	1ad3      	subls	r3, r2, r3
	return true;
   24278:	2001      	movls	r0, #1
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
   2427a:	600b      	str	r3, [r1, #0]
}
   2427c:	bd10      	pop	{r4, pc}
   2427e:	2300      	movs	r3, #0
		return false;
   24280:	4618      	mov	r0, r3
   24282:	e7fa      	b.n	2427a <free_space+0x1c>

00024284 <get_usage>:
{
   24284:	b513      	push	{r0, r1, r4, lr}
	if (free_space(buffer, &f)) {
   24286:	a901      	add	r1, sp, #4
{
   24288:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
   2428a:	f7ff ffe8 	bl	2425e <free_space>
   2428e:	b120      	cbz	r0, 2429a <get_usage+0x16>
		f += (buffer->rd_idx - 1);
   24290:	9b01      	ldr	r3, [sp, #4]
   24292:	68e2      	ldr	r2, [r4, #12]
   24294:	3b01      	subs	r3, #1
   24296:	4413      	add	r3, r2
   24298:	9301      	str	r3, [sp, #4]
	return buffer->size - 1 - f;
   2429a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   2429c:	9b01      	ldr	r3, [sp, #4]
   2429e:	1ac0      	subs	r0, r0, r3
}
   242a0:	3801      	subs	r0, #1
   242a2:	b002      	add	sp, #8
   242a4:	bd10      	pop	{r4, pc}

000242a6 <idx_inc>:
{
   242a6:	b510      	push	{r4, lr}
   242a8:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   242aa:	1850      	adds	r0, r2, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   242ac:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   242ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   242b0:	07d2      	lsls	r2, r2, #31
   242b2:	d502      	bpl.n	242ba <idx_inc+0x14>
		return i & (buffer->size - 1);
   242b4:	3b01      	subs	r3, #1
   242b6:	4018      	ands	r0, r3
}
   242b8:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   242ba:	4298      	cmp	r0, r3
   242bc:	bf28      	it	cs
   242be:	1ac0      	subcs	r0, r0, r3
   242c0:	e7fa      	b.n	242b8 <idx_inc+0x12>

000242c2 <rd_idx_inc>:
{
   242c2:	b510      	push	{r4, lr}
   242c4:	4604      	mov	r4, r0
   242c6:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   242c8:	68c1      	ldr	r1, [r0, #12]
   242ca:	f7ff ffec 	bl	242a6 <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
   242ce:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   242d0:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
   242d2:	f023 0308 	bic.w	r3, r3, #8
   242d6:	6123      	str	r3, [r4, #16]
}
   242d8:	bd10      	pop	{r4, pc}

000242da <add_skip_item>:
{
   242da:	b538      	push	{r3, r4, r5, lr}
   242dc:	460d      	mov	r5, r1
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   242de:	6a02      	ldr	r2, [r0, #32]
	union mpsc_pbuf_generic skip = {
   242e0:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   242e2:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   242e4:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   242e8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
{
   242ec:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   242ee:	6801      	ldr	r1, [r0, #0]
   242f0:	462a      	mov	r2, r5
   242f2:	f7ff ffd8 	bl	242a6 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   242f6:	68e3      	ldr	r3, [r4, #12]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   242f8:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   242fa:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
   242fc:	4298      	cmp	r0, r3
		buffer->flags |= MPSC_PBUF_FULL;
   242fe:	bf02      	ittt	eq
   24300:	6923      	ldreq	r3, [r4, #16]
   24302:	f043 0308 	orreq.w	r3, r3, #8
   24306:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   24308:	462a      	mov	r2, r5
   2430a:	4620      	mov	r0, r4
   2430c:	f7ff ffcb 	bl	242a6 <idx_inc>
   24310:	6060      	str	r0, [r4, #4]
}
   24312:	bd38      	pop	{r3, r4, r5, pc}

00024314 <drop_item_locked>:
{
   24314:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   24318:	68c7      	ldr	r7, [r0, #12]
   2431a:	6a06      	ldr	r6, [r0, #32]
{
   2431c:	469b      	mov	fp, r3
	if (item->hdr.busy && !item->hdr.valid) {
   2431e:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
   24322:	f003 0303 	and.w	r3, r3, #3
   24326:	2b02      	cmp	r3, #2
{
   24328:	4604      	mov	r4, r0
   2432a:	4688      	mov	r8, r1
   2432c:	4691      	mov	r9, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   2432e:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   24332:	f04f 0300 	mov.w	r3, #0
   24336:	d009      	beq.n	2434c <drop_item_locked+0x38>
	*item_to_drop = NULL;
   24338:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
   2433a:	f8cb 3000 	str.w	r3, [fp]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
   2433e:	6923      	ldr	r3, [r4, #16]
   24340:	0799      	lsls	r1, r3, #30
   24342:	d410      	bmi.n	24366 <drop_item_locked+0x52>
		return false;
   24344:	2000      	movs	r0, #0
}
   24346:	b003      	add	sp, #12
   24348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
   2434c:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
   24350:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
   24352:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
   24354:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
   24358:	d0f1      	beq.n	2433e <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
   2435a:	f7ff ffb2 	bl	242c2 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   2435e:	68e3      	ldr	r3, [r4, #12]
   24360:	60a3      	str	r3, [r4, #8]
		return true;
   24362:	2001      	movs	r0, #1
   24364:	e7ef      	b.n	24346 <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
   24366:	69e3      	ldr	r3, [r4, #28]
   24368:	4650      	mov	r0, sl
   2436a:	4798      	blx	r3
	return item->hdr.valid;
   2436c:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	if (!is_valid(item)) {
   24370:	07da      	lsls	r2, r3, #31
	uint32_t rd_wlen = buffer->get_wlen(item);
   24372:	4605      	mov	r5, r0
	if (!is_valid(item)) {
   24374:	d5e6      	bpl.n	24344 <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
   24376:	f013 0302 	ands.w	r3, r3, #2
   2437a:	d01d      	beq.n	243b8 <drop_item_locked+0xa4>
		if (free_wlen) {
   2437c:	f1b8 0f00 	cmp.w	r8, #0
   24380:	d003      	beq.n	2438a <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
   24382:	4641      	mov	r1, r8
   24384:	4620      	mov	r0, r4
   24386:	f7ff ffa8 	bl	242da <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   2438a:	6861      	ldr	r1, [r4, #4]
   2438c:	462a      	mov	r2, r5
   2438e:	4620      	mov	r0, r4
   24390:	f7ff ff89 	bl	242a6 <idx_inc>
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   24394:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
   24398:	4299      	cmp	r1, r3
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   2439a:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
   2439c:	d104      	bne.n	243a8 <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
   2439e:	462a      	mov	r2, r5
   243a0:	4620      	mov	r0, r4
   243a2:	f7ff ff80 	bl	242a6 <idx_inc>
   243a6:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
   243a8:	68a3      	ldr	r3, [r4, #8]
   243aa:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
   243ac:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
   243ae:	6923      	ldr	r3, [r4, #16]
   243b0:	f043 0308 	orr.w	r3, r3, #8
   243b4:	6123      	str	r3, [r4, #16]
   243b6:	e7d4      	b.n	24362 <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
   243b8:	4601      	mov	r1, r0
   243ba:	4620      	mov	r0, r4
   243bc:	9301      	str	r3, [sp, #4]
   243be:	f7ff ff80 	bl	242c2 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   243c2:	68e2      	ldr	r2, [r4, #12]
   243c4:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
   243c6:	f1b8 0f00 	cmp.w	r8, #0
   243ca:	d004      	beq.n	243d6 <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
   243cc:	6821      	ldr	r1, [r4, #0]
   243ce:	6a22      	ldr	r2, [r4, #32]
   243d0:	9b01      	ldr	r3, [sp, #4]
   243d2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
   243d6:	eb05 0208 	add.w	r2, r5, r8
   243da:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   243de:	6821      	ldr	r1, [r4, #0]
   243e0:	4620      	mov	r0, r4
   243e2:	f7ff ff60 	bl	242a6 <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
   243e6:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
   243e8:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
   243ea:	f043 0308 	orr.w	r3, r3, #8
   243ee:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
   243f0:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
   243f4:	f36f 0300 	bfc	r3, #0, #1
   243f8:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
   243fc:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
   24400:	e7af      	b.n	24362 <drop_item_locked+0x4e>

00024402 <post_drop_action>:
{
   24402:	b570      	push	{r4, r5, r6, lr}
   24404:	4604      	mov	r4, r0
   24406:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
   24408:	f7ff ff4d 	bl	242a6 <idx_inc>
	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
   2440c:	6823      	ldr	r3, [r4, #0]
   2440e:	4283      	cmp	r3, r0
   24410:	d105      	bne.n	2441e <post_drop_action+0x1c>
		buffer->flags &= ~MPSC_PBUF_FULL;
   24412:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
   24414:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
   24416:	f023 0308 	bic.w	r3, r3, #8
   2441a:	6123      	str	r3, [r4, #16]
}
   2441c:	bd70      	pop	{r4, r5, r6, pc}
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   2441e:	6a22      	ldr	r2, [r4, #32]
	union mpsc_pbuf_generic skip = {
   24420:	00ab      	lsls	r3, r5, #2
   24422:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
   24426:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
   2442a:	4620      	mov	r0, r4
   2442c:	6861      	ldr	r1, [r4, #4]
   2442e:	462a      	mov	r2, r5
   24430:	f7ff ff39 	bl	242a6 <idx_inc>
   24434:	6060      	str	r0, [r4, #4]
   24436:	e7f1      	b.n	2441c <post_drop_action+0x1a>

00024438 <max_utilization_update>:
{
   24438:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   2443a:	6903      	ldr	r3, [r0, #16]
   2443c:	075b      	lsls	r3, r3, #29
{
   2443e:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
   24440:	d506      	bpl.n	24450 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
   24442:	6a85      	ldr	r5, [r0, #40]	; 0x28
   24444:	f7ff ff1e 	bl	24284 <get_usage>
   24448:	4285      	cmp	r5, r0
   2444a:	bf2c      	ite	cs
   2444c:	62a5      	strcs	r5, [r4, #40]	; 0x28
   2444e:	62a0      	strcc	r0, [r4, #40]	; 0x28
}
   24450:	bd38      	pop	{r3, r4, r5, pc}

00024452 <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
   24452:	6902      	ldr	r2, [r0, #16]
   24454:	6883      	ldr	r3, [r0, #8]
   24456:	0712      	lsls	r2, r2, #28
   24458:	d402      	bmi.n	24460 <mpsc_pbuf_is_pending+0xe>
   2445a:	6842      	ldr	r2, [r0, #4]
   2445c:	429a      	cmp	r2, r3
   2445e:	d200      	bcs.n	24462 <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
   24460:	6a42      	ldr	r2, [r0, #36]	; 0x24
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   24462:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   24464:	1e18      	subs	r0, r3, #0
   24466:	bf18      	it	ne
   24468:	2001      	movne	r0, #1
   2446a:	4770      	bx	lr

0002446c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_THREAD_STACK_SIZE, 1024);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_BUFFER_SIZE, 16);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BLE_NUS_BLE_OBSERVER_PRIO, -1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BT_NUS_UART_RX_WAIT_TIME, 50);

GEN_ABS_SYM_END
   2446c:	4770      	bx	lr

0002446e <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
   2446e:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   24470:	075b      	lsls	r3, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
   24472:	bf5f      	itttt	pl
   24474:	6803      	ldrpl	r3, [r0, #0]
   24476:	8842      	ldrhpl	r2, [r0, #2]
   24478:	f3c3 234a 	ubfxpl	r3, r3, #9, #11
   2447c:	eb03 1012 	addpl.w	r0, r3, r2, lsr #4
   24480:	bf5d      	ittte	pl
   24482:	3017      	addpl	r0, #23
   24484:	f020 0007 	bicpl.w	r0, r0, #7
   24488:	0880      	lsrpl	r0, r0, #2
	return 0;
   2448a:	2000      	movmi	r0, #0
}
   2448c:	4770      	bx	lr

0002448e <dummy_timestamp>:
}
   2448e:	2000      	movs	r0, #0
   24490:	4770      	bx	lr

00024492 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   24492:	f002 b86c 	b.w	2656e <sys_clock_cycle_get_32>

00024496 <atomic_inc>:
{
   24496:	4603      	mov	r3, r0
}
   24498:	f3bf 8f5b 	dmb	ish
   2449c:	e853 0f00 	ldrex	r0, [r3]
   244a0:	1c42      	adds	r2, r0, #1
   244a2:	e843 2100 	strex	r1, r2, [r3]
   244a6:	2900      	cmp	r1, #0
   244a8:	d1f8      	bne.n	2449c <atomic_inc+0x6>
   244aa:	f3bf 8f5b 	dmb	ish
   244ae:	4770      	bx	lr

000244b0 <z_log_vprintk>:
{
   244b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   244b2:	2300      	movs	r3, #0
   244b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
   244b8:	e9cd 3300 	strd	r3, r3, [sp]
   244bc:	461a      	mov	r2, r3
   244be:	4619      	mov	r1, r3
   244c0:	4618      	mov	r0, r3
   244c2:	f7ef fdf7 	bl	140b4 <z_impl_z_log_msg_runtime_vcreate>
}
   244c6:	b005      	add	sp, #20
   244c8:	f85d fb04 	ldr.w	pc, [sp], #4

000244cc <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
   244cc:	2001      	movs	r0, #1
   244ce:	f7ef bae3 	b.w	13a98 <z_log_dropped>

000244d2 <z_log_get_tag>:
}
   244d2:	2000      	movs	r0, #0
   244d4:	4770      	bx	lr

000244d6 <z_cbprintf_cpy>:
{
   244d6:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
   244d8:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
   244dc:	1b9b      	subs	r3, r3, r6
   244de:	428b      	cmp	r3, r1
{
   244e0:	460c      	mov	r4, r1
   244e2:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
   244e4:	d30a      	bcc.n	244fc <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
   244e6:	6813      	ldr	r3, [r2, #0]
   244e8:	460a      	mov	r2, r1
   244ea:	4601      	mov	r1, r0
   244ec:	1998      	adds	r0, r3, r6
   244ee:	f000 faad 	bl	24a4c <memcpy>
	desc->off += len;
   244f2:	68ab      	ldr	r3, [r5, #8]
   244f4:	4423      	add	r3, r4
   244f6:	60ab      	str	r3, [r5, #8]
	return len;
   244f8:	4620      	mov	r0, r4
}
   244fa:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
   244fc:	f06f 001b 	mvn.w	r0, #27
   24500:	e7fb      	b.n	244fa <z_cbprintf_cpy+0x24>

00024502 <z_log_msg_finalize>:
{
   24502:	b570      	push	{r4, r5, r6, lr}
   24504:	460e      	mov	r6, r1
   24506:	4615      	mov	r5, r2
   24508:	4619      	mov	r1, r3
	if (!msg) {
   2450a:	4604      	mov	r4, r0
   2450c:	b918      	cbnz	r0, 24516 <z_log_msg_finalize+0x14>
}
   2450e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   24512:	f7ef bac1 	b.w	13a98 <z_log_dropped>
	if (data) {
   24516:	b133      	cbz	r3, 24526 <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
   24518:	f3c2 234a 	ubfx	r3, r2, #9, #11
   2451c:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
   2451e:	0d12      	lsrs	r2, r2, #20
   24520:	4418      	add	r0, r3
   24522:	f000 fa93 	bl	24a4c <memcpy>
	msg->hdr.source = source;
   24526:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   2452a:	4620      	mov	r0, r4
}
   2452c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   24530:	f7ef bce6 	b.w	13f00 <z_log_msg_commit>

00024534 <buffer_write>:
{
   24534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24536:	4606      	mov	r6, r0
   24538:	460d      	mov	r5, r1
   2453a:	4614      	mov	r4, r2
   2453c:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   2453e:	4621      	mov	r1, r4
   24540:	4628      	mov	r0, r5
   24542:	463a      	mov	r2, r7
   24544:	47b0      	blx	r6
	} while (len != 0);
   24546:	1a24      	subs	r4, r4, r0
		buf += processed;
   24548:	4405      	add	r5, r0
	} while (len != 0);
   2454a:	d1f8      	bne.n	2453e <buffer_write+0xa>
}
   2454c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002454e <cbvprintf>:
{
   2454e:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   24550:	2400      	movs	r4, #0
   24552:	9400      	str	r4, [sp, #0]
   24554:	f7ec fc78 	bl	10e48 <z_cbvprintf_impl>
}
   24558:	b002      	add	sp, #8
   2455a:	bd10      	pop	{r4, pc}

0002455c <log_output_flush>:
{
   2455c:	b510      	push	{r4, lr}
		     output->control_block->offset,
   2455e:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   24560:	6881      	ldr	r1, [r0, #8]
{
   24562:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   24564:	e9d2 2300 	ldrd	r2, r3, [r2]
   24568:	6800      	ldr	r0, [r0, #0]
   2456a:	f7ff ffe3 	bl	24534 <buffer_write>
	output->control_block->offset = 0;
   2456e:	6863      	ldr	r3, [r4, #4]
   24570:	2200      	movs	r2, #0
   24572:	601a      	str	r2, [r3, #0]
}
   24574:	bd10      	pop	{r4, pc}

00024576 <cr_out_func>:
	if (c == '\n') {
   24576:	280a      	cmp	r0, #10
{
   24578:	b538      	push	{r3, r4, r5, lr}
   2457a:	4604      	mov	r4, r0
   2457c:	460d      	mov	r5, r1
	if (c == '\n') {
   2457e:	d102      	bne.n	24586 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   24580:	200d      	movs	r0, #13
   24582:	f7ef fe17 	bl	141b4 <out_func>
	out_func(c, ctx);
   24586:	4629      	mov	r1, r5
   24588:	4620      	mov	r0, r4
   2458a:	f7ef fe13 	bl	141b4 <out_func>
}
   2458e:	2000      	movs	r0, #0
   24590:	bd38      	pop	{r3, r4, r5, pc}

00024592 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   24592:	b538      	push	{r3, r4, r5, lr}
   24594:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   24596:	42ab      	cmp	r3, r5
{
   24598:	4611      	mov	r1, r2
   2459a:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   2459c:	d804      	bhi.n	245a8 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   2459e:	461a      	mov	r2, r3
   245a0:	f000 fa54 	bl	24a4c <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   245a4:	4620      	mov	r0, r4
   245a6:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   245a8:	2400      	movs	r4, #0
   245aa:	e7fb      	b.n	245a4 <_copy+0x12>

000245ac <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   245ac:	f000 ba59 	b.w	24a62 <memset>

000245b0 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   245b0:	09c3      	lsrs	r3, r0, #7
   245b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   245b6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   245ba:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   245be:	b2c0      	uxtb	r0, r0
   245c0:	4770      	bx	lr

000245c2 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   245c2:	78cb      	ldrb	r3, [r1, #3]
   245c4:	7802      	ldrb	r2, [r0, #0]
   245c6:	4053      	eors	r3, r2
   245c8:	7003      	strb	r3, [r0, #0]
   245ca:	884b      	ldrh	r3, [r1, #2]
   245cc:	7842      	ldrb	r2, [r0, #1]
   245ce:	4053      	eors	r3, r2
   245d0:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   245d2:	680a      	ldr	r2, [r1, #0]
   245d4:	7883      	ldrb	r3, [r0, #2]
   245d6:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   245da:	7083      	strb	r3, [r0, #2]
   245dc:	680a      	ldr	r2, [r1, #0]
   245de:	78c3      	ldrb	r3, [r0, #3]
   245e0:	4053      	eors	r3, r2
   245e2:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   245e4:	79cb      	ldrb	r3, [r1, #7]
   245e6:	7902      	ldrb	r2, [r0, #4]
   245e8:	4053      	eors	r3, r2
   245ea:	7103      	strb	r3, [r0, #4]
   245ec:	88cb      	ldrh	r3, [r1, #6]
   245ee:	7942      	ldrb	r2, [r0, #5]
   245f0:	4053      	eors	r3, r2
   245f2:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   245f4:	684a      	ldr	r2, [r1, #4]
   245f6:	7983      	ldrb	r3, [r0, #6]
   245f8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   245fc:	7183      	strb	r3, [r0, #6]
   245fe:	684a      	ldr	r2, [r1, #4]
   24600:	79c3      	ldrb	r3, [r0, #7]
   24602:	4053      	eors	r3, r2
   24604:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   24606:	7acb      	ldrb	r3, [r1, #11]
   24608:	7a02      	ldrb	r2, [r0, #8]
   2460a:	4053      	eors	r3, r2
   2460c:	7203      	strb	r3, [r0, #8]
   2460e:	7a42      	ldrb	r2, [r0, #9]
   24610:	894b      	ldrh	r3, [r1, #10]
   24612:	4053      	eors	r3, r2
   24614:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   24616:	688a      	ldr	r2, [r1, #8]
   24618:	7a83      	ldrb	r3, [r0, #10]
   2461a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2461e:	7283      	strb	r3, [r0, #10]
   24620:	688a      	ldr	r2, [r1, #8]
   24622:	7ac3      	ldrb	r3, [r0, #11]
   24624:	4053      	eors	r3, r2
   24626:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   24628:	7bcb      	ldrb	r3, [r1, #15]
   2462a:	7b02      	ldrb	r2, [r0, #12]
   2462c:	4053      	eors	r3, r2
   2462e:	7303      	strb	r3, [r0, #12]
   24630:	89cb      	ldrh	r3, [r1, #14]
   24632:	7b42      	ldrb	r2, [r0, #13]
   24634:	4053      	eors	r3, r2
   24636:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   24638:	68ca      	ldr	r2, [r1, #12]
   2463a:	7b83      	ldrb	r3, [r0, #14]
   2463c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   24640:	7383      	strb	r3, [r0, #14]
   24642:	68ca      	ldr	r2, [r1, #12]
   24644:	7bc3      	ldrb	r3, [r0, #15]
   24646:	4053      	eors	r3, r2
   24648:	73c3      	strb	r3, [r0, #15]
}
   2464a:	4770      	bx	lr

0002464c <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   2464c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2464e:	7802      	ldrb	r2, [r0, #0]
   24650:	f88d 2000 	strb.w	r2, [sp]
   24654:	7942      	ldrb	r2, [r0, #5]
   24656:	f88d 2001 	strb.w	r2, [sp, #1]
   2465a:	7a82      	ldrb	r2, [r0, #10]
   2465c:	f88d 2002 	strb.w	r2, [sp, #2]
   24660:	7bc2      	ldrb	r2, [r0, #15]
   24662:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   24666:	7902      	ldrb	r2, [r0, #4]
   24668:	f88d 2004 	strb.w	r2, [sp, #4]
   2466c:	7a42      	ldrb	r2, [r0, #9]
   2466e:	f88d 2005 	strb.w	r2, [sp, #5]
   24672:	7b82      	ldrb	r2, [r0, #14]
   24674:	f88d 2006 	strb.w	r2, [sp, #6]
   24678:	78c2      	ldrb	r2, [r0, #3]
   2467a:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2467e:	7a02      	ldrb	r2, [r0, #8]
   24680:	f88d 2008 	strb.w	r2, [sp, #8]
   24684:	7b42      	ldrb	r2, [r0, #13]
   24686:	f88d 2009 	strb.w	r2, [sp, #9]
   2468a:	7882      	ldrb	r2, [r0, #2]
   2468c:	f88d 200a 	strb.w	r2, [sp, #10]
   24690:	79c2      	ldrb	r2, [r0, #7]
   24692:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   24696:	7b02      	ldrb	r2, [r0, #12]
   24698:	f88d 200c 	strb.w	r2, [sp, #12]
   2469c:	7842      	ldrb	r2, [r0, #1]
   2469e:	7ac3      	ldrb	r3, [r0, #11]
   246a0:	f88d 200d 	strb.w	r2, [sp, #13]
   246a4:	7982      	ldrb	r2, [r0, #6]
   246a6:	f88d 200e 	strb.w	r2, [sp, #14]
   246aa:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   246ae:	2310      	movs	r3, #16
   246b0:	466a      	mov	r2, sp
   246b2:	4619      	mov	r1, r3
   246b4:	f7ff ff6d 	bl	24592 <_copy>
}
   246b8:	b005      	add	sp, #20
   246ba:	f85d fb04 	ldr.w	pc, [sp], #4

000246be <mult_row_column>:
{
   246be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   246c0:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   246c2:	7808      	ldrb	r0, [r1, #0]
{
   246c4:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   246c6:	f7ff ff73 	bl	245b0 <_double_byte>
   246ca:	4605      	mov	r5, r0
   246cc:	7860      	ldrb	r0, [r4, #1]
   246ce:	f7ff ff6f 	bl	245b0 <_double_byte>
   246d2:	78a2      	ldrb	r2, [r4, #2]
   246d4:	7863      	ldrb	r3, [r4, #1]
   246d6:	4053      	eors	r3, r2
   246d8:	78e2      	ldrb	r2, [r4, #3]
   246da:	4053      	eors	r3, r2
   246dc:	405d      	eors	r5, r3
   246de:	4068      	eors	r0, r5
   246e0:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   246e2:	7860      	ldrb	r0, [r4, #1]
   246e4:	7827      	ldrb	r7, [r4, #0]
   246e6:	f7ff ff63 	bl	245b0 <_double_byte>
   246ea:	4605      	mov	r5, r0
   246ec:	78a0      	ldrb	r0, [r4, #2]
   246ee:	f7ff ff5f 	bl	245b0 <_double_byte>
   246f2:	78a3      	ldrb	r3, [r4, #2]
   246f4:	405f      	eors	r7, r3
   246f6:	78e3      	ldrb	r3, [r4, #3]
   246f8:	405f      	eors	r7, r3
   246fa:	407d      	eors	r5, r7
   246fc:	4068      	eors	r0, r5
   246fe:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   24700:	7863      	ldrb	r3, [r4, #1]
   24702:	7827      	ldrb	r7, [r4, #0]
   24704:	78a0      	ldrb	r0, [r4, #2]
   24706:	405f      	eors	r7, r3
   24708:	f7ff ff52 	bl	245b0 <_double_byte>
   2470c:	4605      	mov	r5, r0
   2470e:	78e0      	ldrb	r0, [r4, #3]
   24710:	f7ff ff4e 	bl	245b0 <_double_byte>
   24714:	78e3      	ldrb	r3, [r4, #3]
   24716:	405f      	eors	r7, r3
   24718:	407d      	eors	r5, r7
   2471a:	4068      	eors	r0, r5
   2471c:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2471e:	7820      	ldrb	r0, [r4, #0]
   24720:	f7ff ff46 	bl	245b0 <_double_byte>
   24724:	7862      	ldrb	r2, [r4, #1]
   24726:	7823      	ldrb	r3, [r4, #0]
   24728:	4053      	eors	r3, r2
   2472a:	78a2      	ldrb	r2, [r4, #2]
   2472c:	4053      	eors	r3, r2
   2472e:	ea80 0503 	eor.w	r5, r0, r3
   24732:	78e0      	ldrb	r0, [r4, #3]
   24734:	f7ff ff3c 	bl	245b0 <_double_byte>
   24738:	b2ed      	uxtb	r5, r5
   2473a:	4045      	eors	r5, r0
   2473c:	70f5      	strb	r5, [r6, #3]
}
   2473e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024740 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   24740:	b570      	push	{r4, r5, r6, lr}
   24742:	4614      	mov	r4, r2
   24744:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   24746:	4605      	mov	r5, r0
   24748:	2800      	cmp	r0, #0
   2474a:	d049      	beq.n	247e0 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   2474c:	2900      	cmp	r1, #0
   2474e:	d049      	beq.n	247e4 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   24750:	2a00      	cmp	r2, #0
   24752:	d049      	beq.n	247e8 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   24754:	2310      	movs	r3, #16
   24756:	460a      	mov	r2, r1
   24758:	4668      	mov	r0, sp
   2475a:	4619      	mov	r1, r3
   2475c:	f7ff ff19 	bl	24592 <_copy>
	add_round_key(state, s->words);
   24760:	4621      	mov	r1, r4
   24762:	4668      	mov	r0, sp
   24764:	f7ff ff2d 	bl	245c2 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   24768:	3410      	adds	r4, #16
   2476a:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   2476e:	4668      	mov	r0, sp
   24770:	f7f0 f836 	bl	147e0 <sub_bytes>
		shift_rows(state);
   24774:	4668      	mov	r0, sp
   24776:	f7ff ff69 	bl	2464c <shift_rows>
	mult_row_column(t, s);
   2477a:	4669      	mov	r1, sp
   2477c:	a804      	add	r0, sp, #16
   2477e:	f7ff ff9e 	bl	246be <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   24782:	a901      	add	r1, sp, #4
   24784:	a805      	add	r0, sp, #20
   24786:	f7ff ff9a 	bl	246be <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   2478a:	a902      	add	r1, sp, #8
   2478c:	a806      	add	r0, sp, #24
   2478e:	f7ff ff96 	bl	246be <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   24792:	a903      	add	r1, sp, #12
   24794:	a807      	add	r0, sp, #28
   24796:	f7ff ff92 	bl	246be <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2479a:	2310      	movs	r3, #16
   2479c:	4619      	mov	r1, r3
   2479e:	eb0d 0203 	add.w	r2, sp, r3
   247a2:	4668      	mov	r0, sp
   247a4:	f7ff fef5 	bl	24592 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   247a8:	4621      	mov	r1, r4
   247aa:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   247ac:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   247ae:	f7ff ff08 	bl	245c2 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   247b2:	42b4      	cmp	r4, r6
   247b4:	d1db      	bne.n	2476e <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   247b6:	f7f0 f813 	bl	147e0 <sub_bytes>
	shift_rows(state);
   247ba:	4668      	mov	r0, sp
   247bc:	f7ff ff46 	bl	2464c <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   247c0:	4621      	mov	r1, r4
   247c2:	4668      	mov	r0, sp
   247c4:	f7ff fefd 	bl	245c2 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   247c8:	2310      	movs	r3, #16
   247ca:	4619      	mov	r1, r3
   247cc:	466a      	mov	r2, sp
   247ce:	4628      	mov	r0, r5
   247d0:	f7ff fedf 	bl	24592 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   247d4:	4668      	mov	r0, sp
   247d6:	2210      	movs	r2, #16
   247d8:	2100      	movs	r1, #0
   247da:	f7ff fee7 	bl	245ac <_set>

	return TC_CRYPTO_SUCCESS;
   247de:	2001      	movs	r0, #1
}
   247e0:	b008      	add	sp, #32
   247e2:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   247e4:	4608      	mov	r0, r1
   247e6:	e7fb      	b.n	247e0 <tc_aes_encrypt+0xa0>
   247e8:	4610      	mov	r0, r2
   247ea:	e7f9      	b.n	247e0 <tc_aes_encrypt+0xa0>

000247ec <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   247ec:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   247ee:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   247f0:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   247f2:	f912 3b10 	ldrsb.w	r3, [r2], #16
   247f6:	2b00      	cmp	r3, #0
   247f8:	bfac      	ite	ge
   247fa:	2300      	movge	r3, #0
   247fc:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   247fe:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   24802:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   24806:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   24808:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   2480c:	d002      	beq.n	24814 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   2480e:	7813      	ldrb	r3, [r2, #0]
   24810:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   24812:	e7f4      	b.n	247fe <gf_double+0x12>
	}
}
   24814:	bd10      	pop	{r4, pc}

00024816 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   24816:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   24818:	b120      	cbz	r0, 24824 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2481a:	2258      	movs	r2, #88	; 0x58
   2481c:	2100      	movs	r1, #0
   2481e:	f7ff fec5 	bl	245ac <_set>
   24822:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   24824:	bd08      	pop	{r3, pc}

00024826 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   24826:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   24828:	4604      	mov	r4, r0
   2482a:	b188      	cbz	r0, 24850 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2482c:	2210      	movs	r2, #16
   2482e:	2100      	movs	r1, #0
   24830:	f7ff febc 	bl	245ac <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   24834:	2210      	movs	r2, #16
   24836:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2483a:	2100      	movs	r1, #0
   2483c:	f7ff feb6 	bl	245ac <_set>
	s->leftover_offset = 0;
   24840:	2300      	movs	r3, #0
   24842:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   24844:	2200      	movs	r2, #0
   24846:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2484a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   2484e:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   24850:	bd10      	pop	{r4, pc}

00024852 <tc_cmac_setup>:
{
   24852:	b570      	push	{r4, r5, r6, lr}
   24854:	4604      	mov	r4, r0
   24856:	460d      	mov	r5, r1
   24858:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   2485a:	b310      	cbz	r0, 248a2 <tc_cmac_setup+0x50>
   2485c:	b311      	cbz	r1, 248a4 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   2485e:	2258      	movs	r2, #88	; 0x58
   24860:	2100      	movs	r1, #0
   24862:	f7ff fea3 	bl	245ac <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   24866:	4629      	mov	r1, r5
	s->sched = sched;
   24868:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2486a:	4630      	mov	r0, r6
   2486c:	f7ef ffc4 	bl	147f8 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   24870:	2210      	movs	r2, #16
   24872:	2100      	movs	r1, #0
   24874:	4620      	mov	r0, r4
   24876:	f7ff fe99 	bl	245ac <_set>
	gf_double (s->K1, s->iv);
   2487a:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   2487e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24880:	4621      	mov	r1, r4
   24882:	4620      	mov	r0, r4
   24884:	f7ff ff5c 	bl	24740 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   24888:	4621      	mov	r1, r4
   2488a:	4628      	mov	r0, r5
   2488c:	f7ff ffae 	bl	247ec <gf_double>
	gf_double (s->K2, s->K1);
   24890:	4629      	mov	r1, r5
   24892:	f104 0020 	add.w	r0, r4, #32
   24896:	f7ff ffa9 	bl	247ec <gf_double>
	tc_cmac_init(s);
   2489a:	4620      	mov	r0, r4
   2489c:	f7ff ffc3 	bl	24826 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   248a0:	2001      	movs	r0, #1
}
   248a2:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   248a4:	4608      	mov	r0, r1
   248a6:	e7fc      	b.n	248a2 <tc_cmac_setup+0x50>

000248a8 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   248a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   248ac:	460e      	mov	r6, r1
   248ae:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   248b0:	4604      	mov	r4, r0
   248b2:	2800      	cmp	r0, #0
   248b4:	d060      	beq.n	24978 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   248b6:	b1fa      	cbz	r2, 248f8 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   248b8:	2900      	cmp	r1, #0
   248ba:	d05d      	beq.n	24978 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   248bc:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   248c0:	ea53 0102 	orrs.w	r1, r3, r2
   248c4:	d058      	beq.n	24978 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   248c6:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   248c8:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   248cc:	f142 32ff 	adc.w	r2, r2, #4294967295
   248d0:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   248d4:	f1b8 0f00 	cmp.w	r8, #0
   248d8:	d02c      	beq.n	24934 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   248da:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   248de:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   248e2:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   248e4:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   248e6:	d20a      	bcs.n	248fe <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   248e8:	462b      	mov	r3, r5
   248ea:	4632      	mov	r2, r6
   248ec:	4629      	mov	r1, r5
   248ee:	f7ff fe50 	bl	24592 <_copy>
			s->leftover_offset += data_length;
   248f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   248f4:	442b      	add	r3, r5
   248f6:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   248f8:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   248fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   248fe:	463b      	mov	r3, r7
   24900:	4632      	mov	r2, r6
   24902:	4639      	mov	r1, r7
   24904:	f7ff fe45 	bl	24592 <_copy>
		data_length -= remaining_space;
   24908:	3d10      	subs	r5, #16
		s->leftover_offset = 0;
   2490a:	2300      	movs	r3, #0
   2490c:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   2490e:	4445      	add	r5, r8
		data += remaining_space;
   24910:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24912:	1e63      	subs	r3, r4, #1
   24914:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   24918:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2491c:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24920:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   24922:	ea82 0200 	eor.w	r2, r2, r0
   24926:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24928:	d1f6      	bne.n	24918 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2492a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2492c:	4621      	mov	r1, r4
   2492e:	4620      	mov	r0, r4
   24930:	f7ff ff06 	bl	24740 <tc_aes_encrypt>
   24934:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   24938:	2d10      	cmp	r5, #16
   2493a:	d80a      	bhi.n	24952 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   2493c:	2d00      	cmp	r5, #0
   2493e:	d0db      	beq.n	248f8 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   24940:	462b      	mov	r3, r5
   24942:	4632      	mov	r2, r6
   24944:	4629      	mov	r1, r5
   24946:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2494a:	f7ff fe22 	bl	24592 <_copy>
		s->leftover_offset = data_length;
   2494e:	6465      	str	r5, [r4, #68]	; 0x44
   24950:	e7d2      	b.n	248f8 <tc_cmac_update+0x50>
   24952:	1e63      	subs	r3, r4, #1
   24954:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   24956:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2495a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2495e:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   24960:	ea82 0200 	eor.w	r2, r2, r0
   24964:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24966:	d1f6      	bne.n	24956 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   24968:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2496a:	4621      	mov	r1, r4
   2496c:	4620      	mov	r0, r4
   2496e:	f7ff fee7 	bl	24740 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   24972:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   24974:	3d10      	subs	r5, #16
   24976:	e7df      	b.n	24938 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   24978:	2000      	movs	r0, #0
   2497a:	e7be      	b.n	248fa <tc_cmac_update+0x52>

0002497c <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   2497c:	b570      	push	{r4, r5, r6, lr}
   2497e:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   24980:	4605      	mov	r5, r0
   24982:	b1e8      	cbz	r0, 249c0 <tc_cmac_final+0x44>
   24984:	b369      	cbz	r1, 249e2 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   24986:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   24988:	2a10      	cmp	r2, #16
   2498a:	d11a      	bne.n	249c2 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2498c:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2498e:	1e63      	subs	r3, r4, #1
   24990:	3901      	subs	r1, #1
   24992:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   24996:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2499a:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   2499e:	4072      	eors	r2, r6
   249a0:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   249a4:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   249a6:	ea82 0206 	eor.w	r2, r2, r6
   249aa:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   249ac:	d1f3      	bne.n	24996 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   249ae:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   249b0:	4621      	mov	r1, r4
   249b2:	4628      	mov	r0, r5
   249b4:	f7ff fec4 	bl	24740 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   249b8:	4620      	mov	r0, r4
   249ba:	f7ff ff2c 	bl	24816 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   249be:	2001      	movs	r0, #1
}
   249c0:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   249c2:	f102 0030 	add.w	r0, r2, #48	; 0x30
   249c6:	2100      	movs	r1, #0
   249c8:	f1c2 0210 	rsb	r2, r2, #16
   249cc:	4420      	add	r0, r4
   249ce:	f7ff fded 	bl	245ac <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   249d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   249d4:	4423      	add	r3, r4
   249d6:	2280      	movs	r2, #128	; 0x80
   249d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   249dc:	f104 0120 	add.w	r1, r4, #32
   249e0:	e7d5      	b.n	2498e <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   249e2:	4608      	mov	r0, r1
   249e4:	e7ec      	b.n	249c0 <tc_cmac_final+0x44>

000249e6 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   249e6:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   249e8:	6800      	ldr	r0, [r0, #0]
   249ea:	f7ef bf77 	b.w	148dc <z_arm_fatal_error>

000249ee <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   249ee:	2100      	movs	r1, #0
   249f0:	2001      	movs	r0, #1
   249f2:	f7ef bf73 	b.w	148dc <z_arm_fatal_error>

000249f6 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   249f6:	b508      	push	{r3, lr}
	handler();
   249f8:	f7f0 f886 	bl	14b08 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   249fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   24a00:	f7f0 b9e2 	b.w	14dc8 <z_arm_exc_exit>

00024a04 <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
   24a04:	2300      	movs	r3, #0
   24a06:	f7ef bac1 	b.w	13f8c <z_impl_z_log_msg_static_create>

00024a0a <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   24a0a:	3901      	subs	r1, #1
   24a0c:	4603      	mov	r3, r0
   24a0e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   24a12:	b90a      	cbnz	r2, 24a18 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   24a14:	701a      	strb	r2, [r3, #0]

	return dest;
}
   24a16:	4770      	bx	lr
		*d = *s;
   24a18:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   24a1c:	e7f7      	b.n	24a0e <strcpy+0x4>

00024a1e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   24a1e:	4603      	mov	r3, r0
	size_t n = 0;
   24a20:	2000      	movs	r0, #0

	while (*s != '\0') {
   24a22:	5c1a      	ldrb	r2, [r3, r0]
   24a24:	b902      	cbnz	r2, 24a28 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   24a26:	4770      	bx	lr
		n++;
   24a28:	3001      	adds	r0, #1
   24a2a:	e7fa      	b.n	24a22 <strlen+0x4>

00024a2c <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   24a2c:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   24a2e:	b15a      	cbz	r2, 24a48 <memcmp+0x1c>
   24a30:	3901      	subs	r1, #1
   24a32:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   24a34:	f810 2b01 	ldrb.w	r2, [r0], #1
   24a38:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   24a3c:	42a0      	cmp	r0, r4
   24a3e:	d001      	beq.n	24a44 <memcmp+0x18>
   24a40:	429a      	cmp	r2, r3
   24a42:	d0f7      	beq.n	24a34 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   24a44:	1ad0      	subs	r0, r2, r3
}
   24a46:	bd10      	pop	{r4, pc}
		return 0;
   24a48:	4610      	mov	r0, r2
   24a4a:	e7fc      	b.n	24a46 <memcmp+0x1a>

00024a4c <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   24a4c:	b510      	push	{r4, lr}
   24a4e:	1e43      	subs	r3, r0, #1
   24a50:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   24a52:	4291      	cmp	r1, r2
   24a54:	d100      	bne.n	24a58 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   24a56:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   24a58:	f811 4b01 	ldrb.w	r4, [r1], #1
   24a5c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   24a60:	e7f7      	b.n	24a52 <memcpy+0x6>

00024a62 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   24a62:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   24a64:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   24a66:	4603      	mov	r3, r0
	while (n > 0) {
   24a68:	4293      	cmp	r3, r2
   24a6a:	d100      	bne.n	24a6e <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   24a6c:	4770      	bx	lr
		*(d_byte++) = c_byte;
   24a6e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   24a72:	e7f9      	b.n	24a68 <memset+0x6>

00024a74 <_stdout_hook_default>:
}
   24a74:	f04f 30ff 	mov.w	r0, #4294967295
   24a78:	4770      	bx	lr

00024a7a <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   24a7a:	684b      	ldr	r3, [r1, #4]
   24a7c:	2b01      	cmp	r3, #1
   24a7e:	dd07      	ble.n	24a90 <sprintf_out+0x16>
		*(p->ptr) = c;
   24a80:	680b      	ldr	r3, [r1, #0]
   24a82:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   24a84:	680b      	ldr	r3, [r1, #0]
   24a86:	3301      	adds	r3, #1
   24a88:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   24a8a:	684b      	ldr	r3, [r1, #4]
   24a8c:	3b01      	subs	r3, #1
   24a8e:	604b      	str	r3, [r1, #4]
}
   24a90:	2000      	movs	r0, #0
   24a92:	4770      	bx	lr

00024a94 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   24a94:	4603      	mov	r3, r0
	size_t n = 0;
   24a96:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   24a98:	5c1a      	ldrb	r2, [r3, r0]
   24a9a:	b10a      	cbz	r2, 24aa0 <strnlen+0xc>
   24a9c:	4288      	cmp	r0, r1
   24a9e:	d100      	bne.n	24aa2 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   24aa0:	4770      	bx	lr
		n++;
   24aa2:	3001      	adds	r0, #1
   24aa4:	e7f8      	b.n	24a98 <strnlen+0x4>

00024aa6 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   24aa6:	b510      	push	{r4, lr}
   24aa8:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   24aaa:	7801      	ldrb	r1, [r0, #0]
   24aac:	7822      	ldrb	r2, [r4, #0]
   24aae:	428a      	cmp	r2, r1
{
   24ab0:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   24ab2:	d00f      	beq.n	24ad4 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   24ab4:	4669      	mov	r1, sp
   24ab6:	f7f0 ffaf 	bl	15a18 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   24aba:	a905      	add	r1, sp, #20
   24abc:	4620      	mov	r0, r4
   24abe:	f7f0 ffab 	bl	15a18 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   24ac2:	2210      	movs	r2, #16
   24ac4:	f10d 0115 	add.w	r1, sp, #21
   24ac8:	f10d 0001 	add.w	r0, sp, #1
   24acc:	f7ff ffae 	bl	24a2c <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   24ad0:	b00a      	add	sp, #40	; 0x28
   24ad2:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   24ad4:	2a01      	cmp	r2, #1
   24ad6:	d006      	beq.n	24ae6 <bt_uuid_cmp+0x40>
   24ad8:	2a02      	cmp	r2, #2
   24ada:	d007      	beq.n	24aec <bt_uuid_cmp+0x46>
   24adc:	b972      	cbnz	r2, 24afc <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   24ade:	8840      	ldrh	r0, [r0, #2]
   24ae0:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   24ae2:	1ac0      	subs	r0, r0, r3
   24ae4:	e7f4      	b.n	24ad0 <bt_uuid_cmp+0x2a>
   24ae6:	6840      	ldr	r0, [r0, #4]
   24ae8:	6863      	ldr	r3, [r4, #4]
   24aea:	e7fa      	b.n	24ae2 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   24aec:	2210      	movs	r2, #16
   24aee:	1c61      	adds	r1, r4, #1
   24af0:	3001      	adds	r0, #1
}
   24af2:	b00a      	add	sp, #40	; 0x28
   24af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   24af8:	f7ff bf98 	b.w	24a2c <memcmp>
	switch (u1->type) {
   24afc:	f06f 0015 	mvn.w	r0, #21
   24b00:	e7e6      	b.n	24ad0 <bt_uuid_cmp+0x2a>

00024b02 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   24b02:	2a04      	cmp	r2, #4
{
   24b04:	b510      	push	{r4, lr}
	switch (data_len) {
   24b06:	d00a      	beq.n	24b1e <bt_uuid_create+0x1c>
   24b08:	2a10      	cmp	r2, #16
   24b0a:	d00d      	beq.n	24b28 <bt_uuid_create+0x26>
   24b0c:	2a02      	cmp	r2, #2
   24b0e:	f04f 0300 	mov.w	r3, #0
   24b12:	d10f      	bne.n	24b34 <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   24b14:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   24b16:	880b      	ldrh	r3, [r1, #0]
   24b18:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   24b1a:	2001      	movs	r0, #1
}
   24b1c:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   24b1e:	2301      	movs	r3, #1
   24b20:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   24b22:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   24b24:	6043      	str	r3, [r0, #4]
		break;
   24b26:	e7f8      	b.n	24b1a <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   24b28:	2302      	movs	r3, #2
   24b2a:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   24b2e:	f7ff ff8d 	bl	24a4c <memcpy>
		break;
   24b32:	e7f2      	b.n	24b1a <bt_uuid_create+0x18>
	switch (data_len) {
   24b34:	4618      	mov	r0, r3
   24b36:	e7f1      	b.n	24b1c <bt_uuid_create+0x1a>

00024b38 <bt_addr_le_create_static>:

#define ADDR_RESOLVED_BITMASK (0x02)

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   24b38:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   24b3a:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   24b3c:	2106      	movs	r1, #6
{
   24b3e:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   24b40:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   24b44:	f7f9 fdb4 	bl	1e6b0 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   24b48:	b918      	cbnz	r0, 24b52 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   24b4a:	79a3      	ldrb	r3, [r4, #6]
   24b4c:	f063 033f 	orn	r3, r3, #63	; 0x3f
   24b50:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   24b52:	bd10      	pop	{r4, pc}

00024b54 <bt_addr_le_copy_resolved>:

	return 0;
}

void bt_addr_le_copy_resolved(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
   24b54:	b510      	push	{r4, lr}
   24b56:	4604      	mov	r4, r0
   24b58:	2207      	movs	r2, #7
   24b5a:	f7ff ff77 	bl	24a4c <memcpy>
	bt_addr_le_copy(dst, src);
	/* translate to "regular" address type */
	dst->type &= ~ADDR_RESOLVED_BITMASK;
   24b5e:	7823      	ldrb	r3, [r4, #0]
   24b60:	f023 0302 	bic.w	r3, r3, #2
   24b64:	7023      	strb	r3, [r4, #0]
}
   24b66:	bd10      	pop	{r4, pc}

00024b68 <bt_addr_le_is_resolved>:

bool bt_addr_le_is_resolved(const bt_addr_le_t *addr)
{
	return (addr->type & ADDR_RESOLVED_BITMASK) != 0;
   24b68:	7800      	ldrb	r0, [r0, #0]
}
   24b6a:	f3c0 0040 	ubfx	r0, r0, #1, #1
   24b6e:	4770      	bx	lr

00024b70 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   24b70:	280f      	cmp	r0, #15
   24b72:	d807      	bhi.n	24b84 <bt_hci_evt_get_flags+0x14>
   24b74:	280d      	cmp	r0, #13
   24b76:	d80b      	bhi.n	24b90 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   24b78:	2805      	cmp	r0, #5
   24b7a:	bf08      	it	eq
   24b7c:	2003      	moveq	r0, #3
   24b7e:	bf18      	it	ne
   24b80:	2002      	movne	r0, #2
   24b82:	4770      	bx	lr
	switch (evt) {
   24b84:	2813      	cmp	r0, #19
   24b86:	d003      	beq.n	24b90 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   24b88:	281a      	cmp	r0, #26
   24b8a:	bf08      	it	eq
   24b8c:	2001      	moveq	r0, #1
   24b8e:	e7f6      	b.n	24b7e <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   24b90:	2001      	movs	r0, #1
	}
}
   24b92:	4770      	bx	lr

00024b94 <hci_vendor_event>:
}
   24b94:	4770      	bx	lr

00024b96 <atomic_or>:
{
   24b96:	b510      	push	{r4, lr}
   24b98:	4603      	mov	r3, r0
}
   24b9a:	f3bf 8f5b 	dmb	ish
   24b9e:	e853 0f00 	ldrex	r0, [r3]
   24ba2:	ea40 0201 	orr.w	r2, r0, r1
   24ba6:	e843 2400 	strex	r4, r2, [r3]
   24baa:	2c00      	cmp	r4, #0
   24bac:	d1f7      	bne.n	24b9e <atomic_or+0x8>
   24bae:	f3bf 8f5b 	dmb	ish
   24bb2:	bd10      	pop	{r4, pc}

00024bb4 <z_log_msg_static_create.constprop.0>:
   24bb4:	2300      	movs	r3, #0
   24bb6:	f7ef b9e9 	b.w	13f8c <z_impl_z_log_msg_static_create>

00024bba <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   24bba:	f3bf 8f5b 	dmb	ish
   24bbe:	e850 3f00 	ldrex	r3, [r0]
   24bc2:	400b      	ands	r3, r1
   24bc4:	e840 3200 	strex	r2, r3, [r0]
   24bc8:	2a00      	cmp	r2, #0
   24bca:	d1f8      	bne.n	24bbe <atomic_and.isra.0+0x4>
   24bcc:	f3bf 8f5b 	dmb	ish
}
   24bd0:	4770      	bx	lr

00024bd2 <bt_hci_disconnect>:
{
   24bd2:	b570      	push	{r4, r5, r6, lr}
   24bd4:	4606      	mov	r6, r0
   24bd6:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   24bd8:	f240 4006 	movw	r0, #1030	; 0x406
   24bdc:	2103      	movs	r1, #3
   24bde:	f7f1 fc3f 	bl	16460 <bt_hci_cmd_create>
	if (!buf) {
   24be2:	4604      	mov	r4, r0
   24be4:	b168      	cbz	r0, 24c02 <bt_hci_disconnect+0x30>
   24be6:	2103      	movs	r1, #3
   24be8:	300c      	adds	r0, #12
   24bea:	f7f7 f94d 	bl	1be88 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   24bee:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   24bf0:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   24bf2:	4621      	mov	r1, r4
   24bf4:	2200      	movs	r2, #0
}
   24bf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   24bfa:	f240 4006 	movw	r0, #1030	; 0x406
   24bfe:	f7f1 bc7d 	b.w	164fc <bt_hci_cmd_send_sync>
}
   24c02:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24c06:	bd70      	pop	{r4, r5, r6, pc}

00024c08 <bt_le_set_data_len>:
{
   24c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24c0a:	4607      	mov	r7, r0
   24c0c:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   24c0e:	f242 0022 	movw	r0, #8226	; 0x2022
   24c12:	2106      	movs	r1, #6
{
   24c14:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   24c16:	f7f1 fc23 	bl	16460 <bt_hci_cmd_create>
	if (!buf) {
   24c1a:	4604      	mov	r4, r0
   24c1c:	b178      	cbz	r0, 24c3e <bt_le_set_data_len+0x36>
   24c1e:	2106      	movs	r1, #6
   24c20:	300c      	adds	r0, #12
   24c22:	f7f7 f931 	bl	1be88 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   24c26:	883b      	ldrh	r3, [r7, #0]
   24c28:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   24c2a:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   24c2c:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   24c2e:	4621      	mov	r1, r4
   24c30:	2200      	movs	r2, #0
}
   24c32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   24c36:	f242 0022 	movw	r0, #8226	; 0x2022
   24c3a:	f7f1 bc5f 	b.w	164fc <bt_hci_cmd_send_sync>
}
   24c3e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024c44 <bt_le_set_phy>:
{
   24c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24c48:	4681      	mov	r9, r0
   24c4a:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   24c4c:	f242 0032 	movw	r0, #8242	; 0x2032
   24c50:	2107      	movs	r1, #7
{
   24c52:	f89d a020 	ldrb.w	sl, [sp, #32]
   24c56:	4617      	mov	r7, r2
   24c58:	461e      	mov	r6, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   24c5a:	f7f1 fc01 	bl	16460 <bt_hci_cmd_create>
	if (!buf) {
   24c5e:	4605      	mov	r5, r0
   24c60:	b1a0      	cbz	r0, 24c8c <bt_le_set_phy+0x48>
   24c62:	2107      	movs	r1, #7
   24c64:	300c      	adds	r0, #12
   24c66:	f7f7 f90f 	bl	1be88 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   24c6a:	f8b9 3000 	ldrh.w	r3, [r9]
   24c6e:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   24c70:	f880 8002 	strb.w	r8, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   24c74:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   24c76:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   24c78:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   24c7c:	4629      	mov	r1, r5
   24c7e:	2200      	movs	r2, #0
}
   24c80:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   24c84:	f242 0032 	movw	r0, #8242	; 0x2032
   24c88:	f7f1 bc38 	b.w	164fc <bt_hci_cmd_send_sync>
}
   24c8c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00024c94 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   24c94:	68c0      	ldr	r0, [r0, #12]
   24c96:	f7f1 bd07 	b.w	166a8 <bt_hci_le_enh_conn_complete>

00024c9a <bt_le_conn_params_valid>:
{
   24c9a:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   24c9c:	8803      	ldrh	r3, [r0, #0]
   24c9e:	8842      	ldrh	r2, [r0, #2]
   24ca0:	4293      	cmp	r3, r2
   24ca2:	d819      	bhi.n	24cd8 <bt_le_conn_params_valid+0x3e>
   24ca4:	2b05      	cmp	r3, #5
   24ca6:	d917      	bls.n	24cd8 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   24ca8:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   24cac:	d814      	bhi.n	24cd8 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   24cae:	8883      	ldrh	r3, [r0, #4]
   24cb0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   24cb4:	d210      	bcs.n	24cd8 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   24cb6:	88c0      	ldrh	r0, [r0, #6]
   24cb8:	f1a0 010a 	sub.w	r1, r0, #10
   24cbc:	b289      	uxth	r1, r1
   24cbe:	f640 4476 	movw	r4, #3190	; 0xc76
   24cc2:	42a1      	cmp	r1, r4
   24cc4:	d808      	bhi.n	24cd8 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   24cc6:	3301      	adds	r3, #1
   24cc8:	b29b      	uxth	r3, r3
   24cca:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   24ccc:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   24cd0:	bf34      	ite	cc
   24cd2:	2001      	movcc	r0, #1
   24cd4:	2000      	movcs	r0, #0
}
   24cd6:	bd10      	pop	{r4, pc}
		return false;
   24cd8:	2000      	movs	r0, #0
   24cda:	e7fc      	b.n	24cd6 <bt_le_conn_params_valid+0x3c>

00024cdc <le_conn_param_neg_reply>:
{
   24cdc:	b570      	push	{r4, r5, r6, lr}
   24cde:	4606      	mov	r6, r0
   24ce0:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   24ce2:	f242 0021 	movw	r0, #8225	; 0x2021
   24ce6:	2103      	movs	r1, #3
   24ce8:	f7f1 fbba 	bl	16460 <bt_hci_cmd_create>
	if (!buf) {
   24cec:	4604      	mov	r4, r0
   24cee:	b918      	cbnz	r0, 24cf8 <le_conn_param_neg_reply+0x1c>
}
   24cf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   24cf4:	f7f0 bfa8 	b.w	15c48 <le_conn_param_neg_reply.part.0>
   24cf8:	2103      	movs	r1, #3
   24cfa:	300c      	adds	r0, #12
   24cfc:	f7f7 f8c4 	bl	1be88 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
   24d00:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   24d02:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   24d04:	4621      	mov	r1, r4
   24d06:	f242 0021 	movw	r0, #8225	; 0x2021
}
   24d0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   24d0e:	f7f1 be7d 	b.w	16a0c <bt_hci_cmd_send>

00024d12 <bt_get_appearance>:
#if defined(CONFIG_BT_DEVICE_APPEARANCE_DYNAMIC)
	return bt_dev.appearance;
#else
	return CONFIG_BT_DEVICE_APPEARANCE;
#endif
}
   24d12:	f240 3041 	movw	r0, #833	; 0x341
   24d16:	4770      	bx	lr

00024d18 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   24d18:	2000      	movs	r0, #0
   24d1a:	4770      	bx	lr

00024d1c <bt_addr_le_eq>:
{
   24d1c:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   24d1e:	2207      	movs	r2, #7
   24d20:	f7ff fe84 	bl	24a2c <memcmp>
}
   24d24:	fab0 f080 	clz	r0, r0
   24d28:	0940      	lsrs	r0, r0, #5
   24d2a:	bd08      	pop	{r3, pc}

00024d2c <z_log_msg_static_create.constprop.0>:
   24d2c:	2300      	movs	r3, #0
   24d2e:	f7ef b92d 	b.w	13f8c <z_impl_z_log_msg_static_create>

00024d32 <bt_lookup_id_addr>:
	return addr;
   24d32:	2800      	cmp	r0, #0
}
   24d34:	bf0c      	ite	eq
   24d36:	4608      	moveq	r0, r1
   24d38:	2000      	movne	r0, #0
   24d3a:	4770      	bx	lr

00024d3c <bt_id_set_adv_random_addr>:
	CHECKIF(adv == NULL || addr == NULL) {
   24d3c:	b118      	cbz	r0, 24d46 <bt_id_set_adv_random_addr+0xa>
   24d3e:	b111      	cbz	r1, 24d46 <bt_id_set_adv_random_addr+0xa>
		return set_random_address(addr);
   24d40:	4608      	mov	r0, r1
   24d42:	f7f2 bc57 	b.w	175f4 <set_random_address>
}
   24d46:	f06f 0015 	mvn.w	r0, #21
   24d4a:	4770      	bx	lr

00024d4c <bt_id_set_adv_private_addr>:
{
   24d4c:	b513      	push	{r0, r1, r4, lr}
	CHECKIF(adv == NULL) {
   24d4e:	4604      	mov	r4, r0
   24d50:	b180      	cbz	r0, 24d74 <bt_id_set_adv_private_addr+0x28>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   24d52:	2106      	movs	r1, #6
   24d54:	4668      	mov	r0, sp
   24d56:	f7f9 fcab 	bl	1e6b0 <bt_rand>
	if (err) {
   24d5a:	b948      	cbnz	r0, 24d70 <bt_id_set_adv_private_addr+0x24>
	BT_ADDR_SET_NRPA(&nrpa);
   24d5c:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   24d60:	4669      	mov	r1, sp
	BT_ADDR_SET_NRPA(&nrpa);
   24d62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   24d66:	4620      	mov	r0, r4
	BT_ADDR_SET_NRPA(&nrpa);
   24d68:	f88d 3005 	strb.w	r3, [sp, #5]
	err = bt_id_set_adv_random_addr(adv, &nrpa);
   24d6c:	f7ff ffe6 	bl	24d3c <bt_id_set_adv_random_addr>
}
   24d70:	b002      	add	sp, #8
   24d72:	bd10      	pop	{r4, pc}
		return -EINVAL;
   24d74:	f06f 0015 	mvn.w	r0, #21
   24d78:	e7fa      	b.n	24d70 <bt_id_set_adv_private_addr+0x24>

00024d7a <bt_id_adv_random_addr_check>:
}
   24d7a:	3800      	subs	r0, #0
   24d7c:	bf18      	it	ne
   24d7e:	2001      	movne	r0, #1
   24d80:	4770      	bx	lr

00024d82 <get_adv_channel_map>:
{
   24d82:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   24d84:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   24d88:	bf0c      	ite	eq
   24d8a:	2007      	moveq	r0, #7
   24d8c:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   24d8e:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   24d90:	bf48      	it	mi
   24d92:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   24d96:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   24d98:	bf48      	it	mi
   24d9a:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   24d9e:	4770      	bx	lr

00024da0 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24da0:	f3bf 8f5b 	dmb	ish
   24da4:	6800      	ldr	r0, [r0, #0]
   24da6:	f3bf 8f5b 	dmb	ish
}
   24daa:	4770      	bx	lr

00024dac <atomic_and>:
{
   24dac:	b510      	push	{r4, lr}
   24dae:	4603      	mov	r3, r0
}
   24db0:	f3bf 8f5b 	dmb	ish
   24db4:	e853 0f00 	ldrex	r0, [r3]
   24db8:	ea00 0201 	and.w	r2, r0, r1
   24dbc:	e843 2400 	strex	r4, r2, [r3]
   24dc0:	2c00      	cmp	r4, #0
   24dc2:	d1f7      	bne.n	24db4 <atomic_and+0x8>
   24dc4:	f3bf 8f5b 	dmb	ish
   24dc8:	bd10      	pop	{r4, pc}

00024dca <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   24dca:	2301      	movs	r3, #1
{
   24dcc:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   24dce:	fa03 f101 	lsl.w	r1, r3, r1
{
   24dd2:	4604      	mov	r4, r0
	if (val) {
   24dd4:	b16a      	cbz	r2, 24df2 <atomic_set_bit_to+0x28>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   24dd6:	f3bf 8f5b 	dmb	ish
   24dda:	e854 3f00 	ldrex	r3, [r4]
   24dde:	430b      	orrs	r3, r1
   24de0:	e844 3200 	strex	r2, r3, [r4]
   24de4:	2a00      	cmp	r2, #0
   24de6:	d1f8      	bne.n	24dda <atomic_set_bit_to+0x10>
   24de8:	f3bf 8f5b 	dmb	ish
	}
}
   24dec:	f85d 4b04 	ldr.w	r4, [sp], #4
   24df0:	4770      	bx	lr
   24df2:	f85d 4b04 	ldr.w	r4, [sp], #4
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   24df6:	43c9      	mvns	r1, r1
   24df8:	f7ff bfd8 	b.w	24dac <atomic_and>

00024dfc <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   24dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24e00:	b087      	sub	sp, #28
   24e02:	4605      	mov	r5, r0
   24e04:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   24e08:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   24e0c:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   24e10:	460c      	mov	r4, r1
   24e12:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   24e14:	2100      	movs	r1, #0
   24e16:	2210      	movs	r2, #16
   24e18:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   24e1a:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   24e1c:	f7ff fe21 	bl	24a62 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   24e20:	b9ee      	cbnz	r6, 24e5e <le_adv_update.constprop.0+0x62>
		d[0].len = ad_len;
   24e22:	e9cd 4802 	strd	r4, r8, [sp, #8]
		d_len = 1;
   24e26:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   24e28:	a902      	add	r1, sp, #8
   24e2a:	f242 0008 	movw	r0, #8200	; 0x2008
   24e2e:	f7f2 fdf5 	bl	17a1c <hci_set_ad>
		if (err) {
   24e32:	4604      	mov	r4, r0
   24e34:	b978      	cbnz	r0, 24e56 <le_adv_update.constprop.0+0x5a>
	if (scannable) {
   24e36:	f1ba 0f00 	cmp.w	sl, #0
   24e3a:	d13e      	bne.n	24eba <le_adv_update.constprop.0+0xbe>
   24e3c:	3510      	adds	r5, #16
   24e3e:	f3bf 8f5b 	dmb	ish
   24e42:	e855 3f00 	ldrex	r3, [r5]
   24e46:	f043 0304 	orr.w	r3, r3, #4
   24e4a:	e845 3200 	strex	r2, r3, [r5]
   24e4e:	2a00      	cmp	r2, #0
   24e50:	d1f7      	bne.n	24e42 <le_adv_update.constprop.0+0x46>
   24e52:	f3bf 8f5b 	dmb	ish
}
   24e56:	4620      	mov	r0, r4
   24e58:	b007      	add	sp, #28
   24e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const char *name = bt_get_name();
   24e5e:	f7f2 fbad 	bl	175bc <bt_get_name>
   24e62:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   24e64:	b9e4      	cbnz	r4, 24ea0 <le_adv_update.constprop.0+0xa4>
   24e66:	bb37      	cbnz	r7, 24eb6 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   24e68:	4658      	mov	r0, fp
   24e6a:	f7ff fdd8 	bl	24a1e <strlen>
   24e6e:	2309      	movs	r3, #9
		if (name_type == ADV_NAME_TYPE_AD) {
   24e70:	2e01      	cmp	r6, #1
		d[0].data = ad;
   24e72:	e9cd b401 	strd	fp, r4, [sp, #4]
		data = (struct bt_data)BT_DATA(
   24e76:	f88d 3000 	strb.w	r3, [sp]
   24e7a:	f88d 0001 	strb.w	r0, [sp, #1]
		d[0].len = ad_len;
   24e7e:	f8cd 800c 	str.w	r8, [sp, #12]
		if (name_type == ADV_NAME_TYPE_AD) {
   24e82:	d1d0      	bne.n	24e26 <le_adv_update.constprop.0+0x2a>
			d[1].data = &data;
   24e84:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   24e88:	9605      	str	r6, [sp, #20]
			d_len = 2;
   24e8a:	2202      	movs	r2, #2
   24e8c:	e7cc      	b.n	24e28 <le_adv_update.constprop.0+0x2c>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   24e8e:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   24e92:	3a08      	subs	r2, #8
   24e94:	2a01      	cmp	r2, #1
   24e96:	d925      	bls.n	24ee4 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   24e98:	3301      	adds	r3, #1
   24e9a:	4598      	cmp	r8, r3
   24e9c:	d1f7      	bne.n	24e8e <le_adv_update.constprop.0+0x92>
   24e9e:	e7e2      	b.n	24e66 <le_adv_update.constprop.0+0x6a>
   24ea0:	2300      	movs	r3, #0
   24ea2:	e7fa      	b.n	24e9a <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   24ea4:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   24ea8:	3a08      	subs	r2, #8
   24eaa:	2a01      	cmp	r2, #1
   24eac:	d91a      	bls.n	24ee4 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   24eae:	3301      	adds	r3, #1
   24eb0:	4599      	cmp	r9, r3
   24eb2:	d1f7      	bne.n	24ea4 <le_adv_update.constprop.0+0xa8>
   24eb4:	e7d8      	b.n	24e68 <le_adv_update.constprop.0+0x6c>
   24eb6:	2300      	movs	r3, #0
   24eb8:	e7fa      	b.n	24eb0 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   24eba:	2e02      	cmp	r6, #2
   24ebc:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   24ec0:	bf08      	it	eq
   24ec2:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   24ec4:	a902      	add	r1, sp, #8
			d_len = 2;
   24ec6:	bf08      	it	eq
   24ec8:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   24eca:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   24ece:	bf08      	it	eq
   24ed0:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   24ed4:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   24ed8:	f7f2 fda0 	bl	17a1c <hci_set_ad>
		if (err) {
   24edc:	2800      	cmp	r0, #0
   24ede:	d0ad      	beq.n	24e3c <le_adv_update.constprop.0+0x40>
   24ee0:	4604      	mov	r4, r0
   24ee2:	e7b8      	b.n	24e56 <le_adv_update.constprop.0+0x5a>
			return -EINVAL;
   24ee4:	f06f 0415 	mvn.w	r4, #21
   24ee8:	e7b5      	b.n	24e56 <le_adv_update.constprop.0+0x5a>

00024eea <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   24eea:	6843      	ldr	r3, [r0, #4]
   24eec:	f013 0008 	ands.w	r0, r3, #8
   24ef0:	d00a      	beq.n	24f08 <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   24ef2:	035a      	lsls	r2, r3, #13
   24ef4:	d407      	bmi.n	24f06 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   24ef6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
			return ADV_NAME_TYPE_AD;
   24efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   24efe:	bf14      	ite	ne
   24f00:	2002      	movne	r0, #2
   24f02:	2001      	moveq	r0, #1
   24f04:	4770      	bx	lr
   24f06:	2001      	movs	r0, #1
}
   24f08:	4770      	bx	lr

00024f0a <bt_le_adv_set_enable_legacy>:
{
   24f0a:	b570      	push	{r4, r5, r6, lr}
   24f0c:	4606      	mov	r6, r0
   24f0e:	b086      	sub	sp, #24
   24f10:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   24f12:	f242 000a 	movw	r0, #8202	; 0x200a
   24f16:	2101      	movs	r1, #1
   24f18:	f7f1 faa2 	bl	16460 <bt_hci_cmd_create>
	if (!buf) {
   24f1c:	4604      	mov	r4, r0
   24f1e:	b1b0      	cbz	r0, 24f4e <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   24f20:	300c      	adds	r0, #12
	if (enable) {
   24f22:	b195      	cbz	r5, 24f4a <bt_le_adv_set_enable_legacy+0x40>
   24f24:	2101      	movs	r1, #1
   24f26:	f000 ffc6 	bl	25eb6 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   24f2a:	f106 0210 	add.w	r2, r6, #16
   24f2e:	a903      	add	r1, sp, #12
   24f30:	4620      	mov	r0, r4
   24f32:	9500      	str	r5, [sp, #0]
   24f34:	2307      	movs	r3, #7
   24f36:	f7f1 fa81 	bl	1643c <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   24f3a:	2200      	movs	r2, #0
   24f3c:	4621      	mov	r1, r4
   24f3e:	f242 000a 	movw	r0, #8202	; 0x200a
   24f42:	f7f1 fadb 	bl	164fc <bt_hci_cmd_send_sync>
}
   24f46:	b006      	add	sp, #24
   24f48:	bd70      	pop	{r4, r5, r6, pc}
   24f4a:	4629      	mov	r1, r5
   24f4c:	e7eb      	b.n	24f26 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   24f4e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24f52:	e7f8      	b.n	24f46 <bt_le_adv_set_enable_legacy+0x3c>

00024f54 <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   24f54:	3018      	adds	r0, #24
   24f56:	f7fc b979 	b.w	2124c <k_work_cancel_delayable>

00024f5a <z_log_msg_static_create.constprop.0>:
   24f5a:	2300      	movs	r3, #0
   24f5c:	f7ef b816 	b.w	13f8c <z_impl_z_log_msg_static_create>

00024f60 <tx_complete_work>:
	tx_notify(conn);
   24f60:	3828      	subs	r0, #40	; 0x28
   24f62:	f7f3 b8c1 	b.w	180e8 <tx_notify>

00024f66 <bt_conn_reset_rx_state>:
{
   24f66:	b510      	push	{r4, lr}
   24f68:	4604      	mov	r4, r0
	if (!conn->rx) {
   24f6a:	6900      	ldr	r0, [r0, #16]
   24f6c:	b118      	cbz	r0, 24f76 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   24f6e:	f7f6 fe47 	bl	1bc00 <net_buf_unref>
	conn->rx = NULL;
   24f72:	2300      	movs	r3, #0
   24f74:	6123      	str	r3, [r4, #16]
}
   24f76:	bd10      	pop	{r4, pc}

00024f78 <conn_lookup_handle>:
{
   24f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24f7c:	4607      	mov	r7, r0
   24f7e:	460e      	mov	r6, r1
   24f80:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   24f82:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   24f84:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   24f88:	42b4      	cmp	r4, r6
   24f8a:	d103      	bne.n	24f94 <conn_lookup_handle+0x1c>
	return NULL;
   24f8c:	2300      	movs	r3, #0
}
   24f8e:	4618      	mov	r0, r3
   24f90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   24f94:	fb09 7004 	mla	r0, r9, r4, r7
   24f98:	f7f3 fbe2 	bl	18760 <bt_conn_ref>
   24f9c:	4603      	mov	r3, r0
		if (!conn) {
   24f9e:	b158      	cbz	r0, 24fb8 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   24fa0:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   24fa2:	2d01      	cmp	r5, #1
   24fa4:	d002      	beq.n	24fac <conn_lookup_handle+0x34>
   24fa6:	3d07      	subs	r5, #7
   24fa8:	2d01      	cmp	r5, #1
   24faa:	d803      	bhi.n	24fb4 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   24fac:	881a      	ldrh	r2, [r3, #0]
   24fae:	4542      	cmp	r2, r8
   24fb0:	d0ed      	beq.n	24f8e <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   24fb2:	4618      	mov	r0, r3
   24fb4:	f7f3 fc04 	bl	187c0 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   24fb8:	3401      	adds	r4, #1
   24fba:	e7e5      	b.n	24f88 <conn_lookup_handle+0x10>

00024fbc <bt_conn_connected>:
{
   24fbc:	b510      	push	{r4, lr}
   24fbe:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   24fc0:	f7f4 f920 	bl	19204 <bt_l2cap_connected>
	notify_connected(conn);
   24fc4:	4620      	mov	r0, r4
}
   24fc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   24fca:	f7f3 b857 	b.w	1807c <notify_connected>

00024fce <bt_conn_get_security>:
}
   24fce:	2001      	movs	r0, #1
   24fd0:	4770      	bx	lr

00024fd2 <bt_conn_is_peer_addr_le>:
{
   24fd2:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   24fd4:	7a03      	ldrb	r3, [r0, #8]
   24fd6:	428b      	cmp	r3, r1
{
   24fd8:	4604      	mov	r4, r0
   24fda:	4615      	mov	r5, r2
	if (id != conn->id) {
   24fdc:	d115      	bne.n	2500a <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   24fde:	f100 0190 	add.w	r1, r0, #144	; 0x90
   24fe2:	2207      	movs	r2, #7
   24fe4:	4628      	mov	r0, r5
   24fe6:	f7ff fd21 	bl	24a2c <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   24fea:	b180      	cbz	r0, 2500e <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   24fec:	78e3      	ldrb	r3, [r4, #3]
   24fee:	2207      	movs	r2, #7
   24ff0:	b943      	cbnz	r3, 25004 <bt_conn_is_peer_addr_le+0x32>
   24ff2:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   24ff6:	4628      	mov	r0, r5
   24ff8:	f7ff fd18 	bl	24a2c <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   24ffc:	fab0 f080 	clz	r0, r0
   25000:	0940      	lsrs	r0, r0, #5
}
   25002:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   25004:	f104 0197 	add.w	r1, r4, #151	; 0x97
   25008:	e7f5      	b.n	24ff6 <bt_conn_is_peer_addr_le+0x24>
		return false;
   2500a:	2000      	movs	r0, #0
   2500c:	e7f9      	b.n	25002 <bt_conn_is_peer_addr_le+0x30>
		return true;
   2500e:	2001      	movs	r0, #1
   25010:	e7f7      	b.n	25002 <bt_conn_is_peer_addr_le+0x30>

00025012 <bt_conn_get_dst>:
}
   25012:	3090      	adds	r0, #144	; 0x90
   25014:	4770      	bx	lr

00025016 <bt_conn_le_conn_update>:
{
   25016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25018:	4607      	mov	r7, r0
   2501a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2501c:	f242 0013 	movw	r0, #8211	; 0x2013
   25020:	210e      	movs	r1, #14
   25022:	f7f1 fa1d 	bl	16460 <bt_hci_cmd_create>
	if (!buf) {
   25026:	4606      	mov	r6, r0
   25028:	b1d0      	cbz	r0, 25060 <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   2502a:	210e      	movs	r1, #14
   2502c:	300c      	adds	r0, #12
   2502e:	f7f6 ff2b 	bl	1be88 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   25032:	220e      	movs	r2, #14
   25034:	4604      	mov	r4, r0
   25036:	2100      	movs	r1, #0
   25038:	f7ff fd13 	bl	24a62 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2503c:	883b      	ldrh	r3, [r7, #0]
   2503e:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   25040:	882b      	ldrh	r3, [r5, #0]
   25042:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   25044:	886b      	ldrh	r3, [r5, #2]
   25046:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   25048:	88ab      	ldrh	r3, [r5, #4]
   2504a:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2504c:	88eb      	ldrh	r3, [r5, #6]
   2504e:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   25050:	4631      	mov	r1, r6
   25052:	2200      	movs	r2, #0
}
   25054:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   25058:	f242 0013 	movw	r0, #8211	; 0x2013
   2505c:	f7f1 ba4e 	b.w	164fc <bt_hci_cmd_send_sync>
}
   25060:	f06f 0068 	mvn.w	r0, #104	; 0x68
   25064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00025066 <l2cap_connected>:
}
   25066:	4770      	bx	lr

00025068 <z_log_msg_static_create.constprop.0>:
   25068:	2300      	movs	r3, #0
   2506a:	f7ee bf8f 	b.w	13f8c <z_impl_z_log_msg_static_create>

0002506e <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   2506e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25070:	4605      	mov	r5, r0
   25072:	460f      	mov	r7, r1
   25074:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   25076:	2300      	movs	r3, #0
   25078:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2507c:	2104      	movs	r1, #4
   2507e:	2000      	movs	r0, #0
   25080:	f7f3 fd06 	bl	18a90 <bt_conn_create_pdu_timeout>
	if (!buf) {
   25084:	4604      	mov	r4, r0
   25086:	b920      	cbnz	r0, 25092 <l2cap_create_le_sig_pdu.constprop.0+0x24>
   25088:	4628      	mov	r0, r5
}
   2508a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2508e:	f7f4 b87d 	b.w	1918c <l2cap_create_le_sig_pdu.part.0>
   25092:	2104      	movs	r1, #4
   25094:	300c      	adds	r0, #12
   25096:	f7f6 fef7 	bl	1be88 <net_buf_simple_add>
	hdr->code = code;
   2509a:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   2509c:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   2509e:	8046      	strh	r6, [r0, #2]
}
   250a0:	4620      	mov	r0, r4
   250a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000250a4 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   250a4:	4770      	bx	lr

000250a6 <bt_l2cap_chan_del>:
{
   250a6:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   250a8:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   250ac:	4604      	mov	r4, r0
	if (!chan->conn) {
   250ae:	b123      	cbz	r3, 250ba <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   250b0:	686b      	ldr	r3, [r5, #4]
   250b2:	b103      	cbz	r3, 250b6 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   250b4:	4798      	blx	r3
	chan->conn = NULL;
   250b6:	2300      	movs	r3, #0
   250b8:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   250ba:	68e3      	ldr	r3, [r4, #12]
   250bc:	b10b      	cbz	r3, 250c2 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   250be:	4620      	mov	r0, r4
   250c0:	4798      	blx	r3
	if (ops->released) {
   250c2:	6a2b      	ldr	r3, [r5, #32]
   250c4:	b11b      	cbz	r3, 250ce <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   250c6:	4620      	mov	r0, r4
}
   250c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   250cc:	4718      	bx	r3
}
   250ce:	bd70      	pop	{r4, r5, r6, pc}

000250d0 <bt_l2cap_disconnected>:
{
   250d0:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   250d2:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   250d4:	b130      	cbz	r0, 250e4 <bt_l2cap_disconnected+0x14>
	return node->next;
   250d6:	f850 4908 	ldr.w	r4, [r0], #-8
   250da:	b104      	cbz	r4, 250de <bt_l2cap_disconnected+0xe>
   250dc:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   250de:	f7ff ffe2 	bl	250a6 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   250e2:	b904      	cbnz	r4, 250e6 <bt_l2cap_disconnected+0x16>
}
   250e4:	bd38      	pop	{r3, r4, r5, pc}
   250e6:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   250e8:	b12d      	cbz	r5, 250f6 <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   250ea:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   250ec:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   250ee:	f7ff ffda 	bl	250a6 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   250f2:	462c      	mov	r4, r5
   250f4:	e7f7      	b.n	250e6 <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   250f6:	4620      	mov	r0, r4
}
   250f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   250fc:	f7ff bfd3 	b.w	250a6 <bt_l2cap_chan_del>

00025100 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   25100:	3104      	adds	r1, #4
   25102:	f7f3 bcc5 	b.w	18a90 <bt_conn_create_pdu_timeout>

00025106 <bt_l2cap_send_cb>:
{
   25106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2510a:	4614      	mov	r4, r2
   2510c:	4605      	mov	r5, r0
   2510e:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   25110:	f102 000c 	add.w	r0, r2, #12
   25114:	2104      	movs	r1, #4
   25116:	461e      	mov	r6, r3
   25118:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2511c:	f7f6 fe58 	bl	1bdd0 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   25120:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   25122:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   25124:	3a04      	subs	r2, #4
   25126:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   25128:	4643      	mov	r3, r8
   2512a:	4632      	mov	r2, r6
   2512c:	4621      	mov	r1, r4
   2512e:	4628      	mov	r0, r5
}
   25130:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   25134:	f7f3 ba46 	b.w	185c4 <bt_conn_send_cb>

00025138 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   25138:	6d40      	ldr	r0, [r0, #84]	; 0x54
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2513a:	b130      	cbz	r0, 2514a <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2513c:	8983      	ldrh	r3, [r0, #12]
   2513e:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   25140:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   25144:	d001      	beq.n	2514a <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   25146:	6880      	ldr	r0, [r0, #8]
   25148:	e7f7      	b.n	2513a <bt_l2cap_le_lookup_rx_cid+0x2>
}
   2514a:	4770      	bx	lr

0002514c <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   2514c:	4770      	bx	lr

0002514e <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2514e:	4603      	mov	r3, r0
	return list->head;
   25150:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   25152:	b128      	cbz	r0, 25160 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   25154:	6859      	ldr	r1, [r3, #4]
	return node->next;
   25156:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   25158:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2515a:	4288      	cmp	r0, r1
	list->tail = node;
   2515c:	bf08      	it	eq
   2515e:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   25160:	4770      	bx	lr

00025162 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   25162:	4603      	mov	r3, r0
	size_t bytes = 0;
   25164:	2000      	movs	r0, #0

	while (buf) {
   25166:	b903      	cbnz	r3, 2516a <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   25168:	4770      	bx	lr
		bytes += buf->len;
   2516a:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   2516c:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   2516e:	4410      	add	r0, r2
		buf = buf->frags;
   25170:	e7f9      	b.n	25166 <net_buf_frags_len+0x4>

00025172 <attr_read_type_cb>:
{
   25172:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   25174:	68d4      	ldr	r4, [r2, #12]
   25176:	7823      	ldrb	r3, [r4, #0]
   25178:	3102      	adds	r1, #2
   2517a:	b913      	cbnz	r3, 25182 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   2517c:	7021      	strb	r1, [r4, #0]
	return true;
   2517e:	2001      	movs	r0, #1
}
   25180:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   25182:	428b      	cmp	r3, r1
   25184:	d0fb      	beq.n	2517e <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   25186:	8a03      	ldrh	r3, [r0, #16]
   25188:	3b02      	subs	r3, #2
   2518a:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   2518c:	2000      	movs	r0, #0
   2518e:	6110      	str	r0, [r2, #16]
		return false;
   25190:	e7f6      	b.n	25180 <attr_read_type_cb+0xe>

00025192 <att_prepare_write_req>:
}
   25192:	2006      	movs	r0, #6
   25194:	4770      	bx	lr

00025196 <write_cb>:
{
   25196:	b573      	push	{r0, r1, r4, r5, r6, lr}
   25198:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2519a:	4601      	mov	r1, r0
{
   2519c:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   2519e:	f44f 7295 	mov.w	r2, #298	; 0x12a
   251a2:	6820      	ldr	r0, [r4, #0]
   251a4:	f000 fdd3 	bl	25d4e <bt_gatt_check_perm>
   251a8:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   251aa:	bb00      	cbnz	r0, 251ee <write_cb+0x58>
	if (!data->req) {
   251ac:	7a23      	ldrb	r3, [r4, #8]
   251ae:	b1b3      	cbz	r3, 251de <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   251b0:	f1a3 0218 	sub.w	r2, r3, #24
   251b4:	4253      	negs	r3, r2
   251b6:	4153      	adcs	r3, r2
   251b8:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   251ba:	9301      	str	r3, [sp, #4]
   251bc:	8a63      	ldrh	r3, [r4, #18]
   251be:	9300      	str	r3, [sp, #0]
   251c0:	68ae      	ldr	r6, [r5, #8]
   251c2:	8a23      	ldrh	r3, [r4, #16]
   251c4:	68e2      	ldr	r2, [r4, #12]
   251c6:	6820      	ldr	r0, [r4, #0]
   251c8:	4629      	mov	r1, r5
   251ca:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   251cc:	2800      	cmp	r0, #0
   251ce:	db08      	blt.n	251e2 <write_cb+0x4c>
   251d0:	8a23      	ldrh	r3, [r4, #16]
   251d2:	4298      	cmp	r0, r3
   251d4:	d10e      	bne.n	251f4 <write_cb+0x5e>
	data->err = 0U;
   251d6:	2300      	movs	r3, #0
   251d8:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   251da:	2001      	movs	r0, #1
   251dc:	e008      	b.n	251f0 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   251de:	2302      	movs	r3, #2
   251e0:	e7eb      	b.n	251ba <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   251e2:	f110 0fff 	cmn.w	r0, #255	; 0xff
   251e6:	d305      	bcc.n	251f4 <write_cb+0x5e>
		return -err;
   251e8:	4240      	negs	r0, r0
   251ea:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   251ec:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   251ee:	2000      	movs	r0, #0
}
   251f0:	b002      	add	sp, #8
   251f2:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   251f4:	200e      	movs	r0, #14
   251f6:	e7f9      	b.n	251ec <write_cb+0x56>

000251f8 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   251f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   251fa:	e9cd 2301 	strd	r2, r3, [sp, #4]
   251fe:	2300      	movs	r3, #0
   25200:	9300      	str	r3, [sp, #0]
   25202:	461a      	mov	r2, r3
   25204:	f7f5 fda0 	bl	1ad48 <bt_gatt_foreach_attr_type>
				  user_data);
}
   25208:	b005      	add	sp, #20
   2520a:	f85d fb04 	ldr.w	pc, [sp], #4

0002520e <find_info_cb>:
{
   2520e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   25210:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   25212:	6816      	ldr	r6, [r2, #0]
{
   25214:	4605      	mov	r5, r0
   25216:	460f      	mov	r7, r1
   25218:	4614      	mov	r4, r2
	if (!data->rsp) {
   2521a:	b963      	cbnz	r3, 25236 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   2521c:	6850      	ldr	r0, [r2, #4]
   2521e:	2101      	movs	r1, #1
   25220:	300c      	adds	r0, #12
   25222:	f7f6 fe31 	bl	1be88 <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   25226:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   25228:	682b      	ldr	r3, [r5, #0]
   2522a:	781b      	ldrb	r3, [r3, #0]
   2522c:	2b00      	cmp	r3, #0
   2522e:	bf14      	ite	ne
   25230:	2302      	movne	r3, #2
   25232:	2301      	moveq	r3, #1
   25234:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   25236:	68a3      	ldr	r3, [r4, #8]
   25238:	781b      	ldrb	r3, [r3, #0]
   2523a:	2b01      	cmp	r3, #1
   2523c:	d003      	beq.n	25246 <find_info_cb+0x38>
   2523e:	2b02      	cmp	r3, #2
   25240:	d01f      	beq.n	25282 <find_info_cb+0x74>
   25242:	2000      	movs	r0, #0
   25244:	e01c      	b.n	25280 <find_info_cb+0x72>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   25246:	682b      	ldr	r3, [r5, #0]
   25248:	781b      	ldrb	r3, [r3, #0]
   2524a:	2b00      	cmp	r3, #0
   2524c:	d1f9      	bne.n	25242 <find_info_cb+0x34>
   2524e:	6860      	ldr	r0, [r4, #4]
   25250:	2104      	movs	r1, #4
   25252:	300c      	adds	r0, #12
   25254:	f7f6 fe18 	bl	1be88 <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   25258:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   2525a:	8007      	strh	r7, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2525c:	682a      	ldr	r2, [r5, #0]
   2525e:	68e3      	ldr	r3, [r4, #12]
   25260:	8852      	ldrh	r2, [r2, #2]
   25262:	805a      	strh	r2, [r3, #2]
		if (bt_att_mtu(chan) - data->buf->len >
   25264:	6861      	ldr	r1, [r4, #4]
	return MIN(chan->chan.rx.mtu, chan->chan.tx.mtu);
   25266:	8d72      	ldrh	r2, [r6, #42]	; 0x2a
   25268:	8b73      	ldrh	r3, [r6, #26]
		if (bt_att_mtu(chan) - data->buf->len >
   2526a:	8a08      	ldrh	r0, [r1, #16]
   2526c:	429a      	cmp	r2, r3
   2526e:	bf94      	ite	ls
   25270:	ebc0 0002 	rsbls	r0, r0, r2
   25274:	ebc0 0003 	rsbhi	r0, r0, r3
   25278:	2804      	cmp	r0, #4
		if (bt_att_mtu(chan) - data->buf->len >
   2527a:	bf94      	ite	ls
   2527c:	2000      	movls	r0, #0
   2527e:	2001      	movhi	r0, #1
}
   25280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   25282:	682b      	ldr	r3, [r5, #0]
   25284:	781b      	ldrb	r3, [r3, #0]
   25286:	2b02      	cmp	r3, #2
   25288:	d1db      	bne.n	25242 <find_info_cb+0x34>
   2528a:	6860      	ldr	r0, [r4, #4]
   2528c:	2112      	movs	r1, #18
   2528e:	300c      	adds	r0, #12
   25290:	f7f6 fdfa 	bl	1be88 <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   25294:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   25296:	8007      	strh	r7, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   25298:	6829      	ldr	r1, [r5, #0]
   2529a:	68e0      	ldr	r0, [r4, #12]
   2529c:	2210      	movs	r2, #16
   2529e:	3101      	adds	r1, #1
   252a0:	3002      	adds	r0, #2
   252a2:	f7ff fbd3 	bl	24a4c <memcpy>
		if (bt_att_mtu(chan) - data->buf->len >
   252a6:	6861      	ldr	r1, [r4, #4]
	return MIN(chan->chan.rx.mtu, chan->chan.tx.mtu);
   252a8:	8d72      	ldrh	r2, [r6, #42]	; 0x2a
   252aa:	8b73      	ldrh	r3, [r6, #26]
		if (bt_att_mtu(chan) - data->buf->len >
   252ac:	8a08      	ldrh	r0, [r1, #16]
   252ae:	429a      	cmp	r2, r3
   252b0:	bf94      	ite	ls
   252b2:	ebc0 0002 	rsbls	r0, r0, r2
   252b6:	ebc0 0003 	rsbhi	r0, r0, r3
   252ba:	2812      	cmp	r0, #18
   252bc:	e7dd      	b.n	2527a <find_info_cb+0x6c>

000252be <att_chan_mtu_updated>:
{
   252be:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   252c0:	6805      	ldr	r5, [r0, #0]
	return list->head;
   252c2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   252c4:	b352      	cbz	r2, 2531c <att_chan_mtu_updated+0x5e>
	return node->next;
   252c6:	6813      	ldr	r3, [r2, #0]
   252c8:	b103      	cbz	r3, 252cc <att_chan_mtu_updated+0xe>
   252ca:	3b88      	subs	r3, #136	; 0x88
   252cc:	f1a2 0488 	sub.w	r4, r2, #136	; 0x88
   252d0:	2200      	movs	r2, #0
   252d2:	4611      	mov	r1, r2
   252d4:	e000      	b.n	252d8 <att_chan_mtu_updated+0x1a>
   252d6:	3b88      	subs	r3, #136	; 0x88
		if (chan == updated_chan) {
   252d8:	4284      	cmp	r4, r0
   252da:	d007      	beq.n	252ec <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   252dc:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   252de:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   252e0:	42b1      	cmp	r1, r6
   252e2:	bf38      	it	cc
   252e4:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   252e6:	42a2      	cmp	r2, r4
   252e8:	bf38      	it	cc
   252ea:	4622      	movcc	r2, r4
   252ec:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   252ee:	b12b      	cbz	r3, 252fc <att_chan_mtu_updated+0x3e>
   252f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   252f4:	2b00      	cmp	r3, #0
   252f6:	d1ee      	bne.n	252d6 <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   252f8:	4284      	cmp	r4, r0
   252fa:	d1ef      	bne.n	252dc <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   252fc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   252fe:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   25300:	428b      	cmp	r3, r1
   25302:	d801      	bhi.n	25308 <att_chan_mtu_updated+0x4a>
   25304:	4290      	cmp	r0, r2
   25306:	d90b      	bls.n	25320 <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   25308:	4282      	cmp	r2, r0
   2530a:	bf38      	it	cc
   2530c:	4602      	movcc	r2, r0
   2530e:	4299      	cmp	r1, r3
   25310:	6828      	ldr	r0, [r5, #0]
   25312:	bf38      	it	cc
   25314:	4619      	movcc	r1, r3
}
   25316:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   25318:	f7f6 ba00 	b.w	1b71c <bt_gatt_att_max_mtu_changed>
   2531c:	4611      	mov	r1, r2
   2531e:	e7ed      	b.n	252fc <att_chan_mtu_updated+0x3e>
}
   25320:	bc70      	pop	{r4, r5, r6}
   25322:	4770      	bx	lr

00025324 <attr_read_group_cb>:
	if (!data->rsp->len) {
   25324:	68d0      	ldr	r0, [r2, #12]
   25326:	7803      	ldrb	r3, [r0, #0]
   25328:	3104      	adds	r1, #4
   2532a:	b913      	cbnz	r3, 25332 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2532c:	7001      	strb	r1, [r0, #0]
	return true;
   2532e:	2001      	movs	r0, #1
   25330:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   25332:	428b      	cmp	r3, r1
   25334:	d0fb      	beq.n	2532e <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   25336:	6891      	ldr	r1, [r2, #8]
   25338:	8a0b      	ldrh	r3, [r1, #16]
		data->group = NULL;
   2533a:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   2533c:	3b04      	subs	r3, #4
   2533e:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   25340:	6110      	str	r0, [r2, #16]
}
   25342:	4770      	bx	lr

00025344 <z_log_msg_static_create.constprop.0>:
   25344:	2300      	movs	r3, #0
   25346:	f7ee be21 	b.w	13f8c <z_impl_z_log_msg_static_create>

0002534a <att_chan_read>:
{
   2534a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2534e:	4604      	mov	r4, r0
   25350:	b085      	sub	sp, #20
	if (bt_att_mtu(chan) <= net_buf_frags_len(buf)) {
   25352:	4610      	mov	r0, r2
{
   25354:	4690      	mov	r8, r2
   25356:	4699      	mov	r9, r3
	if (bt_att_mtu(chan) <= net_buf_frags_len(buf)) {
   25358:	f7ff ff03 	bl	25162 <net_buf_frags_len>
	return MIN(chan->chan.rx.mtu, chan->chan.tx.mtu);
   2535c:	8b63      	ldrh	r3, [r4, #26]
   2535e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
	if (bt_att_mtu(chan) <= net_buf_frags_len(buf)) {
   25360:	4293      	cmp	r3, r2
   25362:	bf28      	it	cs
   25364:	4613      	movcs	r3, r2
   25366:	4283      	cmp	r3, r0
{
   25368:	468b      	mov	fp, r1
	if (bt_att_mtu(chan) <= net_buf_frags_len(buf)) {
   2536a:	f240 8093 	bls.w	25494 <att_chan_read+0x14a>
	struct bt_conn *conn = chan->chan.chan.conn;
   2536e:	6863      	ldr	r3, [r4, #4]
   25370:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   25372:	4640      	mov	r0, r8
   25374:	f7f6 fca0 	bl	1bcb8 <net_buf_frag_last>
	size_t len, total = 0;
   25378:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   2537c:	4606      	mov	r6, r0
		len = MIN(bt_att_mtu(chan) - net_buf_frags_len(buf),
   2537e:	4640      	mov	r0, r8
   25380:	f7ff feef 	bl	25162 <net_buf_frags_len>
	return MIN(chan->chan.rx.mtu, chan->chan.tx.mtu);
   25384:	8b62      	ldrh	r2, [r4, #26]
   25386:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   25388:	f106 070c 	add.w	r7, r6, #12
		len = MIN(bt_att_mtu(chan) - net_buf_frags_len(buf),
   2538c:	429a      	cmp	r2, r3
   2538e:	bf94      	ite	ls
   25390:	ebc0 0502 	rsbls	r5, r0, r2
   25394:	ebc0 0503 	rsbhi	r5, r0, r3
   25398:	4638      	mov	r0, r7
   2539a:	f000 fd78 	bl	25e8e <net_buf_simple_tailroom>
   2539e:	4285      	cmp	r5, r0
   253a0:	d217      	bcs.n	253d2 <att_chan_read+0x88>
   253a2:	4640      	mov	r0, r8
   253a4:	f7ff fedd 	bl	25162 <net_buf_frags_len>
	return MIN(chan->chan.rx.mtu, chan->chan.tx.mtu);
   253a8:	8b62      	ldrh	r2, [r4, #26]
   253aa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
		len = MIN(bt_att_mtu(chan) - net_buf_frags_len(buf),
   253ac:	429a      	cmp	r2, r3
   253ae:	bf94      	ite	ls
   253b0:	ebc0 0502 	rsbls	r5, r0, r2
   253b4:	ebc0 0503 	rsbhi	r5, r0, r3
		if (!len) {
   253b8:	bb8d      	cbnz	r5, 2541e <att_chan_read+0xd4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   253ba:	f898 000a 	ldrb.w	r0, [r8, #10]
   253be:	f7f6 fa0b 	bl	1b7d8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   253c2:	2200      	movs	r2, #0
   253c4:	2300      	movs	r3, #0
   253c6:	f000 fd4f 	bl	25e68 <net_buf_alloc_fixed>
			if (!frag) {
   253ca:	4606      	mov	r6, r0
   253cc:	b930      	cbnz	r0, 253dc <att_chan_read+0x92>
	return total;
   253ce:	4657      	mov	r7, sl
   253d0:	e036      	b.n	25440 <att_chan_read+0xf6>
	return net_buf_simple_tailroom(&buf->b);
   253d2:	4638      	mov	r0, r7
   253d4:	f000 fd5b 	bl	25e8e <net_buf_simple_tailroom>
   253d8:	4605      	mov	r5, r0
   253da:	e7ed      	b.n	253b8 <att_chan_read+0x6e>
			net_buf_frag_add(buf, frag);
   253dc:	4601      	mov	r1, r0
   253de:	4640      	mov	r0, r8
   253e0:	f7f6 fcb0 	bl	1bd44 <net_buf_frag_add>
			len = MIN(bt_att_mtu(chan) - net_buf_frags_len(buf),
   253e4:	4640      	mov	r0, r8
   253e6:	f7ff febc 	bl	25162 <net_buf_frags_len>
	return MIN(chan->chan.rx.mtu, chan->chan.tx.mtu);
   253ea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
   253ec:	8b63      	ldrh	r3, [r4, #26]
   253ee:	f106 070c 	add.w	r7, r6, #12
			len = MIN(bt_att_mtu(chan) - net_buf_frags_len(buf),
   253f2:	429a      	cmp	r2, r3
   253f4:	bf94      	ite	ls
   253f6:	ebc0 0502 	rsbls	r5, r0, r2
   253fa:	ebc0 0503 	rsbhi	r5, r0, r3
   253fe:	4638      	mov	r0, r7
   25400:	f000 fd45 	bl	25e8e <net_buf_simple_tailroom>
   25404:	4285      	cmp	r5, r0
   25406:	d21f      	bcs.n	25448 <att_chan_read+0xfe>
   25408:	4640      	mov	r0, r8
   2540a:	f7ff feaa 	bl	25162 <net_buf_frags_len>
	return MIN(chan->chan.rx.mtu, chan->chan.tx.mtu);
   2540e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
   25410:	8b63      	ldrh	r3, [r4, #26]
			len = MIN(bt_att_mtu(chan) - net_buf_frags_len(buf),
   25412:	429a      	cmp	r2, r3
   25414:	bf94      	ite	ls
   25416:	ebc0 0502 	rsbls	r5, r0, r2
   2541a:	ebc0 0503 	rsbhi	r5, r0, r3
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2541e:	68f1      	ldr	r1, [r6, #12]
   25420:	8a32      	ldrh	r2, [r6, #16]
   25422:	f8cd 9000 	str.w	r9, [sp]
   25426:	f8db 7004 	ldr.w	r7, [fp, #4]
   2542a:	9803      	ldr	r0, [sp, #12]
   2542c:	440a      	add	r2, r1
   2542e:	b2ab      	uxth	r3, r5
   25430:	4659      	mov	r1, fp
   25432:	47b8      	blx	r7
		if (read < 0) {
   25434:	1e07      	subs	r7, r0, #0
   25436:	da0c      	bge.n	25452 <att_chan_read+0x108>
				return total;
   25438:	f1ba 0f00 	cmp.w	sl, #0
   2543c:	bf18      	it	ne
   2543e:	4657      	movne	r7, sl
}
   25440:	4638      	mov	r0, r7
   25442:	b005      	add	sp, #20
   25444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25448:	4638      	mov	r0, r7
   2544a:	f000 fd20 	bl	25e8e <net_buf_simple_tailroom>
   2544e:	4605      	mov	r5, r0
   25450:	e7e5      	b.n	2541e <att_chan_read+0xd4>
		if (cb && !cb(frag, read, user_data)) {
   25452:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25454:	b9b3      	cbnz	r3, 25484 <att_chan_read+0x13a>
	return net_buf_simple_add(&buf->b, len);
   25456:	4639      	mov	r1, r7
   25458:	f106 000c 	add.w	r0, r6, #12
   2545c:	f7f6 fd14 	bl	1be88 <net_buf_simple_add>
	} while (bt_att_mtu(chan) > net_buf_frags_len(buf) && read == len);
   25460:	4640      	mov	r0, r8
   25462:	f7ff fe7e 	bl	25162 <net_buf_frags_len>
	return MIN(chan->chan.rx.mtu, chan->chan.tx.mtu);
   25466:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   25468:	8b62      	ldrh	r2, [r4, #26]
	} while (bt_att_mtu(chan) > net_buf_frags_len(buf) && read == len);
   2546a:	4293      	cmp	r3, r2
   2546c:	bf28      	it	cs
   2546e:	4613      	movcs	r3, r2
		offset += read;
   25470:	44b9      	add	r9, r7
	} while (bt_att_mtu(chan) > net_buf_frags_len(buf) && read == len);
   25472:	4283      	cmp	r3, r0
		total += read;
   25474:	44ba      	add	sl, r7
		offset += read;
   25476:	fa1f f989 	uxth.w	r9, r9
	} while (bt_att_mtu(chan) > net_buf_frags_len(buf) && read == len);
   2547a:	d9a8      	bls.n	253ce <att_chan_read+0x84>
   2547c:	42af      	cmp	r7, r5
   2547e:	f43f af7e 	beq.w	2537e <att_chan_read+0x34>
   25482:	e7a4      	b.n	253ce <att_chan_read+0x84>
		if (cb && !cb(frag, read, user_data)) {
   25484:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   25486:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25488:	4639      	mov	r1, r7
   2548a:	4630      	mov	r0, r6
   2548c:	4798      	blx	r3
   2548e:	2800      	cmp	r0, #0
   25490:	d1e1      	bne.n	25456 <att_chan_read+0x10c>
   25492:	e79c      	b.n	253ce <att_chan_read+0x84>
		return 0;
   25494:	2700      	movs	r7, #0
   25496:	e7d3      	b.n	25440 <att_chan_read+0xf6>

00025498 <sys_slist_find_and_remove.isra.0>:
	return list->head;
   25498:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2549a:	2200      	movs	r2, #0
   2549c:	b903      	cbnz	r3, 254a0 <sys_slist_find_and_remove.isra.0+0x8>
   2549e:	4770      	bx	lr
   254a0:	428b      	cmp	r3, r1
   254a2:	d10f      	bne.n	254c4 <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   254a4:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   254a6:	b93a      	cbnz	r2, 254b8 <sys_slist_find_and_remove.isra.0+0x20>
   254a8:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   254aa:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   254ac:	4291      	cmp	r1, r2
   254ae:	d100      	bne.n	254b2 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   254b0:	6043      	str	r3, [r0, #4]
	parent->next = child;
   254b2:	2300      	movs	r3, #0
   254b4:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   254b6:	4770      	bx	lr
	parent->next = child;
   254b8:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   254ba:	6843      	ldr	r3, [r0, #4]
   254bc:	4299      	cmp	r1, r3
	list->tail = node;
   254be:	bf08      	it	eq
   254c0:	6042      	streq	r2, [r0, #4]
}
   254c2:	e7f6      	b.n	254b2 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   254c4:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   254c6:	681b      	ldr	r3, [r3, #0]
   254c8:	e7e8      	b.n	2549c <sys_slist_find_and_remove.isra.0+0x4>

000254ca <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   254ca:	2301      	movs	r3, #1
   254cc:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   254ce:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   254d0:	f3bf 8f5b 	dmb	ish
   254d4:	e850 2f00 	ldrex	r2, [r0]
   254d8:	401a      	ands	r2, r3
   254da:	e840 2100 	strex	r1, r2, [r0]
   254de:	2900      	cmp	r1, #0
   254e0:	d1f8      	bne.n	254d4 <atomic_clear_bit+0xa>
   254e2:	f3bf 8f5b 	dmb	ish
}
   254e6:	4770      	bx	lr

000254e8 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   254e8:	2006      	movs	r0, #6
   254ea:	4770      	bx	lr

000254ec <atomic_test_and_set_bit>:
{
   254ec:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   254ee:	2301      	movs	r3, #1
   254f0:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   254f4:	f3bf 8f5b 	dmb	ish
   254f8:	e850 3f00 	ldrex	r3, [r0]
   254fc:	ea43 0201 	orr.w	r2, r3, r1
   25500:	e840 2400 	strex	r4, r2, [r0]
   25504:	2c00      	cmp	r4, #0
   25506:	d1f7      	bne.n	254f8 <atomic_test_and_set_bit+0xc>
   25508:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2550c:	4219      	tst	r1, r3
}
   2550e:	bf14      	ite	ne
   25510:	2001      	movne	r0, #1
   25512:	2000      	moveq	r0, #0
   25514:	bd10      	pop	{r4, pc}

00025516 <read_cb>:
{
   25516:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   25518:	6816      	ldr	r6, [r2, #0]
{
   2551a:	4605      	mov	r5, r0
	data->err = 0x00;
   2551c:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2551e:	6870      	ldr	r0, [r6, #4]
	data->err = 0x00;
   25520:	7313      	strb	r3, [r2, #12]
{
   25522:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   25524:	4629      	mov	r1, r5
   25526:	2295      	movs	r2, #149	; 0x95
   25528:	f000 fc11 	bl	25d4e <bt_gatt_check_perm>
   2552c:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   2552e:	b980      	cbnz	r0, 25552 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   25530:	e9cd 0000 	strd	r0, r0, [sp]
   25534:	4629      	mov	r1, r5
   25536:	88a3      	ldrh	r3, [r4, #4]
   25538:	68a2      	ldr	r2, [r4, #8]
   2553a:	4630      	mov	r0, r6
   2553c:	f7ff ff05 	bl	2534a <att_chan_read>
	if (ret < 0) {
   25540:	2800      	cmp	r0, #0
   25542:	da09      	bge.n	25558 <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   25544:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   25548:	bf26      	itte	cs
   2554a:	4240      	negcs	r0, r0
   2554c:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   2554e:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   25550:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   25552:	2000      	movs	r0, #0
}
   25554:	b002      	add	sp, #8
   25556:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   25558:	2001      	movs	r0, #1
   2555a:	e7fb      	b.n	25554 <read_cb+0x3e>

0002555c <read_vl_cb>:
{
   2555c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   25560:	6816      	ldr	r6, [r2, #0]
{
   25562:	4607      	mov	r7, r0
	data->err = 0x00;
   25564:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   25566:	6870      	ldr	r0, [r6, #4]
	data->err = 0x00;
   25568:	7313      	strb	r3, [r2, #12]
{
   2556a:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2556c:	4639      	mov	r1, r7
   2556e:	2295      	movs	r2, #149	; 0x95
   25570:	f000 fbed 	bl	25d4e <bt_gatt_check_perm>
   25574:	4605      	mov	r5, r0
   25576:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   25578:	bb08      	cbnz	r0, 255be <read_vl_cb+0x62>
	if (bt_att_mtu(chan) - data->buf->len < 2) {
   2557a:	68a0      	ldr	r0, [r4, #8]
	return MIN(chan->chan.rx.mtu, chan->chan.tx.mtu);
   2557c:	8d71      	ldrh	r1, [r6, #42]	; 0x2a
   2557e:	8b72      	ldrh	r2, [r6, #26]
	if (bt_att_mtu(chan) - data->buf->len < 2) {
   25580:	8a03      	ldrh	r3, [r0, #16]
   25582:	4291      	cmp	r1, r2
   25584:	bf94      	ite	ls
   25586:	ebc3 0301 	rsbls	r3, r3, r1
   2558a:	ebc3 0302 	rsbhi	r3, r3, r2
   2558e:	2b01      	cmp	r3, #1
   25590:	dd15      	ble.n	255be <read_vl_cb+0x62>
   25592:	2102      	movs	r1, #2
   25594:	300c      	adds	r0, #12
   25596:	f7f6 fc77 	bl	1be88 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2559a:	e9cd 5500 	strd	r5, r5, [sp]
   2559e:	4680      	mov	r8, r0
   255a0:	88a3      	ldrh	r3, [r4, #4]
   255a2:	68a2      	ldr	r2, [r4, #8]
   255a4:	4639      	mov	r1, r7
   255a6:	4630      	mov	r0, r6
   255a8:	f7ff fecf 	bl	2534a <att_chan_read>
	if (read < 0) {
   255ac:	1e03      	subs	r3, r0, #0
   255ae:	da0a      	bge.n	255c6 <read_vl_cb+0x6a>
	if (err < 0 && err >= -0xff) {
   255b0:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   255b4:	bf26      	itte	cs
   255b6:	425b      	negcs	r3, r3
   255b8:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   255ba:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   255bc:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   255be:	2000      	movs	r0, #0
}
   255c0:	b002      	add	sp, #8
   255c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   255c6:	f8a8 3000 	strh.w	r3, [r8]
	return BT_GATT_ITER_CONTINUE;
   255ca:	2001      	movs	r0, #1
   255cc:	e7f8      	b.n	255c0 <read_vl_cb+0x64>

000255ce <chan_req_send>:
{
   255ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   255d0:	4604      	mov	r4, r0
	if (bt_att_mtu(chan) < net_buf_frags_len(req->buf)) {
   255d2:	6888      	ldr	r0, [r1, #8]
   255d4:	f7ff fdc5 	bl	25162 <net_buf_frags_len>
	return MIN(chan->chan.rx.mtu, chan->chan.tx.mtu);
   255d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   255da:	8b62      	ldrh	r2, [r4, #26]
	if (bt_att_mtu(chan) < net_buf_frags_len(req->buf)) {
   255dc:	4293      	cmp	r3, r2
   255de:	bf28      	it	cs
   255e0:	4613      	movcs	r3, r2
   255e2:	4283      	cmp	r3, r0
{
   255e4:	460d      	mov	r5, r1
	if (bt_att_mtu(chan) < net_buf_frags_len(req->buf)) {
   255e6:	d30b      	bcc.n	25600 <chan_req_send+0x32>
	chan->req = req;
   255e8:	63a1      	str	r1, [r4, #56]	; 0x38
	buf = req->buf;
   255ea:	688f      	ldr	r7, [r1, #8]
	req->buf = NULL;
   255ec:	2600      	movs	r6, #0
   255ee:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   255f0:	4620      	mov	r0, r4
   255f2:	4639      	mov	r1, r7
   255f4:	f7f4 fa16 	bl	19a24 <chan_send>
	if (err) {
   255f8:	b108      	cbz	r0, 255fe <chan_req_send+0x30>
		req->buf = buf;
   255fa:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   255fc:	63a6      	str	r6, [r4, #56]	; 0x38
}
   255fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   25600:	f06f 0079 	mvn.w	r0, #121	; 0x79
   25604:	e7fb      	b.n	255fe <chan_req_send+0x30>

00025606 <bt_att_status>:
{
   25606:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25608:	f3bf 8f5b 	dmb	ish
   2560c:	680b      	ldr	r3, [r1, #0]
   2560e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   25612:	07db      	lsls	r3, r3, #31
{
   25614:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   25616:	d517      	bpl.n	25648 <bt_att_status+0x42>
	if (!chan->att) {
   25618:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2561c:	b1a0      	cbz	r0, 25648 <bt_att_status+0x42>
	if (chan->req) {
   2561e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   25620:	b993      	cbnz	r3, 25648 <bt_att_status+0x42>
	node = sys_slist_get(&chan->att->reqs);
   25622:	3004      	adds	r0, #4
   25624:	f7ff fd93 	bl	2514e <sys_slist_get>
	if (!node) {
   25628:	4604      	mov	r4, r0
   2562a:	b168      	cbz	r0, 25648 <bt_att_status+0x42>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2562c:	4601      	mov	r1, r0
   2562e:	1f28      	subs	r0, r5, #4
   25630:	f7f4 fa8a 	bl	19b48 <bt_att_chan_req_send>
   25634:	2800      	cmp	r0, #0
   25636:	da07      	bge.n	25648 <bt_att_status+0x42>
	sys_slist_prepend(&chan->att->reqs, node);
   25638:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   2563c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2563e:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   25640:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   25642:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   25644:	b902      	cbnz	r2, 25648 <bt_att_status+0x42>
	list->tail = node;
   25646:	609c      	str	r4, [r3, #8]
}
   25648:	bd38      	pop	{r3, r4, r5, pc}

0002564a <att_req_send_process>:
{
   2564a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   2564e:	6a84      	ldr	r4, [r0, #40]	; 0x28
   25650:	4607      	mov	r7, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25652:	b33c      	cbz	r4, 256a4 <att_req_send_process+0x5a>
	return node->next;
   25654:	f854 6988 	ldr.w	r6, [r4], #-136
   25658:	b106      	cbz	r6, 2565c <att_req_send_process+0x12>
   2565a:	3e88      	subs	r6, #136	; 0x88
{
   2565c:	2300      	movs	r3, #0
   2565e:	461d      	mov	r5, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   25660:	f107 0804 	add.w	r8, r7, #4
   25664:	e001      	b.n	2566a <att_req_send_process+0x20>
{
   25666:	4634      	mov	r4, r6
   25668:	4616      	mov	r6, r2
		if (chan->req) {
   2566a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   2566c:	b99a      	cbnz	r2, 25696 <att_req_send_process+0x4c>
		if (!req && prev && (bt_att_is_enhanced(chan) == bt_att_is_enhanced(prev))) {
   2566e:	b905      	cbnz	r5, 25672 <att_req_send_process+0x28>
   25670:	b98b      	cbnz	r3, 25696 <att_req_send_process+0x4c>
	sys_snode_t *node = sys_slist_get(reqs);
   25672:	4640      	mov	r0, r8
   25674:	f7ff fd6b 	bl	2514e <sys_slist_get>
	if (node) {
   25678:	4605      	mov	r5, r0
   2567a:	b158      	cbz	r0, 25694 <att_req_send_process+0x4a>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   2567c:	4601      	mov	r1, r0
   2567e:	4620      	mov	r0, r4
   25680:	f7f4 fa62 	bl	19b48 <bt_att_chan_req_send>
   25684:	2800      	cmp	r0, #0
   25686:	da0d      	bge.n	256a4 <att_req_send_process+0x5a>
	return list->head;
   25688:	687b      	ldr	r3, [r7, #4]
	parent->next = child;
   2568a:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   2568c:	68bb      	ldr	r3, [r7, #8]
	list->head = node;
   2568e:	607d      	str	r5, [r7, #4]
Z_GENLIST_PREPEND(slist, snode)
   25690:	b903      	cbnz	r3, 25694 <att_req_send_process+0x4a>
	list->tail = node;
   25692:	60bd      	str	r5, [r7, #8]
   25694:	4623      	mov	r3, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25696:	b12e      	cbz	r6, 256a4 <att_req_send_process+0x5a>
	return node->next;
   25698:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
   2569c:	2a00      	cmp	r2, #0
   2569e:	d0e2      	beq.n	25666 <att_req_send_process+0x1c>
   256a0:	3a88      	subs	r2, #136	; 0x88
   256a2:	e7e0      	b.n	25666 <att_req_send_process+0x1c>
}
   256a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000256a8 <process_queue>:
{
   256a8:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   256aa:	2200      	movs	r2, #0
{
   256ac:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   256ae:	2300      	movs	r3, #0
   256b0:	4608      	mov	r0, r1
{
   256b2:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   256b4:	f000 fbdd 	bl	25e72 <net_buf_get>
	if (buf) {
   256b8:	4605      	mov	r5, r0
   256ba:	b158      	cbz	r0, 256d4 <process_queue+0x2c>
	return chan_send(chan, buf);
   256bc:	4601      	mov	r1, r0
   256be:	4620      	mov	r0, r4
   256c0:	f7f4 f9b0 	bl	19a24 <chan_send>
		if (err) {
   256c4:	4604      	mov	r4, r0
   256c6:	b118      	cbz	r0, 256d0 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   256c8:	4629      	mov	r1, r5
   256ca:	4630      	mov	r0, r6
   256cc:	f001 f95f 	bl	2698e <k_queue_prepend>
}
   256d0:	4620      	mov	r0, r4
   256d2:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   256d4:	f06f 0401 	mvn.w	r4, #1
   256d8:	e7fa      	b.n	256d0 <process_queue+0x28>

000256da <bt_att_sent>:
{
   256da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att *att = chan->att;
   256dc:	f850 4c04 	ldr.w	r4, [r0, #-4]
{
   256e0:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   256e2:	1f07      	subs	r7, r0, #4
	atomic_clear_bit(chan->flags, ATT_PENDING_SENT);
   256e4:	2104      	movs	r1, #4
   256e6:	3030      	adds	r0, #48	; 0x30
   256e8:	f7ff feef 	bl	254ca <atomic_clear_bit>
	if (!att) {
   256ec:	b304      	cbz	r4, 25730 <bt_att_sent+0x56>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   256ee:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   256f0:	b98b      	cbnz	r3, 25716 <bt_att_sent+0x3c>
   256f2:	6863      	ldr	r3, [r4, #4]
   256f4:	b17b      	cbz	r3, 25716 <bt_att_sent+0x3c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   256f6:	1d20      	adds	r0, r4, #4
   256f8:	f7ff fd29 	bl	2514e <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   256fc:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   256fe:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   25700:	4638      	mov	r0, r7
   25702:	f7ff ff64 	bl	255ce <chan_req_send>
   25706:	2800      	cmp	r0, #0
   25708:	da12      	bge.n	25730 <bt_att_sent+0x56>
	return list->head;
   2570a:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   2570c:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2570e:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   25710:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   25712:	b903      	cbnz	r3, 25716 <bt_att_sent+0x3c>
	list->tail = node;
   25714:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   25716:	f105 0138 	add.w	r1, r5, #56	; 0x38
   2571a:	4638      	mov	r0, r7
   2571c:	f7ff ffc4 	bl	256a8 <process_queue>
	if (!err) {
   25720:	b130      	cbz	r0, 25730 <bt_att_sent+0x56>
	(void)process_queue(chan, &att->tx_queue);
   25722:	f104 010c 	add.w	r1, r4, #12
   25726:	4638      	mov	r0, r7
}
   25728:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   2572c:	f7ff bfbc 	b.w	256a8 <process_queue>
}
   25730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00025732 <bt_att_chan_send_rsp>:
{
   25732:	b538      	push	{r3, r4, r5, lr}
   25734:	4604      	mov	r4, r0
   25736:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   25738:	f7f4 f974 	bl	19a24 <chan_send>
	if (err) {
   2573c:	b130      	cbz	r0, 2574c <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   2573e:	4629      	mov	r1, r5
   25740:	f104 003c 	add.w	r0, r4, #60	; 0x3c
}
   25744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   25748:	f7f6 ba34 	b.w	1bbb4 <net_buf_put>
}
   2574c:	bd38      	pop	{r3, r4, r5, pc}

0002574e <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   2574e:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   25750:	6883      	ldr	r3, [r0, #8]
   25752:	699b      	ldr	r3, [r3, #24]
   25754:	b10b      	cbz	r3, 2575a <att_sent+0xc>
		chan->ops->sent(chan);
   25756:	3004      	adds	r0, #4
   25758:	4718      	bx	r3
}
   2575a:	4770      	bx	lr

0002575c <att_tx_complete>:
{
   2575c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25760:	4606      	mov	r6, r0
   25762:	460d      	mov	r5, r1
	if (!err) {
   25764:	4614      	mov	r4, r2
   25766:	b122      	cbz	r2, 25772 <att_tx_complete+0x16>
}
   25768:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   2576c:	4608      	mov	r0, r1
   2576e:	f7f3 bedb 	b.w	19528 <tx_meta_data_free>
		att_sent(conn, user_data);
   25772:	f7ff ffec 	bl	2574e <att_sent>
	bt_gatt_complete_func_t func = data->func;
   25776:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   25778:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   2577c:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   25780:	4628      	mov	r0, r5
   25782:	f7f3 fed1 	bl	19528 <tx_meta_data_free>
	if (!err && func) {
   25786:	b92f      	cbnz	r7, 25794 <att_tx_complete+0x38>
}
   25788:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   2578c:	4649      	mov	r1, r9
   2578e:	4630      	mov	r0, r6
   25790:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   25792:	3401      	adds	r4, #1
   25794:	b2a3      	uxth	r3, r4
   25796:	4543      	cmp	r3, r8
   25798:	d3f8      	bcc.n	2578c <att_tx_complete+0x30>
   2579a:	e7f5      	b.n	25788 <att_tx_complete+0x2c>

0002579c <att_req_sent>:
{
   2579c:	b510      	push	{r4, lr}
   2579e:	460c      	mov	r4, r1
	if (!err) {
   257a0:	b90a      	cbnz	r2, 257a6 <att_req_sent+0xa>
		att_sent(conn, user_data);
   257a2:	f7ff ffd4 	bl	2574e <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   257a6:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   257a8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   257aa:	b12b      	cbz	r3, 257b8 <att_req_sent+0x1c>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   257ac:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   257b0:	2300      	movs	r3, #0
   257b2:	3058      	adds	r0, #88	; 0x58
   257b4:	f7fb fd44 	bl	21240 <k_work_reschedule>
	tx_meta_data_free(user_data);
   257b8:	4620      	mov	r0, r4
}
   257ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   257be:	f7f3 beb3 	b.w	19528 <tx_meta_data_free>

000257c2 <att_cfm_sent>:
{
   257c2:	b510      	push	{r4, lr}
   257c4:	460c      	mov	r4, r1
	if (!err) {
   257c6:	b90a      	cbnz	r2, 257cc <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   257c8:	f7ff ffc1 	bl	2574e <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_CFM);
   257cc:	6820      	ldr	r0, [r4, #0]
   257ce:	2101      	movs	r1, #1
   257d0:	3034      	adds	r0, #52	; 0x34
   257d2:	f7ff fe7a 	bl	254ca <atomic_clear_bit>
	tx_meta_data_free(data);
   257d6:	4620      	mov	r0, r4
}
   257d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   257dc:	f7f3 bea4 	b.w	19528 <tx_meta_data_free>

000257e0 <att_rsp_sent>:
{
   257e0:	b510      	push	{r4, lr}
   257e2:	460c      	mov	r4, r1
	if (!err) {
   257e4:	b90a      	cbnz	r2, 257ea <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   257e6:	f7ff ffb2 	bl	2574e <att_sent>
		atomic_clear_bit(chan->flags, ATT_PENDING_RSP);
   257ea:	6820      	ldr	r0, [r4, #0]
   257ec:	2100      	movs	r1, #0
   257ee:	3034      	adds	r0, #52	; 0x34
   257f0:	f7ff fe6b 	bl	254ca <atomic_clear_bit>
	tx_meta_data_free(data);
   257f4:	4620      	mov	r0, r4
}
   257f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   257fa:	f7f3 be95 	b.w	19528 <tx_meta_data_free>

000257fe <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   257fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25802:	4688      	mov	r8, r1
   25804:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   25806:	2101      	movs	r1, #1
   25808:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   2580a:	4605      	mov	r5, r0
   2580c:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2580e:	f7f4 f9dd 	bl	19bcc <bt_att_chan_create_pdu>
	if (!buf) {
   25812:	4604      	mov	r4, r0
   25814:	b170      	cbz	r0, 25834 <send_err_rsp.part.0+0x36>
   25816:	2104      	movs	r1, #4
   25818:	300c      	adds	r0, #12
   2581a:	f7f6 fb35 	bl	1be88 <net_buf_simple_add>
	rsp->request = req;
   2581e:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   25822:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   25826:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   25828:	4621      	mov	r1, r4
   2582a:	4628      	mov	r0, r5
}
   2582c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   25830:	f7ff bf7f 	b.w	25732 <bt_att_chan_send_rsp>
}
   25834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025838 <att_write_req>:
{
   25838:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2583a:	460c      	mov	r4, r1
   2583c:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2583e:	f101 000c 	add.w	r0, r1, #12
   25842:	f000 fb18 	bl	25e76 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   25846:	8a22      	ldrh	r2, [r4, #16]
   25848:	9201      	str	r2, [sp, #4]
   2584a:	68e2      	ldr	r2, [r4, #12]
   2584c:	9200      	str	r2, [sp, #0]
   2584e:	4603      	mov	r3, r0
   25850:	2213      	movs	r2, #19
   25852:	2112      	movs	r1, #18
   25854:	4628      	mov	r0, r5
   25856:	f7f4 fae1 	bl	19e1c <att_write_rsp.constprop.0>
}
   2585a:	b003      	add	sp, #12
   2585c:	bd30      	pop	{r4, r5, pc}

0002585e <att_write_cmd>:
{
   2585e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25860:	460c      	mov	r4, r1
   25862:	4605      	mov	r5, r0
   25864:	f101 000c 	add.w	r0, r1, #12
   25868:	f000 fb05 	bl	25e76 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2586c:	8a22      	ldrh	r2, [r4, #16]
   2586e:	9201      	str	r2, [sp, #4]
   25870:	68e2      	ldr	r2, [r4, #12]
   25872:	9200      	str	r2, [sp, #0]
   25874:	2200      	movs	r2, #0
   25876:	4603      	mov	r3, r0
   25878:	4611      	mov	r1, r2
   2587a:	4628      	mov	r0, r5
   2587c:	f7f4 face 	bl	19e1c <att_write_rsp.constprop.0>
}
   25880:	b003      	add	sp, #12
   25882:	bd30      	pop	{r4, r5, pc}

00025884 <att_read_blob_req>:
{
   25884:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   25886:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   25888:	8813      	ldrh	r3, [r2, #0]
   2588a:	8852      	ldrh	r2, [r2, #2]
   2588c:	9200      	str	r2, [sp, #0]
   2588e:	210c      	movs	r1, #12
   25890:	220d      	movs	r2, #13
   25892:	f7f4 fc8b 	bl	1a1ac <att_read_rsp>
}
   25896:	b003      	add	sp, #12
   25898:	f85d fb04 	ldr.w	pc, [sp], #4

0002589c <att_read_req>:
{
   2589c:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   2589e:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   258a0:	2200      	movs	r2, #0
   258a2:	881b      	ldrh	r3, [r3, #0]
   258a4:	9200      	str	r2, [sp, #0]
   258a6:	210a      	movs	r1, #10
   258a8:	220b      	movs	r2, #11
   258aa:	f7f4 fc7f 	bl	1a1ac <att_read_rsp>
}
   258ae:	b003      	add	sp, #12
   258b0:	f85d fb04 	ldr.w	pc, [sp], #4

000258b4 <att_mtu_req>:
{
   258b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mtu_client = sys_le16_to_cpu(req->mtu);
   258b8:	68cb      	ldr	r3, [r1, #12]
   258ba:	881f      	ldrh	r7, [r3, #0]
   258bc:	b2bb      	uxth	r3, r7
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   258be:	2b16      	cmp	r3, #22
{
   258c0:	4604      	mov	r4, r0
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   258c2:	d91e      	bls.n	25902 <att_mtu_req+0x4e>
	struct bt_conn *conn = chan->att->conn;
   258c4:	6803      	ldr	r3, [r0, #0]
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   258c6:	2202      	movs	r2, #2
   258c8:	6818      	ldr	r0, [r3, #0]
   258ca:	2103      	movs	r1, #3
   258cc:	f7f4 fb0a 	bl	19ee4 <bt_att_create_pdu>
	if (!pdu) {
   258d0:	4606      	mov	r6, r0
   258d2:	b1c0      	cbz	r0, 25906 <att_mtu_req+0x52>
	return net_buf_simple_add(&buf->b, len);
   258d4:	2102      	movs	r1, #2
   258d6:	300c      	adds	r0, #12
   258d8:	f7f6 fad6 	bl	1be88 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   258dc:	2500      	movs	r5, #0
   258de:	f04f 0817 	mov.w	r8, #23
   258e2:	f880 8000 	strb.w	r8, [r0]
   258e6:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   258e8:	4631      	mov	r1, r6
   258ea:	4620      	mov	r0, r4
   258ec:	f7ff ff21 	bl	25732 <bt_att_chan_send_rsp>
	att_chan_mtu_updated(chan);
   258f0:	4620      	mov	r0, r4
	chan->chan.rx.mtu = mtu_server;
   258f2:	f8a4 801a 	strh.w	r8, [r4, #26]
	chan->chan.tx.mtu = mtu_client;
   258f6:	8567      	strh	r7, [r4, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   258f8:	f7ff fce1 	bl	252be <att_chan_mtu_updated>
	return 0;
   258fc:	4628      	mov	r0, r5
}
   258fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_INVALID_PDU;
   25902:	2004      	movs	r0, #4
   25904:	e7fb      	b.n	258fe <att_mtu_req+0x4a>
		return BT_ATT_ERR_UNLIKELY;
   25906:	200e      	movs	r0, #14
   25908:	e7f9      	b.n	258fe <att_mtu_req+0x4a>

0002590a <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2590a:	8a0a      	ldrh	r2, [r1, #16]
   2590c:	68c9      	ldr	r1, [r1, #12]
   2590e:	2300      	movs	r3, #0
   25910:	f7f4 bdf8 	b.w	1a504 <att_handle_rsp>

00025914 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   25914:	2001      	movs	r0, #1
   25916:	4770      	bx	lr

00025918 <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   25918:	b510      	push	{r4, lr}
	struct bt_att *att = att_get(conn);
   2591a:	f7f3 fef1 	bl	19700 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   2591e:	b150      	cbz	r0, 25936 <bt_att_clear_out_of_sync_sent+0x1e>
	return list->head;
   25920:	6a84      	ldr	r4, [r0, #40]	; 0x28
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   25922:	b144      	cbz	r4, 25936 <bt_att_clear_out_of_sync_sent+0x1e>
   25924:	3c88      	subs	r4, #136	; 0x88
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
   25926:	f104 0034 	add.w	r0, r4, #52	; 0x34
   2592a:	2105      	movs	r1, #5
   2592c:	f7ff fdcd 	bl	254ca <atomic_clear_bit>
	return node->next;
   25930:	f8d4 4088 	ldr.w	r4, [r4, #136]	; 0x88
   25934:	e7f5      	b.n	25922 <bt_att_clear_out_of_sync_sent+0xa>
	}
}
   25936:	bd10      	pop	{r4, pc}

00025938 <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   25938:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   2593a:	2104      	movs	r1, #4
   2593c:	f7ff fbfc 	bl	25138 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   25940:	b130      	cbz	r0, 25950 <bt_att_out_of_sync_sent_on_fixed+0x18>
   25942:	f3bf 8f5b 	dmb	ish
   25946:	6b00      	ldr	r0, [r0, #48]	; 0x30
   25948:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2594c:	f3c0 1040 	ubfx	r0, r0, #5, #1
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   25950:	bd08      	pop	{r3, pc}

00025952 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   25952:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   25954:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   25958:	2201      	movs	r2, #1
   2595a:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   2595c:	7403      	strb	r3, [r0, #16]
}
   2595e:	4770      	bx	lr

00025960 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   25960:	6010      	str	r0, [r2, #0]
}
   25962:	2000      	movs	r0, #0
   25964:	4770      	bx	lr

00025966 <gatt_ccc_changed>:
{
   25966:	460b      	mov	r3, r1
   25968:	8949      	ldrh	r1, [r1, #10]
   2596a:	8ada      	ldrh	r2, [r3, #22]
   2596c:	4291      	cmp	r1, r2
   2596e:	bf38      	it	cc
   25970:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   25972:	8b1a      	ldrh	r2, [r3, #24]
   25974:	428a      	cmp	r2, r1
   25976:	d003      	beq.n	25980 <gatt_ccc_changed+0x1a>
		ccc->value = value;
   25978:	8319      	strh	r1, [r3, #24]
		if (ccc->cfg_changed) {
   2597a:	69db      	ldr	r3, [r3, #28]
   2597c:	b103      	cbz	r3, 25980 <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   2597e:	4718      	bx	r3
}
   25980:	4770      	bx	lr

00025982 <gatt_indicate_rsp>:
{
   25982:	b510      	push	{r4, lr}
   25984:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   25986:	68a3      	ldr	r3, [r4, #8]
{
   25988:	460a      	mov	r2, r1
	if (params->func) {
   2598a:	b10b      	cbz	r3, 25990 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   2598c:	4621      	mov	r1, r4
   2598e:	4798      	blx	r3
	params->_ref--;
   25990:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   25992:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   25994:	3b01      	subs	r3, #1
   25996:	b2db      	uxtb	r3, r3
   25998:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2599a:	b122      	cbz	r2, 259a6 <gatt_indicate_rsp+0x24>
   2599c:	b91b      	cbnz	r3, 259a6 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   2599e:	4620      	mov	r0, r4
}
   259a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   259a4:	4710      	bx	r2
}
   259a6:	bd10      	pop	{r4, pc}

000259a8 <match_uuid>:
	data->attr = attr;
   259a8:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   259aa:	8091      	strh	r1, [r2, #4]
}
   259ac:	2000      	movs	r0, #0
   259ae:	4770      	bx	lr

000259b0 <gen_hash_m>:
{
   259b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   259b2:	6807      	ldr	r7, [r0, #0]
   259b4:	783d      	ldrb	r5, [r7, #0]
{
   259b6:	b089      	sub	sp, #36	; 0x24
   259b8:	4606      	mov	r6, r0
   259ba:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   259bc:	b9dd      	cbnz	r5, 259f6 <gen_hash_m+0x46>
	switch (u16->val) {
   259be:	887b      	ldrh	r3, [r7, #2]
   259c0:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   259c4:	d004      	beq.n	259d0 <gen_hash_m+0x20>
   259c6:	d810      	bhi.n	259ea <gen_hash_m+0x3a>
   259c8:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   259cc:	2b03      	cmp	r3, #3
   259ce:	d812      	bhi.n	259f6 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   259d0:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   259d4:	2202      	movs	r2, #2
   259d6:	f10d 010a 	add.w	r1, sp, #10
   259da:	4620      	mov	r0, r4
   259dc:	f7fe ff64 	bl	248a8 <tc_cmac_update>
   259e0:	b968      	cbnz	r0, 259fe <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   259e2:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   259e6:	65a2      	str	r2, [r4, #88]	; 0x58
   259e8:	e006      	b.n	259f8 <gen_hash_m+0x48>
	switch (u16->val) {
   259ea:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   259ee:	33ff      	adds	r3, #255	; 0xff
   259f0:	b29b      	uxth	r3, r3
   259f2:	2b04      	cmp	r3, #4
   259f4:	d91e      	bls.n	25a34 <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   259f6:	2501      	movs	r5, #1
}
   259f8:	4628      	mov	r0, r5
   259fa:	b009      	add	sp, #36	; 0x24
   259fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   259fe:	887b      	ldrh	r3, [r7, #2]
   25a00:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25a04:	2202      	movs	r2, #2
   25a06:	f10d 010a 	add.w	r1, sp, #10
   25a0a:	4620      	mov	r0, r4
   25a0c:	f7fe ff4c 	bl	248a8 <tc_cmac_update>
   25a10:	2800      	cmp	r0, #0
   25a12:	d0e6      	beq.n	259e2 <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   25a14:	2000      	movs	r0, #0
   25a16:	9000      	str	r0, [sp, #0]
   25a18:	aa03      	add	r2, sp, #12
   25a1a:	6877      	ldr	r7, [r6, #4]
   25a1c:	2313      	movs	r3, #19
   25a1e:	4631      	mov	r1, r6
   25a20:	47b8      	blx	r7
		if (len < 0) {
   25a22:	1e02      	subs	r2, r0, #0
   25a24:	dbdf      	blt.n	259e6 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   25a26:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25a28:	4620      	mov	r0, r4
   25a2a:	f7fe ff3d 	bl	248a8 <tc_cmac_update>
   25a2e:	2800      	cmp	r0, #0
   25a30:	d1e1      	bne.n	259f6 <gen_hash_m+0x46>
   25a32:	e7d6      	b.n	259e2 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   25a34:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25a38:	2202      	movs	r2, #2
   25a3a:	f10d 010a 	add.w	r1, sp, #10
   25a3e:	4620      	mov	r0, r4
   25a40:	f7fe ff32 	bl	248a8 <tc_cmac_update>
   25a44:	2800      	cmp	r0, #0
   25a46:	d0cc      	beq.n	259e2 <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   25a48:	887b      	ldrh	r3, [r7, #2]
   25a4a:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25a4e:	2202      	movs	r2, #2
   25a50:	f10d 010a 	add.w	r1, sp, #10
   25a54:	e7e8      	b.n	25a28 <gen_hash_m+0x78>

00025a56 <bt_addr_le_eq>:
{
   25a56:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   25a58:	2207      	movs	r2, #7
   25a5a:	f7fe ffe7 	bl	24a2c <memcmp>
}
   25a5e:	fab0 f080 	clz	r0, r0
   25a62:	0940      	lsrs	r0, r0, #5
   25a64:	bd08      	pop	{r3, pc}

00025a66 <atomic_get>:
   25a66:	f3bf 8f5b 	dmb	ish
   25a6a:	6800      	ldr	r0, [r0, #0]
   25a6c:	f3bf 8f5b 	dmb	ish
}
   25a70:	4770      	bx	lr

00025a72 <atomic_or>:
{
   25a72:	b510      	push	{r4, lr}
   25a74:	4603      	mov	r3, r0
}
   25a76:	f3bf 8f5b 	dmb	ish
   25a7a:	e853 0f00 	ldrex	r0, [r3]
   25a7e:	ea40 0201 	orr.w	r2, r0, r1
   25a82:	e843 2400 	strex	r4, r2, [r3]
   25a86:	2c00      	cmp	r4, #0
   25a88:	d1f7      	bne.n	25a7a <atomic_or+0x8>
   25a8a:	f3bf 8f5b 	dmb	ish
   25a8e:	bd10      	pop	{r4, pc}

00025a90 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   25a90:	2207      	movs	r2, #7
   25a92:	f7fe bfdb 	b.w	24a4c <memcpy>

00025a96 <bt_gatt_ccc_cfg_is_matching_conn>:
{
   25a96:	b538      	push	{r3, r4, r5, lr}
   25a98:	460c      	mov	r4, r1
   25a9a:	4605      	mov	r5, r0
	bool conn_encrypted = bt_conn_get_security(conn) >= BT_SECURITY_L2;
   25a9c:	f7ff fa97 	bl	24fce <bt_conn_get_security>
	if (cfg->link_encrypted && !conn_encrypted) {
   25aa0:	7a23      	ldrb	r3, [r4, #8]
   25aa2:	b10b      	cbz	r3, 25aa8 <bt_gatt_ccc_cfg_is_matching_conn+0x12>
   25aa4:	2801      	cmp	r0, #1
   25aa6:	d907      	bls.n	25ab8 <bt_gatt_ccc_cfg_is_matching_conn+0x22>
	return bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer);
   25aa8:	4622      	mov	r2, r4
   25aaa:	4628      	mov	r0, r5
   25aac:	f812 1b01 	ldrb.w	r1, [r2], #1
}
   25ab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer);
   25ab4:	f7ff ba8d 	b.w	24fd2 <bt_conn_is_peer_addr_le>
}
   25ab8:	2000      	movs	r0, #0
   25aba:	bd38      	pop	{r3, r4, r5, pc}

00025abc <z_log_msg_static_create.constprop.0>:
   25abc:	2300      	movs	r3, #0
   25abe:	f7ee ba65 	b.w	13f8c <z_impl_z_log_msg_static_create>

00025ac2 <sc_clear>:
{
   25ac2:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   25ac4:	f100 0690 	add.w	r6, r0, #144	; 0x90
{
   25ac8:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   25aca:	4631      	mov	r1, r6
   25acc:	7a00      	ldrb	r0, [r0, #8]
   25ace:	f7ff f923 	bl	24d18 <bt_addr_le_is_bonded>
   25ad2:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   25ad4:	4631      	mov	r1, r6
   25ad6:	f7f4 fe8f 	bl	1a7f8 <find_sc_cfg>
	if (!cfg) {
   25ada:	b128      	cbz	r0, 25ae8 <sc_clear+0x26>
}
   25adc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   25ae0:	220c      	movs	r2, #12
   25ae2:	2100      	movs	r1, #0
   25ae4:	f7fe bfbd 	b.w	24a62 <memset>
}
   25ae8:	bd70      	pop	{r4, r5, r6, pc}

00025aea <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   25aea:	2a02      	cmp	r2, #2
{
   25aec:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   25aee:	d108      	bne.n	25b02 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   25af0:	2300      	movs	r3, #0
   25af2:	f100 0190 	add.w	r1, r0, #144	; 0x90
   25af6:	461a      	mov	r2, r3
   25af8:	7a00      	ldrb	r0, [r0, #8]
   25afa:	f7f4 ff4d 	bl	1a998 <sc_save>
}
   25afe:	2002      	movs	r0, #2
   25b00:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   25b02:	f7ff ffde 	bl	25ac2 <sc_clear>
   25b06:	e7fa      	b.n	25afe <sc_ccc_cfg_write+0x14>

00025b08 <read_appearance>:
{
   25b08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25b0a:	4615      	mov	r5, r2
   25b0c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   25b10:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   25b12:	f7ff f8fe 	bl	24d12 <bt_get_appearance>
	if (offset > value_len) {
   25b16:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   25b18:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   25b1c:	d80e      	bhi.n	25b3c <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   25b1e:	f1c6 0402 	rsb	r4, r6, #2
   25b22:	42bc      	cmp	r4, r7
   25b24:	bfa8      	it	ge
   25b26:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   25b28:	f10d 0306 	add.w	r3, sp, #6
   25b2c:	4622      	mov	r2, r4
   25b2e:	1999      	adds	r1, r3, r6
   25b30:	4628      	mov	r0, r5
   25b32:	f7fe ff8b 	bl	24a4c <memcpy>
}
   25b36:	4620      	mov	r0, r4
   25b38:	b003      	add	sp, #12
   25b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25b3c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   25b40:	e7f9      	b.n	25b36 <read_appearance+0x2e>

00025b42 <read_name>:
{
   25b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25b46:	4698      	mov	r8, r3
   25b48:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   25b4c:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   25b4e:	f7f1 fd35 	bl	175bc <bt_get_name>
   25b52:	4607      	mov	r7, r0
				 strlen(name));
   25b54:	f7fe ff63 	bl	24a1e <strlen>
	if (offset > value_len) {
   25b58:	b283      	uxth	r3, r0
   25b5a:	42b3      	cmp	r3, r6
   25b5c:	d30c      	bcc.n	25b78 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   25b5e:	1b9c      	subs	r4, r3, r6
   25b60:	4544      	cmp	r4, r8
   25b62:	bfa8      	it	ge
   25b64:	4644      	movge	r4, r8
   25b66:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   25b68:	4622      	mov	r2, r4
   25b6a:	19b9      	adds	r1, r7, r6
   25b6c:	4628      	mov	r0, r5
   25b6e:	f7fe ff6d 	bl	24a4c <memcpy>
}
   25b72:	4620      	mov	r0, r4
   25b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25b78:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   25b7c:	e7f9      	b.n	25b72 <read_name+0x30>

00025b7e <cf_read>:
{
   25b7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25b80:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   25b82:	2300      	movs	r3, #0
{
   25b84:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   25b88:	f88d 3004 	strb.w	r3, [sp, #4]
{
   25b8c:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   25b8e:	f7f4 fe05 	bl	1a79c <find_cf_cfg>
	if (cfg) {
   25b92:	b128      	cbz	r0, 25ba0 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   25b94:	f100 0108 	add.w	r1, r0, #8
   25b98:	2201      	movs	r2, #1
   25b9a:	a801      	add	r0, sp, #4
   25b9c:	f7fe ff56 	bl	24a4c <memcpy>
	if (offset > value_len) {
   25ba0:	2e01      	cmp	r6, #1
   25ba2:	d80d      	bhi.n	25bc0 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   25ba4:	f1c6 0401 	rsb	r4, r6, #1
   25ba8:	42bc      	cmp	r4, r7
   25baa:	bfa8      	it	ge
   25bac:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   25bae:	ab01      	add	r3, sp, #4
   25bb0:	4622      	mov	r2, r4
   25bb2:	1999      	adds	r1, r3, r6
   25bb4:	4628      	mov	r0, r5
   25bb6:	f7fe ff49 	bl	24a4c <memcpy>
}
   25bba:	4620      	mov	r0, r4
   25bbc:	b003      	add	sp, #12
   25bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25bc0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   25bc4:	e7f9      	b.n	25bba <cf_read+0x3c>

00025bc6 <bt_gatt_attr_read_service>:
{
   25bc6:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   25bc8:	68c9      	ldr	r1, [r1, #12]
{
   25bca:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   25bcc:	780a      	ldrb	r2, [r1, #0]
{
   25bce:	461c      	mov	r4, r3
   25bd0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   25bd4:	b992      	cbnz	r2, 25bfc <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   25bd6:	884a      	ldrh	r2, [r1, #2]
   25bd8:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   25bdc:	2b02      	cmp	r3, #2
   25bde:	d818      	bhi.n	25c12 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   25be0:	f1c3 0202 	rsb	r2, r3, #2
   25be4:	4294      	cmp	r4, r2
   25be6:	bfa8      	it	ge
   25be8:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   25bea:	4622      	mov	r2, r4
   25bec:	f10d 0106 	add.w	r1, sp, #6
   25bf0:	4419      	add	r1, r3
   25bf2:	f7fe ff2b 	bl	24a4c <memcpy>
}
   25bf6:	4620      	mov	r0, r4
   25bf8:	b002      	add	sp, #8
   25bfa:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   25bfc:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   25bfe:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   25c02:	d806      	bhi.n	25c12 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   25c04:	f1c3 0210 	rsb	r2, r3, #16
   25c08:	4294      	cmp	r4, r2
   25c0a:	bfa8      	it	ge
   25c0c:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   25c0e:	4622      	mov	r2, r4
   25c10:	e7ee      	b.n	25bf0 <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25c12:	f06f 0406 	mvn.w	r4, #6
   25c16:	e7ee      	b.n	25bf6 <bt_gatt_attr_read_service+0x30>

00025c18 <bt_gatt_attr_read_ccc>:
{
   25c18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   25c1a:	68c9      	ldr	r1, [r1, #12]
{
   25c1c:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   25c20:	4615      	mov	r5, r2
   25c22:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   25c24:	f7f4 fe0a 	bl	1a83c <find_ccc_cfg>
	if (cfg) {
   25c28:	b100      	cbz	r0, 25c2c <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   25c2a:	8940      	ldrh	r0, [r0, #10]
   25c2c:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   25c30:	2e02      	cmp	r6, #2
   25c32:	d80e      	bhi.n	25c52 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   25c34:	f1c6 0402 	rsb	r4, r6, #2
   25c38:	42bc      	cmp	r4, r7
   25c3a:	bfa8      	it	ge
   25c3c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   25c3e:	f10d 0306 	add.w	r3, sp, #6
   25c42:	4622      	mov	r2, r4
   25c44:	1999      	adds	r1, r3, r6
   25c46:	4628      	mov	r0, r5
   25c48:	f7fe ff00 	bl	24a4c <memcpy>
}
   25c4c:	4620      	mov	r0, r4
   25c4e:	b003      	add	sp, #12
   25c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25c52:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   25c56:	e7f9      	b.n	25c4c <bt_gatt_attr_read_ccc+0x34>

00025c58 <set_change_aware_no_store.constprop.0.isra.0>:
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   25c58:	2101      	movs	r1, #1
   25c5a:	300c      	adds	r0, #12
   25c5c:	f7ff bf09 	b.w	25a72 <atomic_or>

00025c60 <sc_restore_rsp>:
{
   25c60:	b538      	push	{r3, r4, r5, lr}
   25c62:	4604      	mov	r4, r0
   25c64:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   25c66:	f7ff fe55 	bl	25914 <bt_att_fixed_chan_only>
   25c6a:	b140      	cbz	r0, 25c7e <sc_restore_rsp+0x1e>
		cfg = find_cf_cfg(conn);
   25c6c:	4620      	mov	r0, r4
   25c6e:	f7f4 fd95 	bl	1a79c <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   25c72:	b120      	cbz	r0, 25c7e <sc_restore_rsp+0x1e>
   25c74:	7a03      	ldrb	r3, [r0, #8]
   25c76:	07db      	lsls	r3, r3, #31
   25c78:	d501      	bpl.n	25c7e <sc_restore_rsp+0x1e>
	bool changed = set_change_aware_no_store(cfg, aware);
   25c7a:	f7ff ffed 	bl	25c58 <set_change_aware_no_store.constprop.0.isra.0>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   25c7e:	b965      	cbnz	r5, 25c9a <sc_restore_rsp+0x3a>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   25c80:	7a20      	ldrb	r0, [r4, #8]
   25c82:	f104 0190 	add.w	r1, r4, #144	; 0x90
   25c86:	f7f4 fdb7 	bl	1a7f8 <find_sc_cfg>
		if (sc_cfg) {
   25c8a:	b130      	cbz	r0, 25c9a <sc_restore_rsp+0x3a>
	memset(&cfg->data, 0, sizeof(cfg->data));
   25c8c:	4629      	mov	r1, r5
   25c8e:	2204      	movs	r2, #4
}
   25c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   25c94:	3008      	adds	r0, #8
   25c96:	f7fe bee4 	b.w	24a62 <memset>
}
   25c9a:	bd38      	pop	{r3, r4, r5, pc}

00025c9c <bt_gatt_attr_value_handle>:
{
   25c9c:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   25c9e:	4604      	mov	r4, r0
   25ca0:	b910      	cbnz	r0, 25ca8 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   25ca2:	2000      	movs	r0, #0
}
   25ca4:	b002      	add	sp, #8
   25ca6:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   25ca8:	2300      	movs	r3, #0
   25caa:	f88d 3004 	strb.w	r3, [sp, #4]
   25cae:	6800      	ldr	r0, [r0, #0]
   25cb0:	f642 0303 	movw	r3, #10243	; 0x2803
   25cb4:	a901      	add	r1, sp, #4
   25cb6:	f8ad 3006 	strh.w	r3, [sp, #6]
   25cba:	f7fe fef4 	bl	24aa6 <bt_uuid_cmp>
   25cbe:	2800      	cmp	r0, #0
   25cc0:	d1ef      	bne.n	25ca2 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   25cc2:	68e3      	ldr	r3, [r4, #12]
   25cc4:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   25cc6:	2800      	cmp	r0, #0
   25cc8:	d1ec      	bne.n	25ca4 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   25cca:	4620      	mov	r0, r4
   25ccc:	f7f4 fff4 	bl	1acb8 <bt_gatt_attr_get_handle>
   25cd0:	3001      	adds	r0, #1
   25cd2:	b280      	uxth	r0, r0
	return handle;
   25cd4:	e7e6      	b.n	25ca4 <bt_gatt_attr_value_handle+0x8>

00025cd6 <bt_gatt_attr_read_chrc>:
{
   25cd6:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   25cd8:	68cc      	ldr	r4, [r1, #12]
{
   25cda:	b087      	sub	sp, #28
   25cdc:	4608      	mov	r0, r1
   25cde:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   25ce0:	79a3      	ldrb	r3, [r4, #6]
   25ce2:	f88d 3004 	strb.w	r3, [sp, #4]
{
   25ce6:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   25cea:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   25cec:	f7ff ffd6 	bl	25c9c <bt_gatt_attr_value_handle>
   25cf0:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   25cf4:	6821      	ldr	r1, [r4, #0]
   25cf6:	780b      	ldrb	r3, [r1, #0]
   25cf8:	b99b      	cbnz	r3, 25d22 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   25cfa:	884b      	ldrh	r3, [r1, #2]
   25cfc:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   25d00:	2405      	movs	r4, #5
	if (offset > value_len) {
   25d02:	42b4      	cmp	r4, r6
   25d04:	d315      	bcc.n	25d32 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   25d06:	1ba4      	subs	r4, r4, r6
   25d08:	42bc      	cmp	r4, r7
   25d0a:	bfa8      	it	ge
   25d0c:	463c      	movge	r4, r7
   25d0e:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   25d10:	ab01      	add	r3, sp, #4
   25d12:	4622      	mov	r2, r4
   25d14:	1999      	adds	r1, r3, r6
   25d16:	4628      	mov	r0, r5
   25d18:	f7fe fe98 	bl	24a4c <memcpy>
}
   25d1c:	4620      	mov	r0, r4
   25d1e:	b007      	add	sp, #28
   25d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   25d22:	2210      	movs	r2, #16
   25d24:	3101      	adds	r1, #1
   25d26:	f10d 0007 	add.w	r0, sp, #7
   25d2a:	f7fe fe8f 	bl	24a4c <memcpy>
		value_len += 16U;
   25d2e:	2413      	movs	r4, #19
   25d30:	e7e7      	b.n	25d02 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25d32:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   25d36:	e7f1      	b.n	25d1c <bt_gatt_attr_read_chrc+0x46>

00025d38 <bt_gatt_foreach_attr>:
{
   25d38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   25d3a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   25d3e:	2300      	movs	r3, #0
   25d40:	9300      	str	r3, [sp, #0]
   25d42:	461a      	mov	r2, r3
   25d44:	f7f5 f800 	bl	1ad48 <bt_gatt_foreach_attr_type>
}
   25d48:	b005      	add	sp, #20
   25d4a:	f85d fb04 	ldr.w	pc, [sp], #4

00025d4e <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   25d4e:	f012 0f01 	tst.w	r2, #1
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   25d52:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   25d54:	d004      	beq.n	25d60 <bt_gatt_check_perm+0x12>
   25d56:	f013 0f95 	tst.w	r3, #149	; 0x95
   25d5a:	d010      	beq.n	25d7e <bt_gatt_check_perm+0x30>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   25d5c:	6848      	ldr	r0, [r1, #4]
   25d5e:	b170      	cbz	r0, 25d7e <bt_gatt_check_perm+0x30>
	if ((mask & BT_GATT_PERM_WRITE) &&
   25d60:	f012 0f02 	tst.w	r2, #2
   25d64:	d004      	beq.n	25d70 <bt_gatt_check_perm+0x22>
   25d66:	f413 7f95 	tst.w	r3, #298	; 0x12a
   25d6a:	d00a      	beq.n	25d82 <bt_gatt_check_perm+0x34>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   25d6c:	6889      	ldr	r1, [r1, #8]
   25d6e:	b141      	cbz	r1, 25d82 <bt_gatt_check_perm+0x34>
	mask &= attr->perm;
   25d70:	401a      	ands	r2, r3
	return 0;
   25d72:	f012 0f3c 	tst.w	r2, #60	; 0x3c
   25d76:	bf14      	ite	ne
   25d78:	2005      	movne	r0, #5
   25d7a:	2000      	moveq	r0, #0
   25d7c:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   25d7e:	2002      	movs	r0, #2
   25d80:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   25d82:	2003      	movs	r0, #3
}
   25d84:	4770      	bx	lr

00025d86 <bt_gatt_change_aware>:
{
   25d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25d8a:	4605      	mov	r5, r0
   25d8c:	4688      	mov	r8, r1
	cfg = find_cf_cfg(conn);
   25d8e:	f7f4 fd05 	bl	1a79c <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   25d92:	4604      	mov	r4, r0
   25d94:	b308      	cbz	r0, 25dda <bt_gatt_change_aware+0x54>
   25d96:	7a03      	ldrb	r3, [r0, #8]
   25d98:	07da      	lsls	r2, r3, #31
   25d9a:	d51e      	bpl.n	25dda <bt_gatt_change_aware+0x54>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   25d9c:	f100 060c 	add.w	r6, r0, #12
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   25da0:	4630      	mov	r0, r6
   25da2:	f7ff fe60 	bl	25a66 <atomic_get>
   25da6:	f010 0701 	ands.w	r7, r0, #1
   25daa:	d116      	bne.n	25dda <bt_gatt_change_aware+0x54>
	if (!req) {
   25dac:	f1b8 0f00 	cmp.w	r8, #0
   25db0:	d014      	beq.n	25ddc <bt_gatt_change_aware+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25db2:	f3bf 8f5b 	dmb	ish
   25db6:	e856 3f00 	ldrex	r3, [r6]
   25dba:	f023 0202 	bic.w	r2, r3, #2
   25dbe:	e846 2100 	strex	r1, r2, [r6]
   25dc2:	2900      	cmp	r1, #0
   25dc4:	d1f7      	bne.n	25db6 <bt_gatt_change_aware+0x30>
   25dc6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   25dca:	079b      	lsls	r3, r3, #30
		bt_att_clear_out_of_sync_sent(conn);
   25dcc:	4628      	mov	r0, r5
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   25dce:	d508      	bpl.n	25de2 <bt_gatt_change_aware+0x5c>
		bt_att_clear_out_of_sync_sent(conn);
   25dd0:	f7ff fda2 	bl	25918 <bt_att_clear_out_of_sync_sent>
	bool changed = set_change_aware_no_store(cfg, aware);
   25dd4:	4620      	mov	r0, r4
   25dd6:	f7ff ff3f 	bl	25c58 <set_change_aware_no_store.constprop.0.isra.0>
		return true;
   25dda:	2701      	movs	r7, #1
}
   25ddc:	4638      	mov	r0, r7
   25dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   25de2:	f7ff fd97 	bl	25914 <bt_att_fixed_chan_only>
   25de6:	2800      	cmp	r0, #0
   25de8:	d0f8      	beq.n	25ddc <bt_gatt_change_aware+0x56>
   25dea:	4628      	mov	r0, r5
   25dec:	f7ff fda4 	bl	25938 <bt_att_out_of_sync_sent_on_fixed>
   25df0:	2800      	cmp	r0, #0
   25df2:	d0f3      	beq.n	25ddc <bt_gatt_change_aware+0x56>
   25df4:	f3bf 8f5b 	dmb	ish
   25df8:	e856 3f00 	ldrex	r3, [r6]
   25dfc:	f023 0302 	bic.w	r3, r3, #2
   25e00:	e846 3200 	strex	r2, r3, [r6]
   25e04:	2a00      	cmp	r2, #0
   25e06:	d1f7      	bne.n	25df8 <bt_gatt_change_aware+0x72>
   25e08:	f3bf 8f5b 	dmb	ish
		bt_att_clear_out_of_sync_sent(conn);
   25e0c:	4628      	mov	r0, r5
   25e0e:	e7df      	b.n	25dd0 <bt_gatt_change_aware+0x4a>

00025e10 <bt_smp_recv>:
{
   25e10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   25e12:	2100      	movs	r1, #0
   25e14:	f04f 32ff 	mov.w	r2, #4294967295
   25e18:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   25e1c:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   25e1e:	4608      	mov	r0, r1
   25e20:	f7ff f96e 	bl	25100 <bt_l2cap_create_pdu_timeout>
   25e24:	f100 060c 	add.w	r6, r0, #12
   25e28:	4604      	mov	r4, r0
   25e2a:	2101      	movs	r1, #1
   25e2c:	4630      	mov	r0, r6
   25e2e:	f7f6 f82b 	bl	1be88 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   25e32:	2505      	movs	r5, #5
   25e34:	7005      	strb	r5, [r0, #0]
   25e36:	2101      	movs	r1, #1
   25e38:	4630      	mov	r0, r6
   25e3a:	f7f6 f825 	bl	1be88 <net_buf_simple_add>
   25e3e:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   25e40:	7005      	strb	r5, [r0, #0]
   25e42:	4622      	mov	r2, r4
   25e44:	9300      	str	r3, [sp, #0]
   25e46:	2106      	movs	r1, #6
   25e48:	4638      	mov	r0, r7
   25e4a:	f7ff f95c 	bl	25106 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   25e4e:	b110      	cbz	r0, 25e56 <bt_smp_recv+0x46>
		net_buf_unref(buf);
   25e50:	4620      	mov	r0, r4
   25e52:	f7f5 fed5 	bl	1bc00 <net_buf_unref>
}
   25e56:	2000      	movs	r0, #0
   25e58:	b003      	add	sp, #12
   25e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00025e5c <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   25e5c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   25e60:	4770      	bx	lr

00025e62 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   25e62:	2000      	movs	r0, #0
   25e64:	4770      	bx	lr

00025e66 <fixed_data_unref>:
}
   25e66:	4770      	bx	lr

00025e68 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   25e68:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   25e6a:	6849      	ldr	r1, [r1, #4]
   25e6c:	6809      	ldr	r1, [r1, #0]
   25e6e:	f7f5 bce5 	b.w	1b83c <net_buf_alloc_len>

00025e72 <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   25e72:	f7fa bc69 	b.w	20748 <z_impl_k_queue_get>

00025e76 <net_buf_simple_pull_le16>:
{
   25e76:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   25e78:	6803      	ldr	r3, [r0, #0]
   25e7a:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   25e7c:	2102      	movs	r1, #2
   25e7e:	f7f5 ffc7 	bl	1be10 <net_buf_simple_pull>
}
   25e82:	4620      	mov	r0, r4
   25e84:	bd10      	pop	{r4, pc}

00025e86 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   25e86:	6802      	ldr	r2, [r0, #0]
   25e88:	6880      	ldr	r0, [r0, #8]
}
   25e8a:	1a10      	subs	r0, r2, r0
   25e8c:	4770      	bx	lr

00025e8e <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   25e8e:	8883      	ldrh	r3, [r0, #4]
   25e90:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   25e92:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   25e94:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   25e96:	6803      	ldr	r3, [r0, #0]
   25e98:	1a5b      	subs	r3, r3, r1
}
   25e9a:	1ad0      	subs	r0, r2, r3
   25e9c:	4770      	bx	lr

00025e9e <net_buf_simple_add_mem>:
{
   25e9e:	b538      	push	{r3, r4, r5, lr}
   25ea0:	460d      	mov	r5, r1
   25ea2:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   25ea4:	4611      	mov	r1, r2
   25ea6:	f7f5 ffef 	bl	1be88 <net_buf_simple_add>
   25eaa:	4622      	mov	r2, r4
   25eac:	4629      	mov	r1, r5
}
   25eae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   25eb2:	f7fe bdcb 	b.w	24a4c <memcpy>

00025eb6 <net_buf_simple_add_u8>:
{
   25eb6:	b510      	push	{r4, lr}
   25eb8:	460c      	mov	r4, r1
	u8 = net_buf_simple_add(buf, 1);
   25eba:	2101      	movs	r1, #1
   25ebc:	f7f5 ffe4 	bl	1be88 <net_buf_simple_add>
	*u8 = val;
   25ec0:	7004      	strb	r4, [r0, #0]
}
   25ec2:	bd10      	pop	{r4, pc}

00025ec4 <set_on_state>:
	__asm__ volatile(
   25ec4:	f04f 0340 	mov.w	r3, #64	; 0x40
   25ec8:	f3ef 8211 	mrs	r2, BASEPRI
   25ecc:	f383 8812 	msr	BASEPRI_MAX, r3
   25ed0:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   25ed4:	6803      	ldr	r3, [r0, #0]
   25ed6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   25eda:	f043 0302 	orr.w	r3, r3, #2
   25ede:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   25ee0:	f382 8811 	msr	BASEPRI, r2
   25ee4:	f3bf 8f6f 	isb	sy
}
   25ee8:	4770      	bx	lr

00025eea <async_start>:
{
   25eea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25eec:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   25eee:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   25ef0:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   25ef2:	f04f 0540 	mov.w	r5, #64	; 0x40
   25ef6:	f3ef 8611 	mrs	r6, BASEPRI
   25efa:	f385 8812 	msr	BASEPRI_MAX, r5
   25efe:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   25f02:	250c      	movs	r5, #12
   25f04:	4369      	muls	r1, r5
   25f06:	440c      	add	r4, r1
   25f08:	6ca5      	ldr	r5, [r4, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   25f0a:	f005 0c07 	and.w	ip, r5, #7
   25f0e:	f1bc 0f01 	cmp.w	ip, #1
   25f12:	d10b      	bne.n	25f2c <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   25f14:	64a7      	str	r7, [r4, #72]	; 0x48
	__asm__ volatile(
   25f16:	f386 8811 	msr	BASEPRI, r6
   25f1a:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   25f1e:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   25f22:	6843      	ldr	r3, [r0, #4]
   25f24:	585b      	ldr	r3, [r3, r1]
   25f26:	4798      	blx	r3
	return 0;
   25f28:	2000      	movs	r0, #0
}
   25f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   25f2c:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   25f30:	42af      	cmp	r7, r5
   25f32:	f386 8811 	msr	BASEPRI, r6
   25f36:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   25f3a:	bf0c      	ite	eq
   25f3c:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   25f40:	f04f 30ff 	movne.w	r0, #4294967295
   25f44:	e7f1      	b.n	25f2a <async_start+0x40>

00025f46 <api_start>:
{
   25f46:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   25f48:	2480      	movs	r4, #128	; 0x80
   25f4a:	9400      	str	r4, [sp, #0]
   25f4c:	f7ff ffcd 	bl	25eea <async_start>
}
   25f50:	b002      	add	sp, #8
   25f52:	bd10      	pop	{r4, pc}

00025f54 <onoff_started_callback>:
	return &data->mgr[type];
   25f54:	6900      	ldr	r0, [r0, #16]
   25f56:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   25f58:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   25f5c:	2100      	movs	r1, #0
   25f5e:	4710      	bx	r2

00025f60 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   25f60:	2000      	movs	r0, #0
   25f62:	f7f8 be45 	b.w	1ebf0 <nrfx_clock_stop>

00025f66 <blocking_start_callback>:
{
   25f66:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   25f68:	f7fa bc58 	b.w	2081c <z_impl_k_sem_give>

00025f6c <api_stop>:
	return stop(dev, subsys, CTX_API);
   25f6c:	2280      	movs	r2, #128	; 0x80
   25f6e:	f7f5 bfe3 	b.w	1bf38 <stop>

00025f72 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   25f72:	2000      	movs	r0, #0
   25f74:	4770      	bx	lr

00025f76 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   25f76:	b538      	push	{r3, r4, r5, lr}
   25f78:	460c      	mov	r4, r1
   25f7a:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   25f7c:	f7f1 fb12 	bl	175a4 <bt_is_ready>
   25f80:	b128      	cbz	r0, 25f8e <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   25f82:	4629      	mov	r1, r5
   25f84:	4620      	mov	r0, r4
}
   25f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   25f8a:	f7f0 bb61 	b.w	16650 <bt_hci_le_rand>
}
   25f8e:	f06f 000a 	mvn.w	r0, #10
   25f92:	bd38      	pop	{r3, r4, r5, pc}

00025f94 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25f94:	6843      	ldr	r3, [r0, #4]
   25f96:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   25f98:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   25f9c:	600b      	str	r3, [r1, #0]
}
   25f9e:	2000      	movs	r0, #0
   25fa0:	4770      	bx	lr

00025fa2 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25fa2:	6843      	ldr	r3, [r0, #4]
   25fa4:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   25fa6:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   25faa:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   25fae:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   25fb2:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   25fb6:	2000      	movs	r0, #0
   25fb8:	4770      	bx	lr

00025fba <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25fba:	6843      	ldr	r3, [r0, #4]
   25fbc:	685b      	ldr	r3, [r3, #4]
}
   25fbe:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   25fc0:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   25fc4:	4770      	bx	lr

00025fc6 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25fc6:	6843      	ldr	r3, [r0, #4]
   25fc8:	685b      	ldr	r3, [r3, #4]
}
   25fca:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   25fcc:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   25fd0:	4770      	bx	lr

00025fd2 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25fd2:	6843      	ldr	r3, [r0, #4]
   25fd4:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   25fd6:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   25fda:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   25fde:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   25fe0:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   25fe4:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   25fe8:	2000      	movs	r0, #0
   25fea:	4770      	bx	lr

00025fec <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   25fec:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   25fee:	6843      	ldr	r3, [r0, #4]
   25ff0:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   25ff2:	7a05      	ldrb	r5, [r0, #8]
   25ff4:	6844      	ldr	r4, [r0, #4]
   25ff6:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   25ffa:	42a3      	cmp	r3, r4
   25ffc:	d302      	bcc.n	26004 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   25ffe:	f06f 0001 	mvn.w	r0, #1
}
   26002:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   26004:	795c      	ldrb	r4, [r3, #5]
   26006:	428c      	cmp	r4, r1
   26008:	d001      	beq.n	2600e <pinctrl_lookup_state+0x22>
		(*state)++;
   2600a:	3308      	adds	r3, #8
   2600c:	e7f0      	b.n	25ff0 <pinctrl_lookup_state+0x4>
			return 0;
   2600e:	2000      	movs	r0, #0
   26010:	e7f7      	b.n	26002 <pinctrl_lookup_state+0x16>

00026012 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   26012:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26016:	4615      	mov	r5, r2
   26018:	b085      	sub	sp, #20
   2601a:	4682      	mov	sl, r0
   2601c:	eb00 0781 	add.w	r7, r0, r1, lsl #2
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   26020:	f04f 0801 	mov.w	r8, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   26024:	4557      	cmp	r7, sl
   26026:	d103      	bne.n	26030 <pinctrl_configure_pins+0x1e>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   26028:	2000      	movs	r0, #0
}
   2602a:	b005      	add	sp, #20
   2602c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   26030:	f8da 3000 	ldr.w	r3, [sl]
		uint32_t psel = NRF_GET_PIN(pins[i]);
   26034:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   26038:	f3c3 2643 	ubfx	r6, r3, #9, #4
			psel = PSEL_DISCONNECTED;
   2603c:	2c7f      	cmp	r4, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
   2603e:	ea4f 4313 	mov.w	r3, r3, lsr #16
			psel = PSEL_DISCONNECTED;
   26042:	bf08      	it	eq
   26044:	f04f 34ff 	moveq.w	r4, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   26048:	2b19      	cmp	r3, #25
   2604a:	f200 808e 	bhi.w	2616a <pinctrl_configure_pins+0x158>
   2604e:	e8df f003 	tbb	[pc, r3]
   26052:	140d      	.short	0x140d
   26054:	28211e1b 	.word	0x28211e1b
   26058:	8c8c8c1e 	.word	0x8c8c8c1e
   2605c:	8c6a398c 	.word	0x8c6a398c
   26060:	8c8c8c8c 	.word	0x8c8c8c8c
   26064:	8c8c8c8c 	.word	0x8c8c8c8c
   26068:	8986836d 	.word	0x8986836d
			NRF_PSEL_UART(reg, TXD) = psel;
   2606c:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
		if (psel != PSEL_DISCONNECTED) {
   26070:	1c62      	adds	r2, r4, #1
   26072:	d165      	bne.n	26140 <pinctrl_configure_pins+0x12e>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   26074:	f10a 0a04 	add.w	sl, sl, #4
   26078:	e7d4      	b.n	26024 <pinctrl_configure_pins+0x12>
			NRF_PSEL_UART(reg, RXD) = psel;
   2607a:	f8c5 4514 	str.w	r4, [r5, #1300]	; 0x514
		if (psel != PSEL_DISCONNECTED) {
   2607e:	1c63      	adds	r3, r4, #1
   26080:	d0f8      	beq.n	26074 <pinctrl_configure_pins+0x62>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   26082:	f04f 0b00 	mov.w	fp, #0
   26086:	e065      	b.n	26154 <pinctrl_configure_pins+0x142>
			NRF_PSEL_UART(reg, RTS) = psel;
   26088:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   2608c:	e7f0      	b.n	26070 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_UART(reg, CTS) = psel;
   2608e:	f8c5 4510 	str.w	r4, [r5, #1296]	; 0x510
   26092:	e7f4      	b.n	2607e <pinctrl_configure_pins+0x6c>
		if (psel != PSEL_DISCONNECTED) {
   26094:	1c60      	adds	r0, r4, #1
			NRF_PSEL_SPIM(reg, SCK) = psel;
   26096:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
		if (psel != PSEL_DISCONNECTED) {
   2609a:	d0eb      	beq.n	26074 <pinctrl_configure_pins+0x62>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   2609c:	f04f 0b00 	mov.w	fp, #0
   260a0:	e005      	b.n	260ae <pinctrl_configure_pins+0x9c>
		if (psel != PSEL_DISCONNECTED) {
   260a2:	1c61      	adds	r1, r4, #1
			NRF_PSEL_SPIM(reg, MOSI) = psel;
   260a4:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
		if (psel != PSEL_DISCONNECTED) {
   260a8:	d0e4      	beq.n	26074 <pinctrl_configure_pins+0x62>
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   260aa:	f04f 0b01 	mov.w	fp, #1
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   260ae:	a803      	add	r0, sp, #12
   260b0:	9403      	str	r4, [sp, #12]
   260b2:	f7f6 fcb5 	bl	1ca20 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   260b6:	fa08 f304 	lsl.w	r3, r8, r4
    p_reg->OUTCLR = clr_mask;
   260ba:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
   260be:	f04f 0901 	mov.w	r9, #1
   260c2:	e009      	b.n	260d8 <pinctrl_configure_pins+0xc6>
			NRF_PSEL_TWIM(reg, SCL) = psel;
   260c4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
   260c8:	2e00      	cmp	r6, #0
   260ca:	d1d8      	bne.n	2607e <pinctrl_configure_pins+0x6c>
		if (psel != PSEL_DISCONNECTED) {
   260cc:	1c63      	adds	r3, r4, #1
   260ce:	d0d1      	beq.n	26074 <pinctrl_configure_pins+0x62>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   260d0:	f04f 0b00 	mov.w	fp, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
   260d4:	46d9      	mov	r9, fp
				drive = NRF_DRIVE_S0D1;
   260d6:	2606      	movs	r6, #6
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   260d8:	f8da 3000 	ldr.w	r3, [sl]
   260dc:	9301      	str	r3, [sp, #4]
   260de:	f403 5100 	and.w	r1, r3, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   260e2:	2900      	cmp	r1, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   260e4:	a803      	add	r0, sp, #12
   260e6:	bf1c      	itt	ne
   260e8:	f04f 0b01 	movne.w	fp, #1
   260ec:	f04f 0900 	movne.w	r9, #0
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   260f0:	9403      	str	r4, [sp, #12]
   260f2:	f7f6 fc95 	bl	1ca20 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   260f6:	eb00 0084 	add.w	r0, r0, r4, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)    |
   260fa:	9b01      	ldr	r3, [sp, #4]
    uint32_t cnf = reg->PIN_CNF[pin_number];
   260fc:	f8d0 1700 	ldr.w	r1, [r0, #1792]	; 0x700
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)    |
   26100:	f3c3 14c1 	ubfx	r4, r3, #7, #2
    cnf &= ~to_update;
   26104:	f421 3141 	bic.w	r1, r1, #197632	; 0x30400
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)  |
   26108:	0233      	lsls	r3, r6, #8
   2610a:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
    cnf &= ~to_update;
   2610e:	f421 7143 	bic.w	r1, r1, #780	; 0x30c
   26112:	ea43 0309 	orr.w	r3, r3, r9
   26116:	f021 0103 	bic.w	r1, r1, #3
   2611a:	430b      	orrs	r3, r1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)      |
   2611c:	ea43 034b 	orr.w	r3, r3, fp, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   26120:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
   26124:	e7a6      	b.n	26074 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SDA) = psel;
   26126:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
   2612a:	e7cd      	b.n	260c8 <pinctrl_configure_pins+0xb6>
			NRF_PSEL_PWM(reg, OUT[0]) = psel;
   2612c:	f8c5 4560 	str.w	r4, [r5, #1376]	; 0x560
		if (psel != PSEL_DISCONNECTED) {
   26130:	1c62      	adds	r2, r4, #1
			write = NRF_GET_INVERT(pins[i]);
   26132:	f8da 3000 	ldr.w	r3, [sl]
		if (psel != PSEL_DISCONNECTED) {
   26136:	d09d      	beq.n	26074 <pinctrl_configure_pins+0x62>
			write = NRF_GET_INVERT(pins[i]);
   26138:	f3c3 3380 	ubfx	r3, r3, #14, #1
    if (value == 0)
   2613c:	2b00      	cmp	r3, #0
   2613e:	d0b4      	beq.n	260aa <pinctrl_configure_pins+0x98>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   26140:	a803      	add	r0, sp, #12
   26142:	9403      	str	r4, [sp, #12]
   26144:	f7f6 fc6c 	bl	1ca20 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   26148:	fa08 f304 	lsl.w	r3, r8, r4
    p_reg->OUTSET = set_mask;
   2614c:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
        nrf_gpio_pin_set(pin_number);
   26150:	f04f 0b01 	mov.w	fp, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
   26154:	46d9      	mov	r9, fp
   26156:	e7bf      	b.n	260d8 <pinctrl_configure_pins+0xc6>
			NRF_PSEL_PWM(reg, OUT[1]) = psel;
   26158:	f8c5 4564 	str.w	r4, [r5, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
   2615c:	e7e8      	b.n	26130 <pinctrl_configure_pins+0x11e>
			NRF_PSEL_PWM(reg, OUT[2]) = psel;
   2615e:	f8c5 4568 	str.w	r4, [r5, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
   26162:	e7e5      	b.n	26130 <pinctrl_configure_pins+0x11e>
			NRF_PSEL_PWM(reg, OUT[3]) = psel;
   26164:	f8c5 456c 	str.w	r4, [r5, #1388]	; 0x56c
   26168:	e7e2      	b.n	26130 <pinctrl_configure_pins+0x11e>
		switch (NRF_GET_FUN(pins[i])) {
   2616a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2616e:	e75c      	b.n	2602a <pinctrl_configure_pins+0x18>

00026170 <uarte_nrfx_config_get>:
	struct uarte_nrfx_data *data = dev->data;
   26170:	6902      	ldr	r2, [r0, #16]
{
   26172:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   26174:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   26178:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2617c:	2000      	movs	r0, #0
   2617e:	4770      	bx	lr

00026180 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   26180:	6843      	ldr	r3, [r0, #4]
   26182:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   26184:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   26188:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2618c:	4770      	bx	lr

0002618e <tx_start>:
{
   2618e:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
   26190:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   26192:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   26194:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   26198:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2619c:	2200      	movs	r2, #0
   2619e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   261a2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   261a6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   261aa:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   261ae:	6862      	ldr	r2, [r4, #4]
   261b0:	06d2      	lsls	r2, r2, #27
   261b2:	d511      	bpl.n	261d8 <tx_start+0x4a>
	if (data->async) {
   261b4:	6902      	ldr	r2, [r0, #16]
   261b6:	68d2      	ldr	r2, [r2, #12]
   261b8:	b12a      	cbz	r2, 261c6 <tx_start+0x38>
		data->async->low_power_mask |= mask;
   261ba:	f8d2 10c0 	ldr.w	r1, [r2, #192]	; 0xc0
   261be:	f041 0101 	orr.w	r1, r1, #1
   261c2:	f8c2 10c0 	str.w	r1, [r2, #192]	; 0xc0
	return config->uarte_regs;
   261c6:	6842      	ldr	r2, [r0, #4]
   261c8:	6812      	ldr	r2, [r2, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   261ca:	2108      	movs	r1, #8
   261cc:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
   261d0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   261d4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   261d8:	2201      	movs	r2, #1
   261da:	609a      	str	r2, [r3, #8]
}
   261dc:	bd10      	pop	{r4, pc}

000261de <user_callback>:
	if (data->async->user_callback) {
   261de:	6903      	ldr	r3, [r0, #16]
   261e0:	68da      	ldr	r2, [r3, #12]
   261e2:	6813      	ldr	r3, [r2, #0]
   261e4:	b10b      	cbz	r3, 261ea <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   261e6:	6852      	ldr	r2, [r2, #4]
   261e8:	4718      	bx	r3
}
   261ea:	4770      	bx	lr

000261ec <notify_uart_rx_rdy>:
{
   261ec:	b570      	push	{r4, r5, r6, lr}
   261ee:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = dev->data;
   261f0:	6906      	ldr	r6, [r0, #16]
{
   261f2:	4604      	mov	r4, r0
   261f4:	460d      	mov	r5, r1
	struct uart_event evt = {
   261f6:	2214      	movs	r2, #20
   261f8:	2100      	movs	r1, #0
   261fa:	a801      	add	r0, sp, #4
   261fc:	f7fe fc31 	bl	24a62 <memset>
   26200:	2302      	movs	r3, #2
   26202:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   26206:	68f3      	ldr	r3, [r6, #12]
	struct uart_event evt = {
   26208:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   2620a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   2620c:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   2620e:	a901      	add	r1, sp, #4
   26210:	4620      	mov	r0, r4
	struct uart_event evt = {
   26212:	e9cd 3503 	strd	r3, r5, [sp, #12]
	user_callback(dev, &evt);
   26216:	f7ff ffe2 	bl	261de <user_callback>
}
   2621a:	b006      	add	sp, #24
   2621c:	bd70      	pop	{r4, r5, r6, pc}

0002621e <rx_buf_release>:
{
   2621e:	b570      	push	{r4, r5, r6, lr}
	if (*buf) {
   26220:	680e      	ldr	r6, [r1, #0]
{
   26222:	b086      	sub	sp, #24
   26224:	4605      	mov	r5, r0
   26226:	460c      	mov	r4, r1
	if (*buf) {
   26228:	b17e      	cbz	r6, 2624a <rx_buf_release+0x2c>
		struct uart_event evt = {
   2622a:	2214      	movs	r2, #20
   2622c:	2100      	movs	r1, #0
   2622e:	a801      	add	r0, sp, #4
   26230:	f7fe fc17 	bl	24a62 <memset>
   26234:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   26236:	eb0d 0103 	add.w	r1, sp, r3
   2623a:	4628      	mov	r0, r5
		struct uart_event evt = {
   2623c:	f88d 3004 	strb.w	r3, [sp, #4]
   26240:	9602      	str	r6, [sp, #8]
		user_callback(dev, &evt);
   26242:	f7ff ffcc 	bl	261de <user_callback>
		*buf = NULL;
   26246:	2300      	movs	r3, #0
   26248:	6023      	str	r3, [r4, #0]
}
   2624a:	b006      	add	sp, #24
   2624c:	bd70      	pop	{r4, r5, r6, pc}

0002624e <notify_rx_disable>:
{
   2624e:	b510      	push	{r4, lr}
   26250:	b086      	sub	sp, #24
   26252:	4604      	mov	r4, r0
	struct uart_event evt = {
   26254:	2214      	movs	r2, #20
   26256:	2100      	movs	r1, #0
   26258:	a801      	add	r0, sp, #4
   2625a:	f7fe fc02 	bl	24a62 <memset>
   2625e:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   26260:	a901      	add	r1, sp, #4
   26262:	4620      	mov	r0, r4
	struct uart_event evt = {
   26264:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   26268:	f7ff ffb9 	bl	261de <user_callback>
}
   2626c:	b006      	add	sp, #24
   2626e:	bd10      	pop	{r4, pc}

00026270 <uarte_nrfx_rx_buf_rsp>:
{
   26270:	b570      	push	{r4, r5, r6, lr}
	return config->uarte_regs;
   26272:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   26274:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   26276:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   26278:	f04f 0040 	mov.w	r0, #64	; 0x40
   2627c:	f3ef 8611 	mrs	r6, BASEPRI
   26280:	f380 8812 	msr	BASEPRI_MAX, r0
   26284:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   26288:	68ec      	ldr	r4, [r5, #12]
   2628a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2628c:	b198      	cbz	r0, 262b6 <uarte_nrfx_rx_buf_rsp+0x46>
	} else if (data->async->rx_next_buf == NULL) {
   2628e:	6e60      	ldr	r0, [r4, #100]	; 0x64
   26290:	b9a0      	cbnz	r0, 262bc <uarte_nrfx_rx_buf_rsp+0x4c>
		data->async->rx_next_buf = buf;
   26292:	6661      	str	r1, [r4, #100]	; 0x64
		data->async->rx_next_buf_len = len;
   26294:	68ec      	ldr	r4, [r5, #12]
   26296:	66a2      	str	r2, [r4, #104]	; 0x68
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   26298:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2629c:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   262a0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   262a4:	f042 0220 	orr.w	r2, r2, #32
   262a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   262ac:	f386 8811 	msr	BASEPRI, r6
   262b0:	f3bf 8f6f 	isb	sy
}
   262b4:	bd70      	pop	{r4, r5, r6, pc}
		err = -EACCES;
   262b6:	f06f 000c 	mvn.w	r0, #12
   262ba:	e7f7      	b.n	262ac <uarte_nrfx_rx_buf_rsp+0x3c>
		err = -EBUSY;
   262bc:	f06f 000f 	mvn.w	r0, #15
   262c0:	e7f4      	b.n	262ac <uarte_nrfx_rx_buf_rsp+0x3c>

000262c2 <uarte_nrfx_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
   262c2:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
   262c4:	68d8      	ldr	r0, [r3, #12]
   262c6:	b120      	cbz	r0, 262d2 <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
   262c8:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
   262ca:	68db      	ldr	r3, [r3, #12]
	return 0;
   262cc:	2000      	movs	r0, #0
	data->async->user_data = user_data;
   262ce:	605a      	str	r2, [r3, #4]
	return 0;
   262d0:	4770      	bx	lr
		return -ENOTSUP;
   262d2:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   262d6:	4770      	bx	lr

000262d8 <uarte_nrfx_poll_in>:
{
   262d8:	b510      	push	{r4, lr}
	const struct uarte_nrfx_data *data = dev->data;
   262da:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   262dc:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   262de:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
   262e0:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
   262e2:	b960      	cbnz	r0, 262fe <uarte_nrfx_poll_in+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   262e4:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   262e8:	b164      	cbz	r4, 26304 <uarte_nrfx_poll_in+0x2c>
	*c = *data->rx_data;
   262ea:	6992      	ldr	r2, [r2, #24]
   262ec:	7812      	ldrb	r2, [r2, #0]
   262ee:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   262f0:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   262f4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   262f8:	2201      	movs	r2, #1
   262fa:	601a      	str	r2, [r3, #0]
}
   262fc:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   262fe:	f06f 0085 	mvn.w	r0, #133	; 0x85
   26302:	e7fb      	b.n	262fc <uarte_nrfx_poll_in+0x24>
		return -1;
   26304:	f04f 30ff 	mov.w	r0, #4294967295
   26308:	e7f8      	b.n	262fc <uarte_nrfx_poll_in+0x24>

0002630a <uarte_nrfx_rx_disable>:
{
   2630a:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2630c:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   2630e:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   26310:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   26312:	68eb      	ldr	r3, [r5, #12]
   26314:	6d9a      	ldr	r2, [r3, #88]	; 0x58
   26316:	b1d2      	cbz	r2, 2634e <uarte_nrfx_rx_disable+0x44>
	if (data->async->rx_next_buf != NULL) {
   26318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   2631a:	b153      	cbz	r3, 26332 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   2631c:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   26320:	f023 0320 	bic.w	r3, r3, #32
   26324:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26328:	2300      	movs	r3, #0
   2632a:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   2632e:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
   26332:	68e8      	ldr	r0, [r5, #12]
   26334:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
   26336:	f000 fc1a 	bl	26b6e <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   2633a:	68eb      	ldr	r3, [r5, #12]
   2633c:	2000      	movs	r0, #0
   2633e:	f883 00ca 	strb.w	r0, [r3, #202]	; 0xca
	data->async->discard_rx_fifo = true;
   26342:	68ea      	ldr	r2, [r5, #12]
   26344:	2301      	movs	r3, #1
   26346:	f882 30cb 	strb.w	r3, [r2, #203]	; 0xcb
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2634a:	6063      	str	r3, [r4, #4]
}
   2634c:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2634e:	f06f 000d 	mvn.w	r0, #13
   26352:	e7fb      	b.n	2634c <uarte_nrfx_rx_disable+0x42>

00026354 <setup_tx_cache>:
{
   26354:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
   26356:	68c3      	ldr	r3, [r0, #12]
   26358:	68da      	ldr	r2, [r3, #12]
   2635a:	69d9      	ldr	r1, [r3, #28]
	if (!remaining) {
   2635c:	1a52      	subs	r2, r2, r1
   2635e:	d00f      	beq.n	26380 <setup_tx_cache+0x2c>
	size_t len = MIN(remaining, CONFIG_UART_ASYNC_TX_CACHE_SIZE);
   26360:	2a08      	cmp	r2, #8
   26362:	bf28      	it	cs
   26364:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
   26366:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
   26368:	68c3      	ldr	r3, [r0, #12]
   2636a:	6999      	ldr	r1, [r3, #24]
   2636c:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
   2636e:	68c3      	ldr	r3, [r0, #12]
   26370:	6898      	ldr	r0, [r3, #8]
   26372:	69d9      	ldr	r1, [r3, #28]
   26374:	4401      	add	r1, r0
   26376:	6998      	ldr	r0, [r3, #24]
   26378:	f7fe fb68 	bl	24a4c <memcpy>
	return true;
   2637c:	2001      	movs	r0, #1
}
   2637e:	bd08      	pop	{r3, pc}
		return false;
   26380:	4610      	mov	r0, r2
   26382:	e7fc      	b.n	2637e <setup_tx_cache+0x2a>

00026384 <rx_flush.isra.0>:
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   26384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return config->uarte_regs;
   26386:	6807      	ldr	r7, [r0, #0]
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
   26388:	4615      	mov	r5, r2
    return p_reg->RXD.AMOUNT;
   2638a:	f8d7 653c 	ldr.w	r6, [r7, #1340]	; 0x53c
	uint8_t *flush_buf = buf ? buf : tmp_buf;
   2638e:	460c      	mov	r4, r1
   26390:	b1e9      	cbz	r1, 263ce <rx_flush.isra.0+0x4a>
		memset(buf, dirty, len);
   26392:	2100      	movs	r1, #0
   26394:	4620      	mov	r0, r4
   26396:	f7fe fb64 	bl	24a62 <memset>
		flush_len = len;
   2639a:	4623      	mov	r3, r4
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2639c:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   263a0:	2300      	movs	r3, #0
    p_reg->RXD.MAXCNT = length;
   263a2:	f8c7 5538 	str.w	r5, [r7, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   263a6:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   263a8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   263ac:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   263b0:	62f9      	str	r1, [r7, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   263b2:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   263b6:	2900      	cmp	r1, #0
   263b8:	d0fb      	beq.n	263b2 <rx_flush.isra.0+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   263ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   263be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
   263c2:	f8d7 053c 	ldr.w	r0, [r7, #1340]	; 0x53c
	if (!buf) {
   263c6:	b92c      	cbnz	r4, 263d4 <rx_flush.isra.0+0x50>
			return rx_amount;
   263c8:	b2c0      	uxtb	r0, r0
}
   263ca:	b003      	add	sp, #12
   263cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flush_len = sizeof(tmp_buf);
   263ce:	2505      	movs	r5, #5
		flush_buf = tmp_buf;
   263d0:	466b      	mov	r3, sp
   263d2:	e7e3      	b.n	2639c <rx_flush.isra.0+0x18>
	if (rx_amount != prev_rx_amount) {
   263d4:	4286      	cmp	r6, r0
   263d6:	d1f7      	bne.n	263c8 <rx_flush.isra.0+0x44>
   263d8:	1962      	adds	r2, r4, r5
	for (int i = 0; i < flush_len; i++) {
   263da:	42a2      	cmp	r2, r4
   263dc:	d101      	bne.n	263e2 <rx_flush.isra.0+0x5e>
	return 0;
   263de:	2000      	movs	r0, #0
   263e0:	e7f3      	b.n	263ca <rx_flush.isra.0+0x46>
		if (buf[i] != dirty) {
   263e2:	f814 3b01 	ldrb.w	r3, [r4], #1
   263e6:	2b00      	cmp	r3, #0
   263e8:	d0f7      	beq.n	263da <rx_flush.isra.0+0x56>
   263ea:	e7ed      	b.n	263c8 <rx_flush.isra.0+0x44>

000263ec <async_uart_release>:
{
   263ec:	b570      	push	{r4, r5, r6, lr}
   263ee:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
   263f0:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
   263f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   263f6:	f3ef 8611 	mrs	r6, BASEPRI
   263fa:	f383 8812 	msr	BASEPRI_MAX, r3
   263fe:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
   26402:	68d0      	ldr	r0, [r2, #12]
   26404:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
   26408:	ea23 0301 	bic.w	r3, r3, r1
   2640c:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
	if (!data->async->low_power_mask) {
   26410:	68d5      	ldr	r5, [r2, #12]
   26412:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   26416:	b973      	cbnz	r3, 26436 <async_uart_release+0x4a>
		if (dir_mask == UARTE_LOW_POWER_RX) {
   26418:	2902      	cmp	r1, #2
   2641a:	d107      	bne.n	2642c <async_uart_release+0x40>
				rx_flush(dev, data->async->rx_flush_buffer,
   2641c:	6860      	ldr	r0, [r4, #4]
   2641e:	2205      	movs	r2, #5
   26420:	f105 01c4 	add.w	r1, r5, #196	; 0xc4
   26424:	f7ff ffae 	bl	26384 <rx_flush.isra.0>
			data->async->rx_flush_cnt =
   26428:	f885 00c9 	strb.w	r0, [r5, #201]	; 0xc9
	return config->uarte_regs;
   2642c:	6863      	ldr	r3, [r4, #4]
   2642e:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   26430:	2200      	movs	r2, #0
   26432:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   26436:	f386 8811 	msr	BASEPRI, r6
   2643a:	f3bf 8f6f 	isb	sy
}
   2643e:	bd70      	pop	{r4, r5, r6, pc}

00026440 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   26440:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   26442:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26444:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   26448:	b940      	cbnz	r0, 2645c <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2644a:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2644c:	079b      	lsls	r3, r3, #30
   2644e:	d406      	bmi.n	2645e <is_tx_ready.isra.0+0x1e>
   26450:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   26454:	3800      	subs	r0, #0
   26456:	bf18      	it	ne
   26458:	2001      	movne	r0, #1
   2645a:	4770      	bx	lr
   2645c:	2001      	movs	r0, #1
}
   2645e:	4770      	bx	lr

00026460 <start_tx_locked>:
{
   26460:	b510      	push	{r4, lr}
   26462:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
   26464:	6840      	ldr	r0, [r0, #4]
   26466:	f7ff ffeb 	bl	26440 <is_tx_ready.isra.0>
   2646a:	68cb      	ldr	r3, [r1, #12]
   2646c:	b918      	cbnz	r0, 26476 <start_tx_locked+0x16>
		data->async->pending_tx = true;
   2646e:	2201      	movs	r2, #1
   26470:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
}
   26474:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
   26476:	2200      	movs	r2, #0
   26478:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
		data->async->tx_amount = -1;
   2647c:	68cb      	ldr	r3, [r1, #12]
   2647e:	f04f 32ff 	mov.w	r2, #4294967295
   26482:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   26486:	68cb      	ldr	r3, [r1, #12]
   26488:	4620      	mov	r0, r4
   2648a:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
}
   2648e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   26492:	f7ff be7c 	b.w	2618e <tx_start>

00026496 <rx_timeout>:
{
   26496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return timer->user_data;
   26498:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   2649a:	68e3      	ldr	r3, [r4, #12]
   2649c:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
   264a0:	f003 07ff 	and.w	r7, r3, #255	; 0xff
   264a4:	bb13      	cbnz	r3, 264ec <rx_timeout+0x56>
	const struct device *dev = data->dev;
   264a6:	6826      	ldr	r6, [r4, #0]
	return config->uarte_regs;
   264a8:	6873      	ldr	r3, [r6, #4]
   264aa:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   264ac:	2210      	movs	r2, #16
   264ae:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
   264b2:	68e3      	ldr	r3, [r4, #12]
   264b4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
	if (read != data->async->rx_total_byte_cnt) {
   264b8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
   264ba:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
   264bc:	bf1f      	itttt	ne
   264be:	66da      	strne	r2, [r3, #108]	; 0x6c
		data->async->rx_timeout_left = data->async->rx_timeout;
   264c0:	68e3      	ldrne	r3, [r4, #12]
   264c2:	6f5a      	ldrne	r2, [r3, #116]	; 0x74
   264c4:	67da      	strne	r2, [r3, #124]	; 0x7c
	int32_t len = data->async->rx_total_byte_cnt
   264c6:	68e3      	ldr	r3, [r4, #12]
		    - data->async->rx_total_user_byte_cnt;
   264c8:	e9d3 211b 	ldrd	r2, r1, [r3, #108]	; 0x6c
   264cc:	1a52      	subs	r2, r2, r1
	if (!HW_RX_COUNTING_ENABLED(data) &&
   264ce:	2a00      	cmp	r2, #0
	int32_t len = data->async->rx_total_byte_cnt
   264d0:	4615      	mov	r5, r2
	if (!HW_RX_COUNTING_ENABLED(data) &&
   264d2:	da0c      	bge.n	264ee <rx_timeout+0x58>
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   264d4:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   264d8:	68e3      	ldr	r3, [r4, #12]
   264da:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   264de:	4281      	cmp	r1, r0
   264e0:	d80b      	bhi.n	264fa <rx_timeout+0x64>
	return config->uarte_regs;
   264e2:	6873      	ldr	r3, [r6, #4]
   264e4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   264e6:	2210      	movs	r2, #16
   264e8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   264ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   264ee:	e9d3 0117 	ldrd	r0, r1, [r3, #92]	; 0x5c
   264f2:	eb02 0c01 	add.w	ip, r2, r1
   264f6:	4584      	cmp	ip, r0
   264f8:	d904      	bls.n	26504 <rx_timeout+0x6e>
		len = data->async->rx_buf_len - data->async->rx_offset;
   264fa:	1a45      	subs	r5, r0, r1
	if (len > 0) {
   264fc:	2d00      	cmp	r5, #0
   264fe:	ddf0      	ble.n	264e2 <rx_timeout+0x4c>
		clipped = true;
   26500:	2701      	movs	r7, #1
   26502:	e005      	b.n	26510 <rx_timeout+0x7a>
	if (len > 0) {
   26504:	2a00      	cmp	r2, #0
   26506:	d0ec      	beq.n	264e2 <rx_timeout+0x4c>
				< data->async->rx_timeout_slab)) {
   26508:	e9d3 121e 	ldrd	r1, r2, [r3, #120]	; 0x78
		if (clipped ||
   2650c:	428a      	cmp	r2, r1
   2650e:	da12      	bge.n	26536 <rx_timeout+0xa0>
			notify_uart_rx_rdy(dev, len);
   26510:	4629      	mov	r1, r5
   26512:	4630      	mov	r0, r6
   26514:	f7ff fe6a 	bl	261ec <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   26518:	68e2      	ldr	r2, [r4, #12]
   2651a:	6e13      	ldr	r3, [r2, #96]	; 0x60
   2651c:	442b      	add	r3, r5
   2651e:	6613      	str	r3, [r2, #96]	; 0x60
			data->async->rx_total_user_byte_cnt += len;
   26520:	68e2      	ldr	r2, [r4, #12]
   26522:	6f13      	ldr	r3, [r2, #112]	; 0x70
   26524:	442b      	add	r3, r5
   26526:	6713      	str	r3, [r2, #112]	; 0x70
		if (clipped) {
   26528:	2f00      	cmp	r7, #0
   2652a:	d0da      	beq.n	264e2 <rx_timeout+0x4c>
			k_timer_stop(&data->async->rx_timeout_timer);
   2652c:	68e0      	ldr	r0, [r4, #12]
   2652e:	3080      	adds	r0, #128	; 0x80
   26530:	f000 fb1d 	bl	26b6e <z_impl_k_timer_stop>
}
   26534:	e7d5      	b.n	264e2 <rx_timeout+0x4c>
			data->async->rx_timeout_left -=
   26536:	1a52      	subs	r2, r2, r1
   26538:	67da      	str	r2, [r3, #124]	; 0x7c
		if (clipped) {
   2653a:	e7d2      	b.n	264e2 <rx_timeout+0x4c>

0002653c <uarte_nrfx_tx_abort>:
{
   2653c:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2653e:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
   26540:	6903      	ldr	r3, [r0, #16]
	return config->uarte_regs;
   26542:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
   26544:	68da      	ldr	r2, [r3, #12]
   26546:	6891      	ldr	r1, [r2, #8]
   26548:	b151      	cbz	r1, 26560 <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
   2654a:	2400      	movs	r4, #0
   2654c:	f882 40cd 	strb.w	r4, [r2, #205]	; 0xcd
	k_timer_stop(&data->async->tx_timeout_timer);
   26550:	68d8      	ldr	r0, [r3, #12]
   26552:	3020      	adds	r0, #32
	z_impl_k_timer_stop(timer);
   26554:	f000 fb0b 	bl	26b6e <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26558:	2301      	movs	r3, #1
   2655a:	60eb      	str	r3, [r5, #12]
	return 0;
   2655c:	4620      	mov	r0, r4
}
   2655e:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   26560:	f06f 000d 	mvn.w	r0, #13
   26564:	e7fb      	b.n	2655e <uarte_nrfx_tx_abort+0x22>

00026566 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   26566:	6b43      	ldr	r3, [r0, #52]	; 0x34
   26568:	6818      	ldr	r0, [r3, #0]
   2656a:	f7ff bfe7 	b.w	2653c <uarte_nrfx_tx_abort>

0002656e <sys_clock_cycle_get_32>:
{
   2656e:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   26570:	f7f6 ff2a 	bl	1d3c8 <z_nrf_rtc_timer_read>
}
   26574:	bd08      	pop	{r3, pc}

00026576 <z_log_msg_static_create.constprop.0>:
   26576:	2300      	movs	r3, #0
   26578:	f7ed bd08 	b.w	13f8c <z_impl_z_log_msg_static_create>

0002657c <dk_set_leds_state>:
	if ((leds_on_mask & ~DK_ALL_LEDS_MSK) != 0 ||
   2657c:	ea40 0301 	orr.w	r3, r0, r1
   26580:	2b0f      	cmp	r3, #15
   26582:	d801      	bhi.n	26588 <dk_set_leds_state+0xc>
   26584:	f7f7 b9a4 	b.w	1d8d0 <dk_set_leds_state.part.0>
}
   26588:	f06f 0015 	mvn.w	r0, #21
   2658c:	4770      	bx	lr

0002658e <dk_set_led_on>:

int dk_set_led_on(uint8_t led_idx)
{
	return dk_set_led(led_idx, 1);
   2658e:	2101      	movs	r1, #1
   26590:	f7f7 b9fe 	b.w	1d990 <dk_set_led>

00026594 <dk_set_led_off>:
}

int dk_set_led_off(uint8_t led_idx)
{
	return dk_set_led(led_idx, 0);
   26594:	2100      	movs	r1, #0
   26596:	f7f7 b9fb 	b.w	1d990 <dk_set_led>

0002659a <hci_driver_close>:
{
   2659a:	b510      	push	{r4, lr}
		hci_ecdh_uninit();
   2659c:	f7f8 fa12 	bl	1e9c4 <hci_ecdh_uninit>
	err = MULTITHREADING_LOCK_ACQUIRE();
   265a0:	f04f 30ff 	mov.w	r0, #4294967295
   265a4:	f04f 31ff 	mov.w	r1, #4294967295
   265a8:	f7f7 fa24 	bl	1d9f4 <multithreading_lock_acquire>
	if (err) {
   265ac:	4604      	mov	r4, r0
   265ae:	b920      	cbnz	r0, 265ba <hci_driver_close+0x20>
	err = sdc_disable();
   265b0:	f7da fd3a 	bl	1028 <sdc_disable>
	if (err) {
   265b4:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   265b6:	f7f7 fa25 	bl	1da04 <multithreading_lock_release>
}
   265ba:	4620      	mov	r0, r4
   265bc:	bd10      	pop	{r4, pc}

000265be <hci_driver_send>:
{
   265be:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   265c0:	8a03      	ldrh	r3, [r0, #16]
{
   265c2:	4605      	mov	r5, r0
	if (!buf->len) {
   265c4:	b373      	cbz	r3, 26624 <hci_driver_send+0x66>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   265c6:	7e03      	ldrb	r3, [r0, #24]
	switch (type) {
   265c8:	b1a3      	cbz	r3, 265f4 <hci_driver_send+0x36>
   265ca:	2b02      	cmp	r3, #2
   265cc:	d12a      	bne.n	26624 <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   265ce:	f04f 30ff 	mov.w	r0, #4294967295
   265d2:	f04f 31ff 	mov.w	r1, #4294967295
   265d6:	f7f7 fa0d 	bl	1d9f4 <multithreading_lock_acquire>
	if (!errcode) {
   265da:	4604      	mov	r4, r0
   265dc:	b940      	cbnz	r0, 265f0 <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   265de:	68e8      	ldr	r0, [r5, #12]
   265e0:	f7e6 fe6e 	bl	d2c0 <sdc_hci_data_put>
   265e4:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   265e6:	f7f7 fa0d 	bl	1da04 <multithreading_lock_release>
		if (errcode) {
   265ea:	b1b4      	cbz	r4, 2661a <hci_driver_send+0x5c>
			receive_signal_raise();
   265ec:	f7f7 faa8 	bl	1db40 <receive_signal_raise>
}
   265f0:	4620      	mov	r0, r4
   265f2:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   265f4:	f04f 30ff 	mov.w	r0, #4294967295
   265f8:	f04f 31ff 	mov.w	r1, #4294967295
   265fc:	f7f7 f9fa 	bl	1d9f4 <multithreading_lock_acquire>
	if (!errcode) {
   26600:	4604      	mov	r4, r0
   26602:	2800      	cmp	r0, #0
   26604:	d1f4      	bne.n	265f0 <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   26606:	68e8      	ldr	r0, [r5, #12]
   26608:	f7f7 fc48 	bl	1de9c <hci_internal_cmd_put>
   2660c:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2660e:	f7f7 f9f9 	bl	1da04 <multithreading_lock_release>
	if (errcode) {
   26612:	2c00      	cmp	r4, #0
   26614:	d1ec      	bne.n	265f0 <hci_driver_send+0x32>
	receive_signal_raise();
   26616:	f7f7 fa93 	bl	1db40 <receive_signal_raise>
		net_buf_unref(buf);
   2661a:	4628      	mov	r0, r5
   2661c:	f7f5 faf0 	bl	1bc00 <net_buf_unref>
   26620:	2400      	movs	r4, #0
   26622:	e7e5      	b.n	265f0 <hci_driver_send+0x32>
	switch (type) {
   26624:	f06f 0415 	mvn.w	r4, #21
   26628:	e7e2      	b.n	265f0 <hci_driver_send+0x32>

0002662a <receive_work_handler>:
	hci_driver_receive_process();
   2662a:	f7f7 bbbb 	b.w	1dda4 <hci_driver_receive_process>

0002662e <hci_internal_supported_commands>:
{
   2662e:	b510      	push	{r4, lr}
   26630:	4604      	mov	r4, r0
	memset(cmds, 0, sizeof(*cmds));
   26632:	2230      	movs	r2, #48	; 0x30
   26634:	2100      	movs	r1, #0
   26636:	f7fe fa14 	bl	24a62 <memset>
	cmds->hci_disconnect = 1;
   2663a:	7823      	ldrb	r3, [r4, #0]
   2663c:	f043 0320 	orr.w	r3, r3, #32
   26640:	7023      	strb	r3, [r4, #0]
	cmds->hci_read_remote_version_information = 1;
   26642:	78a3      	ldrb	r3, [r4, #2]
   26644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   26648:	70a3      	strb	r3, [r4, #2]
	cmds->hci_set_event_mask = 1;
   2664a:	7963      	ldrb	r3, [r4, #5]
   2664c:	f063 033f 	orn	r3, r3, #63	; 0x3f
   26650:	7163      	strb	r3, [r4, #5]
	cmds->hci_read_transmit_power_level = 1;
   26652:	7aa3      	ldrb	r3, [r4, #10]
   26654:	f043 0304 	orr.w	r3, r3, #4
   26658:	72a3      	strb	r3, [r4, #10]
	cmds->hci_read_local_version_information = 1;
   2665a:	7ba3      	ldrb	r3, [r4, #14]
   2665c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   26660:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   26664:	73a3      	strb	r3, [r4, #14]
	cmds->hci_read_bd_addr = 1;
   26666:	7be3      	ldrb	r3, [r4, #15]
   26668:	f043 0302 	orr.w	r3, r3, #2
   2666c:	73e3      	strb	r3, [r4, #15]
	cmds->hci_set_event_mask_page_2 = 1;
   2666e:	7da3      	ldrb	r3, [r4, #22]
   26670:	f043 0304 	orr.w	r3, r3, #4
   26674:	75a3      	strb	r3, [r4, #22]
	cmds->hci_le_set_event_mask = 1;
   26676:	7e63      	ldrb	r3, [r4, #25]
   26678:	f063 0308 	orn	r3, r3, #8
   2667c:	7663      	strb	r3, [r4, #25]
	cmds->hci_le_set_scan_response_data = 1;
   2667e:	7ea3      	ldrb	r3, [r4, #26]
   26680:	f063 033c 	orn	r3, r3, #60	; 0x3c
   26684:	76a3      	strb	r3, [r4, #26]
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   26686:	7ee3      	ldrb	r3, [r4, #27]
   26688:	f063 030c 	orn	r3, r3, #12
   2668c:	76e3      	strb	r3, [r4, #27]
	cmds->hci_le_long_term_key_request_reply = 1;
   2668e:	7f23      	ldrb	r3, [r4, #28]
   26690:	f023 037e 	bic.w	r3, r3, #126	; 0x7e
   26694:	f043 037e 	orr.w	r3, r3, #126	; 0x7e
   26698:	7723      	strb	r3, [r4, #28]
	cmds->hci_read_authenticated_payload_timeout = 1;
   2669a:	f894 3020 	ldrb.w	r3, [r4, #32]
   2669e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   266a2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   266a6:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_data_length = 1;
   266aa:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   266ae:	f063 033f 	orn	r3, r3, #63	; 0x3f
   266b2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_write_suggested_default_data_length = 1;
   266b6:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   266ba:	f023 0307 	bic.w	r3, r3, #7
   266be:	f043 0307 	orr.w	r3, r3, #7
   266c2:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_read_maximum_data_length = 1;
   266c6:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   266ca:	f063 0307 	orn	r3, r3, #7
   266ce:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_le_transmitter_test_v2 = 1;
   266d2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   266d6:	f043 0301 	orr.w	r3, r3, #1
   266da:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	cmds->hci_le_read_transmit_power = 1;
   266de:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
   266e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   266e6:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	cmds->hci_le_generate_dhkey_v2 = 1;
   266ea:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   266ee:	f043 0304 	orr.w	r3, r3, #4
   266f2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_data_related_address_changes = 1;
   266f6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   266fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   266fe:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
   26702:	bd10      	pop	{r4, pc}

00026704 <hci_internal_le_supported_features>:
{
   26704:	b510      	push	{r4, lr}
   26706:	4604      	mov	r4, r0
	memset(features, 0, sizeof(*features));
   26708:	2208      	movs	r2, #8
   2670a:	2100      	movs	r1, #0
   2670c:	f7fe f9a9 	bl	24a62 <memset>
	features->params.le_encryption = 1;
   26710:	7823      	ldrb	r3, [r4, #0]
   26712:	f023 033d 	bic.w	r3, r3, #61	; 0x3d
   26716:	f043 033d 	orr.w	r3, r3, #61	; 0x3d
   2671a:	7023      	strb	r3, [r4, #0]
	features->params.le_2m_phy = 1;
   2671c:	7863      	ldrb	r3, [r4, #1]
   2671e:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   26722:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   26726:	7063      	strb	r3, [r4, #1]
}
   26728:	bd10      	pop	{r4, pc}

0002672a <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   2672a:	2100      	movs	r1, #0
   2672c:	f7f8 b96c 	b.w	1ea08 <cmd_le_generate_dhkey>

00026730 <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   26730:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   26734:	2901      	cmp	r1, #1
   26736:	d801      	bhi.n	2673c <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   26738:	f7f8 b966 	b.w	1ea08 <cmd_le_generate_dhkey>
}
   2673c:	2012      	movs	r0, #18
   2673e:	4770      	bx	lr

00026740 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   26740:	4668      	mov	r0, sp
   26742:	f020 0107 	bic.w	r1, r0, #7
   26746:	468d      	mov	sp, r1
   26748:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   2674a:	f7e5 fb5d 	bl	be08 <MPSL_IRQ_TIMER0_Handler>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   2674e:	f7ee fb3b 	bl	14dc8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   26752:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   26756:	4685      	mov	sp, r0
   26758:	4770      	bx	lr

0002675a <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2675a:	4668      	mov	r0, sp
   2675c:	f020 0107 	bic.w	r1, r0, #7
   26760:	468d      	mov	sp, r1
   26762:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   26764:	f7e5 fafa 	bl	bd5c <MPSL_IRQ_RTC0_Handler>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   26768:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2676c:	4685      	mov	sp, r0
   2676e:	4770      	bx	lr

00026770 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   26770:	4668      	mov	r0, sp
   26772:	f020 0107 	bic.w	r1, r0, #7
   26776:	468d      	mov	sp, r1
   26778:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   2677a:	f7e2 fc35 	bl	8fe8 <MPSL_IRQ_RADIO_Handler>
   2677e:	f7ee fb23 	bl	14dc8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   26782:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   26786:	4685      	mov	sp, r0
   26788:	4770      	bx	lr

0002678a <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(void)
{
   2678a:	b508      	push	{r3, lr}

	mpsl_fem_init();
   2678c:	f7ea f87a 	bl	10884 <mpsl_fem_init>

	return 0;
}
   26790:	2000      	movs	r0, #0
   26792:	bd08      	pop	{r3, pc}

00026794 <nrfx_clock_enable>:
}
   26794:	4770      	bx	lr

00026796 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   26796:	f7e4 bfcf 	b.w	b738 <MPSL_IRQ_CLOCK_Handler>

0002679a <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   2679a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2679e:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   267a2:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   267a4:	bf04      	itt	eq
   267a6:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
   267aa:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
   267ae:	1f83      	subs	r3, r0, #6
   267b0:	4258      	negs	r0, r3
   267b2:	4158      	adcs	r0, r3
   267b4:	4770      	bx	lr

000267b6 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   267b6:	4700      	bx	r0

000267b8 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   267b8:	f000 b9a7 	b.w	26b0a <z_impl_k_busy_wait>

000267bc <nrfx_gppi_channel_endpoints_setup>:
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   267bc:	00c0      	lsls	r0, r0, #3
   267be:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   267c2:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
   267c6:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   267ca:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
}

void nrfx_gppi_channel_endpoints_setup(uint8_t  channel, uint32_t eep, uint32_t tep)
{
    nrf_ppi_channel_endpoint_setup(NRF_PPI, (nrf_ppi_channel_t)channel, eep, tep);
}
   267ce:	4770      	bx	lr

000267d0 <nrf_gpio_pin_present_check>:
    switch (port)
   267d0:	0943      	lsrs	r3, r0, #5
    return (mask & (1UL << pin_number)) ? true : false;
   267d2:	bf03      	ittte	eq
   267d4:	f04f 33ff 	moveq.w	r3, #4294967295
   267d8:	fa23 f000 	lsreq.w	r0, r3, r0
   267dc:	f000 0001 	andeq.w	r0, r0, #1
            return false;
   267e0:	2000      	movne	r0, #0
}
   267e2:	4770      	bx	lr

000267e4 <pin_is_task_output>:
{
   267e4:	b508      	push	{r3, lr}
   267e6:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   267e8:	f7f8 fbde 	bl	1efa8 <pin_is_output>
   267ec:	b110      	cbz	r0, 267f4 <pin_is_task_output+0x10>
   267ee:	4610      	mov	r0, r2
   267f0:	f7f8 fbd0 	bl	1ef94 <pin_in_use_by_te>
}
   267f4:	f000 0001 	and.w	r0, r0, #1
   267f8:	bd08      	pop	{r3, pc}

000267fa <nrf_gpio_reconfigure>:
{
   267fa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   267fe:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   26800:	a801      	add	r0, sp, #4
{
   26802:	e9dd 5808 	ldrd	r5, r8, [sp, #32]
   26806:	460c      	mov	r4, r1
   26808:	4617      	mov	r7, r2
   2680a:	461e      	mov	r6, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2680c:	f7f8 fc3e 	bl	1f08c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   26810:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk                              : 0) |
   26812:	1e39      	subs	r1, r7, #0
   26814:	bf18      	it	ne
   26816:	2101      	movne	r1, #1
   26818:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk                                : 0) |
   2681c:	1e23      	subs	r3, r4, #0
   2681e:	bf18      	it	ne
   26820:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk                               : 0) |
   26822:	2e00      	cmp	r6, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk                                : 0) |
   26824:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk                               : 0) |
   26828:	bf14      	ite	ne
   2682a:	210c      	movne	r1, #12
   2682c:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk                              : 0) |
   2682e:	2d00      	cmp	r5, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk                              : 0) |
   26830:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk                              : 0) |
   26834:	bf14      	ite	ne
   26836:	f44f 61e0 	movne.w	r1, #1792	; 0x700
   2683a:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk                              : 0);
   2683c:	f1b8 0f00 	cmp.w	r8, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk                               : 0) |
   26840:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
   26844:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk                              : 0);
   26848:	bf14      	ite	ne
   2684a:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   2684e:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk                                : 0) |
   26850:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   26852:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)    |
   26856:	b104      	cbz	r4, 2685a <nrf_gpio_reconfigure+0x60>
   26858:	7824      	ldrb	r4, [r4, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos)  |
   2685a:	b10f      	cbz	r7, 26860 <nrf_gpio_reconfigure+0x66>
   2685c:	783f      	ldrb	r7, [r7, #0]
   2685e:	007f      	lsls	r7, r7, #1
   26860:	431c      	orrs	r4, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)   |
   26862:	b10e      	cbz	r6, 26868 <nrf_gpio_reconfigure+0x6e>
   26864:	7836      	ldrb	r6, [r6, #0]
   26866:	00b6      	lsls	r6, r6, #2
   26868:	433c      	orrs	r4, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos)  |
   2686a:	b18d      	cbz	r5, 26890 <nrf_gpio_reconfigure+0x96>
   2686c:	7829      	ldrb	r1, [r5, #0]
   2686e:	0209      	lsls	r1, r1, #8
   26870:	4334      	orrs	r4, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   26872:	f1b8 0f00 	cmp.w	r8, #0
   26876:	d003      	beq.n	26880 <nrf_gpio_reconfigure+0x86>
   26878:	f898 8000 	ldrb.w	r8, [r8]
   2687c:	ea4f 4808 	mov.w	r8, r8, lsl #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)    |
   26880:	4321      	orrs	r1, r4
   26882:	ea41 0108 	orr.w	r1, r1, r8
    reg->PIN_CNF[pin_number] = cnf;
   26886:	f8c0 1700 	str.w	r1, [r0, #1792]	; 0x700
}
   2688a:	b002      	add	sp, #8
   2688c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos)  |
   26890:	4629      	mov	r1, r5
   26892:	e7ed      	b.n	26870 <nrf_gpio_reconfigure+0x76>

00026894 <nrf_gpio_cfg_sense_set>:
{
   26894:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   26896:	f10d 030f 	add.w	r3, sp, #15
   2689a:	9301      	str	r3, [sp, #4]
   2689c:	2300      	movs	r3, #0
{
   2689e:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   268a2:	9300      	str	r3, [sp, #0]
   268a4:	461a      	mov	r2, r3
   268a6:	4619      	mov	r1, r3
   268a8:	f7ff ffa7 	bl	267fa <nrf_gpio_reconfigure>
}
   268ac:	b005      	add	sp, #20
   268ae:	f85d fb04 	ldr.w	pc, [sp], #4

000268b2 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   268b2:	f7f8 bf8d 	b.w	1f7d0 <_DoInit>

000268b6 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
   268b6:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
   268b8:	f7ff fffb 	bl	268b2 <SEGGER_RTT_Init>

	return 0;
}
   268bc:	2000      	movs	r0, #0
   268be:	bd08      	pop	{r3, pc}

000268c0 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   268c0:	b140      	cbz	r0, 268d4 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   268c2:	68c3      	ldr	r3, [r0, #12]
   268c4:	7858      	ldrb	r0, [r3, #1]
   268c6:	f010 0001 	ands.w	r0, r0, #1
   268ca:	bf1e      	ittt	ne
   268cc:	7818      	ldrbne	r0, [r3, #0]
   268ce:	fab0 f080 	clzne	r0, r0
   268d2:	0940      	lsrne	r0, r0, #5
}
   268d4:	4770      	bx	lr

000268d6 <z_early_memset>:
	(void) memset(dst, c, n);
   268d6:	f7fe b8c4 	b.w	24a62 <memset>

000268da <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   268da:	f7fe b8b7 	b.w	24a4c <memcpy>

000268de <k_heap_init>:
{
   268de:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   268e0:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   268e4:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   268e8:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   268ec:	f7ec ba42 	b.w	12d74 <sys_heap_init>

000268f0 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   268f0:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
   268f4:	4313      	orrs	r3, r2
   268f6:	f013 0303 	ands.w	r3, r3, #3
   268fa:	d10c      	bne.n	26916 <create_free_list+0x26>
	slab->free_list = NULL;
   268fc:	6183      	str	r3, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   268fe:	68c1      	ldr	r1, [r0, #12]
   26900:	4299      	cmp	r1, r3
   26902:	d801      	bhi.n	26908 <create_free_list+0x18>
	return 0;
   26904:	2000      	movs	r0, #0
   26906:	4770      	bx	lr
		*(char **)p = slab->free_list;
   26908:	6981      	ldr	r1, [r0, #24]
   2690a:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   2690c:	6901      	ldr	r1, [r0, #16]
		slab->free_list = p;
   2690e:	6182      	str	r2, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   26910:	3301      	adds	r3, #1
		p += slab->block_size;
   26912:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   26914:	e7f3      	b.n	268fe <create_free_list+0xe>
		return -EINVAL;
   26916:	f06f 0015 	mvn.w	r0, #21
}
   2691a:	4770      	bx	lr

0002691c <k_is_in_isr>:
   2691c:	f3ef 8005 	mrs	r0, IPSR
}
   26920:	3800      	subs	r0, #0
   26922:	bf18      	it	ne
   26924:	2001      	movne	r0, #1
   26926:	4770      	bx	lr

00026928 <z_impl_k_thread_name_set>:
}
   26928:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2692c:	4770      	bx	lr

0002692e <k_thread_name_get>:
}
   2692e:	2000      	movs	r0, #0
   26930:	4770      	bx	lr

00026932 <z_impl_k_thread_start>:
	z_sched_start(thread);
   26932:	f7fa bf39 	b.w	217a8 <z_sched_start>

00026936 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   26936:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2693a:	428b      	cmp	r3, r1
   2693c:	d001      	beq.n	26942 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   2693e:	f7fb ba23 	b.w	21d88 <z_set_prio>
}
   26942:	2000      	movs	r0, #0
   26944:	4770      	bx	lr

00026946 <z_queue_node_peek>:
{
   26946:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   26948:	4604      	mov	r4, r0
   2694a:	b130      	cbz	r0, 2695a <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2694c:	6802      	ldr	r2, [r0, #0]
   2694e:	0793      	lsls	r3, r2, #30
   26950:	d003      	beq.n	2695a <z_queue_node_peek+0x14>
		ret = anode->data;
   26952:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   26954:	b109      	cbz	r1, 2695a <z_queue_node_peek+0x14>
			k_free(anode);
   26956:	f000 f9c8 	bl	26cea <k_free>
}
   2695a:	4620      	mov	r0, r4
   2695c:	bd10      	pop	{r4, pc}

0002695e <z_impl_k_queue_init>:
	list->head = NULL;
   2695e:	2300      	movs	r3, #0
	list->tail = NULL;
   26960:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   26964:	6083      	str	r3, [r0, #8]
   26966:	f100 030c 	add.w	r3, r0, #12
   2696a:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   2696e:	f100 0314 	add.w	r3, r0, #20
   26972:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   26976:	4770      	bx	lr

00026978 <k_queue_append>:
{
   26978:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2697a:	2301      	movs	r3, #1
   2697c:	9300      	str	r3, [sp, #0]
   2697e:	2300      	movs	r3, #0
{
   26980:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   26982:	4619      	mov	r1, r3
   26984:	f7f9 fe46 	bl	20614 <queue_insert>
}
   26988:	b003      	add	sp, #12
   2698a:	f85d fb04 	ldr.w	pc, [sp], #4

0002698e <k_queue_prepend>:
{
   2698e:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   26990:	2300      	movs	r3, #0
{
   26992:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   26994:	9300      	str	r3, [sp, #0]
   26996:	4619      	mov	r1, r3
   26998:	f7f9 fe3c 	bl	20614 <queue_insert>
}
   2699c:	b003      	add	sp, #12
   2699e:	f85d fb04 	ldr.w	pc, [sp], #4

000269a2 <z_impl_k_queue_peek_head>:
	return true;
}

void *z_impl_k_queue_peek_head(struct k_queue *queue)
{
	void *ret = z_queue_node_peek(sys_sflist_peek_head(&queue->data_q), false);
   269a2:	6800      	ldr	r0, [r0, #0]
   269a4:	2100      	movs	r1, #0
   269a6:	f7ff bfce 	b.w	26946 <z_queue_node_peek>

000269aa <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   269aa:	b15a      	cbz	r2, 269c4 <z_impl_k_sem_init+0x1a>
   269ac:	428a      	cmp	r2, r1
   269ae:	d309      	bcc.n	269c4 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   269b0:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   269b4:	e9c0 1202 	strd	r1, r2, [r0, #8]
   269b8:	e9c0 0000 	strd	r0, r0, [r0]
   269bc:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   269c0:	2000      	movs	r0, #0
   269c2:	4770      	bx	lr
		return -EINVAL;
   269c4:	f06f 0015 	mvn.w	r0, #21
}
   269c8:	4770      	bx	lr

000269ca <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   269ca:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   269cc:	2301      	movs	r3, #1
   269ce:	408b      	lsls	r3, r1
   269d0:	ea22 0303 	bic.w	r3, r2, r3
   269d4:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   269d6:	fa22 f001 	lsr.w	r0, r2, r1
}
   269da:	f000 0001 	and.w	r0, r0, #1
   269de:	4770      	bx	lr

000269e0 <unschedule_locked>:
{
   269e0:	b510      	push	{r4, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   269e2:	2103      	movs	r1, #3
{
   269e4:	4604      	mov	r4, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   269e6:	300c      	adds	r0, #12
   269e8:	f7ff ffef 	bl	269ca <flag_test_and_clear>
   269ec:	b130      	cbz	r0, 269fc <unschedule_locked+0x1c>
		ret = z_abort_timeout(&dwork->timeout) == 0;
   269ee:	f104 0010 	add.w	r0, r4, #16
   269f2:	f7fb fff7 	bl	229e4 <z_abort_timeout>
   269f6:	fab0 f080 	clz	r0, r0
   269fa:	0940      	lsrs	r0, r0, #5
}
   269fc:	bd10      	pop	{r4, pc}

000269fe <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   269fe:	b120      	cbz	r0, 26a0a <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   26a00:	2200      	movs	r2, #0
   26a02:	4611      	mov	r1, r2
   26a04:	30d0      	adds	r0, #208	; 0xd0
   26a06:	f7fb be5d 	b.w	226c4 <z_sched_wake>
}
   26a0a:	4770      	bx	lr

00026a0c <cancel_async_locked>:
{
   26a0c:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   26a0e:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   26a10:	f3c3 0640 	ubfx	r6, r3, #1, #1
   26a14:	079b      	lsls	r3, r3, #30
{
   26a16:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   26a18:	d416      	bmi.n	26a48 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   26a1a:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   26a1c:	2102      	movs	r1, #2
   26a1e:	300c      	adds	r0, #12
   26a20:	f7ff ffd3 	bl	269ca <flag_test_and_clear>
   26a24:	b180      	cbz	r0, 26a48 <cancel_async_locked+0x3c>
	return list->head;
   26a26:	f8d5 20c8 	ldr.w	r2, [r5, #200]	; 0xc8
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26a2a:	b16a      	cbz	r2, 26a48 <cancel_async_locked+0x3c>
   26a2c:	4294      	cmp	r4, r2
   26a2e:	d11d      	bne.n	26a6c <cancel_async_locked+0x60>
	return node->next;
   26a30:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   26a32:	b99e      	cbnz	r6, 26a5c <cancel_async_locked+0x50>
   26a34:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
	list->head = node;
   26a38:	f8c5 20c8 	str.w	r2, [r5, #200]	; 0xc8
Z_GENLIST_REMOVE(slist, snode)
   26a3c:	429c      	cmp	r4, r3
   26a3e:	d101      	bne.n	26a44 <cancel_async_locked+0x38>
	list->tail = node;
   26a40:	f8c5 20cc 	str.w	r2, [r5, #204]	; 0xcc
	parent->next = child;
   26a44:	2300      	movs	r3, #0
   26a46:	6023      	str	r3, [r4, #0]
	return *flagp;
   26a48:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   26a4a:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   26a4e:	bf1e      	ittt	ne
   26a50:	f043 0302 	orrne.w	r3, r3, #2
   26a54:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   26a56:	f040 0002 	orrne.w	r0, r0, #2
}
   26a5a:	bd70      	pop	{r4, r5, r6, pc}
   26a5c:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   26a5e:	f8d5 20cc 	ldr.w	r2, [r5, #204]	; 0xcc
   26a62:	4294      	cmp	r4, r2
	list->tail = node;
   26a64:	bf08      	it	eq
   26a66:	f8c5 60cc 	streq.w	r6, [r5, #204]	; 0xcc
}
   26a6a:	e7eb      	b.n	26a44 <cancel_async_locked+0x38>
	return node->next;
   26a6c:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26a6e:	6812      	ldr	r2, [r2, #0]
   26a70:	e7db      	b.n	26a2a <cancel_async_locked+0x1e>

00026a72 <k_work_submit_to_queue>:
{
   26a72:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   26a74:	f7fa f9e6 	bl	20e44 <z_work_submit_to_queue>
	if (ret > 0) {
   26a78:	1e04      	subs	r4, r0, #0
   26a7a:	dd09      	ble.n	26a90 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   26a7c:	f04f 0340 	mov.w	r3, #64	; 0x40
   26a80:	f3ef 8011 	mrs	r0, BASEPRI
   26a84:	f383 8812 	msr	BASEPRI_MAX, r3
   26a88:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   26a8c:	f000 f80d 	bl	26aaa <z_reschedule_irqlock>
}
   26a90:	4620      	mov	r0, r4
   26a92:	bd10      	pop	{r4, pc}

00026a94 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   26a94:	f7fa b990 	b.w	20db8 <k_work_busy_get>

00026a98 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   26a98:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   26a9c:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   26aa0:	4283      	cmp	r3, r0
		return b2 - b1;
   26aa2:	bf14      	ite	ne
   26aa4:	1ac0      	subne	r0, r0, r3
	return 0;
   26aa6:	2000      	moveq	r0, #0
}
   26aa8:	4770      	bx	lr

00026aaa <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   26aaa:	4603      	mov	r3, r0
   26aac:	b920      	cbnz	r0, 26ab8 <z_reschedule_irqlock+0xe>
   26aae:	f3ef 8205 	mrs	r2, IPSR
   26ab2:	b90a      	cbnz	r2, 26ab8 <z_reschedule_irqlock+0xe>
   26ab4:	f7ee b85a 	b.w	14b6c <arch_swap>
	__asm__ volatile(
   26ab8:	f383 8811 	msr	BASEPRI, r3
   26abc:	f3bf 8f6f 	isb	sy
}
   26ac0:	4770      	bx	lr

00026ac2 <z_reschedule_unlocked>:
	__asm__ volatile(
   26ac2:	f04f 0340 	mov.w	r3, #64	; 0x40
   26ac6:	f3ef 8011 	mrs	r0, BASEPRI
   26aca:	f383 8812 	msr	BASEPRI_MAX, r3
   26ace:	f3bf 8f6f 	isb	sy
   26ad2:	f7ff bfea 	b.w	26aaa <z_reschedule_irqlock>

00026ad6 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
   26ad6:	2101      	movs	r1, #1
   26ad8:	3818      	subs	r0, #24
   26ada:	f7fb babb 	b.w	22054 <z_sched_wake_thread>

00026ade <z_unpend_all>:
{
   26ade:	b538      	push	{r3, r4, r5, lr}
   26ae0:	4605      	mov	r5, r0
	int need_sched = 0;
   26ae2:	2000      	movs	r0, #0
	return list->head == list;
   26ae4:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26ae6:	42a5      	cmp	r5, r4
   26ae8:	d000      	beq.n	26aec <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   26aea:	b904      	cbnz	r4, 26aee <z_unpend_all+0x10>
}
   26aec:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   26aee:	4620      	mov	r0, r4
   26af0:	f7fb fa64 	bl	21fbc <z_unpend_thread>
		z_ready_thread(thread);
   26af4:	4620      	mov	r0, r4
   26af6:	f7fa fd87 	bl	21608 <z_ready_thread>
		need_sched = 1;
   26afa:	2001      	movs	r0, #1
   26afc:	e7f2      	b.n	26ae4 <z_unpend_all+0x6>

00026afe <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   26afe:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   26b00:	f7fc f86a 	bl	22bd8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   26b04:	bd08      	pop	{r3, pc}

00026b06 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   26b06:	f7fc b867 	b.w	22bd8 <sys_clock_tick_get>

00026b0a <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   26b0a:	b108      	cbz	r0, 26b10 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   26b0c:	f7ee beec 	b.w	158e8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   26b10:	4770      	bx	lr

00026b12 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26b12:	f1b1 3fff 	cmp.w	r1, #4294967295
   26b16:	bf08      	it	eq
   26b18:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   26b1c:	b538      	push	{r3, r4, r5, lr}
   26b1e:	460c      	mov	r4, r1
   26b20:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26b22:	d014      	beq.n	26b4e <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   26b24:	4308      	orrs	r0, r1
   26b26:	d103      	bne.n	26b30 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   26b28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   26b2c:	f7fc b854 	b.w	22bd8 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   26b30:	f06f 0001 	mvn.w	r0, #1
   26b34:	1b40      	subs	r0, r0, r5
   26b36:	f04f 33ff 	mov.w	r3, #4294967295
   26b3a:	eb63 0101 	sbc.w	r1, r3, r1
   26b3e:	2900      	cmp	r1, #0
   26b40:	da04      	bge.n	26b4c <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   26b42:	f7fc f849 	bl	22bd8 <sys_clock_tick_get>
   26b46:	1940      	adds	r0, r0, r5
   26b48:	eb41 0104 	adc.w	r1, r1, r4
}
   26b4c:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   26b4e:	f04f 30ff 	mov.w	r0, #4294967295
   26b52:	4601      	mov	r1, r0
   26b54:	e7fa      	b.n	26b4c <sys_clock_timeout_end_calc+0x3a>

00026b56 <k_timer_init>:
	timer->status = 0U;
   26b56:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   26b58:	e9c0 1208 	strd	r1, r2, [r0, #32]
   26b5c:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   26b60:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   26b64:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   26b68:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   26b6a:	6343      	str	r3, [r0, #52]	; 0x34
}
   26b6c:	4770      	bx	lr

00026b6e <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   26b6e:	b510      	push	{r4, lr}
   26b70:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
   26b72:	f7fb ff37 	bl	229e4 <z_abort_timeout>

	if (inactive) {
   26b76:	b9b0      	cbnz	r0, 26ba6 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   26b78:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26b7a:	b10b      	cbz	r3, 26b80 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   26b7c:	4620      	mov	r0, r4
   26b7e:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   26b80:	f104 0018 	add.w	r0, r4, #24
   26b84:	f7fb fabe 	bl	22104 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   26b88:	b168      	cbz	r0, 26ba6 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   26b8a:	f7fa fd3d 	bl	21608 <z_ready_thread>
   26b8e:	f04f 0340 	mov.w	r3, #64	; 0x40
   26b92:	f3ef 8011 	mrs	r0, BASEPRI
   26b96:	f383 8812 	msr	BASEPRI_MAX, r3
   26b9a:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   26b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26ba2:	f7ff bf82 	b.w	26aaa <z_reschedule_irqlock>
   26ba6:	bd10      	pop	{r4, pc}

00026ba8 <add_event>:
{
   26ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26baa:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   26bac:	e9d0 1300 	ldrd	r1, r3, [r0]
   26bb0:	4288      	cmp	r0, r1
   26bb2:	4604      	mov	r4, r0
   26bb4:	d105      	bne.n	26bc2 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   26bb6:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   26bb8:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   26bbc:	601d      	str	r5, [r3, #0]
	list->tail = node;
   26bbe:	6065      	str	r5, [r4, #4]
   26bc0:	e01d      	b.n	26bfe <add_event+0x56>
	if ((pending == NULL) ||
   26bc2:	2b00      	cmp	r3, #0
   26bc4:	d0f7      	beq.n	26bb6 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   26bc6:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   26bc8:	b100      	cbz	r0, 26bcc <add_event+0x24>
   26bca:	3860      	subs	r0, #96	; 0x60
   26bcc:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   26bd0:	4639      	mov	r1, r7
   26bd2:	f7ff ff61 	bl	26a98 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   26bd6:	2800      	cmp	r0, #0
   26bd8:	dced      	bgt.n	26bb6 <add_event+0xe>
	return list->head == list;
   26bda:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26bdc:	42b4      	cmp	r4, r6
   26bde:	d0ea      	beq.n	26bb6 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   26be0:	2e00      	cmp	r6, #0
   26be2:	d0e8      	beq.n	26bb6 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   26be4:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   26be6:	b101      	cbz	r1, 26bea <add_event+0x42>
   26be8:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   26bea:	4638      	mov	r0, r7
   26bec:	f7ff ff54 	bl	26a98 <z_sched_prio_cmp>
   26bf0:	2800      	cmp	r0, #0
   26bf2:	dd05      	ble.n	26c00 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   26bf4:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   26bf6:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   26bfa:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   26bfc:	6075      	str	r5, [r6, #4]
}
   26bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   26c00:	6863      	ldr	r3, [r4, #4]
   26c02:	429e      	cmp	r6, r3
   26c04:	d0d7      	beq.n	26bb6 <add_event+0xe>
   26c06:	6836      	ldr	r6, [r6, #0]
   26c08:	e7ea      	b.n	26be0 <add_event+0x38>

00026c0a <signal_poll_event>:
{
   26c0a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   26c0e:	6884      	ldr	r4, [r0, #8]
{
   26c10:	4605      	mov	r5, r0
   26c12:	460e      	mov	r6, r1
	if (poller != NULL) {
   26c14:	b144      	cbz	r4, 26c28 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   26c16:	7863      	ldrb	r3, [r4, #1]
   26c18:	2b01      	cmp	r3, #1
   26c1a:	d12e      	bne.n	26c7a <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   26c1c:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   26c20:	f013 0302 	ands.w	r3, r3, #2
   26c24:	d10a      	bne.n	26c3c <signal_poll_event+0x32>
		poller->is_polling = false;
   26c26:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   26c28:	68eb      	ldr	r3, [r5, #12]
   26c2a:	f3c3 3286 	ubfx	r2, r3, #14, #7
   26c2e:	4316      	orrs	r6, r2
	event->poller = NULL;
   26c30:	2000      	movs	r0, #0
	event->state |= state;
   26c32:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   26c36:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   26c38:	60eb      	str	r3, [r5, #12]
	return retcode;
   26c3a:	e03e      	b.n	26cba <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   26c3c:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   26c40:	f1b3 3fff 	cmp.w	r3, #4294967295
   26c44:	bf08      	it	eq
   26c46:	f112 0f02 	cmneq.w	r2, #2
   26c4a:	d032      	beq.n	26cb2 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   26c4c:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   26c50:	4640      	mov	r0, r8
   26c52:	f7fb f9b3 	bl	21fbc <z_unpend_thread>
	arch_thread_return_value_set(thread,
   26c56:	2e08      	cmp	r6, #8
   26c58:	bf0c      	ite	eq
   26c5a:	f06f 0303 	mvneq.w	r3, #3
   26c5e:	2300      	movne	r3, #0
   26c60:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   26c62:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   26c66:	06db      	lsls	r3, r3, #27
   26c68:	d109      	bne.n	26c7e <signal_poll_event+0x74>
   26c6a:	f854 7c48 	ldr.w	r7, [r4, #-72]
   26c6e:	b937      	cbnz	r7, 26c7e <signal_poll_event+0x74>
	z_ready_thread(thread);
   26c70:	4640      	mov	r0, r8
   26c72:	f7fa fcc9 	bl	21608 <z_ready_thread>
		poller->is_polling = false;
   26c76:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   26c78:	e7d6      	b.n	26c28 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   26c7a:	2b02      	cmp	r3, #2
   26c7c:	d001      	beq.n	26c82 <signal_poll_event+0x78>
		poller->is_polling = false;
   26c7e:	2300      	movs	r3, #0
   26c80:	e7d1      	b.n	26c26 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   26c82:	7823      	ldrb	r3, [r4, #0]
   26c84:	2b00      	cmp	r3, #0
   26c86:	d0cf      	beq.n	26c28 <signal_poll_event+0x1e>
   26c88:	f854 7c04 	ldr.w	r7, [r4, #-4]
   26c8c:	2f00      	cmp	r7, #0
   26c8e:	d0f2      	beq.n	26c76 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   26c90:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   26c94:	f1a4 0914 	sub.w	r9, r4, #20
   26c98:	f104 0014 	add.w	r0, r4, #20
   26c9c:	f7fb fea2 	bl	229e4 <z_abort_timeout>
		twork->poll_result = 0;
   26ca0:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   26ca4:	4649      	mov	r1, r9
   26ca6:	4638      	mov	r0, r7
   26ca8:	f7fa f8cc 	bl	20e44 <z_work_submit_to_queue>
		poller->is_polling = false;
   26cac:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   26cb0:	e7ba      	b.n	26c28 <signal_poll_event+0x1e>
		poller->is_polling = false;
   26cb2:	2300      	movs	r3, #0
   26cb4:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   26cb6:	f06f 000a 	mvn.w	r0, #10
}
   26cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00026cbe <z_handle_obj_poll_events>:
{
   26cbe:	4603      	mov	r3, r0
	return list->head == list;
   26cc0:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   26cc2:	4283      	cmp	r3, r0
   26cc4:	d008      	beq.n	26cd8 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   26cc6:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   26cca:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   26ccc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   26cce:	2300      	movs	r3, #0
	node->prev = NULL;
   26cd0:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   26cd4:	f7ff bf99 	b.w	26c0a <signal_poll_event>
}
   26cd8:	4770      	bx	lr

00026cda <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   26cda:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   26cdc:	e9c0 0000 	strd	r0, r0, [r0]
   26ce0:	6083      	str	r3, [r0, #8]
}
   26ce2:	4770      	bx	lr

00026ce4 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   26ce4:	2300      	movs	r3, #0
   26ce6:	6083      	str	r3, [r0, #8]
}
   26ce8:	4770      	bx	lr

00026cea <k_free>:
	if (ptr != NULL) {
   26cea:	b120      	cbz	r0, 26cf6 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   26cec:	1f01      	subs	r1, r0, #4
   26cee:	f850 0c04 	ldr.w	r0, [r0, #-4]
   26cf2:	f7f9 b87f 	b.w	1fdf4 <k_heap_free>
}
   26cf6:	4770      	bx	lr

00026cf8 <k_malloc>:
{
   26cf8:	4601      	mov	r1, r0
	void *ret = k_aligned_alloc(sizeof(void *), size);
   26cfa:	2004      	movs	r0, #4
   26cfc:	f7fc bc1e 	b.w	2353c <k_aligned_alloc>

00026d00 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   26d00:	4770      	bx	lr
	...
